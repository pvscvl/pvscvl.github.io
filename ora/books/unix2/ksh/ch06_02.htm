<html><head>
<title>[Chapter 6] 6.2 Integer Variables and Arithmetic</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:10:32Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm" title="6. Command-line Options and Typed Variables"><link rel="prev" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm" title="6.1 Command-line Options"><link rel="next" href="ch06_03.htm" webstripperlinkwas="ch06_03.htm" title="6.3 Arrays"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm" title="6.1 Command-line Options"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 6.1 Command-line Options" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 6<br>Command-line Options and Typed Variables</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch06_03.htm" webstripperlinkwas="ch06_03.htm" title="6.3 Arrays"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 6.3 Arrays" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="KSH-CH-6-SECT-2">6.2 Integer Variables and Arithmetic</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-9885"></A
><a class="indexterm" name="AUTOID-9889"></A
><a class="indexterm" name="AUTOID-9891"></A
>The expression <b class="emphasis.bold">$(($OPTIND - 1))</B
> in the last example gives
a clue as to how the shell can do integer arithmetic.
As you might guess, the shell interprets words surrounded by
<b class="emphasis.bold">$((</B
> and <b class="emphasis.bold">))</B
> as arithmetic expressions. Variables
in arithmetic expressions do <em class="emphasis">not</EM
> need to be preceded
by dollar signs, though it is not wrong to do so.</P
><p class="para"><a class="indexterm" name="AUTOID-9900"></A
>Arithmetic expressions are evaluated inside double quotes,
like tildes, variables, and command substitutions.
We're <em class="emphasis">finally</EM
> in a position to state the definitive rule
about quoting strings: When in doubt, enclose a string in single quotes, unless it
contains tildes or any expression involving a dollar sign,
in which case you should use double quotes.</P
><p class="para"><a class="indexterm" name="AUTOID-9905"></A
><a class="indexterm" name="AUTOID-9908"></A
>For example, the <em class="emphasis">date</EM
>(1) command on System V-derived
versions of UNIX accepts arguments that tell it how to format
its output. The argument <b class="emphasis.bold">+%j</B
> tells it to print the day of
the year, i.e., the number of days since December 31st of the
previous 
year. </P
><p class="para">We can use <b class="emphasis.bold">+%j</B
> to print a little holiday anticipation
message:</P
><p class="para"><blockquote class="screen"><pre class="screen">print &quot;Only $(( (365-$(date +%j)) / 7 )) weeks until the New Year!&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">We'll show where this fits in the overall scheme of command-line
processing in <a class="xref" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="Input/Output and Command-line Processing">Chapter 7, Input/Output and Command-line Processing</A
>.</P
><p class="para"><a class="indexterm" name="AUTOID-9919"></A
><a class="indexterm" name="AUTOID-9921"></A
>The arithmetic expression feature 
is built in to the Korn shell's syntax, and was 
available in the Bourne shell (most versions) only through the external
command <em class="emphasis">expr</EM
>(1). Thus it is yet another example of a
desirable feature provided by an external command (i.e., a syntactic kludge)
being better integrated into the shell.  <a class="indexterm" name="AUTOID-9924"></A
><a class="indexterm" name="AUTOID-9926"></A
>
<b class="emphasis.bold">[[</B
>/<b class="emphasis.bold">]]</B
> and <b class="emphasis.bold">getopts</B
> are also examples of this 
design trend.</P
><p class="para"><a class="indexterm" name="KSH-CH-6-IX-ARITHMETIC-EXPRESSIONS-OPERATORS"></A
><a class="indexterm" name="AUTOID-9935"></A
>Korn shell arithmetic expressions are equivalent to
their counterparts in the C language.
[5]
Precedence and associativity are the same as in C.
<a class="xref" href="#KSH-CH-6-TAB-1" title="Arithmetic Operators">Table 6.2</A
>
shows the arithmetic operators that are supported.  
Although some of these
are (or contain) special characters, there is no need to backslash-escape them, 
because they are within the <b class="emphasis.bold">$((</B
>...<b class="emphasis.bold">))</B
> syntax.</P
><blockquote class="footnote"><p class="para">[5] <a class="indexterm" name="AUTOID-9939"></A
>The assignment forms of these operators are also permitted.
For example, <b class="emphasis.bold">$((x += 2))</B
> adds 2 to <b class="emphasis.bold">x</B
> and stores the 
result back in <b class="emphasis.bold">x</B
>.</P
></BLOCKQUOTE
><table class="table"><caption class="table"><a class="title" name="KSH-CH-6-TAB-1">Table 6.2: Arithmetic Operators</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Operator</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Meaning</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">+</TD
><td class="entry" rowspan="1" colspan="1">Plus</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-</TD
><td class="entry" rowspan="1" colspan="1">Minus</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">*</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Times</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">/</TD
><td class="entry" rowspan="1" colspan="1">Division (with truncation)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">%</B
></TD
><td class="entry" rowspan="1" colspan="1">Remainder</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">&lt;&lt;</B
></TD
><td class="entry" rowspan="1" colspan="1">Bit-shift left</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">&gt;&gt;</B
></TD
><td class="entry" rowspan="1" colspan="1">Bit-shift right</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">&amp;</B
></TD
><td class="entry" rowspan="1" colspan="1">Bitwise and</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">|</B
></TD
><td class="entry" rowspan="1" colspan="1">Bitwise or</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">~</B
></TD
><td class="entry" rowspan="1" colspan="1">Bitwise not</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">^</B
></TD
><td class="entry" rowspan="1" colspan="1">Bitwise exclusive or</TD
></TR
></TBODY
></TABLE
><p class="para"><a class="indexterm" name="AUTOID-9999"></A
>Parentheses can be used to group subexpressions.  <a class="indexterm" name="AUTOID-10002"></A
><a class="indexterm" name="AUTOID-10006"></A
>
The arithmetic expression syntax also (like C) supports relational operators
as &quot;truth values&quot; of 1 for true and 0 for false. 
<a class="xref" href="#KSH-CH-6-TAB-2" title="Relational Operators">Table 6.3</A
>
shows the relational operators
and the logical operators that can be used to combine relational expressions.</P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-6-TAB-2">Table 6.3: Relational Operators</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Operator</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Meaning</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">&lt;</TD
><td class="entry" rowspan="1" colspan="1">Less than</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">&gt;</TD
><td class="entry" rowspan="1" colspan="1">Greater than</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">&lt;=</TD
><td class="entry" rowspan="1" colspan="1">Less than or equal </TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">&gt;=</TD
><td class="entry" rowspan="1" colspan="1">Greater than or equal</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">==</TD
><td class="entry" rowspan="1" colspan="1">Equal</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">!=</TD
><td class="entry" rowspan="1" colspan="1">Not equal</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">&amp;&amp;</TD
><td class="entry" rowspan="1" colspan="1">Logical and</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">||</TD
><td class="entry" rowspan="1" colspan="1">Logical or</TD
></TR
></TBODY
></TABLE
><p class="para">For example, <b class="emphasis.bold">$((3 &gt; 2))</B
> has the value 1; <b class="emphasis.bold">$(( (3 &gt; 2) || (4 &lt;= 1) ))</B
> also
has the value 1, since at least one of the two subexpressions is true.</P
><p class="para"><a class="indexterm" name="AUTOID-10045"></A
>The shell also supports base <em class="emphasis">N</EM
> numbers, where <em class="emphasis">N</EM
> can be up to 36.
The notation <em class="emphasis">B</EM
><b class="emphasis.bold">#</B
><em class="emphasis">N</EM
> means &quot;<em class="emphasis">N</EM
> base <em class="emphasis">B</EM
>&quot;.
Of course, if you omit the <em class="emphasis">B</EM
><b class="emphasis.bold">#</B
>, the base defaults to 10.<a class="indexterm" name="AUTOID-10057"></A
></P
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-6-SECT-2.1">6.2.1 Arithmetic Conditionals</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-6-IX-CONDITION-TESTS-ARITHMETIC"></A
><a class="indexterm" name="AUTOID-10064"></A
><a class="indexterm" name="AUTOID-10068"></A
>Another construct, closely related to <b class="emphasis.bold">$((...))</B
>, is
<b class="emphasis.bold">((...))</B
> (without the leading dollar sign). We use this
for evaluating arithmetic condition tests, just as <b class="emphasis.bold">[[...]]</B
>
is used for string, file attribute, and other types of tests.</P
><p class="para"><b class="emphasis.bold">((...))</B
> evaluates relational operators differently from
<b class="emphasis.bold">$((...))</B
> so that you can use it in <b class="emphasis.bold">if</B
> and <b class="emphasis.bold">while</B
>
constructs. Instead of producing a textual result, it just sets its
exit status according to the truth of the expression: 0 if true, 
1 otherwise. So, for example, <b class="emphasis.bold">((3 &gt; 2))</B
> produces exit
status 0, as does <b class="emphasis.bold">(( (3 &gt; 2) || (4 &lt;= 1) ))</B
>, but
<b class="emphasis.bold">(( (3 &gt; 2) &amp;&amp; (4 &lt;= 1) ))</B
> has exit status 1 since the second 
subexpression isn't true.</P
><p class="para"><a class="indexterm" name="AUTOID-10083"></A
>You can also use numerical values for truth values within
this construct.  <a class="indexterm" name="AUTOID-10087"></A
>
It's like the analogous concept in C, which
means that it's somewhat counterintuitive to non-C programmers:
a value of 0 means <em class="emphasis">false</EM
> (i.e., returns exit status 1),
and a non-0 value means <em class="emphasis">true</EM
> (returns exit status 0),
e.g., <b class="emphasis.bold">(( 14 ))</B
> is true. See the code for the <em class="emphasis">kshdb</EM
>
debugger in <a class="xref" href="ch09_01.htm" webstripperlinkwas="ch09_01.htm" title="Debugging Shell Programs">Chapter 9</A
> for two more examples of this.<a class="indexterm" name="AUTOID-10094"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-6-SECT-2.2">6.2.2 Arithmetic Variables and Assignment</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-6-IX-LET"></A
><a class="indexterm" name="AUTOID-10100"></A
><a class="indexterm" name="KSH-CH-6-IX-VARIABLES-INTEGER"></A
><a class="indexterm" name="AUTOID-10106"></A
>The <b class="emphasis.bold">((</B
>...<b class="emphasis.bold">))</B
> construct can also be used to define
integer variables and assign values to them. The statement:</P
><p class="para"><blockquote class="screen"><pre class="screen">(( <code class="replaceable"><i>intvar</I
></CODE
>=<code class="replaceable"><i>expression</I
></CODE
> ))</PRE
></BLOCKQUOTE
></P
><p class="para">creates the integer variable <em class="emphasis">intvar</EM
> (if it doesn't already exist)
and assigns to it the result of <em class="emphasis">expression</EM
>.</P
><p class="para">That syntax isn't intuitive, so the shell provides a better
equivalent: the built-in command <b class="emphasis.bold">let</B
>. The syntax is:</P
><p class="para"><blockquote class="screen"><pre class="screen">let <em class="emphasis">intvar</EM
>=<em class="emphasis">expression</EM
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-10126"></A
>It is not necessary (because it's actually redundant)
to surround the expression with
<b class="emphasis.bold">$((</B
> and <b class="emphasis.bold">))</B
> in a <b class="emphasis.bold">let</B
> statement. As with any
variable assignment, there must not be any space on either side
of the equal sign (<b class="emphasis.bold">=</B
>). It is good practice to surround expressions
with quotes, since many characters are treated as special by
the shell (e.g., <code class="literal">*</CODE
>, <b class="emphasis.bold">#</B
>, and parentheses); furthermore, you must
quote expressions that include whitespace (spaces or TABs). See 
<a class="xref" href="#KSH-CH-6-TAB-3" title="Sample Integer Expression Assignments">Table 6.4</A
>
for examples.  <a class="indexterm" name="AUTOID-10136"></A
></P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-6-TAB-3">Table 6.4: Sample Integer Expression Assignments</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Assignment</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Value</TH
></TR
><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">let x=</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">$x</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">1+4</TD
><td class="entry" rowspan="1" colspan="1">5</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">'</CODE
>1 + 4<code class="literal">'</CODE
></TD
><td class="entry" rowspan="1" colspan="1">5</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">'</CODE
>(2+3) * 5<code class="literal">'</CODE
></TD
><td class="entry" rowspan="1" colspan="1">25</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">'</CODE
>2 + 3 * 5<code class="literal">'</CODE
></TD
><td class="entry" rowspan="1" colspan="1">17</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">'</CODE
>17 / 3<code class="literal">'</CODE
></TD
><td class="entry" rowspan="1" colspan="1">5</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">'</CODE
>17 % 3<code class="literal">'</CODE
></TD
><td class="entry" rowspan="1" colspan="1">2</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">'</CODE
>1&lt;&lt;4<code class="literal">'</CODE
></TD
><td class="entry" rowspan="1" colspan="1">16</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">'</CODE
>48&gt;&gt;3<code class="literal">'</CODE
></TD
><td class="entry" rowspan="1" colspan="1">6</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">'</CODE
>17 &amp; 3<code class="literal">'</CODE
></TD
><td class="entry" rowspan="1" colspan="1">1</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">'</CODE
>17 | 3<code class="literal">'</CODE
></TD
><td class="entry" rowspan="1" colspan="1">19</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">'</CODE
>17 ^ 3<code class="literal">'</CODE
></TD
><td class="entry" rowspan="1" colspan="1">18</TD
></TR
></TBODY
></TABLE
><p class="para">Here is a small task that makes use of integer arithmetic.</P
><div class="task"><h4>Task 6.1</H4
><blockquote class="taskinfo"><p class="para">Write a script called <em class="emphasis">pages</EM
> that, given the name of a text
file, tells how many pages of output it contains. Assume that
there are 66 lines to a page but provide an option allowing the
user to override that.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-10209"></A
>We'll make our option <b class="emphasis.bold">-</B
><em class="emphasis">N</EM
>, a la <em class="emphasis">head</EM
>. The syntax for
this single option is so simple that we need not bother with <b class="emphasis.bold">getopts</B
>.
Here is the code:</P
><p class="para"><blockquote class="screen"><pre class="screen">if [[ $1 = -+([0-9]) ]]; then
    let page_lines=${1#-}
    shift
else
    let page_lines=66
fi
let file_lines=&quot;$(wc -l &lt; $1)&quot;

let pages=file_lines/page_lines
if (( file_lines % page_lines &gt; 0 )); then
    let pages=pages+1
fi

print &quot;$1 has $pages pages of text.&quot;</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-10218"></A
>Notice that we use the integer conditional 
<b class="emphasis.bold">(( file_lines % page_lines &gt; 0 ))</B
> rather than the
<b class="emphasis.bold">[[</B
>...<b class="emphasis.bold">]]</B
> form.</P
><p class="para"><a class="indexterm" name="KSH-CH-6-IX-WC"></A
>At the heart of this code is the UNIX utility <em class="emphasis">wc(1)</EM
>, which 
counts the number of lines, words, and characters (bytes) in its
input. By default, its output looks something like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">8      34     161  bob</PRE
></BLOCKQUOTE
></P
><p class="para"><em class="emphasis">wc</EM
>'s output means that the file <em class="emphasis">bob</EM
> has 8 lines, 34 words, and
161 characters. <em class="emphasis">wc</EM
> recognizes the options <b class="emphasis.bold">-l</B
>, <b class="emphasis.bold">-w</B
>,
and <b class="emphasis.bold">-c</B
>, which tell it to print only the number of lines,
words, or characters, respectively.  </P
><p class="para"><em class="emphasis">wc</EM
> normally prints the name of its input file (given as argument).
Since we want only the number of lines, we have to do two things.<a class="indexterm" name="AUTOID-10239"></A
>
First, we give it input from file redirection instead,
as in <b class="emphasis.bold">wc -l &lt; bob</B
> instead of <b class="emphasis.bold">wc -l bob</B
>.
This produces the number of lines preceded by a single space
(which would normally separate the filename from the number).</P
><p class="para">Unfortunately, that space complicates matters:
the statement <b class="emphasis.bold">let file_lines=$(wc -l &lt; $1)</B
> becomes
&quot;let file_lines= <em class="emphasis">N</EM
>&quot; after command substitution; the space
after the equal sign is an error. That leads to the second modification,
the quotes around the command substitution expression. The
statement <b class="emphasis.bold">let file_lines=&quot;&nbsp;</B
><em class="emphasis">N</EM
><b class="emphasis.bold">&quot;</B
> is perfectly legal, and
<b class="emphasis.bold">let</B
> knows how to remove the leading space.<a class="indexterm" name="AUTOID-10252"></A
></P
><p class="para">The first <b class="emphasis.bold">if</B
> clause in the <em class="emphasis">pages</EM
> script 
checks for an option and, if it was given,
strips the dash (<b class="emphasis.bold">-</B
>) off and assigns it to the variable <b class="emphasis.bold">page_lines</B
>.
<em class="emphasis">wc</EM
> in the command substitution expression returns the 
number of lines in the file whose name is given as argument.<a class="indexterm" name="AUTOID-10259"></A
><a class="indexterm" name="AUTOID-10260"></A
></P
><p class="para">The next group of lines calculates the number of pages and,
if there is a remainder after the division, adds 1. Finally,
the appropriate message is printed.</P
><p class="para"><a class="indexterm" name="AUTOID-10263"></A
><a class="indexterm" name="KSH-CH-6-IX-PUSHD"></A
><a class="indexterm" name="KSH-CH-6-IX-POPD"></A
>As a bigger example of integer arithmetic, we will complete our 
emulation of the C shell's <em class="emphasis">pushd</EM
> and <em class="emphasis">popd</EM
> functions
(Task 4-8).  <a class="indexterm" name="AUTOID-10271"></A
><a class="indexterm" name="AUTOID-10273"></A
>
Remember that these functions operate
on <b class="emphasis.bold">DIRSTACK</B
>, a stack of directories represented as a string
with the directory names separated by spaces.<a class="indexterm" name="AUTOID-10277"></A
><a class="indexterm" name="AUTOID-10280"></A
>
The C shell's <em class="emphasis">pushd</EM
> and <em class="emphasis">popd</EM
> take additional
types of arguments, which are:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><b class="emphasis.bold">pushd +n</B
> takes the <em class="emphasis">n</EM
>th directory in the stack
(starting with 0), rotates it to the top, and <b class="emphasis.bold">cd</B
>s to it.</P
></LI
><li class="listitem"><p class="para"><b class="emphasis.bold">pushd</B
> without arguments, instead of complaining, swaps
the two top directories on the stack and <b class="emphasis.bold">cd</B
>s to the new top.</P
></LI
><li class="listitem"><p class="para"><b class="emphasis.bold">popd +n</B
> takes the <em class="emphasis">n</EM
>th directory in the stack and just
deletes it.</P
></LI
></UL
><p class="para">The most useful of these features is the ability to get at the <em class="emphasis">n</EM
>th directory
in the stack. Here are the latest versions of both functions: </P
><p class="para"><blockquote class="screen"><pre class="screen">function pushd { # push current directory onto stack
    dirname=$1
    if [[ -d $dirname &amp;&amp; -x $dirname ]]; then
  	  cd $dirname
        DIRSTACK=&quot;$dirname ${DIRSTACK:-$PWD}&quot;
        print &quot;$DIRSTACK&quot;
    else
        print &quot;still in $PWD.&quot;
    fi
}

function popd {  # pop directory off the stack, cd to new top
    if [[ -n $DIRSTACK ]]; then
        DIRSTACK=${DIRSTACK#* }
        cd ${DIRSTACK%% *}
        print &quot;$PWD&quot;
    else
        print &quot;stack empty, still in $PWD.&quot;
    fi
}</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-10304"></A
><a class="indexterm" name="KSH-CH-6-IX-LET2"></A
><a class="indexterm" name="KSH-CH-6-IX-VARS-INT"></A
>To get at the <em class="emphasis">n</EM
>th directory, we use a <b class="emphasis.bold">while</B
> loop that transfers
the top directory to a temporary copy of the stack <em class="emphasis">n</EM
> times.
We'll put the loop into a function called <em class="emphasis">getNdirs</EM
> that looks
like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">function getNdirs{
    stackfront=''
    let count=0
    while (( count &lt; $1 )); do
        stackfront=&quot;$stackfront ${DIRSTACK%% *}&quot;
        DIRSTACK=${DIRSTACK#* }
        let count=count+1
    done
}</PRE
></BLOCKQUOTE
></P
><p class="para">The argument passed to <em class="emphasis">getNdirs</EM
> is the <em class="emphasis">n</EM
> in question.
The variable <b class="emphasis.bold">stackfront</B
> is the temporary copy that will contain
the first <em class="emphasis">n</EM
> directories when the loop is done. <b class="emphasis.bold">stackfront</B
>
starts as null; <b class="emphasis.bold">count</B
>, which counts the number of loop iterations,
starts as 0.  </P
><p class="para"><a class="indexterm" name="AUTOID-10325"></A
><a class="indexterm" name="AUTOID-10328"></A
>The first line of the loop body
appends the top of the stack (<b class="emphasis.bold">${DIRSTACK%%</B
> <code class="literal">*</CODE
><b class="emphasis.bold">}</B
>) to <b class="emphasis.bold">stackfront</B
>;
the second line deletes the top from the stack. The last line
increments the counter for the next iteration.  
The entire loop executes
<em class="emphasis">N</EM
> times, for values of <b class="emphasis.bold">count</B
> from 0 to <em class="emphasis">N</EM
>-1.</P
><p class="para"><a class="indexterm" name="AUTOID-10339"></A
><a class="indexterm" name="AUTOID-10342"></A
>When the loop finishes, the last directory in <b class="emphasis.bold">$stackfront</B
> is
the <em class="emphasis">N</EM
>th directory. The expression <b class="emphasis.bold">${stackfront##</B
><code class="literal">*</CODE
><b class="emphasis.bold"> }</B
>
extracts this directory. Furthermore, <b class="emphasis.bold">DIRSTACK</B
> now contains
the &quot;back&quot; of the stack, i.e.,
the stack <em class="emphasis">without</EM
> the first <em class="emphasis">n</EM
> directories.
With this in mind, we can now write the code for the improved
versions of <em class="emphasis">pushd</EM
> and <em class="emphasis">popd</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">function pushd {
    if [[ $1 = ++([0-9]) ]]; then
        # case of pushd +n: rotate n-th directory to top
        let num=${1#+}
        getNdirs $num

        newtop=${stackfront##* }
        stackfront=${stackfront%$newtop}

        DIRSTACK=&quot;$newtop $stackfront $DIRSTACK&quot;
        cd $newtop

    elif [[ -z $1 ]]; then
        # case of pushd without args; swap top two directories
        firstdir=${DIRSTACK%% *}
        DIRSTACK=${DIRSTACK#* }
        seconddir=${DIRSTACK%% *}
        DIRSTACK=${DIRSTACK#* } 
        DIRSTACK=&quot;$seconddir $firstdir $DIRSTACK&quot;
        cd $seconddir

    else
  	  cd $dirname
        # normal case of pushd dirname
        dirname=$1
        if [[ -d $dirname &amp;&amp; -x $dirname ]]; then
            DIRSTACK=&quot;$dirname ${DIRSTACK:-$PWD}&quot;
            print &quot;$DIRSTACK&quot;
        else
            print still in &quot;$PWD.&quot;
        fi
    fi
}

function popd {      # pop directory off the stack, cd to new top
    if [[ $1 = ++([0-9]) ]]; then
        # case of popd +n: delete n-th directory from stack
        let num={$1#+}
        getNdirs $num
        stackfront=${stackfront% *}
        DIRSTACK=&quot;$stackfront $DIRSTACK&quot;

    else
        # normal case of popd without argument
        if [[ -n $DIRSTACK ]]; then
            DIRSTACK=${DIRSTACK#* }
            cd ${DIRSTACK%% *}
            print &quot;$PWD&quot;
        else
            print &quot;stack empty, still in $PWD.&quot;
        fi
    fi
}</PRE
></BLOCKQUOTE
></P
><p class="para">These functions have grown rather large; let's look at them in turn.<a class="indexterm" name="AUTOID-10358"></A
>
The <b class="emphasis.bold">if</B
> at the beginning of <em class="emphasis">pushd</EM
> checks if the first
argument is an option of the form <b class="emphasis.bold">+</B
><em class="emphasis">N</EM
>. If so, the first
body of code is run. The first 
<b class="emphasis.bold">let</B
> simply strips the plus sign
(+) from the argument and assigns the result&nbsp;- as an 
integer&nbsp;- to
the variable <b class="emphasis.bold">num</B
>. This, in turn, is passed to the <em class="emphasis">getNdirs</EM
>
function.</P
><p class="para">The next two assignment statements set <b class="emphasis.bold">newtop</B
> to the <em class="emphasis">N</EM
>th
directory&nbsp;- i.e., the last directory in <b class="emphasis.bold">$stackfront</B
>&nbsp;- and 
delete that directory from <b class="emphasis.bold">stackfront</B
>. The final two
lines in this part of <em class="emphasis">pushd</EM
> put the stack back together again
in the appropriate order and <b class="emphasis.bold">cd</B
> to the new top directory.</P
><p class="para">The <b class="emphasis.bold">elif</B
> clause tests for no argument, in which case <em class="emphasis">pushd</EM
>
should swap the top two directories on the stack. The first four lines
of this clause assign the top two directories to <b class="emphasis.bold">firstdir</B
> and
<b class="emphasis.bold">seconddir</B
>, and delete these from the stack. Then, as above,
the code puts the stack back together 
in the new order and <b class="emphasis.bold">cd</B
>s to
the new top directory.  </P
><p class="para">The <b class="emphasis.bold">else</B
> clause corresponds to the usual case, where the user
supplies a directory name as argument.</P
><p class="para"><a class="indexterm" name="AUTOID-10383"></A
><em class="emphasis">popd</EM
> works similarly. 
The <b class="emphasis.bold">if</B
> clause checks for the
<b class="emphasis.bold">+</B
><em class="emphasis">N</EM
> option, 
which in this case means delete the <em class="emphasis">N</EM
>th 
directory. 
A <b class="emphasis.bold">let</B
> extracts the <em class="emphasis">N</EM
> as an integer;
the <em class="emphasis">getNdirs</EM
> function puts the first <em class="emphasis">n</EM
> 
directories into <b class="emphasis.bold">stackfront</B
>. Then the line 
<b class="emphasis.bold">stackfront=${stackfront%&nbsp;*}</B
>
deletes the last directory (the <em class="emphasis">N</EM
>th 
directory) from
<b class="emphasis.bold">stackfront</B
>. Finally, the stack is put back together with
the <em class="emphasis">N</EM
>th directory missing.</P
><p class="para">The <b class="emphasis.bold">else</B
> clause covers the usual case, where the user doesn't
supply an argument.<a class="indexterm" name="AUTOID-10401"></A
><a class="indexterm" name="AUTOID-10402"></A
></P
><p class="para">Before we leave this subject, here are a few exercises that should
test your understanding of this code:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Add code to <em class="emphasis">pushd</EM
> that exits with an error message if
the user supplies no argument and the stack contains fewer than 
two directories.</P
></LI
><li class="listitem"><p class="para">Verify that when the user specifies <b class="emphasis.bold">+</B
><em class="emphasis">N</EM
>
and <em class="emphasis">N</EM
> exceeds the number of directories in the stack, both
<em class="emphasis">pushd</EM
> and <em class="emphasis">popd</EM
> use the last directory as 
the <em class="emphasis">N</EM
>th directory.</P
></LI
><li class="listitem"><p class="para">Modify the <em class="emphasis">getNdirs</EM
> function so that it checks for the
above condition and exits with an appropriate error message if true.</P
></LI
><li class="listitem"><p class="para">Change <em class="emphasis">getNdirs</EM
> so that it uses <em class="emphasis">cut</EM
> (with
command substitution), instead of the <b class="emphasis.bold">while</B
> loop,
to extract the first <em class="emphasis">N</EM
> directories. This uses less code
but runs more slowly because of the extra processes generated.</P
></LI
></OL
><p class="para"><a class="indexterm" name="AUTOID-10426"></A
><a class="indexterm" name="AUTOID-10427"></A
></P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm" title="6.1 Command-line Options"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 6.1 Command-line Options" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch06_03.htm" webstripperlinkwas="ch06_03.htm" title="6.3 Arrays"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 6.3 Arrays" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.1 Command-line Options</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.3 Arrays</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
