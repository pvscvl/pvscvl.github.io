<html><head>
<title>[Chapter 5] 5.3 case</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:09:25Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch05_01.htm" webstripperlinkwas="ch05_01.htm" title="5. Flow Control"><link rel="prev" href="ch05_02.htm" webstripperlinkwas="ch05_02.htm" title="5.2 for"><link rel="next" href="ch05_04.htm" webstripperlinkwas="ch05_04.htm" title="5.4 select"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch05_02.htm" webstripperlinkwas="ch05_02.htm" title="5.2 for"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 5.2 for" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 5<br>Flow Control</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch05_04.htm" webstripperlinkwas="ch05_04.htm" title="5.4 select"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 5.4 select" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="KSH-CH-5-SECT-3">5.3 case</A
></H2
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-CASE"></A
><a class="indexterm" name="AUTOID-8801"></A
><a class="indexterm" name="AUTOID-8803"></A
>The next flow control construct we will cover is <b class="emphasis.bold">case</B
>.
While the <b class="emphasis.bold">case</B
> statement in Pascal and the similar <b class="emphasis.bold">switch</B
>
statement in C can be used to test simple values like integers and
characters, the Korn shell's <b class="emphasis.bold">case</B
> construct lets you test
strings against patterns that can contain wildcard characters.
Like its conventional language counterparts, <b class="emphasis.bold">case</B
> lets you
express a series of if-then-else type statements in a concise way.</P
><p class="para"><a class="indexterm" name="AUTOID-8811"></A
>The syntax of <b class="emphasis.bold">case</B
> is as follows:</P
><p class="para"><blockquote class="screen"><pre class="screen">case <em class="emphasis">expression</EM
> in
    <em class="emphasis">pattern1</EM
> )
        <em class="emphasis">statements ;;</EM
>
    <em class="emphasis">pattern2</EM
> )
        <em class="emphasis">statements ;;</EM
>
    ...
esac</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-8823"></A
>Any of the <em class="emphasis">pattern</EM
>s can actually be several patterns separated
by pipe characters (<b class="emphasis.bold">|</B
>). If <em class="emphasis">expression</EM
> matches
one of the patterns, its corresponding statements are executed.
If there are several patterns separated by pipe characters, the
expression can match any of them in order for the associated statements
to be run. The patterns are checked in order until a match is found;
if none is found, nothing happens.</P
><p class="para">This rather ungainly syntax should become clearer with an example.<a class="indexterm" name="KSH-CH-5-IX-C-COMPILERS-2"></A
>
An obvious choice is to revisit our solution to Task 4-2, the front-end
for the C compiler. Earlier in this chapter, we wrote some
code, that processed input files according to their suffixes
(<em class="emphasis">.c</EM
> <em class="emphasis">.s</EM
>, or <em class="emphasis">.o</EM
> for C, assembly, or object code, respectively).</P
><p class="para">We can improve upon this solution in two ways.  <a class="indexterm" name="AUTOID-8836"></A
>
First, we can
use <b class="emphasis.bold">for</B
> to allow multiple files to be processed at one time;
second, we can use <b class="emphasis.bold">case</B
> to streamline the code:<a class="indexterm" name="AUTOID-8840"></A
><a class="indexterm" name="AUTOID-8843"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen">for filename in $*; do
    case $filename in
        *.c )
            objname=${filename%.c}.o
            ccom $filename $objname ;;
        *.s )
            objname=${filename%.s}.o
            as $filename $objname ;;
        *.o ) ;;
        *   )
            print &quot;error: $filename is not a source or object file.&quot;
            return 1 ;;
    esac
done</PRE
></BLOCKQUOTE
></P
><p class="para">The <b class="emphasis.bold">case</B
> construct in this code handles four cases. The first
two are similar to the <b class="emphasis.bold">if</B
> and first <b class="emphasis.bold">elif</B
> cases in the
code earlier in this chapter; they call the compiler or the assembler if the
filename ends in <em class="emphasis">.c</EM
> or <em class="emphasis">.s</EM
> respectively.</P
><p class="para">After that, the code is a bit different. Recall that if the
filename ends in <em class="emphasis">.o</EM
> nothing is to be done (on the assumption
that the relevant files will be linked later). If the filename
does not end in <em class="emphasis">.o</EM
> there is an error. We handle this with
the case <code class="literal">*</CODE
><b class="emphasis.bold">.o )</B
>, which has no statements. There is nothing
wrong with a &quot;case&quot; for which the script does nothing.</P
><p class="para"><a class="indexterm" name="AUTOID-8860"></A
>The final case is <code class="literal">*</CODE
>, which is a catchall
for whatever didn't match the other cases.  <a class="indexterm" name="AUTOID-8864"></A
><a class="indexterm" name="AUTOID-8866"></A
>
(In fact, a <code class="literal">*</CODE
> case
is analogous to a <b class="emphasis.bold">default</B
> case in C and an <b class="emphasis.bold">otherwise</B
>
case in some Pascal-derived languages.)</P
><p class="para">The surrounding <b class="emphasis.bold">for</B
> loop processes all command-line arguments
properly.  <a class="indexterm" name="KSH-CH-5-IX-LINKING-2"></A
>
This leads to a further enhancement: now that we know
how to process all arguments, we should be able to write the
code that passes all of the object files to the linker
(the program <em class="emphasis">ld</EM
>) at the end.  
We can do this by building up a string of object file
names, separated by spaces, and hand that off to the linker when
we've processed all of the input files. We initialize the string
to null and append an object file name each time one is created,
i.e., during each iteration of the <b class="emphasis.bold">for</B
> loop.
The code for this is simple, requiring only minor additions:</P
><p class="para"><blockquote class="screen"><pre class="screen">objfiles=&quot;&quot;
for filename in $*; do
    case $filename in
        *.c )
            objname=${filename%.c}.o
            ccom $filename $objname ;;
        *.s )
            objname=${filename%.s}.o
            as $filename $objname ;;
        *.o )
            objname=$filename ;;
        *   )
            print &quot;error: $filename is not a source or object file.&quot;
            return 1 ;;
    esac
    objfiles=&quot;$objfiles $objname&quot;
done
ld $objfiles</PRE
></BLOCKQUOTE
></P
><p class="para">The first line in this version of the script initializes the
variable <b class="emphasis.bold">objfiles</B
> to null.
[16]
We added a line of code in
the <b class="emphasis.bold">*.o</B
> case to set <b class="emphasis.bold">objname</B
> equal to <b class="emphasis.bold">$filename</B
>,
because we already know it's an object file. Thus, the value
of <b class="emphasis.bold">objname</B
> is set in every case-except for the error case,
in which the routine prints a message and bails out.</P
><blockquote class="footnote"><p class="para">[16] This isn't strictly necessary, because all variables are
assumed to be null if not explicitly initialized
(unless the <b class="emphasis.bold">nounset</B
> option is turned on). It
just makes the code easier to read.</P
></BLOCKQUOTE
><p class="para">The last line of code in the <b class="emphasis.bold">for</B
> loop body appends a space and
the latest <b class="emphasis.bold">$objname</B
> to <b class="emphasis.bold">objfiles</B
>. Calling
this script with the same arguments as in Figure 5.1 would result
in <b class="emphasis.bold">$objfiles</B
> being equal to &quot;&nbsp;a.o b.o c.o d.o&quot;
when the <b class="emphasis.bold">for</B
> loop finishes (the leading space doesn't matter).
This list of object filenames is given to <em class="emphasis">ld</EM
> as a single argument,
but the shell divides it up into multiple file names properly.<a class="indexterm" name="AUTOID-8895"></A
><a class="indexterm" name="AUTOID-8896"></A
></P
><p class="para">We'll return to this example once more in <a class="xref" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm" title="Command-line Options and Typed Variables">Chapter 6</A
>
when we discuss how to handle dash options on the command line.
Meanwhile, here is a new task whose initial solution will use <b class="emphasis.bold">case</B
>.<a class="indexterm" name="KSH-CH-5-IX-TERM"></A
><a class="indexterm" name="KSH-CH-5-IX-ENVVARS-TERM"></A
></P
><div class="task"><h4>Task 5.4</H4
><blockquote class="taskinfo"><p class="para">You are a system administrator,[17] and you need to
set up the system so that users' <b class="emphasis.bold">TERM</B
> environment variables
reflect
correctly what type of terminal they are on. Write some code that
does this.</P
><blockquote class="footnote"><p class="para">[17] Our condolences.</P
></BLOCKQUOTE
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-8912"></A
>The code for the solution to this task should go into the file
<em class="emphasis">/etc/profile</EM
>, which is the master startup file that is run
for each user <em class="emphasis">before</EM
> his or her <em class="emphasis">.profile</EM
>.</P
><p class="para">For the time being, we will assume that you have a traditional
mainframe-style setup, in which terminals are hard-wired to
the computer.  <a class="indexterm" name="AUTOID-8918"></A
>
This means that you can determine which (physical)
terminal is being used by the line (or <em class="emphasis">tty</EM
>) it is on.
This is typically a name like <em class="emphasis">/dev/ttyNN</EM
>,
where <em class="emphasis">NN</EM
> is the line number.
You can find your tty with the command <em class="emphasis">tty</EM
>(1),
which prints it on the standard output.</P
><p class="para">Let's assume that your system has ten lines plus a system
console line (<em class="emphasis">/dev/console</EM
>), with the following terminals:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Lines tty01, tty03, and tty04 are Givalt GL35a's
(<em class="emphasis">terminfo</EM
> name &quot;gl35a&quot;).</P
></LI
><li class="listitem"><p class="para">Line tty07 is a Tsoris T-2000 (&quot;t2000&quot;).</P
></LI
><li class="listitem"><p class="para">Line tty08 and the console are Shande 531s (&quot;s531&quot;).</P
></LI
><li class="listitem"><p class="para">The rest are Vey VT99s (&quot;vt99&quot;).</P
></LI
></UL
><p class="para">Here is the code that does the job:</P
><p class="para"><blockquote class="screen"><pre class="screen">case $(tty) in
    /dev/tty0[134]            ) TERM=gl35a ;;
    /dev/tty07                ) TERM=t2000 ;;
    /dev/tty08 | /dev/console ) TERM=s531  ;;
    *                         ) TERM=vt99  ;;
esac</PRE
></BLOCKQUOTE
></P
><p class="para">The value that <b class="emphasis.bold">case</B
> checks is the result of command substitution.
Otherwise, the only thing new about this code is the pipe character
after <em class="emphasis">/dev/tty08</EM
>.  This means that
<em class="emphasis">/dev/tty08</EM
> and <em class="emphasis">/dev/console</EM
> are alternate patterns for the case
that sets <b class="emphasis.bold">TERM</B
> to &quot;s531&quot;.</P
><p class="para">Note that it is <em class="emphasis">not</EM
> possible
to put alternate patterns on separate lines unless you use backslash
continuation characters at the end of all but the last line,
i.e., the line:</P
><p class="para"><blockquote class="screen"><pre class="screen">/dev/tty08 | /dev/console ) TERM=s531  ;;</PRE
></BLOCKQUOTE
></P
><p class="para">could be changed to the slightly more readable:</P
><p class="para"><blockquote class="screen"><pre class="screen">/dev/tty08 | \
    /dev/console   ) TERM=s531  ;;</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-8953"></A
><a class="indexterm" name="AUTOID-8954"></A
>The backslash must be at the end of the line. If you omit it,
or if there are characters (even blanks) following it, the shell
complains with a syntax error message.</P
><p class="para">This problem is actually better solved using a file that contains
a table of lines and terminal types. We'll see how to do it this way
in <a class="xref" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="Input/Output and Command-line Processing">Chapter 7</A
>.<a class="indexterm" name="AUTOID-8957"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch05_02.htm" webstripperlinkwas="ch05_02.htm" title="5.2 for"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 5.2 for" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch05_04.htm" webstripperlinkwas="ch05_04.htm" title="5.4 select"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 5.4 select" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.2 for</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.4 select</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
