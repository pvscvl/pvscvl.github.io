<html><head>
<title>[Chapter 6] 6.3 Arrays</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:10:49Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm" title="6. Command-line Options and Typed Variables"><link rel="prev" href="ch06_02.htm" webstripperlinkwas="ch06_02.htm" title="6.2 Integer Variables and Arithmetic"><link rel="next" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="7. Input/Output and Command-line Processing"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch06_02.htm" webstripperlinkwas="ch06_02.htm" title="6.2 Integer Variables and Arithmetic"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 6.2 Integer Variables and Arithmetic" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 6<br>Command-line Options and Typed Variables</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="7. Input/Output and Command-line Processing"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 7. Input/Output and Command-line Processing" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="KSH-CH-6-SECT-3">6.3 Arrays</A
></H2
><p class="para"><a class="indexterm" name="KSH-CH-6-IX-ARRAYS"></A
><a class="indexterm" name="AUTOID-10433"></A
>So far we have seen two types of variables: character strings 
and integers. The third type of variable the Korn shell supports
is an <em class="emphasis">array</EM
>.  
As you may know, an array is like a list of things; you can refer
to specific elements in an array with integer <em class="emphasis">indices</EM
>, so 
that <em class="emphasis">a[i]</EM
> refers to the <em class="emphasis">i</EM
>th element of array <em class="emphasis">a</EM
>.</P
><p class="para">The Korn shell provides an array facility that, while useful, is
much more limited 
than analogous features in conventional programming
languages. In particular, arrays can be only one-dimensional
(i.e., no arrays of arrays), and they are limited to 1024
elements. Indices can start at 0.</P
><p class="para"><a class="indexterm" name="AUTOID-10444"></A
>There are two ways to assign values to elements of an array.
The first is the most intuitive: you can use the standard 
shell variable assignment syntax with the array index in brackets
(<b class="emphasis.bold">[]</B
>).
For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">nicknames[2]=bob
nicknames[3]=ed</PRE
></BLOCKQUOTE
></P
><p class="para">puts the values <b class="emphasis.bold">bob</B
> and <b class="emphasis.bold">ed</B
> into the elements of the array 
<b class="emphasis.bold">nicknames</B
>
with indices 2 and 3, respectively. As with regular shell variables,
values assigned to array elements are treated as character strings
unless the assignment is preceded by <b class="emphasis.bold">let</B
>.</P
><p class="para">The second way to assign values to an array is with a variant of
the <b class="emphasis.bold">set</B
> statement, which we saw in <a class="xref" href="ch03_01.htm" webstripperlinkwas="ch03_01.htm" title="Customizing Your Environment">Chapter 3, Customizing Your Environment</A
>. The
statement:</P
><p class="para"><blockquote class="screen"><pre class="screen">set -A <em class="emphasis">aname val1 val2 val3</EM
> ...</PRE
></BLOCKQUOTE
></P
><p class="para">creates the array <em class="emphasis">aname</EM
> (if it doesn't already exist) and
assigns
<em class="emphasis">val1</EM
> to <em class="emphasis">aname[0]</EM
>, <em class="emphasis">val2</EM
> to <em class="emphasis">aname[1]</EM
>, etc.
As you would guess, this is more convenient for loading up an array
with an initial set of values.<a class="indexterm" name="AUTOID-10467"></A
><a class="indexterm" name="AUTOID-10470"></A
><a class="indexterm" name="AUTOID-10473"></A
></P
><p class="para"><a class="indexterm" name="AUTOID-10477"></A
>To extract a value from an array, use the syntax 
<b class="emphasis.bold">${</B
><em class="emphasis">aname</EM
>
<b class="emphasis.bold">[</B
><em class="emphasis">i</EM
><b class="emphasis.bold">]}</B
>.
For example, <b class="emphasis.bold">${nicknames[2]}</B
> has the value &quot;bob&quot;.  
The index <em class="emphasis">i</EM
> can be an arithmetic expression-see above.  <a class="indexterm" name="AUTOID-10487"></A
><a class="indexterm" name="AUTOID-10490"></A
>
If you use <code class="literal">*</CODE
> in place
of the index, the value will be all elements, separated by spaces.
Omitting the index is the same as specifying index 0.</P
><p class="para">Now we come to the somewhat unusual aspect of Korn shell arrays.
Assume that the only values assigned to <b class="emphasis.bold">nicknames</B
> are the two we saw
above. If you type <b class="emphasis.bold">print</B
> <code class="literal">&quot;</CODE
><b class="emphasis.bold">${nicknames[</B
><code class="literal">*</CODE
><b class="emphasis.bold">]}&quot;</B
>, you will see the output:</P
><p class="para"><blockquote class="screen"><pre class="screen">bob ed</PRE
></BLOCKQUOTE
></P
><p class="para">In other words, <b class="emphasis.bold">nicknames[0]</B
> and <b class="emphasis.bold">nicknames[1]</B
> don't exist.
Furthermore, if you were to type:</P
><p class="para"><blockquote class="screen"><pre class="screen">nicknames[9]=pete
nicknames[31]=ralph</PRE
></BLOCKQUOTE
></P
><p class="para">and then type <b class="emphasis.bold">print</B
> <code class="literal">&quot;</CODE
><b class="emphasis.bold">${nicknames[</B
><code class="literal">*</CODE
><b class="emphasis.bold">]}&quot;</B
>, the output would look like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">bob ed pete ralph</PRE
></BLOCKQUOTE
></P
><p class="para">This is why we said &quot;the elements of <b class="emphasis.bold">nicknames</B
> with indices 2 and 3&quot; earlier, 
instead of &quot;the 2nd and 3rd elements of <b class="emphasis.bold">nicknames</B
>&quot;.  Any array elements with
unassigned values just don't exist; if you try to access their values,
you will get null strings.</P
><p class="para"><a class="indexterm" name="AUTOID-10520"></A
><a class="indexterm" name="AUTOID-10523"></A
>You can preserve whatever whitespace
you put in your array elements by using 
<code class="literal">&quot;</CODE
> 
<b class="emphasis.bold">$</B
>{<em class="emphasis">aname</EM
><b class="emphasis.bold">[@]</B
>}
<code class="literal">&quot;</CODE
> (with the double quotes) instead of <b class="emphasis.bold">$</B
>{<em class="emphasis">aname</EM
><b class="emphasis.bold">[</B
><code class="literal">*</CODE
><b class="emphasis.bold">]</B
>}<code class="literal">&quot;</CODE
>, just as you can with
<code class="literal">&quot;</CODE
><b class="emphasis.bold">$@</B
><code class="literal">&quot;</CODE
> instead of
<b class="emphasis.bold">$</B
><code class="literal">*</CODE
>.</P
><p class="para"><a class="indexterm" name="AUTOID-10543"></A
><a class="indexterm" name="AUTOID-10546"></A
>The shell provides an operator that tells you how many elements an
array has defined: 
<b class="emphasis.bold">${#</B
><em class="emphasis">aname</EM
><b class="emphasis.bold">[</B
><code class="literal">*</CODE
>]<b class="emphasis.bold">}</B
>. 
Thus <b class="emphasis.bold">${#nicknames[</B
><code class="literal">*</CODE
>]<b class="emphasis.bold">}</B
>
has the value 4.  Note that you need the 
<b class="emphasis.bold">[</B
><code class="literal">*</CODE
><b class="emphasis.bold">]</B
> because the name
of the array alone is interpreted as the 0th element. This means, for
example, that <b class="emphasis.bold">${#nicknames}</B
> equals the length of <b class="emphasis.bold">nicknames[0]</B
> (see
<a class="xref" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="Basic Shell Programming">Chapter 4</A
>). Since <b class="emphasis.bold">nicknames[0]</B
> doesn't exist, the value of
<b class="emphasis.bold">${#nicknames}</B
> is 0, the length of the null string.</P
><p class="para">To be quite frank,
we feel that the Korn shell's array facility is of little use
to shell programmers. This is partially because it is so limited,
but mainly because shell programming tasks are much more often
oriented toward character strings and text than toward numbers.
If you think of an array as a mapping from integers to values
(i.e., put in a number, get out a value), then you can see why 
arrays are &quot;number-dominated&quot; data structures.</P
><p class="para">Nevertheless, we can find useful things to do with arrays.<a class="indexterm" name="KSH-CH-6-IX-TERM"></A
><a class="indexterm" name="KSH-CH-6-IX-ENVIRONMENT-VARIABLES-TERM"></A
>
For example, here is a cleaner solution to Task 5-4,
in which a user can select his or her terminal type (<b class="emphasis.bold">TERM</B
>
environment variable) at login time.  <a class="indexterm" name="KSH-CH-6-IX-SELECT"></A
><a class="indexterm" name="KSH-CH-6-IX-CASE"></A
>
Recall that the &quot;user-friendly&quot;
version of this code used <b class="emphasis.bold">select</B
> and a <b class="emphasis.bold">case</B
> statement:</P
><p class="para"><blockquote class="screen"><pre class="screen">print 'Select your terminal type:'
PS3='terminal? '
select term in
    'Givalt GL35a' \
    'Tsoris T-2000' \
    'Shande 531' \
    'Vey VT99'
do
    case $REPLY in
        1 ) TERM=gl35a ;;
        2 ) TERM=t2000 ;;
        3 ) TERM=s531 ;;
        4 ) TERM=vt99 ;;
        * ) print &quot;invalid.&quot; ;;
    esac
    if [[ -n $term ]]; then
        print &quot;TERM is $TERM&quot;
        break
    fi
done</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-10582"></A
><a class="indexterm" name="AUTOID-10586"></A
>We can eliminate the entire <b class="emphasis.bold">case</B
> construct
by taking advantage of the fact that the <b class="emphasis.bold">select</B
> construct stores
the user's number choice in the variable <b class="emphasis.bold">REPLY</B
>.  
We just need a line of code that stores all
of the possibilities for <b class="emphasis.bold">TERM</B
> in an array, in an order that
corresponds to the items in the <b class="emphasis.bold">select</B
> menu. Then we can use
<b class="emphasis.bold">$REPLY</B
> to index the array. The resulting code is:</P
><p class="para"><blockquote class="screen"><pre class="screen">set -A termnames gl35a t2000 s531 vt99
print 'Select your terminal type:'
PS3='terminal? '
select term in
    'Givalt GL35a' \
    'Tsoris T-2000' \
    'Shande 531' \
    'Vey VT99'
do
    if [[ -n $term ]]; then
        TERM=${termnames[REPLY-1]}
        print &quot;TERM is $TERM&quot;
        break
    fi
done</PRE
></BLOCKQUOTE
></P
><p class="para">This code sets up the array <b class="emphasis.bold">termnames</B
>
so that <b class="emphasis.bold">${termnames[0]}</B
> is &quot;gl35a&quot;, <b class="emphasis.bold">${termnames[1]}</B
> is
&quot;t2000&quot;, etc. The line <b class="emphasis.bold">TERM=${termnames[REPLY-1]}</B
> essentially
replaces the entire <b class="emphasis.bold">case</B
> construct by using <b class="emphasis.bold">REPLY</B
> to
index the array.  </P
><p class="para">Notice that the shell knows to interpret the text in
an array index as an arithmetic expression, as if it were enclosed in 
<b class="emphasis.bold">((</B
> and <b class="emphasis.bold">))</B
>, which in turn means that variable need not be
preceded by a dollar sign (<b class="emphasis.bold">$</B
>).
We have to subtract 1 from the value of <b class="emphasis.bold">REPLY</B
> because
array indices start at 0, while <b class="emphasis.bold">select</B
> menu item numbers start
at 1.<a class="indexterm" name="AUTOID-10610"></A
><a class="indexterm" name="AUTOID-10611"></A
><a class="indexterm" name="AUTOID-10612"></A
><a class="indexterm" name="AUTOID-10613"></A
><a class="indexterm" name="AUTOID-10614"></A
></P
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-6-SECT-3.1">6.3.1 typeset</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-6-IX-TYPESET"></A
>The final Korn shell feature that relates to the kinds of values
that variables can hold is the <b class="emphasis.bold">typeset</B
> command.  
If you are a programmer, you might guess that <b class="emphasis.bold">typeset</B
> 
is used to specify the <em class="emphasis">type</EM
> of a variable (integer, string,
etc.); you'd be partially right.</P
><p class="para"><b class="emphasis.bold">typeset</B
> is a rather <em class="emphasis">ad hoc</EM
> collection of things that
you can do to variables that restrict the kinds of values they can take.
Operations are specified by options to <b class="emphasis.bold">typeset</B
>; the basic syntax is:<a class="indexterm" name="AUTOID-10627"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen">typeset <em class="emphasis">-o varname</EM
>[=<em class="emphasis">value</EM
>]</PRE
></BLOCKQUOTE
></P
><p class="para">Options can be combined; multiple <em class="emphasis">varname</EM
>s can be used.
If you leave out <em class="emphasis">varname</EM
>, the shell prints a list of variables
for which the given option is turned on.</P
><p class="para">The options available break down into two basic categories:</P
><ol class="orderedlist"><li class="listitem"><p class="para">String formatting operations, such as right- and left-justification,
truncation, and letter case control.</P
></LI
><li class="listitem"><p class="para">Type and attribute functions that are of primary interest to advanced 
programmers.</P
></LI
></OL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-6-SECT-3.2">6.3.2 Local Variables in Functions</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-6-IX-TYPESET-MAKE-VARS-FUNCTIONS"></A
><a class="indexterm" name="KSH-CH-6-IX-FUNCTIONS-LOCAL-VARIABLES-IN"></A
><a class="indexterm" name="KSH-CH-6-IX-VARIABLES-LOCAL-IN-FUNCTIONS"></A
><b class="emphasis.bold">typeset</B
> without options has an important meaning:
if a <b class="emphasis.bold">typeset</B
> statement
is inside a function definition, then the variables involved
all become <em class="emphasis">local</EM
> to that function (in addition to any
properties they may take on as a result of <b class="emphasis.bold">typeset</B
> options).
The ability to define
variables that are local to &quot;subprogram&quot; units (procedures,
functions, subroutines, etc.) is necessary for writing
large programs, because it helps keep subprograms independent of
the main program and of each other.</P
><p class="para">If you just want to declare a variable local to a function,
use <b class="emphasis.bold">typeset</B
> without any options. For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">function afunc {
    typeset diffvar
    samevar=funcvalue
    diffvar=funcvalue
    print &quot;samevar is $samevar&quot;
    print &quot;diffvar is $diffvar&quot;
}

samevar=globvalue
diffvar=globvalue
print &quot;samevar is $samevar&quot;
print &quot;diffvar is $diffvar&quot;
afunc
print &quot;samevar is $samevar&quot;
print &quot;diffvar is $diffvar&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">This code will print the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">samevar is globvalue
diffvar is globvalue
samevar is funcvalue
diffvar is funcvalue
samevar is funcvalue
diffvar is globvalue</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="xref" href="#KSH-CH-6-FIG-0" title="Local variables in functions">Figure 6.1</A
>
shows this graphically.</P
><h4 class="figure"><a class="title" name="KSH-CH-6-FIG-0">Figure 6.1: Local variables in functions</A
></H4
><img class="graphic" src="figs/korn0601.gif" webstripperlinkwas="figs/korn0601.gif" alt="Figure 6.1"><p class="para">You will see several additional examples of local variables
within functions in <a class="xref" href="ch09_01.htm" webstripperlinkwas="ch09_01.htm" title="Debugging Shell Programs">Chapter 9</A
>.<a class="indexterm" name="AUTOID-10673"></A
><a class="indexterm" name="AUTOID-10674"></A
><a class="indexterm" name="AUTOID-10675"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-6-SECT-3.3">6.3.3 String Formatting Options</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-6-IX-TYPESET-STR-FMT-OPTIONS"></A
>Now let's look at the various options to <b class="emphasis.bold">typeset</B
>.
<a class="xref" href="#KSH-CH-6-TAB-4" title="Typeset String Formatting Options">Table 6.5</A
>
lists the string formatting options;
the first three take an optional numeric argument.</P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-6-TAB-4">Table 6.5: Typeset String Formatting Options</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Option</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Operation</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-L</B
><em class="emphasis">n</EM
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Left-justify. Remove leading blanks; if <em class="emphasis">n</EM
>
is given, fill with blanks or truncate on right to length <em class="emphasis">n</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-R</B
><em class="emphasis">n</EM
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Right-justify. Remove trailing blanks; if <em class="emphasis">n</EM
>
is given, fill with blanks or truncate on left to length <em class="emphasis">n</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-Z</B
><em class="emphasis">n</EM
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Same as above, except add leading 0's instead of
blanks if needed.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-l</B
></TD
><td class="entry" rowspan="1" colspan="1">Convert letters to lowercase.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-u</B
></TD
><td class="entry" rowspan="1" colspan="1">Convert letters to uppercase.</TD
></TR
></TBODY
></TABLE
><p class="para">Here are a few simple examples. Assume that the variable <b class="emphasis.bold">alpha</B
>
is assigned the letters of the alphabet, in alternating case, surrounded
by three blanks on each side:</P
><p class="para"><blockquote class="screen"><pre class="screen">alpha=&quot;   aBcDeFgHiJkLmNoPqRsTuVwXyZ   &quot;</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="xref" href="#KSH-CH-6-TAB-5" title="Examples of typeset String Formatting Options">Table 6.6</A
>
shows some <b class="emphasis.bold">typeset</B
> statements and their resulting values
(assuming that each of the statements are run &quot;independently&quot;).<a class="indexterm" name="AUTOID-10729"></A
></P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-6-TAB-5">Table 6.6: Examples of typeset String Formatting Options</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Statement</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Value of v</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">typeset -L</B
> v=$alpha</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">&quot;aBcDeFgHiJkLmNoPqRsTuVwXyZ&nbsp;&nbsp;&nbsp;&quot;</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">typeset -L10</B
> v=$alpha</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">&quot;aBcDeFgHiJ&quot;</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">typeset -R</B
> v=$alpha</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">&quot;&nbsp;&nbsp;&nbsp;aBcDeFgHiJkLmNoPqRsTuVwXyZ&quot;</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">typeset -R16</B
> v=$alpha</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">&quot;kLmNoPqRsTuVwXyZ&quot;</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">typeset -l</B
> v=$alpha</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">&quot;&nbsp;&nbsp;&nbsp;abcdefghijklmnopqrstuvwxyz&quot;</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">typeset -uR5</B
> v=$alpha</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">&quot;VWXYZ&quot;</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">typeset -Z8</B
> v=<code class="literal">&quot;123.50&quot;</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">&quot;00123.50&quot;</CODE
></TD
></TR
></TBODY
></TABLE
><p class="para"><a class="indexterm" name="AUTOID-10778"></A
>When you run <b class="emphasis.bold">typeset</B
> on an existing
variable, its effect is <em class="emphasis">cumulative</EM
> with whatever <b class="emphasis.bold">typeset</B
>s
may have been used previously. This has the obvious exceptions:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">A <b class="emphasis.bold">typeset -u</B
> undoes a <b class="emphasis.bold">typeset -l</B
>, and vice versa.</P
></LI
><li class="listitem"><p class="para">A <b class="emphasis.bold">typeset -R</B
> undoes a <b class="emphasis.bold">typeset -L</B
>, and vice versa.</P
></LI
><li class="listitem"><p class="para"><b class="emphasis.bold">typeset -Z</B
> has no effect if <b class="emphasis.bold">typeset -L</B
> has been used.</P
></LI
></UL
><p class="para"><a class="indexterm" name="AUTOID-10799"></A
>You can turn off <b class="emphasis.bold">typeset</B
> options explicitly by typing
<b class="emphasis.bold">typeset +</B
><em class="emphasis">o</EM
>, where <em class="emphasis">o</EM
> is the option you turned on before.
Of course, it is hard to imagine scenarios where you would want to
turn multiple <b class="emphasis.bold">typeset</B
> formatting options on and off over 
and over again; you usually set a <b class="emphasis.bold">typeset</B
>
option on a given variable only once.  </P
><p class="para">An obvious application for the <b class="emphasis.bold">-L</B
> and <b class="emphasis.bold">-R</B
> options
is one in which you need fixed-width output. The most ubiquitous source
of fixed-width output in the UNIX system is reflected in the following
programming task.</P
><div class="task"><h4>Task 6.2</H4
><blockquote class="taskinfo"><p class="para">Pretend that <em class="emphasis">ls</EM
> doesn't do multicolumn output;
write a shell script that does it.</P
></BLOCKQUOTE
><a class="indexterm" name="AUTOID-10815"></A
><a class="indexterm" name="AUTOID-10819"></A
><p class="para">For the sake of simplicity, we'll assume further that our
version of UNIX is derived from AT&amp;T System V, in which filenames
are (<em class="emphasis">still!</EM
>) limited to 14 characters.</P
><p class="para">Our solution to this task relies on many of the concepts we
have seen earlier in this chapter.  <a class="indexterm" name="KSH-CH-6-IX-ARRAYS-2"></A
><a class="indexterm" name="AUTOID-10827"></A
><a class="indexterm" name="AUTOID-10830"></A
><a class="indexterm" name="AUTOID-10833"></A
>
It also relies on the fact
that <b class="emphasis.bold">set -A</B
> (for constructing arrays) can be combined
with command substitution in an interesting way: each word
(separated by blanks, TABs, or NEWLINESs) becomes an element of the array.
For example, if the file <em class="emphasis">bob</EM
> contains 50 words, then 
after the statement:</P
><p class="para"><blockquote class="screen"><pre class="screen">set -A fred $(&lt; bob)</PRE
></BLOCKQUOTE
></P
><p class="para">the array <b class="emphasis.bold">fred</B
> has 50 elements.</P
><p class="para">Our strategy is to get the names of all files in the
given directory into an array variable.  <a class="indexterm" name="AUTOID-10843"></A
><a class="indexterm" name="AUTOID-10845"></A
>
We use a <b class="emphasis.bold">while</B
> loop
that mimics a <b class="emphasis.bold">for</B
> loop, as we saw earlier in this chapter,
to get each filename into a variable whose length has been set
to 14. We print that variable in five-column format, with two spaces
between each column (for a total of 80 columns), using a counter
to keep track of columns. Here is the code:</P
><p class="para"><blockquote class="screen"><pre class="screen">set -A filenames $(ls $1)
typeset -L14 fname
let count=0
let numcols=5

while (( $count &lt; ${#filenames[*]} )); do
    fname=${filenames[count]}
    print -n &quot;$fname  &quot;
    let count=&quot;count + 1&quot;
    if (( count % numcols == 0 )); then
        print		# NEWLINE
    fi
done

if (( count % numcols != 0 )); then
    print
fi</PRE
></BLOCKQUOTE
></P
><p class="para">The first line sets up the array <b class="emphasis.bold">filenames</B
> to contain
all files in the directory given by the first argument (the current
directory by default).  <a class="indexterm" name="AUTOID-10853"></A
><a class="indexterm" name="AUTOID-10854"></A
>
The <b class="emphasis.bold">typeset</B
> statement sets up the variable <b class="emphasis.bold">fname</B
> to
have a fixed width of 14 characters.
The next 
line initializes a counter that counts elements in the array.
<b class="emphasis.bold">numcols</B
> is the number of columns per line.</P
><p class="para"><a class="indexterm" name="AUTOID-10862"></A
>The <b class="emphasis.bold">while</B
> loop iterates once for every element in <b class="emphasis.bold">filenames</B
>.
In the body of the loop, the first line assigns the next array element
to the fixed-width variable.  <a class="indexterm" name="AUTOID-10866"></A
>
The <b class="emphasis.bold">print</B
> statement prints the
latter followed by two spaces; the <b class="emphasis.bold">-n</B
> option 
suppresses <b class="emphasis.bold">print</B
>'s final NEWLINE.</P
><p class="para"><a class="indexterm" name="AUTOID-10874"></A
><a class="indexterm" name="AUTOID-10876"></A
>The <b class="emphasis.bold">let</B
> statements increments the counter. Then there is the
<b class="emphasis.bold">if</B
> statement, which determines when to start the next line.<a class="indexterm" name="AUTOID-10880"></A
>
It checks the <em class="emphasis">remainder</EM
> of <b class="emphasis.bold">$count</B
> divided by 
<b class="emphasis.bold">$numcols</B
>-remember that dollar signs aren't necessary within 
a <b class="emphasis.bold">$((</B
>...<b class="emphasis.bold">))</B
>
construct-and if the result is 0, it's time to output a NEWLINE
via a <b class="emphasis.bold">print</B
> statement without arguments. Notice that even though
<b class="emphasis.bold">$count</B
> increases by 1 with every iteration of the loop, the
remainder goes through a cycle of 1, 2, 3, 4, 0, 1, 2, 3, 4, 0,...</P
><p class="para">After the loop, an <b class="emphasis.bold">if</B
> construct outputs a final NEWLINE if
necessary, i.e., if the <b class="emphasis.bold">if</B
> within the loop didn't just do it.</P
><p class="para">We can also use <b class="emphasis.bold">typeset</B
> options to clean up the code for
our <em class="emphasis">dosmv</EM
> function (Task 5-3), which translates filenames
in a given directory from MS-DOS to UNIX format. The code for
the function is:</P
><p class="para"><blockquote class="screen"><pre class="screen">dos_regexp='[^a-z]\{1,8\}\.[^a-z]\{0,3\}'
for filename in ${1:+$1/}* ; do
    if print &quot;$filename&quot; | grep $dos_regexp &gt; /dev/null; then
        newfilename=$(print $filename | tr [A-Z] [a-z])
        newfilename=${newfilename%.}
        print &quot;$filename -&gt; $newfilename&quot;
        mv $filename $newfilename
    fi
done</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-10898"></A
><a class="indexterm" name="AUTOID-10900"></A
>We can replace the call to <em class="emphasis">tr</EM
> in the <b class="emphasis.bold">for</B
> loop with 
one to <b class="emphasis.bold">typeset -l</B
> before the loop:</P
><p class="para"><blockquote class="screen"><pre class="screen">typeset -l newfilename
dos_regexp='[^a-z]\{1,8\}\.[^a-z]\{0,3\}'
for filename in ${1:+$1/}* ; do
    if print &quot;$filename&quot; | grep $dos_regexp &gt; /dev/null; then
        newfilename=${filename%.}
        print &quot;$filename -&gt; $newfilename&quot;
        mv $filename $newfilename
    fi
done</PRE
></BLOCKQUOTE
></P
><p class="para">This way, the translation to lowercase letters is done automatically
each time a value is assigned to <b class="emphasis.bold">newfilename</B
>. Not only is this
code cleaner, but it is 
also more efficient because the extra 
processes created by <em class="emphasis">tr</EM
> and command substitution are eliminated.<a class="indexterm" name="AUTOID-10912"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-6-SECT-3.4">6.3.4 Type and Attribute Options</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-6-IX-TYPESET-TANDATTR-OPTIONS"></A
>The other options to <b class="emphasis.bold">typeset</B
> are of more use to advanced 
shell programmers who are &quot;tweaking&quot; large scripts. These options 
are listed in 
<a class="xref" href="#KSH-CH-6-TAB-6" title="Typeset Type and Attribute Options">Table 6.7</A
>.<a class="indexterm" name="AUTOID-10921"></A
><a class="indexterm" name="AUTOID-10925"></A
><a class="indexterm" name="AUTOID-10929"></A
><a class="indexterm" name="AUTOID-10933"></A
><a class="indexterm" name="AUTOID-10935"></A
></P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-6-TAB-6">Table 6.7: Typeset Type and Attribute Options</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Option</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Operation</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-i</B
><em class="emphasis">n</EM
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Represent the variable internally as an integer;
improves
efficiency of arithmetic. If <em class="emphasis">n</EM
> is given, it is the
base used for output.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-r</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Make the variable read-only: forbid assignment to it and disallow
it from being <b class="emphasis.bold">unset</B
>.[6]</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-x</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Export; same as <b class="emphasis.bold">export</B
> command.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-f</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Refer to function names only; see &quot;Function Options&quot; below.</P
></TD
></TR
></TBODY
></TABLE
><blockquote class="footnote"><p class="para">[6] The 
built-in command <b class="emphasis.bold">readonly</B
> does the same 
thing.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-10975"></A
><a class="indexterm" name="AUTOID-10977"></A
><a class="indexterm" name="AUTOID-10981"></A
><b class="emphasis.bold">-i</B
> is the most useful of these. You can put it in a script
when you are done writing and debugging it to make arithmetic
run a bit faster, though the speedup will be apparent only 
if your script does a <em class="emphasis">lot</EM
> of arithmetic. The more readable
<b class="emphasis.bold">integer</B
> is a built-in alias for <b class="emphasis.bold">typeset -i</B
>, so that
<b class="emphasis.bold">integer x=5</B
> is the same as <b class="emphasis.bold">typeset -i x=5</B
>.</P
><p class="para"><a class="indexterm" name="KSH-CH-6-IX-TYPESET-TANDATTR-OPTIONS-R"></A
><a class="indexterm" name="AUTOID-10995"></A
>The <b class="emphasis.bold">-r</B
> option is useful for setting up &quot;constants&quot; in shell
scripts; constants are like variables except that you can't change
their values once they have been initialized. Constants allow you
to give names to values even if you don't want them changed;
it is considered good programming practice to use constants in
large programs.  </P
><p class="para">The solution to Task 6-2 contains a good candidate for
<b class="emphasis.bold">typeset -r</B
>: the variable <b class="emphasis.bold">numcols</B
>, which specifies
the number of columns in the output. Since <b class="emphasis.bold">numcols</B
> is an
integer, we could also use the <b class="emphasis.bold">-i</B
> option, i.e., replace
<b class="emphasis.bold">let numcols=5</B
> with <b class="emphasis.bold">typeset -ri numcols=5</B
>. If we were
to try assigning another value to <b class="emphasis.bold">numcols</B
>, the shell would
respond with the error message <b class="emphasis.bold">ksh: numcols: is read only</B
>.</P
><p class="para"><a class="indexterm" name="AUTOID-11008"></A
><b class="emphasis.bold">-r</B
> is also useful for system administrators who set up shell
variables in <em class="emphasis">/etc/profile</EM
>, the system-wide Korn shell
initialization file.  <a class="indexterm" name="AUTOID-11012"></A
><a class="indexterm" name="AUTOID-11014"></A
>
For example, if you wanted to tighten system
security, one step you might take is to prevent the <b class="emphasis.bold">PATH</B
>
environment variable from being changed. This helps prevent computer
crackers from installing bogus executables. The statement
<b class="emphasis.bold">typeset -r PATH</B
> does the trick.  <a class="indexterm" name="AUTOID-11019"></A
></P
><p class="para">These options are also useful without arguments,
i.e., to see which variables exist that have those options turned on.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-6-SECT-3.5">6.3.5 Function Options</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-6-IX-TYPESET-TANDATTR-OPTIONS-F"></A
>The <b class="emphasis.bold">-f</B
> option has various suboptions, all of which relate to
functions. These are listed in 
<a class="xref" href="#KSH-CH-6-TAB-7" title="Typeset Function Options">Table 6.8</A
>.<a class="indexterm" name="AUTOID-11030"></A
><a class="indexterm" name="AUTOID-11033"></A
><a class="indexterm" name="AUTOID-11036"></A
><a class="indexterm" name="AUTOID-11039"></A
><a class="indexterm" name="AUTOID-11042"></A
><a class="indexterm" name="AUTOID-11046"></A
><a class="indexterm" name="AUTOID-11050"></A
><a class="indexterm" name="AUTOID-11054"></A
><a class="indexterm" name="AUTOID-11058"></A
><a class="indexterm" name="AUTOID-11062"></A
></P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-6-TAB-7">Table 6.8: Typeset Function Options</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Option</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Operation</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-f</B
></TD
><td class="entry" rowspan="1" colspan="1">With no arguments, prints all function definitions.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-f</B
> <em class="emphasis">fname</EM
></TD
><td class="entry" rowspan="1" colspan="1">Prints the definition of function <em class="emphasis">fname</EM
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">+f</B
></TD
><td class="entry" rowspan="1" colspan="1">Prints all function names.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-ft</B
></TD
><td class="entry" rowspan="1" colspan="1">Turns on trace mode for named function(s). (<a class="xref" href="ch09_01.htm" webstripperlinkwas="ch09_01.htm" title="Debugging Shell Programs">Chapter 9</A
>)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">+ft</B
></TD
><td class="entry" rowspan="1" colspan="1">Turns off trace mode for named function(s). (<a class="xref" href="ch09_01.htm" webstripperlinkwas="ch09_01.htm" title="Debugging Shell Programs">Chapter 9</A
>)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-fu</B
></TD
><td class="entry" rowspan="1" colspan="1">Defines given name(s) as autoloaded function(s). (<a class="xref" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="Basic Shell Programming">Chapter 4</A
>)</TD
></TR
></TBODY
></TABLE
><p class="para">Two of these have built-in aliases that are more mnemonic:
<b class="emphasis.bold">functions</B
> is an alias for <b class="emphasis.bold">typeset -f</B
> and
<b class="emphasis.bold">autoload</B
> is an alias for <b class="emphasis.bold">typeset -fu</B
>.<a class="indexterm" name="AUTOID-11108"></A
></P
><p class="para"><a class="indexterm" name="AUTOID-11110"></A
><a class="indexterm" name="AUTOID-11113"></A
>Finally, if you type <b class="emphasis.bold">typeset</B
> without <em class="emphasis">any</EM
> arguments, you will see
a list of <em class="emphasis">all</EM
> currently-defined variables (in no discernable
order), preceded by
appropriate keywords if they have one or more <b class="emphasis.bold">typeset</B
> options
turned on. For example, typing <b class="emphasis.bold">typeset</B
> in an uncustomized
shell gives you a listing of the shell's built-in variables
and their attributes that looks like this:
[7]<a class="indexterm" name="AUTOID-11124"></A
><a class="indexterm" name="AUTOID-11125"></A
></P
><blockquote class="footnote"><p class="para">[7] For some reason, this list excludes <b class="emphasis.bold">PS1</B
> and a few others.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">export HZ
export PATH
integer ERRNO
integer OPTIND
function LINENO
export LOGNAME
export MAIL
function SECONDS
integer PPID
PS3
PS2
export TERMCAP
OPTARG
function RANDOM
export SHELL
integer TMOUT
export HOME
export _
FCEDIT
export TERM
export PWD
export TZ
integer MAILCHECK</PRE
></BLOCKQUOTE
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch06_02.htm" webstripperlinkwas="ch06_02.htm" title="6.2 Integer Variables and Arithmetic"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 6.2 Integer Variables and Arithmetic" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="7. Input/Output and Command-line Processing"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 7. Input/Output and Command-line Processing" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.2 Integer Variables and Arithmetic</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7. Input/Output and Command-line Processing</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
