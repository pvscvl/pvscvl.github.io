<html><head>
<title>[Chapter 8] 8.6 Subshells</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:15:46Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="8. Process Handling"><link rel="prev" href="ch08_05.htm" webstripperlinkwas="ch08_05.htm" title="8.5 Coroutines"><link rel="next" href="ch09_01.htm" webstripperlinkwas="ch09_01.htm" title="9. Debugging Shell Programs"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_05.htm" webstripperlinkwas="ch08_05.htm" title="8.5 Coroutines"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.5 Coroutines" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>Process Handling</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch09_01.htm" webstripperlinkwas="ch09_01.htm" title="9. Debugging Shell Programs"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 9. Debugging Shell Programs" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="KSH-CH-8-SECT-6">8.6 Subshells</A
></H2
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-SUBSHELLS"></A
>Coroutines clearly represent the most complex relationship between
processes that the Korn shell defines. To conclude this chapter, we will 
look at a much simpler type of interprocess relationship:
that of a subshell with its parent shell.
We saw in <a class="xref" href="ch03_01.htm" webstripperlinkwas="ch03_01.htm" title="Customizing Your Environment">Chapter 3</A
> that whenever you run a shell script, you actually
invoke another copy of the shell that is a subprocess
of the main, or <em class="emphasis">parent</EM
>, shell process. Now let's look at
subshells in more detail.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-8-SECT-6.1">8.6.1 Subshell Inheritance</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-SSHS-INHER-PROPS-PARENT-SHELLS"></A
>The most important things you need to know about subshells are what
characteristics they get, or <em class="emphasis">inherit</EM
>, from their parents.
These are as follows:<a class="indexterm" name="AUTOID-14761"></A
><a class="indexterm" name="AUTOID-14764"></A
><a class="indexterm" name="AUTOID-14768"></A
></P
><ul class="itemizedlist"><li class="listitem"><p class="para">The current directory</P
></LI
><li class="listitem"><p class="para">Environment variables</P
></LI
><li class="listitem"><p class="para">Standard input, output, and error plus any other open file descriptors</P
></LI
><li class="listitem"><p class="para">Any characteristics defined in the environment file (see <a class="xref" href="ch03_01.htm" webstripperlinkwas="ch03_01.htm" title="Customizing Your Environment">Chapter 3</A
>)</P
></LI
><li class="listitem"><p class="para">Signals that are ignored</P
></LI
></UL
><p class="para">The first three of these are inherited by all subprocesses, while
the last is unique to subshells.
Just as important are the things that a subshell does not inherit
from its parent:<a class="indexterm" name="AUTOID-14784"></A
><a class="indexterm" name="AUTOID-14787"></A
></P
><ul class="itemizedlist"><li class="listitem"><p class="para">Shell variables, except environment variables and those
defined in the environment file</P
></LI
><li class="listitem"><p class="para">Handling of signals that are not ignored</P
></LI
></UL
><p class="para">We covered some of this earlier (in <a class="xref" href="ch03_01.htm" webstripperlinkwas="ch03_01.htm" title="Customizing Your Environment">Chapter 3</A
>), but these 
points are common sources of confusion, so they bear repeating.<a class="indexterm" name="AUTOID-14797"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-8-SECT-6.2">8.6.2 Nested Subshells</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-SUBSHELLS-NESTED"></A
>Subshells need not be in separate scripts;
you can also start a subshell within the same script (or function)
as the parent.  <a class="indexterm" name="AUTOID-14804"></A
>
You do this 
in a manner very similar to the code blocks we saw in the last chapter.
Just surround some shell code with parentheses (instead 
of curly brackets), and that code will run in a subshell.
We'll call this a <em class="emphasis">nested</EM
> subshell. </P
><p class="para">For example, here is the calculator program, from above,
with a subshell instead of a code block:</P
><p class="para"><blockquote class="screen"><pre class="screen">( while read line'?adc&gt; '; do
      print &quot;$(alg2rpn $line)&quot;
  done 
) | dc</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-CODE-BLOCKS-VS-NESTED-SUBSHELLS"></A
><a class="indexterm" name="KSH-CH-8-IX-SSHS-NEST-COMPAR-CODE-BLOCKS"></A
>The code inside the parentheses will run as a separate process.
This is usually less efficient than a code block.
The differences in functionality between subshells and code blocks
are very few; they primarily pertain to issues of scope, i.e.,
the domains in which definitions of things like shell variables 
and signal traps are known. First, code inside a nested subshell obeys
the above rules of subshell inheritance, except that it knows about variables 
defined in the surrounding shell; in contrast, think of blocks 
as code units that inherit <em class="emphasis">everything</EM
> from the outer shell.
Second, variables
and traps defined inside a code block are known to the shell
code after the block, whereas those defined in a subshell are not.</P
><p class="para">For example, consider this code:</P
><p class="para"><blockquote class="screen"><pre class="screen">{
    fred=bob
    trap 'print \'You hit CTRL-C!\'' INT
}
while true; do
    print &quot;\$fred is $fred&quot;
    sleep 60
done</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-14824"></A
><a class="indexterm" name="AUTOID-14826"></A
><a class="indexterm" name="AUTOID-14828"></A
>If you run this code, you will see the message <b class="emphasis.bold">$fred is bob</B
> every
60 seconds, and if you type <span class="acronym">CTRL-C</SPAN
>, you will see the message, <b class="emphasis.bold">You hit
CTRL-C!</B
>.  You will need to type <span class="acronym">CTRL-\</SPAN
>&nbsp;to stop it (don't forget to
remove the <em class="emphasis">core</EM
> file). Now let's change it to a nested subshell:</P
><p class="para"><blockquote class="screen"><pre class="screen">(
    fred=bob
    trap 'print \'You hit CTRL-C!\'' INT
)
while true; do
    print &quot;\$fred is $fred&quot;
    sleep 60
done</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-14839"></A
>If you run this, you will see the message <b class="emphasis.bold">$fred is</B
>; the outer shell
doesn't know about the subshell's definition of <b class="emphasis.bold">fred</B
> and therefore
thinks it's null. Furthermore, the outer shell doesn't know about
the subshell's trap of the INT signal, so if you hit <span class="acronym">CTRL-C</SPAN
>, the script
will terminate.</P
><p class="para">If a language supports code nesting,
then it's considered desirable that definitions inside a nested unit 
have a scope limited to that nested unit. In other words, nested
subshells give you better control than code blocks
over the scope of variables and signal traps.  
Therefore we feel that you should use
subshells instead of code blocks if they are to contain variable
definitions or signal traps-unless efficiency is a concern.<a class="indexterm" name="AUTOID-14846"></A
><a class="indexterm" name="AUTOID-14847"></A
><a class="indexterm" name="AUTOID-14848"></A
><a class="indexterm" name="AUTOID-14849"></A
></P
><p class="para">This has been a long chapter, and it has covered a lot of territory.  
Here are some exercises that should help you make sure you have a
firm grasp on the material. The last exercise is especially
difficult for those without backgrounds in compilers, parsing
theory, or formal language theory.</P
><ol class="orderedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14854"></A
><a class="indexterm" name="AUTOID-14856"></A
><a class="indexterm" name="AUTOID-14858"></A
><a class="indexterm" name="AUTOID-14860"></A
>Write a shell script called <em class="emphasis">pinfo</EM
> that combines the <b class="emphasis.bold">jobs</B
>
and <em class="emphasis">ps</EM
> commands by printing a list of jobs with their job numbers,
corresponding process IDs, running times, and full commands.</P
></LI
><li class="listitem"><p class="para">Take the latest version of our C compiler shell script-or
some other non-trivial shell script-and &quot;bullet-proof&quot; it with signal 
traps.</P
></LI
><li class="listitem"><p class="para">Take the <em class="emphasis">non-pipeline</EM
> version of our C compiler-or 
some other non-trivial shell script-and parallelize it as much as 
possible. </P
></LI
><li class="listitem"><p class="para">Write the code that checks for duplicate arguments to the <em class="emphasis">mcp</EM
>
script. Bear in mind that different pathnames can point
to the same file. 
(Hint: if <b class="emphasis.bold">$i</B
> is &quot;1&quot;, then 
<b class="emphasis.bold">eval </B
><code class="literal">'</CODE
><b class="emphasis.bold">print \${$i}</B
><code class="literal">'</CODE
> prints the first command-line argument.
Make sure you understand why.)</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14880"></A
><a class="indexterm" name="AUTOID-14883"></A
>Redo the <em class="emphasis">findterms</EM
> program in the last chapter using a 
nested subshell instead of a code block.</P
></LI
><li class="listitem"><p class="para">(The following doesn't have that much to do with the material in this chapter 
<em class="emphasis">per se</EM
>, but it is a classic programming exercise:)
<ol class="orderedlist"><li class="listitem"><p class="para">Write the function <em class="emphasis">alg2rpn</EM
> used in <em class="emphasis">adc</EM
>. Here's 
how to do this:<a class="indexterm" name="AUTOID-14894"></A
><a class="indexterm" name="AUTOID-14896"></A
><a class="indexterm" name="AUTOID-14898"></A
>
Arithmetic expressions in algebraic notation have the form 
<em class="emphasis">expr op expr</EM
>, where each <em class="emphasis">expr</EM
> is either a number or another
expression (perhaps in parentheses), and <em class="emphasis">op</EM
> is +, -, &#215;, /,
or <b class="emphasis.bold">%</B
> (remainder).
In RPN, expressions have the form <em class="emphasis">expr expr op</EM
>. For example:
the algebraic expression 
<b class="emphasis.bold">2</B
>+<b class="emphasis.bold">3</B
> 
is <b class="emphasis.bold">2 3 +</B
> in RPN; the RPN equivalent of 
<b class="emphasis.bold">(2+3) &#215;  (9-5)</B
> is 

<b class="emphasis.bold">2 3 +</B
> 9 5 - &#215;.<a class="indexterm" name="AUTOID-14910"></A
>
The main advantage of RPN is that it obviates the need for parentheses 
and operator precedence rules (e.g., &#215; is evaluated before +).
The <em class="emphasis">dc</EM
> program accepts standard RPN, but each expression should
have &quot;p&quot; appended to it: this tells <em class="emphasis">dc</EM
> to print its result, e.g., 
the first example above should be given to <em class="emphasis">dc</EM
> as <b class="emphasis.bold">2 3 + p</B
>.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14918"></A
>You need to write a routine that converts algebraic notation to RPN.  
This should be (or include) a function that calls itself
(known as a <em class="emphasis">recursive</EM
> function) whenever it encounters a 
subexpression. It is especially important that this function keep
track of where it is in the input string and how much of the string it 
&quot;eats up&quot; during its processing. (Hint: make use of the pattern 
matching operators discussed in <a class="xref" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="Basic Shell Programming">Chapter 4</A
> to ease the task of parsing 
input strings.)  </P
><p class="para">To make your life easier, don't worry about operator precedence for now;
just convert to RPN from left to right.
e.g., treat <b class="emphasis.bold">3+4&#215;5</B
> as <b class="emphasis.bold">(3+4)&#215;5</B
> and <b class="emphasis.bold">3&#215;4+5</B
> as <b class="emphasis.bold">(3&#215;4)+5</B
>.  This makes it 
possible for you to convert the input string on the fly, i.e., without 
having to read in the whole thing before doing any processing.</P
></LI
><li class="listitem"><p class="para">Enhance your solution to the previous exercise so that it supports
operator precedence in the &quot;usual&quot; 
order: &#215;, /, % (remainder) +, -.
e.g., treat 
<b class="emphasis.bold">3+4&#215;5</B
> as 
<b class="emphasis.bold">3+(4&#215;5)</B
> 
and <b class="emphasis.bold">3&#215;4+5</B
> 
as <b class="emphasis.bold">(3&#215;4)+5</B
>.</P
></LI
></OL
>&#13;</P
></LI
></OL
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_05.htm" webstripperlinkwas="ch08_05.htm" title="8.5 Coroutines"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.5 Coroutines" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch09_01.htm" webstripperlinkwas="ch09_01.htm" title="9. Debugging Shell Programs"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 9. Debugging Shell Programs" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.5 Coroutines</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">9. Debugging Shell Programs</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
