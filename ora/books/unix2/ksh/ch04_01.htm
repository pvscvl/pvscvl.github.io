<html><head>
<title>[Chapter 4] Basic Shell Programming</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:01:05Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><link rel="prev" href="ch03_06.htm" webstripperlinkwas="ch03_06.htm" title="3.6 Customization Hints"><link rel="next" href="ch04_02.htm" webstripperlinkwas="ch04_02.htm" title="4.2 Shell Variables"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch03_06.htm" webstripperlinkwas="ch03_06.htm" title="3.6 Customization Hints"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 3.6 Customization Hints" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 4</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_02.htm" webstripperlinkwas="ch04_02.htm" title="4.2 Shell Variables"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 4.2 Shell Variables" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="KSH-CH4-BASSHELL">4. Basic Shell Programming</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#KSH-CH-4-SECT-1" title="4.1 Shell Scripts and Functions">Shell Scripts and Functions</A
><br><a class="sect1" href="ch04_02.htm" webstripperlinkwas="ch04_02.htm" title="4.2 Shell Variables">Shell Variables</A
><br><a class="sect1" href="ch04_03.htm" webstripperlinkwas="ch04_03.htm" title="4.3 String Operators">String Operators</A
><br><a class="sect1" href="ch04_04.htm" webstripperlinkwas="ch04_04.htm" title="4.4 Command Substitution">Command Substitution</A
><br><a class="sect1" href="ch04_05.htm" webstripperlinkwas="ch04_05.htm" title="4.5 Advanced Examples: pushd and popd">Advanced Examples: pushd and popd</A
></P
><p></P
></DIV
><p class="para">If you have become familiar with the customization techniques
we presented in the previous chapter, you have probably run into
various modifications to your environment that you want to make
but can't-yet. Shell programming makes these possible.</P
><p class="para">The Korn shell has some of the most advanced programming
capabilities of any command interpreter of its type. Although its syntax
is nowhere near as elegant or consistent as that of most conventional
programming languages, its power and flexibility are comparable.
In fact, the Korn shell can be used as a complete environment for writing
software prototypes.</P
><p class="para">Some aspects of Korn shell programming are really extensions of
the customization techniques we have already seen, while others 
resemble traditional programming language features. 
We have structured this chapter so that if you aren't
a programmer, you can read this chapter and do quite a bit more than
you could with the information in the previous chapter.  <a class="indexterm" name="AUTOID-5289"></A
><a class="indexterm" name="AUTOID-5291"></A
>
Experience with a conventional
programming language like Pascal or C is helpful
(though not strictly necessary) for subsequent chapters.
Throughout the rest of the book, we will encounter occasional
programming problems, called <em class="emphasis">tasks</EM
>, whose solutions make use of
the concepts we cover.</P
><div class="sect1"><h2 class="sect1"><a class="title" name="KSH-CH-4-SECT-1">4.1 Shell Scripts and Functions</A
></H2
><p class="para">A <em class="emphasis">script</EM
>, or file that contains shell commands, is a shell
program. Your <em class="emphasis">.profile</EM
> and environment files,
discussed in <a class="xref" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="Input/Output and Command-line Processing">Chapter 7, Input/Output and Command-line Processing</A
> are shell scripts.  </P
><p class="para"><a class="indexterm" name="KSH-CH-4-IX-SCRIPTS-RUNNING"></A
>You can create a script using the text editor of your choice.
Once you have created one,
there are two ways to run it.  <a class="indexterm" name="AUTOID-5304"></A
>
One, which we have already covered,
is to type <b class="emphasis.bold">. </B
><em class="emphasis">scriptname</EM
>
(i.e., the command is a dot). This causes
the commands in the script to be read and run as if you typed them in.</P
><p class="para">The second way to run a script
is simply to type its name and hit <b class="emphasis.bold">RETURN</B
>, just as if
you were invoking a built-in command.  
This, of course, is the more convenient way.<a class="indexterm" name="AUTOID-5311"></A
><a class="indexterm" name="AUTOID-5314"></A
><a class="indexterm" name="AUTOID-5316"></A
><a class="indexterm" name="AUTOID-5318"></A
>
This method makes the script look just like any other UNIX
command, and in fact several &quot;regular&quot; commands are implemented as
shell scripts (i.e., not as programs originally written in C or some
other language), including <em class="emphasis">spell</EM
>, <em class="emphasis">man</EM
> on some systems,
and various commands for system administrators.  
The resulting lack of distinction between &quot;user command files&quot;
and &quot;built-in commands&quot; is one factor in UNIX's extensibility
and, hence, its favored status among programmers.</P
><p class="para"><a class="indexterm" name="AUTOID-5323"></A
><a class="indexterm" name="AUTOID-5325"></A
>You can run a script by typing its name only
if <code class="literal">.</CODE
> (the current directory) is part of your command
search path, i.e., is included in your PATH variable
(as discussed in <a class="xref" href="ch03_01.htm" webstripperlinkwas="ch03_01.htm" title="Customizing Your Environment">Chapter 3, Customizing Your Environment</A
>). If <code class="literal">.</CODE
> isn't on your path, 
you must type <code class="literal">./</CODE
><em class="emphasis">scriptname</EM
>, which is really the
same thing as typing the script's absolute pathname
(see <a class="xref" href="ch01_01.htm" webstripperlinkwas="ch01_01.htm" title="Korn Shell Basics">Chapter 1, Korn Shell Basics</A
>).</P
><p class="para">Before you can invoke the shell script by name, you must also
give it &quot;execute&quot; permission.  <a class="indexterm" name="AUTOID-5335"></A
>
If you are familiar with
the UNIX filesystem, you know that files have three types of
permissions (read, write, and execute) and that those permissions
apply to three categories of user (the file's owner, a <em class="emphasis">group</EM
> 
of users, and everyone else). Normally, when you create a
file with a text editor, the file is set up with read and write 
permission for you and read-only permission for everyone else.</P
><p class="para"><a class="indexterm" name="AUTOID-5340"></A
>Therefore you must give your script execute permission explicitly,
by using the <em class="emphasis">chmod</EM
>(1) command. The simplest way to do 
this is to type:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="literal">$</CODE
> <b class="emphasis.bold">chmod +x</B
> <em class="emphasis">scriptname</EM
></PRE
></BLOCKQUOTE
></P
><p class="para">Your text editor will preserve this permission if you make subsequent
changes to your script.
If you don't add execute permission to the script and you try to invoke it,
the shell will print the message: </P
><p class="para"><blockquote class="screen"><pre class="screen"><em class="emphasis">scriptname</EM
><code class="literal">: cannot execute.</CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">But there is a more important difference between the two ways of
running shell scripts. While the &quot;dot&quot; method
causes the commands in the script
to be run as if they were part of your login session, the &quot;just the name&quot;
method causes the shell to do a series of things.<a class="indexterm" name="KSH-CH-4-IX-SUBSHELLS"></A
>
First, it runs another copy of the shell as a subprocess;
this is called a <em class="emphasis">subshell</EM
>.
The subshell then takes commands from the script, runs them, and
terminates, handing control back to the parent shell.</P
><p class="para"><a class="xref" href="#KSH-CH-4-FIG-0" title="Ways to run a shell script">Figure 4.1</A
> shows how the shell executes scripts.  
Assume you have a simple shell script called <em class="emphasis">fred</EM
> that
contains the commands <em class="emphasis">bob</EM
> and <em class="emphasis">dave</EM
>.
In <a class="xref" href="#KSH-CH-4-FIG-0" title="Ways to run a shell script">Figure 4.1</A
>.a, typing <b class="emphasis.bold">.fred</B
> causes the two commands to run
in the same shell, just as if you had typed them in by hand.
<a class="xref" href="#KSH-CH-4-FIG-0" title="Ways to run a shell script">Figure 4.1</A
>.b shows what happens when you type just 
<b class="emphasis.bold">fred</B
>: the commands run in the subshell while the parent shell
waits for the subshell to finish.  </P
><p class="para">You may find it interesting to compare this with the situation in Figure
4-1.c, which shows what happens when you type <b class="emphasis.bold">fred &amp;</B
>.  <a class="indexterm" name="AUTOID-5368"></A
>
As you will recall from <a class="xref" href="ch01_01.htm" webstripperlinkwas="ch01_01.htm" title="Korn Shell Basics">Chapter 1</A
> the <b class="emphasis.bold">&amp;</B
> makes the command run in
the <em class="emphasis">background</EM
>, which is really just another term for &quot;subprocess.&quot;
It turns out that the only significant difference between <a class="xref" href="#KSH-CH-4-FIG-0" title="Ways to run a shell script">Figure 4.1</A
>.c and Figure 
4-1.b is that you have control of your terminal or workstation
while the command runsmdash;you need not wait until it finishes before
you can enter further commands.</P
><h4 class="figure"><a class="title" name="KSH-CH-4-FIG-0">Figure 4.1: Ways to run a shell script</A
></H4
><img class="graphic" src="figs/korn0401.gif" webstripperlinkwas="figs/korn0401.gif" alt="Figure 4.1"><p class="para">There are many ramifications to using subshells.  <a class="indexterm" name="AUTOID-5378"></A
><a class="indexterm" name="AUTOID-5381"></A
>
An important one is that the <em class="emphasis">export</EM
>ed environment variables
that we saw in the last chapter (e.g., TERM, LOGNAME, <span class="acronym">PWD</SPAN
>)
are known in subshells, whereas other shell variables (such as any
that you define in your <em class="emphasis">.profile</EM
> without an <em class="emphasis">export</EM
>
statement) are not.</P
><p class="para">Other issues involving subshells
are too complex to go into now; see <a class="xref" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="Input/Output and Command-line Processing">Chapter 7</A
>,
and <a class="xref" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="Process Handling">Chapter 8, Process Handling</A
>,
for more details about subshell I/O
and process characteristics, respectively. 
For now, just bear
in mind that a script normally runs in a subshell.<a class="indexterm" name="AUTOID-5390"></A
><a class="indexterm" name="AUTOID-5391"></A
></P
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-4-SECT-1.1">4.1.1 Functions</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-4-IX-FUNCTIONS-DEFINITION"></A
><a class="indexterm" name="AUTOID-5398"></A
><a class="indexterm" name="AUTOID-5400"></A
>The Korn shell's <em class="emphasis">function</EM
> feature is an expanded version of a similar
facility in the System V Bourne shell and a few other shells.
A function is sort of a script-within-a-script;
you use it to define some shell code by name and
store it in the shell's memory, to be
invoked and run later.</P
><p class="para"><a class="indexterm" name="KSH-CH-4-IX-FUNCTIONS-ADVANTAGES-SCRIPTS"></A
>Functions improve the shell's programmability significantly,
for two main reasons. First,
when you invoke a function, it is already in the shell's memory
(except for autoloaded functions; see section titled &quot;Autoloaded Functions&quot;); therefore
a function runs faster.
Modern computers have plenty of memory, so there is no need to worry
about the amount of space a typical function takes up.    
For this reason, most people define as many
functions as possible rather than keep lots of scripts around.</P
><p class="para">The other advantage of functions is that they are ideal
for organizing long shell scripts into modular &quot;chunks&quot; of
code that are easier to develop and maintain. If you aren't a programmer,
ask one what life would be like without functions (also called
<em class="emphasis">procedures</EM
> or <em class="emphasis">subroutines</EM
> in other languages) and
you'll probably get an earful.<a class="indexterm" name="AUTOID-5410"></A
></P
><p class="para"><a class="indexterm" name="AUTOID-5412"></A
>To define a function, you can use either one of two forms:</P
><p class="para"><blockquote class="screen"><pre class="screen">function <em class="emphasis">functname</EM
> {
    <em class="emphasis">shell commands</EM
>
}</PRE
></BLOCKQUOTE
></P
><p class="para">or:</P
><p class="para"><blockquote class="screen"><pre class="screen"><em class="emphasis">functname</EM
> () {
    <em class="emphasis">shell commands</EM
>
}</PRE
></BLOCKQUOTE
></P
><p class="para">There is no difference between the two.  <a class="indexterm" name="AUTOID-5425"></A
><a class="indexterm" name="AUTOID-5427"></A
><a class="indexterm" name="AUTOID-5429"></A
><a class="indexterm" name="AUTOID-5431"></A
>
Perhaps the first form was 
created to appeal to Pascal, Modula, 
and Ada
programmers, while the second resembles C;
in any case, we will use the first form in this book.  <a class="indexterm" name="AUTOID-5433"></A
>
You can also delete a function definition with the command 
<b class="emphasis.bold">unset -f</B
> <em class="emphasis">functname</EM
>.</P
><p class="para">When you define a function,
you tell the shell to store its name and definition (i.e., 
the shell commands it contains) in memory.  <a class="indexterm" name="AUTOID-5439"></A
><a class="indexterm" name="AUTOID-5440"></A
>
If you want to run the 
function later, just
type in its name followed by any arguments, as if it were a shell script.  </P
><p class="para"><a class="indexterm" name="AUTOID-5444"></A
>You can find
out what functions are defined in your login session by typing
<b class="emphasis.bold">functions</B
>.  
[1]
The shell will print not just the names but the definitions
of all functions, in alphabetical order by function name.
Since this may result in long output, you might want to pipe
the output through <em class="emphasis">more</EM
> or redirect it to a file for examination
with a text editor.</P
><blockquote class="footnote"><p class="para">[1] This is actually an alias for <b class="emphasis.bold">typeset -f</B
>; see <a class="xref" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm" title="Command-line Options and Typed Variables">Chapter 6, Command-line Options and Typed Variables</A
>.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-5454"></A
>Apart from the advantages, there are two important differences
betweeen functions and scripts.  First, functions do not run in
separate processes, as scripts are when you invoke them by name; the
&quot;semantics&quot; of running a function are more like those of
your <em class="emphasis">.profile</EM
> when you log in or
any script when invoked with the &quot;dot&quot; command.  Second, if a function has
the same name as a script or executable program, the function takes
precedence.</P
><p class="para"><a class="indexterm" name="AUTOID-5459"></A
>This is a good time to show the order of precedence for
the various sources of commands.  When you type a command to the
shell, it looks in the following places until it finds a match:<a class="indexterm" name="AUTOID-5462"></A
><a class="indexterm" name="AUTOID-5465"></A
><a class="indexterm" name="AUTOID-5468"></A
><a class="indexterm" name="AUTOID-5471"></A
><a class="indexterm" name="AUTOID-5474"></A
><a class="indexterm" name="AUTOID-5477"></A
></P
><ol class="orderedlist"><li class="listitem"><p class="para"><em class="emphasis">Keywords</EM
> such as <b class="emphasis.bold">function</B
> and several others,
like <b class="emphasis.bold">if</B
> and <b class="emphasis.bold">for</B
>, that we will see in <a class="xref" href="ch05_01.htm" webstripperlinkwas="ch05_01.htm" title="Flow Control">Chapter 5, Flow Control</A
></P
></LI
><li class="listitem"><p class="para">Aliases
[2]</P
><blockquote class="footnote"><p class="para">[2] However, it is possible to define an alias for a keyword, e.g., 
<b class="emphasis.bold">alias aslongas=while</B
>.  See <a class="xref" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="Input/Output and Command-line Processing">Chapter 7</A
> for more details.</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para"><em class="emphasis">Built-ins</EM
> like <b class="emphasis.bold">cd</B
> and <b class="emphasis.bold">whence</B
></P
></LI
><li class="listitem"><p class="para">Functions</P
></LI
><li class="listitem"><p class="para">Scripts and executable programs, for which the shell searches
in the directories listed in the <b class="emphasis.bold">PATH</B
> environment variable</P
></LI
></OL
><p class="para">We'll examine this process in more detail in the section on
command-line processing in <a class="xref" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="Input/Output and Command-line Processing">Chapter 7</A
>. </P
><p class="para"><a class="indexterm" name="AUTOID-5508"></A
><a class="indexterm" name="AUTOID-5510"></A
>If you need to know the exact source of a command, there is
an option to the <b class="emphasis.bold">whence</B
> built-in command that we saw 
in <a class="xref" href="ch03_01.htm" webstripperlinkwas="ch03_01.htm" title="Customizing Your Environment">Chapter 3</A
>.  <b class="emphasis.bold">whence</B
> by itself will
print the pathname of a command if the command
is a script or executable
program, but it will only parrot the command's 
name back if it
is anything else.
But if you type <b class="emphasis.bold">whence -v</B
> <em class="emphasis">commandname</EM
>,
you get more complete information, such as:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">whence -v cd</B
>
cd is a shell builtin
$ <b class="emphasis.bold">whence -v function</B
>
function is a keyword
$ <b class="emphasis.bold">whence -v man</B
>
man is /usr/bin/man
$ <b class="emphasis.bold">whence -v ll</B
>
ll is an alias for ls -l</PRE
></BLOCKQUOTE
></P
><p class="para">We will refer mainly to scripts throughout the remainder of this book, 
but unless we note otherwise, you should assume that whatever we
say applies equally to functions.  </P
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-4-SECT-1.1.1">4.1.1.1 Autoloaded functions</A
></H4
><p class="para"><a class="indexterm" name="KSH-CH-4-IX-FUNCTIONS-AUTOLOADED"></A
>The simplest place to put your function definitions is in your
<em class="emphasis">.profile</EM
> or environment file.  This is fine for a small number of
functions, but if you accumulate lots of them-as many shell
programmers eventually do-you may find that logging in or
invoking shell scripts (both of which involve processing your 
environment file) takes an
unacceptably long time, and that it's hard to navigate so many
function definitions in a single file.</P
><p class="para"><a class="indexterm" name="KSH-CH-4-IX-AUTOLOAD"></A
><a class="indexterm" name="AUTOID-5535"></A
>The Korn shell's <b class="emphasis.bold">autoload</B
> feature addresses these problems.
If you put the command <b class="emphasis.bold">autoload</B
> <em class="emphasis">fname</EM
>
[3]
in your <em class="emphasis">.profile</EM
> or environment file, instead of the function's
definition, then the shell won't read in the definition of <em class="emphasis">fname</EM
>
until it's actually called.  <b class="emphasis.bold">autoload</B
> can take more than one argument.</P
><blockquote class="footnote"><p class="para">[3] <b class="emphasis.bold">autoload</B
> is actually an alias for <b class="emphasis.bold">typeset -fu</B
>; see <a class="xref" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm" title="Command-line Options and Typed Variables">Chapter 6</A
>.</P
></BLOCKQUOTE
><p class="para">How does the shell know where to get the definition of an autoloaded
function?  <a class="indexterm" name="AUTOID-5550"></A
><a class="indexterm" name="AUTOID-5552"></A
>
It uses the built-in
variable <b class="emphasis.bold">FPATH</B
>, which is a list of directories like <b class="emphasis.bold">PATH</B
>.
The shell looks for a file called <em class="emphasis">fname</EM
>
that contains the definition of function <em class="emphasis">fname</EM
>
in each of the directories in <b class="emphasis.bold">FPATH</B
>.</P
><p class="para">For example, assume this code is in your environment file:</P
><p class="para"><blockquote class="screen"><pre class="screen">FPATH=~/funcs
autoload dave</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-5564"></A
>When you invoke the command <em class="emphasis">dave</EM
>, the shell will
look in the directory <em class="emphasis">~/funcs</EM
> for a file called <em class="emphasis">dave</EM
> that
has the definition of function <em class="emphasis">dave</EM
>.  If it doesn't find the file,
or if 
the file exists but doesn't contain the proper function 
definition,
the shell will complain with a &quot;not found&quot; message, just as if
the command didn't exist at all.</P
><p class="para">Function autoloading and <b class="emphasis.bold">FPATH</B
> are also useful tools
for system administrators who need to set up system-wide
Korn shell environments.  See <a class="xref" href="ch10_01.htm" webstripperlinkwas="ch10_01.htm" title="Korn Shell Administration">Chapter 10, Korn Shell Administration</A
>.<a class="indexterm" name="AUTOID-5572"></A
></P
></DIV
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch03_06.htm" webstripperlinkwas="ch03_06.htm" title="3.6 Customization Hints"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 3.6 Customization Hints" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_02.htm" webstripperlinkwas="ch04_02.htm" title="4.2 Shell Variables"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 4.2 Shell Variables" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">3.6 Customization Hints</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.2 Shell Variables</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
