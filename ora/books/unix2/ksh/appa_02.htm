<html><head>
<title>[Appendix A] A.2 The IEEE 1003.2 POSIX Shell Standard</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:18:15Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="appa_01.htm" webstripperlinkwas="appa_01.htm" title="A. Related Shells"><link rel="prev" href="appa_01.htm" webstripperlinkwas="appa_01.htm" title="A.1 The Bourne Shell"><link rel="next" href="appa_03.htm" webstripperlinkwas="appa_03.htm" title="A.3 wksh"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="appa_01.htm" webstripperlinkwas="appa_01.htm" title="A.1 The Bourne Shell"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: A.1 The Bourne Shell" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Appendix A<br>Related Shells</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="appa_03.htm" webstripperlinkwas="appa_03.htm" title="A.3 wksh"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: A.3 wksh" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="KSH-APA-SECT-2">A.2 The IEEE 1003.2 POSIX Shell Standard</A
></H2
><p class="para"><a class="indexterm" name="KSH-APA-IX-POSIX-SHELL"></A
>There have been many attempts to standardize UNIX.
Hardware companies' monolithic attempts at market
domination, fragile industry coalitions, marketing failures,
and other such
efforts are the stuff of history-and the stuff of frustration.</P
><p class="para"><a class="indexterm" name="KSH-APA-IX-POSIX-HISTORY"></A
>Only one standardization effort has not been tied to 
commercial interests: the Portable Operating System
Interface, known as POSIX. This effort started in 1981 with the
<em class="emphasis">/usr/group</EM
> (now UniForum) Standards Committee, which
produced the <em class="emphasis">/usr/group Standard</EM
> three years later.<a class="indexterm" name="AUTOID-17255"></A
><a class="indexterm" name="AUTOID-17257"></A
><a class="indexterm" name="AUTOID-17260"></A
><a class="indexterm" name="AUTOID-17263"></A
>
The list of contributors grew to include  
the Institute of Electrical and Electronic Engineers (IEEE)
and the International Organization for Standardization (ISO).</P
><p class="para"><a class="indexterm" name="AUTOID-17266"></A
><a class="indexterm" name="AUTOID-17269"></A
>The first POSIX standard was published in 1988. This one,
called IEEE P1003.1, covers low-level issues at the system 
call level. IEEE P1003.2,
covering the shell, utility programs, 
and user interface issues, was ratified in September 1992
after a six-year effort.<a class="indexterm" name="AUTOID-17273"></A
></P
><p class="para">The POSIX standards were never meant to be rigid and absolute.
The committee members certainly weren't about to put guns
to the heads of operating system implementors and force them
to adhere. Instead, the standards are designed to be flexible
enough to allow for both coexistence of similar available software,
so that existing code isn't in danger of obsolescence, 
and the addition of new features, so that vendors have the incentive
to innovate. In other words, they are
supposed to be the kind of third-party standards that vendors might
actually be interested in following.</P
><p class="para">As a result, most UNIX vendors currently comply with
POSIX 1003.1. Now that POSIX 1003.2 is available,
the most important shells will undoubtedly
adhere to it in the future. The Korn
shell is no exception; it's expected to be 100%
POSIX compliant in its next release, which should be within the
next two years. Therefore you should pay attention
to the differences between the current Korn shell and 1003.2
if you write shell code that you would like to be portable in
the not-too-distant future.</P
><p class="para">POSIX 1003.2 itself consists of two parts. The first, 1003.2, 
addresses shell script portability; it defines the shell and
the standard utilities.<a class="indexterm" name="AUTOID-17277"></A
>
The second, 1003.2a, called the User Portability Extensions
(UPE), defines standards of interactive shell use and
interactive utilities like the <em class="emphasis">vi</EM
> editor. The combined
document-on the order of 2000 pages-is available through 
the IEEE; for information, call (800) 678-IEEE.</P
><p class="para">The committee members had two motivating factors to weigh
when they designed the 1003.2 shell standard.  <a class="indexterm" name="AUTOID-17282"></A
><a class="indexterm" name="AUTOID-17286"></A
><a class="indexterm" name="AUTOID-17290"></A
><a class="indexterm" name="AUTOID-17294"></A
>
On the one hand,
the design had to accomodate, as much as possible,
existing shell code written under various Bourne-derived 
shells (the Version 7, System V, BSD, and Korn shells).
These shells are different in several extremely subtle ways,
most of which have to do with the ways certain syntactic
elements interact with each other.  </P
><p class="para">It must have been 
quite difficult and tedious to spell out these differences, let
alone to reach compromises among them. Throw in biases
of some committee members towards particular shells, and you might
understand why it took six years to ratify 1003.2.</P
><p class="para">On the other hand, the shell design had to serve as a standard
on which to base future shell implementations. This implied
goals of simplicity, clarity, and precision-objectives that seem
especially elusive in the context of the above problems.</P
><p class="para">The designers found one way of ameliorating this dilemma:
they decided that the standard should include not only the
features included in the shell, but also those explicitly
omitted and those included but with unspecified
functionality. The latter category allows some of
the existing shells' innovations to &quot;sneak through&quot; without
becoming part of the standard, while listing omitted features
helps programmers determine which features in existing
shell scripts won't be portable to future shells.</P
><p class="para"><a class="indexterm" name="AUTOID-17300"></A
><a class="indexterm" name="AUTOID-17302"></A
><a class="indexterm" name="AUTOID-17306"></A
>The POSIX standard is primarily based on the System V
Bourne shell, which is a superset of the Version 7 shell
discussed earlier in this Appendix. Therefore you should
assume that Korn shell features that aren't present in 
the Bourne shell also aren't included in the POSIX standard.</P
><p class="para"><a class="indexterm" name="AUTOID-17311"></A
>However, the Korn shell did contribute a few of its features to 
the POSIX standard, including:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-17318"></A
><b class="emphasis.bold">$((</B
>...<b class="emphasis.bold">))</B
> syntax for arithmetic expressions.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-17324"></A
><a class="indexterm" name="AUTOID-17326"></A
><b class="emphasis.bold">$(</B
>...<b class="emphasis.bold">)</B
> syntax for command substitution, except
that the <b class="emphasis.bold">$</B
>(&lt;<em class="emphasis">filename)</EM
> shorthand for
<b class="emphasis.bold">$(cat</B
> <em class="emphasis">filename</EM
><b class="emphasis.bold">)</B
> isn't supported.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-17338"></A
><a class="indexterm" name="AUTOID-17340"></A
>Tilde expansion (originally derived from the C shell).</P
></LI
></UL
><p class="para">The following Korn shell features are left
&quot;unspecified&quot; in the standard, meaning that their syntax
is acceptable but their functionality is not standardized:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-17346"></A
>The <b class="emphasis.bold">((</B
>...<b class="emphasis.bold">))</B
> syntax for arithmetic conditionals.
The arithmetic test operators introduced in <a class="xref" href="ch05_01.htm" webstripperlinkwas="ch05_01.htm" title="Flow Control">Chapter 5</A
>,
(e.g., <b class="emphasis.bold">-eq</B
>, <b class="emphasis.bold">-lt</B
>), however, are included.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-17356"></A
>The <b class="emphasis.bold">[[</B
>...<b class="emphasis.bold">]]</B
> syntax for conditional tests.
The external <em class="emphasis">test</EM
> or <b class="emphasis.bold">[</B
>...<b class="emphasis.bold">]</B
> utility should
be used instead.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-17365"></A
>The syntax for defining functions that this book uses.
The other syntax shown in <a class="xref" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="Basic Shell Programming">Chapter 4</A
> (<em class="emphasis">fname</EM
><b class="emphasis.bold">()</B
> instead of 
<b class="emphasis.bold">function</B
> <em class="emphasis">fname</EM
>) is supported;
see below.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-17375"></A
>The <b class="emphasis.bold">select</B
> control structure.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-17380"></A
>Code blocks (<b class="emphasis.bold">{</B
>...<b class="emphasis.bold">}</B
>) are supported, but for
maximum portability, the curly braces should be quoted
(for reasons too complicated to go into here).</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-17387"></A
><a class="indexterm" name="AUTOID-17390"></A
><a class="indexterm" name="AUTOID-17393"></A
>Signal numbers are only allowed if
the numbers for certain key signals
(INT, TERM, and a few others) are the same as on 
the most important historical versions of UNIX. In general,
shell scripts should use symbolic names for signals.</P
></LI
></UL
><p class="para">The POSIX standard supports functions, 
as shown above, but the 
semantics are weaker: functions do not have local
traps or options, it is not possible to define local
variables, and functions can't be exported.</P
><p class="para">The POSIX standard also has a few new features:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-17401"></A
>The command lookup order has been changed to allow 
certain built-in commands to be overridden by functions-since
aliases aren't included in the standard. (Recall that we had
to use an alias as &quot;decoy&quot; for a function that superseded the
<b class="emphasis.bold">cd</B
> command in <a class="xref" href="ch05_01.htm" webstripperlinkwas="ch05_01.htm" title="Flow Control">Chapter 5</A
>.) 
Built-in commands are divided into two
sets by their positions in the command lookup order:
some are processed before functions, some after.
Specifically, the built-in commands
<b class="emphasis.bold">break</B
>, <code class="literal">:</CODE
> (do nothing), 
<b class="emphasis.bold">continue</B
>, <code class="literal">.</CODE
>&nbsp;(dot), <b class="emphasis.bold">eval</B
>, <b class="emphasis.bold">exec</B
>, <b class="emphasis.bold">exit</B
>, 
<b class="emphasis.bold">export</B
>, <b class="emphasis.bold">readonly</B
>, <b class="emphasis.bold">return</B
>, <b class="emphasis.bold">set</B
>, <b class="emphasis.bold">shift</B
>, 
<b class="emphasis.bold">trap</B
>, and <b class="emphasis.bold">unset</B
> take priority over functions.</P
></LI
><li class="listitem"><p class="para">A new built-in command, <b class="emphasis.bold">command</B
>, allows you to 
use built-in commands other than the above even if there
are functions of the same name.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-17425"></A
>A new keyword, <b class="emphasis.bold">!</B
>, takes the logical
&quot;not&quot; of a command's exit status: if <em class="emphasis">command</EM
> returns
exit status 0, <b class="emphasis.bold">!</B
> <em class="emphasis">command</EM
> returns 1; if <em class="emphasis">command</EM
>
returns a non-0 value, <b class="emphasis.bold">!</B
> <em class="emphasis">command</EM
> returns 0.<a class="indexterm" name="AUTOID-17435"></A
><a class="indexterm" name="AUTOID-17438"></A
><a class="indexterm" name="AUTOID-17441"></A
>
<b class="emphasis.bold">!</B
> can be used with 
<b class="emphasis.bold">&amp;&amp;</B
>, <b class="emphasis.bold">||</B
>, and parentheses (for nested subshells)
to create logical combinations of exit statuses in conditionals.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-17449"></A
>The command <b class="emphasis.bold">unset -v</B
> is used instead of <b class="emphasis.bold">unset</B
>
(without an option) to remove the definition of a variable.
This provides a better syntactic match with <b class="emphasis.bold">unset -f</B
>,
for unsetting functions.</P
></LI
></UL
><p class="para"><a class="indexterm" name="AUTOID-17456"></A
>Finally, because the POSIX standard is meant to promote
shell script portability, it explicitly avoids mention of
features that only apply to interactive shell use-including
aliases, editing modes, control keys, and so on. The UPE
covers these.  <a class="indexterm" name="AUTOID-17459"></A
>
It also avoids mentioning certain key
implementation issues: in particular, there is no
requirement that multitasking be used for background jobs,
subshells, etc.<a class="indexterm" name="AUTOID-17461"></A
><a class="indexterm" name="AUTOID-17463"></A
>
This was done to allow portability to
non-multitasking systems like MS-DOS, so that, for example,
the MKS Toolkit (see below) can be POSIX compliant.<a class="indexterm" name="AUTOID-17465"></A
></P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="appa_01.htm" webstripperlinkwas="appa_01.htm" title="A.1 The Bourne Shell"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: A.1 The Bourne Shell" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="appa_03.htm" webstripperlinkwas="appa_03.htm" title="A.3 wksh"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: A.3 wksh" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">A.1 The Bourne Shell</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">A.3 wksh</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
