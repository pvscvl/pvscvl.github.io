<html><head>
<title>[Chapter 3] 3.4 Shell Variables</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T20:58:51Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch03_01.htm" webstripperlinkwas="ch03_01.htm" title="3. Customizing Your Environment"><link rel="prev" href="ch03_03.htm" webstripperlinkwas="ch03_03.htm" title="3.3 Options"><link rel="next" href="ch03_05.htm" webstripperlinkwas="ch03_05.htm" title="3.5 Customization and Subprocesses"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch03_03.htm" webstripperlinkwas="ch03_03.htm" title="3.3 Options"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 3.3 Options" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 3<br>Customizing Your Environment</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch03_05.htm" webstripperlinkwas="ch03_05.htm" title="3.5 Customization and Subprocesses"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 3.5 Customization and Subprocesses" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="KSH-CH-3-SECT-4">3.4 Shell Variables</A
></H2
><p class="para"><a class="indexterm" name="KSH-CH-3-IX-VARS"></A
><a class="indexterm" name="AUTOID-4244"></A
><a class="indexterm" name="AUTOID-4248"></A
><a class="indexterm" name="AUTOID-4252"></A
><a class="indexterm" name="AUTOID-4255"></A
>There are several characteristics of your environment that you
may want to customize but that cannot be expressed as an on/off choice.
Characteristics of this type are specified in shell variables.
Shell variables can specify everything from your
prompt string to how often the shell checks for new mail.</P
><p class="para">Like an alias, a shell variable is a name that has a value
associated with it.  <a class="indexterm" name="AUTOID-4259"></A
>
The Korn shell keeps track of several
built-in shell variables; shell programmers can add their own.
By convention, built-in variables have names in all capital letters.<a class="indexterm" name="AUTOID-4262"></A
><a class="indexterm" name="AUTOID-4265"></A
>
The syntax for defining variables is somewhat similar to the
syntax for aliases:</P
><p class="para"><blockquote class="screen"><pre class="screen"><em class="emphasis">varname</EM
>=<em class="emphasis">value</EM
></PRE
></BLOCKQUOTE
></P
><p class="para">There must be no space on either side of the
equal sign, and if the value is more than one word, it must
be surrounded by quotes.  <a class="indexterm" name="AUTOID-4273"></A
>
To use the value of a variable in a
command, precede its name by a dollar sign (<b class="emphasis.bold">$</B
>).  </P
><p class="para"><a class="indexterm" name="AUTOID-4279"></A
>You can
delete a variable with the command <b class="emphasis.bold">unset</B
> <em class="emphasis">varname</EM
>.
Normally this isn't useful, since all variables that don't exist
are assumed to be null, i.e., equal to the empty string &quot;&quot;.
But if you use the option <b class="emphasis.bold">nounset</B
> (see 
<a class="xref" href="ch03_03.htm" webstripperlinkwas="ch03_03.htm#KSH-CH-3-TAB-0" title="Basic Shell Options">Table 3.1</A
>),
which causes
the shell to indicate an error when it encounters an undefined
variable, then you may be interested in <b class="emphasis.bold">unset</B
>.</P
><p class="para"><a class="indexterm" name="KSH-CH-3-IX-PRINT"></A
>The easiest way to check a variable's value is to use the
<b class="emphasis.bold">print</B
> built-in command.  
[7]
All <b class="emphasis.bold">print</B
> does is print its
arguments, but not until the shell has evaluated them. This
includes-among other things that will be discussed later-taking 
the values of variables and expanding filename wildcards.
So, if the variable <b class="emphasis.bold">fred</B
> has the value <b class="emphasis.bold">bob</B
>, typing:</P
><blockquote class="footnote"><p class="para">[7] The Korn shell supports the old command <em class="emphasis">echo</EM
>,
which does much the same thing, for backward compatibility
reasons.  <a class="indexterm" name="AUTOID-4294"></A
><a class="indexterm" name="AUTOID-4296"></A
><a class="indexterm" name="AUTOID-4300"></A
>
However, we strongly recommend <b class="emphasis.bold">print</B
> because
its options are the same on all UNIX systems, whereas <em class="emphasis">echo</EM
>'s
options differ between BSD-derived and System V-derived UNIX
versions.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">print &quot;$fred&quot;</B
></PRE
></BLOCKQUOTE
></P
><p class="para">will cause the shell to simply print <b class="emphasis.bold">bob</B
>.
If the variable is undefined, the shell will print a blank line.
A more verbose way to do this is:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">print &quot;The value of \$</B
><em class="emphasis">varname</EM
><b class="emphasis.bold"> is</B
> \&quot;$<em class="emphasis">varname</EM
><b class="emphasis.bold">\&quot;.&quot;</B
></PRE
></BLOCKQUOTE
></P
><p class="para">The first dollar sign and the inner double quotes 
are backslash-escaped (i.e., preceded with <b class="emphasis.bold">\</B
> so the shell
doesn't try to interpret them; see <a class="xref" href="ch01_01.htm" webstripperlinkwas="ch01_01.htm" title="Korn Shell Basics">Chapter 1</A
>) so that
they appear literally in the output, which for the above example would be:</P
><p class="para"><blockquote class="screen"><pre class="screen">The value of $fred is &quot;bob&quot;.</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-4327"></A
><a class="indexterm" name="AUTOID-4328"></A
></P
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-3-SECT-4.1">3.4.1 Variables and Quoting</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-3-IX-QUOTING-VARS"></A
><a class="indexterm" name="KSH-CH-3-IX-VARS-QUOTING-RULES"></A
><a class="indexterm" name="KSH-CH-3-IX-WEAK-QUOTES"></A
>Notice that we used double quotes around variables (and strings
containing them) in these <b class="emphasis.bold">print</B
> examples. In <a class="xref" href="ch01_01.htm" webstripperlinkwas="ch01_01.htm" title="Korn Shell Basics">Chapter 1</A
>
we said that some special characters inside double quotes
are still interpreted (while none are interepreted inside single
quotes).  <a class="indexterm" name="AUTOID-4342"></A
><a class="indexterm" name="AUTOID-4345"></A
>
We've seen one of these special characters already:
the tilde (<b class="emphasis.bold">~</B
>), which is expanded to your (or another user's)
home directory.</P
><p class="para">Another special character that &quot;survives&quot; double quotes is
the dollar sign&nbsp;- meaning that variables are evaluated.
It's possible to do without the double quotes in some cases;
for example, we could have written the above <b class="emphasis.bold">print</B
>
command this way:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">print The value of \$</B
><em class="emphasis">varname</EM
><b class="emphasis.bold"> is \&quot;$</B
><em class="emphasis">varname</EM
><b class="emphasis.bold">\&quot;</B
>.</PRE
></BLOCKQUOTE
></P
><p class="para">But double quotes are more generally correct.</P
><p class="para">Here's why. Suppose we did this:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">fred=&gt;</B
>'<b class="emphasis.bold">Four spaces between these    words.</B
>'</PRE
></BLOCKQUOTE
></P
><p class="para">Then if we entered the command <b class="emphasis.bold">print $fred</B
>, the result
would be:</P
><p class="para"><blockquote class="screen"><pre class="screen">Four spaces between these words.</PRE
></BLOCKQUOTE
></P
><p class="para">What happened to the extra spaces? Without the double
quotes, the shell split the string into words
after substituting the variable's value, as it normally
does when it processes command lines. The double quotes
circumvent this part of the process (by making the shell think
that the whole quoted string is a single word).</P
><p class="para">Therefore the command <b class="emphasis.bold">print</B
> 
<code class="literal">&quot;$</CODE
><b class="emphasis.bold">fred</B
><code class="literal">&quot;</CODE
> prints this:</P
><p class="para"><blockquote class="screen"><pre class="screen">Four spaces between these    words.</PRE
></BLOCKQUOTE
></P
><p class="para">This becomes particularly important when we start dealing
with variables that contain user or file input later on.</P
><p class="para">Double quotes also allow other special characters to
work, as we'll see in Chapters 4, 6, and 7.
But for now,
we'll revise the &quot;When in doubt, use single quotes&quot; rule in
<a class="xref" href="ch01_01.htm" webstripperlinkwas="ch01_01.htm" title="Korn Shell Basics">Chapter 1</A
> by adding, &quot;...unless a string contains a variable,
in which case you should use double quotes.&quot; <a class="indexterm" name="AUTOID-4379"></A
><a class="indexterm" name="AUTOID-4380"></A
><a class="indexterm" name="AUTOID-4381"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-3-SECT-4.2">3.4.2 Built-in Variables</A
></H3
><p class="para">As with options, some built-in shell variables are meaningful to general
UNIX users, while others are arcana for hackers. We'll look at
the more generally useful ones here, 
and we'll save some of the more obscure ones for later chapters.
Again, <a class="xref" href="appb_01.htm" webstripperlinkwas="appb_01.htm" title="Reference Lists">Appendix B</A
> contains a complete list.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-3-SECT-4.2.1">3.4.2.1 Editing mode variables</A
></H4
><p class="para">Several shell variables relate to the command-line editing modes
that we saw in the previous chapter. These are listed in
<a class="xref" href="#KSH-CH-3-TAB-1" title="Editing Mode Variables">Table 3.2</A
>.</P
><p class="para">The first two of these are sometimes used by text
editors and other 
screen-oriented programs, which rely on the variables
being set correctly. Although the Korn shell
and most windowing systems should know how to set them correctly, 
you should look at the values of <b class="emphasis.bold">COLUMNS</B
> and <b class="emphasis.bold">LINES</B
>
if you are having display trouble with a screen-oriented program.<a class="indexterm" name="AUTOID-4393"></A
><a class="indexterm" name="AUTOID-4396"></A
><a class="indexterm" name="AUTOID-4398"></A
><a class="indexterm" name="AUTOID-4401"></A
><a class="indexterm" name="AUTOID-4403"></A
><a class="indexterm" name="AUTOID-4406"></A
><a class="indexterm" name="AUTOID-4408"></A
><a class="indexterm" name="AUTOID-4411"></A
><a class="indexterm" name="AUTOID-4413"></A
><a class="indexterm" name="AUTOID-4416"></A
><a class="indexterm" name="AUTOID-4418"></A
><a class="indexterm" name="AUTOID-4421"></A
></P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-3-TAB-1">Table 3.2: Editing Mode Variables</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Variable</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Meaning</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">COLUMNS</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Width, in character columns, of your terminal. 
The standard value is 80 (sometimes 132), though if you are 
using a windowing system like X, you could give a terminal 
window any size you wish.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">LINES</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Length of your terminal in text lines. The standard value for
terminals is 24, but for IBM PC-compatible monitors it's 25; once
again, if you are using a windowing system, you can usually resize
to any amount.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">HISTFILE</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Name of history file, on which the editing modes operate.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">EDITOR</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Pathname of your favorite text editor; the suffix (<em class="emphasis">macs</EM
> or <em class="emphasis">vi</EM
>)
determines which editing mode to use.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">VISUAL</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Similar to EDITOR; used if EDITOR is not set or vice versa.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">FCEDIT</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Pathname of editor to use with the <b class="emphasis.bold">fc</B
> command.</P
></TD
></TR
></TBODY
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-3-SECT-4.2.2">3.4.2.2 Mail Variables</A
></H4
><p class="para"><a class="indexterm" name="KSH-CH-3-IX-MAIL"></A
>Since the <em class="emphasis">mail</EM
> program is not running all
the time, there is no way for it to inform you when you get new mail;
therefore the shell does this instead.  
[8]
The shell can't actually check for incoming mail, but it can look at your
mail file periodically and determine whether the file has been modified 
since the last check.
The variables listed in 
<a class="xref" href="#KSH-CH-3-TAB-2" title="Mail Variables">Table 3.3</A
>
let you control how this works.<a class="indexterm" name="AUTOID-4483"></A
><a class="indexterm" name="AUTOID-4485"></A
><a class="indexterm" name="AUTOID-4487"></A
><a class="indexterm" name="AUTOID-4489"></A
><a class="indexterm" name="AUTOID-4492"></A
><a class="indexterm" name="AUTOID-4495"></A
></P
><blockquote class="footnote"><p class="para">[8] <a class="indexterm" name="AUTOID-4472"></A
><a class="indexterm" name="AUTOID-4476"></A
><a class="indexterm" name="AUTOID-4478"></A
>BSD UNIX users should note that the <em class="emphasis">biff</EM
> command 
on those systems does a better job of this; while the Korn shell
only prints &quot;you have mail&quot; messages right before it prints
command prompts, <em class="emphasis">biff</EM
> can do so at any time.</P
></BLOCKQUOTE
><table class="table"><caption class="table"><a class="title" name="KSH-CH-3-TAB-2">Table 3.3: Mail Variables</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Variable</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Meaning</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">MAIL</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Name of file to check for incoming mail (i.e., your mail file)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">MAILCHECK</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">How often, in seconds, to check for new mail (default 600 seconds,
or 10 minutes)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">MAILPATH</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">List of filenames, separated by colons (<code class="literal">:</CODE
>), to check for 
incoming mail</P
></TD
></TR
></TBODY
></TABLE
><p class="para">Under the simplest scenario, you use the standard UNIX mail program,
and your mail file is <em class="emphasis">/usr/mail/yourname</EM
> or something
similar.  <a class="indexterm" name="AUTOID-4524"></A
><a class="indexterm" name="AUTOID-4526"></A
>
In this case, you would 
just set the variable <b class="emphasis.bold">MAIL</B
>
to this filename if you want your mail checked:</P
><p class="para"><blockquote class="screen"><pre class="screen">MAIL=/usr/mail/yourname</PRE
></BLOCKQUOTE
></P
><p class="para">If your system
administrator hasn't already done it for you, put a line like this
in your <em class="emphasis">.profile</EM
>.</P
><p class="para"><a class="indexterm" name="KSH-CH-3-IX-MAILPATH"></A
><a class="indexterm" name="KSH-CH-3-IX-ENV-VARS-MAILPATH"></A
>However, some people use nonstandard mailers that
use multiple mail files;
<b class="emphasis.bold">MAILPATH</B
> was designed to accommodate this.
The Korn shell will use the value of <b class="emphasis.bold">MAIL</B
> as the name
of the file to check, unless <b class="emphasis.bold">MAILPATH</B
> is set, 
in which case the shell will check each file in the <b class="emphasis.bold">MAILPATH</B
>
list for new mail. You can use this mechanism to have the shell
print a different message for each mail file:
for each mail filename in <b class="emphasis.bold">MAILPATH</B
>, append a question mark followed
by the message you want printed. </P
><p class="para">For example, let's say you have a mail system that automatically
sorts your mail into files according to the username of the sender.
You have mail files called <em class="emphasis">/usr/mail/you/fritchie</EM
>, 
<em class="emphasis">/usr/mail/you/droberts</EM
>, <em class="emphasis">/usr/mail/you/jphelps</EM
>, etc.
You define your <b class="emphasis.bold">MAILPATH</B
> as follows:</P
><p class="para"><blockquote class="screen"><pre class="screen">MAILPATH=/usr/mail/you/fritchie:/usr/mail/you/droberts:\
/usr/mail/you/jphelps</PRE
></BLOCKQUOTE
></P
><p class="para">If you get mail from Jennifer Phelps,
then the file <em class="emphasis">/usr/mail/you/jphelps</EM
> will change. The Korn
shell will notice the change within 10 minutes and print the message:</P
><p class="para"><blockquote class="screen"><pre class="screen">you have mail in /usr/mail/you/jphelps.</PRE
></BLOCKQUOTE
></P
><p class="para">If you are in the middle of running a command, the shell will
wait until the command finishes (or is suspended) to print the message.
To customize this further, you could define <b class="emphasis.bold">MAILPATH</B
> to be:</P
><p class="para"><blockquote class="screen"><pre class="screen">MAILPATH=\
/usr/mail/you/fritchie?You have mail from Fiona.:\
/usr/mail/you/droberts?Mail from Dave has arrived.:\
/usr/mail/you/jphelps?There is new mail from Jennifer.</PRE
></BLOCKQUOTE
></P
><p class="para">The backslashes at the end of each line allow you to continue
your command on the next line. But be careful: you can't indent
subsequent lines. Now, if you get mail from Jennifer, the shell
will print:</P
><p class="para"><blockquote class="screen"><pre class="screen">There is new mail from Jennifer.</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-4564"></A
><a class="indexterm" name="AUTOID-4565"></A
><a class="indexterm" name="AUTOID-4566"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-3-SECT-4.2.3">3.4.2.3 Prompting Variables</A
></H4
><p class="para"><a class="indexterm" name="KSH-CH-3-IX-PROMPTS"></A
>If you have seen enough experienced UNIX users at work, you
may already have realized that the shell's prompt is not
engraved in stone. It seems as though one of the favorite
pastimes of UNIX hackers is thinking of cute or innovative
prompt strings. We'll give you some of the information you
need to do your own here; the rest will come in the next chapter.</P
><p class="para">Actually, the Korn shell uses four prompt strings.  <a class="indexterm" name="KSH-CH-3-IX-PS1"></A
><a class="indexterm" name="AUTOID-4575"></A
><a class="indexterm" name="AUTOID-4577"></A
><a class="indexterm" name="AUTOID-4579"></A
><a class="indexterm" name="KSH-CH-3-IX-BUILT-IN-VARS-PS1"></A
><a class="indexterm" name="AUTOID-4584"></A
><a class="indexterm" name="AUTOID-4587"></A
><a class="indexterm" name="AUTOID-4590"></A
>
They are stored in the variables <b class="emphasis.bold">PS1</B
>, <b class="emphasis.bold">PS2</B
>, <b class="emphasis.bold">PS3</B
>,
and <b class="emphasis.bold">PS4</B
>.  <a class="indexterm" name="AUTOID-4597"></A
><a class="indexterm" name="AUTOID-4600"></A
>
The first of these is called the primary
prompt string; it is your usual shell prompt, and its default
value is &quot;<b class="emphasis.bold">$</B
> &quot; (a dollar sign followed by a space).
Many people like to set their primary prompt
string to something containing their login name.  
Here is one way to do this:<a class="indexterm" name="AUTOID-4605"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen">PS1=&quot;($LOGNAME)-&gt; &quot;</PRE
></BLOCKQUOTE
></P
><p class="para"><b class="emphasis.bold">LOGNAME</B
> is another built-in shell variable, which is set to
your login name when you log in.
So, <b class="emphasis.bold">PS1</B
> becomes a left parenthesis, followed by
your login name, followed by &quot;<b class="emphasis.bold">)-&gt;</B
> &quot;.
If your login name is fred, your prompt string will be
<code class="literal">&quot;</CODE
><b class="emphasis.bold">(fred)-&gt; </B
><code class="literal">&quot;</CODE
>.  <a class="indexterm" name="AUTOID-4617"></A
><a class="indexterm" name="AUTOID-4619"></A
>
If you are a C shell user and, like many
such people, are used to having a command number in your prompt string, the Korn shell
can do this similarly to the C shell: if there is an exclamation point
in the prompt string, it will substitute the command number.
Thus, if you define your prompt string to be:</P
><p class="para"><blockquote class="screen"><pre class="screen">PS1=&quot;($LOGNAME !)-&gt;&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">then your prompts will be like <b class="emphasis.bold">(fred 1)-&gt;</B
>, <b class="emphasis.bold">(fred 2)-&gt;</B
>,
and so on.  </P
><p class="para"><a class="indexterm" name="KSH-CH-3-IX-PROMPTS-CUSTOM-CURR-DIR"></A
>But perhaps the most useful way to set up your prompt string
is so that it always contains your
current directory. This way, you needn't type <b class="emphasis.bold">pwd</B
> to remember
where you are.  
Putting your directory in the prompt is more complicated than the above examples, because your
current directory changes during your login session, whereas your
login name and the name of your machine don't. But we can
accommodate this by taking advantage of some of the shell's arcane
quoting rules. Here's how:<a class="indexterm" name="KSH-CH-3-IX-PWD"></A
><a class="indexterm" name="KSH-CH-3-IX-ENV-VARS-PWD"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen">PS1='($PWD)-&gt; '</PRE
></BLOCKQUOTE
></P
><p class="para">The difference is the single quotes, instead of double quotes,
surrounding the string on the right side of the assignment.
Notice that
this string is evaluated twice:
once when the assignment to <b class="emphasis.bold">PS1</B
> is done (in your
<em class="emphasis">.profile</EM
> or 
environment file)
and then again after every command you enter.
Here's what each of these evaluations does:</P
><ol class="orderedlist"><li class="listitem"><p class="para">The first evaluation just observes the single quotes
and returns what is inside them without further processing.
As a result, <b class="emphasis.bold">PS1</B
> contains the 
string <b class="emphasis.bold">($</B
>PWD)<b class="emphasis.bold">-&gt;</B
> .  </P
></LI
><li class="listitem"><p class="para">After every command, the shell evaluates
<b class="emphasis.bold">($PWD)-&gt;</B
>. <b class="emphasis.bold">PWD</B
> is a built-in variable that is always equal to 
the current directory, so the result 
is a primary prompt that always contains the current
directory.</P
></LI
></OL
><p class="para">We'll add to this example in <a class="xref" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="Input/Output and Command-line Processing">Chapter 7, Input/Output and Command-line Processing</A
>.<a class="indexterm" name="AUTOID-4656"></A
><a class="indexterm" name="AUTOID-4657"></A
><a class="indexterm" name="AUTOID-4658"></A
><a class="indexterm" name="AUTOID-4659"></A
><a class="indexterm" name="AUTOID-4661"></A
>
<b class="emphasis.bold">PS2</B
> is called the secondary prompt
string; its default value is <b class="emphasis.bold">&gt;</B
>.
It is used when you type an incomplete line and hit
RETURN, as an indication that you must finish your command.
For example, assume that you start a quoted string but don't
close the quote. Then if you hit RETURN, the shell will print 
<b class="emphasis.bold">&gt;</B
> and wait for you to finish the string:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">print &quot;This is a long line,</B
>		<em class="emphasis"># PS1 for the command</EM
>
&gt; <b class="emphasis.bold">which is terminated down here&quot;</B
>	<em class="emphasis"># PS2 for the continuation</EM
>
$					<em class="emphasis"># PS1 for the next command</EM
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-4675"></A
><a class="indexterm" name="AUTOID-4676"></A
><a class="indexterm" name="AUTOID-4677"></A
><a class="indexterm" name="AUTOID-4679"></A
><a class="indexterm" name="AUTOID-4682"></A
><a class="indexterm" name="AUTOID-4684"></A
><b class="emphasis.bold">PS3</B
> and <b class="emphasis.bold">PS4</B
> relate to shell programming and debugging, respectively;
they will be explained in <a class="xref" href="ch05_01.htm" webstripperlinkwas="ch05_01.htm" title="Flow Control">Chapter 5, Flow Control</A
> and <a class="xref" href="ch09_01.htm" webstripperlinkwas="ch09_01.htm" title="Debugging Shell Programs">Chapter 9, Debugging Shell Programs</A
>.<a class="indexterm" name="AUTOID-4691"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-3-SECT-4.2.4">3.4.2.4 Terminal Types</A
></H4
><p class="para"><a class="indexterm" name="KSH-CH-3-IX-ENV-VARS-TERM"></A
><a class="indexterm" name="KSH-CH-3-IX-TERM"></A
>The shell variable <b class="emphasis.bold">TERM</B
> is vitally important for any program that
uses your entire screen or window, like a text editor.<a class="indexterm" name="AUTOID-4701"></A
><a class="indexterm" name="AUTOID-4703"></A
><a class="indexterm" name="AUTOID-4705"></A
>
Such programs include all screen editors (such as
<em class="emphasis">vi</EM
> and <em class="emphasis">emacs</EM
>), <em class="emphasis">more</EM
>, and countless third-party
applications.</P
><p class="para">Because users are spending more and more time within programs, and less and less using the shell itself, it
is extremely important that your <b class="emphasis.bold">TERM</B
>
is set correctly. It's really your system administrator's job
to help you do this (or to do it for you), but in case you need
to do it yourself, here are a few guidelines.</P
><p class="para"><a class="indexterm" name="KSH-CH-3-IX-TERMINFO"></A
>The value of <b class="emphasis.bold">TERM</B
> must be a short character string
with lowercase letters that
appears as a filename in the <em class="emphasis">terminfo</EM
> database.
[9]
This database is a two-tiered directory of files under the
root directory <em class="emphasis">/usr/lib/terminfo</EM
>. This directory contains
subdirectories with single-character names; these in turn contain
files of terminal information for all terminals whose names begin
with that character. Each file describes how to tell the terminal
in question to do certain common things like position the cursor on the
screen, go into reverse video, scroll, insert text, and so on.
The descriptions are in binary form (i.e., not readable by humans).</P
><blockquote class="footnote"><p class="para">[9] <a class="indexterm" name="AUTOID-4719"></A
><a class="indexterm" name="AUTOID-4721"></A
><a class="indexterm" name="AUTOID-4725"></A
><a class="indexterm" name="AUTOID-4727"></A
>Versions of UNIX not derived from System V use
<em class="emphasis">termcap</EM
>, an older-style database of terminal capabilities
that uses the single file <em class="emphasis">/etc/termcap</EM
> for all terminal
descriptions.</P
></BLOCKQUOTE
><p class="para">Names of terminal description files are the same as that of the
terminal being described; sometimes an abbreviation is used.<a class="indexterm" name="AUTOID-4733"></A
><a class="indexterm" name="AUTOID-4735"></A
>
For example, the DEC VT100 has a description
in the file <em class="emphasis">/usr/lib/terminfo/v/vt100</EM
>; a monitor for
a 386-based PC/AT has a description in the file 
<em class="emphasis">/usr/lib/terminfo/A/AT-386M</EM
>.  <a class="indexterm" name="AUTOID-4739"></A
><a class="indexterm" name="AUTOID-4741"></A
>
An <em class="emphasis">xterm</EM
> terminal window
under the X Window System has 
a description in <em class="emphasis">/usr/lib/terminfo/x/xterm</EM
>.</P
><p class="para">Sometimes your UNIX software will set up <b class="emphasis.bold">TERM</B
> correctly; this 
usually happens for X terminals and PC-based UNIX systems. Therefore,
you should check the value of <b class="emphasis.bold">TERM</B
> by typing <b class="emphasis.bold">print $TERM</B
> 
before going any further. If you find that your UNIX system isn't
setting the right value for you (especially likely if your terminal
is of a different make than your computer), you need to find the
appropriate value of <b class="emphasis.bold">TERM</B
> yourself.</P
><p class="para">The best way to find the <b class="emphasis.bold">TERM</B
> value-if you can't find a local guru to do it for you-is to guess the <em class="emphasis">terminfo</EM
> name and search for a file of that name 
under <em class="emphasis">/usr/lib/terminfo</EM
> by using <em class="emphasis">ls</EM
>. For example,
if your terminal is a Blivitz BL-35A, you could try:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">cd /usr/lib/terminfo</B
>
$ <b class="emphasis.bold">ls b/bl*</B
></PRE
></BLOCKQUOTE
></P
><p class="para">If you are successful, you will see something like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">bl35a           blivitz35a</PRE
></BLOCKQUOTE
></P
><p class="para">In this case, the two names are likely to be synonyms for (links to)
the same terminal description, so you could use either one as a
value of <b class="emphasis.bold">TERM</B
>. In other words, you could put <em class="emphasis">either</EM
> of these
two lines in your <em class="emphasis">.profile</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">TERM=bl35a
TERM=blivitz35a</PRE
></BLOCKQUOTE
></P
><p class="para">If you aren't successful, <em class="emphasis">ls</EM
> won't print anything, and you
will have to make another guess and try again. If you find that
<em class="emphasis">terminfo</EM
> contains nothing that resembles your terminal, all is
not lost. Consult your terminal's manual to see if the terminal 
can emulate a more popular model; nowadays the odds of this are excellent.</P
><p class="para">Conversely, <em class="emphasis">terminfo</EM
> may have several entries that relate to your
terminal, for submodels, special modes, etc. If you
have a choice of which entry to use as your value of <b class="emphasis.bold">TERM</B
>,
we suggest you test each one out with your text editor
or any other screen-oriented programs you use and see which one
works best.<a class="indexterm" name="AUTOID-4774"></A
></P
><p class="para">The process is much simpler if you are using a windowing system,
in which your &quot;terminals&quot; are logical portions of the screen
rather than physical devices. In this case, 
operating system-dependent software was written to control your
terminal window(s), so the odds are very good that if it knows how
to handle window resizing and complex cursor motion, then it is capable of
dealing with simple things like <b class="emphasis.bold">TERM</B
>.  <a class="indexterm" name="AUTOID-4777"></A
><a class="indexterm" name="AUTOID-4779"></A
>
The X Window System, for
example, automatically sets &quot;xterm&quot; as its value for <b class="emphasis.bold">TERM</B
>
in an <em class="emphasis">xterm</EM
> terminal window.<a class="indexterm" name="AUTOID-4783"></A
><a class="indexterm" name="AUTOID-4784"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-3-SECT-4.2.5">3.4.2.5 Command Search Path</A
></H4
><p class="para"><a class="indexterm" name="KSH-CH-3-IX-PATH"></A
><a class="indexterm" name="KSH-CH-3-IX-ENV-VARS-PATH"></A
><a class="indexterm" name="KSH-CH-3-IX-FINDING-CMNDS-PATH"></A
>Another important variable
is <b class="emphasis.bold">PATH</B
>, which helps the shell find the commands you enter.</P
><p class="para">As you probably know, every command
you use is actually a file that contains code for your machine to
run.
[10]<a class="indexterm" name="AUTOID-4803"></A
><a class="indexterm" name="AUTOID-4806"></A
>
These files are called executable files or just
executables for short. They
are stored in various different directories.  <a class="indexterm" name="AUTOID-4809"></A
><a class="indexterm" name="AUTOID-4811"></A
>
Some directories,
like <em class="emphasis">/bin</EM
> or <em class="emphasis">/usr/bin</EM
>, are standard on all UNIX systems;
some depend on the particular version of UNIX you are using;
some are unique to your machine; if you are a programmer, some
may even be your own. In any case, there is no reason why
you should have to know where a command's executable file is in
order to run it.</P
><blockquote class="footnote"><p class="para">[10] Unless it's a built-in command (one of those shown in
<b class="emphasis.bold">boldface</B
>, like <b class="emphasis.bold">cd</B
> and <b class="emphasis.bold">print</B
>),
in which case the code is simply
part of the executable file for the entire shell.</P
></BLOCKQUOTE
><p class="para">That is where <b class="emphasis.bold">PATH</B
> comes in. Its value is a list of
directories that the shell searches every time you enter a 
command;
[11]
the directory names are separated by colons (<code class="literal">:</CODE
>), just like the
files in <b class="emphasis.bold">MAILPATH</B
>.<a class="indexterm" name="AUTOID-4821"></A
><a class="indexterm" name="AUTOID-4823"></A
>
For example, if you type <b class="emphasis.bold">print $PATH</B
>, you will see 
something like this:</P
><blockquote class="footnote"><p class="para">[11] Unless the command name contains a slash (/),
in which case the search does not take place.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">/sbin:/usr/sbin:/usr/bin:/etc:/usr/ucb:/local/bin</PRE
></BLOCKQUOTE
></P
><p class="para">Why should you care about your path? There are two main reasons.
First, once you have read the later chapters of this book and
you try writing your own shell programs, you will want
to test them and eventually set aside a directory for them.
Second, your system may be set up so that certain &quot;restricted&quot;
commands' executable files are kept in directories that are
not listed in <b class="emphasis.bold">PATH</B
>.  
For example, there may be a
directory <em class="emphasis">/usr/games</EM
> in which there are executables
that are verboten during regular working hours.</P
><p class="para">Therefore you may want to add directories to your <b class="emphasis.bold">PATH</B
>.
Let's say you have created a <em class="emphasis">bin</EM
> directory under
your login directory, which is <em class="emphasis">/home/you</EM
>, for your
own shell scripts and programs. To add this directory to
your <b class="emphasis.bold">PATH</B
> so that it is there every time you log in,
put this line in your <em class="emphasis">.profile</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">PATH=$PATH&quot;:/home/you/bin&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">This sets <b class="emphasis.bold">PATH</B
> to whatever it was before, followed
immediately by a colon and <em class="emphasis">/home/you/bin</EM
>.</P
><p class="para">This is the &quot;safe&quot; way of doing it. When you enter a command,
the shell searches directories in the order they
appear in <b class="emphasis.bold">PATH</B
> until it finds an executable file.
Therefore, if you have a shell script or program whose name
is the same as an existing command, the shell will use
the existing command-unless you type in the command's full pathname
to disambiguate. For example, if you have created your own version 
of the <em class="emphasis">more</EM
> command in the above directory and your <b class="emphasis.bold">PATH</B
>
is set up as in the last example, you will need to type <b class="emphasis.bold">/home/you/bin/more</B
>
(or just <b class="emphasis.bold">~/bin/more</B
>) to get your version.</P
><p class="para">The more reckless way of resetting your path is to tell the shell to
look in your directory first by putting it before the other
directories in your <b class="emphasis.bold">PATH</B
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">PATH=&quot;/home/you/bin:&quot;$PATH</PRE
></BLOCKQUOTE
></P
><p class="para">This is less safe because you are trusting that your own version
of the <em class="emphasis">more</EM
> command works properly.  <a class="indexterm" name="AUTOID-4855"></A
><a class="indexterm" name="AUTOID-4858"></A
><a class="indexterm" name="AUTOID-4861"></A
>
But it is also risky
for a more important reason: system security. If your <b class="emphasis.bold">PATH</B
> is set up
in this way, you leave open a &quot;hole&quot; that is well 
known to computer crackers and mischief makers: they can
install &quot;Trojan horses&quot; and do other things 
to steal files or do damage. 
(See <a class="xref" href="ch10_01.htm" webstripperlinkwas="ch10_01.htm" title="Korn Shell Administration">Chapter 10</A
> for more details.)
Therefore, unless you have complete control of (and confidence in) 
everyone who uses your system, use the first of the two methods 
of adding your own command directory.</P
><p class="para">If you need to know which directory a command comes from, you need not look
at directories in your <b class="emphasis.bold">PATH</B
> until you find it. The shell built-in
command <b class="emphasis.bold">whence</B
> prints the full pathname of the command you
give it as argument, or just the command's name if it's a built-in
command itself (like <b class="emphasis.bold">cd</B
>), an alias, 
or a function
(as we'll see in <a class="xref" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="Basic Shell Programming">Chapter 4, Basic Shell Programming</A
>).</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-3-SECT-4.2.6">3.4.2.6 PATH and Tracked Aliases</A
></H4
><p class="para"><a class="indexterm" name="KSH-CH-3-IX-AKAS-TRACKED2"></A
><a class="indexterm" name="KSH-CH-3-IX-FINDING-CMNDS-TRACKED-AKAS"></A
>It is worth noting that a search through the directories in your <b class="emphasis.bold">PATH</B
>
can take time. You won't exactly die if you hold your breath for the
length of time it takes for most computers to search your <b class="emphasis.bold">PATH</B
>,
but the large number of disk I/O operations involved in some <b class="emphasis.bold">PATH</B
> 
searches can take longer than the command you invoked takes
to run!</P
><p class="para">The Korn shell provides a way to circumvent PATH searches: the tracked alias mechanism
we saw earlier in this chapter. First, notice that if you specify a command
by giving its full pathname, the shell won't even use your <b class="emphasis.bold">PATH</B
>-instead,
it will just go directly to the executable file.  </P
><p class="para">Tracked aliases do this for you automatically. If you have alias tracking turned on,
then the first time you invoke an alias, the shell looks for the executable
in the normal way (through <b class="emphasis.bold">PATH</B
>). Then it stores the full pathname
as if it were the alias, so that the next time you invoke the command, 
the shell will use the full pathname and not bother with <b class="emphasis.bold">PATH</B
> at all.
If you ever change your <b class="emphasis.bold">PATH</B
>, the shell marks tracked aliases 
as &quot;undefined,&quot; so that it will search for the full pathnames again when
you invoke the corresponding commands.</P
><p class="para">In fact, you can add tracked aliases for the sole purpose of avoiding <b class="emphasis.bold">PATH</B
>
lookup of commands that you use particularly often. Just put a &quot;trivial alias&quot;
of the form <b class="emphasis.bold">alias -t</B
> <em class="emphasis">command</EM
>
<b class="emphasis.bold">=</B
><em class="emphasis">command</EM
> in your <em class="emphasis">.profile</EM
> or
environment file; the shell will substitute the full pathname itself.
[12]</P
><blockquote class="footnote"><p class="para">[12] Actually, the shell predefines tracked aliases for most widely-used UNIX
utilities.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-4900"></A
><a class="indexterm" name="AUTOID-4901"></A
><a class="indexterm" name="AUTOID-4902"></A
><a class="indexterm" name="AUTOID-4903"></A
><a class="indexterm" name="AUTOID-4904"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-3-SECT-4.3">3.4.3 Directory Search Path</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-3-IX-CDPATH"></A
><a class="indexterm" name="KSH-CH-3-IX-BUILT-IN-VARS-CDPATH"></A
><b class="emphasis.bold">CDPATH</B
> is a variable whose value, like that of <b class="emphasis.bold">PATH</B
>,
is a list of directories separated by
colons. Its purpose is to augment the functionality of
the <b class="emphasis.bold">cd</B
> built-in command.</P
><p class="para">By default, <b class="emphasis.bold">CDPATH</B
> isn't set (meaning that it is null), and when you type 
<b class="emphasis.bold">cd</B
> <em class="emphasis">dirname</EM
>, 
the shell will look in the current
directory for a subdirectory called 
<em class="emphasis">dirname</EM
>.
[13]
If you set <b class="emphasis.bold">CDPATH</B
>,
you give the shell a list of places to look for <em class="emphasis">dirname</EM
>;
the list may or may not include the current directory.</P
><blockquote class="footnote"><p class="para">[13] As with <b class="emphasis.bold">PATH</B
>, this search is disabled when <em class="emphasis">dirname</EM
>
starts with a slash.</P
></BLOCKQUOTE
><p class="para">Here is an example. Consider the alias for the
long <b class="emphasis.bold">cd</B
> command from earlier in this chapter:</P
><p class="para"><blockquote class="screen"><pre class="screen">alias cdcm=&quot;cd work/projects/devtools/windows/confman&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">Now suppose there were a few directories under this directory
to which you need to
go often; they are called <em class="emphasis">src</EM
>, <em class="emphasis">bin</EM
>, and <em class="emphasis">doc</EM
>.
You define your <b class="emphasis.bold">CDPATH</B
> like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">CDPATH=:~/work/projects/devtools/windows/confman</PRE
></BLOCKQUOTE
></P
><p class="para">In other words, you define your <b class="emphasis.bold">CDPATH</B
> to be the empty string (meaning the
current directory, wherever you happen to be) followed by
<em class="emphasis">~/work/projects/devtools/windows/confman</EM
>.  </P
><p class="para">With this setup, if you type <b class="emphasis.bold">cd doc</B
>, then the shell
will look in the current directory for a (sub)directory called
<em class="emphasis">doc</EM
>. Assuming that it doesn't find one, it
looks in the directory <em class="emphasis">~/work/projects/devtools/windows/confman</EM
>.
The shell finds the <em class="emphasis">dirname</EM
> directory there, so you go <em class="emphasis">directly</EM
> there.</P
><p class="para">This feature gives you yet another way to save typing when you need to
<b class="emphasis.bold">cd</B
> often to directories that are buried deep in your
file hierarchy. You may find yourself going to a specific
group of directories often as you work on a
particular project, and then changing to another set of
directories when you switch to another project. This implies that the
<b class="emphasis.bold">CDPATH</B
> feature is only useful if you update it
whenever your work habits change; if you don't, you may 
occasionally find yourself where you don't want to be.<a class="indexterm" name="AUTOID-4950"></A
><a class="indexterm" name="AUTOID-4951"></A
></P
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-3-SECT-4.3.1">3.4.3.1 Miscellaneous Variables</A
></H4
><p class="para">We have covered the shell variables that are important from
the standpoint of customization. There are also several that
serve as status indicators and for various other miscellaneous
purposes. Their meanings are relatively straightforward; the more
basic ones are summarized in <a class="xref" href="#KSH-CH-3-TAB-3" title="Status Variables">Table 3.4</A
>.<a class="indexterm" name="AUTOID-4956"></A
><a class="indexterm" name="AUTOID-4958"></A
><a class="indexterm" name="AUTOID-4960"></A
><a class="indexterm" name="AUTOID-4962"></A
><a class="indexterm" name="AUTOID-4964"></A
><a class="indexterm" name="AUTOID-4966"></A
><a class="indexterm" name="AUTOID-4969"></A
><a class="indexterm" name="AUTOID-4972"></A
><a class="indexterm" name="AUTOID-4975"></A
><a class="indexterm" name="AUTOID-4978"></A
></P
><p class="para">The shell sets the values of these variables (the first three
at login time, the last two whenever you change directories).
Although you can also set their values, just like any other variables,
it is difficult to imagine any situation where you would want to.</P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-3-TAB-3">Table 3.4: Status Variables</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Variable</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Meaning</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">HOME</B
></TD
><td class="entry" rowspan="1" colspan="1">Name of your home (login) directory</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">SECONDS</B
></TD
><td class="entry" rowspan="1" colspan="1">Number of seconds since the shell was invoked</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">SHELL</B
></TD
><td class="entry" rowspan="1" colspan="1">Pathname of the shell you are running</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">PWD</B
></TD
><td class="entry" rowspan="1" colspan="1">Current directory</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">OLDPWD</B
></TD
><td class="entry" rowspan="1" colspan="1">Previous directory before the last <b class="emphasis.bold">cd</B
> command</TD
></TR
></TBODY
></TABLE
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch03_03.htm" webstripperlinkwas="ch03_03.htm" title="3.3 Options"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 3.3 Options" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch03_05.htm" webstripperlinkwas="ch03_05.htm" title="3.5 Customization and Subprocesses"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 3.5 Customization and Subprocesses" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">3.3 Options</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">3.5 Customization and Subprocesses</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
