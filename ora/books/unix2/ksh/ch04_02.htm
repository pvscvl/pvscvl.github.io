<html><head>
<title>[Chapter 4] 4.2 Shell Variables</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:03:49Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="4. Basic Shell Programming"><link rel="prev" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="4.1 Shell Scripts and Functions"><link rel="next" href="ch04_03.htm" webstripperlinkwas="ch04_03.htm" title="4.3 String Operators"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="4.1 Shell Scripts and Functions"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 4.1 Shell Scripts and Functions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 4<br>Basic Shell Programming</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_03.htm" webstripperlinkwas="ch04_03.htm" title="4.3 String Operators"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 4.3 String Operators" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="KSH-CH-4-SECT-2">4.2 Shell Variables</A
></H2
><p class="para">A major piece of the Korn shell's programming functionality 
relates to shell variables.  We've already seen the basics of
variables.  To recap briefly: they are named places to 
store data, usually in the form of character strings, and their values can be
obtained by preceding their names with dollar signs (<b class="emphasis.bold">$</B
>).
Certain variables, called <em class="emphasis">environment variables</EM
>, are conventionally
named in all capital letters, and their values are made known
(with the <b class="emphasis.bold">export</B
> statement) to subprocesses.</P
><p class="para">If you are a programmer, you already know that just about
every major programming language uses variables in some way; in fact,
an important way of characterizing differences between languages
is comparing their facilities for variables.  </P
><p class="para"><a class="indexterm" name="AUTOID-5581"></A
>The chief difference between
the Korn shell's variable schema and those of conventional 
languages is that the Korn shell's places heavy emphasis on 
character strings.  <a class="indexterm" name="AUTOID-5584"></A
><a class="indexterm" name="AUTOID-5586"></A
><a class="indexterm" name="AUTOID-5588"></A
><a class="indexterm" name="AUTOID-5590"></A
>
(Thus it has more in common with a special-purpose
language like SNOBOL than a general-purpose one like Pascal.)
This is also true of the Bourne shell and the
C shell, but the Korn shell goes beyond them by having additional
mechanisms for handling integers (explicitly) and simple arrays.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-4-SECT-2.1">4.2.1 Positional Parameters</A
></H3
><p class="para">As we have already seen, you can define values for variables
with statements of the form <b class="emphasis.bold">varname</B
><b class="emphasis.bold">=</B
><b class="emphasis.bold">value</B
>, e.g.:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">fred=bob</B
>
$ <b class="emphasis.bold">print &quot;$fred&quot;</B
>
bob</PRE
></BLOCKQUOTE
></P
><p class="para">Some environment
variables are predefined by the shell when you log in.  There are
other built-in variables that are vital to shell programming.
We will look at a few of them now and save the others for later.</P
><p class="para"><a class="indexterm" name="AUTOID-5604"></A
><a class="indexterm" name="AUTOID-5608"></A
><a class="indexterm" name="KSH-CH-4-IX-POSITIONAL-PARAMETERS"></A
>The most important special, built-in variables
are called <em class="emphasis">positional parameters</EM
>.
These hold the command-line arguments to scripts when they are
invoked.  Positional parameters have names <b class="emphasis.bold">1</B
>, <b class="emphasis.bold">2</B
>, <b class="emphasis.bold">3</B
>, 
etc., meaning that their values are denoted by 
<b class="emphasis.bold">$1</B
>, <b class="emphasis.bold">$2</B
>, <b class="emphasis.bold">$3</B
>, etc.  There is also
a positional parameter <b class="emphasis.bold">0</B
>, whose value is the name of the script
(i.e., the command typed in to invoke it).  </P
><p class="para"><a class="indexterm" name="AUTOID-5623"></A
><a class="indexterm" name="AUTOID-5626"></A
><a class="indexterm" name="AUTOID-5629"></A
><a class="indexterm" name="AUTOID-5632"></A
>Two special variables contain all of the positional parameters
(except positional parameter <b class="emphasis.bold">0</B
>): <code class="literal">*</CODE
> and <b class="emphasis.bold">@</B
>.  
The difference between them is subtle but important, and
it's apparent only when they are within double quotes.</P
><p class="para"><a class="indexterm" name="AUTOID-5639"></A
><a class="indexterm" name="AUTOID-5641"></A
><code class="literal">&quot;</CODE
><b class="emphasis.bold">$*</B
><code class="literal">&quot;</CODE
> is a single string that consists of all of the positional
parameters, separated by the first character in the environment
variable <b class="emphasis.bold">IFS</B
> (internal field separator), which is a space, TAB, and 
NEWLINE by default.  On the other hand, <code class="literal">&quot;</CODE
><b class="emphasis.bold">$@</B
><code class="literal">&quot;</CODE
> is equal to 
<code class="literal">&quot;</CODE
><b class="emphasis.bold">$1</B
><code class="literal">&quot;</CODE
> <code class="literal">&quot;</CODE
><b class="emphasis.bold">$2</B
><code class="literal">&quot;</CODE
><b class="emphasis.bold">...</B
> <code class="literal">&quot;</CODE
><b class="emphasis.bold">$</B
><em class="emphasis">N</EM
><code class="literal">&quot;</CODE
>,
where <em class="emphasis">N</EM
> is the
number of positional parameters.  That is, it's equal to <em class="emphasis">N</EM
>
separate double-quoted strings, which are separated by spaces.
We'll explore the ramifications of this difference in a little while.</P
><p class="para"><a class="indexterm" name="AUTOID-5665"></A
><a class="indexterm" name="AUTOID-5668"></A
><a class="indexterm" name="AUTOID-5671"></A
>The variable <b class="emphasis.bold">#</B
> holds the number of positional parameters
(as a character string).
All of these variables are &quot;read-only,&quot; meaning that you can't
assign new values to them within scripts.</P
><p class="para">For example, assume that you have the following simple shell script:</P
><p class="para"><blockquote class="screen"><pre class="screen">print &quot;fred: $@&quot;
print &quot;$0: $1 and $2&quot;
print &quot;$# arguments&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">Assume further that the script is called <em class="emphasis">fred</EM
>.  
Then if you type <b class="emphasis.bold">fred bob dave</B
>, you will see the following
output:</P
><p class="para"><blockquote class="screen"><pre class="screen">fred: bob dave
fred: bob and dave
2 arguments</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-5684"></A
>In this case, <b class="emphasis.bold">$3</B
>, <b class="emphasis.bold">$4</B
>, etc., are all unset,
which means that the shell will substitute the empty
(or null) string for them.
[4]</P
><blockquote class="footnote"><p class="para">[4] Unless the option <b class="emphasis.bold">nounset</B
> is turned on.</P
></BLOCKQUOTE
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-4-SECT-2.1.1">4.2.1.1 Positional parameters in functions</A
></H4
><p class="para"><a class="indexterm" name="KSH-CH-4-IX-POS-PARAMS-FUNCTIONS"></A
><a class="indexterm" name="AUTOID-5697"></A
>Shell functions use positional parameters and special variables
like <code class="literal">*</CODE
> and <b class="emphasis.bold">#</B
> in exactly the same way as shell scripts do.
If you wanted to define <em class="emphasis">fred</EM
> as a function, you could put
the following in your <em class="emphasis">.profile</EM
> or environment file:</P
><p class="para"><blockquote class="screen"><pre class="screen">function fred {
    print &quot;fred: $*&quot;
    print &quot;$0: $1 and $2&quot;
    print &quot;$# arguments&quot;
}</PRE
></BLOCKQUOTE
></P
><p class="para">You will get the same result if you type <b class="emphasis.bold">fred bob dave</B
>.</P
><p class="para">Typically, several shell
functions are defined within a single shell script.  Therefore
each function will need to handle its own arguments, which in turn
means that each function needs to keep track of positional parameters
separately.  <a class="indexterm" name="AUTOID-5709"></A
>
Sure enough, each function has its
own copies of these variables (even though functions don't
run in their own subshells, as scripts do); we say that such variables
are <em class="emphasis">local</EM
> to the function.  </P
><p class="para"><a class="indexterm" name="AUTOID-5714"></A
>However, other variables defined within functions are not local
[5]
(they are <em class="emphasis">global</EM
>), meaning that their values are known throughout
the entire shell script.  For example, assume that you have a shell script 
called <em class="emphasis">ascript</EM
> that contains this:</P
><blockquote class="footnote"><p class="para">[5] However, see the section on <b class="emphasis.bold">typeset</B
> in <a class="xref" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm" title="Command-line Options and Typed Variables">Chapter 6</A
> for a
way of making variables local to functions.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">function afunc {
    print in function $0: $1 $2
    var1=&quot;in function&quot;
}
var1=&quot;outside of function&quot;
print var1: $var1
print $0: $1 $2
afunc funcarg1 funcarg2
print var1: $var1
print $0: $1 $2</PRE
></BLOCKQUOTE
></P
><p class="para">If you invoke this script by typing <b class="emphasis.bold">ascript arg1 arg2</B
>,
you will see this output:</P
><p class="para"><blockquote class="screen"><pre class="screen">var1: outside of function
ascript: arg1 arg2
in function afunc: funcarg1 funcarg2
var1: in function
ascript: arg1 arg2</PRE
></BLOCKQUOTE
></P
><p class="para">In other words, the function <em class="emphasis">afunc</EM
> changes the value of the
variable <b class="emphasis.bold">var1</B
> from &quot;outside of function&quot; to 
&quot;in function,&quot; and that change is
known outside the function, while <b class="emphasis.bold">$0</B
>, <b class="emphasis.bold">$1</B
>, and <b class="emphasis.bold">$2</B
>
have different values in the function and the main script.
<a class="xref" href="#KSH-CH-4-FIG-1" title="Functions have their own positional parameters">Figure 4.2</A
> shows this graphically.</P
><h4 class="figure"><a class="title" name="KSH-CH-4-FIG-1">Figure 4.2: Functions have their own positional parameters</A
></H4
><img class="graphic" src="figs/korn0402.gif" webstripperlinkwas="figs/korn0402.gif" alt="Figure 4.2"><p class="para"><a class="indexterm" name="AUTOID-5740"></A
>It is possible to make other variables local to
functions by using the <b class="emphasis.bold">typeset</B
> command, which we'll see in
<a class="xref" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm" title="Command-line Options and Typed Variables">Chapter 6</A
>.<a class="indexterm" name="AUTOID-5745"></A
><a class="indexterm" name="KSH-CH-4-IX-QUOTING-DOUBLE-QUOTES"></A
>
Now that we have this background, 
let's take a closer look at <b class="emphasis.bold">&quot;$@&quot;</B
> and <b class="emphasis.bold">&quot;$</B
><code class="literal">*</CODE
><b class="emphasis.bold">&quot;</B
>.  These variables
are two of the shell's greatest idiosyncracies, so we'll discuss some 
of the most common sources of confusion.</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-5756"></A
><a class="indexterm" name="AUTOID-5758"></A
>Why are the elements of <b class="emphasis.bold">&quot;$</B
><code class="literal">*</CODE
><b class="emphasis.bold">&quot;</B
>
separated by the first character of <b class="emphasis.bold">IFS</B
> instead of just spaces?
To give you output flexibility.  As a simple example, let's say
you want to print a list of positional parameters separated by commas.
This script would do it:</P
><p class="para"><blockquote class="screen"><pre class="screen">IFS=,
print $*</PRE
></BLOCKQUOTE
></P
><p class="para">Changing <b class="emphasis.bold">IFS</B
> in a script is fairly risky, but it's probably OK
as long as nothing else in the script depends on it.  If this script
were called <em class="emphasis">arglist</EM
>, 
then the command <b class="emphasis.bold">arglist bob dave ed</B
>
would produce the output <b class="emphasis.bold">bob,dave,ed</B
>.  <a class="xref" href="ch10_01.htm" webstripperlinkwas="ch10_01.htm" title="Korn Shell Administration">Chapter 10</A
>
contains
another example of changing <b class="emphasis.bold">IFS</B
>.</P
></LI
><li class="listitem"><p class="para">Why does <b class="emphasis.bold">&quot;$@&quot;</B
> act like <em class="emphasis">N</EM
> separate double-quoted strings?
To allow you to use them again as separate values.  For example,
say you want to call a function within your script with the same list
of positional parameters, like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">function countargs {
    print &quot;$# args.&quot;
}</PRE
></BLOCKQUOTE
></P
><p class="para">Assume your script is called with the same arguments as <em class="emphasis">arglist</EM
>
above.  Then if it contains the command <b class="emphasis.bold">countargs</B
> <code class="literal">&quot;</CODE
><b class="emphasis.bold">$*</B
><code class="literal">&quot;</CODE
>,
the function will print <b class="emphasis.bold">1 args</B
>.  But if the command is 
<b class="emphasis.bold">countargs</B
> <code class="literal">&quot;</CODE
><b class="emphasis.bold">$@</B
><code class="literal">&quot;</CODE
>, the function will print <b class="emphasis.bold">3 args</B
>.</P
></LI
></UL
><p class="para"><a class="indexterm" name="AUTOID-5793"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-4-SECT-2.2">4.2.2 More on Variable Syntax</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-5797"></A
>Before we show the many things you can do with shell variables,
we have to make a confession: the syntax
of <b class="emphasis.bold">$</B
><em class="emphasis">varname</EM
> for taking the value of a variable is not
quite accurate.  Actually, it's the simple form of the more general
syntax, which is <b class="emphasis.bold">${</B
><em class="emphasis">varname</EM
><b class="emphasis.bold">}</B
>. </P
><p class="para">Why two syntaxes?  <a class="indexterm" name="AUTOID-5807"></A
>
For one thing, the more general syntax
is necessary if your code refers to more than nine positional 
parameters: you must use <b class="emphasis.bold">${10}</B
> for the tenth instead of <b class="emphasis.bold">$10</B
>.<a class="indexterm" name="AUTOID-5812"></A
>
Aside from that, consider the example, from <a class="xref" href="ch03_01.htm" webstripperlinkwas="ch03_01.htm" title="Customizing Your Environment">Chapter 3</A
>,
of setting your primary prompt variable (<b class="emphasis.bold">PS1</B
>) to your login name:</P
><p class="para"><blockquote class="screen"><pre class="screen"><b class="emphasis.bold">PS1=&quot;($LOGNAME)-&gt; &quot;</B
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-5819"></A
>This happens to work because the right parenthesis immediately
following <b class="emphasis.bold">LOGNAME</B
> is &quot;special&quot; 
(in the sense of the special characters introduced in <a class="xref" href="ch01_01.htm" webstripperlinkwas="ch01_01.htm" title="Korn Shell Basics">Chapter 1</A
>)
so that the shell doesn't
mistake it for part of the variable name.  Now suppose that, for
some reason, you want your prompt to be your login name followed
by an underscore.  If you type:</P
><p class="para"><blockquote class="screen"><pre class="screen"><b class="emphasis.bold">PS1=&quot;$LOGNAME_ &quot;</B
></PRE
></BLOCKQUOTE
></P
><p class="para">then the shell will try to use &quot;LOGNAME_&quot; as the name of the
variable, i.e., to take the value of <b class="emphasis.bold">$LOGNAME_</B
>.  Since there is
no such variable, the value defaults to <em class="emphasis">null</EM
>
(the empty string, &quot;&quot;), and <b class="emphasis.bold">PS1</B
> is set to just a single space.</P
><p class="para">For this reason, the full syntax for taking the value of a variable
is <b class="emphasis.bold">${</B
><em class="emphasis">varname</EM
><b class="emphasis.bold">}</B
>.  So if we used</P
><p class="para"><blockquote class="screen"><pre class="screen"><b class="emphasis.bold">PS1=&quot;${LOGNAME}_ &quot;</B
></PRE
></BLOCKQUOTE
></P
><p class="para">we would get the desired <b class="emphasis.bold">$</B
><em class="emphasis">yourname</EM
><b class="emphasis.bold">_</B
>.
It is safe to omit the curly brackets (<b class="emphasis.bold">{}</B
>) if the
variable name is followed by a character that isn't a letter,
digit, or underscore.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="4.1 Shell Scripts and Functions"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 4.1 Shell Scripts and Functions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_03.htm" webstripperlinkwas="ch04_03.htm" title="4.3 String Operators"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 4.3 String Operators" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.1 Shell Scripts and Functions</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.3 String Operators</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
