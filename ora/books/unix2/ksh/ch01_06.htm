<html><head>
<title>[Chapter 1] 1.6 Files</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T20:50:54Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch01_01.htm" webstripperlinkwas="ch01_01.htm" title="1. Korn Shell Basics"><link rel="prev" href="ch01_05.htm" webstripperlinkwas="ch01_05.htm" title="1.5 Interactive Shell Use"><link rel="next" href="ch01_07.htm" webstripperlinkwas="ch01_07.htm" title="1.7 Input and Output"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch01_05.htm" webstripperlinkwas="ch01_05.htm" title="1.5 Interactive Shell Use"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 1.5 Interactive Shell Use" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 1<br>Korn Shell Basics</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch01_07.htm" webstripperlinkwas="ch01_07.htm" title="1.7 Input and Output"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 1.7 Input and Output" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="KSH-CH-1-SECT-6">1.6 Files</A
></H2
><p class="para">Although arguments to commands aren't always files, files
are the most important types of &quot;things&quot; on any UNIX system.
A file can contain any kind of information, and indeed there
are different types of files. Three types are
by far the most important:

<dl class="variablelist"><dt class="term"><b class="emphasis.bold">Regular files</B
></DT
><dd class="listitem"><p class="para">Also called text files;
these contain readable characters. 
For example, this book was created from several regular files
that contain the text of the book plus human-readable 
formatting instructions to the <em class="emphasis">troff</EM
> word processor.<a class="indexterm" name="AUTOID-677"></A
></P
></DD
><dt class="term"><b class="emphasis.bold">Executable files</B
></DT
><dd class="listitem"><p class="para">Also called programs; these are invoked
as commands. Some can't be read by humans; 
others-the shell scripts that we'll examine in this book-are
just special text files. The shell itself
is a (non-human-readable) executable file called <em class="emphasis">ksh</EM
>.</P
></DD
><dt class="term"><b class="emphasis.bold">Directories</B
></DT
><dd class="listitem"><p class="para">Like folders that contain
other files-possibly other directories (called
<em class="emphasis">subdirectories</EM
>).  </P
></DD
></DL
></P
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-1-SECT-6.1">1.6.1 Directories</A
></H3
><p class="para">Let's review the most important concepts about directories.
The fact that directories can contain other directories leads
to a hierarchical structure, more popularly
known as a <em class="emphasis">tree</EM
>, for all files on a UNIX system.  
<a class="xref" href="#KSH-CH-1-FIG-1" title="A tree of directories and files">Figure 1.2</A
>
shows part of a typical directory tree;
ovals are regular files and rectangles are directories.<a class="indexterm" name="AUTOID-696"></A
>

<h4 class="figure"><a class="title" name="KSH-CH-1-FIG-1">Figure 1.2: A tree of directories and files</A
></H4
><img class="graphic" src="figs/korn0102.gif" webstripperlinkwas="figs/korn0102.gif" alt="Figure 1.2"></P
><p class="para">The top of the tree is a directory called &quot;root&quot;
that has no name on the system.
[3]
All files can be named by expressing their location on the
system relative to root; such names are built by listing
all of the directory names (in order from root), separated
by slashes (<b class="emphasis.bold">/</B
>), followed by the file's name. This way
of naming files is called a <em class="emphasis">full</EM
> (or <em class="emphasis">absolute</EM
>)
<em class="emphasis">pathname</EM
>.<a class="indexterm" name="AUTOID-709"></A
><a class="indexterm" name="AUTOID-711"></A
></P
><blockquote class="footnote"><p class="para">[3] Most introductory UNIX tutorials say that root has the 
name <b class="emphasis.bold">/</B
>.
We stand by this alternative explanation because it is more
logically consistent.</P
></BLOCKQUOTE
><p class="para">For example, say
there is a file called <em class="emphasis">memo</EM
> that is in the directory
<em class="emphasis">fred</EM
>, which is in the directory <em class="emphasis">users</EM
>, which
is in the root directory. This file's full pathname
is <em class="emphasis">/users/fred/memo</EM
>.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-1-SECT-6.1.1">1.6.1.1 The working directory</A
></H4
><p class="para">Of course, it's annoying to have to use full pathnames 
whenever you need to specify a file. So there is also the
concept of the working directory
(sometimes called the current directory), which is the
directory you are &quot;in&quot; at any given time. If you give a
pathname with no leading slash, then the 
location of the file is worked out relative
to the working directory. Such pathnames are called
<em class="emphasis">relative</EM
> pathnames; you'll use them much more often
than full pathnames.<a class="indexterm" name="AUTOID-723"></A
><a class="indexterm" name="AUTOID-725"></A
></P
><p class="para"><a class="indexterm" name="AUTOID-729"></A
>When you log in to the system, your working directory is
initially set to a special directory called your <em class="emphasis">home</EM
>
(or <em class="emphasis">login</EM
>) directory. System administrators often
set up the system so that everyone's home directory name
is the same as their login name, and all home directories
are contained in a common directory under root.</P
><p class="para"><a class="indexterm" name="AUTOID-735"></A
>For example, <em class="emphasis">/users/billr</EM
> is a typical home directory.
If this is your working directory
and you give the command <b class="emphasis.bold">lp memo</B
>, then the system looks
for the file <em class="emphasis">memo</EM
> in <em class="emphasis">/users/billr</EM
>. If you have
a directory called <em class="emphasis">bob</EM
> in your home directory, and it
contains the file <em class="emphasis">statreport</EM
>, then you can print it with
the command <b class="emphasis.bold">lp bob/statreport</B
>.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-1-SECT-6.1.2">1.6.1.2 Tilde notation</A
></H4
><p class="para"><a class="indexterm" name="KSH-CH-1-IX-TILDE-NOTATION"></A
><a class="indexterm" name="KSH-CH-1-IX-TILDE"></A
>As you can well imagine, home directories occur often in 
pathnames. Although many systems are organized so that all
home directories have a common parent (such as <em class="emphasis">/home</EM
>
or <em class="emphasis">/users</EM
>), you should not have to rely on that being
the case, nor should you even have to know what the absolute
pathname of someone's home directory is.  </P
><p class="para">Therefore, the Korn shell has a way of abbreviating home
directories: just precede the name of the user with a tilde (<b class="emphasis.bold">~</B
>).
For example, you could refer to the file <em class="emphasis">memo</EM
> in user 
fred's home directory as <em class="emphasis">~fred/memo</EM
>.
This is an absolute pathname, so it doesn't matter
what your working directory is when you use it. If fred's home
directory has a subdirectory called <em class="emphasis">bob</EM
> and the file
is in there instead, you can use <em class="emphasis">~fred/bob/memo</EM
> as its name.</P
><p class="para">Even more convenient, a tilde by itself refers to your own home
directory. You can refer to a file called <em class="emphasis">notes</EM
> in your home
directory as <em class="emphasis">~/notes</EM
> (note the
difference between that and <em class="emphasis">~notes</EM
>, which the shell would
try to interpret as user <em class="emphasis">notes</EM
>
home directory). If <em class="emphasis">notes</EM
> is in your <em class="emphasis">bob</EM
> subdirectory,
then you can call it <em class="emphasis">~/bob/notes</EM
>. This notation is
handiest when your working directory is not in your home directory
tree, e.g., when it's some &quot;system&quot; directory like <em class="emphasis">/tmp</EM
>.<a class="indexterm" name="AUTOID-768"></A
><a class="indexterm" name="AUTOID-769"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-1-SECT-6.1.3">1.6.1.3 Changing working directories</A
></H4
><p class="para">If you want to change your working directory, use the command <b class="emphasis.bold">cd</B
>.
If you don't remember your working directory, the command
<b class="emphasis.bold">pwd</B
> tells the shell to print it.  </P
><p class="para"><a class="indexterm" name="KSH-CH-1-IX-CD"></A
><b class="emphasis.bold">cd</B
> takes as argument the name of the directory you
want to become your working directory. It can be relative
to your current directory, it can contain a tilde, or it can
be absolute (starting with
a slash). If you omit the argument, <b class="emphasis.bold">cd</B
> changes to your
home directory (i.e., it's the same as <b class="emphasis.bold">cd ~</B
> ).</P
><p class="para"><a class="xref" href="#KSH-CH-1-TAB-0" title="Sample cd Commands">Table 1.1</A
>
gives some sample <b class="emphasis.bold">cd</B
> commands. Each command
assumes that your working directory is <em class="emphasis">/users/billr</EM
>
just before the command is executed, and that
your directory structure looks like 
<a class="xref" href="#KSH-CH-1-FIG-1" title="A tree of directories and files">Figure 1.2</A
>.<a class="indexterm" name="AUTOID-786"></A
></P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-1-TAB-0">Table 1.1: Sample cd Commands</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Command</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">New Working Directory</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">cd bob</B
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">/users/billr/bob</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">cd bob/dave</B
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">/users/billr/bob/dave</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">cd ~/bob/dave</B
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">/users/billr/bob/dave</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">cd /usr/lib</B
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">/usr/lib</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">cd ..</B
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">/users</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">cd ../pete</B
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">/users/pete</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">cd ~pete</B
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">/users/pete</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">cd billr pete</B
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">/users/pete</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">cd illr arry</B
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">/users/barry</EM
></TD
></TR
></TBODY
></TABLE
><p class="para"><a class="indexterm" name="AUTOID-843"></A
><a class="indexterm" name="AUTOID-845"></A
>The first four are straightforward. The next two use a special
directory called <code class="literal">..</CODE
> (two dots), which means &quot;parent of this
directory.&quot; Every directory has 
one of these;
it's a
universal way to get to the directory above the current
one in the hierarchy-which is called the parent directory.
[4]<a class="indexterm" name="AUTOID-856"></A
><a class="indexterm" name="AUTOID-859"></A
></P
><blockquote class="footnote"><p class="para">[4] Each directory also has the special directory <code class="literal">.</CODE
>
(single dot), which just means &quot;this directory.&quot;
Thus, <b class="emphasis.bold">cd</B
> <code class="literal">.</CODE
> effectively does nothing.
Both <code class="literal">.</CODE
> and <code class="literal">..</CODE
> are actually special hidden files
in each directory that point to the directory itself and to its
parent directory, respectively. Root is its own parent.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-863"></A
>The last two examples in the table use a new form of the <b class="emphasis.bold">cd</B
>
command, which is not included in most Bourne shells. The
form is <b class="emphasis.bold">cd</B
> <em class="emphasis">old new</EM
>. It takes the full pathname of
the current working directory and tries to find the string
<b class="emphasis.bold">old</B
> in it. If it finds the string, it substitutes <b class="emphasis.bold">new</B
>
and changes to the resulting directory.  </P
><p class="para">In the first of the
two examples, the shell substitutes <em class="emphasis">pete</EM
> for <em class="emphasis">billr</EM
> in the 
current directory name and makes the result the new current 
directory. The last example shows that the substitution need
not be a complete filename: substituting <em class="emphasis">arry</EM
> for <em class="emphasis">illr</EM
>
in <em class="emphasis">/users/billr</EM
> yields <em class="emphasis">/users/barry</EM
>.
(If the <em class="emphasis">old</EM
> string can't be found in the current directory
name, the shell prints an error message.)</P
><p class="para"><a class="indexterm" name="AUTOID-880"></A
>Another new feature of the Korn shell's <b class="emphasis.bold">cd</B
> command is
the form <b class="emphasis.bold">cd -</B
>, which changes to whatever directory you
were in before the current one. For example, if you start out
in <em class="emphasis">/usr/lib</EM
>, type <b class="emphasis.bold">cd</B
> 
without an argument 
to go to your home directory, and then type 
<b class="emphasis.bold">cd -</B
>, you will
be back in <em class="emphasis">/usr/lib</EM
>.<a class="indexterm" name="AUTOID-889"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-1-SECT-6.2">1.6.2 Filenames and Wildcards</A
></H3
><p class="para">Sometimes you need to run a command on more than one file
at a time.  <a class="indexterm" name="KSH-CH-1-IX-LS"></A
>
The most common example of such a command is
<em class="emphasis">ls</EM
>, which lists information about files. In its simplest
form, without options or arguments, it lists the names of all
files in the working directory except special hidden files,
whose names begin with a dot (<b class="emphasis.bold">.</B
>).<a class="indexterm" name="AUTOID-897"></A
></P
><p class="para">If you give <em class="emphasis">ls</EM
> filename arguments,
it will list those files-which is sort of silly: if your 
current directory has the files <em class="emphasis">bob</EM
> and <em class="emphasis">fred</EM
> in it
and you type <b class="emphasis.bold">ls bob fred</B
>, the system will simply parrot
the filenames back at you.</P
><p class="para"><a class="indexterm" name="AUTOID-906"></A
>Actually, <em class="emphasis">ls</EM
> is more often used with options that tell it
to list information about the files, like the <b class="emphasis.bold">-l</B
> 
(long) option,
which tells <em class="emphasis">ls</EM
> to list the file's owner, size, time of
last modification, and other information, or <b class="emphasis.bold">-a</B
> (all), which
also lists the hidden files described above.  <a class="indexterm" name="AUTOID-913"></A
>
But sometimes you
want to verify the existence of a certain group of files without
having to know all of their names; for example, if you use the
<em class="emphasis">WordPerfect</EM
> word processor, you might want to see which files
in your current directory have names that end in <em class="emphasis">.wp</EM
>.</P
><p class="para">Filenames are so important in UNIX that the shell provides a
built-in way to specify the pattern of a set of filenames
without having to know all of the names themselves.  <a class="indexterm" name="AUTOID-917"></A
>
You can
use special characters, called <em class="emphasis">wildcards</EM
>, in filenames
to turn them into patterns. We'll show the three basic
types of wildcards that all major UNIX shells support, and we'll
save the Korn shell's set of advanced wildcard operators for
<a class="xref" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="Basic Shell Programming">Chapter 4</A
>.  
<a class="xref" href="#KSH-CH-1-TAB-1" title="Basic Wildcards">Table 1.2</A
> lists the basic wildcards.</P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-1-TAB-1">Table 1.2: Basic Wildcards</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Wildcard</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Matches</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">?</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Any single character</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">*</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Any string of characters</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">[<em class="emphasis">set</EM
>]</TD
><td class="entry" rowspan="1" colspan="1">Any character in <em class="emphasis">set</EM
> </TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">[!<em class="emphasis">set</EM
>]</TD
><td class="entry" rowspan="1" colspan="1">Any character <em class="emphasis">not</EM
> in <em class="emphasis">set</EM
></TD
></TR
></TBODY
></TABLE
><p class="para"><a class="indexterm" name="AUTOID-951"></A
><a class="indexterm" name="AUTOID-954"></A
>The <code class="literal">?</CODE
> wildcard matches any single character, so that
if your directory contains the files <em class="emphasis">program.c</EM
>,
<em class="emphasis">program.log</EM
>, and
<em class="emphasis">program.o</EM
>, then the expression <b class="emphasis.bold">program</B
><b class="emphasis.bold">.</B
><code class="literal">?</CODE
> matches
<em class="emphasis">program.c</EM
> and <em class="emphasis">program.o</EM
> but not <em class="emphasis">program.log</EM
>.</P
><p class="para"><a class="indexterm" name="KSH-CH-1-IX-WILDCARDS-SPLAT"></A
><a class="indexterm" name="KSH-CH-1-IX-WILDCARD"></A
>The asterisk (<code class="literal">*</CODE
>) is more powerful and far more widely-used; it matches
any string of characters. The expression <b class="emphasis.bold">program.</B
><code class="literal">*</CODE
>
will match all three files in the previous paragraph;
<em class="emphasis">WordPerfect</EM
> users can use the expression
<b class="emphasis.bold">*.wp</B
> to match their input files.
[5]<a class="indexterm" name="AUTOID-984"></A
><a class="indexterm" name="AUTOID-986"></A
></P
><blockquote class="footnote"><p class="para">[5] MS-DOS and VAX/VMS users should note that there is <em class="emphasis">nothing special</EM
>
about the dot (.) in UNIX filenames (aside from the leading dot, which
&quot;hides&quot; the file); it's just another character. For example,
<b class="emphasis.bold">ls *</B
> lists all files in the current directory; you don't
need <b class="emphasis.bold">*.*</B
> as you do on other systems.</P
></BLOCKQUOTE
><p class="para"><a class="xref" href="#KSH-CH-1-TAB-2" title="Using the * Wildcard">Table 1.3</A
>
should give you a better idea of
how the asterisk works. Assume that you have the files <em class="emphasis">bob</EM
>, 
<em class="emphasis">darlene</EM
>, <em class="emphasis">dave</EM
>, <em class="emphasis">ed</EM
>, <em class="emphasis">frank</EM
>, and <em class="emphasis">fred</EM
> 
in your working directory.  </P
><p class="para">Notice that <code class="literal">*</CODE
> can stand for nothing: both <code class="literal">*</CODE
><b class="emphasis.bold">ed</B
> and <code class="literal">*</CODE
><b class="emphasis.bold">e</B
><code class="literal">*</CODE
> match
<em class="emphasis">ed</EM
>.  
Also notice that the last example shows what the shell
does if it can't match anything: it just leaves the string
with the wildcard untouched.<a class="indexterm" name="AUTOID-1004"></A
><a class="indexterm" name="AUTOID-1005"></A
></P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-1-TAB-2">Table 1.3: Using the <code class="literal">*</CODE
> <em class="emphasis">Wildcard</EM
></A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Expression</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Yields</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">fr<code class="literal">*</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">frank fred</B
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">*</CODE
>ed</TD
><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">ed fred</B
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">b<code class="literal">*</CODE
> </TD
><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">bob</B
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">*</CODE
>e<code class="literal">*</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">darlene dave ed fred</B
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">*</CODE
>r<code class="literal">*</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">darlene frank fred</B
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">*</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">bob darlene dave ed frank fred</B
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">d<code class="literal">*</CODE
>e</TD
><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">darlene dave</B
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">g<code class="literal">*</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">g<code class="literal">*</CODE
></B
></TD
></TR
></TBODY
></TABLE
><p class="para"><a class="indexterm" name="KSH-CH-1-IX-WILDCARDS-DASH"></A
><a class="indexterm" name="KSH-CH-1-IX-WILDCARDS-RANGES"></A
><a class="indexterm" name="KSH-CH-1-IX-DASH-WILDCARD"></A
>The remaining wildcard is the <em class="emphasis">set</EM
> construct.
A set is a list of characters (e.g., abc),
an inclusive range (e.g., a-z), or some combination of the two. 
If you want the dash character to be part of a list, just
list it first or last. 
<a class="xref" href="#KSH-CH-1-TAB-3" title="Using the Set Construct Wildcards">Table 1.4</A
>
should explain things more clearly.<a class="indexterm" name="AUTOID-1070"></A
></P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-1-TAB-3">Table 1.4: Using the Set Construct Wildcards</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Expression</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Matches</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">[abc]</B
></TD
><td class="entry" rowspan="1" colspan="1">a, b, or c</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">[.,;]</B
></TD
><td class="entry" rowspan="1" colspan="1">Period, comma, or semicolon</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">[-_]</B
></TD
><td class="entry" rowspan="1" colspan="1">Dash and underscore</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">[a-c]</B
></TD
><td class="entry" rowspan="1" colspan="1">a, b, or c</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">[a-z]</B
></TD
><td class="entry" rowspan="1" colspan="1">All lowercase letters</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">[!0-9]</B
></TD
><td class="entry" rowspan="1" colspan="1">All non-digits</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">[0-9!]</B
></TD
><td class="entry" rowspan="1" colspan="1">All digits and exclamation point</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">[a-zA-Z]</B
></TD
><td class="entry" rowspan="1" colspan="1">All lower- and uppercase letters</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">[a-zA-Z0-9_-]</B
></TD
><td class="entry" rowspan="1" colspan="1">All letters, all digits, underscore, and dash</TD
></TR
></TBODY
></TABLE
><p class="para">In the original wildcard example, <b class="emphasis.bold">program.[co]</B
> and
<b class="emphasis.bold">program.[a-z]</B
> both match
<em class="emphasis">program.c</EM
> and <em class="emphasis">program.o</EM
>, but not <em class="emphasis">program.log</EM
>.</P
><p class="para">An exclamation point after the left bracket lets you
&quot;negate&quot; a set.  <a class="indexterm" name="AUTOID-1124"></A
>
For example, <b class="emphasis.bold">[!</B
><code class="literal">.;</CODE
><b class="emphasis.bold">]</B
> matches any character
except period and semicolon;  <b class="emphasis.bold">[!a-zA-Z]</B
> matches any 
character that isn't a letter.<a class="indexterm" name="AUTOID-1131"></A
><a class="indexterm" name="AUTOID-1132"></A
><a class="indexterm" name="AUTOID-1133"></A
></P
><p class="para">The range notation is handy, but you shouldn't make too many
assumptions about what characters are included in a range.
It's safe to use a range for uppercase letters, lowercase
letters, digits, or any subranges thereof (e.g., <b class="emphasis.bold">[f-q]</B
>, <b class="emphasis.bold">[2-6]</B
>).
Don't use ranges
on punctuation characters or mixed-case letters: e.g.,
<b class="emphasis.bold">[a-Z]</B
> and <b class="emphasis.bold">[A-z]</B
> should not be trusted to include all of the
letters and nothing more. The problem is that such ranges are
not entirely portable between different types of computers.
[6]<a class="indexterm" name="AUTOID-1141"></A
><a class="indexterm" name="AUTOID-1143"></A
></P
><blockquote class="footnote"><p class="para">[6] Specifically, ranges depend on the character encoding scheme
your computer uses. The vast majority use ASCII, but IBM
mainframes use EBCDIC.</P
></BLOCKQUOTE
><p class="para">The process of matching expressions containing
wildcards to filenames is called wildcard expansion.
This is just one of several steps the shell takes when
reading and processing a command line; another that we have already
seen is tilde expansion, where tildes are replaced with
home directories where applicable. We'll see others in
later chapters, and the full details of the process are 
enumerated in <a class="xref" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="Input/Output and Command-line Processing">Chapter 7</A
>.</P
><p class="para">However, it's important to
be aware that the commands that you run only see the
results of wildcard expansion.
That is, they just see a list of arguments, and they have
no knowledge of how those arguments came into being.<a class="indexterm" name="AUTOID-1148"></A
><a class="indexterm" name="AUTOID-1151"></A
>
For example, if you type 
<b class="emphasis.bold">ls fr* </B
> 
and your files
are as on the previous page, then the shell expands the command
line to <b class="emphasis.bold">ls fred frank</B
> and invokes the 
command <em class="emphasis">ls</EM
>
with arguments <b class="emphasis.bold">fred</B
> and <b class="emphasis.bold">frank</B
>. If you type <b class="emphasis.bold">ls g*</B
>,
then (because there is no match) <em class="emphasis">ls</EM
> will be given
the literal string <b class="emphasis.bold">g*</B
> and will complain with the error message,
<b class="emphasis.bold">g* not found.</B
>
[7]</P
><blockquote class="footnote"><p class="para">[7] This is different from the C shell's wildcard mechanism, which
prints an error message and doesn't execute the command at all.</P
></BLOCKQUOTE
><p class="para">Here is another example that should help you understand
why this is important.  <a class="indexterm" name="AUTOID-1166"></A
>
Suppose you are a C programmer.
This just means that you deal with files whose names end
in <em class="emphasis">.c</EM
> (programs, a.k.a. source files), <em class="emphasis">.h</EM
> 
(header files for programs), and <em class="emphasis">.o</EM
>
(object code files that aren't human-readable) as well as
other files.  </P
><p class="para">Let's say you want to list all 
source, object, and header files in your working directory.<a class="indexterm" name="AUTOID-1172"></A
><a class="indexterm" name="AUTOID-1175"></A
><a class="indexterm" name="AUTOID-1178"></A
><a class="indexterm" name="AUTOID-1181"></A
>
The command 
<b class="emphasis.bold">ls</B
> <code class="literal">*</CODE
><b class="emphasis.bold">.[cho]</B
> does the trick.  
The shell expands <code class="literal">*</CODE
><b class="emphasis.bold">.[cho]</B
> to
all files whose names end in a period followed 
by a <b class="emphasis.bold">c</B
>, <b class="emphasis.bold">h</B
>, or <b class="emphasis.bold">o</B
> and passes the resulting list to <em class="emphasis">ls</EM
> as
arguments.  </P
><p class="para">In other words, <em class="emphasis">ls</EM
> will see the filenames
just as if they were all typed in individually-but notice
that we assumed no knowledge of the actual filenames
whatsoever! We let the wildcards do the work.</P
><p class="para">As you gain experience with the shell, reflect on what
life would be like without wildcards. Pretty miserable,
we would say.   </P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch01_05.htm" webstripperlinkwas="ch01_05.htm" title="1.5 Interactive Shell Use"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 1.5 Interactive Shell Use" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch01_07.htm" webstripperlinkwas="ch01_07.htm" title="1.7 Input and Output"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 1.7 Input and Output" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.5 Interactive Shell Use</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.7 Input and Output</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
