<html><head>
<title>[Chapter 6] Command-line Options and Typed Variables</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:10:00Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><link rel="prev" href="ch05_05.htm" webstripperlinkwas="ch05_05.htm" title="5.5 while and until"><link rel="next" href="ch06_02.htm" webstripperlinkwas="ch06_02.htm" title="6.2 Integer Variables and Arithmetic"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch05_05.htm" webstripperlinkwas="ch05_05.htm" title="5.5 while and until"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 5.5 while and until" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 6</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch06_02.htm" webstripperlinkwas="ch06_02.htm" title="6.2 Integer Variables and Arithmetic"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 6.2 Integer Variables and Arithmetic" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="KSH-CH6-OPSTYPED">6. Command-line Options and Typed Variables</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#KSH-CH-6-SECT-1" title="6.1 Command-line Options">Command-line Options</A
><br><a class="sect1" href="ch06_02.htm" webstripperlinkwas="ch06_02.htm" title="6.2 Integer Variables and Arithmetic">Integer Variables and Arithmetic</A
><br><a class="sect1" href="ch06_03.htm" webstripperlinkwas="ch06_03.htm" title="6.3 Arrays">Arrays</A
></P
><p></P
></DIV
><p class="para">You should have a healthy grasp of shell programming techniques
now that you have gone through the previous chapters. What you
have learned up to this point
enables you to write many nontrivial, useful shell scripts and functions.</P
><p class="para">Still, you may have noticed some remaining gaps in the knowledge
you need to write shell code that behaves like the UNIX commands you
are used to. In particular, if you are an experienced UNIX user, 
it might have occurred to you 
that none of the example scripts shown so far have the
ability to handle <em class="emphasis">options</EM
> (preceded by a dash (<b class="emphasis.bold">-</B
>))
on the command line.  <a class="indexterm" name="AUTOID-9380"></A
><a class="indexterm" name="AUTOID-9382"></A
>
And if you
program in a conventional language like C or Pascal, you will have
noticed that the only type of data that we have seen in shell variables
is character strings; we haven't seen how to do arithmetic, for example.</P
><p class="para">These capabilities are certainly crucial to the shell's ability to
function as a useful UNIX programming language. In this chapter, we will
show how the Korn shell supports these and related features.</P
><div class="sect1"><h2 class="sect1"><a class="title" name="KSH-CH-6-SECT-1">6.1 Command-line Options</A
></H2
><p class="para"><a class="indexterm" name="KSH-CH-6-IX-COMMAND-LINE-OPTIONS"></A
><a class="indexterm" name="AUTOID-9390"></A
><a class="indexterm" name="AUTOID-9394"></A
><a class="indexterm" name="KSH-CH-6-IX-POSITIONAL-PARAMETERS"></A
>We have already seen many examples of the <em class="emphasis">positional parameters</EM
>
(variables called <b class="emphasis.bold">1</B
>, <b class="emphasis.bold">2</B
>, <b class="emphasis.bold">3</B
>, etc.)
that the shell uses to store the command-line
arguments to a shell script or function when it runs. We have also
seen related variables like <code class="literal">*</CODE
> (for the string of all arguments)
and <b class="emphasis.bold">#</B
> (for the number of arguments).</P
><p class="para">Indeed, these variables hold all of the information on the user's
command-line. But consider what happens when options are involved.
Typical UNIX commands have the form <em class="emphasis">command </EM
>[-<em class="emphasis">options</EM
>]<em class="emphasis">args</EM
>, meaning that there can be 0 or more options. If a shell script 
processes the command <b class="emphasis.bold">fred bob pete</B
>, then <b class="emphasis.bold">$1</B
> is &quot;bob&quot;
and <b class="emphasis.bold">$2</B
> is &quot;pete&quot;.  But if the command is <b class="emphasis.bold">fred -o bob pete</B
>,
then <b class="emphasis.bold">$1</B
> is <b class="emphasis.bold">-o</B
>, <b class="emphasis.bold">$2</B
> is &quot;bob&quot;, and <b class="emphasis.bold">$3</B
> is &quot;pete&quot;.</P
><p class="para">You might think you could write code like this to handle it:</P
><p class="para"><blockquote class="screen"><pre class="screen">if [[ $1 = -o ]]; then
    <em class="emphasis">code that processes the -o option</EM
>
    1=$2
    2=$3
fi

<i class="lineannotation">normal processing of $1 and $2...</I
></PRE
></BLOCKQUOTE
></P
><p class="para">But this code has several problems. First, assignments like
<b class="emphasis.bold">1=$2</B
> are illegal because positional parameters are read-only.
Even if they were legal, another problem is that
this kind of code imposes limitations on how many arguments
the script can handle-which is very unwise. Furthermore,
if this command had several possible options, the
code to handle all of them would get very messy very quickly.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-6-SECT-1.1">6.1.1 shift</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-6-IX-SHIFT"></A
>Luckily, the shell provides a way around this problem.
The command <b class="emphasis.bold">shift</B
> performs the function of:</P
><p class="para"><blockquote class="screen"><pre class="screen">1=$2
2=$3
...</PRE
></BLOCKQUOTE
></P
><p class="para">for every argument, regardless of how many there are. If you supply
a numeric argument to <b class="emphasis.bold">shift</B
>, it will shift the arguments that
many times over; for example, <b class="emphasis.bold">shift 3</B
> has this effect:</P
><p class="para"><blockquote class="screen"><pre class="screen">1=$4
2=$5
...</PRE
></BLOCKQUOTE
></P
><p class="para">This leads immediately to some code that handles a single option
(call it <b class="emphasis.bold">-o</B
>) and arbitrarily many arguments:</P
><p class="para"><blockquote class="screen"><pre class="screen">if [[ $1 = -o ]]; then
    <em class="emphasis">process the -o option</EM
>
    shift
fi

<i class="lineannotation">normal processing of arguments...</I
></PRE
></BLOCKQUOTE
></P
><p class="para">After the <b class="emphasis.bold">if</B
> construct, <b class="emphasis.bold">$1</B
>, <b class="emphasis.bold">$2</B
>, etc., are set to
the correct arguments.<a class="indexterm" name="AUTOID-9448"></A
></P
><p class="para">We can use <b class="emphasis.bold">shift</B
> together with the programming features
we have seen so far to implement simple option schemes. However,
we will need additional help when things get more complex.
The <b class="emphasis.bold">getopts</B
> built-in command, which we will introduce
later, provides this help.</P
><p class="para"><b class="emphasis.bold">shift</B
> by itself gives us enough power to implement the <b class="emphasis.bold">-N</B
>
option to the <em class="emphasis">highest</EM
> script we saw in <a class="xref" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="Basic Shell Programming">Chapter 4, Basic Shell Programming</A
>
(Task 4-1).
Recall that this script takes an input file that lists artists
and the number of albums you have by them. It sorts the list
and prints out the <em class="emphasis">N</EM
> highest numbers, in descending order.
The code that does the actual data processing is:</P
><p class="para"><blockquote class="screen"><pre class="screen">filename=$1
howmany=${2:-10}
sort -nr $filename | head -$howmany</PRE
></BLOCKQUOTE
></P
><p class="para">Our original syntax for calling this script was 
<b class="emphasis.bold">highest</B
> <em class="emphasis">filename</EM
><b class="emphasis.bold"> [-</B
><em class="emphasis">N</EM
><b class="emphasis.bold">]</B
>, where <em class="emphasis">N</EM
> defaults to
10 if omitted. Let's change this to a more conventional UNIX syntax,
in which options are given before arguments: 
<b class="emphasis.bold">highest [-</B
><em class="emphasis">N</EM
><b class="emphasis.bold">]</B
> <em class="emphasis">filename</EM
>. Here is how we would write
the script with this syntax:</P
><p class="para"><blockquote class="screen"><pre class="screen">if [[ $1 = -+([0-9]) ]]; then
    howmany=$1
    shift
elif [[ $1 = -* ]]; then
    print 'usage: highest [-N] filename'
    return 1
else
    howmany=&quot;-10&quot;
fi
filename=$1
sort -nr $filename | head $howmany</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-9474"></A
>In this code, the option is considered to be supplied if <b class="emphasis.bold">$1</B
>
matches the pattern <b class="emphasis.bold">-+([0-9])</B
>. This uses one of the Korn shell's
regular expression operators, which we saw in <a class="xref" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="Basic Shell Programming">Chapter 4</A
>.
Notice that we didn't surround the pattern with quotes
(even double quotes); if we did, the shell would interpret it literally,
not as a pattern. This pattern means
&quot;A dash followed by one or more digits.&quot; If <b class="emphasis.bold">$1</B
> matches,
then we assign it to the variable <b class="emphasis.bold">howmany</B
>.</P
><p class="para">If <b class="emphasis.bold">$1</B
> doesn't match, we test to see if it's an option at all,
i.e., if it matches the pattern <b class="emphasis.bold">-</B
><code class="literal">*</CODE
>.  If it does, then it's invalid;
we print an error message and exit with error status. If we reach the final
(<b class="emphasis.bold">else</B
>) case, we assume that <b class="emphasis.bold">$1</B
> is a filename and 
treat it as such in the ensuing code. The rest of the script 
processes the data as before.</P
><p class="para">We can extend what we have learned so far
to a general technique for handling multiple
options. For the sake of concreteness, assume that our script 
is called <em class="emphasis">bob</EM
> and we want to handle
the options <b class="emphasis.bold">-a</B
>, <b class="emphasis.bold">-b</B
>, and <b class="emphasis.bold">-c</B
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">while [[ $1 = -* ]]; do
    case $1 in 
	-a ) <code class="replaceable"><i>process option -a</I
></CODE
> ;;
	-b ) <code class="replaceable"><i>process option -b</I
></CODE
> ;;
	-c ) <code class="replaceable"><i>process option -c</I
></CODE
> ;;
	*  ) print 'usage: bob [-a] [-b] [-c] args...'
	     return 1
    esac
    shift
done

<i class="lineannotation">normal processing of arguments...</I
></PRE
></BLOCKQUOTE
></P
><p class="para">This code checks <b class="emphasis.bold">$1</B
> repeatedly as long as it starts with a dash
(<b class="emphasis.bold">-</B
>).  <a class="indexterm" name="AUTOID-9502"></A
>
Then the <b class="emphasis.bold">case</B
> construct
runs the appropriate code depending on which option <b class="emphasis.bold">$1</B
> is.
If the option is invalid&nbsp;- i.e., if it starts with a dash but
isn't <b class="emphasis.bold">-a</B
>, <b class="emphasis.bold">-b</B
>, or <b class="emphasis.bold">-c</B
>&nbsp;- then the script prints a usage message
and returns with an error exit status. After each option is
processed, the arguments are shifted over. The result is that
the positional parameters are set to the actual arguments when
the <b class="emphasis.bold">while</B
> loop finishes.</P
><p class="para">Notice that this code is capable of handling options of arbitrary
length, not just one letter (e.g., <b class="emphasis.bold">-fred</B
> instead of <b class="emphasis.bold">-a</B
>).</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-6-SECT-1.2">6.1.2 Options with Arguments</A
></H3
><p class="para">We need to add one more ingredient to make option processing really useful.
Recall that many commands have options that take their <em class="emphasis">own</EM
>
arguments.  <a class="indexterm" name="AUTOID-9517"></A
>
For example, the <em class="emphasis">cut</EM
> command, on which we relied
heavily in <a class="xref" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="Basic Shell Programming">Chapter 4</A
>, accepts the option <b class="emphasis.bold">-d</B
> with an argument
that determines the field delimiter (if it is not the default TAB).
To handle this type of option, we just use another <b class="emphasis.bold">shift</B
> 
when we are processing the option.</P
><p class="para">Assume that, in our <em class="emphasis">bob</EM
> script, the option <b class="emphasis.bold">-b</B
> requires
its own argument. Here is the modified code that will process it:</P
><p class="para"><blockquote class="screen"><pre class="screen">while [[ $1 = -* ]]; do
    case $1 in 
	-a ) <code class="replaceable"><i>process option -a</I
></CODE
> ;;
	-b ) <code class="replaceable"><i>process option -b</I
></CODE
> 
	     <code class="replaceable"><i>$2 is the option's argument</I
></CODE
>
	     shift ;;
	-c ) <code class="replaceable"><i>process option -c</I
></CODE
> ;;
	*  ) print 'usage: bob [-a] [-b barg] [-c] args...'
	     return 1
    esac
    shift
done

<i class="lineannotation">normal processing of arguments...</I
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-9535"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-6-SECT-1.3">6.1.3 getopts</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-6-IX-GETOPTS"></A
>So far, we have a complete, though still constrained, way
of handling command-line options. The above code does not allow 
a user to combine arguments with a single dash, e.g., 
<b class="emphasis.bold">-abc</B
> instead of <b class="emphasis.bold">-a -b -c</B
>. It also doesn't allow one to
specify arguments to options
without a space in between, e.g., <b class="emphasis.bold">-barg</B
> in addition to <b class="emphasis.bold">-b arg.</B
>
[1]</P
><blockquote class="footnote"><p class="para">[1] <a class="indexterm" name="AUTOID-9547"></A
>Although most UNIX commands allow this, it is actually contrary to the
Command Syntax Standard Rules in <em class="emphasis">intro</EM
>(1) of the <em class="emphasis">User's Manual</EM
>.</P
></BLOCKQUOTE
><p class="para">The shell provides a built-in way
to deal with multiple complex options without these constraints.
The built-in command <b class="emphasis.bold">getopts</B
>
[2]
can be used as the condition of the <b class="emphasis.bold">while</B
> in an option-processing
loop. Given a specification of which options are valid
and which require their own arguments, it sets up the
body of the loop to process each option in turn.  </P
><blockquote class="footnote"><p class="para">[2] <a class="indexterm" name="AUTOID-9556"></A
><a class="indexterm" name="AUTOID-9558"></A
><a class="indexterm" name="AUTOID-9560"></A
><b class="emphasis.bold">getopts</B
> replaces the external command <em class="emphasis">getopt(1)</EM
>,
used in Bourne shell programming;
<b class="emphasis.bold">getopts</B
> is better integrated into the shell's syntax and runs more
efficiently. C programmers will recognize <b class="emphasis.bold">getopts</B
> as very similar
to the standard library routine <em class="emphasis">getopt(3)</EM
>.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-9569"></A
><b class="emphasis.bold">getopts</B
> takes two arguments. The first
is a string that can contain letters
and colons. Each letter is a valid option; if a letter is followed
by a colon, the option requires an argument.  
<b class="emphasis.bold">getopts</B
> picks
options off the command line and assigns each one (without the
leading dash) to a variable whose
name is <b class="emphasis.bold">getopts</B
>' second argument.  <a class="indexterm" name="AUTOID-9575"></A
>
As long as there are options
left to process, <b class="emphasis.bold">getopts</B
> will return exit status 0; when the
options are exhausted, it returns exit status 1, causing the <b class="emphasis.bold">while</B
>
loop to exit.</P
><p class="para"><b class="emphasis.bold">getopts</B
> does a few other things that make option processing
easier; we'll encounter them as we examine
how to use <b class="emphasis.bold">getopts</B
> in the preceding example:</P
><p class="para"><blockquote class="screen"><pre class="screen">while getopts &quot;:ab:c&quot; opt; do
    case $opt in 
	a  ) <code class="replaceable"><i>process option -a</I
></CODE
> ;;
	b  ) <code class="replaceable"><i>process option -b</I
></CODE
> 
	     <code class="replaceable"><i>$OPTARG is the option's argument</I
></CODE
> ;;
	c  ) <code class="replaceable"><i>process option -c</I
></CODE
> ;;
	\? ) print 'usage: bob [-a] [-b barg] [-c] args...'
	     return 1
    esac
done
shift $(($OPTIND - 1))

<i class="lineannotation">normal processing of arguments...</I
></PRE
></BLOCKQUOTE
></P
><p class="para">The call to <b class="emphasis.bold">getopts</B
> in the <b class="emphasis.bold">while</B
> condition sets up
the loop to accept the options <b class="emphasis.bold">-a</B
>, <b class="emphasis.bold">-b</B
>, and <b class="emphasis.bold">-c</B
>,
and specifies that <b class="emphasis.bold">-b</B
> takes an argument. (We will explain
the <b class="emphasis.bold">:</B
> that starts the option string in a moment.) Each time the
loop body is executed, it will have the latest option available,
without a dash (<b class="emphasis.bold">-</B
>), in the variable <b class="emphasis.bold">opt</B
>.  </P
><p class="para"><a class="indexterm" name="AUTOID-9601"></A
><a class="indexterm" name="AUTOID-9604"></A
>If the user types an
invalid option, <b class="emphasis.bold">getopts</B
> normally prints an unfortunate
error message (of the form <b class="emphasis.bold">cmd: getopts: o bad option(s)</B
>)
and sets <b class="emphasis.bold">opt</B
> to <b class="emphasis.bold">?</B
>.
However-now here's an obscure kludge-if you begin the 
option letter string with a colon, <b class="emphasis.bold">getopts</B
> won't print the message.
[3]
We recommend that you specify the colon and provide your own error
message in a case that handles <b class="emphasis.bold">?</B
>, as above.</P
><blockquote class="footnote"><p class="para">[3] <a class="indexterm" name="AUTOID-9614"></A
>Evidently this was deemed necessary because you can't redirect
<b class="emphasis.bold">getopts</B
>' standard error output to <em class="emphasis">/dev/null</EM
>; the
result is (usually) a core dump.</P
></BLOCKQUOTE
><p class="para">We have modified the code in the <b class="emphasis.bold">case</B
> construct to
reflect what <b class="emphasis.bold">getopts</B
> does. <a class="indexterm" name="AUTOID-9622"></A
>
But notice that there are no more <b class="emphasis.bold">shift</B
> statements inside the
<b class="emphasis.bold">while</B
> loop: <b class="emphasis.bold">getopts</B
> does not rely on <b class="emphasis.bold">shift</B
>s to
keep track of where it is. It is unnecessary to shift arguments 
over until <b class="emphasis.bold">getopts</B
> is finished, i.e., until the <b class="emphasis.bold">while</B
>
loop exits.</P
><p class="para"><a class="indexterm" name="AUTOID-9631"></A
><a class="indexterm" name="AUTOID-9633"></A
><a class="indexterm" name="AUTOID-9636"></A
>If an option has an argument, <b class="emphasis.bold">getopts</B
> stores it in the variable
<b class="emphasis.bold">OPTARG</B
>, which can be used in the code that processes the
option.</P
><p class="para">The one <b class="emphasis.bold">shift</B
> statement left is after the <b class="emphasis.bold">while</B
> loop.<a class="indexterm" name="AUTOID-9644"></A
><a class="indexterm" name="AUTOID-9646"></A
><a class="indexterm" name="AUTOID-9649"></A
>
<b class="emphasis.bold">getopts</B
> stores in the variable <b class="emphasis.bold">OPTIND</B
> the number of 
the next argument to be processed; in this case, that's the number
of the first (non-option) command-line argument. For example,
if the command line were <b class="emphasis.bold">bob -ab pete</B
>, then <b class="emphasis.bold">$OPTIND</B
>
would be &quot;2&quot;.  If it were <b class="emphasis.bold">bob -a -b pete</B
>, then <b class="emphasis.bold">$OPTIND</B
>
would be &quot;3&quot;.  </P
><p class="para"><a class="indexterm" name="AUTOID-9659"></A
>The expression <b class="emphasis.bold">$(($OPTIND - 1))</B
> is an
arithmetic expression (as we'll see later in this chapter) equal
to <b class="emphasis.bold">$OPTIND</B
> minus 1. This value is used as the argument to
<b class="emphasis.bold">shift</B
>. The result is that the correct number of arguments
are shifted out of the way, leaving the &quot;real&quot; arguments
as <b class="emphasis.bold">$1</B
>, <b class="emphasis.bold">$2</B
>, etc.</P
><p class="para"><a class="indexterm" name="AUTOID-9667"></A
>Before we continue, now is a good time to summarize everything
that <b class="emphasis.bold">getopts</B
> does:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Its first argument is a string containing all valid option letters.
If an option requires an argument, a colon follows its letter in
the string. An initial colon causes <b class="emphasis.bold">getopts</B
> not to print an
error message when the user gives an invalid option.</P
></LI
><li class="listitem"><p class="para">Its second argument is the name of a variable that will hold
each option letter (without any leading dash) as it is processed.</P
></LI
><li class="listitem"><p class="para">If an option takes an argument, the argument is stored in the variable
<b class="emphasis.bold">OPTARG</B
>.</P
></LI
><li class="listitem"><p class="para">The variable <b class="emphasis.bold">OPTIND</B
> contains a number equal to the next
command-line argument to be processed. After <b class="emphasis.bold">getopts</B
> is done,
it equals the number of the first &quot;real&quot; argument.</P
></LI
></OL
><p class="para"><a class="indexterm" name="AUTOID-9685"></A
><a class="indexterm" name="AUTOID-9688"></A
>The advantages of <b class="emphasis.bold">getopts</B
> are that it minimizes extra code
necessary to process options and fully supports the standard UNIX option
syntax (as specified in <em class="emphasis">intro(1)</EM
> of the <em class="emphasis">User's Manual</EM
>).<a class="indexterm" name="AUTOID-9694"></A
></P
><p class="para"><a class="indexterm" name="KSH-CH-6-IX-C-COMPILERS"></A
>As a more concrete example, let's return to
our C compiler front end (Task 4-2). So far,
we have given our script the ability to process C source files
(ending in <em class="emphasis">.c</EM
>), assembly code files (<em class="emphasis">.s</EM
>), and object code
files (<em class="emphasis">.o</EM
>). Here is the latest version of the script:</P
><p class="para"><blockquote class="screen"><pre class="screen">objfiles=&quot;&quot;
for filename in &quot;$@&quot;; do
    case $filename in 
        *.c ) 
            objname=${filename%.c}.o
            compile $filename $objname ;;
        *.s )
            objname=${filename%.s}.o
            assemble $filename $objname ;;
        *.o ) 
            objname=$filename ;;
        *   ) 
            print &quot;error: $filename is not a source or object file.&quot;
            return 1 ;;
    esac
    objfiles=&quot;$objfiles $objname&quot;
done
ld $objfiles</PRE
></BLOCKQUOTE
></P
><p class="para">Now we can give the script the ability to handle options. To know what
options we'll need, we'll have to discuss further what compilers do.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-6-SECT-1.3.1">6.1.3.1 More About C Compilers</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9707"></A
>The C compiler on a typical modern UNIX system (ANSI C on 
System V Release 4) has roughly 30 different command-line
options, but we'll limit ourselves to the most widely-used ones.</P
><p class="para"><a class="indexterm" name="AUTOID-9712"></A
>Here's what we'll implement. All compilers provide the ability to eliminate the final linking step, i.e., the
call to the linker <em class="emphasis">ld</EM
>. This is useful for compiling C code into
object code files that will be linked later, and for taking advantage
of the compiler's error checking separately 
before trying to link. The <b class="emphasis.bold">-c</B
>
option suppresses the link step, producing only the compiled object code
files.</P
><p class="para"><a class="indexterm" name="AUTOID-9717"></A
>C compilers are also capable of including lots of extra information in 
an object code file that can be used by a debugger (though it is ignored by
the linker and the running program). If you don't know what a
debugger is, see <a class="xref" href="ch09_01.htm" webstripperlinkwas="ch09_01.htm" title="Debugging Shell Programs">Chapter 9, Debugging Shell Programs</A
>.
The debugger needs lots of information
about the original C code to be able to do its job; the
option <b class="emphasis.bold">-g</B
> directs the compiler to include this information in  
its object-code output.</P
><p class="para"><a class="indexterm" name="AUTOID-9722"></A
>If you aren't already familiar with UNIX C compilers, you may have
thought it strange when you saw in the last chapter that the linker
puts its output (the executable program) in a file called <em class="emphasis">a.out</EM
>.
This convention is a historical relic that no one has bothered to
change.  <a class="indexterm" name="AUTOID-9725"></A
>
Although it's certainly possible to change the executable's
name with the <em class="emphasis">mv</EM
> command, the C compiler provides the option
<b class="emphasis.bold">-o</B
> <em class="emphasis">filename</EM
>, which uses <em class="emphasis">filename</EM
> instead of <em class="emphasis">a.out</EM
>.</P
><p class="para"><a class="indexterm" name="KSH-CH-6-IX-OBJECT-CODE-LIBRARIES"></A
><a class="indexterm" name="KSH-CH-6-IX-LINKING"></A
>Another option we will support here has to do with
<em class="emphasis">libraries</EM
>. A library is a collection of object
code, <em class="emphasis">some</EM
> of which is to be included in the executable at
link time. (This is in contrast to a precompiled object code file,
<em class="emphasis">all</EM
> of which is linked in.) Each library includes 
a large amount of object code that supports a certain type of interface
or activity; typical UNIX systems have libraries for things like
networking, math functions, and graphics.</P
><p class="para">Libraries are extremely useful as building blocks that help programmers
write complex programs without having to &quot;reinvent the wheel&quot; every time.<a class="indexterm" name="AUTOID-9741"></A
>
The C compiler option <b class="emphasis.bold">-l</B
> <em class="emphasis">name</EM
> tells the linker to include whatever
code is necessary from the library <em class="emphasis">name</EM
>
[4]
in the executable it builds.  <a class="indexterm" name="AUTOID-9752"></A
>
One particular library called <em class="emphasis">c</EM
>
(the file <em class="emphasis">libc.a</EM
>) is always included. This is known
as the 
C runtime 
library; it contains code for
C's standard input and output capability, among other things.<a class="indexterm" name="AUTOID-9757"></A
><a class="indexterm" name="AUTOID-9758"></A
></P
><blockquote class="footnote"><p class="para">[4] This is actually a file called <em class="emphasis">lib</EM
>name<em class="emphasis">.a</EM
> in a standard library
directory such as <em class="emphasis">/lib</EM
>.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-9760"></A
>Finally, it is possible for a good C compiler to do certain things
that make its output object code smaller and more efficient. Collectively,
these things are called <em class="emphasis">optimization</EM
>. You can think of an
<em class="emphasis">optimizer</EM
> as an extra step in the compilation process
that looks back at the 
object-code output and changes it for the better. The option <b class="emphasis.bold">-O</B
>
invokes the optimizer.</P
><p class="para"><a class="xref" href="#KSH-CH-6-TAB-0" title="Popular C Compiler Options">Table 6.1</A
>
summarizes the options we will build into our C compiler
front end.<a class="indexterm" name="AUTOID-9768"></A
></P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-6-TAB-0">Table 6.1: Popular C Compiler Options</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Option</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Meaning</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-c</B
></TD
><td class="entry" rowspan="1" colspan="1">Produce object code only; do not invoke the linker</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-g</B
></TD
><td class="entry" rowspan="1" colspan="1">Include debugging information in object code files</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-l</B
> <em class="emphasis">lib</EM
></TD
><td class="entry" rowspan="1" colspan="1">Include the library <em class="emphasis">lib</EM
> when linking</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-o</B
> <em class="emphasis">exefile</EM
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Produce the executable file <em class="emphasis">exefile</EM
> instead of the default <em class="emphasis">a.out</EM
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-O</B
></TD
><td class="entry" rowspan="1" colspan="1">Invoke the optimizer</TD
></TR
></TBODY
></TABLE
><p class="para">You should also bear in mind this information about the options:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">The options <b class="emphasis.bold">-o</B
> and <b class="emphasis.bold">-l</B
> <em class="emphasis">lib</EM
> are merely passed on to the
linker (<em class="emphasis">ld</EM
>), which processes them on its own.</P
></LI
><li class="listitem"><p class="para">The <b class="emphasis.bold">-l</B
> <em class="emphasis">lib</EM
> option can be used multiple times to link in
multiple libraries.</P
></LI
><li class="listitem"><p class="para">The <b class="emphasis.bold">-g</B
> option is passed to the <em class="emphasis">ccom</EM
> command
(the program that does the actual C compilation).</P
></LI
><li class="listitem"><p class="para">We will assume that the optimizer is a separate program called
<em class="emphasis">optimize</EM
> that accepts an object file as argument and optimizes
it &quot;in place,&quot; i.e., without producing a separate output file.</P
></LI
></UL
><p class="para">Here is the code for the script <em class="emphasis">occ</EM
> that includes option processing:</P
><p class="para"><blockquote class="screen"><pre class="screen"># initialize option-related variables
do_link=true
debug=&quot;&quot;
link_libs=&quot;-l c&quot;
exefile=&quot;&quot;
opt=false

# process command-line options
while getopts &quot;:cgl:o:O&quot; opt; do
    case $opt in 
        c )    do_link=false ;;
        g )    debug=&quot;-g&quot; ;;
        l )    link_libs=&quot;$link_libs -l $OPTARG&quot; ;;
        o )    exefile=&quot;-o $OPTARG&quot; ;;
        O )    opt=true ;;
        \? )    print 'usage: occ [-cgO] [-l lib] [-o file] files...'
               return 1 ;;
    esac
done
shift $(($OPTIND - 1))

# process the input files
objfiles=&quot;&quot;
for filename in &quot;$@&quot;; do
    case $filename in 
        *.c ) 
            objname=${filename%.c}.o
            ccom $debug $filename $objname 
            if [[ $opt = true ]]; then
                optimize $objname 
            fi ;;
        *.s )
            objname=${filename%.s}.o
            as $filename $objname ;;
        *.o ) 
            objname=$filename ;;
        *   ) 
            print &quot;error: $filename is not a source or object file.&quot;
            return 1 ;;
    esac
    objfiles=&quot;$objfiles $objname&quot;
done

if [[ $do_link = true ]]; then
    ld $exefile $link_libs $objfiles
fi</PRE
></BLOCKQUOTE
></P
><p class="para">Let's examine the option-processing part of this code.
The first several lines initialize variables that we will use later
to store the status of each of the options. We use &quot;true&quot; and
&quot;false&quot; for truth values for readability; they are just strings
and otherwise have no special meaning. The initializations
reflect these assumptions:</P
><ol class="orderedlist"><li class="listitem"><p class="para">We will want to link.</P
></LI
><li class="listitem"><p class="para">We will not want the compiler to generate space-consuming
debugger information.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-9836"></A
>The only object-code library we will need is <em class="emphasis">c</EM
>, 
the standard C runtime library that is automatically linked in.</P
></LI
><li class="listitem"><p class="para">The executable file that the linker creates will be the linker's
default file, <em class="emphasis">a.out</EM
>.</P
></LI
><li class="listitem"><p class="para">We will not want to invoke the optimizer.</P
></LI
></OL
><p class="para">The <b class="emphasis.bold">while</B
>, <b class="emphasis.bold">getopts</B
>, and <b class="emphasis.bold">case</B
> 
constructs process the options in the
same way as the previous example. Here is what the code that
handles each option does:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">If the <b class="emphasis.bold">-c</B
> option is given,
the <b class="emphasis.bold">do_link</B
> flag is set to &quot;false,&quot; which will cause the <b class="emphasis.bold">if</B
>
condition at the end of the script to be false, meaning that the
linker will not run.</P
></LI
><li class="listitem"><p class="para">If <b class="emphasis.bold">-g</B
> is given, the <b class="emphasis.bold">debug</B
> variable is set to &quot;-g&quot;.  
This is passed on the command line to the compiler.</P
></LI
><li class="listitem"><p class="para">Each <b class="emphasis.bold">-l</B
> <em class="emphasis">lib</EM
> that is given is appended to the variable
<b class="emphasis.bold">link_libs</B
>, so that when the <b class="emphasis.bold">while</B
> loop exits, <b class="emphasis.bold">$link_libs</B
>
is the entire string of <b class="emphasis.bold">-l</B
> options. This string is passed 
to the linker.</P
></LI
><li class="listitem"><p class="para">If <b class="emphasis.bold">-o</B
> <em class="emphasis">file</EM
> is given, the <b class="emphasis.bold">exefile</B
> variable is
set to &quot;-o <em class="emphasis">file</EM
>&quot;.  This string is passed to the linker.</P
></LI
><li class="listitem"><p class="para">If <b class="emphasis.bold">-O</B
> is specified, the <b class="emphasis.bold">opt</B
> flag will be set. This
specification
causes the conditional <b class="emphasis.bold">if [[ $opt = true ]]</B
> to be true,
which means that the optimizer will run.</P
></LI
></UL
><p class="para">The remainder of the code is a modification of the <b class="emphasis.bold">for</B
> loop
we have already seen; the modifications are direct results of the
above option processing and should be self-explanatory.<a class="indexterm" name="AUTOID-9880"></A
><a class="indexterm" name="AUTOID-9881"></A
></P
></DIV
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch05_05.htm" webstripperlinkwas="ch05_05.htm" title="5.5 while and until"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 5.5 while and until" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch06_02.htm" webstripperlinkwas="ch06_02.htm" title="6.2 Integer Variables and Arithmetic"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 6.2 Integer Variables and Arithmetic" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.5 while and until</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.2 Integer Variables and Arithmetic</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
