<html><head>
<title>[Chapter 8] 8.4 trap</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:15:10Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="8. Process Handling"><link rel="prev" href="ch08_03.htm" webstripperlinkwas="ch08_03.htm" title="8.3 Signals"><link rel="next" href="ch08_05.htm" webstripperlinkwas="ch08_05.htm" title="8.5 Coroutines"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_03.htm" webstripperlinkwas="ch08_03.htm" title="8.3 Signals"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.3 Signals" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>Process Handling</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_05.htm" webstripperlinkwas="ch08_05.htm" title="8.5 Coroutines"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8.5 Coroutines" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="KSH-CH-8-SECT-4">8.4 trap</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-14095"></A
><a class="indexterm" name="KSH-CH-8-IX-TRAPS"></A
>We've been discussing how signals affect the casual user; 
now let's talk a bit about how shell programmers can use them.
We won't go into too much depth about this, because it's really
the domain of systems programmers. </P
><p class="para">We mentioned above that programs in general can be set up to &quot;trap&quot;
specific signals and process them in their own way.  <a class="indexterm" name="KSH-CH-8-IX-TRAPS-TRAP-COMMAND"></A
>
The <b class="emphasis.bold">trap</B
>
built-in command lets you do this from within a shell script.  
<b class="emphasis.bold">trap</B
> is most important for &quot;bullet-proofing&quot; large shell programs
so that they react appropriately to abnormal events-just as programs
in any language should guard against invalid input. It's also
important for certain systems programming tasks, as we'll see in the
next chapter.</P
><p class="para"><a class="indexterm" name="AUTOID-14107"></A
><a class="indexterm" name="AUTOID-14110"></A
>The syntax of <b class="emphasis.bold">trap</B
> is:</P
><blockquote class="blockquote"><p class="para"><b class="emphasis.bold">trap</B
> <code class="replaceable"><i>cmd sig1 sig2 ...</I
></CODE
> </P
></BLOCKQUOTE
><p class="para">That is, when any of <em class="emphasis">sig1</EM
>, <em class="emphasis">sig2</EM
>, etc., are received,
run <em class="emphasis">cmd</EM
>, then resume execution.
After <em class="emphasis">cmd</EM
> finishes, the script
resumes execution just after the command that was interrupted.
[10]</P
><blockquote class="footnote"><p class="para">[10] This is what <em class="emphasis">usually</EM
> happens. Sometimes the command
currently running will abort (<em class="emphasis">sleep</EM
> acts like this, as we'll 
see soon); other times it will finish running. Further details are beyond 
the scope of this book.</P
></BLOCKQUOTE
><p class="para">Of course, <em class="emphasis">cmd</EM
> can be a script or 
function. The <em class="emphasis">sig</EM
>s can be specified by name or by number.<a class="indexterm" name="AUTOID-14130"></A
><a class="indexterm" name="AUTOID-14131"></A
>
You can also invoke <b class="emphasis.bold">trap</B
> without arguments, in which case
the shell will print a list of any traps that have been set, using
symbolic names for the signals.</P
><p class="para">Here's a simple example that shows how <b class="emphasis.bold">trap</B
> works.  
Suppose we have a shell script called <b class="emphasis.bold">loop</B
> with this code:<a class="indexterm" name="AUTOID-14138"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen">while true; do
    sleep 60
done</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-14143"></A
>This will just pause for 60 seconds (the <em class="emphasis">sleep</EM
>(1) command)
and repeat indefinitely. <b class="emphasis.bold">true</B
> is a &quot;do-nothing&quot; command whose exit 
status is always 0.
[11]<a class="indexterm" name="AUTOID-14153"></A
>
Try typing in this script. Invoke it, 
let it run for a little while, then type <kbd class="keycap">[CTRL-C]</KBD
>
(assuming that is your interrupt key). It should stop,
and you should get your shell prompt back.</P
><blockquote class="footnote"><p class="para">[11] <a class="indexterm" name="AUTOID-14149"></A
>Actually, it's a built-in alias for <code class="literal">:</CODE
>, the real shell &quot;no-op.&quot;</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-14157"></A
>Now insert the following line at the beginning of the script:</P
><p class="para"><blockquote class="screen"><pre class="screen">trap 'print \'You hit control-C!\'' INT</PRE
></BLOCKQUOTE
></P
><p class="para">Invoke the script again. Now hit <span class="acronym">CTRL-C</SPAN
>. The odds are overwhelming 
that you are interrupting the <em class="emphasis">sleep</EM
> command (as opposed to
<b class="emphasis.bold">true</B
>). You should see the message
&quot;You hit control-C!&quot;, and the script will not stop running;
instead, the <em class="emphasis">sleep</EM
> command will abort, and
it will loop around and start another <em class="emphasis">sleep</EM
>.
Hit <span class="acronym">CTRL-\</SPAN
>&nbsp;to get it to stop.  <a class="indexterm" name="AUTOID-14171"></A
>
Type <b class="emphasis.bold">rm core</B
> to get rid of the resulting core dump file.</P
><p class="para"><a class="indexterm" name="AUTOID-14175"></A
><a class="indexterm" name="AUTOID-14177"></A
><a class="indexterm" name="AUTOID-14180"></A
>Next, run the script in the background by typing <b class="emphasis.bold">loop &amp;</B
>.
Type <b class="emphasis.bold">kill %loop</B
> (i.e., send it the TERM signal);
the script will terminate. Add TERM
to the <b class="emphasis.bold">trap</B
> command, so that it looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">trap 'print \'You hit control-C!\'' INT TERM</PRE
></BLOCKQUOTE
></P
><p class="para">Now repeat the process: run it in the background and type <b class="emphasis.bold">kill 
%loop</B
>.
As before, you will see the message and the process will keep
on running. Type <b class="emphasis.bold">kill -KILL %loop</B
> to stop it.</P
><p class="para">Notice that the message isn't really appropriate when you use 
<b class="emphasis.bold">kill</B
>. We'll change the script so it prints a better message in
the <b class="emphasis.bold">kill</B
> case:</P
><p class="para"><blockquote class="screen"><pre class="screen">trap 'print \'You hit control-C!\'' INT
trap 'print \'You tried to kill me!\'' TERM

while true; do
    sleep 60
done</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-14198"></A
><a class="indexterm" name="AUTOID-14200"></A
>Now try it both ways: in the foreground with <kbd class="keycap">[CTRL-C]</KBD
> and in the background
with <b class="emphasis.bold">kill</B
>. You'll see different messages.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-8-SECT-4.1">8.4.1 Traps and Functions</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-TRAPS-WITHIN-FUNCTIONS"></A
>The relationship between traps and shell functions is straightforward,
but it has certain nuances that are worth discussing. The most
important thing to understand is that functions can have their own
local traps; these aren't known outside of the function. In particular,
the surrounding script doesn't know about them. Consider this code:</P
><p class="para"><blockquote class="screen"><pre class="screen">function settrap {
    trap 'print \'You hit control-C!\'' INT
}

settrap
while true; do
    sleep 60
done</PRE
></BLOCKQUOTE
></P
><p class="para">If you invoke this script and hit your interrupt key, it will
just exit. <a class="indexterm" name="AUTOID-14213"></A
>
The trap on INT in the function is known only inside
that function. On the other hand:</P
><p class="para"><blockquote class="screen"><pre class="screen">function loop {
    trap 'print \'How dare you!\'' INT
    while true; do
        sleep 60
    done
}

trap 'print \'You hit control-C!\'' INT
loop</PRE
></BLOCKQUOTE
></P
><p class="para">When you run this script and hit your interrupt key, it will
print &quot;How dare you!&quot;.  But how about this:</P
><p class="para"><blockquote class="screen"><pre class="screen">function loop {
    while true; do
        sleep 60
    done
}

trap 'print \'You hit control-C!\'' INT
loop
print 'exiting...'</PRE
></BLOCKQUOTE
></P
><p class="para">This time the looping code is within a function, and the trap
is set in the surrounding script. If you hit your interrupt key,
it will print the message and then print &quot;exiting...&quot;.
It will not repeat the loop as above.</P
><p class="para">Why? Remember that when the signal comes in,
the shell aborts the current command, which in this case is a call
to a function. The entire function aborts, and execution
resumes at the next statement after the function call.</P
><p class="para">The advantage of traps that are local to functions is that they
allow you to control a function's behavior separately from the
surrounding code.  </P
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-TRAPS-SETTING-GLOBAL-FUNCTIONS"></A
>Yet you may want to define global traps inside functions.
There is a rather kludgy way to do this; it depends on a feature
that we introduce in the next chapter, which we call a &quot;fake signal.&quot;
Here is a way to set <em class="emphasis">trapcode</EM
>
as a global trap for signal <em class="emphasis">SIG</EM
> inside a function:</P
><p class="para"><blockquote class="screen"><pre class="screen">trap &quot;trap <em class="emphasis">trapcode SIG</EM
>&quot; EXIT</PRE
></BLOCKQUOTE
></P
><p class="para">This sets up the command <b class="emphasis.bold">trap</B
> <em class="emphasis">trapcode SIG</EM
> to run
right after the function exits, at which time the surrounding
shell script is in scope (i.e., is &quot;in charge&quot;). When that command
runs, <em class="emphasis">trapcode</EM
> is set up to handle the <em class="emphasis">SIG</EM
> signal.</P
><p class="para">For example, you may want to reset the trap on the signal you just
received, like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">function trap_handler {
    trap &quot;trap second_handler INT&quot; EXIT
    print 'Interrupt: one more to abort.'
}

function second_handler {
    print 'Aborted.'
    exit 
}

trap trap_handler INT</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-14242"></A
>This code acts like the UNIX <em class="emphasis">mail</EM
>
utility: when you are typing in a message, you must press your
interrupt key twice to abort the process.  <a class="indexterm" name="AUTOID-14245"></A
><a class="indexterm" name="AUTOID-14246"></A
></P
><p class="para">Speaking of <em class="emphasis">mail</EM
>, now we'll show a more practical example of traps.</P
><div class="task"><h4>Task 8.2</H4
><blockquote class="taskinfo"><p class="para">As part of an electronic mail system, write the shell code that
lets a user compose a message.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-14253"></A
>The basic idea is to use <em class="emphasis">cat</EM
> to create the message in a temporary
file and then hand the file's name off to a program
that actually sends the message to its destination.  
The code to create the file is very simple:</P
><p class="para"><blockquote class="screen"><pre class="screen">msgfile=/tmp/msg$$
cat &gt; $msgfile</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-14259"></A
>Since <em class="emphasis">cat</EM
> without an argument reads from the standard 
input, this will just wait for the user to type a message and
end it with the end-of-text character <kbd class="keycap">[CTRL-D]</KBD
>.</P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-8-SECT-4.2">8.4.2 Process ID Variables and Temporary Files</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-14266"></A
><a class="indexterm" name="AUTOID-14269"></A
>The only thing new about this is <b class="emphasis.bold">$$</B
> in the filename expression.
This is a special shell variable whose value is the process ID
of the current shell. </P
><p class="para">To see how <b class="emphasis.bold">$$</B
> works, 
type <b class="emphasis.bold">ps</B
> and note the process ID of your shell process (<em class="emphasis">ksh</EM
>).  
Then type <b class="emphasis.bold">print</B
> <code class="literal">&quot;</CODE
><b class="emphasis.bold">$$</B
><code class="literal">&quot;</CODE
>;
the shell will respond with that
same number. Now type <b class="emphasis.bold">ksh</B
> to
start a subshell, and when you get a prompt, repeat the process.
You should see a different number, probably slightly higher than
the last one.</P
><p class="para"><a class="indexterm" name="AUTOID-14283"></A
><a class="indexterm" name="AUTOID-14286"></A
><a class="indexterm" name="AUTOID-14289"></A
>A related built-in shell variable is <b class="emphasis.bold">!</B
> (i.e., its value is
<b class="emphasis.bold">$!</B
>), which contains the process ID of the most recently
invoked background job. To see how this works, invoke any job
in the background and note the process ID printed by the shell
next to <b class="emphasis.bold">[1]</B
>. Then type 
<b class="emphasis.bold">print</B
> <code class="literal">&quot;</CODE
><b class="emphasis.bold">$!</B
><code class="literal">&quot;</CODE
>; you should see the same number.  </P
><p class="para">The <b class="emphasis.bold">!</B
> variable is useful in shell programs that involve
multiple communicating processes, as we'll see later.</P
><p class="para"><a class="indexterm" name="AUTOID-14302"></A
><a class="indexterm" name="AUTOID-14304"></A
><a class="indexterm" name="AUTOID-14307"></A
><a class="indexterm" name="AUTOID-14311"></A
><a class="indexterm" name="KSH-CH-8-IX-MAIL"></A
>To return to our mail example:
since all processes on the system must
have unique process IDs, <b class="emphasis.bold">$$</B
> is excellent for constructing names
of temporary files. We saw an example of this back in <a class="xref" href="ch02_01.htm" webstripperlinkwas="ch02_01.htm" title="Command-line Editing">Chapter 2, Command-line Editing</A
>:
we used the expression <b class="emphasis.bold">.hist$$</B
> as a way of generating
unique names for command history files so that several can be open
at once, allowing multiple shell windows on a workstation to have their
own history files. This expression generates names like <b class="emphasis.bold">.hist234</B
>.
There are also examples of <b class="emphasis.bold">$$</B
> in <a class="xref" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="Input/Output and Command-line Processing">Chapter 7</A
> and 
<a class="xref" href="ch09_01.htm" webstripperlinkwas="ch09_01.htm" title="Debugging Shell Programs">Chapter 9, Debugging Shell Programs</A
>.</P
><p class="para"><a class="indexterm" name="AUTOID-14325"></A
><a class="indexterm" name="AUTOID-14327"></A
>The directory <em class="emphasis">/tmp</EM
> is conventionally used for temporary files.
Many systems also have another directory, <em class="emphasis">/usr/tmp</EM
>, 
for the same purpose.
All files in these directories are usually erased whenever the 
computer is rebooted.  </P
><p class="para">Nevertheless, a program should clean up such files before it exits,
to avoid taking up unnecessary disk space. <a class="indexterm" name="AUTOID-14332"></A
>
We could do this in
our code very easily by adding the line 
<b class="emphasis.bold">rm $msgfile</B
> after the code that actually sends the message.<a class="indexterm" name="AUTOID-14335"></A
>
But what if the program receives a signal during execution? 
For example, what if a user changes his or her mind about sending
the message and hits <span class="acronym">CTRL-C</SPAN
> to stop the process? We would need to
clean up before exiting. <a class="indexterm" name="AUTOID-14339"></A
>
We'll emulate the actual UNIX <em class="emphasis">mail</EM
> 
system by saving the message being written in a file called
<em class="emphasis">dead.letter</EM
> in the current directory.<a class="indexterm" name="AUTOID-14344"></A
>
We can do this by using <b class="emphasis.bold">trap</B
> with
a command string that includes an <b class="emphasis.bold">exit</B
> command:</P
><p class="para"><blockquote class="screen"><pre class="screen">trap 'mv $msgfile dead.letter; exit' INT TERM
msgfile=/tmp/msg$$
cat &gt; $msgfile
# send the contents of $msgfile to the specified mail address...
rm $msgfile</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-14351"></A
><a class="indexterm" name="AUTOID-14354"></A
>When the script receives an INT or TERM signal, it will remove
the temp file and then exit. Note that the command string
isn't <em class="emphasis">evaluated</EM
> until it needs to be run, so <b class="emphasis.bold">$msgfile</B
> 
will contain the correct value; that's why we surround the string
in single quotes.</P
><p class="para"><a class="indexterm" name="AUTOID-14360"></A
>But what if the script receives a signal before <b class="emphasis.bold">msgfile</B
> is
created-unlikely though that may be? Then <b class="emphasis.bold">mv</B
> will try to
rename a file that doesn't exist. To fix this, we need to
test for the existence of the
file <b class="emphasis.bold">$msgfile</B
> before trying to delete it. The code for this is
a bit unwieldy to put in a single command string, so we'll use a
function instead:</P
><p class="para"><blockquote class="screen"><pre class="screen">function cleanup {
    if [[ -a $msgfile ]]; then
	  mv $msgfile dead.letter
    fi
    exit
}

trap cleanup INT TERM

msgfile=/tmp/msg$$
cat &gt; $msgfile
# send the contents of $msgfile to the specified mail address...
rm $msgfile</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-14368"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-8-SECT-4.3">8.4.3 Ignoring Signals</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-TRAPS-FOR-IGNORING-SIGNALS"></A
><a class="indexterm" name="KSH-CH-8-IX-SIGNALS-IGNORING"></A
><a class="indexterm" name="KSH-CH-8-IX-TRAPS-COMNDNULL-STR-ARG-IGN-SIGS"></A
>Sometimes a signal comes in that you don't want to do anything about.
If you give the null string (&quot; &quot;  or <code class="literal">' '</CODE
>) as the command argument to 
<b class="emphasis.bold">trap</B
>, then the shell will effectively ignore that signal.  <a class="indexterm" name="KSH-CH-8-IX-SIGNALS-HUP"></A
><a class="indexterm" name="AUTOID-14386"></A
>
The classic
example of a signal you may want to ignore is HUP (hangup), 
the signal the shell sends to all of your background processes when
you log out.</P
><p class="para">HUP has the usual default behavior: it will kill the process that
receives it.
But there are bound to be times when you don't want a background job
to terminate when you log out. For example, you may start a long
compile or word processing job; you want to log out and come back later
when you expect the job to be finished. Under normal circumstances,
your background job will terminate when you log out. But if you 
run it in a shell environment where the HUP signal is ignored, the
job will finish.</P
><p class="para">To do this, you could write a simple function that looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">function ignorehup {
    trap &quot;&quot; HUP
    eval &quot;$@&quot;
}</PRE
></BLOCKQUOTE
></P
><p class="para">We write this as a function instead of a script for reasons
that will become clearer when we look in detail at subshells
at the end of this chapter.<a class="indexterm" name="AUTOID-14395"></A
><a class="indexterm" name="AUTOID-14396"></A
><a class="indexterm" name="AUTOID-14397"></A
></P
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-NOHUP"></A
>Actually, there is a UNIX command called <em class="emphasis">nohup</EM
>
that does precisely this.
The <b class="emphasis.bold">start</B
> script from the last chapter could include <b class="emphasis.bold">nohup</B
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">eval nohup &quot;$@&quot; &gt; logfile 2&gt;&amp;1 &amp;</PRE
></BLOCKQUOTE
></P
><p class="para">This prevents HUP from terminating your command and saves its
standard and error output in a file. Actually, the following is just as 
good:</P
><p class="para"><blockquote class="screen"><pre class="screen">nohup &quot;$@&quot; &gt; logfile 2&gt;&amp;1 &amp;</PRE
></BLOCKQUOTE
></P
><p class="para">If you understand why <b class="emphasis.bold">eval</B
> is essentially redundant when you use
<b class="emphasis.bold">nohup</B
> in this case,
then you have a firm grasp on the material in the previous 
chapter.<a class="indexterm" name="AUTOID-14412"></A
><a class="indexterm" name="AUTOID-14413"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-8-SECT-4.4">8.4.4 Resetting Traps</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-TRAPS-RESETTING-DEFAULTS"></A
><a class="indexterm" name="KSH-CH-8-IX-TRAP-COMMAND-RESET-DEFAULT"></A
>Another &quot;special case&quot; of the <b class="emphasis.bold">trap</B
> command occurs when you give
a dash (<b class="emphasis.bold">-</B
>) as the command argument. This resets the action taken when 
the signal is received to the default, which usually is 
termination of the process.</P
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-MAIL-N"></A
>As an example of this, let's return to Task 8-2, our mail program.  
After the
user has finished sending the message, the temporary file is erased.
At that point, since there is no longer any need to &quot;clean up,&quot; we
can reset the signal trap to its default state. The code
for this, apart from function definitions, is:</P
><p class="para"><blockquote class="screen"><pre class="screen">trap abortmsg INT
trap cleanup TERM

msgfile=/tmp/msg$$
cat &gt; $msgfile
# send the contents of $msgfile to the specified mail address...
rm $msgfile

trap - INT TERM</PRE
></BLOCKQUOTE
></P
><p class="para">The last line of this code resets the handlers for the INT and TERM
signals.<a class="indexterm" name="AUTOID-14431"></A
><a class="indexterm" name="AUTOID-14432"></A
></P
><p class="para">At this point you may be thinking that one could get seriously
carried away with signal handling in a shell script. 
It is true that &quot;industrial strength&quot; programs devote considerable
amounts of code to dealing with signals. But these programs are almost
always large enough so that the signal-handling code is a tiny fraction
of the whole thing. For example, you can bet that the real UNIX
<em class="emphasis">mail</EM
> system is pretty darn bullet-proof.</P
><p class="para">However, you will probably never write a shell script that
is complex enough, and that needs to be robust enough, to merit lots
of signal handling. You may write a <em class="emphasis">prototype</EM
> for a program
as large as <em class="emphasis">mail</EM
> in shell code, but prototypes by definition
do not need to be bullet-proofed.  <a class="indexterm" name="AUTOID-14438"></A
></P
><p class="para">Therefore, you shouldn't worry about
putting signal-handling code in every 20-line shell script you write.
Our advice is to determine if there are any situations in which a signal
could cause your program to do something seriously bad and add
code to deal with those contingencies. What is &quot;seriously bad&quot;?
Well, with respect to the above examples, we'd say that the case
where HUP causes your job to terminate on logout <em class="emphasis">is</EM
> seriously bad,
while the temporary file situation in our mail program is not.</P
><p class="para">The Korn shell has several new options to <b class="emphasis.bold">trap</B
> (with respect
to the same command in most Bourne shells) that make it useful
as an aid for debugging shell scripts. We'll cover these in 
the next chapter.<a class="indexterm" name="AUTOID-14443"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_03.htm" webstripperlinkwas="ch08_03.htm" title="8.3 Signals"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.3 Signals" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_05.htm" webstripperlinkwas="ch08_05.htm" title="8.5 Coroutines"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8.5 Coroutines" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.3 Signals</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.5 Coroutines</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
