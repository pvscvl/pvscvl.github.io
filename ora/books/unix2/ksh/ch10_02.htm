<html><head>
<title>[Chapter 10] 10.2 Environment Customization</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:17:05Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch10_01.htm" webstripperlinkwas="ch10_01.htm" title="10. Korn Shell Administration"><link rel="prev" href="ch10_01.htm" webstripperlinkwas="ch10_01.htm" title="10.1 Installing the Korn Shell as the Standard Shell"><link rel="next" href="ch10_03.htm" webstripperlinkwas="ch10_03.htm" title="10.3 System Security Features"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_01.htm" webstripperlinkwas="ch10_01.htm" title="10.1 Installing the Korn Shell as the Standard Shell"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 10.1 Installing the Korn Shell as the Standard Shell" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 10<br>Korn Shell Administration</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_03.htm" webstripperlinkwas="ch10_03.htm" title="10.3 System Security Features"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 10.3 System Security Features" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="KSH-CH-10-SECT-2">10.2 Environment Customization</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-16220"></A
>Like the Bourne shell, the Korn shell uses the file 
<em class="emphasis">/etc/profile</EM
> for system-wide customization.  
When a user logs in, the shell reads and runs <em class="emphasis">/etc/profile</EM
>
before running the user's <em class="emphasis">.profile</EM
>.</P
><p class="para">We won't cover all the possible commands you might
want to put in <em class="emphasis">/etc/profile</EM
>. But the Korn shell
has a few unique features that are particularly relevant
to system-wide customization; we'll discuss them here. </P
><p class="para">We'll start with two built-in commands that you can use
in <em class="emphasis">/etc/profile</EM
>
to tailor your users' environments and constrain their use
of system resources. Users can also use these commands
in their <em class="emphasis">.profile</EM
>, or at any other time, to override
the default settings.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-10-SECT-2.1">10.2.1 umask</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-10-IX-UMASK"></A
><b class="emphasis.bold">umask</B
>, like the same command in most other shells,
lets you specify the default permissions that files have
when users create them.  <a class="indexterm" name="AUTOID-16236"></A
><a class="indexterm" name="KSH-CH-10-IX-FILES-PERMISSIONS"></A
>
It takes the same types of
arguments that the <em class="emphasis">chmod</EM
> command does, i.e.,
absolute (octal numbers) or symbolic permission values.</P
><p class="para">The <b class="emphasis.bold">umask</B
> contains the permissions that are 
turned off by default whenever a process creates
a file, regardless of what permission the process
specifies.
[4]</P
><blockquote class="footnote"><p class="para">[4] <a class="indexterm" name="AUTOID-16246"></A
>If you are comfortable with Boolean logic, think of the
<b class="emphasis.bold">umask</B
> as a number that the operating system
logically XORs with the permission given by the
creating process.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-16251"></A
>We'll use octal notation to show how this works.
As you should know, the digits in a permission number
stand (left to right) for
the permissions of the owner, owner's group, and all
other users, respectively. Each digit, in turn, consists
of three bits, which specify read, write, and execute
permissions from left to right. (If a file is a
directory, the &quot;execute&quot; permission becomes &quot;search&quot;
permission, i.e., permission to <b class="emphasis.bold">cd</B
> to it, list
its files, etc.)</P
><p class="para">For example, the octal number 640 equals the binary number
110 100 000. If a file has this permission, then its owner
can read and write it; users in the owner's group can
only read it; everyone else has no permission on it.
A file with permission 755 gives its owner the right
to read, write, and execute it and everyone else the right
to read and execute (but not write).<a class="indexterm" name="AUTOID-16257"></A
></P
><p class="para">022 is a common <b class="emphasis.bold">umask</B
> value.
This implies that when a file is created, the &quot;most&quot;
permission it could possibly have is 755-which is
the usual permission of an executable that a compiler
might create. A text editor, on the other hand, might
create a file with 666 permission (read and write for
everyone), but the <b class="emphasis.bold">umask</B
> forces it to be 644 instead.<a class="indexterm" name="AUTOID-16261"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-10-SECT-2.2">10.2.2 ulimit</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-10-IX-ULIMIT"></A
>The <b class="emphasis.bold">ulimit</B
> command was originally used to specify the
limit on file creation size. But the Korn shell version
has options that let you put limits on several different
system resources.  
<a class="xref" href="#KSH-CH-10-TAB-0" title="ulimit Resource Options">Table 10.1</A
> lists the options.  <a class="indexterm" name="AUTOID-16269"></A
><a class="indexterm" name="AUTOID-16273"></A
><a class="indexterm" name="AUTOID-16277"></A
><a class="indexterm" name="AUTOID-16281"></A
><a class="indexterm" name="AUTOID-16285"></A
><a class="indexterm" name="AUTOID-16289"></A
><a class="indexterm" name="AUTOID-16293"></A
><a class="indexterm" name="AUTOID-16297"></A
></P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-10-TAB-0">Table 10.1: ulimit Resource Options</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Option</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Resource Limited</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-a</B
></TD
><td class="entry" rowspan="1" colspan="1">All (for printing values only)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-c</B
></TD
><td class="entry" rowspan="1" colspan="1">Core file size (&#189; kb blocks)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-d</B
></TD
><td class="entry" rowspan="1" colspan="1">Process data segment (kb)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-f</B
></TD
><td class="entry" rowspan="1" colspan="1">File size (&#189; kb blocks)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-n</B
></TD
><td class="entry" rowspan="1" colspan="1">File descriptors</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-s</B
></TD
><td class="entry" rowspan="1" colspan="1">Process stack segment (kb)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-t</B
></TD
><td class="entry" rowspan="1" colspan="1">Process CPU time (seconds)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-v</B
></TD
><td class="entry" rowspan="1" colspan="1">Virtual memory (kb)</TD
></TR
></TBODY
></TABLE
><p class="para"><a class="indexterm" name="AUTOID-16342"></A
>Each takes a numerical argument that specifies the limit in
units shown in the table. You can also give the argument
&quot;unlimited&quot; (which may actually mean some physical limit),
or you can omit the argument, in which case
it will print the current limit.  <a class="indexterm" name="AUTOID-16345"></A
>
<b class="emphasis.bold">ulimit -a</B
> prints
limits (or &quot;unlimited&quot;) of all types. You can only
specify one type of resource at a time.
If you don't specify any option, <b class="emphasis.bold">-f</B
> is assumed.</P
><p class="para">Some of these options depend on operating system capabilities
that don't exist in older UNIX versions. In particular,
some older versions have a fixed limit of 20 file descriptors
per process (making <b class="emphasis.bold">-n</B
> irrelevant), and some don't 
support virtual memory (making <b class="emphasis.bold">-v</B
> irrelevant).</P
><p class="para"><a class="indexterm" name="AUTOID-16355"></A
><a class="indexterm" name="AUTOID-16359"></A
>The <b class="emphasis.bold">-d</B
> and <b class="emphasis.bold">-s</B
> options have to do with 
<em class="emphasis">dynamic memory allocation</EM
>, i.e., memory for which
a process asks the operating system at runtime.
It's not necessary for casual users to limit these,
though software developers may want to do so
to prevent buggy programs from
trying to allocate endless amounts of memory due to
infinite loops.</P
><p class="para"><a class="indexterm" name="AUTOID-16367"></A
>The <b class="emphasis.bold">-v</B
> option is similar; it puts a limit on 
all uses of memory. You don't need this
unless your system has severe memory constraints 
or you want to limit process size to avoid thrashing. </P
><p class="para"><a class="indexterm" name="AUTOID-16373"></A
><a class="indexterm" name="AUTOID-16377"></A
>You may want to specify limits on file size (<b class="emphasis.bold">-f</B
>
and <b class="emphasis.bold">-c</B
>) if you have constraints on disk space.
Sometimes users actually mean to create huge files,
but more often than not, a huge file is the result of
a buggy program that goes into an infinite loop.<a class="indexterm" name="AUTOID-16383"></A
><a class="indexterm" name="AUTOID-16385"></A
><a class="indexterm" name="AUTOID-16388"></A
><a class="indexterm" name="AUTOID-16391"></A
>
Software developers who use debuggers like <em class="emphasis">sdb</EM
>
and <em class="emphasis">dbx</EM
> should not limit core file size, because
core dumps are necessary for debugging.</P
><p class="para"><a class="indexterm" name="AUTOID-16397"></A
>The <b class="emphasis.bold">-t</B
> option is another possible guard against
infinite loops. But we would argue that a program
that is in an infinite loop but isn't allocating memory
or writing files is not particularly dangerous; it's
better to leave this unlimited and just let the user
kill the offending program.  </P
><p class="para"><a class="indexterm" name="AUTOID-16403"></A
>In addition to the types of resources you can limit,
<b class="emphasis.bold">ulimit</B
> lets you specify hard or soft
limits.  <a class="indexterm" name="AUTOID-16407"></A
>
Hard limits can be lowered by any user but
only raised by the superuser (<b class="emphasis.bold">root</B
>); users
can lower soft limits and raise them-but only as high
as the hard limit for that resource.</P
><p class="para">If you give <b class="emphasis.bold">-H</B
> along with one (or more)
of the options above, <b class="emphasis.bold">ulimit</B
> will set hard limits;
<b class="emphasis.bold">-S</B
> sets soft limits. Without either of these,
<b class="emphasis.bold">ulimit</B
> sets both. For example, the following
commands set the soft limit on file descriptors to 64
and the hard limit to unlimited:</P
><p class="para"><blockquote class="screen"><pre class="screen">ulimit -Sn 64
ulimit -Hn unlimited</PRE
></BLOCKQUOTE
></P
><p class="para">When <b class="emphasis.bold">ulimit</B
> prints current limits, it prints soft
limits unless you specify <b class="emphasis.bold">-H</B
>.<a class="indexterm" name="AUTOID-16421"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-10-SECT-2.3">10.2.3 Types of Global Customization</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-16425"></A
>The best possible approach to globally-available
customization would be a system-wide environment file
that is separate from each user's environment file-just
like <em class="emphasis">/etc/profile</EM
> is separate from each user's
<em class="emphasis">.profile</EM
>.  </P
><p class="para">Unfortunately, the Korn shell doesn't
have this feature.  <a class="indexterm" name="AUTOID-16430"></A
><a class="indexterm" name="AUTOID-16433"></A
><a class="indexterm" name="AUTOID-16435"></A
>
If you assign a filename to the
<b class="emphasis.bold">ENV</B
> environment variable, it could be overridden
in a user's <em class="emphasis">.profile</EM
>. This allows you to make
a default environment file available for users
who don't have their own, but it doesn't let you have
a system-wide environment file that runs in addition
to the users'.</P
><p class="para">Nevertheless, the shell gives you a few ways to set up 
customizations that are available to all users at
all times.  <a class="indexterm" name="AUTOID-16441"></A
><a class="indexterm" name="AUTOID-16443"></A
><a class="indexterm" name="AUTOID-16445"></A
><a class="indexterm" name="AUTOID-16447"></A
><a class="indexterm" name="AUTOID-16450"></A
>
Environment variables are
the most obvious; your <em class="emphasis">/etc/profile</EM
> file
will undoubtedly contain definitions for several of
them, including <b class="emphasis.bold">PATH</B
> and <b class="emphasis.bold">TERM</B
>.  </P
><p class="para"><a class="indexterm" name="AUTOID-16457"></A
><a class="indexterm" name="AUTOID-16460"></A
>The variable <b class="emphasis.bold">TMOUT</B
> is useful when your system
supports dialup lines. Set it to a number <em class="emphasis">N</EM
>, and
if a user doesn't enter a command within <em class="emphasis">N</EM
> seconds
after the shell last issued a prompt, the shell will
terminate. This feature is helpful in preventing people
from &quot;hogging&quot; the dialup lines. </P
><p class="para"><a class="indexterm" name="AUTOID-16466"></A
><a class="indexterm" name="AUTOID-16468"></A
>You may want to include some more complex customizations
involving environment variables, such as the prompt
string <b class="emphasis.bold">PS1</B
> containing the current directory
(as seen in <a class="xref" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="Basic Shell Programming">Chapter 4, Basic Shell Programming</A
>).</P
><p class="para"><a class="indexterm" name="AUTOID-16474"></A
><a class="indexterm" name="AUTOID-16476"></A
><a class="indexterm" name="AUTOID-16478"></A
><a class="indexterm" name="AUTOID-16481"></A
><a class="indexterm" name="AUTOID-16484"></A
>You can also turn on options, such as emacs-
or vi- editing modes, <b class="emphasis.bold">trackall</B
> to make alias
expansion more efficient and system security tighter,
and <b class="emphasis.bold">noclobber</B
> to protect
against inadvertent file overwriting. Any shell
scripts you have written for general use also contribute to
customization.</P
><p class="para"><a class="indexterm" name="AUTOID-16490"></A
>Unfortunately, it's not possible to create a global
alias.  <a class="indexterm" name="AUTOID-16493"></A
>
You can define aliases in <em class="emphasis">/etc/profile</EM
>,
but there is no way to make them part of the environment
so that their definitions will propagate to subshells.
(In contrast, users can define global aliases by putting
their definitions in environment files.)</P
><p class="para"><a class="indexterm" name="AUTOID-16497"></A
><a class="indexterm" name="AUTOID-16500"></A
>However, you can set up global functions.
These are an excellent way to customize
your system's environment, because functions are part
of the shell, not separate processes.  <a class="indexterm" name="AUTOID-16504"></A
><a class="indexterm" name="AUTOID-16506"></A
><a class="indexterm" name="AUTOID-16508"></A
>
For example,
if you define <em class="emphasis">pushd</EM
> and <em class="emphasis">popd</EM
> (see
Chapters <a class="xref" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="Basic Shell Programming">Chapter 4</A
> through <a class="xref" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm" title="Command-line Options and Typed Variables">Chapter 6, Command-line Options and Typed Variables</A
>) as exported functions, the shell
will run them almost as if they were built-in commands,
as they are in the C shell.</P
><p class="para"><a class="indexterm" name="AUTOID-16515"></A
><a class="indexterm" name="AUTOID-16517"></A
><a class="indexterm" name="AUTOID-16520"></A
><a class="indexterm" name="AUTOID-16523"></A
>The best way to create global functions is to use 
the built-in variable <b class="emphasis.bold">FPATH</B
> and the <b class="emphasis.bold">autoload</B
>
feature that we introduced in <a class="xref" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="Basic Shell Programming">Chapter 4</A
>.  <a class="indexterm" name="AUTOID-16528"></A
>
Just define
<b class="emphasis.bold">FPATH</B
> as a function library directory, perhaps 
<em class="emphasis">/usr/local/functions</EM
>, and make it an environment
variable by <b class="emphasis.bold">export</B
>ing it. In other words, put
this or similar code in <em class="emphasis">/etc/profile</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">FPATH=/usr/local/functions
export FPATH</PRE
></BLOCKQUOTE
></P
><p class="para">Then put each global function's definition in
a file in that directory with the same name as the function,
and put <b class="emphasis.bold">autoload</B
> <em class="emphasis">fname</EM
> for each of these functions
in <em class="emphasis">/etc/profile</EM
>.</P
><p class="para">In either case, we suggest using exported functions for
global customization instead of shell scripts. Given
how cheap memory is nowadays, there is no reason why
you shouldn't make generally useful functions part of 
your users' environment.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_01.htm" webstripperlinkwas="ch10_01.htm" title="10.1 Installing the Korn Shell as the Standard Shell"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 10.1 Installing the Korn Shell as the Standard Shell" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_03.htm" webstripperlinkwas="ch10_03.htm" title="10.3 System Security Features"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 10.3 System Security Features" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.1 Installing the Korn Shell as the Standard Shell</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.3 System Security Features</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
