<html><head>
<title>[Chapter 9] Debugging Shell Programs</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:16:12Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><link rel="prev" href="ch08_06.htm" webstripperlinkwas="ch08_06.htm" title="8.6 Subshells"><link rel="next" href="ch09_02.htm" webstripperlinkwas="ch09_02.htm" title="9.2 A Korn Shell Debugger"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_06.htm" webstripperlinkwas="ch08_06.htm" title="8.6 Subshells"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.6 Subshells" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 9</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch09_02.htm" webstripperlinkwas="ch09_02.htm" title="9.2 A Korn Shell Debugger"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 9.2 A Korn Shell Debugger" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="KSH-CH9-DEBUGSH">9. Debugging Shell Programs</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#KSH-CH-9-SECT-1" title="9.1 Basic Debugging Aids">Basic Debugging Aids</A
><br><a class="sect1" href="ch09_02.htm" webstripperlinkwas="ch09_02.htm" title="9.2 A Korn Shell Debugger">A Korn Shell Debugger</A
></P
><p></P
></DIV
><p class="para">We hope that we have convinced you that
the Korn shell can be used as a serious UNIX programming environment.
It certainly has enough features, control structures, etc.
But another essential part of a programming environment is a set
of powerful, integrated <em class="emphasis">support tools</EM
>.  <a class="indexterm" name="AUTOID-14938"></A
><a class="indexterm" name="AUTOID-14940"></A
>
For example,
there is a wide assortment of screen editors, compilers,
debuggers, profilers, cross-referencers, etc., for languages like
C and C++.  <a class="indexterm" name="AUTOID-14942"></A
><a class="indexterm" name="AUTOID-14944"></A
><a class="indexterm" name="KSH-CH-9-IX-DEBUGGERS"></A
>
If you program in one of these languages,
you probably take such tools for granted, and you would
undoubtedly cringe at the thought of having to develop code with, say,
the <em class="emphasis">ed</EM
> editor and the <em class="emphasis">adb</EM
> machine-language debugger.</P
><p class="para"><a class="indexterm" name="AUTOID-14951"></A
><a class="indexterm" name="AUTOID-14953"></A
>But what about programming support tools for the Korn shell? Of
course, you can use any editor you like, including <em class="emphasis">vi</EM
> and
<em class="emphasis">emacs</EM
>. And because the shell is an interpreted language,
you don't need a compiler.
[1]
But there are no other tools available. The most serious problem
is the lack of a debugger.</P
><blockquote class="footnote"><p class="para">[1] <a class="indexterm" name="AUTOID-14959"></A
>Actually, if you are really concerned about efficiency, there
are shell code compilers on the market; they convert shell
scripts to C code that often runs quite a bit faster.</P
></BLOCKQUOTE
><p class="para">This chapter addresses that lack. The shell does have a few 
features that help in debugging shell scripts; we'll see these in the
first part of the chapter.  <a class="indexterm" name="AUTOID-14962"></A
>
The Korn shell also has a couple of
new features, not present in most Bourne shells, that make it
possible to implement a full-blown debugging tool.  <a class="indexterm" name="AUTOID-14964"></A
>
We'll show these features; more importantly, we will present <em class="emphasis">kshdb</EM
>,
a Korn shell debugger that uses them. <em class="emphasis">kshdb</EM
> is basic yet
quite useable, and its implementation serves as an extended example of
various shell programming techniques from throughout this book.  </P
><div class="sect1"><h2 class="sect1"><a class="title" name="KSH-CH-9-SECT-1">9.1 Basic Debugging Aids</A
></H2
><p class="para"><a class="indexterm" name="KSH-CH-9-IX-DEBUGGING-SHELL-CODE"></A
><a class="indexterm" name="AUTOID-14974"></A
>What sort of functionality do you need to debug a program?
At the most empirical level, you need a way of determining <em class="emphasis">what</EM
>
is causing your program to behave badly, and <em class="emphasis">where</EM
> the
problem is in the code. You usually start with an obvious <em class="emphasis">what</EM
>
(such as an error message, inappropriate output, infinite loop, etc.),
try to work backwards until you find a <em class="emphasis">what</EM
> that is closer to 
the actual problem (e.g., a variable with a bad value, a bad option
to a command), and eventually arrive at the exact <em class="emphasis">where</EM
> in your
program. Then you can worry about <em class="emphasis">how</EM
> to fix it.</P
><p class="para">Notice that these steps represent a process of starting with obvious
information and ending up with often obscure facts gleaned through
deduction and intuition. Debugging aids make it easier to deduce and
intuit by providing relevant information easily or even automatically,
preferably without modifying your code.<a class="indexterm" name="AUTOID-14985"></A
></P
><p class="para"><a class="indexterm" name="AUTOID-14987"></A
><a class="indexterm" name="AUTOID-14990"></A
>The simplest debugging aid (for any language)
is the output statement, <b class="emphasis.bold">print</B
> in 
the shell's case. Indeed, old-timer programmers debugged their
FORTRAN code by inserting <b class="emphasis.bold">WRITE</B
> cards into their decks.
You can debug by putting
lots of <b class="emphasis.bold">print</B
> statements in your code
(and removing them later), but you will
have to spend lots of time narrowing down not only <em class="emphasis">what</EM
> 
exact information you want but also <em class="emphasis">where</EM
> you need to see it.
You will also probably have to wade through lots and lots of
output to find the information you really want.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-9-SECT-1.1">9.1.1 Set Options</A
></H3
><p class="para">Luckily, the shell has a few basic features that give you
debugging functionality beyond that of <b class="emphasis.bold">print</B
>.
The most basic of these are options to the <b class="emphasis.bold">set -o</B
> command
(as covered in <a class="xref" href="ch03_01.htm" webstripperlinkwas="ch03_01.htm" title="Customizing Your Environment">Chapter 3, Customizing Your Environment</A
>). These options can also be
used on the command line when running a script, as 
<a class="xref" href="#KSH-CH-9-TAB-0" title="Debugging Options">Table 9.1</A
> shows.</P
><p class="para"><a class="indexterm" name="AUTOID-15007"></A
><a class="indexterm" name="AUTOID-15010"></A
><a class="indexterm" name="KSH-CH-9-IX-OPTIONS-VERBOSE"></A
><a class="indexterm" name="AUTOID-15018"></A
><a class="indexterm" name="AUTOID-15021"></A
>The <b class="emphasis.bold">verbose</B
> option simply echoes (to standard error)
whatever input the shell gets. It
is useful for finding the exact point at
which a script is bombing. For example, assume your script looks
like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">fred
bob
dave
pete
ed
ralph</PRE
></BLOCKQUOTE
></P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-9-TAB-0">Table 9.1: Debugging Options</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">set -o Option</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Command-line Option</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Action</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">noexec</B
></TD
><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-n</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Don't run commands; check for syntax errors only</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">verbose</B
></TD
><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-v</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Echo commands before running them</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">xtrace</B
></TD
><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-x</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Echo commands after command-line processing</P
></TD
></TR
></TBODY
></TABLE
><p class="para">None of these commands are standard UNIX programs, and they all
do their work silently. Say the script
crashes with a cryptic message like &quot;segmentation violation.&quot;  
This tells you nothing about which command caused the error.
If you type <b class="emphasis.bold">ksh -v</B
> <em class="emphasis">scriptname</EM
>, you might see this:</P
><p class="para"><blockquote class="screen"><pre class="screen">fred
bob 
dave
segmentation violation
pete
ed
ralph</PRE
></BLOCKQUOTE
></P
><p class="para">Now you know that <b class="emphasis.bold">dave</B
> is the probable culprit-though it is also
possible that <b class="emphasis.bold">dave</B
> bombed because of something it expected
<b class="emphasis.bold">fred</B
> or <b class="emphasis.bold">bob</B
> to do (e.g., create an input file) that
they did incorrectly.<a class="indexterm" name="AUTOID-15067"></A
></P
><p class="para"><a class="indexterm" name="KSH-CH-9-IX-OPTIONS-XTRACE"></A
><a class="indexterm" name="AUTOID-15072"></A
>The <b class="emphasis.bold">xtrace</B
> option is more powerful: it echoes command lines
after they have been through parameter substitution, command substitution,
and the other steps of command-line processing (as listed in Chapter 
<a class="xref" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="Input/Output and Command-line Processing">Chapter 7, Input/Output and Command-line Processing</A
>). 
For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">set -o xtrace</B
> 
$ <b class="emphasis.bold">fred=bob</B
> 
+ fred=bob
$ <b class="emphasis.bold">print &quot;$fred&quot;</B
> 
+ print bob
bob
$ <b class="emphasis.bold">ls -l $(whence emacs)</B
> 
+ whence emacs
+ ls -l /usr/share/bin/emacs
-rwxr-xr-x  1 root      1593344 Apr  8  1991 /usr/share/bin/emacs
$</PRE
></BLOCKQUOTE
></P
><p class="para">As you can see, <b class="emphasis.bold">xtrace</B
> starts each line it prints with <b class="emphasis.bold">+</B
>.<a class="indexterm" name="KSH-CH-9-IX-BUILT-IN-VARIABLES-PS4"></A
><a class="indexterm" name="KSH-CH-9-IX-OPTIONS-XTRACE-PS4-PROMPT"></A
><a class="indexterm" name="KSH-CH-9-IX-PS4"></A
>
This is actually customizable: it's the value of the built-in shell variable
<b class="emphasis.bold">PS4</B
>. So if you set <b class="emphasis.bold">PS4</B
>
to &quot;<b class="emphasis.bold">xtrace</B
><b class="emphasis.bold">-&gt;</B
> &quot;
(e.g., in your <em class="emphasis">.profile</EM
> or environment file), 
then you'll get
<b class="emphasis.bold">xtrace</B
> listings that look like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">ls -l $(whence emacs)</B
> 
xtrace-&gt; whence emacs
xtrace-&gt; ls -l /usr/share/bin/emacs
-rwxr-xr-x  1 root      1593344 Apr  8  1991 /usr/share/bin/emacs
$</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-15105"></A
><a class="indexterm" name="AUTOID-15108"></A
>An even better way of customizing <b class="emphasis.bold">PS4</B
> is to use a
built-in variable we haven't seen yet: <b class="emphasis.bold">LINENO</B
>, which
holds the number of the currently running line in a shell script.
Put this line in your <em class="emphasis">.profile</EM
> or environment file:</P
><p class="para"><blockquote class="screen"><pre class="screen">PS4='line $LINENO: '</PRE
></BLOCKQUOTE
></P
><p class="para">We use the same technique as we did with <b class="emphasis.bold">PS1</B
> in
<a class="xref" href="ch03_01.htm" webstripperlinkwas="ch03_01.htm" title="Customizing Your Environment">Chapter 3</A
>: using single quotes to postpone
the evaluation of the string until each time the shell prints the prompt.
This will print messages of the form <b class="emphasis.bold">line</B
> <em class="emphasis">N</EM
><b class="emphasis.bold">:</B
> in your
trace output.  <a class="indexterm" name="AUTOID-15121"></A
>
You could even include the name of the shell
script you're debugging in this prompt by using 
the positional parameter <b class="emphasis.bold">$0</B
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">PS4='$0 line $LINENO: '</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-15127"></A
><a class="indexterm" name="AUTOID-15128"></A
><a class="indexterm" name="AUTOID-15129"></A
>As another example, say you are trying to track down a bug
in a script called <b class="emphasis.bold">fred</B
> that contains this code:</P
><p class="para"><blockquote class="screen"><pre class="screen">dbfmq=$1.fmq
...
fndrs=$(cut -f3 -d' ' $dfbmq)</PRE
></BLOCKQUOTE
></P
><p class="para">You type <b class="emphasis.bold">fred bob</B
> to run it in the normal way, and it hangs.
Then you type <b class="emphasis.bold">ksh -x fred bob</B
>, and you see this:</P
><p class="para"><blockquote class="screen"><pre class="screen">+ dbfmq=bob.fmq
...
+ + cut -f3 -d</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-15139"></A
>It hangs again at this point. You notice that <em class="emphasis">cut</EM
> doesn't
have a filename argument, which means that there must be something
wrong with the variable <b class="emphasis.bold">dbfmq</B
>. But it has executed the assignment
statement <b class="emphasis.bold">dbfmq=bob.fmq</B
> properly... ah-<em class="emphasis">hah</EM
>!
You made a typo in the variable name inside the command substitution
construct.  
[2]
You fix it, and the script works properly.</P
><blockquote class="footnote"><p class="para">[2] We should admit that if you turned on the <b class="emphasis.bold">nounset</B
> option
at the top of this script, the shell would have flagged this error.</P
></BLOCKQUOTE
><p class="para">If the code you are trying to debug calls functions that are defined
elsewhere (e.g., in your <em class="emphasis">.profile</EM
> or environment file), you can
trace through these in the same way with an option to the <b class="emphasis.bold">typeset</B
>
command.  <a class="indexterm" name="AUTOID-15151"></A
><a class="indexterm" name="AUTOID-15155"></A
><a class="indexterm" name="AUTOID-15159"></A
>
Just enter the command <b class="emphasis.bold">typeset -ft</B
> <em class="emphasis">functname</EM
>,
and the named function will be traced whenever it runs. Type
<b class="emphasis.bold">typeset +ft</B
> <em class="emphasis">functname</EM
> to turn tracing off.<a class="indexterm" name="AUTOID-15166"></A
></P
><p class="para"><a class="indexterm" name="KSH-CH-9-IX-OPTIONS-NOEXEC"></A
>The last option is <b class="emphasis.bold">noexec</B
>, which reads in the shell script,
checks for syntax errors, 
but doesn't execute anything. It's worth using
if your script is syntactically complex (lots of loops,
code blocks, string operators, etc.) and the bug
has side effects (like creating a large file
or hanging up the system).</P
><p class="para"><a class="indexterm" name="AUTOID-15173"></A
><a class="indexterm" name="AUTOID-15176"></A
><a class="indexterm" name="AUTOID-15179"></A
><a class="indexterm" name="AUTOID-15182"></A
>You can turn on these options with <b class="emphasis.bold">set -o</B
> in your shell scripts,
and, as explained in <a class="xref" href="ch03_01.htm" webstripperlinkwas="ch03_01.htm" title="Customizing Your Environment">Chapter 3</A
>, turn them off 
with <b class="emphasis.bold">set +o</B
> <em class="emphasis">option</EM
>. For example, if you're debugging a
script with a nasty side effect, and you have localized 
it to a certain chunk of code, you can precede that chunk with
<b class="emphasis.bold">set -o noexec</B
> (and, perhaps, close it with
<b class="emphasis.bold">set +o noexec</B
>) to avoid the side effect.<a class="indexterm" name="AUTOID-15192"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-9-SECT-1.2">9.1.2 Fake Signals</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-9-IX-FAKE-SIGNALS"></A
><a class="indexterm" name="AUTOID-15198"></A
><a class="indexterm" name="AUTOID-15202"></A
><a class="indexterm" name="AUTOID-15206"></A
><a class="indexterm" name="AUTOID-15210"></A
><a class="indexterm" name="KSH-CH-9-IX-TRAPS-TRAPPING-FAKE-SIGNALS"></A
>A more sophisticated set of debugging aids is the shell's three
&quot;fake signals,&quot; which can be used in <b class="emphasis.bold">trap</B
> statements to
get the shell to act under certain conditions. Recall from 
the previous chapter that <b class="emphasis.bold">trap</B
> allows you to install some
code that runs when a particular signal is sent to your script.</P
><p class="para">Fake signals act like real ones, but they are generated by
the shell (as opposed to real signals, which the underlying operating
system generates). They represent runtime events that are likely to
be interesting to debuggers-both human ones and software tools-and
can be treated just like real signals within shell scripts.
The three fake signals and their meanings are listed in 
<a class="xref" href="#KSH-CH-9-TAB-1" title="Fake Signals">Table 9.2</A
>.<a class="indexterm" name="KSH-CH-9-IX-FAKE-SIGNALS-EXIT"></A
><a class="indexterm" name="AUTOID-15224"></A
><a class="indexterm" name="AUTOID-15227"></A
></P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-9-TAB-1">Table 9.2: Fake Signals</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Fake Signal</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">When Sent</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">EXIT</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The shell exits from a function or script</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">ERR</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">A command returns a non-0 exit status</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">DEBUG</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">After every statement</P
></TD
></TR
></TBODY
></TABLE
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-9-SECT-1.2.1">9.1.2.1 EXIT</A
></H4
><p class="para">The EXIT trap, when set, will run its code when the function or
script within which it was set exits.  
Here's a simple example:</P
><p class="para"><blockquote class="screen"><pre class="screen">function func {
    print 'start of the function'
    trap 'print /'exiting from the function/'' EXIT
}

print 'start of the script'
trap 'print /'exiting from the script/'' EXIT
func</PRE
></BLOCKQUOTE
></P
><p class="para">If you run this script, you will see this output:</P
><p class="para"><blockquote class="screen"><pre class="screen">start of the script
start of the function
exiting from the function
exiting from the script</PRE
></BLOCKQUOTE
></P
><p class="para">In other words, the script starts by printing a message. Then
it sets the trap for its own exit, then calls the function.
The function does the same-prints a message and sets a trap for
its exit. (Remember that functions can have their own local
traps that supersede any traps set by the surrounding script.)</P
><p class="para">The function then exits, which causes the shell to send
it the fake signal EXIT, which in turn runs the code <b class="emphasis.bold">print</B
> <code class="literal">'</CODE
>exiting 
from the function<code class="literal">'</CODE
>. Then the script exits, and its own
EXIT trap code is run.</P
><p class="para"><a class="indexterm" name="AUTOID-15264"></A
><a class="indexterm" name="AUTOID-15267"></A
>An EXIT trap occurs no matter how the script or function exits-whether
normally (by finishing the last statement),
by an explicit <b class="emphasis.bold">exit</B
> or <b class="emphasis.bold">return</B
> statement, or by receiving a &quot;real&quot;
signal such as INT or TERM. Consider the following inane number-guessing
program:</P
><p class="para"><blockquote class="screen"><pre class="screen">trap 'print /'Thank you for playing!/'' EXIT

magicnum=$(($RANDOM%10+1))
print 'Guess a number between 1 and 10:'
while read guess'?number&gt; '; do
    sleep 10
    if (( $guess == $magicnum )); then
        print 'Right!'
        exit
    fi
    print 'Wrong!'
done</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-15275"></A
><a class="indexterm" name="AUTOID-15277"></A
>This program picks a number between 1 and 10 by getting a random
number (the built-in variable <b class="emphasis.bold">RANDOM</B
>), extracting the last
digit (the remainder when divided by 10), and adding 1. Then
it prompts you for a guess, and
after 10 seconds, it will tell you if you guessed right.</P
><p class="para">If you did, the program will exit with the message, &quot;Thank
you for playing!&quot;, i.e., it will run the EXIT trap code.
If you were wrong, it will prompt you
again and repeat the process until you get it right.<a class="indexterm" name="AUTOID-15282"></A
>
If you get bored with this little game
and hit <b class="emphasis.bold"><kbd class="keycap">[CTRL-C]</KBD
></B
> while waiting for it to tell you
whether you were right, you will also see the message.<a class="indexterm" name="AUTOID-15286"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-9-SECT-1.2.2">9.1.2.2 ERR</A
></H4
><p class="para"><a class="indexterm" name="KSH-CH-9-IX-FAKE-SIGNALS-ERR"></A
><a class="indexterm" name="KSH-CH-9-IX-EXIT-STATUS-TRAPPING-WHEN-NON-0"></A
>The fake signal ERR enables you to run code whenever a command
in the surrounding script or function exits with non-zero status.<a class="indexterm" name="AUTOID-15296"></A
><a class="indexterm" name="AUTOID-15299"></A
>
Trap code for ERR can take advantage of the built-in
variable <code class="literal">?</CODE
>, which holds the exit status of the previous command.
It &quot;survives&quot; the trap and is accessible at the beginning of the
trap-handling code.</P
><p class="para">A simple but effective use of this is to put the following code
into a script you want to debug:</P
><p class="para"><blockquote class="screen"><pre class="screen">function errtrap {
    es=$?
    print &quot;ERROR: Command exited with status $es.&quot;
}

trap errtrap ERR</PRE
></BLOCKQUOTE
></P
><p class="para">The first line saves the non-zero exit status in the variable <b class="emphasis.bold">es</B
>.
This code enables you to see which command in your script
exits with error status and what the status is.  </P
><p class="para">For example, if the shell can't find a command, it returns status 1.
If you put the code in a script with a line of gibberish
(like &quot;lskdjfafd&quot;), the shell will respond with:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="replaceable"><i>scriptname</I
></CODE
>[<code class="replaceable"><i>N</I
></CODE
>]: lskdjfafd:  not found
ERROR: command exited with status 1.</PRE
></BLOCKQUOTE
></P
><p class="para"><em class="emphasis">N</EM
> is the number of the line in the script that contains
the bad command. In this case, the shell prints the line number
as part of its own error-reporting mechanism, since the error
was a command that the shell could not find. But if the non-0
exit status comes from another program, the shell won't report
the line number. For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">function errtrap {
    es=$?
    print &quot;ERROR: Command exited with status $es.&quot;
}

trap errtrap ERR

function bad {
    return 17
}

bad</PRE
></BLOCKQUOTE
></P
><p class="para">This will only print, <b class="emphasis.bold">ERROR: Command exited with status 17.</B
></P
><p class="para">It would obviously be an improvement to include the line number
in this error message.  <a class="indexterm" name="AUTOID-15320"></A
><a class="indexterm" name="AUTOID-15322"></A
>
The built-in variable LINENO exists,  
but if you use it inside a function,
it evaluates to the line number in the function, not in the overall
file. In other words, if you used <b class="emphasis.bold">$LINENO</B
> in 
the <b class="emphasis.bold">print</B
> statement
in the <b class="emphasis.bold">errtrap</B
> routine, it would always evaluate to 2.</P
><p class="para">To get around this problem, we simply pass <b class="emphasis.bold">$LINENO</B
> as an
argument to the trap handler, surrounding it in single quotes
so that it doesn't get evaluated until the fake signal actually
comes in:</P
><p class="para"><blockquote class="screen"><pre class="screen">function errtrap {
    es=$?
    print &quot;ERROR line $1: Command exited with status $es.&quot;
}
trap 'errtrap $LINENO' ERR
...</PRE
></BLOCKQUOTE
></P
><p class="para">If you use this with the above example, the result is the message,
<b class="emphasis.bold">ERROR line 12: Command exited with status 17.</B
> This is 
much more useful. We'll see a variation on this technique shortly.</P
><p class="para">This simple code is actually not a bad all-purpose debugging
mechanism. It takes into account that a non-0 exit status
does not necessarily indicate an undesirable condition or event:
remember that every control construct with a conditional
(<b class="emphasis.bold">if</B
>, <b class="emphasis.bold">while</B
>, etc.) uses a non-0 exit status to
mean &quot;false&quot;.  Accordingly, the shell doesn't generate ERR traps
when statements or expressions in the &quot;condition&quot; parts of control 
structures produce non-0 exit statuses.</P
><p class="para">But a disadvantage is that exit statuses are not as uniform
(or even as meaningful) as they should be-as we explained in
<a class="xref" href="ch05_01.htm" webstripperlinkwas="ch05_01.htm" title="Flow Control">Chapter 5, Flow Control</A
>. A particular exit status need not 
say anything about the nature of the error or even
that there was an error.  <a class="indexterm" name="AUTOID-15339"></A
><a class="indexterm" name="AUTOID-15340"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-9-SECT-1.2.3">9.1.2.3 DEBUG</A
></H4
><p class="para"><a class="indexterm" name="KSH-CH-9-IX-FAKE-SIGNALS-DEBUG"></A
><a class="indexterm" name="KSH-CH-9-IX-TRAPS-AFTER-EVERY-STATEMENT"></A
>The final fake signal, DEBUG, causes the trap code to be run after
every statement in the surrounding function or script.
This has two possible uses. First is the use for humans, as a
sort of a &quot;brute force&quot; method of tracking a certain element of
a program's state that you notice is going awry.</P
><p class="para">For example, you notice that the value of a particular variable
is running amok. The naive approach would be to put in lots of
<em class="emphasis">print</EM
> statements to check the variable's value at several
points. The DEBUG trap makes this easier by letting you do
this:</P
><p class="para"><blockquote class="screen"><pre class="screen">function dbgtrap {
    print &quot;<em class="emphasis">badvar</EM
>  is $<em class="emphasis">badvar</EM
> &quot;
}

trap dbgtrap DEBUG

...<em class="emphasis">section of code in which problem occurs...</EM
> 

trap - DEBUG		# turn off DEBUG trap&#13;</PRE
></BLOCKQUOTE
></P
><p class="para">This code will print the value of the wayward variable after every
statement between the two <b class="emphasis.bold">trap</B
>s.</P
><p class="para">The second and far more important use of the DEBUG trap is as
a primitive for implementing Korn shell debuggers. In fact, it would
be fair to say that the DEBUG trap reduces the task of implementing
a useful shell debugger from a large-scale software development 
project to a manageable exercise. Read on.<a class="indexterm" name="AUTOID-15360"></A
><a class="indexterm" name="AUTOID-15361"></A
><a class="indexterm" name="AUTOID-15362"></A
><a class="indexterm" name="AUTOID-15363"></A
></P
></DIV
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_06.htm" webstripperlinkwas="ch08_06.htm" title="8.6 Subshells"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.6 Subshells" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch09_02.htm" webstripperlinkwas="ch09_02.htm" title="9.2 A Korn Shell Debugger"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 9.2 A Korn Shell Debugger" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.6 Subshells</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">9.2 A Korn Shell Debugger</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
