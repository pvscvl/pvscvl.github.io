<html><head>
<title>[Chapter 5] 5.2 for</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:09:00Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch05_01.htm" webstripperlinkwas="ch05_01.htm" title="5. Flow Control"><link rel="prev" href="ch05_01.htm" webstripperlinkwas="ch05_01.htm" title="5.1 if/else"><link rel="next" href="ch05_03.htm" webstripperlinkwas="ch05_03.htm" title="5.3 case"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch05_01.htm" webstripperlinkwas="ch05_01.htm" title="5.1 if/else"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 5.1 if/else" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 5<br>Flow Control</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch05_03.htm" webstripperlinkwas="ch05_03.htm" title="5.3 case"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 5.3 case" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="KSH-CH-5-SECT-2">5.2 for</A
></H2
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-FOR"></A
>The most obvious enhancement we could make to the previous script
is the ability to report on multiple files instead of just one.
Tests like <b class="emphasis.bold">-a</B
> and <b class="emphasis.bold">-d</B
> only take single
arguments, so we need a way of calling the code once for each file
given on the command line.</P
><p class="para">The way to do this-indeed, the way to do many things
with the Korn shell-is with a looping construct.  
The simplest and most widely
applicable of the shell's looping constructs is the
<b class="emphasis.bold">for</B
> loop. We'll use <b class="emphasis.bold">for</B
> to enhance <em class="emphasis">fileinfo</EM
> soon.</P
><p class="para"><a class="indexterm" name="AUTOID-8460"></A
>The <b class="emphasis.bold">for</B
> loop allows you to repeat a section of code a fixed
number of times. During each time through the code (known as an
<em class="emphasis">iteration</EM
>), a special variable called a <em class="emphasis">loop variable</EM
> is
set to a different value; this way each iteration can do something
slightly different.</P
><p class="para"><a class="indexterm" name="AUTOID-8467"></A
><a class="indexterm" name="AUTOID-8470"></A
><a class="indexterm" name="AUTOID-8472"></A
>The <b class="emphasis.bold">for</B
> loop is somewhat, but not entirely,
similar to its counterparts in conventional languages like C and Pascal.
The chief difference is that the shell's <b class="emphasis.bold">for</B
> loop doesn't let
you specify a number of times to iterate or a
range of values over which to iterate; instead, it
only lets you give a fixed list of values. In other words,
you can't do anything like this Pascal-type code, which executes
<em class="emphasis">statements</EM
> 10 times:</P
><p class="para"><blockquote class="screen"><pre class="screen">for x := 1 to 10 do
begin
    <em class="emphasis">statements...</EM
>
end</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-8481"></A
>(You need the <b class="emphasis.bold">while</B
> construct, which we'll see soon, to
construct this type of loop. You also need the ability to do integer
arithmetic, which we will see in <a class="xref" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm" title="Command-line Options and Typed Variables">Chapter 6, Command-line Options and Typed Variables</A
>.)</P
><p class="para">However, the <b class="emphasis.bold">for</B
> loop is ideal for working with
arguments on the command line and with sets of
files (e.g., all files in a given directory). We'll look at an
example of each of these.  <a class="indexterm" name="AUTOID-8487"></A
>
But first, we'll show the syntax for the <b class="emphasis.bold">for</B
> construct:</P
><p class="para"><blockquote class="screen"><pre class="screen">for <code class="replaceable"><i>name</I
></CODE
> [in <code class="replaceable"><i>list</I
></CODE
>]
do
    <code class="replaceable"><i>statements that can use</I
></CODE
> $name...
done</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-8497"></A
><a class="indexterm" name="AUTOID-8500"></A
><a class="indexterm" name="AUTOID-8504"></A
>The <em class="emphasis">list</EM
> is a list of names. (If <b class="emphasis.bold">in</B
> <em class="emphasis">list</EM
> is omitted,
the list defaults to <code class="literal">&quot;</CODE
>$@<code class="literal">&quot;</CODE
>, i.e., the quoted list of command-line
arguments, but we'll always supply the <b class="emphasis.bold">in</B
> <em class="emphasis">list</EM
> 
for the
sake of clarity.)  
In our solutions to the following task, we'll show two simple ways to
specify lists. </P
><div class="task"><h4>Task 5.2</H4
><blockquote class="taskinfo"><p class="para">You work in an environment with several computers in a local network.
Write a shell script that tells you who is logged in
to each machine on the network.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-FINGER"></A
>The command <em class="emphasis">finger</EM
>(1) can be used (among other things)
to find the names of users logged into a remote system; the command
<b class="emphasis.bold">finger @</B
><em class="emphasis">systemname</EM
> does this. Its output depends on
the version of UNIX, but it looks something like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">[motet.early.com]
Trying 127.146.63.17...
-User-    -Full name-       -What- Idle TTY -Console Location-
hildy    Hildegard von Bingen  ksh   2d5h p1  jem.cal (Telnet)
mikes    Michael Schultheiss   csh   1:21 r4  ncd2.cal (X display 0)
orlando  Orlando di Lasso      csh     28 r7  maccala (Telnet)
marin    Marin Marais          mush  1:02 pb  mussell.cal (Telnet)
johnd    John Dowland          tcsh    17 p0  nugget.west.nobis. (X Window)</PRE
></BLOCKQUOTE
></P
><p class="para">In this output, <em class="emphasis">motet.early.com</EM
> is the full network name of the remote
machine.</P
><p class="para">Assume the systems in your network are called <em class="emphasis">fred</EM
>, <em class="emphasis">bob</EM
>, <em class="emphasis">dave</EM
>, and <em class="emphasis">pete</EM
>.
Then the following code would do the trick:</P
><p class="para"><blockquote class="screen"><pre class="screen">for sys in fred bob dave pete
do
    finger @$sys
    print
done</PRE
></BLOCKQUOTE
></P
><p class="para">This works no matter which of the systems you are currently logged into.
It prints output for each machine similar to the above, with blank
lines in between.</P
><p class="para">A slightly better solution would be to store the names of the systems
in an environment variable.
This way, if systems are added to your network and you
need a list of their names in more than one script, you need change
them in only one place. If a variable's value is several words separated
by blanks (or TABS), <b class="emphasis.bold">for</B
> will treat it as a list of words.</P
><p class="para">Here is the improved solution. First, put lines in your
<em class="emphasis">.profile</EM
> or environment file
that define the variable <b class="emphasis.bold">SYSNAMES</B
> and make
it an environment variable:</P
><p class="para"><blockquote class="screen"><pre class="screen">SYSNAMES=&quot;fred bob dave pete&quot;
export SYSNAMES</PRE
></BLOCKQUOTE
></P
><p class="para">Then, the script can look like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">for sys in $SYSNAMES
do
    finger @$sys
    print
done</PRE
></BLOCKQUOTE
></P
></DIV
><p class="para"><a class="indexterm" name="AUTOID-8547"></A
>The foregoing illustrated a simple use of <b class="emphasis.bold">for</B
>, but it's much more common to use <b class="emphasis.bold">for</B
> to iterate through a list of  command-line arguments.  
To show this, we can enhance the <em class="emphasis">fileinfo</EM
> script above to
accept multiple arguments. First, we write a bit of &quot;wrapper&quot;
code that does the iteration:</P
><p class="para"><blockquote class="screen"><pre class="screen">for filename in &quot;$@&quot; ; do
    finfo $filename
    print
done</PRE
></BLOCKQUOTE
></P
><p class="para">Next, we make the original script into a function called <em class="emphasis">finfo</EM
>:
[11]<a class="indexterm" name="AUTOID-8557"></A
><a class="indexterm" name="AUTOID-8561"></A
><a class="indexterm" name="AUTOID-8565"></A
><a class="indexterm" name="AUTOID-8569"></A
><a class="indexterm" name="AUTOID-8573"></A
><a class="indexterm" name="AUTOID-8577"></A
><a class="indexterm" name="AUTOID-8581"></A
>
<blockquote class="screen"><pre class="screen">function finfo {
    if [[ ! -a $1 ]]; then
        print &quot;file $1 does not exist.&quot;
        return 1
    fi
    ...
}</PRE
></BLOCKQUOTE
></P
><blockquote class="footnote"><p class="para">[11] A function can have the same name as a script; however, this
isn't good programming practice.</P
></BLOCKQUOTE
><p class="para">The complete script consists of the <b class="emphasis.bold">for</B
> loop code and
the above function, in either order; good programming style
dictates that the function definition should go first.</P
><p class="para">The <em class="emphasis">fileinfo</EM
> script works as follows: in the <b class="emphasis.bold">for</B
> statement,
<code class="literal">&quot;</CODE
><b class="emphasis.bold">$@</B
><code class="literal">&quot;</CODE
> is a list of all positional parameters.
For each argument, the body of the loop is run
with <b class="emphasis.bold">filename</B
> set to that argument. In other words,
the function <em class="emphasis">fileinfo</EM
> is called once for
each value of <b class="emphasis.bold">$filename</B
> as its first argument (<b class="emphasis.bold">$1</B
>).
The call to <em class="emphasis">print</EM
> after the call to <em class="emphasis">fileinfo</EM
> merely
prints a blank line between sets of information about each file.</P
><p class="para">Given a directory with the same files as the previous example,
typing <b class="emphasis.bold">fileinfo *</B
> would produce the following output:</P
><p class="para"><blockquote class="screen"><pre class="screen">bob is a regular file.
you own the file.
you have read permission on the file.
you have write permission on the file.
you have execute permission on the file.

custom.tbl is a regular file.
you own the file.
you have read permission on the file.
you have write permission on the file.

exp is a directory that you may search.
you own the file.
you have read permission on the file.
you have write permission on the file.

lpst is a regular file.
you do not own the file.
you have read permission on the file.</PRE
></BLOCKQUOTE
></P
><p class="para">Here is a programming task that exploits the other major
use of <b class="emphasis.bold">for</B
>.<a class="indexterm" name="AUTOID-8606"></A
></P
><div class="task"><h4>Task 5.3</H4
><blockquote class="taskinfo"><p class="para">Your UNIX system has the ability to transfer files from an <span class="acronym">MS-DOS</SPAN
> system,
but it leaves the <span class="acronym">DOS</SPAN
> filenames intact. Write a script that
translates the filenames in a given directory
from <span class="acronym">DOS</SPAN
> format to a more UNIX-friendly format.</P
></BLOCKQUOTE
><p class="para"><span class="acronym">DOS</SPAN
> filenames have the format <em class="emphasis">FILENAME.<span class="acronym">EXT</SPAN
></EM
>. <em class="emphasis"><span class="acronym">FILENAME</SPAN
></EM
>
can be up to eight characters long;
<em class="emphasis"><span class="acronym">EXT</SPAN
></EM
> is an extension that can be up to three characters.
The dot is required even if the extension is null;
letters are all uppercase. We want to do the following:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Translate letters from uppercase to lowercase.</P
></LI
><li class="listitem"><p class="para">If the extension is null, remove the dot.</P
></LI
></OL
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-TR"></A
>The first tool we will need for this job is the UNIX <em class="emphasis">tr</EM
>(1)
utility, which translates characters on a one-to-one basis.
Given the arguments <em class="emphasis">charset1</EM
> and <em class="emphasis">charset2</EM
>, it will
translate characters in the standard input that are members of
<em class="emphasis">charset1</EM
> into corresponding characters in <em class="emphasis">charset2</EM
>.
The two sets are ranges of characters enclosed in square brackets (<b class="emphasis.bold">[]</B
>
in standard regular-expression form in the manner of <em class="emphasis">grep</EM
>, <em class="emphasis">awk</EM
>,
<em class="emphasis">ed</EM
>, etc.). More to the point, <b class="emphasis.bold">tr [A-Z] [a-z]</B
> takes
its standard input, converts uppercase letters to lowercase,
and writes the converted text to the standard output.</P
><p class="para">That takes care of the first step in the translation process.
We can use a Korn shell string operator to handle the second.
Here is the code for a script we'll call <em class="emphasis">dosmv</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">for filename in ${1:+$1/}* ; do
    newfilename=$(print $filename | tr [A-Z] [a-z])
    newfilename=${newfilename%.}
    print &quot;$filename -&gt; $newfilename&quot;
    mv $filename $newfilename
done</PRE
></BLOCKQUOTE
></P
><p class="para">The * in the <b class="emphasis.bold">for</B
> construct is <em class="emphasis">not</EM
> the same
as <b class="emphasis.bold">$</B
>*. It's a wildcard, i.e., all files in a directory.</P
><p class="para">This script accepts
a directory name as argument, the default being the current
directory.  <a class="indexterm" name="AUTOID-8649"></A
><a class="indexterm" name="AUTOID-8652"></A
>
The expression <b class="emphasis.bold">${1:+$1/}</B
> evaluates to the
argument (<b class="emphasis.bold">$1</B
>) with a slash appended if the argument is
supplied, or the null string if it isn't supplied.
So the entire expression <b class="emphasis.bold">${1:+$1/}*</B
> evaluates
to all files in the given directory, or all files in
the current directory if no argument is given.</P
><p class="para">Therefore, <b class="emphasis.bold">filename</B
> takes on the value of each filename
in the list. <b class="emphasis.bold">filename</B
> gets translated into <b class="emphasis.bold">newfilename</B
>
in two steps. (We could have done it in one, but readability would
have suffered.) The first step uses <em class="emphasis">tr</EM
> in a pipeline within
a command substitution construct. Our old friend <b class="emphasis.bold">print</B
> 
makes the value of <b class="emphasis.bold">filename</B
> the standard input to <em class="emphasis">tr</EM
>.
<em class="emphasis">tr</EM
>'s output becomes the value of the command substitution
expression, which is assigned to <b class="emphasis.bold">newfilename</B
>. Thus, if
<b class="emphasis.bold">$filename</B
> were <em class="emphasis">DOSFILE.<span class="acronym">TXT</SPAN
></EM
>, <b class="emphasis.bold">newfilename</B
> would become
<em class="emphasis">dosfile.txt</EM
>.<a class="indexterm" name="AUTOID-8673"></A
></P
><p class="para"><a class="indexterm" name="AUTOID-8675"></A
><a class="indexterm" name="AUTOID-8678"></A
>The second step uses one of the shell's pattern-matching operators,
the one that deletes the shortest match it finds at the end of the
string. The pattern here is <code class="literal">.,</CODE
> which means a dot at the end of
the string.
[12]
This means that the expression <b class="emphasis.bold">${newfilename%.}</B
> will
delete a dot from <b class="emphasis.bold">$newfilename</B
> only if it's at the end of
the string; otherwise the expression will leave <b class="emphasis.bold">$newfilename</B
>
intact. For example, if <b class="emphasis.bold">$newfilename</B
> is <em class="emphasis">dosfile.txt</EM
>,
it will be untouched, but if it's <em class="emphasis">dosfile.</EM
>, the expression will
change it to <em class="emphasis">dosfile</EM
> without the final dot. In either case,
the new value is assigned back to <em class="emphasis">newfilename</EM
>.</P
><blockquote class="footnote"><p class="para">[12] UNIX regular expression mavens should remember that this is
shell wildcard syntax, in which dots are not operators and therefore
do not need to be backslash-escaped.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-8693"></A
>The last statement in the <b class="emphasis.bold">for</B
> loop body does the file
renaming with the standard UNIX <em class="emphasis">mv</EM
>(1) command. Before that,
a <b class="emphasis.bold">print</B
> command simply informs the user of what's happening.</P
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-MS-DOS"></A
>There is one little problem with the solution on the previous page: if there are any files in
the given directory that <em class="emphasis">aren't</EM
> DOS files (in particular,
if there are files whose names don't contain uppercase letters and
don't contain a dot), then the conversion will do nothing to those
filenames and <em class="emphasis">mv</EM
> will be called with two identical arguments.
<em class="emphasis">mv</EM
> will complain with the message: <b class="emphasis.bold">mv: filename and</B
>
<em class="emphasis">filename</EM
><b class="emphasis.bold"> are identical</B
>.  <a class="indexterm" name="KSH-CH-5-IX-GREP"></A
>
We can solve this problem by letting <em class="emphasis">grep</EM
> determine whether
each file has a DOS filename or not. The <em class="emphasis">grep</EM
> regular
expression:</P
><p class="para"><blockquote class="screen"><pre class="screen">[^a-z]\{1,8\}\.[^a-z]\{0,3\}</PRE
></BLOCKQUOTE
></P
><p class="para">is adequate (for
these purposes) for matching DOS-format filenames.  
[13]
The character class
<b class="emphasis.bold">[^a-z]</B
> means &quot;any character <em class="emphasis">except</EM
> a lowercase letter.&quot;
[14]
So the entire regular
expression means: &quot;Between 1 and 8 non-lowercase letters,
followed by a dot, followed by 0 to 3 non-lowercase letters.&quot;</P
><blockquote class="footnote"><p class="para">[13] As with the <b class="emphasis.bold">lsd</B
> function in <a class="xref" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="Basic Shell Programming">Chapter 4, Basic Shell Programming</A
> older BSD-derived versions of
UNIX don't support the &quot;repeat count&quot; operator within <em class="emphasis">grep</EM
>.
You must use this instead:</P
><p class="para"><blockquote class="screen"><pre class="screen">[^a-z][^a-z]?[^a-z]?[^a-z]?[^a-z]?[^a-z]?[^a-z]?[^a-z]?\.[^a-z]?[^a-z]?[^a-z]?</PRE
></BLOCKQUOTE
></P
><p class="para">[14] To be completely precise, this class also excludes NEWLINEs.</P
></BLOCKQUOTE
><p class="para">When <em class="emphasis">grep</EM
> runs, it normally prints all of the lines in its standard
input that match the pattern you give it as argument. But we only
need it to test whether or not the pattern is matched. Luckily,
<em class="emphasis">grep</EM
>'s exit status is &quot;well-behaved&quot;: it's 0 if there is a
match in the input, 1 if not. Therefore, we can
use the exit status to test for a match.  <a class="indexterm" name="AUTOID-8728"></A
>
We also need to discard
<em class="emphasis">grep</EM
>'s output; to do this, we redirect it to the special
file <em class="emphasis">/dev/null</EM
>, which is colloquially known as the &quot;bit 
bucket.&quot;
[15]
Any output directed to <em class="emphasis">/dev/null</EM
> effectively disappears.
Thus, the command line:
<blockquote class="screen"><pre class="screen">print &quot;$filename&quot; | grep '[^a-z]\{1,8\}\.[^a-z]\{0,3\}' &gt; /dev/null</PRE
></BLOCKQUOTE
></P
><blockquote class="footnote"><p class="para">[15] Some Berkeley-derived versions of UNIX have a -s (&quot;silent&quot;)
option to <em class="emphasis">grep</EM
> that suppresses standard output, thereby making
redirection to <em class="emphasis">/dev/null</EM
> unnecessary.</P
></BLOCKQUOTE
><p class="para">prints nothing and
returns exit status 0 if the filename is in DOS format, 1 if not.</P
><p class="para">Now we can modify our <em class="emphasis">dosmv</EM
> script to incorporate this code:</P
><p class="para"><blockquote class="screen"><pre class="screen">dos_regexp='[^a-z]\{1,8\}\.[^a-z]\{0,3\}'
for filename in ${1:+$1/}* ; do
if print $filename | grep $dos_regexp &gt; /dev/null; then
newfilename=$(print $filename | tr [A-Z] [a-z])
newfilename=${newfilename%.}
print &quot;$filename -&gt; $newfilename&quot;
mv $filename $newfilename
fi
done</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-8744"></A
>For readability reasons, we use the variable <b class="emphasis.bold">dos_regexp</B
> to hold
the DOS filename-matching regular expression.</P
><p class="para">If you are familiar with an operating system other than DOS and UNIX,
you may want to test your script-writing prowess at this point by
writing a script that translates filenames from that system's format
into UNIX format. Use the above script as a guideline.<a class="indexterm" name="AUTOID-8747"></A
></P
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-VAX-VMS"></A
>In particular, if you know DEC's VAX/VMS operating system,
here's a programming challenge:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Write a script called <em class="emphasis">vmsmv</EM
> that is similar to <em class="emphasis">dosmv</EM
>
but works on VAX/VMS filenames instead of DOS filenames.
Remember that VAX/VMS filenames end with semicolons and version
numbers.</P
></LI
><li class="listitem"><p class="para">Modify your script so that if
there are several versions of the same file, it renames only the
latest version (with the highest version number).</P
></LI
><li class="listitem"><p class="para">Modify further so that your script erases old versions of files.</P
></LI
></OL
><p class="para">The first of these is a relatively straightforward modification
of <em class="emphasis">dosmv</EM
>. Number 2 is difficult; here's a strategy hint:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Develop a regular expression that matches VAX/VMS filenames
(you need this for No. 1 anyway).</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8767"></A
><a class="indexterm" name="AUTOID-8769"></A
><a class="indexterm" name="AUTOID-8771"></A
>Get a list of base names (sans version numbers) of files
in the given directory by piping <em class="emphasis">ls</EM
> through <em class="emphasis">grep</EM
>
(with the above regular expression),
<em class="emphasis">cut</EM
>, and <em class="emphasis">sort -u</EM
>. Use <em class="emphasis">cut</EM
> with
a semicolon as &quot;field separator&quot;; make sure that you quote the
semicolon so that the shell doesn't treat it as a statement separator.
<em class="emphasis">sort -u</EM
> removes duplicates
after sorting. Use command substitution to
save the resulting list in a variable.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8781"></A
>Use a <b class="emphasis.bold">for</B
> loop on the list of base names.
For each name, get the highest version number
of the file (just the number, not the whole name).  
Do this with another pipeline:
pipe <em class="emphasis">ls</EM
> through <em class="emphasis">cut</EM
>, <em class="emphasis">sort -n</EM
>, and <em class="emphasis">tail -1</EM
>.
<em class="emphasis">sort -n</EM
> sorts in numerical (not lexicographical) order;
<em class="emphasis">tail -N</EM
> outputs 
the last <em class="emphasis">N</EM
> lines of its input.
Again, use command substitution to capture the output of this
pipeline in a variable.</P
></LI
><li class="listitem"><p class="para">Append the highest version number to the base name; this is the
file to rename in UNIX format.</P
></LI
></UL
><p class="para">Once you have completed No. 2, you can do No. 3 by adding a single
line of code to your script; see if you can figure out how.<a class="indexterm" name="AUTOID-8794"></A
><a class="indexterm" name="AUTOID-8795"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch05_01.htm" webstripperlinkwas="ch05_01.htm" title="5.1 if/else"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 5.1 if/else" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch05_03.htm" webstripperlinkwas="ch05_03.htm" title="5.3 case"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 5.3 case" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.1 if/else</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.3 case</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
