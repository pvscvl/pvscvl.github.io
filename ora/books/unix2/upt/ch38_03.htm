<html><head><title>[Chapter 38] 38.3 Managing Processes: Overall Concepts </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:49:30Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch38_01.htm" webstripperlinkwas="ch38_01.htm" title="38. Starting, Stopping, and Killing Processes"><link rel="prev" href="ch38_02.htm" webstripperlinkwas="ch38_02.htm" title="38.2 fork and exec "><link rel="next" href="ch38_04.htm" webstripperlinkwas="ch38_04.htm" title="38.4 Subshells "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch38_02.htm" webstripperlinkwas="ch38_02.htm" title="38.2 fork and exec "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 38.2 fork and exec " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 38<br>Starting, Stopping, and Killing Processes</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch38_04.htm" webstripperlinkwas="ch38_04.htm" title="38.4 Subshells "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 38.4 Subshells " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-1870">38.3 Managing Processes: Overall Concepts </A
></H2
><p class="para"><a class="indexterm" name="UPT-ART-1870-IX-PROCESSES-MANAGING"></A
><a class="indexterm" name="AUTOID-42234"></A
><a class="indexterm" name="AUTOID-42237"></A
><a class="indexterm" name="AUTOID-42239"></A
>As you know, when you log into your UNIX account and
start typing, you're talking to the
<span class="link"><b class="emphasis.bold">shell</B
> (<a class="linkend" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm#UPT-ART-1810" title="What the Shell Does ">8.1</A
>)</SPAN
>.
The shell you use may be a variant of the
Bourne shell (such as a standard <em class="emphasis">sh</EM
>, or <em class="emphasis">ksh</EM
> or the GNU
shell <em class="emphasis">bash</EM
>), or perhaps it is a variant of the C shell,
<em class="emphasis">csh</EM
> (such as, perhaps, the <em class="emphasis">tcsh</EM
> shell that includes
line- and history-editing features). Alternatively, you may be using
a somewhat less common shell such as <em class="emphasis">rc</EM
>.</P
><p class="para">Your shell is a <b class="emphasis.bold">process</B
>, one of many individual programs running
at the same time on the machine. Every process has certain pieces of
information associated with it, including:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-42254"></A
>The <b class="emphasis.bold">process ID</B
> (PID) is a number assigned to the process when it is
started up. Process IDs are unique (that is, they cycle and are
eventually re-used, but no two processes have the same process ID at
the same time).</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-42259"></A
><a class="indexterm" name="AUTOID-42261"></A
><a class="indexterm" name="AUTOID-42264"></A
>The <b class="emphasis.bold">user ID</B
> (UID) tells who the process belongs to. This determines
<span class="link"> what files and directories the process is allowed to read from or write to, (<a class="linkend" href="ch22_01.htm" webstripperlinkwas="ch22_01.htm#UPT-ART-5010" title="Introduction to File Ownership and Security ">22.1</A
>)</SPAN
>
as well as who is allowed to
<span class="link"><em class="emphasis">kill</EM
> the process (<a class="linkend" href="ch38_10.htm" webstripperlinkwas="ch38_10.htm" title="Destroying Processes with kill ">38.10</A
>)</SPAN
>
(tell it to stop running).</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-42273"></A
>The <b class="emphasis.bold">group ID</B
> (GID) is similar to the user ID, but tells which
group the process belongs to.
On some systems, this controls the group
assigned to files created by the process.
See articles
<a class="xref" href="ch22_05.htm" webstripperlinkwas="ch22_05.htm" title="Group Permissions in a Directory with the setgid Bit ">22.5</A
>,
<a class="xref" href="ch22_13.htm" webstripperlinkwas="ch22_13.htm" title="Groups and Group Ownership ">22.13</A
>,
and
<a class="xref" href="ch22_02.htm" webstripperlinkwas="ch22_02.htm" title="Tutorial on File and Directory Permissions ">22.2</A
>.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-42281"></A
>The <b class="emphasis.bold">environment</B
> contains a list of variables and associated
values. For example, when you type <code class="literal">echo</CODE
> <code class="literal">$HOME</CODE
>
at the shell and it prints out the name of your
<span class="link">home directory (<a class="linkend" href="ch01_20.htm" webstripperlinkwas="ch01_20.htm" title="Your Home Directory ">1.20</A
>)</SPAN
>,
it has
told you the contents of the
<span class="link"><b class="emphasis.bold">environment variable</B
> (<a class="linkend" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm#UPT-ART-1170" title="What Environment Variables Are Good For ">6.1</A
>)</SPAN
>
called <em class="emphasis">HOME</EM
>.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-42292"></A
><a class="indexterm" name="AUTOID-42294"></A
>The
<span class="link"><b class="emphasis.bold">current working directory</B
> (<a class="linkend" href="ch14_03.htm" webstripperlinkwas="ch14_03.htm" title="What Good Is a Current Directory? ">14.3</A
>)</SPAN
>
is the directory
that is currently the default. When you specify a
filename to a program but do not say explicitly where to look for
it [with a
<span class="link">pathname (<a class="linkend" href="ch14_02.htm" webstripperlinkwas="ch14_02.htm" title="Using Relative and Absolute Pathnames ">14.2</A
>)</SPAN
>
<em class="emphasis">-JP</EM
> ], the program will look in the current working
directory-if the <em class="emphasis">PATH</EM
> variable contains the current directory
(article
<a class="xref" href="ch06_04.htm" webstripperlinkwas="ch06_04.htm" title="The PATH Environment Variable ">6.4</A
>
explains).</P
></LI
><li class="listitem"><p class="para"><b class="emphasis.bold">File descriptors</B
> are a record of which files a process has
opened for reading or writing, as well as the current position in
each file.<a class="indexterm" name="AUTOID-42306"></A
>
Articles
<a class="xref" href="ch45_20.htm" webstripperlinkwas="ch45_20.htm" title="Overview: Open Files and File Descriptors ">45.20</A
>
through
<a class="xref" href="ch45_23.htm" webstripperlinkwas="ch45_23.htm" title="The Ins and Outs of Redirected I/O Loops ">45.23</A
>
explain file descriptor use in the Bourne shell.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-42312"></A
><a class="indexterm" name="AUTOID-42314"></A
>Versions of UNIX with
<span class="link">job control (<a class="linkend" href="ch12_08.htm" webstripperlinkwas="ch12_08.htm" title="Job Control in a Nutshell ">12.8</A
>)</SPAN
>
have <b class="emphasis.bold">process groups</B
>.
A process group is used for
<span class="link">distribution of signals (<a class="linkend" href="ch38_08.htm" webstripperlinkwas="ch38_08.htm" title="What Are Signals? ">38.8</A
>, <a class="linkend" href="ch38_09.htm" webstripperlinkwas="ch38_09.htm" title="Killing Foreground Jobs ">38.9</A
>, <a class="linkend" href="ch38_12.htm" webstripperlinkwas="ch38_12.htm" title="Killing All Your Processes ">38.12</A
>)</SPAN
>.
It's also used to control which process can read from a terminal.
A process that has the same process group as the terminal is
&quot;in the foreground&quot; and can read from the terminal.
Other processes are stopped when they try to read from the terminal.</P
></LI
></UL
><p class="para"><a class="indexterm" name="AUTOID-42321"></A
><a class="indexterm" name="AUTOID-42323"></A
>When you're typing commands at the shell, it is the <b class="emphasis.bold">controlling
process</B
> of your terminal, meaning that it (the shell) is the process that
gets the input you type.
See article
<a class="xref" href="ch38_06.htm" webstripperlinkwas="ch38_06.htm" title="The Controlling Terminal ">38.6</A
>.</P
><p class="para"><a class="indexterm" name="AUTOID-42329"></A
><a class="indexterm" name="AUTOID-42332"></A
><a class="indexterm" name="AUTOID-42335"></A
><a class="indexterm" name="AUTOID-42338"></A
><a class="indexterm" name="AUTOID-42340"></A
>Normally, when you type a command at the shell prompt, that command runs and
is allowed by the shell to take over the terminal for its lifetime.
For example, if you type <code class="literal">more</CODE
> <code class="literal">.login</CODE
> to view your <em class="emphasis">.login</EM
>
file, the shell starts up the
<span class="link"><em class="emphasis">more</EM
> (<a class="linkend" href="ch25_03.htm" webstripperlinkwas="ch25_03.htm" title="Using more to Page Through Files ">25.3</A
>)</SPAN
>
program and then sits around waiting
for it to finish; while <em class="emphasis">more</EM
> is running, you can type commands to
page through the file and <em class="emphasis">more</EM
> (not the shell) will see them.
The command you run is called a <b class="emphasis.bold">child</B
> or <b class="emphasis.bold">subprocess</B
> of the
shell process, which is its <b class="emphasis.bold">parent</B
>.
All process information (user ID, group ID, etc.) is inherited by the child
from its parent, except for the process ID, since the child is assigned a
new one.
[
<span class="link">Built-in shell commands (<a class="linkend" href="ch01_10.htm" webstripperlinkwas="ch01_10.htm" title="Internal and External Commands ">1.10</A
>)</SPAN
>
like <em class="emphasis">cd</EM
> don't start a child process. <em class="emphasis">-JP</EM
> ]</P
><p class="para"><a class="indexterm" name="AUTOID-42357"></A
>Although the normal behavior is for the shell to wait until any
command you run has finished before it becomes active again, there are
some situations in which you don't want this to occur. For example,
if you're using a window system such as
<span class="link">X (<a class="linkend" href="ch01_31.htm" webstripperlinkwas="ch01_31.htm" title="The X Window System ">1.31</A
>)</SPAN
>
and
want to start up a new <em class="emphasis">xterm</EM
> window from your shell, you don't
want to type just <code class="literal">xterm</CODE
>, because then your original shell will
wait until the <em class="emphasis">xterm</EM
> finishes before allowing you to type any more
commands. This would mean that you still have only one shell to work
in, thus defeating the purpose of starting the new <em class="emphasis">xterm</EM
>.</P
><p class="para"><a class="indexterm" name="AUTOID-42366"></A
><a class="indexterm" name="AUTOID-42368"></A
><a class="indexterm" name="AUTOID-42371"></A
><a class="indexterm" name="AUTOID-42374"></A
><a class="indexterm" name="AUTOID-42377"></A
><a class="indexterm" name="AUTOID-42379"></A
>When you don't want a process to finish before getting back to the
shell, you can run it in the
<span class="link"><b class="emphasis.bold">background</B
> (<a class="linkend" href="ch01_26.htm" webstripperlinkwas="ch01_26.htm" title="What a Multiuser System Can Do for You ">1.26</A
>)</SPAN
>.
You do this by putting
an ampersand (<code class="literal">&amp;</CODE
>) character at the end of the command, for example,
<code class="literal">xterm</CODE
> <code class="literal">&amp;</CODE
>. The shell will start the child process and then
immediately
prompt you for another command. Note that in this situation, the
shell retains control of the terminal and the newly created background
process cannot read input. Some shells have additional
<span class="link"><b class="emphasis.bold">job control</B
> (<a class="linkend" href="ch12_08.htm" webstripperlinkwas="ch12_08.htm" title="Job Control in a Nutshell ">12.8</A
>)</SPAN
>
features (processes that are running in the background are
often described as <b class="emphasis.bold">background jobs</B
> or just jobs) that enable
you to do things such as kill jobs or bring a job from the background
into the <b class="emphasis.bold">foreground</B
> so that it becomes the controlling process of
the terminal and you can type input at it.</P
><p class="para"><a class="indexterm" name="AUTOID-42391"></A
>An important thing to remember is that although process information is
inherited by children <em class="emphasis">when they are started</EM
>, it is impossible for
the parent to affect its child's process information (or vice versa)
after that point. For example, if you
<span class="link">start up the editor <em class="emphasis">vi</EM
>, suspend it (<a class="linkend" href="ch12_04.htm" webstripperlinkwas="ch12_04.htm" title="Job Control and autowrite: Real Time Savers! ">12.4</A
>)</SPAN
>,
and then use the <em class="emphasis">cd</EM
> command in the shell to change directories,
<em class="emphasis">vi</EM
> will still have the old working directory when you bring it
back into the foreground.  Similarly, if you write a shell script that
changes some environment variables, those variables will contain their
old values in the shell when the shell script exits. This sometimes
confuses MS-DOS users, since information such as the current
directory is stored in a global area which is referenced by all
programs. If it is necessary to communicate information from a child
back to a parent shell,
<span class="link"> other methods are needed . (<a class="linkend" href="ch38_08.htm" webstripperlinkwas="ch38_08.htm" title="What Are Signals? ">38.8</A
>, <a class="linkend" href="ch44_23.htm" webstripperlinkwas="ch44_23.htm" title="Reading Files with the . and source Commands ">44.23</A
>)</SPAN
></P
><p class="para">[One more concept that I think is useful: When a process exits, it
returns a numeric
<span class="link">exit status (<a class="linkend" href="ch44_07.htm" webstripperlinkwas="ch44_07.htm" title="Exit Status of UNIX Processes ">44.7</A
>)</SPAN
><a class="indexterm" name="AUTOID-42402"></A
><a class="indexterm" name="AUTOID-42404"></A
><a class="indexterm" name="AUTOID-42407"></A
><a class="indexterm" name="AUTOID-42410"></A
><a class="indexterm" name="AUTOID-42413"></A
>
to its parent process.
By convention, a zero status means success; non-zero means some kind
of failure. <em class="emphasis">-JP</EM
>]</P
><p class="para">Just as there are ways to modify the environment and the current
working directory of the shell, there are also useful ways to
<span class="link">manipulate file descriptors (<a class="linkend" href="ch45_20.htm" webstripperlinkwas="ch45_20.htm" title="Overview: Open Files and File Descriptors ">45.20</A
>, <a class="linkend" href="ch45_21.htm" webstripperlinkwas="ch45_21.htm" title="n&gt;&amp;m: Swap Standard Output and Standard Error ">45.21</A
>, <a class="linkend" href="ch45_22.htm" webstripperlinkwas="ch45_22.htm" title="Handling Files Line-by-Line ">45.22</A
>)</SPAN
>.<a class="indexterm" name="AUTOID-42419"></A
></P
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">JIK</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch38_02.htm" webstripperlinkwas="ch38_02.htm" title="38.2 fork and exec "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 38.2 fork and exec " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch38_04.htm" webstripperlinkwas="ch38_04.htm" title="38.4 Subshells "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 38.4 Subshells " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">38.2 fork and exec </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">38.4 Subshells </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
