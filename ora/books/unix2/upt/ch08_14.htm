<html><head><title>[Chapter 8] 8.14 Bourne Shell Quoting </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:34:28Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="8. How the Shell Interprets What You Type"><link rel="prev" href="ch08_13.htm" webstripperlinkwas="ch08_13.htm" title='8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?'><link rel="next" href="ch08_15.htm" webstripperlinkwas="ch08_15.htm" title="8.15 Differences Between Bourne and C Shell Quoting "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_13.htm" webstripperlinkwas="ch08_13.htm" title='8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?'><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt='Previous: 8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?' border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>How the Shell Interprets What You Type</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_15.htm" webstripperlinkwas="ch08_15.htm" title="8.15 Differences Between Bourne and C Shell Quoting "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8.15 Differences Between Bourne and C Shell Quoting " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-0012">8.14 Bourne Shell Quoting </A
></H2
><p class="para"><a class="indexterm" name="UPT-ART-12-IX-SH-BOURNE-SHELL-QUOTING"></A
><a class="indexterm" name="UPT-ART-12-IX-QUOTING-IN-BOURNE-SHELL-SH-BOURNE"></A
>I can't understand why some people see Bourne shell quoting as a scary,
mysterious set of many rules.
Bourne shell quoting is simple.
(C shell quoting is slightly more complicated.
See article
<a class="xref" href="ch08_15.htm" webstripperlinkwas="ch08_15.htm" title="Differences Between Bourne and C Shell Quoting ">8.15</A
>.)</P
><p class="para">The overall idea is: <em class="emphasis">quoting turns off (disables) the special meaning of
characters</EM
>.
There are three quoting characters: a single quote (<code class="literal">'</CODE
>),
a double quote (<code class="literal">&quot;</CODE
>), and a backslash (<code class="literal">\</CODE
>).
Note that a backquote (<code class="literal">`</CODE
>) is <em class="emphasis">not</EM
> a quoting character&nbsp;- it does
<span class="link">command substitution (<a class="linkend" href="ch09_16.htm" webstripperlinkwas="ch09_16.htm" title="Command Substitution ">9.16</A
>)</SPAN
>.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-12-SECT-1.1">8.14.1 Special Characters </A
></H3
><p class="para"><a class="indexterm" name="UPT-ART-12-IX-SPECIAL-CHARACTERS-IN-BOURNE-SHELL-SH-BOURNE-SHELL"></A
>Below are the characters that are special to the Bourne shell.
You've probably already used some of them.
Quoting these characters turns off their special meaning.
(Yes, the last three characters are quote marks.
You can quote quote marks; more on that later.)</P
><p class="para"><blockquote class="screen"><pre class="screen"># &amp; * ? [ ] ( ) = | ^ ; &lt; &gt; ` $ &quot; ' \</PRE
></BLOCKQUOTE
></P
><p class="para">Space, tab, and newline also have special meaning: as argument separators.
A slash (<code class="literal">/</CODE
>) has special meaning to UNIX itself, but not the
shell&nbsp;- so quoting doesn't change the meaning of slashes.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-12-SECT-1.2">8.14.2 How Quoting Works </A
></H3
><p class="para"><a class="xref" href="#UPT-ART-12-TAB-0" title="Bourne Shell Quoting Characters">Table 8.1</A
>
summarizes the rules; you might want to look back at it while you read the
examples.</P
><table class="table"><caption class="table"><a class="title" name="UPT-ART-12-TAB-0">Table 8.1: Bourne Shell Quoting Characters</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Quoting Character</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Explanation</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">'<code class="replaceable"><i>xxx</I
></CODE
>'</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Disable all special characters in <code class="replaceable"><i>xxx</I
></CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">&quot;<code class="replaceable"><i>xxx</I
></CODE
>&quot;</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Disable all special characters in <code class="replaceable"><i>xxx</I
></CODE
> except <code class="literal">$</CODE
>,
<code class="literal">`</CODE
>, and <code class="literal">\</CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\<code class="replaceable"><i>x</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Disable special meaning of character <code class="replaceable"><i>x</I
></CODE
>.
At end of line, a <code class="literal">\</CODE
> removes the newline 
character (continues line).</P
></TD
></TR
></TBODY
></TABLE
><p class="para">To understand which characters will be quoted, imagine this:
the Bourne shell reads what you type at a prompt, or the lines in a shell
script, character by character from first to last.
(It's actually more complicated than that, but not for the purposes of quoting.)</P
><p class="para">When the shell reads one of the three quoting characters, it:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Strips away that quoting character.</P
></LI
><li class="listitem"><p class="para">Turns off (disables) special meaning of some or all other character(s) until the
end of the quoted section, by the rules in
<a class="xref" href="#UPT-ART-12-TAB-0" title="Bourne Shell Quoting Characters">Table 8.1</A
>.</P
></LI
></UL
><p class="para">You also need to know how many characters will be quoted.
The next few sections have examples to demonstrate those rules.
Try typing the examples at a Bourne shell prompt, if you'd like.
(Don't use C shell;
<span class="link">it's different (<a class="linkend" href="ch08_15.htm" webstripperlinkwas="ch08_15.htm" title="Differences Between Bourne and C Shell Quoting ">8.15</A
>)</SPAN
>.)
If you need to start a Bourne-type shell, type <em class="emphasis">sh</EM
>; use CTRL-d
when you're done.</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8459"></A
>A <b class="emphasis.bold">backslash</B
> (<code class="literal">\</CODE
>) turns off special meaning (if any)
of the next character.
For example, <code class="literal">\*</CODE
> is a literal asterisk, not a filename wildcard.
So, the first
<span class="link"><em class="emphasis">expr</EM
> (<a class="linkend" href="ch45_28.htm" webstripperlinkwas="ch45_28.htm" title="Quick Reference: expr ">45.28</A
>)</SPAN
>
command gets the three arguments
<code class="literal">79&nbsp;*&nbsp;45</CODE
> and multiplies those two numbers:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>expr 79 \* 45</B
></CODE
>
3555
$ <code class="userinput"><b>expr 79 * 45</B
></CODE
>
expr: syntax error</PRE
></BLOCKQUOTE
></P
><p class="para">In the second example, without the backslash, the shell expanded <code class="literal">*</CODE
>
into a list of filenames&nbsp;- which confused <em class="emphasis">expr</EM
>.
(If you want to see what I mean, repeat those two examples using
<span class="link"><em class="emphasis">echo</EM
> (<a class="linkend" href="ch08_06.htm" webstripperlinkwas="ch08_06.htm" title="Output Command-Line Arguments ">8.6</A
>)</SPAN
>
instead of <em class="emphasis">expr</EM
>.)</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8480"></A
><a class="indexterm" name="AUTOID-8483"></A
><a class="indexterm" name="AUTOID-8486"></A
><a class="indexterm" name="AUTOID-8489"></A
><a class="indexterm" name="AUTOID-8492"></A
><a class="indexterm" name="AUTOID-8495"></A
><a class="indexterm" name="AUTOID-8498"></A
>A <b class="emphasis.bold">single quote</B
> (<code class="literal">'</CODE
>) turns off special meaning of all
characters until the next single quote is found.
So, in the command line below, the words between the two
single quotes are quoted.
The quotes themselves are removed by the shell.
Although this mess is probably not what you want, it's a good
demonstration of what quoting does:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>echo Hey!       What's next?  Mike's #1 friend has $$.</B
></CODE
>
Hey! Whats next?  Mikes</PRE
></BLOCKQUOTE
></P
><p class="para">Let's take a close look at what happened.
Spaces outside the quotes are treated as argument separators; the shell
ignores the multiple spaces.
As article
<a class="xref" href="ch08_06.htm" webstripperlinkwas="ch08_06.htm" title="Output Command-Line Arguments ">8.6</A
>
explains, <em class="emphasis">echo</EM
> prints a single space between each argument it gets.
Spaces inside the quotes are passed on to <em class="emphasis">echo</EM
> literally.
The question mark (<code class="literal">?</CODE
>) is quoted; it's given to <em class="emphasis">echo</EM
> as is,
not used as a wildcard.</P
><p class="para">So, <em class="emphasis">echo</EM
> printed its first argument <code class="literal">Hey!</CODE
> and a single space.
The second argument to <em class="emphasis">echo</EM
> is <code class="literal">Whats&nbsp;next?&nbsp;&nbsp;Mikes</CODE
>;
it's all a single argument because the single quotes surrounded the spaces
(notice that <em class="emphasis">echo</EM
> prints the two spaces after the question mark:
<code class="literal">?&nbsp;&nbsp;</CODE
>).
The next argument, <code class="literal">#1</CODE
>, starts with a hash mark, which is a
<span class="link">comment character (<a class="linkend" href="ch44_02.htm" webstripperlinkwas="ch44_02.htm" title="Writing a Simple Shell Program ">44.2</A
>)</SPAN
>.
That means the shell will ignore the rest of the string; it isn't passed
to <em class="emphasis">echo</EM
>.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8524"></A
><b class="emphasis.bold">Double quotes</B
> (<code class="literal">&quot;</CODE
>) work almost like single quotes.
The difference is that double quoting allows the characters <code class="literal">$</CODE
>
(dollar sign), <code class="literal">`</CODE
> (backquote), and <code class="literal">\</CODE
> (backslash)
to keep their special meanings.
That lets you do
<span class="link">variable substitution (<a class="linkend" href="ch06_08.htm" webstripperlinkwas="ch06_08.htm" title="Shell Variables ">6.8</A
>, <a class="linkend" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm#UPT-ART-1170" title="What Environment Variables Are Good For ">6.1</A
>)</SPAN
>
and
<span class="link">command substitution (<a class="linkend" href="ch09_16.htm" webstripperlinkwas="ch09_16.htm" title="Command Substitution ">9.16</A
>)</SPAN
>
inside double quotes&nbsp;- and also to stop that substitution where you need to.</P
><p class="para">&#13;For now, let's repeat the example above.
This time, put double quotes around the single quotes (actually, around
the whole string):</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>echo &quot;Hey!       What's next?  Mike's #1 friend has $$.&quot;</B
></CODE
>
Hey!       What's next?  Mike's #1 friend has 18437.</PRE
></BLOCKQUOTE
></P
><p class="para">The opening double quote isn't matched until the end of the string.
So, all the spaces between the double quotes lose their special meaning&nbsp;- and the
shell passes the whole string to <em class="emphasis">echo</EM
> as one argument.
The single quotes also lose their special meaning&nbsp;- because double quotes
turn off the special meaning of single quotes!
So, the single quotes aren't stripped off as they were in the previous
example; <em class="emphasis">echo</EM
> prints them.</P
><p class="para">What else lost its special meaning?
The hash mark (<code class="literal">#</CODE
>) did; notice that the rest of the string was
passed to <em class="emphasis">echo</EM
> this time&nbsp;- because it wasn't &quot;commented out.&quot;<a class="indexterm" name="AUTOID-8544"></A
>
But the dollar sign (<code class="literal">$</CODE
>) didn't lose its meaning;
the <code class="literal">$$</CODE
> was expanded
into the shell's
<span class="link">process ID number (<a class="linkend" href="ch38_03.htm" webstripperlinkwas="ch38_03.htm" title="Managing Processes: Overall Concepts ">38.3</A
>)</SPAN
>
(in this shell, <code class="literal">18437</CODE
>).</P
></LI
></UL
><p class="para">In the previous example, what would happen if you put the <code class="literal">$</CODE
> inside
the single quotes?
(Single quotes turn off the meaning of <code class="literal">$</CODE
>, remember.)
Would the shell still expand <code class="literal">$$</CODE
> to its value?
Yes, it would: the single quotes have lost their special meaning,
so they don't affect any characters between themselves:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>echo &quot;What's next?  How many $$ did Mike's friend bring?&quot;</B
></CODE
>
What's next?  How many 18437 did Mike's friend bring?</PRE
></BLOCKQUOTE
></P
><p class="para">How can you make both the <code class="literal">$$</CODE
> and the single quotes print literally?
The easiest way is with a backslash, which still works inside double
quotes:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>echo &quot;What's next?  How many \$\$ did Mike's friend bring?&quot;</B
></CODE
>
What's next?  How many $$ did Mike's friend bring?</PRE
></BLOCKQUOTE
></P
><p class="para">Here's another way to solve the problem.
A careful look at this will show a lot about shell quoting:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>echo &quot;What's next?  How many &quot;'$$'&quot; did Mike's friend bring?&quot;</B
></CODE
>
What's next?  How many $$ did Mike's friend bring?</PRE
></BLOCKQUOTE
></P
><p class="para">To read that example, remember that a double quote quotes characters
until the next double quote is found.
The same is true for single quotes.
So, the string <code class="literal">What's next?&nbsp;&nbsp;How many&nbsp;</CODE
>
(including the space at the end) is inside a pair of double quotes.
The <code class="literal">$$</CODE
> is inside a pair of single quotes.
The rest of the line is inside another pair of double quotes.
Both of the double-quoted strings contain a single quote; the double
quotes turn off its special meaning and the single quote is printed literally.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-12-SECT-1.3">8.14.3 Single Quotes Inside Single Quotes? </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-8573"></A
>You can't put single quotes inside single quotes.
A single quote turns off <em class="emphasis">all</EM
> special meaning until the next
single quote.
Use double quotes and backslashes.<a class="indexterm" name="AUTOID-8576"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-12-SECT-1.4">8.14.4 Multiline Quoting </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-8580"></A
>Once you type a single quote or double quote, everything is quoted.
The quoting can stretch across many lines.
(The C shell doesn't work this way.)</P
><p class="para">For example, in the short script shown in
<a class="xref" href="#UPT-ART-12-FIG-0" title="Matching Quotes">Figure 8.1</A
>,
you might think that the <code class="literal">$1</CODE
> is
inside quotes... but it isn't.</P
><h4 class="figure"><a class="title" name="UPT-ART-12-FIG-0">Figure 8.1: Matching Quotes</A
></H4
><img class="graphic" src="figs/0012.gif" webstripperlinkwas="figs/0012.gif" alt="Figure 8.1"><p class="para">Actually, everything <em class="emphasis">but</EM
> <code class="literal">$1</CODE
> is in quotes.
The gray shaded area shows the quoted parts.
So <code class="literal">$1</CODE
> 
is expanded by the Bourne shell, and not by <em class="emphasis">awk</EM
>.</P
><p class="para">Here's another example.
Let's store a
<span class="link">shell variable (<a class="linkend" href="ch06_08.htm" webstripperlinkwas="ch06_08.htm" title="Shell Variables ">6.8</A
>)</SPAN
>
with a multiline message, the kind that might be used in a shell program.<a class="indexterm" name="AUTOID-8596"></A
>
A shell variable must be stored as a single argument; any argument
separators (spaces, etc.) must be quoted.
Inside double quotes, <code class="literal">$</CODE
> and <code class="literal">`</CODE
> are interpreted
(<em class="emphasis">before</EM
> the variable is stored, by the way).
The opening double quote isn't closed by the end of the first line;
the Bourne shell prints
<span class="link">secondary prompts (<a class="linkend" href="ch09_13.htm" webstripperlinkwas="ch09_13.htm" title="Multiline Commands, Secondary Prompts ">9.13</A
>)</SPAN
>
(<code class="literal">&gt;</CODE
>) until all quotes
are closed:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>greeting=&quot;Hi, $USER.
&gt; The date and time now
&gt; are:  `date`.&quot;</B
></CODE
>
$ <code class="userinput"><b>echo &quot;$greeting&quot;</B
></CODE
>
Hi, jerry.
The date and time now
are:  Tue Sep  1 13:48:12 EDT 1992.
$ <code class="userinput"><b>echo $greeting</B
></CODE
>
Hi, jerry. The date and time now are: Tue Sep 1 13:48:12 EDT 1992.
$</PRE
></BLOCKQUOTE
></P
><p class="para">The first <em class="emphasis">echo</EM
> command line uses double quotes.
So, the shell variable is expanded,
but the shell doesn't use the spaces and newlines in the variable
as argument separators.
(Look at the extra spaces after the word <code class="literal">are:</CODE
>.)
The second <em class="emphasis">echo</EM
> doesn't use double quotes.
The spaces and newlines are treated as argument separators; the shell
passes 14 arguments to <em class="emphasis">echo</EM
>, which prints them with single
spaces between.</P
><p class="para"><a class="indexterm" name="AUTOID-8615"></A
>A backslash has a quirk you should know about.
If you use it outside quotes, at the end of a line (just before the
newline), the newline will be <em class="emphasis">deleted</EM
>.
Inside single quotes, though, a backslash at the end of a line is
copied

as is.
Here are examples.
I've numbered the prompts (<code class="literal">1$</CODE
>, <code class="literal">2$</CODE
>, and so on):</P
><p class="para"><blockquote class="screen"><pre class="screen">1$ <code class="userinput"><b>echo &quot;a long long long long long long</B
></CODE
>
&gt; <code class="userinput"><b>line or two&quot;</B
></CODE
>
a long long long long long long
line or two
2$ <code class="userinput"><b>echo a long long long long long long\</B
></CODE
>
&gt; <code class="userinput"><b>line</B
></CODE
>
a long long long long long longline
3$ <code class="userinput"><b>echo a long long long long long long \</B
></CODE
>
&gt; <code class="userinput"><b>line</B
></CODE
>
a long long long long long long line
4$ <code class="userinput"><b>echo &quot;a long long long long long long\</B
></CODE
>
&gt; <code class="userinput"><b>line&quot;</B
></CODE
>
a long long long long long longline
5$ <code class="userinput"><b>echo 'a long long long long long long\</B
></CODE
>
&gt; <code class="userinput"><b>line'</B
></CODE
>
a long long long long long long\
line</PRE
></BLOCKQUOTE
></P
><p class="para">You've seen an example like <b class="emphasis.bold">example 1</B
> before.
The newline is in quotes, so it isn't an argument separator;
<em class="emphasis">echo</EM
> prints it with the rest of the (single two-line) argument.
In <b class="emphasis.bold">example 2</B
>, the backslash before the newline tells the shell to delete
the newline; the words <code class="literal">long</CODE
> and <code class="literal">line</CODE
> are passed to
<em class="emphasis">echo</EM
> as one argument.
<b class="emphasis.bold">Example 3</B
> is usually what you want when you're typing long lists of
command-line arguments: Type a space (an argument separator) before the
backslash and newline.
In <b class="emphasis.bold">example 4</B
>, the backslash inside the double quotes is ignored
(compare to example 1).
Inside single quotes, as in <b class="emphasis.bold">example 5</B
>, the backslash has no
special meaning; it's passed on to <em class="emphasis">echo</EM
>.</P
><a class="indexterm" name="AUTOID-8644"></A
><a class="indexterm" name="AUTOID-8645"></A
></DIV
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">JP</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_13.htm" webstripperlinkwas="ch08_13.htm" title='8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?'><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt='Previous: 8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?' border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_15.htm" webstripperlinkwas="ch08_15.htm" title="8.15 Differences Between Bourne and C Shell Quoting "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8.15 Differences Between Bourne and C Shell Quoting " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.15 Differences Between Bourne and C Shell Quoting </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
