<html><head><title>[Chapter 26] 26.3 Understanding Expressions </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:43:59Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch26_01.htm" webstripperlinkwas="ch26_01.htm" title="26. Regular Expressions (Pattern Matching)"><link rel="prev" href="ch26_02.htm" webstripperlinkwas="ch26_02.htm" title="26.2 Don't Confuse Regular Expressions with Wildcards "><link rel="next" href="ch26_04.htm" webstripperlinkwas="ch26_04.htm" title="26.4 Using Metacharacters in Regular Expressions "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch26_02.htm" webstripperlinkwas="ch26_02.htm" title="26.2 Don't Confuse Regular Expressions with Wildcards "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 26.2 Don't Confuse Regular Expressions with Wildcards " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 26<br>Regular Expressions (Pattern Matching)</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch26_04.htm" webstripperlinkwas="ch26_04.htm" title="26.4 Using Metacharacters in Regular Expressions "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 26.4 Using Metacharacters in Regular Expressions " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-7972">26.3 Understanding Expressions </A
></H2
><p class="para"><a class="indexterm" name="UPT-ART-7972-IX-REGULAR-EXPRESSIONS-DESCRIBED"></A
>You are probably familiar with the kinds of expressions
that a calculator interprets.
Look at the following arithmetic expression:</P
><p class="para"><blockquote class="screen"><pre class="screen">2 + 4</PRE
></BLOCKQUOTE
></P
><p class="para">&quot;Two plus four&quot; consists of several constants or
literal values and an operator.
A calculator program must
recognize, for instance, that 2 is a numeric constant and
that the plus sign represents an operator, not to
be interpreted as the <code class="literal">+</CODE
>&nbsp;character.</P
><p class="para">An expression tells the computer how to produce a result.
Although it
is the sum of &quot;two plus four&quot; that we really want,
we don't simply tell the computer to return a six.
We instruct the computer to evaluate the expression and
return a value.</P
><p class="para">An expression can be more complicated than 2+4; in fact, it
might consist of multiple simple expressions, such as
the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">2 + 3 * 4</PRE
></BLOCKQUOTE
></P
><p class="para">A calculator normally evaluates an expression from left to right.
However, certain
operators have precedence over others: that is, they will be performed
first.
Thus, the above expression will evaluate to 14 and not 20 because
multiplication takes precedence over addition.
Precedence can be overridden by placing the simple expression in
parentheses.
Thus, (2+3)*4 or &quot;the sum of two plus three times four&quot;
will evaluate to 20.
The parentheses are symbols that instruct the calculator to change
the order in which the expression is evaluated.</P
><p class="para">A regular expression, by contrast, is descriptive of a pattern or sequence of
characters.
Concatenation is the basic operation implied in every regular
expression.
That is, a pattern matches adjacent characters.
Look at the following example of a regular expression:</P
><p class="para"><blockquote class="screen"><pre class="screen">ABE</PRE
></BLOCKQUOTE
></P
><p class="para">Each literal character is a regular expression that
matches only that single character.
This expression describes an &quot;<code class="literal">A</CODE
> followed by a <code class="literal">B</CODE
> then followed by an <code class="literal">E</CODE
>&quot;
or simply the string <code class="literal">ABE</CODE
>.
The term &quot;string&quot; means each character concatenated to the one
preceding it.
That a regular expression describes a <em class="emphasis">sequence</EM
> of characters
can't be emphasized enough.
(Novice users are inclined to think
in higher-level units such as words, and not individual characters.)
Regular expressions are case-sensitive; <code class="literal">A</CODE
> does not match <code class="literal">a</CODE
>.</P
><p class="para">Programs such as
<span class="link"><em class="emphasis">grep</EM
> (<a class="linkend" href="ch27_02.htm" webstripperlinkwas="ch27_02.htm" title="Searching for Text with grep ">27.2</A
>)</SPAN
>
that accept regular expressions
must first evaluate
the syntax of the regular expression to produce a pattern.
They then read the input line by line trying to match the pattern.
An input line is a string, and to see if a string matches the pattern, 
a program compares the first character in the string to the first 
character of the pattern.
If there is a match, it compares the second character in
the string to the second character of the pattern.
Whenever it fails to make a match, it compares the next character
in the string to the first character of the pattern.
<a class="xref" href="#UPT-ART-7972-FIG-0" title="Interpreting a Regular Expression">Figure 26.1</A
>
illustrates this process, trying to match the pattern <code class="literal">abe</CODE
>
on an input line.</P
><h4 class="figure"><a class="title" name="UPT-ART-7972-FIG-0">Figure 26.1: Interpreting a Regular Expression</A
></H4
><img class="graphic" src="figs/7972.gif" webstripperlinkwas="figs/7972.gif" alt="Figure 26.1"><p class="para">A regular expression is not limited to literal characters.
There is, for<a class="indexterm" name="AUTOID-28377"></A
><a class="indexterm" name="AUTOID-28380"></A
>
instance, a metacharacter&nbsp;- the dot (<code class="literal">.</CODE
>)&nbsp;- that can be used as a
&quot;wildcard&quot; to match any single character.
You can think of this wildcard as analogous to a blank tile
in Scrabble(TM) where it means any letter.
Thus, we can specify the regular expression <code class="literal">A.E</CODE
> and it will
match <code class="literal">ACE</CODE
>, <code class="literal">ABE</CODE
>, and <code class="literal">ALE</CODE
>.
It will match any character
in the position following <code class="literal">A</CODE
>.</P
><p class="para"><a class="indexterm" name="AUTOID-28390"></A
><a class="indexterm" name="AUTOID-28393"></A
><a class="indexterm" name="AUTOID-28396"></A
>The metacharacter <code class="literal">*</CODE
> (the asterisk) is used to match zero or more
occurrences of the <em class="emphasis">preceding</EM
> regular expression, which typically
is a single character.
You may be familiar with <code class="literal">*</CODE
> as a <em class="emphasis">shell</EM
>
metacharacter, where it also means &quot;zero or more characters.&quot;
But that meaning
is very different from <code class="literal">*</CODE
> in a regular expression.
By itself, the
metacharacter <code class="literal">*</CODE
> does not match anything in a regular expression; 
it modifies what goes before it.
The regular expression <code class="literal">.*</CODE
> matches any number of
characters.
The regular expression <code class="literal">A.*E</CODE
> matches any string that matches <code class="literal">A.E</CODE
> but it will also
match any number of characters between <code class="literal">A</CODE
> and <code class="literal">E</CODE
>:
<code class="literal">AIRPLANE</CODE
>, <code class="literal">A</CODE
> <code class="literal">FINE</CODE
>, <code class="literal">AE</CODE
>,
<code class="literal">A</CODE
> <code class="literal">32-cent</CODE
> <code class="literal">S.A.S.E</CODE
>,
or <code class="literal">A</CODE
> <code class="literal">LONG</CODE
> <code class="literal">WAY</CODE
> <code class="literal">HOME</CODE
>, for example.</P
><p class="para">If you understand the difference between <code class="literal">.</CODE
> and <code class="literal">*</CODE
> in regular
expressions, you already know about the two basic types of metacharacters: those
that can be evaluated to a single character, and those that modify how
characters that precede it are evaluated.</P
><p class="para">It should also be apparent that
by use of metacharacters you can expand or limit the possible matches.
You have more control over what is matched and what is not.
In article
<a class="xref" href="ch26_04.htm" webstripperlinkwas="ch26_04.htm" title="Using Metacharacters in Regular Expressions ">26.4</A
>,
Bruce Barnett explains in detail how to use regular expression metacharacters.<a class="indexterm" name="AUTOID-28426"></A
></P
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">DD</SPAN
> <span class="bibliomisc">from O'Reilly &amp; Associates' <cite class="citetitle">sed &amp; awk</CITE
></SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch26_02.htm" webstripperlinkwas="ch26_02.htm" title="26.2 Don't Confuse Regular Expressions with Wildcards "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 26.2 Don't Confuse Regular Expressions with Wildcards " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch26_04.htm" webstripperlinkwas="ch26_04.htm" title="26.4 Using Metacharacters in Regular Expressions "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 26.4 Using Metacharacters in Regular Expressions " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">26.2 Don't Confuse Regular Expressions with Wildcards </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">26.4 Using Metacharacters in Regular Expressions </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
