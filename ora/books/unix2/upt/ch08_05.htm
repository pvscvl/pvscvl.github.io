<html><head><title>[Chapter 8] 8.5 Command-Line Evaluation </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:34:11Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="8. How the Shell Interprets What You Type"><link rel="prev" href="ch08_04.htm" webstripperlinkwas="ch08_04.htm" title="8.4 Command Evaluation and Accidentally Overwriting Files"><link rel="next" href="ch08_06.htm" webstripperlinkwas="ch08_06.htm" title="8.6 Output Command-Line Arguments "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_04.htm" webstripperlinkwas="ch08_04.htm" title="8.4 Command Evaluation and Accidentally Overwriting Files"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.4 Command Evaluation and Accidentally Overwriting Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>How the Shell Interprets What You Type</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_06.htm" webstripperlinkwas="ch08_06.htm" title="8.6 Output Command-Line Arguments "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8.6 Output Command-Line Arguments " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-1850">8.5 Command-Line Evaluation </A
></H2
><p class="para"><a class="indexterm" name="AUTOID-7596"></A
><a class="indexterm" name="AUTOID-7599"></A
>With all the different substitution mechanisms available in the
C shell, it's important to know which take precedence.
Here's the order in which the C shell interprets the command line:</P
><ol class="orderedlist"><li class="listitem"><p class="para">History substitution</P
></LI
><li class="listitem"><p class="para">Splitting words (including special characters)</P
></LI
><li class="listitem"><p class="para">Updating the history list</P
></LI
><li class="listitem"><p class="para">Interpreting single quotes (<code class="literal">'</CODE
>) and double quotes (<code class="literal">&quot;</CODE
>)</P
></LI
><li class="listitem"><p class="para">Alias substitution</P
></LI
><li class="listitem"><p class="para">Redirection of input and output ( e.g., <code class="literal">&gt;</CODE
>, <code class="literal">&lt;</CODE
>, and <code class="literal">|</CODE
>)</P
></LI
><li class="listitem"><p class="para">Variable substitution</P
></LI
><li class="listitem"><p class="para">Command substitution</P
></LI
><li class="listitem"><p class="para">Filename expansion</P
></LI
></OL
><p class="para">(The Bourne shell is essentially the same, except that it doesn't
perform history substitution or alias substitution.)</P
><p class="para"><a class="indexterm" name="AUTOID-7628"></A
>History substitutions are always done first. That's
why quotes won't protect a <code class="literal">!</CODE
> from the shell; the shell sees the
exclamation point and substitutes a command from the history before
it's even thought about the quotation marks.
To prevent history substitution, you need to<a class="indexterm" name="AUTOID-7631"></A
>
<span class="link">use a backslash (<a class="linkend" href="ch08_15.htm" webstripperlinkwas="ch08_15.htm" title="Differences Between Bourne and C Shell Quoting ">8.15</A
>)</SPAN
>.</P
><p class="para">Let's work through a simple command line that uses several of these
features.
Nothing in this command line will be difficult, but it will
give you a feeling for what we mean by saying that &quot;the shell performs
variable substitution after alias substitution.&quot;
Here's the command line; it has both space and TAB characters:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>ls -l    $HOME/* |     grep &quot;Mar  7&quot;</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">And here's what happens:</P
><ol class="orderedlist"><li class="listitem"><p class="para">There are no history operators, so
<span class="link">history substitution (<a class="linkend" href="ch11_02.htm" webstripperlinkwas="ch11_02.htm" title="History in a Nutshell ">11.2</A
>)</SPAN
>
doesn't happen.
(The Bourne shell wouldn't perform this step.)</P
></LI
><li class="listitem"><p class="para">The command line is split into separate &quot;words&quot; at the whitespace characters.
The words are <code class="literal">ls</CODE
>, <code class="literal">-l</CODE
>,
<code class="literal">$HOME/*</CODE
>, <code class="literal">|</CODE
>, <code class="literal">grep</CODE
>, and <code class="literal">&quot;Mar&nbsp;&nbsp;7&quot;</CODE
>.
The shell ignores the amount of whitespace (spaces and TABs)
between different words
in a command line.
Any unquoted whitespace creates a new word.
The shell doesn't do anything special with options (like <code class="literal">-l</CODE
>).
Options are passed to the command being run, just like any other word;
[2]
the command decides how to interpret them.
Also, note

that
<span class="link">quotes (<a class="linkend" href="ch08_14.htm" webstripperlinkwas="ch08_14.htm" title="Bourne Shell Quoting ">8.14</A
>)</SPAN
>
prevent the shell from splitting <code class="literal">&quot;Mar&nbsp;&nbsp;7&quot;</CODE
> into two words
or eating the two spaces&nbsp;- even though quote interpretation comes later.
[3]
At this point, the
command line looks like this:</P
><blockquote class="footnote"><p class="para">[2] The convention of starting options with a dash (<code class="literal">-</CODE
>) is just
that: a convention.
Although option handling is being
<span class="link">standardized (<a class="linkend" href="ch44_18.htm" webstripperlinkwas="ch44_18.htm" title="Standard Command-Line Parsing ">44.18</A
>)</SPAN
>,
each command can interpret its options any way it wants to.</P
><p class="para">[3] In an <em class="emphasis">ls -l</EM
> listing, dates less than 10 have two spaces before
them (they're printed in a field 2 characters wide).</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">ls -l $HOME/* | grep &quot;Mar  7&quot;</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para">The shell sticks the command line onto the history list.
The Bourne shell
wouldn't perform this step, either.</P
></LI
><li class="listitem"><p class="para">The shell recognizes the double quotes around <code class="literal">&quot;Mar&nbsp;&nbsp;7&quot;</CODE
> and notes that
wildcard expansion (yet to come) shouldn't take place inside the quotes.</P
></LI
><li class="listitem"><p class="para">The shell checks whether or not <code class="literal">ls</CODE
> or <code class="literal">grep</CODE
> are
<span class="link">aliases (<a class="linkend" href="ch10_02.htm" webstripperlinkwas="ch10_02.htm" title="Aliases for Common Commands ">10.2</A
>)</SPAN
>.
They could be, but we're assuming they aren't.</P
></LI
><li class="listitem"><p class="para">The shell notices the <code class="literal">|</CODE
>, and does
<span class="link">whatever's required (<a class="linkend" href="ch13_01.htm" webstripperlinkwas="ch13_01.htm#UPT-ART-1023" title="Using Standard Input and Output">13.1</A
>)</SPAN
>
to set up a
pipeline.</P
></LI
><li class="listitem"><p class="para">The shell notices the
<span class="link">environment variable (<a class="linkend" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm#UPT-ART-1170" title="What Environment Variables Are Good For ">6.1</A
>)</SPAN
>
<code class="literal">$HOME</CODE
>,
and replaces this
variable with its value (<code class="literal">/home/mikel</CODE
>).
At this point, the
command line looks like:</P
><p class="para"><blockquote class="screen"><pre class="screen">ls -l /home/mikel/* | grep &quot;Mar  7&quot;</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para">The shell looks for
<span class="link">backquotes (<a class="linkend" href="ch09_16.htm" webstripperlinkwas="ch09_16.htm" title="Command Substitution ">9.16</A
>)</SPAN
>,
executes any command inside the
backquotes, and inserts its output on the command line. In this case,
there's nothing to do.
(If there are wildcards or variables inside the backquotes, they aren't
interpreted before the shell runs the command inside the backquotes.)</P
></LI
><li class="listitem"><p class="para">The shell looks for
<span class="link">wildcards (<a class="linkend" href="ch01_16.htm" webstripperlinkwas="ch01_16.htm" title="Wildcards ">1.16</A
>)</SPAN
>.
In this case, it sees the <code class="literal">*</CODE
> and
expands the filename accordingly, leaving something like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">ls -l /home/mikel/ax ... /home/mikel/zip | grep &quot;Mar  7&quot;</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para">The shell executes the <em class="emphasis">ls</EM
> command, executes the <em class="emphasis">grep</EM
>
command, with the aforementioned pipe sending the <em class="emphasis">ls</EM
> output
into <em class="emphasis">grep</EM
>'s input.</P
></LI
></OL
><p class="para"><a class="indexterm" name="AUTOID-7704"></A
><a class="indexterm" name="AUTOID-7707"></A
>One character you'll see often on command lines is <code class="literal">;</CODE
>
(semicolon).
It's used as a command separator:
type one complete command line&nbsp;- then, instead of pressing RETURN, type
a semicolon and another complete command line.
Chaining commands with semicolons is especially useful in
<span class="link">subshells (<a class="linkend" href="ch13_07.htm" webstripperlinkwas="ch13_07.htm" title="The () Subshell Operators ">13.7</A
>)</SPAN
>,
aliases,
and
<span class="link">lists (<a class="linkend" href="ch13_08.htm" webstripperlinkwas="ch13_08.htm" title="Using {list} to Group Bourne Shell Commands ">13.8</A
>)</SPAN
>-
this book has lots of examples&nbsp;- in articles
<a class="xref" href="ch40_02.htm" webstripperlinkwas="ch40_02.htm" title="Waiting a Little While: sleep ">40.2</A
>
and
<a class="xref" href="ch10_02.htm" webstripperlinkwas="ch10_02.htm" title="Aliases for Common Commands ">10.2</A
>,
for instance.
There's more about command-line interpretation in the articles on
<span class="link">wildcards inside aliases (<a class="linkend" href="ch08_09.htm" webstripperlinkwas="ch08_09.htm" title="Wildcards Inside of Aliases ">8.9</A
>)</SPAN
>,
<span class="link"><em class="emphasis">eval</EM
> (<a class="linkend" href="ch08_10.htm" webstripperlinkwas="ch08_10.htm" title="eval: When You Need Another Chance ">8.10</A
>)</SPAN
>,
<span class="link">conditional execution (<a class="linkend" href="ch44_09.htm" webstripperlinkwas="ch44_09.htm" title="Testing Your Success ">44.9</A
>)</SPAN
>,
and many others.
[For some nitty-gritty details about the C shell that are fun, too,
I recommend Chris Torek's article
<a class="xref" href="ch08_12.htm" webstripperlinkwas="ch08_12.htm" title="Which One Will the C Shell Use? ">8.12</A
>.
-<em class="emphasis">JP</EM
>&nbsp;]</P
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">DG</SPAN
>, <span class="authorinitials">ML</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_04.htm" webstripperlinkwas="ch08_04.htm" title="8.4 Command Evaluation and Accidentally Overwriting Files"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.4 Command Evaluation and Accidentally Overwriting Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_06.htm" webstripperlinkwas="ch08_06.htm" title="8.6 Output Command-Line Arguments "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8.6 Output Command-Line Arguments " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.4 Command Evaluation and Accidentally Overwriting Files</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.6 Output Command-Line Arguments </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
