<html><head><title>[Chapter 45] Shell Programming for the Initiated</TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:54:15Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="part08.htm" webstripperlinkwas="part08.htm" title="VIII. Shell Programming "><link rel="prev" href="ch44_23.htm" webstripperlinkwas="ch44_23.htm" title="44.23 Reading Files with the . and source Commands "><link rel="next" href="ch45_02.htm" webstripperlinkwas="ch45_02.htm" title="45.2 The Story of  : #  #! "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch44_23.htm" webstripperlinkwas="ch44_23.htm" title="44.23 Reading Files with the . and source Commands "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 44.23 Reading Files with the . and source Commands " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 45</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch45_02.htm" webstripperlinkwas="ch45_02.htm" title="45.2 The Story of  : #  #! "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 45.2 The Story of  : #  #! " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="UPT-CHP-45">45. Shell Programming for the Initiated</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#UPT-ART-7970" title="45.1 Beyond the Basics ">Beyond the Basics </A
><br><a class="sect1" href="ch45_02.htm" webstripperlinkwas="ch45_02.htm" title="45.2 The Story of  : #  #! ">The Story of  : #  #! </A
><br><a class="sect1" href="ch45_03.htm" webstripperlinkwas="ch45_03.htm" title="45.3 Don't Need a Shell for Your Script?  Don't Use One ">Don't Need a Shell for Your Script?  Don't Use One </A
><br><a class="sect1" href="ch45_04.htm" webstripperlinkwas="ch45_04.htm" title="45.4 Fun with #! ">Fun with #! </A
><br><a class="sect1" href="ch45_05.htm" webstripperlinkwas="ch45_05.htm" title="45.5 A File That Shows Itself... and What #! Does ">A File That Shows Itself... and What #! Does </A
><br><a class="sect1" href="ch45_06.htm" webstripperlinkwas="ch45_06.htm" title="45.6 Making Sure Your Script Runs with Bourne Shell, Without #! ">Making Sure Your Script Runs with Bourne Shell, Without #! </A
><br><a class="sect1" href="ch45_07.htm" webstripperlinkwas="ch45_07.htm" title="45.7 The exec Command ">The exec Command </A
><br><a class="sect1" href="ch45_08.htm" webstripperlinkwas="ch45_08.htm" title="45.8 Handling Signals to Child Processes ">Handling Signals to Child Processes </A
><br><a class="sect1" href="ch45_09.htm" webstripperlinkwas="ch45_09.htm" title='45.9 The Unappreciated Bourne Shell  ":&quot; Operator'>The Unappreciated Bourne Shell  &quot;:&quot; Operator</A
><br><a class="sect1" href="ch45_10.htm" webstripperlinkwas="ch45_10.htm" title="45.10 Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup">Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup</A
><br><a class="sect1" href="ch45_11.htm" webstripperlinkwas="ch45_11.htm" title="45.11 The Multipurpose jot Command ">The Multipurpose jot Command </A
><br><a class="sect1" href="ch45_12.htm" webstripperlinkwas="ch45_12.htm" title="45.12 Parameter Substitution ">Parameter Substitution </A
><br><a class="sect1" href="ch45_13.htm" webstripperlinkwas="ch45_13.htm" title="45.13 Save Disk Space and Programming: Multiple Names for a Program">Save Disk Space and Programming: Multiple Names for a Program</A
><br><a class="sect1" href="ch45_14.htm" webstripperlinkwas="ch45_14.htm" title="45.14 Finding the Last Command-Line Argument ">Finding the Last Command-Line Argument </A
><br><a class="sect1" href="ch45_15.htm" webstripperlinkwas="ch45_15.htm" title="45.15 How to Unset all Command-Line Parameters ">How to Unset all Command-Line Parameters </A
><br><a class="sect1" href="ch45_16.htm" webstripperlinkwas="ch45_16.htm" title="45.16 Standard Input to a for Loop ">Standard Input to a for Loop </A
><br><a class="sect1" href="ch45_17.htm" webstripperlinkwas="ch45_17.htm" title="45.17 Making a for Loop with Multiple Variables ">Making a for Loop with Multiple Variables </A
><br><a class="sect1" href="ch45_18.htm" webstripperlinkwas="ch45_18.htm" title="45.18 Using basename and dirname ">Using basename and dirname </A
><br><a class="sect1" href="ch45_19.htm" webstripperlinkwas="ch45_19.htm" title="45.19 A while Loop with Several Loop Control Commands ">A while Loop with Several Loop Control Commands </A
><br><a class="sect1" href="ch45_20.htm" webstripperlinkwas="ch45_20.htm" title="45.20 Overview: Open Files and File Descriptors ">Overview: Open Files and File Descriptors </A
><br><a class="sect1" href="ch45_21.htm" webstripperlinkwas="ch45_21.htm" title="45.21 n&gt;&amp;m: Swap Standard Output and Standard Error ">n&gt;&amp;m: Swap Standard Output and Standard Error </A
><br><a class="sect1" href="ch45_22.htm" webstripperlinkwas="ch45_22.htm" title="45.22 Handling Files Line-by-Line ">Handling Files Line-by-Line </A
><br><a class="sect1" href="ch45_23.htm" webstripperlinkwas="ch45_23.htm" title="45.23 The Ins and Outs of Redirected I/O Loops ">The Ins and Outs of Redirected I/O Loops </A
><br><a class="sect1" href="ch45_24.htm" webstripperlinkwas="ch45_24.htm" title="45.24 A Shell Can Read a Script from its Standard Input, But...">A Shell Can Read a Script from its Standard Input, But...</A
><br><a class="sect1" href="ch45_25.htm" webstripperlinkwas="ch45_25.htm" title="45.25 Shell Scripts On-the-Fly from Standard Input ">Shell Scripts On-the-Fly from Standard Input </A
><br><a class="sect1" href="ch45_26.htm" webstripperlinkwas="ch45_26.htm" title="45.26 Quoted hereis Document Terminators: sh vs. csh ">Quoted hereis Document Terminators: sh vs. csh </A
><br><a class="sect1" href="ch45_27.htm" webstripperlinkwas="ch45_27.htm" title='45.27 Turn Off echo for "Secret&quot; Answers'>Turn Off echo for &quot;Secret&quot; Answers</A
><br><a class="sect1" href="ch45_28.htm" webstripperlinkwas="ch45_28.htm" title="45.28 Quick Reference: expr ">Quick Reference: expr </A
><br><a class="sect1" href="ch45_29.htm" webstripperlinkwas="ch45_29.htm" title="45.29 Testing Characters in a String with expr ">Testing Characters in a String with expr </A
><br><a class="sect1" href="ch45_30.htm" webstripperlinkwas="ch45_30.htm" title="45.30 Grabbing Parts of a String ">Grabbing Parts of a String </A
><br><a class="sect1" href="ch45_31.htm" webstripperlinkwas="ch45_31.htm" title="45.31 Nested Command Substitution ">Nested Command Substitution </A
><br><a class="sect1" href="ch45_32.htm" webstripperlinkwas="ch45_32.htm" title="45.32 A Better read Command: grabchars ">A Better read Command: grabchars </A
><br><a class="sect1" href="ch45_33.htm" webstripperlinkwas="ch45_33.htm" title="45.33 Testing Two Strings with One case Statement ">Testing Two Strings with One case Statement </A
><br><a class="sect1" href="ch45_34.htm" webstripperlinkwas="ch45_34.htm" title="45.34 Arrays in the Bourne Shell ">Arrays in the Bourne Shell </A
><br><a class="sect1" href="ch45_35.htm" webstripperlinkwas="ch45_35.htm" title="45.35 Using a Control Character in a Script ">Using a Control Character in a Script </A
><br><a class="sect1" href="ch45_36.htm" webstripperlinkwas="ch45_36.htm" title="45.36 Shell Lockfile ">Shell Lockfile </A
></P
><p></P
></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="UPT-ART-7970">45.1 Beyond the Basics </A
></H2
><p class="para">This chapter has a bunch of tricks and techniques for programming
with the Bourne shell.
Some of them are documented but hard to find; others aren't documented
at all.
Here is a summary of this chapter's articles:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">The first group of articles is about <b class="emphasis.bold">making a file directly executable
with </B
><code class="userinput"><b>#!</B
></CODE
> on the first line.
On many versions of UNIX (see article
<a class="xref" href="ch44_04.htm" webstripperlinkwas="ch44_04.htm" title="Testing How Your System Executes Files ">44.4</A
>),
an
executable file
can start with a first line like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">#!<code class="replaceable"><i>/path/to/interpreter</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The kernel will start the program named in that line and give it the
file to read.
Chris Torek's Usenet classic, article
<a class="xref" href="ch45_02.htm" webstripperlinkwas="ch45_02.htm" title="The Story of  : #  #! ">45.2</A
>,
explains how <code class="literal">#!</CODE
> started.
Article
<a class="xref" href="ch45_03.htm" webstripperlinkwas="ch45_03.htm" title="Don't Need a Shell for Your Script?  Don't Use One ">45.3</A
>
explains that your &quot;shell scripts&quot; may not need a shell at all.
Article
<a class="xref" href="ch45_04.htm" webstripperlinkwas="ch45_04.htm" title="Fun with #! ">45.4</A
>
will give you a few grins as it shows unusual examples of <code class="literal">#!</CODE
>-and
article
<a class="xref" href="ch45_05.htm" webstripperlinkwas="ch45_05.htm" title="A File That Shows Itself... and What #! Does ">45.5</A
>
has experiments to help you understand what <code class="literal">#!</CODE
> does.
If your UNIX doesn't have <code class="literal">#!</CODE
>, the trick in article
<a class="xref" href="ch45_06.htm" webstripperlinkwas="ch45_06.htm" title="Making Sure Your Script Runs with Bourne Shell, Without #! ">45.6</A
>
will let you be sure your scripts run with the Bourne shell.</P
><p class="para">Scripts using an interpreter that isn't a shell are in articles
<a class="xref" href="ch25_11.htm" webstripperlinkwas="ch25_11.htm" title="crush: A cat that Skips all Blank Lines ">25.11</A
>,
<a class="xref" href="ch25_12.htm" webstripperlinkwas="ch25_12.htm" title="Double Space, Triple Space ... ">25.12</A
>,
and
<a class="xref" href="ch35_08.htm" webstripperlinkwas="ch35_08.htm" title="Centering Lines in a File ">35.8</A
>.</P
></LI
><li class="listitem"><p class="para">The next five articles are about <b class="emphasis.bold">processes and commands</B
>.
The <em class="emphasis">exec</EM
> command, article
<a class="xref" href="ch45_07.htm" webstripperlinkwas="ch45_07.htm" title="The exec Command ">45.7</A
>,
replaces the shell with another process; it can also be used to change
input/output redirection (see below).
The <em class="emphasis">trap</EM
> command can control how signals are passed to child processes;
see article
<a class="xref" href="ch45_08.htm" webstripperlinkwas="ch45_08.htm" title="Handling Signals to Child Processes ">45.8</A
>.
The <code class="literal">:</CODE
> (colon) operator evaluates its arguments and returns a
zero status&nbsp;- article
<a class="xref" href="ch45_09.htm" webstripperlinkwas="ch45_09.htm" title='The Unappreciated Bourne Shell  ":&quot; Operator'>45.9</A
>
explains why you should care.
UNIX keeps a file on-disk once it's been opened; as article
<a class="xref" href="ch45_10.htm" webstripperlinkwas="ch45_10.htm" title="Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup">45.10</A
>
explains, this has its ups and downs.
The <em class="emphasis">jot</EM
> command, article
<a class="xref" href="ch45_11.htm" webstripperlinkwas="ch45_11.htm" title="The Multipurpose jot Command ">45.11</A
>,
is useful for all kinds of operations with lists of numbers and characters.</P
></LI
><li class="listitem"><p class="para">Next are techniques for handling variables and parameters.
Parameter substitution, explained in article
<a class="xref" href="ch45_12.htm" webstripperlinkwas="ch45_12.htm" title="Parameter Substitution ">45.12</A
>,
is a compact way to test, set, and give default values for variables.
You can use the <code class="literal">$0</CODE
> parameter 
and UNIX links to make the same script
have multiple names and do multiple things; see article
<a class="xref" href="ch45_13.htm" webstripperlinkwas="ch45_13.htm" title="Save Disk Space and Programming: Multiple Names for a Program">45.13</A
>.
Article
<a class="xref" href="ch45_14.htm" webstripperlinkwas="ch45_14.htm" title="Finding the Last Command-Line Argument ">45.14</A
>
shows the easy way to get the last command-line argument.
Article
<a class="xref" href="ch45_15.htm" webstripperlinkwas="ch45_15.htm" title="How to Unset all Command-Line Parameters ">45.15</A
>
has an easy way to remove all the command-line arguments.</P
></LI
><li class="listitem"><p class="para">Four articles cover <em class="emphasis">sh</EM
> loops.
A <em class="emphasis">for</EM
> loop usually reads a list of single arguments into a single
shell variable.
Article
<a class="xref" href="ch45_16.htm" webstripperlinkwas="ch45_16.htm" title="Standard Input to a for Loop ">45.16</A
>
shows how to make the <em class="emphasis">for</EM
> loop read from standard input.
Article
<a class="xref" href="ch45_17.htm" webstripperlinkwas="ch45_17.htm" title="Making a for Loop with Multiple Variables ">45.17</A
>
has techniques for making a <em class="emphasis">for</EM
> loop set more than one variable.
The <em class="emphasis">dirname</EM
> and <em class="emphasis">basename</EM
> commands can be used to split pathnames
with a loop; see article
<a class="xref" href="ch45_18.htm" webstripperlinkwas="ch45_18.htm" title="Using basename and dirname ">45.18</A
>.
A <em class="emphasis">while</EM
> loop can have more than one command line at the start;
see article
<a class="xref" href="ch45_19.htm" webstripperlinkwas="ch45_19.htm" title="A while Loop with Several Loop Control Commands ">45.19</A
>.</P
></LI
><li class="listitem"><p class="para">Next is an assortment of articles about input/output.
Article
<a class="xref" href="ch45_20.htm" webstripperlinkwas="ch45_20.htm" title="Overview: Open Files and File Descriptors ">45.20</A
>
introduces open files and file descriptors&nbsp;- there's more to know about
standard input/output/error than you might have realized!
Article
<a class="xref" href="ch45_21.htm" webstripperlinkwas="ch45_21.htm" title="n&gt;&amp;m: Swap Standard Output and Standard Error ">45.21</A
>
has a look at file descriptor handling in the Bourne shell, swapping
standard output and standard error.
The shell can redirect the I/O from all commands in a loop at once;
article
<a class="xref" href="ch45_22.htm" webstripperlinkwas="ch45_22.htm" title="Handling Files Line-by-Line ">45.22</A
>
explains one use for this technique
and article
<a class="xref" href="ch45_23.htm" webstripperlinkwas="ch45_23.htm" title="The Ins and Outs of Redirected I/O Loops ">45.23</A
>
explains good and bad points of doing this.</P
></LI
><li class="listitem"><p class="para">The shell can read commands directly from a shell script file.
As article
<a class="xref" href="ch45_24.htm" webstripperlinkwas="ch45_24.htm" title="A Shell Can Read a Script from its Standard Input, But...">45.24</A
>
points out, a shell can also read commands from its standard input, but
that can cause some problems.
Article
<a class="xref" href="ch45_25.htm" webstripperlinkwas="ch45_25.htm" title="Shell Scripts On-the-Fly from Standard Input ">45.25</A
>
shows one place scripts from <em class="emphasis">stdin</EM
> are useful:
writing a script that creates
another script as it goes.</P
><p class="para">Next are two articles about miscellaneous I/O.
One gotcha with the here-document operator (for redirecting input from a
script file) is that the terminators are different in the Bourne and C shells;
article
<a class="xref" href="ch45_26.htm" webstripperlinkwas="ch45_26.htm" title="Quoted hereis Document Terminators: sh vs. csh ">45.26</A
>
explains.
Article
<a class="xref" href="ch45_27.htm" webstripperlinkwas="ch45_27.htm" title='Turn Off echo for "Secret&quot; Answers'>45.27</A
>
shows how to turn off echoing while your script reads a &quot;secret&quot;
answer such as a password.</P
></LI
><li class="listitem"><p class="para">Three articles-
<a class="xref" href="ch45_28.htm" webstripperlinkwas="ch45_28.htm" title="Quick Reference: expr ">45.28</A
>,
<a class="xref" href="ch45_29.htm" webstripperlinkwas="ch45_29.htm" title="Testing Characters in a String with expr ">45.29</A
>,
and
<a class="xref" href="ch45_30.htm" webstripperlinkwas="ch45_30.htm" title="Grabbing Parts of a String ">45.30</A
>-
show uses for the versatile <em class="emphasis">expr</EM
> expression-handling command.
Article
<a class="xref" href="ch45_31.htm" webstripperlinkwas="ch45_31.htm" title="Nested Command Substitution ">45.31</A
>.
covers multiple 
<span class="link">command substitution (<a class="linkend" href="ch09_16.htm" webstripperlinkwas="ch09_16.htm" title="Command Substitution ">9.16</A
>)</SPAN
>.
The <em class="emphasis">grabchars</EM
> program
in article
<a class="xref" href="ch45_32.htm" webstripperlinkwas="ch45_32.htm" title="A Better read Command: grabchars ">45.32</A
>
is similar to
<span class="link"><em class="emphasis">read</EM
> (<a class="linkend" href="ch44_13.htm" webstripperlinkwas="ch44_13.htm" title="read: Reading from the Keyboard ">44.13</A
>)</SPAN
>-
but <em class="emphasis">grabchars</EM
> doesn't need a RETURN after the answer;
<em class="emphasis">grabchars</EM
> also can prompt and do basic tests on the answer.</P
><p class="para">Article <a class="xref" href="ch45_33.htm" webstripperlinkwas="ch45_33.htm" title="Testing Two Strings with One case Statement ">45.33</A
>
shows a trick for making one
<span class="link"><em class="emphasis">case</EM
> statement (<a class="linkend" href="ch44_05.htm" webstripperlinkwas="ch44_05.htm" title="Test String Values with Bourne Shell case ">44.5</A
>)</SPAN
>
test two things at once.
Article
<a class="xref" href="ch45_34.htm" webstripperlinkwas="ch45_34.htm" title="Arrays in the Bourne Shell ">45.34</A
>
has a trick for simulating arrays in the Bourne Shell.
Article
<a class="xref" href="ch45_35.htm" webstripperlinkwas="ch45_35.htm" title="Using a Control Character in a Script ">45.35</A
>
uses <em class="emphasis">echo</EM
> and <em class="emphasis">tr</EM
> to get a control character in a script
without typing the literal character into the file. Finally, article
<a class="xref" href="ch45_36.htm" webstripperlinkwas="ch45_36.htm" title="Shell Lockfile ">45.36</A
>
has a simple technique for getting exclusive access to a file or other
system resource.</P
></LI
></UL
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">JP</SPAN
></P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch44_23.htm" webstripperlinkwas="ch44_23.htm" title="44.23 Reading Files with the . and source Commands "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 44.23 Reading Files with the . and source Commands " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch45_02.htm" webstripperlinkwas="ch45_02.htm" title="45.2 The Story of  : #  #! "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 45.2 The Story of  : #  #! " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">44.23 Reading Files with the . and source Commands </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">45.2 The Story of  : #  #! </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
