<html><head><title>[Chapter 45] 45.31 Nested Command Substitution </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:55:09Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch45_01.htm" webstripperlinkwas="ch45_01.htm" title="45. Shell Programming for the Initiated"><link rel="prev" href="ch45_30.htm" webstripperlinkwas="ch45_30.htm" title="45.30 Grabbing Parts of a String "><link rel="next" href="ch45_32.htm" webstripperlinkwas="ch45_32.htm" title="45.32 A Better read Command: grabchars "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch45_30.htm" webstripperlinkwas="ch45_30.htm" title="45.30 Grabbing Parts of a String "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 45.30 Grabbing Parts of a String " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 45<br>Shell Programming for the Initiated</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch45_32.htm" webstripperlinkwas="ch45_32.htm" title="45.32 A Better read Command: grabchars "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 45.32 A Better read Command: grabchars " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-9903">45.31 Nested Command Substitution </A
></H2
><p class="para"><a class="indexterm" name="AUTOID-54842"></A
><a class="indexterm" name="AUTOID-54845"></A
>Article
<a class="xref" href="ch09_16.htm" webstripperlinkwas="ch09_16.htm" title="Command Substitution ">9.16</A
>
introduces command substitution with a pair of backquotes (<code class="literal">``</CODE
>).
Let's review.
The shell runs a backquoted string as a command, then replaces the
string with its output.
Sometimes&nbsp;- though not as often&nbsp;- you'll want to use the results from
one backquoted string as arguments to another command, itself also
inside backquotes.
To do that, you need to nest the backquotes, to tell the shell which
command (which set of backquotes) should be done first, with its output
given to the second command.
This is tricky with backquotes; the Korn Shell introduced an easier
way that you'll see below.
Here's a simple example&nbsp;- the first command line uses nested backquotes,
and the next two commands show its parts:
[5]</P
><blockquote class="footnote"><p class="para">[5] True, this won't give the right answer after 1998.
True, the Korn shell has built-in arithmetic.
But this <em class="emphasis">is</EM
> a simple example!</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>echo &quot;Next year will be 19`expr \`date +%y\` + 1`.&quot;</B
></CODE
>
Next year will be 1997.
$ <code class="userinput"><b>date +%y</B
></CODE
>
96
$ <code class="userinput"><b>expr 96 + 1</B
></CODE
>
97</PRE
></BLOCKQUOTE
></P
><p class="para">The command to run first has escaped backquotes (<code class="literal">\`\`</CODE
>)
around it.
In the example above, that's the <code class="literal">date&nbsp;+%y</CODE
> command.
<code class="literal">date&nbsp;+%y</CODE
> outputs the year&nbsp;- in this case, <code class="literal">96</CODE
>&nbsp;- and that
value is passed to the <em class="emphasis">expr</EM
> command.
<em class="emphasis">expr</EM
> adds 96 and 1 to get 97.
Then that result (from the outer backquotes) is passed to <em class="emphasis">echo</EM
>,
on its command line, and <em class="emphasis">echo</EM
> prints the message.</P
><p class="para">Why does the inner command, inside the escaped backquotes
(<code class="literal">\`\`</CODE
>), run first?
It's because the backslash before the backquote
<span class="link">turns off the special meaning (<a class="linkend" href="ch08_14.htm" webstripperlinkwas="ch08_14.htm" title="Bourne Shell Quoting ">8.14</A
>)</SPAN
>
of the backquote.
So, when the shell first
<span class="link">evaluates the command line (<a class="linkend" href="ch08_05.htm" webstripperlinkwas="ch08_05.htm" title="Command-Line Evaluation ">8.5</A
>)</SPAN
>,
which backquotes does it see?
It sees the unescaped backquotes, the ones around the <code class="literal">expr</CODE
>
command, and the shell runs the command:</P
><p class="para"><blockquote class="screen"><pre class="screen">expr `date +%y` + 1</PRE
></BLOCKQUOTE
></P
><p class="para">But when the shell evaluates that command line, it sees the backquotes
in it (now unescaped) and runs <em class="emphasis">that</EM
> command-<code class="literal">date&nbsp;+%y</CODE
>.
The <code class="literal">date&nbsp;+%y</CODE
> command outputs <code class="literal">96</CODE
>.
Next, the shell can finish the command <code class="literal">expr&nbsp;96&nbsp;+&nbsp;1</CODE
>.
It outputs 97.
Then the <em class="emphasis">echo</EM
> command can print its message.</P
><p class="para"><a class="indexterm" name="AUTOID-54882"></A
>Whew.
If you use the Korn shell or <em class="emphasis">bash</EM
>, there's an easier way:
the <code class="literal">$(</CODE
><code class="replaceable"><i>command</I
></CODE
><code class="literal">)</CODE
> operators.
Use <code class="literal">$(</CODE
> before the command, where you would use an opening
backquote.
Put the <code class="literal">)</CODE
> after the command, in place of a closing backquote.
You don't have to escape these operators when you nest them.</P
><p class="para">Here's the previous example with <code class="literal">$(&nbsp;)</CODE
>, then a more
real-life example:</P
><p class="para"><table class="screen.co" border="1"><tr><th valign="TOP"><pre class="calloutlist">
&#13;
<a class="co" href="ch45_21.htm" webstripperlinkwas="ch45_21.htm" title="45.21 n&gt;&amp;m: Swap Standard Output and Standard Error ">2&gt;&amp;1</A
> 

&#13;</PRE
></TH
><td valign="TOP"><pre class="screen">
$ <code class="userinput"><b>echo &quot;Next year will be 19$(expr $(date +%y) + 1).&quot;</B
></CODE
>
Next year will be 1997.<a class="indexterm" name="AUTOID-54896"></A
>
$ <code class="userinput"><b>tarout=$(tar cf /dev/rst1 $(find . -type f -mtime -1 -print) 2&gt;&amp;1)</B
></CODE
>
    <i class="lineannotation">time passes...</I
>
$ echo &quot;$tarout&quot;
tar: ./files/145923: Permission denied</PRE
></TD
></TR
></TABLE
></P
><p class="para"><a class="indexterm" name="AUTOID-54903"></A
>The inner command&nbsp;- in this case, the
<span class="link"><em class="emphasis">find</EM
> (<a class="linkend" href="ch17_01.htm" webstripperlinkwas="ch17_01.htm#UPT-ART-7410" title="The find Command Is Great; The Problem Is Finding How to Use It">17.1</A
>)</SPAN
>
-is run first.
Its output, a list of filenames, is put on the command line of the
<span class="link"><em class="emphasis">tar</EM
> (<a class="linkend" href="ch20_01.htm" webstripperlinkwas="ch20_01.htm#UPT-ART-8024" title="tar in a Nutshell ">20.1</A
>)</SPAN
>
command.
Finally, the output of <em class="emphasis">tar</EM
> (in this case, an error message)
is stored in the <em class="emphasis">tarout</EM
> shell variable.</P
><p class="para">Beginners (and some long-time programmers too) might argue that you
should never nest command substitution because it's too confusing.
I think there are times nesting is clearer.
It's more compact and doesn't need temporary storage.
And it's not that hard to understand once you see what's happening.
There's another nice example in article
<a class="xref" href="ch38_13.htm" webstripperlinkwas="ch38_13.htm" title="Interactively Kill Processes Matching a Pattern ">38.13</A
>.</P
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">JP</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch45_30.htm" webstripperlinkwas="ch45_30.htm" title="45.30 Grabbing Parts of a String "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 45.30 Grabbing Parts of a String " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch45_32.htm" webstripperlinkwas="ch45_32.htm" title="45.32 A Better read Command: grabchars "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 45.32 A Better read Command: grabchars " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">45.30 Grabbing Parts of a String </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">45.32 A Better read Command: grabchars </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
