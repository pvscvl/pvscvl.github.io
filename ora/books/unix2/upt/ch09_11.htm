<html><head><title>[Chapter 9] 9.11 Repeating a Command with a foreach Loop </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:35:03Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch09_01.htm" webstripperlinkwas="ch09_01.htm" title="9. Saving Time on the Command Line"><link rel="prev" href="ch09_10.htm" webstripperlinkwas="ch09_10.htm" title="9.10 Filename Completion Isn't Always the Answer "><link rel="next" href="ch09_12.htm" webstripperlinkwas="ch09_12.htm" title="9.12 The Bourne Shell for Loop "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch09_10.htm" webstripperlinkwas="ch09_10.htm" title="9.10 Filename Completion Isn't Always the Answer "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 9.10 Filename Completion Isn't Always the Answer " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 9<br>Saving Time on the Command Line</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch09_12.htm" webstripperlinkwas="ch09_12.htm" title="9.12 The Bourne Shell for Loop "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 9.12 The Bourne Shell for Loop " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-7020">9.11 Repeating a Command with a foreach Loop </A
></H2
><p class="para"><a class="indexterm" name="AUTOID-10290"></A
><a class="indexterm" name="AUTOID-10293"></A
><a class="indexterm" name="AUTOID-10295"></A
>When some people need to repeat a command on several files, the first thing
they think of is C shell
<span class="link">history (<a class="linkend" href="ch11_05.htm" webstripperlinkwas="ch11_05.htm" title="My Favorite Is ^^ ">11.5</A
>)</SPAN
>:</P
><p class="para"><table class="screen.co" border="1"><tr><th valign="TOP"><pre class="calloutlist">
<a class="co" href="ch25_07.htm" webstripperlinkwas="ch25_07.htm" title="25.7 Show Non-Printing Characters with cat -v or od -c ">-v</A
> 






&#13;</PRE
></TH
><td valign="TOP"><pre class="screen">
% <code class="userinput"><b>cat -t -v /usr/fran/report | pg</B
></CODE
>
   ...
% <code class="userinput"><b>^fran/report^rob/file3</B
></CODE
>
cat -t -v /usr/rob/file3 | pg
   ...
% <code class="userinput"><b>^3^21</B
></CODE
>
cat -t -v /usr/rob/file21 | pg
   ...
%</PRE
></TD
></TR
></TABLE
></P
><p class="para">That kind of thing can be easier with the C shell's <em class="emphasis">foreach</EM
> loop.
(In the Bourne and Korn shells, use a
<span class="link"><em class="emphasis">for</EM
> (<a class="linkend" href="ch09_12.htm" webstripperlinkwas="ch09_12.htm" title="The Bourne Shell for Loop ">9.12</A
>)</SPAN
>
loop.)
You give the loop a list of the words that will change each time the command
line is run.
In this example, it's a list of filenames.
The loop will step through the words, one by one, storing a word into a
<span class="link">shell variable (<a class="linkend" href="ch06_08.htm" webstripperlinkwas="ch06_08.htm" title="Shell Variables ">6.8</A
>)</SPAN
>,
then running the command(s).
The loop goes on until it has read all the words.
For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>foreach file (/usr/fran/report /usr/rob/file3 /usr/rob/file21)</B
></CODE
>
? <code class="userinput"><b>cat -t -v $file | pg</B
></CODE
>
? <code class="userinput"><b>end</B
></CODE
>
   ...<em class="emphasis">Shell runs cat -t -v /usr/fran/report | pg</EM
>...
   ...<em class="emphasis">Shell runs cat -t -v /usr/rob/file3 | pg</EM
>...
   ...<em class="emphasis">Shell runs cat -t -v /usr/rob/file21 | pg</EM
>...
%</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-10319"></A
>
The question marks (<code class="literal">?</CODE
>) are
<span class="link">secondary prompts (<a class="linkend" href="ch09_13.htm" webstripperlinkwas="ch09_13.htm" title="Multiline Commands, Secondary Prompts ">9.13</A
>)</SPAN
>;
the C shell will keep printing them until you type the command <em class="emphasis">end</EM
>.
Then the loop runs.</P
><p class="para">The list between the parentheses doesn't have to be filenames.
Among other things, you can use
<span class="link">wildcards (<a class="linkend" href="ch01_16.htm" webstripperlinkwas="ch01_16.htm" title="Wildcards ">1.16</A
>)</SPAN
>,
<span class="link">backquotes (<a class="linkend" href="ch09_16.htm" webstripperlinkwas="ch09_16.htm" title="Command Substitution ">9.16</A
>)</SPAN
>
(command substitution),
<span class="link">variables (<a class="linkend" href="ch06_08.htm" webstripperlinkwas="ch06_08.htm" title="Shell Variables ">6.8</A
>, <a class="linkend" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm#UPT-ART-1170" title="What Environment Variables Are Good For ">6.1</A
>)</SPAN
>,
and the C shell's handy
<a class="indexterm" name="AUTOID-10329"></A
>
<span class="link">curly brace (<code class="literal">{}</CODE
>) operators (<a class="linkend" href="ch09_05.htm" webstripperlinkwas="ch09_05.htm" title="Build Strings with {&nbsp;} ">9.5</A
>)</SPAN
>.
For example, you could have typed the above loop this way:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>foreach file (/usr/fran/report /usr/rob/file{3,21})</B
></CODE
>
? <code class="userinput"><b>cat -t -v $file | pg</B
></CODE
>
? <code class="userinput"><b>end</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If you want the loop to stop before or after running each command, add the C
shell operator <code class="literal">$&lt;</CODE
>.
It reads keyboard input and waits for a 
RETURN.
In this case, you can probably ignore

the input; you'll use <code class="literal">$&lt;</CODE
> to
make the loop wait.
For example, to make the loop above prompt before each command line:</P
><p class="para"><table class="screen.co" border="1"><tr><th valign="TOP"><pre class="calloutlist">
&#13;
<a class="co" href="ch06_08.htm" webstripperlinkwas="ch06_08.htm" title="6.8 Shell Variables ">set</A
> 






&#13;</PRE
></TH
><td valign="TOP"><pre class="screen">
% <code class="userinput"><b>foreach file (/usr/fran/report /usr/rob/file{3,21})</B
></CODE
>
? <code class="userinput"><b>echo -n &quot;Press RETURN to see $file-&quot;</B
></CODE
>
? <code class="userinput"><b>set x=&quot;$&lt;&quot;</B
></CODE
>
? <code class="userinput"><b>cat -t -v $file | pg</B
></CODE
>
? <code class="userinput"><b>end</B
></CODE
>
Press RETURN to see /usr/fran/report- <kbd class="keycap">[RETURN]</KBD
>
   <em class="emphasis">Shell runs cat -t -v /usr/fran/report | pg</EM
>...
Press RETURN to see /usr/rob/file3- <kbd class="keycap">[RETURN]</KBD
>
   <em class="emphasis">Shell runs cat -t -v /usr/rob/file3 | pg</EM
>...
Press RETURN to see /usr/rob/file21- <kbd class="keycap">[RETURN]</KBD
>
   <em class="emphasis">Shell runs cat -t -v /usr/rob/file21 | pg</EM
>...</PRE
></TD
></TR
></TABLE
></P
><p class="para"><a class="indexterm" name="AUTOID-10357"></A
><a class="indexterm" name="AUTOID-10361"></A
>The loop parameters don't need to be filenames.
For instance, you could send a personalized
<span class="link">mail (<a class="linkend" href="ch01_33.htm" webstripperlinkwas="ch01_33.htm" title="UNIX Networking and Communications ">1.33</A
>)</SPAN
>
message to five people
this way:
[1]</P
><blockquote class="footnote"><p class="para">[1] If you're sending lots of mail messages with a loop, your system mailer
may get overloaded.
In that case, it's a good idea to put a command like
<span class="link"><code class="literal">sleep</CODE
>&nbsp;<code class="literal">5</CODE
> (<a class="linkend" href="ch40_02.htm" webstripperlinkwas="ch40_02.htm" title="Waiting a Little While: sleep ">40.2</A
>)</SPAN
>
on a separate line before the <code class="literal">end</CODE
>.
That will give the mailer five seconds to send each message.</P
></BLOCKQUOTE
><p class="para"><table class="screen.co" border="1"><tr><th valign="TOP"><pre class="calloutlist">
&#13;<a class="co" href="ch13_13.htm" webstripperlinkwas="ch13_13.htm" title='13.13 The "Filename&quot; - '>cat -</A
> &#13;</PRE
></TH
><td valign="TOP"><pre class="screen">
% <code class="userinput"><b>foreach person (John Cathy Agnes Brett Elma)</B
></CODE
>
? <code class="userinput"><b>echo &quot;Dear $person,&quot; | cat - formletter | mail $person</B
></CODE
>
? <code class="userinput"><b>end</B
></CODE
></PRE
></TD
></TR
></TABLE
></P
><p class="para">The first line of the first letter will be &quot;Dear John,&quot;; the second
letter &quot;Dear Cathy,&quot;; and so on.</P
><p class="para">Want to take this idea further?
It's a part of
<span class="link">shell programming (<a class="linkend" href="ch44_01.htm" webstripperlinkwas="ch44_01.htm#UPT-ART-0065" title="Everyone Should Learn Some Shell Programming ">44.1</A
>)</SPAN
>.
I usually
<span class="link">don't recommend (<a class="linkend" href="ch47_02.htm" webstripperlinkwas="ch47_02.htm" title="C Shell Programming Considered Harmful ">47.2</A
>)</SPAN
>
shell programming with the C shell,
but this is a handy technique to use interactively.</P
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">JP</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch09_10.htm" webstripperlinkwas="ch09_10.htm" title="9.10 Filename Completion Isn't Always the Answer "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 9.10 Filename Completion Isn't Always the Answer " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch09_12.htm" webstripperlinkwas="ch09_12.htm" title="9.12 The Bourne Shell for Loop "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 9.12 The Bourne Shell for Loop " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">9.10 Filename Completion Isn't Always the Answer </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">9.12 The Bourne Shell for Loop </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
