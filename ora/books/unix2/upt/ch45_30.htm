<html><head><title>[Chapter 45] 45.30 Grabbing Parts of a String </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:55:04Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch45_01.htm" webstripperlinkwas="ch45_01.htm" title="45. Shell Programming for the Initiated"><link rel="prev" href="ch45_29.htm" webstripperlinkwas="ch45_29.htm" title="45.29 Testing Characters in a String with expr "><link rel="next" href="ch45_31.htm" webstripperlinkwas="ch45_31.htm" title="45.31 Nested Command Substitution "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch45_29.htm" webstripperlinkwas="ch45_29.htm" title="45.29 Testing Characters in a String with expr "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 45.29 Testing Characters in a String with expr " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 45<br>Shell Programming for the Initiated</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch45_31.htm" webstripperlinkwas="ch45_31.htm" title="45.31 Nested Command Substitution "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 45.31 Nested Command Substitution " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-0232">45.30 Grabbing Parts of a String </A
></H2
><p class="para"><a class="indexterm" name="AUTOID-54621"></A
><a class="indexterm" name="AUTOID-54624"></A
><a class="indexterm" name="AUTOID-54627"></A
>How can you parse (split, search) a string of text to find the last
word, the second column, and so on?
There are a lot of different ways.
Pick the one that works best for you&nbsp;- or invent another one!
(UNIX has slots of ways to work with strings of text.)</P
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-232-SECT-1.1">45.30.1 Matching with expr </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-54633"></A
><a class="indexterm" name="AUTOID-54636"></A
><a class="indexterm" name="AUTOID-54639"></A
><a class="indexterm" name="AUTOID-54642"></A
><a class="indexterm" name="AUTOID-54645"></A
><a class="indexterm" name="AUTOID-54648"></A
><a class="indexterm" name="AUTOID-54652"></A
>The
<span class="link"><em class="emphasis">expr</EM
> command (<a class="linkend" href="ch45_28.htm" webstripperlinkwas="ch45_28.htm" title="Quick Reference: expr ">45.28</A
>)</SPAN
>
can grab part of a string with a regular expression.
The example below is from a shell script whose last command-line argument
is a filename.
The two commands below use <em class="emphasis">expr</EM
> to grab the last argument and all
arguments except the last one.
The <code class="literal">&quot;$*&quot;</CODE
> gives <em class="emphasis">expr</EM
> a list of all command-line arguments
in a single word.
(Using
<span class="link"><code class="literal">&quot;$@&quot;</CODE
> (<a class="linkend" href="ch44_15.htm" webstripperlinkwas="ch44_15.htm" title="Handling Command-Line Arguments in Shell Scripts ">44.15</A
>)</SPAN
>
here wouldn't work because it gives individually quoted arguments.
<em class="emphasis">expr</EM
> needs all arguments in one word.)</P
><p class="para"><blockquote class="screen"><pre class="screen">last=`expr &quot;$*&quot; : '.* \(.*\)'`    # LAST ARGUMENT
first=`expr &quot;$*&quot; : '\(.*\) .*'`    # ALL BUT LAST ARGUMENT</PRE
></BLOCKQUOTE
></P
><p class="para">Let's look at the regular expression that gets the last word.
The leading part of the expression, <code class="literal">.*&nbsp;</CODE
>, matches as many
characters as it can, followed by a space.
This includes all words up to and including the last space.
After that, the end of the expression, <code class="literal">\(.*\)</CODE
>, matches the
last word.</P
><p class="para">The regular expression that grabs the first words is the same as the
previous one&nbsp;- but I've moved the <code class="literal">\(&nbsp;\)</CODE
> pair.
Now it grabs all words up to but not including the last space.
The end of the regular expression, <code class="literal">&nbsp;.*</CODE
>, matches the last space
and last word&nbsp;- and <em class="emphasis">expr</EM
> ignores them.
So the final <code class="literal">.*</CODE
> really isn't needed here (though the space is).
I've included that final <code class="literal">.*</CODE
> because it follows from the first
example.</P
><p class="para"><a class="indexterm" name="AUTOID-54676"></A
><a class="indexterm" name="AUTOID-54679"></A
><em class="emphasis">expr</EM
> is great when you want to split a string into just two parts.
The <code class="literal">.*</CODE
> also makes <em class="emphasis">expr</EM
> good for skipping a variable number
of words when you don't know how many words a string will have.
But <em class="emphasis">expr</EM
> is lousy for getting, say, the fourth word in a string.
And it's almost useless for handling more than one line of text at a time.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-232-SECT-1.2">45.30.2 Using echo with awk, colrm, or cut </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-54689"></A
><a class="indexterm" name="AUTOID-54692"></A
><a class="indexterm" name="AUTOID-54695"></A
><a class="indexterm" name="AUTOID-54698"></A
><a class="indexterm" name="AUTOID-54701"></A
><a class="indexterm" name="AUTOID-54704"></A
><a class="indexterm" name="AUTOID-54707"></A
><em class="emphasis">awk</EM
>
can split lines into words.
But <em class="emphasis">awk</EM
> has a lot of overhead and can take some time to execute,
especially on a busy system.
The
<span class="link"><em class="emphasis">cut</EM
> (<a class="linkend" href="ch35_14.htm" webstripperlinkwas="ch35_14.htm" title="Cutting Columns or Fields with cut ">35.14</A
>)</SPAN
>
and
<span class="link"><em class="emphasis">colrm</EM
> (<a class="linkend" href="ch35_15.htm" webstripperlinkwas="ch35_15.htm" title="Cutting Columns with colrm ">35.15</A
>)</SPAN
>
commands start more quickly than <em class="emphasis">awk</EM
> but they can't do as much.</P
><p class="para">All of those utilities are designed to handle multiple lines of text.
You can tell <em class="emphasis">awk</EM
> to handle a single line with its pattern-matching
operators and its <em class="emphasis">NR</EM
> variable.
You can also run those utilities with a single line of text, fed to the
standard input through a pipe from
<span class="link"><em class="emphasis">echo</EM
> (<a class="linkend" href="ch08_06.htm" webstripperlinkwas="ch08_06.htm" title="Output Command-Line Arguments ">8.6</A
>)</SPAN
>.
For example, to get the third field from a colon-separated string:</P
><p class="para"><blockquote class="screen"><pre class="screen">string=&quot;this:is:just:a:dummy:string&quot;
field3_awk=`echo &quot;$string&quot; | awk -F: '{print $3}'`
field3_cut=`echo &quot;$string&quot; | cut -d: -f3`</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-54725"></A
>Let's combine two <em class="emphasis">echo</EM
> commands.
One sends text to <em class="emphasis">awk</EM
>, <em class="emphasis">cut</EM
>, or <em class="emphasis">colrm</EM
> through a pipe;
the utility ignores all the text from columns 1-24, then prints columns 25
to the end of the variable <em class="emphasis">text</EM
>.
The outer <em class="emphasis">echo</EM
> prints <em class="emphasis">The answer is</EM
> and that answer.
Notice that the inner double quotes are escaped with backslashes
to keep the Bourne shell from interpreting them before the inner
<em class="emphasis">echo</EM
> runs:</P
><p class="para"><blockquote class="screen"><pre class="screen">echo &quot;The answer is `echo \&quot;$text\&quot; | awk '{print substr($0,25)}'`&quot;
echo &quot;The answer is `echo \&quot;$text\&quot; | cut -c25-`&quot;
echo &quot;The answer is `echo \&quot;$text\&quot; | colrm 1 24`&quot;</PRE
></BLOCKQUOTE
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-232-SECT-1.3">45.30.3 Using set </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-54741"></A
><a class="indexterm" name="AUTOID-54744"></A
><a class="indexterm" name="AUTOID-54747"></A
>The Bourne shell
<span class="link"><em class="emphasis">set</EM
> (<a class="linkend" href="ch44_19.htm" webstripperlinkwas="ch44_19.htm" title="The Bourne Shell set Command ">44.19</A
>)</SPAN
>
command can be used to parse a single-line string and
store it in the
<span class="link">command-line parameters (<a class="linkend" href="ch44_15.htm" webstripperlinkwas="ch44_15.htm" title="Handling Command-Line Arguments in Shell Scripts ">44.15</A
>)</SPAN
>
<code class="literal">&quot;$@&quot;</CODE
>, <code class="literal">$*</CODE
>, <code class="literal">$1</CODE
>, <code class="literal">$2</CODE
>, and so on.
Then you can also loop through the words with a
<span class="link"><em class="emphasis">for</EM
> loop (<a class="linkend" href="ch44_16.htm" webstripperlinkwas="ch44_16.htm" title="Handling Command-Line Arguments with a for Loop ">44.16</A
>)</SPAN
>
and use everything else the shell has for dealing with command-line
parameters.
Also, you can set the
<span class="link"><em class="emphasis">IFS</EM
> variable (<a class="linkend" href="ch35_21.htm" webstripperlinkwas="ch35_21.htm" title="Using IFS to Split Strings ">35.21</A
>)</SPAN
>
to control how the shell splits
the string.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-232-SECT-1.4">45.30.4 Using sed </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-54765"></A
><a class="indexterm" name="AUTOID-54768"></A
><a class="indexterm" name="AUTOID-54771"></A
>The UNIX
<span class="link"><em class="emphasis">sed</EM
> (<a class="linkend" href="ch34_24.htm" webstripperlinkwas="ch34_24.htm" title="Quick Reference: sed ">34.24</A
>)</SPAN
>
utility is good at parsing input that you may or may not be able to
split into words otherwise, at finding a single line of text in a group and
outputting it, and many other things.
In this example, I want to get the percentage-used of the filesystem
mounted on <em class="emphasis">/home</EM
>.
That information is buried in the output of the
<span class="link"><em class="emphasis">df</EM
> (<a class="linkend" href="ch24_09.htm" webstripperlinkwas="ch24_09.htm" title="How Much Disk Space? ">24.9</A
>)</SPAN
>
command.
On my system, <em class="emphasis">df</EM
> output looks like:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>df</B
></CODE
>
Filesystem            kbytes    used   avail capacity  Mounted on
   ...
/dev/sd3c            1294854  914230  251139    78%    /work
/dev/sd4c             597759  534123    3861    99%    /home
   ...</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-54784"></A
>I want the number <em class="emphasis">99</EM
> from the line ending with <em class="emphasis">/home</EM
>.
The <em class="emphasis">sed</EM
> address <code class="literal">/&nbsp;\/home$/</CODE
> will find that line (including a
space before the <em class="emphasis">/home</EM
> makes sure the address doesn't match a
line ending with <em class="emphasis">/something/home</EM
>).
The <em class="emphasis">-n</EM
> option keeps <em class="emphasis">sed</EM
> from printing any lines except
the line we ask it to print (with its <em class="emphasis">p</EM
> command).
I know that the &quot;capacity&quot; is the only word on the line that ends
with a percent sign (<code class="literal">%</CODE
>).
A space after the first <code class="literal">.*</CODE
> makes sure that <code class="literal">.*</CODE
> doesn't
&quot;eat&quot; the first digit of the number that we want to match by <code class="literal">[0-9]</CODE
>.
The <em class="emphasis">sed</EM
>
<span class="link">escaped-parenthesis operators (<a class="linkend" href="ch34_10.htm" webstripperlinkwas="ch34_10.htm" title="Referencing Portions of a Search String ">34.10</A
>)</SPAN
>
grab that number.
Here goes:</P
><p class="para"><blockquote class="screen"><pre class="screen">usage=`df | sed -n '/ \/home$/s/.* \([0-9][0-9]*\)%.*/\1/p'`</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-54805"></A
><a class="indexterm" name="AUTOID-54808"></A
><a class="indexterm" name="AUTOID-54811"></A
><a class="indexterm" name="AUTOID-54814"></A
>Combining <em class="emphasis">sed</EM
> with
<span class="link"><em class="emphasis">eval</EM
> (<a class="linkend" href="ch08_10.htm" webstripperlinkwas="ch08_10.htm" title="eval: When You Need Another Chance ">8.10</A
>)</SPAN
>
lets you set several shell variables
at once from parts of the same line.
Here's a command line that sets two shell variables from the <em class="emphasis">df</EM
>
output:</P
><p class="para"><blockquote class="screen"><pre class="screen">eval `df |
sed -n '/ \/home$/s/^[^ ]*  *\([0-9]*\)  *\([0-9]*\).*/kb=\1 u=\2/p'`</PRE
></BLOCKQUOTE
></P
><p class="para">The left-hand side of that substitution command has a regular expression
that uses <em class="emphasis">sed</EM
>'s escaped parenthesis operators.
They grab the &quot;kbytes&quot; and &quot;used&quot; columns from the <em class="emphasis">df</EM
>
output.
The right-hand side outputs the two <em class="emphasis">df</EM
> values with Bourne shell
variable-assignment

commands to set the <em class="emphasis">kb</EM
> and <em class="emphasis">u</EM
> variables.
After <em class="emphasis">sed</EM
> finishes, the resulting command line looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">eval kb=597759 u=534123</PRE
></BLOCKQUOTE
></P
><p class="para">Now <code class="literal">$kb</CODE
> will give you <em class="emphasis">597759</EM
>
and <code class="literal">$u</CODE
> contains <em class="emphasis">534123</EM
>.</P
></DIV
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">JP</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch45_29.htm" webstripperlinkwas="ch45_29.htm" title="45.29 Testing Characters in a String with expr "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 45.29 Testing Characters in a String with expr " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch45_31.htm" webstripperlinkwas="ch45_31.htm" title="45.31 Nested Command Substitution "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 45.31 Nested Command Substitution " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">45.29 Testing Characters in a String with expr </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">45.31 Nested Command Substitution </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
