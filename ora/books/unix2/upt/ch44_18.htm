<html><head><title>[Chapter 44] 44.18 Standard Command-Line Parsing </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:53:57Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch44_01.htm" webstripperlinkwas="ch44_01.htm" title="44. Shell Programming for the Uninitiated"><link rel="prev" href="ch44_17.htm" webstripperlinkwas="ch44_17.htm" title="44.17 Handling Arguments with while and shift "><link rel="next" href="ch44_19.htm" webstripperlinkwas="ch44_19.htm" title="44.19 The Bourne Shell set Command "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch44_17.htm" webstripperlinkwas="ch44_17.htm" title="44.17 Handling Arguments with while and shift "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 44.17 Handling Arguments with while and shift " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 44<br>Shell Programming for the Uninitiated</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch44_19.htm" webstripperlinkwas="ch44_19.htm" title="44.19 The Bourne Shell set Command "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 44.19 The Bourne Shell set Command " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-8009">44.18 Standard Command-Line Parsing </A
></H2
><p class="para"><a class="indexterm" name="AUTOID-51642"></A
><a class="indexterm" name="AUTOID-51645"></A
>Most shell scripts need to handle command-line arguments&nbsp;- options, filenames,
and so on.
Articles
<a class="xref" href="ch44_15.htm" webstripperlinkwas="ch44_15.htm" title="Handling Command-Line Arguments in Shell Scripts ">44.15</A
>,
<a class="xref" href="ch44_16.htm" webstripperlinkwas="ch44_16.htm" title="Handling Command-Line Arguments with a for Loop ">44.16</A
>,
and
<a class="xref" href="ch44_17.htm" webstripperlinkwas="ch44_17.htm" title="Handling Arguments with while and shift ">44.17</A
>
show how to parse command lines with any Bourne shell.
Those methods have two problems.
You can't combine arguments with a single dash, e.g., 
<code class="literal">-abc</CODE
> instead of <code class="literal">-a&nbsp;-b&nbsp;-c</CODE
>.
You also can't specify arguments to options
without a space in between, e.g., <code class="literal">-b</CODE
><code class="replaceable"><i>arg</I
></CODE
> in addition to
<code class="literal">-b&nbsp;</CODE
><code class="replaceable"><i>arg</I
></CODE
>.
[6]</P
><blockquote class="footnote"><p class="para">[6] Although most UNIX commands allow this, it is actually contrary to the
Command Syntax Standard Rules in <em class="emphasis">intro</EM
> of the User's Manual.
The version of <em class="emphasis">getopt</EM
> on the CD-ROM supports this syntax.
The <em class="emphasis">getopts</EM
> we've seen also support this, but may not in future releases.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-51663"></A
>Your Bourne shell may have a built-in command named <em class="emphasis">getopts</EM
>.
constraints.[7]<em class="emphasis">getopts</EM
> lets you deal with multiple complex options without these
To find out whether your shell has <em class="emphasis">getopts</EM
>,
see your on-line <em class="emphasis">sh</EM
> or <em class="emphasis">getopts</EM
>(1) manual page.</P
><blockquote class="footnote"><p class="para">[7] Both <em class="emphasis">bash</EM
> and <em class="emphasis">ksh</EM
> have it.
<em class="emphasis">getopts</EM
> replaces the old command <em class="emphasis">getopt</EM
>; it
is better integrated into the shell's syntax and runs more
efficiently.
C programmers will recognize <em class="emphasis">getopts</EM
> as very similar
to the standard library routine <em class="emphasis">getopt</EM
>(3).</P
></BLOCKQUOTE
><table class="para.programreference" border="1"><tr><th valign="TOP"><a class="programreference" href="examples/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/examples/index.htm" title="getopt">getopt</A
><br></TH
><td valign="TOP">If your shell doesn't have <em class="emphasis">getopts</EM
>, you can use the command named
<em class="emphasis">getopt</EM
> on the CD-ROM.

<em class="emphasis">getopts</EM
> works differently from <em class="emphasis">getopt</EM
>; we won't cover it here.</TD
></TR
></TABLE
><p class="para"><em class="emphasis">getopt</EM
> takes two or more arguments.<a class="indexterm" name="AUTOID-51685"></A
><a class="indexterm" name="AUTOID-51687"></A
><a class="indexterm" name="AUTOID-51690"></A
>
The first
is a string that can contain letters
and colons (<code class="literal">:</CODE
>).
Each letter names a valid option; if a letter is followed
by a colon, the option requires an argument.
The second and following arguments are the original command-line
options; you'll usually give
<span class="link"><code class="literal">&quot;$@&quot;</CODE
> (<a class="linkend" href="ch44_15.htm" webstripperlinkwas="ch44_15.htm" title="Handling Command-Line Arguments in Shell Scripts ">44.15</A
>)</SPAN
>
to pass all the arguments to <em class="emphasis">getopt</EM
>.</P
><p class="para"><a class="indexterm" name="AUTOID-51699"></A
><a class="indexterm" name="AUTOID-51702"></A
><em class="emphasis">getopt</EM
> picks each
option off the command line, checks to see if the option is valid,
and writes the correct option to its standard output.
If an option has an argument, <em class="emphasis">getopt</EM
> writes the argument after its
option.
When <em class="emphasis">getopt</EM
> finds the first non-option argument (the first
argument that doesn't start with a <code class="literal">-</CODE
> character), it outputs
two dashes (<code class="literal">-</CODE
>) and the rest of the arguments.
If <em class="emphasis">getopt</EM
> finds an invalid option, or an option that should have
an argument but doesn't, it prints an error message and returns a non-zero
<span class="link">status (<a class="linkend" href="ch44_07.htm" webstripperlinkwas="ch44_07.htm" title="Exit Status of UNIX Processes ">44.7</A
>)</SPAN
>.</P
><p class="para">Your script can use a loop to parse the <em class="emphasis">getopt</EM
> output.
Here's an example script named <em class="emphasis">opttest</EM
> that shows how
<em class="emphasis">getopt</EM
> works.</P
><p class="para"><table class="screen.co" border="1"><tr><th valign="TOP"><pre class="calloutlist">
&#13;
<a class="co" href="ch44_09.htm" webstripperlinkwas="ch44_09.htm" title="44.9 Testing Your Success ">||</A
> <a class="co" href="ch13_08.htm" webstripperlinkwas="ch13_08.htm" title="13.8 Using {list} to Group Bourne Shell Commands ">{</A
> 





<a class="co" href="ch45_09.htm" webstripperlinkwas="ch45_09.htm" title='45.9 The Unappreciated Bourne Shell  ":&quot; Operator'>:</A
> 








&#13;</PRE
></TH
><td valign="TOP"><pre class="screen">
<a class="indexterm" name="AUTOID-51719"></A
><a class="indexterm" name="AUTOID-51722"></A
><a class="indexterm" name="AUTOID-51724"></A
><a class="indexterm" name="AUTOID-51727"></A
><a class="indexterm" name="AUTOID-51730"></A
>
#!/bin/sh
set -- `getopt &quot;ab:&quot; &quot;$@&quot;` || {
    echo &quot;Usage: `basename $0` [-a] [-b name] [files]&quot; 1&gt;&amp;2
    exit 1
}
echo &quot;Before loop, command line has: $*&quot;
aflag=0  name=NONE
while :
do
    case &quot;$1&quot; in
    -a) aflag=1 ;;
    -b) shift; name=&quot;$1&quot; ;;
    --) break ;;
    esac
    shift
done
shift    # REMOVE THE TRAILING --
echo &quot;aflag=$aflag / name=$name / Files are $*&quot;</PRE
></TD
></TR
></TABLE
></P
><p class="para">The script has two legal options.
The <em class="emphasis">-a</EM
> option sets the variable named <em class="emphasis">aflag</EM
> to <code class="literal">1</CODE
>.
The <em class="emphasis">-b</EM
> option takes a single argument; the argument is stored
in the variable named <em class="emphasis">name</EM
>.
Any other arguments are filenames.</P
><p class="para"><a class="indexterm" name="AUTOID-51743"></A
><a class="indexterm" name="AUTOID-51746"></A
><a class="indexterm" name="AUTOID-51749"></A
>The script starts by running <em class="emphasis">getopt</EM
> inside
<span class="link">backquotes (<a class="linkend" href="ch09_16.htm" webstripperlinkwas="ch09_16.htm" title="Command Substitution ">9.16</A
>)</SPAN
>-
and using the
<span class="link"><em class="emphasis">set</EM
> (<a class="linkend" href="ch44_19.htm" webstripperlinkwas="ch44_19.htm" title="The Bourne Shell set Command ">44.19</A
>)</SPAN
>
command to replace the command-line arguments with the <em class="emphasis">getopt</EM
> output.
The first argument to <em class="emphasis">set</EM
>,
<span class="link"><code class="literal">-</CODE
> (two dashes) (<a class="linkend" href="ch44_19.htm" webstripperlinkwas="ch44_19.htm" title="The Bourne Shell set Command ">44.19</A
>)</SPAN
>,
is important:
it makes sure that <em class="emphasis">set</EM
> passes the script's options to <em class="emphasis">getopt</EM
>
instead of treating them as options to the shell itself.
An <em class="emphasis">echo</EM
> command shows the output of <em class="emphasis">getopt</EM
>.
Then the loop parses the <em class="emphasis">getopt</EM
> output, setting shell variables
as it goes.
When the loop finds the <code class="literal">-</CODE
> argument from <em class="emphasis">getopt</EM
>, it quits and
leaves the remaining filenames (if any) in the command-line arguments.
A second <em class="emphasis">echo</EM
> shows what's in the shell variables and on the
command line after the loop.
Here are a few examples:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>opttest</B
></CODE
>
Before loop, command line has: -- 
aflag=0 / name=NONE / Files are 
% <code class="userinput"><b>opttest -b file1 -a file2 file3</B
></CODE
>
Before loop, command line has: -b file1 -a -- file2 file3
aflag=1 / name=file1 / Files are file2 file3
% <code class="userinput"><b>opttest -q -b file1</B
></CODE
>
getopt: illegal option -- q
Usage: opttest [-a] [-b name] [files]
% <code class="userinput"><b>opttest -bfile1</B
></CODE
>
Before loop, command line has: -b file1 --
aflag=0 / name=file1 / Files are 
% <code class="userinput"><b>opttest -ab</B
></CODE
>
getopt: option requires an argument -- b
Usage: opttest [-a] [-b name] [files]</PRE
></BLOCKQUOTE
></P
><p class="para">The advantages of <em class="emphasis">getopt</EM
> are that it minimizes extra code
necessary to process options and fully supports the standard UNIX option
syntax (as specified in <em class="emphasis">intro</EM
> of the User's Manual).</P
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">JP</SPAN
>, <span class="authorinitials">BR</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch44_17.htm" webstripperlinkwas="ch44_17.htm" title="44.17 Handling Arguments with while and shift "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 44.17 Handling Arguments with while and shift " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch44_19.htm" webstripperlinkwas="ch44_19.htm" title="44.19 The Bourne Shell set Command "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 44.19 The Bourne Shell set Command " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">44.17 Handling Arguments with while and shift </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">44.19 The Bourne Shell set Command </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
