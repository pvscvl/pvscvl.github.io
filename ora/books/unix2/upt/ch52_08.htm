<html><head><title>[Chapter 52] 52.8 Building Programs from Source Code </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:58:49Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch52_01.htm" webstripperlinkwas="ch52_01.htm" title="52. What's on the Disc"><link rel="prev" href="ch52_07.htm" webstripperlinkwas="ch52_07.htm" title="52.7 Other Ways to Get the Software "><link rel="next" href="ch52_09.htm" webstripperlinkwas="ch52_09.htm" title="52.9 Software Support from RTR "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch52_07.htm" webstripperlinkwas="ch52_07.htm" title="52.7 Other Ways to Get the Software "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 52.7 Other Ways to Get the Software " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 52<br>What's on the Disc</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch52_09.htm" webstripperlinkwas="ch52_09.htm" title="52.9 Software Support from RTR "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 52.9 Software Support from RTR " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-3840">52.8 Building Programs from Source Code </A
></H2
><p class="para"><a class="indexterm" name="UPT-ART-3840-IX-C-LANGUAGE-SOURCE-CODE"></A
><a class="indexterm" name="UPT-ART-3840-IX-SOFTWARE-SOURCE-CODE"></A
>The programs on the disc are supplied in binary form for the most
popular UNIX platforms, as listed in article
<a class="xref" href="ch52_03.htm" webstripperlinkwas="ch52_03.htm" title="Shrink-Wrapped Software for UNIX ">52.3</A
>.
But we also supply C source code for those of you who are on unsupported
platforms.</P
><p class="para">Now, don't run away.
You don't have to be a C programmer to 
compile these sources.
I've never written a C program in my
life, and I compile public domain software all the time.
The CD-ROM provides build scripts for each of the packages,
so many of you can just run the script and have everything installed
automatically.  </P
><p class="para">If the build scripts don't work, the CD-ROM also has
a script to copy the sources to your local hard disk.
Although we can't promise that you'll be able to build the
sources on your own without a hitch, this article includes some
explanation of how to build sources without needing to learn how
to program in C.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-3840-SECT-1.1">52.8.1 Running the Build Scripts </A
></H3
><p class="para">Before you do anything, try out the <em class="emphasis">build</EM
> scripts.
You might be able to get away without knowing anything at 
all about the build process.</P
><p class="para">To build programs from source code, first mount the CD-ROM as
described in article
<a class="xref" href="ch52_05.htm" webstripperlinkwas="ch52_05.htm" title="Using the Power Tools CD-ROM ">52.5</A
>.</P
><p class="para">Each package on the CD-ROM that has source code can be compiled with the
&quot;build&quot; script.
The build script will copy the files off the CD into your current
directory, compile, and install them.</P
><p class="para">As the CD-ROM is read-only, you must use a directory on some other
disk for the build.
For example, if you wanted to build the &quot;compress&quot;
package, a directory
called <em class="emphasis">compress</EM
> will be created in the current directory when the
build script is run.
The build script has default
settings for the directory to which the source code will be copied, 
the directory in which the package will be installed, the directory
in which the &quot;shareable&quot; portion of the package will be installed, and
a &quot;prefix&quot; for the shareable directories.
These settings can
be overridden by the following 
<span class="link">environment variables (<a class="linkend" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm#UPT-ART-1170" title="What Environment Variables Are Good For ">6.1</A
>)</SPAN
>:<a class="indexterm" name="AUTOID-63240"></A
></P
><dl class="variablelist"><dt class="term">SOURCEDIR</DT
><dd class="listitem"><p class="para">This is where the source code for the package resides on the CD-ROM.
The build script tries to determine this automatically, so you
should not have set <em class="emphasis">SOURCEDIR</EM
> unless you are using the
build script somewhere other than the CD-ROM.<a class="indexterm" name="AUTOID-63248"></A
></P
></DD
><dt class="term">INSTALLDIR</DT
><dd class="listitem"><p class="para">This is the directory where the package will be installed.
It is set to
<em class="emphasis">/usr/local</EM
> by default.
For example, to change <em class="emphasis">INSTALLDIR</EM
> to <em class="emphasis">/opt</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>setenv INSTALLDIR /opt</B
></CODE
>   <i class="lineannotation">csh</I
>
$ <code class="userinput"><b>INSTALLDIR=/opt ; export INSTALLDIR</B
></CODE
>   <i class="lineannotation">sh</I
></PRE
></BLOCKQUOTE
></P
><p class="para"></P
></DD
><dt class="term">INSTALLSHAREDIR</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-63268"></A
>This is the directory where &quot;shareable&quot; portions of the package will be
installed (<em class="emphasis">/usr/local/share</EM
> by default).
You can set it to the 
same value as <em class="emphasis">INSTALLDIR</EM
> if you want them in the same location.<a class="indexterm" name="AUTOID-63272"></A
></P
></DD
><dt class="term">SHAREPREFIX</DT
><dd class="listitem"><p class="para">This &quot;prefix&quot; will be prepended to the directory names for 
<em class="emphasis">lib</EM
>, <em class="emphasis">include</EM
>, <em class="emphasis">spool</EM
>, and <em class="emphasis">bin</EM
>.
There is no
default setting, but you could use <em class="emphasis">s</EM
> if you wanted to conform
to the same scheme used by the &quot;install&quot; program to name shareable
directories <em class="emphasis">slib</EM
>, <em class="emphasis">sinclude</EM
>, <em class="emphasis">sspool</EM
>, and <em class="emphasis">sbin</EM
>.</P
></DD
></DL
><p class="para">By default, the files generated by the build process will not be removed.
If you set the <em class="emphasis">RM</EM
> variable before running the build, the entire build
directory will be removed once the build finishes:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>setenv RM true</B
></CODE
>   <i class="lineannotation">csh</I
>
$ <code class="userinput"><b>RM=true ; export RM</B
></CODE
>   <i class="lineannotation">sh</I
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-63296"></A
>For a list of the available packages, run the <em class="emphasis">build.pt</EM
> script 
in the CD-ROM mount directory.
The actual name of the script depends
on your operating system (as described in article
<a class="xref" href="ch52_05.htm" webstripperlinkwas="ch52_05.htm" title="Using the Power Tools CD-ROM ">52.5</A
>),
but assuming that the CD-ROM is mounted on <em class="emphasis">/cdrom</EM
>, it is likely
to be one of the following commands:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>/cdrom/BUILD.PT\;1</B
></CODE
>
% <code class="userinput"><b>/cdrom/BUILD.PT</B
></CODE
>
% <code class="userinput"><b>/cdrom/build.pt\;1</B
></CODE
>
% <code class="userinput"><b>/cdrom/build.pt</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The command will print a list similar to the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">bash         bsdtar       bsplit       calen        cpmod        cvtbase
delete       diff         ediff        emacs        fgrep        fileutils
find         gawk         getopt       glimpse      grabchars    grep
   ...</PRE
></BLOCKQUOTE
></P
><p class="para">To build one of these packages, run the same command followed
by the package name.
For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>/cdrom/build.pt bash</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The build script will copy the package to the current directory,
compile, and install the package according to the values of the
environment variables.  For this example, the shareable and
non-shareable portions of the package are combined.</P
><p class="para"><blockquote class="screen"><pre class="screen">% /archive/cdrom/BUILD.PT jot
BUILD script provided by Ready-to-Run Software, Inc.
Copyright 1997 Ready-to-Run Software, Inc. All Rights Reserved.
Assuming CDROM   is mounted at /archive/cdrom
Assuming MACHINE is ALPHA
Assuming SOURCEDIR is /archive/cdrom/SOURCES
Ignore any errors about directories already existing
tools/
tools/BUGS
tools/Makefile
tools/jot.c
tools/lam.c
tools/rs.c
cc -O -o jot jot.c</PRE
></BLOCKQUOTE
></P
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-3840-SECT-1.1.1">52.8.1.1 Missing Programs </A
></H4
><p class="para">Some of the build scripts expect non-standard programs to be installed.
Some of these come on the CD-ROM:</P
><dl class="variablelist"><dt class="term"><em class="emphasis">patch</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-63326"></A
>Several packages depend on the
<span class="link"><em class="emphasis">patch</EM
> (<a class="linkend" href="ch33_09.htm" webstripperlinkwas="ch33_09.htm" title="patch: Generalized Updating of Files that Differ ">33.9</A
>)</SPAN
>
program to apply &quot;patches&quot; or &quot;diffs&quot; to source
code.
This is the primary method of updating source code without replacing
the entire file.</P
></DD
><dt class="term"><em class="emphasis">perl</EM
></DT
><dd class="listitem"><p class="para"><span class="link">Perl (<a class="linkend" href="ch37_01.htm" webstripperlinkwas="ch37_01.htm#UPT-ART-5560" title="What We Do and Don't Tell You About Perl ">37.1</A
>)</SPAN
><a class="indexterm" name="AUTOID-63336"></A
>
is a scripting language used by several packages, including the install
and build scripts.</P
></DD
><dt class="term"><em class="emphasis">unshar</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-63343"></A
>The <em class="emphasis">unshar</EM
> program is needed to unpack
<span class="link">shell archive files (<a class="linkend" href="ch19_03.htm" webstripperlinkwas="ch19_03.htm" title="unshar: Unarchive a Shell Archive ">19.3</A
>)</SPAN
>.</P
></DD
><dt class="term"><em class="emphasis">uncompress</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-63352"></A
>The <em class="emphasis">uncompress</EM
> program is needed to unpack files that
have been compressed with the
<span class="link"><em class="emphasis">compress</EM
> (<a class="linkend" href="ch24_07.htm" webstripperlinkwas="ch24_07.htm" title="Compressing Files to Save Space ">24.7</A
>)</SPAN
>
command.</P
></DD
></DL
><p class="para">Some other utilities are not included: </P
><dl class="variablelist"><dt class="term"><em class="emphasis">gcc</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-63364"></A
>The
<span class="link">GNU (<a class="linkend" href="glossary.htm" webstripperlinkwas="glossary.htm#UPT-ART-1010" title="Glossary">52.9</A
>)</SPAN
>
C compiler was used to compile most of the packages.
You can try
your system's default C compiler, but it may not work for every package.</P
></DD
><dt class="term"><em class="emphasis">GNU make</EM
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-63372"></A
>GNU
<span class="link"><em class="emphasis">make</EM
> (<a class="linkend" href="ch28_13.htm" webstripperlinkwas="ch28_13.htm" title="make Isn't Just for Programmers! ">28.13</A
>)</SPAN
>
was used to compile most of the packages.
If you don't have it,
try using your system's version.</P
></DD
></DL
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-3840-SECT-1.1.2">52.8.1.2 Problems </A
></H4
><p class="para">Any number of things can go wrong with your build.
You might not
have the right libraries or include files installed.
Your compiler 
may not work the way the program expects it to.
You might not 
have the right permissions.
You might run out of disk space.</P
><p class="para"><a class="indexterm" name="AUTOID-63380"></A
><a class="indexterm" name="AUTOID-63383"></A
>These problems are so varied that there's no way we can list
any generalized solutions.
Try asking an administrator or programmer
on your site, or try calling 
<span class="link">Ready-to-Run Software's CD support line (<a class="linkend" href="ch52_09.htm" webstripperlinkwas="ch52_09.htm" title="Software Support from RTR ">52.9</A
>)</SPAN
>.
But we have a few tips that might help:&#13;</P
><ul class="itemizedlist"><li class="listitem"><table class="para.programreference" border="1"><tr><th valign="TOP"><a class="programreference" href="examples/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/examples/index.htm" title="bsdtar">bsdtar</A
><br></TH
><td valign="TOP">If your system has problems with filenames longer than 14 characters, you
may have to install 
<em class="emphasis">bsdtar</EM
>

to be able to &quot;untar&quot; the 
source code.
<em class="emphasis">bsdtar</EM
> creates unique 14-character filenames as it unpacks an
archive.&#13;</TD
></TR
></TABLE
></LI
><li class="listitem"><p class="para">If your system lacks the
<span class="link"><em class="emphasis">-p</EM
> option (<a class="linkend" href="ch04_08.htm" webstripperlinkwas="ch04_08.htm" title="Making Directories Made Easier ">4.8</A
>)</SPAN
>
to the <em class="emphasis">mkdir</EM
> command, you
may need to install a new version from the GNU <em class="emphasis">fileutils</EM
> package.
The <em class="emphasis">-p</EM
> option is used by the installation and build scripts.</P
></LI
></UL
><p class="para">And if all else fails, you can try to delve into the source code
itself.
That brings us to our next section ...</P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-3840-SECT-1.2">52.8.2 Compiling Source Code </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-63404"></A
>Compiling programs from source 
doesn't require you to be a C programmer, just that you understand
the general procedure and that you have some common sense and luck.</P
><p class="para"><a class="indexterm" name="AUTOID-63407"></A
><a class="indexterm" name="AUTOID-63410"></A
>Almost all UNIX binary programs are written in the C language.
These programs are written in text files&nbsp;- the text files are referred
to as the <em class="emphasis">source code</EM
>-and then converted to
binary files using a <em class="emphasis">compiler</EM
>.
The typical compiler 
on a UNIX system is called <em class="emphasis">cc</EM
>.</P
><p class="para"><a class="indexterm" name="AUTOID-63416"></A
>Although most people call <em class="emphasis">cc</EM
> a &quot;compiler,&quot; it's really
a front-end program.
Unless you tell it not to, <em class="emphasis">cc</EM
> first runs a <em class="emphasis">preprocessor</EM
>.
Next it runs the compiler.
Then it runs the <em class="emphasis">linker/loader</EM
>
to make the actual executable file.
We'll gloss over that in this article and just say that &quot;<em class="emphasis">cc</EM
> does it.&quot;</P
><p class="para">On top of <em class="emphasis">cc</EM
>, there's usually another front-end: almost all 
programs are designed to be compiled using the <em class="emphasis">make</EM
> program.</P
><p class="para">Although we can't prepare you for everything you might need to
know to compile programs from the CD-ROM for your platform, 
this section should at least give you an idea of how it's
<em class="emphasis">supposed</EM
> to work.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-3840-SECT-1.2.1">52.8.2.1 Copying the Sources </A
></H4
><p class="para">Before you can actually compile the sources, you
need to copy the sources to your local hard disk.
You can't just compile the sources directly from the CD-ROM because
the CD-ROM is read-only.</P
><p class="para"><a class="indexterm" name="AUTOID-63432"></A
>The first thing you need to do is to decide where you want to
install the sources, and then <em class="emphasis">cd</EM
> to that directory. For
example, I like to build sources in a subdirectory of my home directory.
Let's suppose I want to install the <em class="emphasis">pcal</EM
> program.
I create the new directory and then <em class="emphasis">cd</EM
> there:</P
><p class="para"><table class="screen.co" border="1"><tr><th valign="TOP"><pre class="calloutlist">
<a class="co" href="ch14_11.htm" webstripperlinkwas="ch14_11.htm" title="14.11 Finding (Anyone's) Home Directory, Quickly ">~</A
> &#13;</PRE
></TH
><td valign="TOP"><pre class="screen">
% <code class="userinput"><b>mkdir ~/pcal_src</B
></CODE
>
% <code class="userinput"><b>cd ~/pcal_src</B
></CODE
></PRE
></TD
></TR
></TABLE
></P
><p class="para">&#13;For installing the sources onto your local hard disk, the CD-ROM
has a script called <em class="emphasis">source.pt</EM
>.
Assuming that the CD-ROM is mounted on <em class="emphasis">/cdrom</EM
>, the script
can be called using one of the following commands:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>/cdrom/SOURCE.PT\;1 </B
></CODE
><code class="replaceable"><i>package-name</I
></CODE
>
% <code class="userinput"><b>/cdrom/SOURCE.PT </B
></CODE
><code class="replaceable"><i>package-name</I
></CODE
>
% <code class="userinput"><b>/cdrom/source.pt\;1 </B
></CODE
><code class="replaceable"><i>package-name</I
></CODE
>
% <code class="userinput"><b>/cdrom/source.pt </B
></CODE
><code class="replaceable"><i>package-name</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Where <em class="emphasis">package-name</EM
> is the name of the package that you
want to install sources for. To get a listing of the files,
call <em class="emphasis">source.pt</EM
> without any arguments:</P
><p class="para"><blockquote class="screen"><pre class="screen">% source.pt<a class="indexterm" name="AUTOID-63460"></A
>
SOURCE script provided by Ready-to-Run Software, Inc.
Copyright 1997 Ready-to-Run Software, Inc. All Rights Reserved.

Assuming CDROM is mounted at /archive/cdrom/
Usage: /archive/cdrom/SOURCE.PT &lt;package
Available packages are:

     !              80cols         Clear          _emacs_ml      _enter_csh
     _enter_sh      _exit_csh      _exit_sh       addup          age_files
     ascii          awf            bash           behead         bkedit
     bsdtar         bsplit         cal_today      calen          catsaway
     center         cgrep          cgrep_sed      checksed       chmod_edit
     chunksort      cleanup        cleanup_sed    cls            cols
     count_it       count_types    cpmod          crontab        crush
     csh_init       csh_logout     cvtbase        date-month     del
     delete         diff           dir_path       dirtop         doublespace
     ediff          elookfor       emacs          exrc           fgrep
     fileutils      find           findcmd        findtext       flip
     fmt_sh         formprog       ftpfile        gawk           getmac
     getopt         glimpse        grabchars      grep           groff
     gzip           head           hey            hgrep          index
     ipl            ispell         jot            lensort        less
     lf             lndir          logerrs        longlines      look
     lookfor        ls_today       make_print     manindex       motd_diff
     namesort       netpbm         nextday        no_run         nom
     offset         oldlinks       opttest        paircheck      patch
     pcal           perl5          phone          pipegrep       pstext
     psutils        pushin         qcsh           qsubst         qterm
     rcs            rcsegrep_fast  rcsgrep        rcsrevs        recomment
     redo           relink         ren            rename         rot
     runsed         runtime        sc             screen         screensize
     script_tidy    search_el      sedman         sh_init        sh_logout
     sharutils      shellutils     showmatch      sl             sls
     smiley         squoze         stat           stree          stripper
     su             tar            tcap           tcsh           termtest
     textutils      tgrep          tknew          tm             tpipe
     tputinit       triplespace    twin           vgrep          vis
     vtree          watchq         whereiz        which          wordfreq
     xgrep          xtail          zap            zloop          zmore
     zvi</PRE
></BLOCKQUOTE
></P
><p class="para">(Note that all the packages on the CD-ROM are listed here,
shell scripts as well as C sources.)</P
><p class="para"><a class="indexterm" name="AUTOID-63464"></A
>In my case, I want to install <em class="emphasis">pcal</EM
>, so I run the following command:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>/cdrom/source.pt pcal</B
></CODE
>
SOURCE script provided by Ready-to-Run Software, Inc.
Copyright 1993 Ready-to-Run Software, Inc. All Rights Reserved.

Copied /POWER_TOOLS/SOURCES/PCAL/PCAL_43.Z to pcal-4.3.tar.Z
Copied /POWER_TOOLS/SOURCES/PCAL/RS6000/PCAL to RS6000patch.pcal
Copied /POWER_TOOLS/SOURCES/PCAL/RTR/PCAL to rtrpatch.pcal
3 files copied successfully.</PRE
></BLOCKQUOTE
></P
><p class="para">The <em class="emphasis">source.pt</EM
> script copies all the relevant files 
into your current directory.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-3840-SECT-1.2.2">52.8.2.2 Uncompressing the Sources </A
></H4
><p class="para">If you now list the directory, you'll find the files that were
just copied there.  </P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>ls</B
></CODE
>
RS6000patch.pcal        pcal-4.3.tar.Z          rtrpatch.pcal</PRE
></BLOCKQUOTE
></P
><p class="para">The file called <em class="emphasis">pcal-4.3.tar.Z</EM
> is the <em class="emphasis">pcal</EM
>
source package, in a tarred and compressed form.
The <em class="emphasis">.Z</EM
>
suffix tells you that the file was compressed using the 
<span class="link"><em class="emphasis">compress</EM
> (<a class="linkend" href="ch24_07.htm" webstripperlinkwas="ch24_07.htm" title="Compressing Files to Save Space ">24.7</A
>)</SPAN
>
command.
You need to run <em class="emphasis">uncompress</EM
> first:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>uncompress pcal-4.3.tar.Z</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-63490"></A
>If you don't have the <em class="emphasis">uncompress</EM
> command, use <em class="emphasis">gunzip</EM
>.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-3840-SECT-1.2.3">52.8.2.3 Untarring the Sources </A
></H4
><p class="para"><a class="indexterm" name="AUTOID-63497"></A
>After you have uncompressed the file, you'll see the file without
the <em class="emphasis">.Z</EM
> suffix. </P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>ls</B
></CODE
>
RS6000patch.pcal        pcal-4.3.tar            rtrpatch.pcal</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-63504"></A
>The <em class="emphasis">.tar</EM
> suffix to the <em class="emphasis">pcal-4.3.tar</EM
> file means
that the file was packed using the 
<span class="link"><em class="emphasis">tar</EM
> command (<a class="linkend" href="ch19_05.htm" webstripperlinkwas="ch19_05.htm" title="Using tar to Create and Unpack Archives ">19.5</A
>)</SPAN
>.
Again, if you don't have <em class="emphasis">tar</EM
>, it's on the CD-ROM.</P
><p class="para">To unpack the file, use <em class="emphasis">tar</EM
> with the <em class="emphasis">-x</EM
> option
for &quot;extract&quot; and the <em class="emphasis">-f</EM
> option to specify a filename.
(I also like to use <em class="emphasis">-v</EM
> for verbose output.)
My command line
might read:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>tar xvf pcal-4.3.tar</B
></CODE
>
x pcal-4.3/ReadMe, 7673 bytes, 15 tape blocks
x pcal-4.3/Descrip.mms, 3713 bytes, 8 tape blocks
x pcal-4.3/Make_Pcal.com, 3090 bytes, 7 tape blocks
x pcal-4.3/Makefile, 1159 bytes, 3 tape blocks
x pcal-4.3/Makefile.Amiga, 1010 bytes, 2 tape blocks
x pcal-4.3/Makefile.DOS, 1023 bytes, 2 tape blocks
x pcal-4.3/Makefile.VMS, 2505 bytes, 5 tape blocks
x pcal-4.3/Orig.ReadMe, 984 bytes, 2 tape blocks
x pcal-4.3/Pcal.TEX, 28199 bytes, 56 tape blocks
x pcal-4.3/Pcal.hlp, 29099 bytes, 57 tape blocks
x pcal-4.3/SetUp.com, 670 bytes, 2 tape blocks
x pcal-4.3/VaxCrtl.opt, 31 bytes, 1 tape blocks
x pcal-4.3/calendar, 12101 bytes, 24 tape blocks
x pcal-4.3/exprpars.c, 8538 bytes, 17 tape blocks
x pcal-4.3/moon91, 2828 bytes, 6 tape blocks
x pcal-4.3/moon92, 2887 bytes, 6 tape blocks
x pcal-4.3/pcal.c, 46440 bytes, 91 tape blocks
x pcal-4.3/noprotos.h, 2530 bytes, 5 tape blocks
x pcal-4.3/pcalglob.h, 4551 bytes, 9 tape blocks
x pcal-4.3/pcalinit.c, 4071 bytes, 8 tape blocks
x pcal-4.3/protos.h, 4341 bytes, 9 tape blocks
x pcal-4.3/moonphas.c, 17817 bytes, 35 tape blocks
x pcal-4.3/troffman.sty, 4894 bytes, 10 tape blocks
x pcal-4.3/writefil.c, 24597 bytes, 49 tape blocks
x pcal-4.3/pcal.man, 25296 bytes, 50 tape blocks
x pcal-4.3/pcaldefs.h, 17643 bytes, 35 tape blocks
x pcal-4.3/pcalinit.ps, 14297 bytes, 28 tape blocks
x pcal-4.3/pcalutil.c, 21238 bytes, 42 tape blocks
x pcal-4.3/pcallang.h, 35465 bytes, 70 tape blocks
x pcal-4.3/readfile.c, 32888 bytes, 65 tape blocks</PRE
></BLOCKQUOTE
></P
><p class="para"><em class="emphasis">tar</EM
> creates a subdirectory called <em class="emphasis">pcal-4.3</EM
>.
<em class="emphasis">cd</EM
>
to this directory to continue your build.</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>cd pcal-4.3</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Note that if you have the <em class="emphasis">zcat</EM
> command, 
you might have combined the steps for uncompressing and
untarring the files into a single command line, as shown
in article
<a class="xref" href="ch19_07.htm" webstripperlinkwas="ch19_07.htm" title="Extracting Files from a Compressed Archive ">19.7</A
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>zcat pcal-4.3.tar.Z | tar xvf -</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If you are on a System V-based system, you may have to use <em class="emphasis">tar</EM
>
with the
<span class="link"><em class="emphasis">-o</EM
> option (<a class="linkend" href="ch19_07.htm" webstripperlinkwas="ch19_07.htm" title="Extracting Files from a Compressed Archive ">19.7</A
>)</SPAN
>
to make sure that you get ownership of the files.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-3840-SECT-1.2.4">52.8.2.4 Unsharring the Sources </A
></H4
><p class="para"><a class="indexterm" name="AUTOID-63539"></A
><a class="indexterm" name="AUTOID-63541"></A
><a class="indexterm" name="AUTOID-63543"></A
>Before we go on, let's back up a bit.
Some packages aren't
stored as <em class="emphasis">tar</EM
> archives, but as 
<span class="link"><em class="emphasis">shar</EM
> archives (<a class="linkend" href="ch19_02.htm" webstripperlinkwas="ch19_02.htm" title="Introduction to Shell Archives ">19.2</A
>)</SPAN
>.
<em class="emphasis">shar</EM
> archives are generally distributed in multiple
files, under names such as <em class="emphasis">part01.Z</EM
>, <em class="emphasis">part02.Z</EM
>, etc.
The <em class="emphasis">qterm</EM
> source package is an example of a package
that is distributed as <em class="emphasis">shar</EM
> files.     </P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>mkdir ~/qterm_src</B
></CODE
>
% <code class="userinput"><b>cd ~/qterm_src</B
></CODE
>
% <code class="userinput"><b>/cdrom/source.pt qterm</B
></CODE
>
% /archive/cdrom/SOURCE.PT qterm
SOURCE script provided by Ready-to-Run Software, Inc.
Copyright 1997 Ready-to-Run Software, Inc. All Rights Reserved.

Assuming CDROM is mounted at /archive/cdrom/
Copied /archive/cdrom//SOURCES/QTERM/PART01.Z to part01.Z
Copied /archive/cdrom//SOURCES/QTERM/PART02.Z to part02.Z
Copied /archive/cdrom//SOURCES/QTERM/RS6000/QTERM to RS6000patch.qterm
Copied /archive/cdrom//SOURCES/QTERM/I386/QTERM to i386patch.qterm
Copied /archive/cdrom//SOURCES/QTERM/SUN4C/QTERM to sun4cpatch.qterm
Copied /archive/cdrom//SOURCES/QTERM/HP700/QTERM to hp700patch.qterm
Copied /archive/cdrom//SOURCES/QTERM/LINUX/QTERM to linuxpatch.qterm
Copied /archive/cdrom//SOURCES/QTERM/SSOL2/QTERM to SSol2patch.qterm
Copied /archive/cdrom//SOURCES/QTERM/RTR/QTERM to rtrpatch.qterm
9 file(s) copied successfully.</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-63559"></A
>To extract the <em class="emphasis">qterm</EM
> sources, uncompress the &quot;part&quot; files
and then use the <em class="emphasis">unshar</EM
> program to unpack them.  </P
><p class="para"><table class="screen.co" border="1"><tr><th valign="TOP"><pre class="calloutlist">
<a class="co" href="ch01_16.htm" webstripperlinkwas="ch01_16.htm" title="1.16 Wildcards ">?</A
> 






















&#13;</PRE
></TH
><td valign="TOP"><pre class="screen">
% <code class="userinput"><b>uncompress part0?.Z</B
></CODE
>
% <code class="userinput"><b>unshar part0?</B
></CODE
>
unshar:  Sending header to part01.hdr.
unshar:  Doing part01:
If this archive is complete, you will see the following message:
          &quot;shar: End of archive 1 (of 2).&quot;
shar: Extracting &quot;README&quot; (2200 characters)
shar: Extracting &quot;options.3&quot; (7383 characters)
shar: Extracting &quot;options.c&quot; (10901 characters)
shar: Extracting &quot;options.h&quot; (2592 characters)
shar: Extracting &quot;qterm.c&quot; (24777 characters)
shar: End of archive 1 (of 2).

You still must unpack the following archives:
         2
unshar:  Sending header to part02.hdr.
unshar:  Doing part02:
If this archive is complete, you will see the following message:
          &quot;shar: End of archive 2 (of 2).&quot;
shar: Extracting &quot;Makefile&quot; (1908 characters)
shar: Extracting &quot;qterm.1&quot; (5805 characters)
shar: Extracting &quot;qterm.h&quot; (3281 characters)
shar: Extracting &quot;qtermtab&quot; (3311 characters)
shar: End of archive 2 (of 2).
You have unpacked both archives.</PRE
></TD
></TR
></TABLE
></P
><p class="para">If you
don't have <em class="emphasis">shar</EM
> and <em class="emphasis">unshar</EM
>, it's on the CD-ROM; but
the true beauty of <em class="emphasis">shar</EM
> archives is that you can always 
remove any headers and footers from the file and use
the Bourne shell (<em class="emphasis">sh</EM
>) to unpack the files.  </P
><p class="para">To edit out the header, remove any lines at the top of the
file that don't resemble Bourne shell syntax.
Since many <em class="emphasis">shar</EM
>
archives are distributed in email or in newsgroups, the files
might include the header of a mail message or news posting.
The author might also precede the actual <em class="emphasis">shar</EM
> archive with 
some explanation of what the program does.
A good bet is to look for a line
reading <code class="literal">#!/bin/sh</CODE
> and remove all lines preceding it.
Even better, most shell archives contain directions right in the file:</P
><p class="para"><blockquote class="screen"><pre class="screen"><i class="lineannotation">(text .... )</I
>

#! /bin/sh
# This is a shell archive.  Remove anything before this line,
# then feed it into a shell via &quot;sh file&quot; or similar.
# To overwrite existing files, type &quot;sh file -c&quot;.</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-63581"></A
>To remove the footer, look for anything resembling a user's mail
signature.  (<em class="emphasis">shar</EM
> archives usually have an <em class="emphasis">exit</EM
> message
at the end, so editing out the footer isn't always needed ... but 
it doesn't hurt.)</P
><p class="para"><a class="indexterm" name="AUTOID-63586"></A
>After editing out the header and footer, just run the files through
<em class="emphasis">sh</EM
> individually:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>vi part0?</B
></CODE
>
   <i class="lineannotation">edit out headers</I
>
% <code class="userinput"><b>sh part01; sh part02</B
></CODE
>
   ...</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Note that it's especially important to install and unpack 
<em class="emphasis">shar</EM
> archives in discrete, well-named directories 
(such as <em class="emphasis">qterm_src</EM
>, in this case).
Since <em class="emphasis">shar</EM
> files are almost always given generic names of
<em class="emphasis">part01</EM
>, <em class="emphasis">part02</EM
>, etc.,
it's easy to overwrite files or to get confused if you
accidentally unpack more than one package in the same directory.&#13;</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-3840-SECT-1.2.5">52.8.2.5 Applying Patches </A
></H4
><p class="para"><a class="indexterm" name="AUTOID-63603"></A
>
When I copied the <em class="emphasis">pcal</EM
> sources using the <em class="emphasis">source.pt</EM
>
shell script, I also got two
<span class="link"><em class="emphasis">patch</EM
> files (<a class="linkend" href="ch33_09.htm" webstripperlinkwas="ch33_09.htm" title="patch: Generalized Updating of Files that Differ ">33.9</A
>)</SPAN
>:
<em class="emphasis">rtrpatch.pcal</EM
> and <em class="emphasis">RS6000patch.pcal</EM
>.
These are patches prepared by Ready-to-Run Software for 
compiling the <em class="emphasis">pcal</EM
> package. </P
><p class="para"><a class="indexterm" name="AUTOID-63614"></A
>The <em class="emphasis">RS6000patch.pcal</EM
> file is a patch for compilng on IBM's
RS6000 platform.  If you aren't on a RS6000, then you probably don't
need this file.  When building other packages, you might see other
platform-specific patch files, with prefixes like <em class="emphasis">i386</EM
>,
<em class="emphasis">xenix</EM
>, <em class="emphasis">hp700</EM
>, <em class="emphasis">sun3</EM
>, <em class="emphasis">sun4</EM
>, etc.  Naturally, you
shouldn't use these packages if you aren't on one of these platforms.</P
><p class="para">The <em class="emphasis">rtrpatch.pcal</EM
> file is
a general-purpose patch for all platforms.
You should apply this patch for all platforms.</P
><p class="para">Before you apply any of Ready-to-Run's patches, you should first
make sure that there aren't any patch files in the untarred source
directory.
If the sources did come with patch files, they would
have to be applied before Ready-to-Run's.
In the <em class="emphasis">pcal-4.3</EM
> directory, list the directory contents:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>ls -aF</B
></CODE
>
./              Makefile.VMS    calendar        pcal.man        protos.h
../             Orig.ReadMe     exprpars.c      pcaldefs.h      readfile.c
Descrip.mms     Pcal.TEX        moon91          pcalglob.h      troffman.sty
Make_Pcal.com   Pcal.hlp        moon92          pcalinit.c      writefil.c
Makefile        ReadMe          moonphas.c      pcalinit.ps
Makefile.Amiga  SetUp.com       noprotos.h      pcallang.h
Makefile.DOS    VaxCrtl.opt     pcal.c          pcalutil.c</PRE
></BLOCKQUOTE
></P
><p class="para">A <em class="emphasis">patch</EM
> file generally has the string <em class="emphasis">patch</EM
> or <em class="emphasis">pch</EM
>
in it.  There are no patch files in this directory. Now that I'm sure
that there aren't any other patches, I run the <em class="emphasis">patch</EM
>
command. (Naturally, if you don't already have <em class="emphasis">patch</EM
>, you can
get its sources off the CD-ROM.)  To run <em class="emphasis">patch</EM
>, make
sure you're in the source directory (in this case, the <em class="emphasis">pcal-4.3</EM
>
subdirectory created when I ran <em class="emphasis">tar</EM
>).  Then run <em class="emphasis">patch</EM
>,
taking input from the patch file in the parent directory:</P
><p class="para"><table class="screen.co" border="1"><tr><th valign="TOP"><pre class="calloutlist">
<a class="co" href="ch13_01.htm" webstripperlinkwas="ch13_01.htm" title="13.1 Using Standard Input and Output">&lt;</A
> <a class="co" href="ch01_21.htm" webstripperlinkwas="ch01_21.htm" title="1.21 Making Pathnames ">../</A
> 








&#13;</PRE
></TH
><td valign="TOP"><pre class="screen">
% <code class="userinput"><b>patch &lt; ../rtrpatch.pcal</B
></CODE
>
Hmm...  Looks like a new-style context diff to me...
The text leading up to this was:
--------------------------------
|*** Makefile.orig      Tue Dec 17 05:34:19 1991
|-- Makefile   Mon Nov 23 05:59:49 1992
--------------------------------
Patching file Makefile using Plan A...
Hunk #1 succeeded at 5.
Hunk #2 succeeded at 46.
done</PRE
></TD
></TR
></TABLE
></P
><p class="para">&#13;The patch is now applied.&#13;</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-3840-SECT-1.2.6">52.8.2.6 An Easy Build </A
></H4
><p class="para">Up to now, all we've been doing is just getting the source tree
together. Now we're up to the part where we actually build
the package. </P
><p class="para">First of all, if there's any universal rule about compiling
sources, it's:<a class="indexterm" name="AUTOID-63649"></A
>
<blockquote class="blockquote"><p class="para"><b class="emphasis.bold">If there's a file called README, read it!</B
></P
></BLOCKQUOTE
></P
><p class="para"><em class="emphasis">README</EM
> files often contain esoteric details about the history
of the program and what improvements could be made, etc.
But they
might also contain details about how to build the package.
Reading a
<em class="emphasis">README</EM
> can save you hours of frustration trying to figure out 
what to tweak to make the program build on your platform.</P
><p class="para"><a class="indexterm" name="AUTOID-63658"></A
>Another file to look for is one called <em class="emphasis">Configure</EM
>.
<em class="emphasis">Configure</EM
> is a shell script that tries to figure
out what sort of platform you're on and how to build the
package for you, and it's remarkably effective.
The sources
for <em class="emphasis">perl</EM
> and <em class="emphasis">patch</EM
> both come with <em class="emphasis">Configure</EM
> scripts.</P
><p class="para"><em class="emphasis">pcal</EM
> doesn't come with a <em class="emphasis">README</EM
> or with a <em class="emphasis">Configure</EM
>
script.
But it does
come with a file called <em class="emphasis">Makefile</EM
>.
(Actually, it comes with several <em class="emphasis">Makefiles</EM
>, for different
platforms&nbsp;- but the default <em class="emphasis">Makefile</EM
> is the one for UNIX
systems, which is what you want.)
The <em class="emphasis">Makefile</EM
> is used by 
<span class="link">the <em class="emphasis">make</EM
> program (<a class="linkend" href="ch28_13.htm" webstripperlinkwas="ch28_13.htm" title="make Isn't Just for Programmers! ">28.13</A
>)</SPAN
>.
There have been entire books written about <em class="emphasis">make</EM
>, but if
you're lucky, all you need to know about it is that if you see
a <em class="emphasis">Makefile</EM
>, then all you need to compile a program is to
type <em class="emphasis">make</EM
>.</P
><p class="para"><a class="indexterm" name="AUTOID-63679"></A
>First, though, scan through the <em class="emphasis">Makefile</EM
> to see if there
are any comments there.
You might have to make some changes
in the <em class="emphasis">Makefile</EM
> to configure it for your system.
For
example, the <em class="emphasis">qterm</EM
> <em class="emphasis">Makefile</EM
> has the following 
very helpful lines:</P
><p class="para"><blockquote class="screen"><pre class="screen">#
# Add &quot;-DUSG5&quot; to DEFS below, if your system is UNIX System V.
# Add &quot;-DHAS_VARARGS&quot; if your system supports varargs.
# Add &quot;-DOPT_COMPAT&quot; to support old command line options.
#
DEFS    = -DTABFILE=\&quot;$(TABFILE)\&quot; -DOPT_COMPAT</PRE
></BLOCKQUOTE
></P
><p class="para">You probably know whether your system is System V-based or not.
If you never used this program before, you probably don't care about
old command line options.
And if you don't know what <em class="emphasis">varargs</EM
>
are or whether your system supports it ... try seeing if there's
a
<span class="link">manpage (<a class="linkend" href="ch50_01.htm" webstripperlinkwas="ch50_01.htm#UPT-ART-4910" title="UNIX Online Documentation ">50.1</A
>)</SPAN
>
for it.
(You might even find out what it is!)</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>man varargs</B
></CODE
>

VARARGS(3)             C LIBRARY FUNCTIONS             VARARGS(3)

NAME
     varargs - handle variable argument list

SYNOPSIS
     #include &lt;varargs.h&gt;
   ...</PRE
></BLOCKQUOTE
></P
><p class="para">What do you know, I have <em class="emphasis">varargs</EM
>.
So I add the <code class="literal">-DHAS_VARARGS</CODE
>
command-line option to the <code class="literal">DEFS=</CODE
> line:</P
><p class="para"><blockquote class="screen"><pre class="screen">DEFS    = -DTABFILE=\&quot;$(TABFILE)\&quot; -DOPT_COMPAT -DHAS_VARARGS</PRE
></BLOCKQUOTE
></P
><p class="para">The <em class="emphasis">pcal</EM
> <em class="emphasis">Makefile</EM
>, on the other hand, only includes a
single line of instruction towards the top: </P
><p class="para"><blockquote class="screen"><pre class="screen"># Set the configuration variables below to taste.</PRE
></BLOCKQUOTE
></P
><p class="para">This isn't particularly helpful, but scan the <em class="emphasis">Makefile</EM
>
anyway for anything obviously wrong.
When you're satisfied, just cross your fingers and run <em class="emphasis">make</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>make</B
></CODE
>
/bin/cc   -c pcal.c
/bin/cc   -c exprpars.c
/bin/cc   -c moonphas.c
/bin/cc   -c pcalutil.c
/bin/cc   -c readfile.c
/bin/cc    -o pcalinit pcalinit.c
pcalinit pcalinit.ps pcalinit.h
/bin/cc   -c writefil.c
/bin/cc  -o pcal pcal.o exprpars.o moonphas.o pcalutil.o readfile.o
writefil.o -lm</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-63711"></A
>There were no error or warning messages, so you're fine.
Errors mean that the program package probably didn't build completely;
you'll have to find the cause and fix them.
If there were warnings, the programs may not work right or have
a subtle flaw.
For a program like a spreadsheet, where hidden flaws
can be a disaster, you'd better find out what the warnings mean and
fix them.
Otherwise, just cross your fingers some more and see if the program works.</P
><p class="para">When you list the <em class="emphasis">pcal</EM
> source directory now, you should
see several new files with a <em class="emphasis">.o</EM
> suffix, but the most
important thing is that the <em class="emphasis">pcal</EM
> executable is now built
and ready to be installed on your system.</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>ls -aF</B
></CODE
>
./              Orig.ReadMe     moon91          pcaldefs.h      protos.h
../             Pcal.TEX        moon92          pcalglob.h      readfile.c
Descrip.mms     Pcal.hlp        moonphas.c      pcalinit*       readfile.o
Make_Pcal.com   ReadMe          moonphas.o      pcalinit.c      troffman.sty
Makefile        SetUp.com       noprotos.h      pcalinit.h      writefil.c
Makefile.Amiga  VaxCrtl.opt     pcal*           pcalinit.ps     writefil.o
Makefile.DOS    calendar        pcal.c          pcallang.h
Makefile.VMS    exprpars.c      pcal.man        pcalutil.c
Makefile.orig   exprpars.o      pcal.o          pcalutil.o</PRE
></BLOCKQUOTE
></P
><p class="para">You can now try out the program, and once you're sure it works, 
install it.
To install the program, many <em class="emphasis">Makefiles</EM
> provide
an <em class="emphasis">install</EM
> target.  </P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>make install</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-63728"></A
>On many machines, you'll need to be logged in as
<em class="emphasis">root</EM
> to be able to install the binary and manpage system-wide.
If so, it might be a good idea to run <em class="emphasis">make</EM
> with the <em class="emphasis">-n</EM
>
option first.
The <em class="emphasis">-n</EM
> option says to just show what commands
would be executed without actually executing them.</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>make -n install</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Or if you prefer to just install the program by hand, just 
move the executable and the manpage to the right
directories (be sure to rename the manpage as appropriate):</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>mv pcal /usr/local/bin</B
></CODE
>
% <code class="userinput"><b>mv pcal.man /usr/local/man/man1/pcal.1</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Note, however, that some programs may have extra steps in installing
the executable.
If all this worked as advertised, you can bail out now.
Otherwise,
you might need to know more about what goes on behind the scenes
before you can figure out what went wrong.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-3840-SECT-1.2.7">52.8.2.7 Functions, Libraries, and Header Files </A
></H4
><p class="para"><a class="indexterm" name="AUTOID-63747"></A
>To understand the compilation process, it helps to understand 
a little about libraries and header files.  </P
><p class="para"><a class="indexterm" name="AUTOID-63750"></A
>C programs are written almost entirely using <em class="emphasis">functions</EM
>.
Article
<a class="xref" href="ch15_03.htm" webstripperlinkwas="ch15_03.htm" title="Adding { } Operators to Korn (and Bourne) Shells ">15.3</A
>
shows an example of a function defined in the Bourne shell 
programming language.
C language functions are basically the same idea:
group together a series of commands, give them a name, and then 
you can execute those commands using that name whenever you want and
as many times as you want.
Functions are also sometimes referred to
as <em class="emphasis">subroutines</EM
>, <em class="emphasis">library functions</EM
>, or just <em class="emphasis">routines</EM
>. </P
><p class="para">Now, you can define C functions in the same source file.
But the operating system also provides a vast collection of 
function definitions&nbsp;- which is very nice, because otherwise
you'd be building every program from scratch.
The function
definitions are kept in <em class="emphasis">libraries</EM
>, which are generally 
installed on your system in <em class="emphasis">/usr/lib/</EM
> with a <em class="emphasis">lib</EM
> prefix
and a <em class="emphasis">.a</EM
> suffix (for example, <em class="emphasis">/usr/lib/libc.a</EM
>).</P
><p class="para">Functions also have to be <em class="emphasis">declared</EM
> in the
program.
Function declarations are kept in <em class="emphasis">header</EM
> or
<em class="emphasis">include</EM
> files, which are generally installed on your system in
<em class="emphasis">/usr/include/</EM
> with <em class="emphasis">.h</EM
> suffixes (for example,
<em class="emphasis">/usr/include/stdio.h</EM
>).</P
><p class="para"><a class="indexterm" name="AUTOID-63772"></A
>If you use functions that are defined in libraries (and you most
definitely will), you need to make sure that when the program is
compiled, it is <em class="emphasis">linked</EM
> to the libraries it needs.
You also have
to make sure that the proper header files are read by your program,
since the program won't compile unless all functions have been
declared.  </P
><p class="para">For example, if you need to take the square root of a number in your
program, you need to use the <em class="emphasis">sqrt()</EM
> function.
This function
resides in the Math library.
This means that
you need to link the program with <em class="emphasis">libm.a</EM
> and you need to read in
the <em class="emphasis">math.h</EM
> header file (which declares <em class="emphasis">sqrt()</EM
>).
So

in 
the program, you need to have the following line near the top of the
source file:</P
><p class="para"><blockquote class="screen"><pre class="screen">#include &lt;math.h&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">and when you compile the program, you need to use the <em class="emphasis">-l</EM
>
(lowercase L) command-line option to link with <em class="emphasis">libm</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>cc -o </B
></CODE
><code class="replaceable"><i>file file</I
></CODE
><code class="userinput"><b>.c -lm</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Note the following facts:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-63795"></A
>Unless you name the executable file with <code class="literal">-o&nbsp;</CODE
><code class="replaceable"><i>file</I
></CODE
>,
<em class="emphasis">cc</EM
> will name it <em class="emphasis">a.out</EM
>.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-63803"></A
>The source filename must end with a <em class="emphasis">.c</EM
> suffix.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-63808"></A
><a class="indexterm" name="AUTOID-63811"></A
>Since <em class="emphasis">math.h</EM
> lives in <em class="emphasis">/usr/include</EM
>, you don't need to give
its absolute pathname on the <code class="literal">#include</CODE
> line, just put the name
of the header file between angle brackets as shown.
<span class="link">Relative pathnames (<a class="linkend" href="ch14_02.htm" webstripperlinkwas="ch14_02.htm" title="Using Relative and Absolute Pathnames ">14.2</A
>)</SPAN
>
starting at <em class="emphasis">/usr/include</EM
> can be used in angle brackets.
For instance, <code class="literal">&lt;sys/foo.h&gt;</CODE
> means <em class="emphasis">/usr/include/sys/foo.h</EM
>.</P
><p class="para"><a class="indexterm" name="AUTOID-63822"></A
><a class="indexterm" name="AUTOID-63824"></A
>By default,
<em class="emphasis">cc</EM
> looks for header files in <em class="emphasis">/usr/include</EM
>, and you can
have it look automatically in other directories by specifying
them with the <em class="emphasis">-I</EM
> command-line option.
If you want to use a header file in directory that isn't
searched by default, supply its
absolute or relative pathname in double quotes instead.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-63832"></A
>When linking with a library on the command line, you should put
the <em class="emphasis">-l</EM
> options at the end. 
If you use more than one library, you'll need more than one
<em class="emphasis">-l</EM
> option.
The order of the <em class="emphasis">-l</EM
> options is important; check the
documentation or look for a comment in the source code.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-63840"></A
>The compiler found <em class="emphasis">libm.a</EM
> because it was in <em class="emphasis">/usr/lib</EM
>,
which it searches by default.
If you want it to use a library
in another directory, you may need to supply the directory using the <em class="emphasis">-L</EM
>
command-line option.</P
></LI
></UL
><p class="para">As you can imagine, there's much more to know.
But that's the
general idea of compiling C programs on UNIX systems, and it's
about as much as we can tell you without starting to teach you C.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-3840-SECT-1.2.8">52.8.2.8 The make Program </A
></H4
><p class="para"><a class="indexterm" name="AUTOID-63850"></A
>When you're writing a simple C program, you can simply compile the
program using <em class="emphasis">cc</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>cc test.c</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">But more complicated programs (like many of the programs on 
the CD-ROM) require a bit more work.
More complicated
programs are easier to handle if you write them in <em class="emphasis">modules</EM
>.
So, for example, the <em class="emphasis">pcal</EM
> source tree on the CD-ROM
contains several <em class="emphasis">.c</EM
> files: <em class="emphasis">exprpars.c</EM
>, <em class="emphasis">moonphas.c</EM
>, 
<em class="emphasis">pcalinit.c</EM
>, <em class="emphasis">pcalutil.c</EM
>, <em class="emphasis">readfile.c</EM
>,
<em class="emphasis">writefil.c</EM
>, and, of course, <em class="emphasis">pcal.c</EM
>.
Each of these
source files needs to be compiled separately into <em class="emphasis">object files</EM
>
(with <em class="emphasis">.o</EM
> suffixes).
If you give the <em class="emphasis">-c</EM
> option, <em class="emphasis">cc</EM
> will compile
&quot;<em class="emphasis">.c</EM
> files&quot; into &quot;<em class="emphasis">.o</EM
> files&quot; and stop without making the
finished executable.
When you run <em class="emphasis">cc</EM
> again&nbsp;- but give it the <em class="emphasis">.o</EM
> filenames
(<em class="emphasis">exprpars.o</EM
>, <em class="emphasis">moonphas.o</EM
>, and so on)
it will link all those object files with the libraries and make the
executable file.</P
><p class="para"><a class="indexterm" name="AUTOID-63879"></A
>This makes compilation a bit harder to keep track of.
There are a lot
more steps.
Furthermore, it means that whenever a file is changed, 
you have to remember not only to recompile it but also to relink
the entire program.  </P
><p class="para"><a class="indexterm" name="AUTOID-63882"></A
><a class="indexterm" name="AUTOID-63884"></A
>This is a job for the <em class="emphasis">make</EM
> program.
We showed uses for <em class="emphasis">make</EM
>
in articles 
<a class="xref" href="ch21_09.htm" webstripperlinkwas="ch21_09.htm" title="Keep File Printouts Up-to-Date Automatically with make">21.9</A
>
and 
<a class="xref" href="ch28_13.htm" webstripperlinkwas="ch28_13.htm" title="make Isn't Just for Programmers! ">28.13</A
>,
but this is what it was really meant for.
The <em class="emphasis">pcal</EM
> source tree comes with a file called <em class="emphasis">Makefile</EM
>.
(Actually, it comes with several different <em class="emphasis">Makefile</EM
>s for
different platforms, but that's another issue.)
The <em class="emphasis">Makefile</EM
>
keeps track of each of the programs and each of their dependencies.
It also keeps track of any command-line options you might want passed
to <em class="emphasis">cc</EM
>, including libraries to link to.
The result is that when you want to make the <em class="emphasis">pcal</EM
> program,
all you need to do is type:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>make pcal</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Or, even better, just:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>make</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">This is a lot easier than trying to keep track of all the modules and
command-line options yourself.</P
><p class="para"><a class="indexterm" name="AUTOID-63906"></A
>So if you can't compile a program because the header file it needs is
installed in a non-standard place, you'd specify that in the
<em class="emphasis">Makefile</EM
>.
You could add the appropriate <em class="emphasis">-I</EM
>
option to the <code class="literal">COPTS</CODE
> declaration line:</P
><p class="para"><blockquote class="screen"><pre class="screen">COPTS    = -I/usr/include/sys</PRE
></BLOCKQUOTE
></P
><p class="para">Or if you want to use a different compiler than <em class="emphasis">cc</EM
>, you could
redefine that variable:</P
><p class="para"><blockquote class="screen"><pre class="screen">CC       = /usr/local/bin/gcc</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-63919"></A
><a class="indexterm" name="AUTOID-63921"></A
><a class="indexterm" name="AUTOID-63922"></A
>Again, this is only the tip of the iceberg.
But a basic understanding
of libraries, header files, and
<em class="emphasis">make</EM
> has helped me build many programs that wouldn't compile
the first time.
For help with <em class="emphasis">make</EM
>, see O'Reilly &amp; Associates' <em class="emphasis">Managing Projects
with make</EM
> by Andrew Oram and Steve Talbott.</P
></DIV
></DIV
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">LM</SPAN
>, <span class="authorinitials">EP</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch52_07.htm" webstripperlinkwas="ch52_07.htm" title="52.7 Other Ways to Get the Software "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 52.7 Other Ways to Get the Software " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch52_09.htm" webstripperlinkwas="ch52_09.htm" title="52.9 Software Support from RTR "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 52.9 Software Support from RTR " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">52.7 Other Ways to Get the Software </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">52.9 Software Support from RTR </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
