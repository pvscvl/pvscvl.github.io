<html><head><title>[Chapter 44] 44.15 Handling Command-Line Arguments in Shell Scripts </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:53:51Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch44_01.htm" webstripperlinkwas="ch44_01.htm" title="44. Shell Programming for the Uninitiated"><link rel="prev" href="ch44_14.htm" webstripperlinkwas="ch44_14.htm" title="44.14 Putting awk, sed, etc., Inside Shell Scripts "><link rel="next" href="ch44_16.htm" webstripperlinkwas="ch44_16.htm" title="44.16 Handling Command-Line Arguments with a for Loop "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch44_14.htm" webstripperlinkwas="ch44_14.htm" title="44.14 Putting awk, sed, etc., Inside Shell Scripts "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 44.14 Putting awk, sed, etc., Inside Shell Scripts " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 44<br>Shell Programming for the Uninitiated</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch44_16.htm" webstripperlinkwas="ch44_16.htm" title="44.16 Handling Command-Line Arguments with a for Loop "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 44.16 Handling Command-Line Arguments with a for Loop " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-7130">44.15 Handling Command-Line Arguments in Shell Scripts </A
></H2
><p class="para"><a class="indexterm" name="AUTOID-51264"></A
><a class="indexterm" name="AUTOID-51267"></A
><a class="indexterm" name="AUTOID-51270"></A
><a class="indexterm" name="AUTOID-51273"></A
><a class="indexterm" name="AUTOID-51276"></A
>To write flexible shell scripts, you usually want to give them
command-line arguments.
As you've seen in
<span class="link">other articles (<a class="linkend" href="ch44_11.htm" webstripperlinkwas="ch44_11.htm" title="Set Exit Status of a Shell (Script) ">44.11</A
>, <a class="linkend" href="ch44_12.htm" webstripperlinkwas="ch44_12.htm" title="Trapping Exits Caused by Interrupts ">44.12</A
>)</SPAN
>,
<code class="literal">$1</CODE
> holds the first command-line argument.
The Bourne shell can give you arguments through the ninth, <code class="literal">$9</CODE
>.
The Korn Shell and some other newer Bourne-type shells understand
<code class="literal">${10}</CODE
> for the tenth argument, and so on.
(Article
<a class="xref" href="ch08_05.htm" webstripperlinkwas="ch08_05.htm" title="Command-Line Evaluation ">8.5</A
>
has an overview of the shell's command-line handling.)</P
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-7130-SECT-1.1">44.15.1 With the  $@&quot;</A
></H3
><p class="para">If you've been reading this
<span class="link">series (<a class="linkend" href="ch44_01.htm" webstripperlinkwas="ch44_01.htm#UPT-ART-0065" title="Everyone Should Learn Some Shell Programming ">44.1</A
>)</SPAN
>
of articles in order, you saw the
<span class="link"><em class="emphasis">zpg</EM
> (<a class="linkend" href="ch44_12.htm" webstripperlinkwas="ch44_12.htm" title="Trapping Exits Caused by Interrupts ">44.12</A
>)</SPAN
>
script that accepted just one command-line argument.<a class="indexterm" name="AUTOID-51290"></A
>
If you put <code class="literal">&quot;$@&quot;</CODE
> in a script, the shell will replace that string
with a
<span class="link">quoted (<a class="linkend" href="ch08_14.htm" webstripperlinkwas="ch08_14.htm" title="Bourne Shell Quoting ">8.14</A
>)</SPAN
>
set of the script's command-line arguments.
Then you can pass as many arguments as you want, including pathnames
with
<span class="link">unusual characters (<a class="linkend" href="ch23_11.htm" webstripperlinkwas="ch23_11.htm" title="Deleting Files with Odd Names ">23.11</A
>)</SPAN
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>zpg report memo &quot;savearts/What's next?&quot;</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-51300"></A
><a class="indexterm" name="AUTOID-51303"></A
><a class="indexterm" name="AUTOID-51306"></A
><a class="indexterm" name="AUTOID-51309"></A
>The third argument has a perfectly legal filename; we see more and more of them
on our system&nbsp;- especially filesystems that are networked to computers
like the Macintosh, where spaces and other &quot;special&quot; characters in
filenames are common.
Double-quoting all arguments through the script helps to be sure that
the script can handle these unusual (but legal!) pathnames.</P
><p class="para"><a class="indexterm" name="AUTOID-51313"></A
><a class="indexterm" name="AUTOID-51316"></A
><a class="indexterm" name="AUTOID-51319"></A
><a class="indexterm" name="AUTOID-51322"></A
>In this case, we want the arguments to be passed to the <em class="emphasis">gzcat</EM
> command.
Let's change the <em class="emphasis">zpg</EM
> script to read:</P
><p class="para"><blockquote class="screen"><pre class="screen">gzcat &quot;$@&quot; &gt;$temp</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-51330"></A
><a class="indexterm" name="AUTOID-51334"></A
>When the shell runs the script with the arguments shown above,
the command line will become:</P
><p class="para"><blockquote class="screen"><pre class="screen">gzcat &quot;report&quot; &quot;memo&quot; &quot;savearts/What's next?&quot; &gt;/tmp/zpg12345</PRE
></BLOCKQUOTE
></P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> <a class="indexterm" name="AUTOID-51341"></A
>On some Bourne shells, if there are no command-line arguments,
the <code class="literal">&quot;$@&quot;</CODE
>
<span class="link">becomes a single empty argument (<a class="linkend" href="ch46_07.htm" webstripperlinkwas="ch46_07.htm" title="Quoting and Command-Line Parameters ">46.7</A
>)</SPAN
>,
as if you'd typed this:</P
><p class="para"><blockquote class="screen"><pre class="screen">gzcat &quot;&quot; &gt;/tmp/zpg12345</PRE
></BLOCKQUOTE
></P
><p class="para">In this case, the <em class="emphasis">gzcat</EM
> command would complain that it can't find a 
file.
(Of course, in this script, the <em class="emphasis">case</EM
> would prevent this problem.
But not all scripts test the number of arguments.)</P
><p class="para">On those shells, you can replace <code class="literal">&quot;$@&quot;</CODE
> with
<span class="link"><code class="literal">${1+&quot;$@&quot;}</CODE
> (<a class="linkend" href="ch45_12.htm" webstripperlinkwas="ch45_12.htm" title="Parameter Substitution ">45.12</A
>)</SPAN
>.
That means that if <code class="literal">$1</CODE
> is defined, <code class="literal">&quot;$@&quot;</CODE
> should be used.
A less-good fix is to replace <code class="literal">&quot;$@&quot;</CODE
> with <code class="literal">$*</CODE
>.
It gives you an unquoted list of command-line arguments; that's usually fine
but can cause trouble on pathnames with special characters in them.</P
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-7130-SECT-1.2">44.15.2 With a Loop </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-51362"></A
><a class="indexterm" name="AUTOID-51365"></A
><a class="indexterm" name="AUTOID-51368"></A
><a class="indexterm" name="AUTOID-51371"></A
><a class="indexterm" name="AUTOID-51374"></A
><a class="indexterm" name="AUTOID-51377"></A
><a class="indexterm" name="AUTOID-51379"></A
>A
<span class="link"><em class="emphasis">for</EM
> loop (<a class="linkend" href="ch44_16.htm" webstripperlinkwas="ch44_16.htm" title="Handling Command-Line Arguments with a for Loop ">44.16</A
>)</SPAN
>
can step through all command-line arguments, one by one.
You can also use a
<span class="link"><em class="emphasis">while</EM
> loop (<a class="linkend" href="ch44_10.htm" webstripperlinkwas="ch44_10.htm" title="Loops That Test Exit Status ">44.10</A
>)</SPAN
>
that tests <code class="literal">$#</CODE
> (see later in this chapter)
and removes the arguments one by one with the
<span class="link"><em class="emphasis">shift</EM
> command (<a class="linkend" href="ch44_17.htm" webstripperlinkwas="ch44_17.htm" title="Handling Arguments with while and shift ">44.17</A
>)</SPAN
>.
The
<span class="link"><em class="emphasis">getopt</EM
> and <em class="emphasis">getopts</EM
> (<a class="linkend" href="ch44_18.htm" webstripperlinkwas="ch44_18.htm" title="Standard Command-Line Parsing ">44.18</A
>)</SPAN
>
commands handle arguments in a more standard way.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-7130-SECT-1.3">44.15.3 Counting Arguments with $# </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-51395"></A
>The <code class="literal">$#</CODE
> parameter counts the number of command-line arguments.
For instance, if there are three arguments, <code class="literal">$#</CODE
> will contain <code class="literal">3</CODE
>.
This is usually used for error-checking
(as in the <em class="emphasis">zpg</EM
> script in article
<a class="xref" href="ch44_12.htm" webstripperlinkwas="ch44_12.htm" title="Trapping Exits Caused by Interrupts ">44.12</A
>)
with
<span class="link"><em class="emphasis">case</EM
> (<a class="linkend" href="ch44_05.htm" webstripperlinkwas="ch44_05.htm" title="Test String Values with Bourne Shell case ">44.5</A
>)</SPAN
>
or
<span class="link"><em class="emphasis">test</EM
> (<a class="linkend" href="ch44_20.htm" webstripperlinkwas="ch44_20.htm" title="test: Testing Files and Strings ">44.20</A
>)</SPAN
>.</P
></DIV
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">JP</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch44_14.htm" webstripperlinkwas="ch44_14.htm" title="44.14 Putting awk, sed, etc., Inside Shell Scripts "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 44.14 Putting awk, sed, etc., Inside Shell Scripts " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch44_16.htm" webstripperlinkwas="ch44_16.htm" title="44.16 Handling Command-Line Arguments with a for Loop "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 44.16 Handling Command-Line Arguments with a for Loop " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">44.14 Putting awk, sed, etc., Inside Shell Scripts </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">44.16 Handling Command-Line Arguments with a for Loop </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
