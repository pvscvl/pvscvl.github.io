<html><head><title>[Chapter 45] 45.36 Shell Lockfile </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:55:24Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch45_01.htm" webstripperlinkwas="ch45_01.htm" title="45. Shell Programming for the Initiated"><link rel="prev" href="ch45_35.htm" webstripperlinkwas="ch45_35.htm" title="45.35 Using a Control Character in a Script "><link rel="next" href="ch46_01.htm" webstripperlinkwas="ch46_01.htm" title="46. Shell Script Debugging and Gotchas"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch45_35.htm" webstripperlinkwas="ch45_35.htm" title="45.35 Using a Control Character in a Script "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 45.35 Using a Control Character in a Script " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 45<br>Shell Programming for the Initiated</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch46_01.htm" webstripperlinkwas="ch46_01.htm" title="46. Shell Script Debugging and Gotchas"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 46. Shell Script Debugging and Gotchas" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-9914">45.36 Shell Lockfile </A
></H2
><p class="para"><a class="indexterm" name="AUTOID-55238"></A
><a class="indexterm" name="AUTOID-55241"></A
><a class="indexterm" name="AUTOID-55243"></A
><a class="indexterm" name="AUTOID-55246"></A
>Here's an efficient and portable way to create a lockfile from a shell
script.
[6]
It's also an interesting demonstration of the way that UNIX
<span class="link">umasks (<a class="linkend" href="ch22_04.htm" webstripperlinkwas="ch22_04.htm" title="Setting an Exact umask ">22.4</A
>)</SPAN
>
and
<span class="link">file permissions (<a class="linkend" href="ch22_02.htm" webstripperlinkwas="ch22_02.htm" title="Tutorial on File and Directory Permissions ">22.2</A
>)</SPAN
>
are handled.</P
><blockquote class="footnote"><p class="para">[6] Greg Ubben sent this idea.</P
></BLOCKQUOTE
><p class="para">A <em class="emphasis">lockfile</EM
> can be used if a particular program might be run more
than once at the same time&nbsp;- and you need to be sure that only one
instance of the program can do something (like modify some file,
access a printer, etc.).  Let's say you have a script called
<em class="emphasis">edmaster</EM
>; it edits a master configuration file named
<em class="emphasis">config</EM
>.  To be sure that two users can't modify the <em class="emphasis">config</EM
>
file at the same time, the first <em class="emphasis">edmaster</EM
> would check whether
the lockfile exists.  If the lockfile doesn't exist, <em class="emphasis">edmaster</EM
>
will create it and modify the <em class="emphasis">config</EM
> file.  When it's done
editing, it removes the lockfile.  If someone tries to run a second
<em class="emphasis">edmaster</EM
> process, it will see the lockfile from the first
<em class="emphasis">edmaster</EM
>, wait and check every few seconds to see if the
lockfile is gone.  Once the first <em class="emphasis">edmaster</EM
> removes the lockfile,
the second <em class="emphasis">edmaster</EM
> can create the lockfile and do its editing
of <em class="emphasis">config</EM
>.</P
><p class="para"><a class="indexterm" name="AUTOID-55267"></A
><a class="indexterm" name="AUTOID-55270"></A
>Here are pieces of a script that check the lock, create it, and
(later) remove it:</P
><p class="para"><table class="screen.co" border="1"><tr><th valign="TOP"><pre class="calloutlist">
&#13;



<a class="co" href="ch45_21.htm" webstripperlinkwas="ch45_21.htm" title="45.21 n&gt;&amp;m: Swap Standard Output and Standard Error ">2&gt;</A
> <a class="co" href="ch13_14.htm" webstripperlinkwas="ch13_14.htm" title="13.14 What Can You Do with an Empty File? ">/dev/null</A
> 


<a class="co" href="ch44_19.htm" webstripperlinkwas="ch44_19.htm" title="44.19 The Bourne Shell set Command ">set</A
> 






&#13;</PRE
></TH
><td valign="TOP"><pre class="screen">
# set name of this program's lockfile:
myname=`basename $0`
LOCKFILE=/tmp/lock.$myname
   ...
# Loop until we get a lock:
until (umask 222; echo $$ &gt;$LOCKFILE) 2&gt;/dev/null   # test &amp; set<a class="indexterm" name="AUTOID-55277"></A
><a class="indexterm" name="AUTOID-55281"></A
>
do
   # Optional message - show lockfile owner and creation time:
   set x `ls -l $LOCKFILE`
   echo &quot;Waiting for user $4 (working since $7 $8 $9)...&quot;

   sleep 5
done

# Do whatever we need exclusive access to do...
   ...
rm -f $LOCKFILE            # unlock</PRE
></TD
></TR
></TABLE
></P
><p class="para">So if another user tried to run <em class="emphasis">edconfig</EM
>, and <em class="emphasis">jpeek</EM
>
had run <em class="emphasis">edconfig</EM
> first, she might see:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>edconfig</B
></CODE
>
Waiting for user jpeek (working since Aug 23 14:05)...
   <i class="lineannotation">...a 5-second pause</I
>
Waiting for user jpeek (working since Aug 23 14:05)...
   <em class="emphasis">another 5-second pause...</EM
>
   <i class="lineannotation">...then jpeek finishes and she can edit the file.</I
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-55296"></A
>How does it work?
Almost all of the action is in the first line of the loop.
A umask of 222 creates files that are read-only
(mode <code class="literal">r--r--r--</CODE
>).
Because the <em class="emphasis">umask&nbsp;222</EM
> command is run in a
<span class="link">subshell (<a class="linkend" href="ch38_04.htm" webstripperlinkwas="ch38_04.htm" title="Subshells ">38.4</A
>)</SPAN
>,
it only affects the lockfile that's created in the subshell at the top
of the loop.
The rest of the shell script keeps its normal umask.</P
><p class="para">If the lockfile already exists (because another process has created it),
the loop executes <code class="literal">sleep&nbsp;5</CODE
>; five seconds later, it tries to create
the lock.
If the lockfile exists, it will be read-only&nbsp;- so, the command
<code class="literal">echo&nbsp;$$&nbsp;&gt;$LOCKFILE</CODE
> will return a nonzero status.
A nonzero status is what keeps an
<span class="link"><em class="emphasis">until</EM
> loop (<a class="linkend" href="ch44_10.htm" webstripperlinkwas="ch44_10.htm" title="Loops That Test Exit Status ">44.10</A
>)</SPAN
>
running.
Once the other process (which has the lock) removes the lockfile,
the <em class="emphasis">echo</EM
> command in the subshell will write the shell's process
ID number into the lockfile and the <em class="emphasis">until</EM
> loop will terminate.</P
><p class="para">But, if the lockfile is read-only, how can it ever be created?
That's the other interesting part of this technique.
The umask only applies to the file <em class="emphasis">as</EM
> it's created; if the file

doesn't exist, the umask doesn't apply to it (yet) and the file can be
created.
In fact, you can create a file with mode 000 by typing:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>(umask 666; echo hi &gt; afile)</B
></CODE
>
$ <code class="userinput"><b>ls -l afile</B
></CODE
>
----------  1 jpeek   wheel   3 Aug 23 14:08 afile</PRE
></BLOCKQUOTE
></P
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">JP</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch45_35.htm" webstripperlinkwas="ch45_35.htm" title="45.35 Using a Control Character in a Script "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 45.35 Using a Control Character in a Script " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch46_01.htm" webstripperlinkwas="ch46_01.htm" title="46. Shell Script Debugging and Gotchas"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 46. Shell Script Debugging and Gotchas" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">45.35 Using a Control Character in a Script </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">46. Shell Script Debugging and Gotchas</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
