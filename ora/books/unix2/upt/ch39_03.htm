<html><head><title>[Chapter 39] 39.3 The csh time variable </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:50:11Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch39_01.htm" webstripperlinkwas="ch39_01.htm" title="39. Time and Performance"><link rel="prev" href="ch39_02.htm" webstripperlinkwas="ch39_02.htm" title="39.2 Timing Programs "><link rel="next" href="ch39_04.htm" webstripperlinkwas="ch39_04.htm" title="39.4 Average Command Runtimes with runtime "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch39_02.htm" webstripperlinkwas="ch39_02.htm" title="39.2 Timing Programs "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 39.2 Timing Programs " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 39<br>Time and Performance</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch39_04.htm" webstripperlinkwas="ch39_04.htm" title="39.4 Average Command Runtimes with runtime "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 39.4 Average Command Runtimes with runtime " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-1230">39.3 The csh time variable </A
></H2
><p class="para"><a class="indexterm" name="AUTOID-43578"></A
><a class="indexterm" name="AUTOID-43580"></A
>The C shell's variable named <em class="emphasis">time</EM
> controls the built-in <em class="emphasis">csh</EM
>
<span class="link"><em class="emphasis">time</EM
> command (<a class="linkend" href="ch39_02.htm" webstripperlinkwas="ch39_02.htm" title="Timing Programs ">39.2</A
>)</SPAN
>.
It lets you run <em class="emphasis">time</EM
> by default on commands that take
more than a certain number of CPU seconds, and it lets you control the
format of <em class="emphasis">time</EM
>'s output.</P
><p class="para">We'll start with the simple stuff. On virtually any UNIX system,
you can use the <em class="emphasis">time</EM
>
<span class="link">shell variable (<a class="linkend" href="ch06_08.htm" webstripperlinkwas="ch06_08.htm" title="Shell Variables ">6.8</A
>)</SPAN
>
to run <em class="emphasis">time</EM
> automatically
when commands take more than a set amount of CPU time. Decide
what your threshhold is (i.e., the point at which you want <em class="emphasis">time</EM
>
to run automatically), in CPU seconds.
Then set the <em class="emphasis">time</EM
> shell
variable to this
number.
For example, if you want to run <em class="emphasis">time</EM
>
automatically on programs that require more than 10 CPU seconds, give
the command:</P
><p class="para"><table class="screen.co" border="1"><tr><th valign="TOP"><pre class="calloutlist">
&#13;

<a class="co" href="ch43_13.htm" webstripperlinkwas="ch43_13.htm" title="43.13 The Text Formatters nroff, troff, ditroff, ... ">nroff</A
> &#13;</PRE
></TH
><td valign="TOP"><pre class="screen">
% <code class="userinput"><b>set time=10</B
></CODE
>
% <code class="userinput"><b>ls</B
></CODE
>
file1.ms   file2.ms   file3.ms
% <code class="userinput"><b>nroff -ms *.ms | lpr</B
></CODE
>
4.3u 9.8s 0:23 60% 0+200k 106+103io 143pf+0w</PRE
></TD
></TR
></TABLE
></P
><p class="para">The <em class="emphasis">ls</EM
> command didn't generate a <em class="emphasis">time</EM
> report because it
ran in well under 10 seconds.
The <em class="emphasis">nroff</EM
> command took about
14.1 CPU seconds, so it did generate a report.</P
><p class="para">Why would you want to do this? It lets you monitor the
performance of long jobs automatically without being bothered by
statistics for the small jobs.</P
><p class="para">On many C shells, you can also use the <em class="emphasis">time</EM
> variable to customize
the timing report.
Sometimes this is useful; the standard report
gives you a lot of information, but it's pretty ugly. For some
reason, this feature often goes undocumented.</P
><p class="para"><a class="indexterm" name="AUTOID-43609"></A
>To customize a timing report, give a command like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>set time=(</B
></CODE
><code class="replaceable"><i>threshold </I
></CODE
><code class="userinput"><b>&quot;</B
></CODE
><code class="replaceable"><i>format-string</I
></CODE
><code class="userinput"><b>&quot;)</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Note that you have to give a threshold, whether you want one or not.
If you don't want execution times reported automatically, set
<em class="emphasis">threshold</EM
> to some large number.</P
><p class="para"><a class="indexterm" name="AUTOID-43621"></A
><a class="indexterm" name="AUTOID-43624"></A
>The format string can be any combination of text and tags. Each
tag causes <em class="emphasis">time</EM
> to insert particular statistics.
The valid
tags seem to vary some from system-to-system (and are undocumented
some places, so you may not be able to tell).
We've used two sources: a version for 4.1BSD written by
Mark Wittenberg and one supplied with Solaris 2.4.
Where the two are different, Mark's is labeled <b class="emphasis.bold">A&gt;</B
> and Sun's
is <b class="emphasis.bold">B&gt;</B
>.</P
><dl class="variablelist"><dt class="term">%D</DT
><dd class="listitem"><p class="para"><b class="emphasis.bold">A&gt;</B
> Average kilobytes of resident data+stack pages.</P
><p class="para"><b class="emphasis.bold">B&gt;</B
> Average amount of unshared data space used,
in kilobytes. This excludes any &quot;shared data.&quot; Shared memory is a
relatively new feature; many programs don't use it.</P
></DD
><dt class="term">%E</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-43641"></A
>The elapsed time required to execute the program. This is the amount
of time you'd measure if you sat with a stopwatch and waited for the
program to finish; it's often called &quot;wall clock&quot; time.</P
></DD
><dt class="term">%F</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-43647"></A
>The number of page faults; i.e., the number of times UNIX had to bring
a page of virtual memory in from disk.
A large number of page faults may mean that your program is taking an
unnecessarily long time to run, and you can fix the problem by buying
more memory.&#13;</P
></DD
><dt class="term">%I</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-43654"></A
>The number of block input operations. This is the number of times the
program needed to read data from disk.</P
></DD
><dt class="term">%K</DT
><dd class="listitem"><p class="para"><b class="emphasis.bold">A&gt;</B
> Average kilobytes of resident text+data+stack pages.</P
><p class="para"><b class="emphasis.bold">B&gt;</B
> Average amount of unshared stack space used,
in kilobytes.</P
></DD
><dt class="term">%M</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-43667"></A
>The maximum amount of real memory (physical memory) used by the
program during execution, in kilobytes.
(On 17 October 1986, Daniel V. Klein reported on Usenet <em class="emphasis">net.unix</EM
> that
the amount %M gives is really just <em class="emphasis">half</EM
> the maximum.
The number does seem to be smaller than %K sometimes, so Daniel is
probably right.
Don't you love undocumented features?)</P
></DD
><dt class="term">%O</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-43675"></A
>The number of block output operations.</P
></DD
><dt class="term">%P</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-43681"></A
>The program's total CPU time, as a percentage of elapsed time. If
you're the only user on the system and the program does little I/O,
this should be close to 100%. It will decrease as the program's I/O
requirements and the system's overall load increase.</P
></DD
><dt class="term">%S</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-43688"></A
>CPU system time; the number of seconds the CPU spent in the &quot;system&quot; state on
behalf of your program&nbsp;- i.e., how much time the system spent executing
system calls on behalf of your program.</P
></DD
><dt class="term">%U</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-43694"></A
>CPU user time; the number of seconds the CPU spent in the &quot;user&quot; state on
behalf of your program&nbsp;- i.e., how much time the system spent executing
your program itself.</P
></DD
><dt class="term">%W</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-43700"></A
>The number of &quot;swaps&quot;; the number of times the system needed to move
your whole program to disk in order to free memory. If this is
non-zero, your system needs more memory.</P
></DD
><dt class="term">%X</DT
><dd class="listitem"><p class="para"><b class="emphasis.bold">A&gt;</B
> Average kilobytes of resident text pages.</P
><p class="para"><b class="emphasis.bold">B&gt;</B
> The average amount of shared memory that your program required, in
kilobytes.<a class="indexterm" name="AUTOID-43709"></A
></P
></DD
></DL
><p class="para">For example, let's say that we want time statistics for programs that
require more than 10 seconds of CPU time, and that we want to
report the system time, the user time, and the elapsed time.</P
><p class="para">Despite the huge number of statistics you can get, these are all that
you really care about, unless you're a performance expert. To do so,
we'll set the <em class="emphasis">time</EM
> variable like this (you can also set it in
your
<span class="link"><em class="emphasis">.cshrc</EM
> file (<a class="linkend" href="ch02_02.htm" webstripperlinkwas="ch02_02.htm" title="Shell Setup Files-Which, Where, and Why ">2.2</A
>)</SPAN
>):</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>set time=(10 &quot;System time: %S  User time: %U  Elapsed time: %E&quot;)</B
></CODE
>
% <code class="userinput"><b>nroff -man * &gt; /dev/null</B
></CODE
>
System time: 0.3  User time: 41.2  Elapsed time: 0:43</PRE
></BLOCKQUOTE
></P
><p class="para">This report is much clearer than the mess you get by default. It
shows clearly that the <em class="emphasis">nroff</EM
> command required 0.3 seconds of
system-state CPU time, 41.2 seconds of user-state CPU time, and a
total elapsed time of 43 seconds.&#13;</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> I have seen a note somewhere saying that
many of <em class="emphasis">time</EM
>'s more obscure statistics weren't reported
correctly. By &quot;obscure statistics,&quot; I mean page faults, average
amount of unshared stack space, and the like. You can 
trust the user and system CPU time, the elapsed time, and other basic
statistics, but if you really care about the fancy statistics, beware.
I seriously doubt that any vendor has fixed these problems.</P
></BLOCKQUOTE
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">ML</SPAN
>, <span class="authorinitials">JP</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch39_02.htm" webstripperlinkwas="ch39_02.htm" title="39.2 Timing Programs "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 39.2 Timing Programs " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch39_04.htm" webstripperlinkwas="ch39_04.htm" title="39.4 Average Command Runtimes with runtime "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 39.4 Average Command Runtimes with runtime " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">39.2 Timing Programs </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">39.4 Average Command Runtimes with runtime </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
