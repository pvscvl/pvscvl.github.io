<html><head><title>[Chapter 48] 48.10 Working with Names and Addresses </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-10-23T15:55:35Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch48_01.htm" webstripperlinkwas="ch48_01.htm" title="48. Office Automation"><link rel="prev" href="ch48_09.htm" webstripperlinkwas="ch48_09.htm" title="48.9 PostScript Calendars with pcal "><link rel="next" href="ch48_11.htm" webstripperlinkwas="ch48_11.htm" title="48.11 The index Database Program "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch48_09.htm" webstripperlinkwas="ch48_09.htm" title="48.9 PostScript Calendars with pcal "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 48.9 PostScript Calendars with pcal " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 48<br>Office Automation</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch48_11.htm" webstripperlinkwas="ch48_11.htm" title="48.11 The index Database Program "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 48.11 The index Database Program " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-7780">48.10 Working with Names and Addresses </A
></H2
><p class="para"><a class="indexterm" name="UPT-ART-7780-IX-ADDRESS-DATABASES-CREATED-USING-AWK"></A
><a class="indexterm" name="UPT-ART-7780-IX-DATABASES-CREATED-USING-AWK"></A
><a class="indexterm" name="UPT-ART-7780-IX-NAWK-UTILITY-DATABASES-CREATED-USING"></A
>One of the simplest applications of
<span class="link"><em class="emphasis">awk</EM
> (<a class="linkend" href="ch33_11.htm" webstripperlinkwas="ch33_11.htm" title="Quick Reference: awk ">33.11</A
>)</SPAN
>
is building a name and address database.
It is a good exercise
for learning <em class="emphasis">awk</EM
> as well. It involves organizing
the information as a record and then writing programs
that extract information from the records for display
in reports.
The scripts in this article use
<span class="link"><em class="emphasis">nawk</EM
> (<a class="linkend" href="ch33_12.htm" webstripperlinkwas="ch33_12.htm" title="Versions of awk ">33.12</A
>)</SPAN
>
instead of <em class="emphasis">awk</EM
>, but the principles are the same.</P
><p class="para">The first thing to decide is the structure of a record.
At the very least we'd like to have 
the following fields:</P
><blockquote class="literallayout"><p class="literallayout">Name<br>Street<br>City<br>State<br>Zip</P
></BLOCKQUOTE
><p class="para">But we may wish to have a more complex record structure:</P
><blockquote class="literallayout"><p class="literallayout">Name<br>Title<br>Company<br>Division<br>Street<br>City<br>State<br>Zip<br>Phone<br>Fax<br>Email<br>Directory<br>Comments</P
></BLOCKQUOTE
><p class="para">It doesn't matter to our programming effort whether the
record has five fields or thirteen. It does matter that
the structure is decided upon before you begin programming. </P
><p class="para">The next decision we must make is how to distinguish
one field from the next and how to distinguish one record
from another. If your records are short, you could have
one record per line and use an oddball character as a field
delimiter:</P
><p class="para"><blockquote class="literallayout"><p class="literallayout">Name~Street~City~State~Zip<br>Name1~Street1~City1~State1~Zip1</P
></BLOCKQUOTE
></P
><p class="para">The downside of this solution is that it can be difficult
to edit the records. (We are going to try to avoid writing
programs for automating data entry. Instead, we will assume
that you create the record with a text editor-<em class="emphasis">vi</EM
> or Emacs,
for example.)</P
><p class="para">Another solution is to put each field on a line by itself
and separate the records with a blank line: </P
><blockquote class="literallayout"><p class="literallayout">Name<br>Street<br>City<br>State<br>Zip<br><br>Name1<br>Street1<br>City1<br>State1<br>Zip1</P
></BLOCKQUOTE
><p class="para">This is a good solution. You have to be careful that the
data does not itself contain blank lines. For instance,
if you wanted to add a field for Company name, and not
all records have a value for Company, then you must use
a placeholder character to indicate an empty value.</P
><p class="para">Another solution is to put each record in its own file and 
put each field on its own line. This is the record organization
we will implement for our program. Two advantages
of it are that it permits variable length records and it does
not require the use of special delimiter characters. It
is therefore pretty easy to create or edit a record. It is
also very easy to select a subset of records for processing.</P
><p class="para">We will give each file a name that uniquely identifies 
it in the current directory.
A list of records is the same as a list of files.
Here is a sample record in a file named <em class="emphasis">pmui</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">Peter Mui
International Sales Manager
O'Reilly &amp; Associates, Inc.
East Coast Division
90 Sherman Street
Cambridge
MA
01240
617-354-5800
617-661-1116
peter@ora.com
/home/peter
Any number of lines may appear as 
a comment.</PRE
></BLOCKQUOTE
></P
><p class="para">In this record, there are thirteen fields, any of which can be blank (but
the blank line must be there to save the position), and the
last field can have as many lines as needed. </P
><p class="para">Our record does not contain labels that identify what each
field contains. While we could put that information in
the record itself, it is better to maintain the labels separately
so they can be changed in a single location.
(You can create a record template that

contains the labels
to help you identify fields when adding a new record.)</P
><p class="para">We have put the labels for these fields in a separate
file named <em class="emphasis">dict</EM
>. We won't show this file because its contents 
describe the record structure as shown above.</P
><p class="para">We are going to have three programs and they share the same
syntax:</P
><blockquote class="literallayout"><p class="literallayout"><code class="replaceable"><i>command record-list</I
></CODE
></P
></BLOCKQUOTE
><p class="para">The <code class="replaceable"><i>record-list</I
></CODE
> is a list of one or more filenames. You
can use wildcard characters, of course, on the command line to
specify multiple records.</P
><p class="para"><a class="indexterm" name="AUTOID-58251"></A
>The first program, <em class="emphasis">read.base</EM
>,
reads the <em class="emphasis">dict</EM
> file
to get the labels and outputs a formatted record.</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>read.base record</B
></CODE
>

pmui:
1.  Name:   Peter Mui
2.  Title:   International Sales Manager
3.  Company:   O'Reilly &amp; Associates, Inc.
4.  Division:   East Coast Division
5.  Street:   90 Sherman Street
6.  City:   Cambridge
7.  State:   MA
8.  Zip:   01240
9.  Phone:   617-354-5800
10. Fax:   617-661-1116
11. Email:   peter@ora.com
12. Directory:   /home/peter
13. Comments:   Any number of lines may appear as 
a comment.</PRE
></BLOCKQUOTE
></P
><p class="para"><em class="emphasis">read.base</EM
> first outputs the record name and then
lists each field.
Let's look at <em class="emphasis">read.base</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">nawk 'BEGIN { FS=&quot;:&quot;
    # test to see that at least one record was specified
    if (ARGC &lt; 2) {
        print &quot;Please supply record list on command line&quot;
        exit 
    }

    # name of local file containing field labels:
    record_template = &quot;dict&quot;

    # loop to read the record_template
    # field_inc = the number of fields  
    # fields[] = an array of labels indexed by position

    field_inc=0

    while ((getline &lt; record_template) &gt; 0) {
        ++field_inc
        fields[field_inc] = $1
    }
    field_tot=field_inc
}

# Now we are reading the records
# Print filename for each new record
FNR == 1 { 
    field_inc=0
    print &quot;\n&quot; FILENAME &quot;:&quot;
}
{ 

    # Print the field's position, label and value  
    # The last field can have any number of lines without a label.

    if (++field_inc &lt;= field_tot){
        if (field_inc &gt;= 10)
            space = &quot;. &quot;
        else
            space = &quot;.  &quot;

        print field_inc space fields[field_inc] &quot;:\t&quot; $NF 
}
else
    print $NF 
}' $*</PRE
></BLOCKQUOTE
></P
><p class="para">Note that the program is not
doing any input validation. If the record is missing
a Division name (and you didn't leave the fourth line
blank), whatever is on line&nbsp;4 will match up with Division,
even if it's really a street address.
One of the uses of <em class="emphasis">read.base</EM
> is simply to verify
that what you entered in the file is correct.</P
><p class="para">If you specify more than one record, then you will
get all of those records output in the order that
you specified them on the command line.</P
><p class="para"><a class="indexterm" name="AUTOID-58267"></A
>The second program is <em class="emphasis">mail.base</EM
>.
It extracts
mailing label information.</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>mail.base pmui</B
></CODE
>

Peter Mui
International Sales Manager
O'Reilly &amp; Associates, Inc.
East Coast Division
90 Sherman Street
Cambridge, MA 01240</PRE
></BLOCKQUOTE
></P
><p class="para">If you supply a <em class="emphasis">record-list</EM
>, then you will get a list
of mailing labels. </P
><p class="para">Here is the <em class="emphasis">mail.base</EM
> program:</P
><p class="para"><blockquote class="screen"><pre class="screen">nawk 'BEGIN { FS=&quot;\n&quot;; 

    # test that user supplies a record
    if (ARGC &lt; 2) {

        print &quot;Please supply record list on command line&quot;
        exit 
    }
}

# ignore blank lines
/^$/ { next }

# this is hard-coded to record format;
# print first 5 fields and then print
# city, state zip on one line.
{ 
    if (FNR &lt; 6)
        print $0 
    else
        if (FNR == 6)
            printf $0 &quot;, &quot;
        else if (FNR == 7)
            printf $0
        else if (FNR == 8)
            printf &quot; &quot; $0 &quot;\n\n&quot;
}' $*</PRE
></BLOCKQUOTE
></P
><p class="para">Variations on this very simple program can be written to extract or 
compile other pieces of information. You could also output
formatting codes used when printing the labels.</P
><p class="para"><a class="indexterm" name="AUTOID-58281"></A
>The last program is <em class="emphasis">list.base</EM
>.
It prepares a tabular
list of names and records and allows you to select a
particular record.</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>list.base lwalsh pmui jberlin</B
></CODE
>

  # NAME &amp; COMPANY                           FILE           
 1. Linda Walsh, O'Reilly &amp; Associates, Inc. lwalsh         
 2. Peter Mui, O'Reilly &amp; Associates, Inc.   pmui        
 3. Jill Berlin, O'Reilly &amp; Associates, Inc. jberlin        
Select a record by number: 2</PRE
></BLOCKQUOTE
></P
><p class="para">When you select the record number, that
record is displayed by using <em class="emphasis">read.base</EM
>. I have not built in any
paging capability, so the list will scroll continuously
rather than pause after 24 lines or so as it might.</P
><p class="para">Here is the <em class="emphasis">list.base</EM
> program:</P
><p class="para"><blockquote class="screen"><pre class="screen">nawk 'BEGIN { 
    # Do everything as BEGIN procedure

    # test that user supplied record-list

    if (ARGC &lt; 2) {
        print &quot;Please supply record list on command line&quot;
        exit 
    }

    # Define report format string in one place.
    FMTSTR = &quot;%3s %-40s %-15s\n&quot;

    # print report header

    printf(FMTSTR, &quot;#&quot;,&quot;NAME &amp; COMPANY&quot;, &quot;FILE&quot;) 

    # For each record, get Name, Title and Company and print it.
    inc=0
    for (x=1; x &lt; ARGC; x++){
        getline NAME &lt; ARGV[x]
        getline TITLE &lt; ARGV[x]
        getline COMPANY &lt; ARGV[x]
        record_list[x] = ARGV[x]
        printf(FMTSTR, ++inc &quot;.&quot;, NAME &quot;, &quot;  COMPANY, ARGV[x]) 
    }

    # Prompt user to select a record by number

    printf &quot;Select a record by number:&quot;
    getline answer &lt; &quot;-&quot;

    # Call read.base program to display the selected record

    system(&quot;read.base &quot; record_list[answer])
}

' $*</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Different versions of this program can be written to examine
individual pieces of information across a set of records.</P
><p class="para">Article
<a class="xref" href="ch45_22.htm" webstripperlinkwas="ch45_22.htm" title="Handling Files Line-by-Line ">45.22</A
>
shows how to write a shell script that creates a prompt-driven front
end to collect names and addresses.
(It needs to be modified to put out a blank line for empty fields
and not to write the labels into the file.)<a class="indexterm" name="AUTOID-58296"></A
><a class="indexterm" name="AUTOID-58297"></A
><a class="indexterm" name="AUTOID-58298"></A
></P
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">DD</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch48_09.htm" webstripperlinkwas="ch48_09.htm" title="48.9 PostScript Calendars with pcal "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 48.9 PostScript Calendars with pcal " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch48_11.htm" webstripperlinkwas="ch48_11.htm" title="48.11 The index Database Program "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 48.11 The index Database Program " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">48.9 PostScript Calendars with pcal </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">48.11 The index Database Program </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
