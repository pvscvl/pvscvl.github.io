<html><head><title>[Chapter 34] 34.15 Making Edits Across Line Boundaries </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:47:23Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch34_01.htm" webstripperlinkwas="ch34_01.htm" title="34. The sed Stream Editor"><link rel="prev" href="ch34_14.htm" webstripperlinkwas="ch34_14.htm" title="34.14 Transforming Part of a Line "><link rel="next" href="ch34_16.htm" webstripperlinkwas="ch34_16.htm" title="34.16 The Deliberate Scrivener "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch34_14.htm" webstripperlinkwas="ch34_14.htm" title="34.14 Transforming Part of a Line "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 34.14 Transforming Part of a Line " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 34<br>The sed Stream Editor</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch34_16.htm" webstripperlinkwas="ch34_16.htm" title="34.16 The Deliberate Scrivener "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 34.16 The Deliberate Scrivener " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-0089">34.15 Making Edits Across Line Boundaries </A
></H2
><p class="para"><a class="indexterm" name="UPT-ART-89-IX-SED-PATTERN-SPACE"></A
><a class="indexterm" name="AUTOID-38964"></A
>Most programs that use
<span class="link">regular expressions (<a class="linkend" href="ch26_04.htm" webstripperlinkwas="ch26_04.htm" title="Using Metacharacters in Regular Expressions ">26.4</A
>)</SPAN
>
are able
to match a pattern only on a single line of input. This makes
it difficult to find or change a phrase, for instance, because it can start
near the end of one line and finish near the beginning of the next
line. Other patterns might be significant only when repeated
on multiple lines.</P
><p class="para"><em class="emphasis">sed</EM
> has the ability to load more than one line into the pattern
space.
This allows you to match (and change) patterns that extend over multiple lines.
In this article, we show how to
create a multiline pattern space and manipulate
its contents. </P
><p class="para">The multiline Next command, <em class="emphasis">N</EM
>, creates a multiline pattern space
by reading a new line of input and appending it to the
contents of the pattern space.
The original contents of the pattern space and the new input line
are separated by a newline.
The embedded newline character can be matched in patterns
by the escape sequence <code class="literal">\n</CODE
>.
In a multiline pattern space, only the metacharacter <code class="literal">^</CODE
> 
matches the newline at the beginning of the pattern space
and <code class="literal">$</CODE
> matches the newline at the end. 
After the Next command is executed, 
control is then passed to subsequent commands in the script.</P
><p class="para">The Next command differs from the next command, <em class="emphasis">n</EM
>,
which outputs the contents of the pattern space
and then reads a new line of input. The next command does
not create a multiline pattern space. </P
><p class="para">For our first example, let's suppose that we wanted to
change &quot;Owner and Operator Guide&quot; to &quot;Installation Guide&quot;
but we found that it appears in the file on two lines,
splitting between <code class="literal">Operator</CODE
> and <code class="literal">Guide</CODE
>.
For instance, here are a few lines of sample text:</P
><p class="para"><blockquote class="screen"><pre class="screen">Consult Section 3.1 in the Owner and Operator
Guide for a description of the tape drives
available on your system.</PRE
></BLOCKQUOTE
></P
><p class="para">The following script looks for <code class="literal">Operator</CODE
> at the end of 
a line, reads the next line of input, and then makes
the replacement:</P
><p class="para"><blockquote class="screen"><pre class="screen">/Operator$/{
    N
    s/Owner and Operator\nGuide/Installation Guide/
}</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;In this example, we know where the two lines split and 
where to specify the embedded newline.
When the script is run on the sample file, it produces
the two lines of output, one of which combines
the first and second lines and is too long
to show here.
This happens because the substitute command matches
the embedded newline but does not replace it. 
Unfortunately, you cannot use <code class="literal">\n</CODE
> to insert a newline
in the replacement string.
You must either use the backslash
to escape the newline, as follows:</P
><p class="para"><blockquote class="screen"><pre class="screen">s/Owner and Operator\nGuide /Installation Guide\
/</PRE
></BLOCKQUOTE
></P
><p class="para">or use the
<span class="link"><code class="literal">\(</CODE
>..<code class="literal">\)</CODE
> operators (<a class="linkend" href="ch34_10.htm" webstripperlinkwas="ch34_10.htm" title="Referencing Portions of a Search String ">34.10</A
>)</SPAN
>
to keep the newline:</P
><p class="para"><blockquote class="screen"><pre class="screen">s/Owner and Operator\(\n\)Guide /Installation Guide\1/</PRE
></BLOCKQUOTE
></P
><p class="para">This command restores the newline after <code class="literal">Installation Guide</CODE
>.
It is also necessary to match a blank space following <code class="literal">Guide</CODE
>
so the new line won't begin with a space. 
Now we can show the output: </P
><p class="para"><blockquote class="screen"><pre class="screen">Consult Section 3.1 in the Installation Guide 
for a description of the tape drives
available on your system.</PRE
></BLOCKQUOTE
></P
><p class="para">Remember, you don't have to replace the newline, but if you
don't, it can make for some long lines.</P
><p class="para">What if there are other occurrences of &quot;Owner and Operator Guide&quot; that break over
multiple lines in different places? You could 
change the address to match <code class="literal">Owner</CODE
>, the first
word in the pattern instead of the last, and then modify 
the regular expression to look for a space or a newline
between words, as shown below:</P
><p class="para"><blockquote class="screen"><pre class="screen">/Owner/{
N
s/Owner *\n*and *\n*Operator *\n*Guide/Installation Guide/
}</PRE
></BLOCKQUOTE
></P
><p class="para">The asterisk (<code class="literal">*</CODE
>) indicates that the space or newline is optional.
This seems like hard work though, and indeed there is a more
general way. We can read the newline
into the pattern space and then
use a substitute command to remove the embedded newline, wherever
it is: </P
><p class="para"><blockquote class="screen"><pre class="screen">s/Owner and Operator Guide/Installation Guide/
/Owner/{
N
s/ *\n/ /
s/Owner and Operator Guide */Installation Guide\
/
}</PRE
></BLOCKQUOTE
></P
><p class="para">The first line of the script matches <code class="literal">Owner and Operator Guide</CODE
> when it appears
on a line by itself. (See the discussion at the end of the article about
why this is necessary.)
If we match the string
<code class="literal">Owner</CODE
>, we read the next line into the pattern space and replace the
embedded newline with a space. Then we attempt to match the whole
pattern and make the replacement followed by a newline.
This script will match <code class="literal">Owner and Operator
Guide</CODE
> regardless

of how it is broken across two lines.
Here's our expanded test file:</P
><p class="para"><blockquote class="screen"><pre class="screen">Consult Section 3.1 in the Owner and Operator
Guide for a description of the tape drives
available on your system.

Look in the Owner and Operator Guide shipped with your system.

Two manuals are provided, including the Owner and
Operator Guide and the User Guide.

The Owner and Operator Guide is shipped with your system.</PRE
></BLOCKQUOTE
></P
><p class="para">Running the above script on the sample file produces
the following result:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>sed -f sedscr sample</B
></CODE
>
Consult Section 3.1 in the Installation Guide
for a description of the tape drives
available on your system.

Look in the Installation Guide shipped with your system.

Two manuals are provided, including the Installation Guide
and the User Guide.

The Installation Guide is shipped with your system.</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;In this sample script, it
might seem redundant to have two substitute commands that
match the pattern. The first command matches it when the
pattern is found already on one line, and the second matches
the pattern after two lines have been read into the pattern space. 
Why the first command is necessary is perhaps best demonstrated
by removing that command from the script and running it on
the sample file:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>sed -f sedscr2 sample</B
></CODE
>
Consult Section 3.1 in the Installation Guide
for a description of the tape drives
available on your system.

Look in the Installation Guide
shipped with your system.
Two manuals are provided, including the Installation Guide
and the User Guide.</PRE
></BLOCKQUOTE
></P
><p class="para">Do you see the two problems?
The most obvious problem is that the last line
did not print. The last line matches <code class="literal">Owner</CODE
>, and
when <em class="emphasis">N</EM
> is executed, there is not another input
line to read, so <em class="emphasis">sed</EM
> quits.
It does not even output the line.
If this is the normal
behavior,
the Next command should be used as follows
to be safe: </P
><p class="para"><blockquote class="screen"><pre class="screen">$!N</PRE
></BLOCKQUOTE
></P
><p class="para">It excludes the last line (<code class="literal">$</CODE
>) from the Next command.
As it is in our script, by matching <code class="literal">Owner and Operator
Guide</CODE
> on the last line, we avoid matching <code class="literal">Owner</CODE
>
and applying the <em class="emphasis">N</EM
> command. However, if the word <code class="literal">Owner</CODE
>
appeared on the last line we'd have the same problem
unless we implement the <code class="literal">$!N</CODE
> syntax. </P
><p class="para">The second problem is a little less conspicuous. It has
to do with the occurrence of <code class="literal">Owner and Operator
Guide</CODE
> in the second paragraph. In the input file,
it is found on a line by itself: </P
><p class="para"><blockquote class="screen"><pre class="screen">Look in the Owner and Operator Guide shipped with your system.</PRE
></BLOCKQUOTE
></P
><p class="para">In the output shown above, the blank line following
<code class="literal">shipped with your system</CODE
> is missing. The reason for
this is that this line matches <code class="literal">Owner</CODE
> and the next
line, a blank line, is appended to the pattern space.
The substitute command removes the embedded newline, and
the blank line has in effect vanished. (If the line
were not blank, the newline would still be removed
but the text would  appear on the same line with
<code class="literal">shipped with your system</CODE
>.) The best
solution seems to be to avoid reading the next line
when the pattern can be matched on one line.
So, that is why the first instruction attempts to match the case
where the string appears all on one line.<a class="indexterm" name="AUTOID-39045"></A
></P
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">DD</SPAN
> <span class="bibliomisc">from O'Reilly &amp; Associates' <cite class="citetitle">sed &amp; awk</CITE
>, Chapter 6</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch34_14.htm" webstripperlinkwas="ch34_14.htm" title="34.14 Transforming Part of a Line "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 34.14 Transforming Part of a Line " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch34_16.htm" webstripperlinkwas="ch34_16.htm" title="34.16 The Deliberate Scrivener "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 34.16 The Deliberate Scrivener " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">34.14 Transforming Part of a Line </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">34.16 The Deliberate Scrivener </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
