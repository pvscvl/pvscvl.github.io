<html><head><title>[Chapter 1] 1.23 File Access Permissions </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:31:28Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch01_01.htm" webstripperlinkwas="ch01_01.htm" title="1. Introduction"><link rel="prev" href="ch01_22.htm" webstripperlinkwas="ch01_22.htm" title="1.22 How UNIX Keeps Track of Files: Inodes "><link rel="next" href="ch01_24.htm" webstripperlinkwas="ch01_24.htm" title="1.24 The Superuser (Root) "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch01_22.htm" webstripperlinkwas="ch01_22.htm" title="1.22 How UNIX Keeps Track of Files: Inodes "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 1.22 How UNIX Keeps Track of Files: Inodes " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 1<br>Introduction</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch01_24.htm" webstripperlinkwas="ch01_24.htm" title="1.24 The Superuser (Root) "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 1.24 The Superuser (Root) " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-1026">1.23 File Access Permissions </A
></H2
><p class="para"><a class="indexterm" name="UPT-ART-1026-IX-FILES-ACCESS-PERMISSIONS"></A
><a class="indexterm" name="UPT-ART-1026-IX-PERMISSIONS"></A
><a class="indexterm" name="UPT-ART-1026-IX-ACCESS-PERMISSIONS"></A
>Under UNIX, access to files is based on the concept of users and
groups.</P
><p class="para"><a class="indexterm" name="UPT-ART-1026-IX-USER-IDS-UIDS-FILE-ACCESS"></A
><a class="indexterm" name="AUTOID-2113"></A
>Every &quot;user&quot; on a system has a unique account with a unique login name and a
unique
<span class="link">UID (<a class="linkend" href="ch38_03.htm" webstripperlinkwas="ch38_03.htm" title="Managing Processes: Overall Concepts ">38.3</A
>)</SPAN
>
(user ID number).
It is possible, and sometimes convenient, to
create accounts that are shared by groups of people. For example, in a
transaction processing application, all of the order-entry personnel
might be assigned a common login name (as far as UNIX is concerned,
they only count as one user). In a research and development
environment, certain administrative operations might be easier if
members of a team shared the same account, in addition to their own
accounts. However, in most situations each person using the system
has one and only one user ID, and vice versa.</P
><p class="para">Every user may be a member of one or more &quot;groups.&quot;
[3]<a class="indexterm" name="AUTOID-2121"></A
><a class="indexterm" name="AUTOID-2123"></A
><a class="indexterm" name="AUTOID-2125"></A
>
The user's
entry in the master password file
(<span class="link"><em class="emphasis">/etc/passwd</EM
> (<a class="linkend" href="ch36_03.htm" webstripperlinkwas="ch36_03.htm" title="Changing the Field Delimiter ">36.3</A
>)</SPAN
>)
defines his
&quot;primary group membership.&quot;
The
<span class="link"><em class="emphasis">/etc/group</EM
> (<a class="linkend" href="ch22_13.htm" webstripperlinkwas="ch22_13.htm" title="Groups and Group Ownership ">22.13</A
>)</SPAN
>
file defines the
groups that are available and can also assign other users to these
groups as needed. For example, I am a member of three groups: <em class="emphasis">staff</EM
>,
<em class="emphasis">editors</EM
>, and <em class="emphasis">research</EM
>. My primary group is <em class="emphasis">staff</EM
>;
the <em class="emphasis">group</EM
> file says that I am also a member of the <em class="emphasis">editors</EM
>
and <em class="emphasis">research</EM
> groups. We call <em class="emphasis">editors</EM
> and <em class="emphasis">research</EM
>
my &quot;secondary groups.&quot; The system administrator is responsible for
maintaining the <em class="emphasis">group</EM
> and <em class="emphasis">passwd</EM
> files. You don't need to
worry about them unless you're administering your own system.</P
><blockquote class="footnote"><p class="para">[3] In Berkeley and other newer UNIX systems, users have the access privileges
of all groups they belong to, all at the same time.
In other UNIX systems, you use a command like <em class="emphasis">newgrp</EM
> to change
the group you currently belong to.</P
></BLOCKQUOTE
><p class="para">Every file belongs to one user and one group. When a file is first
created, its owner is the user who created it; its group is
<span class="link"> the user's primary group or the group of the directory it's created in . (<a class="linkend" href="ch22_05.htm" webstripperlinkwas="ch22_05.htm" title="Group Permissions in a Directory with the setgid Bit ">22.5</A
>, <a class="linkend" href="ch22_13.htm" webstripperlinkwas="ch22_13.htm" title="Groups and Group Ownership ">22.13</A
>)</SPAN
>
For example, all files I create are owned by the user
<em class="emphasis">mikel</EM
> and the group <em class="emphasis">staff</EM
>. As the file's owner, I am allowed to
use the<a class="indexterm" name="AUTOID-2146"></A
>
<em class="emphasis">chgrp</EM
> command
to change the file's
group.
On filesystems that don't have
<span class="link">quotas (<a class="linkend" href="ch24_17.htm" webstripperlinkwas="ch24_17.htm" title="Disk Quotas ">24.17</A
>)</SPAN
>,
I can also use the<a class="indexterm" name="AUTOID-2150"></A
>
<em class="emphasis">chown</EM
> command
to change the file's owner.
(To change ownership on systems with quotas, see article
<a class="xref" href="ch22_21.htm" webstripperlinkwas="ch22_21.htm" title="How to Change File Ownership Without chown">22.21</A
>.)
For example, to change the file <em class="emphasis">data</EM
> so that it
is owned by the user <em class="emphasis">george</EM
> and the group <em class="emphasis">others</EM
>, I give
the commands:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>chgrp others data</B
></CODE
>
% <code class="userinput"><b>chown george data</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If you need to change both owner and group, change the group first!
You won't have permission to change the group after you aren't the owner.
Some versions of <em class="emphasis">chown</EM
> can change both owner and group at the same
time:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>chown george.others data</B
></CODE
></PRE
></BLOCKQUOTE
></P
><table class="para.programreference" border="1"><tr><th valign="TOP"><a class="programreference" href="examples/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/examples/index.htm" title="chown">chown</A
><br><a class="programreference" href="examples/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/examples/index.htm" title="chgrp">chgrp</A
><br></TH
><td valign="TOP">&#13;If you need <em class="emphasis">chown</EM
> or <em class="emphasis">chgrp</EM
> for some reason, the GNU
versions are on the CD-ROM.</TD
></TR
></TABLE
><p class="para"><a class="indexterm" name="UPT-ART-1026-IX-MODE-BITS"></A
>File access is based on a file's user and group ownership and a set of
access bits (commonly called the <em class="emphasis">mode bits</EM
>). When you try to
access a file, you are put into one of three classes. You are either
the file's owner, a member of the file's group, or an &quot;other.&quot;
Three bits then determine whether you are allowed to read, write, or
execute the file.
So, as
<a class="xref" href="#UPT-ART-1026-FIG-0" title="Filesystem Permission Bits">Figure 1.5</A
>
shows, there are a total of nine mode bits (three for
each class) that set the basic access permissions.</P
><h4 class="figure"><a class="title" name="UPT-ART-1026-FIG-0">Figure 1.5: Filesystem Permission Bits</A
></H4
><img class="graphic" src="figs/1026a.gif" webstripperlinkwas="figs/1026a.gif" alt="Figure 1.5"><p class="para">It is common to see these nine basic mode bits interpreted as an octal
(base-8) number, in which each digit specifies the access permitted
for one class.
Each three bits makes one octal digit.
<a class="xref" href="#UPT-ART-1026-FIG-1" title="Changing Permission Bits to an Octal Number">Figure 1.6</A
>
shows how to do it.</P
><h4 class="figure"><a class="title" name="UPT-ART-1026-FIG-1">Figure 1.6: Changing Permission Bits to an Octal Number</A
></H4
><img class="graphic" src="figs/1026b.gif" webstripperlinkwas="figs/1026b.gif" alt="Figure 1.6"><p class="para">Let's turn the mode bits 111101001 into an octal number.
Break it into chunks of three bits: 111 101 001. The first group, 111,
is 4+2+1 or 7. The second group, 101, 
is 4+0+1 or 5. The third group,
001, is 0+0+1 or 1. So those mode bits can be written as the octal number 751.</P
><p class="para">To tie this together, look at
<a class="xref" href="#UPT-ART-1026-FIG-0" title="Filesystem Permission Bits">Figure 1.5</A
>
again-and work out these examples yourself.
For example, if the owner of a file has read and write access,
but no one else is allowed to touch the file, we say that it has the
access mode 600. A file that is readable, writable, and executable
by everyone has access mode 777. A file that is readable and
writable by everyone (i.e., a public text file) has mode 666.</P
><p class="para">It is also common to see the mode bits expressed as a sequence of
ten alphabetic characters (look at the listing from
<span class="link"><em class="emphasis">ls -l</EM
> (<a class="linkend" href="ch22_02.htm" webstripperlinkwas="ch22_02.htm" title="Tutorial on File and Directory Permissions ">22.2</A
>)</SPAN
>).
The first character tells you the file's type. For a plain file, this
character is a <code class="literal">-</CODE
>. For a directory, it's a <code class="literal">d</CODE
>. The
next three bits report the owner's access, the middle three bits
report group access, and the final three bits report access for others.
An <code class="literal">r</CODE
> indicates that read access is allowed, <code class="literal">w</CODE
> indicates
that write access is allowed, and <code class="literal">x</CODE
> indicates that execute
access is allowed. For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">-rw-------<i class="lineannotation">is mode 600</I
>
-rwxrwxrwx<i class="lineannotation">is mode 777</I
>
-rw-rw-rw-<i class="lineannotation">is mode 666</I
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-2201"></A
><a class="indexterm" name="AUTOID-2202"></A
>You can change a string like <code class="literal">rw-rw-rw-</CODE
> into an octal number
with the technique in
<a class="xref" href="#UPT-ART-1026-FIG-1" title="Changing Permission Bits to an Octal Number">Figure 1.6</A
>
Split it into three-bit chunks.
For example, <code class="literal">rw-</CODE
> would have the value 4+2+0-that's 6.
Therefore, <code class="literal">rw-rw-rw-</CODE
> is 666 octal.</P
><p class="para"><a class="indexterm" name="AUTOID-2209"></A
>If the file is executable, a few other bits come into play. One is
the &quot;sticky bit,&quot; which tells UNIX to leave the executable in memory
after the program has finished running. In theory, leaving the
executable around reduces the program's startup time for subsequent
users. The sticky bit was an
interesting idea a long time ago, but it is obsolete now: modern
virtual memory techniques like demand paging have made it
unnecessary. Many UNIX users and UNIX books still believe
that the sticky bit does something important, so you will hear it
mentioned from time to time.</P
><p class="para"><a class="indexterm" name="AUTOID-2212"></A
><a class="indexterm" name="AUTOID-2214"></A
><a class="indexterm" name="AUTOID-2216"></A
><a class="indexterm" name="AUTOID-2219"></A
>More important are the &quot;set user ID&quot; and &quot;set group ID&quot; (SUID and
SGID) bits. If you execute an SUID file, your user ID is set to the
user ID of the file's owner. Therefore, if you execute an SUID file
that is owned by root, you are the superuser-for the duration
of the program. Likewise, executing an SGID file sets your group ID to
the file's group while the file is executing. SUID and SGID files can
be security holes, but they really exist to enhance security. For
example, you might want to allow any user to create a backup tape,
but you shouldn't give every user the root password. Therefore, you<a class="indexterm" name="AUTOID-2222"></A
><a class="indexterm" name="AUTOID-2225"></A
><a class="indexterm" name="AUTOID-2228"></A
>
can create a special version of the <em class="emphasis">dump</EM
> utility that is owned
by root and that has the SUID bit set. When a user invokes this
utility, he or she will be able to back up the entire filesystem
because the <em class="emphasis">dump</EM
> command will run as if it were executed by
root. But the user can't do anything else: he doesn't know the
superuser password and can't do anything that <em class="emphasis">dump</EM
> won't let him
do. Used carefully, SUID programs can be a powerful administrative tool.

<blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> SUID and SGID programs are such major security holes that many
conscientious administrators refuse to add new SUID utilities.
Some versions of UNIX ignore the SUID and
SGID bits for shell scripts (command files)-on those versions, only compiled
programs
can be SUID or SGID. SUID and SGID programs always lose
their special properties when they are copied. However, making
SUID and SGID programs completely safe is very difficult (or
maybe impossible). For better or for
worse, a lot of standard UNIX utilities (<em class="emphasis">uucp</EM
> and <em class="emphasis">lpr</EM
>, for
example) are SUID.<a class="indexterm" name="AUTOID-2237"></A
><a class="indexterm" name="AUTOID-2238"></A
><a class="indexterm" name="AUTOID-2239"></A
><a class="indexterm" name="AUTOID-2240"></A
>
Article
<a class="xref" href="ch22_01.htm" webstripperlinkwas="ch22_01.htm#UPT-ART-5010" title="Introduction to File Ownership and Security ">22.1</A
>
introduces other information about file access permissions.</P
></BLOCKQUOTE
></P
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">ML</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch01_22.htm" webstripperlinkwas="ch01_22.htm" title="1.22 How UNIX Keeps Track of Files: Inodes "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 1.22 How UNIX Keeps Track of Files: Inodes " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch01_24.htm" webstripperlinkwas="ch01_24.htm" title="1.24 The Superuser (Root) "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 1.24 The Superuser (Root) " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">1.22 How UNIX Keeps Track of Files: Inodes </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">1.24 The Superuser (Root) </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
