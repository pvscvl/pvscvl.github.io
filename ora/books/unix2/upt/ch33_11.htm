<html><head><title>[Chapter 33] 33.11 Quick Reference: awk </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:46:58Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch33_01.htm" webstripperlinkwas="ch33_01.htm" title="33. Batch Editing"><link rel="prev" href="ch33_10.htm" webstripperlinkwas="ch33_10.htm" title="33.10 Quick Globals from the Command Line with qsubst "><link rel="next" href="ch33_12.htm" webstripperlinkwas="ch33_12.htm" title="33.12 Versions of awk "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch33_10.htm" webstripperlinkwas="ch33_10.htm" title="33.10 Quick Globals from the Command Line with qsubst "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 33.10 Quick Globals from the Command Line with qsubst " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 33<br>Batch Editing</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch33_12.htm" webstripperlinkwas="ch33_12.htm" title="33.12 Versions of awk "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 33.12 Versions of awk " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-2860">33.11 Quick Reference: awk </A
></H2
><p class="para">This article also covers
<span class="link"><em class="emphasis">nawk</EM
> and <em class="emphasis">gawk</EM
> (<a class="linkend" href="ch33_12.htm" webstripperlinkwas="ch33_12.htm" title="Versions of awk ">33.12</A
>)</SPAN
>.<a class="indexterm" name="UPT-ART-2860-IX-AWK-UTILITY"></A
><a class="indexterm" name="AUTOID-37087"></A
><a class="indexterm" name="AUTOID-37091"></A
><a class="indexterm" name="UPT-ART-2860-IX-NAWK-UTILITY"></A
><a class="indexterm" name="UPT-ART-2860-IX-GAWK-UTILITY"></A
>
With the exception of array subscripts, values in
<code class="literal">[</CODE
>brackets<code class="literal">]</CODE
> are optional; don't type the
<code class="literal">[</CODE
> or <code class="literal">]</CODE
>.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-2860-SECT-1.1">33.11.1 Command-line Syntax </A
></H3
><p class="para"><em class="emphasis">awk</EM
> can be invoked in two ways:</P
><blockquote class="screen"><pre class="screen">awk [<code class="replaceable"><i>options</I
></CODE
>] '<code class="replaceable"><i>script</I
></CODE
>' [<code class="replaceable"><i>var</I
></CODE
>=<code class="replaceable"><i>value</I
></CODE
>] [<code class="replaceable"><i>file(s)</I
></CODE
>]
awk [<code class="replaceable"><i>options</I
></CODE
>] -f <code class="replaceable"><i>scriptfile </I
></CODE
>[<code class="replaceable"><i>var</I
></CODE
>=<code class="replaceable"><i>value</I
></CODE
>] [<code class="replaceable"><i>file(s)</I
></CODE
>]</PRE
></BLOCKQUOTE
><p class="para">You can specify a <code class="replaceable"><i>script</I
></CODE
> directly on the command line, or
you can store a script in a <code class="replaceable"><i>scriptfile</I
></CODE
> and specify it with <em class="emphasis">-f</EM
>.
In most versions, the <em class="emphasis">-f</EM
> option can be used multiple times.
The variable <code class="replaceable"><i>var</I
></CODE
> can be assigned a value on the command line. The value can be a
literal, a shell variable (<code class="literal">$</CODE
><code class="replaceable"><i>name</I
></CODE
>), or a command substitution 
(<code class="literal">`</CODE
><code class="replaceable"><i>cmd</I
></CODE
><code class="literal">`</CODE
>), but the value is
available only after a line of input is read (i.e., after the BEGIN
statement). <em class="emphasis">awk</EM
> operates on one or more <code class="replaceable"><i>file(s)</I
></CODE
>.
If none are specified (or if <code class="literal">-</CODE
> is specified), <em class="emphasis">awk</EM
> reads from the
<span class="link">standard input (<a class="linkend" href="ch13_01.htm" webstripperlinkwas="ch13_01.htm#UPT-ART-1023" title="Using Standard Input and Output">13.1</A
>)</SPAN
>.</P
><p class="para">The other recognized <code class="replaceable"><i>options</I
></CODE
> are:</P
><dl class="variablelist"><dt class="term"><code class="literal">-F</CODE
><code class="replaceable"><i>c</I
></CODE
></DT
><dd class="listitem"><p class="para">Set the field separator to character <code class="replaceable"><i>c</I
></CODE
>.
This is the same as setting the system variable <em class="emphasis">FS</EM
>.
<em class="emphasis">nawk</EM
> allows <code class="replaceable"><i>c</I
></CODE
> to be a
<span class="link">regular expression (<a class="linkend" href="ch26_04.htm" webstripperlinkwas="ch26_04.htm" title="Using Metacharacters in Regular Expressions ">26.4</A
>)</SPAN
>.
Each record (by default, one input line) is divided into fields by
white space (blanks or tabs) or by some other user-definable field
separator. Fields are referred to by the variables <code class="literal">$1</CODE
>, 
<code class="literal">$2</CODE
>,...<code class="literal">$</CODE
><code class="replaceable"><i>n</I
></CODE
>. <code class="literal">$0</CODE
> refers to the entire record.
For example, to
print the first three (colon-separated) fields on separate lines:</P
><p class="para"><blockquote class="screen"><pre class="screen">    % <code class="userinput"><b>awk -F: '{print $1; print $2; print $3}' /etc/passwd</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para"></P
></DD
><dt class="term"><code class="literal">-v </CODE
><code class="replaceable"><i>var</I
></CODE
><code class="literal">=</CODE
><code class="replaceable"><i>value</I
></CODE
></DT
><dd class="listitem"><p class="para">Assign a <code class="replaceable"><i>value</I
></CODE
> to variable <code class="replaceable"><i>var</I
></CODE
>.
This allows assignment before the script begins execution.
(Available in <em class="emphasis">nawk</EM
> only.)&#13;</P
></DD
></DL
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-2860-SECT-1.2">33.11.2 Patterns and Procedures </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-37171"></A
><a class="indexterm" name="AUTOID-37174"></A
><em class="emphasis">awk</EM
> scripts consist of patterns and procedures:</P
><blockquote class="blockquote"><p class="para"><code class="replaceable"><i>pattern </I
></CODE
><code class="literal">{</CODE
><code class="replaceable"><i>procedure</I
></CODE
><code class="literal">}</CODE
></P
></BLOCKQUOTE
><p class="para">Both are optional. If <code class="replaceable"><i>pattern</I
></CODE
> is missing, 
<code class="literal">{</CODE
><code class="replaceable"><i>procedure</I
></CODE
><code class="literal">}</CODE
> is applied to all records.
If <code class="literal">{</CODE
><code class="replaceable"><i>procedure</I
></CODE
><code class="literal">}</CODE
> is missing, the matched record
is written to the standard output.&#13;</P
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-2860-SECT-1.2.1">33.11.2.1 Patterns </A
></H4
><p class="para"><code class="replaceable"><i>pattern</I
></CODE
> can be any of the following:</P
><blockquote class="screen"><pre class="screen">/<code class="replaceable"><i>regular expression</I
></CODE
>/
<code class="replaceable"><i>relational expression</I
></CODE
>
<code class="replaceable"><i>pattern-matching expression</I
></CODE
>
BEGIN
END</PRE
></BLOCKQUOTE
><ul class="itemizedlist"><li class="listitem"><p class="para">Expressions can be composed of quoted strings, numbers, operators,
functions, defined variables, or any of the predefined variables 
described later under the section &quot;awk System Variables.&quot;</P
></LI
><li class="listitem"><p class="para">Regular expressions use the extended set of metacharacters 
as described in article
<a class="xref" href="ch26_04.htm" webstripperlinkwas="ch26_04.htm" title="Using Metacharacters in Regular Expressions ">26.4</A
>.
In addition,
<code class="literal">^</CODE
> and <code class="literal">$</CODE
> can be used to refer to the beginning and end of a 
field, respectively, rather than the beginning and end of a record (line).</P
></LI
><li class="listitem"><p class="para">Relational expressions use the relational operators listed under the section
&quot;Operators&quot; later in this article.
Comparisons can be either string or numeric.
For example, <code class="literal">$2</CODE
>&nbsp;<code class="literal">&gt;</CODE
>&nbsp;<code class="literal">$1</CODE
> selects records for
which the second field is greater than the first.</P
></LI
><li class="listitem"><p class="para">Pattern-matching expressions use the operators <code class="literal">~</CODE
> (match)
and <code class="literal">!~</CODE
> (don't match). See the section &quot;Operators&quot; later in this article.</P
></LI
><li class="listitem"><p class="para">The BEGIN pattern lets you specify procedures that will take
place <em class="emphasis">before</EM
> the first input record is processed. (Generally, you
set global variables here.)</P
></LI
><li class="listitem"><p class="para">The END pattern lets you specify procedures that
will take place <em class="emphasis">after</EM
> the last input record is read.</P
></LI
></UL
><p class="para">Except for BEGIN and END,
patterns can be combined with the Boolean operators <code class="literal">||</CODE
> (OR), 
<code class="literal">&amp;&amp;</CODE
> (AND), and <code class="literal">!</CODE
> (NOT). A range of lines can also be 
specified using comma-separated patterns:</P
><blockquote class="blockquote"><p class="para"><code class="replaceable"><i>pattern</I
></CODE
><code class="literal">,</CODE
><code class="replaceable"><i>pattern</I
></CODE
></P
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-2860-SECT-1.2.2">33.11.2.2 Procedures </A
></H4
><p class="para"><a class="indexterm" name="AUTOID-37235"></A
><code class="replaceable"><i>procedure</I
></CODE
> can consist of one or more commands, functions, or variable
assignments, separated by newlines or semicolons (<code class="literal">;</CODE
>), and contained within
curly braces (<code class="literal">{}</CODE
>). Commands fall into four groups:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Variable or array assignments</P
></LI
><li class="listitem"><p class="para">Printing commands&#13;</P
></LI
><li class="listitem"><p class="para">Built-in functions</P
></LI
><li class="listitem"><p class="para">Control-flow commands</P
></LI
></UL
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-2860-SECT-1.2.3">33.11.2.3 Simple Pattern-Procedure Examples </A
></H4
><ol class="orderedlist"><li class="listitem"><p class="para">Print first field of each line:</P
><p class="para"><blockquote class="screen"><pre class="screen">{ print $1 }</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para">Print all lines that contain <code class="literal">pattern</CODE
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">/pattern/</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para">Print first field of lines that contain <code class="literal">pattern</CODE
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">/pattern/{ print $1 }</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para">Print records containing more than two fields:</P
><p class="para"><blockquote class="screen"><pre class="screen">NF &gt; 2</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para">Interpret input records as a group of lines up to
a blank line:</P
><p class="para"><blockquote class="screen"><pre class="screen">BEGIN { FS = &quot;\n&quot;; RS = &quot;&quot; }
{ <code class="replaceable"><i>...process records...</I
></CODE
> }</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para">Print fields 2 and 3 in switched order, but only on lines
whose first field matches the string <code class="literal">URGENT</CODE
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">$1 ~ /URGENT/ { print $3, $2 }</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para">Count and print the number of <code class="literal">pattern</CODE
> found:</P
><p class="para"><blockquote class="screen"><pre class="screen">/pattern/ { ++x }
END { print x }</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para">Add numbers in second column and print total:</P
><p class="para"><blockquote class="screen"><pre class="screen">{total += $2 }; 
END { print &quot;column total is&quot;, total}</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para">Print lines that contain less than 20 characters:</P
><p class="para"><blockquote class="screen"><pre class="screen">length($0) &lt; 20</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para">Print each line that begins with 
<code class="literal">Name:</CODE
> and that contains exactly seven fields:</P
><p class="para"><blockquote class="screen"><pre class="screen">NF == 7 &amp;&amp; /^Name:/</PRE
></BLOCKQUOTE
></P
></LI
></OL
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-2860-SECT-1.3">33.11.3 awk System Variables </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-37311"></A
><a class="indexterm" name="AUTOID-37314"></A
><em class="emphasis">nawk</EM
> supports all <em class="emphasis">awk</EM
> variables.
<em class="emphasis">gawk</EM
> supports both <em class="emphasis">nawk</EM
> and <em class="emphasis">awk</EM
>.
<table class="informaltable"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Version</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Variable</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">awk</TD
><td class="entry" rowspan="1" colspan="1">FILENAME</TD
><td class="entry" rowspan="1" colspan="1">Current filename</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">FS</TD
><td class="entry" rowspan="1" colspan="1">Field separator (default is whitespace)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">NF</TD
><td class="entry" rowspan="1" colspan="1">Number of fields in current record</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">NR</TD
><td class="entry" rowspan="1" colspan="1">Number of the current record</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">OFMT</TD
><td class="entry" rowspan="1" colspan="1">Output format for numbers (default is <code class="literal">%.6g</CODE
>)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">OFS</TD
><td class="entry" rowspan="1" colspan="1">Output field separator (default is a blank)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">ORS</TD
><td class="entry" rowspan="1" colspan="1">Output record separator (default is a newline)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">RS</TD
><td class="entry" rowspan="1" colspan="1">Record separator (default is a newline)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">$0</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Entire input record</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">$</CODE
><code class="replaceable"><i>n</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="replaceable"><i>n</I
></CODE
>th field in current record;
fields are separated by <em class="emphasis">FS</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">nawk</TD
><td class="entry" rowspan="1" colspan="1">ARGC</TD
><td class="entry" rowspan="1" colspan="1">Number of arguments on command line</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">ARGV</TD
><td class="entry" rowspan="1" colspan="1">An array containing the command-line arguments</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">ENVIRON</TD
><td class="entry" rowspan="1" colspan="1">An associative array of environment variables</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">FNR</TD
><td class="entry" rowspan="1" colspan="1">Like <em class="emphasis">NR</EM
>, but relative to the current file</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">RSTART</TD
><td class="entry" rowspan="1" colspan="1">First position in the string matched by <em class="emphasis">match</EM
> function</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">RLENGTH</TD
><td class="entry" rowspan="1" colspan="1">Length of the string matched by <em class="emphasis">match</EM
> function</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">SUBSEP</TD
><td class="entry" rowspan="1" colspan="1">Separator character for array subscripts (default is <code class="literal">\034</CODE
>)</TD
></TR
></TBODY
></TABLE
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-2860-SECT-1.4">33.11.4 Operators </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-37411"></A
><a class="indexterm" name="AUTOID-37414"></A
>The table below lists the operators,
in order of increasing precedence, that are available in <em class="emphasis">awk</EM
>:
<table class="informaltable"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Symbol</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Meaning</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">= += -= *= /= %= ^=</TD
><td class="entry" rowspan="1" colspan="1">Assignment (<code class="literal">^=</CODE
> only in <em class="emphasis">nawk</EM
> and <em class="emphasis">gawk</EM
>)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">?:</TD
><td class="entry" rowspan="1" colspan="1">C conditional expression (<em class="emphasis">nawk</EM
> and <em class="emphasis">gawk</EM
>)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">||</TD
><td class="entry" rowspan="1" colspan="1">Logical OR</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">&amp;&amp;</TD
><td class="entry" rowspan="1" colspan="1">Logical AND</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">~  !~</TD
><td class="entry" rowspan="1" colspan="1">Match regular expression and negation</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">&lt; &lt;= &gt; &gt;= != ==</TD
><td class="entry" rowspan="1" colspan="1">Relational operators</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">(blank)</TD
><td class="entry" rowspan="1" colspan="1">Concatenation</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">+ -</TD
><td class="entry" rowspan="1" colspan="1">Addition, subtraction</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">* / %</TD
><td class="entry" rowspan="1" colspan="1">Multiplication, division, and modulus</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">+ - !</TD
><td class="entry" rowspan="1" colspan="1">Unary plus and minus, and logical negation</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">^</TD
><td class="entry" rowspan="1" colspan="1">Exponentiation (<em class="emphasis">nawk</EM
> and <em class="emphasis">gawk</EM
>)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">++ -- </TD
><td class="entry" rowspan="1" colspan="1">Increment and decrement, either prefix or postfix</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">$</TD
><td class="entry" rowspan="1" colspan="1">Field reference</TD
></TR
></TBODY
></TABLE
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-2860-SECT-1.5">33.11.5 Variables and Array Assignments </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-37474"></A
><a class="indexterm" name="AUTOID-37477"></A
><a class="indexterm" name="AUTOID-37480"></A
>Variables can be assigned a value with an equal sign (<code class="literal">=</CODE
>). For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">FS = &quot;,&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">Expressions using the operators <code class="literal">+</CODE
>, <code class="literal">-</CODE
>, <code class="literal">*</CODE
>,
<code class="literal">/</CODE
>, and <code class="literal">%</CODE
> 
(modulo) can be assigned to variables.</P
><p class="para">Arrays can be created with the <em class="emphasis">split</EM
> function (see below), 
or they can simply be named in an assignment statement.
Array elements can be subscripted with numbers 
(<code class="replaceable"><i>array</I
></CODE
><code class="literal">[1]</CODE
>,...<code class="replaceable"><i>array</I
></CODE
><code class="literal">[</CODE
><code class="replaceable"><i>n</I
></CODE
><code class="literal">]</CODE
>)
or with names. For example, to count the number of occurrences of a
pattern, you could use the following script:</P
><p class="para"><blockquote class="screen"><pre class="screen">/<code class="replaceable"><i>pattern</I
></CODE
>/ { <code class="replaceable"><i>array</I
></CODE
>[&quot;<code class="replaceable"><i>pattern</I
></CODE
>&quot;]++ }
END { print <code class="replaceable"><i>array</I
></CODE
>[&quot;<code class="replaceable"><i>pattern</I
></CODE
>&quot;] }</PRE
></BLOCKQUOTE
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-2860-SECT-1.6">33.11.6 Group Listing of awk Commands </A
></H3
><p class="para"><a class="indexterm" name="UPT-ART-2860-IX-COMMANDS-AWK-UTILITY"></A
><a class="indexterm" name="UPT-ART-2860-IX-AWK-UTILITY-COMMANDS-LIST-OF"></A
><em class="emphasis">awk</EM
> commands may be classified as follows:
<table class="informaltable"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Arithmetic</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">String</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Control Flow</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Input/Output</TH
></TR
><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Functions</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Functions</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Statements</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Processing</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">atan2*</TD
><td class="entry" rowspan="1" colspan="1">gsub*</TD
><td class="entry" rowspan="1" colspan="1">break</TD
><td class="entry" rowspan="1" colspan="1">close*</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">cos*</TD
><td class="entry" rowspan="1" colspan="1">index</TD
><td class="entry" rowspan="1" colspan="1">continue</TD
><td class="entry" rowspan="1" colspan="1">delete*</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">exp</TD
><td class="entry" rowspan="1" colspan="1">length</TD
><td class="entry" rowspan="1" colspan="1">do/while*</TD
><td class="entry" rowspan="1" colspan="1">getline*</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">int</TD
><td class="entry" rowspan="1" colspan="1">match*</TD
><td class="entry" rowspan="1" colspan="1">exit</TD
><td class="entry" rowspan="1" colspan="1">next</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">log</TD
><td class="entry" rowspan="1" colspan="1">split</TD
><td class="entry" rowspan="1" colspan="1">for</TD
><td class="entry" rowspan="1" colspan="1">print</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">rand*</TD
><td class="entry" rowspan="1" colspan="1">sub*</TD
><td class="entry" rowspan="1" colspan="1">if</TD
><td class="entry" rowspan="1" colspan="1">printf</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">sin*</TD
><td class="entry" rowspan="1" colspan="1">substr</TD
><td class="entry" rowspan="1" colspan="1">return*</TD
><td class="entry" rowspan="1" colspan="1">sprintf</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">sqrt</TD
><td class="entry" rowspan="1" colspan="1">tolower*</TD
><td class="entry" rowspan="1" colspan="1">while</TD
><td class="entry" rowspan="1" colspan="1">system*</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">srand*</TD
><td class="entry" rowspan="1" colspan="1">toupper*</TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
></TBODY
></TABLE
>
*Not in original <em class="emphasis">awk</EM
>&#13;</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-2860-SECT-1.7">33.11.7 Alphabetical Summary of Commands </A
></H3
><p class="para">The following alphabetical list of statements and functions
includes all that are available in <em class="emphasis">awk</EM
>, <em class="emphasis">nawk</EM
>, or <em class="emphasis">gawk</EM
>.
Unless otherwise mentioned, the statement or function is found
in all versions. New statements and functions introduced
with <em class="emphasis">nawk</EM
> are also found in <em class="emphasis">gawk</EM
>.</P
><dl class="variablelist"><dt class="term"><code class="literal">atan2</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">atan2(</CODE
><code class="replaceable"><i>y</I
></CODE
><code class="literal">,</CODE
><code class="replaceable"><i>x</I
></CODE
><code class="literal">)</CODE
> 
<a class="indexterm" name="AUTOID-37596"></A
>
Returns the arctangent of <code class="replaceable"><i>y</I
></CODE
>/<code class="replaceable"><i>x</I
></CODE
> in radians. (<em class="emphasis">nawk</EM
>)&#13;</P
></DD
><dt class="term"><code class="literal">break</CODE
></DT
><dd class="listitem"><p class="para">Exit from a <em class="emphasis">while</EM
>, <em class="emphasis">for</EM
>, or <em class="emphasis">do</EM
> loop.<a class="indexterm" name="AUTOID-37609"></A
>&#13;</P
></DD
><dt class="term"><code class="literal">close</CODE
></DT
><dd class="listitem"><p class="para"><blockquote class="screen"><pre class="screen"><code class="literal">close(</CODE
><code class="replaceable"><i>filename-expr</I
></CODE
><code class="literal">)</CODE
>
<code class="literal">close(</CODE
><code class="replaceable"><i>command-expr</I
></CODE
><code class="literal">)</CODE
></PRE
></BLOCKQUOTE
>
In some implementations of <em class="emphasis">awk</EM
>, you can have only ten files open<a class="indexterm" name="AUTOID-37624"></A
>
simultaneously and one pipe; modern versions allow more than one pipe open.
Therefore, <em class="emphasis">nawk</EM
> provides a <em class="emphasis">close</EM
>
statement that allows you to close a file or a pipe. <em class="emphasis">close</EM
> takes
as an argument the same expression that opened the pipe
or file. (<em class="emphasis">nawk</EM
>)</P
></DD
><dt class="term"><code class="literal">continue</CODE
></DT
><dd class="listitem"><p class="para">Begin next iteration of <em class="emphasis">while</EM
>, <em class="emphasis">for</EM
>, or <em class="emphasis">do</EM
> loop immediately.<a class="indexterm" name="AUTOID-37638"></A
>&#13;</P
></DD
><dt class="term"><code class="literal">cos</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">cos(</CODE
><code class="replaceable"><i>x</I
></CODE
><code class="literal">)</CODE
>

Return cosine of <code class="replaceable"><i>x</I
></CODE
> (in radians).<a class="indexterm" name="AUTOID-37649"></A
>
(<em class="emphasis">nawk</EM
>)&#13;</P
></DD
><dt class="term"><code class="literal">delete</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">delete </CODE
><code class="replaceable"><i>array</I
></CODE
>[<code class="replaceable"><i>element</I
></CODE
>]<code class="literal"> </CODE
>

Delete <code class="replaceable"><i>element</I
></CODE
> of <code class="replaceable"><i>array</I
></CODE
>. (<em class="emphasis">nawk</EM
>)<a class="indexterm" name="AUTOID-37664"></A
>&#13;</P
></DD
><dt class="term"><code class="literal">do</CODE
></DT
><dd class="listitem"><p class="para"><blockquote class="screen"><pre class="screen"><code class="literal">do</CODE
>
     <code class="replaceable"><i>body</I
></CODE
><code class="literal">while (</CODE
><code class="replaceable"><i>expr</I
></CODE
><code class="literal">)</CODE
></PRE
></BLOCKQUOTE
>
Looping statement.<a class="indexterm" name="AUTOID-37677"></A
>
Execute statements in <code class="replaceable"><i>body</I
></CODE
>, then evaluate <code class="replaceable"><i>expr</I
></CODE
>.
If <code class="replaceable"><i>expr</I
></CODE
> is true, execute <code class="replaceable"><i>body</I
></CODE
> again.
More than one <code class="replaceable"><i>command</I
></CODE
> must be put inside braces (<code class="literal">{}</CODE
>).
(<em class="emphasis">nawk</EM
>)&#13;</P
></DD
><dt class="term"><code class="literal">exit</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">exit</CODE
>[<code class="replaceable"><i>expr</I
></CODE
>]

Do not execute remaining instructions and do not read new input.<a class="indexterm" name="AUTOID-37693"></A
>
END
procedure, if any, will be executed.
The <code class="literal">expr</CODE
>, if any, becomes <em class="emphasis">awk</EM
>'s 
<span class="link">exit status (<a class="linkend" href="ch44_07.htm" webstripperlinkwas="ch44_07.htm" title="Exit Status of UNIX Processes ">44.7</A
>)</SPAN
>.&#13;</P
></DD
><dt class="term"><code class="literal">exp</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">exp(</CODE
><code class="replaceable"><i>arg</I
></CODE
><code class="literal">)&#13;</CODE
>Return the natural exponent of <code class="replaceable"><i>arg</I
></CODE
>.<a class="indexterm" name="AUTOID-37707"></A
>&#13;</P
></DD
><dt class="term"><code class="literal">for</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">for (</CODE
>[<code class="replaceable"><i>init-expr</I
></CODE
>]<code class="literal">; </CODE
>[<code class="replaceable"><i>test-expr</I
></CODE
>]<code class="literal">; </CODE
>[<code class="replaceable"><i>incr-expr</I
></CODE
>]<code class="literal">)</CODE
>
    <code class="replaceable"><i>command</I
></CODE
>
C-language-style looping construct.<a class="indexterm" name="AUTOID-37722"></A
>
Typically, <code class="replaceable"><i>init-expr</I
></CODE
> assigns the initial value of a counter
variable.
<code class="replaceable"><i>test-expr</I
></CODE
> is a relational expression that is evaluated each time
before executing the <code class="replaceable"><i>command</I
></CODE
>.
When <code class="replaceable"><i>test-expr</I
></CODE
> is false, the loop is exited.
<code class="replaceable"><i>incr-expr</I
></CODE
> is used to increment the counter variable after each pass.
A series of <code class="replaceable"><i>command</I
></CODE
>s
must be put within braces (<code class="literal">{}</CODE
>).

Example:</P
><p class="para"><blockquote class="screen"><pre class="screen">for (i = 1; i &lt;= 10; i++)
     printf &quot;Element %d is %s.\n&quot;, i, array[i]</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></DD
><dt class="term"><code class="literal">for</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">for (</CODE
><code class="replaceable"><i>item </I
></CODE
><code class="literal">in </CODE
><code class="replaceable"><i>array</I
></CODE
><code class="literal">)</CODE
>
     <code class="replaceable"><i>command</I
></CODE
>
For each <code class="replaceable"><i>item</I
></CODE
> in an associative <code class="replaceable"><i>array</I
></CODE
>, do
<code class="replaceable"><i>command</I
></CODE
>.
More than one <code class="replaceable"><i>command</I
></CODE
> must be put inside braces (<code class="literal">{}</CODE
>).
Refer to each element of the array as <code class="replaceable"><i>array</I
></CODE
><code class="literal">[</CODE
><code class="replaceable"><i>item</I
></CODE
><code class="literal">]</CODE
>.
&#13;</P
></DD
><dt class="term"><code class="literal">getline</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">getline </CODE
>[<code class="replaceable"><i>var</I
></CODE
>][<code class="literal">&lt;</CODE
><code class="replaceable"><i>file</I
></CODE
>]
        or
<code class="replaceable"><i>command </I
></CODE
><code class="literal">| getline </CODE
>[<code class="replaceable"><i>var</I
></CODE
>]
Read next line of input.
Original <em class="emphasis">awk</EM
> does not support the syntax
to open multiple input streams.
The first form reads input from <code class="replaceable"><i>file</I
></CODE
>,
and the second form reads the standard output of a UNIX <code class="replaceable"><i>command</I
></CODE
>.
Both forms read one line at a time, and each time
the statement is executed it gets the next line
of input.
The line of input is assigned to <code class="literal">$0</CODE
>,
and it is parsed into fields, setting <em class="emphasis">NF</EM
>,
<em class="emphasis">NR</EM
>, and <em class="emphasis">FNR</EM
>.
If <code class="replaceable"><i>var</I
></CODE
> is specified, the result is assigned
to <code class="replaceable"><i>var</I
></CODE
> and the <code class="literal">$0</CODE
> is not changed.
Thus, if
the result is assigned to a variable, the
current line does not change.
<em class="emphasis">getline</EM
> is actually a function and it returns 1 if it
reads a record successfully, 0 if end-of-file is
encountered, and -1 if for some reason it is
otherwise unsuccessful. (<em class="emphasis">nawk</EM
>)&#13;</P
></DD
><dt class="term"><code class="literal">gsub</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">gsub(</CODE
><code class="replaceable"><i>r</I
></CODE
><code class="literal">,</CODE
><code class="replaceable"><i>s</I
></CODE
>[<code class="literal">,</CODE
><code class="replaceable"><i>t</I
></CODE
>]<code class="literal">)</CODE
>

Globally substitute <code class="replaceable"><i>s</I
></CODE
> for each match of the<a class="indexterm" name="AUTOID-37791"></A
>
regular expression <code class="replaceable"><i>r</I
></CODE
> in the string <code class="replaceable"><i>t</I
></CODE
>.
Return
the number of substitutions.
If <code class="replaceable"><i>t</I
></CODE
> is not supplied,
defaults to <code class="literal">$0</CODE
>. (<em class="emphasis">nawk</EM
>)&#13;</P
></DD
><dt class="term"><code class="literal">if</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">if (</CODE
><code class="replaceable"><i>condition</I
></CODE
><code class="literal">)</CODE
></P
><p class="para"><blockquote class="screen"><pre class="screen">      <code class="replaceable"><i>command</I
></CODE
>
[<code class="literal">else</CODE
>
      <code class="replaceable"><i>command</I
></CODE
>]</PRE
></BLOCKQUOTE
></P
><p class="para">If <code class="replaceable"><i>condition</I
></CODE
> is true, do <code class="replaceable"><i>command(s)</I
></CODE
>, otherwise do<a class="indexterm" name="AUTOID-37814"></A
>
<code class="replaceable"><i>command(s)</I
></CODE
> in <em class="emphasis">else</EM
> clause (if any).
<code class="replaceable"><i>condition</I
></CODE
> can be an expression that uses 
any of the relational operators <code class="literal">&lt;</CODE
>, <code class="literal">&lt;=</CODE
>, <code class="literal">==</CODE
>, 
<code class="literal">!=</CODE
>, <code class="literal">&gt;=</CODE
>, or <code class="literal">&gt;</CODE
>, as well as
the pattern-matching operators <code class="literal">~</CODE
> or <code class="literal">!~</CODE
>
(e.g., <code class="literal">if&nbsp;($1&nbsp;~&nbsp;/[Aa].*[Zz]/)</CODE
>).
A series of <code class="replaceable"><i>command</I
></CODE
>s must be put within braces (<code class="literal">{}</CODE
>).</P
></DD
><dt class="term"><code class="literal">index</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">index(</CODE
><code class="replaceable"><i>str</I
></CODE
><code class="literal">,</CODE
><code class="replaceable"><i>substr</I
></CODE
><code class="literal">)</CODE
>

Return position of first substring <code class="replaceable"><i>substr</I
></CODE
> in string <code class="replaceable"><i>str</I
></CODE
><a class="indexterm" name="AUTOID-37842"></A
>
or 0 if not found.&#13;</P
></DD
><dt class="term"><code class="literal">int</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">int(</CODE
><code class="replaceable"><i>arg</I
></CODE
><code class="literal">)</CODE
>

Return integer value of <code class="replaceable"><i>arg</I
></CODE
>.<a class="indexterm" name="AUTOID-37853"></A
>&#13;</P
></DD
><dt class="term"><code class="literal">length</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">length(</CODE
><code class="replaceable"><i>arg</I
></CODE
><code class="literal">)</CODE
>

Return the length of <code class="replaceable"><i>arg</I
></CODE
>.<a class="indexterm" name="AUTOID-37864"></A
>&#13;</P
></DD
><dt class="term"><code class="literal">log</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">log(</CODE
><code class="replaceable"><i>arg</I
></CODE
><code class="literal">)</CODE
>

Return the natural logarithm of <code class="replaceable"><i>arg</I
></CODE
>.<a class="indexterm" name="AUTOID-37875"></A
>&#13;</P
></DD
><dt class="term"><code class="literal">match</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">match(</CODE
><code class="replaceable"><i>s</I
></CODE
><code class="literal">,</CODE
><code class="replaceable"><i>r</I
></CODE
><code class="literal">)</CODE
>

Function that matches the pattern, specified by the regular expression<a class="indexterm" name="AUTOID-37887"></A
>
<code class="replaceable"><i>r</I
></CODE
>, in the string <code class="replaceable"><i>s</I
></CODE
> and returns either the position in
<code class="replaceable"><i>s</I
></CODE
> where the match begins or 0 if no occurrences are found.
Sets the values of <em class="emphasis">RSTART</EM
> and <em class="emphasis">RLENGTH</EM
>. (<em class="emphasis">nawk</EM
>)
&#13;</P
></DD
><dt class="term"><code class="literal">next</CODE
></DT
><dd class="listitem"><p class="para">Read next input line and start new cycle through pattern/procedures
statements.<a class="indexterm" name="AUTOID-37900"></A
>&#13;</P
></DD
><dt class="term"><code class="literal">print</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">print </CODE
>[<code class="replaceable"><i>args</I
></CODE
>] [<code class="replaceable"><i>destination</I
></CODE
>]

Print <code class="replaceable"><i>args</I
></CODE
> on output, followed by a newline.<a class="indexterm" name="AUTOID-37911"></A
>
<code class="replaceable"><i>args</I
></CODE
> is usually one or more fields,
but may also be one or more of the predefined variables&nbsp;- or
arbitrary expressions.
If no <code class="replaceable"><i>args</I
></CODE
> are given, prints <code class="literal">$0</CODE
> (the current input line).
Literal
strings must be quoted.
Fields are
printed in the order they are listed.
If separated by commas (<code class="literal">,</CODE
>) in the
argument list, they are separated in the output by the <em class="emphasis">OFS</EM
> character.
If separated by spaces, they are
concatenated in the output.
<code class="replaceable"><i>destination</I
></CODE
> is a UNIX redirection or
pipe expression (e.g., <code class="literal">&gt;&nbsp;</CODE
><code class="replaceable"><i>file</I
></CODE
>) that redirects the 
default standard output.&#13;</P
></DD
><dt class="term"><code class="literal">printf</CODE
></DT
><dd class="listitem"><p class="para"><code class="replaceable"><i>format </I
></CODE
>[<code class="literal">, </CODE
><code class="replaceable"><i>expression(s)</I
></CODE
>] [<code class="replaceable"><i>destination</I
></CODE
>]

Formatted print statement.<a class="indexterm" name="AUTOID-37930"></A
>
Fields or variables can be
formatted according to instructions in the <code class="replaceable"><i>format</I
></CODE
> argument.
The number of <code class="replaceable"><i>expression</I
></CODE
>s must correspond to the number specified in the
format sections.

<code class="replaceable"><i>format</I
></CODE
> follows the conventions of the C-language <em class="emphasis">printf</EM
>
statement.
Here are a few of the most common formats:&#13;</P
></DD
><dt class="term"><code class="literal">%s</CODE
></DT
><dd class="listitem"><p class="para">A string.</P
></DD
><dt class="term"><code class="literal">%d</CODE
></DT
><dd class="listitem"><p class="para">A decimal number.</P
></DD
><dt class="term"><code class="literal">%</CODE
><code class="replaceable"><i>n</I
></CODE
><code class="literal">.</CODE
><code class="replaceable"><i>m</I
></CODE
><code class="literal">f</CODE
></DT
><dd class="listitem"><p class="para">A floating-point number, where <code class="replaceable"><i>n</I
></CODE
> is the total number of digits
and <code class="replaceable"><i>m</I
></CODE
> is the number of digits after the decimal point.</P
></DD
><dt class="term"><code class="literal">%</CODE
>[<code class="literal">-</CODE
>]<code class="replaceable"><i>nc</I
></CODE
></DT
><dd class="listitem"><p class="para"><code class="replaceable"><i>n</I
></CODE
> specifies minimum field length for format type <code class="replaceable"><i>c</I
></CODE
>, while
<code class="literal">-</CODE
> left justifies value in field; otherwise value is right justified.


<code class="replaceable"><i>format</I
></CODE
> can also contain embedded escape sequences:
<code class="literal">\n</CODE
> (newline) or <code class="literal">\t</CODE
>&nbsp;(tab)
are the most common.
<code class="replaceable"><i>destination</I
></CODE
> is a UNIX redirection or
pipe expression (e.g., <code class="literal">&gt;&nbsp;</CODE
><code class="replaceable"><i>file</I
></CODE
>) that redirects the 
default standard output.

Example:

Using the script:</P
><p class="para"><blockquote class="screen"><pre class="screen">{printf &quot;The sum on line %s is %d.\n&quot;, NR, $1+$2}</PRE
></BLOCKQUOTE
></P
><p class="para">The following input line:</P
><p class="para"><blockquote class="screen"><pre class="screen">5   5</PRE
></BLOCKQUOTE
></P
><p class="para">produces this output, followed by a newline:</P
><p class="para"><blockquote class="screen"><pre class="screen">The sum on line 1 is 10.</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;</P
></DD
><dt class="term"><code class="literal">rand</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">rand()</CODE
>

Generate a random number between 0 and 1.<a class="indexterm" name="AUTOID-37988"></A
>
This function returns the
same series of numbers each time the script is executed, unless the random
number generator is seeded using the <em class="emphasis">srand(&nbsp;)</EM
> function. (<em class="emphasis">nawk</EM
>)&#13;</P
></DD
><dt class="term"><code class="literal">return</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">return </CODE
>[<code class="replaceable"><i>expr</I
></CODE
>]

Used at end of user-defined functions to exit the function,<a class="indexterm" name="AUTOID-37999"></A
>
returning value of expression <code class="replaceable"><i>expr</I
></CODE
>, if any. (<em class="emphasis">nawk</EM
>)&#13;</P
></DD
><dt class="term"><code class="literal">sin</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">sin(</CODE
><code class="replaceable"><i>x</I
></CODE
><code class="literal">)</CODE
>
<a class="indexterm" name="AUTOID-38011"></A
>
Return sine of <code class="replaceable"><i>x</I
></CODE
> (in radians).
(<em class="emphasis">nawk</EM
>)&#13;</P
></DD
><dt class="term"><code class="literal">split</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">split(</CODE
><code class="replaceable"><i>string</I
></CODE
><code class="literal">,</CODE
><code class="replaceable"><i>array</I
></CODE
>[<code class="literal">,</CODE
><code class="replaceable"><i>sep</I
></CODE
>]<code class="literal">)</CODE
>

Split <code class="replaceable"><i>string</I
></CODE
> into elements of <code class="replaceable"><i>array</I
></CODE
><a class="indexterm" name="AUTOID-38029"></A
>
<code class="literal">array[1],...

array[</CODE
><code class="replaceable"><i>n</I
></CODE
><code class="literal">]</CODE
>.
<code class="replaceable"><i>string</I
></CODE
>
is split at each occurrence of separator <code class="replaceable"><i>sep</I
></CODE
>.
(In <em class="emphasis">nawk</EM
>, the separator may be a regular expression.)
If <code class="replaceable"><i>sep</I
></CODE
> is
not specified, <em class="emphasis">FS</EM
> is used.
The number of array elements created is
returned.&#13;</P
></DD
><dt class="term"><code class="literal">sprintf</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">sprintf (</CODE
><code class="replaceable"><i>format </I
></CODE
>[<code class="literal">, </CODE
><code class="replaceable"><i>expression(s)</I
></CODE
>]<code class="literal">)</CODE
>

Return the value of <code class="replaceable"><i>expression(s)</I
></CODE
>, using the specified <code class="replaceable"><i>format</I
></CODE
><a class="indexterm" name="AUTOID-38051"></A
>
(see <em class="emphasis">printf</EM
>).
Data is formatted but not printed.&#13;</P
></DD
><dt class="term"><code class="literal">sqrt</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">sqrt(</CODE
><code class="replaceable"><i>arg</I
></CODE
><code class="literal">)</CODE
>

Return square root of <code class="replaceable"><i>arg</I
></CODE
>.<a class="indexterm" name="AUTOID-38063"></A
>&#13;</P
></DD
><dt class="term"><code class="literal">srand</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">srand(</CODE
><code class="replaceable"><i>expr</I
></CODE
><code class="literal">)</CODE
>
<a class="indexterm" name="AUTOID-38073"></A
>
Use <code class="replaceable"><i>expr</I
></CODE
> to set a new seed for random number generator.
Default is time of day.
Returns the old seed.
(<em class="emphasis">nawk</EM
>)&#13;</P
></DD
><dt class="term"><code class="literal">sub</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">sub(</CODE
><code class="replaceable"><i>r</I
></CODE
><code class="literal">,</CODE
><code class="replaceable"><i>s</I
></CODE
>[<code class="literal">,</CODE
><code class="replaceable"><i>t</I
></CODE
>]<code class="literal">)</CODE
>

Substitute <code class="replaceable"><i>s</I
></CODE
> for first match of the<a class="indexterm" name="AUTOID-38090"></A
>
regular expression <code class="replaceable"><i>r</I
></CODE
> in the string <code class="replaceable"><i>t</I
></CODE
>.
Return
1 if successful; 0 otherwise.
If <code class="replaceable"><i>t</I
></CODE
> is not supplied,
defaults to <code class="literal">$0</CODE
>. (<em class="emphasis">nawk</EM
>)&#13;</P
></DD
><dt class="term"><code class="literal">substr</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">substr(</CODE
><code class="replaceable"><i>string</I
></CODE
><code class="literal">,</CODE
><code class="replaceable"><i>m</I
></CODE
>[<code class="literal">,</CODE
><code class="replaceable"><i>n</I
></CODE
>]<code class="literal">)</CODE
>

Return substring of <code class="replaceable"><i>string</I
></CODE
> beginning at character position<a class="indexterm" name="AUTOID-38110"></A
>
<code class="replaceable"><i>m</I
></CODE
> and consisting of the next <code class="replaceable"><i>n</I
></CODE
> characters.
If <code class="replaceable"><i>n</I
></CODE
> is
omitted, include all characters to the end of string.&#13;</P
></DD
><dt class="term"><code class="literal">system</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">system(</CODE
><code class="replaceable"><i>command</I
></CODE
><code class="literal">)</CODE
>

Function that executes the specified UNIX <code class="replaceable"><i>command</I
></CODE
> and returns its<a class="indexterm" name="AUTOID-38124"></A
>
<span class="link">status (<a class="linkend" href="ch44_07.htm" webstripperlinkwas="ch44_07.htm" title="Exit Status of UNIX Processes ">44.7</A
>)</SPAN
>.
The status of the command that is executed typically
indicates its success (0) or failure (non-zero).
The output of the command is not available for processing
within the <em class="emphasis">nawk</EM
> script.
Use <code class="replaceable"><i>command</I
></CODE
>&nbsp;<code class="literal">|</CODE
>&nbsp;<code class="literal">getline</CODE
> to
read the output of the command into the script. (<em class="emphasis">nawk</EM
>)
&#13;</P
></DD
><dt class="term"><code class="literal">tolower</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">tolower(</CODE
><code class="replaceable"><i>str</I
></CODE
><code class="literal">)</CODE
>

Translate all uppercase characters<a class="indexterm" name="AUTOID-38140"></A
>
in <code class="replaceable"><i>str</I
></CODE
> to lowercase and return the new string. (<em class="emphasis">nawk</EM
>)&#13;</P
></DD
><dt class="term"><code class="literal">toupper</CODE
></DT
><dd class="listitem"><p class="para"><code class="literal">toupper(</CODE
><code class="replaceable"><i>str</I
></CODE
><code class="literal">)</CODE
>

Translate all lowercase characters<a class="indexterm" name="AUTOID-38152"></A
>
in <code class="replaceable"><i>str</I
></CODE
> to uppercase and return the new string. (<em class="emphasis">nawk</EM
>)&#13;</P
></DD
><dt class="term"><code class="literal">while</CODE
></DT
><dd class="listitem"><p class="para"><blockquote class="screen"><pre class="screen"><code class="literal">while (</CODE
><code class="replaceable"><i>condition</I
></CODE
><code class="literal">)</CODE
>
      <code class="replaceable"><i>command</I
></CODE
></PRE
></BLOCKQUOTE
>
Do <code class="replaceable"><i>command</I
></CODE
> while <code class="replaceable"><i>condition</I
></CODE
> is true (see <code class="literal">if</CODE
> for a<a class="indexterm" name="AUTOID-38169"></A
>
description of allowable conditions).
A series of commands must be put within braces (<code class="literal">{}</CODE
>).</P
></DD
></DL
><a class="indexterm" name="AUTOID-38172"></A
><a class="indexterm" name="AUTOID-38173"></A
><a class="indexterm" name="AUTOID-38174"></A
><a class="indexterm" name="AUTOID-38175"></A
><a class="indexterm" name="AUTOID-38176"></A
></DIV
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">DG</SPAN
> <span class="bibliomisc">from O'Reilly &amp; Associates' <cite class="citetitle">UNIX in a Nutshell (SVR4/Solaris)</CITE
></SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch33_10.htm" webstripperlinkwas="ch33_10.htm" title="33.10 Quick Globals from the Command Line with qsubst "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 33.10 Quick Globals from the Command Line with qsubst " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch33_12.htm" webstripperlinkwas="ch33_12.htm" title="33.12 Versions of awk "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 33.12 Versions of awk " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">33.10 Quick Globals from the Command Line with qsubst </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">33.12 Versions of awk </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
