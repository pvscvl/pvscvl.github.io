<html><head><title>[Chapter 47] 47.2 C Shell Programming Considered Harmful </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:55:53Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch47_01.htm" webstripperlinkwas="ch47_01.htm" title="47. C Shell Programming...NOT"><link rel="prev" href="ch47_01.htm" webstripperlinkwas="ch47_01.htm" title="47.1 Why Not? "><link rel="next" href="ch47_03.htm" webstripperlinkwas="ch47_03.htm" title="47.3 Conditional Statements with if "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch47_01.htm" webstripperlinkwas="ch47_01.htm" title="47.1 Why Not? "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 47.1 Why Not? " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 47<br>C Shell Programming...NOT</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch47_03.htm" webstripperlinkwas="ch47_03.htm" title="47.3 Conditional Statements with if "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 47.3 Conditional Statements with if " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-0393">47.2 C Shell Programming Considered Harmful </A
></H2
><p class="para"><a class="indexterm" name="UPT-ART-393-IX-BOURNE-SHELL-SH-C-SHELL-COMPARED-TO"></A
><a class="indexterm" name="UPT-ART-393-IX-C-SHELL-CSH-BOURNE-SHELL-COMPARED-TO"></A
><a class="indexterm" name="UPT-ART-393-IX-C-SHELL-CSH-BUGS-IN"></A
><a class="indexterm" name="UPT-ART-393-IX-C-SHELL-CSH-DISADVANTAGES"></A
>Resolved: the <em class="emphasis">csh</EM
> is a tool utterly inadequate for programming, and
its use for such purposes should be strictly banned.</P
><p class="para">I am continually shocked and dismayed to see people write test cases,
install scripts, and other random hackery using the <em class="emphasis">csh</EM
>.</P
><p class="para">The <em class="emphasis">csh</EM
> is seductive because the conditionals are more C-like,
so the path of least resistance is chosen and a <em class="emphasis">csh</EM
> script is
written.  Sadly, this is a lost cause, and the programmer seldom even
realizes it, even when he finds that many simple things he wishes to
do range from cumbersome to impossible in the <em class="emphasis">csh</EM
>.</P
><p class="para">What's more, lack of proficiency in the Bourne shell has been known to
cause errors in <em class="emphasis">/etc/rc</EM
> and <em class="emphasis">.cronrc</EM
> files, which is a
problem, because you <em class="emphasis">must</EM
> write these files in that language.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-393-SECT-1.1">47.2.1 File Descriptors </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-56081"></A
><a class="indexterm" name="AUTOID-56084"></A
>The most common problem encountered in <em class="emphasis">csh</EM
> programming is that
you can't do file-descriptor manipulation.  All you are able to do is
redirect <em class="emphasis">stdin</EM
>, or <em class="emphasis">stdout</EM
>, or <em class="emphasis">dup</EM
> <em class="emphasis">stderr</EM
> into
<em class="emphasis">stdout</EM
>.  Bourne-compatible shells offer you an abundance of more
exotic possibilities.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-393-SECT-1.1.1">47.2.1.1 Writing Files </A
></H4
><p class="para"><a class="indexterm" name="AUTOID-56096"></A
><a class="indexterm" name="AUTOID-56099"></A
><a class="indexterm" name="AUTOID-56101"></A
><a class="indexterm" name="AUTOID-56104"></A
>In the Bourne shell, you can open or <em class="emphasis">dup</EM
> random file descriptors.
For example, </P
><p class="para"><blockquote class="screen"><pre class="screen">exec 2&gt;errs.out</PRE
></BLOCKQUOTE
></P
><p class="para">means that from then on, <em class="emphasis">stderr</EM
> goes into the <em class="emphasis">errs.out</EM
> file.</P
><p class="para">Or what if you just want to throw away <em class="emphasis">stderr</EM
> and leave <em class="emphasis">stdout</EM
>
alone?
Pretty simple operation, eh?</P
><p class="para"><table class="screen.co" border="1"><tr><th valign="TOP"><pre class="calloutlist">
<a class="co" href="ch13_14.htm" webstripperlinkwas="ch13_14.htm" title="13.14 What Can You Do with an Empty File? ">/dev/null</A
> </PRE
></TH
><td valign="TOP"><pre class="screen">
cmd 2&gt;/dev/null<a class="indexterm" name="AUTOID-56119"></A
></PRE
></TD
></TR
></TABLE
></P
><p class="para">That works in the Bourne shell.
In the C shell, you can only make a pitiful 
attempt like this:</P
><p class="para"><table class="screen.co" border="1"><tr><th valign="TOP"><pre class="calloutlist">
<a class="co" href="ch45_20.htm" webstripperlinkwas="ch45_20.htm" title="45.20 Overview: Open Files and File Descriptors ">/dev/tty</A
> </PRE
></TH
><td valign="TOP"><pre class="screen">
(cmd &gt; /dev/tty) &gt;&amp; /dev/null</PRE
></TD
></TR
></TABLE
></P
><p class="para">But who said that <em class="emphasis">stdout</EM
> was my terminal?
So it's wrong.
This simple operation <em class="emphasis">cannot be done</EM
> in the C shell.</P
><p class="para"><a class="indexterm" name="AUTOID-56131"></A
><a class="indexterm" name="AUTOID-56134"></A
>Along these same lines, you can't direct error messages in <em class="emphasis">csh</EM
> 
scripts on <em class="emphasis">stderr</EM
>, as is considered proper.
In the Bourne shell, you
might say:</P
><p class="para"><blockquote class="screen"><pre class="screen">echo &quot;$0: cannot find $file&quot; 1&gt;&amp;2</PRE
></BLOCKQUOTE
></P
><p class="para">but in the C shell, you can't redirect <em class="emphasis">stdout</EM
> onto <em class="emphasis">stderr</EM
>
so you end
up doing something silly like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">sh -c &quot;echo '${0}: cannot find $file' 1&gt;&amp;2&quot;</PRE
></BLOCKQUOTE
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-393-SECT-1.1.2">47.2.1.2 Reading Files </A
></H4
><p class="para"><a class="indexterm" name="AUTOID-56149"></A
><a class="indexterm" name="AUTOID-56152"></A
><a class="indexterm" name="AUTOID-56155"></A
><a class="indexterm" name="AUTOID-56158"></A
><a class="indexterm" name="AUTOID-56161"></A
><a class="indexterm" name="AUTOID-56164"></A
><a class="indexterm" name="AUTOID-56167"></A
><a class="indexterm" name="AUTOID-56170"></A
>In the <em class="emphasis">csh</EM
>, all you've got is <code class="literal">$&lt;</CODE
>,
which reads a line from your <em class="emphasis">tty</EM
>.
What if you've redirected <em class="emphasis">stdin</EM
>?
Tough noogies, you still get your <em class="emphasis">tty</EM
>, which you really can't redirect.
Now, the <em class="emphasis">read</EM
> statement in the Bourne shell allows you to read from
<em class="emphasis">stdin</EM
>, which catches redirection.
It also means that you can do things like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">exec 3&lt; file1
exec 4&lt; file2</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;Now you can read from file descriptor 3 and get lines from <em class="emphasis">file1</EM
>, or from
<em class="emphasis">file2</EM
> through fd 4.
In modern, Bourne-like shells, this suffices: </P
><p class="para"><blockquote class="screen"><pre class="screen">read some_var 0&lt;&amp;3
read another_var 0&lt;&amp;4</PRE
></BLOCKQUOTE
></P
><p class="para">Although in older ones where <em class="emphasis">read</EM
> only goes from 0, you trick it:</P
><p class="para"><blockquote class="screen"><pre class="screen">exec 5&lt;&amp;0  # save old stdin
exec 0&lt;&amp;3; read some_var
exec 0&lt;&amp;4; read another_var
exec 0&lt;&amp;5  # restore it</PRE
></BLOCKQUOTE
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-393-SECT-1.1.3">47.2.1.3 Closing FDs </A
></H4
><p class="para"><a class="indexterm" name="AUTOID-56194"></A
><a class="indexterm" name="AUTOID-56196"></A
><a class="indexterm" name="AUTOID-56199"></A
>In the Bourne shell, you can close file descriptors you don't
want open, like <code class="literal">2&gt;&amp;-</CODE
>, which isn't the same as redirecting it
to <em class="emphasis">/dev/null</EM
>.&#13;</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-393-SECT-1.1.4">47.2.1.4 More Elaborate Combinations </A
></H4
><p class="para"><a class="indexterm" name="AUTOID-56207"></A
><a class="indexterm" name="AUTOID-56210"></A
>Maybe you want to pipe <em class="emphasis">stderr</EM
> to a command and leave <em class="emphasis">stdout</EM
> alone.
Not too hard an idea, right?
As I mentioned above, you can't do this in the C shell.
In a Bourne shell, you can do things like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>exec 3&gt;&amp;1; grep yyy xxx 2&gt;&amp;1 1&gt;&amp;3 3&gt;&amp;- | sed s/file/foobar/ 1&gt;&amp;2 3&gt;&amp;-</B
></CODE
>
grep: xxx: No such foobar or directory</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-56219"></A
><a class="indexterm" name="AUTOID-56222"></A
><a class="indexterm" name="AUTOID-56225"></A
><a class="indexterm" name="AUTOID-56228"></A
><a class="indexterm" name="AUTOID-56231"></A
><a class="indexterm" name="AUTOID-56234"></A
>Normal output would be unaffected.
The fd closes (<code class="literal">3&gt;&amp;-</CODE
>) were there in case
something really cared about all its FDs.
We send <em class="emphasis">stderr</EM
> to <em class="emphasis">sed</EM
>,
and then put it back out FD 2.</P
><p class="para">Consider the pipeline:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="replaceable"><i>A</I
></CODE
> | <code class="replaceable"><i>B</I
></CODE
> | <code class="replaceable"><i>C</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-56247"></A
>You want to know the status of <em class="emphasis">C</EM
>, well, that's easy: it's in <code class="literal">$?</CODE
>,
or <code class="literal">$status</CODE
> in <em class="emphasis">csh</EM
>.
But if you want it from <em class="emphasis">A</EM
>, you're out of luck&nbsp;- if
you're in the C shell, that is.
In the Bourne shell, you can get it, although doing so is a bit tricky. 
Here's something I had to do where I ran <em class="emphasis">dd</EM
>'s
<em class="emphasis">stderr</EM
> into a <em class="emphasis">grep -v</EM
> pipe to get rid of the <code class="literal">records
in/out</CODE
> noise, but had
to return the <em class="emphasis">dd</EM
>'s exit status, not the <em class="emphasis">grep</EM
>'s:</P
><p class="para"><blockquote class="screen"><pre class="screen">device=/dev/rmt8
dd_noise='^[0-9]+\+[0-9]+ records (in|out)$'<a class="indexterm" name="AUTOID-56263"></A
>
exec 3&gt;&amp;1
status=`((dd if=$device ibs=64k 2&gt;&amp;1 1&gt;&amp;3 3&gt;&amp;- 4&gt;&amp;-; echo $? &gt;&amp;4) |
   egrep -v &quot;$dd_noise&quot; 1&gt;&amp;2 3&gt;&amp;- 4&gt;&amp;-) 4&gt;&amp;1`
exit $status;</PRE
></BLOCKQUOTE
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-393-SECT-1.2">47.2.2 Command Orthogonality </A
></H3
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-393-SECT-1.2.1">47.2.2.1 Built-Ins </A
></H4
><p class="para"><a class="indexterm" name="AUTOID-56271"></A
>The <em class="emphasis">csh</EM
> is a horrid botch with its built-ins.
You can't put them together in any reasonable way.
Even a simple little thing like this:   </P
><p class="para"><blockquote class="screen"><pre class="screen"><a class="indexterm" name="AUTOID-56277"></A
><a class="indexterm" name="AUTOID-56280"></A
>% <code class="userinput"><b>time | echo</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">&#13;while nonsensical, shouldn't give me this message:</P
><p class="para"><blockquote class="screen"><pre class="screen">Reset tty pgrp from 9341 to 26678</PRE
></BLOCKQUOTE
></P
><p class="para">Others are more fun:</P
><p class="para"><blockquote class="screen"><pre class="screen"><a class="indexterm" name="AUTOID-56290"></A
><a class="indexterm" name="AUTOID-56293"></A
>% <code class="userinput"><b>sleep 1 | while</B
></CODE
>
while: Too few arguments.
[5] 9402
% <code class="userinput"><b>jobs</B
></CODE
>
[5]     9402 Done                 sleep |</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-56299"></A
><a class="indexterm" name="AUTOID-56302"></A
><a class="indexterm" name="AUTOID-56305"></A
><a class="indexterm" name="AUTOID-56308"></A
>Some can even hang your shell.
Try typing CTRL-z while you're <em class="emphasis">source</EM
>ing 
something, or redirecting a <em class="emphasis">source</EM
> command.
Just make sure you have another window handy.&#13;</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-393-SECT-1.2.2">47.2.2.2 Flow Control </A
></H4
><p class="para"><a class="indexterm" name="AUTOID-56316"></A
><a class="indexterm" name="AUTOID-56319"></A
>You can't mix flow control and commands, like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">who | while read line; do
    echo &quot;gotta $line&quot;
done</PRE
></BLOCKQUOTE
></P
><p class="para">You can't combine multiline pipes constructs in a <em class="emphasis">csh</EM
> using semicolons.
There's no easy way to do this:</P
><p class="para"><blockquote class="screen"><pre class="screen">alias cmd 'if (foo) then bar; else snark; endif'</PRE
></BLOCKQUOTE
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="UPT-ART-393-SECT-1.2.3">47.2.2.3 Stupid Parsing Bugs </A
></H4
><p class="para"><a class="indexterm" name="AUTOID-56331"></A
><a class="indexterm" name="AUTOID-56334"></A
><a class="indexterm" name="AUTOID-56337"></A
><a class="indexterm" name="AUTOID-56340"></A
><a class="indexterm" name="AUTOID-56343"></A
>Certain reasonable things just don't work, like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>kill -1 `cat foo`</B
></CODE
>
`cat foo`: Ambiguous.</PRE
></BLOCKQUOTE
></P
><p class="para">But this is ok:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>/bin/kill -1 `cat foo`</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">If you have a stopped job:</P
><p class="para"><blockquote class="screen"><pre class="screen">[2]     Stopped              rlogin globhost</PRE
></BLOCKQUOTE
></P
><p class="para">You should be able to kill it with: </P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>kill %?glob</B
></CODE
>
kill: No match</PRE
></BLOCKQUOTE
></P
><p class="para">but:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>fg %?glob</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">works.</P
><p class="para"><a class="indexterm" name="AUTOID-56366"></A
><a class="indexterm" name="AUTOID-56369"></A
>White space can matter:</P
><p class="para"><blockquote class="screen"><pre class="screen">if(expr)</PRE
></BLOCKQUOTE
></P
><p class="para">may fail on some versions of csh, while:</P
><p class="para"><blockquote class="screen"><pre class="screen">if (expr)</PRE
></BLOCKQUOTE
></P
><p class="para">works!</P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-393-SECT-1.3">47.2.3 Signals </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-56381"></A
><a class="indexterm" name="AUTOID-56383"></A
><a class="indexterm" name="AUTOID-56386"></A
><a class="indexterm" name="AUTOID-56389"></A
><a class="indexterm" name="AUTOID-56392"></A
>In the C shell, all you can do with signals is trap <em class="emphasis">SIGINT</EM
>.
In the Bourne shell, you can trap any signal, or the end-of-program exit.
For example, to blow away a temporary file on any of a variety of signals:</P
><p class="para"><blockquote class="screen"><pre class="screen">trap 'rm -f /usr/adm/tmp/i$$ ;
    echo &quot;ERROR: abnormal exit&quot;;
    exit' 1 2 3 15
trap 'rm tmp.$$' 0   # on program exit</PRE
></BLOCKQUOTE
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-393-SECT-1.4">47.2.4 Quoting </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-56401"></A
><a class="indexterm" name="AUTOID-56404"></A
><a class="indexterm" name="AUTOID-56407"></A
><a class="indexterm" name="AUTOID-56410"></A
>You can't quote things reasonably in the <em class="emphasis">csh</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">set foo = &quot;Bill asked, \&quot;How's tricks?\&quot;&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">doesn't work.
This makes it
<span class="link">really hard (<a class="linkend" href="ch10_08.htm" webstripperlinkwas="ch10_08.htm" title="Fix Quoting in csh Aliases with makealias and quote ">10.8</A
>)</SPAN
>
to construct strings with mixed quotes in them.
In the Bourne shell, this works just fine. 
In fact, so does this:</P
><p class="para"><blockquote class="screen"><pre class="screen">cd /mnt; /usr/ucb/finger -m -s `ls \`u\``</PRE
></BLOCKQUOTE
></P
><p class="para">Dollar signs (<code class="literal">$</CODE
>) cannot be escaped in double quotes in the
<em class="emphasis">csh</EM
>.
Ugh.</P
><p class="para"><blockquote class="screen"><pre class="screen">set foo = &quot;this is a \$dollar quoted and this is $HOME not quoted&quot; 
dollar: Undefined variable.</PRE
></BLOCKQUOTE
></P
><p class="para">You have to use backslashes (<code class="literal">\</CODE
>) for newlines, and it's just darn
hard to
get them into strings sometimes.</P
><p class="para"><blockquote class="screen"><pre class="screen"><a class="indexterm" name="AUTOID-56429"></A
>% <code class="userinput"><b>set foo = &quot;this \
and that&quot;;</B
></CODE
>
% <code class="userinput"><b>echo $foo</B
></CODE
>
this  and that
% <code class="userinput"><b>echo &quot;$foo&quot;</B
></CODE
>
Unmatched &quot;.</PRE
></BLOCKQUOTE
></P
><p class="para">Say what?
You don't have these problems in the Bourne shell, where it's
just fine to write things like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">echo    'This is 
     some text that contains
     several newlines.'</PRE
></BLOCKQUOTE
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-393-SECT-1.5">47.2.5 Variable Syntax </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-56441"></A
><a class="indexterm" name="AUTOID-56444"></A
><a class="indexterm" name="AUTOID-56447"></A
><a class="indexterm" name="AUTOID-56450"></A
><a class="indexterm" name="AUTOID-56453"></A
><a class="indexterm" name="AUTOID-56456"></A
><a class="indexterm" name="AUTOID-56459"></A
><a class="indexterm" name="AUTOID-56462"></A
>There's this big difference between global -vironment) and local
(shell) variables.
In <em class="emphasis">csh</EM
>, you use a totally different syntax 
to set one from the other.</P
><p class="para">In Bourne shell, this: </P
><p class="para"><blockquote class="screen"><pre class="screen">VAR=foo cmds args</PRE
></BLOCKQUOTE
></P
><p class="para">is the same as:</P
><p class="para"><blockquote class="screen"><pre class="screen">(export VAR; VAR=foo; cmd args)</PRE
></BLOCKQUOTE
></P
><p class="para">or <em class="emphasis">csh</EM
>'s:</P
><p class="para"><blockquote class="screen"><pre class="screen">(setenv VAR; cmd args)</PRE
></BLOCKQUOTE
></P
><p class="para">You can't use
<span class="link"><code class="literal">:t</CODE
>, <code class="literal">:h</CODE
>, etc. (<a class="linkend" href="ch09_06.htm" webstripperlinkwas="ch09_06.htm" title="String Editing (Colon) Operators ">9.6</A
>)</SPAN
>
on environment variables.
Watch:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>echo Try testing with $SHELL:t</B
></CODE
>
Try testing with /bin/csh:t</PRE
></BLOCKQUOTE
></P
><p class="para">It's really nice to be able to say
<span class="link"><code class="literal">${PAGER-more}</CODE
> or <code class="literal">FOO=${BAR:-${BAZ}}</CODE
> (<a class="linkend" href="ch45_12.htm" webstripperlinkwas="ch45_12.htm" title="Parameter Substitution ">45.12</A
>)</SPAN
>
to be able to run the user's <em class="emphasis">PAGER</EM
> if set, and <em class="emphasis">more</EM
> otherwise.
You can't do this in the <em class="emphasis">csh</EM
>.
It takes more verbiage.</P
><p class="para"><a class="indexterm" name="AUTOID-56491"></A
>You can't get the process number of the last background command from the
C shell, something you might like to do if you're starting up several jobs in
the background.
In the Bourne shell, the PID of the last command put in
the background is available in <code class="userinput"><b>$!</B
></CODE
>.</P
><p class="para"><a class="indexterm" name="AUTOID-56496"></A
><a class="indexterm" name="AUTOID-56499"></A
><a class="indexterm" name="AUTOID-56502"></A
><a class="indexterm" name="AUTOID-56505"></A
>The <em class="emphasis">csh</EM
> is also flaky about what it does when it imports an 
environment variable into a local shell variable, as it does
with <em class="emphasis">HOME</EM
>, <em class="emphasis">USER</EM
>, <em class="emphasis">PATH</EM
>, and <em class="emphasis">TERM</EM
>.
Consider this:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>setenv TERM '`/bin/ls -l / &gt; /dev/tty`'</B
></CODE
>
% <code class="userinput"><b>csh -f</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">And watch the fun!</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-393-SECT-1.6">47.2.6 Expression Evaluation </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-56521"></A
><a class="indexterm" name="AUTOID-56524"></A
>Consider this statement in the <em class="emphasis">csh</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">if ($?MANPAGER) setenv PAGER $MANPAGER</PRE
></BLOCKQUOTE
></P
><p class="para">Despite your attempts to set only <em class="emphasis">PAGER</EM
> when you want
to, the <em class="emphasis">csh</EM
> aborts:</P
><p class="para"><blockquote class="screen"><pre class="screen">MANPAGER: Undefined variable.</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-56536"></A
>That's because it parses the whole line anyway <em class="emphasis">and evaluates it</EM
>!
You have to write this:</P
><p class="para"><blockquote class="screen"><pre class="screen">if ($?MANPAGER) then
    setenv PAGER $MANPAGER
endif</PRE
></BLOCKQUOTE
></P
><p class="para">That's the same problem you have here:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>if ($?X &amp;&amp; $X == 'foo') echo ok</B
></CODE
>
X: Undefined variable</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-56547"></A
>This forces you to write a couple of nested <em class="emphasis">if</EM
> statements.
This is highly undesirable 
because it renders short-circuit Booleans useless in situations like these.
If the <em class="emphasis">csh</EM
> were really C-like, you would expect to be able
to safely employ this kind of logic.
Consider the common C construct:</P
><p class="para"><blockquote class="screen"><pre class="screen">if (p &amp;&amp; p-&gt;member)</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-56555"></A
>Undefined variables are not fatal errors in the Bourne shell, so 
this issue does not arise there.</P
><p class="para">While the <em class="emphasis">csh</EM
> does have built-in expression handling, it's not
what you might think.
In fact, it's space-sensitive.
This is an error:</P
><p class="para"><blockquote class="screen"><pre class="screen">@ a = 4/2</PRE
></BLOCKQUOTE
></P
><p class="para">but this is okay:</P
><p class="para"><blockquote class="screen"><pre class="screen">@ a = 4 / 2</PRE
></BLOCKQUOTE
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-393-SECT-1.7">47.2.7 Error Handling </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-56568"></A
><a class="indexterm" name="AUTOID-56571"></A
>Wouldn't it be nice to know you had an error in your script before
you ran it?
That's what the <em class="emphasis">-n</EM
> flag is for: just check the syntax.
This is especially good to make sure seldom taken segments of 
code are correct.
Alas, the <em class="emphasis">csh</EM
> implementation of this doesn't work.
Consider this statement:</P
><p class="para"><blockquote class="screen"><pre class="screen">exit (i)</PRE
></BLOCKQUOTE
></P
><p class="para">Of course, they really meant:</P
><p class="para"><blockquote class="screen"><pre class="screen">exit (1)</PRE
></BLOCKQUOTE
></P
><p class="para">or just:</P
><p class="para"><blockquote class="screen"><pre class="screen">exit 1</PRE
></BLOCKQUOTE
></P
><p class="para">Either shell will complain about this.
But if you hide this in an <em class="emphasis">if</EM
> clause, like so:</P
><p class="para"><blockquote class="screen"><pre class="screen">#!/bin/csh -fn
if (1) then
    exit (i)
endif</PRE
></BLOCKQUOTE
></P
><p class="para">the C shell tells you there's nothing wrong with this script.
The equivalent
construct in the Bourne shell, on the other hand, tells you this:</P
><p class="para"><blockquote class="screen"><pre class="screen">#!/bin/sh -n
if (1) then
    exit (i)
endif

/tmp/x: syntax error at line 3: `(' unexpected</PRE
></BLOCKQUOTE
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-393-SECT-1.8">47.2.8 Random Bugs </A
></H3
><p class="para">Here's one:</P
><p class="para"><blockquote class="screen"><pre class="screen">!%s%x%s</PRE
></BLOCKQUOTE
></P
><p class="para">Core dump, or garbage.</P
><p class="para">If you have an alias with backquotes (<code class="literal">``</CODE
>), and use that in backquotes in 
another one, you get a core dump.</P
><p class="para">Try this:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>repeat 3 echo &quot;/vmu*&quot;</B
></CODE
>
/vmu*
/vmunix
/vmunix</PRE
></BLOCKQUOTE
></P
><p class="para">What???</P
><p class="para">While some vendors have fixed some of the <em class="emphasis">csh</EM
>'s bugs (the
<span class="link"><em class="emphasis">tcsh</EM
> (<a class="linkend" href="ch08_03.htm" webstripperlinkwas="ch08_03.htm" title="Introduction to tcsh">8.3</A
>)</SPAN
>
also
does much better here), most of its problems can never be solved
because they're a result of braindead design decisions.
Do yourself
a favor, and if you have to write a shell script, do it in the 
Bourne shell.<a class="indexterm" name="AUTOID-56608"></A
><a class="indexterm" name="AUTOID-56609"></A
><a class="indexterm" name="AUTOID-56610"></A
><a class="indexterm" name="AUTOID-56611"></A
><a class="indexterm" name="AUTOID-56612"></A
></P
></DIV
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">TC</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch47_01.htm" webstripperlinkwas="ch47_01.htm" title="47.1 Why Not? "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 47.1 Why Not? " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch47_03.htm" webstripperlinkwas="ch47_03.htm" title="47.3 Conditional Statements with if "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 47.3 Conditional Statements with if " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">47.1 Why Not? </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">47.3 Conditional Statements with if </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
