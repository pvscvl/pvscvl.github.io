<html><head><title>[Chapter 45] 45.8 Handling Signals to Child Processes </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:54:27Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch45_01.htm" webstripperlinkwas="ch45_01.htm" title="45. Shell Programming for the Initiated"><link rel="prev" href="ch45_07.htm" webstripperlinkwas="ch45_07.htm" title="45.7 The exec Command "><link rel="next" href="ch45_09.htm" webstripperlinkwas="ch45_09.htm" title='45.9 The Unappreciated Bourne Shell  ":&quot; Operator'></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch45_07.htm" webstripperlinkwas="ch45_07.htm" title="45.7 The exec Command "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 45.7 The exec Command " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 45<br>Shell Programming for the Initiated</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch45_09.htm" webstripperlinkwas="ch45_09.htm" title='45.9 The Unappreciated Bourne Shell  ":&quot; Operator'><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt='Next: 45.9 The Unappreciated Bourne Shell  ":&quot; Operator' border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-0198">45.8 Handling Signals to Child Processes </A
></H2
><p class="para"><a class="indexterm" name="AUTOID-52609"></A
><a class="indexterm" name="AUTOID-52612"></A
><a class="indexterm" name="AUTOID-52615"></A
><a class="indexterm" name="UPT-ART-198-IX-SIGNAL-HANDLING-IN-BOURNE-SHELLS"></A
><a class="indexterm" name="UPT-ART-198-IX-SIGNAL-HANDLING-OF-SUBPROCESSES"></A
><a class="indexterm" name="UPT-ART-198-IX-SUBPROCESSES"></A
>The Bourne shell
<span class="link"><em class="emphasis">trap</EM
> command (<a class="linkend" href="ch44_12.htm" webstripperlinkwas="ch44_12.htm" title="Trapping Exits Caused by Interrupts ">44.12</A
>)</SPAN
>
controls what the shell does when it gets an interrupt or signal (from the
<span class="link"><em class="emphasis">kill</EM
> (<a class="linkend" href="ch38_10.htm" webstripperlinkwas="ch38_10.htm" title="Destroying Processes with kill ">38.10</A
>)</SPAN
>
command, from a keyboard character like CTRL-c, and so on).
To run an
<span class="link">external command (<a class="linkend" href="ch01_10.htm" webstripperlinkwas="ch01_10.htm" title="Internal and External Commands ">1.10</A
>)</SPAN
>-
like an editor or a simple command such as <em class="emphasis">sort</EM
>-the shell starts a
<span class="link">child process (<a class="linkend" href="ch38_03.htm" webstripperlinkwas="ch38_03.htm" title="Managing Processes: Overall Concepts ">38.3</A
>)</SPAN
>
(subprocess).  If the program running in the child process wants
to handle its own signals, the parent shell should probably pass
signals on to the child process.  For example, you might run
<em class="emphasis">vi</EM
> as a child process and want to send a CTRL-c to stop
<em class="emphasis">vi</EM
> from what it's doing, but not want the CTRL-c to kill
the parent shell script.</P
><p class="para"><a class="indexterm" name="AUTOID-52636"></A
><a class="indexterm" name="AUTOID-52639"></A
><a class="indexterm" name="AUTOID-52642"></A
>When the parent process gets a signal, should it die or keep running?
Should the child get the signal or not?  The Bourne shell gives you a
fair amount of flexibility in signal handling.  The bad news is that
most <em class="emphasis">sh</EM
> manual pages don't say much about this.  And no manual
page I've seen explains a useful choice: using the
<span class="link"><code class="literal">:</CODE
> (colon) operator (<a class="linkend" href="ch45_09.htm" webstripperlinkwas="ch45_09.htm" title='The Unappreciated Bourne Shell  ":&quot; Operator'>45.9</A
>)</SPAN
>
with <em class="emphasis">trap</EM
>.
<a class="xref" href="#UPT-ART-198-TAB-0" title="trap Arguments (for Most Bourne Shells)">Table 45.1</A
>
shows your choices.<a class="indexterm" name="AUTOID-52649"></A
></P
><table class="table"><caption class="table"><a class="title" name="UPT-ART-198-TAB-0">Table 45.1: trap Arguments (for Most Bourne Shells)</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Argument</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Effect</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">&quot;&quot;</TD
><td class="entry" rowspan="1" colspan="1">Ignore signal, don't pass signal to child.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">:</TD
><td class="entry" rowspan="1" colspan="1">(undocumented) Ignore signal, pass signal to child.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">&quot;<code class="replaceable"><i>command-line</I
></CODE
>&quot;</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Run <em class="emphasis">command-line</EM
> with variable and command substitution 
done when <em class="emphasis">trap</EM
> set; don't pass signal to child.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">'<code class="replaceable"><i>command-line</I
></CODE
>'</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Run <em class="emphasis">command-line</EM
> with variable and command substitution done
when <em class="emphasis">trap</EM
> executed; don't pass signal to child.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">No argument</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Reset signal handling to default (usually, parent terminates).
Pass signal to child.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">Because so much of this is undocumented, I won't try to give you &quot;the
answers&quot; for how it should work with your shell.
Instead, here are two shell scripts that let you experiment with your
shell's signal handling.
One script, named <em class="emphasis">parent</EM
>, starts the second script, <em class="emphasis">child</EM
>.
The <em class="emphasis">child</EM
> script sets some traps, then starts
<span class="link"><em class="emphasis">sleep</EM
> (<a class="linkend" href="ch40_02.htm" webstripperlinkwas="ch40_02.htm" title="Waiting a Little While: sleep ">40.2</A
>)</SPAN
>
so it'll be there when you send a signal.
This lets you use CTRL-c or other interrupts,
if <em class="emphasis">parent</EM
> is running in
the foreground&nbsp;- or the <em class="emphasis">kill</EM
> command with signal numbers, if you've
put <em class="emphasis">parent</EM
> in the background.
You can edit the <em class="emphasis">trap</EM
> lines in the two scripts to test the setup
you want to use.</P
><p class="para">Here's an example.
I'll start <em class="emphasis">parent</EM
> in the background from the C shell, then send it a
signal 1 (&quot;hangup&quot; signal):</P
><p class="para"><table class="screen.co" border="1"><tr><th valign="TOP"><pre class="calloutlist">
&#13;


<a class="co" href="ch12_01.htm" webstripperlinkwas="ch12_01.htm" title="12.1 Job Control: Work Faster, Stop Runaway Jobs ">%1</A
> 





&#13;</PRE
></TH
><td valign="TOP"><pre class="screen">
% <code class="userinput"><b>parent &amp;</B
></CODE
>
[1] 8669
parent started
child started. pid is 8671
% <code class="userinput"><b>kill -1 %1</B
></CODE
>
./child: % 8671 Hangup
child got a signal 1
child exiting
parent still running after child exited
	<i class="lineannotation">...1000 seconds later...</I
>
parent exiting
[1]  + Done                 parent</PRE
></TD
></TR
></TABLE
></P
><p class="para">Now, the scripts:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>cat parent</B
></CODE
>
#!/bin/sh
echo parent started
trap &quot;echo parent exiting; exit&quot; 0
trap : 1                              # pass signal 1 to child but don't die
trap &quot;&quot; 2                             # ignore signal 2, block from child
trap &quot;echo parent got signal 15&quot; 15   # ignore signal 15, send to child
                                      # die on other signals, send to child<a class="indexterm" name="AUTOID-52706"></A
>
child
echo parent still running after child exited
sleep 1000
% <code class="userinput"><b>cat child</B
></CODE
>
#! /bin/sh
echo child started. pid is $$.
trap 'echo child exiting; exit' 0
trap 'echo child got a signal 1' 1
trap '' 2       # ignore signal 2
trap 'echo child got a signal 3' 3
sleep 1000      # wait a long time for a signal</PRE
></BLOCKQUOTE
></P
><p class="para">Even with this help, the way signal handling works might not be too clear.
For more on signal handling, see a book that covers
UNIX internals on your system.</P
><a class="indexterm" name="AUTOID-52711"></A
><a class="indexterm" name="AUTOID-52712"></A
><a class="indexterm" name="AUTOID-52713"></A
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">JP</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch45_07.htm" webstripperlinkwas="ch45_07.htm" title="45.7 The exec Command "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 45.7 The exec Command " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch45_09.htm" webstripperlinkwas="ch45_09.htm" title='45.9 The Unappreciated Bourne Shell  ":&quot; Operator'><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt='Next: 45.9 The Unappreciated Bourne Shell  ":&quot; Operator' border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">45.7 The exec Command </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">45.9 The Unappreciated Bourne Shell  ":&quot; Operator</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
