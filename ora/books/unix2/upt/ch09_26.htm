<html><head><title>[Chapter 9] 9.26 Expect </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:35:36Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch09_01.htm" webstripperlinkwas="ch09_01.htm" title="9. Saving Time on the Command Line"><link rel="prev" href="ch09_25.htm" webstripperlinkwas="ch09_25.htm" title="9.25 The C Shell repeat Command "><link rel="next" href="ch10_01.htm" webstripperlinkwas="ch10_01.htm" title="10. Aliases"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch09_25.htm" webstripperlinkwas="ch09_25.htm" title="9.25 The C Shell repeat Command "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 9.25 The C Shell repeat Command " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 9<br>Saving Time on the Command Line</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch10_01.htm" webstripperlinkwas="ch10_01.htm" title="10. Aliases"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 10. Aliases" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-9912">9.26 Expect </A
></H2
><table class="para.programreference" border="1"><tr><th valign="TOP"><a class="programreference" href="examples/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/examples/index.htm" title="expect">expect</A
><br></TH
><td valign="TOP"><a class="indexterm" name="AUTOID-11484"></A
>
Expect is a program to control interactive applications such as
<span class="link"><em class="emphasis">telnet</EM
> (<a class="linkend" href="ch01_33.htm" webstripperlinkwas="ch01_33.htm" title="UNIX Networking and Communications ">1.33</A
>)</SPAN
>
and <em class="emphasis">passwd</EM
>.
These and many other applications interactively prompt and
expect a user to enter keystrokes in response.
But you can write simple Expect scripts to automate these
interactions.
Then the Expect program can run the &quot;interactive&quot; program
non-interactively.
Expect can also be used to automate only parts of a dialogue, since
control can be passed from the script to the keyboard and vice versa.
This allows a script to do the drudgery and a user to do the fun stuff.</TD
></TR
></TABLE
><table class="para.programreference" border="1"><tr><th valign="TOP"><a class="programreference" href="examples/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/examples/index.htm" title="tcl">tcl</A
><br><a class="programreference" href="examples/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/examples/index.htm" title="tk">tk</A
><br></TH
><td valign="TOP">Expect programs can be written in any language, but are almost always
written using Tcl.

Tcl is an interpreted language that is widely used
in many other applications.<a class="indexterm" name="AUTOID-11492"></A
>
If you already use a Tcl-based application, you won't have to learn a
new language for Expect.</TD
></TR
></TABLE
><p class="para">Tcl is a very typical-looking shell-like language.
There are commands to set variables (<em class="emphasis">set</EM
>), control flow
(<em class="emphasis">if</EM
>, <em class="emphasis">while</EM
>, <em class="emphasis">foreach</EM
>, etc.),
and perform the usual math and string operations.
Of course, UNIX programs can be called, too.</P
><p class="para">Expect is integrated on top of Tcl and provides additional commands
for interacting with programs.
Expect is named after the specific command that waits for output from a
program.
The <em class="emphasis">expect</EM
> command is the heart of the Expect program.
The <em class="emphasis">expect</EM
> command describes a list of patterns to watch for.
Each pattern is followed by an action.
If the pattern is found, the action is executed.</P
><p class="para">For example, the following fragment is from a script that
involves a login.
When executed, the script waits for the strings <code class="literal">welcome</CODE
>,
<code class="literal">failed</CODE
>, or <code class="literal">busy</CODE
>, and then it evaluates
[(executes)-<em class="emphasis">JP</EM
>&nbsp;]
one of the corresponding actions.
The action associated with busy shows how multiple commands
can be evaluated.<a class="indexterm" name="AUTOID-11507"></A
>
The timeout keyword is a special pattern that
matches if no other patterns match in a certain amount of time.</P
><p class="para"><blockquote class="screen"><pre class="screen">expect {
   &quot;welcome&quot; break
   &quot;failed&quot;  abort
   timeout   abort
   &quot;busy&quot;    {
        puts &quot;I'll wait - the system is busy!&quot;
        continue
    }
}</PRE
></BLOCKQUOTE
></P
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-9912-SECT-1.1">9.26.1 Dialback </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-11514"></A
>It is surprising how little scripting is necessary to produce
something useful.
Below is a script that dials a phone.
It is used to reverse the charges so that long-distance phone calls are
charged to the computer.
It is invoked with the phone number as its argument.</P
><p class="para"><blockquote class="screen"><pre class="screen">spawn tip modem
expect &quot;connected&quot;
send &quot;ATD$argv\r&quot;
# modem takes a while to connect
set timeout 60
expect &quot;CONNECT&quot;</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-11519"></A
>The first line runs the <em class="emphasis">tip</EM
> program so that the output of a modem can
be read by <em class="emphasis">expect</EM
> and its input written by <em class="emphasis">send</EM
>.
Once <em class="emphasis">tip</EM
> says it is connected, the modem is told to dial using the
command <code class="literal">ATD</CODE
> followed by the phone number.
The phone number is retrieved from <em class="emphasis">argv</EM
>, which is a variable predefined
to contain the original argument with which the script was called.</P
><p class="para">The fourth line is just a comment noting that the variable being set
in the next line controls how long <em class="emphasis">expect</EM
> will wait before giving up.
At this point, the script waits for the call to complete.
No matter what happens, <em class="emphasis">expect</EM
> terminates.
If the call succeeds, the system detects that a user is connected and
prompts with <code class="literal">login:</CODE
>.</P
><p class="para">Actual scripts do more error checking, of course.
For example, the script could retry if the call fails.
But the point here is that it does not take much code to produce useful
scripts.
This six-line script replaced a 60Kb executable (written in C) that did
the same thing!</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-9912-SECT-1.2">9.26.2 Automating /bin/passwd </A
></H3
><p class="para"><a class="indexterm" name="UPT-ART-9912-IX-AUTOMATIC-PASSWD-COMMAND-USE"></A
><a class="indexterm" name="UPT-ART-9912-IX-PASSWD-COMMAND"></A
>Earlier I mentioned some programs that cannot be automated with the
shell.
It is difficult to imagine why you might even want to embed
some of these programs in shell scripts.
Certainly the original authors of the programs did not conceive of this
need.
As an example, consider <em class="emphasis">passwd</EM
>.</P
><p class="para"><em class="emphasis">passwd</EM
> is the command to change a password.
The <em class="emphasis">passwd</EM
> program does not take the new password from the command line.
Instead, it interactively prompts for it&nbsp;- twice.
Here is what it looks like when run by a system administrator.
(When run by users, the interaction is slightly more complex because
they are prompted for their old passwords as well.)</P
><p class="para"><blockquote class="screen"><pre class="screen"># <code class="userinput"><b>passwd libes</B
></CODE
>
Changing password for libes on thunder.
New password:
Retype new password:</PRE
></BLOCKQUOTE
></P
><p class="para">This is fine for a single password.
But suppose you have accounts of your own on a number of unrelated
computers and you would like them all to have the same password.
Or suppose you are a system administrator establishing 1000 accounts at
the beginning of each semester.
All of a sudden, an automated <em class="emphasis">passwd</EM
> makes a lot of sense.
Here is an Expect script to do just that:
automate <em class="emphasis">passwd</EM
> so that it can be called from a shell script.</P
><p class="para"><blockquote class="screen"><pre class="screen">spawn passwd [lindex $argv 0]
set password [lindex $argv 1]
expect &quot;password:&quot;
send &quot;$password\r&quot;
expect &quot;password:&quot;
send &quot;$password\r&quot;
expect eof</PRE
></BLOCKQUOTE
></P
><p class="para">The first line starts the <em class="emphasis">passwd</EM
> program with the username passed as
an argument.
The next line saves the password in a variable for convenience.
As in shell scripts, variables do not have to be declared in advance.</P
><p class="para">In the third line, the <em class="emphasis">expect</EM
> command looks for the pattern
<code class="literal">password:</CODE
>.
<em class="emphasis">expect</EM
> waits until the pattern is found before continuing.</P
><p class="para">After receiving the prompt, the next line sends a password to the
current process.
The <em class="emphasis">\r</EM
> indicates a carriage-return.
(Most of the usual C string conventions are supported.)
There are two <em class="emphasis">expect</EM
>-<em class="emphasis">send</EM
> sequences because
<em class="emphasis">passwd</EM
> asks the password to
be typed twice as a spelling verification.
There is no point to this in a non-interactive <em class="emphasis">passwd</EM
>,
but the script has to do it because <em class="emphasis">passwd</EM
> assumes it is
interacting with a human who does not type consistently.</P
><p class="para">The final command <code class="literal">expect&nbsp;eof</CODE
> causes the script to wait for the
end-of-file in the output of <em class="emphasis">passwd</EM
>.
Similar to <em class="emphasis">timeout</EM
>, <em class="emphasis">eof</EM
> is another keyword pattern.
This final <em class="emphasis">expect</EM
> effectively waits for <em class="emphasis">passwd</EM
> to
complete execution before returning control to the script.</P
><p class="para">Take a step back for a moment.
Consider that this problem could be solved in a different way.
You could edit the source to <em class="emphasis">passwd</EM
> (should you be so lucky as to
have it) and modify it so that given an optional flag, it reads its
arguments from the command line just the way that the Expect
script does.
If you lack the source and have to write <em class="emphasis">passwd</EM
> from scratch, of
course, then you will have to worry about how to encrypt passwords,
lock and write the password database, etc.
In fact, even if you only modify the existing code, you may find it
surprisingly complicated code to look at.
The <em class="emphasis">passwd</EM
> program does some very tricky things.
If you do get it to work, pray that nothing
changes when your system is upgraded.
If the vendor adds NIS, Kerberos, shadow passwords, a different
encryption function, or some other new feature, you will have to
revisit the code.</P
><p class="para">Expect comes with many example scripts that demonstrate how you can
do many things that are impossible with traditional shells.
For example, the <em class="emphasis">passmass</EM
> script lets you update your password on
many unrelated machines simultaneously.
The <em class="emphasis">rftp</EM
> script provides your regular <em class="emphasis">ftp</EM
> client with
additional commands to do recursive FTP in either direction.
The <em class="emphasis">cryptdir</EM
> script encrypts all the files in a directory.
And an amusing script is provided that lets two <em class="emphasis">chess</EM
>
processes play each other.
Expect has no limit to the number of interactive programs it can drive
at the same time.
[The UNIX system may limit Expect, though, by controlling the
maximum number of processes or other system resources available. -<em class="emphasis">JP</EM
>&nbsp;]<a class="indexterm" name="AUTOID-11583"></A
><a class="indexterm" name="AUTOID-11584"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-9912-SECT-1.3">9.26.3 Testing: A Story </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-11588"></A
>Many people use Expect for testing.
You can test interactive programs as easily as you can automate them.
And hardware lends itself to testing with Expect, too.
For example, we solved a thorny problem when we had to deal with an
unreliable bank of modems.
We were receiving dozens of calls each week reporting &quot;the modem is hung.&quot;
No indication of which modem, of course.
And it was always too late for us to ask the user to try something
to investigate the problem.
The connection was gone by then.
Our solution was an Expect script that hourly connected to each modem
and exercised it.
Any problems were recorded so that we had a clear and full history of
each modem's behavior.
As soon as a defective or hung modem was encountered, the
Expect script would send email to the system administrator.
With this script in place, reports of modem problems from our users
dropped to zero.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-9912-SECT-1.4">9.26.4 Other Problems </A
></H3
><p class="para">These are just a few of the problems that can be solved with Expect.
And as with all Expect solutions, recompilation of the original
programs is unnecessary.
You don't even need the source code!
Expect handles many other problems as well.
For example, Expect can wrap existing interactive tools with GUI wrappers.
This means you can wrap interactive programs with Motif-like frontends
to control applications by buttons, scrollbars, and other graphic
elements.
And Expect scripts work great as CGI scripts or from
<span class="link"><em class="emphasis">cron</EM
> (<a class="linkend" href="ch40_12.htm" webstripperlinkwas="ch40_12.htm" title="Periodic Program Execution: The cron Facility ">40.12</A
>)</SPAN
>
or <em class="emphasis">inetd</EM
>
[the daemon that controls Internet services provided by a
system-<em class="emphasis">JP</EM
>&nbsp;].
Finally, learning Expect may be easier than you think.
Expect can watch you interact and then produce an Expect script for you.
Interaction automation can't get much easier than this!</P
><p class="para">More information on Expect is available in <em class="emphasis">Exploring Expect</EM
>, by
Don Libes, from O'Reilly &amp; Associates.</P
></DIV
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">DL</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch09_25.htm" webstripperlinkwas="ch09_25.htm" title="9.25 The C Shell repeat Command "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 9.25 The C Shell repeat Command " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch10_01.htm" webstripperlinkwas="ch10_01.htm" title="10. Aliases"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 10. Aliases" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">9.25 The C Shell repeat Command </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10. Aliases</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
