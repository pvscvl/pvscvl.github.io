<html><head><title>[Chapter 45] 45.23 The Ins and Outs of Redirected I/O Loops </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:54:52Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch45_01.htm" webstripperlinkwas="ch45_01.htm" title="45. Shell Programming for the Initiated"><link rel="prev" href="ch45_22.htm" webstripperlinkwas="ch45_22.htm" title="45.22 Handling Files Line-by-Line "><link rel="next" href="ch45_24.htm" webstripperlinkwas="ch45_24.htm" title="45.24 A Shell Can Read a Script from its Standard Input, But..."></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch45_22.htm" webstripperlinkwas="ch45_22.htm" title="45.22 Handling Files Line-by-Line "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 45.22 Handling Files Line-by-Line " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 45<br>Shell Programming for the Initiated</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch45_24.htm" webstripperlinkwas="ch45_24.htm" title="45.24 A Shell Can Read a Script from its Standard Input, But..."><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 45.24 A Shell Can Read a Script from its Standard Input, But..." border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-7928">45.23 The Ins and Outs of Redirected I/O Loops </A
></H2
><p class="para"><a class="indexterm" name="AUTOID-54021"></A
><a class="indexterm" name="AUTOID-54023"></A
><a class="indexterm" name="AUTOID-54026"></A
><a class="indexterm" name="AUTOID-54029"></A
>The Bourne shell usually runs
<span class="link">a loop with redirected input or output (<a class="linkend" href="ch45_22.htm" webstripperlinkwas="ch45_22.htm" title="Handling Files Line-by-Line ">45.22</A
>)</SPAN
>
in a
<span class="link">subshell (<a class="linkend" href="ch38_04.htm" webstripperlinkwas="ch38_04.htm" title="Subshells ">38.4</A
>)</SPAN
>.
For the <em class="emphasis">formprog</EM
> script in article
<a class="xref" href="ch45_22.htm" webstripperlinkwas="ch45_22.htm" title="Handling Files Line-by-Line ">45.22</A
>,
this means, among other things, that:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-54039"></A
>Any command inside the loop that reads its standard input will
read from the pipe or file redirected to the loop's standard input.
That's something you have to pay attention to, because the only command that 
should read from the file is usually the <em class="emphasis">read</EM
> command at the top
of the loop.
The inputs of other commands inside the loop&nbsp;- like commands that read
from the terminal&nbsp;- have to be redirected to read from somewhere other
than the loop's standard input.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-54045"></A
><a class="indexterm" name="AUTOID-54048"></A
>In many Bourne shells, if you use the
<span class="link"><em class="emphasis">exit</EM
> (<a class="linkend" href="ch38_04.htm" webstripperlinkwas="ch38_04.htm" title="Subshells ">38.4</A
>)</SPAN
>
command inside a
redirected loop, that will only terminate the subshell that's running
the loop; it will <em class="emphasis">not</EM
> terminate the
script.
It's hard to call this a &quot;feature&quot;; I'd call it a bug.
The script in article
<a class="xref" href="ch45_22.htm" webstripperlinkwas="ch45_22.htm" title="Handling Files Line-by-Line ">45.22</A
>
has a workaround for this; see the next paragraph.
Later versions of Bourne-like shells have fixed this problem, more or less,
but the fix below should work in all Bourne shells.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-54057"></A
><a class="indexterm" name="AUTOID-54060"></A
><a class="indexterm" name="AUTOID-54063"></A
>If there's any error inside the loop that should terminate the script,
an error message is written to file descriptor 2.
File descriptor 2 is redirected to an error-holding file at the subshell
(loop) output.
A <em class="emphasis">break</EM
> command can end the loop right away.
After the loop ends, if the error file has anything in it, that means
there was an error&nbsp;- if there are more commands to run, the script can
terminate before running them.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-54069"></A
><a class="indexterm" name="AUTOID-54072"></A
>You can test the
<span class="link">exit status (<a class="linkend" href="ch44_07.htm" webstripperlinkwas="ch44_07.htm" title="Exit Status of UNIX Processes ">44.7</A
>)</SPAN
>
of the redirected-I/O loop.
To end the loop, use a command like <code class="literal">exit&nbsp;0</CODE
>, <code class="literal">exit&nbsp;2</CODE
>,
and so on.
Just after the <code class="literal">done</CODE
> command outside the loop, use
<span class="link"><code class="literal">case&nbsp;$?</CODE
> (<a class="linkend" href="ch44_05.htm" webstripperlinkwas="ch44_05.htm" title="Test String Values with Bourne Shell case ">44.5</A
>)</SPAN
>
to test the loop's status.
For instance, a 0 status might mean the loop worked fine, a 1 could
signal one kind of error, a 2 status a different error, and so on.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-54083"></A
><a class="indexterm" name="AUTOID-54086"></A
>If you change the value of any shell or environment variables inside the
loop, their values outside the loop (after the <em class="emphasis">done</EM
> command at
the end of the loop) will not be changed.
Here's the usual fix for that problem.
You use another file descriptor, like file descriptor 6,
and write variable-setting
commands to it.
You redirect that file descriptor to a temporary file.
Then, use the shell's
<span class="link">dot command (<code class="literal">.</CODE
>) (<a class="linkend" href="ch44_23.htm" webstripperlinkwas="ch44_23.htm" title="Reading Files with the . and source Commands ">44.23</A
>)</SPAN
>
to read the temporary file into the shell outside the loop.
For example, to get the value of a variable named <em class="emphasis">varname</EM
> outside the
loop:</P
><p class="para"><blockquote class="screen"><pre class="screen"><a class="indexterm" name="AUTOID-54095"></A
>while whatever
do  ...
   echo &quot;varname='value'&quot; 1&gt;&amp;6
    ...
done 6&gt; var_set_file
. var_set_file</PRE
></BLOCKQUOTE
></P
></LI
></UL
><p class="para">Greg Ubben sent me two other ways that he prefers.
The first one depends on having a <em class="emphasis">read</EM
> that accepts redirection
on its command line, which most do these days.
The second works when you can put the usage in the same scope (within
the
<span class="link">curly braces (<a class="linkend" href="ch13_08.htm" webstripperlinkwas="ch13_08.htm" title="Using {list} to Group Bourne Shell Commands ">13.8</A
>)</SPAN
>)
as the redirection:</P
><p class="para"><blockquote class="screen"><pre class="screen">exec 3&lt; file   {
while read line &lt;&amp;3       while read line
do       do
     var=value            var=value
done       done
exec 3&lt;&amp;-       echo &quot;var = $var&quot;
echo &quot;var = $var&quot;   } &lt; file</PRE
></BLOCKQUOTE
></P
><p class="para">Putting the loop inside a function and redirecting into the function
also seems to avoid the subshell problem.
But don't take my (our) word for it:
test it on the shell you'll be using.<a class="indexterm" name="AUTOID-54104"></A
><a class="indexterm" name="AUTOID-54105"></A
></P
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">JP</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch45_22.htm" webstripperlinkwas="ch45_22.htm" title="45.22 Handling Files Line-by-Line "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 45.22 Handling Files Line-by-Line " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch45_24.htm" webstripperlinkwas="ch45_24.htm" title="45.24 A Shell Can Read a Script from its Standard Input, But..."><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 45.24 A Shell Can Read a Script from its Standard Input, But..." border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">45.22 Handling Files Line-by-Line </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">45.24 A Shell Can Read a Script from its Standard Input, But...</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
