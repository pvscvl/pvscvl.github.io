<html><head><title>[Chapter 44] 44.16 Handling Command-Line Arguments with a for Loop </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:53:54Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch44_01.htm" webstripperlinkwas="ch44_01.htm" title="44. Shell Programming for the Uninitiated"><link rel="prev" href="ch44_15.htm" webstripperlinkwas="ch44_15.htm" title="44.15 Handling Command-Line Arguments in Shell Scripts "><link rel="next" href="ch44_17.htm" webstripperlinkwas="ch44_17.htm" title="44.17 Handling Arguments with while and shift "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch44_15.htm" webstripperlinkwas="ch44_15.htm" title="44.15 Handling Command-Line Arguments in Shell Scripts "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 44.15 Handling Command-Line Arguments in Shell Scripts " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 44<br>Shell Programming for the Uninitiated</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch44_17.htm" webstripperlinkwas="ch44_17.htm" title="44.17 Handling Arguments with while and shift "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 44.17 Handling Arguments with while and shift " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-4940">44.16 Handling Command-Line Arguments with a for Loop </A
></H2
><p class="para"><a class="indexterm" name="AUTOID-51412"></A
><a class="indexterm" name="AUTOID-51415"></A
>Sometimes you want a script that will step through the command-line arguments
one by one.
(The
<span class="link"><code class="literal">&quot;$@&quot;</CODE
> parameter (<a class="linkend" href="ch44_15.htm" webstripperlinkwas="ch44_15.htm" title="Handling Command-Line Arguments in Shell Scripts ">44.15</A
>)</SPAN
> 
gives you all of them at once.)
The Bourne shell <em class="emphasis">for</EM
> loop can do this.
The <em class="emphasis">for</EM
> loop looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">for arg in <code class="replaceable"><i>list</I
></CODE
>
do
    ...<em class="emphasis">handle $arg</EM
>...
done</PRE
></BLOCKQUOTE
></P
><p class="para">If you omit the <code class="literal">in</CODE
><code class="replaceable"><i>&nbsp;list</I
></CODE
>, the loop steps through the command-line arguments.
It puts the first command-line argument in <em class="emphasis">arg</EM
> (or whatever
else you choose to call the 
<span class="link">shell variable (<a class="linkend" href="ch06_08.htm" webstripperlinkwas="ch06_08.htm" title="Shell Variables ">6.8</A
>)</SPAN
>),
then executes the commands from <code class="literal">do</CODE
> to <code class="literal">done</CODE
>.
Then it puts the next command-line argument in <em class="emphasis">arg</EM
>, does the loop...
and so on... ending the loop after handling all the arguments.</P
><p class="para"><a class="indexterm" name="AUTOID-51435"></A
><a class="indexterm" name="AUTOID-51438"></A
><a class="indexterm" name="AUTOID-51440"></A
>For an example of a <em class="emphasis">for</EM
> loop, let's hack on the
<span class="link"><em class="emphasis">zpg</EM
> (<a class="linkend" href="ch44_12.htm" webstripperlinkwas="ch44_12.htm" title="Trapping Exits Caused by Interrupts ">44.12</A
>)</SPAN
>
script.</P
><p class="para"><table class="screen.co" border="1"><tr><th valign="TOP"><pre class="calloutlist">
&#13;









<a class="co" href="ch44_06.htm" webstripperlinkwas="ch44_06.htm" title="44.6 Pattern Matching in case Statements ">case</A
> 











&#13;</PRE
></TH
><td valign="TOP"><pre class="screen">
#!/bin/sh
# zpg - UNCOMPRESS FILE(S), DISPLAY WITH pg
# Usage: zpg [pg options] file [...files]
stat=1  # DEFAULT EXIT STATUS; RESET TO 0 BEFORE NORMAL EXIT
temp=/tmp/zpg$$
trap 'rm -f $temp; exit $stat' 0
trap 'echo &quot;`basename $0`: Ouch! Quitting early...&quot; 1&gt;&amp;2' 1 2 15

files=  switches=
for arg<a class="indexterm" name="AUTOID-51448"></A
>
do
    case &quot;$arg&quot; in
    -*) switches=&quot;$switches $arg&quot; ;;
    *)  files=&quot;$files $arg&quot; ;;
    esac
done

case &quot;$files&quot; in
&quot;&quot;) echo &quot;Usage: `basename $0` [pg options] file [files]&quot; 1&gt;&amp;2 ;;
*)  for file in $files
    do gzcat &quot;$file&quot; | pg $switches
    done
    stat=0
    ;;
esac</PRE
></TD
></TR
></TABLE
></P
><p class="para">We added a <em class="emphasis">for</EM
> loop to get and check each command-line argument.
For example, let's say that a user typed:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>zpg -n afile ../bfile</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-51458"></A
><a class="indexterm" name="AUTOID-51461"></A
>The first pass through the <em class="emphasis">for</EM
> loop, <code class="literal">$arg</CODE
> is <code class="literal">-n</CODE
>.
Because the argument starts with a minus sign (<code class="literal">-</CODE
>),
the <em class="emphasis">case</EM
> treats it as an option.
Now the <code class="literal">switches</CODE
> variable is replaced by its previous contents
(an empty string), a space, and <code class="literal">-n</CODE
>.
Control goes to the <code class="literal">esac</CODE
> and the loop repeats
with the next argument.</P
><p class="para">The next argument, <code class="literal">afile</CODE
>, doesn't look like an option.
So now the <code class="literal">files</CODE
> variable will contain a space and <code class="literal">afile</CODE
>.</P
><p class="para">The loop starts over once more, with <code class="literal">../bfile</CODE
> in <code class="literal">$arg</CODE
>.
Again, this looks like a file, so now <code class="literal">$files</CODE
> has
<code class="literal">&nbsp;afile ../bfile</CODE
>.
Because <code class="literal">../bfile</CODE
> was the last argument, the loop ends;
<code class="literal">$switches</CODE
>
has the options and <code class="literal">$files</CODE
> has all the other arguments.</P
><p class="para">Next, we added another <em class="emphasis">for</EM
> loop.
This one has the word <code class="literal">in</CODE
> followed by <code class="literal">$files</CODE
>,
so the loop steps through the contents of <code class="literal">$files</CODE
>.
The loop runs <em class="emphasis">gzcat</EM
> on each file, piping it to <em class="emphasis">pg</EM
> with any switches
you gave.</P
><p class="para">Note that <code class="literal">$switches</CODE
> isn't
<span class="link">quoted (<a class="linkend" href="ch08_14.htm" webstripperlinkwas="ch08_14.htm" title="Bourne Shell Quoting ">8.14</A
>)</SPAN
>.
This way, if <code class="literal">$switches</CODE
> is empty, the shell won't pass an empty
argument to <em class="emphasis">pg</EM
>.
Also, if <code class="literal">$switches</CODE
> has more than one switch, the shell will break the
switches into separate arguments at the spaces and pass them individually to
<em class="emphasis">pg</EM
>.</P
><p class="para"><a class="indexterm" name="AUTOID-51499"></A
><a class="indexterm" name="AUTOID-51502"></A
><a class="indexterm" name="AUTOID-51505"></A
><a class="indexterm" name="AUTOID-51508"></A
>You can use a <em class="emphasis">for</EM
> loop with any space-separated (actually,
<span class="link">IFS (<a class="linkend" href="ch35_21.htm" webstripperlinkwas="ch35_21.htm" title="Using IFS to Split Strings ">35.21</A
>)</SPAN
>-separated)
list of words&nbsp;- not just filenames.
You don't have to use a shell variable as the list;
you can use
<span class="link">command substitution (<a class="linkend" href="ch09_16.htm" webstripperlinkwas="ch09_16.htm" title="Command Substitution ">9.16</A
>)</SPAN
>
(backquotes),
<span class="link">shell wildcards (<a class="linkend" href="ch15_02.htm" webstripperlinkwas="ch15_02.htm" title="Filename Wildcards in a Nutshell ">15.2</A
>)</SPAN
>,
or just &quot;hardcode&quot; the list of words:</P
><p class="para"><table class="screen.co" border="1"><tr><th valign="TOP"><pre class="calloutlist">
&#13;
<a class="co" href="ch13_13.htm" webstripperlinkwas="ch13_13.htm" title='13.13 The "Filename&quot; - '>-</A
> <a class="co" href="ch43_02.htm" webstripperlinkwas="ch43_02.htm" title="43.2 Introduction to Printing on UNIX ">lpr</A
> &#13;</PRE
></TH
><td valign="TOP"><pre class="screen">
for person in Joe Leslie Edie Allan<a class="indexterm" name="AUTOID-51517"></A
>
do
   echo &quot;Dear $person,&quot; | cat - form_letter | lpr
done</PRE
></TD
></TR
></TABLE
></P
><p class="para"><a class="indexterm" name="AUTOID-51523"></A
><a class="indexterm" name="UPT-ART-4940-IX-GETOPTS-COMMAND"></A
>The
<span class="link"><em class="emphasis">getopt</EM
> and <em class="emphasis">getopts</EM
> (<a class="linkend" href="ch44_18.htm" webstripperlinkwas="ch44_18.htm" title="Standard Command-Line Parsing ">44.18</A
>)</SPAN
>
commands handle command-line arguments in a more standard way than
<em class="emphasis">for</EM
> loops.</P
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">JP</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch44_15.htm" webstripperlinkwas="ch44_15.htm" title="44.15 Handling Command-Line Arguments in Shell Scripts "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 44.15 Handling Command-Line Arguments in Shell Scripts " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch44_17.htm" webstripperlinkwas="ch44_17.htm" title="44.17 Handling Arguments with while and shift "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 44.17 Handling Arguments with while and shift " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">44.15 Handling Command-Line Arguments in Shell Scripts </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">44.17 Handling Arguments with while and shift </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
