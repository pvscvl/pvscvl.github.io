<html><head><title>[Chapter 39] 39.5 Why Is the System So Slow? </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:50:13Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch39_01.htm" webstripperlinkwas="ch39_01.htm" title="39. Time and Performance"><link rel="prev" href="ch39_04.htm" webstripperlinkwas="ch39_04.htm" title="39.4 Average Command Runtimes with runtime "><link rel="next" href="ch39_06.htm" webstripperlinkwas="ch39_06.htm" title="39.6 lastcomm: What Commands Are Running and How Long Do They Take?"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch39_04.htm" webstripperlinkwas="ch39_04.htm" title="39.4 Average Command Runtimes with runtime "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 39.4 Average Command Runtimes with runtime " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 39<br>Time and Performance</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch39_06.htm" webstripperlinkwas="ch39_06.htm" title="39.6 lastcomm: What Commands Are Running and How Long Do They Take?"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 39.6 lastcomm: What Commands Are Running and How Long Do They Take?" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-0066">39.5 Why Is the System So Slow? </A
></H2
><p class="para"><a class="indexterm" name="AUTOID-43763"></A
>To a user, performance means: &quot;How much time does it take to run
my job?&quot; For a system manager, this question is much too simple: a
user's job may take a long time to execute because it is badly
written or because it doesn't really use the computer appropriately.
Furthermore, a system manager must optimize performance for all 
system users&nbsp;- which is much more complicated than optimizing
performance for a single user.
Here are some of the things that affect performance.</P
><p class="para"><a class="indexterm" name="AUTOID-43767"></A
>The UNIX utility
<span class="link"><em class="emphasis">/bin/time</EM
> (<a class="linkend" href="ch39_02.htm" webstripperlinkwas="ch39_02.htm" title="Timing Programs ">39.2</A
>)</SPAN
>
reports the amount of time
required to execute a program, breaking down the total time into 
several important components. For example, consider
the report below:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>/bin/time application</B
></CODE
><code class="literal">  4.8 real      0.5 user      0.7 sys</CODE
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-43777"></A
><a class="indexterm" name="AUTOID-43779"></A
><a class="indexterm" name="AUTOID-43781"></A
><a class="indexterm" name="AUTOID-43783"></A
><a class="indexterm" name="AUTOID-43786"></A
>This report shows that the program ran in roughly 4.8 seconds. This
is the <em class="emphasis">elapsed</EM
> or <em class="emphasis">wallclock</EM
> time: it is the actual
time that the program runs as it would be measured by a user sitting
at the terminal with a stopwatch. The amount of time that the system
spent working on your program is much smaller. It spent
0.5&nbsp;seconds of <em class="emphasis">user time</EM
>, which is time spent executing code in the
user state, and about 0.7 seconds of <em class="emphasis">system time</EM
>, which is time
spent in the system state (i.e., time spent executing UNIX system code) on
behalf of the user. The total amount of CPU time (actual
execution time on the main processor) was only 1.2 seconds, or only
one-quarter of the elapsed time.  
[1] </P
><blockquote class="footnote"><p class="para">[1] Note that BSD and System V versions of <em class="emphasis">/bin/time</EM
> have different
output formats but provide the same information. <em class="emphasis">/bin/time</EM
> also
differs from the
<span class="link"> C shell's <em class="emphasis">time</EM
> command , (<a class="linkend" href="ch39_03.htm" webstripperlinkwas="ch39_03.htm" title="The csh time variable ">39.3</A
>)</SPAN
>
which provides a more elaborate report.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-43799"></A
> Where did the rest of the time go? Some time was spent performing I/O
(text input/output) operations, which <em class="emphasis">/bin/time</EM
> doesn't report. Handling I/O requires some computation, which is attributed to system time.
But time that is spent by disk drives, network interfaces, terminal controllers, or other hardware isn't accounted for;
most of the time was spent running jobs on behalf of other users. This entails its own performance overhead (context-switch time,
swapping time, etc.). </P
><p class="para"><a class="indexterm" name="AUTOID-43803"></A
> Many different
components contribute to a program's total running time. When you understand the roles these components play, you will understand the
problem. Here is a summary of the different components:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-43809"></A
> <b class="emphasis.bold">User-state CPU time.</B
>  The actual amount of time the CPU spends
running your program in the user state. It includes time spent executing library functions but excludes time spent executing system
calls (i.e., time spent in the UNIX kernel on behalf of the process).
Programmers can control user-state time by knowing which library routines are efficient and which aren't, and they
should know how to run profilers on the program to find out where it's spending its time.</P
></LI
><li class="listitem"><p class="para"> <a class="indexterm" name="AUTOID-43814"></A
><a class="indexterm" name="AUTOID-43817"></A
>
 <b class="emphasis.bold">System-state CPU time.</B
>  The amount of time the CPU spends
in the system state (i.e., the amount of time spent executing kernel code) on behalf of the program. This includes time spent executing
system calls and performing administrative functions on the program's behalf.
The distinction between time spent in simple library routines and time spent in system services is important and often confused. A call to
<em class="emphasis">strcpy</EM
>, which copies a character string, executes entirely in the user state because it doesn't require any special handling by the
kernel. Calls to <em class="emphasis">printf</EM
>, <em class="emphasis">fork</EM
>, and many other routines are much more complex. These functions do require services from the UNIX
kernel so they spend part of their time, if not most of it, in the system state. All I/O routines require the kernel's services.</P
><p class="para">System-state CPU time is partially under the programmer's control. Although programmers cannot change the amount of time it takes to service any system
call, they can rewrite the program to issue system calls more efficiently (for example, to make I/O transfers in larger blocks).</P
></LI
><li class="listitem"><p class="para"> <a class="indexterm" name="AUTOID-43827"></A
>
<b class="emphasis.bold">I/O time.</B
>  The amount of time the I/O subsystem spends servicing the I/O requests that the job issues. Under UNIX, I/O time is
difficult to measure; however, there are some tools for determining whether the I/O system is overloaded and some configuration
considerations that can help alleviate load problems. </P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-43832"></A
> <b class="emphasis.bold">Network time.</B
>  The amount of time that the I/O subsystem spends
servicing network requests that the job issues. This is really a subcategory of I/O time and depends critically on configuration and
usage issues. </P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-43837"></A
> <b class="emphasis.bold">Time spent running other programs.</B
>  As system load increases, the
CPU spends less time working on any given job, thus increasing the elapsed time required to run the job. This is an annoyance, but barring some
problem with I/O or virtual memory performance, there is little you can do about it.</P
></LI
><li class="listitem"><p class="para"> <a class="indexterm" name="AUTOID-43843"></A
><a class="indexterm" name="AUTOID-43845"></A
>
 <b class="emphasis.bold">Virtual memory performance.</B
>  This is by far the most complex aspect of
system performance. Ideally, all active jobs would remain in the system's physical memory at all times. But when physical memory is fully
occupied, the operating system starts moving parts of jobs to disk, thus freeing memory for the job it wants to run. This takes time. It also takes
time when these disk-bound jobs need to run again and therefore need to be moved back into memory. When running jobs with extremely large memory
requirements, system performance can degrade significantly. </P
></LI
></UL
><p class="para"> If you spend most of your time running standard utilities and
commercial applications, you can't do much about user-state or system-state time. To make a significant dent in these, you have to
rewrite the program. But you can do a lot to improve your memory and I/O performance, and you can do a lot to run your big applications
more efficiently. </P
><p class="para"><a class="indexterm" name="AUTOID-43851"></A
> <a class="indexterm" name="AUTOID-43853"></A
>
Keyboard response is an extremely important issue to users, although it really doesn't contribute to a program's execution time. If there
is a noticeable gap between the time when a user types a character and the time when the system echoes that character,
the user will think performance is bad, regardless of how much time it takes to run a job. In order to prevent terminal buffers from 
overflowing and losing characters, most UNIX systems give <span class="link">terminal drivers (<a class="linkend" href="ch42_01.htm" webstripperlinkwas="ch42_01.htm#UPT-ART-1142" title="Making Sense Out of the Terminal Mess ">42.1</A
>)</SPAN
>
very high priority. As a side effect, the high priority of terminals 
means that keyboard response should be bad only under exceptionally high loads. If you
are accessing a remote system across a network, however, network delays can cause poor keyboard response. Network performance is an
extremely complex issue. </P
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">ML</SPAN
> <span class="bibliomisc">from O'Reilly &amp; Associates' <cite class="citetitle">System Performance Tuning</CITE
>, Chapter 1</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch39_04.htm" webstripperlinkwas="ch39_04.htm" title="39.4 Average Command Runtimes with runtime "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 39.4 Average Command Runtimes with runtime " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch39_06.htm" webstripperlinkwas="ch39_06.htm" title="39.6 lastcomm: What Commands Are Running and How Long Do They Take?"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 39.6 lastcomm: What Commands Are Running and How Long Do They Take?" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">39.4 Average Command Runtimes with runtime </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">39.6 lastcomm: What Commands Are Running and How Long Do They Take?</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
