<html><head><title>[Chapter 41] 41.11 How termcap and terminfo Describe Terminals </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:52:08Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch41_01.htm" webstripperlinkwas="ch41_01.htm" title="41. Terminal and Serial Line Settings"><link rel="prev" href="ch41_10.htm" webstripperlinkwas="ch41_10.htm" title="41.10 Using terminfo Capabilities in Shell Programs "><link rel="next" href="ch41_12.htm" webstripperlinkwas="ch41_12.htm" title="41.12 Finding Out What Characters Your Terminal's Special Keys Send"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch41_10.htm" webstripperlinkwas="ch41_10.htm" title="41.10 Using terminfo Capabilities in Shell Programs "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 41.10 Using terminfo Capabilities in Shell Programs " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 41<br>Terminal and Serial Line Settings</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch41_12.htm" webstripperlinkwas="ch41_12.htm" title="41.12 Finding Out What Characters Your Terminal's Special Keys Send"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 41.12 Finding Out What Characters Your Terminal's Special Keys Send" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-7967">41.11 How termcap and terminfo Describe Terminals </A
></H2
><p class="para"><a class="indexterm" name="AUTOID-46050"></A
><a class="indexterm" name="AUTOID-46053"></A
><a class="indexterm" name="AUTOID-46056"></A
>The
<span class="link"><em class="emphasis">termcap</EM
> and <em class="emphasis">terminfo</EM
> databases (<a class="linkend" href="ch05_02.htm" webstripperlinkwas="ch05_02.htm" title="The Idea of a Terminal Database ">5.2</A
>)</SPAN
>
describe the
capabilities of terminals using a rather obscure and compact
language.
At this point, the ASCII terminal market has slowed down
and standardized, so it is not as essential as it used to be to 
write new terminal entries.
However, there are still 
times when it's useful to know how to read an entry.
For example, you may want to use particular capabilities 
<span class="link">in a shell program (<a class="linkend" href="ch41_10.htm" webstripperlinkwas="ch41_10.htm" title="Using terminfo Capabilities in Shell Programs ">41.10</A
>)</SPAN
>
or
<span class="link">in a function key map (<a class="linkend" href="ch41_12.htm" webstripperlinkwas="ch41_12.htm" title="Finding Out What Characters Your Terminal's Special Keys Send">41.12</A
>)</SPAN
>.</P
><p class="para">We won't give you a detailed list of all of the possible
capabilities&nbsp;- that you can get from the <em class="emphasis">termcap</EM
> or
<em class="emphasis">terminfo</EM
> manual page on your system.
However, we do want to
give you an introduction to the language of <em class="emphasis">termcap</EM
> and
<em class="emphasis">terminfo</EM
>.</P
><p class="para">Here's a simplified
entry for the Wyse Technology Wyse-50 terminal.
The capabilities described here are only a subset sufficient 
to introduce the basic syntax of the language: </P
><p class="para"><blockquote class="screen"><pre class="screen"># incomplete termcap entry for the Wyse WY-50
 n9|wy50|WY50| Wyse Technology WY-50:\
    :bs:am:co#80:li#24:\
    :up=^K:cl=^Z:ho=^^:nd=^L:cm=\E=%+ %+ :</PRE
></BLOCKQUOTE
></P
><p class="para">And here is the corresponding <em class="emphasis">terminfo</EM
> source file:</P
><p class="para"><blockquote class="screen"><pre class="screen"># incomplete terminfo entry for Wyse WY-50
wy50|WY50|Wyse Technology WY-50,
    am, cols#80, lines#24, cuu1=^K, clear=^Z, 
    home=^^, cuf1=^L, cup=\E=%p1%'\s'%+%c%p2%'\s'%+%c,</PRE
></BLOCKQUOTE
></P
><p class="para">The backslash (<code class="literal">\</CODE
>) character is used to suppress the newline in 
<em class="emphasis">termcap</EM
>.
<em class="emphasis">termcap</EM
> entries must be defined on a
single logical line, with colons (<code class="literal">:</CODE
>) separating each field.
<em class="emphasis">terminfo</EM
> does not require the entry to be on a single line, so
backslashes are not necessary.
In <em class="emphasis">terminfo</EM
>, commas are used as
the field separator.</P
><p class="para">The language certainly is not verbose!
However, if we work through it methodically, it might begin to make sense.</P
><p class="para"><a class="indexterm" name="AUTOID-46085"></A
><a class="indexterm" name="AUTOID-46088"></A
>There are three types of lines in a <em class="emphasis">termcap</EM
> or <em class="emphasis">terminfo</EM
> file: 
comment lines, lines that list alias names for the terminal, 
and lines that specify terminal capabilities. </P
><ul class="itemizedlist"><li class="listitem"><p class="para"><em class="emphasis">Comment lines:</EM
>

The first line in both the <em class="emphasis">termcap</EM
> and <em class="emphasis">terminfo</EM
> entries
shown above is a comment line.</P
><p class="para"><blockquote class="screen"><pre class="screen"># incomplete termcap entry for the Wyse WY-50
# incomplete terminfo entry for the Wyse WY-50</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-46102"></A
><a class="indexterm" name="AUTOID-46105"></A
><a class="indexterm" name="AUTOID-46108"></A
>All comment lines begin with a hash mark (<code class="literal">#</CODE
>).
Embedded comments 
are not allowed: a line is either a comment or part of an entry.
In <em class="emphasis">termcap</EM
> and <em class="emphasis">terminfo</EM
>, the convention is that
comments precede the terminal they describe.&#13;</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-46116"></A
><a class="indexterm" name="AUTOID-46118"></A
><a class="indexterm" name="AUTOID-46121"></A
><em class="emphasis">Name lines:</EM
> 

The second line is a list of alias names for the terminal,
separated by the vertical bar character.</P
><p class="para"><blockquote class="screen"><pre class="screen">n9|wy50|WY50| Wyse Technology WY-50:\   <i class="lineannotation">...termcap</I
>

wy50|WY50|Wyse Technology WY-50,   <i class="lineannotation">...terminfo</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Multiple aliases are provided as a convenience to the user.
The environment variable
<span class="link">TERM (<a class="linkend" href="ch05_10.htm" webstripperlinkwas="ch05_10.htm" title="Finding What Terminal Names You Can Use ">5.10</A
>)</SPAN
>
can be set to any one of the
aliases.
By convention, the last alias is the full name of the terminal.</P
><p class="para">The alias list is the first field of the terminal description, with 
a colon (<em class="emphasis">termcap</EM
>) or comma (<em class="emphasis">terminfo</EM
>) 
marking the end of the alias list and the start of the capabilities list.
You could begin listing the capabilities immediately after this field, 
but it makes reading much easier if all the aliases are on one
line and the capabilities start on the next.</P
><p class="para">When a <em class="emphasis">terminfo</EM
> source file is compiled with <em class="emphasis">tic</EM
>, the
compiled data is placed in a file corresponding to the first alias (in
this case, <em class="emphasis">/usr/lib/terminfo/w/wy50</EM
>), and a link is
created for all other aliases but the last.
In this example,
TERM could be set to either <em class="emphasis">wy50</EM
> or <em class="emphasis">WY50</EM
> to 
access the compiled terminal description.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-46142"></A
><em class="emphasis">Capability lines:</EM
>

The remaining lines are the list of the actual terminal capabilities.
These lines are indented (using a tab or blank spaces) to distinguish 
them from the line of terminal aliases.
Note that the
indentation of continued capability lines is not just cosmetic
but is a required part of the syntax.</P
><p class="para">In <em class="emphasis">termcap</EM
>, capabilities are identified by a two-character name; in
<em class="emphasis">terminfo</EM
>, the capability names may have anywhere between two and
five characters.
The capability name is the first thing in each
capability field and describes a feature of the terminal.</P
></LI
></UL
><p class="para">There are three types of capability:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-46152"></A
><b class="emphasis.bold">Boolean capabilities</B
> consist of a capability name with no arguments.
For example, <em class="emphasis">am</EM
> (both <em class="emphasis">termcap</EM
> and <em class="emphasis">terminfo</EM
>)
specifies that the terminal performs automatic 
right margins, wrapping the cursor to the start of the next line when
the cursor reaches the last position on the current line.
If <em class="emphasis">am</EM
> is not specified, programs will assume that your terminal
does not have this feature.</P
><p class="para"><a class="indexterm" name="AUTOID-46161"></A
><a class="indexterm" name="AUTOID-46163"></A
><a class="indexterm" name="AUTOID-46165"></A
><a class="indexterm" name="AUTOID-46167"></A
><em class="emphasis">am</EM
> is an example of a Boolean
feature that is advantageous, but Booleans are also used to specify
negative features of your terminal&nbsp;- for example, if your terminal
does not perform newlines in the expected way, you might have what is
called the &quot;newline glitch,&quot; and the entry may need to specify <em class="emphasis">xn</EM
> 
(<em class="emphasis">termcap</EM
>) or <code class="userinput"><b>xenl</B
></CODE
> (<em class="emphasis">terminfo</EM
>) to tell programs 
to adjust for the terminal's peculiarity.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-46176"></A
><b class="emphasis.bold">Numeric capabilities</B
> consist of a capability name, a
sharp sign, and a number.
For example, <code class="literal">co#80</CODE
> (<em class="emphasis">termcap</EM
>) and <code class="literal">cols#80</CODE
> (<em class="emphasis">terminfo</EM
>)
says that the terminal has 80 columns.
All numeric values are non-negative.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-46185"></A
><a class="indexterm" name="AUTOID-46187"></A
><a class="indexterm" name="AUTOID-46190"></A
><b class="emphasis.bold">String capabilities</B
> tell how to issue a command to the terminal.
The format of a string capability is the capability name, followed by an
equal sign, followed by the command sequence.
For example,
<code class="literal">up=^K</CODE
> (<em class="emphasis">termcap</EM
>) or <code class="literal">cuu1=^K</CODE
> (<em class="emphasis">terminfo</EM
>)
specifies that the sequence CTRL-k will move the cursor up one line. </P
></LI
></UL
><p class="para">Now the Wyse-50 example should make more sense.
First <em class="emphasis">termcap</EM
>:</P
><h4 class="figure"><a class="title" name="UPT-ART-7967-FIG-0">Figure 41.1: A Simplified termcap Entry</A
></H4
><img class="graphic" src="figs/7967a.gif" webstripperlinkwas="figs/7967a.gif" alt="Figure 41.1"><p class="para">Now <em class="emphasis">terminfo</EM
>:</P
><h4 class="figure"><a class="title" name="UPT-ART-7967-FIG-1">Figure 41.2: A Simplified terminfo Entry</A
></H4
><img class="graphic" src="figs/7967b.gif" webstripperlinkwas="figs/7967b.gif" alt="Figure 41.2"><p class="para">The examples demonstrate all three kinds of capabilities: Boolean,
numeric, and string.</P
><p class="para"><a class="indexterm" name="AUTOID-46210"></A
>
The first two capabilities in the <em class="emphasis">termcap</EM
> entry, and
the first capability in the <em class="emphasis">terminfo</EM
> entry, are Boolean.</P
><dl class="variablelist"><dt class="term"><em class="emphasis">bs</EM
></DT
><dd class="listitem"><p class="para">is the <em class="emphasis">termcap</EM
> backspace capability, which means that the terminal will
backspace when sent the CTRL-h (<code class="literal">^H</CODE
>) character.
There is 
no <em class="emphasis">terminfo</EM
> capability directly equivalent to <em class="emphasis">bs</EM
>, so it
is considered obsolete by <em class="emphasis">terminfo</EM
> and by BSD 4.3 <em class="emphasis">termcap</EM
>.
In place of the <em class="emphasis">bs</EM
> capability, <em class="emphasis">terminfo</EM
> would explicitly
define CTRL-h as the string to send the cursor left 
<code class="userinput"><b>cul1=</B
></CODE
><code class="literal">^H</CODE
>).</P
></DD
><dt class="term"><em class="emphasis">am</EM
></DT
><dd class="listitem"><p class="para">&#13;<em class="emphasis">am</EM
>

<a class="indexterm" name="AUTOID-46236"></A
><a class="indexterm" name="AUTOID-46238"></A
>
is the automargin capability, also known as wraparound.  It means that
when a line reaches the right edge of the screen, the terminal
automatically continues on the next line.</P
></DD
></DL
><p class="para">The next two capabilities are numeric.</P
><dl class="variablelist"><dt class="term"><em class="emphasis">co#80</EM
></DT
><dt class="term"><em class="emphasis">cols#80</EM
></DT
><dd class="listitem"><p class="para">says that the terminal has 80 columns.</P
></DD
><dt class="term"><em class="emphasis">li#24</EM
></DT
><dt class="term"><em class="emphasis">lines#24</EM
></DT
><dd class="listitem"><p class="para">&#13;says that the terminal has 24 lines.&#13;</P
></DD
></DL
><p class="para">You will find that 80 characters and 24 lines
is the most common screen size but that there are exceptions.
Eighty characters was originally chosen because it is the width of 
a punch card, and 24 lines was chosen to take advantage of cheap television
screen technology.</P
><p class="para">The remainder of the fields in the Wyse-50 entry contain string capabilities.
The first four of these are fairly simple:</P
><dl class="variablelist"><dt class="term"><em class="emphasis">up=^K</EM
></DT
><dt class="term"><em class="emphasis">cuu1=^K</EM
></DT
><dd class="listitem"><p class="para">is the up capability; it says that to move the cursor up one line,
send the <code class="literal">^K</CODE
> character to the terminal.</P
></DD
><dt class="term"><em class="emphasis">cl=^Z</EM
></DT
><dt class="term"><em class="emphasis">clear=^Z</EM
></DT
><dd class="listitem"><p class="para">is the clear capability; it says that to clear the screen,
send the <code class="literal">^Z</CODE
> character to the terminal.</P
></DD
><dt class="term"><em class="emphasis">ho=^^</EM
></DT
><dt class="term"><em class="emphasis">home=^^</EM
></DT
><dd class="listitem"><p class="para">is the home capability;  it says that to move the cursor Home (upper-left corner), send the <code class="literal">^^</CODE
> character (CTRL-<code class="literal">^</CODE
>) to the terminal.</P
></DD
><dt class="term"><em class="emphasis">nd=^L</EM
></DT
><dt class="term"><em class="emphasis">cuf1=^L</EM
></DT
><dd class="listitem"><p class="para">&#13;is the non-destructive space capability; it says that to move the cursor one
space to the right without changing the text, 
send the <code class="literal">^L</CODE
> character to the terminal.</P
></DD
></DL
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-7967-SECT-1.0.1">41.11.1 Special Character Codes </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-46295"></A
><a class="indexterm" name="AUTOID-46297"></A
>No doubt the symbols <code class="literal">^K</CODE
>, <code class="literal">^Z</CODE
>, <code class="literal">^^</CODE
>, and <code class="literal">^L</CODE
> 
shown above are familiar to you.
A caret (<code class="literal">^</CODE
>) followed by a letter is a convention for representing 
an unprintable control character generated by holding down the CONTROL
(CTRL) key on the keyboard while typing another.
Note that control characters
are entered into a terminal description as two characters by typing
the caret character (<code class="literal">^</CODE
>) followed by a letter, 
rather than by inserting the actual control character.</P
><p class="para"><a class="indexterm" name="AUTOID-46307"></A
>Both <em class="emphasis">termcap</EM
> and <em class="emphasis">terminfo</EM
> use other codes to write other 
unprintable characters, as well as characters that have special meaning
in <em class="emphasis">termcap</EM
> or <em class="emphasis">terminfo</EM
> syntax.
The other
<a class="indexterm" name="AUTOID-46314"></A
>
codes, most of which should be familiar to C programmers, 
are listed in
<a class="xref" href="#UPT-ART-7967-TAB-0" title="Termcap and Terminfo Special Character Codes">Table 41.1</A
>.&#13;</P
><table class="table"><caption class="table"><a class="title" name="UPT-ART-7967-TAB-0">Table 41.1: Termcap and Terminfo Special Character Codes</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Code</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Comment</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\E</TD
><td class="entry" rowspan="1" colspan="1">escape</TD
><td class="entry" rowspan="1" colspan="1">termcap and terminfo</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\e</TD
><td class="entry" rowspan="1" colspan="1">escape</TD
><td class="entry" rowspan="1" colspan="1">terminfo only</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">^<code class="userinput"><b>x</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">control-<code class="userinput"><b>x</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">where <code class="userinput"><b>x</B
></CODE
> is any letter</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\n</TD
><td class="entry" rowspan="1" colspan="1">newline</TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\r</TD
><td class="entry" rowspan="1" colspan="1">return</TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\t</TD
><td class="entry" rowspan="1" colspan="1">tab</TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\b</TD
><td class="entry" rowspan="1" colspan="1">backspace</TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\f</TD
><td class="entry" rowspan="1" colspan="1">formfeed</TD
><td class="entry" rowspan="1" colspan="1"></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\s</TD
><td class="entry" rowspan="1" colspan="1">space</TD
><td class="entry" rowspan="1" colspan="1">terminfo only</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\l</TD
><td class="entry" rowspan="1" colspan="1">linefeed</TD
><td class="entry" rowspan="1" colspan="1">terminfo only</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\<code class="userinput"><b>xxx</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">octal value of <code class="userinput"><b>xxx</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">must be three characters</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\041</TD
><td class="entry" rowspan="1" colspan="1">exclamation point <code class="literal">!</CODE
></TD
><td class="entry" rowspan="1" colspan="1">C shell history uses <code class="literal">!</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\072</TD
><td class="entry" rowspan="1" colspan="1">the character <code class="literal">:</CODE
></TD
><td class="entry" rowspan="1" colspan="1">termcap uses ordinary : as separator</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\200</TD
><td class="entry" rowspan="1" colspan="1">null</TD
><td class="entry" rowspan="1" colspan="1">\\000 for null does not work</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\0</TD
><td class="entry" rowspan="1" colspan="1">null</TD
><td class="entry" rowspan="1" colspan="1">terminfo only</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\^</TD
><td class="entry" rowspan="1" colspan="1">caret</TD
><td class="entry" rowspan="1" colspan="1">terminfo only</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\\</TD
><td class="entry" rowspan="1" colspan="1">backslash</TD
><td class="entry" rowspan="1" colspan="1">terminfo only</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\,</TD
><td class="entry" rowspan="1" colspan="1">comma</TD
><td class="entry" rowspan="1" colspan="1">terminfo only</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">\:</TD
><td class="entry" rowspan="1" colspan="1">colon</TD
><td class="entry" rowspan="1" colspan="1">terminfo only</TD
></TR
></TBODY
></TABLE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-7967-SECT-1.0.2">41.11.2 Encoding Arguments </A
></H3
><p class="para">The last capability in the Wyse-50 example is the most complicated.
<em class="emphasis">cm=</EM
> (<em class="emphasis">termcap</EM
>) and <em class="emphasis">cup=</EM
> (<em class="emphasis">terminfo</EM
>) 
specify the cursor motion capability, which describes how to move 
the cursor directly to a specific location.
Since the desired location is specified by the
program at run-time, the capability must provide
some mechanism for encoding arguments.
The program uses this
description to figure out what string it needs to send to move the
cursor to the desired location.</P
><p class="para"><a class="indexterm" name="AUTOID-46418"></A
>Because we aren't telling you how to write <em class="emphasis">termcap</EM
> or 
<em class="emphasis">terminfo</EM
> entries, but just to read them, all you need to know
is that the percent sign (<code class="literal">%</CODE
>) is used for
encoding, and when it appears in a terminal entry, the capability is
using run-time parameters.</P
><p class="para">If you need to write an entry, see O'Reilly &amp; Associates' <em class="emphasis">termcap
&amp; terminfo</EM
>.</P
></DIV
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">JS</SPAN
>, <span class="authorinitials">TOR</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch41_10.htm" webstripperlinkwas="ch41_10.htm" title="41.10 Using terminfo Capabilities in Shell Programs "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 41.10 Using terminfo Capabilities in Shell Programs " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch41_12.htm" webstripperlinkwas="ch41_12.htm" title="41.12 Finding Out What Characters Your Terminal's Special Keys Send"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 41.12 Finding Out What Characters Your Terminal's Special Keys Send" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">41.10 Using terminfo Capabilities in Shell Programs </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">41.12 Finding Out What Characters Your Terminal's Special Keys Send</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
