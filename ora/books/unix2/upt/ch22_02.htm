<html><head><title>[Chapter 22] 22.2 Tutorial on File and Directory Permissions </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:40:20Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch22_01.htm" webstripperlinkwas="ch22_01.htm" title="22. File Security, Ownership, and Sharing"><link rel="prev" href="ch22_01.htm" webstripperlinkwas="ch22_01.htm" title="22.1 Introduction to File Ownership and Security "><link rel="next" href="ch22_03.htm" webstripperlinkwas="ch22_03.htm" title="22.3 Who Will Own a New File? "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch22_01.htm" webstripperlinkwas="ch22_01.htm" title="22.1 Introduction to File Ownership and Security "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 22.1 Introduction to File Ownership and Security " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 22<br>File Security, Ownership, and Sharing</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch22_03.htm" webstripperlinkwas="ch22_03.htm" title="22.3 Who Will Own a New File? "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 22.3 Who Will Own a New File? " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-0417">22.2 Tutorial on File and Directory Permissions </A
></H2
><p class="para">[Think you know all about permissions?
Even if you do, skim through this article.
Bruce has some good tips. -JP]</P
><p class="para"><a class="indexterm" name="AUTOID-23757"></A
><a class="indexterm" name="AUTOID-23760"></A
>There are three basic attributes for plain file permissions: read,
write, and execute.  Read and write permission obviously let you read
the data from a file or write new data to the file.  When you have
execute permission, you can use the file as a program or shell script.
The characters used to describe these permissions are <code class="literal">r</CODE
>,
<code class="literal">w</CODE
>, and <code class="literal">x</CODE
>, for e<em class="emphasis">x</EM
>ecute.</P
><p class="para">Directories use these same permissions, but they have a different meaning.<a class="indexterm" name="AUTOID-23769"></A
><a class="indexterm" name="AUTOID-23771"></A
><a class="indexterm" name="AUTOID-23773"></A
>
If a directory has read permission, you can see what files are in the directory.
Write permission means you can add, remove, or rename files in the directory.
Execute allows you to use 
the directory name when accessing files inside that directory.
(Article
<a class="xref" href="ch18_02.htm" webstripperlinkwas="ch18_02.htm" title="What's Really in a Directory ">18.2</A
>
has more information about what's in a directory.)
Let's examine this more closely.</P
><p class="para">Suppose you have read access to a directory,
but you do not have execute access to the files
in the directory. You can still read the
directory, or
<span class="link"><em class="emphasis">inode</EM
> (<a class="linkend" href="ch01_22.htm" webstripperlinkwas="ch01_22.htm" title="How UNIX Keeps Track of Files: Inodes ">1.22</A
>)</SPAN
>
information for that file, as returned by the 
<em class="emphasis">stat</EM
>(2)
system call. That is, you can see the file's name, permissions, size, access times, owner and group,
and number of links.
You cannot read the contents of the file.</P
><p class="para">Write permission in a directory allows you to change the contents of a directory.
Because the name of the file is stored in the directory, and not the file,
<em class="emphasis">write permission in a directory allows creation, renaming, or
deletion of files</EM
>.
To be specific, if someone has write permission to your home directory, they
can rename or delete your <em class="emphasis">.login</EM
>
file and put a new file in its place.
The permissions of your <em class="emphasis">.login</EM
>
file do not matter.
Someone can rename a file even if they can't read the contents of a file.
(See article
<a class="xref" href="ch22_11.htm" webstripperlinkwas="ch22_11.htm" title="A Loophole: Modifying Files Without Write Access">22.11</A
>.)</P
><p class="para">Execute permission on a directory is sometimes called search
permission.  If you found a directory that gave you execute
permission, but not read permission, you could use any file in that
directory. However, you <em class="emphasis">must</EM
> know the name. You cannot look
inside the directory to find out the names of the files.  Think of
this type of directory as a black box.  You can throw filenames at
this directory, and sometimes you find a file, sometimes you don't.
(See article
<a class="xref" href="ch22_12.htm" webstripperlinkwas="ch22_12.htm" title="A Directory that People Can Access but Can't List ">22.12</A
>.)</P
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-417-SECT-1.1">22.2.1 User, Group, and World </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-23791"></A
><a class="indexterm" name="UPT-ART-417-IX-DIRECTORIES-OWNERSHIP"></A
><a class="indexterm" name="UPT-ART-417-IX-OWNERSHIP-FILE"></A
><a class="indexterm" name="AUTOID-23800"></A
>All files have an owner and group associated with them. 
There are three sets of read/write/execute permissions: 
one set for the user or owner of the file,
one set for the group 
<span class="link">group (<a class="linkend" href="ch22_13.htm" webstripperlinkwas="ch22_13.htm" title="Groups and Group Ownership ">22.13</A
>)</SPAN
>
of the file, and one set for everyone else.
These permissions are determined by nine bits in the
inode
information, and are represented by the characters 
<code class="literal">rwxrwxrwx</CODE
> in an <em class="emphasis">ls -l</EM
> listing:
[1]</P
><blockquote class="footnote"><p class="para">[1] On some UNIX systems, <em class="emphasis">ls -l</EM
> produces
an eight-column listing without the group name (here, <code class="literal">books</CODE
>).
Use <em class="emphasis">ls -lg</EM
> to get the listing format shown here.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>ls -l</B
></CODE
>
drwxr-xr-x  3 jerry   books      512 Feb 14 11:31 manpages
-rw-r--r--  1 jerry   books    17233 Dec 10  1990 misc.Z
-rwxr-xr-x  1 tim     books      195 Mar 29 18:55 myhead</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;The first character in the <em class="emphasis">ls -l</EM
> listing
<span class="link">specifies the type of file (<a class="linkend" href="ch17_13.htm" webstripperlinkwas="ch17_13.htm" title="Searching for Files by Type ">17.13</A
>)</SPAN
>.
The first three of the nine permissions characters that follow 
specify the user, the middle three the group, 
and the last three the world. If the permission is not true, a dash
is used to indicate lack of privilege. 
If you wanted to have a data file that you could read or write,
but don't want anyone else to access, the permissions would be 
<code class="literal">rw-------</CODE
>.</P
><p class="para">An easier way to specify these nine bits is with 
three octal digits instead of nine characters.
(Article
<a class="xref" href="ch01_23.htm" webstripperlinkwas="ch01_23.htm" title="File Access Permissions ">1.23</A
>
has diagrams of permission bits and explains how to write permissions as an
octal number.)
The order is the same, so the above permissions can be described
by the octal number 
600.
The first number specifies the owner's permission.
The second number specifies the
permission.
The last number specifies permission to everyone who is
not the owner or not in the group of the file [although permissions
don't apply to the
<span class="link">superuser (<a class="linkend" href="ch01_24.htm" webstripperlinkwas="ch01_24.htm" title="The Superuser (Root) ">1.24</A
>)</SPAN
>,
who can do anything to any file or directory. <em class="emphasis">-JP</EM
>&nbsp;].</P
><p class="para">This last point is subtle. When testing for permissions, the
system looks at the groups in order. If you are denied permission, 
UNIX does not examine the next group. Consider the case of a file that 
is owned by user
<em class="emphasis">jo</EM
>,
is in the group
<em class="emphasis">guests</EM
>,
and has the permissions
<code class="literal">-----xrwx</CODE
>,
or
017
in octal.
This has the result that user
<em class="emphasis">jo</EM
>
cannot use the file, anyone in group
<em class="emphasis">guests</EM
>
can execute the program, and
everyone else besides
<em class="emphasis">jo</EM
>
and 
<em class="emphasis">guests</EM
>
can read, write, and execute the program.
This is not a very common set of permissions.
But some people use a
<span class="link">similar mechanism (<a class="linkend" href="ch22_14.htm" webstripperlinkwas="ch22_14.htm" title="Add Users to a Group to Deny Permission ">22.14</A
>)</SPAN
>
to deny
one group of users from accessing or using a file.
In the above case, 
<em class="emphasis">jo</EM
>
cannot read or write
the file she owns.
She could use the
<span class="link"><em class="emphasis">chmod</EM
> (<a class="linkend" href="ch22_07.htm" webstripperlinkwas="ch22_07.htm" title="Using chmod to Change File Permission ">22.7</A
>)</SPAN
>
command to grant herself permission to read the file.
However, if the file was in a directory owned by someone else, and the directory
did not give <em class="emphasis">jo</EM
> read or search permission, she would not be able to find the file 
to change its permission.</P
><p class="para">The above example is an extreme case.
Most of the time permissions fall into four
cases:</P
><ol class="orderedlist"><li class="listitem"><p class="para">The information is personal. Many people have a directory or two in which they 
store information they do not wish to be public. 
Mail should probably be confidential, and all of your mailbox files should be
in a directory with permissions of 700, denying everyone but yourself and the 
superuser read access to your letters. 
(See article
<a class="xref" href="ch04_05.htm" webstripperlinkwas="ch04_05.htm" title="Private (Personal) Directories ">4.5</A
>.)</P
></LI
><li class="listitem"><p class="para">The information is not personal, yet no one should be able to modify
the information. Most of my directories are set up this way, with the permissions
of 755.</P
></LI
><li class="listitem"><p class="para">The files are managed by a team of people. This means group-write permission,
or directories with the mode 775.</P
></LI
><li class="listitem"><p class="para">In the previous case, for confidential projects, you may want to deny
access to people outside the group.
In this case, make directories with mode 770.</P
></LI
></OL
><p class="para">You could just create a directory with the proper permissions,
and put the files inside the directory, 
hoping the permissions of the directory will 
&quot;protect&quot;
the files in the directory.
This is not adequate. Suppose you had a directory with permissions
755 and a file with permissions 666 inside the directory.
Anyone could change the contents of this file because 
the world has search access on the directory and
write access to the file.</P
><p class="para">What is needed is a mechanism to prevent any new file from having world-write access.
This mechanism exists with the<a class="indexterm" name="AUTOID-23848"></A
><a class="indexterm" name="AUTOID-23850"></A
>
<span class="link"><em class="emphasis">umask</EM
> command (<a class="linkend" href="ch22_04.htm" webstripperlinkwas="ch22_04.htm" title="Setting an Exact umask ">22.4</A
>)</SPAN
>.
If you consider that a new directory would get permissions of 777, 
and that new files would get permissions of 666, the
<em class="emphasis">umask</EM
>
command specifies permissions to 
&quot;take away&quot;
from all new files.
To 
&quot;subtract&quot;
world-write permission from a file, 666 must have 002 
&quot;subtracted&quot;
from the default value to get 664.
To subtract group and world write, 666 must have 022 removed to leave
644 as the permissions of the file.
These two values of
<em class="emphasis">umask</EM
>
are so common that it is useful to have some
<span class="link">aliases (<a class="linkend" href="ch10_02.htm" webstripperlinkwas="ch10_02.htm" title="Aliases for Common Commands ">10.2</A
>)</SPAN
>
defined:</P
><p class="para"><blockquote class="screen"><pre class="screen">&#13;alias open umask 002
alias shut umask 022</PRE
></BLOCKQUOTE
></P
><p class="para">With these two values of 
<em class="emphasis">umask</EM
>,
new directories will have permissions of 775 or 755.
Most people have a
<em class="emphasis">umask</EM
>
value of one of these two values.</P
><p class="para">In a friendly work group, people tend to use the 
<em class="emphasis">umask</EM
>
of 002, which allows others in your group to make changes to your files.
Someone who uses the mask of 022 will cause grief to others working on a project.
Trying to compile a program is frustrating when someone else owns files that you 
must delete but can't. You can rename files if this is the case 
or ask the system administrator for help.</P
><p class="para">Members of a team who normally use a default umask of 022 should find a 
means to change the mask value when working on the project.
(Or else risk flames from your fellow workers!)
Besides the
<em class="emphasis">open</EM
>
alias above, some people have an alias that changes directories and
sets the mask to group-write permission:</P
><p class="para"><blockquote class="screen"><pre class="screen">alias proj &quot;cd /usr/projects/proj;umask 002&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">This isn't perfect, because people forget to use aliases.
You could have a special <em class="emphasis">cd</EM
> alias and a private shell file in each
project directory that sets the <em class="emphasis">umask</EM
> when you <em class="emphasis">cd</EM
> there.
Other people could have similar files in the project directory
with different names.
Article
<a class="xref" href="ch14_14.htm" webstripperlinkwas="ch14_14.htm" title="Automatic Setup When You Enter/Exit a Directory ">14.14</A
>
shows how.</P
><p class="para">Still another method is to run 
<span class="link"><em class="emphasis">find</EM
> (<a class="linkend" href="ch17_01.htm" webstripperlinkwas="ch17_01.htm#UPT-ART-7410" title="The find Command Is Great; The Problem Is Finding How to Use It">17.1</A
>)</SPAN
>
three times a day
and search for files owned by you in the project directory that
have the wrong permission:</P
><p class="para"><table class="screen.co" border="1"><tr><th valign="TOP"><pre class="calloutlist">
<a class="co" href="ch06_03.htm" webstripperlinkwas="ch06_03.htm" title="6.3 Predefined Environment Variables ">$USER</A
> 
<a class="co" href="ch09_21.htm" webstripperlinkwas="ch09_21.htm" title="9.21 Handle Too-Long Command Lines with xargs ">xargs</A
> <a class="co" href="ch22_07.htm" webstripperlinkwas="ch22_07.htm" title="22.7 Using chmod to Change File Permission ">chmod</A
> </PRE
></TH
><td valign="TOP"><pre class="screen">
% <code class="userinput"><b>find /usr/projects -user $USER ! -perm -020 -print | \</B
></CODE
>
<code class="userinput"><b>xargs chmod g+w</B
></CODE
></PRE
></TD
></TR
></TABLE
></P
><p class="para">You can use the command
<span class="link"><em class="emphasis">crontab -e</EM
> (<a class="linkend" href="ch40_15.htm" webstripperlinkwas="ch40_15.htm" title="crontab Script Makes crontab Editing Easier/Safer ">40.15</A
>, <a class="linkend" href="ch40_12.htm" webstripperlinkwas="ch40_12.htm" title="Periodic Program Execution: The cron Facility ">40.12</A
>)</SPAN
>
to define when to run this command.<a class="indexterm" name="AUTOID-23889"></A
><a class="indexterm" name="AUTOID-23890"></A
>
[If your system doesn't have personal <em class="emphasis">crontab</EM
>s, use a
<span class="link">self-restarting <em class="emphasis">at</EM
> job (<a class="linkend" href="ch40_08.htm" webstripperlinkwas="ch40_08.htm" title="Automatically Restarting at Jobs ">40.8</A
>)</SPAN
>.
<em class="emphasis">-JP</EM
>&nbsp;]</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-417-SECT-1.2">22.2.2 Which Group is Which? </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-23898"></A
>Since group-write permission is so important in a team project, 
you might be wondering how the group of a new file is determined?
The answer depends on several factors.
Before I cover these, you should note that Berkeley and AT&amp;T-based systems 
would use different mechanisms to determine the default group.</P
><p class="para">Originally UNIX required you to specify a new group
with the
<em class="emphasis">newgrp</EM
>
command.
If there was a password for this group in the
<em class="emphasis">/etc/group</EM
>
file, and you were not listed as one of the members of the group,
you had to type the password to change your group.</P
><p class="para">Berkeley-based versions of UNIX would use the current directory to determine
the group of the new file. That is, if the current directory has 
<em class="emphasis">cad</EM
>
as the group of the directory,
any file created in that directory would be in the same group.
To change the default group, just change to a different directory.</P
><p class="para">Both mechanisms had their good points and bad points.
The Berkeley-based mechanism
made it convenient to change groups automatically.
However, there is a fixed limit of groups one could belong to.
SunOS 4 has a limit of 16 groups. 
Earlier versions had a limit of eight groups.</P
><p class="para">SunOS and System V Release 4 support both mechanisms.
The entire disk can be mounted with either
the AT&amp;T or the Berkeley mechanism. If it is necessary to control this
on a directory-by-directory basis, a
<span class="link">special bit (<a class="linkend" href="ch22_05.htm" webstripperlinkwas="ch22_05.htm" title="Group Permissions in a Directory with the setgid Bit ">22.5</A
>)</SPAN
>
in the file permissions is used.
If a disk partition is mounted without the Berkeley group mechanism, 
then a directory with this special bit will make new files have the same group
as the directory.
Without the special bit, the group of all new files depends on the
current group of the user.</P
></DIV
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">BB</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch22_01.htm" webstripperlinkwas="ch22_01.htm" title="22.1 Introduction to File Ownership and Security "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 22.1 Introduction to File Ownership and Security " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch22_03.htm" webstripperlinkwas="ch22_03.htm" title="22.3 Who Will Own a New File? "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 22.3 Who Will Own a New File? " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">22.1 Introduction to File Ownership and Security </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">22.3 Who Will Own a New File? </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
