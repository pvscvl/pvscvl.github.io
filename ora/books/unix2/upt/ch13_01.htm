<html><head><title>[Chapter 13] Redirecting Input and Output</TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:36:37Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="part02.htm" webstripperlinkwas="part02.htm" title="II. Let the Computer Do the Dirty Work "><link rel="prev" href="ch12_09.htm" webstripperlinkwas="ch12_09.htm" title="12.9 Running Multiple Shell Sessions with screen "><link rel="next" href="ch13_02.htm" webstripperlinkwas="ch13_02.htm" title="13.2 One Argument with a cat Isn't Enough "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch12_09.htm" webstripperlinkwas="ch12_09.htm" title="12.9 Running Multiple Shell Sessions with screen "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 12.9 Running Multiple Shell Sessions with screen " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 13</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch13_02.htm" webstripperlinkwas="ch13_02.htm" title="13.2 One Argument with a cat Isn't Enough "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 13.2 One Argument with a cat Isn't Enough " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="UPT-CHP-13">13. Redirecting Input and Output</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#UPT-ART-1023" title="13.1 Using Standard Input and Output">Using Standard Input and Output</A
><br><a class="sect1" href="ch13_02.htm" webstripperlinkwas="ch13_02.htm" title="13.2 One Argument with a cat Isn't Enough ">One Argument with a cat Isn't Enough </A
><br><a class="sect1" href="ch13_03.htm" webstripperlinkwas="ch13_03.htm" title="13.3 Send (only) Standard Error Down a Pipe ">Send (only) Standard Error Down a Pipe </A
><br><a class="sect1" href="ch13_04.htm" webstripperlinkwas="ch13_04.htm" title="13.4 Problems Piping to a Pager ">Problems Piping to a Pager </A
><br><a class="sect1" href="ch13_05.htm" webstripperlinkwas="ch13_05.htm" title="13.5 Redirection in C Shell: Capture Errors, Too? ">Redirection in C Shell: Capture Errors, Too? </A
><br><a class="sect1" href="ch13_06.htm" webstripperlinkwas="ch13_06.htm" title="13.6 Safe I/O Redirection with noclobber ">Safe I/O Redirection with noclobber </A
><br><a class="sect1" href="ch13_07.htm" webstripperlinkwas="ch13_07.htm" title="13.7 The () Subshell Operators ">The () Subshell Operators </A
><br><a class="sect1" href="ch13_08.htm" webstripperlinkwas="ch13_08.htm" title="13.8 Using {list} to Group Bourne Shell Commands ">Using {list} to Group Bourne Shell Commands </A
><br><a class="sect1" href="ch13_09.htm" webstripperlinkwas="ch13_09.htm" title="13.9 Send Output Two or More Places with tee ">Send Output Two or More Places with tee </A
><br><a class="sect1" href="ch13_10.htm" webstripperlinkwas="ch13_10.htm" title="13.10 How to tee Several Commands Into One File ">How to tee Several Commands Into One File </A
><br><a class="sect1" href="ch13_11.htm" webstripperlinkwas="ch13_11.htm" title="13.11 tpipe-Redirecting stdout to More than One Place ">tpipe-Redirecting stdout to More than One Place </A
><br><a class="sect1" href="ch13_12.htm" webstripperlinkwas="ch13_12.htm" title="13.12 Writing to Multiple Terminals for Demonstrations ">Writing to Multiple Terminals for Demonstrations </A
><br><a class="sect1" href="ch13_13.htm" webstripperlinkwas="ch13_13.htm" title='13.13 The "Filename&quot; - '>The &quot;Filename&quot; - </A
><br><a class="sect1" href="ch13_14.htm" webstripperlinkwas="ch13_14.htm" title="13.14 What Can You Do with an Empty File? ">What Can You Do with an Empty File? </A
><br><a class="sect1" href="ch13_15.htm" webstripperlinkwas="ch13_15.htm" title="13.15 What to Do with a Full Bit Bucket :-) ">What to Do with a Full Bit Bucket <code class="literal">:-)</CODE
> </A
><br><a class="sect1" href="ch13_16.htm" webstripperlinkwas="ch13_16.htm" title="13.16 Store and Show Errors with logerrs ">Store and Show Errors with logerrs </A
></P
><p></P
></DIV
><div class="sect1"><h2 class="sect1"><a class="title" name="UPT-ART-1023">13.1 Using Standard Input and Output</A
></H2
><p class="para">There is absolutely
no difference between reading data
from a file and reading data from a terminal.
[1]
Likewise, if a
program's output consists entirely of alphanumeric characters and
punctuation, there is no difference between writing to a file, writing
to a terminal, and writing to the input of another program (as in a
pipe).</P
><blockquote class="footnote"><p class="para">[1] If a program's
input consists entirely of alphanumeric characters and punctuation (i.e., 
ASCII data or international (non-English) characters).</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-13926"></A
><a class="indexterm" name="AUTOID-13928"></A
>The <em class="emphasis">standard I/O</EM
> facility provides some simple defaults for
managing Input/Output. There are three default I/O streams: standard input,
standard output, and standard error. By convention, standard output
(abbreviated <em class="emphasis">stdout</EM
>)
consists of all &quot;normal&quot; output from your program, while standard error
(<em class="emphasis">stderr</EM
>) consists of error messages. It is often a convenience to be
able to handle error messages and standard output separately.
If you don't do anything special, programs will read standard input
from your keyboard, and they will send standard output and standard
error to your terminal's display.</P
><p class="para"><a class="indexterm" name="UPT-ART-1023-IX-STDIN-STANDARD-INPUT"></A
><a class="indexterm" name="UPT-ART-1023-IX-INPUT-STDIN"></A
>Standard input (<em class="emphasis">stdin</EM
>) normally comes from your keyboard.
Many programs ignore <em class="emphasis">stdin</EM
>; you name files directly
on their command line&nbsp;- for instance, the command <em class="emphasis">cat&nbsp;file1&nbsp;file2</EM
>
never reads its standard input; it reads the files directly.
But, without filenames on the command line, UNIX commands that need input
will usually read <em class="emphasis">stdin</EM
>.
Standard input normally comes from your keyboard, but the shell can
redirect <em class="emphasis">stdin</EM
> from a file.
This is handy for UNIX commands that can't open files directly&nbsp;- for instance,
<span class="link"><em class="emphasis">mail</EM
> (<a class="linkend" href="ch01_33.htm" webstripperlinkwas="ch01_33.htm" title="UNIX Networking and Communications ">1.33</A
>)</SPAN
>.
To mail a file to <em class="emphasis">joan</EM
>, use <code class="literal">&lt;&nbsp;</CODE
><code class="replaceable"><i>filename</I
></CODE
>-to tell the
shell to attach the file, instead of your keyboard, to <em class="emphasis">mail</EM
>'s standard
input:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>mail joan &lt; myfile</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-13955"></A
><a class="indexterm" name="AUTOID-13958"></A
>The real virtue of standard I/O is that it allows you to
<em class="emphasis">redirect</EM
> input or output away from your terminal to a file.
As we said, UNIX is
<span class="link">file-based (<a class="linkend" href="ch01_29.htm" webstripperlinkwas="ch01_29.htm" title="When Is a File Not a File? ">1.29</A
>)</SPAN
>.
Because terminals and other I/O
devices are treated as files, a program doesn't care or even know
[2]
if it is sending its output to a terminal or to a file. For example, if
you want to run the command <em class="emphasis">cat&nbsp;file1&nbsp;file2</EM
>, but you want to
place the output in <em class="emphasis">file3</EM
> rather than sending it to your
terminal, give the command:</P
><blockquote class="footnote"><p class="para">[2] A program can find out.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>cat file1 file2 &gt; file3</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">This is called <em class="emphasis">redirecting</EM
> standard output to <em class="emphasis">file3</EM
>. If
you give this command and look at <em class="emphasis">file3</EM
> afterward,
you will find the contents of <em class="emphasis">file1</EM
>, followed by
<em class="emphasis">file2</EM
>-exactly what you would have seen on your screen if you
omitted the <code class="literal">&gt;&nbsp;file3</CODE
> modifier. </P
><p class="para"><a class="indexterm" name="AUTOID-13978"></A
>One of the best-known forms of redirection in UNIX is the <em class="emphasis">pipe</EM
>.
The shell's vertical bar (<code class="literal">|</CODE
>) operator makes a pipe.
For example, to send both <em class="emphasis">file1</EM
> and <em class="emphasis">file2</EM
> together in a mail
message for <em class="emphasis">joan</EM
>, type:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>cat file1 file2 | mail joan</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The pipe says &quot;connect the standard output of the process at the left
(<code class="literal">cat</CODE
>) to the standard input of the process at the right
(<code class="literal">mail</CODE
>).&quot;</P
><p class="para">Article
<a class="xref" href="ch45_20.htm" webstripperlinkwas="ch45_20.htm" title="Overview: Open Files and File Descriptors ">45.20</A
>
has diagrams and more information about standard I/O and redirection.
<a class="xref" href="#UPT-ART-1023-TAB-0" title="Common Standard I/O Redirections">Table 13.1</A
>
shows the most
common ways of redirecting standard I/O, for both the C shell and the
Bourne shell.</P
><table class="table"><caption class="table"><a class="title" name="UPT-ART-1023-TAB-0">Table 13.1: Common Standard I/O Redirections</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Function</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">csh</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">sh</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Send <em class="emphasis">stdout</EM
> to <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1">prog &gt; <code class="replaceable"><i>file</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">prog &gt; <code class="replaceable"><i>file</I
></CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Send <em class="emphasis">stderr</EM
> to <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">prog 2&gt; <code class="replaceable"><i>file</I
></CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Send <em class="emphasis">stdout</EM
> and <em class="emphasis">stderr</EM
> to <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1">prog &gt;&amp; <code class="replaceable"><i>file</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">prog &gt; <code class="replaceable"><i>file</I
></CODE
> 2&gt;&amp;1</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Take <em class="emphasis">stdin</EM
> from <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1">prog &lt; <code class="replaceable"><i>file</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">prog &lt; <code class="replaceable"><i>file</I
></CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Send <em class="emphasis">stdout</EM
> to end of <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1">prog &gt;&gt; <code class="replaceable"><i>file</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">prog &gt;&gt; <code class="replaceable"><i>file</I
></CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Send <em class="emphasis">stderr</EM
> to end of <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1">prog 2&gt;&gt; <code class="replaceable"><i>file</I
></CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Send <em class="emphasis">stdout</EM
> and <em class="emphasis">stderr</EM
> to end of <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1">prog &gt;&gt;&amp; <code class="replaceable"><i>file</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">prog &gt;&gt; <code class="replaceable"><i>file</I
></CODE
> 2&gt;&amp;1</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Read <em class="emphasis">stdin</EM
> from keyboard until <em class="emphasis">c</EM
> (see
article <a class="xref" href="ch08_18.htm" webstripperlinkwas="ch08_18.htm" title="Here Documents ">8.18</A
>)</TD
><td class="entry" rowspan="1" colspan="1">prog &lt;&lt;<code class="replaceable"><i>c</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1">prog &lt;&lt;<code class="replaceable"><i>c</I
></CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Pipe <em class="emphasis">stdout</EM
> to <em class="emphasis">prog2</EM
></TD
><td class="entry" rowspan="1" colspan="1">prog | prog2</TD
><td class="entry" rowspan="1" colspan="1">prog | prog2</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">Pipe <em class="emphasis">stdout</EM
> and <em class="emphasis">stderr</EM
> to <em class="emphasis">prog2</EM
></TD
><td class="entry" rowspan="1" colspan="1">prog |&amp; prog2</TD
><td class="entry" rowspan="1" colspan="1">prog 2&gt;&amp;1 | prog2</TD
></TR
></TBODY
></TABLE
><p class="para">Be aware that:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14086"></A
>While standard I/O is a basic feature of UNIX, the syntax used to
redirect standard I/O depends on the shell you are using. Bourne
shell syntax and C shell syntax differ, particularly when you get into
the less commonly used features. The Korn shell and <em class="emphasis">bash</EM
> are
the same as the Bourne shell, but with a few twists of their own.&#13;</P
></LI
><li class="listitem"><p class="para">You can redirect standard input and standard output in the same command line.
For example, to read from the file <em class="emphasis">input</EM
> and write to the file
<em class="emphasis">output</EM
>, give the command:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>prog &lt; input &gt; output</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The Bourne shell will let you go further and write <em class="emphasis">stderr</EM
> to a third file:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>prog &lt; input &gt; output 2&gt; errors</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-14105"></A
>The C shell doesn't give you an easy way to redirect
standard output without redirecting standard error. A simple trick
will help you do this. To put standard output and standard error in
different files, give a command like:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>( prog &gt; output ) &gt;&amp; errors</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">We'll discuss commands like this in articles
<a class="xref" href="ch13_03.htm" webstripperlinkwas="ch13_03.htm" title="Send (only) Standard Error Down a Pipe ">13.3</A
>
and
<a class="xref" href="ch13_05.htm" webstripperlinkwas="ch13_05.htm" title="Redirection in C Shell: Capture Errors, Too? ">13.5</A
>.</P
></LI
><li class="listitem"><p class="para">Many implementations of both shells don't care what order the
redirections appear in, or even where they appear on the command line.
For example, SunOS lets you type <code class="literal">&lt;</CODE
>&nbsp;<code class="literal">input</CODE
>&nbsp;<code class="literal">&gt;</CODE
>&nbsp;<code class="literal">output</CODE
>&nbsp;<code class="literal">prog</CODE
>.
However, clarity is always a virtue that computer users have never
appreciated enough. It will be easiest to understand
what you are doing if you type the command name first&nbsp;- then redirect standard
input, followed by standard output, followed by standard error.</P
></LI
></UL
><p class="para"><a class="indexterm" name="AUTOID-14122"></A
><span class="link"> There are some more complex forms of standard I/O redirection,particularly for the Bourne shell . (<a class="linkend" href="ch45_21.htm" webstripperlinkwas="ch45_21.htm" title="n&gt;&amp;m: Swap Standard Output and Standard Error ">45.21</A
>, <a class="linkend" href="ch45_22.htm" webstripperlinkwas="ch45_22.htm" title="Handling Files Line-by-Line ">45.22</A
>, <a class="linkend" href="ch45_23.htm" webstripperlinkwas="ch45_23.htm" title="The Ins and Outs of Redirected I/O Loops ">45.23</A
>)</SPAN
></P
><p class="para">Of course, programs aren't restricted to standard I/O. They can open
other files, define their own special-purpose pipes, and write
directly to the terminal. But standard I/O is the glue that allows
you to make big programs out of smaller ones, and is therefore a
crucial part of the operating system. Most UNIX utilities 
read their data from standard input and write their output to standard
output, allowing you to combine them easily. A program that creates
its own special-purpose pipe may be very useful, but it cannot be
used in combination with standard utilities.</P
><p class="para"><a class="indexterm" name="AUTOID-14128"></A
>Some UNIX systems, and utilities such as
<span class="link"><em class="emphasis">gawk</EM
> (<a class="linkend" href="ch33_12.htm" webstripperlinkwas="ch33_12.htm" title="Versions of awk ">33.12</A
>)</SPAN
>,
support special filenames like <em class="emphasis">/dev/stdin</EM
>, <em class="emphasis">/dev/stdout</EM
>, and
<em class="emphasis">/dev/stderr</EM
>.
You can use these just as you'd use other files.
For instance, to have any ordinary command read from the file <em class="emphasis">afile</EM
>,
then standard input (from the keyboard, for example), then the file
<em class="emphasis">bfile</EM
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="replaceable"><i>somecmd</I
></CODE
><code class="userinput"><b> afile /dev/stdin bfile</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">In the same way, a process can write to its standard output through
<em class="emphasis">/dev/stdout</EM
> and the standard error via <em class="emphasis">/dev/stderr</EM
>.<a class="indexterm" name="AUTOID-14144"></A
><a class="indexterm" name="AUTOID-14145"></A
></P
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">ML</SPAN
>, <span class="authorinitials">JP</SPAN
></P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch12_09.htm" webstripperlinkwas="ch12_09.htm" title="12.9 Running Multiple Shell Sessions with screen "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 12.9 Running Multiple Shell Sessions with screen " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch13_02.htm" webstripperlinkwas="ch13_02.htm" title="13.2 One Argument with a cat Isn't Enough "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 13.2 One Argument with a cat Isn't Enough " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">12.9 Running Multiple Shell Sessions with screen </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">13.2 One Argument with a cat Isn't Enough </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
