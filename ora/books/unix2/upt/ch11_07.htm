<html><head><title>[Chapter 11] 11.7 History Substitutions </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:36:07Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch11_01.htm" webstripperlinkwas="ch11_01.htm" title="11. The Lessons of History"><link rel="prev" href="ch11_06.htm" webstripperlinkwas="ch11_06.htm" title="11.6 Using !$ for Safety with Wildcards "><link rel="next" href="ch11_08.htm" webstripperlinkwas="ch11_08.htm" title="11.8 Repeating a Cycle of Commands "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch11_06.htm" webstripperlinkwas="ch11_06.htm" title="11.6 Using !$ for Safety with Wildcards "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 11.6 Using !$ for Safety with Wildcards " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11<br>The Lessons of History</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch11_08.htm" webstripperlinkwas="ch11_08.htm" title="11.8 Repeating a Cycle of Commands "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 11.8 Repeating a Cycle of Commands " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-0237">11.7 History Substitutions </A
></H2
><p class="para">[Although most of the examples here use <i class="filename">echo</I
> to demonstrate
clearly just what is going on,
you'll normally use history with other UNIX commands. -JP]</P
><p class="para"><a class="indexterm" name="AUTOID-12562"></A
>The exclamation point (<code class="literal">!</CODE
>) is the C shell's
<span class="link">default (<a class="linkend" href="ch11_15.htm" webstripperlinkwas="ch11_15.htm" title="Changing C Shell History Characters with histchars ">11.15</A
>)</SPAN
>
history substitution
character.
(It's used in <em class="emphasis">bash</EM
>, too.)
This allows you to recall previously entered commands and re-execute
them without retyping.
The number of commands saved is up to you.
To set this number, put a line in your
<span class="link">shell setup file (<a class="linkend" href="ch02_02.htm" webstripperlinkwas="ch02_02.htm" title="Shell Setup Files-Which, Where, and Why ">2.2</A
>)</SPAN
>
like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">set history=40   <i class="lineannotation">...C shell</I
>

HISTSIZE=40   <i class="lineannotation">...bash, ksh</I
></PRE
></BLOCKQUOTE
></P
><p class="para">This means that the C shell will save the last 40 commands.
To list out these 40 commands use:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>history</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-12579"></A
><a class="indexterm" name="AUTOID-12583"></A
><a class="indexterm" name="AUTOID-12587"></A
>To see just the last ten commands in <em class="emphasis">csh</EM
> or <em class="emphasis">bash</EM
>,
use <code class="literal">history&nbsp;10</CODE
>.
In the C shell, you can also list out the commands in reverse with
<code class="literal">history&nbsp;-r</CODE
>.</P
><p class="para">To use the <code class="literal">!</CODE
> in a command line, you have several choices.
Some of the following examples are more of a headache than they may be
worth.
But they are used mostly to
<span class="link">select arguments from the command line in aliases (<a class="linkend" href="ch10_03.htm" webstripperlinkwas="ch10_03.htm" title="C Shell Aliases with Command-Line Arguments ">10.3</A
>)</SPAN
>.
Here they are:<a class="indexterm" name="UPT-ART-237-IX-EXCLAMATION-POINT-HISTORY-SUBSTITUTION-COMMANDS"></A
></P
><ul class="itemizedlist"><li class="listitem"><p class="para"><code class="userinput"><b>!!</B
></CODE
> repeats the last command.</P
></LI
><li class="listitem"><p class="para"><code class="userinput"><b>!:</B
></CODE
> repeats the last command.
This form is used if you want to add a 
<span class="link">modifier (<a class="linkend" href="ch09_06.htm" webstripperlinkwas="ch09_06.htm" title="String Editing (Colon) Operators ">9.6</A
>)</SPAN
>
like:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>echo xy</B
></CODE
>
xy
% <code class="userinput"><b>!:s/xy/yx</B
></CODE
>
echo yx
yx</PRE
></BLOCKQUOTE
></P
><p class="para">The second <code class="literal">!</CODE
> was left out.</P
></LI
><li class="listitem"><p class="para"><code class="userinput"><b>!so</B
></CODE
> repeats the last command that starts with <code class="literal">so</CODE
>.</P
></LI
><li class="listitem"><p class="para"><code class="userinput"><b>!?fn?</B
></CODE
> repeats the last command that has <code class="literal">fn</CODE
> anywhere in it.
The string could be found in an argument or in the command name.
This is opposed to <code class="literal">!fn</CODE
>, in which <code class="literal">!fn</CODE
> must be in a command name.
(The last <code class="literal">?</CODE
> need not be there.
Thus <code class="literal">!?fn</CODE
> means the same thing.)</P
></LI
><li class="listitem"><p class="para"><code class="userinput"><b>!34</B
></CODE
> executes command number 34.
You can find the appropriate history number when you list your history using
the <em class="emphasis">history</EM
> command, or by
<span class="link"> putting the history number in your prompt . (<a class="linkend" href="ch07_02.htm" webstripperlinkwas="ch07_02.htm" title="Basics of Setting the Prompt ">7.2</A
>)</SPAN
></P
></LI
><li class="listitem"><p class="para"><code class="userinput"><b>!! &amp;</B
></CODE
> adds an ampersand (<code class="literal">&amp;</CODE
>) to the end of the last command,
which executes it and places it into the background.
You can add anything to the end of a previous command. For example: &#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>cat -v foo</B
></CODE
>
       ...
% <code class="userinput"><b>!! | more</B
></CODE
>
cat -v foo | more
       ...</PRE
></BLOCKQUOTE
></P
><p class="para">In this case the shell will repeat the command to be executed and run it, adding
the pipe through the
<span class="link"><em class="emphasis">more</EM
> (<a class="linkend" href="ch25_03.htm" webstripperlinkwas="ch25_03.htm" title="Using more to Page Through Files ">25.3</A
>)</SPAN
>
pager.
Another common usage is:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>cat -v foo</B
></CODE
>
       ...
% <code class="userinput"><b>!! &gt; out</B
></CODE
>
cat -v foo &gt; out</PRE
></BLOCKQUOTE
></P
><p class="para">which returns the command but redirects the output into a file.</P
></LI
><li class="listitem"><p class="para"><code class="userinput"><b>!:0</B
></CODE
> selects only the command name; rather than the entire command line.&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>/usr/bin/grep Ah fn1</B
></CODE
>
       ...
% <code class="userinput"><b>!:0 Bh fn2</B
></CODE
>
/usr/bin/grep Bh fn2</PRE
></BLOCKQUOTE
></P
><p class="para">Note that as an 
<span class="link">operator (<a class="linkend" href="ch09_06.htm" webstripperlinkwas="ch09_06.htm" title="String Editing (Colon) Operators ">9.6</A
>)</SPAN
>
<code class="literal">:0</CODE
> can be appended to these history substitutions as well.
For example, <code class="literal">!!:0</CODE
> will give the last command name, and
a colon followed by any number will give the corresponding argument.
For example:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>cat fn fn1 fn2</B
></CODE
>
       ...
% <code class="userinput"><b>more !:3</B
></CODE
>
more fn2
       ...</PRE
></BLOCKQUOTE
></P
><p class="para">gives the third argument.</P
></LI
><li class="listitem"><p class="para"><code class="userinput"><b>!:2-4</B
></CODE
>
gives the second through the fourth argument, or any numbers you choose:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>echo 1 2 3 4 5</B
></CODE
>
1 2 3 4 5
% <code class="userinput"><b>echo !:2-4</B
></CODE
>
echo 2 3 4
2 3 4</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para"><code class="userinput"><b>!:-3</B
></CODE
> gives zero through the third argument, or any number you wish:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>echo 1 2 3 4</B
></CODE
>
1 2 3 4
% <code class="userinput"><b>echo !:-3</B
></CODE
>
echo echo 1 2 3
echo 1 2 3</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para"><code class="userinput"><b>!^</B
></CODE
> gives the first argument of the previous command.
This is the same as <code class="literal">!:1</CODE
>.
Remember that, just as the <code class="literal">^</CODE
> (caret) is the beginning-of-line
anchor in
<span class="link">regular expressions (<a class="linkend" href="ch26_04.htm" webstripperlinkwas="ch26_04.htm" title="Using Metacharacters in Regular Expressions ">26.4</A
>)</SPAN
>,
<code class="literal">!^</CODE
> gives the beginning history argument.&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>cat fn fn1 fn2</B
></CODE
>
       ...
% <code class="userinput"><b>more !^</B
></CODE
>
more fn
       ...</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-12694"></A
><code class="userinput"><b>!$</B
></CODE
> gives the last argument of the last command.
In the same way that <code class="literal">$</CODE
> (dollar sign) is the end-of-line anchor in
regular expressions,
<code class="literal">!$</CODE
> gives the ending history argument.
Thus:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>cat fn</B
></CODE
>
       ...
% <code class="userinput"><b>more !$</B
></CODE
>
more fn
       ...</PRE
></BLOCKQUOTE
></P
><p class="para">The new command (<code class="literal">more</CODE
>) is given the last argument of the previous
command.</P
></LI
><li class="listitem"><p class="para"><code class="userinput"><b>!*</B
></CODE
> is shorthand for the first through the last argument.
This is used a lot in aliases:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>echo 1 2 3 4 5</B
></CODE
>
1 2 3 4 5
% <code class="userinput"><b>echo !*</B
></CODE
>
echo 1 2 3 4 5
1 2 3 4 5</PRE
></BLOCKQUOTE
></P
><p class="para">In an alias:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">alias vcat 'cat -v \!* | more'</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;will pipe the output of
<span class="link"><em class="emphasis">cat -v</EM
> (<a class="linkend" href="ch25_07.htm" webstripperlinkwas="ch25_07.htm" title="Show Non-Printing Characters with cat -v or od -c ">25.7</A
>)</SPAN
>
command through <em class="emphasis">more</EM
>.
The backslash (<code class="literal">\</CODE
>) has to be there to hide the history character,
<code class="literal">!</CODE
>,
until the alias is used-see article
<a class="xref" href="ch10_03.htm" webstripperlinkwas="ch10_03.htm" title="C Shell Aliases with Command-Line Arguments ">10.3</A
>
for more information.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-12726"></A
><code class="userinput"><b>!:2*</B
></CODE
> gives the second through the last arguments:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>echo 1 2 3 4 5</B
></CODE
>
1 2 3 4 5
% <code class="userinput"><b>echo !:2*</B
></CODE
>
echo 2 3 4 5
2 3 4 5</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para"><code class="userinput"><b>!:2-</B
></CODE
> like <code class="literal">2*</CODE
> but the last argument is dropped:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>echo 1 2 3 4 5</B
></CODE
>
1 2 3 4 5
% <code class="userinput"><b>echo !:2-</B
></CODE
>
echo 2 3 4
2 3 4</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></LI
><li class="listitem"><p class="para"><code class="userinput"><b>!?fn?%</B
></CODE
> gives the first word found that has <code class="literal">fn</CODE
> in it:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>sort fn1 fn2 fn3</B
></CODE
>
       ...
% <code class="userinput"><b>echo !?fn?%</B
></CODE
>
echo fn1
fn1</PRE
></BLOCKQUOTE
></P
><p class="para">That found the <code class="literal">fn</CODE
> in <code class="literal">fn1</CODE
>.
You can get wilder with:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>echo 1 2 3 4 5</B
></CODE
>
1 2 3 4 5
% <code class="userinput"><b>echo !?ec?^</B
></CODE
>
echo 1
1</PRE
></BLOCKQUOTE
></P
><p class="para">That selected the command that had <code class="literal">ec</CODE
> in it, and the caret (<code class="literal">^</CODE
>)
said to give the first argument of that command.
You can also do something like:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>echo fn fn1 fn2</B
></CODE
>
fn fn1 fn2

% <code class="userinput"><b>echo !?fn1?^ !$</B
></CODE
>
echo fn fn2
fn fn2</PRE
></BLOCKQUOTE
></P
><p class="para">That cryptic command told the shell to look for a command that had
<code class="literal">fn1</CODE
> in it (<code class="literal">!?fn1?</CODE
>), and gave the first argument of that
command (<code class="literal">^</CODE
>).
Then it gave the last argument (<code class="literal">!$</CODE
>).</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-12775"></A
><code class="userinput"><b>^xy^yx</B
></CODE
> is the
<span class="link">shorthand substitution (<a class="linkend" href="ch11_03.htm" webstripperlinkwas="ch11_03.htm" title="My Favorite Is !$ ">11.3</A
>, <a class="linkend" href="ch11_05.htm" webstripperlinkwas="ch11_05.htm" title="My Favorite Is ^^ ">11.5</A
>)</SPAN
>
command.
In the case of:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>echo xxyyzzxx</B
></CODE
>
xxyyzzxx
% <code class="userinput"><b>^xx^ab</B
></CODE
>
echo abyyzzxx
abyyzzxx</PRE
></BLOCKQUOTE
></P
><p class="para">it replaced the characters <code class="literal">xx</CODE
> with <code class="literal">ab</CODE
>.
This makes editing the previous command much easier.</P
></LI
><li class="listitem"><p class="para"><code class="userinput"><b>!!:s/xx/ab/</B
></CODE
>
is doing the same thing as the previous example, but it is using the
substitute command instead of the <code class="literal">^</CODE
>.
This works for any previous command, as in:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>more afile bfile</B
></CODE
>
       ...
% <code class="userinput"><b>echo xy</B
></CODE
>
xy
% <code class="userinput"><b>!m:s/b/c/</B
></CODE
>
more afile cfile</PRE
></BLOCKQUOTE
></P
><p class="para">You do not have to use the slashes (<code class="literal">/</CODE
>); any character can act as a delimiter.&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>!!:s:xy:yx</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">There we used the colons (<code class="literal">:</CODE
>) [good when the word you're 
trying to edit contains a slash-<em class="emphasis">JP</EM
> ].
If you want to add more to the replacement, use <code class="literal">&amp;</CODE
> to &quot;replay it&quot; and then add
on whatever you like:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>echo xy</B
></CODE
>
xy
% <code class="userinput"><b>!!:s/xy/&amp;yx</B
></CODE
>
echo xyyx
xyyx</PRE
></BLOCKQUOTE
></P
><p class="para">The <code class="literal">&amp;</CODE
> in the replacement part said to give what the search
part found, which was the <code class="literal">xy</CODE
> characters.</P
><p class="para">The search part, or left side, cannot include
<span class="link">metacharacters (<a class="linkend" href="ch26_03.htm" webstripperlinkwas="ch26_03.htm" title="Understanding Expressions ">26.3</A
>)</SPAN
>.
You must type the actual string you are looking for.</P
><p class="para">Also, the example above only replaces the first occurrence of <code class="literal">xy</CODE
>.<a class="indexterm" name="AUTOID-12816"></A
>
To replace them all, use <em class="emphasis">g</EM
>:&#13;</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>echo xy xy xy xy</B
></CODE
>
xy xy xy xy
% <code class="userinput"><b>!!:s/xy/yx/</B
></CODE
>
echo yx xy xy xy
yx xy xy xy
% <code class="userinput"><b>!!:gs/xy/yx/</B
></CODE
>
echo yx yx yx yx
yx yx yx yx</PRE
></BLOCKQUOTE
></P
><p class="para">The <em class="emphasis">g</EM
> command in this case meant do all the <code class="literal">xy</CODE
>s.
And oddly enough, the <em class="emphasis">g</EM
> has to come before the <em class="emphasis">s</EM
> command.</P
><p class="para">Or you could have done:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>echo xy xy xy xy</B
></CODE
>
xy xy xy xy
% <code class="userinput"><b>!!:s/xy/yx/</B
></CODE
>
echo yx xy xy xy
yx xy xy xy
% <code class="userinput"><b>!!:g&amp;</B
></CODE
>
echo yx yx yx yx
yx yx yx yx</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;In that case, we told the shell to globally (<code class="literal">:g</CODE
>) replace every
matched string from the last command with the
last substitution (<code class="literal">&amp;</CODE
>).
Without the <em class="emphasis">g</EM
> command, the shells would have replaced just one more 
<code class="literal">xy</CODE
> with <code class="literal">yx</CODE
>.</P
><p class="para">[A &quot;global&quot; substitution works just once per word:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>echo xyzzy</B
></CODE
>
xyzzy
% <code class="userinput"><b>!!:gs/y/p/</B
></CODE
>
echo xpzzy
xpzzy</PRE
></BLOCKQUOTE
></P
><p class="para">The substitution above changed only the first <code class="literal">y</CODE
>. <em class="emphasis">-TC</EM
> ]</P
></LI
></UL
><a class="indexterm" name="AUTOID-12849"></A
><a class="indexterm" name="AUTOID-12850"></A
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">DR</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch11_06.htm" webstripperlinkwas="ch11_06.htm" title="11.6 Using !$ for Safety with Wildcards "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 11.6 Using !$ for Safety with Wildcards " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch11_08.htm" webstripperlinkwas="ch11_08.htm" title="11.8 Repeating a Cycle of Commands "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 11.8 Repeating a Cycle of Commands " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">11.6 Using !$ for Safety with Wildcards </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11.8 Repeating a Cycle of Commands </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
