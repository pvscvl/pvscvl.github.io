<html><head><title>[Chapter 45] 45.22 Handling Files Line-by-Line </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:54:49Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch45_01.htm" webstripperlinkwas="ch45_01.htm" title="45. Shell Programming for the Initiated"><link rel="prev" href="ch45_21.htm" webstripperlinkwas="ch45_21.htm" title="45.21 n&gt;&amp;m: Swap Standard Output and Standard Error "><link rel="next" href="ch45_23.htm" webstripperlinkwas="ch45_23.htm" title="45.23 The Ins and Outs of Redirected I/O Loops "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch45_21.htm" webstripperlinkwas="ch45_21.htm" title="45.21 n&gt;&amp;m: Swap Standard Output and Standard Error "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 45.21 n&gt;&amp;m: Swap Standard Output and Standard Error " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 45<br>Shell Programming for the Initiated</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch45_23.htm" webstripperlinkwas="ch45_23.htm" title="45.23 The Ins and Outs of Redirected I/O Loops "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 45.23 The Ins and Outs of Redirected I/O Loops " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-7923">45.22 Handling Files Line-by-Line </A
></H2
><p class="para"><a class="indexterm" name="UPT-ART-7923-IX-FILES-READING-LINE-BY-LINE"></A
><a class="indexterm" name="UPT-ART-7923-IX-SHELL-SCRIPTS-READING-FILES-LINE-BY-LINE"></A
><a class="indexterm" name="AUTOID-53840"></A
>It isn't easy to see how to read a file line-by-line in a shell script.
And while you
can write a file line-by-line by using the file-appending operator
<code class="literal">&gt;&gt;</CODE
> (two right angle brackets) with each command that should add
to the file, there's a more efficient way to do that as well.</P
><p class="para"><a class="indexterm" name="AUTOID-53845"></A
><a class="indexterm" name="AUTOID-53847"></A
><a class="indexterm" name="AUTOID-53850"></A
><a class="indexterm" name="AUTOID-53853"></A
><a class="indexterm" name="AUTOID-53856"></A
>The trick is to open the file and associate a file descriptor
number (3, 4, ..., 9) with it.
UNIX keeps a <em class="emphasis">file pointer</EM
>, like a bookmark in a book, that tells it
where the next read or write should be in each open file.
For example, if you open a file for reading and read the first line, the file
pointer will stay at the start of the second line.
The next read from that same open file will move the pointer to the
start of the third line.
This trick only works with files that stay open; each time you open a file,
the file pointer is set to the start of the file.
[1]
The Bourne shell
<span class="link"><em class="emphasis">exec</EM
> command (<a class="linkend" href="ch45_07.htm" webstripperlinkwas="ch45_07.htm" title="The exec Command ">45.7</A
>)</SPAN
>
can open a file and associate a file descriptor with it.
For example, this <em class="emphasis">exec</EM
> command makes the standard input of all
following commands come from the file <em class="emphasis">formfile</EM
>:</P
><blockquote class="footnote"><p class="para">[1] The file-appending operator <code class="literal">&gt;&gt;</CODE
> sets the pointer to the end of
the file before the first write.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen"><i class="lineannotation">...all commands read their stdin from default place</I
>
exec &lt; formfile
   <i class="lineannotation">...all commands will read their stdin from formfile</I
></PRE
></BLOCKQUOTE
></P
><p class="para">There's another way to rearrange file descriptors: by doing it at the last
line of <em class="emphasis">while</EM
> loops, <em class="emphasis">if</EM
> and <em class="emphasis">case</EM
> statements.
For example, all commands in the <em class="emphasis">while</EM
> loop below will take their
standard inputs from the file <em class="emphasis">formfile</EM
>.
The standard input outside the <em class="emphasis">while</EM
> loop isn't changed:</P
><p class="para"><blockquote class="screen"><pre class="screen"><i class="lineannotation">...all commands read their stdin from default place</I
>
while ...
do
   <i class="lineannotation">...all commands will read their stdin from formfile</I
>
done &lt; formfile
   <i class="lineannotation">...all commands read their stdin from default place</I
></PRE
></BLOCKQUOTE
></P
><p class="para">I call those &quot;redirected-I/O loops.&quot;
Those and other Bourne shell structures
<span class="link">have some problems (<a class="linkend" href="ch45_23.htm" webstripperlinkwas="ch45_23.htm" title="The Ins and Outs of Redirected I/O Loops ">45.23</A
>)</SPAN
>,
but they're usually worth the work to solve.</P
><p class="para"><a class="indexterm" name="UPT-ART-7923-IX-FORMPROG-SCRIPT-EXAMPLES"></A
><a class="indexterm" name="UPT-ART-7923-IX-FORMPROG-SCRIPT-DESCRIBED"></A
>We'll use all that to make a shell script for filling in forms.
The script, <em class="emphasis">formprog</EM
>, reads an empty form file like this one, line
by line:</P
><p class="para"><blockquote class="screen"><pre class="screen"><a class="indexterm" name="UPT-ART-7923-IX-FORMS-SCRIPT-FOR-FILING"></A
>Name:
Address:
City:
State/Province:
Phone:
FAX: 
Project: Corporate Decision
Comments:</PRE
></BLOCKQUOTE
></P
><p class="para">If a line has just a label, like <code class="literal">Name:</CODE
>, the script will prompt
you to fill it in.
If you do, the script will add the completed line to an output file; otherwise,
no output line is written.
If a form line is already completed, like:</P
><p class="para"><blockquote class="screen"><pre class="screen">Project: Corporate Decision</PRE
></BLOCKQUOTE
></P
><p class="para">the script doesn't prompt you; it just writes the line
to the output file:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>formprog formfile completed</B
></CODE
>
Name: <code class="userinput"><b>Jerry Peek</B
></CODE
>
Address: <code class="userinput"><b>123 Craigie St.</B
></CODE
>
City: <code class="userinput"><b>Cambridge</B
></CODE
>
State/Province: <code class="userinput"><b>MA</B
></CODE
>
Phone: <code class="userinput"><b>(617)456-7890</B
></CODE
>
FAX: 
Project: Corporate Decision
Comments: 
% <code class="userinput"><b>cat completed</B
></CODE
>
Name: Jerry Peek
Address: 123 Craigie St.
City: Cambridge
State/Province: MA
Phone: (617)456-7890
Project: Corporate Decision</PRE
></BLOCKQUOTE
></P
><p class="para">Here's the <em class="emphasis">formprog</EM
> script.
The line numbers are for reference only; don't type them into the file.
There's more explanation after the script:</P
><p class="para"><blockquote class="screen"><pre class="screen"><a class="indexterm" name="AUTOID-53915"></A
><a class="indexterm" name="AUTOID-53918"></A
>
 1  #!/bin/sh
 2  # formprog - fill in template form from $1, leave completed form in $2
 3  # TABSTOPS ARE SET AT 4 IN THIS SCRIPT
 4  
 5  template=&quot;$1&quot;   completed=&quot;$2&quot;   errors=/tmp/formprog$$
 6  myname=`basename $0`    # BASENAME OF THIS SCRIPT (NO LEADING PATH)
 7  trap 'rm -f $errors; exit' 0 1 2 15
 8  <a class="indexterm" name="AUTOID-53921"></A
>
 9  # READ $template LINE-BY-LINE, WRITE COMPLETED LINES TO $completed:
10  exec 4&lt;&amp;0   # SAVE ORIGINAL stdin (USUALLY TTY) AS FD 4
11  while read label text
12  do<a class="indexterm" name="AUTOID-53924"></A
>
13      case &quot;$label&quot; in
14      ?*:) # FIRST WORD ENDS WITH A COLON; LINE IS OKAY
15          case &quot;$text&quot; in
16          ?*) # SHOW LINE ON SCREEN AND PUT INTO completed FILE:
17              echo &quot;$label $text&quot;
18              echo &quot;$label $text&quot; 1&gt;&amp;3
19              ;;
20          *)  # FILL IT IN OURSELVES:
21              echo -n &quot;$label &quot;
22              exec 5&lt;&amp;0   # SAVE template FILE FD; DO NOT CLOSE!
23              exec 0&lt;&amp;4   # RESTORE ORIGINAL stdin TO READ ans
24              read ans
25              exec 0&lt;&amp;5   # RECONNECT template FILE TO stdin
26              case &quot;$ans&quot; in
27              &quot;&quot;) ;;      # EMPTY; DO NOTHING
28              *)  echo &quot;$label $ans&quot; 1&gt;&amp;3 ;;
29              esac
30              ;;
31          esac
32          ;;
33      *)  echo &quot;$myname: bad $1 line:   '$label $text'&quot; 1&gt;&amp;2; break;;
34      esac
35  done &lt;&quot;$template&quot; 2&gt;$errors 3&gt;&quot;$completed&quot;
36  
37  if [ -s $errors ]; then
38      /bin/cat $errors 1&gt;&amp;2
39      echo &quot;$myname: should you remove '$completed' file?&quot; 1&gt;&amp;2
40  fi</PRE
></BLOCKQUOTE
></P
><p class="para"><b class="emphasis.bold">Line&nbsp;10</B
> uses the
<span class="link"><code class="literal">4&lt;&amp;0</CODE
> operator (<a class="linkend" href="ch45_21.htm" webstripperlinkwas="ch45_21.htm" title="n&gt;&amp;m: Swap Standard Output and Standard Error ">45.21</A
>)</SPAN
>
to save the location of the original standard input&nbsp;- usually your
terminal, but not always&nbsp;- as file descriptor 4.
[2]
(We'll need to read that original <em class="emphasis">stdin</EM
> in line 24.)</P
><blockquote class="footnote"><p class="para">[2] We can't assume that standard input is coming from a terminal.
If we do, it prevents you from running <em class="emphasis">formprog</EM
> this way:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="replaceable"><i>command-generator-program</I
></CODE
> <code class="userinput"><b>| formprog</B
></CODE
>
% <code class="userinput"><b>formprog &lt; </B
></CODE
><code class="replaceable"><i>command-file</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para"></P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-53944"></A
><a class="indexterm" name="AUTOID-53947"></A
><a class="indexterm" name="AUTOID-53950"></A
><a class="indexterm" name="AUTOID-53953"></A
>During <b class="emphasis.bold">lines&nbsp;11-35</B
> of the redirected-I/O <em class="emphasis">while</EM
> loop:
all commands' standard input comes from the file named in <code class="literal">$template</CODE
>,
all standard error goes to the <code class="literal">$errors</CODE
> file,
and anything written to file descriptor 3 is added to the <code class="literal">$completed</CODE
>
file.
UNIX keeps file pointers for all those open files&nbsp;- so each read and
write is done just past the end of the previous one.</P
><p class="para">Here's what happens each time the loop is executed:</P
><ol class="orderedlist"><li class="listitem"><p class="para">The
<span class="link"><em class="emphasis">read</EM
> command (<a class="linkend" href="ch44_13.htm" webstripperlinkwas="ch44_13.htm" title="read: Reading from the Keyboard ">44.13</A
>)</SPAN
>
in <b class="emphasis.bold">line 11</B
> reads the next line from its standard input&nbsp;- that's the open
<code class="literal">$template</CODE
> file.</P
></LI
><li class="listitem"><p class="para">The
<span class="link"><em class="emphasis">case</EM
> (<a class="linkend" href="ch44_05.htm" webstripperlinkwas="ch44_05.htm" title="Test String Values with Bourne Shell case ">44.5</A
>)</SPAN
>
in lines&nbsp;15-31 checks the text from the
<code class="literal">$template</CODE
> file:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">If the text has both a label -ding with a colon (<code class="literal">:</CODE
>)) and some
other text (stored in <code class="literal">$text</CODE
>), the complete line is written two places.
<b class="emphasis.bold">Line&nbsp;17</B
> writes the line to the standard output&nbsp;- which is probably
your screen (it's not redirected by the script, anyway).
<b class="emphasis.bold">Line&nbsp;18</B
> writes the line to file descriptor 3, the open
<code class="literal">$completed</CODE
> file.</P
></LI
><li class="listitem"><p class="para">If the text has just a label, <b class="emphasis.bold">line&nbsp;21</B
> writes the label to
standard output (usually your terminal) without a newline.
We want to read the answer, at <b class="emphasis.bold">line&nbsp;24</B
>, but there's a problem:
on some Bourne shells, the <em class="emphasis">read</EM
> command can only read from file
descriptor 0 and won't let you use operators like <code class="literal">&lt;&amp;4</CODE
> on its
command line.</P
><p class="para">So, in <b class="emphasis.bold">line&nbsp;22</B
>, we save a copy of the open <code class="literal">$template</CODE
>
file descriptor <em class="emphasis">and the location of the open file pointer</EM
> in file
descriptor 5.
<b class="emphasis.bold">Line&nbsp;23</B
> changes standard input so the <em class="emphasis">read</EM
> in line&nbsp;24 will
read from the right place (usually the terminal).
<b class="emphasis.bold">Line&nbsp;25</B
> adjusts standard input so the next <em class="emphasis">read</EM
> at the top of
the loop (line&nbsp;11) will come from the <code class="literal">$template</CODE
> file.</P
><p class="para">If line&nbsp;24 doesn't read an answer, <b class="emphasis.bold">line&nbsp;27</B
> does not write a line.
Otherwise, <b class="emphasis.bold">line&nbsp;28</B
> writes the line to file descriptor 3, the open
<code class="literal">$completed</CODE
> file.</P
></LI
><li class="listitem"><p class="para">If the template label doesn't end with a colon, <b class="emphasis.bold">line&nbsp;33</B
> writes
a message to <em class="emphasis">stderr</EM
> (file descriptor 2).
These messages, together with messages to <em class="emphasis">stderr</EM
> from any other
command in the loop, are redirected into the <code class="literal">$errors</CODE
> file.
After the loop, if the
<span class="link">test (<a class="linkend" href="ch44_20.htm" webstripperlinkwas="ch44_20.htm" title="test: Testing Files and Strings ">44.20</A
>)</SPAN
>
in <b class="emphasis.bold">line&nbsp;37</B
> sees any text in the file,
the text is displayed in <b class="emphasis.bold">line&nbsp;38</B
> and the script prints a
warning.</P
></LI
></UL
></LI
></OL
><p class="para">The loop keeps reading and writing line by line until the <em class="emphasis">read</EM
>
at the top of the loop reaches the end-of-file of <code class="literal">$template</CODE
>.<a class="indexterm" name="AUTOID-54013"></A
><a class="indexterm" name="AUTOID-54014"></A
><a class="indexterm" name="AUTOID-54015"></A
></P
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">JP</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch45_21.htm" webstripperlinkwas="ch45_21.htm" title="45.21 n&gt;&amp;m: Swap Standard Output and Standard Error "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 45.21 n&gt;&amp;m: Swap Standard Output and Standard Error " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch45_23.htm" webstripperlinkwas="ch45_23.htm" title="45.23 The Ins and Outs of Redirected I/O Loops "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 45.23 The Ins and Outs of Redirected I/O Loops " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">45.21 n&gt;&amp;m: Swap Standard Output and Standard Error </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">45.23 The Ins and Outs of Redirected I/O Loops </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
