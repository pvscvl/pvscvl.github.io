<html><head><title>[Chapter 39] 39.12 What Makes Your Computer Slow? How Do You Fix It?</TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:50:25Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch39_01.htm" webstripperlinkwas="ch39_01.htm" title="39. Time and Performance"><link rel="prev" href="ch39_11.htm" webstripperlinkwas="ch39_11.htm" title="39.11 Changing a Job's Priority Under BSD UNIX "><link rel="next" href="ch40_01.htm" webstripperlinkwas="ch40_01.htm" title="40. Delayed Execution"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch39_11.htm" webstripperlinkwas="ch39_11.htm" title="39.11 Changing a Job's Priority Under BSD UNIX "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 39.11 Changing a Job's Priority Under BSD UNIX " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 39<br>Time and Performance</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch40_01.htm" webstripperlinkwas="ch40_01.htm" title="40. Delayed Execution"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 40. Delayed Execution" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-0067">39.12 What Makes Your Computer Slow? How Do You Fix It?</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-44273"></A
><a class="indexterm" name="AUTOID-44276"></A
><a class="indexterm" name="AUTOID-44279"></A
>Article
<a class="xref" href="ch39_05.htm" webstripperlinkwas="ch39_05.htm" title="Why Is the System So Slow? ">39.5</A
>
discussed the various components that make up a user's
perception of system performance. There is another equally important
approach to this issue: the computer's view of performance.
All system performance issues are basically resource contention issues.
In any computer system, there are three fundamental resources: the CPU,
memory, and the I/O subsystem (e.g., disks and networks). From this
standpoint, performance tuning means ensuring that every user gets
a fair share of available resources.</P
><p class="para">Each resource has its own particular set of problems. Resource
problems are complicated because all resources interact with one
another. Your best approach is to consider carefully what each system
resource does: CPU, I/O, and memory. To get you started, here's a
quick summary of each system resource and the problems it can have.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-67-SECT-1.1">39.12.1 The CPU </A
></H3
><p class="para">On any time-sharing system, even single-user time-sharing systems
(such as UNIX on a personal computer), many programs want to
use the CPU at the same time. Under most circumstances the UNIX
kernel is able to allocate the CPU fairly; however, each process (or
program) requires a certain number of CPU cycles to execute and there
are only so many cycles in a day. At some point the CPU just can't get
all the work done.</P
><p class="para"><a class="indexterm" name="AUTOID-44288"></A
><a class="indexterm" name="AUTOID-44291"></A
><a class="indexterm" name="AUTOID-44294"></A
>There are a few ways to measure CPU contention. The simplest is the
UNIX load average, reported by the BSD
<span class="link"><em class="emphasis">uptime</EM
> (<a class="linkend" href="ch39_07.htm" webstripperlinkwas="ch39_07.htm" title="Checking System Load: uptime ">39.7</A
>)</SPAN
>
command.  Under System V, <em class="emphasis">sar -q</EM
> provides the same sort of
information. The load average tries to measure the number of active
processes at any time (a <em class="emphasis">process</EM
> is a single stream of
instructions). As a measure of CPU utilization, the load average is
simplistic, poorly defined, but far from useless.</P
><p class="para">Before you blame the CPU for your performance problems, think a bit
about what we <em class="emphasis">don't</EM
> mean by CPU contention. We don't mean that
the system is short of memory or that it can't do I/O fast
enough. Either of these situations can make your system appear very
slow. But the CPU may be spending most of its time idle; therefore,
you can't just look at the load average and decide that you need a
faster processor.  Your programs won't run a bit faster.  Before you
understand your system, you also need to find out what your memory and
I/O subsystems are doing.  Users often point their fingers at the CPU,
but I would be willing to bet that in most situations memory and I/O
are equally (if not more) to blame.</P
><p class="para">Given that you are short of CPU cycles, you have three basic
alternatives:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">You can get users to run jobs at night or at other low-usage times 
-suring the computer is doing useful work 24 hours a day)
with
<span class="link"><em class="emphasis">batch</EM
> or <em class="emphasis">at</EM
> (<a class="linkend" href="ch40_01.htm" webstripperlinkwas="ch40_01.htm#UPT-ART-2313" title="Off-Peak Job Submission ">40.1</A
>)</SPAN
>.</P
></LI
><li class="listitem"><p class="para">You can prevent your system from doing unnecessary work.</P
></LI
><li class="listitem"><p class="para">You can get users to
<span class="link">run their big jobs at lower priority (<a class="linkend" href="ch39_09.htm" webstripperlinkwas="ch39_09.htm" title='Know When to Be "nice&quot; to OTher Users...and When' not to'>39.9</A
>)</SPAN
>.</P
></LI
></UL
><p class="para">If none of these options is viable, you may need to upgrade your system.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-67-SECT-1.2">39.12.2 The Memory Subsystem </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-44318"></A
><a class="indexterm" name="AUTOID-44321"></A
><a class="indexterm" name="AUTOID-44324"></A
><a class="indexterm" name="AUTOID-44326"></A
><a class="indexterm" name="AUTOID-44328"></A
><a class="indexterm" name="AUTOID-44330"></A
><a class="indexterm" name="AUTOID-44332"></A
><a class="indexterm" name="AUTOID-44334"></A
>Memory contention arises when the memory requirements of the active
processes exceed the physical memory available on the system; at this
point, the system is out of memory.  To handle this lack of memory
without crashing the system or killing processes, the system starts
<em class="emphasis">paging</EM
>: moving portions of active processes to disk in order
to reclaim physical memory. At this point, performance decreases
dramatically. Paging is distinguished from <em class="emphasis">swapping</EM
>, which means
moving entire processes to disk and reclaiming their space. Paging and
swapping indicate that the system can't provide enough memory for the
processes that are currently running, although under some
circumstances swapping can be a part of normal housekeeping. Under BSD
UNIX, tools such as <em class="emphasis">vmstat</EM
> and <em class="emphasis">pstat</EM
> show whether
the system is paging; <em class="emphasis">ps</EM
> can report the memory requirements
of each process. The System V utility <em class="emphasis">sar</EM
> provides information
about virtually all aspects of memory performance.</P
><p class="para">To prevent paging, you must either make more memory available or
decrease the extent to which jobs compete. To do this, you can
tune system parameters, which is beyond the scope of this book
(see O'Reilly &amp; Associates' <em class="emphasis">System Performance Tuning</EM
> by Mike Loukides
for help).
You can also
<span class="link">terminate (<a class="linkend" href="ch38_10.htm" webstripperlinkwas="ch38_10.htm" title="Destroying Processes with kill ">38.10</A
>)</SPAN
>
the jobs with the largest memory requirements.
If your system has a lot of memory, the 
kernel's memory requirements will be
relatively small; the typical
antagonists are very large application programs.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-67-SECT-1.3">39.12.3 The I/O Subsystem </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-44348"></A
><a class="indexterm" name="AUTOID-44350"></A
><a class="indexterm" name="AUTOID-44353"></A
><a class="indexterm" name="AUTOID-44355"></A
><a class="indexterm" name="AUTOID-44358"></A
><a class="indexterm" name="AUTOID-44361"></A
><a class="indexterm" name="AUTOID-44363"></A
><a class="indexterm" name="AUTOID-44365"></A
>The I/O subsystem is a common source of resource contention problems.
A finite amount of I/O bandwidth must be shared by all the programs
(including the UNIX kernel) that currently run. The system's
I/O buses can transfer only so many megabytes per second; individual
devices are even more limited. Each kind of device has its own
peculiarities and, therefore, its own problems. Unfortunately, 
UNIX has poor tools for analyzing the I/O subsystem.
Under BSD UNIX, <em class="emphasis">iostat</EM
> can give you information about the
transfer rates for 
each disk drive; <em class="emphasis">ps</EM
> and <em class="emphasis">vmstat</EM
> can give some information
about how many processes are blocked waiting for I/O; and
<em class="emphasis">netstat</EM
> and <em class="emphasis">nfsstat</EM
> report various network statistics.
Under System V, <em class="emphasis">sar</EM
> can provide voluminous information about I/O
efficiency, and <em class="emphasis">sadp</EM
> (V.4) can give detailed information about
disk access patterns. However, there is no standard tool to measure
the I/O subsystem's response to a heavy load.</P
><p class="para"><a class="indexterm" name="AUTOID-44375"></A
><a class="indexterm" name="AUTOID-44378"></A
><a class="indexterm" name="AUTOID-44380"></A
>The disk and network subsystems are particularly important to overall
performance. Disk bandwidth issues have two general forms:
maximizing per-process
transfer rates and maximizing aggregate transfer rates. The
per-process transfer rate is the rate at which a single program can
read or write data. The aggregate transfer rate is the maximum total
bandwidth that the system can provide to all programs that run.</P
><p class="para"><a class="indexterm" name="AUTOID-44383"></A
>Network I/O problems have two basic forms: a network can be
overloaded or a network can lose data integrity. When a network is
overloaded, the amount of data that needs to be transferred across the
network is greater than the network's capacity; therefore, the actual
transfer rate for any task is relatively slow. Network load problems
can usually be solved by changing the network's configuration.
Integrity problems occur when the network is faulty and
intermittently transfers data incorrectly. In order to deliver
correct data to the applications using the network, the network
protocols may have to transmit each block of data many times.
Consequently, programs using the network will run very
slowly. The only way to solve a data integrity problem is to isolate
the faulty part of the network and replace it.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UPT-ART-67-SECT-1.4">39.12.4 User Communities </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-44388"></A
><a class="indexterm" name="AUTOID-44391"></A
>So far we have discussed the different factors that contribute to
overall system performance. But we have ignored one of the most
important factors: the users who submit the jobs.</P
><p class="para">In talking about the relationship between users and performance, it is
easy to start seeing users as problems: the creatures who keep your
system from running the way it ought to. Nothing is further from the
truth.
Computers are tools: they exist to help users
do their work and not vice versa.</P
><p class="para">Limitations on memory requirements, file size, job
priorities, etc., are effective only when everyone cooperates.
Likewise, you can't force people to submit their jobs to a
<span class="link">batch queue (<a class="linkend" href="ch40_06.htm" webstripperlinkwas="ch40_06.htm" title="System V.4 Batch Queues ">40.6</A
>)</SPAN
>.
Most people will cooperate when they understand a problem and what
they can do to solve it. Most people will resist a solution
that is imposed from above, that they don't understand, or that
seems to get in the way of their work.</P
><p class="para"><a class="indexterm" name="AUTOID-44398"></A
>The nature of your system's users has a big effect on your
system's performance.
We can divide users into several classes:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Users who run a large number of relatively small jobs: for example,
users who spend most of their time editing or running UNIX utilities.</P
></LI
><li class="listitem"><p class="para">Users who run a small number of relatively large jobs: for example,
users who run large simulation programs with huge data files.</P
></LI
><li class="listitem"><p class="para">Users who run a small number of CPU-intensive jobs that don't require
a lot of I/O but do require a lot of memory and CPU time.  Program
developers fall into this category. Compilers tend to be large
programs that build large data structures and can be a source of
memory contention problems.</P
></LI
></UL
><p class="para">All three groups can cause problems. Several dozen users running
<em class="emphasis">grep</EM
> and accessing remote filesystems can be as bad for overall
performance as a few users accessing gigabyte files. However, the
types of problems these groups cause are not the same. For example,
setting up a &quot;striped filesystem&quot; will help disk performance for
large, I/O-bound jobs but won't help (and may hurt) users who run many
small jobs. Setting up batch queues will help reduce contention among
large jobs, which can often be run overnight, but it won't help the
system if its problems arise from users typing at their 
text editors and reading their mail.</P
><p class="para">Modern systems with
<span class="link">network facilities (<a class="linkend" href="ch01_33.htm" webstripperlinkwas="ch01_33.htm" title="UNIX Networking and Communications ">1.33</A
>)</SPAN
>
complicate the picture even more.  In addition to knowing what kinds
of work users do, you also need to know what kind of equipment they
use: a standard terminal over an RS-232 line, an X terminal over
Ethernet, or
a diskless workstation? The X Window System requires a lot of memory
and puts a heavy load on the network. Likewise, diskless workstations
place a load on the network. Similarly, do users access local files or
remote files via NFS or RFS?</P
></DIV
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">ML</SPAN
> <span class="bibliomisc">from O'Reilly &amp; Associates' <cite class="citetitle">System Performance Tuning</CITE
>, Chapter 1</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch39_11.htm" webstripperlinkwas="ch39_11.htm" title="39.11 Changing a Job's Priority Under BSD UNIX "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 39.11 Changing a Job's Priority Under BSD UNIX " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch40_01.htm" webstripperlinkwas="ch40_01.htm" title="40. Delayed Execution"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 40. Delayed Execution" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">39.11 Changing a Job's Priority Under BSD UNIX </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">40. Delayed Execution</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
