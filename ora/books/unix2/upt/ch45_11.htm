<html><head><title>[Chapter 45] 45.11 The Multipurpose jot Command </TITLE
><meta name="DC.title" content="UNIX Power Tools"><meta name="DC.creator" content="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-04T21:54:32Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-260-3" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch45_01.htm" webstripperlinkwas="ch45_01.htm" title="45. Shell Programming for the Initiated"><link rel="prev" href="ch45_10.htm" webstripperlinkwas="ch45_10.htm" title="45.10 Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup"><link rel="next" href="ch45_12.htm" webstripperlinkwas="ch45_12.htm" title="45.12 Parameter Substitution "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX Power Tools" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,58" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch45_10.htm" webstripperlinkwas="ch45_10.htm" title="45.10 Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 45.10 Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 45<br>Shell Programming for the Initiated</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch45_12.htm" webstripperlinkwas="ch45_12.htm" title="45.12 Parameter Substitution "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 45.12 Parameter Substitution " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UPT-ART-9040">45.11 The Multipurpose jot Command </A
></H2
><p class="para"><a class="indexterm" name="UPT-ART-9040-IX-BOURNE-SHELL-SH-JOT-COMMAND-USED-IN"></A
><a class="indexterm" name="UPT-ART-9040-IX-JOT-COMMAND"></A
>The <em class="emphasis">jot</EM
> command
is an extremely powerful tool for shell programming.
People who have used
<em class="emphasis">jot</EM
> end up using it all the time, but those who haven't been
exposed to it may be perplexed by its function.
For that reason,
I think the best way to learn <em class="emphasis">jot</EM
> is by example.
(If you've
read many of my other articles, then you might notice that I think that example
is the best way to learn anything; but for <em class="emphasis">jot</EM
>, it's doubly
true!)</P
><table class="para.programreference" border="1"><tr><th valign="TOP"><a class="programreference" href="examples/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/examples/index.htm" title="jot">jot</A
><br></TH
><td valign="TOP">In its most basic use, <em class="emphasis">jot</EM
> produces a series of numbers.
With only one integer as a command-line argument, it produces
the sequential integers from 1 to that number.&#13;</TD
></TR
></TABLE
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>jot 4</B
></CODE
>
1
2
3
4</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-52873"></A
><a class="indexterm" name="AUTOID-52876"></A
><a class="indexterm" name="AUTOID-52879"></A
>Big deal, you might say.
Well, it
may not be earth-shattering on the
surface, but it can make your life much easier if you program in
the Bourne shell.
Take the instance
when you want to increment a number in a loop.
The usual way of doing this is:</P
><p class="para"><blockquote class="screen"><pre class="screen">counter=1
while [ $counter -le 10 ]
do
   ...
   counter=`expr $counter + 1`
done</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-52885"></A
><a class="indexterm" name="AUTOID-52888"></A
><a class="indexterm" name="AUTOID-52891"></A
><a class="indexterm" name="AUTOID-52894"></A
><a class="indexterm" name="AUTOID-52897"></A
>This is laborious and quite slow.
Because the Bourne shell
doesn't have any
<span class="link">built-in (<a class="linkend" href="ch01_10.htm" webstripperlinkwas="ch01_10.htm" title="Internal and External Commands ">1.10</A
>)</SPAN
>
number crunching, the only way to increment
the counter is to use the <em class="emphasis">expr</EM
> command in each iteration of the
loop.
But if you have <em class="emphasis">jot</EM
>, the same loop can be written
in a simple <em class="emphasis">for</EM
> loop:</P
><p class="para"><blockquote class="screen"><pre class="screen">for counter in `jot 10`
do
   ...
done</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;You can also use <em class="emphasis">jot</EM
> to show any other sequence of numbers.
For example, to show the integers between 24 and 28 (inclusive), try:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>jot 5 24</B
></CODE
>
24
25
26
27
28</PRE
></BLOCKQUOTE
></P
><p class="para">The first argument (<em class="emphasis">5</EM
>) is taken to be how many values should
be shown.  The second number (<em class="emphasis">24</EM
>) is the number to start
counting with.  This may seem frustrating&nbsp;- why not just let us say
&quot;jot 24 28&quot; to specify the beginning and end of the sequence, rather
than make us figure out how many numbers will be in the sequence
first?  Well, the reason is that you might not always want to be
counting by whole numbers.</P
><p class="para">If supplied with a third argument, <em class="emphasis">jot</EM
> takes it as the number to end
the sequence with.  And if you specify either the beginning or end
boundary with a decimal point, it will produce fractional numbers in
its output:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>jot 5 24 28.0</B
></CODE
>
24.0
25.0
26.0
27.0
28.0
% <code class="userinput"><b>jot 4 24 28.0</B
></CODE
>
24.0
25.3
26.7
28.0</PRE
></BLOCKQUOTE
></P
><p class="para">You can also use the <em class="emphasis">-p</EM
> option to specify a given precision:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>jot -p4 4 24 28</B
></CODE
>
24.0000
25.3333
26.6667
28.0000</PRE
></BLOCKQUOTE
></P
><p class="para">By default, the values shown are evenly spaced across the interval.
You can change this by using
a fourth numerical argument, which becomes the
size of each step in the iteration.
For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>jot 4 24 28.0 .5</B
></CODE
>
24.0
24.5
25.0
25.5</PRE
></BLOCKQUOTE
></P
><p class="para">Notice in this example that only the first four iterations 
are shown, because we asked for only four values in the first
argument.
This is because any three values determine the fourth automatically,
so when the values conflict, <em class="emphasis">jot</EM
> takes the lower value.
<em class="emphasis">jot</EM
> stopped after four values regardless of the fact
that it would need nine iterations to complete the sequence.
However, <em class="emphasis">jot</EM
> will also stop
if the sequence is completed <em class="emphasis">before</EM
> the specified
number of values are shown.</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>jot 4 24 28 2</B
></CODE
>
24
26
28</PRE
></BLOCKQUOTE
></P
><p class="para">To omit any of these values, replace them with a single dash
(<code class="literal">-</CODE
>).
For example, if you know that you just want the
digits from 24 to 28, you can omit the field specifying the number of
values as long as you tell it to use a step of 1:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>jot - 24 28 1</B
></CODE
>
24
25
26 
27
28</PRE
></BLOCKQUOTE
></P
><p class="para">And of course, you can use negative numbers and negative steps:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>jot - 1 -3 -2</B
></CODE
>
1
-1
-3</PRE
></BLOCKQUOTE
></P
><p class="para">If you want the output separated by a string other than a newline,
use the <em class="emphasis">-s</EM
> option.
For example, to have the output of the
previous command separated by spaces, enter:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>jot -s &quot; &quot; - 1 -3 -2</B
></CODE
>
1 -1 -3</PRE
></BLOCKQUOTE
></P
><p class="para">That's <em class="emphasis">jot</EM
> in its no-frills form, already potentially useful for
any writer of shell scripts.
However, <em class="emphasis">jot</EM
> does quite
a lot more.
The <em class="emphasis">-c</EM
> option can be used to show
<span class="link">ASCII (<a class="linkend" href="ch51_03.htm" webstripperlinkwas="ch51_03.htm" title="ASCII Characters: Listing and Getting Values ">51.3</A
>)</SPAN
>
characters instead of
integers.
To print out the character for ASCII 65 (decimal), for example, try:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>jot -c 1 65</B
></CODE
>
A</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-52960"></A
><a class="indexterm" name="AUTOID-52963"></A
>You can also do the ASCII-to-decimal conversion in reverse, by just
specifying a character in place of the lower bound:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>jot 1 A</B
></CODE
>
65</PRE
></BLOCKQUOTE
></P
><p class="para">This can be handy if you want an automatic listing of all 26 letters:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>jot -c 26 A</B
></CODE
>
A
B
C
   ...</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-52973"></A
><a class="indexterm" name="AUTOID-52976"></A
><a class="indexterm" name="AUTOID-52979"></A
><a class="indexterm" name="AUTOID-52982"></A
><a class="indexterm" name="AUTOID-52985"></A
>The <em class="emphasis">-r</EM
> option produces random numbers, which is very useful in
shells with no random number generator (such as the Bourne or C
shells).  To create a 6-digit random number, try:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>jot -r 1 100000 999999</B
></CODE
>
523467</PRE
></BLOCKQUOTE
></P
><p class="para">&#13;(Using <em class="emphasis">-r</EM
>, the fourth numerical argument, if specified, is
taken to be a seed for the random number.)</P
><p class="para">The <em class="emphasis">-b</EM
> option can be used to repeat 
a given word, much like the
<span class="link"><em class="emphasis">yes</EM
> (<a class="linkend" href="ch23_04.htm" webstripperlinkwas="ch23_04.htm" title='Answer "Yes&quot; or "No&quot; Forever with yes'>23.4</A
>)</SPAN
>
command:</P
><p class="para"><blockquote class="screen"><pre class="screen">% <code class="userinput"><b>jot -b lunchtime! 3</B
></CODE
>
lunchtime!
lunchtime!
lunchtime!</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-53002"></A
><a class="indexterm" name="AUTOID-53005"></A
><a class="indexterm" name="AUTOID-53008"></A
>The <em class="emphasis">jot</EM
> manual page suggests a clever way of using this feature:
if you want to search for lines in files that have 40 or more
characters, you could do this using regular expressions, but you'd
have to count out all those dots.</P
><p class="para"><blockquote class="screen"><pre class="screen">grep &quot;........................................&quot; <code class="replaceable"><i>file</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Using <em class="emphasis">jot</EM
>, you can pat yourself on the back for being
ingenious (or for just reading the manpage!):</P
><p class="para"><blockquote class="screen"><pre class="screen">grep `jot -s &quot;&quot; -b . 40` <code class="replaceable"><i>file</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-53021"></A
>But the most powerful feature of <em class="emphasis">jot</EM
> comes with its <em class="emphasis">-w</EM
>
option.
The <em class="emphasis">-w</EM
> option accepts a word containing format
conversion characters as used by the <em class="emphasis">printf(&nbsp;)</EM
> function.
(For example, <code class="literal">%d</CODE
> prints a decimal argument; <code class="literal">%h</CODE
> prints
hexadecimal.)
If you aren't familiar with the <em class="emphasis">printf(&nbsp;)</EM
> format conversions,
read your <em class="emphasis">printf</EM
>(3) manual page or check any C programming book.</P
><p class="para"><a class="indexterm" name="AUTOID-53032"></A
><a class="indexterm" name="AUTOID-53033"></A
>This allows you to combine strings with <em class="emphasis">jot</EM
> output, a useful
feature for manipulating temporary files within scripts. 
For example, suppose you have a shell script that creates multiple
temporary files that you want to remove at the end of the script.
You might have even created the files using <em class="emphasis">jot</EM
> earlier in the
script, as shown previously:</P
><p class="para"><blockquote class="screen"><pre class="screen">for counter in `jot 10 1`
do
   <code class="replaceable"><i>whatever commands</I
></CODE
> &gt; tmp$counter
done</PRE
></BLOCKQUOTE
></P
><p class="para">Then later on you want to remove the files.
You could do
another loop, but it's more efficient to just enter:</P
><p class="para"><blockquote class="screen"><pre class="screen">rm `jot -w tmp%d 10 1`</PRE
></BLOCKQUOTE
></P
><p class="para">The <em class="emphasis">jot</EM
> command expands to the strings <em class="emphasis">tmp1</EM
> through
<em class="emphasis">tmp10</EM
>, which are the names of the temporary files created
earlier in the script.<a class="indexterm" name="AUTOID-53048"></A
><a class="indexterm" name="AUTOID-53049"></A
></P
><div class="sect1info"><p class="SECT1INFO">- <span class="authorinitials">LM</SPAN
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch45_10.htm" webstripperlinkwas="ch45_10.htm" title="45.10 Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 45.10 Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" title="UNIX Power Tools"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX Power Tools" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch45_12.htm" webstripperlinkwas="ch45_12.htm" title="45.12 Parameter Substitution "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 45.12 Parameter Substitution " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">45.10 Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">45.12 Parameter Substitution </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
