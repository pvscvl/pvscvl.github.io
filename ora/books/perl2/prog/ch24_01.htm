<html>
<head>
<title>Common Practices (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Common Practices">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch23_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part4.htm">Part 4: Perl as Culture</a></td><td align="right" valign="top" width="172"><a href="ch24_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h1 class="chapter">Chapter 24.  Common Practices</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch24_01.htm">Common Goofs for Novices</a>
<br>
<a href="ch24_02.htm">Efficiency</a>
<br>
<a href="ch24_03.htm">Programming with Style</a>
<br>
<a href="ch24_04.htm">Fluent Perl</a>
<br>
<a href="ch24_05.htm">Program Generation</a>
<br>
</p>
</div>

<a name="INDEX-4096"></a><a name="INDEX-4097"></a>
<p>Ask almost any Perl programmer, and they'll be glad to give you reams
of advice on how to program.  We're no different (in case you hadn't
noticed).  In this chapter, rather than trying to tell you about
specific features of Perl, we'll go at it from the other direction and
use a more scattergun approach to describe idiomatic Perl.  Our hope is
that, by putting together various bits of things that seemingly aren't
related, you can soak up some of the feeling of what it's like to
actually "think Perl".  After all, when you're programming, you don't
write a bunch of expressions, then a bunch of subroutines, then a bunch
of objects.  You have to go at everything all at once, more or less.
So this chapter is a bit like that.</p>

<p>There is, however, a rudimentary organization to the chapter, in that
we'll start with the negative advice and work our way towards the positive
advice.  We don't know if that will make you feel any better, but it makes
us feel better.</p>


<h2 class="sect1">24.1. Common Goofs for Novices</h2>

<p>
<a name="INDEX-4098"></a><a name="INDEX-4099"></a><a name="INDEX-4100"></a><a name="INDEX-4101"></a><a name="INDEX-4102"></a>
The biggest goof of all is forgetting to <tt class="literal">use
warnings</tt>, which identifies many errors.  The second biggest
goof is forgetting to <tt class="literal">use strict</tt> when it's
appropriate.  These two pragmas can save you hours of head-banging
when your program starts getting bigger.  (And it will.)  Yet another
faux pas is to forget to consult the online FAQ.  Suppose you want to
find out if Perl has a <tt class="literal">round</tt> function.  You might
try searching the FAQ first:
<blockquote>
<pre class="programlisting">% <tt class="userinput"><b>perlfaq round</b></tt>
</pre>
</blockquote>

Apart from those "metagoofs", there are several kinds of programming
traps.  Some traps almost everyone falls into, and other traps you'll
fall into only if you come from a particular culture that does things
differently.  We've separated these out in the following sections.</p>


<h3 class="sect2">24.1.1. Universal Blunders</h3>

<ul>
<li>
<p>
<a name="INDEX-4103"></a><a name="INDEX-4104"></a>
Putting a comma after the filehandle in a <tt class="literal">print</tt>
statement. Although it looks extremely regular and pretty to say:
<blockquote>
<pre class="programlisting">print STDOUT, "goodbye", $adj, "world!\n";    # WRONG</pre>
</blockquote>

this is nonetheless incorrect, because of that first comma.  What you
want instead is the indirect object syntax:
<blockquote>
<pre class="programlisting">print STDOUT "goodbye", $adj, "world!\n";     # ok</pre>
</blockquote>

The syntax works this way so that you can say:
<blockquote>
<pre class="programlisting">print $filehandle "goodbye", $adj, "world!\n";</pre>
</blockquote>

where <tt class="literal">$filehandle</tt> is a scalar holding the name of a
filehandle at run time.  This is distinct from:
<blockquote>
<pre class="programlisting">print $notafilehandle, "goodbye", $adj, "world!\n";</pre>
</blockquote>

where <tt class="literal">$notafilehandle</tt> is simply a string that is
part of the list of things to be printed.  See "indirect object" in
the Glossary.</p>
</li>
<li>
<p>
<a name="INDEX-4105"></a><a name="INDEX-4106"></a><a name="INDEX-4107"></a><a name="INDEX-4108"></a><a name="INDEX-4109"></a><a name="INDEX-4110"></a>
Using <tt class="literal">==</tt> instead of <tt class="literal">eq</tt> and
<tt class="literal">!=</tt> instead of <tt class="literal">ne</tt>.  The
<tt class="literal">==</tt> and <tt class="literal">!=</tt> operators are
<em class="emphasis">numeric</em> tests.  The other two are
<em class="emphasis">string</em> tests.  The strings
<tt class="literal">"123"</tt> and <tt class="literal">"123.00"</tt> are equal as
numbers, but not equal as strings.  Also, any nonnumeric string is
numerically equal to zero.  Unless you are dealing with numbers, you
almost always want the string comparison operators instead.</p>
</li>
<li>
<p>
<a name="INDEX-4111"></a>
Forgetting the trailing semicolon. Every statement in Perl is
terminated by a semicolon or the end of a block.  Newlines aren't
statement terminators as they are in <em class="emphasis">awk</em>, Python,
or FORTRAN.  Remember that Perl is like C.</p>

<p>
<a name="INDEX-4112"></a>
A statement containing a here document is particularly prone to losing
its semicolon.  It ought to look like this:
<blockquote>
<pre class="programlisting">print &lt;&lt;'FINIS';
A foolish consistency is the hobgoblin of little minds,
adored by little statesmen and philosophers and divines.
                                       --Ralph Waldo Emerson
FINIS</pre>
</blockquote>
</p>
</li>
<li>
<p>
<a name="INDEX-4113"></a>
Forgetting that a <em class="replaceable">BLOCK</em> requires braces.  Naked statements are not
<em class="replaceable">BLOCK</em>s.  If you are creating a control structure such as a <tt class="literal">while</tt>
or an <tt class="literal">if</tt> that requires one or more <em class="replaceable">BLOCK</em>s, you <em class="emphasis">must</em> use braces
around each <em class="replaceable">BLOCK</em>.  Remember that Perl is <em class="emphasis">not</em> like C.</p>
</li>
<li>
<p>
<a name="INDEX-4114"></a><a name="INDEX-4115"></a><a name="INDEX-4116"></a><a name="INDEX-4117"></a><a name="INDEX-4118"></a>
Not saving <tt class="literal">$1</tt>, <tt class="literal">$2</tt>, and so on, across regular
expressions. Remember that every new <tt class="literal">m/atch/</tt> or <tt class="literal">s/ubsti/tution/</tt>
will set (or clear, or mangle) your <tt class="literal">$1</tt>, <tt class="literal">$2</tt>...variables, as well
as <tt class="literal">$`</tt>, <tt class="literal">$&amp;</tt>, and <tt class="literal">$'</tt>.  One way to save them right away is to
evaluate the match within a list context, as in:
<blockquote>
<pre class="programlisting">my ($one, $two) = /(\w+) (\w+)/;</pre>
</blockquote>
</p>
</li>
<li>
<p>
<a name="INDEX-4119"></a><a name="INDEX-4120"></a>
Not realizing that a <tt class="literal">local</tt> also changes the
variable's value as seen by other subroutines called within the scope
of the local.  It's easy to forget that <tt class="literal">local</tt> is a
run-time statement that does dynamic scoping, because there's no
equivalent in languages like C.  See the section "Scoped
Declarations" in
<a href="ch04_01.htm">Chapter 4, "Statements and Declarations"</a>.  Usually you want a
<tt class="literal">my</tt> anyway.</p>
</li>
<li>
<p>Losing track of brace pairings. A good text editor will help you find
the pairs.  Get one.  (Or two.)</p>
</li>
<li>
<p>
<a name="INDEX-4121"></a><a name="INDEX-4122"></a> Using loop control
statements in <tt class="literal">do {} while</tt>. Although the braces in
this control structure look suspiciously like part of a loop
<em class="replaceable">BLOCK</em>, they aren't.</p>
</li>
<li>
<p> Saying <tt class="literal">@foo[1]</tt> when you mean
<tt class="literal">$foo[1]</tt>. The <tt class="literal">@foo[1]</tt> reference
is an array <em class="emphasis">slice</em>, meaning an array consisting of
the single element <tt class="literal">$foo[1]</tt>. Sometimes this doesn't
make any difference, as in:
<blockquote>
<pre class="programlisting">print "the answer is @foo[1]\n";</pre>
</blockquote>

but it makes a big difference for things like:
<blockquote>
<pre class="programlisting">@foo[1] = &lt;STDIN&gt;;</pre>
</blockquote>

which will slurp up all the rest of <tt class="literal">STDIN</tt>, assign
the <em class="emphasis">first</em> line to <tt class="literal">$foo[1]</tt>, and
discard everything else. This is probably not what you intended.  Get
into the habit of thinking that <tt class="literal">$</tt> means a single
value, while <tt class="literal">@</tt> means a list of values, and you'll
do okay.</p>
</li>
<li>
<p>
<a name="INDEX-4123"></a>
Forgetting the parentheses of a list operator like <tt class="literal">my</tt>:
<blockquote>
<pre class="programlisting">my  $x, $y  = (4, 8);     # WRONG 
my ($x, $y) = (4, 8);     # ok</pre>
</blockquote>
</p>
</li>
<li>
<p>
<a name="INDEX-4124"></a>
Forgetting to select the right filehandle before setting
<tt class="literal">$^</tt>, <tt class="literal">$~</tt>, or
<tt class="literal">$|</tt>.  These variables depend on the currently
selected filehandle, as determined by
<tt class="literal">select(</tt><em class="replaceable">FILEHANDLE</em><tt class="literal">)</tt>. The
initial filehandle so selected is <tt class="literal">STDOUT</tt>.  You
should really be using the filehandle methods from the
<tt class="literal">FileHandle</tt> module instead.  See <a href="ch28_01.htm">Chapter 28, "Special Names"</a>.</p>
</li>
</ul>






<h3 class="sect2">24.1.2. Frequently Ignored Advice</h3>

<p>Practicing Perl Programmers should take note of the following:</p>

<ul>
<li>
<p>
<a name="INDEX-4125"></a><a name="INDEX-4126"></a>
Remember that many operations behave differently in a list context than
they do in a scalar one.  For instance:
<blockquote>
<pre class="programlisting">($x) = (4, 5, 6);        # List context; $x is set to 4
 $x  = (4, 5, 6);        # Scalar context; $x is set to 6

 @a  = (4, 5, 6);        
 $x  = @a;               # Scalar context; $x is set to 3 (the array list)</pre>
</blockquote>
</p>
</li>
<li>
<p>
<a name="INDEX-4127"></a><a name="INDEX-4128"></a>
Avoid barewords if you can, especially all lowercase ones. You can't
tell just by looking at it whether a word is a function or a bareword
string.  By using quotes on strings and parentheses around function
call arguments, you won't ever get them confused. In fact, the pragma
<tt class="literal">use strict</tt> at the beginning of your program makes
barewords a compile-time error--probably a good thing.</p>
</li>
<li>
<p> You can't tell just by looking
which built-in functions are unary operators (like
<tt class="literal">chop</tt> and <tt class="literal">chdir</tt>), which are list
operators (like <tt class="literal">print</tt> and
<tt class="literal">unlink</tt>), and which are argumentless (like
<tt class="literal">time</tt>).  You'll want to learn them by reading <a href="ch29_01.htm">Chapter 29, "Functions"</a>. As always, use parentheses if you
aren't sure--or even if you aren't sure you're sure.  Note also that
user-defined subroutines are by default list operators, but they can
be declared as unary operators with a prototype of
<tt class="literal">($)</tt> or argumentless with a prototype of
<tt class="literal">()</tt>.</p>
</li>
<li>
<p> People
have a hard time remembering that some functions default to
<tt class="literal">$_</tt>, or <tt class="literal">@ARGV</tt>, or
whatever, while others do not.  Take the time to learn which are
which, or avoid default arguments.</p>
</li>
<li>
<p>
<a name="INDEX-4129"></a><a name="INDEX-4130"></a><tt class="literal">&lt;FH&gt;</tt> is not the name of a filehandle, but an
angle operator that does a line-input operation on the handle.  This
confusion usually manifests itself when people try to
<tt class="literal">print</tt> to the angle operator:
<blockquote>
<pre class="programlisting">print &lt;FH&gt; "hi";    # WRONG, omit angles</pre>
</blockquote>
</p>
</li>
<li>
<p>Remember also that data read by the angle operator is assigned to
<tt class="literal">$_</tt> only when the file read is the sole condition in
a <tt class="literal">while</tt> loop:
<blockquote>
<pre class="programlisting">while (&lt;FH&gt;) { }   # Data assigned to $_.
&lt;FH&gt;;              # Data read and discarded!</pre>
</blockquote>
</p>
</li>
<li>
<p>Don't use <tt class="literal">=</tt> when you need <tt class="literal">=~</tt>;
the two constructs are quite different:
<blockquote>
<pre class="programlisting">$x =  /foo/;  # Searches $_ for "foo", puts result in $x
$x =~ /foo/;  # Searches $x for "foo", discards result</pre>
</blockquote>
</p>
</li>
<li>
<p>
<a name="INDEX-4131"></a><a name="INDEX-4132"></a><a name="INDEX-4133"></a><a name="INDEX-4134"></a>
Use <tt class="literal">my</tt> for local variables whenever you can get
away with it. Using <tt class="literal">local</tt> merely gives a temporary
value to a global variable, which leaves you open to unforeseen side
effects of dynamic scoping.</p>
</li>
<li>
<p>Don't use <tt class="literal">local</tt> on a module's exported variables.
If you localize an exported variable, its exported value will not
change.  The local name becomes an alias to a new value but the
external name is still an alias for the original.</p>
</li>
</ul>






<h3 class="sect2">24.1.3. C Traps</h3>

<p>
<a name="INDEX-4135"></a><a name="INDEX-4136"></a>
Cerebral C programmers should take note of the following:</p>

<ul>
<li>
<p>Curlies are required for <tt class="literal">if</tt> and <tt class="literal">while</tt> blocks.</p>
</li>
<li>
<p>
<a name="INDEX-4137"></a>
You must use <tt class="literal">elsif</tt> rather than "else if" or
"elif".  Syntax like this:
<blockquote>
<pre class="programlisting">if (expression) {
    block;
}
else if (another_expression) {      # WRONG
    another_block;
}</pre>
</blockquote>

is illegal.  The <tt class="literal">else</tt> part is always a block, and a
naked <tt class="literal">if</tt> is not a block. You mustn't expect Perl to
be exactly the same as C.  What you want instead is:
<blockquote>
<pre class="programlisting">if (expression) {
    block;
}
elsif (another_expression) {
    another_block;
}</pre>
</blockquote>

Note also that "elif" is "file" spelled backward.  Only
Algol-ers would want a keyword that was the same as another word
spelled backward.</p>
</li>
<li>
<p>
<a name="INDEX-4138"></a><a name="INDEX-4139"></a>
The <tt class="literal">break</tt> and <tt class="literal">continue</tt> keywords
from C become in Perl <tt class="literal">last</tt> and
<tt class="literal">next</tt>, respectively. Unlike in C, these do
<em class="emphasis">not</em> work within a <tt class="literal">do {} while</tt>
construct.
<a name="INDEX-4140"></a><a name="INDEX-4141"></a>
</p>
</li>
<li>
<p>
<a name="INDEX-4142"></a>
There's no switch statement.  (But it's easy to build one on the fly;
see "Bare Blocks" and "Case Structures" in <a href="ch04_01.htm">Chapter 4, "Statements and Declarations"</a>.)</p>
</li>
<li>
<p>
<a name="INDEX-4143"></a>
Variables begin with <tt class="literal">$</tt>, <tt class="literal">@</tt>, or <tt class="literal">%</tt> in Perl.</p>
</li>
<li>
<p>
<a name="INDEX-4144"></a>
Comments begin with <tt class="literal">#</tt>, not <tt class="literal">/*</tt>.</p>
</li>
<li>
<p>
<a name="INDEX-4145"></a>
You can't take the address of anything, although a similar operator in
Perl is the backslash, which creates a reference.</p>
</li>
<li>
<p>
<tt class="literal">ARGV</tt> must be
capitalized. <tt class="literal">$ARGV[0]</tt> is C's
<tt class="literal">argv[1]</tt>, and C's <tt class="literal">argv[0]</tt> ends up
in <tt class="literal">$0</tt>.
<a name="INDEX-4146"></a>
</p>
</li>
<li>
<p>
<a name="INDEX-4147"></a>
Syscalls such as <tt class="literal">link</tt>, <tt class="literal">unlink</tt>,
and <tt class="literal">rename</tt> return true for success, not
<tt class="literal">0</tt>.</p>
</li>
<li>
<p>
<a name="INDEX-4148"></a>
The signal handlers in <tt class="literal">%SIG</tt> deal with signal names,
not numbers.</p>
</li>
</ul>






<h3 class="sect2">24.1.4. Shell Traps</h3>

<p>
<a name="INDEX-4149"></a><a name="INDEX-4150"></a>
Sharp shell programmers should take note of the following:</p>

<ul>
<li>
<p>
<a name="INDEX-4151"></a>
Variables are prefixed with <tt class="literal">$</tt>,
<tt class="literal">@</tt>, or <tt class="literal">%</tt> on the left side of the
assignment as well as the right.  A shellish assignment like:
<blockquote>
<pre class="programlisting">camel='dromedary';      # WRONG</pre>
</blockquote>

won't be parsed the way you expect.  You need:
<blockquote>
<pre class="programlisting">$camel='dromedary';     # ok</pre>
</blockquote>
</p>
</li>
<li>
<p>
<a name="INDEX-4152"></a>
The loop variable of a <tt class="literal">foreach</tt> also requires a <tt class="literal">$</tt>. Although <em class="emphasis">csh</em>
likes:
<blockquote>
<pre class="programlisting">foreach hump (one two)
    stuff_it $hump
end</pre>
</blockquote>

in Perl, this is written as:
<blockquote>
<pre class="programlisting">foreach $hump ("one", "two") {
    stuff_it($hump);
}</pre>
</blockquote>
</p>
</li>
<li>
<p>
<a name="INDEX-4153"></a>
The backtick operator does variable interpolation without regard to the
presence of single quotes in the command.</p>
</li>
<li>
<p>The backtick operator does no translation of the return value. In Perl,
you have to trim the newline explicitly, like this:
<blockquote>
<pre class="programlisting">chomp($thishost = `hostname`);</pre>
</blockquote>
</p>
</li>
<li>
<p>
<a name="INDEX-4154"></a>
Shells (especially <em class="emphasis">csh</em>) do several levels of substitution on each
command line.  Perl does interpolation only within certain constructs
such as double quotes, backticks, angle brackets, and search patterns.</p>
</li>
<li>
<p>Shells tend to interpret scripts a little bit at a time.  Perl compiles
the entire program before executing it (except for <tt class="literal">BEGIN</tt> blocks,
which execute before the compilation is done).
<a name="INDEX-4155"></a>
</p>
</li>
<li>
<p>
<a name="INDEX-4156"></a>
Program arguments are available via <tt class="literal">@ARGV</tt>, not
<tt class="literal">$1</tt>, <tt class="literal">$2</tt>, and so on.</p>
</li>
<li>
<p>The environment is not automatically made available as individual scalar
variables.  Use the standard <tt class="literal">Env</tt> module if you want that to happen.
<a name="INDEX-4157"></a>
</p>
</li>
</ul>






<h3 class="sect2">24.1.5. Previous Perl Traps</h3>

<p>
<a name="INDEX-4158"></a><a name="INDEX-4159"></a>
Penitent Perl 4 (and Prior) Programmers should take note of the
following changes between release 4 and release 5 that might affect old
scripts:</p>

<ul>
<li>
<p>
<a name="INDEX-4160"></a><tt class="literal">@</tt> now always interpolates an array in double-quotish strings. Some
programs may now need to use backslashes to protect any <tt class="literal">@</tt> that
shouldn't interpolate.</p>
</li>
<li>
<p>
<a name="INDEX-4161"></a><a name="INDEX-4162"></a>
Barewords that used to look like strings to Perl will now look like
subroutine calls if a subroutine by that name is defined before the
compiler sees them.  For example:
<blockquote>
<pre class="programlisting">sub SeeYa { die "Hasta la vista, baby!" }
$SIG{'QUIT'} = SeeYa;</pre>
</blockquote>

In prior versions of Perl, that code would set the signal handler.  Now,
it actually calls the function!  You may use the <span class="option">-w</span> switch to find
such risky usage or <tt class="literal">use strict</tt> to outlaw it.</p>
</li>
<li>
<p>
<a name="INDEX-4163"></a><a name="INDEX-4164"></a>
Identifiers starting with "<tt class="literal">_</tt>" are no longer forced
into package <tt class="literal">main</tt>, except for the bare underscore
itself (as in <tt class="literal">$_</tt>, <tt class="literal">@_</tt>, and so on).</p>
</li>
<li>
<p>
<a name="INDEX-4165"></a>
A double colon is now a valid package separator in an identifier.  Thus,
the statement:
<blockquote>
<pre class="programlisting">print "$a::$b::$c\n";</pre>
</blockquote>

now parses <tt class="literal">$a::</tt> as the variable reference, where in
prior versions only the <tt class="literal">$a</tt> was considered to be the
variable reference.  Similarly:
<blockquote>
<pre class="programlisting">print "$var::abc::xyz\n";</pre>
</blockquote>

is now interpreted as a single variable
<tt class="literal">$var::abc::xyz</tt>, whereas in prior versions, the
variable <tt class="literal">$var</tt> would have been followed by the
constant text <tt class="literal">::abc::xyz</tt>.</p>
</li>
<li>
<p>
<tt class="literal">s'$pattern'replacement'</tt> now performs no interpolation on
<tt class="literal">$pattern</tt>.  (The <tt class="literal">$</tt> would be
interpreted as an end-of-line assertion.) This behavior occurs only
when using single quotes as the substitution delimiter; in other
substitutions, <tt class="literal">$pattern</tt> is always interpolated.
<a name="INDEX-4166"></a>
</p>
</li>
<li>
<p>
<a name="INDEX-4167"></a>
The second and third arguments of <tt class="literal">splice</tt> are now
evaluated in scalar context rather than in list context.</p>
</li>
<li>
<p>
<a name="INDEX-4168"></a>
These are now semantic errors because of precedence:
<blockquote>
<pre class="programlisting">shift @list + 20;    # Now parses like shift(@list + 20), illegal!
$n = keys %map + 20; # Now parses like keys(%map + 20), illegal!</pre>
</blockquote>

Because if those were to work, then this couldn't:
<blockquote>
<pre class="programlisting">sleep $dormancy + 20;</pre>
</blockquote>
</p>
</li>
<li>
<p>
<a name="INDEX-4169"></a>
The precedence of assignment operators is now the same as the precedence
of assignment.  Previous versions of Perl mistakenly gave them the
precedence of the associated operator.  So you now must parenthesize
them in expressions like:
<blockquote>
<pre class="programlisting">/foo/ ? ($a += 2) : ($a -= 2);</pre>
</blockquote>

Otherwise:
<blockquote>
<pre class="programlisting">/foo/ ? $a += 2 : $a -= 2;</pre>
</blockquote>

would be erroneously parsed as:
<blockquote>
<pre class="programlisting">(/foo/ ? $a += 2 : $a) -= 2;</pre>
</blockquote>

On the other hand:
<blockquote>
<pre class="programlisting">$a += /foo/ ? 1 : 2;</pre>
</blockquote>

now works as a C programmer would expect.</p>
</li>
<li>
<p>
<tt class="literal">open FOO || die</tt> is incorrect.  You need parentheses around the
filehandle, because <tt class="literal">open</tt> has the precedence of a list operator.</p>
</li>
<li>
<p>
<a name="INDEX-4170"></a>
The elements of argument lists for formats are now evaluated in list
context.  This means you can interpolate list values now.</p>
</li>
<li>
<p>You can't do a <tt class="literal">goto</tt> into a block that is optimized away.  Darn.</p>
</li>
<a name="INDEX-4171"></a>
<li>
<p>It is no longer legal to use whitespace as the name of a variable or
as a delimiter for any kind of quote construct. Double darn.
<a name="INDEX-4172"></a>
</p>
</li>
<li>
<p>
<a name="INDEX-4173"></a>
The <tt class="literal">caller</tt> function now returns a false value in scalar context
if there is no caller.  This lets modules determine whether they're
being required or run directly.</p>
</li>
<li>
<p>
<tt class="literal">m//g</tt> now attaches its state to the searched string rather than the
regular expression.  See <a href="ch05_01.htm">Chapter 5, "Pattern Matching"</a>, for further
details.
<a name="INDEX-4174"></a>
</p>
</li>
<li>
<p>
<tt class="literal">reverse</tt> is no longer allowed as the name of a <tt class="literal">sort</tt> subroutine.
<a name="INDEX-4175"></a><a name="INDEX-4176"></a>
</p>
</li>
<li>
<p>
<a name="INDEX-4177"></a><em class="emphasis">taintperl</em> is no longer a separate executable.   There is now a <span class="option">-T</span>
switch to turn on tainting when it isn't turned on automatically.</p>
</li>
<li>
<p>
<a name="INDEX-4178"></a>
Double-quoted strings may no longer end with an unescaped <tt class="literal">$</tt> or <tt class="literal">@</tt>.</p>
</li>
<li>
<p>The archaic <tt class="literal">if</tt><em class="replaceable">BLOCK BLOCK</em> syntax is no longer supported.</p>
</li>
<li>
<p>Negative array subscripts now count from the end of the array.
<a name="INDEX-4179"></a><a name="INDEX-4180"></a>
</p>
</li>
<li>
<p>The comma operator in a scalar context is now guaranteed to give a
scalar context to its arguments.
<a name="INDEX-4181"></a><a name="INDEX-4182"></a>
</p>
</li>
<li>
<p>The <tt class="literal">**</tt> operator now binds more tightly than unary minus.</p>
</li>
<li>
<p>Setting <tt class="literal">$#array</tt> lower now discards array elements immediately.</p>
</li>
<li>
<p>
<tt class="literal">delete</tt> is not guaranteed to return the deleted value for <tt class="literal">tie</tt>d
arrays, since this capability may be onerous for some modules to
implement.
<a name="INDEX-4183"></a><a name="INDEX-4184"></a>
</p>
</li>
<li>
<p>The construct <tt class="literal">"this is $$x"</tt>, which used to interpolate the process
ID at that point, now tries to dereference <tt class="literal">$x</tt>.  <tt class="literal">$$</tt> by itself
still works fine, however.</p>
</li>
<li>
<p>
<a name="INDEX-4185"></a>
The behavior of <tt class="literal">foreach</tt> when it iterates over a
list that is not an array has changed slightly.  It used to assign the
list to a temporary array but now, for efficiency, no longer does so.
This means that you'll now be iterating over the actual values, not
copies of the values.  Modifications to the loop variable can change
the original values, even after the <tt class="literal">grep</tt>!
For instance:
<blockquote>
<pre class="programlisting">% <tt class="userinput"><b>perl4 -e '@a = (1,2,3); for (grep(/./, @a)) { $_++ }; print "@a\n"'</b></tt>
1 2 3
% <tt class="userinput"><b>perl5 -e '@a = (1,2,3); for (grep(/./, @a)) { $_++ }; print "@a\n"'</b></tt>
2 3 4</pre>
</blockquote>

To retain prior Perl semantics, you'd need to explicitly assign your list to a temporary array and then iterate over that.  For
example, you might need to change:
<blockquote>
<pre class="programlisting">foreach $var (grep /x/, @list) { ... }</pre>
</blockquote>

to:
<blockquote>
<pre class="programlisting">foreach $var (my @tmp = grep /x/, @list) { ... }</pre>
</blockquote>

Otherwise changing <tt class="literal">$var</tt> will clobber the values of <tt class="literal">@list</tt>.  (This
most often happens when you use <tt class="literal">$_</tt> for the loop variable and call
subroutines in the loop that don't properly localize <tt class="literal">$_</tt>.)</p>
</li>
<li>
<p>Some error messages and warnings will be different.</p>
</li>
<li>
<p>Some bugs may have been inadvertently removed.
<a name="INDEX-4186"></a><a name="INDEX-4187"></a>
</p>
</li>
</ul>
<a name="INDEX-4188"></a><a name="INDEX-4189"></a><a name="INDEX-4190"></a><a name="INDEX-4191"></a>














































<a name="INDEX-4308"></a><a name="INDEX-4309"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch23_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch24_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">23.3. Handling Insecure Code</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">24.2. Efficiency</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
