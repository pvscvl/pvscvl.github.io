<html>
<head>
<title>Perl Functions in Alphabetical Order (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Perl Functions in Alphabetical Order">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch29_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch29_01.htm">Chapter 29: Functions</a></td><td align="right" valign="top" width="172"><a href="ch30_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">29.2. Perl Functions in Alphabetical Order</h2>

<p>Many of the following function names are annotated with, um, annotations.
Here are their meanings:</p>

<dl>
<dt>
<b><tt class="literal"><img border=0 src="figs/dollarunderscore.gif"></tt></b>
</dt>
<dd>
<p>Uses <tt class="literal">$_</tt> (<tt class="literal">$ARG</tt>) as a default variable.</p>
</dd>


<dt>
<b><tt class="literal"><img src="figs/dollarbang.gif"></tt></b>
</dt>
<dd>
<p>Sets <tt class="literal">$!</tt> (<tt class="literal">$OS_ERROR</tt>) on syscall errors.</p>
</dd>


<dt>
<b><tt class="literal"><img src="figs/dollarat.gif"></tt></b>
</dt>
<dd>
<p>Raises exceptions; use <tt class="literal">eval</tt> to trap <tt class="literal">$@</tt> (<tt class="literal">$EVAL_ERROR</tt>).</p>
</dd>


<dt>
<b><tt class="literal"><img src="figs/dollarquestion.gif"></tt></b>
</dt>
<dd>
<p>Sets <tt class="literal">$?</tt> (<tt class="literal">$CHILD_ERROR</tt>) when child process exits.</p>
</dd>


<dt>
<b><tt class="literal"><img src="figs/taint.gif"></tt></b>
</dt>
<dd>
<p>Taints returned data.</p>
</dd>


<dt>
<b><tt class="literal"><img src="figs/taintgrey.gif"></tt></b>
</dt>
<dd>
<p>Taints returned data under some system, locale, or handle settings.</p>
</dd>


<dt>
<b><tt class="literal"><img src="figs/xarg.gif"></tt></b>
</dt>
<dd>
<p>Raises an exception if given an argument of inappropriate type.</p>
</dd>


<dt>
<b><tt class="literal"><img src="figs/xro.gif"></tt></b>
</dt>
<dd>
<p>Raises an exception if modifying a read-only target.</p>
</dd>


<dt>
<b><tt class="literal"><img src="figs/xt.gif"></tt></b>
</dt>
<dd>
<p>Raises an exception if fed tainted data.</p>
</dd>


<dt>
<b><tt class="literal"><img src="figs/xu.gif"></tt></b>
</dt>
<dd>
<p>Raises an exception if unimplemented on current platform.</p>
</dd>

</dl>

<p>
<a name="INDEX-4625"></a><a name="INDEX-4626"></a>
Functions that return tainted data when fed tainted data are not
marked, since that's most of them.  In particular, if you use any
function on <tt class="literal">%ENV</tt> or <tt class="literal">@ARGV</tt>, you'll get tainted data.</p>

<p>
<a name="INDEX-4627"></a>
Functions marked with <tt class="literal"><img src="figs/xarg.gif"></tt> raise an exception when they require, but do not receive, 
an argument of a particular type (such as filehandles for I/O
operations, references for <tt class="literal">bless</tt>ing, etc.).</p>

<p>Functions marked with <tt class="literal"><img src="figs/xro.gif"></tt> sometimes need to alter their arguments.
If they can't modify the argument because it's marked read-only,
they'll raise an exception.  Examples of read-only variables are
the special variables containing data captured during a pattern
match and variables that are really aliases to constants.</p>

<p>Functions marked with <tt class="literal"><img src="figs/xu.gif"></tt> may not be implemented on all platforms.
Although many of these are named after functions in the Unix C
library, don't assume that just because you aren't running Unix,
you can't call any of them.  Many are emulated, even
those you might never expect to see--such as <tt class="literal">fork</tt> on Win32
systems, which works as of the 5.6 release of Perl.  For more
information about the portability and behavior of system-specific
functions, see the <em class="emphasis">perlport</em> manpage, plus any platform-specific documentation that came with
your Perl port.
<a name="INDEX-4628"></a><a name="INDEX-4629"></a>
</p>

<p>Functions that raise other miscellaneous exceptions are marked with <tt class="literal"><img src="figs/dollarat.gif"></tt>,
including math functions that throw range errors, such as <tt class="literal">sqrt(-1)</tt>.</p>


<h3 class="sect2">29.2.1. abs&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">abs <em class="replaceable">VALUE</em>
abs</pre>
</blockquote>
<a name="INDEX-4630"></a>
This function returns the absolute value of its argument.
<blockquote>
<pre class="programlisting">$diff = abs($first - $second);</pre>
</blockquote>

Note: here and in subsequent examples, good style (and the <tt class="literal">use strict</tt> pragma) would dictate that you add a <tt class="literal">my</tt> modifier to declare
a new lexically scoped variable, like this:
<blockquote>
<pre class="programlisting">my $diff = abs($first - $second);</pre>
</blockquote>

However, we've omitted <tt class="literal">my</tt> from most of our examples for clarity.
Just assume that any such variable was declared earlier, if that cranks
your rotor.</p>






<h3 class="sect2">29.2.2. accept &nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">accept <em class="replaceable">SOCKET</em>, <em class="replaceable">PROTOSOCKET</em>
</pre>
</blockquote>
<a name="INDEX-4631"></a><a name="INDEX-4632"></a>
This function is used by server processes that wish to listen for
socket connections from clients.
<em class="replaceable">PROTOSOCKET</em> must be a filehandle already
opened via the <tt class="literal">socket</tt> operator and bound to one of
the server's network addresses or to <tt class="literal">INADDR_ANY</tt>.
Execution is suspended until a connection is made, at which point the
<em class="replaceable">SOCKET</em> filehandle is opened and attached to
the newly made connection. The original
<em class="replaceable">PROTOSOCKET</em> remains unchanged; its only
purpose is to be cloned into a real socket. The function returns the
connected address if the call succeeds, false otherwise. For example:
<blockquote>
<pre class="programlisting">unless ($peer = accept(SOCK, PROTOSOCK)) {
    die "Can't accept a connection: $!\n";
}</pre>
</blockquote>

On systems that support it, the close-on-exec flag will be set for the
newly opened file descriptor, as determined by the value of
<tt class="literal">$^F</tt> (<tt class="literal">$SYSTEM_FD_MAX</tt>).</p>

<p>See <em class="emphasis">accept</em>(2).
See also the example in the section "Sockets" in
<a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a>.</p>






<h3 class="sect2">29.2.3. alarm&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">alarm <em class="replaceable">EXPR</em>
alarm</pre>
</blockquote>
<a name="INDEX-4633"></a><a name="INDEX-4634"></a><a name="INDEX-4635"></a><a name="INDEX-4636"></a><a name="INDEX-4637"></a>
This function sends a <tt class="literal">SIGALRM</tt> signal to the current process
after <em class="replaceable">EXPR</em> seconds.</p>

<p>Only one timer may be active at once.  Each call disables the previous
timer, and an <em class="replaceable">EXPR</em> of 0 may be supplied to
cancel the previous timer without starting a new one.  The return
value is the amount of time remaining on the previous timer.
<blockquote>
<pre class="programlisting">print "Answer me within one minute, or die: ";
alarm(60);             # kill program in one minute
$answer = &lt;STDIN&gt;;
$timeleft = alarm(0);  # clear alarm
print "You had $timeleft seconds remaining\n";</pre>
</blockquote>

It is usually a mistake to intermix <tt class="literal">alarm</tt> and <tt class="literal">sleep</tt> calls,
because many systems use the <em class="emphasis">alarm</em>(2) syscall mechanism to implement
<em class="emphasis">sleep</em>(3).  On older machines, the elapsed time may be up to one
second less than you specified because of how seconds are counted.
Additionally, a busy system may not get around to running your process
immediately. See <a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a> for information on signal handling.</p>

<p>For alarms of finer granularity than one second, you might be able
to use the <tt class="literal">syscall</tt> function to access <em class="emphasis">setitimer</em>(2) if your
system supports it.  The CPAN module, <tt class="literal">Timer::HiRes</tt>, also provides
functions for this purpose.
<a name="INDEX-4638"></a>
</p>






<h3 class="sect2">29.2.4. atan2&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">atan2 <em class="replaceable">Y</em>, <em class="replaceable">X</em>
</pre>
</blockquote>
<a name="INDEX-4639"></a><a name="INDEX-4640"></a><a name="INDEX-4641"></a><a name="INDEX-4642"></a><a name="INDEX-4643"></a>
This function returns the principal value of the arc tangent of
<em class="replaceable">Y</em><tt class="literal">/</tt><em class="replaceable">X</em> in the range -<img src="figs/pi.gif"> to <img src="figs/pi.gif">.  A quick way to get an
approximate value of <img src="figs/pi.gif"> is to say:
<blockquote>
<pre class="programlisting">$pi = atan2(1,1) * 4;</pre>
</blockquote>

For the tangent operation, you may use the <tt class="literal">tan</tt> function from
either the <tt class="literal">Math::Trig</tt> or the <tt class="literal">POSIX</tt> modules, or just use the familiar
relation:
<blockquote>
<pre class="programlisting">sub tan { sin($_[0]) / cos($_[0]) }</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.5. bind&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">bind <em class="replaceable">SOCKET</em>, <em class="replaceable">NAME</em>
</pre>
</blockquote>
<a name="INDEX-4644"></a><a name="INDEX-4645"></a><a name="INDEX-4646"></a><a name="INDEX-4647"></a>
This function attaches an address (a name) to an already opened socket
specified by the <em class="replaceable">SOCKET</em> filehandle. The function returns true if it
succeeded, false otherwise.
<em class="replaceable">NAME</em> should be a packed address of the proper type for the socket.
<blockquote>
<pre class="programlisting">use Socket;
$port_number = 80;      # pretend we want to be a web server
$sockaddr = sockaddr_in($port_number, INADDR_ANY);
bind SOCK, $sockaddr or die "Can't bind $port_number: $!\n";</pre>
</blockquote>

See <em class="emphasis">bind</em>(2).
See also the examples in the section "Sockets" in
<a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a>.</p>






<h3 class="sect2">29.2.6. binmode&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">binmode <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">DISCIPLINES</em>
binmode <em class="replaceable">FILEHANDLE</em>
</pre>
</blockquote>
<a name="INDEX-4648"></a><a name="INDEX-4649"></a><a name="INDEX-4650"></a><a name="INDEX-4651"></a>
This function arranges for the <em class="replaceable">FILEHANDLE</em>
to have the semantics specified by the
<em class="replaceable">DISCIPLINES</em> argument.  If
<em class="replaceable">DISCIPLINES</em> is omitted, binary (or
"raw") semantics are applied to the filehandle.  If
<em class="replaceable">FILEHANDLE</em> is an expression, the value is
taken as the name of the filehandle or a reference to a filehandle, as
appropriate.</p>

<p>The <tt class="literal">binmode</tt> function should be called after the <tt class="literal">open</tt> but before
any I/O is done on the filehandle. The only way to reset the mode on a
filehandle is to reopen the file, since the various disciplines may
have treasured up various bits and pieces of data in various buffers.
This restriction may be relaxed in the future.</p>

<p>In the olden days, <tt class="literal">binmode</tt> was used primarily on
operating systems whose run-time libraries distinguished text
from binary files.  On those systems, the purpose of
<tt class="literal">binmode</tt> was to turn off the default text semantics.
However, with the advent of Unicode, all programs on all systems must
take some cognizance of the distinction, even on Unix and Mac systems.
These days there is only one kind of binary file (as far as Perl is
concerned), but there are many kinds of text files, which Perl would
also like to treat in a single way.  So Perl has a single internal
format for Unicode text, UTF-8.  Since there are many kinds of text
files, text files often need to be translated upon input into UTF-8,
and upon output back into some legacy character set, or some other
representation of Unicode.  You can use disciplines to tell Perl how
exactly (or inexactly) to do these translations.<a href="#FOOTNOTE-2">[2]</a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-2"></a>
<p>[2]More
precisely, you <em class="emphasis">will</em> be able to use disciplines
for this, but we're still implementing them as of this
writing.</p>

</blockquote>

<p>For example, a discipline of <tt class="literal">":text"</tt> will tell Perl to do generic
text processing without telling Perl which kind of text processing to
do.  But disciplines like <tt class="literal">":utf8"</tt> and <tt class="literal">":latin1"</tt> tell Perl which
text format to read and write.  On the other hand, the <tt class="literal">":raw"</tt>
discipline tells Perl to keep its cotton-pickin' hands off the data.
For more on how disciplines work (or will work), see the <tt class="literal">open</tt> function.  The rest of this discussion describes what <tt class="literal">binmode</tt> does
without the <em class="replaceable">DISCIPLINES</em> argument, that is, the historical meaning of
<tt class="literal">binmode</tt>, which is equivalent to:
<blockquote>
<pre class="programlisting">binmode <em class="replaceable">FILEHANDLE</em>, ":raw";</pre>
</blockquote>

Unless instructed otherwise, Perl will assume your freshly opened file
should be read or written in text mode.  Text mode means that
<tt class="literal">\n</tt> (newline) will be your internal line terminator.  All systems use
<tt class="literal">\n</tt> as the internal line terminator, but what that really represents
varies from system to system, device to device, and even file to file,
depending on how you access the file.  In such legacy systems
(including MS-DOS and VMS), what your program sees as a <tt class="literal">\n</tt> may not
be what's physically stored on disk.  The operating system might, for
example, store text files with <tt class="literal">\cM\cJ</tt> sequences that are translated
on input to appear as <tt class="literal">\n</tt> to your program, and have <tt class="literal">\n</tt> from your
program translated back to <tt class="literal">\cM\cJ</tt> on output to a file.  The <tt class="literal">binmode</tt> function 
disables this automatic translation on such systems.</p>

<p>In the absence of a <em class="replaceable">DISCIPLINES</em> argument, <tt class="literal">binmode</tt> has no effect
under Unix or Mac OS, both of which use <tt class="literal">\n</tt> to end each line and
represent that as a single character.  (It may, however, be a different
character: Unix uses <tt class="literal">\cJ</tt> and older Macs use <tt class="literal">\cM</tt>.  Doesn't matter.)</p>

<p>The following example shows how a Perl script might read a GIF image
from a file and print it to the standard output.  On systems that
would otherwise alter the literal data into something other than its
exact physical representation, you must prepare both handles.
While you could use a <tt class="literal">":raw"</tt> discipline directly in the GIF open,
you can't do that so easily with pre-opened filehandles like <tt class="literal">STDOUT</tt>:
<blockquote>
<pre class="programlisting">binmode STDOUT;
open(GIF, "vim-power.gif") or die "Can't open vim-power.gif: $!\n";
binmode GIF;
while (read(GIF, $buf, 1024)) {
    print STDOUT $buf;
}</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.7. bless&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">bless <em class="replaceable">REF</em>, <em class="replaceable">CLASSNAME</em>
bless <em class="replaceable">REF</em>
</pre>
</blockquote>
<a name="INDEX-4652"></a><a name="INDEX-4653"></a><a name="INDEX-4654"></a>
This function tells the referent pointed to by reference <em class="replaceable">REF</em> that
it is now an object in the <em class="replaceable">CLASSNAME</em> package--or the
current package if no <em class="replaceable">CLASSNAME</em> is specified.
If <em class="replaceable">REF</em> is not a valid reference, an exception is raised.
For convenience, <tt class="literal">bless</tt> returns the reference, since it's
often the last function in a constructor subroutine.  For example:
<blockquote>
<pre class="programlisting">$pet = Beast-&gt;new(TYPE =&gt; "cougar", NAME =&gt; "Clyde");

# then in Beast.pm:
sub new {
    my $class  = shift;
    my %attrs = @_;
    my $self   = { %attrs };
    return bless($self, $class);
}</pre>
</blockquote>

You should generally bless objects into <em class="replaceable">CLASSNAME</em>s that are mixed
case.  

Namespaces with all lowercase names are reserved for internal
use as Perl pragmata (compiler directives).  Built-in types (such as
"<tt class="literal">SCALAR</tt>", "<tt class="literal">ARRAY</tt>", "<tt class="literal">HASH</tt>", etc., not to mention the base class
of all classes, "<tt class="literal">UNIVERSAL</tt>") all have uppercase names, so you may wish
to avoid such package names as well.</p>

<p>Make sure that <em class="replaceable">CLASSNAME</em> is not false; blessing into false
packages is not supported and may result in unpredictable behavior.</p>

<p>It is not a bug that there is no corresponding <tt class="literal">curse</tt> operator.  (But
there is a <tt class="literal">sin</tt> operator.) See also <a href="ch12_01.htm">Chapter 12, "Objects"</a>, for more
about the blessing (and blessings) of objects.</p>






<h3 class="sect2">29.2.8. caller&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">caller <em class="replaceable">EXPR</em>
caller</pre>
</blockquote>
<a name="INDEX-4655"></a><a name="INDEX-4656"></a><a name="INDEX-4657"></a>
This function returns information about the stack of current subroutine
calls and such.  Without an argument, it returns the package name,
filename, and line number that the currently executing subroutine was
called from:
<blockquote>
<pre class="programlisting">($package, $filename, $line) = caller;</pre>
</blockquote>

Here's an example of an exceedingly picky function, making use of the
special tokens <tt class="literal">__PACKAGE__</tt> and <tt class="literal">__FILE__</tt> described in <a href="ch02_01.htm">Chapter 2, "Bits and Pieces"</a>:
<blockquote>
<pre class="programlisting">sub careful {
    my ($package, $filename) = caller;
    unless ($package  eq __PACKAGE__ &amp;&amp; $filename eq __FILE__) {
        die "You weren't supposed to call me, $package!\n";
    }
    print "called me safely\n";
}

sub safecall {
    careful();
}</pre>
</blockquote>

When called with an argument, <tt class="literal">caller</tt> evaluates <em class="replaceable">EXPR</em> as the
number of stack frames to go back before the current one.  For
example, an argument of 0 means the current stack frame, 1 means
the caller, 2 means the caller's caller, and so on.  The function
also reports additional information as shown here:
<blockquote>
<pre class="programlisting">$i = 0;
while (($package, $filename, $line, $subroutine,
        $hasargs, $wantarray, $evaltext, $is_require,
        $hints, $bitmask) = caller($i++) )
{
    ...
}</pre>
</blockquote>

If the frame is a subroutine call, <tt class="literal">$hasargs</tt> is true
if it has its own <tt class="literal">@_</tt> array (not one borrowed from
its caller). Otherwise, <tt class="literal">$subroutine</tt> may be
<tt class="literal">"(eval)"</tt> if the frame is not a subroutine call, but
an <tt class="literal">eval</tt>.  If so, additional elements
<tt class="literal">$evaltext</tt> and <tt class="literal">$is_require</tt> are
set: <tt class="literal">$is_require</tt> is true if the frame is created by
a <tt class="literal">require</tt> or <tt class="literal">use</tt> statement, and
<tt class="literal">$evaltext</tt> contains the text of the
<tt class="literal">eval</tt><em class="replaceable">EXPR</em> statement.  In
particular, for a <tt class="literal">eval</tt><em class="replaceable">BLOCK</em> statement,
<tt class="literal">$filename</tt> is <tt class="literal">"(eval)"</tt>, but
<tt class="literal">$evaltext</tt> is undefined.  (Note also that each
<tt class="literal">use</tt> statement creates a <tt class="literal">require</tt>
frame inside an <tt class="literal">eval</tt><em class="replaceable">EXPR</em> frame.)  The <tt class="literal">$hints</tt>
and <tt class="literal">$bitmask</tt> are internal values; please ignore
them unless you're a member of the thaumatocracy.</p>

<p>
<a name="INDEX-4658"></a>
In a fit of even deeper magic, <tt class="literal">caller</tt> also sets the
array <tt class="literal">@DB::args</tt> to the arguments passed in the
given stack frame--but only when called from within the
<tt class="literal">DB</tt> package.  See
<a href="ch20_01.htm">Chapter 20, "The Perl Debugger"</a>.</p>






<h3 class="sect2">29.2.9. chdir&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">chdir <em class="replaceable">EXPR</em>
chdir</pre>
</blockquote>
<a name="INDEX-4659"></a><a name="INDEX-4660"></a><a name="INDEX-4661"></a>
This function changes the current process's working directory to
<em class="replaceable">EXPR</em>, if possible.  If
<em class="replaceable">EXPR</em> is omitted, the caller's home
directory is used.  The function returns true upon success, false otherwise.
<blockquote>
<pre class="programlisting">chdir "$prefix/lib" or die "Can't cd to $prefix/lib: $!\n";</pre>
</blockquote>

See also the <tt class="literal">Cwd</tt> module, described in <a href="ch32_01.htm">Chapter 32, "Standard Modules"</a>, which lets you keep track of your current directory
automatically.</p>






<h3 class="sect2">29.2.10. chmod&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">chmod <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-4662"></a><a name="INDEX-4663"></a>
This function changes the permissions of a list of files. The first
element of the list must be the numerical mode, as in the <em class="emphasis">chmod</em>(2) syscall.  The
function returns the number of files successfully changed.  For example:
<blockquote>
<pre class="programlisting">$cnt = chmod 0755, 'file1', 'file2';</pre>
</blockquote>

will set <tt class="literal">$cnt</tt> to <tt class="literal">0</tt>,
<tt class="literal">1</tt>, or <tt class="literal">2</tt>, depending on how many
files were changed.  Success is measured by lack of error, not by an
actual change, because a file may have had the same mode before the
operation.  An error probably means you lacked sufficient privileges
to change its mode because you were neither the file's owner nor the
superuser.  Check <tt class="literal">$!</tt> to find the actual reason for
failure.</p>

<p>Here's a more typical usage:
<blockquote>
<pre class="programlisting">chmod(0755, @executables) == @executables
        or die "couldn't chmod some of @executables: $!";</pre>
</blockquote>

If you need to know which files didn't allow the change, use something
like this:
<blockquote>
<pre class="programlisting">@cannot = grep {not chmod 0755, $_} 'file1', 'file2', 'file3';
die "$0: could not chmod @cannot\n" if @cannot;</pre>
</blockquote>
This idiom makes use of the <tt class="literal">grep</tt> function to select
only those elements of the list for which the <tt class="literal">chmod</tt>
function failed.</p>

<p>When using nonliteral mode data, you may need to convert an octal
string to a number using the <tt class="literal">oct</tt> function.  That's because
Perl doesn't automatically assume a string contains an octal number
just because it happens to have a leading "0".
<blockquote>
<pre class="programlisting">$DEF_MODE = 0644;   # Can't use quotes here!
PROMPT: {
    print "New mode? ";
    $strmode = &lt;STDIN&gt;;
        exit unless defined $strmode;   # test for eof
    if ($strmode =~ /^\s*$/) {          # test for blank line
        $mode = $DEF_MODE;
    }
    elsif ($strmode !~ /^\d+$/) {
        print "Want numeric mode, not $strmode\n";
        redo PROMPT;
    }
    else {
        $mode = oct($strmode);          # converts "755" to 0755
    }
    chmod $mode, @files;
}</pre>
</blockquote>

This function works with numeric modes much like the Unix <em class="emphasis">chmod</em>(2)
syscall.  If you want a symbolic interface like the one the
<em class="emphasis">chmod</em>(1) command provides, see the <tt class="literal">File::chmod</tt> module on CPAN.
<a name="INDEX-4664"></a>
</p>

<p>You can also import the symbolic <tt class="literal">S_I*</tt> constants from the <tt class="literal">Fcntl</tt>
module:
<blockquote>
<pre class="programlisting">use Fcntl ':mode';
chmod S_IRWXU|S_IRGRP|S_IXGRP|S_IROTH|S_IXOTH, @executables;</pre>
</blockquote>

Some people consider that more readable than
<tt class="literal">0755</tt>.  Go figure.</p>






<h3 class="sect2">29.2.11. chomp&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/xro.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">chomp <em class="replaceable">VARIABLE</em>
chomp <em class="replaceable">LIST</em>
chomp</pre>
</blockquote>
<a name="INDEX-4665"></a><a name="INDEX-4666"></a><a name="INDEX-4667"></a><a name="INDEX-4668"></a><a name="INDEX-4669"></a>
This function (normally) deletes a trailing newline from the end of a
string contained in a variable.  This is a slightly safer version
of <tt class="literal">chop</tt> (described next) in that it has no effect upon a string that
doesn't end in a newline.  More specifically, it deletes the terminating string
corresponding to the current value of <tt class="literal">$/</tt>, and not just any last
character.</p>

<p>Unlike <tt class="literal">chop</tt>, <tt class="literal">chomp</tt> returns the number of characters deleted.
If <tt class="literal">$/</tt> is <tt class="literal">""</tt> (in paragraph mode), <tt class="literal">chomp</tt> removes all trailing
newlines from the selected string (or strings, if chomping a <em class="replaceable">LIST</em>).
You cannot <tt class="literal">chomp</tt> a literal, only a variable.</p>

<p>For example:
<blockquote>
<pre class="programlisting">while (&lt;PASSWD&gt;) {
    chomp;   # avoid \n on last field
    @array = split /:/;
    ...
}</pre>
</blockquote>

With version 5.6, the meaning of <tt class="literal">chomp</tt> changes
slightly in that input disciplines are allowed to override the value
of the <tt class="literal">$/</tt> variable and mark strings as to how they
should be chomped.  This has the advantage that an input discipline
can recognize more than one variety of line terminator (such as
Unicode paragraph and line separators), but still safely
<tt class="literal">chomp</tt> whatever terminates the current line.</p>






<h3 class="sect2">29.2.12. chop&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/xro.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">chop <em class="replaceable">VARIABLE</em>
chop <em class="replaceable">LIST</em>
chop</pre>
</blockquote>
<a name="INDEX-4670"></a><a name="INDEX-4671"></a>
This function chops off the last character of a string variable and
returns the character chopped.  The <tt class="literal">chop</tt> operator is used primarily
to remove the newline from the end of an input record, and is more
efficient than using a substitution.  If that's all you're doing,
then it would be safer to use <tt class="literal">chomp</tt>, since <tt class="literal">chop</tt>
always shortens the string no matter what's there, and <tt class="literal">chomp</tt> is
more selective.</p>

<p>You cannot <tt class="literal">chop</tt> a literal, only a variable.</p>

<p>
<a name="INDEX-4672"></a>
If you <tt class="literal">chop</tt> a <em class="replaceable">LIST</em> of variables, each string in the list is
chopped:
<blockquote>
<pre class="programlisting">@lines = `cat myfile`;
chop @lines;</pre>
</blockquote>

You can <tt class="literal">chop</tt> anything that is an lvalue, including an
assignment:
<blockquote>
<pre class="programlisting">chop($cwd = `pwd`);
chop($answer = &lt;STDIN&gt;);</pre>
</blockquote>

This is different from:
<blockquote>
<pre class="programlisting">$answer = chop($tmp = &lt;STDIN&gt;);  # WRONG</pre>
</blockquote>
<a name="INDEX-4673"></a>
which puts a newline into <tt class="literal">$answer</tt> because
<tt class="literal">chop</tt> returns the character chopped, not the
remaining string (which is in <tt class="literal">$tmp</tt>).  One way to
get the result intended here is with <tt class="literal">substr</tt>:
<blockquote>
<pre class="programlisting">$answer = substr &lt;STDIN&gt;, 0, -1;</pre>
</blockquote>
But this is more commonly written as:
<blockquote>
<pre class="programlisting">chop($answer = &lt;STDIN&gt;);</pre>
</blockquote>

In the most general case, <tt class="literal">chop</tt> can be expressed in terms of <tt class="literal">substr</tt>:
<blockquote>
<pre class="programlisting">$last_char = chop($var);
$last_char = substr($var, -1, 1, "");   # same thing</pre>
</blockquote>

Once you understand this equivalence, you can use it to do bigger
chops.  To chop more than one character, use <tt class="literal">substr</tt> as an lvalue,
assigning a null string. The following removes the last five
characters of <tt class="literal">$caravan</tt>:
<blockquote>
<pre class="programlisting">substr($caravan, -5) = "";</pre>
</blockquote>

The negative subscript causes <tt class="literal">substr</tt> to count from the end of the
string instead of the beginning.  If you wanted to save the characters
so removed, you could use the four-argument form of <tt class="literal">substr</tt>, creating
something of a quintuple chop:
<blockquote>
<pre class="programlisting">$tail = substr($caravan, -5, 5, "");</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.13. chown&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">chown <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-4674"></a><a name="INDEX-4675"></a><a name="INDEX-4676"></a><a name="INDEX-4677"></a><a name="INDEX-4678"></a><a name="INDEX-4679"></a><a name="INDEX-4680"></a>
This function changes the owner and group of a list of files. The
first two elements of the list must be the <em class="emphasis">numeric</em> UID and GID,
in that order.  A value of <tt class="literal">-1</tt> in either position is interpreted by
most systems to leave that value unchanged.  The function returns
the number of files successfully changed. For example:
<blockquote>
<pre class="programlisting">chown($uidnum, $gidnum, 'file1', 'file2') == 2
        or die "can't chown file1 or file2: $!";</pre>
</blockquote>

will set <tt class="literal">$cnt</tt> to <tt class="literal">0</tt>, <tt class="literal">1</tt>, or <tt class="literal">2</tt>, depending on how many files got
changed (in the sense that the operation succeeded, not in the sense
that the owner was different afterward).  Here's a more typical usage:
<blockquote>
<pre class="programlisting">chown($uidnum, $gidnum, @filenames) == @filenames
        or die "can't chown @filenames: $!";</pre>
</blockquote>

Here's a subroutine that accepts a username, looks up the user and
group IDs for you, and does the <tt class="literal">chown</tt>:
<blockquote>
<pre class="programlisting">sub chown_by_name {
    my($user, @files) = @_;
    chown((getpwnam($user))[2,3], @files) == @files
            or die "can't chown @files: $!";
}

chown_by_name("fred", glob("*.c"));</pre>
</blockquote>
However, you may not want the group changed as the previous function
does, because the <em class="emphasis">/etc/passwd</em> file associates
each user with a single group even though that user may be a member of
many secondary groups according to <em class="emphasis">/etc/group</em>.
An alternative is to pass a <tt class="literal">-1</tt> for the GID, which
leaves the group of the file unchanged.  If you pass a
<tt class="literal">-1</tt> as the UID and a valid GID, you can set the
group without altering the owner.</p>

<p>On most systems, you are not allowed to change the ownership of the
file unless you're the superuser, although you should be able to
change the group to any of your secondary groups.  On insecure
systems, these restrictions may be relaxed, but this is not a
portable assumption.  On POSIX systems, you can detect which rule
applies like this:
<blockquote>
<pre class="programlisting">use POSIX qw(sysconf _PC_CHOWN_RESTRICTED);
# only try if we're the superuser or on a permissive system
if ($&gt; == 0 || !sysconf(_PC_CHOWN_RESTRICTED) ) {
    chown($uidnum, -1, $filename)
        or die "can't chown $filename to $uidnum: $!";
}</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.14. chr&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">chr <em class="replaceable">NUMBER</em>
chr</pre>
</blockquote>
<a name="INDEX-4681"></a><a name="INDEX-4682"></a><a name="INDEX-4683"></a><a name="INDEX-4684"></a><a name="INDEX-4685"></a><a name="INDEX-4686"></a><a name="INDEX-4687"></a><a name="INDEX-4688"></a>
</p>

<p>This function returns the character represented by that <em class="replaceable">NUMBER</em> in
the character set.  For example, <tt class="literal">chr(65)</tt> is "<tt class="literal">A</tt>" in either ASCII
or Unicode, and <tt class="literal">chr(0x263a)</tt> is a Unicode smiley face.  For the
reverse of <tt class="literal">chr</tt>, use <tt class="literal">ord</tt>.</p>

<p>If you'd rather specify your characters by name than by number (for
example, <tt class="literal">"\N{WHITE SMILING FACE}"</tt> for a Unicode smiley), see
<tt class="literal">charnames</tt> in <a href="ch31_01.htm">Chapter 31, "Pragmatic Modules"</a>.</p>






<h3 class="sect2">29.2.15. chroot&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">chroot <em class="replaceable">FILENAME</em>
chroot</pre>
</blockquote>
<a name="INDEX-4689"></a><a name="INDEX-4690"></a><a name="INDEX-4691"></a><a name="INDEX-4692"></a>
If successful, <em class="replaceable">FILENAME</em> becomes the new root directory for the
current process--the starting point for pathnames beginning with
"<tt class="literal">/</tt>".  This directory is inherited across <tt class="literal">exec</tt> calls and by
all subprocesses <tt class="literal">fork</tt>ed after the <tt class="literal">chroot</tt> call.  There is no
way to undo a <tt class="literal">chroot</tt>.  For security reasons, only the superuser
can use this function.  Here's some code that approximates what
many FTP servers do:
<blockquote>
<pre class="programlisting">chroot((getpwnam('ftp'))[7])
    or die "Can't do anonymous ftp: $!\n";</pre>
</blockquote>

This function is unlikely to work on non-Unix systems.  See <em class="emphasis">chroot</em>(2).</p>






<h3 class="sect2">29.2.16. close&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/dollarquestion.gif"> <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">close <em class="replaceable">FILEHANDLE</em>
close</pre>
</blockquote>
<a name="INDEX-4693"></a><a name="INDEX-4694"></a><a name="INDEX-4695"></a><a name="INDEX-4696"></a><a name="INDEX-4697"></a><a name="INDEX-4698"></a><a name="INDEX-4699"></a><a name="INDEX-4700"></a>
This function closes the file, socket, or pipe associated with
<em class="replaceable">FILEHANDLE</em>.  (It closes the currently
selected filehandle if the argument is omitted.)  It returns true if
the close is successful, false otherwise.  You don't have to close
<em class="replaceable">FILEHANDLE</em> if you are immediately going to
do another <tt class="literal">open</tt> on it, since the next
<tt class="literal">open</tt> will close it for you.  (See
<tt class="literal">open</tt>.)  However, an explicit
<tt class="literal">close</tt> on an input file resets the line counter
(<tt class="literal">$.</tt>), while the implicit close done by
<tt class="literal">open</tt> does not.</p>

<p>
<em class="replaceable">FILEHANDLE</em> may be an expression whose value can be used as an
indirect filehandle (either the real filehandle name or a reference
to anything that can be interpreted as a filehandle object).</p>

<p>If the filehandle came from a piped open, <tt class="literal">close</tt> will return false if
any underlying syscall fails or if the program at the other end of
the pipe exited with nonzero status.  In the latter case, the <tt class="literal">close</tt>
forces <tt class="literal">$!</tt> (<tt class="literal">$OS_ERROR</tt>) to zero.  So if a <tt class="literal">close</tt> on a pipe
returns a nonzero status, check <tt class="literal">$!</tt> to determine whether the problem
was with the pipe itself (nonzero value) or with the program at
the other end (zero value).  In either event, <tt class="literal">$?</tt> (<tt class="literal">$CHILD_ERROR</tt>)
contains the wait status value (see its interpretation under <tt class="literal">system</tt>)
of the command associated with the other end of the pipe. For example:
<blockquote>
<pre class="programlisting">open(OUTPUT, '| sort -rn | lpr -p') # pipe to sort and lpr
    or die "Can't start sortlpr pipe: $!";
print OUTPUT @lines;                # print stuff to output
close OUTPUT                        # wait for sort to finish
    or warn $! ? "Syserr closing sortlpr pipe: $!"
               : "Wait status $? from sortlpr pipe";</pre>
</blockquote>

A filehandle produced by <em class="emphasis">dup</em>(2)ing a pipe is treated as an ordinary
filehandle, so <tt class="literal">close</tt> will not wait for the child on that filehandle.
You have to wait for the child by closing the original filehandle.
For example:
<blockquote>
<pre class="programlisting">open(NETSTAT, "netstat -rn |")
    or die "can't run netstat: $!";
open(STDIN, "&lt;&amp;NETSTAT")
    or die "can't dup to stdin: $!";</pre>
</blockquote>

If you close <tt class="literal">STDIN</tt> above, there is no wait, but if you
close <tt class="literal">NETSTAT</tt>, there is.</p>

<p>If you somehow manage to reap an exited pipe child on your own, the
close will fail.  This could happen if you had a <tt class="literal">$SIG{CHLD}</tt>
handler of your own that got triggered when the pipe child exited, or if
you intentionally called <tt class="literal">waitpid</tt> on the process ID returned from the
<tt class="literal">open</tt> call.</p>






<h3 class="sect2">29.2.17. closedir&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">closedir <em class="replaceable">DIRHANDLE</em>
</pre>
</blockquote>
<a name="INDEX-4701"></a><a name="INDEX-4702"></a>
This function closes a directory opened by <tt class="literal">opendir</tt>
and returns the success of that operation.  See the examples under
<tt class="literal">readdir</tt>.  <em class="replaceable">DIRHANDLE</em>
may be an expression whose value can be used as an indirect
dirhandle, usually the real dirhandle name.</p>






<h3 class="sect2">29.2.18. connect&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xt.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">connect <em class="replaceable">SOCKET</em>, <em class="replaceable">NAME</em>
</pre>
</blockquote>
<a name="INDEX-4703"></a><a name="INDEX-4704"></a>
This function initiates a connection with another process that is
waiting at an <tt class="literal">accept</tt>. The function returns true if it succeeded,
false otherwise.  <em class="replaceable">NAME</em>
should be a packed network address of the proper type for the socket.
For example, assuming <tt class="literal">SOCK</tt> is a previously created socket:
<blockquote>
<pre class="programlisting">use Socket;

my ($remote, $port) = ("www.perl.com", 80);
my $destaddr = sockaddr_in($port, inet_aton($remote));
connect SOCK, $destaddr
    or die "Can't connect to $remote at port $port: $!";</pre>
</blockquote>

To disconnect a socket, use either <tt class="literal">close</tt> or <tt class="literal">shutdown</tt>.  See also the
examples in the section "Sockets" in <a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a>.  See <em class="emphasis">connect</em>(2).</p>






<h3 class="sect2">29.2.19. cos &nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">cos <em class="replaceable">EXPR</em>
cos</pre>
</blockquote>
<a name="INDEX-4705"></a>
This function returns the cosine of <em class="replaceable">EXPR</em> (expressed in radians).
For example, the following script will print a cosine table of angles
measured in degrees:
<blockquote>
<pre class="programlisting"># Here's the lazy way of getting degrees-to-radians.

$pi = atan2(1,1) * 4;
$piover180 = $pi/180;

# Print table.
for ($deg = 0; $deg &lt;= 90; $deg++) {
    printf "%3d %7.5f\n", $deg, cos($deg * $piover180);
}</pre>
</blockquote>

For the inverse cosine operation, you may use the <tt class="literal">acos()</tt> function
from the <tt class="literal">Math::Trig</tt> or <tt class="literal">POSIX</tt> modules, or use this relation:
<blockquote>
<pre class="programlisting">sub acos { atan2( sqrt(1 - $_[0] * $_[0]), $_[0] ) }</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.20. crypt&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">crypt <em class="replaceable">PLAINTEXT</em>, <em class="replaceable">SALT</em>
</pre>
</blockquote>
<a name="INDEX-4706"></a><a name="INDEX-4707"></a><a name="INDEX-4708"></a><a name="INDEX-4709"></a>
This function computes a one-way hash of a string exactly in the
manner of <em class="emphasis">crypt</em>(3).  This is somewhat
useful for checking the password file for lousy
passwords,<a href="#FOOTNOTE-3">[3]</a> although what you really want to
do is prevent people from adding the bad passwords in the first place.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-3"></a>
<p>[3] Only people with honorable intentions are
allowed to do this.</p>

</blockquote>

<p>
<tt class="literal">crypt</tt> is intended to be a one-way function, much
like breaking eggs to make an omelette.  There is no (known) way to
decrypt an encrypted password apart from exhaustive, brute-force
guessing.</p>

<p>When verifying an existing encrypted string, you should use the
encrypted text as the <em class="replaceable">SALT</em> (like <tt class="literal">crypt($plain, $crypted) eq $crypted</tt>).  This allows your code to work with the standard
<tt class="literal">crypt</tt>, and with more exotic implementations, too.</p>

<p>When choosing a new <em class="replaceable">SALT</em>, you minimally need to create a random two character string whose
characters come from the set <tt class="literal">[./0-9A-Za-z]</tt>
(like <tt class="literal">join '', ('.', '/', 0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64]</tt>).
Older implementations of <tt class="literal">crypt</tt> only needed the first two characters
of the <em class="replaceable">SALT</em>, but code that only gives the first two characters
is now considered nonportable.  See your local <em class="emphasis">crypt</em>(3) manpage
for interesting details.</p>

<p>Here's an example that makes sure that whoever runs this program knows
their own password:
<blockquote>
<pre class="programlisting">$pwd = (getpwuid ($&lt;))[1];    # Assumes we're on Unix.

system "stty -echo";   # or look into Term::ReadKey on CPAN
print "Password: ";
chomp($word = &lt;STDIN&gt;);
print "\n";
system "stty echo";

if (crypt($word, $pwd) ne $pwd) {
    die "Sorry...\n";
} else {
    print "ok\n";
}</pre>
</blockquote>

Of course, typing in your own password to whoever asks for it is
unwise.</p>

<p>Shadow password files are slightly more secure than traditional
password files, and you might have to be a superuser to access them.
Because few programs should run under such powerful privileges, you
might have the program maintain its own independent authentication

system by storing the <tt class="literal">crypt</tt> strings in a different
file than <em class="emphasis">/etc/passwd</em> or
<em class="emphasis">/etc/shadow</em>.</p>

<p>The <tt class="literal">crypt</tt> function is unsuitable for encrypting large quantities
of data, not least of all because you can't get the information
back.  Look at the <em class="emphasis">by-module/Crypt</em> and <em class="emphasis">by-module/PGP</em> directories
on your favorite CPAN mirror for a slew of potentially useful
modules.</p>






<h3 class="sect2">29.2.21. dbmclose&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">dbmclose <em class="replaceable">HASH</em>
</pre>
</blockquote>
<a name="INDEX-4710"></a>
This function breaks the binding between a DBM (database management)
file and a hash.  
<a name="INDEX-4711"></a><tt class="literal">dbmclose</tt> is really just a call to
<tt class="literal">untie</tt> with the proper 
arguments, but is provided for backward compatibility with ancient
versions of Perl.</p>






<h3 class="sect2">29.2.22. dbmopen&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">dbmopen <em class="replaceable">HASH</em>, <em class="replaceable">DBNAME</em>, <em class="replaceable">MODE</em>
</pre>
</blockquote>
<a name="INDEX-4712"></a><a name="INDEX-4713"></a>
This binds a DBM file to a hash (that is, an associative array).
(DBM stands for database management, and consists of a set of C
library routines that allow random access to records via a hashing
algorithm.)  <em class="replaceable">HASH</em> is the name of the hash (including the <tt class="literal">%</tt>).
<em class="replaceable">DBNAME</em> is the name of the database (without any <em class="emphasis">.dir</em> or <em class="emphasis">.pag</em>
extension).  If the database does not exist and a valid <em class="replaceable">MODE</em>
is specified, the database is created with the protection specified
by <em class="replaceable">MODE</em>, as modified by the umask.  To prevent creation of the
database if it doesn't exist, you may specify a <em class="replaceable">MODE</em> of <tt class="literal">undef</tt>,
and the function will return false if it can't find an
existing database.  Values assigned to the hash prior to the
<tt class="literal">dbmopen</tt> are not accessible.</p>

<p>The <tt class="literal">dbmopen</tt> function is really just a call to
<tt class="literal">tie</tt> with the proper arguments, but is provided for
backward compatibility with ancient versions of Perl.  You can control
which DBM library you use by using the <tt class="literal">tie</tt>
interface directly or by loading the appropriate module before you
call <tt class="literal">dbmopen</tt>. Here's an example that works on some
systems for versions of <tt class="literal">DB_File</tt> similar to the
version in your Netscape browser:
<blockquote>
<pre class="programlisting">use DB_File;
dbmopen(%NS_Hist, "$ENV{HOME}/.netscape/history.dat", undef)
    or die "Can't open netscape history file: $!";

while (($url, $when) = each %NS_Hist) {
    next unless defined($when);
    chop ($url, $when);        # kill trailing null bytes
    printf "Visited %s at %s.\n", $url,
        scalar(localtime(unpack("V",$when)));
}</pre>
</blockquote>

If you don't have write access to the DBM file, you can only read
the hash variables, not set them. If you want to test whether you
can write, either use a file test like <tt class="literal">-w $file</tt>, or try setting a
dummy hash entry inside an <tt class="literal">eval {}</tt>, which will trap the exception.</p>

<p>Functions such as <tt class="literal">keys</tt> and <tt class="literal">values</tt> may return huge list values
when used on large DBM files.  You may prefer to use the <tt class="literal">each</tt>
function to iterate over large DBM files so that you don't load the
whole thing in memory at once.</p>

<p>Hashes bound to DBM files have the same limitations as the type of DBM
package you're using, including restrictions on how much data you can
put into a bucket.  If you stick to short keys and values, it's rarely
a problem.  See also the <tt class="literal">DB_File</tt> module in <a href="ch32_01.htm">Chapter 32, "Standard Modules"</a>.</p>

<p>Another thing you should bear in mind is that many existing DBM
databases contain null-terminated keys and values because they were
set up with C programs in mind.  The Netscape history file and the
old <em class="emphasis">sendmail</em> aliases file are examples.  Just use <tt class="literal">"$key\0"</tt>
when pulling out a value, and remove the null from the value.
<blockquote>
<pre class="programlisting">$alias = $aliases{"postmaster\0"};
chop $alias;   # kill the null</pre>
</blockquote>
<a name="INDEX-4714"></a><a name="INDEX-4715"></a><a name="INDEX-4716"></a>
There is currently no built-in way to lock a generic DBM file.  Some
would consider this a bug.  The <tt class="literal">GDBM_File</tt> module does attempt to provide
locking at the granularity of the entire file.  When in doubt,
your best bet is to use a separate lock file.</p>






<h3 class="sect2">29.2.23. defined&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">defined <em class="replaceable">EXPR</em>
defined</pre>
</blockquote>
<a name="INDEX-4717"></a><a name="INDEX-4718"></a><a name="INDEX-4719"></a><a name="INDEX-4720"></a>
This function returns a Boolean value saying whether <em class="replaceable">EXPR</em> has a
defined value or not.  Most of the data you deal with is defined, but
a scalar that contains no valid string, numeric, or reference value is
said to contain the undefined value, or <tt class="literal">undef</tt> for short.
Initializing a scalar variable to a particular value will define it,
and it will stay defined until you assign an undefined value to it or
explicitly call the <tt class="literal">undef</tt> function on that variable.</p>

<p>Many operations return <tt class="literal">undef</tt> under exceptional
conditions, such as at end-of-file, when using an uninitialized
variable's value, an operating system error, etc.  Since <tt class="literal">undef</tt> is
just one kind of false value, a simple Boolean test does not
distinguish between <tt class="literal">undef</tt>, numeric zero, the null string, and the
one-character string, "<tt class="literal">0</tt>"--all of which are equally false.  The
<tt class="literal">defined</tt> function allows you to distinguish between an undefined null
string and a defined null string when you're using operators that might
return a real null string.</p>

<p>Here is a fragment that tests a scalar value from a hash:
<blockquote>
<pre class="programlisting">print if defined $switch{D};</pre>
</blockquote>

When used on a hash element like this, <tt class="literal">defined</tt> only tells you
whether the value is defined, not whether the key has an entry in
the hash.  It's possible to have a key whose value is undefined;
the key itself however still exists.  Use <tt class="literal">exists</tt> to determine
whether the hash key exists.</p>

<p>In the next example we exploit the convention that some operations return the
undefined value when you run out of data:
<blockquote>
<pre class="programlisting">print "$val\n" while defined($val = pop(@ary));</pre>
</blockquote>

And in this one, we do the same thing with the <tt class="literal">getpwent</tt> function
for retrieving information about the system's users.
<blockquote>
<pre class="programlisting">setpwent();
while (defined($name = getpwent())) {
    print "&lt;&lt;$name&gt;&gt;\n";
}
endpwent();</pre>
</blockquote>

The same thing goes for error returns from syscalls that could validly return a false value:
<blockquote>
<pre class="programlisting">die "Can't readlink $sym: $!"
    unless defined($value = readlink $sym);</pre>
</blockquote>

You may also use <tt class="literal">defined</tt> to see whether a subroutine has been
defined yet.  This makes it possible to avoid blowing up on nonexistent
subroutines (or subroutines that have been declared but never given a
definition):
<blockquote>
<pre class="programlisting">indir("funcname", @arglist);
sub indir {
    my $subname = shift;
    no strict 'refs';  # so we can use subname indirectly
    if (defined &amp;$subname) {
        &amp;$subname(@_);    # or $subname-&gt;(@_);
    }
    else {
        warn "Ignoring call to invalid function $subname";
    }
}</pre>
</blockquote>

Use of <tt class="literal">defined</tt> on aggregates (hashes and arrays) is deprecated.
(It used to report whether memory for that aggregate had ever been
allocated.)  Instead, use a simple Boolean test 
to see whether the array or hash has any elements:
<blockquote>
<pre class="programlisting">if (@an_array) { print "has array elements\n" }
if (%a_hash)   { print "has hash members\n"   }</pre>
</blockquote>

See also <tt class="literal">undef</tt> and <tt class="literal">exists</tt>.</p>






<h3 class="sect2">29.2.24. delete&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">delete <em class="replaceable">EXPR</em>
</pre>
</blockquote>
<a name="INDEX-4721"></a><a name="INDEX-4722"></a><a name="INDEX-4723"></a><a name="INDEX-4724"></a><a name="INDEX-4725"></a>
This function deletes an element (or a slice of elements) from the
specified hash or array.  (See <tt class="literal">unlink</tt> if you want to delete a
file.)  The deleted elements are returned in the order specified,
though this behavior is not guaranteed for tied variables such as DBM
files.  After the delete operation, the <tt class="literal">exists</tt> function will return
false on any deleted key or index.  (In contrast, after the <tt class="literal">undef</tt>
function, the <tt class="literal">exists</tt> function continues to return true, because the
<tt class="literal">undef</tt> function only undefines the value of the element, but doesn't
delete the element itself.)</p>

<p>Deleting from the <tt class="literal">%ENV</tt> hash modifies the
environment.  Deleting from a hash that is bound to a (writable)
DBM file deletes the entry from that DBM file.</p>

<p>Historically, you could only delete from a hash, but with Perl version 5.6
you may also delete from an array.  Deleting from an array causes the
element at the specified position to revert to a completely
uninitialized state, but it doesn't close up the gap, since that would
change the positions of all the subsequent entries.  Use a <tt class="literal">splice</tt>
for that. (However, if you delete the final element in an array, the
array size will shrink by one (or more, depending on the position of the
next largest existing element (if any))).</p>

<p>
<em class="replaceable">EXPR</em> can be arbitrarily complicated, provided that the final
operation is a hash or array lookup:
<blockquote>
<pre class="programlisting"># set up array of array of hash
$dungeon[$x][$y] = \%properties;

# delete one property from hash
delete $dungeon[$x][$y]{"OCCUPIED"};

# delete three properties all at once from hash
delete @{ $dungeon[$x][$y] }{ "OCCUPIED", "DAMP", "LIGHTED" };

# delete reference to %properties from array
delete $dungeon[$x][$y];</pre>
</blockquote>

The following na&amp;#239;ve example inefficiently deletes all the values of
a <tt class="literal">%hash</tt>:
<blockquote>
<pre class="programlisting">foreach $key (keys %hash) {
    delete $hash{$key};
}</pre>
</blockquote>

And so does this:
<blockquote>
<pre class="programlisting">delete @hash{keys %hash};</pre>
</blockquote>
But both of these are slower than just assigning the empty list
or undefining it:
<blockquote>
<pre class="programlisting">%hash = ();         # completely empty %hash
undef %hash;        # forget %hash ever existed</pre>
</blockquote>

Likewise for arrays:
<blockquote>
<pre class="programlisting">foreach $index (0 .. $#array) {
    delete $array[$index];
}</pre>
</blockquote>

and:
<blockquote>
<pre class="programlisting">delete @array[0 .. $#array];</pre>
</blockquote>

are less efficient than either of:
<blockquote>
<pre class="programlisting">@array = ();         # completely empty @array
undef @array;        # forget @array ever existed</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.25. die&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarat.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">die <em class="replaceable">LIST</em>
die</pre>
</blockquote>
<a name="INDEX-4726"></a><a name="INDEX-4727"></a><a name="INDEX-4728"></a>
Outside an <tt class="literal">eval</tt>, this function prints the concatenated value
of <em class="replaceable">LIST</em> to <tt class="literal">STDERR</tt> and exits with the current value of <tt class="literal">$!</tt>
(the C-library <tt class="literal">errno</tt> variable). If <tt class="literal">$!</tt> is 0, it exits with the
value of <tt class="literal">$? &gt;&gt; 8</tt> (which is the status of the last
reaped child from a <tt class="literal">system</tt>, <tt class="literal">wait</tt>, <tt class="literal">close</tt> on a pipe, or
<tt class="literal">`command`</tt>). If <tt class="literal">$? &gt;&gt; 8</tt> is 0, it exits
with 255.</p>

<p>Within an <tt class="literal">eval</tt>, the function sets the <tt class="literal">$@</tt> variable to the
error message that would have otherwise been produced, then aborts the
<tt class="literal">eval</tt>, which returns <tt class="literal">undef</tt>.  The <tt class="literal">die</tt> function
can thus be used to raise named exceptions that can be caught at a
higher level in the program.  See <tt class="literal">eval</tt>
later in this chapter.</p>

<p>If <em class="replaceable">LIST</em> is a single object reference, that object is assumed to be
an exception object and is returned unmodified as the exception in <tt class="literal">$@</tt>.</p>

<p>If <em class="replaceable">LIST</em> is empty and <tt class="literal">$@</tt> already contains a string value (typically from
a previous <tt class="literal">eval</tt>) that value is reused after appending
<tt class="literal">"\t...propagated"</tt>.  This is useful for propagating (reraising) exceptions:
<blockquote>
<pre class="programlisting">eval { ... };
die unless $@ =~ /Expected exception/;</pre>
</blockquote>

If <em class="replaceable">LIST</em> is empty and <tt class="literal">$@</tt> already contains an exception object, the
<tt class="literal">$@-&gt;PROPAGATE</tt> method is called to determine how the exception should
be propagated.</p>

<p>If <em class="replaceable">LIST</em> is empty and <tt class="literal">$@</tt>
is empty, then the string <tt class="literal">"Died"</tt> is used.</p>

<p>If the final value of <em class="replaceable">LIST</em> does not end in
a newline (and you're not passing an exception object), the current
script filename, line number, and input line number (if any) are
appended to the message, as well as a newline.  Hint: sometimes
appending <tt class="literal">", stopped"</tt> to your message will
cause it to make better sense when the string <tt class="literal">"at scriptname
line 123"</tt> is appended.  Suppose you are running script
<em class="emphasis">canasta</em>; consider the difference between the
following two ways of dying:
<blockquote>
<pre class="programlisting">die "/usr/games is no good";
die "/usr/games is no good, stopped";</pre>
</blockquote>

which produce, respectively:
<blockquote>
<pre class="programlisting">/usr/games is no good at canasta line 123.
/usr/games is no good, stopped at canasta line 123.</pre>
</blockquote>

If you want your own error messages reporting the filename and
line number, use the <tt class="literal">__FILE__</tt> and <tt class="literal">__LINE__</tt> special tokens:
<blockquote>
<pre class="programlisting">die '"', __FILE__, '", line ', __LINE__, ", phooey on you!\n";</pre>
</blockquote>

This produces output like:
<blockquote>
<pre class="programlisting">"canasta", line 38, phooey on you!</pre>
</blockquote>

One other style issue--consider the following equivalent examples:
<blockquote>
<pre class="programlisting">die "Can't cd to spool: $!\n"   unless chdir '/usr/spool/news';

chdir '/usr/spool/news'         or die "Can't cd to spool: $!\n"</pre>
</blockquote>

Because the important part is the <tt class="literal">chdir</tt>, the
second form is generally preferred.</p>

<p>See also <tt class="literal">exit</tt>, <tt class="literal">warn</tt>, <tt class="literal">%SIG</tt>, and the <tt class="literal">Carp</tt> module.</p>






<h3 class="sect2">29.2.26. do (block)&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">do <em class="replaceable">BLOCK</em>
</pre>
</blockquote>
<a name="INDEX-4729"></a>
The <tt class="literal">do</tt><em class="replaceable">BLOCK</em> form
executes the sequence of statements in the
<em class="replaceable">BLOCK</em> and returns the value of the last
expression evaluated in the block.  When modified by a
<tt class="literal">while</tt> or <tt class="literal">until</tt> statement
modifier, Perl executes the <em class="replaceable">BLOCK</em> once
before testing the loop condition.  (On other statements the loop
modifiers test the conditional first.) The <tt class="literal">do</tt><em class="replaceable">BLOCK</em> itself does <em class="emphasis">not</em>
count as a loop, so the loop control statements
<tt class="literal">next</tt>, <tt class="literal">last</tt>, or
<tt class="literal">redo</tt> cannot be used to leave or restart the
block. See the section "Bare Blocks" in <a href="ch04_01.htm">Chapter 4, "Statements and Declarations"</a>, for workarounds.</p>






<h3 class="sect2">29.2.27. do (file)&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/taintgrey.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">do <em class="replaceable">FILE</em>
</pre>
</blockquote>
<a name="INDEX-4730"></a><a name="INDEX-4731"></a>
The <tt class="literal">do</tt><em class="replaceable">FILE</em> form uses
the value of <em class="replaceable">FILE</em> as a filename and
executes the contents of the file as a Perl script. Its primary use is
(or rather was) to include subroutines from a Perl subroutine library,
so that:
<blockquote>
<pre class="programlisting">do 'stat.pl';</pre>
</blockquote>

is rather like:
<blockquote>
<pre class="programlisting">scalar eval `cat stat.pl`;   # `type stat.pl` on Windows</pre>
</blockquote>

except that <tt class="literal">do</tt> is more efficient, more concise,
keeps track of the current filename for error messages, searches all
the directories listed in the <tt class="literal">@INC</tt> array, and
updates <tt class="literal">%INC</tt> if the file is found.  (See <a href="ch28_01.htm">Chapter 28, "Special Names"</a>.)  It also differs in that code
evaluated with <tt class="literal">do</tt><em class="replaceable">FILE</em>
cannot see lexicals in the enclosing scope, whereas code in
<tt class="literal">eval</tt><em class="replaceable">FILE</em> does.  It's
the same, however, in that it reparses the file every time you call
it--so you might not want to do this inside a loop unless the filename
itself changes at each loop iteration.</p>

<p>If <tt class="literal">do</tt> can't read the file, it returns
<tt class="literal">undef</tt> and sets <tt class="literal">$!</tt> to the error.
If <tt class="literal">do</tt> can read the file but can't compile it, it
returns <tt class="literal">undef</tt> and sets an error message in
<tt class="literal">$@</tt>.  If the file is successfully compiled,
<tt class="literal">do</tt> returns the value of the last expression
evaluated.</p>

<p>Inclusion of library modules (which have a mandatory
<em class="emphasis">.pm</em> suffix) is better done with the
<tt class="literal">use</tt> and <tt class="literal">require</tt> operators, which
also do error checking and raise an exception if there's a problem.
They also offer other benefits: they avoid duplicate loading, help
with object-oriented programming, and provide hints to the compiler on
function prototypes.</p>

<p>But <tt class="literal">do</tt><em class="replaceable">FILE</em> is still
useful for such things as reading program configuration files.  Manual
error checking can be done this way:
<blockquote>
<pre class="programlisting"># read in config files: system first, then user
for $file ("/usr/share/proggie/defaults.rc",
           "$ENV{HOME}/.someprogrc")
{
    unless ($return = do $file) {
        warn "couldn't parse $file: $@" if $@;
        warn "couldn't do $file: $!"    unless defined $return;
        warn "couldn't run $file"       unless $return;
    }
}</pre>
</blockquote>

A long-running daemon could periodically examine the timestamp on
its configuration file, and if the file has changed since it was
last read in, the daemon could use <tt class="literal">do</tt> to reload that file.  This
is more tidily accomplished with <tt class="literal">do</tt> than with <tt class="literal">require</tt> or <tt class="literal">use</tt>.</p>






<h3 class="sect2">29.2.28. do (subroutine)&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarat.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">do <em class="replaceable">SUBROUTINE</em>(<em class="replaceable">LIST</em>)</pre>
</blockquote>
<a name="INDEX-4732"></a><a name="INDEX-4733"></a>
The <tt class="literal">do</tt><em class="replaceable">SUBROUTINE</em><tt class="literal">(</tt><em class="replaceable">LIST</em><tt class="literal">)</tt> is a deprecated form of a
subroutine call.  An exception is raised if the <em class="replaceable">SUBROUTINE</em>
is undefined.  See <a href="ch06_01.htm">Chapter 6, "Subroutines"</a>.</p>






<h3 class="sect2">29.2.29. dump&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">dump <em class="replaceable">LABEL</em>
dump</pre>
</blockquote>
<a name="INDEX-4734"></a><a name="INDEX-4735"></a><a name="INDEX-4736"></a>
This function causes an immediate core dump.  Primarily this is so
that you can use the <em class="emphasis">undump</em> program (not
supplied) to turn your core dump into an executable binary after
having initialized all your variables at the beginning of the program.
When the new binary is executed it will begin by executing a
<tt class="literal">goto</tt><em class="replaceable">LABEL</em> (with all the
restrictions that <tt class="literal">goto</tt> suffers).  Think of it as a
goto with an intervening core dump and reincarnation.  If
<em class="replaceable">LABEL</em> is omitted, the program is restarted
from the top.  Warning: any files opened at the time of the dump will
<em class="emphasis">not</em> be open any more when the program is
reincarnated, with possible resulting confusion on the part of Perl.
See also the <tt class="userinput"><b>-u</b></tt> command-line option in <a href="ch19_01.htm">Chapter 19, "The Command-Line Interface"</a>.</p>

<p>This function is now largely obsolete, partly because it's difficult in
the extreme to convert a core file into an executable in the general
case, and because various compiler backends for generating portable
bytecode and compilable C code have superseded it.</p>

<p>If you're looking to use <tt class="literal">dump</tt> to speed up your
program, check out the discussion of efficiency matters in <a href="ch24_01.htm">Chapter 24, "Common Practices"</a>, as well the Perl native-code
generator in <a href="ch18_01.htm">Chapter 18, "Compiling"</a>.  You might also
consider autoloading or selfloading, which at least make your program
<em class="emphasis">appear</em> to run faster.</p>






<h3 class="sect2">29.2.30. each&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">each <em class="replaceable">HASH</em>
</pre>
</blockquote>
<a name="INDEX-4737"></a><a name="INDEX-4738"></a><a name="INDEX-4739"></a>
This function steps through a hash one key/value pair at a time.  When
called in list context, <tt class="literal">each</tt> returns a two-element
list consisting of the key and value for the next element of a hash,
so that you can iterate over it.  When called in scalar context,
<tt class="literal">each</tt> returns just the key for the next element in
the hash.  When the hash is entirely read, the empty list is returned,
which when assigned produces a false value in scalar context, such as a loop
test.  The next call to <tt class="literal">each</tt> after that will start
iterating again.  The typical use is as follows, using predefined
<tt class="literal">%ENV</tt> hash:
<blockquote>
<pre class="programlisting">while (($key,$value) = each %ENV) {
    print "$key=$value\n";
}</pre>
</blockquote>

Internally, a hash maintains its own entries in an apparently random
order.  The <tt class="literal">each</tt> function iterates through this sequence because
every hash remembers which entry was last returned.  The actual
ordering of this sequence is subject to change in future versions
of Perl, but is guaranteed to be in the same order as the
<tt class="literal">keys</tt> (or <tt class="literal">values</tt>) function would produce on the same (unmodified)
hash.</p>

<p>There is a single iterator for each hash, shared by all <tt class="literal">each</tt>,
<tt class="literal">keys</tt>, and <tt class="literal">values</tt> function calls in the program; it can be
reset by reading all the elements from the hash, or by evaluating
<tt class="literal">keys %hash</tt> or <tt class="literal">values %hash</tt>.  If you add or delete elements
of a hash while you're iterating over it, the resulting behavior
is not well-defined: entries might get skipped or duplicated.</p>

<p>See also <tt class="literal">keys</tt>, <tt class="literal">values</tt>, and <tt class="literal">sort</tt>.</p>






<h3 class="sect2">29.2.31. eof&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">eof <em class="replaceable">FILEHANDLE</em>
eof()
eof</pre>
</blockquote>
<a name="INDEX-4740"></a><a name="INDEX-4741"></a><a name="INDEX-4742"></a>
This function returns true if the next read on <em class="replaceable">FILEHANDLE</em> would
return end-of-file, or if <em class="replaceable">FILEHANDLE</em> is not open. <em class="replaceable">FILEHANDLE</em> may
be an expression whose value gives the real filehandle, or a reference
to a filehandle object of some sort.  An <tt class="literal">eof</tt>
without an argument returns the end-of-file status for the last file
read.  An <tt class="literal">eof()</tt> with empty parentheses <tt class="literal">()</tt> tests the <tt class="literal">ARGV</tt>
filehandle (most commonly seen as the null filehandle in <tt class="literal">&lt;&gt;</tt>).
Therefore, inside a <tt class="literal">while (&lt;&gt;)</tt> loop, an <tt class="literal">eof()</tt> with parentheses
will detect the end of only the last of a group of files.  Use <tt class="literal">eof</tt> (without the parentheses) to test <em class="emphasis">each</em> file
in a <tt class="literal">while (&lt;&gt;)</tt> loop.  For example, the following code inserts
dashes just before the last line of the <em class="emphasis">last</em> file:
<blockquote>
<pre class="programlisting">while (&lt;&gt;) {
    if (eof()) {
        print "-" x 30, "\n";
    }
    print;
}</pre>
</blockquote>

On the other hand, this script resets line numbering on <em class="emphasis">each</em> input
file:
<blockquote>
<pre class="programlisting"># reset line numbering on each input file
while (&lt;&gt;) {
    next if /^\s*#/;        # skip comments
    print "$.\t$_";
} continue {
    close ARGV if eof;      # Not eof()!
}</pre>
</blockquote>

Like "<tt class="literal">$</tt>" in a <em class="emphasis">sed</em> program, <tt class="literal">eof</tt> tends to show up in line number
ranges.  Here's a script that prints lines from <tt class="literal">/pattern/</tt> to end of
each input file:
<blockquote>
<pre class="programlisting">while (&lt;&gt;) {
    print if /pattern/ .. eof;
}</pre>
</blockquote>

Here, the flip-flop operator (<tt class="literal">..</tt>) evaluates the pattern match for each line.  Until the pattern matches, the
operator returns false.  When it finally matches, the operator
starts returning true, causing the lines to be printed.  When the
<tt class="literal">eof</tt> operator finally returns true (at the end of the file being
examined), the flip-flop operator resets, and starts returning false
again for the next file in <tt class="literal">@ARGV</tt>.</p>

<p>Warning: The <tt class="literal">eof</tt> function reads a byte and then pushes it
back on the input stream with <em class="emphasis">ungetc</em>(3), so it is not useful in
an interactive context. In fact, experienced Perl programmers rarely use
<tt class="literal">eof</tt>, since the various input operators already behave politely in
<tt class="literal">while</tt>-loop conditionals.  See the example in the description of
<tt class="literal">foreach</tt> in <a href="ch04_01.htm">Chapter 4, "Statements and Declarations"</a>.</p>






<h3 class="sect2">29.2.32. eval&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">eval <em class="replaceable">BLOCK</em>
eval <em class="replaceable">EXPR</em>
eval</pre>
</blockquote>
<a name="INDEX-4743"></a><a name="INDEX-4744"></a><a name="INDEX-4745"></a><a name="INDEX-4746"></a>
The <tt class="literal">eval</tt> keyword serves two distinct but related purposes in Perl.
These purposes are represented by two forms of syntax, <tt class="literal">eval</tt><em class="replaceable">BLOCK</em>
and <tt class="literal">eval</tt><em class="replaceable">EXPR</em>.  The first form traps run-time exceptions (errors) that
would otherwise prove fatal, similar to the "try block" construct in
C++ or Java.  The second form compiles and executes little bits of code
on the fly at run time, and also (conveniently) traps any
exceptions just like the first form.  But the second form runs much
slower than the first form, since it must parse the string every time.  On
the other hand, it is also more general.  Whichever form you use,
<tt class="literal">eval</tt> is the preferred way to do all exception handling in Perl.</p>

<p>For either form of <tt class="literal">eval</tt>,
the value returned from an <tt class="literal">eval</tt> is the value of the last expression
evaluated, just as with subroutines.  Similarly, you may use the
<tt class="literal">return</tt> operator to return a value from the middle of the <tt class="literal">eval</tt>.
The expression providing the return value is evaluated in void,
scalar, or list context, depending on the context of the <tt class="literal">eval</tt> itself.
See <tt class="literal">wantarray</tt> for more on how the evaluation context can be
determined.</p>

<p>If there is a trappable error (including any produced by the <tt class="literal">die</tt>
operator), <tt class="literal">eval</tt> returns <tt class="literal">undef</tt> and puts the error
message (or object) in <tt class="literal">$@</tt>. If there is no error, <tt class="literal">$@</tt> is guaranteed
to be set to the null string, so you can test it reliably afterward for
errors.  A simple Boolean test suffices:
<blockquote>
<pre class="programlisting">eval { ... };    # trap run-time errors
if ($@) { ... }    # handle error</pre>
</blockquote>

The <tt class="literal">eval</tt><em class="replaceable">BLOCK</em> form is
syntax-checked at compile time, so it is quite efficient.  (People
familiar with the slow <tt class="literal">eval</tt><em class="replaceable">EXPR</em> form are occasionally confused on this
issue.)  Since the code in the <em class="replaceable">BLOCK</em> is
compiled at the same time as the surrounding code, this form of
<tt class="literal">eval</tt> cannot trap syntax errors.</p>

<p>The <tt class="literal">eval</tt><em class="replaceable">EXPR</em> form can
trap syntax errors because it parses the code at run time.  (If the
parse is unsuccessful, it places the parse error in
<tt class="literal">$@</tt>, as usual.)  Otherwise, it executes the value of
<em class="replaceable">EXPR</em> as though it were a little Perl
program.  The code is executed in the context of the current Perl
program, which means that it can see any enclosing lexicals from a
surrounding scope, and that any non-local variable settings remain in
effect after the <tt class="literal">eval</tt> is complete, as do any
subroutine or format definitions.  The code of the
<tt class="literal">eval</tt> is treated as a block, so any locally scoped
variables declared within the <tt class="literal">eval</tt> last only until
the <tt class="literal">eval</tt> is done. (See <tt class="literal">my</tt> and
<tt class="literal">local</tt>.)  As with any code in a block, a final
semicolon is not required.</p>

<p>Here is a simple Perl shell.  It prompts the user to enter
a string of arbitrary Perl code, compiles and executes that string,
and prints whatever error occurred:
<blockquote>
<pre class="programlisting">print "\nEnter some Perl code: ";

while (&lt;STDIN&gt;) {
    eval;
    print $@;
    print "\nEnter some more Perl code: ";
}</pre>
</blockquote>
<a name="INDEX-4747"></a>
Here is a <em class="emphasis">rename</em> program to do a mass renaming of
files using a Perl expression:
<blockquote>
<pre class="programlisting">#!/usr/bin/perl
# rename - change filenames
$op = shift;
for (@ARGV) {
    $was = $_;
    eval $op;
    die if $@;
    # next line calls the built-in function, not the script by the same name
    rename($was,$_) unless $was eq $_;
}</pre>
</blockquote>

You'd use that program like this:
<blockquote>
<pre class="programlisting">$ rename 's/\.orig$//'                *.orig
$ rename 'y/A-Z/a-z/ unless /^Make/'  *
$ rename '$_ .= ".bad"'               *.f</pre>
</blockquote>

Since <tt class="literal">eval</tt> traps errors that would otherwise prove fatal, it is
useful for determining whether particular features (such as <tt class="literal">fork</tt> or
<tt class="literal">symlink</tt>) are implemented.</p>

<p>Because <tt class="literal">eval</tt><em class="replaceable">BLOCK</em> is syntax-checked at compile time, any syntax
error is reported earlier.  Therefore, if your code is invariant and
both <tt class="literal">eval</tt><em class="replaceable">EXPR</em> and <tt class="literal">eval</tt><em class="replaceable">BLOCK</em> will suit your purposes
equally well, the <em class="replaceable">BLOCK</em> form is preferred.  For example:
<blockquote>
<pre class="programlisting"># make divide-by-zero nonfatal
eval { $answer = $a / $b; };    warn $@ if $@;

# same thing, but less efficient if run multiple times
eval '$answer = $a / $b';       warn $@ if $@;

# a compile-time syntax error (not trapped)
eval { $answer = };             # WRONG

# a run-time syntax error
eval '$answer =';               # sets $@</pre>
</blockquote>

Here, the code in the <em class="replaceable">BLOCK</em> has to be valid Perl code to make it past
the compile phase.  The code in the <em class="replaceable">EXPR</em> doesn't get examined
until run time, so it doesn't cause an error until run time.</p>

<p>The block of <tt class="literal">eval</tt><em class="replaceable">BLOCK</em> does <em class="emphasis">not</em> count as a loop, so the loop
control statements <tt class="literal">next</tt>, <tt class="literal">last</tt>, or <tt class="literal">redo</tt> cannot be used to leave
or restart the block.</p>






<h3 class="sect2">29.2.33. exec&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">exec <em class="replaceable">PATHNAME</em> <em class="replaceable">LIST</em>
exec <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-4748"></a><a name="INDEX-4749"></a><a name="INDEX-4750"></a><a name="INDEX-4751"></a>
The <tt class="literal">exec</tt> function terminates the current program and executes
an external command <em class="emphasis">and never returns!!!</em>  Use <tt class="literal">system</tt> instead of
<tt class="literal">exec</tt> if you want to recover control after the commands exits.
The <tt class="literal">exec</tt> function fails and returns false only if the command does not exist
<em class="emphasis">and</em> if it is executed directly instead of via your system's command
shell (discussed below).</p>

<p>If there is only one scalar argument, the argument is checked for shell
metacharacters.  If metacharacters are found, the entire argument is
passed to the system's standard command interpreter (<em class="emphasis">/bin/sh</em>
under
Unix).  If there are no metacharacters, the argument is split into
words and executed directly, since in the interests of efficiency this
bypasses all the overhead of shell processing.  It also gives you more
control of error recovery should the program not exist.</p>

<p>If there is more than one argument in <em class="replaceable">LIST</em>, or if <em class="replaceable">LIST</em> is an
array with more than one value, the system shell will never be used.
This also bypasses any shell processing of the command.  The presence
or absence of metacharacters in the arguments doesn't affect this
list-triggered behavior, which makes it the preferred form in
security-conscious programs that do not wish to expose themselves to
potential shell escapes.</p>

<p>This example causes the currently running Perl program to replace
itself with the <em class="emphasis">echo</em> program, which then prints out the current
argument list:
<blockquote>
<pre class="programlisting">exec 'echo', 'Your arguments are: ', @ARGV;</pre>
</blockquote>

This example shows that you can <tt class="literal">exec</tt> a pipeline, not just a
single program.
<blockquote>
<pre class="programlisting">exec "sort $outfile | uniq"
    or die "Can't do sort/uniq: $!\n";</pre>
</blockquote>

Ordinarily, <tt class="literal">exec</tt> never returns--if it does return,
it always returns false, and you should check <tt class="literal">$!</tt> to
find out what went wrong.  Be aware that in older releases of Perl,
<tt class="literal">exec</tt> (and <tt class="literal">system</tt>) did not flush
your output buffer, so you needed to enable command buffering by
setting <tt class="literal">$|</tt> on one or more filehandles to avoid lost
output in the case of <tt class="literal">exec</tt>, or misordered output in
the case of <tt class="literal">system</tt>.  This situation was largely
remedied in the 5.6 release of Perl.</p>

<p>
<a name="INDEX-4752"></a>
When you ask the operating system to execute a new program within an
existing process (as Perl's <tt class="literal">exec</tt> function does),
you tell the system the location of the program to execute, but you
also tell the new program (through its first argument) the name under
which the program was invoked.  Customarily, the name you tell it is
just a copy of the location of the program, but it doesn't necessarily
have to be, since there are two separate arguments at the level of the
C language.  When it is not a copy, you have the odd result that the
new program thinks it's running under a name that may be totally
different from the actual pathname where the program resides.  Often
this doesn't matter to the program in question, but some programs do
care and adopt a different persona depending on what they think their
name is.  For example, the <em class="emphasis">vi</em> editor looks to see
whether it was called as "<tt class="literal">vi</tt>" or as
"<tt class="literal">view</tt>".  If invoked as "<tt class="literal">view</tt>",
it automatically enables read-only mode, just as though it was called
with the <tt class="userinput"><b>-R</b></tt> command-line option.</p>

<p>This is where <tt class="literal">exec</tt>'s optional
<em class="replaceable">PATHNAME</em> parameter comes into play.
Syntactically, it goes in the indirect-object slot like the filehandle
for <tt class="literal">print</tt> or <tt class="literal">printf</tt>.  Therefore,
it doesn't take a comma after it, because it's not exactly part of the
argument list.  (In a sense, Perl takes the opposite approach from the
operating system in that it assumes the first argument is the
important one, and lets you modify the pathname if it differs.)  For
example:
<blockquote>
<pre class="programlisting">$editor = "/usr/bin/vi";
exec $editor "view", @files      # trigger read-only mode
    or die "Couldn't execute $editor: $!\n";</pre>
</blockquote>

As with any other indirect object, you can also replace the simple scalar holding the program name with a
block containing arbitrary code, which simplifies the previous example to:
<blockquote>
<pre class="programlisting">exec { "/usr/bin/vi" } "view" @files      # trigger read-only mode
    or die "Couldn't execute $editor: $!\n";</pre>
</blockquote>

As we mentioned earlier, <tt class="literal">exec</tt> treats a discrete list of arguments as an indication that it should bypass shell processing.  However, there is one place where you might still get
tripped up.  The <tt class="literal">exec</tt> call (and <tt class="literal">system</tt>, too) will not distinguish
between a single scalar argument and an array containing only one
element.
<blockquote>
<pre class="programlisting">@args = ("echo surprise");  # just one element in list
exec @args                  # still subject to shell escapes
     or die "exec: $!";     #   because @args == 1</pre>
</blockquote>

To avoid this, you can use the <em class="replaceable">PATHNAME</em> syntax, explicitly
duplicating the first argument as the pathname, which forces the rest
of the arguments to be interpreted as a list, even if there is only one
of them:
<blockquote>
<pre class="programlisting">exec { $args[0] } @args   # safe even with one-argument list
    or die "can't exec @args: $!";</pre>
</blockquote>

The first version, the one without the curlies, runs the <em class="emphasis">echo</em>
program, passing it "<tt class="literal">surprise</tt>" as an argument.  The second version
doesn't--it tries to run a program literally called <em class="emphasis">echo surprise</em>,
doesn't find it (we hope), and sets <tt class="literal">$!</tt> to a nonzero value indicating failure.</p>

<p>Because the <tt class="literal">exec</tt> function is most often used
shortly after a <tt class="literal">fork</tt>, it is assumed that anything
that normally happens when a Perl process terminates should be
skipped.  Upon an <tt class="literal">exec</tt>, Perl will not call your
<tt class="literal">END</tt> blocks, nor will it call any
<tt class="literal">DESTROY</tt> methods associated with any objects.
Otherwise, your child process would end up doing the cleanup you
expected the parent process to do.  (We wish that were the case in
real life.)</p>

<p>Because it's such a common mistake to use <tt class="literal">exec</tt>
instead of <tt class="literal">system</tt>, Perl warns you if there is a
following statement that isn't <tt class="literal">die</tt>,
<tt class="literal">warn</tt>, or <tt class="literal">exit</tt> when run with the
popular <tt class="userinput"><b>-w</b></tt> command-line option, or if you've
used the <tt class="literal">use warnings qw(exec syntax)</tt> pragma.  If
you really want to follow an <tt class="literal">exec</tt> with some other
statement, you can use either of these styles to avoid the warning:
<blockquote>
<pre class="programlisting">exec ('foo')   or print STDERR "couldn't exec foo: $!";
{ exec ('foo') }; print STDERR "couldn't exec foo: $!";</pre>
</blockquote>

As the second line above shows, a call to <tt class="literal">exec</tt> that
is the last statement in a block is exempt from this warning.</p>

<p>See also <tt class="literal">system</tt>.</p>






<h3 class="sect2">29.2.34. exists&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">exists <em class="replaceable">EXPR</em>
</pre>
</blockquote>
<a name="INDEX-4753"></a><a name="INDEX-4754"></a><a name="INDEX-4755"></a>
This function returns true if the specified hash key or array index
exists in its hash or array.  It doesn't matter whether the corresponding
value is true or false, or whether the value is even defined.
<blockquote>
<pre class="programlisting">print "True\n"      if         $hash{$key};
print "Defined\n"   if defined $hash{$key};
print "Exists\n"    if exists  $hash{$key};

print "True\n"      if         $array[$index];
print "Defined\n"   if defined $array[$index];
print "Exists\n"    if exists  $array[$index];</pre>
</blockquote>

An element can be true only if it's defined, and can be defined
only if it exists, but the reverse doesn't necessarily hold.</p>

<p>
<em class="replaceable">EXPR</em> can be arbitrarily complicated,
provided that the final operation is a hash key or array index lookup:
<blockquote>
<pre class="programlisting">if (exists $hash{A}{B}{$key}) { ... }</pre>
</blockquote>
<a name="INDEX-4756"></a>
Although the last element will not spring into existence just because
its existence was tested, intervening ones will.  Thus
<tt class="literal">$$hash{"A"}</tt> and
<tt class="literal">$hash{"A"}-&gt;{"B"}</tt> will both spring into
existence.  This is not a function of <tt class="literal">exists</tt>,
<em class="emphasis">per se</em>; it happens anywhere the arrow
operator is used (explicitly or implicitly):
<blockquote>
<pre class="programlisting">undef $ref;
if (exists $ref-&gt;{"Some key"}) { }
print $ref;   # prints HASH(0x80d3d5c)</pre>
</blockquote>

Even though the <tt class="literal">"Some key"</tt> element didn't spring into existence, the
previously undefined <tt class="literal">$ref</tt> variable did suddenly come to hold an
anonymous hash.  This is a surprising instance of <em class="emphasis">autovivification</em>
in what does not at first--or even second--glance appear to be an
lvalue context.  This behavior is likely to be fixed in a future
release.  As a workaround, you can nest your calls:
<blockquote>
<pre class="programlisting">if ($ref                        and
    exists $ref-&gt;[$x]           and
    exists $ref-&gt;[$x][$y]       and
    exists $ref-&gt;[$x][$y]{$key} and
    exists $ref-&gt;[$x][$y]{$key}[2] ) { ... }</pre>
</blockquote>

If <em class="replaceable">EXPR</em> is the name of a subroutine, the <tt class="literal">exists</tt> function will return
true if that subroutine has been declared, even if it has not yet been
defined.  The following will just print "<tt class="literal">Exists</tt>":
<blockquote>
<pre class="programlisting">sub flub;
print "Exists\n"     if exists  &amp;flub;
print "Defined\n"    if defined &amp;flub;</pre>
</blockquote>

Using <tt class="literal">exists</tt> on a subroutine name can be useful for an <tt class="literal">AUTOLOAD</tt>
subroutine that needs to know whether a particular package wants a particular subroutine to be defined.  The package can indicate this by
declaring a stub <tt class="literal">sub</tt> like <tt class="literal">flub</tt>.</p>






<h3 class="sect2">29.2.35. exit&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">exit <em class="replaceable">EXPR</em>
exit</pre>
</blockquote>
<a name="INDEX-4757"></a><a name="INDEX-4758"></a><a name="INDEX-4759"></a>
This function evaluates <em class="replaceable">EXPR</em> as an integer and exits immediately
with that value as the final error status of the program.  If <em class="replaceable">EXPR</em> is
omitted, the function exits with <tt class="literal">0</tt> status (meaning "no error").
Here's a fragment that lets a user exit the program by typing <tt class="literal">x</tt> or <tt class="literal">X</tt>:
<blockquote>
<pre class="programlisting">$ans = &lt;STDIN&gt;;
exit if $ans =~ /^[Xx]/;</pre>
</blockquote>
<a name="INDEX-4760"></a>
You shouldn't use <tt class="literal">exit</tt> to abort a subroutine if there's any chance
that someone might want to trap whatever error happened.  Use <tt class="literal">die</tt>
instead, which can be trapped by an <tt class="literal">eval</tt>.  Or use one of <tt class="literal">die</tt>'s
wrappers from the <tt class="literal">Carp</tt> module, like <tt class="literal">croak</tt> or <tt class="literal">confess</tt>.</p>

<p>We said that the <tt class="literal">exit</tt> function exits immediately, but that was a
bald-faced lie.  It exits as soon as possible, but first it calls any
defined <tt class="literal">END</tt> routines for at-exit handling.  These routines cannot
abort the exit, although they can change the eventual exit value by
setting the <tt class="literal">$?</tt> variable.  Likewise, any class that defines
a <tt class="literal">DESTROY</tt> method will invoke that method on behalf of all its
objects before the real program exits.  If you really need to bypass
exit processing, you can call the <tt class="literal">POSIX</tt> module's <tt class="literal">_exit</tt> function
to avoid all <tt class="literal">END</tt> and destructor processing.  And if <tt class="literal">POSIX</tt> isn't
available, you can <tt class="literal">exec "/bin/false"</tt> or some such.</p>






<h3 class="sect2">29.2.36. exp&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">exp <em class="replaceable">EXPR</em>
exp</pre>
</blockquote>
<a name="INDEX-4761"></a>
This function returns <em class="emphasis">e</em> to the power of <em class="replaceable">EXPR</em>.  To get the value
of <em class="emphasis">e</em>, just use <tt class="literal">exp(1)</tt>.  For general exponentiation of different
bases, use the <tt class="literal">**</tt> operator we stole from FORTRAN:
<blockquote>
<pre class="programlisting">use Math::Complex;
print -exp(1) ** (i * pi);   # prints 1</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.37. fcntl&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xro.gif"> <img src="figs/xt.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">fcntl <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">FUNCTION</em>, <em class="replaceable">SCALAR</em>
</pre>
</blockquote>
<a name="INDEX-4762"></a><a name="INDEX-4763"></a>
This function calls your operating system's file control functions,
as documented in the <em class="emphasis">fcntl</em>(2) manpage.  Before you call <tt class="literal">fcntl</tt>,
you'll probably first have to say:
<blockquote>
<pre class="programlisting">use Fcntl;</pre>
</blockquote>

to load the correct constant definitions.</p>

<p>
<em class="replaceable">SCALAR</em> will be read or written (or both) depending on the
<em class="replaceable">FUNCTION</em>.  A pointer to the string value of <em class="replaceable">SCALAR</em> will be
passed as the third argument of the actual <em class="emphasis">fcntl</em> call.  (If
<em class="replaceable">SCALAR</em> has no string value but does have a numeric value, that
value will be passed directly rather than passing a pointer to the string
value.) See the <tt class="literal">Fcntl</tt> module for a description of the more common
permissible values for <em class="replaceable">FUNCTION</em>.</p>

<p>The <tt class="literal">fcntl</tt> function will raise an exception if used
on a system that doesn't implement
<em class="emphasis">fcntl</em>(2).  On systems that do implement
it, you can do such things as modify the close-on-exec flags (if you
don't want to play with the <tt class="literal">$^F</tt>
(<tt class="literal">$SYSTEM_FD_MAX</tt>) variable), modify the nonblocking
I/O flags, emulate the <em class="emphasis">lockf</em>(3) function,
and arrange to receive the <tt class="literal">SIGIO</tt> signal when I/O is
pending.</p>

<p>Here's an example of setting a filehandle named
<tt class="literal">REMOTE</tt> to be nonblocking at the system level.  This
makes any input operation return immediately if nothing is available
when reading from a pipe, socket, or serial line that would otherwise
block.  It also works to cause output operations that normally would
block to return a failure status instead.  (For those, you'll likely
have to negotiate <tt class="literal">$|</tt> as well.)
<blockquote>
<pre class="programlisting">use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);

$flags = fcntl(REMOTE, F_GETFL, 0)
            or die "Can't get flags for the socket: $!\n";

$flags = fcntl(REMOTE, F_SETFL, $flags | O_NONBLOCK)
            or die "Can't set flags for the socket: $!\n";</pre>
</blockquote>

The return value of <tt class="literal">fcntl</tt> (and <tt class="literal">ioctl</tt>) is as follows:</p>

<a name="perl3-tab-fcntl-returns"></a>
<table border="1">

<tr>
<th>Syscall Returns</th>
<th>Perl Returns</th>
</tr>




<tr>
<td><tt class="literal">-1</tt></td>
<td><tt class="literal">undef</tt></td>
</tr>

<tr>
<td><tt class="literal">0</tt></td>
<td>String "<tt class="literal">0 but true</tt>"</td>
</tr>

<tr>
<td>anything else</td>
<td>That number</td>
</tr>


</table>
<p>Thus Perl returns true on success and false on failure, yet you can
still easily determine the actual value returned by the operating
system:
<blockquote>
<pre class="programlisting">$retval = fcntl(...) || -1;
printf "fcntl actually returned %d\n", $retval;</pre>
</blockquote>
<a name="INDEX-4764"></a>
Here, even the string "<tt class="literal">0 but true</tt>" prints as 0, thanks to the <tt class="literal">%d</tt>
format.  This string is true in Boolean context and <tt class="literal">0</tt>
in numeric context.  (It is also happily exempt from the normal warnings
on improper numeric conversions.)</p>






<h3 class="sect2">29.2.38. fileno&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">fileno <em class="replaceable">FILEHANDLE</em>
</pre>
</blockquote>
<a name="INDEX-4765"></a><a name="INDEX-4766"></a><a name="INDEX-4767"></a><a name="INDEX-4768"></a>
This function returns the file descriptor underlying a filehandle.
If the filehandle is not open, <tt class="literal">fileno</tt> returns <tt class="literal">undef</tt>.  A <em class="emphasis">file descriptor</em> is a small, non-negative integer like 0 or 1, in contrast
to filehandles like <tt class="literal">STDIN</tt> and <tt class="literal">STDOUT</tt>, which are symbols.
Unfortunately, the operating system doesn't know about your cool
symbols.  It only thinks of open files in terms of these small file
numbers, and although Perl will usually do the translations for you
automatically, occasionally you have to know the actual file descriptor.</p>

<p>So, for example, the <tt class="literal">fileno</tt> function is useful for
constructing bitmaps for <tt class="literal">select</tt> and for passing to certain
obscure system calls if <em class="emphasis">syscall</em>(2) is implemented.  It's also
useful for double-checking that the <tt class="literal">open</tt> function gave you the
file descriptor you wanted and for determining whether two filehandles
use the same system file descriptor.
<blockquote>
<pre class="programlisting">if (fileno(THIS) == fileno(THAT)) {
    print "THIS and THAT are dups\n";
}</pre>
</blockquote>

If <em class="replaceable">FILEHANDLE</em> is an expression, the value is taken as an indirect
filehandle, generally its name or a reference to something resembling
a filehandle object.</p>

<p>
<a name="INDEX-4769"></a><a name="INDEX-4770"></a><a name="INDEX-4771"></a><a name="INDEX-4772"></a><a name="INDEX-4773"></a><a name="INDEX-4774"></a><a name="INDEX-4775"></a><a name="INDEX-4776"></a>
One caution: don't count on the association of a Perl filehandle and a
numeric file descriptor throughout the life of the program.  If a file
has been closed and reopened, the file descriptor may change.  Perl
takes a bit of trouble to try to ensure that certain file descriptors
won't be lost if an <tt class="literal">open</tt> on them fails, but it only does this for
file descriptors that don't exceed the current value of the special <tt class="literal">$^F</tt> (<tt class="literal">$SYSTEM_FD_MAX</tt>) variable (by default, 2).  Although
filehandles <tt class="literal">STDIN</tt>, <tt class="literal">STDOUT</tt>, and <tt class="literal">STDERR</tt> start out with file
descriptors of 0, 1, and 2 (the Unix standard convention), even they
can change if you start closing and opening them with wild abandon.
You can't get into trouble with 0, 1, and 2 as long as you always
reopen immediately after closing. The basic rule on Unix systems
is to pick the lowest available descriptor, and that'll be the one you
just closed.</p>






<h3 class="sect2">29.2.39. flock&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">flock <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">OPERATION</em>
</pre>
</blockquote>
<a name="INDEX-4777"></a><a name="INDEX-4778"></a>
The <tt class="literal">flock</tt> function is Perl's portable file-locking interface,
although it locks only entire files, not records.  The function manages
locks on the file associated with <em class="replaceable">FILEHANDLE</em>, returning true for
success and false otherwise.  To avoid the possibility of lost data,
Perl flushes your <em class="replaceable">FILEHANDLE</em> before locking or unlocking it.  Perl
might implement its <tt class="literal">flock</tt> in terms of <em class="emphasis">flock</em>(2), <em class="emphasis">fcntl</em>(2),
<em class="emphasis">lockf</em>(3), or some other platform-specific lock mechanism, but if
none of these is available, calling <tt class="literal">flock</tt> raises an exception. See the section "File Locking" in <a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a>.</p>

<p>
<em class="replaceable">OPERATION</em> is one of <tt class="literal">LOCK_SH</tt>, <tt class="literal">LOCK_EX</tt>, or <tt class="literal">LOCK_UN</tt>,
possibly ORed with <tt class="literal">LOCK_NB</tt>.  These constants are traditionally
valued <tt class="literal">1</tt>, <tt class="literal">2</tt>, <tt class="literal">8</tt>, and <tt class="literal">4</tt>, but you can use the symbolic names if you
import them from the <tt class="literal">Fcntl</tt> module, either individually or as a
group using the <tt class="literal">:flock</tt> tag.</p>

<p>
<tt class="literal">LOCK_SH</tt> requests a shared lock, so it's typically used for reading.
<tt class="literal">LOCK_EX</tt> requests an exclusive lock, so it's typically used for
writing. <tt class="literal">LOCK_UN</tt> releases a previously requested lock; closing the
file also releases any locks.  If the <tt class="literal">LOCK_NB</tt> bit is used with
<tt class="literal">LOCK_SH</tt> or <tt class="literal">LOCK_EX</tt>, <tt class="literal">flock</tt> returns immediately rather than
waiting for an unavailable lock.  Check the return status to see
whether you got the lock you asked for.  If you don't use <tt class="literal">LOCK_NB</tt>,
you might wait indefinitely for the lock to be granted.</p>

<p>Another nonobvious but traditional aspect of <tt class="literal">flock</tt> is
that its locks are <em class="emphasis">merely advisory</em>.  Discretionary locks are more flexible
but offer fewer guarantees than mandatory ones.  This means that
files locked with <tt class="literal">flock</tt> may be modified by programs that do not
also use <tt class="literal">flock</tt>.  Cars that stop for red lights get on well with
each other, but not with cars that don't stop for red lights.  Drive
defensively.</p>

<p>Some implementations of <tt class="literal">flock</tt> cannot lock things over the network.
While you could in theory use the more system-specific <tt class="literal">fcntl</tt> for
that, the jury (having sequestered itself on the case for a decade or
so) is still out on whether this is (or even can be) reliable.</p>

<p>Here's a mailbox appender for Unix systems that use <em class="emphasis">flock</em>(2)
to lock mailboxes:
<blockquote>
<pre class="programlisting">use Fcntl qw/:flock/;       # import LOCK_* constants
sub mylock {
    flock(MBOX, LOCK_EX)
        or die "can't lock mailbox: $!";
    # in case someone appended while we were waiting
    # and our stdio buffer is out of sync
    seek(MBOX, 0, 2)
        or die "can't seek to the end of mailbox: $!";
}

open(MBOX, "&gt;&gt;/usr/spool/mail/$ENV{'USER'}")
    or die "can't open mailbox: $!";

mylock();
print MBOX $msg, "\n\n";
close MBOX
    or die "can't close mailbox: $!";</pre>
</blockquote>
<a name="INDEX-4779"></a>
On systems that support a real <em class="emphasis">flock</em>(2)
syscall, locks are inherited across <tt class="literal">fork</tt> calls.
Other implementations are not so lucky, and are likely to lose the
locks across forks.  See also the <tt class="literal">DB_File</tt> module in
<a href="ch32_01.htm">Chapter 32, "Standard Modules"</a> for other
<tt class="literal">flock</tt> examples.</p>






<h3 class="sect2">29.2.40. fork&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">fork</pre>
</blockquote>
<a name="INDEX-4780"></a><a name="INDEX-4781"></a><a name="INDEX-4782"></a><a name="INDEX-4783"></a><a name="INDEX-4784"></a>
This function creates two processes out of one by invoking the
<em class="emphasis">fork</em>(2) syscall.  If it succeeds, the function returns the new
child process's ID to the parent process and 0 to the child process.
If the system doesn't have sufficient resources to allocate a new
process, the call fails and returns <tt class="literal">undef</tt>.  File
descriptors (and sometimes locks on those descriptors) are shared,
while everything else is copied--or at least made to look that way.</p>

<p>
<a name="INDEX-4785"></a>
In versions of Perl prior to 5.6, unflushed buffers remain unflushed in
both processes, which means you may need to set <tt class="literal">$|</tt> on one or more
filehandles earlier in the program to avoid duplicate output.</p>

<p>A nearly bulletproof way to launch a child process while checking for
"cannot fork" errors would be:
<blockquote>
<pre class="programlisting">use Errno qw(EAGAIN);
FORK: {
    if ($pid = fork) {
        # parent here
        # child process pid is available in $pid
    }
        elsif (defined $pid) { # $pid is zero here if defined
        # child here
        # parent process pid is available with getppid
    }
        elsif ($! == EAGAIN) {
        # EAGAIN is the supposedly recoverable fork error
        sleep 5;
        redo FORK;
    }
        else {
        # weird fork error
        die "Can't fork: $!\n";
    }
}</pre>
</blockquote>
<a name="INDEX-4786"></a>
These precautions are not necessary on operations that do an implicit
<em class="emphasis">fork</em>(2), such as
<tt class="literal">system</tt>, backticks, or opening a process as a
filehandle, because Perl automatically retries a fork on a temporary
failure when it's doing the <tt class="literal">fork</tt> for you.  Be
careful to end the child code with an <tt class="literal">exit</tt>, or else
your child will inadvertently leave the conditional block and start
executing code intended only for the parent process.</p>

<p>If you <tt class="literal">fork</tt> without ever waiting on your children,
you will accumulate zombies (exited processes whose parents haven't
waited on them yet).  On some systems, you can avoid this by setting
<tt class="literal">$SIG{CHLD}</tt> to <tt class="literal">"IGNORE"</tt>; on most,
you must <tt class="literal">wait</tt> for your moribund children.  See the
<tt class="literal">wait</tt> function for examples of doing this, or see
the "Signals" section of <a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a> for more on
<tt class="literal">SIGCHLD</tt>.</p>

<p>If a forked child inherits system file descriptors like
<tt class="literal">STDIN</tt> and <tt class="literal">STDOUT</tt> that are
connected to a remote pipe or socket, you may have to reopen these in
the child to <em class="emphasis">/dev/null</em>.  That's because even when
the parent process exits, the child will live on with its copies of
those filehandles.  The remote server (such as, say, a CGI script or a
background job launched from a remote shell) will appear to hang
because it's still waiting for all copies to be closed.  Reopening the
system filehandles to something else fixes this.</p>

<p>On most systems supporting <em class="emphasis">fork</em>(2), great
care has gone into making it extremely efficient (for example, using
copy-on-write technology on data pages), making it the dominant
paradigm for multitasking over the last few decades.  The
<tt class="literal">fork</tt> function is unlikely to be implemented
efficiently, or perhaps at all, on systems that don't resemble Unix.
For example, Perl 5.6 emulates a proper <tt class="literal">fork</tt> even
on Microsoft systems, but no assurances can be made on performance at
this point.  You might have more luck there with the
<tt class="literal">Win32::Process</tt> module.</p>






<h3 class="sect2">29.2.41. format&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">format <em class="replaceable">NAME</em> =
    <em class="emphasis">picture line</em>
    <em class="emphasis">value list</em>
    ...
.</pre>
</blockquote>
<a name="INDEX-4787"></a><a name="INDEX-4788"></a><a name="INDEX-4789"></a><a name="INDEX-4790"></a>
This function declares a named sequence of picture lines (with
associated values) for use by the <tt class="literal">write</tt> function.
If <em class="replaceable">NAME</em> is omitted, the name defaults to
<tt class="literal">STDOUT</tt>, which happens to be the default format name
for the <tt class="literal">STDOUT</tt> filehandle.  Since, like a
<tt class="literal">sub</tt> declaration, this is a package-global
declaration that happens at compile time, any variables used in the
value list need to be visible at the point of the format's
declaration.  That is, lexically scoped variables must be declared
earlier in the file, while dynamically scoped variables merely need to
be set at the time <tt class="literal">write</tt> is called.  Here's an

example (which assumes we've already calculated
<tt class="literal">$cost</tt> and <tt class="literal">$quantity</tt>):
<blockquote>
<pre class="programlisting">my $str = "widget";               # Lexically scoped variable.

format Nice_Output =
Test: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; @||||| @&gt;&gt;&gt;&gt;&gt;
      $str,     $%,    '$' . int($num)
.

local $~ = "Nice_Output";         # Select our format.
local $num = $cost * $quantity;   # Dynamically scoped variable.

write;</pre>
</blockquote>
<a name="INDEX-4791"></a>
Like filehandles, format names are identifiers that exist in a symbol
table (package) and may be fully qualified by package name.  Within
the typeglobs of a symbol table's entries, formats reside in their own
namespace, which is distinct from filehandles, directory handles,
scalars, arrays, hashes, and subroutines.  Like those other six types,
however, a format named <tt class="literal">Whatever</tt> would also be
affected by a <tt class="literal">local</tt> on the
<tt class="literal">*Whatever</tt> typeglob.  In other words, a format is
just another gadget contained in a typeglob, independent of the other
gadgets.</p>

<p>The "Format Variables" section in <a href="ch07_01.htm">Chapter 7, "Formats"</a>
contains numerous details and examples of their use.  <a href="ch28_01.htm">Chapter 28, "Special Names"</a> describes the internal
format-specific variables, and the <tt class="literal">English</tt> and
<tt class="literal">IO::Handle</tt> modules provide easier access to them.</p>






<h3 class="sect2">29.2.42. formline&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">formline <em class="replaceable">PICTURE</em>, <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-4792"></a><a name="INDEX-4793"></a><a name="INDEX-4794"></a><a name="INDEX-4795"></a>
This is an internal function used by <tt class="literal">format</tt>s,
although you may also call it yourself.  It always returns true.  It
formats a list of values according to the contents of
<em class="replaceable">PICTURE</em>, placing the output into the format
output accumulator, <tt class="literal">$^A</tt> (or
<tt class="literal">$ACCUMULATOR</tt> if you use the
<tt class="literal">English</tt> module).  Eventually, when a
<tt class="literal">write</tt> is done, the contents of
<tt class="literal">$^A</tt> are written to some filehandle, but you could
also read <tt class="literal">$^A</tt> yourself and then set
<tt class="literal">$^A</tt> back to <tt class="literal">""</tt>.  A format
typically does one <tt class="literal">formline</tt> per line of form, but
the <tt class="literal">formline</tt> function itself doesn't care how many
newlines are embedded in the <em class="replaceable">PICTURE</em>. This
means that the <tt class="literal">~</tt> and <tt class="literal">~~</tt> tokens
will treat the entire <em class="replaceable">PICTURE</em> as a single
line.  You may therefore need to use multiple
<tt class="literal">formlines</tt> to implement a single record-format, just
as the format compiler does internally.</p>

<p>
<a name="INDEX-4796"></a><a name="INDEX-4797"></a>
Be careful if you put double quotes around the picture, since an
<tt class="literal">@</tt> character may be taken to mean the beginning of
an array name.  See "Formats" in <a href="ch06_01.htm">Chapter 6, "Subroutines"</a> for example uses.</p>






<h3 class="sect2">29.2.43. getc&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/taintgrey.gif"> <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getc <em class="replaceable">FILEHANDLE</em>
getc</pre>
</blockquote>
<a name="INDEX-4798"></a><a name="INDEX-4799"></a><a name="INDEX-4800"></a><a name="INDEX-4801"></a><a name="INDEX-4802"></a>
This function returns the next byte from the input file attached to
<em class="replaceable">FILEHANDLE</em>.  It returns
<tt class="literal">undef</tt> at end-of-file, or if an I/O error was
encountered.  If <em class="replaceable">FILEHANDLE</em> is omitted, the
function reads from <tt class="literal">STDIN</tt>.</p>

<p>This function is somewhat slow, but occasionally useful for
single-character (byte, really) input from the keyboard--provided you
manage to get your keyboard input unbuffered. This function requests
unbuffered input from the standard I/O library.  Unfortunately, the
standard I/O library is not so standard as to provide a portable way
to tell the underlying operating system to supply unbuffered keyboard
input to the standard I/O system.  To do that, you have to be slightly
more clever, and in an operating-system-dependent fashion.  Under Unix
you might say this:
<blockquote>
<pre class="programlisting">if ($BSD_STYLE) {
  system "stty cbreak &lt;/dev/tty &gt;/dev/tty 2&gt;&amp;1";
} else {
  system "stty", "-icanon", "eol", "\001";
}

$key = getc;

if ($BSD_STYLE) {
  system "stty -cbreak &lt;/dev/tty &gt;/dev/tty 2&gt;&amp;1";
} else {
  system "stty", "icanon", "eol", "^@"; # ASCII NUL
}
print "\n";</pre>
</blockquote>
<a name="INDEX-4803"></a>
This code puts the next character (byte) typed on the terminal in the
string <tt class="literal">$key</tt>.  If your <em class="emphasis">stty</em>
program has options like <tt class="literal">cbreak</tt>, you'll need to use
the code where <tt class="literal">$BSD_STYLE</tt> is true. Otherwise,
you'll need to use the code where it is false.  Determining the
options for <em class="emphasis">stty</em>(1) is left as an exercise
to the reader.</p>

<p>
<a name="INDEX-4804"></a><a name="INDEX-4805"></a>
The <tt class="literal">POSIX</tt> module provides a more portable version
of this using the <tt class="literal">POSIX::getattr</tt> function.  See
also the <tt class="literal">Term::ReadKey</tt> module from your nearest
CPAN site for a more portable and flexible approach.</p>






<h3 class="sect2">29.2.44. getgrent&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getgrent
setgrent
endgrent</pre>
</blockquote>
<a name="INDEX-4806"></a><a name="INDEX-4807"></a><a name="INDEX-4808"></a><a name="INDEX-4809"></a><a name="INDEX-4810"></a><a name="INDEX-4811"></a><a name="INDEX-4812"></a>
These routines iterate through your <em class="emphasis">/etc/group</em>
file (or maybe someone else's <em class="emphasis">/etc/group</em> file, if
it's coming from a server somewhere).  The return value from
<tt class="literal">getgrent</tt> in list context is:
<blockquote>
<pre class="programlisting">($name, $passwd, $gid, $members)</pre>
</blockquote>

where <tt class="literal">$members</tt> contains a space-separated list of the login names of
the members of the group. To set up a hash for translating group names
to GIDs, say this:
<blockquote>
<pre class="programlisting">while (($name, $passwd, $gid) = getgrent) {
    $gid{$name} = $gid;
}</pre>
</blockquote>
<a name="INDEX-4813"></a>
In scalar context, <tt class="literal">getgrent</tt> returns only the group
name.  The standard <tt class="literal">User::grent</tt> module supports a
by-name interface to this function.  See
<em class="emphasis">getgrent</em>(3).</p>






<h3 class="sect2">29.2.45. getgrgid&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getgrgid <em class="replaceable">GID</em>
</pre>
</blockquote>
<a name="INDEX-4814"></a><a name="INDEX-4815"></a><a name="INDEX-4816"></a>
This function looks up a group file entry by group number. The
return value in list context is:
<blockquote>
<pre class="programlisting">($name, $passwd, $gid, $members)</pre>
</blockquote>

where <tt class="literal">$members</tt> contains a space-separated list of
the login names of the members of the group. If you want to do this
repeatedly, consider caching the data in a hash using
<tt class="literal">getgrent</tt>.</p>

<p>In scalar context, <tt class="literal">getgrgid</tt> returns only the group name.
The <tt class="literal">User::grent</tt> module supports a by-name interface
to this function.  See <em class="emphasis">getgrgid</em>(3).</p>






<h3 class="sect2">29.2.46. getgrnam&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getgrnam <em class="replaceable">NAME</em>
</pre>
</blockquote>
<a name="INDEX-4817"></a><a name="INDEX-4818"></a>
This function looks up a group file entry by group name. The return
value in list context is:
<a name="INDEX-4819"></a><a name="INDEX-4820"></a><a name="INDEX-4821"></a>
<blockquote>
<pre class="programlisting">($name, $passwd, $gid, $members)</pre>
</blockquote>

where <tt class="literal">$members</tt> contains a space-separated list of
the login names of the members of the group. If you want to do this
repeatedly, consider caching the data in a hash using
<tt class="literal">getgrent</tt>.</p>

<p>In scalar context, <tt class="literal">getgrnam</tt> returns only the
numeric group ID.  The <tt class="literal">User::grent</tt> module supports
a by-name interface to this function.  See
<em class="emphasis">getgrnam</em>(3).</p>






<h3 class="sect2">29.2.47. gethostbyaddr&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">gethostbyaddr <em class="replaceable">ADDR</em>, <em class="replaceable">ADDRTYPE</em>
</pre>
</blockquote>
<a name="INDEX-4822"></a><a name="INDEX-4823"></a><a name="INDEX-4824"></a><a name="INDEX-4825"></a><a name="INDEX-4826"></a>
This function translates addresses into names (and alternate
addresses).  <em class="replaceable">ADDR</em> should be a packed binary
network address, and <em class="replaceable">ADDRTYPE</em> should in
practice usually be <tt class="literal">AF_INET</tt> (from the
<tt class="literal">Socket</tt> module).  The return value in list context
is:
<blockquote>
<pre class="programlisting">($name, $aliases, $addrtype, $length, @addrs) =
    gethostbyaddr($packed_binary_address, $addrtype);</pre>
</blockquote>

where <tt class="literal">@addrs</tt> is a list of packed binary addresses.
In the Internet domain, each address is (historically) four bytes
long, and can be unpacked by saying something like:
<blockquote>
<pre class="programlisting">($a, $b, $c, $d) = unpack('C4', $addrs[0]);</pre>
</blockquote>

Alternatively, you can convert directly to dot vector notation with
the <tt class="literal">v</tt> modifier to <tt class="literal">sprintf</tt>:
<blockquote>
<pre class="programlisting">$dots = sprintf "%vd", $addrs[0];</pre>
</blockquote>
<a name="INDEX-4827"></a><a name="INDEX-4828"></a>
The <tt class="literal">inet_ntoa</tt> function from the
<tt class="literal">Socket</tt> module is useful for producing a printable
version.  This approach will become important if and when we all ever
manage to switch over to IPv6.
<blockquote>
<pre class="programlisting">use Socket;
$printable_address = inet_ntoa($addrs[0]);</pre>
</blockquote>

In scalar context, <tt class="literal">gethostbyaddr</tt> returns only the host name.</p>

<p>To produce an <em class="replaceable">ADDR</em> from a dot vector,
say this:
<blockquote>
<pre class="programlisting">use Socket;
$ipaddr = inet_aton("127.0.0.1");       # localhost
$claimed_hostname = gethostbyaddr($ipaddr, AF_INET);</pre>
</blockquote>
<a name="INDEX-4829"></a>
Interestingly, with version 5.6 of Perl you can skip the
<tt class="literal">inet_aton()</tt> and use the new v-string notation that
was invented for version numbers but happens to work for IP addresses
as well:
<blockquote>
<pre class="programlisting">$ipaddr = v127.0.0.1;</pre>
</blockquote>

See the section "Sockets" in
<a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a> for more examples.
The <tt class="literal">Net::hostent</tt> module supports a by-name
interface to this function.  See
<em class="emphasis">gethostbyaddr</em>(3).</p>






<h3 class="sect2">29.2.48. gethostbyname&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">gethostbyname <em class="replaceable">NAME</em>
</pre>
</blockquote>
<a name="INDEX-4830"></a><a name="INDEX-4831"></a><a name="INDEX-4832"></a><a name="INDEX-4833"></a>
This function translates a network hostname to its corresponding
addresses (and other names). The return value in list context is:
<blockquote>
<pre class="programlisting">($name, $aliases, $addrtype, $length, @addrs) =
    gethostbyname($remote_hostname);</pre>
</blockquote>

where <tt class="literal">@addrs</tt> is a list of raw addresses.  In the
Internet domain, each address is (historically) four bytes long, and
can be unpacked by saying something like:
<blockquote>
<pre class="programlisting">($a, $b, $c, $d) = unpack('C4', $addrs[0]);</pre>
</blockquote>

You can convert directly to vector notation with the <tt class="literal">v</tt>
modifier to <tt class="literal">sprintf</tt>:
<blockquote>
<pre class="programlisting">$dots = sprintf "%vd", $addrs[0];</pre>
</blockquote>

In scalar context, <tt class="literal">gethostbyname</tt> returns only
the host address:
<blockquote>
<pre class="programlisting">use Socket;
$ipaddr = gethostbyname($remote_host);
printf "%s has address %s\n",
    $remote_host, inet_ntoa($ipaddr);</pre>
</blockquote>

See "Sockets" in <a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a>
for another approach.  The <tt class="literal">Net::hostent</tt> module
supports a by-name interface to this function.  See also
<em class="emphasis">gethostbyname</em>(3).</p>






<h3 class="sect2">29.2.49. gethostent&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">gethostent
sethostent <em class="replaceable">STAYOPEN</em>
endhostent</pre>
</blockquote>
<a name="INDEX-4834"></a><a name="INDEX-4835"></a><a name="INDEX-4836"></a><a name="INDEX-4837"></a>
These functions iterate through your <em class="emphasis">/etc/hosts</em>
file and return each entry one at a time. The return value from
<tt class="literal">gethostent</tt> is:
<blockquote>
<pre class="programlisting">($name, $aliases, $addrtype, $length, @addrs)</pre>
</blockquote>

where <tt class="literal">@addrs</tt> is a list of raw addresses.  In the
Internet domain, each address is four bytes long, and can be unpacked
by saying something like:
<blockquote>
<pre class="programlisting">($a, $b, $c, $d) = unpack('C4', $addrs[0]);</pre>
</blockquote>
<a name="INDEX-4838"></a>
Scripts that use <tt class="literal">gethostent</tt> should not be
considered portable. If a machine uses a name server, it would have to
interrogate most of the Internet to try to satisfy a request for all
the addresses of every machine on the planet.  So
<tt class="literal">gethostent</tt> is unimplemented on such machines.  See
<em class="emphasis">gethostent</em>(3) for other details.</p>

<p>The <tt class="literal">Net::hostent</tt> module supports a by-name interface to
this function.  
<a name="INDEX-4839"></a>
</p>






<h3 class="sect2">29.2.50. getlogin&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getlogin</pre>
</blockquote>
<a name="INDEX-4840"></a><a name="INDEX-4841"></a><a name="INDEX-4842"></a><a name="INDEX-4843"></a>
This function returns the current login name if found.  On Unix
systems, this is read from the <em class="emphasis">utmp</em>(5)
file.  If it returns false, use
<tt class="literal">getpwuid</tt> instead.  For example:
<blockquote>
<pre class="programlisting">$login = getlogin() || (getpwuid($&lt;))[0] || "Intruder!!";</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.51. getnetbyaddr&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getnetbyaddr <em class="replaceable">ADDR</em>, <em class="replaceable">ADDRTYPE</em>
</pre>
</blockquote>
<a name="INDEX-4844"></a><a name="INDEX-4845"></a><a name="INDEX-4846"></a><a name="INDEX-4847"></a>
This function translates a network address to the corresponding network
name or names.  The return value in list context is:
<blockquote>
<pre class="programlisting">use Socket;
($name, $aliases, $addrtype, $net) = getnetbyaddr(127, AF_INET);</pre>
</blockquote>

In scalar context, <tt class="literal">getnetbyaddr</tt> returns only the network name.
The <tt class="literal">Net::netent</tt> module supports a by-name interface to
this function.  See <em class="emphasis">getnetbyaddr</em>(3).
<a name="INDEX-4848"></a>
</p>






<h3 class="sect2">29.2.52. getnetbyname&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getnetbyname <em class="replaceable">NAME</em>
</pre>
</blockquote>
<a name="INDEX-4849"></a><a name="INDEX-4850"></a><a name="INDEX-4851"></a><a name="INDEX-4852"></a>
This function translates a network name to its corresponding network
address. The return value in list context is:
<blockquote>
<pre class="programlisting">($name, $aliases, $addrtype, $net) = getnetbyname("loopback");</pre>
</blockquote>

In scalar context, <tt class="literal">getnetbyname</tt> returns only the network address.
The <tt class="literal">Net::netent</tt> module supports a by-name interface to
this function.  See <em class="emphasis">getnetbyname</em>(3).</p>






<h3 class="sect2">29.2.53. getnetent&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getnetent
setnetent <em class="replaceable">STAYOPEN</em>
endnetent</pre>
</blockquote>
<a name="INDEX-4853"></a><a name="INDEX-4854"></a><a name="INDEX-4855"></a><a name="INDEX-4856"></a><a name="INDEX-4857"></a>
These functions iterate through your
<em class="emphasis">/etc/networks</em> file. The return value in list
context is:
<blockquote>
<pre class="programlisting">($name, $aliases, $addrtype, $net) = getnetent();</pre>
</blockquote>

In scalar context, <tt class="literal">getnetent</tt> returns only the
network name.  The <tt class="literal">Net::netent</tt> module supports a
by-name interface to this function.  See
<em class="emphasis">getnetent</em>(3).</p>

<p>
<a name="INDEX-4858"></a>
The concept of network
names seems rather quaint these days; most IP addresses are on unnamed
(and unnameable) subnets.</p>






<h3 class="sect2">29.2.54. getpeername&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getpeername <em class="replaceable">SOCKET</em>
</pre>
</blockquote>
<a name="INDEX-4859"></a><a name="INDEX-4860"></a><a name="INDEX-4861"></a>
This function returns the packed socket address of the other end of the
<em class="replaceable">SOCKET</em> connection. For example:</p>

<blockquote>
<pre class="programlisting">use Socket;
$hersockaddr      = getpeername SOCK;
($port, $heraddr) = sockaddr_in($hersockaddr);
$herhostname      = gethostbyaddr($heraddr, AF_INET);
$herstraddr       = inet_ntoa($heraddr);</pre>
</blockquote>






<h3 class="sect2">29.2.55. getpgrp&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getpgrp <em class="replaceable">PID</em>
</pre>
</blockquote>
<a name="INDEX-4862"></a><a name="INDEX-4863"></a><a name="INDEX-4864"></a>
This function returns the current process group for the specified <em class="replaceable">PID</em>
(use a <em class="replaceable">PID</em> of <tt class="literal">0</tt> for the current process). Invoking <tt class="literal">getpgrp</tt> will
raise an exception if used on a machine that doesn't implement
<em class="emphasis">getpgrp</em>(2).  If <em class="replaceable">PID</em> is omitted, the function returns the process
group of the current process (the same as using a <em class="replaceable">PID</em> of <tt class="literal">0</tt>).  On
systems implementing this operator with the POSIX <em class="emphasis">getpgrp</em>(2) syscall,
<em class="replaceable">PID</em> must be omitted or, if supplied, must be <tt class="literal">0</tt>.</p>






<h3 class="sect2">29.2.56. getppid&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getppid</pre>
</blockquote>
<a name="INDEX-4865"></a><a name="INDEX-4866"></a><a name="INDEX-4867"></a>
This function returns the process ID of the parent process. On the
typical Unix system, if your parent process ID changes to 1, it means
your parent process has died and you've been adopted by the
<em class="emphasis">init</em>(8) program.</p>






<h3 class="sect2">29.2.57. getpriority&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getpriority <em class="replaceable">WHICH</em>, <em class="replaceable">WHO</em>
</pre>
</blockquote>
<a name="INDEX-4868"></a><a name="INDEX-4869"></a><a name="INDEX-4870"></a><a name="INDEX-4871"></a>
This function returns the current priority for a process, a process
group, or a user.  See <em class="emphasis">getpriority</em>(2).  Invoking <tt class="literal">getpriority</tt>
will raise an exception if used on a machine that doesn't implement
<em class="emphasis">getpriority</em>(2).</p>

<p>The <tt class="literal">BSD::Resource</tt> module from CPAN provides a more
convenient interface, including the <tt class="literal">PRIO_PROCESS</tt>,
<tt class="literal">PRIO_PGRP</tt>, and <tt class="literal">PRIO_USER</tt>
symbolic constants to supply for the <em class="replaceable">WHICH</em>
argument.  Although these are traditionally set to
<tt class="literal">0</tt>, <tt class="literal">1</tt>, and <tt class="literal">2</tt>
respectively, you really never know what may happen within the dark
confines of C's <tt class="literal">#include</tt> files.</p>

<p>A value of <tt class="literal">0</tt> for <em class="replaceable">WHO</em> means the current process, process group,
or user, so to get the priority of the current process, use:
<blockquote>
<pre class="programlisting">$curprio = getpriority(0, 0);</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.58. getprotobyname&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getprotobyname <em class="replaceable">NAME</em>
</pre>
</blockquote>
<a name="INDEX-4872"></a><a name="INDEX-4873"></a><a name="INDEX-4874"></a>
This function translates a protocol name to its corresponding number.
The return value in list context is:
<blockquote>
<pre class="programlisting">($name, $aliases, $protocol_number) = getprotobyname("tcp");</pre>
</blockquote>

When called in scalar context, <tt class="literal">getprotobyname</tt>
returns only the protocol number.  The <tt class="literal">Net::proto</tt>
module supports a by-name interface to this function.  See
<em class="emphasis">getprotobyname</em>(3).</p>






<h3 class="sect2">29.2.59. getprotobynumber&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getprotobynumber <em class="replaceable">NUMBER</em>
</pre>
</blockquote>
<a name="INDEX-4875"></a><a name="INDEX-4876"></a>
This function translates a protocol number to its corresponding
name. The return value in list context is:
<blockquote>
<pre class="programlisting">($name, $aliases, $protocol_number) = getprotobynumber(6);</pre>
</blockquote>

When called in scalar context, <tt class="literal">getprotobynumber</tt>
returns only the protocol name.  The <tt class="literal">Net::proto</tt>
module supports a by-name interface to this function.  See
<em class="emphasis">getprotobynumber</em>(3).
<a name="INDEX-4877"></a>
</p>






<h3 class="sect2">29.2.60. getprotoent&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getprotoent
setprotoent <em class="replaceable">STAYOPEN</em>
endprotoent</pre>
</blockquote>
<a name="INDEX-4878"></a><a name="INDEX-4879"></a><a name="INDEX-4880"></a><a name="INDEX-4881"></a>
These functions iterate through the <em class="emphasis">/etc/protocols</em> file.
In list context, the return value from <tt class="literal">getprotoent</tt> is:
<blockquote>
<pre class="programlisting">($name, $aliases, $protocol_number) = getprotoent();</pre>
</blockquote>

When called in scalar context, <tt class="literal">getprotoent</tt> returns only the protocol name.
The <tt class="literal">Net::proto</tt> module supports a by-name interface
to this function.  See <em class="emphasis">getprotent</em>(3).</p>






<h3 class="sect2">29.2.61. getpwent&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/taintgrey.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getpwent
setpwent
endpwent</pre>
</blockquote>
<a name="INDEX-4882"></a><a name="INDEX-4883"></a><a name="INDEX-4884"></a><a name="INDEX-4885"></a><a name="INDEX-4886"></a>
These functions conceptually iterate through your <em class="emphasis">/etc/passwd</em> file, though
this may involve the
<em class="filename">/etc/shadow</em> file if you're the superuser and are using shadow passwords,
or NIS (n&amp;#233;e YP) or NIS+ if you're using either of those.
The return value in list context is:
<blockquote>
<pre class="programlisting">($name,$passwd,$uid,$gid,$quota,$comment,$gcos,$dir,$shell) = getpwent();</pre>
</blockquote>

Some machines may use the quota and comment fields for other than their named purposes,
but the remaining fields will always be the same. To set up a hash for
translating login names to UIDs, say this:
<blockquote>
<pre class="programlisting">while (($name, $passwd, $uid) = getpwent()) {
    $uid{$name} = $uid;
}</pre>
</blockquote>

In scalar context, <tt class="literal">getpwent</tt> returns only the username.  The
<tt class="literal">User::pwent</tt> module supports a by-name interface to this
function.  See <em class="emphasis">getpwent</em>(3).</p>






<h3 class="sect2">29.2.62. getpwnam&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/taintgrey.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getpwnam <em class="replaceable">NAME</em>
</pre>
</blockquote>
<a name="INDEX-4887"></a><a name="INDEX-4888"></a><a name="INDEX-4889"></a><a name="INDEX-4890"></a>
This function translates a username to the corresponding <em class="emphasis">/etc/passwd</em>
file entry. The return value in list context is:
<blockquote>
<pre class="programlisting">($name,$passwd,$uid,$gid,$quota,$comment,$gcos,$dir,$shell) = getpwnam("daemon");</pre>
</blockquote>

On systems that support shadow passwords, you will have to be the
superuser to retrieve the actual password.  Your C library should
notice that you're suitably empowered and open the <em class="emphasis">/etc/shadow</em>
file (or wherever it keeps the <em class="filename">shadow</em> file).  At least, that's how it's supposed
to work. Perl will try to do this if your C library is too stupid to notice.</p>

<p>For repeated lookups, consider caching the data in a hash
using <tt class="literal">getpwent</tt>.</p>

<p>In scalar context, <tt class="literal">getpwnam</tt> returns only the numeric user ID.
The <tt class="literal">User::pwent</tt> module supports a by-name interface
to this function.  See <em class="emphasis">getpwnam</em>(3) and <em class="emphasis">passwd</em>(5).</p>






<h3 class="sect2">29.2.63. getpwuid&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/taintgrey.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getpwuid <em class="replaceable">UID</em>
</pre>
</blockquote>
<a name="INDEX-4891"></a><a name="INDEX-4892"></a><a name="INDEX-4893"></a><a name="INDEX-4894"></a>
This function translates a numeric user ID to the corresponding
<em class="emphasis">/etc/passwd</em> file entry. The return value in list context is:
<blockquote>
<pre class="programlisting">($name,$passwd,$uid,$gid,$quota,$comment,$gcos,$dir,$shell) = getpwuid(2);</pre>
</blockquote>

For repeated lookups, consider caching the data in a
hash using <tt class="literal">getpwent</tt>.</p>

<p>In scalar context, <tt class="literal">getpwuid</tt> returns the username.
The <tt class="literal">User::pwent</tt> module supports a by-name interface
to this function.  See <em class="emphasis">getpwnam</em>(3) and <em class="emphasis">passwd</em>(5).</p>






<h3 class="sect2">29.2.64. getservbyname&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getservbyname <em class="replaceable">NAME</em>, <em class="replaceable">PROTO</em>
</pre>
</blockquote>
<a name="INDEX-4895"></a><a name="INDEX-4896"></a><a name="INDEX-4897"></a><a name="INDEX-4898"></a><a name="INDEX-4899"></a>
This function translates a service (port) name to its corresponding
port number.  <em class="replaceable">PROTO</em> is a protocol name such as <tt class="literal">"tcp"</tt>.  The
return value in list context is:
<blockquote>
<pre class="programlisting">($name, $aliases, $port_number, $protocol_name) = getservbyname("www", "tcp");</pre>
</blockquote>

In scalar context, <tt class="literal">getservbyname</tt> returns only the service port
number.  The <tt class="literal">Net::servent</tt> module supports a by-name
interface to this function.  See <em class="emphasis">getservbyname</em>(3).</p>






<h3 class="sect2">29.2.65. getservbyport&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getservbyport <em class="replaceable">PORT</em>, <em class="replaceable">PROTO</em>
</pre>
</blockquote>
<a name="INDEX-4900"></a><a name="INDEX-4901"></a><a name="INDEX-4902"></a>
This function translates a service (port) number to its corresponding
names.  <em class="replaceable">PROTO</em> is a protocol name such as <tt class="literal">"tcp"</tt>.  The return
value in list context is:
<blockquote>
<pre class="programlisting">($name, $aliases, $port_number, $protocol_name) = getservbyport(80, "tcp");</pre>
</blockquote>

In scalar context, <tt class="literal">getservbyport</tt> returns only the service
name.  The <tt class="literal">Net::servent</tt> module supports a by-name interface
to this function.  See <em class="emphasis">getservbyport</em>(3).</p>






<h3 class="sect2">29.2.66. getservent&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getservent
setservent <em class="replaceable">STAYOPEN</em>
endservent</pre>
</blockquote>
<a name="INDEX-4903"></a><a name="INDEX-4904"></a><a name="INDEX-4905"></a><a name="INDEX-4906"></a>
This function iterates through the <em class="emphasis">/etc/services</em> file or its
equivalent.  The return value in list context is:
<blockquote>
<pre class="programlisting">($name, $aliases, $port_number, $protocol_name) = getservent();</pre>
</blockquote>

In scalar context, <tt class="literal">getservent</tt> returns only the service port name.
The <tt class="literal">Net::servent</tt> module supports a by-name interface
to this function.  See <em class="emphasis">getservent</em>(3).</p>






<h3 class="sect2">29.2.67. getsockname&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getsockname <em class="replaceable">SOCKET</em>
</pre>
</blockquote>
<a name="INDEX-4907"></a><a name="INDEX-4908"></a><a name="INDEX-4909"></a>
This function returns the packed socket address of this end of the
<em class="replaceable">SOCKET</em> connection. (And why wouldn't you
know your own address already?  Maybe because you bound an address
containing wildcards to the server socket before doing an
<tt class="literal">accept</tt> and now you need to know what interface
someone used to connect to you.  Or you were passed a socket
by your parent process--<em class="emphasis">inetd</em>, for example.)
<blockquote>
<pre class="programlisting">use Socket;
$mysockaddr = getsockname(SOCK);
($port, $myaddr) = sockaddr_in($mysockaddr);
$myname = gethostbyaddr($myaddr,AF_INET);
printf "I am %s [%vd]\n", $myname, $myaddr;</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.68. getsockopt&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">getsockopt <em class="replaceable">SOCKET</em>, <em class="replaceable">LEVEL</em>, <em class="replaceable">OPTNAME</em>
</pre>
</blockquote>
<a name="INDEX-4910"></a>
This function returns the socket option requested, or <tt class="literal">undef</tt> if there
is an error.  See <tt class="literal">setsockopt</tt> for more information.</p>






<h3 class="sect2">29.2.69. glob&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/dollarat.gif"> <img src="figs/taint.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">glob <em class="replaceable">EXPR</em>
glob</pre>
</blockquote>
<a name="INDEX-4911"></a><a name="INDEX-4912"></a><a name="INDEX-4913"></a><a name="INDEX-4914"></a>
This function returns the value of <em class="replaceable">EXPR</em>
with filename expansions such as a shell would do. This is the
internal function implementing the <tt class="literal">&lt;*&gt;</tt>
operator.</p>

<p>For historical reasons, the algorithm matches the
<em class="emphasis">csh</em>(1)'s style of expansion, not the
Bourne shell's.  Versions of Perl before the 5.6 release used an
external process, but 5.6 and later perform globs internally.  Files
whose first character is a dot ("<tt class="literal">.</tt>") are ignored
unless this character is explicitly matched.  An asterisk
("<tt class="literal">*</tt>") matches any sequence of any character
(including none).  A question mark ("<tt class="literal">?</tt>") matches
any one character.  A square bracket sequence
("<tt class="literal">[</tt>...<tt class="literal">]</tt>") specifies a simple
character class, like "<tt class="literal">[chy0-9]</tt>".  Character
classes may be negated with a circumflex, as in
"<tt class="literal">*.[^oa]</tt>", which matches any non-dot files whose
names contain a period followed by one character which is neither an
"a" nor an "o" at the end of the name.  A tilde
("<tt class="literal">~</tt>") expands to a home directory, as in
"<tt class="literal">~/.*rc</tt>" for all the current user's "rc" files, or
"<tt class="literal">~jane/Mail/*</tt>" for all of Jane's mail files.
Braces may be used for alternation, as in
"<tt class="literal">~/.{mail,ex,csh,twm,}rc</tt>" to get those particular
rc files.</p>

<p>If you want to glob filenames that might contain whitespace, you'll
need to use the <tt class="literal">File::Glob</tt> module directly, since
<tt class="literal">glob</tt> grandfathers the use of whitespace to separate
multiple patterns such as <tt class="literal">&lt;*.c *.h&gt;</tt>.  For
details, see <tt class="literal">File::Glob</tt> in <a href="ch32_01.htm">Chapter 32, "Standard Modules"</a>.  Calling
<tt class="literal">glob</tt> (or the <tt class="literal">&lt;*&gt;</tt> operator)
automatically <tt class="literal">use</tt>s that module, so if the module
mysteriously vaporizes from your library, an exception is raised.</p>

<p>When you call <tt class="literal">open</tt>, Perl does not expand wildcards,
including tildes.  You need to <tt class="literal">glob</tt> the result
first.
<blockquote>
<pre class="programlisting">open(MAILRC, "~/.mailrc")                # WRONG: tilde is a shell thing
    or die "can't open ~/.mailrc: $!";

open(MAILRC, (glob("~/.mailrc"))[0])     # expand tilde first
    or die "can't open ~/.mailrc: $!";</pre>
</blockquote>

The <tt class="literal">glob</tt> function is not related to the Perl notion of typeglobs,
other than that they both use a <tt class="literal">*</tt> to represent multiple items.</p>

<p>See also the "Filename globbing operator" section of <a href="ch02_01.htm">Chapter 2, "Bits and Pieces"</a>.</p>






<h3 class="sect2">29.2.70. gmtime&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">gmtime <em class="replaceable">EXPR</em>
gmtime</pre>
</blockquote>
<a name="INDEX-4915"></a><a name="INDEX-4916"></a><a name="INDEX-4917"></a><a name="INDEX-4918"></a>
This function converts a time as returned by the <tt class="literal">time</tt> function to a
nine-element list with the time correct for the Greenwich time zone (a.k.a.
GMT, or UTC, or even Zulu in certain cultures, not including the Zulu
culture, oddly enough). It's typically used as follows:
<blockquote>
<pre class="programlisting">#  0    1    2     3     4    5     6     7     8
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime;</pre>
</blockquote>

If, as in this case, the <em class="replaceable">EXPR</em> is omitted, it does <tt class="literal">gmtime(time())</tt>.
The Perl library module <tt class="literal">Time::Local</tt> contains a subroutine, <tt class="literal">timegm</tt>,
that can convert the list back into a time value.</p>

<p>All list elements are numeric and come straight out of a <tt class="literal">struct tm</tt>
(that's a C programming structure--don't sweat it).  In particular this
means that <tt class="literal">$mon</tt> has the range <tt class="literal">0..11</tt> with January as month 0, and <tt class="literal">$wday</tt> has the range
<tt class="literal">0..6</tt> with Sunday as day <tt class="literal">0</tt>.  You can remember which ones are
zero-based because those are the ones you're always using as subscripts
into zero-based arrays containing month and day names.</p>

<p>For example, to get the current month in London, you might say:
<blockquote>
<pre class="programlisting">$london_month = (qw(Jan Feb Mar Apr May Jun
                    Jul Aug Sep Oct Nov Dec))[(gmtime)[4]];</pre>
</blockquote>
<tt class="literal">$year</tt> is the number of years since 1900; that is, in year 2023, <tt class="literal">$year</tt> is
<tt class="literal">123</tt>, <em class="emphasis">not</em> simply <tt class="literal">23</tt>.
To
get the 4-digit year, just say <tt class="literal">$year + 1900</tt>.  To get the 2-digit
year (for example "01" in 2001), use <tt class="literal">sprintf("%02d", $year % 100)</tt>.</p>

<p>In scalar context, <tt class="literal">gmtime</tt> returns a <em class="emphasis">ctime</em>(3)-like string based
on the GMT time value.  The <tt class="literal">Time::gmtime</tt> module supports
a by-name interface to this function.  See also <tt class="literal">POSIX::strftime()</tt>
for a more fine-grained approach to formatting times.</p>

<p>This scalar value is <em class="emphasis">not</em> locale dependent but is
instead a Perl built-in.  Also see the <tt class="literal">Time::Local</tt>
module and the <em class="emphasis">strftime</em>(3) and
<em class="emphasis">mktime</em>(3) functions available via the
<tt class="literal">POSIX</tt> module.  To get somewhat similar but
locale-dependent date strings, set up your locale environment
variables appropriately (please see the <em class="emphasis">perllocale</em>
manpage), and try:
<blockquote>
<pre class="programlisting">use POSIX qw(strftime);
$now_string = strftime "%a %b %e %H:%M:%S %Y", gmtime;</pre>
</blockquote>

The <tt class="literal">%a</tt> and <tt class="literal">%b</tt> escapes, which represent the short forms of the
day of the week and the month of the year, may not necessarily be
three characters wide in all locales.</p>






<h3 class="sect2">29.2.71. goto&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarat.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">goto <em class="replaceable">LABEL</em>
goto <em class="replaceable">EXPR</em>
goto <em class="replaceable">&amp;</em>NAME</pre>
</blockquote>
<a name="INDEX-4919"></a><a name="INDEX-4920"></a><tt class="literal">goto</tt><em class="replaceable">LABEL</em> finds the statement labeled with <em class="replaceable">LABEL</em> and resumes
execution there.  If the <em class="replaceable">LABEL</em> cannot be found, an exception is raised.
It cannot be used to go into any construct that
requires initialization, such as a subroutine or a <tt class="literal">foreach</tt> loop.  It
also can't be used to go into a construct that is optimized away.  It
can be used to go almost anywhere else within the dynamic
scope,<a href="#FOOTNOTE-4">[4]</a> including out of subroutines, but for
that purpose it's usually better to use some other construct such as
<tt class="literal">last</tt> or <tt class="literal">die</tt>. The author of Perl has never felt the need to use
this form of <tt class="literal">goto</tt> (in Perl, that is--C is another matter).</p>
<blockquote class="footnote">

<a name="FOOTNOTE-4"></a>
<p>[4]This means that if it doesn't find the label in the
current routine, it looks back through the routines that called the
current routine for the label, thus making it nearly impossible to
maintain your program.</p>

</blockquote>

<p>Going to even greater heights of orthogonality (and depths of idiocy),
Perl allows <tt class="literal">goto</tt><em class="replaceable">EXPR</em>,
which expects <em class="replaceable">EXPR</em> to evaluate to a label
name, whose location is <em class="emphasis">guaranteed</em> to be
unresolvable until run time since the label is unknown when the
statement is compiled. This allows for computed
<tt class="literal">goto</tt>s per FORTRAN, but isn't necessarily
recommended<a href="#FOOTNOTE-5">[5]</a> if you're optimizing
for maintainability:
<blockquote>
<pre class="programlisting">goto +("FOO", "BAR", "GLARCH")[$i];</pre>
</blockquote>
<a name="INDEX-4921"></a>
The unrelated <tt class="literal">goto</tt><tt class="literal">&amp;</tt><em class="replaceable">NAME</em> is highly
magical, substituting a call to the named subroutine for the currently
running subroutine.  This construct may be used without shame by
<tt class="literal">AUTOLOAD</tt> subroutines that wish to load another
subroutine and then pretend that this new subroutine--and not the
original one--had been called in the first place (except that any
modifications to <tt class="literal">@_</tt> in the original subroutine are
propagated to the replacement subroutine).  After the
<tt class="literal">goto</tt>, not even <tt class="literal">caller</tt> will be
able to tell that the original <tt class="literal">AUTOLOAD</tt> routine was
called first.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-5"></a>
<p>[5] Understatement is reputed to be funny, so
we thought we'd try one here.</p>

</blockquote>






<h3 class="sect2">29.2.72. grep&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">grep <em class="replaceable">EXPR</em>, <em class="replaceable">LIST</em>
grep <em class="replaceable">BLOCK</em> <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-4922"></a><a name="INDEX-4923"></a><a name="INDEX-4924"></a><a name="INDEX-4925"></a>
This function evaluates <em class="replaceable">EXPR</em> or <em class="replaceable">BLOCK</em> in Boolean context for
each element of <em class="replaceable">LIST</em>, temporarily setting <tt class="literal">$_</tt> to each element
in turn, much like the <tt class="literal">foreach</tt> construct. In list context, it
returns a list of those elements for which the expression is true.
(The operator is named after a beloved Unix program that extracts
lines out of a file that match a particular pattern. In Perl, the
expression is often a pattern, but doesn't have to be.) In scalar
context, <tt class="literal">grep</tt> returns the number of times the expression was
true.</p>

<p>If <tt class="literal">@all_lines</tt> contains lines of code, this example weeds out
comment lines:
<blockquote>
<pre class="programlisting">@code_lines = grep !/^\s*#/, @all_lines;</pre>
</blockquote>

Because <tt class="literal">$_</tt> is an implicit alias to each list value, altering
<tt class="literal">$_</tt> will modify the elements of the original list.  While this
is useful and supported, it can occasionally cause bizarre results
if you aren't expecting it.  For example:
<blockquote>
<pre class="programlisting">@list = qw(barney fred dino wilma);
@greplist = grep { s/^[bfd]// } @list;</pre>
</blockquote>
<tt class="literal">@greplist</tt> is now "<tt class="literal">arney</tt>", "<tt class="literal">red</tt>", "<tt class="literal">ino</tt>", but <tt class="literal">@list</tt> is now
"<tt class="literal">arney</tt>", "<tt class="literal">red</tt>", "<tt class="literal">ino</tt>", "<tt class="literal">wilma</tt>"!  Ergo, Caveat Programmor.</p>

<p>See also <tt class="literal">map</tt>.  The following two statements are functionally
equivalent:
<blockquote>
<pre class="programlisting">@out = grep { <em class="replaceable">EXPR</em> } @in;
@out = map { <em class="replaceable">EXPR</em> ? $_ : () } @in</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.73. hex&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">hex <em class="replaceable">EXPR</em>
hex</pre>
</blockquote>
<a name="INDEX-4926"></a><a name="INDEX-4927"></a><a name="INDEX-4928"></a><a name="INDEX-4929"></a>
This function interprets <em class="replaceable">EXPR</em> as a hexadecimal string and returns
the equivalent decimal value.  A leading "<tt class="literal">0x</tt>" is ignored, if
present.  To interpret strings that might start with any of <tt class="literal">0</tt>,
<tt class="literal">0b</tt>, or <tt class="literal">0x</tt>, see <tt class="literal">oct</tt>.  The following code sets <tt class="literal">$number</tt> to
4,294,906,560:
<blockquote>
<pre class="programlisting">$number = hex("ffff12c0");</pre>
</blockquote>

To do the inverse function, use <tt class="literal">sprintf</tt>:
<blockquote>
<pre class="programlisting">sprintf "%lx", $number;         # (That's an ell, not a one.)</pre>
</blockquote>

Hex strings may only represent integers.  Strings that would cause
integer overflow trigger a warning.</p>






<h3 class="sect2">29.2.74. import&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">import <em class="replaceable">CLASSNAME</em> <em class="replaceable">LIST</em>
import <em class="replaceable">CLASSNAME</em>
</pre>
</blockquote>
<a name="INDEX-4930"></a><a name="INDEX-4931"></a>
There is no built-in <tt class="literal">import</tt> function.  It is merely an ordinary class
method defined (or inherited) by modules that wish to export names to
another module through the <tt class="literal">use</tt> operator.  See <tt class="literal">use</tt> for details.</p>






<h3 class="sect2">29.2.75. index&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">index <em class="replaceable">STR</em>, <em class="replaceable">SUBSTR</em>, <em class="replaceable">OFFSET</em>
index <em class="replaceable">STR</em>, <em class="replaceable">SUBSTR</em>
</pre>
</blockquote>
<a name="INDEX-4932"></a><a name="INDEX-4933"></a><a name="INDEX-4934"></a>
This function searches for one string within another.  It returns the
position of the first occurrence of <em class="replaceable">SUBSTR</em> in <em class="replaceable">STR</em>.  The
<em class="replaceable">OFFSET</em>, if specified, says how many characters from the start to
skip before beginning to look.  Positions are based at 0 (or whatever
you've set the subscript base <tt class="literal">$[</tt> variable to--but don't do that). If
the substring is not found, the function returns one less than the
base, ordinarily <tt class="literal">-1</tt>.  To work your way through a string, you might
say:
<blockquote>
<pre class="programlisting">$pos = -1;
while (($pos = index($string, $lookfor, $pos)) &gt; -1) {
    print "Found at $pos\n";
    $pos++;
}</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.76. int&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">int <em class="replaceable">EXPR</em>
int</pre>
</blockquote>
<a name="INDEX-4935"></a><a name="INDEX-4936"></a><a name="INDEX-4937"></a><a name="INDEX-4938"></a>
This function returns the integer portion of <em class="replaceable">EXPR</em>.  If you're a C
programmer, you're apt to forget to use <tt class="literal">int</tt> in conjunction with
division, which is a floating-point operation in Perl:
<blockquote>
<pre class="programlisting">$average_age = 939/16;      # yields 58.6875 (58 in C)
$average_age = int 939/16;  # yields 58</pre>
</blockquote>

You should not use this function for generic rounding,
because it truncates towards 0 and because machine representations
of floating-point numbers can sometimes produce counterintuitive

results.  For example, <tt class="literal">int(-6.725/0.025)</tt> produces
<tt class="literal">-268</tt> rather than the correct
<tt class="literal">-269</tt>; that's because the value is really more like
<tt class="literal">-268.99999999999994315658</tt>.  Usually, the
<tt class="literal">sprintf</tt>, <tt class="literal">printf</tt>, or the
<tt class="literal">POSIX::floor</tt> and <tt class="literal">POSIX::ceil</tt>
functions will serve you better than will <tt class="literal">int</tt>.
<blockquote>
<pre class="programlisting">$n = sprintf("%.0f", $f);   # round (not trunc) to nearest integer</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.77. ioctl&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xro.gif"> <img src="figs/xt.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">ioctl <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">FUNCTION</em>, <em class="replaceable">SCALAR</em>
</pre>
</blockquote>
<a name="INDEX-4939"></a><a name="INDEX-4940"></a><a name="INDEX-4941"></a>
This function implements the <em class="emphasis">ioctl</em>(2) syscall which controls I/O. To get the correct function definitions, first you'll probably
have to say:
<blockquote>
<pre class="programlisting">require "sys/ioctl.ph";     # perhaps /usr/local/lib/perl/sys/ioctl.ph</pre>
</blockquote>

If <em class="emphasis">sys/ioctl.ph</em>
doesn't exist or doesn't have the correct definitions, you'll have
to roll your own based on your C header files such as
<em class="emphasis">sys/ioctl.h</em>.  (The Perl distribution includes a script
called <em class="emphasis">h2ph</em> to help you do this, but running it is nontrivial.) <em class="replaceable">SCALAR</em>
will be read or written (or both) depending on the <em class="replaceable">FUNCTION</em>--a
pointer to the string value of <em class="replaceable">SCALAR</em> will be passed as the third
argument of the actual <em class="emphasis">ioctl</em>(2) call. (If <em class="replaceable">SCALAR</em> has no string
value but does have a numeric value, that value will be passed
directly rather than a pointer to the string value.)  The <tt class="literal">pack</tt>
and <tt class="literal">unpack</tt> functions are useful for manipulating the values of
structures used by <tt class="literal">ioctl</tt>. The following example determines how
many bytes are available for reading using the <tt class="literal">FIONREAD</tt><tt class="literal">ioctl</tt>:
<blockquote>
<pre class="programlisting">require 'sys/ioctl.ph';

$size = pack("L", 0);
ioctl(FH, FIONREAD(), $size)
    or die "Couldn't call ioctl: $!\n";
$size = unpack("L", $size);</pre>
</blockquote>

If <em class="emphasis">h2ph</em> wasn't installed or doesn't work for you, you can <em class="emphasis">grep</em>
the include files by hand or write a small C program to print out
the value.</p>

<p>
<a name="INDEX-4942"></a>
The return value of <tt class="literal">ioctl</tt> (and <tt class="literal">fcntl</tt>) is as follows:</p>

<a name="perl3-tab-ioctl-returns"></a>
<table border="1">

<tr>
<th>Syscall Returns</th>
<th>Perl Returns</th>
</tr>




<tr>
<td><tt class="literal">-1</tt></td>
<td><tt class="literal">undef</tt></td>
</tr>

<tr>
<td><tt class="literal">0</tt></td>
<td>String "<tt class="literal">0 but true</tt>"</td>
</tr>

<tr>
<td>Anything else</td>
<td>That number</td>
</tr>


</table>
<p>Thus Perl returns true on success and false on failure, yet you can
still easily determine the actual value returned by the operating
system:
<blockquote>
<pre class="programlisting">$retval = ioctl(...) || -1;
printf "ioctl actually returned %d\n", $retval;</pre>
</blockquote>

The special string "<tt class="literal">0 but true</tt>" is exempt from
<tt class="userinput"><b>-w</b></tt> complaints about improper numeric
conversions.</p>

<p>Calls to <tt class="literal">ioctl</tt> should not be considered portable.  If, say, you're
merely turning off echo once for the whole script, it's more
portable to say:
<blockquote>
<pre class="programlisting">system "stty -echo";   # Works on most Unix boxen.</pre>
</blockquote>

Just because you <em class="emphasis">can</em> do something in Perl doesn't mean you <em class="emphasis">ought</em>
to.  To quote the Apostle Paul, "Everything is permissible--but not
everything is beneficial."</p>

<p>For still better portability, you might look at the <tt class="literal">Term::ReadKey</tt>
module from CPAN.</p>






<h3 class="sect2">29.2.78. join&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">join <em class="replaceable">EXPR</em>, <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-4943"></a><a name="INDEX-4944"></a><a name="INDEX-4945"></a>
This function joins the separate strings of <em class="replaceable">LIST</em> into a single string
with fields separated by the value of <em class="replaceable">EXPR</em>, and returns the string.
For example:
<blockquote>
<pre class="programlisting">$rec = join ':', $login,$passwd,$uid,$gid,$gcos,$home,$shell;</pre>
</blockquote>

To do the opposite, see <tt class="literal">split</tt>.  To join things
together into fixed-position fields, see <tt class="literal">pack</tt>.  The
most efficient way to concatenate many strings together is to
<tt class="literal">join</tt> them with a null string:
<blockquote>
<pre class="programlisting">$string = join "", @array;</pre>
</blockquote>

Unlike <tt class="literal">split</tt>, <tt class="literal">join</tt> doesn't take a pattern as its
first argument, and will produce a warning if you try.</p>






<h3 class="sect2">29.2.79. keys&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">keys <em class="replaceable">HASH</em>
</pre>
</blockquote>
<a name="INDEX-4946"></a><a name="INDEX-4947"></a><a name="INDEX-4948"></a>
This function returns a list consisting of all the keys of the
indicated <em class="replaceable">HASH</em>. The keys are returned in an apparently random order,
but it is the same order produced by either the <tt class="literal">values</tt> or <tt class="literal">each</tt>
function (assuming the hash has not been modified between calls).  As a
side effect, it resets <em class="replaceable">HASH</em>'s iterator.  Here is a (rather cork-brained)
way to print your environment:
<blockquote>
<pre class="programlisting">@keys   = keys   %ENV;    # keys are in the same order as
@values = values %ENV;    # values, as this demonstrates
while (@keys) {
    print pop(@keys), '=', pop(@values), "\n";
}</pre>
</blockquote>

You're more likely to want to see the environment sorted by keys:
<blockquote>
<pre class="programlisting">foreach $key (sort keys %ENV) {
    print $key, '=', $ENV{$key}, "\n";
}</pre>
</blockquote>
<a name="INDEX-4949"></a>
You can sort the values of a hash directly, but that's somewhat useless
in the absence of any way to map the values back to the keys.
To sort a hash by value, you generally need to sort the <tt class="literal">keys</tt> by
providing a comparison function that accesses the values based on the
keys.  Here's a descending numeric sort of a hash by its values:
<blockquote>
<pre class="programlisting">foreach $key (sort { $hash{$b} &lt;=&gt; $hash{$a} } keys %hash) {
    printf "%4d %s\n", $hash{$key}, $key;
}</pre>
</blockquote>

Using <tt class="literal">keys</tt> on a hash bound to a largish DBM file will
produce a largish list, causing you to have a largish process.  You
might prefer to use the <tt class="literal">each</tt> function here, which will
iterate over the hash entries one by one without slurping them all into
a single gargantuan list.</p>

<p>In scalar context, <tt class="literal">keys</tt> returns the number of elements of the hash
(and resets the <tt class="literal">each</tt> iterator).  However, to get this information for
tied hashes, including DBM files, Perl must walk the entire hash,
so it's not efficient then.  Calling <tt class="literal">keys</tt> in a void context helps with that.</p>

<p>Used as an lvalue, <tt class="literal">keys</tt> increases the number of hash buckets
allocated for the given hash.  (This is similar to pre-extending an
array by assigning a larger number to <tt class="literal">$#array</tt>.)  Pre-extending your
hash can gain a measure of efficiency if you happen to know the hash is
going to get big, and how big it's going to get.  If you say:
<blockquote>
<pre class="programlisting">keys %hash = 1000;</pre>
</blockquote>

then <tt class="literal">%hash</tt> will have at least 1000 buckets allocated for it (you get
1024 buckets, in fact, since it rounds up to the next power of two).
You can't shrink the number of buckets allocated for the hash using
<tt class="literal">keys</tt> in this way (but you needn't worry about doing this by
accident, as trying has no effect).  The buckets will be retained even
if you do <tt class="literal">%hash = ()</tt>.  Use <tt class="literal">undef %hash</tt> if you want to free the
storage while <tt class="literal">%hash</tt> is still in scope.</p>

<p>See also <tt class="literal">each</tt>, <tt class="literal">values</tt>, and <tt class="literal">sort</tt>.</p>






<h3 class="sect2">29.2.80. kill&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">kill <em class="replaceable">SIGNAL</em>, <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-4950"></a><a name="INDEX-4951"></a><a name="INDEX-4952"></a><a name="INDEX-4953"></a><a name="INDEX-4954"></a><a name="INDEX-4955"></a>
This function sends a signal to a list of processes.  For <em class="replaceable">SIGNAL</em>,
you may use either an integer or a quoted signal name (without
a "<tt class="literal">SIG</tt>" on the front).  Trying to use an unrecognized <em class="replaceable">SIGNAL</em>
name raises an exception.  The function returns the number of processes
successfully signalled. If <em class="replaceable">SIGNAL</em> is negative, the function kills
process groups instead of processes.  (On SysV, a negative
process number will also kill process groups, but that's not
portable.)  A PID of zero sends the signal to all processes of the
same group ID as the sender. For example:
<a name="INDEX-4956"></a><a name="INDEX-4957"></a>
</p>

<p>
<blockquote>
<pre class="programlisting">$cnt = kill 1, $child1, $child2;
kill 9, @goners;
kill 'STOP', getppid       # Can *so* suspend my login shell...
        unless getppid == 1;    # (But don't taunt init(8).)</pre>
</blockquote>

A <em class="replaceable">SIGNAL</em> of <tt class="literal">0</tt> tests whether a process is still alive and that
you still have permission to signal it.  No signal is sent.
This way you can check whether the process is still alive and hasn't
changed its UID.
<blockquote>
<pre class="programlisting">use Errno qw(ESRCH EPERM);
if (kill 0 =&gt; $minion) {
    print "$minion is alive!\n";
} elsif ($! == EPERM) {             # changed UID
    print "$minion has escaped my control!\n";
} elsif ($! == ESRCH) {
    print "$minion is deceased.\n";  # or zombied
} else {
    warn "Odd; I couldn't check on the status of $minion: $!\n";
}</pre>
</blockquote>
</p>

<p>See the section "Signals" in
<a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a>.</p>






<h3 class="sect2">29.2.81. last&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarat.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">last <em class="replaceable">LABEL</em>
last</pre>
</blockquote>
<a name="INDEX-4958"></a><a name="INDEX-4959"></a>
The <tt class="literal">last</tt> operator immediately exits the loop in question, just
like the <tt class="literal">break</tt> statement in C or Java (as used in loops).  If the <em class="replaceable">LABEL</em>
is omitted, the operator refers to the innermost enclosing loop.
The <tt class="literal">continue</tt> block, if any, is not executed.
<blockquote>
<pre class="programlisting">LINE: while (&lt;MAILMSG&gt;) {
    last LINE if /^$/; # exit when done with header
    # rest of loop here
}</pre>
</blockquote>
<tt class="literal">last</tt> cannot be used to exit a block which returns a
value, such as <tt class="literal">eval {}</tt>, <tt class="literal">sub {}</tt>,
or <tt class="literal">do {}</tt>, and should not be used to exit a
<tt class="literal">grep</tt> or <tt class="literal">map</tt> operation.  With
warnings enabled, Perl will warn you if you <tt class="literal">last</tt>
out of a loop that's not in your current lexical scope, such as a loop
in a calling subroutine.</p>

<p>
<a name="INDEX-4960"></a>
A block by itself is semantically identical to a loop that executes
once.  Thus <tt class="literal">last</tt> can be used to effect an early
exit out of such a block.</p>

<p>See also <a href="ch04_01.htm">Chapter 4, "Statements and Declarations"</a> for
illustrations of how <tt class="literal">last</tt>, <tt class="literal">next</tt>,
<tt class="literal">redo</tt>, and <tt class="literal">continue</tt> work.</p>






<h3 class="sect2">29.2.82. lc&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/taintgrey.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">lc <em class="replaceable">EXPR</em>
lc</pre>
</blockquote>
<a name="INDEX-4961"></a><a name="INDEX-4962"></a><a name="INDEX-4963"></a>
This function returns a lowercased version of <em class="replaceable">EXPR</em>. This is the internal function implementing the <tt class="literal">\L</tt>
escape in double-quoted strings.  Your current <tt class="literal">LC_CTYPE</tt> locale
is respected if <tt class="literal">use locale</tt> is in effect, though how locales interact
with Unicode is still a topic of ongoing research, as they say.
See the <em class="emphasis">perllocale</em> manpage for the most recent results.
<a name="INDEX-4964"></a><a name="INDEX-4965"></a><a name="INDEX-4966"></a>
</p>






<h3 class="sect2">29.2.83. lcfirst&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/taintgrey.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">lcfirst <em class="replaceable">EXPR</em>
lcfirst</pre>
</blockquote>
<a name="INDEX-4967"></a>
This function returns a version of <em class="replaceable">EXPR</em> with the first character
lowercased. This is the internal function implementing the <tt class="literal">\l</tt>
escape in double-quoted strings.  Your current <tt class="literal">LC_CTYPE</tt> locale is
respected if you <tt class="literal">use locale</tt> and if we figure out how that relates
to Unicode.</p>






<h3 class="sect2">29.2.84. length&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">length <em class="replaceable">EXPR</em>
length</pre>
</blockquote>
<a name="INDEX-4968"></a><a name="INDEX-4969"></a><a name="INDEX-4970"></a>
This function returns the length in characters of the scalar value
<em class="replaceable">EXPR</em>.  If <em class="replaceable">EXPR</em> is omitted, it returns the length of <tt class="literal">$_</tt>.  (But
be careful that the next thing doesn't look like the start of an
<em class="replaceable">EXPR</em>, or Perl's lexer will get confused.  For example, 
<tt class="literal">length &lt; 10</tt> won't compile.  When in doubt, use parentheses.)</p>

<p>Do not try to use <tt class="literal">length</tt> to find the size of an
array or hash.  Use <tt class="literal">scalar @array</tt> for the size of
an array, and <tt class="literal">scalar keys %hash</tt> for the number of
key/value pairs in a hash.  (The <tt class="literal">scalar</tt> is
typically omitted when redundant.)</p>

<p>To find the length of a string in bytes rather than characters, say:
<blockquote>
<pre class="programlisting">$blen = do { use bytes; length $string; };</pre>
</blockquote>

or:
<blockquote>
<pre class="programlisting">$blen = bytes::length($string);    # must use bytes first</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.85. link&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">link <em class="replaceable">OLDFILE</em>, <em class="replaceable">NEWFILE</em>
</pre>
</blockquote>
<a name="INDEX-4971"></a><a name="INDEX-4972"></a><a name="INDEX-4973"></a>
This function creates a new filename linked to the old filename.  The
function returns true for success, false otherwise.  See also <tt class="literal">symlink</tt> later in this chapter.  This
function is unlikely to be implemented on non-Unix-style filesystems.</p>






<h3 class="sect2">29.2.86. listen&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">listen <em class="replaceable">SOCKET</em>, <em class="replaceable">QUEUESIZE</em>
</pre>
</blockquote>
<a name="INDEX-4974"></a><a name="INDEX-4975"></a>
This function tells the system that you're going to be accepting
connections on this <em class="replaceable">SOCKET</em> and that the system can queue the number
of waiting connections specified by <em class="replaceable">QUEUESIZE</em>.  Imagine having
call-waiting on your phone, with up to 17 callers queued.
(Gives me the willies!)  The function returns true if it succeeded,
false otherwise.
<blockquote>
<pre class="programlisting">use Socket;
listen(PROTOSOCK, SOMAXCONN)
    or die "cannot set listen queue on PROTOSOCK: $!";</pre>
</blockquote>

See <tt class="literal">accept</tt>.  See also the section "Sockets" in <a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a>.  See <em class="emphasis">listen</em>(2).</p>






<h3 class="sect2">29.2.87. local&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">local <em class="replaceable">EXPR</em>
</pre>
</blockquote>
<a name="INDEX-4976"></a><a name="INDEX-4977"></a><a name="INDEX-4978"></a><a name="INDEX-4979"></a><a name="INDEX-4980"></a>
This operator does not create a local variable; use <tt class="literal">my</tt> for that.
Instead, it localizes existing variables; that is, it causes one or
more global variables to have locally scoped values within the
innermost enclosing block, <tt class="literal">eval</tt>, or file.  If more than
one variable is listed, the list must be placed in parentheses because
the operator binds more tightly than commas.  All listed variables
must be legal lvalues, that is, something you could assign to; this can
include individual elements of arrays or hashes.</p>

<p>This operator works by saving the
current values of the specified variables on a hidden stack and restoring
them upon exiting the block, subroutine, <tt class="literal">eval</tt>, or file.  After
the <tt class="literal">local</tt> is executed, but before the scope is exited, any
subroutines and executed formats will see the local, inner value,
instead of the previous, outer value because the variable is still a
global variable, despite having a localized value.  The technical
term for this is "dynamic scoping".  See the section "Scoped Declarations" in <a href="ch04_01.htm">Chapter 4, "Statements and Declarations"</a>.</p>

<p>The <em class="replaceable">EXPR</em> may be assigned to if desired, which allows you to
initialize your variables as you localize them.  If no initializer is
given, all scalars are initialized to <tt class="literal">undef</tt>, and all
arrays and hashes to <tt class="literal">()</tt>.  As with ordinary assignment, if
you use parentheses around the variables on the left (or if the
variable is an array or hash), the expression on the right is evaluated
in list context.  Otherwise, the expression on the right is evaluated in
scalar context.</p>

<p>In any event, the expression on the right is evaluated before the
localization, but the initialization happens after localization, so you
can initialize a localized variable with its nonlocalized value.  For
instance, this code demonstrates how to make a temporary modification
to a global array:
<blockquote>
<pre class="programlisting">if ($sw eq '-v') {
    # init local array with global array
    local @ARGV = @ARGV;
    unshift @ARGV, 'echo';
    system @ARGV;
}
# @ARGV restored</pre>
</blockquote>

You can also temporarily modify global hashes:
<blockquote>
<pre class="programlisting"># temporarily add a couple of entries to the %digits hash
if ($base12) {
    # (NOTE: We're not claiming this is efficient!)
    local(%digits) = (%digits, T =&gt; 10, E =&gt; 11);
    parse_num();
}</pre>
</blockquote>
<a name="INDEX-4981"></a><a name="INDEX-4982"></a>
You can use <tt class="literal">local</tt> to give temporary values to individual
elements of arrays and hashes, even lexically scoped ones:
<blockquote>
<pre class="programlisting">if ($protected) {
    local $SIG{INT} = 'IGNORE';
    precious();     # no interrupts during this function
}                   # previous handler (if any) restored</pre>
</blockquote>
<a name="INDEX-4983"></a><a name="INDEX-4984"></a>
You can also use <tt class="literal">local</tt> on typeglobs to create local filehandles without loading any bulky object modules:
<blockquote>
<pre class="programlisting">local *MOTD;                # protect any global MOTD handle
my $fh = do { local *FH };  # create new indirect filehandle</pre>
</blockquote>

(As of the 5.6 release of Perl, a plain <tt class="literal">my $fh;</tt> is good enough,
because if you give an undefined variable where a real filehandle is expected,
like the first argument to <tt class="literal">open</tt> or <tt class="literal">socket</tt>, Perl now autovivifies
a brand new filehandle for you.)</p>

<p>But in general, you usually want to use <tt class="literal">my</tt> instead
of <tt class="literal">local</tt>, because <tt class="literal">local</tt> isn't
really what most people think of as "local", or even "lo-cal".  See
<tt class="literal">my</tt>.</p>






<h3 class="sect2">29.2.88. localtime&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">localtime <em class="replaceable">EXPR</em>
localtime</pre>
</blockquote>
<a name="INDEX-4985"></a><a name="INDEX-4986"></a><a name="INDEX-4987"></a>
This function converts the value returned by <tt class="literal">time</tt> to a nine-element
list with the time corrected for the local time zone. It's typically
used as follows:
<blockquote>
<pre class="programlisting">#  0    1    2     3     4    5     6     7     8
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime;</pre>
</blockquote>

If, as in this case, <em class="replaceable">EXPR</em> is omitted, it does <tt class="literal">localtime(time())</tt>.</p>

<p>All list elements are numeric and come straight out of a
<tt class="literal">struct tm</tt>.  (That's a bit of C programming
lingo--don't worry about it.) In particular, this means that
<tt class="literal">$mon</tt> has the range <tt class="literal">0..11</tt> with
January as month 0, and <tt class="literal">$wday</tt> has the range
<tt class="literal">0..6</tt> with Sunday as day <tt class="literal">0</tt>.  You
can remember which ones are zero-based because those are the ones
you're always using as subscripts into zero-based arrays containing
month and day names.</p>

<p>For example, to get the name of the current day of the week:
<blockquote>
<pre class="programlisting">$thisday = (Sun,Mon,Tue,Wed,Thu,Fri,Sat)[(localtime)[6]];</pre>
</blockquote>
<tt class="literal">$year</tt> is the number of years since 1900, that is, in year 2023, <tt class="literal">$year</tt> is <tt class="literal">123</tt>, <em class="emphasis">not</em> simply <tt class="literal">23</tt>.  To get
the 4-digit year, just say <tt class="literal">$year + 1900</tt>.  To get the 2-digit year
(for example "01" in 2001), use <tt class="literal">sprintf("%02d", $year % 100)</tt>.</p>

<p>
<a name="INDEX-4988"></a><a name="INDEX-4989"></a>
The Perl library module <tt class="literal">Time::Local</tt> contains a subroutine,
<tt class="literal">timelocal</tt>, that can convert in the opposite direction.</p>

<p>
<a name="INDEX-4990"></a>
In scalar context, <tt class="literal">localtime</tt> returns a
<em class="emphasis">ctime</em>(3)-like string.  For example, the
<em class="emphasis">date</em>(1) command can be
(almost)<a href="#FOOTNOTE-6">[6]</a> emulated with:
<blockquote>
<pre class="programlisting">perl -le 'print scalar localtime'</pre>
</blockquote>
<a name="INDEX-4991"></a>
See also the standard <tt class="literal">POSIX</tt> module's <tt class="literal">strftime</tt> function
for a more fine-grained approach to formatting times.  The
<tt class="literal">Time::localtime</tt> module supports a by-name interface to
this function.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-6"></a>
<p>[6]<em class="emphasis">date</em>(1) prints the
timezone, whereas scalar <tt class="literal">localtime</tt> does
not.</p>

</blockquote>






<h3 class="sect2">29.2.89. lock&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">lock <em class="replaceable">THING</em>
</pre>
</blockquote>
<a name="INDEX-4992"></a><a name="INDEX-4993"></a><a name="INDEX-4994"></a>
The <tt class="literal">lock</tt> function places a lock on a variable, subroutine, or object
referenced by <em class="replaceable">THING</em> until the lock goes out of scope.  For backward
compatibility, this function is a built-in only if your version of Perl
was compiled with threading enabled, and if you've said <tt class="literal">use Threads</tt>.  Otherwise, Perl will assume this is a user-defined function.
See <a href="ch17_01.htm">Chapter 17, "Threads"</a>.</p>






<h3 class="sect2">29.2.90. log&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/dollarat.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">log <em class="replaceable">EXPR</em>
log</pre>
</blockquote>
<a name="INDEX-4995"></a><a name="INDEX-4996"></a>
This function returns the natural logarithm (that is, base <em class="emphasis">e</em>) of
<em class="replaceable">EXPR</em>.  If <em class="replaceable">EXPR</em> is negative, it raises an exception.  To get the
log of another base, use basic algebra: the base-<em class="emphasis">N</em> log of a number is
equal to the natural log of that number divided by the natural log of
<em class="emphasis">N</em>.  For example:
<blockquote>
<pre class="programlisting">sub log10 {
    my $n = shift;
    return log($n)/log(10);
}</pre>
</blockquote>

For the inverse of <tt class="literal">log</tt>, see <tt class="literal">exp</tt>.</p>






<h3 class="sect2">29.2.91. lstat&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">lstat <em class="replaceable">EXPR</em>
lstat</pre>
</blockquote>
<a name="INDEX-4997"></a><a name="INDEX-4998"></a><a name="INDEX-4999"></a>
This function does the same thing as Perl's <tt class="literal">stat</tt> function (including
setting the special <tt class="literal">_</tt> filehandle), but if the last component of
the filename is a symbolic link, it <tt class="literal">stat</tt>s the symbolic link itself instead of
the file that the symbolic link points to.  (If symbolic links are
unimplemented on your system, a normal <tt class="literal">stat</tt> is done instead.)</p>






<h3 class="sect2">29.2.92. m//&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/taintgrey.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">/<em class="replaceable">PATTERN</em>/
m/<em class="replaceable">PATTERN</em>/</pre>
</blockquote>
<a name="INDEX-5000"></a><a name="INDEX-5001"></a><a name="INDEX-5002"></a><a name="INDEX-5003"></a>
This is the match operator, which interprets <em class="replaceable">PATTERN</em> as a regular expression.
The operator is parsed as a double-quoted string rather than as a function.
See <a href="ch05_01.htm">Chapter 5, "Pattern Matching"</a>.</p>






<h3 class="sect2">29.2.93. map&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">map <em class="replaceable">BLOCK</em> <em class="replaceable">LIST</em>
map <em class="replaceable">EXPR</em>, <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-5004"></a><a name="INDEX-5005"></a><a name="INDEX-5006"></a>
This function evaluates the <em class="replaceable">BLOCK</em> or <em class="replaceable">EXPR</em> for each element
of <em class="replaceable">LIST</em> (locally setting <tt class="literal">$_</tt> to each element) and returns the
list comprising the results of each such evaluation.  It evaluates
<em class="replaceable">BLOCK</em> or <em class="replaceable">EXPR</em> in list context, so each element of <em class="replaceable">LIST</em>
may map to zero, one, or more elements in the returned value.
These are all flattened into one list.  For instance:
<blockquote>
<pre class="programlisting">@words = map { split ' ' } @lines;</pre>
</blockquote>

splits a list of lines into a list of words.  But often there is a
one-to-one mapping between input values and output values:
<blockquote>
<pre class="programlisting">@chars = map chr, @nums;</pre>
</blockquote>

translates a list of numbers to the corresponding characters.  And
here's an example of a one-to-two mapping:
<blockquote>
<pre class="programlisting">%hash = map { genkey($_) =&gt; $_ } @array;</pre>
</blockquote>
which is just a funny functional way to write this:
<blockquote>
<pre class="programlisting">%hash = ();
foreach $_ (@array) {
    $hash{genkey($_)} = $_;
}</pre>
</blockquote>

Because <tt class="literal">$_</tt> is an alias (implicit reference) into the list's
values, this variable can be used to modify the elements of the
array.  This is useful and supported, although it can cause bizarre
results if the <em class="replaceable">LIST</em> is not a named array.  Using a regular
<tt class="literal">foreach</tt> loop for this purpose may be clearer.  See also <tt class="literal">grep</tt>;
<tt class="literal">map</tt> differs from <tt class="literal">grep</tt> in that <tt class="literal">map</tt> returns a list consisting
of the results of each successive evaluation of <em class="replaceable">EXPR</em>, whereas
<tt class="literal">grep</tt> returns a list consisting of each value of <em class="replaceable">LIST</em> for which
<em class="replaceable">EXPR</em> evaluates to true.</p>






<h3 class="sect2">29.2.94. mkdir&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">mkdir <em class="replaceable">FILENAME</em>, <em class="replaceable">MASK</em>
mkdir <em class="replaceable">FILENAME</em>
</pre>
</blockquote>
<a name="INDEX-5007"></a><a name="INDEX-5008"></a>
This function creates the directory specified by <em class="replaceable">FILENAME</em>, giving it 
permissions specified by the numeric <em class="replaceable">MASK</em> as modified by the current
<tt class="literal">umask</tt>.  If the operation succeeds, it returns true; otherwise, it
returns false.</p>

<p>If <em class="replaceable">MASK</em> is omitted, a mask of <tt class="literal">0777</tt> is assumed, which is almost
always what you want anyway.  In general, creating
directories with permissive <em class="replaceable">MASK</em>s (like <tt class="literal">0777</tt>) and letting the user
modify that with their <tt class="literal">umask</tt> is better than supplying a restrictive
<em class="replaceable">MASK</em> and giving the user no way to be more permissive.  The exception
to this rule is when the file or directory should be kept private (mail
files, for instance).  See <tt class="literal">umask</tt>.</p>

<p>If the <em class="emphasis">mkdir</em>(2) syscall is not built into your C library, Perl emulates it by
calling the <em class="emphasis">mkdir</em>(1) program for each directory.  If you are
creating a long list of directories on such a system, it'll be more
efficient to call the <em class="emphasis">mkdir</em> program yourself with the list of
directories than it is to start zillions of subprocesses.</p>






<h3 class="sect2">29.2.95. msgctl&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">msgctl <em class="replaceable">ID</em>, <em class="replaceable">CMD</em>, <em class="replaceable">ARG</em>
</pre>
</blockquote>
<a name="INDEX-5009"></a><a name="INDEX-5010"></a><a name="INDEX-5011"></a>
This function calls the System V IPC <em class="emphasis">msgctl</em>(2) syscall; see
<em class="emphasis">msgctl</em>(2) for more details.  You may have to <tt class="literal">use</tt><tt class="literal">IPC::SysV</tt>
first to get the correct constant definitions.  If <em class="replaceable">CMD</em> is
<tt class="literal">IPC_STAT</tt>, then <em class="replaceable">ARG</em> must be a variable that will hold the
returned <tt class="literal">msqid_ds</tt> C structure.  Return values are like <tt class="literal">ioctl</tt>
and <tt class="literal">fcntl</tt>: <tt class="literal">undef</tt> for error, "<tt class="literal">0 but true</tt>" for
zero, or the actual return value otherwise.</p>

<p>This function is available only on machines supporting System V IPC,
which turns out to be far fewer than those supporting sockets.</p>






<h3 class="sect2">29.2.96. msgget&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">msgget <em class="replaceable">KEY</em>, <em class="replaceable">FLAGS</em>
</pre>
</blockquote>
<a name="INDEX-5012"></a>
This function calls the System V IPC <em class="emphasis">msgget</em>(2) syscall. See
<em class="emphasis">msgget</em>(2) for details. The function returns the message queue ID, or
<tt class="literal">undef</tt> if there is an error.  Before calling, you should <tt class="literal">use</tt><tt class="literal">IPC::SysV</tt>.</p>

<p>This function is available only on machines supporting System V IPC.</p>






<h3 class="sect2">29.2.97. msgrcv&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">msgrcv <em class="replaceable">ID</em>, <em class="replaceable">VAR</em>, <em class="replaceable">SIZE</em>, <em class="replaceable">TYPE</em>, <em class="replaceable">FLAGS</em>
</pre>
</blockquote>
<a name="INDEX-5013"></a>
This function calls the <em class="emphasis">msgrcv</em>(2) syscall to receive a message
from message queue <em class="replaceable">ID</em> into variable <em class="replaceable">VAR</em> with a maximum message size
of <em class="replaceable">SIZE</em>.  See <em class="emphasis">msgrcv</em>(2) for details.  When a message is received,
the message type will be the first thing in <em class="replaceable">VAR</em>, and the maximum
length of <em class="replaceable">VAR</em> is <em class="replaceable">SIZE</em> plus the size of the message type.  The
function returns true if successful, or false if there is an error.  Before calling, you should
<tt class="literal">use</tt><tt class="literal">IPC::SysV</tt>.</p>

<p>This function is available only on machines supporting System V IPC.</p>






<h3 class="sect2">29.2.98. msgsnd&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">msgsnd <em class="replaceable">ID</em>, <em class="replaceable">MSG</em>, <em class="replaceable">FLAGS</em>
</pre>
</blockquote>
<a name="INDEX-5014"></a>
This function calls the <em class="emphasis">msgsnd</em>(2) syscall to send the message
<em class="replaceable">MSG</em> to the message queue <em class="replaceable">ID</em>. See <em class="emphasis">msgsnd</em>(2) for details.  <em class="replaceable">MSG</em>
must begin with the long integer message type.  You can create a message
like this:
<blockquote>
<pre class="programlisting">$msg = pack "L a*", $type, $text_of_message;</pre>
</blockquote>

The function returns true if successful, or false if there is an
error.  Before calling, <tt class="literal">use</tt><tt class="literal">IPC::SysV</tt>.</p>

<p>This function is available only on machines supporting System V IPC.</p>






<h3 class="sect2">29.2.99. my&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">my <em class="replaceable">TYPE EXPR</em> : <em class="replaceable">ATTRIBUTES</em>
my <em class="replaceable">EXPR</em> : <em class="replaceable">ATTRIBUTES</em>
my <em class="replaceable">TYPE EXPR</em>
my <em class="replaceable">EXPR</em>
</pre>
</blockquote>
<a name="INDEX-5015"></a><a name="INDEX-5016"></a><a name="INDEX-5017"></a>
This operator declares one or more private variables to exist only
within the innermost enclosing block, subroutine, <tt class="literal">eval</tt>, or file.
If more than one variable is listed, the list must be placed in
parentheses because the operator binds more tightly than commas.
Only simple scalars or complete arrays and hashes may be declared
this way.</p>

<p>The variable name cannot be package qualified, because package
variables are all globally accessible through their corresponding
symbol table, and lexical variables are unrelated to any symbol table.
Unlike <tt class="literal">local</tt>, then, this operator has nothing to do with global
variables, other than hiding any other variable of the same name from
view within its scope (that is, where the private variable exists).  A
global variable can always be accessed through its package-qualified
form, however, or through a symbolic reference.</p>

<p>
<a name="INDEX-5018"></a><a name="INDEX-5019"></a><a name="INDEX-5020"></a>
A private variable's scope does not start until the statement <em class="emphasis">after</em> its
declaration.  The variable's scope extends into any enclosed blocks
thereafter, up to the end of the scope of the variable itself.</p>

<p>
<a name="INDEX-5021"></a>
However, this means that any subroutines you call from within
the scope of a private variable cannot see the private variable unless
the block that defines the subroutine itself is also textually enclosed
within the scope of that variable.  That sounds complicated, but it's
not once you get the hang of it.  The technical term for this is
<em class="emphasis">lexical scoping</em>, so we often call these <em class="emphasis">lexical variables</em>.  In C
culture, they're sometimes called "auto" variables, since they're automatically
allocated and deallocated at scope entry and exit.</p>

<p>The <em class="replaceable">EXPR</em> may be assigned to if desired, which allows you to
initialize your lexical variables.  (If no initializer is given, all
scalars are initialized to the undefined value and all arrays and
hashes to the empty list.)  As with ordinary assignment, if you use
parentheses around the variables on the left (or if the variable is an
array or hash), the expression on the right is evaluated in list
context.  Otherwise, the expression on the right is evaluated in scalar
context.  For example, you can name your formal subroutine parameters
with a list assignment, like this:
<blockquote>
<pre class="programlisting">my ($friends, $romans, $countrymen) = @_;</pre>
</blockquote>

But be careful not to omit the parentheses indicating list assignment, like
this:
<blockquote>
<pre class="programlisting">my $country = @_;  # right or wrong?</pre>
</blockquote>

This assigns the length of the array (that is, the number of the
subroutine's arguments) to the variable, since the array is being
evaluated in scalar context. You can profitably use scalar assignment
for a formal parameter though, as long as you use the <tt class="literal">shift</tt> operator.
In fact, since object methods are passed the object as the first
argument, many method subroutines start off by "stealing" the first argument:
<blockquote>
<pre class="programlisting">sub simple_as {
    my $self = shift;   # scalar assignment
    my ($a,$b,$c) = @_; # list assignment
    ...
}</pre>
</blockquote>
If you attempt to declare a lexically scoped subroutine with
<tt class="literal">my sub</tt>, Perl will die with the message that this
feature has not been implemented yet.  (Unless, of course, this
feature <em class="emphasis">has</em> been implemented yet.)</p>

<p>The <em class="replaceable">TYPE</em> and
<em class="replaceable">ATTRIBUTES</em> are optional, which is just as
well, since they're both considered experimental.  Here's what a
declaration that uses them might look like:
<blockquote>
<pre class="programlisting">my Dog $spot :ears(short) :tail(long);</pre>
</blockquote>
<a name="INDEX-5022"></a>
The <em class="replaceable">TYPE</em>, if specified, indicates what kind
of scalar or scalars are declared in <em class="replaceable">EXPR</em>,
either directly as one or more scalar variables,
or indirectly through an array or hash.  If
<em class="replaceable">TYPE</em> is the name of the
class, the scalars will be assumed to contain references to objects of
that type, or to objects compatible with that type.  In particular,
derived classes are considered compatible.  That is, assuming
<tt class="literal">Collie</tt> is derived from <tt class="literal">Dog</tt>,
you might declare:
<blockquote>
<pre class="programlisting">my Dog $lassie = new Collie;</pre>
</blockquote>

Your declaration claims that you will use the
<tt class="literal">$lassie</tt> object
consistently with its being a <tt class="literal">Dog</tt> object.  The
fact that it's
actually a <tt class="literal">Collie</tt> object shouldn't matter as long
as you only try to
do <tt class="literal">Dog</tt> things.  Through the magic of virtual
methods, the
implementation of those <tt class="literal">Dog</tt> methods might well be
in the <tt class="literal">Collie</tt>
class, but the declaration above is only talking about the interface,
not the implementation.  In theory.</p>

<p>
<a name="INDEX-5023"></a><a name="INDEX-5024"></a>
Interestingly, up through version 5.6.0, the only time Perl pays
attention to the <em class="replaceable">TYPE</em> declaration is when
the corresponding class
has declared fields with the <tt class="literal">use fields</tt>
pragma.  Together, these
declarations allow the pseudohash implementation of a class to "show
through" to code outside the class, so that hash lookups can be
optimized by the compiler into array lookups.  In a sense, the
pseudohash <em class="emphasis">is</em> the interface to such a class, so
our theory remains
intact, if a bit battered.  For more on pseudohashes, see the section
"Pseudohashes" in <a href="ch08_01.htm">Chapter 8, "References"</a>.</p>

<p>In the future, other types of classes may interpret the
<em class="replaceable">TYPE</em> differently.  The
<em class="replaceable">TYPE</em> declaration should be considered a
generic type interface that might someday be instantiated in various
ways depending on the class.  In fact, the
<em class="replaceable">TYPE</em> might not even be an official class
name.  We're reserving the lowercase type names for Perl, because one
of the ways we'd like to extend the type interface is to allow
optional low-level type declarations such as <tt class="literal">int</tt>,
<tt class="literal">num</tt>, <tt class="literal">str</tt>, and
<tt class="literal">ref</tt>.  These declarations will not be for the
purpose of strong typing; rather, they'll be hints to the compiler
telling it to optimize the storage of the variable with the assumption
that the variable will be used mostly as declared.  The semantics of
scalars will stay pretty much the same--you'll still be able to
add two <tt class="literal">str</tt> scalars, or print an
<tt class="literal">int</tt> scalar, just as though they were the ordinary
polymorphic scalars you're familiar with.  But with an
<tt class="literal">int</tt> declaration Perl might decide to store only the
integer value and forget about caching the resulting string as it
currently does.  Loops with <tt class="literal">int</tt> loop variables
might run faster, particularly in code compiled down to C.  In
particular, arrays of numbers could be stored much more compactly.  As
a limiting case, the built-in <tt class="literal">vec</tt> function might
even become obsolete when we can write declarations such as:
<blockquote>
<pre class="programlisting">my bit @bitstring;</pre>
</blockquote>
</p>

<p>
<a name="INDEX-5025"></a>
The <em class="replaceable">ATTRIBUTES</em> declaration is even more
experimental.  We haven't
done much more than reserve the syntax and prototype the internal
interface; see the <tt class="literal">use attributes</tt> pragma in
<a href="ch31_01.htm">Chapter 31, "Pragmatic Modules"</a> for more on
that.  The first attribute we'll implement is likely to be
<tt class="literal">constant</tt>:
<blockquote>
<pre class="programlisting">my num $PI : constant = atan2(1,1) * 4;</pre>
</blockquote>

But there are many other possibilities, such as establishing default
values for arrays and hashes, or letting variables be shared among
cooperating interpreters.  Like the type interface, the attribute
interface should be considered a generic interface, a kind of workbench
for inventing new syntax and semantics.  We do not know how Perl will
evolve in the next 10 years.  We only know that we can make it easier
on ourselves by planning for that in advance.</p>

<p>See also <tt class="literal">local</tt>, <tt class="literal">our</tt>, and the
section "Scoped Declarations" in
<a href="ch04_01.htm">Chapter 4, "Statements and Declarations"</a>.</p>






<h3 class="sect2">29.2.100. new&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">new <em class="replaceable">CLASSNAME</em> <em class="replaceable">LIST</em>
new <em class="replaceable">CLASSNAME</em>
</pre>
</blockquote>
<a name="INDEX-5026"></a><a name="INDEX-5027"></a>
There is no built-in <tt class="literal">new</tt> function.  It is merely an ordinary
constructor method (that is, a user-defined subroutine) that is defined or
inherited by the <em class="replaceable">CLASSNAME</em> class (that is, package) to let you
construct objects of type <em class="replaceable">CLASSNAME</em>.  Many constructors are named
"new", but only by convention, just to trick C++ programmers into
thinking they know what's going on.  Always read the documentation
of the class in question so you know how to call its constructors;
for example, the constructor that creates a list box in the Tk
widget set is just called <tt class="literal">Listbox()</tt>.  See <a href="ch12_01.htm">Chapter 12, "Objects"</a>.</p>






<h3 class="sect2">29.2.101. next&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarat.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">next <em class="replaceable">LABEL</em>
next</pre>
</blockquote>
<a name="INDEX-5028"></a><a name="INDEX-5029"></a>
The <tt class="literal">next</tt> operator is like the <tt class="literal">continue</tt> statement in C: it starts
the next iteration of the loop designated by <em class="replaceable">LABEL</em>:
<blockquote>
<pre class="programlisting">LINE: while (&lt;STDIN&gt;) {
    next LINE if /^#/;     # discard comments
    ...
}</pre>
</blockquote>

If there were a <tt class="literal">continue</tt> block in this example, it would be
executed immediately following the invocation of <tt class="literal">next</tt>. When <em class="replaceable">LABEL</em>
is omitted, the operator refers to the innermost enclosing loop.</p>

<p>A block by itself is semantically identical to a loop
that executes once.  Thus, <tt class="literal">next</tt> will exit such a block early
(via the <tt class="literal">continue</tt> block, if there is one).</p>

<p>
<tt class="literal">next</tt> cannot be used to exit a block that returns a
value, such as <tt class="literal">eval {}</tt>, <tt class="literal">sub {}</tt>,
or <tt class="literal">do {}</tt>, and should not be used to exit a
<tt class="literal">grep</tt> or <tt class="literal">map</tt> operation.  With
warnings enabled, Perl will warn you if you <tt class="literal">next</tt>
out of a loop not in your current lexical scope, such as a loop in a
calling subroutine.  See the section "Loop Statements" in
<a href="ch04_01.htm">Chapter 4, "Statements and Declarations"</a>.</p>






<h3 class="sect2">29.2.102. no&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarat.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">no <em class="replaceable">MODULE</em> <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-5030"></a>
See the <tt class="literal">use</tt> operator, which is the opposite of
<tt class="literal">no</tt>, kind of.  Most standard modules do not unimport
anything, making <tt class="literal">no</tt> a no-op, as it were.  The
pragmatic modules tend to be more obliging here.  If the
<em class="replaceable">MODULE</em> cannot be found, an exception is
raised.</p>






<h3 class="sect2">29.2.103. oct&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">oct <em class="replaceable">EXPR</em>
oct</pre>
</blockquote>
<a name="INDEX-5031"></a><a name="INDEX-5032"></a><a name="INDEX-5033"></a><a name="INDEX-5034"></a><a name="INDEX-5035"></a><a name="INDEX-5036"></a><a name="INDEX-5037"></a>
This function interprets <em class="replaceable">EXPR</em> as an octal string and returns the
equivalent decimal value. If <em class="replaceable">EXPR</em> happens to start with "<tt class="literal">0x</tt>",
it is interpreted as a hexadecimal string instead.  If <em class="replaceable">EXPR</em> starts
off with "<tt class="literal">0b</tt>", it is interpreted as a string of binary digits.
The following will properly convert to numbers any input strings
in decimal, binary, octal, and hex bases written in standard
C or C++ notation:
<blockquote>
<pre class="programlisting">$val = oct $val if $val =~ /^0/;</pre>
</blockquote>

To perform the inverse function, use <tt class="literal">sprintf</tt> with an appropriate
format:</p>

<p>
<a name="INDEX-5038"></a>
<blockquote>
<pre class="programlisting">$perms = (stat("filename"))[2] &amp; 07777;
$oct_perms = sprintf "%lo", $perms;</pre>
</blockquote>

The <tt class="literal">oct</tt> function is commonly used when a data string such as
"<tt class="literal">644</tt>" needs to be converted into a file mode, for example. Although
Perl will automatically convert strings into numbers as needed, this
automatic conversion assumes base 10.</p>






<h3 class="sect2">29.2.104. open&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">open <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">MODE</em>, <em class="replaceable">LIST</em>
open <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">EXPR</em>
open <em class="replaceable">FILEHANDLE</em>
</pre>
</blockquote>
<a name="INDEX-5039"></a><a name="INDEX-5040"></a><a name="INDEX-5041"></a>
The <tt class="literal">open</tt> function associates an internal <em class="replaceable">FILEHANDLE</em> with an
external file specification given by <em class="replaceable">EXPR</em> or <em class="replaceable">LIST</em>.  It may be
called with one, two, or three arguments (or more if the third argument is
a command, and you're running at least version 5.6.1 of Perl).  If three or more
arguments are present, the second argument specifies the access <em class="replaceable">MODE</em>
in which the file should be opened, and the third argument 
(<em class="replaceable">LIST</em>) supplies
the actual filename or the command to execute, depending on the mode.
In the case of a command, additional arguments may be supplied if you
wish to invoke the command directly without involving a shell, much
like <tt class="literal">system</tt> or <tt class="literal">exec</tt>.  Or the command may be supplied as a single
argument (the third one), in which case the decision to invoke the shell
depends on whether the command contains shell metacharacters.  (Don't
use more than three arguments if the arguments are ordinary filenames; it won't work.)
If the <em class="replaceable">MODE</em> is not recognized, <tt class="literal">open</tt> raises an exception.</p>

<p>If only two arguments are present, the mode and filename/command are
assumed to be combined in the second argument.  (And if you don't
specify a mode in the second argument, just a filename, then the file
is opened read-only to be on the safe side.)</p>

<p>With only one argument, the package scalar variable of the same name as
the <em class="replaceable">FILEHANDLE</em> must contain the filename and optional mode:
<blockquote>
<pre class="programlisting">$LOG = "&gt;logfile";        # $LOG must not be declared my!
   open LOG or die "Can't open logfile: $!";</pre>
</blockquote>

But don't do that.  It's not stylin'.  Forget we mentioned it.</p>

<p>The <tt class="literal">open</tt> function returns true when it succeeds and <tt class="literal">undef</tt>
otherwise.  If the <tt class="literal">open</tt> starts up a pipe to a child process, the
return value will be the process ID of that new process.  As with
any syscall, always check the return value of <tt class="literal">open</tt> to make sure it
worked.  But this isn't C or Java, so don't use an <tt class="literal">if</tt> statement when
the <tt class="literal">or</tt> operator will do.  You can also use <tt class="literal">||</tt>, but if you do, use
parentheses on the <tt class="literal">open</tt>.  If you choose to omit parentheses on the
function call to turn it into a list operator, be careful to use "<tt class="literal">or die</tt>" after the list rather than "<tt class="literal">|| die</tt>", because the precedence of
<tt class="literal">||</tt> is higher than list operators like <tt class="literal">open</tt>, and the <tt class="literal">||</tt> will
bind to your last argument, not the whole <tt class="literal">open</tt>:
<blockquote>
<pre class="programlisting">open LOG, "&gt;logfile" || die "Can't create logfile: $!";  # WRONG
open LOG, "&gt;logfile" or die "Can't create logfile: $!";  # ok</pre>
</blockquote>
That looks rather intense, but typically you'd introduce some
whitespace to tell your eye where the list operator ends:
<blockquote>
<pre class="programlisting">open LOG, "&gt;logfile"
        or die "Can't create logfile: $!";</pre>
</blockquote>
<a name="INDEX-5042"></a><a name="INDEX-5043"></a><a name="INDEX-5044"></a>
As that example shows, the <em class="replaceable">FILEHANDLE</em>
argument is often just a simple identifier (normally uppercase), but
it may also be an expression whose value provides a reference to the
actual filehandle.  (The reference may be either a symbolic reference
to the filehandle name or a hard reference to any object that can be
interpreted as a filehandle.)  This is called an <em class="emphasis">indirect
filehandle</em>, and any function that takes a
<em class="replaceable">FILEHANDLE</em> as its first argument can handle
indirect filehandles as well as direct ones.  But
<tt class="literal">open</tt> is special in that if you supply it with an
undefined variable for the indirect filehandle, Perl will
automatically define that variable for you, that is, autovivifying it
to contain a proper filehandle reference.  One advantage of this is
that the filehandle will be closed automatically when there are no
further references to it, typically when the variable goes out of
scope:
<blockquote>
<pre class="programlisting">{
        my $fh;                   # (uninitialized)
        open($fh, "&gt;logfile")     # $fh is autovivified
            or die "Can't create logfile: $!";
        ...                       # do stuff with $fh
}                                 # $fh closed here</pre>
</blockquote>
The <tt class="literal">my</tt><tt class="literal">$fh</tt> declaration can be
readably incorporated into the <tt class="literal">open</tt>:
<blockquote>
<pre class="programlisting">open my $fh, "&gt;logfile" or die ...</pre>
</blockquote>
<a name="INDEX-5045"></a><a name="INDEX-5046"></a><a name="INDEX-5047"></a><a name="INDEX-5048"></a><a name="INDEX-5049"></a><a name="INDEX-5050"></a><a name="INDEX-5051"></a>
The <tt class="literal">&gt;</tt> symbol you've been seeing in front of the
filename is an example of a mode.  Historically, the two-argument form
of <tt class="literal">open</tt> came first.  The recent addition of the
three-argument form lets you separate the mode from the filename,
which has the advantage of avoiding any possible confusion between the
two.  In the following example, we know that the user is not trying to
open a filename that happens to start with "<tt class="literal">&gt;</tt>".
We can be sure that they're specifying a
<em class="replaceable">MODE</em> of "<tt class="literal">&gt;</tt>", which
opens the file named in <em class="replaceable">EXPR</em> for writing,
creating the file if it doesn't exist and truncating the file down to
nothing if it already exists:
<blockquote>
<pre class="programlisting">open(LOG, "&gt;", "logfile")  or die "Can't create logfile: $!";</pre>
</blockquote>

In the shorter forms, the filename and mode are in the same string.
The string is parsed much as the typical shell processes file and
pipe redirections.  First, any leading and trailing whitespace is
removed from the string.  Then the string is examined, on either end if
need be, for characters specifying how the file is to be opened.
Whitespace is allowed between the mode and the filename.</p>

<p>The modes that indicate how to open a file are shell-like redirection
symbols.  A list of these symbols is provided in <a href="ch29_02.htm">Table 29-1</a>.
(To access a file with combinations of open modes not covered by
this table, see the low-level <tt class="literal">sysopen</tt> function.)</p>

<a name="perl3-tab-open-modes"></a>
<h4 class="objtitle">Table 29.1. Modes for open</h4>
<table border="1">

<tr>
<th></th>
<th>Read</th>
<th>Write</th>
<th>Append</th>
<th>Create</th>
<th>Clobber</th>
</tr>

<tr>
<th>Mode</th>
<th>Access</th>
<th>Access</th>
<th>Only</th>
<th>Nonexisting</th>
<th>Existing</th>
</tr>




<tr>
<td><tt class="literal">&lt;</tt> <em class="replaceable">PATH</em></td>
<td>Y</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>N</td>
</tr>

<tr>
<td><tt class="literal">&gt;</tt> <em class="replaceable">PATH</em></td>
<td>N</td>
<td>Y</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
</tr>

<tr>
<td><tt class="literal">&gt;&gt;</tt> <em class="replaceable">PATH</em></td>
<td>N</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
</tr>

<tr>
<td><tt class="literal">+&lt;</tt> <em class="replaceable">PATH</em></td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>N</td>
<td>N</td>
</tr>

<tr>
<td><tt class="literal">+&gt;</tt> <em class="replaceable">PATH</em></td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
</tr>

<tr>
<td><tt class="literal">+&gt;&gt;</tt> <em class="replaceable">PATH</em></td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
</tr>

<tr>
<td><tt class="literal">|</tt> <em class="replaceable">COMMAND</em></td>
<td>N</td>
<td>Y</td>
<td>n/a</td>
<td>n/a</td>
<td>n/a</td>
</tr>

<tr>
<td><em class="replaceable">COMMAND</em> <tt class="literal">|</tt></td>
<td>Y</td>
<td>N</td>
<td>n/a</td>
<td>n/a</td>
<td>n/a</td>
</tr>


</table>

<p>
<a name="INDEX-5052"></a>
If the mode is "<tt class="literal">&lt;</tt>" or nothing, an existing file
is opened for input.  If the mode is "<tt class="literal">&gt;</tt>", the
file is opened for output, which truncates existing files and creates
nonexistent ones.  If the mode is "<tt class="literal">&gt;&gt;</tt>",
the file is created if needed and opened for appending, and all output 
is automatically placed at the end of the file.  If a new file is created
because you used a mode of "<tt class="literal">&gt;</tt>" or "<tt class="literal">&gt;&gt;</tt>" and the
file did not previously exist, access permissions will depend on the
process's current <tt class="literal">umask</tt> under the rules described for that
function.</p>

<p>Here are common examples:
<blockquote>
<pre class="programlisting">open(INFO,      "datafile")  || die("can't open datafile: $!");
open(INFO,    "&lt; datafile")  || die("can't open datafile: $!");
open(RESULTS, "&gt; runstats")  || die("can't open runstats: $!");
open(LOG,    "&gt;&gt; logfile ")  || die("can't open logfile:  $!");</pre>
</blockquote>

If you prefer the low-punctuation version, you can write:
<blockquote>
<pre class="programlisting">open INFO,      "datafile"   or die "can't open datafile: $!";
open INFO,    "&lt; datafile"   or die "can't open datafile: $!";
open RESULTS, "&gt; runstats"   or die "can't open runstats: $!";
open LOG,    "&gt;&gt; logfile "   or die "can't open logfile:  $!";</pre>
</blockquote>
<a name="INDEX-5053"></a>
When opened for reading, the special filename "<tt class="literal">-</tt>" refers to
<tt class="literal">STDIN</tt>.  When opened for writing, the same special filename refers
to <tt class="literal">STDOUT</tt>.  Normally, these are specified as "<tt class="literal">&lt;-</tt>" and
"<tt class="literal">&gt;-</tt>", respectively.
<blockquote>
<pre class="programlisting">open(INPUT,  "-" ) or die;     # re-open standard input for reading
open(INPUT,  "&lt;-") or die;     # same thing, but explicit
open(OUTPUT, "&gt;-") or die;     # re-open standard output for writing</pre>
</blockquote>

This way the user can supply a program with a filename that will use the standard input or the standard output, but the author
of the program doesn't have to write special code to know about
this.</p>

<p>
<a name="INDEX-5054"></a><a name="INDEX-5055"></a>
You may also place a "<tt class="literal">+</tt>" in front of any of these three modes
to request simultaneous read and write.  However, whether the file
is clobbered or created and whether it must already exist is still
governed by your choice of less-than or greater-than signs.  This
means that  "<tt class="literal">+&lt;</tt>" is almost always preferred for read/write
updates, as the dubious "<tt class="literal">+&gt;</tt>" mode would first clobber the
file before you could ever read anything from it.  (Use that mode
only if you want to reread only what you just wrote.)
<blockquote>
<pre class="programlisting">open(DBASE, "+&lt; database")
    or die "can't open existing database in update mode: $!";</pre>
</blockquote>

You can treat a file opened for update as a random-access
database and use <tt class="literal">seek</tt> to move to a particular byte number, but the
variable-length records of regular text files usually make it
impractical to use read-write mode to update such files.  See the
<tt class="userinput"><b>-i</b></tt> command-line option in <a href="ch19_01.htm">Chapter 19, "The Command-Line Interface"</a> for a different approach
to updating.</p>

<p>If the leading character in <em class="replaceable">EXPR</em> is a pipe symbol, <tt class="literal">open</tt> fires
up a new process and connects a write-only filehandle to the
command.  This way you can write into that handle and what you
write will show up on that command's standard input.  For example:
<blockquote>
<pre class="programlisting">open(PRINTER, "| lpr -Plp1")    or die "can't fork: $!";
print PRINTER "stuff\n";
close(PRINTER)                  or die "lpr/close failed: $?/$!";</pre>
</blockquote>
<a name="INDEX-5056"></a>
If the trailing character in <em class="replaceable">EXPR</em> is a pipe symbol, <tt class="literal">open</tt> again
launches a new process, but this time with a read-only filehandle
connected to it.  This allows whatever the command writes to its
standard output to show up on your handle for reading.  For example:
<blockquote>
<pre class="programlisting">open(NET, "netstat -i -n |")    or die "can't fork: $!";
while (&lt;NET&gt;) { ... }
close(NET)                      or die "can't close netstat: $!/$?";</pre>
</blockquote>
<a name="INDEX-5057"></a>
Explicitly closing any piped filehandle causes the parent process to
wait for the child to finish and returns the status code in
<tt class="literal">$?</tt> (<tt class="literal">$CHILD_ERROR</tt>).  It's also
possible for <tt class="literal">close</tt> to set
<tt class="literal">$!</tt> (<tt class="literal">$OS_ERROR</tt>).  See the
examples under <tt class="literal">close</tt> and <tt class="literal">system</tt>
for how to interpret these error codes.</p>

<p>
<a name="INDEX-5058"></a><a name="INDEX-5059"></a>
Any pipe command containing shell metacharacters such as wildcards
or I/O redirections is passed to your system's canonical shell
(<em class="emphasis">/bin/sh</em> on Unix), so those shell-specific constructs can be
processed first.  If no metacharacters are found, Perl launches the
new process itself without calling the shell.</p>

<p>You may also use the three-argument form to start up pipes.
Using that style, the equivalent of the previous pipe opens would be:
<blockquote>
<pre class="programlisting">open(PRINTER, "|-", "lpr -Plp1")    or die "can't fork: $!";
open(NET, "-|", "netstat -i -n")    or die "can't fork: $!";</pre>
</blockquote>

Here the minus in the second argument represents the command in the
third argument.  These commands don't happen to invoke the shell, but
if you want to guarantee no shell processing occurs, new versions of Perl let you say:
<blockquote>
<pre class="programlisting">open(PRINTER, "|-", "lpr", "-Plp1")    or die "can't fork: $!";
open(NET, "-|", "netstat", "-i", "-n") or die "can't fork: $!";</pre>
</blockquote>
<a name="INDEX-5060"></a><a name="INDEX-5061"></a>
If you use the two-argument form to open a pipe to or from the special
command "<tt class="literal">-</tt>",<a href="#FOOTNOTE-7">[7]</a> 
an implicit <tt class="literal">fork</tt> is done first.  (On systems
that can't <tt class="literal">fork</tt>, this raises an exception.  Microsoft systems did not
support <tt class="literal">fork</tt> prior to the 5.6 release of Perl.)  In
this case, the minus represents your new child process, which is a copy
of the parent.  The return value from this forking <tt class="literal">open</tt> is the
process ID of the child when examined from the parent process, <tt class="literal">0</tt>
when examined from the child process, and the undefined value <tt class="literal">undef</tt>
if the <tt class="literal">fork</tt> fails--in which case, there is no child.  For example:
<blockquote>
<pre class="programlisting">defined($pid = open(FROM_CHILD, "-|"))
        or die "can't fork: $!";

if ($pid) {
        @parent_lines = &lt;FROM_CHILD&gt;;  # parent code
}
else {
        print STDOUT @child_lines;     # child code
}</pre>
</blockquote>

The filehandle behaves normally for the parent, but for the child
process, the parent's input (or output) is piped from (or to) the
child's <tt class="literal">STDOUT</tt> (or <tt class="literal">STDIN</tt>).  The child process does not see the
parent's filehandle opened.  (This is conveniently indicated by the <tt class="literal">0</tt> PID.)
<a name="INDEX-5062"></a><a name="INDEX-5063"></a>
Typically you'd use this construct instead of the normal piped <tt class="literal">open</tt>
when you want to exercise more control over just how the pipe command
gets executed (such as when you are running setuid) and don't want to
have to scan shell commands for metacharacters.  The following piped opens
are roughly equivalent:
<blockquote>
<pre class="programlisting">open FH,            "| tr   'a-z'  'A-Z'";        # pipe to shell command
open FH, "|-",        'tr', 'a-z', 'A-Z';         # pipe to bare command
open FH, "|-" or exec 'tr', 'a-z', 'A-Z' or die;  # pipe to child</pre>
</blockquote>

as are these:
<blockquote>
<pre class="programlisting">open FH,              "cat    -n   'file' |";     # pipe from shell command
open FH, "-|",        'cat', '-n', 'file';        # pipe from bare command
open FH, "-|" or exec 'cat', '-n', 'file' or die; # pipe from child</pre>
</blockquote>

For more elaborate uses of fork open, see the sections "Talking to
Yourself" in <a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a>
and "Cleaning Up Your Environment" in <a href="ch23_01.htm">Chapter 23, "Security"</a>.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-7"></a>
<p>[7]Or you can think of it as 
leaving the command off of the three-argument forms above.</p>

</blockquote>

<p>When starting a command with <tt class="literal">open</tt>, you must choose
either input or output: "<tt class="literal">cmd|</tt>" for reading or
"<tt class="literal">|cmd</tt>" for writing.  You may not use
<tt class="literal">open</tt> to start a command that pipes both in and out,
as the (currently) illegal notation, <tt class="literal">"|cmd|"</tt>, might
appear to indicate.  However, the standard
<tt class="literal">IPC::Open2</tt> and <tt class="literal">IPC::Open3</tt>
library routines give you a close equivalent.  For details on
double-ended pipes, see the section "Bidirectional Communication" in
<a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a>.</p>

<p>
<a name="INDEX-5064"></a><a name="INDEX-5065"></a>
You may also, in the Bourne shell tradition, specify an
<em class="replaceable">EXPR</em> beginning with
<tt class="literal">&gt;&amp;</tt>, in which case the rest of the string is
interpreted as the name of a filehandle (or file descriptor, if
numeric) to be duplicated using the
<em class="emphasis">dup2</em>(2) syscall.<a href="#FOOTNOTE-8">[8]</a>  You may use <tt class="literal">&amp;</tt> after
<tt class="literal">&gt;</tt>, <tt class="literal">&gt;&gt;</tt>,
<tt class="literal">&lt;</tt>, <tt class="literal">+&gt;</tt>,
<tt class="literal">+&gt;&gt;</tt>, and <tt class="literal">+&lt;</tt>.  (The
specified mode should match the mode of the original filehandle.)</p>
<blockquote class="footnote">

<a name="FOOTNOTE-8"></a>
<p>[8]This
doesn't (currently) work with I/O objects on typeglob references by
filehandle autovivification, but you can always use
<tt class="literal">fileno</tt> to fetch the file descriptor and dup
that.</p>

</blockquote>

<p>One reason you might want to do this would be if you already had a
filehandle open and wanted to make another handle that's really a
duplicate of the first one.
<blockquote>
<pre class="programlisting">open(SAVEOUT, "&gt;&amp;SAVEERR") or die "couldn't dup SAVEERR: $!";
open(MHCONTEXT, "&lt;&amp;4")     or die "couldn't dup fd4: $!";</pre>
</blockquote>
<a name="INDEX-5066"></a>
That means that if a function is expecting a filename, but you don't
want to give it a filename because you already have the file open, you
can just pass the filehandle with a leading ampersand.  It's best to
use a fully qualified handle though, just in case the function happens
to be in a different package:
<blockquote>
<pre class="programlisting">somefunction("&amp;main::LOGFILE");</pre>
</blockquote>

Another reason to "dup" filehandles is to temporarily
redirect an existing filehandle without losing track
of the original destination.  Here is a script that saves, redirects, and
restores <tt class="literal">STDOUT</tt> and <tt class="literal">STDERR</tt>:
<blockquote>
<pre class="programlisting">#!/usr/bin/perl
open SAVEOUT, "&gt;&amp;STDOUT";
open SAVEERR, "&gt;&amp;STDERR";

open STDOUT, "&gt;foo.out" or die "Can't redirect stdout";
open STDERR, "&gt;&amp;STDOUT" or die "Can't dup stdout";

select STDERR; $| = 1;         # enable autoflush
select STDOUT; $| = 1;         # enable autoflush

print STDOUT "stdout 1\n";     # these I/O streams propagate to
print STDERR "stderr 1\n";     # subprocesses too

system("some command");        # uses new stdout/stderr

close STDOUT;
close STDERR;

open STDOUT, "&gt;&amp;SAVEOUT";
open STDERR, "&gt;&amp;SAVEERR";

print STDOUT "stdout 2\n";
print STDERR "stderr 2\n";</pre>
</blockquote>
<a name="INDEX-5067"></a>
If the filehandle or descriptor number is preceded by a
<tt class="literal">&amp;=</tt> combination instead of a simple
<tt class="literal">&amp;</tt>, then instead of
creating a completely new file descriptor, Perl makes the
<em class="replaceable">FILEHANDLE</em> an alias for the existing
descriptor using the <em class="emphasis">fdopen</em>(3) C library
call.  This is slightly more parsimonious of systems resources,
although that's less of a concern these days.
<blockquote>
<pre class="programlisting">$fd = $ENV{"MHCONTEXTFD"};
open(MHCONTEXT, "&lt;&amp;=$fdnum")
        or die "couldn't fdopen descriptor $fdnum: $!";</pre>
</blockquote>
<a name="INDEX-5068"></a><a name="INDEX-5069"></a><a name="INDEX-5070"></a><a name="INDEX-5071"></a>
Filehandles <tt class="literal">STDIN</tt>, <tt class="literal">STDOUT</tt>, and
<tt class="literal">STDERR</tt> always remain open across an
<tt class="literal">exec</tt>.  Other filehandles, by default, do not.  On
systems supporting the <tt class="literal">fcntl</tt> function, you may
modify the close-on-exec flag for a filehandle.
<blockquote>
<pre class="programlisting">use Fcntl qw(F_GETFD F_SETFD);
$flags = fcntl(FH, F_SETFD, 0)
        or die "Can't clear close-on-exec flag on FH: $!\n";</pre>
</blockquote>
See also the special <tt class="literal">$^F</tt>
(<tt class="literal">$SYSTEM_FD_MAX</tt>) variable in
<a href="ch28_01.htm">Chapter 28, "Special Names"</a>.</p>

<p>With the one- or two-argument form of <tt class="literal">open</tt>, you
have to be careful when you use a string variable as a filename, since
the variable may contain arbitrarily weird characters (particularly
when the filename has been supplied by arbitrarily weird characters on
the Internet).  If you're not careful, parts of the filename might get
interpreted as a <em class="replaceable">MODE</em> string, ignorable
whitespace, a dup specification, or a minus.  Here's one historically
interesting way to insulate yourself:
<blockquote>
<pre class="programlisting">$path =~ s#^(\s)#./$1#;
open (FH, "&lt; $path\0") or die "can't open $path: $!";</pre>
</blockquote>
<a name="INDEX-5072"></a>
But that's still broken in several ways.  Instead, just use the
three-argument form of <tt class="literal">open</tt> to open any arbitrary
filename cleanly and without any (extra) security risks:
<blockquote>
<pre class="programlisting">open(FH, "&lt;", $path) or die "can't open $path: $!";</pre>
</blockquote>
On the other hand, if what you're looking for is a true, C-style
<em class="emphasis">open</em>(2) syscall with all its attendant
belfries and whistle-stops, then check out <tt class="literal">sysopen</tt>:
<blockquote>
<pre class="programlisting">use Fcntl;
sysopen(FH, $path, O_RDONLY) or die "can't open $path: $!";</pre>
</blockquote>
<a name="INDEX-5073"></a><a name="INDEX-5074"></a><a name="INDEX-5075"></a><a name="INDEX-5076"></a>
If you're running on a system that distinguishes between text and
binary files, you may need to put your filehandle into binary mode--or
forgo doing so, as the case may be--to avoid mutilating your files.
On such systems, if you use text mode on a binary file, or binary mode
on a text file, you probably won't like the
results.</p>

<p>Systems that need the <tt class="literal">binmode</tt>
function are distinguished from those that don't by the format used
for text files.  Those that don't need it terminate each line with a
single character that corresponds to what C thinks is a newline,
<tt class="literal">\n</tt>.  Unix and Mac OS fall into this category. VMS,
MVS, MS-whatever, and S&amp;M operating systems of other varieties
treat I/O on text files and binary files differently, so they need
<tt class="literal">binmode</tt>.
</p>

<p>Or its equivalent.  As of the 5.6 release of Perl, you can specify
binary mode in the <tt class="literal">open</tt> function without a separate
call to <tt class="literal">binmode</tt>.  As part of the
<em class="replaceable">MODE</em> argument (but only in the
three-argument form), you may specify various input and output
disciplines.  To do the equivalent of a <tt class="literal">binmode</tt>,
use the three argument form of <tt class="literal">open</tt> and stuff a
discipline of <tt class="literal">:raw</tt> in after the other
<em class="replaceable">MODE</em> characters:
<blockquote>
<pre class="programlisting">open(FH, "&lt;:raw", $path) or die "can't open $path: $!";</pre>
</blockquote>

Since this is a very new feature, there will certainly be more
disciplines by the time you read this than there were when we wrote
it.  However, we can reasonably predict that there will in all
likelihood be disciplines resembling some or all of the ones in
<a href="ch29_02.htm">Table 29-2</a>.</p>

<a name="perl3-tab-disciplines"></a>
<h4 class="objtitle">Table 29.2. I/O Disciplines</h4>
<table border="1">

<tr>
<th>Discipline</th>
<th>Meaning</th>
</tr>




<tr>
<td><tt class="literal">:raw</tt></td>
<td>Binary mode; do no processing</td>
</tr>

<tr>
<td><tt class="literal">:text</tt></td>
<td>Default text processing</td>
</tr>

<tr>
<td><tt class="literal">:def</tt></td>
<td>Default declared by "<tt class="literal">use open</tt>"</td>
</tr>

<tr>
<td><tt class="literal">:latin1</tt></td>
<td>File should be <tt class="literal">ISO-8859-</tt>1</td>
</tr>

<tr>
<td><tt class="literal">:ctype</tt></td>
<td>File should be<tt class="literal"> LC_CTYPE</tt></td>
</tr>

<tr>
<td><tt class="literal">:utf8</tt></td>
<td>File should be <tt class="literal">UTF-8</tt></td>
</tr>

<tr>
<td><tt class="literal">:utf16</tt></td>
<td>File should be <tt class="literal">UTF-16</tt></td>
</tr>

<tr>
<td><tt class="literal">:utf32</tt></td>
<td>File should be <tt class="literal">UTF-32</tt></td>
</tr>

<tr>
<td><tt class="literal">:uni</tt></td>
<td>Intuit Unicode <tt class="literal">(UTF-*</tt>)</td>
</tr>

<tr>
<td><tt class="literal">:any</tt></td>
<td>Intuit <tt class="literal">Unicode/Latin1/LC_CTYPE</tt></td>
</tr>

<tr>
<td><tt class="literal">:xml</tt></td>
<td>Use encoding specified in file</td>
</tr>

<tr>
<td><tt class="literal">:crlf</tt></td>
<td>Intuit newlines</td>
</tr>

<tr>
<td><tt class="literal">:para</tt></td>
<td>Paragraph mode</td>
</tr>

<tr>
<td><tt class="literal">:slurp</tt></td>
<td>Slurp mode</td>
</tr>


</table>

<p>
<a name="INDEX-5077"></a>
You'll be able to stack disciplines that make sense to stack, so, for
instance, you could say:
<blockquote>
<pre class="programlisting">open(FH, "&lt;:para:crlf:uni", $path) or die "can't open $path: $!";
while ($para = &lt;FH&gt;) { ... }</pre>
</blockquote>

That would set up disciplines to:</p>

<ul>
<li>
<p>read in some form of Unicode and translate to Perl's internal UTF-8 format
if the file isn't already in UTF-8,</p>
</li>
<li>
<p>look for variants of line-ending sequences, translating them all to <tt class="literal">\n</tt>, and</p>
</li>
<li>
<p>process the file into paragraph-sized chunks, much as <tt class="literal">$/ = ""</tt> does.</p>
</li>
</ul>
<p>
</p>

<p>If you want to set the default open mode (<tt class="literal">:def</tt>) to something other
than <tt class="literal">:text</tt>, you can declare that at the top of your file with the <tt class="literal">open</tt> pragma:
<blockquote>
<pre class="programlisting">use open IN =&gt; ":any", OUT =&gt; ":utf8";</pre>
</blockquote>

In fact, it would be really nice if that were the default <tt class="literal">:text</tt>
discipline someday.  It perfectly captures the spirit of "Be liberal in
what you accept, and strict in what you produce."</p>






<h3 class="sect2">29.2.105. opendir&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">opendir <em class="replaceable">DIRHANDLE</em>, <em class="replaceable">EXPR</em>
</pre>
</blockquote>
<a name="INDEX-5078"></a><a name="INDEX-5079"></a>
This function opens a directory named <em class="replaceable">EXPR</em> for processing by
<tt class="literal">readdir</tt>, <tt class="literal">telldir</tt>, <tt class="literal">seekdir</tt>, <tt class="literal">rewinddir</tt>, and <tt class="literal">closedir</tt>.  The
function returns true if successful.  Directory handles have their own
namespace separate from filehandles.</p>






<h3 class="sect2">29.2.106. ord&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">ord <em class="replaceable">EXPR</em>
ord</pre>
</blockquote>
<a name="INDEX-5080"></a><a name="INDEX-5081"></a><a name="INDEX-5082"></a><a name="INDEX-5083"></a>
This function returns the numeric value (ASCII, Latin-1, or Unicode)
of the first character of <em class="replaceable">EXPR</em>.  The return value is always
unsigned. If you want a signed value, use <tt class="literal">unpack('c',</tt><em class="replaceable">EXPR</em><tt class="literal">)</tt>. If you want all the characters of the string converted to
a list of numbers, use <tt class="literal">unpack('U*',</tt><em class="replaceable">EXPR</em><tt class="literal">)</tt> instead.</p>






<h3 class="sect2">29.2.107. our&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">our <em class="replaceable">TYPE EXPR</em> : <em class="replaceable">ATTRIBUTES</em>
our <em class="replaceable">EXPR</em> : <em class="replaceable">ATTRIBUTES</em>
our <em class="replaceable">TYPE EXPR</em>
our <em class="replaceable">EXPR</em>
</pre>
</blockquote>
<a name="INDEX-5084"></a><a name="INDEX-5085"></a><a name="INDEX-5086"></a><a name="INDEX-5087"></a><a name="INDEX-5088"></a>
An <tt class="literal">our</tt> declares one or more variables to be valid globals within
the enclosing block, file, or <tt class="literal">eval</tt>.  That is, <tt class="literal">our</tt> has the same
rules as a <tt class="literal">my</tt> declaration for determination of visibility, but
does not create a new private variable; it merely allows unfettered
access to the existing package global.  If more than one value is listed,
the list must be placed in parentheses.</p>

<p>The primary use of an <tt class="literal">our</tt> declaration is to hide the variable from
the effects of a <tt class="literal">use strict "vars"</tt> declaration; since the variable
is masquerading as a <tt class="literal">my</tt> variable, you are permitted to use the
declared global variable without qualifying it with its package.
However, just like the <tt class="literal">my</tt> variable, this only works within the
lexical scope of the <tt class="literal">our</tt> declaration.  In this respect, it differs
from <tt class="literal">use vars</tt>, which affects the entire package and is not lexically
scoped.</p>

<p>
<tt class="literal">our</tt> is also like <tt class="literal">my</tt> in that you are allowed to declare variables
with a <em class="replaceable">TYPE</em> and with <em class="replaceable">ATTRIBUTES</em>.  Here is the syntax:
<blockquote>
<pre class="programlisting">our Dog $spot :ears(short) :tail(long);</pre>
</blockquote>
<a name="INDEX-5089"></a>
As of this writing, it's not entirely clear what that will mean.
Attributes could affect either the global or the local interpretation
of <tt class="literal">$spot</tt>.  On the one hand, it would be most like
<tt class="literal">my</tt> variables for attributes to warp the current
local view of <tt class="literal">$spot</tt> without interfering with other
views of the global in other places.  On the other hand, if one module
declares <tt class="literal">$spot</tt> to be a <tt class="literal">Dog</tt>, and
another declares <tt class="literal">$spot</tt> to be a
<tt class="literal">Cat</tt>, you could end up with meowing dogs or barking
cats.  This is a subject of ongoing research, which is a fancy way to
say we don't know what we're talking about yet.  (Except that we do
know what to do with the <em class="replaceable">TYPE</em> declaration
when the variable refers to a pseudohash--see "Managing Instance
Data" in <a href="ch12_01.htm">Chapter 12, "Objects"</a>.)</p>

<p>Another way in which <tt class="literal">our</tt> is like <tt class="literal">my</tt> is in its visibility.
An <tt class="literal">our</tt> declaration declares a global variable that will be visible
across its entire lexical scope, even across package boundaries.  The
package in which the variable is located is determined at the point
of the declaration, not at the point of use.  This means the following
behavior holds and is deemed to be a feature:
<blockquote>
<pre class="programlisting">package Foo;
our $bar;      # $bar is $Foo::bar for rest of lexical scope
$bar = 582;

package Bar;
print $bar;    # prints 582, just as if "our" had been "my"</pre>
</blockquote>

However, the distinction between <tt class="literal">my</tt> creating a new, private variable
and <tt class="literal">our</tt> exposing an existing, global variable is important,
especially in assignments.  If you combine
a run-time assignment with an <tt class="literal">our</tt> declaration, the value
of the global variable does not disappear once the <tt class="literal">our</tt> goes
out of scope.  For that, you need <tt class="literal">local</tt>:
<blockquote>
<pre class="programlisting">($x, $y) = ("one", "two");
print "before block, x is $x, y is $y\n";
{
    our $x = 10;
    local our $y = 20;
    print "in block, x is $x, y is $y\n";
}
print "past block, x is $x, y is $y\n";</pre>
</blockquote>

That prints out:
<blockquote>
<pre class="programlisting">before block, x is one, y is two
in block, x is 10, y is 20
past block, x is 10, y is two</pre>
</blockquote>

Multiple <tt class="literal">our</tt> declarations in the same lexical scope are allowed
if they are in different packages.  If they happen to be in the same
package, Perl will emit warnings if you ask it to.
<blockquote>
<pre class="programlisting">use warnings;
package Foo;
our $bar;          # declares $Foo::bar for rest of lexical scope
$bar = 20;

package Bar;
our $bar = 30;     # declares $Bar::bar for rest of lexical scope
print $bar;        # prints 30

our $bar;          # emits warning</pre>
</blockquote>

See also <tt class="literal">local</tt>, <tt class="literal">my</tt>, and the
section "Scoped Declarations" in
<a href="ch04_01.htm">Chapter 4, "Statements and Declarations"</a>.</p>






<h3 class="sect2">29.2.108. pack&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarat.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">pack <em class="replaceable">TEMPLATE</em>, <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-5090"></a><a name="INDEX-5091"></a><a name="INDEX-5092"></a><a name="INDEX-5093"></a><a name="INDEX-5094"></a><a name="INDEX-5095"></a>
This function takes a <em class="replaceable">LIST</em> of ordinary Perl values and converts them
into a string of bytes according to the <em class="replaceable">TEMPLATE</em> and returns this
string.  The argument list will be padded or truncated as necessary.
That is, if you provide fewer arguments than the <em class="replaceable">TEMPLATE</em> requires, <tt class="literal">pack</tt> assumes additional null arguments.  If you provide more arguments than the <em class="replaceable">TEMPLATE</em>
requires, the extra arguments are
ignored.  Unrecognized format elements in <em class="replaceable">TEMPLATE</em> will raise
an exception.</p>

<p>The template describes the structure of the string as a sequence of
fields.  Each field is represented by a single character that
describes the type of the value and its encoding.  For instance, a
format character of <tt class="literal">N</tt> specifies an unsigned
four-byte integer in big-endian byte order.</p>

<p>Fields are packed in the order given in the template.
For example, to pack an unsigned one-byte integer and a
single-precision floating-point value into a string, you'd say:
<blockquote>
<pre class="programlisting">$string = pack("Cf", 244, 3.14);</pre>
</blockquote>

The first byte of the returned string has the value 244.  The
remaining bytes are the encoding of 3.14 as a single-precision
float.  The particular encoding of the floating point number depends
on your computer's hardware.</p>

<p>Some important things to consider when packing are:</p>

<ul>
<li>
<p>the type of data (such as integer or float or string),</p>
</li>
<li>
<p>the range of values (such as whether your integers will fit into one,
two, four, or maybe even eight bytes; or whether you're packing 8-bit
or Unicode characters),</p>
</li>
<li>
<p>whether your integers are signed or unsigned, and</p>
</li>
<li>
<p>the encoding to use (such as native, little-endian, or big-endian packing of
bits and bytes).</p>
</li>
</ul>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a>
</p>

<p>
<a href="ch29_02.htm">Table 29-3</a> lists the format characters and their meanings.  (Other characters
can occur in formats as well; these are described later.)</p>

<a name="perl3-tab-pack-chars"></a>
<h4 class="objtitle">Table 29.3. Template Characters for pack/unpack</h4>
<table border="1">

<tr>
<th>Character</th>
<th>Meaning</th>
</tr>




<tr>
<td><tt class="literal">a</tt></td>
<td>A null-padded string of bytes</td>
</tr>

<tr>
<td><tt class="literal">A</tt></td>
<td>A space-padded string of bytes</td>
</tr>

<tr>
<td><tt class="literal">b</tt></td>
<td>A bit string, in ascending bit order inside each byte (like <tt class="literal">vec</tt>)</td>
</tr>

<tr>
<td><tt class="literal">B</tt></td>
<td>A bit string,  in descending bit order inside each byte</td>
</tr>

<tr>
<td><tt class="literal">c</tt></td>
<td>A signed char (8-bit integer) value</td>
</tr>

<tr>
<td><tt class="literal">C</tt></td>
<td>
<p>An unsigned char (8-bit integer) value; see <tt class="literal">U</tt> for Unicode</p>
</td>
</tr>

<tr>
<td><tt class="literal">d</tt></td>
<td>A double-precision floating-point number in native format</td>
</tr>

<tr>
<td><tt class="literal">f</tt></td>
<td>A single-precision floating-point number in native format</td>
</tr>

<tr>
<td><tt class="literal">h</tt></td>
<td>A hexadecimal string, low nybble first</td>
</tr>

<tr>
<td><tt class="literal">H</tt></td>
<td>A hexadecimal string, high nybble first</td>
</tr>

<tr>
<td><tt class="literal">i</tt></td>
<td>A signed integer value, native format</td>
</tr>

<tr>
<td><tt class="literal">I</tt></td>
<td>An unsigned integer value, native format</td>
</tr>

<tr>
<td><tt class="literal">l</tt></td>
<td>A signed long value, always 32 bits</td>
</tr>

<tr>
<td><tt class="literal">L</tt></td>
<td>An unsigned long value, always 32 bits</td>
</tr>

<tr>
<td><tt class="literal">n</tt></td>
<td>A 16-bit short in "network" (big-endian) order</td>
</tr>

<tr>
<td><tt class="literal">N</tt></td>
<td>A 32-bit long in "network" (big-endian) order</td>
</tr>

<tr>
<td><tt class="literal">p</tt></td>
<td>A pointer to a null-terminated string</td>
</tr>

<tr>
<td><tt class="literal">P</tt></td>
<td>A pointer to a fixed-length string</td>
</tr>

<tr>
<td><tt class="literal">q</tt></td>
<td>A signed quad (64-bit integer) value</td>
</tr>

<tr>
<td><tt class="literal">Q</tt></td>
<td>An unsigned quad (64-bit integer) value</td>
</tr>

<tr>
<td><tt class="literal">s</tt></td>
<td>A signed short value, always 16 bits</td>
</tr>

<tr>
<td><tt class="literal">S</tt></td>
<td>An unsigned short value, always 16 bits</td>
</tr>

<tr>
<td><tt class="literal">u</tt></td>
<td>A uuencoded string</td>
</tr>

<tr>
<td><tt class="literal">U</tt></td>
<td>A Unicode character number</td>
</tr>

<tr>
<td><tt class="literal">v</tt></td>
<td>A 16-bit short in "VAX" (little-endian) order</td>
</tr>

<tr>
<td><tt class="literal">V</tt></td>
<td>A 32-bit long in "VAX" (little-endian) order</td>
</tr>

<tr>
<td><tt class="literal">w</tt></td>
<td>A BER compressed integer</td>
</tr>

<tr>
<td><tt class="literal">x</tt></td>
<td>A null byte (skip forward a byte)</td>
</tr>

<tr>
<td><tt class="literal">X</tt></td>
<td>Back up a byte</td>
</tr>

<tr>
<td><tt class="literal">Z</tt></td>
<td>A null-terminated (and null-padded) string of bytes</td>
</tr>

<tr>
<td><tt class="literal">@</tt></td>
<td>Null-fill to absolute position</td>
</tr>


</table>

<p>You may freely place whitespace and comments in your
<em class="replaceable">TEMPLATE</em>s.  Comments start with the
customary <tt class="literal">#</tt> symbol and extend up through the first
newline (if any) in the <em class="replaceable">TEMPLATE</em>.</p>

<p>Each letter may be followed by a number indicating the <em class="emphasis">count</em>,
interpreted as a repeat count or length of some sort, depending on the
format.  With all formats except <tt class="literal">a</tt>, <tt class="literal">A</tt>, <tt class="literal">b</tt>, <tt class="literal">B</tt>, <tt class="literal">h</tt>, <tt class="literal">H</tt>,
<tt class="literal">P</tt>, and <tt class="literal">Z</tt>, <em class="emphasis">count</em> is a repeat count, so <tt class="literal">pack</tt> gobbles up that
many values from the <em class="replaceable">LIST</em>.  A <tt class="literal">*</tt> for the <em class="emphasis">count</em> means however many items are left.</p>

<p>The <tt class="literal">a</tt>, <tt class="literal">A</tt>, and <tt class="literal">Z</tt> formats gobble just one value, but pack it
as a byte string of length <em class="emphasis">count</em>, padding with nulls or spaces as
necessary.  When unpacking, <tt class="literal">A</tt> strips trailing spaces and nulls,
<tt class="literal">Z</tt> strips everything after the first null, and <tt class="literal">a</tt> returns the
literal data unmolested.  When packing, <tt class="literal">a</tt> and <tt class="literal">Z</tt> are equivalent.</p>

<p>Similarly, the <tt class="literal">b</tt> and <tt class="literal">B</tt> formats pack a string <em class="emphasis">count</em> bits
long.  Each byte of the input field generates 1 bit of the result
based on the least-significant bit of each input byte (that is,
on <tt class="literal">ord($byte) % 2</tt>).  Conveniently, that means bytes <tt class="literal">0</tt> and <tt class="literal">1</tt> generate
bits 0 and 1.  Starting from the beginning of the input string,
each 8-tuple of bytes is converted to a single byte of output.  If the
length of the input string is not divisible by 8, the remainder is
packed as if padded by 0's.  Similarly, during <tt class="literal">unpack</tt>ing any
extra bits are ignored.  If the input string is longer than needed,
extra bytes are ignored.  A <tt class="literal">*</tt> for the <em class="emphasis">count</em>
means to use all  bytes from the input field.  On <tt class="literal">unpack</tt>ing, the
bits are converted to a string of <tt class="literal">0</tt>s and <tt class="literal">1</tt>s.</p>

<p>The <tt class="literal">h</tt> and <tt class="literal">H</tt> formats pack a string of <em class="emphasis">count</em> nybbles (4-bit
groups often represented as hexadecimal digits).</p>

<p>
<a name="INDEX-5096"></a>
The <tt class="literal">p</tt> format packs a pointer to a null-terminated string.  You
are responsible for ensuring the string is not a temporary value
(which can potentially get deallocated before you get around to
using the packed result).  The <tt class="literal">P</tt> format packs a pointer to a
structure of the size indicated by <em class="emphasis">count</em>.  A null pointer is
created if the corresponding value for <tt class="literal">p</tt> or <tt class="literal">P</tt> is <tt class="literal">undef</tt>.</p>

<p>The <tt class="literal">/</tt> character allows packing and unpacking of strings where
the packed structure contains a byte count followed by the string
itself.  You write <em class="replaceable">length-item/string-item</em>.  The <em class="replaceable">length-item</em>
can be any <tt class="literal">pack</tt> template letter, and describes how the length
value is packed.  The ones likely to be of most use are integer-packing
ones like <tt class="literal">n</tt> (for Java strings), <tt class="literal">w</tt> (for ASN.1 or SNMP) and
<tt class="literal">N</tt> (for Sun XDR).  The <em class="replaceable">string-item</em> must, at present, be
<tt class="literal">A*</tt>, <tt class="literal">a*</tt>, or <tt class="literal">Z*</tt>.  For <tt class="literal">unpack</tt>, the length of the string
is obtained from the <em class="replaceable">length-item</em>, but if you put in the <tt class="literal">*</tt>, it
will be ignored.
<blockquote>
<pre class="programlisting">unpack 'C/a', "\04Gurusamy";        # gives 'Guru'
unpack 'a3/A* A*', '007 Bond  J ';  # gives (' Bond','J')
pack 'n/a* w/a*','hello,','world';  # gives "\000\006hello,\005world"</pre>
</blockquote>

The <em class="replaceable">length-item</em> is not returned explicitly from <tt class="literal">unpack</tt>.
Adding a <em class="emphasis">count</em> to the <em class="replaceable">length-item</em> letter is unlikely to do anything
useful, unless that letter is <tt class="literal">A</tt>, <tt class="literal">a</tt>, or <tt class="literal">Z</tt>.  Packing with a
<em class="replaceable">length-item</em> of <tt class="literal">a</tt> or <tt class="literal">Z</tt> may introduce null (<tt class="literal">\0</tt>) characters,
which Perl does not regard as legal in numeric strings.</p>

<p>
<a name="INDEX-5097"></a><a name="INDEX-5098"></a>
The integer formats <tt class="literal">s</tt>, <tt class="literal">S</tt>, <tt class="literal">l</tt>, and <tt class="literal">L</tt> may be immediately
followed by a <tt class="literal">!</tt> to signify native shorts or longs instead of
exactly 16 or 32 bits respectively.  Today, this is an issue mainly
in 64-bit platforms, where the native shorts and longs as seen by
the local C compiler can be different than these values.  (<tt class="literal">i!</tt>
and <tt class="literal">I!</tt> also work but only because of completeness; they are
identical to <tt class="literal">i</tt> and <tt class="literal">I</tt>.)</p>

<p>
<a name="INDEX-5099"></a><a name="INDEX-5100"></a><a name="INDEX-5101"></a>
The actual sizes (in bytes) of native shorts, ints, longs, and long
longs on the platform where Perl was built are also available via
the <tt class="literal">Config</tt> module:
<blockquote>
<pre class="programlisting">use Config;
print $Config{shortsize},    "\n";
print $Config{intsize},      "\n";
print $Config{longsize},     "\n";
print $Config{longlongsize}, "\n";</pre>
</blockquote>

Just because <em class="emphasis">Configure</em> knows the size of a long long, doesn't
necessarily imply that you have <tt class="literal">q</tt> or <tt class="literal">Q</tt> formats available to
you.  (Some systems do, but you're probably not running one.  Yet.)</p>

<p>Integer formats of greater than one byte in length
(<tt class="literal">s</tt>, <tt class="literal">S</tt>, <tt class="literal">i</tt>,
<tt class="literal">I</tt>, <tt class="literal">l</tt>, and <tt class="literal">L</tt>)
are inherently nonportable between processors because they obey the
native byte order and endianness.  If you want portable packed
integers, use the formats <tt class="literal">n</tt>, <tt class="literal">N</tt>,
<tt class="literal">v</tt>, and <tt class="literal">V</tt>; their byte endianness
and size are known.</p>

<p>
<a name="INDEX-5102"></a>
Floating-point numbers are in the native machine format
only.  Because of the variety of floating formats and lack of a
standard "network" representation, no facility for interchange has
been made.  This means that packed floating-point data written on
one machine may not be readable on another.  This is a problem even
when both machines use IEEE floating-point arithmetic, because the
endian-ness of the memory representation is not part of the IEEE
spec.</p>

<p>Perl uses doubles internally for all floating-point calculation, so
converting from double into float, then back again to double will
lose precision.  This means that <tt class="literal">unpack("f", pack("f", $foo))</tt>
will not generally equal <tt class="literal">$foo</tt>.</p>

<p>
<a name="INDEX-5103"></a><a name="INDEX-5104"></a>
You are responsible for any alignment or padding considerations
expected by other programs, particularly those programs that were
created by a C compiler with its own idiosyncratic notions of how to
lay out a C <tt class="literal">struct</tt> on the particular architecture in question.
You'll have to add enough <tt class="literal">x</tt>'s while packing to make up for this.
For example, a C declaration of:
<blockquote>
<pre class="programlisting">struct foo {
        unsigned char c;
        float f;
};</pre>
</blockquote>

might be written out in a "<tt class="literal">C x f</tt>" format, a "<tt class="literal">C x3 f</tt>" format,
or even a "<tt class="literal">f C</tt>" format--just to name a few.  The <tt class="literal">pack</tt> and
<tt class="literal">unpack</tt> functions handle their input and output as flat sequences
of bytes because there is no way for them to know where the bytes
are going to or coming from.</p>

<p>Let's look at some examples.  This first pair packs numeric values
into bytes:
<blockquote>
<pre class="programlisting">$out = pack "CCCC", 65, 66, 67, 68;      # $out eq "ABCD"
$out = pack "C4", 65, 66, 67, 68;        # same thing</pre>
</blockquote>

This one does the same thing with Unicode circled letters:
<blockquote>
<pre class="programlisting">$foo = pack("U4",0x24b6,0x24b7,0x24b8,0x24b9);</pre>
</blockquote>

This does a similar thing, with a couple of nulls thrown in:
<blockquote>
<pre class="programlisting">$out = pack "CCxxCC", 65, 66, 67, 68;    # $out eq "AB\0\0CD"</pre>
</blockquote>

Packing your shorts doesn't imply that you're portable:
<blockquote>
<pre class="programlisting">$out = pack "s2", 1, 2;    # "\1\0\2\0" on little-endian
                           # "\0\1\0\2" on big-endian</pre>
</blockquote>
On binary and hex packs, the <em class="emphasis">count</em> refers to the
number of bits or nybbles, not the number of bytes produced:
<blockquote>
<pre class="programlisting">$out = pack "B32", "01010000011001010111001001101100";
$out = pack "H8", "5065726c";    # both produce "Perl"</pre>
</blockquote>

The length on an <tt class="literal">a</tt> field applies only to one string:
<blockquote>
<pre class="programlisting">$out = pack "a4", "abcd", "x", "y", "z";      # "abcd"</pre>
</blockquote>

To get around that limitation, use multiple specifiers:
<blockquote>
<pre class="programlisting">$out = pack "aaaa",  "abcd", "x", "y", "z";   # "axyz"
$out = pack "a" x 4, "abcd", "x", "y", "z";   # "axyz"</pre>
</blockquote>

The <tt class="literal">a</tt> format does null filling:
<blockquote>
<pre class="programlisting">$out = pack "a14", "abcdefg";   # "abcdefg\0\0\0\0\0\0\0"</pre>
</blockquote>

This template packs a C <tt class="literal">struct tm</tt> record (at least on some systems):
<blockquote>
<pre class="programlisting">$out = pack "i9pl", gmtime(), $tz, $toff;</pre>
</blockquote>

Generally, the same template may also be used in the <tt class="literal">unpack</tt> function,
although some formats act differently, notably <tt class="literal">a</tt>, <tt class="literal">A</tt>, and <tt class="literal">Z</tt>.</p>

<p>If you want to join fixed-width text fields together, use <tt class="literal">pack</tt>
with a <em class="replaceable">TEMPLATE</em> of several <tt class="literal">A</tt> or <tt class="literal">a</tt> formats:
<blockquote>
<pre class="programlisting">$string = pack("A10" x 10, @data);</pre>
</blockquote>

If you want to join variable-width text fields with a separator, use the
<tt class="literal">join</tt> function instead:
<blockquote>
<pre class="programlisting">$string = join(" and ", @data);
$string = join("", @data);             # null separator</pre>
</blockquote>

Although all of our examples used literal strings as templates,
there is no reason you couldn't pull in your templates from a disk
file.  You could build an entire relational database system around
this function.  (What that would prove about you we won't get into.)</p>

<a name="INDEX-5105"></a><a name="INDEX-5106"></a><a name="INDEX-5107"></a><a name="INDEX-5108"></a><a name="INDEX-5109"></a>






<h3 class="sect2">29.2.109. package&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">package <em class="replaceable">NAMESPACE</em>
package</pre>
</blockquote>
<a name="INDEX-5110"></a><a name="INDEX-5111"></a>
This is not really a function, but a declaration that says that the
rest of the innermost enclosing scope belongs to the indicated symbol
table or namespace.  (The scope of a <tt class="literal">package</tt> declaration is thus the
same as the scope of a <tt class="literal">my</tt> or <tt class="literal">our</tt> declaration.)  Within its scope,
the declaration causes the compiler to resolve all unqualified global
identifiers by looking them up in the declared package's symbol table.</p>

<p>A <tt class="literal">package</tt> declaration affects only global variables--including those
on which you've used <tt class="literal">local</tt>--not lexical variables created with <tt class="literal">my</tt>.
It only affects unqualified global variables; global variables that are
qualified with a package name of their own ignore the current declared
package.  Global variables declared with <tt class="literal">our</tt> are unqualified and
therefore respect the current package, but only at the point of declaration,
after which they behave like <tt class="literal">my</tt> variables.  That is, for the rest of
their lexical scope, <tt class="literal">our</tt> variables are "nailed" to the package in
use at the point of declaration, even if a subsequent package
declaration intervenes.</p>

<p>Typically, you would put a <tt class="literal">package</tt> declaration as the first thing
in a file that is to be included by the <tt class="literal">require</tt> or <tt class="literal">use</tt> operator,
but you can put one anywhere a statement would be legal.  When
creating a traditional or objected-oriented module file, it is
customary to name the package the same name as the file to avoid
confusion.  (It's also customary to name such packages beginning
with a capital letter because lowercase modules are by convention
interpreted as pragmatic modules.)</p>

<p>You can switch into a given package in more than one place; it merely
influences which symbol table is used by the compiler for the rest of
that block.  (If the compiler sees another <tt class="literal">package</tt> declaration at the same
level, the new declaration overrides the previous one.)  Your main program is
assumed to start with an invisible <tt class="literal">package main</tt> declaration.</p>

<p>You can refer to variables, subroutines, handles, and formats in
other packages by qualifying the identifier with the package name
and a double colon: <tt class="literal">$Package::Variable</tt>.  If the package name is
null, the main package is assumed.  That is, <tt class="literal">$::sail</tt> is equivalent
to <tt class="literal">$main::sail</tt>, as well as to <tt class="literal">$main'sail</tt>, which is still
occasionally seen in older code.</p>

<p>Here's an example:
<blockquote>
<pre class="programlisting">package main;       $sail = "hale and hearty";
package Mizzen;     $sail = "tattered";
package Whatever;
print "My main sail is $main::sail.\n";
print "My mizzen sail is $Mizzen::sail.\n";</pre>
</blockquote>

This prints:
<blockquote>
<pre class="programlisting">My main sail is hale and hearty.
My mizzen sail is tattered.</pre>
</blockquote>
<a name="INDEX-5112"></a>
The symbol table for a package is stored in a hash with a name
ending in a double colon.  The main package's symbol table is named
<tt class="literal">%main::</tt> for example.  So the existing package symbol <tt class="literal">*main::sail</tt>
can also be accessed as <tt class="literal">$main::{"sail"}</tt>.</p>

<p>If <em class="replaceable">NAMESPACE</em> is omitted, then there is no current package, and all
identifiers must be fully qualified or declared as lexicals.  This is stricter
than <tt class="literal">use strict</tt> since it also extends to function names.</p>

<p>See <a href="ch10_01.htm">Chapter 10, "Packages"</a>, for more
information about packages.  See <tt class="literal">my</tt> earlier in this chapter
for other scoping issues.</p>






<h3 class="sect2">29.2.110. pipe&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">pipe <em class="replaceable">READHANDLE</em>, <em class="replaceable">WRITEHANDLE</em>
</pre>
</blockquote>
<a name="INDEX-5113"></a>
Like the corresponding syscall, this function opens a pair of
connected pipes--see <em class="emphasis">pipe</em>(2).  This call
is usually used right before a <tt class="literal">fork</tt>, after which
the pipe's reader should close <em class="replaceable">WRITEHANDLE</em>,
and the writer close <em class="replaceable">READHANDLE</em>.
(Otherwise the pipe won't indicate EOF to the reader when the writer
closes it.)  If you set up a loop of piped processes, deadlock can
occur unless you are remarkably careful.  In addition, note that
Perl's pipes use standard I/O buffering, so you may need to set
<tt class="literal">$|</tt> (<tt class="literal">$OUTPUT_AUTOFLUSH</tt>) on your
<em class="replaceable">WRITEHANDLE</em> to flush after each output
operation, depending on the application--see <tt class="literal">select</tt>
(output filehandle).</p>

<p>(As with <tt class="literal">open</tt>, if either filehandle is undefined, it will be autovivfied.)</p>

<p>Here's a small example:
<blockquote>
<pre class="programlisting">pipe(README, WRITEME);
unless ($pid = fork) {  #               child
    defined $pid or die "can't fork: $!";
    close(README);
    for $i (1..5) { print WRITEME "line $i\n" }
    exit;
}
$SIG{CHLD} = sub { waitpid($pid, 0) };
close(WRITEME);
@strings = &lt;README&gt;;
close(README);
print "Got:\n", @strings;</pre>
</blockquote>

Notice how the writer closes the read end and the reader closes the
write end.  You can't use one pipe for two-way communication.  Either
use two different pipes or the <tt class="literal">socketpair</tt> syscall
for that.  See the section "Pipes" in <a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a>.</p>






<h3 class="sect2">29.2.111. pop&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">pop <em class="replaceable">ARRAY</em>
pop</pre>
</blockquote>
<a name="INDEX-5114"></a><a name="INDEX-5115"></a><a name="INDEX-5116"></a>
This function treats an array like a stack--it pops (removes) and
returns the last value of the array, shortening the array by one
element.  If <em class="replaceable">ARRAY</em> is omitted, the function
pops <tt class="literal">@_</tt> within the lexical scope of subroutines and
formats; it pops <tt class="literal">@ARGV</tt> at file scopes (typically
the main program) or within the lexical scopes established by the
<tt class="literal">eval</tt><em class="replaceable">STRING</em>,
<tt class="literal">BEGIN {}</tt>, <tt class="literal">CHECK {}</tt>,
<tt class="literal">INIT {}</tt>, and <tt class="literal">END {}</tt> constructs.
It has the same effect as:
<blockquote>
<pre class="programlisting">$tmp = $ARRAY[$#ARRAY--];</pre>
</blockquote>

or:
<blockquote>
<pre class="programlisting">$tmp = splice @ARRAY, -1;</pre>
</blockquote>

If there are no elements in the array, <tt class="literal">pop</tt> returns <tt class="literal">undef</tt>.  (But
don't depend on that to tell you when the array is empty if your array
contains <tt class="literal">undef</tt> values!)  See also <tt class="literal">push</tt> and <tt class="literal">shift</tt>.  If you want
to pop more than one element, use <tt class="literal">splice</tt>.</p>

<p>The <tt class="literal">pop</tt> requires its first argument to be an array, not a list.
If you just want the last element of a list, use this:
<blockquote>
<pre class="programlisting">( <em class="replaceable">LIST</em> )[-1]</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.112. pos&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">pos <em class="replaceable">SCALAR</em>
pos</pre>
</blockquote>
<a name="INDEX-5117"></a><a name="INDEX-5118"></a><a name="INDEX-5119"></a><a name="INDEX-5120"></a>
This function returns the location in <em class="replaceable">SCALAR</em> where the last <tt class="literal">m//g</tt>
search over <em class="replaceable">SCALAR</em> left off.  It returns the offset of the
character <em class="emphasis">after</em> the last one matched.  (That is, it's equivalent to
<tt class="literal">length($`) + length($&amp;)</tt>.)  This is the offset where the
next <tt class="literal">m//g</tt> search on that string will start.  Remember that the
offset of the beginning of the string is <tt class="literal">0</tt>.  For example:
<blockquote>
<pre class="programlisting">$graffito = "fee fie foe foo";
while ($graffito =~ m/e/g) {
    print pos $graffito, "\n";
}</pre>
</blockquote>

prints <tt class="literal">2</tt>, <tt class="literal">3</tt>, <tt class="literal">7</tt>, and <tt class="literal">11</tt>, the offsets of each of the
characters following an "<tt class="literal">e</tt>". The <tt class="literal">pos</tt> function may be assigned a value
to tell the next <tt class="literal">m//g</tt> where to start:
<blockquote>
<pre class="programlisting">$graffito = "fee fie foe foo";
pos $graffito = 4;  # Skip the fee, start at fie
while ($graffito =~ m/e/g) {
        print pos $graffito, "\n";
}</pre>
</blockquote>

This prints only <tt class="literal">7</tt> and <tt class="literal">11</tt>.  The regular expression assertion
<tt class="literal">\G</tt> matches only at the location currently specified by <tt class="literal">pos</tt>
for the string being searched. See the section "Positions" in <a href="ch05_01.htm">Chapter 5, "Pattern Matching"</a>.</p>






<h3 class="sect2">29.2.113. print&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">print <em class="replaceable">FILEHANDLE</em> <em class="replaceable">LIST</em>
print <em class="replaceable">LIST</em>
print</pre>
</blockquote>
<a name="INDEX-5121"></a><a name="INDEX-5122"></a><a name="INDEX-5123"></a><a name="INDEX-5124"></a>
This function prints a string or a comma-separated list of strings.
If set, the contents of the <tt class="literal">$\</tt> (<tt class="literal">$OUTPUT_RECORD_SEPARATOR</tt>) variable will be implicitly printed
at the end of the list.  The function returns true if successful, false
otherwise.  <em class="replaceable">FILEHANDLE</em> may be a scalar variable name
(unsubscripted), in which case the variable contains either the name
of the actual filehandle or a reference to a filehandle object of some
sort.  As with any other indirect object, <em class="replaceable">FILEHANDLE</em> may also be a block that returns such a value:
<blockquote>
<pre class="programlisting">print { $OK ? "STDOUT" : "STDERR" } "stuff\n";
print { $iohandle[$i] } "stuff\n";</pre>
</blockquote>

If <em class="replaceable">FILEHANDLE</em> is a variable and the next token is a term,
it may be misinterpreted as an operator unless you interpose a <tt class="literal">+</tt> or
put parentheses around the arguments. For example:
<blockquote>
<pre class="programlisting">print $a - 2;   # prints $a - 2 to default filehandle (usually STDOUT)
print $a (- 2); # prints -2 to filehandle specified in $a
print $a -2;    # also prints -2 (weird parsing rules :-)</pre>
</blockquote>
<a name="INDEX-5125"></a>
If <em class="replaceable">FILEHANDLE</em> is omitted, the function prints to the currently
selected output filehandle, initially <tt class="literal">STDOUT</tt>. To set the default
output filehandle to something other than <tt class="literal">STDOUT</tt>, use the
<tt class="literal">select</tt><em class="replaceable">FILEHANDLE</em> operation.<a href="#FOOTNOTE-9">[9]</a> If <em class="replaceable">LIST</em> is also omitted, the function prints <tt class="literal">$_</tt>.
Because <tt class="literal">print</tt> takes a <em class="replaceable">LIST</em>, anything in the <em class="replaceable">LIST</em> is
evaluated in list context. Thus, when you say:
<blockquote>
<pre class="programlisting">print OUT &lt;STDIN&gt;;</pre>
</blockquote>

it is not going to print the next line from standard input, but all
the rest of the lines from standard input up to end-of-file, since
that's what <tt class="literal">&lt;STDIN&gt;</tt> returns in list context.  If you want the
other thing, say:
<blockquote>
<pre class="programlisting">print OUT scalar &lt;STDIN&gt;;</pre>
</blockquote>

Also, remembering the if-it-looks-like-a-function-it-is-a-function
rule, be careful not to follow the <tt class="literal">print</tt> keyword with a left
parenthesis unless you want the corresponding right parenthesis to
terminate the arguments to the <tt class="literal">print</tt>--interpose a <tt class="literal">+</tt> or put parens
around all the arguments:
<blockquote>
<pre class="programlisting">print (1+2)*3, "\n";            # WRONG
print +(1+2)*3, "\n";           # ok
print ((1+2)*3, "\n");          # ok</pre>
</blockquote>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-9"></a>
<p>[9] Thus, <tt class="literal">STDOUT</tt> isn't
really the default filehandle for <tt class="literal">print</tt>.  It's merely the <em class="emphasis">default</em>
default filehandle.</p>

</blockquote>






<h3 class="sect2">29.2.114. printf&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">printf <em class="replaceable">FILEHANDLE</em> <em class="replaceable">FORMAT</em>, <em class="replaceable">LIST</em>
printf <em class="replaceable">FORMAT</em>, <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-5126"></a><a name="INDEX-5127"></a>
This function prints a formatted string to
<em class="replaceable">FILEHANDLE</em> or, if omitted, the currently
selected output filehandle, initially <tt class="literal">STDOUT</tt>. The
first item in the <em class="replaceable">LIST</em> must be a string
that says how to format the rest of the items.  This is similar to the
C library's <em class="emphasis">printf</em>(3) and
<em class="emphasis">fprintf</em>(3) functions.  The
function is equivalent to:
<blockquote>
<pre class="programlisting">print <em class="replaceable">FILEHANDLE</em> sprintf <em class="replaceable">FORMAT</em>, <em class="replaceable">LIST</em>
</pre>
</blockquote>

except that <tt class="literal">$\</tt>
(<tt class="literal">$OUTPUT_RECORD_SEPARATOR</tt>) is not appended.  If
<tt class="literal">use locale</tt> is in effect, the character used for the
decimal point in formatted floating-point numbers is affected by the
<tt class="literal">LC_NUMERIC</tt> locale.</p>

<p>An exception is raised only if an invalid reference type is used
as the <em class="replaceable">FILEHANDLE</em> argument.  Unrecognized formats are passed
through intact.  Both situations trigger warnings if they're enabled.</p>

<p>See the <tt class="literal">print</tt> and <tt class="literal">sprintf</tt> functions elsewhere in this chapter.
The description of <tt class="literal">sprintf</tt> includes the list of format specifications.
We'd duplicate them here, but this book is already an ecological disaster.</p>

<p>If you omit both the <em class="replaceable">FORMAT</em> and the <em class="replaceable">LIST</em>, <tt class="literal">$_</tt> is used--but in
that case, you should have been using <tt class="literal">print</tt>.  Don't fall into the
trap of using a <tt class="literal">printf</tt> when a simple <tt class="literal">print</tt> would do.  The
<tt class="literal">print</tt> function is more efficient and less error prone.</p>






<h3 class="sect2">29.2.115. prototype&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">prototype <em class="replaceable">FUNCTION</em>
</pre>
</blockquote>

Returns the prototype of a function as a string (or <tt class="literal">undef</tt> if the
function has no prototype).  <em class="replaceable">FUNCTION</em> is a reference to, or the name of,
the function whose prototype you want to retrieve.</p>

<p>If <em class="replaceable">FUNCTION</em> is a string starting with <tt class="literal">CORE::</tt>, the rest is
taken as a name for Perl built-in, and an exception is raised
if there is no such built-in.  If the built-in is not
<em class="emphasis">overridable</em> (such as <tt class="literal">qw//</tt>) or its arguments cannot be expressed
by a prototype (such as <tt class="literal">system</tt>), the function returns <tt class="literal">undef</tt>
because the built-in does not really behave like a Perl function.
Otherwise, the string describing the equivalent prototype is returned.</p>






<h3 class="sect2">29.2.116. push&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">push <em class="replaceable">ARRAY</em>, <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-5128"></a><a name="INDEX-5129"></a><a name="INDEX-5130"></a>
This function treats <em class="replaceable">ARRAY</em> as a stack and
pushes the values of <em class="replaceable">LIST</em> onto the end of
<em class="replaceable">ARRAY</em>.  The length of
<em class="replaceable">ARRAY</em> increases by the length of
<em class="replaceable">LIST</em>.  The function returns this new
length.  The <tt class="literal">push</tt> function has the same effect as:
<blockquote>
<pre class="programlisting">foreach $value (listfunc()) {
    $array[++$#array] = $value;
}</pre>
</blockquote>
or:
<blockquote>
<pre class="programlisting">splice @array, @array, 0, listfunc();</pre>
</blockquote>

but it is more efficient (for both you and your computer).  You can use
<tt class="literal">push</tt> in combination with <tt class="literal">shift</tt> to make a fairly time-efficient
shift register or queue:
<blockquote>
<pre class="programlisting">for (;;) {
    push @array, shift @array;
    ...
}</pre>
</blockquote>

See also <tt class="literal">pop</tt> and <tt class="literal">unshift</tt>.</p>






<h3 class="sect2">29.2.117. q/STRING/&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">q/<em class="replaceable">STRING</em>/
qq/<em class="replaceable">STRING</em>/
qr/<em class="replaceable">STRING</em>/
qw/<em class="replaceable">STRING</em>/
qx/<em class="replaceable">STRING</em>/</pre>
</blockquote>

Generalized quotes.  See the "Pick your own quotes" section 
<a href="ch02_01.htm">Chapter 2, "Bits and Pieces"</a>.  For status annotations on <tt class="literal">qx//</tt>,
see <tt class="literal">readpipe</tt>.  For status annotations on <tt class="literal">qr//</tt>, see <tt class="literal">m//</tt>.  See also "Staying in Control" in <a href="ch05_01.htm">Chapter 5, "Pattern Matching"</a>.</p>






<h3 class="sect2">29.2.118. quotemeta&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">quotemeta <em class="replaceable">EXPR</em>
quotemeta</pre>
</blockquote>
<a name="INDEX-5131"></a><a name="INDEX-5132"></a><a name="INDEX-5133"></a>
This function returns the value of <em class="replaceable">EXPR</em> with all nonalphanumeric
characters backslashed.  (That is, all characters not matching
<tt class="literal">/[A-Za-z_0-9]/</tt> will be preceded by a backslash in the returned
string, regardless of locale settings.) This is the internal
function implementing the <tt class="literal">\Q</tt> escape in interpolative contexts
(including double-quoted strings, backticks, and patterns).</p>






<h3 class="sect2">29.2.119. rand&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">rand <em class="replaceable">EXPR</em>
rand</pre>
</blockquote>
<a name="INDEX-5134"></a><a name="INDEX-5135"></a><a name="INDEX-5136"></a><a name="INDEX-5137"></a>
This function returns a pseudorandom floating-point number greater than
or equal to 0 and less than the value of <em class="replaceable">EXPR</em>.  (<em class="replaceable">EXPR</em> should
be positive.) If <em class="replaceable">EXPR</em> is omitted, the function returns a
floating-point number between 0 and 1 (including 0, but excluding
1).  <tt class="literal">rand</tt> automatically calls <tt class="literal">srand</tt> unless <tt class="literal">srand</tt> has already been
called.  See also <tt class="literal">srand</tt>.</p>

<p>To get an integral value, such as for a die roll, combine this with
<tt class="literal">int</tt>, as in:
<blockquote>
<pre class="programlisting">$roll = int(rand 6) + 1;       # $roll now a number between 1 and 6</pre>
</blockquote>

Because Perl uses your own C library's pseudorandom number function,
like <em class="emphasis">random</em>(3) or
<em class="emphasis">drand48</em>(3), the quality of the
distribution is not guaranteed.  If you need stronger randomness, such
as for cryptographic purposes, you might consult instead the
documentation on <em class="emphasis">random</em>(4) (if your
system has a <em class="emphasis">/dev/random</em> or
<em class="emphasis">/dev/urandom</em> device), the CPAN module
<tt class="literal">Math::TrulyRandom</tt>, or a good textbook on
computational generation of pseudorandom numbers, such as the second
volume of Knuth.<a href="#FOOTNOTE-10">[10]</a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-10"></a>
<p>[10] Knuth, D.E. <em class="citetitle">The Art of
Computer Programming, Seminumerical Algorithms</em>, vol. 2, 3d
ed. (Reading, Mass.: Addison-Wesley, 1997). ISBN
0-201-89684-2.</p>

</blockquote>






<h3 class="sect2">29.2.120. read&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> [taintgray] <img src="figs/xarg.gif"> <img src="figs/xro.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">read <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">SCALAR</em>, <em class="replaceable">LENGTH</em>, <em class="replaceable">OFFSET</em>
read <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">SCALAR</em>, <em class="replaceable">LENGTH</em>
</pre>
</blockquote>
<a name="INDEX-5138"></a><a name="INDEX-5139"></a><a name="INDEX-5140"></a><a name="INDEX-5141"></a>
This function attempts to read <em class="replaceable">LENGTH</em> bytes of data into variable
<em class="replaceable">SCALAR</em> from the specified <em class="replaceable">FILEHANDLE</em>. The function returns the
number of bytes read or 0 at end-of-file.  It returns <tt class="literal">undef</tt> on error.
<em class="replaceable">SCALAR</em> will grow or shrink to the
length actually read.  The <em class="replaceable">OFFSET</em>, if specified, determines where in the
variable to start putting bytes, so that you can read into the
middle of a string.</p>

<p>To copy data from filehandle <tt class="literal">FROM</tt> into filehandle <tt class="literal">TO</tt>, you could
say:
<blockquote>
<pre class="programlisting">while (read(FROM, $buf, 16384)) {
    print TO $buf;
}</pre>
</blockquote>

The opposite of a <tt class="literal">read</tt> is simply a <tt class="literal">print</tt>, which already
knows the length of the string you want to write and can write a string
of any length.  Don't make the mistake of using <tt class="literal">write</tt>, which is
solely used with <tt class="literal">format</tt>s.</p>

<p>Perl's <tt class="literal">read</tt> function is implemented in terms of standard I/O's
<em class="emphasis">fread</em>(3) function, so the actual <em class="emphasis">read</em>(2) syscall may read more
than <em class="replaceable">LENGTH</em> bytes to fill the input buffer, and <em class="emphasis">fread</em>(3) may do
more than one <em class="emphasis">read</em>(2) syscall in order to fill the buffer.  To gain
greater control, specify the real syscall using <tt class="literal">sysread</tt>.  Calls to
<tt class="literal">read</tt> and <tt class="literal">sysread</tt> should not be intermixed unless you are into
heavy wizardry (or pain).  Whichever one you use, be aware that when
reading from a file containing Unicode or any other multibyte encoding,
the buffer boundary may fall in the middle of a character.</p>






<h3 class="sect2">29.2.121. readdir&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/taint.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">readdir <em class="replaceable">DIRHANDLE</em>
</pre>
</blockquote>
<a name="INDEX-5142"></a><a name="INDEX-5143"></a>
This function reads directory entries (which are simple filenames)
from a directory handle opened by <tt class="literal">opendir</tt>. In scalar context,
this function returns the next directory entry, if any; otherwise, it returns
<tt class="literal">undef</tt>. In list context, it returns all the rest of the
entries in the directory, which will be a null list if
there are no entries.  For example:
<blockquote>
<pre class="programlisting">opendir(THISDIR, ".") or die "serious dainbramage: $!";
@allfiles = readdir THISDIR;
closedir THISDIR;
print "@allfiles\n";</pre>
</blockquote>

That prints all the files in the current directory on one line.  If you want
to avoid the "<tt class="literal">.</tt>" and "<tt class="literal">..</tt>" entries, incant one of these (whichever
you think is least unreadable):
<blockquote>
<pre class="programlisting">@allfiles = grep { $_ ne '.' and $_ ne '..' } readdir THISDIR;
@allfiles = grep { not /^[.][.]?\z/ } readdir THISDIR;
@allfiles = grep { not /^\.{1,2}\z/ } readdir THISDIR;
@allfiles = grep !/^\.\.?\z/, readdir THISDIR;</pre>
</blockquote>

And to avoid all <tt class="literal">.*</tt> files (like the <em class="emphasis">ls</em> program):
<blockquote>
<pre class="programlisting">@allfiles = grep !/^\./, readdir THISDIR;</pre>
</blockquote>

To get just text files, say this:
<blockquote>
<pre class="programlisting">@textfiles = grep -T, readdir THISDIR;</pre>
</blockquote>

But watch out on that last one because the result of <tt class="literal">readdir</tt> needs
to have the directory part glued back on if it's not the current
directory--like this:
<blockquote>
<pre class="programlisting">opendir(THATDIR, $path) or die "can't opendir $path: $!";
@dotfiles = grep { /^\./ &amp;&amp; -f } map { "$path/$_" } readdir(THATDIR);
closedir THATDIR;</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.122. readline&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> [taintgray] <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">readline <em class="replaceable">FILEHANDLE</em>
</pre>
</blockquote>

This is the internal function implementing the
<tt class="literal">&lt;FILEHANDLE&gt;</tt> operator, but you can use it
directly.  The function reads the next record from
<em class="replaceable">FILEHANDLE</em>, which may be a filehandle name
or an indirect filehandle expression that returns either the name of
the actual filehandle or a reference to anything resembling a
filehandle object, such as a typeglob.  (Versions of Perl prior to 5.6
accept only a typeglob.)  In scalar context, each call reads and
returns the next record until end-of-file is reached, whereupon the

subsequent call returns <tt class="literal">undef</tt>.  In list context,
<tt class="literal">readline</tt> reads records until end-of-file is reached
and then returns a list of records.  By "record", we normally mean a
line of text, but changing the value of <tt class="literal">$/</tt>
(<tt class="literal">$INPUT_RECORD_SEPARATOR</tt>) from its default value
causes this operator to "chunk" the text differently.  Likewise, some
input disciplines such as <tt class="literal">:para</tt> (paragraph mode)
will return records in chunks other than lines.  Setting the
<tt class="literal">:slurp</tt> discipline (or undefining
<tt class="literal">$/</tt>) makes the chunk size entire files.</p>

<p>When slurping files in scalar context, if you happen to slurp an empty
file, <tt class="literal">readline</tt> returns <tt class="literal">""</tt> the first time, and <tt class="literal">undef</tt> each
subsequent time.  When slurping from magical <tt class="literal">ARGV</tt> filehandle, each file
returns one chunk (again, null files return as <tt class="literal">""</tt>), followed by a
single <tt class="literal">undef</tt> when the files are exhausted.</p>

<p>The <tt class="literal">&lt;FILEHANDLE&gt;</tt>
operator is discussed in more detail in the section
"Input Operators" in <a href="ch02_01.htm">Chapter 2, "Bits and Pieces"</a>.
<blockquote>
<pre class="programlisting">$line = &lt;STDIN&gt;;
$line = readline(STDIN);          # same thing
$line = readline(*STDIN);         # same thing
$line = readline(\*STDIN);        # same thing

open my $fh, "&lt;&amp;=STDIN" or die;
bless $fh =&gt; 'AnyOldClass';
$line = readline($fh);            # same thing</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.123. readlink&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/dollarbang.gif"> <img src="figs/taint.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">readlink <em class="replaceable">EXPR</em>
readlink</pre>
</blockquote>
<a name="INDEX-5144"></a><a name="INDEX-5145"></a><a name="INDEX-5146"></a><a name="INDEX-5147"></a>
This function returns the filename pointed to by a symbolic link.
<em class="replaceable">EXPR</em> should evaluate to a filename, the last component of which is a
symbolic link. If it is not a symbolic link, or if symbolic links are
not implemented on the filesystem, or if some system error occurs, <tt class="literal">undef</tt> is
returned, and you should check the error code in <tt class="literal">$!</tt>.</p>

<p>Be aware that the returned symlink may be relative to the location you
specified.  For instance, you may say:
<blockquote>
<pre class="programlisting">readlink "/usr/local/src/express/yourself.h"</pre>
</blockquote>

and <tt class="literal">readlink</tt> might return:
<blockquote>
<pre class="programlisting">../express.1.23/includes/yourself.h</pre>
</blockquote>

which is not directly usable as a filename unless your current directory
happens to be <tt class="literal">/usr/local/src/express</tt>.</p>






<h3 class="sect2">29.2.124. readpipe&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/dollarquestion.gif"> <img src="figs/taint.gif"> <img src="figs/xt.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">readpipe scalar <em class="replaceable">EXPR</em>
readpipe <em class="replaceable">LIST</em> (proposed)</pre>
</blockquote>
<a name="INDEX-5148"></a>
This is the internal function implementing the <tt class="literal">qx//</tt>
quote construct (also known as the backticks operator).  It is
occasionally handy when you need to specify your
<em class="replaceable">EXPR</em> in a way that wouldn't be handy using
the quoted form.  Be aware that we may change this interface in the
future to support a <em class="replaceable">LIST</em> argument in order
to make it more like the <tt class="literal">exec</tt> function, so don't
assume that it will continue to provide scalar context for
<em class="replaceable">EXPR</em>.  Supply the <tt class="literal">scalar</tt>
yourself, or try the <em class="replaceable">LIST</em> form.  Who knows,
it might work by the time you read this.</p>






<h3 class="sect2">29.2.125. recv&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> [taintgray] <img src="figs/xarg.gif"> <img src="figs/xro.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">recv <em class="replaceable">SOCKET</em>, <em class="replaceable">SCALAR</em>, <em class="replaceable">LEN</em>, <em class="replaceable">FLAGS</em>
</pre>
</blockquote>
<a name="INDEX-5149"></a><a name="INDEX-5150"></a><a name="INDEX-5151"></a>
This function receives a message on a socket. It attempts to receive
<em class="replaceable">LENGTH</em> bytes of data into variable <em class="replaceable">SCALAR</em> from the specified
<em class="replaceable">SOCKET</em> filehandle.  The function returns the address of the sender,
or <tt class="literal">undef</tt> if there's an error.  <em class="replaceable">SCALAR</em> will grow or
shrink to the length actually read.  The function takes the same flags
as <em class="emphasis">recv</em>(2).  See the section "Sockets" in <a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a>.</p>






<h3 class="sect2">29.2.126. redo&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarat.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">redo <em class="replaceable">LABEL</em>
redo</pre>
</blockquote>
<a name="INDEX-5152"></a><a name="INDEX-5153"></a>
The <tt class="literal">redo</tt> operator restarts a loop block without reevaluating the
conditional.  The <tt class="literal">continue</tt> block, if any, is not executed.  If
the <em class="replaceable">LABEL</em> is omitted, the operator refers to the innermost enclosing
loop.  This operator is normally used by programs that wish to deceive
themselves about what was just input:
<blockquote>
<pre class="programlisting"># A loop that joins lines continued with a backslash.
while (&lt;STDIN&gt;) {
    if (s/\\\n$// &amp;&amp; defined($nextline = &lt;STDIN&gt;)) {
        $_ .= $nextline;
        redo;
    }
    print;  # or whatever...
}</pre>
</blockquote>
<tt class="literal">redo</tt> cannot be used to exit a block that returns a value such
as <tt class="literal">eval {}</tt>, <tt class="literal">sub {}</tt>, or <tt class="literal">do {}</tt>, and should not be used to
exit a <tt class="literal">grep</tt> or <tt class="literal">map</tt> operation.  With warnings enabled, Perl will warn you if you <tt class="literal">redo</tt> a loop not in
your current lexical scope.</p>

<p>A block by itself is semantically identical to a loop that executes
once.  Thus <tt class="literal">redo</tt> inside such a block will effectively turn it into a
looping construct. See the section "Loop Control" in <a href="ch04_01.htm">Chapter 4, "Statements and Declarations"</a>.</p>






<h3 class="sect2">29.2.127. ref&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">ref <em class="replaceable">EXPR</em>
ref</pre>
</blockquote>
<a name="INDEX-5154"></a><a name="INDEX-5155"></a>
The <tt class="literal">ref</tt> operator returns a true value if <em class="replaceable">EXPR</em> is a reference,
false otherwise.  The value returned depends on the type of thing
the reference refers to.  Built-in types include:
<blockquote>
<pre class="programlisting">SCALAR
ARRAY
HASH
CODE
GLOB
REF
LVALUE
IO::Handle</pre>
</blockquote>

If the referenced object has been blessed into a package, then that
package name is returned instead.  You can think of <tt class="literal">ref</tt> as a "typeof"
operator.
<blockquote>
<pre class="programlisting">if (ref($r) eq "HASH") {
    print "r is a reference to a hash.\n";
}
elsif (ref($r) eq "Hump") {    # Naughty--see below.
    print "r is a reference to a Hump object.\n";
}
elsif (not ref $r) {
    print "r is not a reference at all.\n";
}</pre>
</blockquote>

It's considered bad OO style to test your object's class for equality to
any particular class name, since a derived class will have a different
name, but should be allowed access to the base class's methods.
It's better to use the <tt class="literal">UNIVERSAL</tt> method <tt class="literal">isa</tt> as follows:
<blockquote>
<pre class="programlisting">if ($r-&gt;isa("Hump") }
    print "r is a reference to a Hump object, or subclass.\n";
}</pre>
</blockquote>

It's usually best not to test at all, since the OO mechanism won't
send the object to your method unless it thinks it's appropriate in
the first place.  See <a href="ch08_01.htm">Chapter 8, "References"</a> and <a href="ch12_01.htm">Chapter 12, "Objects"</a> for more details. See also the
<tt class="literal">reftype</tt> function under the <tt class="literal">use
attributes</tt> pragma in <a href="ch31_01.htm">Chapter 31, "Pragmatic Modules"</a>.</p>






<h3 class="sect2">29.2.128. rename&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">rename <em class="replaceable">OLDNAME</em>, <em class="replaceable">NEWNAME</em>
</pre>
</blockquote>
<a name="INDEX-5156"></a><a name="INDEX-5157"></a><a name="INDEX-5158"></a><a name="INDEX-5159"></a>
This function changes the name of a file. It returns true for success,
false otherwise.  It will not
(usually) work across filesystem boundaries, although on a Unix system
the <em class="emphasis">mv</em> command can sometimes be used to compensate for this.  If
a file named <em class="replaceable">NEWNAME</em> already exists, it will be destroyed.
Non-Unix systems might have additional restrictions.</p>

<p>See the standard <tt class="literal">File::Copy</tt> module
for cross-filesystem renames.</p>






<h3 class="sect2">29.2.129. require&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/dollarbang.gif"> <img src="figs/dollarat.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">require <em class="replaceable">VERSION</em>
require <em class="replaceable">EXPR</em>
require</pre>
</blockquote>
<a name="INDEX-5160"></a>
This function asserts a dependency of some kind on its argument.</p>

<p>If the argument is a string, <tt class="literal">require</tt> loads and
executes the Perl code found in the separate file whose name is given
by the string.  This is similar to performing a <tt class="literal">do</tt>
on a file, except that <tt class="literal">require</tt> checks to see
whether the library file has been loaded already and raises an
exception if any difficulties are encountered.  (It can thus be used
to express file dependencies without worrying about duplicate
compilation.)  Like its cousins <tt class="literal">do</tt> and
<tt class="literal">use</tt>, <tt class="literal">require</tt> knows how to search
the include path stored in the <tt class="literal">@INC</tt> array and to
update <tt class="literal">%INC</tt> upon success.  See <a href="ch28_01.htm">Chapter 28, "Special Names"</a>.</p>

<p>The file must return true as the last value to indicate
successful execution of any initialization code, so it's customary to
end such a file with <tt class="literal">1;</tt> unless you're sure it'll return true
otherwise.</p>

<p>If <tt class="literal">require</tt>'s argument is a version number of the form 5.6.2, <tt class="literal">require</tt> demands
that the currently executing version of Perl be at least that version.
(Perl also accepts a floating point number such as 5.005_03 for compatibility
with older versions of Perl, but that form is now discouraged because folks from other cultures don't understand it.)
Thus, a script that requires Perl version 5.6 can put as its first line:
<blockquote>
<pre class="programlisting">require 5.6.0;             # or require v5.6.0</pre>
</blockquote>

and earlier versions of Perl will abort.  Like all <tt class="literal">require</tt>s,
however, this is done at run-time.  You might prefer to say <tt class="literal">use 5.6.0</tt> for a
compile-time check.  See also <tt class="literal">$PERL_VERSION</tt> in <a href="ch28_01.htm">Chapter 28, "Special Names"</a>.</p>

<p>If <tt class="literal">require</tt>'s argument is a bare package name (see <tt class="literal">package</tt>),
<tt class="literal">require</tt> assumes an automatic <tt class="literal">.pm</tt> suffix, making it easy to
load standard modules. This behavior is like <tt class="literal">use</tt>, except that it happens at run time rather than
compile time, and the <tt class="literal">import</tt> method is not called.  For example, to
pull in <em class="emphasis">Socket.pm</em> without introducing any symbols into the current
package, say this:
<blockquote>
<pre class="programlisting">require Socket;            # instead of "use Socket;"</pre>
</blockquote>

However, you can get the same effect with the following, which has the
advantage of giving a compile-time warning if <em class="emphasis">Socket.pm</em> can't be
located:
<blockquote>
<pre class="programlisting">use Socket ();</pre>
</blockquote>

Using <tt class="literal">require</tt> on a bare name also replaces any <tt class="literal">::</tt> in the package
name with your system's directory separator, traditionally <tt class="literal">/</tt>.
In other words, if you try this:
<blockquote>
<pre class="programlisting">require Foo::Bar;          # a splendid bare name</pre>
</blockquote>

The require function looks for the <em class="filename">Foo/Bar.pm</em> file in
the directories specified in the <tt class="literal">@INC</tt> array.
But if you try this:
<blockquote>
<pre class="programlisting">$class = 'Foo::Bar';
require $class;            # $class is not a bare name</pre>
</blockquote>

or this:
<blockquote>
<pre class="programlisting">require "Foo::Bar";        # quoted literal not a bare name</pre>
</blockquote>

the require function will look for the <em class="filename">Foo::Bar</em> file in the
<tt class="literal">@INC</tt> array and will complain about not finding <em class="filename">Foo::Bar</em> there.
If so, you can do this:
<blockquote>
<pre class="programlisting">eval "require $class";</pre>
</blockquote>

See also <tt class="literal">do</tt><em class="replaceable">FILE</em>, the <tt class="literal">use</tt> command, the <tt class="literal">use lib</tt> pragma, and the
standard <tt class="literal">FindBin</tt> module.</p>






<h3 class="sect2">29.2.130. reset&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">reset <em class="replaceable">EXPR</em>
reset</pre>
</blockquote>
<a name="INDEX-5161"></a><a name="INDEX-5162"></a><a name="INDEX-5163"></a><a name="INDEX-5164"></a><a name="INDEX-5165"></a>
This function is generally used (or abused) at the top of a loop or in
a <tt class="literal">continue</tt> block at the end of a loop, to clear global variables or
reset <tt class="literal">??</tt> searches so that they work again.  The expression is
interpreted as a list of single characters (hyphens are allowed for
ranges).  All scalar variables, arrays, and hashes beginning with one
of those letters are reset to their pristine state.  If the expression
is omitted, one-match searches (<tt class="literal">?</tt><em class="replaceable">PATTERN</em><tt class="literal">?</tt>) are reset to match
again.  The function resets variables or searches for the current
package only.  It always returns true.</p>

<p>To reset all "<tt class="literal">X</tt>" variables, say this:
<blockquote>
<pre class="programlisting">reset 'X';</pre>
</blockquote>

To reset all lowercase variables, say this:
<blockquote>
<pre class="programlisting">reset 'a-z';</pre>
</blockquote>

Lastly, to just reset <tt class="literal">??</tt> searches, say:
<blockquote>
<pre class="programlisting">reset;</pre>
</blockquote>

Resetting "<tt class="literal">A-Z</tt>" in package <tt class="literal">main</tt> is not recommended since you'll wipe out
your global <tt class="literal">ARGV</tt>, <tt class="literal">INC</tt>, <tt class="literal">ENV</tt>, and <tt class="literal">SIG</tt> arrays and hashes.</p>

<p>Lexical variables (created by <tt class="literal">my</tt>) are not affected.  Use of
<tt class="literal">reset</tt> is vaguely deprecated because it easily clears out
entire namespaces and because the <tt class="literal">??</tt> operator is itself vaguely
deprecated.</p>

<p>See also the <tt class="literal">delete_package()</tt> function from the standard <tt class="literal">Symbol</tt>
module, and the whole issue of Safe compartments documented
in the section "Safe Compartments" in <a href="ch23_01.htm">Chapter 23, "Security"</a>.</p>






<h3 class="sect2">29.2.131. return&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarat.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">return <em class="replaceable">EXPR</em>
return</pre>
</blockquote>
<a name="INDEX-5166"></a><a name="INDEX-5167"></a>
This operator causes the current subroutine (or <tt class="literal">eval</tt> or <tt class="literal">do</tt><em class="replaceable">FILE</em>) to return immediately with the specified value.  Attempting
to use <tt class="literal">return</tt> outside these three places raises an
exception.  Note also that an <tt class="literal">eval</tt> cannot do a
<tt class="literal">return</tt> on behalf of the subroutine that called the <tt class="literal">eval</tt>.</p>

<p>
<em class="replaceable">EXPR</em> may be evaluated in list, scalar, or
void context, depending on how the return value will be used, which
may vary from one execution to the next.  That is, the supplied
expression will be evaluated in the context of the subroutine
invocation.  If the subroutine was called in a scalar context,
<em class="replaceable">EXPR</em> is also evaluated in scalar context.
If the subroutine was invoked in list context, then
<em class="replaceable">EXPR</em> is also evaluated in list context and
can return a list value.  A <tt class="literal">return</tt> with no argument
returns the scalar value <tt class="literal">undef</tt> in scalar context,
an empty list <tt class="literal">()</tt> in list context, and (naturally)
nothing at all in void context.  The context of the subroutine call
can be determined from within the subroutine by using the (misnamed)
<tt class="literal">wantarray</tt>
function.
</p>






<h3 class="sect2">29.2.132. reverse&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">reverse <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-5168"></a><a name="INDEX-5169"></a><a name="INDEX-5170"></a><a name="INDEX-5171"></a>
In list context, this function returns a list value consisting of the
elements of <em class="replaceable">LIST</em> in the opposite order.  The function can be used to
create descending sequences:
<blockquote>
<pre class="programlisting">for (reverse 1 .. 10) { ... }</pre>
</blockquote>

Because of the way hashes flatten into lists when passed as a <em class="replaceable">LIST</em>,
<tt class="literal">reverse</tt> can also be used to invert a hash, presuming the values are
unique:
<blockquote>
<pre class="programlisting">%barfoo = reverse %foobar;</pre>
</blockquote>

In scalar context, the function concatenates all the
elements of <em class="replaceable">LIST</em> and then returns the reverse of that resulting
string, character by character.</p>

<p>A small hint: reversing a list sorted earlier by a user-defined function
can often be achieved more easily by sorting the list in the opposite
direction in the first place.</p>






<h3 class="sect2">29.2.133. rewinddir&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">rewinddir <em class="replaceable">DIRHANDLE</em>
</pre>
</blockquote>
<a name="INDEX-5172"></a><a name="INDEX-5173"></a>
This function sets the current position to the beginning of the
directory for the <tt class="literal">readdir</tt> routine on <em class="replaceable">DIRHANDLE</em>.  The function may
not be available on all machines that support <tt class="literal">readdir</tt>--<tt class="literal">rewinddir</tt> dies if
unimplemented. It returns true on success, false otherwise.</p>






<h3 class="sect2">29.2.134. rindex&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">rindex <em class="replaceable">STR</em>, <em class="replaceable">SUBSTR</em>, <em class="replaceable">POSITION</em>
rindex <em class="replaceable">STR</em>, <em class="replaceable">SUBSTR</em>
</pre>
</blockquote>
<a name="INDEX-5174"></a><a name="INDEX-5175"></a><a name="INDEX-5176"></a>
This function works just like <tt class="literal">index</tt> except that it returns the
position of the <em class="emphasis">last</em> occurrence of <em class="replaceable">SUBSTR</em> in <em class="replaceable">STR</em> (a reverse
<tt class="literal">index</tt>).  The function returns <tt class="literal">$[-1</tt> if not <em class="replaceable">SUBSTR</em> is found.  Since <tt class="literal">$[</tt> is
virtually always <tt class="literal">0</tt> nowadays, the function virtually always returns <tt class="literal">-1</tt>.
<em class="replaceable">POSITION</em>, if specified, is the rightmost position that may be
returned.  To work your way through a string backward, say:
<blockquote>
<pre class="programlisting">$pos = length $string;
while (($pos = rindex $string, $lookfor, $pos) &gt;= 0) {
    print "Found at $pos\n";
    $pos--;
}</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.135. rmdir&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/dollarbang.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">rmdir <em class="replaceable">FILENAME</em>
rmdir</pre>
</blockquote>
<a name="INDEX-5177"></a><a name="INDEX-5178"></a><a name="INDEX-5179"></a><a name="INDEX-5180"></a><a name="INDEX-5181"></a>
This function deletes the directory specified by
<em class="replaceable">FILENAME</em> if the directory is empty. If the
function succeeds, it returns true; otherwise, it returns false.  See
also the <tt class="literal">File::Path</tt> module if you want to remove
the contents of the directory first and don't care to shell out to
call <tt class="literal">rm -r</tt> for some reason.  (Such as not having a
shell, or an <em class="emphasis">rm</em> command, because you haven't got
PPT yet.)</p>






<h3 class="sect2">29.2.136. s///&nbsp;&nbsp;&nbsp;&nbsp; [taintgray] <img src="figs/xro.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">s///</pre>
</blockquote>

The substitution operator.  See the section "Pattern-Matching
Operators" in <a href="ch05_01.htm">Chapter 5, "Pattern Matching"</a>.</p>






<h3 class="sect2">29.2.137. scalar&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">scalar <em class="replaceable">EXPR</em>
</pre>
</blockquote>
<a name="INDEX-5182"></a><a name="INDEX-5183"></a><a name="INDEX-5184"></a>
This pseudofunction may be used within a <em class="replaceable">LIST</em> to force <em class="replaceable">EXPR</em> to be
evaluated in scalar context when evaluation in the list context would
produce a different result. For example:
<blockquote>
<pre class="programlisting">my ($nextvar) = scalar &lt;STDIN&gt;;</pre>
</blockquote>

prevents <tt class="literal">&lt;STDIN&gt;</tt> from reading all the lines from standard input
before doing the assignment, since assignment to a list (even a <tt class="literal">my</tt>
list) provides a list context.  (Without the <tt class="literal">scalar</tt> in this example,
the first line from <tt class="literal">&lt;STDIN&gt;</tt> would still be assigned to
<tt class="literal">$nextvar</tt>, but the subsequent lines would be read and thrown away,
since the list we're assigning to is only able to receive a single
scalar value.)</p>

<p>Of course, a simpler, less-cluttered way would be to just leave the
parentheses off, thereby changing the list context to a scalar one:
<blockquote>
<pre class="programlisting">my $nextvar = &lt;STDIN&gt;;</pre>
</blockquote>

Since a <tt class="literal">print</tt> function is a <em class="replaceable">LIST</em> operator, you have to say:
<blockquote>
<pre class="programlisting">print "Length is ", scalar(@ARRAY), "\n";</pre>
</blockquote>

if you want the length of <tt class="literal">@ARRAY</tt> to be printed out.</p>

<p>There's no "<tt class="literal">list</tt>" function corresponding to <tt class="literal">scalar</tt> since,
in practice, one never needs to force evaluation in a list context.
That's because any operation that wants <em class="replaceable">LIST</em> already provides a list
context to its list arguments for free.</p>

<p>Because <tt class="literal">scalar</tt> is a unary operator, if you accidentally use a
parenthesized list for the <em class="replaceable">EXPR</em>, this behaves as a scalar comma
expression, evaluating all but the last element in void context and
returning the final element evaluated in scalar context.  This is
seldom what you want.  The following single statement:
<blockquote>
<pre class="programlisting">print uc(scalar(&amp;foo,$bar)),$baz;</pre>
</blockquote>

is the (im)moral equivalent of these two:
<blockquote>
<pre class="programlisting">&amp;foo;
print(uc($bar),$baz);</pre>
</blockquote>

See <a href="ch02_01.htm">Chapter 2, "Bits and Pieces"</a> for more details on the comma operator.
See "Prototypes" in <a href="ch06_01.htm">Chapter 6, "Subroutines"</a> for more on unary operators.</p>






<h3 class="sect2">29.2.138. seek&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">seek <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">OFFSET</em>, <em class="replaceable">WHENCE</em>
</pre>
</blockquote>
<a name="INDEX-5185"></a><a name="INDEX-5186"></a><a name="INDEX-5187"></a>
This function positions the file pointer for <em class="replaceable">FILEHANDLE</em>, just like
the <em class="emphasis">fseek</em>(3) call of standard I/O.  The first position in a file is
at offset 0, not offset 1.  Also, offsets refer to byte positions, not
line numbers.  In general, since line lengths vary, it's not possible
to access a particular line number without examining the whole file up
to that point, unless all your lines are known to be of a particular
length, or you've built an index that translates line numbers into byte
offsets.  (The same restrictions apply to character positions in
files with variable-length character encodings: the operating system
doesn't know what characters are, only bytes.)</p>

<p>
<em class="replaceable">FILEHANDLE</em> can be an expression whose value gives either the name of
the actual filehandle or a reference to anything resembling a
filehandle object.  The function returns true upon success, false
otherwise.  For handiness, the function can calculate offsets from
various file positions for you.  The value of <em class="replaceable">WHENCE</em> specifies which
file position your <em class="replaceable">OFFSET</em> uses for its starting point: <tt class="literal">0</tt>, the beginning of the
file; <tt class="literal">1</tt>, the current position in the file; or <tt class="literal">2</tt>, the end of the
file.  The <em class="replaceable">OFFSET</em> can be negative for a <em class="replaceable">WHENCE</em> of <tt class="literal">1</tt> or <tt class="literal">2</tt>.  If
you'd like to use symbolic values for <em class="replaceable">WHENCE</em>, you may use
<tt class="literal">SEEK_SET</tt>, <tt class="literal">SEEK_CUR</tt>, and <tt class="literal">SEEK_END</tt> from either the
<tt class="literal">IO::Seekable</tt> or the <tt class="literal">POSIX</tt> module, or as of the 5.6 release of
Perl, the <tt class="literal">Fcntl</tt> module.</p>

<p>If you want to position the file for <tt class="literal">sysread</tt> or <tt class="literal">syswrite</tt>, don't use
<tt class="literal">seek</tt>; standard I/O buffering makes its effect on the file's system position
unpredictable and nonportable.  Use <tt class="literal">sysseek</tt> instead.</p>

<p>Due to the rules and rigors of ANSI C, on some systems you have to
do a seek whenever you switch between reading and writing.  Amongst
other things, this may have the effect of calling the standard I/O
library's <em class="emphasis">clearerr</em>(3) function.  A <em class="replaceable">WHENCE</em> of <tt class="literal">1</tt> (<tt class="literal">SEEK_CUR</tt>)
with an <tt class="literal">OFFSET</tt> 0 is useful for not moving the file position:
<blockquote>
<pre class="programlisting">seek(TEST,0,1);</pre>
</blockquote>

One interesting use for this function is to allow you to follow growing
files, like this:
<blockquote>
<pre class="programlisting">for (;;) {
    while (&lt;LOG&gt;) {
        grok($_);          # Process current line.
    }
    sleep 15;
    seek LOG,0,1;          # Reset end-of-file error.
}</pre>
</blockquote>
The final <tt class="literal">seek</tt> clears the end-of-file error without
moving the pointer.  Depending on how standard your C library's
standard I/O implementation happens to be, you may need something more
like this:
<blockquote>
<pre class="programlisting">for (;;) {
    for ($curpos = tell FILE; &lt;FILE&gt;; $curpos = tell FILE) {
        grok($_);          # Process current line.
    }
    sleep $for_a_while;
    seek FILE, $curpos, 0; # Reset end-of-file error.
}</pre>
</blockquote>

Similar strategies can be used to remember the <tt class="literal">seek</tt> addresses of
each line in an array.</p>






<h3 class="sect2">29.2.139. seekdir&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">seekdir <em class="replaceable">DIRHANDLE</em>, <em class="replaceable">POS</em>
</pre>
</blockquote>
<a name="INDEX-5188"></a><a name="INDEX-5189"></a>
This function sets the current position for the next call to <tt class="literal">readdir</tt> on
<em class="replaceable">DIRHANDLE</em>.  <em class="replaceable">POS</em> must be a value returned by <tt class="literal">telldir</tt>.  This
function has the same caveats about possible directory compaction as the
corresponding system library routine.  The function may not be
implemented everywhere that <tt class="literal">readdir</tt> is.  It's certainly not
implemented where <tt class="literal">readdir</tt> isn't.</p>






<h3 class="sect2">29.2.140. select (output filehandle)&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">select <em class="replaceable">FILEHANDLE</em>
select</pre>
</blockquote>
<a name="INDEX-5190"></a><a name="INDEX-5191"></a><a name="INDEX-5192"></a><a name="INDEX-5193"></a>
For historical reasons, there are two <tt class="literal">select</tt> operators that are
totally unrelated to each other.  See the next section for the other
one.  This version of the <tt class="literal">select</tt> operator returns the currently
selected output filehandle and, if <em class="replaceable">FILEHANDLE</em> is supplied, sets
the current default filehandle for output.  This has two effects:
first, a <tt class="literal">write</tt> or a <tt class="literal">print</tt> without a filehandle will default
to this <em class="replaceable">FILEHANDLE</em>.  Second, special variables related to output
will refer to this output filehandle.  For example, if you have to
set the same top-of-form format for more than one output filehandle,
you might do the following:
<blockquote>
<pre class="programlisting">select REPORT1;
$^ = 'MyTop';
select REPORT2;
$^ = 'MyTop';</pre>
</blockquote>

But note that this leaves <tt class="literal">REPORT2</tt> as the currently
selected filehandle.  This could be construed as antisocial, since it
could really foul up some other routine's <tt class="literal">print</tt> or
<tt class="literal">write</tt> statements.  Properly written library
routines leave the currently selected filehandle the same on exit as
it was upon entry. To support this,
<em class="replaceable">FILEHANDLE</em> may be an expression whose value
gives the name of the actual filehandle.  Thus,

you can save and
restore the currently selected filehandle like this:
<blockquote>
<pre class="programlisting">my $oldfh = select STDERR; $| = 1; select $oldfh;</pre>
</blockquote>

or idiomatically but somewhat obscurely like this:
<blockquote>
<pre class="programlisting">select((select(STDERR), $| = 1)[0])</pre>
</blockquote>

This example works by building a list consisting of the returned value
from <tt class="literal">select(STDERR)</tt> (which selects <tt class="literal">STDERR</tt> as a side effect) and
<tt class="literal">$| = 1</tt> (which is always 1), but sets autoflushing on the now-selected
<tt class="literal">STDERR</tt> as a side effect. The first element of that list (the
previously selected filehandle) is now used as an argument to the outer
<tt class="literal">select</tt>. Bizarre, right?  That's what you get for knowing just enough
Lisp to be dangerous.</p>

<p>You can also use the standard <tt class="literal">SelectSaver</tt> module to automatically
restore the previous <tt class="literal">select</tt> upon scope exit.</p>

<p>However, now that we've explained all that, we should point out that you
rarely need to use this form of <tt class="literal">select</tt> nowadays, because most of the
special variables you would want to set have object-oriented wrapper
methods to do it for you.  So instead of setting <tt class="literal">$|</tt> directly, you
might say:
<blockquote>
<pre class="programlisting">use IO::Handle;             # Unfortunately, this is *not* a small module.
STDOUT-&gt;autoflush(1);</pre>
</blockquote>

And the earlier format example might be coded as:
<blockquote>
<pre class="programlisting">use IO::Handle;
REPORT1-&gt;format_top_name("MyTop");
REPORT2-&gt;format_top_name("MyTop");</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.141. select (ready file descriptors)&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">select <em class="replaceable">RBITS</em>, <em class="replaceable">WBITS</em>, <em class="replaceable">EBITS</em>, <em class="replaceable">TIMEOUT</em>
</pre>
</blockquote>
<a name="INDEX-5194"></a><a name="INDEX-5195"></a><a name="INDEX-5196"></a><a name="INDEX-5197"></a><a name="INDEX-5198"></a><a name="INDEX-5199"></a>
The four-argument <tt class="literal">select</tt> operator is totally unrelated to the
previously described <tt class="literal">select</tt> operator.  This operator is used to discover which
(if any) of your file descriptors are ready to do input or output, or to
report an exceptional condition.  (This helps you avoid having to do
polling.)  It calls the <em class="emphasis">select</em>(2) syscall with the bit masks
you've specified, which you can construct using <tt class="literal">fileno</tt> and <tt class="literal">vec</tt>,
like this:
<blockquote>
<pre class="programlisting">$rin = $win = $ein = "";
vec($rin, fileno(STDIN), 1)  = 1;
vec($win, fileno(STDOUT), 1) = 1;
$ein = $rin | $win;</pre>
</blockquote>
If you want to <tt class="literal">select</tt> on many filehandles, you
might wish to write a subroutine:
<blockquote>
<pre class="programlisting">sub fhbits {
    my @fhlist = @_;
    my $bits;
    for (@fhlist) {
        vec($bits, fileno($_), 1) = 1;
    }
    return $bits;
}
$rin = fhbits(qw(STDIN TTY MYSOCK));</pre>
</blockquote>

If you wish to use the same bit masks repeatedly (and it's more efficient
if you do), the usual idiom is:
<blockquote>
<pre class="programlisting">($nfound, $timeleft) =
    select($rout=$rin, $wout=$win, $eout=$ein, $timeout);</pre>
</blockquote>

Or to block until any file descriptor becomes ready:
<blockquote>
<pre class="programlisting">$nfound = select($rout=$rin, $wout=$win, $eout=$ein, undef);</pre>
</blockquote>

As you can see, calling <tt class="literal">select</tt> in scalar context just returns <tt class="literal">$nfound</tt>,
the number of ready descriptors found.</p>

<p>The <tt class="literal">$wout=$win</tt> trick works because the value of an assignment is its
left side, so <tt class="literal">$wout</tt> gets clobbered first by the assignment and then
by the <tt class="literal">select</tt>, while <tt class="literal">$win</tt> remains unchanged.</p>

<p>Any of the arguments can also be <tt class="literal">undef</tt>, in which case they're
ignored.  The <em class="replaceable">TIMEOUT</em>, if not <tt class="literal">undef</tt>, is in seconds, which may be
fractional.  (A timeout of <tt class="literal">0</tt> effects a poll.)  Not many
implementations are capable of returning <tt class="literal">$timeleft</tt>.  If not,
they always return <tt class="literal">$timeleft</tt> equal to the supplied <tt class="literal">$timeout</tt>.</p>

<p>The standard <tt class="literal">IO::Select</tt> module provides a more user-friendly
interface to <tt class="literal">select</tt>, mostly because
it does all the bit mask work for you.</p>

<p>
<a name="INDEX-5200"></a>
One use for <tt class="literal">select</tt> is to sleep with a finer resolution than <tt class="literal">sleep</tt>
allows.  To do this, specify <tt class="literal">undef</tt> for all the bitmasks. So, to sleep
for (at least) 4.75 seconds, use:
<blockquote>
<pre class="programlisting">select undef, undef, undef, 4.75;</pre>
</blockquote>

(On some non-Unix systems the triple <tt class="literal">undef</tt> may not work, and you may
need to fake up at least one bitmask for a valid descriptor that won't
ever be ready.)</p>

<p>One should probably not attempt to mix buffered I/O (like <tt class="literal">read</tt>
or <tt class="literal">&lt;HANDLE&gt;</tt>) with <tt class="literal">select</tt>, except as permitted by POSIX, and even
then only on truly POSIX systems.  Use <tt class="literal">sysread</tt> instead.</p>






<h3 class="sect2">29.2.142. semctl&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">semctl <em class="replaceable">ID</em>, <em class="replaceable">SEMNUM</em>, <em class="replaceable">CMD</em>, <em class="replaceable">ARG</em>
</pre>
</blockquote>
<a name="INDEX-5201"></a><a name="INDEX-5202"></a><a name="INDEX-5203"></a>
This function calls the System V IPC function
<em class="emphasis">semctl</em>(2).  You'll probably have to say
<tt class="literal">use</tt><tt class="literal">IPC::SysV</tt> first to get the
correct constant definitions.  If <em class="replaceable">CMD</em> is
<tt class="literal">IPC_STAT</tt> or <tt class="literal">GETALL</tt>, then
<em class="replaceable">ARG</em> must be a variable that will hold the
returned <tt class="literal">semid_ds</tt> structure or semaphore value
array.  As with <tt class="literal">ioctl</tt> and <tt class="literal">fcntl</tt>,
return values are <tt class="literal">undef</tt> for error, "<tt class="literal">0 but
true</tt>" for zero, and the actual return value otherwise.</p>

<p>See also the <tt class="literal">IPC::Semaphore</tt> module.
This function is available only on machines supporting System V IPC.</p>






<h3 class="sect2">29.2.143. semget&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">semget <em class="replaceable">KEY</em>, <em class="replaceable">NSEMS</em>, <em class="replaceable">SIZE</em>, <em class="replaceable">FLAGS</em>
</pre>
</blockquote>
<a name="INDEX-5204"></a><a name="INDEX-5205"></a>
This function calls the System V IPC syscall
<em class="emphasis">semget</em>(2).  Before calling, you should
<tt class="literal">use</tt><tt class="literal">IPC::SysV</tt> to get the correct
constant definitions.  The function returns the semaphore ID, or
<tt class="literal">undef</tt> if there is an error.</p>

<p>See also the <tt class="literal">IPC::Semaphore</tt> module.
This function is available only on machines supporting System V IPC.</p>






<h3 class="sect2">29.2.144. semop&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">semop <em class="replaceable">KEY</em>, <em class="replaceable">OPSTRING</em>
</pre>
</blockquote>
<a name="INDEX-5206"></a>
This function calls the System V IPC syscall <em class="emphasis">semop</em>(2) to perform
semaphore operations such as signalling and waiting.  Before calling,
you should <tt class="literal">use</tt><tt class="literal">IPC::SysV</tt> to get the correct constant definitions.</p>

<p>
<em class="replaceable">OPSTRING</em> must be
a packed array of <tt class="literal">semop</tt> structures.  You can make each <tt class="literal">semop</tt>
structure by saying <tt class="literal">pack("s*", $semnum, $semop, $semflag)</tt>.  The
number of semaphore operations is implied by the length of <em class="replaceable">OPSTRING</em>.
The function returns true if successful, or false if there is an error.</p>

<p>The following code waits on semaphore <tt class="literal">$semnum</tt> of semaphore id
<tt class="literal">$semid</tt>:
<blockquote>
<pre class="programlisting">$semop = pack "s*", $semnum, -1, 0;
semop $semid, $semop or die "Semaphore trouble: $!\n";</pre>
</blockquote>

To signal the semaphore, simply replace <tt class="literal">-1</tt> with <tt class="literal">1</tt>.</p>

<p>See the section "System V IPC" in <a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a>.  See also the
<tt class="literal">IPC::Semaphore</tt> module.  This function is available
only on machines supporting System V IPC.</p>






<h3 class="sect2">29.2.145. send&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">send <em class="replaceable">SOCKET</em>, <em class="replaceable">MSG</em>, <em class="replaceable">FLAGS</em>, <em class="replaceable">TO</em>
send <em class="replaceable">SOCKET</em>, <em class="replaceable">MSG</em>, <em class="replaceable">FLAGS</em>
</pre>
</blockquote>
<a name="INDEX-5207"></a><a name="INDEX-5208"></a><a name="INDEX-5209"></a>
This function sends a message on a socket. It takes the same flags as
the syscall of the same name--see <em class="emphasis">send</em>(2).
On unconnected sockets, you must specify a destination to send
<em class="replaceable">TO</em>, which then makes Perl's
<tt class="literal">send</tt> work like
<em class="emphasis">sendto</em>(2).  The C syscall
<em class="emphasis">sendmsg</em>(2) is currently unimplemented in
standard Perl.  The <tt class="literal">send</tt> function returns the
number of bytes sent, or <tt class="literal">undef</tt> if there is an
error.</p>

<p>(Some non-Unix systems improperly treat sockets as different from
ordinary file descriptors, with the result that you must always use
<tt class="literal">send</tt> and <tt class="literal">recv</tt> on sockets rather
than the handier standard I/O operators.)</p>

<p>One error that at least one of us makes frequently is to confuse
Perl's <tt class="literal">send</tt> with C's <tt class="literal">send</tt> and
write:
<blockquote>
<pre class="programlisting">send SOCK, $buffer, length $buffer      # WRONG</pre>
</blockquote>

This will mysteriously fail depending on the relationship of the
string length to the <em class="replaceable">FLAGS</em> bits expected by
the system.  See the section "Message Passing" in <a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a> for examples.</p>






<h3 class="sect2">29.2.146. setpgrp&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xt.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">setpgrp <em class="replaceable">PID</em>, <em class="replaceable">PGRP</em>
</pre>
</blockquote>
<a name="INDEX-5210"></a><a name="INDEX-5211"></a><a name="INDEX-5212"></a><a name="INDEX-5213"></a>
This function sets the current process group
(<em class="replaceable">PGRP</em>) for the specified
<em class="replaceable">PID</em> (use a <em class="replaceable">PID</em>
of 0 for the current process).  Invoking <tt class="literal">setpgrp</tt>
will raise an exception if used on a machine that doesn't implement
<em class="emphasis">setpgrp</em>(2).  Beware: some systems will
ignore the arguments you provide and always do <tt class="literal">setpgrp(0,
$$)</tt>. Fortunately, those are the arguments one usually wants
to provide.  If the arguments are omitted, they default to
<tt class="literal">0,0</tt>.  The BSD 4.2 version of
<tt class="literal">setpgrp</tt> did not accept any arguments, but in BSD
4.4, it is a synonym for the <tt class="literal">setpgid</tt> function.  For
better portability (by some definition), use the
<tt class="literal">setpgid</tt> function in the <tt class="literal">POSIX</tt>
module directly.  If what you're really trying to do is daemonize your
script, consider the <tt class="literal">POSIX::setsid()</tt> function as
well.  Note that the POSIX version of <tt class="literal">setpgrp</tt> does
not accept arguments, so only <tt class="literal">setpgrp(0,0)</tt> is truly
portable.</p>






<h3 class="sect2">29.2.147. setpriority&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xt.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">setpriority <em class="replaceable">WHICH</em>, <em class="replaceable">WHO</em>, <em class="replaceable">PRIORITY</em>
</pre>
</blockquote>
<a name="INDEX-5214"></a><a name="INDEX-5215"></a><a name="INDEX-5216"></a>
This function sets the current <em class="replaceable">PRIORITY</em> for
a process, a process group, or a user, as specified by the
<em class="replaceable">WHICH</em> and <em class="replaceable">WHO</em>.
See <em class="emphasis">setpriority</em>(2). Invoking
<tt class="literal">setpriority</tt> will raise an exception if used on a

machine that doesn't implement
<em class="emphasis">setpriority</em>(2).  To "nice" your process
down by four units (the same as executing your program with
<em class="emphasis">nice</em>(1)), try:
<blockquote>
<pre class="programlisting">setpriority 0, 0, getpriority(0, 0) + 4;</pre>
</blockquote>

The interpretation of a given priority may vary from one operating
system to the next.  Some priorities may be unavailable to nonprivileged
users.</p>

<p>See also the <tt class="literal">BSD::Resource</tt> module from CPAN.</p>






<h3 class="sect2">29.2.148. setsockopt&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">setsockopt <em class="replaceable">SOCKET</em>, <em class="replaceable">LEVEL</em>, <em class="replaceable">OPTNAME</em>, <em class="replaceable">OPTVAL</em>
</pre>
</blockquote>
<a name="INDEX-5217"></a><a name="INDEX-5218"></a>
This function sets the socket option requested. The function returns
<tt class="literal">undef</tt> on error.  <em class="replaceable">LEVEL</em> specifies which protocol layer you're
aiming the call at, or <tt class="literal">SOL_SOCKET</tt> for the socket itself at the top
of all the layers.  <em class="replaceable">OPTVAL</em> may be specified as <tt class="literal">undef</tt> if you don't
want to pass an argument. A common option to set on a socket is
<tt class="literal">SO_REUSEADDR</tt>, to get around the problem of not being able to bind to
a particular address while the previous TCP connection on that port is
still making up its mind to shut down.  That would look like this:
<blockquote>
<pre class="programlisting">use Socket;
socket(SOCK, ...) or die "Can't make socket: $!\n";
setsockopt(SOCK, SOL_SOCKET, SO_REUSEADDR, 1)
        or warn "Can't do setsockopt: $!\n";</pre>
</blockquote>
</p>

<p>See <em class="emphasis">setsockopt</em>(2) for other
possible values.</p>






<h3 class="sect2">29.2.149. shift&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">shift <em class="replaceable">ARRAY</em>
shift</pre>
</blockquote>
<a name="INDEX-5219"></a><a name="INDEX-5220"></a><a name="INDEX-5221"></a>
This function shifts the first value of the array off and returns it,
shortening the array by one and moving everything down.  (Or up, or
left, depending on how you visualize the array list.  We like left.)
If there are no elements in the array, the function returns <tt class="literal">undef</tt>.</p>

<p>If <em class="replaceable">ARRAY</em> is omitted, the function shifts <tt class="literal">@_</tt> within the lexical
scope of subroutines and formats; it shifts <tt class="literal">@ARGV</tt> at file scopes
(typically the main program) or within the lexical scopes established
by the <tt class="literal">eval</tt><em class="replaceable">STRING</em>, <tt class="literal">BEGIN {}</tt>, <tt class="literal">CHECK {}</tt>, <tt class="literal">INIT {}</tt>, and <tt class="literal">END {}</tt>
constructs.</p>

<p>Subroutines often start by copying their arguments into lexical
variables, and <tt class="literal">shift</tt> can be used for this:
<blockquote>
<pre class="programlisting">sub marine {
        my $fathoms = shift;  # depth
        my $fishies = shift;  # number of fish
        my $o2      = shift;  # oxygen concentration
        # ...
}</pre>
</blockquote>
<tt class="literal">shift</tt> is also used to process arguments at the front of your program:
<blockquote>
<pre class="programlisting">while (defined($_ = shift)) {
        /^[^-]/     &amp;&amp; do { unshift @ARGV, $_; last };
        /^-w/       &amp;&amp; do { $WARN = 1;         next };
        /^-r/       &amp;&amp; do { $RECURSE = 1;      next };
        die "Unknown argument $_\n";
}</pre>
</blockquote>

You might also consider the <tt class="literal">Getopt::Std</tt> and <tt class="literal">Getopt::Long</tt>
modules for processing program arguments.</p>

<p>See also <tt class="literal">unshift</tt>, <tt class="literal">push</tt>, <tt class="literal">pop</tt>, and <tt class="literal">splice</tt>.  The <tt class="literal">shift</tt> and
<tt class="literal">unshift</tt> functions do the same thing to the left end of an array
that <tt class="literal">pop</tt> and <tt class="literal">push</tt> do to the right end.</p>






<h3 class="sect2">29.2.150. shmctl&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">shmctl <em class="replaceable">ID</em>, <em class="replaceable">CMD</em>, <em class="replaceable">ARG</em>
</pre>
</blockquote>
<a name="INDEX-5222"></a><a name="INDEX-5223"></a><a name="INDEX-5224"></a>
This function calls the System V IPC syscall, <em class="emphasis">shmctl</em>(2).  Before
calling, you should <tt class="literal">use</tt><tt class="literal">IPC::SysV</tt> to get the correct constant
definitions.</p>

<p>If <em class="replaceable">CMD</em> is <tt class="literal">IPC_STAT</tt>, then
<em class="replaceable">ARG</em> must be a variable that will hold the
returned <tt class="literal">shmid_ds</tt> structure.  Like
<tt class="literal">ioctl</tt> and <tt class="literal">fcntl</tt>, the function
returns <tt class="literal">undef</tt> for error, "<tt class="literal">0 but
true</tt>" for zero, and the actual return value otherwise.</p>

<p>This function is available only on machines supporting System V IPC.</p>






<h3 class="sect2">29.2.151. shmget&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">shmget <em class="replaceable">KEY</em>, <em class="replaceable">SIZE</em>, <em class="replaceable">FLAGS</em>
</pre>
</blockquote>
<a name="INDEX-5225"></a><a name="INDEX-5226"></a><a name="INDEX-5227"></a>
This function calls the System V IPC syscall, <em class="emphasis">shmget</em>(2).  The
function returns the shared memory segment ID, or <tt class="literal">undef</tt>
if there is an error.
Before calling, <tt class="literal">use</tt><tt class="literal">SysV::IPC</tt>.</p>

<p>This function is available only on machines supporting System V IPC.</p>






<h3 class="sect2">29.2.152. shmread&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">shmread <em class="replaceable">ID</em>, <em class="replaceable">VAR</em>, <em class="replaceable">POS</em>, <em class="replaceable">SIZE</em>
</pre>
</blockquote>
<a name="INDEX-5228"></a><a name="INDEX-5229"></a>
This function reads from the shared memory segment
<em class="replaceable">ID</em> starting at position
<em class="replaceable">POS</em> for size
<em class="replaceable">SIZE</em> (by attaching to it, copying out, and
detaching from it).  <em class="replaceable">VAR</em> must be a variable

that will hold the data read.  The function returns true if
successful, or false if there is an error.</p>

<p>This function is available only on machines supporting System V IPC.</p>






<h3 class="sect2">29.2.153. shmwrite&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">shmwrite <em class="replaceable">ID</em>, <em class="replaceable">STRING</em>, <em class="replaceable">POS</em>, <em class="replaceable">SIZE</em>
</pre>
</blockquote>
<a name="INDEX-5230"></a><a name="INDEX-5231"></a>
This function writes to the shared memory segment <em class="replaceable">ID</em> starting at
position <em class="replaceable">POS</em> for size <em class="replaceable">SIZE</em> (by attaching to it, copying in, and
detaching from it).  If <em class="replaceable">STRING</em> is too long, only <em class="replaceable">SIZE</em> bytes are
used; if <em class="replaceable">STRING</em> is too short, nulls are written to fill out <em class="replaceable">SIZE</em>
bytes.  The function returns true if successful, or false if there is an
error.</p>

<p>This function is available only on machines supporting System V IPC.
(You're probably tired of reading that--we're getting tired of saying it.)</p>






<h3 class="sect2">29.2.154. shutdown&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">shutdown <em class="replaceable">SOCKET</em>, <em class="replaceable">HOW</em>
</pre>
</blockquote>
<a name="INDEX-5232"></a><a name="INDEX-5233"></a><a name="INDEX-5234"></a>
This function shuts down a socket connection in the manner indicated by
<em class="replaceable">HOW</em>.  If <em class="replaceable">HOW</em> is 0, further receives are disallowed.  If <em class="replaceable">HOW</em> is
1, further sends are disallowed.  If <em class="replaceable">HOW</em> is 2, everything is
disallowed.
<blockquote>
<pre class="programlisting">shutdown(SOCK, 0);    # no more reading
shutdown(SOCK, 1);    # no more writing
shutdown(SOCK, 2);    # no more I/O at all</pre>
</blockquote>

This is useful with sockets when you want to tell the other side
you're done writing but not done reading, or vice versa.  It's also
a more insistent form of close because it also disables any copies
of those file descriptors held in forked processes.</p>

<p>
<a name="INDEX-5235"></a><a name="INDEX-5236"></a>
Imagine a server that wants to read its client's request until end of
file, then send an answer.  If the client calls <tt class="literal">close</tt>, that socket
is now invalid for I/O, so no answer would ever come back.  Instead,
the client should use <tt class="literal">shutdown</tt> to half-close the connection:
<blockquote>
<pre class="programlisting">print SERVER "my request\n";        # send some data
shutdown(SERVER, 1);                # send eof; no more writing
$answer = &lt;SERVER&gt;;                 # but you can still read</pre>
</blockquote>

(If you came here trying to figure out how to shut down your system,
you'll have to execute an external program to do that.  See <tt class="literal">system</tt>.)</p>






<h3 class="sect2">29.2.155. sin&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">sin <em class="replaceable">EXPR</em>
sin</pre>
</blockquote>
<a name="INDEX-5237"></a>
Sorry, there's nothing wicked about this operator.  It merely returns
the sine of <em class="replaceable">EXPR</em> (expressed in radians).</p>

<p>For the inverse sine operation, you may use <tt class="literal">Math::Trig</tt> or the <tt class="literal">POSIX</tt>
module's <tt class="literal">asin</tt> function, or use this relation:
<blockquote>
<pre class="programlisting">sub asin { atan2($_[0], sqrt(1 - $_[0] * $_[0])) }</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.156. sleep&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">sleep <em class="replaceable">EXPR</em>
sleep</pre>
</blockquote>
<a name="INDEX-5238"></a><a name="INDEX-5239"></a><a name="INDEX-5240"></a><a name="INDEX-5241"></a>
This function causes the script to sleep for <em class="replaceable">EXPR</em> seconds, or
forever if no <em class="replaceable">EXPR</em>, and returns the number of seconds
slept.  It may be interrupted by sending the process a <tt class="literal">SIGALRM</tt>.
On some older systems, it may sleep up to a full second less than
what you requested, depending on how it counts seconds.  Most modern
systems always sleep the full amount.  They may appear to sleep
longer than that, however, because your process might not be scheduled
right away in a busy multitasking system.  If available, the <tt class="literal">select</tt>
(ready file descriptors) call can give you better resolution.  You
may also be able to use <tt class="literal">syscall</tt> to call the <em class="emphasis">getitimer</em>(2) and
<em class="emphasis">setitimer</em>(2) routines that some Unix systems support.  You
probably cannot mix <tt class="literal">alarm</tt> and <tt class="literal">sleep</tt> calls, because
<tt class="literal">sleep</tt> is often implemented using <tt class="literal">alarm</tt>.</p>

<p>See also the <tt class="literal">POSIX</tt> module's <tt class="literal">sigpause</tt> function.</p>






<h3 class="sect2">29.2.157. socket&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xt.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">socket <em class="replaceable">SOCKET</em>, <em class="replaceable">DOMAIN</em>, <em class="replaceable">TYPE</em>, <em class="replaceable">PROTOCOL</em>
</pre>
</blockquote>
<a name="INDEX-5242"></a><a name="INDEX-5243"></a>
This function opens a socket of the specified kind and attaches it to
filehandle <em class="replaceable">SOCKET</em>.  <em class="replaceable">DOMAIN</em>, <em class="replaceable">TYPE</em>, and <em class="replaceable">PROTOCOL</em> are specified
the same as for <em class="emphasis">socket</em>(2).  If undefined, <em class="replaceable">SOCKET</em> will be autovivified.  Before using this function, your program
should contain the line:
<blockquote>
<pre class="programlisting">use Socket;</pre>
</blockquote>

This gives you the proper constants.  The function returns true if
successful.  See the examples in the section "Sockets" in <a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a>.</p>

<p>On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptor, as determined by the
value of <tt class="literal">$^F</tt>.  See the <tt class="literal">$^F</tt>
(<tt class="literal">$SYSTEM_FD_MAX</tt>) variable in <a href="ch28_01.htm">Chapter 28, "Special Names"</a>.</p>






<h3 class="sect2">29.2.158. socketpair&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xt.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">socketpair <em class="replaceable">SOCKET1</em>, <em class="replaceable">SOCKET2</em>, <em class="replaceable">DOMAIN</em>, <em class="replaceable">TYPE</em>, <em class="replaceable">PROTOCOL</em>
</pre>
</blockquote>
<a name="INDEX-5244"></a>
This function creates an unnamed pair of sockets in the specified
domain, of the specified type.  <em class="replaceable">DOMAIN</em>, <em class="replaceable">TYPE</em>, and <em class="replaceable">PROTOCOL</em>
are specified the same as for <em class="emphasis">socketpair</em>(2).  If either socket argument is undefined, it will be autovivified.  The function returns
true if successful, false otherwise.  On a system where <em class="emphasis">socketpair</em>(2) is
unimplemented, calling this function raises an exception.</p>

<p>This function is typically used just before a <tt class="literal">fork</tt>.  One of the
resulting processes should close <em class="replaceable">SOCKET1</em>, and the other should
close <em class="replaceable">SOCKET2</em>.  You can use these sockets bidirectionally, unlike
the filehandles created by the <tt class="literal">pipe</tt> function.  Some systems
define <tt class="literal">pipe</tt> in terms of <tt class="literal">socketpair</tt>, in which a call to
<tt class="literal">pipe(Rdr, Wtr)</tt> is essentially:
<blockquote>
<pre class="programlisting">use Socket;
socketpair(Rdr, Wtr, AF_UNIX, SOCK_STREAM, PF_UNSPEC);
shutdown(Rdr, 1);        # no more writing for reader
shutdown(Wtr, 0);        # no more reading for writer</pre>
</blockquote>

On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptors, as determined by the
value of <tt class="literal">$^F</tt>.  See the <tt class="literal">$^F</tt>
(<tt class="literal">$SYSTEM_FD_MAX</tt>) variable in <a href="ch28_01.htm">Chapter 28, "Special Names"</a>.  See also the example at the end
of the section "Bidirectional Communication" in <a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a>.</p>






<h3 class="sect2">29.2.159. sort&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarat.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">sort <em class="replaceable">USERSUB</em> <em class="replaceable">LIST</em>
sort <em class="replaceable">BLOCK</em> <em class="replaceable">LIST</em>
sort <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-5245"></a><a name="INDEX-5246"></a><a name="INDEX-5247"></a><a name="INDEX-5248"></a><a name="INDEX-5249"></a><a name="INDEX-5250"></a>
This function sorts the <em class="replaceable">LIST</em> and returns the sorted list value.
By default, it sorts in standard string comparison order (undefined
values sort before defined null strings, which sort before
everything else).  When the <tt class="literal">use locale</tt> pragma is in effect,
<tt class="literal">sort</tt><em class="replaceable">LIST</em> sorts <em class="replaceable">LIST</em> according to the current collation locale.</p>

<p>
<em class="replaceable">USERSUB</em>, if given, is the name of a subroutine that returns an
integer less than, equal to, or greater than 0, depending on how
the elements of the list are to be ordered.  (The handy <tt class="literal">&lt;=&gt;</tt>
and <tt class="literal">cmp</tt> operators can be used to perform three-way numeric and
string comparisons.)  If a <em class="replaceable">USERSUB</em> is given but that function
is undefined, <tt class="literal">sort</tt> raises an exception.</p>

<p>In the interests of efficiency, the normal calling code for subroutines
is bypassed, with the following effects: the subroutine may not be
a recursive subroutine (nor may you exit the block or routine with
a loop control operator), and the two elements to be compared are
not passed into the subroutine via <tt class="literal">@_</tt>, but rather by temporarily
setting the global variables <tt class="literal">$a</tt> and <tt class="literal">$b</tt> in the package in which
the <tt class="literal">sort</tt> was compiled (see the examples that follow).  The variables
<tt class="literal">$a</tt> and <tt class="literal">$b</tt> are aliases to the real values, so don't modify
them in the subroutine.</p>

<p>The comparison subroutine is required to behave.  If it returns
inconsistent results (sometimes saying <tt class="literal">$x[1]</tt> is less than <tt class="literal">$x[2]</tt>
and sometimes saying the opposite, for example), the results are not
well defined.  (That's another reason you shouldn't modify <tt class="literal">$a</tt> and <tt class="literal">$b</tt>.)</p>

<p>
<em class="replaceable">USERSUB</em> may be a scalar variable name (unsubscripted), in which
case the value provides either a symbolic or a hard reference to
the actual subroutine to use.  (A symbolic name rather than a hard reference
is allowed even when the <tt class="literal">use strict 'refs'</tt> pragma is in effect.)
In place of a <em class="replaceable">USERSUB</em>, you can provide a <em class="replaceable">BLOCK</em> as an anonymous,
inline sort subroutine.</p>

<p>To do an ordinary numeric sort, say this:
<blockquote>
<pre class="programlisting">sub numerically { $a &lt;=&gt; $b }
@sortedbynumber = sort numerically 53,29,11,32,7;</pre>
</blockquote>

To sort in descending order, you could simply apply
<tt class="literal">reverse</tt> after the <tt class="literal">sort</tt>, or you
could reverse the order of <tt class="literal">$a</tt> and
<tt class="literal">$b</tt> in the sort routine:
<blockquote>
<pre class="programlisting">@descending = reverse sort numerically 53,29,11,32,7;

sub reverse_numerically { $b &lt;=&gt; $a }
@descending = sort reverse_numerically 53,29,11,32,7;</pre>
</blockquote>

To sort strings without regard to case, run <tt class="literal">$a</tt> and <tt class="literal">$b</tt>
through <tt class="literal">lc</tt> before comparing:
<blockquote>
<pre class="programlisting">@unsorted = qw/sparrow Ostrich LARK catbird blueJAY/;
@sorted = sort { lc($a) cmp lc($b) } @unsorted;</pre>
</blockquote>

(Under Unicode, the use of <tt class="literal">lc</tt> for case canonicalization is vaguely
preferred to the use of <tt class="literal">uc</tt>, since some languages differentiate
titlecase from uppercase.  But that doesn't matter for basic ASCII
sorting, and if you're going to do Unicode sorting right, your
canonicalization routines are going to be a lot fancier than <tt class="literal">lc</tt>.)</p>

<p>Sorting hashes by value is a common use of the <tt class="literal">sort</tt> function.
For example, if a <tt class="literal">%sales_amount</tt> hash records department sales,
doing a hash lookup in the sort routine allows the hash keys to
be sorted according to their corresponding values:
<blockquote>
<pre class="programlisting"># sort from highest to lowest department sales
sub bysales { $sales_amount{$b} &lt;=&gt; $sales_amount{$a} }

for $dept (sort bysales keys %sale_amount) {
    print "$dept =&gt; $sales_amount{$dept}\n";
}</pre>
</blockquote>
You can perform additional levels of sorting by cascading multiple
comparisons using the <tt class="literal">||</tt> or <tt class="literal">or</tt>
operators.  This works nicely because the comparison operators
conveniently return <tt class="literal">0</tt> for equivalence, causing them
to fall through to the next comparison.  Here, the hash keys are
sorted first by their associated sales amounts and then by the keys
themselves (in case two or more departments have the same sales
amount):
<blockquote>
<pre class="programlisting">sub by_sales_then_dept {
    $sales_amount{$b} &lt;=&gt; $sales_amount{$a}
       ||
    $a cmp $b
}

for $dept (sort by_sales_then_dept keys %sale_amount) {
    print "$dept =&gt; $sales_amount{$dept}\n";
}</pre>
</blockquote>

Assume that <tt class="literal">@recs</tt> is an array of hash references, where each hash
contains fields such as <tt class="literal">FIRSTNAME</tt>, <tt class="literal">LASTNAME</tt>, <tt class="literal">AGE</tt>, <tt class="literal">HEIGHT</tt>, and
<tt class="literal">SALARY</tt>.  The following routine sorts to the front of the list those records
for people who are first richer, then taller, then younger, then less
alphabetically challenged:
<blockquote>
<pre class="programlisting">sub prospects {
    $b-&gt;{SALARY}    &lt;=&gt;  $a-&gt;{SALARY}
        ||
    $b-&gt;{HEIGHT}    &lt;=&gt;  $a-&gt;{HEIGHT}
        ||
    $a-&gt;{AGE}       &lt;=&gt;  $b-&gt;{AGE}
        ||
    $a-&gt;{LASTNAME}  cmp  $b-&gt;{LASTNAME}
        ||
    $a-&gt;{FIRSTNAME} cmp  $b-&gt;{FIRSTNAME}
}

@sorted = sort prospects @recs;</pre>
</blockquote>

Any useful information that can be derived from <tt class="literal">$a</tt> and <tt class="literal">$b</tt>
can serve as the basis of a comparison in a sort routine.  For
example, if lines of text are to be sorted according to
specific fields, <tt class="literal">split</tt> could be used within the sort routine
to derive the fields.
<blockquote>
<pre class="programlisting">@sorted_lines = sort {
    @a_fields = split /:/, $a;     # colon-separated fields
    @b_fields = split /:/, $b;

    $a_fields[3] &lt;=&gt; $b_fields[3]  # numeric sort on 4th field, then
        ||
    $a_fields[0] cmp $b_fields[0]  # string sort on 1st field, then
        ||
    $b_fields[2] &lt;=&gt; $a_fields[2]  # reverse numeric sort on 3rd field
        ||
    ...                            # etc.

} @lines;</pre>
</blockquote>

However, because <tt class="literal">sort</tt> performs the sort routine many times using
different pairings of values for <tt class="literal">$a</tt> and <tt class="literal">$b</tt>, the previous
example will resplit each line more often than needed.</p>

<p>To avoid the expense of repeated derivations such as the splitting of
lines in order to compare their fields, perform the derivation once
per value prior to the sort and save the derived information.
Here, anonymous arrays are created to encapsulate each line along with
the results of splitting the line:
<blockquote>
<pre class="programlisting">@temp = map { [$_, split /:/] } @lines;</pre>
</blockquote>

Next, the array references are sorted:
<blockquote>
<pre class="programlisting">@temp = sort {
    @a_fields = @$a[1..$#$a];
    @b_fields = @$b[1..$#$b];

    $a_fields[3] &lt;=&gt; $b_fields[3]  # numeric sort on 4th field, then
        ||
    $a_fields[0] cmp $b_fields[0]  # string sort on 1st field, then
        ||
    $b_fields[2] &lt;=&gt; $a_fields[2]  # reverse numeric sort on 3rd field
        ||
    ...                            # etc.

} @temp;</pre>
</blockquote>

Now that the array references are sorted, the original lines
can be retrieved from the anonymous arrays:
<blockquote>
<pre class="programlisting">@sorted_lines = map { $_-&gt;[0] } @temp;</pre>
</blockquote>

Putting it all together, this <tt class="literal">map</tt>-<tt class="literal">sort</tt>-<tt class="literal">map</tt> technique, often
referred to as the Schwartzian Transform, can be performed in one statement:
<blockquote>
<pre class="programlisting">@sorted_lines = map { $_-&gt;[0] }
                sort {
                    @a_fields = @$a[1..$#$a];
                    @b_fields = @$b[1..$#$b];

                    $a_fields[3] &lt;=&gt; $b_fields[3]
                        ||
                    $a_fields[0] cmp $b_fields[0]
                        ||
                    $b_fields[2] &lt;=&gt; $a_fields[2]
                        ||
                    ...
                }
                map { [$_, split /:/] } @lines;</pre>
</blockquote>

Do not declare <tt class="literal">$a</tt> and <tt class="literal">$b</tt> as lexical variables (with <tt class="literal">my</tt>). They
are package globals (though they're exempt from the usual restrictions
on globals when you're using <tt class="literal">use strict</tt>).  You do need to make sure
your sort routine is in the same package though, or else qualify <tt class="literal">$a</tt> and
<tt class="literal">$b</tt> with the package name of the caller.</p>

<p>That being said, in version 5.6 you <em class="emphasis">can</em> write
sort subroutines with the standard argument passing method (and, not
coincidentally, use XS subroutines as sort subroutines), provided that
you declare the sort subroutine with a prototype of
<tt class="literal">($$)</tt>.  And if you do that, then you can in fact
declare <tt class="literal">$a</tt> and <tt class="literal">$b</tt> as lexicals:
<blockquote>
<pre class="programlisting">sub numerically ($$) {
        my ($a, $b) = @_;
        $a &lt;=&gt; $b;
}</pre>
</blockquote>
And someday, when full prototypes are implemented, you'll just say:
<blockquote>
<pre class="programlisting">sub numerically ($a, $b) { $a &lt;=&gt; $b }</pre>
</blockquote>
and then we'll be back where we started, more or less.</p>

<a name="INDEX-5251"></a>






<h3 class="sect2">29.2.160. splice&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarat.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">splice <em class="replaceable">ARRAY</em>, <em class="replaceable">OFFSET</em>, <em class="replaceable">LENGTH</em>, <em class="replaceable">LIST</em>
splice <em class="replaceable">ARRAY</em>, <em class="replaceable">OFFSET</em>, <em class="replaceable">LENGTH</em>
splice <em class="replaceable">ARRAY</em>, <em class="replaceable">OFFSET</em>
splice <em class="replaceable">ARRAY</em>
</pre>
</blockquote>
<a name="INDEX-5252"></a><a name="INDEX-5253"></a><a name="INDEX-5254"></a><a name="INDEX-5255"></a><a name="INDEX-5256"></a>
This function removes the elements designated by
<em class="replaceable">OFFSET</em> and
<em class="replaceable">LENGTH</em> from an
<em class="replaceable">ARRAY</em>, and replaces them with the elements
of <em class="replaceable">LIST</em>, if any.  If
<em class="replaceable">OFFSET</em> is negative, the function counts
backward from the end of the array, but if that would land before the
beginning of the array, an exception is raised.  In list context,
<tt class="literal">splice</tt> returns the elements removed from the array.
In scalar context, it returns the last element removed, or
<tt class="literal">undef</tt> if there was none.  If the number of new
elements doesn't equal the number of old elements, the array grows or
shrinks as necessary, and elements after the splice change their
position correspondingly.  If <em class="replaceable">LENGTH</em> is
omitted, the function removes everything from
<em class="replaceable">OFFSET</em> onward.  If
<em class="replaceable">OFFSET</em> is omitted, the array is cleared as
it is read.  The following equivalences hold (assuming
<tt class="literal">$[</tt> is 0):</p>

<a name="perl3-tab-splice-equiv"></a>
<table border="1">

<tr>
<th>Direct Method</th>
<th>Splice Equivalent</th>
</tr>




<tr>
<td><tt class="literal">push(@a, $x, $y)</tt></td>
<td><tt class="literal">splice(@a, @a, 0, $x, $y)</tt></td>
</tr>

<tr>
<td><tt class="literal">pop(@a)</tt></td>
<td><tt class="literal">splice(@a, -1)</tt></td>
</tr>

<tr>
<td><tt class="literal">shift(@a)</tt></td>
<td><tt class="literal">splice(@a, 0, 1)</tt></td>
</tr>

<tr>
<td><tt class="literal">unshift(@a, $x, $y)</tt></td>
<td><tt class="literal">splice(@a, 0, 0, $x, $y)</tt></td>
</tr>

<tr>
<td><tt class="literal">$a[$x] = $y</tt></td>
<td><tt class="literal">splice(@a, $x, 1, $y)</tt></td>
</tr>

<tr>
<td><tt class="literal">(@a, @a = ())</tt></td>
<td><tt class="literal">splice(@a)</tt></td>
</tr>


</table>
<p>The <tt class="literal">splice</tt> function is also handy for carving up the argument list
passed to a subroutine.  For example, assuming list lengths are passed
before lists:
<blockquote>
<pre class="programlisting">sub list_eq {       # compare two list values
    my @a = splice(@_, 0, shift);
    my @b = splice(@_, 0, shift);
    return 0 unless @a == @b;       # same length?
    while (@a) {
        return 0 if pop(@a) ne pop(@b);
    }
    return 1;
}
if (list_eq($len, @foo[1..$len], scalar(@bar), @bar)) { ... }</pre>
</blockquote>

It would be cleaner to use array references for this, however.</p>






<h3 class="sect2">29.2.161. split&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> [taintgray]</h3>

<p>
<blockquote>
<pre class="programlisting">split /<em class="replaceable">PATTERN</em>/, <em class="replaceable">EXPR</em>, <em class="replaceable">LIMIT</em>
split /<em class="replaceable">PATTERN</em>/, <em class="replaceable">EXPR</em>
split /<em class="replaceable">PATTERN</em>/
split</pre>
</blockquote>
<a name="INDEX-5257"></a><a name="INDEX-5258"></a><a name="INDEX-5259"></a><a name="INDEX-5260"></a>
This function scans a string given by <em class="replaceable">EXPR</em>
for separators, and splits the string into a list of substrings,
returning the resulting list value in list context or the count of
substrings in scalar context.<a href="#FOOTNOTE-11">[11]</a> The separators are determined by
repeated pattern matching, using the regular expression given in
<em class="replaceable">PATTERN</em>, so the separators may be of any
size and need not be the same string on every match.  (The separators
are not ordinarily returned; exceptions are discussed later in this
section.) If the <em class="replaceable">PATTERN</em> doesn't match the
string at all, <tt class="literal">split</tt> returns the original string as
a single substring.  If it matches once, you get two substrings, and
so on.  You may supply regular expression modifiers to the
<em class="replaceable">PATTERN</em>, like
<tt class="literal">/</tt><em class="replaceable">PATTERN</em><tt class="literal">/i</tt>,
<tt class="literal">/</tt><em class="replaceable">PATTERN</em><tt class="literal">/x</tt>,
etc.  The <tt class="literal">//m</tt> modifier is assumed when you split on
the pattern <tt class="literal">/^/</tt>.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-11"></a>
<p>[11]Scalar context also
causes <tt class="literal">split</tt> to write its result to
<tt class="literal">@_</tt>, but this usage is
deprecated.</p>

</blockquote>

<p>If <em class="replaceable">LIMIT</em> is specified and positive, the function splits into no more
than that many fields (though it may split into fewer if it runs out of
separators).  If <em class="replaceable">LIMIT</em> is negative, it is treated as if an
arbitrarily large <em class="replaceable">LIMIT</em> has been specified.  If <em class="replaceable">LIMIT</em> is omitted
or zero, trailing null fields are stripped from the result (which
potential users of <tt class="literal">pop</tt> would do well to remember).  If <em class="replaceable">EXPR</em> is
omitted, the function splits the <tt class="literal">$_</tt> string.  If <em class="replaceable">PATTERN</em> is also
omitted or is the literal space, <tt class="literal">"&nbsp;"</tt>, the function splits on
whitespace, <tt class="literal">/\s+/</tt>, after skipping any leading whitespace.</p>

<p>Strings of any length can be split:
<blockquote>
<pre class="programlisting">@chars  = split //,   $word;
@fields = split /:/,  $line;
@words  = split " ",  $paragraph;
@lines  = split /^/,  $buffer;</pre>
</blockquote>

A pattern capable of matching either the null string or something
longer than the null string (for instance, a pattern consisting of any
single character modified by a <tt class="literal">*</tt> or <tt class="literal">?</tt>) will split the value of
<em class="replaceable">EXPR</em> into separate characters wherever it matches the null string
between characters; non-null matches will skip over the matched
separator characters in the usual fashion.  (In other words, a pattern
won't match in one spot more than once, even if it matched with a zero
width.) For example:
<blockquote>
<pre class="programlisting">print join ':', split / */, 'hi there';</pre>
</blockquote>

produces the output "<tt class="literal">h:i:t:h:e:r:e</tt>". The space disappears because it
matches as part of the separator.  As a trivial case, the null pattern
<tt class="literal">//</tt> simply splits into separate characters, and spaces do not
disappear.  (For normal pattern matches, a <tt class="literal">//</tt> pattern would repeat
the last successfully matched pattern, but <tt class="literal">split</tt>'s pattern is exempt
from that wrinkle.)</p>

<p>The <em class="replaceable">LIMIT</em> parameter splits only part of a string:
<blockquote>
<pre class="programlisting">($login, $passwd, $remainder) = split /:/, $_, 3;</pre>
</blockquote>

We encourage you to split to lists of names like this in order to make
your code self-documenting.  (For purposes of error checking, note that
<tt class="literal">$remainder</tt> would be undefined if there were fewer than three fields.)
When assigning to a list, if <em class="replaceable">LIMIT</em> is omitted, Perl supplies a
<em class="replaceable">LIMIT</em> one larger than the number of variables in the list, to avoid
unnecessary work.  For the split above, <em class="replaceable">LIMIT</em> would have been 4 by
default, and <tt class="literal">$remainder</tt> would have received only the third field, not
all the rest of the fields.  In time-critical applications, it behooves
you not to split into more fields than you really need.  (The trouble
with powerful languages is that they let you be powerfully stupid at times.)</p>

<p>We said earlier that the separators are not returned, but if the
<em class="replaceable">PATTERN</em> contains parentheses, then the substring matched by each pair
of parentheses is included in the resulting list, interspersed with the
fields that are ordinarily returned.  Here's a simple example:
<blockquote>
<pre class="programlisting">split /([-,])/, "1-10,20";</pre>
</blockquote>

produces the list value:
<blockquote>
<pre class="programlisting">(1, '-', 10, ',', 20)</pre>
</blockquote>
With more parentheses, a field is returned for each pair, even if some
pairs don't match, in which case undefined values are returned in
those positions.  So if you say:
<blockquote>
<pre class="programlisting">split /(-)|(,)/, "1-10,20";</pre>
</blockquote>

you get the value:
<blockquote>
<pre class="programlisting">(1, '-', undef, 10, undef, ',', 20)</pre>
</blockquote>

The
<tt class="literal">/</tt><em class="replaceable">PATTERN</em><tt class="literal">/</tt>
argument may be replaced with an expression to specify patterns that
vary at run time.  As with ordinary patterns, to do run-time
compilation only once, use <tt class="literal">/$variable/o</tt>.</p>

<p>As a special case, if the expression is a single space
(<tt class="literal">"&nbsp;"</tt>), the function splits on
whitespace just as <tt class="literal">split</tt> with no arguments does.
Thus, <tt class="literal">split(" ")</tt> can be used to emulate
<em class="emphasis">awk</em>'s default behavior.  In contrast,
<tt class="literal">split(/ /)</tt> will give you as many null initial
fields as there are leading spaces.  (Other than this special case, if
you supply a string instead of a regular expression, it'll be
interpreted as a regular expression anyway.)  You can use this
property to remove leading and trailing whitespace
from a string and to collapse intervening stretches
of whitespace into a single space:
<blockquote>
<pre class="programlisting">$string = join(' ', split(' ', $string));</pre>
</blockquote>

The following example splits an RFC 822 message header into a hash
containing <tt class="literal">$head{Date}</tt>, <tt class="literal">$head{Subject}</tt>, and so on.  It uses the
trick of assigning a list of pairs to a hash, based on the fact that
separators alternate with separated fields.  It makes use of parentheses
to return part of each separator as part of the returned list value.
Since the <tt class="literal">split</tt> pattern is guaranteed to return things in pairs by
virtue of containing one set of parentheses, the hash assignment is
guaranteed to receive a list consisting of key/value pairs, where each
key is the name of a header field.  (Unfortunately, this technique loses
information for multiple lines with the same key field, such as
Received-By lines.  Ah, well. . . .)
<blockquote>
<pre class="programlisting">$header =~ s/\n\s+/ /g;      # Merge continuation lines.
%head = ('FRONTSTUFF', split /^(\S*?):\s*/m, $header);</pre>
</blockquote>

The following example processes the entries in a Unix <em class="emphasis">passwd</em>(5) file.
You could leave out the <tt class="literal">chomp</tt>, in which case <tt class="literal">$shell</tt> would have a
newline on the end of it.
<blockquote>
<pre class="programlisting">open PASSWD, '/etc/passwd';
while (&lt;PASSWD&gt;) {
    chomp;        # remove trailing newline
    ($login, $passwd, $uid, $gid, $gcos, $home, $shell) =
            split /:/;
    ...
}</pre>
</blockquote>

Here's how to process each word of each line of each file
of input to create a word-frequency hash.
<blockquote>
<pre class="programlisting">while (&lt;&gt;) {
    foreach $word (split) {
        $count{$word}++;
    }
}</pre>
</blockquote>

The inverse of <tt class="literal">split</tt> is performed by <tt class="literal">join</tt> (except that <tt class="literal">join</tt> can
only join with the same separator between all fields).  To break apart a
string with fixed-position fields, use <tt class="literal">unpack</tt>.</p>






<h3 class="sect2">29.2.162. sprintf&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">sprintf <em class="replaceable">FORMAT</em>, <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-5261"></a><a name="INDEX-5262"></a><a name="INDEX-5263"></a><a name="INDEX-5264"></a><a name="INDEX-5265"></a><a name="INDEX-5266"></a>
This function returns a string formatted by the usual <tt class="literal">printf</tt>
conventions of the C library function <em class="emphasis">sprintf</em>.  See <em class="emphasis">sprintf</em>(3)
or <em class="emphasis">printf</em>(3) on your system for an explanation of the general
principles.  The <em class="replaceable">FORMAT</em> string contains text with embedded field
specifiers into which the elements of <em class="replaceable">LIST</em> are substituted, one
per field.</p>

<p>Perl does its own <tt class="literal">sprintf</tt> formatting--it emulates the C function
<em class="emphasis">sprintf</em>, but it doesn't use it.<a href="#FOOTNOTE-12">[12]</a>
As a result, any nonstandard extensions in your local <em class="emphasis">sprintf</em>(3)
function are not available from Perl.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-12"></a>
<p>[12]Except for floating-point
numbers, and even then only the standard modifiers are allowed.</p>

</blockquote>

<p>Perl's <tt class="literal">sprintf</tt> permits the universally known
conversions shown in <a href="ch29_02.htm">Table 29-4</a>.</p>

<a name="perl3-ch29-tab-formats-for-sprintf"></a>
<h4 class="objtitle">Table 29.4. Formats for sprintf</h4>
<table border="1">

<tr>
<th>Field</th>
<th>Meaning</th>
</tr>




<tr>
<td><tt class="literal">%%</tt></td>
<td>
<p>A percent sign</p>
</td>
</tr>

<tr>
<td><tt class="literal">%c</tt></td>
<td>
<p>A character with the given number</p>
</td>
</tr>

<tr>
<td><tt class="literal">%s</tt></td>
<td>
<p>A string</p>
</td>
</tr>

<tr>
<td><tt class="literal">%d</tt></td>
<td>
<p>A signed integer, in decimal</p>
</td>
</tr>

<tr>
<td><tt class="literal">%u</tt></td>
<td>
<p>An unsigned integer, in decimal</p>
</td>
</tr>

<tr>
<td><tt class="literal">%o</tt></td>
<td>
<p>An unsigned integer, in octal</p>
</td>
</tr>

<tr>
<td><tt class="literal">%x</tt></td>
<td>
<p>An unsigned integer, in hexadecimal</p>
</td>
</tr>

<tr>
<td><tt class="literal">%e</tt></td>
<td>
<p>A floating-point number, in scientific notation</p>
</td>
</tr>

<tr>
<td><tt class="literal">%f</tt></td>
<td>A floating-point number, in fixed decimal notation</td>
</tr>

<tr>
<td><tt class="literal">%g</tt></td>
<td>
<p>A floating-point number, in <tt class="literal">%e</tt> or <tt class="literal">%f</tt> notation</p>
</td>
</tr>


</table>

<p>In addition, Perl permits the following widely supported conversions:</p>

<table border="1">

<tr>
<th>Field</th>
<th>Meaning</th>
</tr>




<tr>
<td><tt class="literal">%X</tt></td>
<td>
<p>Like <tt class="literal">%x</tt>, but using uppercase letters</p>
</td>
</tr>

<tr>
<td><tt class="literal">%E</tt></td>
<td>
<p>Like <tt class="literal">%e</tt>, but using an uppercase "E"</p>
</td>
</tr>

<tr>
<td><tt class="literal">%G</tt></td>
<td>
<p>Like <tt class="literal">%g</tt>, but with an uppercase "E" (if applicable)</p>
</td>
</tr>

<tr>
<td><tt class="literal">%b</tt></td>
<td>
<p>An unsigned integer, in binary</p>
</td>
</tr>

<tr>
<td><tt class="literal">%p</tt></td>
<td>A pointer (outputs the Perl value's address in hexadecimal)</td>
</tr>

<tr>
<td><tt class="literal">%n</tt></td>
<td>
<p>Special: <em class="emphasis">stores</em> the number of characters output so far into the next variable in the argument list</p>
</td>
</tr>


</table>
<p>Finally, for backward (and we do mean "backward") compatibility, Perl
permits these unnecessary but widely supported conversions:</p>

<table border="1">

<tr>
<th>Field</th>
<th>Meaning</th>
</tr>




<tr>
<td><tt class="literal">%i</tt></td>
<td>
<p>A synonym for <tt class="literal">%d</tt>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">%D</tt></td>
<td>
<p>A synonym for <tt class="literal">%ld</tt>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">%U</tt></td>
<td>
<p>A synonym for <tt class="literal">%lu</tt>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">%O</tt></td>
<td>
<p>A synonym for <tt class="literal">%lo</tt>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">%F</tt></td>
<td>
<p>A synonym for <tt class="literal">%f</tt>
</p>
</td>
</tr>


</table>
<p>Perl permits the following universally known flags between the
<tt class="literal">%</tt> and the conversion character:</p>

<table border="1">

<tr>
<th>Flag</th>
<th>Meaning</th>
</tr>




<tr>
<td><em class="emphasis">space</em></td>
<td>
<p>Prefix positive number with a space</p>
</td>
</tr>

<tr>
<td><tt class="literal">+</tt></td>
<td>
<p>Prefix positive number with a plus sign</p>
</td>
</tr>

<tr>
<td><tt class="literal">-</tt></td>
<td>
<p>Left-justify within the field</p>
</td>
</tr>

<tr>
<td><tt class="literal">0</tt></td>
<td>
<p>Use zeros, not spaces, to right-justify</p>
</td>
</tr>

<tr>
<td><tt class="literal">#</tt></td>
<td>Prefix nonzero octal with <tt class="literal">"0"</tt>, nonzero hex with <tt class="literal">"0x"</tt></td>
</tr>

<tr>
<td><em class="emphasis">number</em></td>
<td>
<p>Minimum field width</p>
</td>
</tr>

<tr>
<td><tt class="literal">.</tt><em class="emphasis">number</em></td>
<td>
<p>"Precision": digits after decimal point for floating-point
numbers, maximum length for string, minimum length for integer</p>
</td>
</tr>

<tr>
<td><tt class="literal">l</tt></td>
<td>Interpret integer as C type <tt class="literal">long</tt> or <tt class="literal">unsigned long</tt></td>
</tr>

<tr>
<td><tt class="literal">h</tt></td>
<td>
<p>Interpret integer as C type <tt class="literal">short</tt> or
<tt class="literal">unsigned short</tt> (if no flags are supplied, interpret
integer as C type <tt class="literal">int</tt> or
<tt class="literal">unsigned</tt>)<a name="INDEX-5267"></a><a name="INDEX-5268"></a><a name="INDEX-5269"></a>
</p>
</td>
</tr>


</table>
<p>There are also two Perl-specific flags:</p>

<table border="1">

<tr>
<th>Flag</th>
<th>Meaning</th>
</tr>




<tr>
<td><tt class="literal">V</tt></td>
<td>Interpret integer as Perl's standard integer type</td>
</tr>

<tr>
<td><tt class="literal">v</tt></td>
<td>
<p>
<a name="INDEX-5270"></a>
Interpret string as a vector of integers, output as numbers
separated either by dots, or by an arbitrary string received from the
argument list when the flag is preceded by <tt class="literal">*</tt>
</p>
</td>
</tr>


</table>
<p>If your Perl understands "quads" (64-bit integers) either because the
platform natively supports them or because Perl has been specifically
compiled with that ability, then the characters <tt class="literal">d u o x X b i D U O</tt>
print quads, and they may optionally be preceded by <tt class="literal">ll</tt>, <tt class="literal">L</tt>, or <tt class="literal">q</tt>.  For
example, <tt class="literal">%lld %16LX %qo</tt>.</p>

<p>If Perl understands "long doubles" (this requires that the platform
support long doubles), the flags <tt class="literal">e f g E F G</tt> may optionally be
preceded by <tt class="literal">ll</tt> or <tt class="literal">L</tt>.  For example, <tt class="literal">%llf %Lg</tt>.</p>

<p>Where a number would appear in the flags, an asterisk ("<tt class="literal">*</tt>") may be
used instead, in which case Perl uses the next item in the argument
list as the given number (that is, as the field width or precision).
If a field width obtained through "<tt class="literal">*</tt>" is negative, it has the same
effect as the "<tt class="literal">-</tt>" flag: left-justification.</p>

<p>The <tt class="literal">v</tt> flag is useful for displaying ordinal values of characters
in arbitrary strings:
<blockquote>
<pre class="programlisting">sprintf "version is v%vd\n", $^V;           # Perl's version
sprintf "address is %vd\n", $addr;          # IPv4 address
sprintf "address is %*vX\n", ":", $addr;    # IPv6 address
sprintf "bits are %*vb\n", " ", $bits;      # random bit strings</pre>
</blockquote>
</p>

<a name="INDEX-5271"></a><a name="INDEX-5272"></a><a name="INDEX-5273"></a>






<h3 class="sect2">29.2.163. sqrt&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/dollarat.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">sqrt <em class="replaceable">EXPR</em>
sqrt</pre>
</blockquote>
<a name="INDEX-5274"></a>
This function returns the square root of <em class="replaceable">EXPR</em>.  For other roots
such as cube roots, you can use the <tt class="literal">**</tt> operator to raise something
to a fractional power. Don't try either of these approaches with
negative numbers, as that poses a slightly more complex problem (and
raises an exception).  But there's a standard module to take care of
even that:
<blockquote>
<pre class="programlisting">use Math::Complex;
print sqrt(-2);    # prints 1.4142135623731i</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.164. srand&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">srand <em class="replaceable">EXPR</em>
srand</pre>
</blockquote>
<a name="INDEX-5275"></a><a name="INDEX-5276"></a><a name="INDEX-5277"></a><a name="INDEX-5278"></a>
This function sets the random number seed for the <tt class="literal">rand</tt> operator.
If <em class="replaceable">EXPR</em> is omitted, it uses a semirandom value supplied by the
kernel (if it supports the <em class="emphasis">/dev/urandom</em> device) or based on the
current time and process ID, among other things.  It's usually not
necessary to call <tt class="literal">srand</tt> at all, because if it is not called
explicitly, it is called implicitly at the first use of the <tt class="literal">rand</tt>
operator.  However, this was not true in versions of Perl prior to
5.004, so if your script needs to run under older Perl versions, it
should call <tt class="literal">srand</tt>.</p>

<p>Frequently called programs (like CGI scripts) that simply use <tt class="literal">time ^ $$</tt> for a seed can fall prey to the mathematical property that
<tt class="literal">a^b == (a+1)^(b+1)</tt> one-third of the time.  So don't do that.
Use this instead:
<blockquote>
<pre class="programlisting">srand( time() ^ ($$ + ($$ &lt;&lt; 15)) );</pre>
</blockquote>
<a name="INDEX-5279"></a><a name="INDEX-5280"></a><a name="INDEX-5281"></a>
You'll need something much more random than the default seed for
cryptographic purposes.  On some systems the <em class="emphasis">/dev/random</em> device is
suitable.  Otherwise, checksumming the compressed output of one
or more rapidly changing operating system status programs is the
usual method.  For example:
<blockquote>
<pre class="programlisting">srand (time ^ $$ ^ unpack "%32L*", `ps wwaxl | gzip`);</pre>
</blockquote>

If you're particularly concerned with this, see the <tt class="literal">Math::TrulyRandom</tt>
module in CPAN.</p>

<p>Do <em class="emphasis">not</em> call <tt class="literal">srand</tt> multiple times in your program unless you know
exactly what you're doing and why you're doing it.  The point of the
function is to "seed" the <tt class="literal">rand</tt> function so that <tt class="literal">rand</tt> can produce
a different sequence each time you run your program.  Just do it once at the
top of your program, or you <em class="emphasis">won't</em> get random numbers out of <tt class="literal">rand</tt>!</p>






<h3 class="sect2">29.2.165. stat&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">stat <em class="replaceable">FILEHANDLE</em>
stat <em class="replaceable">EXPR</em>
stat</pre>
</blockquote>
<a name="INDEX-5282"></a><a name="INDEX-5283"></a>
In scalar context, this function returns a Boolean value that indicates whether the call succeeded.  In list context, it returns a 13-element list
giving the statistics for a file, either the file opened via
<em class="replaceable">FILEHANDLE</em>, or named by <em class="replaceable">EXPR</em>.  It's typically used as follows:
<blockquote>
<pre class="programlisting">($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
    $atime,$mtime,$ctime,$blksize,$blocks)
            = stat $filename;</pre>
</blockquote>
<a name="INDEX-5284"></a><a name="INDEX-5285"></a><a name="INDEX-5286"></a><a name="INDEX-5287"></a><a name="INDEX-5288"></a><a name="INDEX-5289"></a><a name="INDEX-5290"></a><a name="INDEX-5291"></a><a name="INDEX-5292"></a><a name="INDEX-5293"></a><a name="INDEX-5294"></a><a name="INDEX-5295"></a><a name="INDEX-5296"></a><a name="INDEX-5297"></a><a name="INDEX-5298"></a><a name="INDEX-5299"></a><a name="INDEX-5300"></a>
Not all fields are supported on all filesystem types; unsupported
fields return 0.  <a href="ch29_02.htm">Table 29-5</a> lists the
meanings of the fields.</p>

<a name="perl3-tab-stat-fields"></a>
<h4 class="objtitle">Table 29.5. Fields Returned by stat</h4>
<table border="1">

<tr>
<th>Index</th>
<th>Field</th>
<th>Meaning</th>
</tr>




<tr>
<td>0</td>
<td><tt class="literal">$dev</tt></td>
<td>Device number of filesystem</td>
</tr>

<tr>
<td>1</td>
<td><tt class="literal">$ino</tt></td>
<td>Inode number</td>
</tr>

<tr>
<td>2</td>
<td><tt class="literal">$mode</tt></td>
<td>File mode (type and permissions)</td>
</tr>

<tr>
<td>3</td>
<td><tt class="literal">$nlink</tt></td>
<td>Number of (hard) links to the file</td>
</tr>

<tr>
<td>4</td>
<td><tt class="literal">$uid</tt></td>
<td>Numeric user ID of file's owner</td>
</tr>

<tr>
<td>5</td>
<td><tt class="literal">$gid</tt></td>
<td>Numeric group ID of file's designated group</td>
</tr>

<tr>
<td>6</td>
<td><tt class="literal">$rdev</tt></td>
<td>The device identifier (special files only)</td>
</tr>

<tr>
<td>7</td>
<td><tt class="literal">$size</tt></td>
<td>Total size of file, in bytes</td>
</tr>

<tr>
<td>8</td>
<td><tt class="literal">$atime</tt></td>
<td>Last access time in seconds since the epoch</td>
</tr>

<tr>
<td>9</td>
<td><tt class="literal">$mtime</tt></td>
<td>Last modify time in seconds since the epoch</td>
</tr>

<tr>
<td>10</td>
<td><tt class="literal">$ctime</tt></td>
<td>Inode change time (<em class="emphasis">not</em> creation time!)  in seconds since the epoch</td>
</tr>

<tr>
<td>11</td>
<td><tt class="literal">$blksize</tt></td>
<td>Preferred blocksize for file system I/O</td>
</tr>

<tr>
<td>12</td>
<td><tt class="literal">$blocks</tt></td>
<td>Actual number of blocks allocated</td>
</tr>


</table>

<p>
<tt class="literal">$dev</tt> and <tt class="literal">$ino</tt>, taken together, uniquely identify a file on
the same system.  The <tt class="literal">$blksize</tt> and <tt class="literal">$blocks</tt> are likely defined
only on BSD-derived filesystems.  The <tt class="literal">$blocks</tt> field (if defined)
is reported in 512-byte blocks.  The value of <tt class="literal">$blocks*512</tt> can differ
greatly from <tt class="literal">$size</tt> for files containing unallocated blocks, or
"holes", which aren't counted in <tt class="literal">$blocks</tt>.</p>

<p>If <tt class="literal">stat</tt> is passed the special filehandle consisting
of an underline, no actual <em class="emphasis">stat</em>(2) is
done, but the current contents of the stat structure from the last
<tt class="literal">stat</tt>, <tt class="literal">lstat</tt>, or
<tt class="literal">stat</tt>-based file test operator (such as
<tt class="literal">-r</tt>, <tt class="literal">-w</tt>, and
<tt class="literal">-x</tt>) are returned.</p>

<p>Because the mode contains both the file type and its permissions,
you should mask off the file type portion and <tt class="literal">printf</tt> or <tt class="literal">sprintf</tt>
using a <tt class="literal">"%o"</tt> if you want to see the real permissions:
<blockquote>
<pre class="programlisting">$mode = (stat($filename))[2];
printf "Permissions are %04o\n", $mode &amp; 07777;</pre>
</blockquote>

The <tt class="literal">File::stat</tt> module provides a convenient, by-name access mechanism:
<blockquote>
<pre class="programlisting">use File::stat;
$sb = stat($filename);
printf "File is %s, size is %s, perm %04o, mtime %s\n",
   $filename, $sb-&gt;size, $sb-&gt;mode &amp; 07777,
   scalar localtime $sb-&gt;mtime;</pre>
</blockquote>
You can also import symbolic definitions of the various mode bits from
the <tt class="literal">Fcntl</tt> module.  See the online documentation for
more details.</p>

<p>Hint: if you need only the size of the file, check out the
<tt class="literal">-s</tt> file test operator, which returns the size in
bytes directly.  There are also file tests that return the ages of
files in days.</p>






<h3 class="sect2">29.2.166. study&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">study <em class="replaceable">SCALAR</em>
study</pre>
</blockquote>
<a name="INDEX-5301"></a><a name="INDEX-5302"></a><a name="INDEX-5303"></a>
This function takes extra time in order to study <em class="replaceable">SCALAR</em> 
in anticipation of doing many pattern matches on the string before it is
next modified.  This may or may not save time, depending on the nature
and number of patterns you are searching on, and on the distribution of
character frequencies in the string to be searched--you probably want to
compare run times with and without it to see which runs faster.  Those
loops that scan for many short constant strings (including the constant
parts of more complex patterns) will benefit most from <tt class="literal">study</tt>.  If all your pattern
matches are constant strings anchored at the front, <tt class="literal">study</tt> won't help
at all, because no scanning is done.  You may have only one <tt class="literal">study</tt>
active at a time--if you study a different scalar the first is
"unstudied".</p>

<p>The way <tt class="literal">study</tt> works is this: a linked list of every character in the
string to be searched is made, so we know, for example, where all the
"<tt class="literal">k</tt>" characters are.  From each search string, the rarest character is
selected, based on some static frequency tables constructed from some C
programs and English text.  Only those places that contain this rarest
character are examined.</p>

<p>For example, here is a loop that inserts index-producing entries before
any line containing a certain pattern:
<blockquote>
<pre class="programlisting">while (&lt;&gt;) {
    study;
    print ".IX foo\n"      if /\bfoo\b/;
    print ".IX bar\n"      if /\bbar\b/;
    print ".IX blurfl\n"   if /\bblurfl\b/;
    ...
    print;
}</pre>
</blockquote>

In searching for <tt class="literal">/\bfoo\b/</tt>, only those locations in <tt class="literal">$_</tt> that
contain "<tt class="literal">f</tt>" will be looked at, because "<tt class="literal">f</tt>" is rarer than "<tt class="literal">o</tt>".
This is a big win except in pathological cases.  The only
question is whether it saves you more time than it took to build the
linked list in the first place.</p>

<p>If you have to look for strings that you don't know until run time, you
can build an entire loop as a string and <tt class="literal">eval</tt> that to avoid
recompiling all your patterns all the time.  Together with setting <tt class="literal">$/</tt>
to input entire files as one record, this can be very fast, often faster
than specialized programs like <em class="emphasis">fgrep</em>(1).  The following scans a list of
files (<tt class="literal">@files</tt>) for a list of words (<tt class="literal">@words</tt>), and prints out the
names of those files that contain a case-insensitive match:
<blockquote>
<pre class="programlisting">$search = 'while (&lt;&gt;) { study;';
foreach $word (@words) {
    $search .= "++\$seen{\$ARGV} if /\\b$word\\b/i;\n";
}
$search .= "}";
@ARGV = @files;
undef $/;               # slurp each entire file
eval $search;           # this screams
die $@ if $@;           # in case eval failed
$/ = "\n";              # restore normal input terminator
foreach $file (sort keys(%seen)) {
    print "$file\n";
}</pre>
</blockquote>

Now that we have the <tt class="literal">qr//</tt> operator, complicated run-time <tt class="literal">eval</tt>s
as seen above are less necessary.  This does the same thing:
<blockquote>
<pre class="programlisting">@pats = ();
foreach $word (@words) {
    push @pats, qr/\b${word}\b/i;
}
@ARGV = @files;
undef $/;               # slurp each entire file
while (&lt;&gt;) {
    for $pat (@pats) {
        $seen{$ARGV}++ if /$pat/;
    }
}
$/ = "\n";              # restore normal input terminator
foreach $file (sort keys(%seen)) {
    print "$file\n";
}</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.167. sub&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>Named declarations:
<blockquote>
<pre class="programlisting">sub <em class="replaceable">NAME</em> <em class="replaceable">PROTO</em> <em class="replaceable">ATTRS</em>
sub <em class="replaceable">NAME</em> <em class="replaceable">ATTRS</em>
sub <em class="replaceable">NAME</em> <em class="replaceable">PROTO</em>
sub <em class="replaceable">NAME</em>
</pre>
</blockquote>

Named definitions:
<blockquote>
<pre class="programlisting">sub <em class="replaceable">NAME</em> <em class="replaceable">PROTO</em> <em class="replaceable">ATTRS</em> <em class="replaceable">BLOCK</em>
sub <em class="replaceable">NAME</em> <em class="replaceable">ATTRS</em> <em class="replaceable">BLOCK</em>
sub <em class="replaceable">NAME</em> <em class="replaceable">PROTO</em> <em class="replaceable">BLOCK</em>
sub <em class="replaceable">NAME</em> <em class="replaceable">BLOCK</em>
</pre>
</blockquote>

Unnamed definitions:
<blockquote>
<pre class="programlisting">sub <em class="replaceable">PROTO</em> <em class="replaceable">ATTRS</em> <em class="replaceable">BLOCK</em>
sub <em class="replaceable">ATTRS</em> <em class="replaceable">BLOCK</em>
sub <em class="replaceable">PROTO</em> <em class="replaceable">BLOCK</em>
sub <em class="replaceable">BLOCK</em>
</pre>
</blockquote>
<a name="INDEX-5304"></a><a name="INDEX-5305"></a><a name="INDEX-5306"></a>
The syntax of subroutine declarations and definitions looks complicated,
but is actually pretty simple in practice.  Everything is based on the
syntax:
<blockquote>
<pre class="programlisting">sub <em class="replaceable">NAME</em> <em class="replaceable">PROTO</em> <em class="replaceable">ATTRS</em> <em class="replaceable">BLOCK</em>
</pre>
</blockquote>

All four fields are optional; the only restrictions are that the fields
that do occur must occur in that order, and that you must use at least
one of <em class="replaceable">NAME</em> or <em class="replaceable">BLOCK</em>.  For the moment, we'll ignore the <em class="replaceable">PROTO</em>
and <em class="replaceable">ATTRS</em>; they're just modifiers on the basic syntax.  The <em class="replaceable">NAME</em>
and the <em class="replaceable">BLOCK</em> are the important parts to get straight:</p>

<ul>
<li>
<p>If you just have a <em class="replaceable">NAME</em> and no
<em class="replaceable">BLOCK</em>, it's a declaration of that name (and if you ever want to call
the subroutine, you'll have to supply a definition with both a <em class="replaceable">NAME</em> and a
<em class="replaceable">BLOCK</em> later).  Named declarations are useful because the parser treats a name
specially if it knows it's a user-defined subroutine.  You can call
such a subroutine either as a function or as an operator, just like
built-in functions.  These are sometimes called <em class="emphasis">forward</em> declarations.</p>
</li>
<li>
<p>If you have both a <em class="replaceable">NAME</em> and a <em class="replaceable">BLOCK</em>, it's a standard named
subroutine definition (and a declaration too, if you didn't declare the
name previously).  Named definitions are useful because the <em class="replaceable">BLOCK</em>
associates an actual meaning (the body of the subroutine) with the
declaration.  That's all we mean when we say it defines the subroutine
rather than just declaring it.  The definition is like the declaration,
however, in that the surrounding code doesn't see it, and it returns
no inline value by which you could reference the subroutine.</p>
</li>
<li>
<p>If you have just have a <em class="replaceable">BLOCK</em> without a <em class="replaceable">NAME</em>, it's a nameless
definition, that is, an anonymous subroutine.  Since it doesn't have a
name, it's not a declaration at all, but a real operator that returns a
reference to the anonymous subroutine body at run time.  This is
extremely useful for treating code as data. It allows you to pass odd
chunks of code around to be used as callbacks, and maybe even as
closures if the <tt class="literal">sub</tt> definition operator refers to any lexical
variables outside of itself.
That means that different calls to the same <tt class="literal">sub</tt> operator will do
the bookkeeping necessary to keep the correct "version" of each such
lexical variable in sight for the life of the closure, even if the
original scope of the lexical variable has been destroyed.</p>
</li>
</ul>
<p>
</p>

<p>In any of these three cases, either one or both of the
<em class="replaceable">PROTO</em> and <em class="replaceable">ATTRS</em>
may occur after the <em class="replaceable">NAME</em> and/or before the
<em class="replaceable">BLOCK</em>.  A prototype is a list of characters
in parentheses that tell the parser how to treat arguments to the
function.  Attributes are introduced by a colon and supply additional

information to the parser about the function.  Here's a typical
definition that includes all four fields:
<blockquote>
<pre class="programlisting">sub numstrcmp ($$) : locked {
    my ($a, $b) = @_;
    return $a &lt;=&gt; $b || $a cmp $b;
}</pre>
</blockquote>

For details on attribute lists and their manipulation, see the
<tt class="literal">attributes</tt> pragma in <a href="ch31_01.htm">Chapter 31, "Pragmatic Modules"</a>.  See also
<a href="ch06_01.htm">Chapter 6, "Subroutines"</a> and "Anonymous Subroutines" in <a href="ch08_01.htm">Chapter 8, "References"</a>.</p>






<h3 class="sect2">29.2.168. substr&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarat.gif"> <img src="figs/xarg.gif"> <img src="figs/xro.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">substr <em class="replaceable">EXPR</em>, <em class="replaceable">OFFSET</em>, <em class="replaceable">LENGTH</em>, <em class="replaceable">REPLACEMENT</em>
substr <em class="replaceable">EXPR</em>, <em class="replaceable">OFFSET</em>, <em class="replaceable">LENGTH</em>
substr <em class="replaceable">EXPR</em>, <em class="replaceable">OFFSET</em>
</pre>
</blockquote>
<a name="INDEX-5307"></a><a name="INDEX-5308"></a><a name="INDEX-5309"></a>
This function extracts a substring out of the string given by <em class="replaceable">EXPR</em>
and returns it.  The substring is extracted starting at <em class="replaceable">OFFSET</em>
characters from the front of the string. (Note: if you've messed with
<tt class="literal">$[</tt>, the beginning of the string isn't at 0, but since you haven't
messed with it (have you?), it is.) If <em class="replaceable">OFFSET</em> is negative, the
substring starts that far from the end of the string instead.  If
<em class="replaceable">LENGTH</em> is omitted, everything to the end of the string is returned.
If <em class="replaceable">LENGTH</em> is negative, the length is calculated to leave that many
characters off the end of the string.  Otherwise, <em class="replaceable">LENGTH</em> indicates
the length of the substring to extract, which is sort of what you'd
expect.</p>

<p>You may use <tt class="literal">substr</tt> as an lvalue (something to
assign to), in which case <em class="replaceable">EXPR</em> must also be
a legal lvalue.  If you assign something shorter than the length of
your substring, the string will shrink, and if you assign something
longer than the length, the string will grow to accommodate it.  To
keep the string the same length, you may need to pad or chop your
value using <tt class="literal">sprintf</tt> or the <tt class="literal">x</tt>
operator.  If you attempt to assign to an unallocated area past the
end of the string, <tt class="literal">substr</tt> raises an exception.</p>

<p>To prepend the string <tt class="literal">"Larry"</tt> to the current value of <tt class="literal">$_</tt>, use:
<blockquote>
<pre class="programlisting">substr($var, 0, 0) = "Larry";</pre>
</blockquote>

To instead replace the first character of <tt class="literal">$_</tt> with <tt class="literal">"Moe"</tt>, use:
<blockquote>
<pre class="programlisting">substr($var, 0, 1) = "Moe";</pre>
</blockquote>

And finally, to replace the last character of <tt class="literal">$var</tt> with <tt class="literal">"Curly"</tt>,
use:
<blockquote>
<pre class="programlisting">substr($var, -1) = "Curly";</pre>
</blockquote>

An alternative to using <tt class="literal">substr</tt> as an lvalue is to
specify the <em class="replaceable">REPLACEMENT</em> string as the
fourth argument.  This allows you to replace parts of the
<em class="replaceable">EXPR</em> and return what was there before in
one operation, just as you can with <tt class="literal">splice</tt>.  The
next example also replaces the last character of
<tt class="literal">$var</tt> with <tt class="literal">"Curly"</tt> and puts that
replaced character into <tt class="literal">$oldstr</tt>:
<blockquote>
<pre class="programlisting">$oldstr = substr($var, -1, 1, "Curly");</pre>
</blockquote>

You don't have to use lvalue <tt class="literal">substr</tt> only with assignment.
This replaces any spaces with dots, but only in the last 10
characters in the string:
<blockquote>
<pre class="programlisting">substr($var, -10) =~ s/ /./g;</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.169. symlink&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xt.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">symlink <em class="replaceable">OLDNAME</em>, <em class="replaceable">NEWNAME</em>
</pre>
</blockquote>
<a name="INDEX-5310"></a><a name="INDEX-5311"></a><a name="INDEX-5312"></a><a name="INDEX-5313"></a>
This function creates a new filename symbolically linked to the old
filename. The function returns true for success, false otherwise.  On systems
that don't support symbolic links, it raises an exception at
run time. To check for that, use <tt class="literal">eval</tt> to trap the potential error:
<blockquote>
<pre class="programlisting">$can_symlink = eval { symlink("",""); 1 };</pre>
</blockquote>

Or use the <tt class="literal">Config</tt> module.  Be careful if you supply a relative symbolic
link, since it'll be interpreted relative to the location of the
symbolic link itself, not to your current working directory.</p>

<p>See also <tt class="literal">link</tt> and <tt class="literal">readlink</tt> earlier in this chapter.</p>






<h3 class="sect2">29.2.170. syscall&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xro.gif"> <img src="figs/xt.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">syscall <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-5314"></a><a name="INDEX-5315"></a><a name="INDEX-5316"></a>
This function calls the system call (meaning a syscall, not a shell
command) specified as the first element of the list passes the
remaining elements as arguments to the system call. (Many of these calls
are now more readily available through modules like <tt class="literal">POSIX</tt>.)
The function raises an exception if <em class="emphasis">syscall</em>(2) is unimplemented.</p>

<p>The arguments are interpreted as follows: if a given argument is
numeric, the argument is passed as a C integer.  If not, a pointer
to the string value is passed.  You are responsible for making sure
the string is long enough to receive any result that might be written
into it; otherwise, you're looking at a core dump.  You can't use a
string literal (or other read-only string) as an argument to
<tt class="literal">syscall</tt> because Perl has to assume that any string pointer might
be written through.  If your integer arguments are not literals and
have never been interpreted in a numeric context, you may need to
add 0 to them to force them to look like numbers.</p>

<p>
<tt class="literal">syscall</tt> returns whatever value was returned by the system call
invoked.  By C coding conventions, if that system call fails,
<tt class="literal">syscall</tt> returns <tt class="literal">-1</tt> and sets <tt class="literal">$!</tt> (errno).  Some system calls
legitimately return <tt class="literal">-1</tt> if successful.  The proper way to handle such calls
is to assign <tt class="literal">$!=0;</tt> before the call and check the value of <tt class="literal">$!</tt>
if <tt class="literal">syscall</tt> returns <tt class="literal">-1</tt>.</p>

<p>Not all system calls can be accessed this way.  For example, Perl
supports passing up to 14 arguments to your system call,
which in practice should usually suffice.  However, there's a problem with
syscalls that return multiple values.  Consider <tt class="literal">syscall(&amp;SYS_pipe)</tt>:
it returns the file number of the read end of the pipe it creates.
There is no way to retrieve the file number of the other end.  You
can avoid this instance of the problem by using <tt class="literal">pipe</tt> instead.
To solve the generic problem, write XSUBs (external subroutine
modules, a dialect of C) to access the system calls directly.
Then put your new module onto CPAN, and become wildly popular.</p>

<p>The following subroutine returns the current time as a floating-point number
rather than as integer seconds as <tt class="literal">time</tt> returns.  (It will only
work on machines that support the <em class="emphasis">gettimeofday</em>(2) syscall.)
<blockquote>
<pre class="programlisting">sub finetime() {
    package main;   # for next require
    require 'syscall.ph';
    # presize buffer to two 32-bit longs...
    my $tv = pack("LL", ());
    syscall(&amp;SYS_gettimeofday, $tv, undef) &gt;= 0
        or die "gettimeofday: $!";
    my($seconds, $microseconds) = unpack("LL", $tv);
    return $seconds + ($microseconds / 1_000_000);
}</pre>
</blockquote>

Suppose Perl didn't support the <em class="emphasis">setgroups</em>(2) syscall,<a href="#FOOTNOTE-13">[13]</a> but your kernel did.  You could
still get at it this way:
<blockquote>
<pre class="programlisting">require 'syscall.ph';
syscall(&amp;SYS_setgroups, scalar @newgids, pack("i*", @newgids))
        or die "setgroups: $!";</pre>
</blockquote>

You may have to run <em class="emphasis">h2ph</em> as indicated in the Perl installation
instructions for <em class="emphasis">syscall.ph</em> to exist.  Some systems may require
a <tt class="literal">pack</tt> template of <tt class="literal">"II"</tt> instead.  Even more disturbing,
<tt class="literal">syscall</tt> assumes the size equivalence of the C types <tt class="literal">int</tt>,
<tt class="literal">long</tt>, and <tt class="literal">char*</tt>.  Try not to think of <tt class="literal">syscall</tt> as the epitome
of portability.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-13"></a>
<p>[13]Although
through <tt class="literal">$(</tt>, it does.</p>

</blockquote>

<p>See the <tt class="literal">Time::HiRes</tt> module from CPAN for a more rigorous approach
to fine-grained timing issues.</p>






<h3 class="sect2">29.2.171. sysopen&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">sysopen <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">FILENAME</em>, <em class="replaceable">MODE</em>, <em class="replaceable">MASK</em>
sysopen <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">FILENAME</em>, <em class="replaceable">MODE</em>
</pre>
</blockquote>
<a name="INDEX-5317"></a><a name="INDEX-5318"></a><a name="INDEX-5319"></a>
The <tt class="literal">sysopen</tt> function opens the file whose filename is given by
<em class="replaceable">FILENAME</em> and associates it with <em class="replaceable">FILEHANDLE</em>.  If <em class="replaceable">FILEHANDLE</em>
is an expression, its value is used as the name of, or reference
to, the filehandle.  If <em class="replaceable">FILEHANDLE</em> is a variable whose value
is undefined, a value will be created for you.  The return value
is true if the call succeeds, false otherwise.</p>

<p>This function is a direct interface to your operating system's
<em class="emphasis">open</em>(2) syscall followed by an
<em class="emphasis">fdopen</em>(3) library call.  As such, you'll
need to pretend you're a C programmer for a bit here.  The possible
values and flag bits of the <em class="replaceable">MODE</em> parameter
are available through the <tt class="literal">Fcntl</tt> module.  Because
different systems support different flags, don't count on all of them
being available on your system.  Consult your
<em class="emphasis">open</em>(2) manpage or its local equivalent
for details.  Nevertheless, the following flags should be present on
any system with a reasonably standard C library:</p>

<table border="1">

<tr>
<th>Flag</th>
<th>Meaning</th>
</tr>




<tr>
<td><tt class="literal">O_RDONLY</tt></td>
<td>
<p>Read only.</p>
</td>
</tr>

<tr>
<td><tt class="literal">O_WRONLY</tt></td>
<td>
<p>Write only.</p>
</td>
</tr>

<tr>
<td><tt class="literal">O_RDWR</tt></td>
<td>
<p>Read and write.</p>
</td>
</tr>

<tr>
<td><tt class="literal">O_CREAT</tt></td>
<td>Create the file if it doesn't exist.</td>
</tr>

<tr>
<td><tt class="literal">O_EXCL</tt></td>
<td>
<p>Fail if the file already exists.</p>
</td>
</tr>

<tr>
<td><tt class="literal">O_APPEND</tt></td>
<td>
<p>Append to the file.</p>
</td>
</tr>

<tr>
<td><tt class="literal">O_TRUNC</tt></td>
<td>
<p>Truncate the file.</p>
</td>
</tr>

<tr>
<td><tt class="literal">O_NONBLOCK</tt></td>
<td>
<p>Nonblocking access.</p>
</td>
</tr>


</table>
<p>Many other options are possible, however.  Here are some less common flags:</p>

<table border="1">

<tr>
<th>Flag</th>
<th>Meaning</th>
</tr>




<tr>
<td><tt class="literal">O_NDELAY</tt></td>
<td>
<p>Old synonym for <tt class="literal">O_NONBLOCK</tt>.</p>
</td>
</tr>

<tr>
<td><tt class="literal">O_SYNC</tt></td>
<td>
<p>Writes block until data is physically written to the
underlying hardware.  <tt class="literal">O_ASYNC</tt>, <tt class="literal">O_DSYNC</tt>,
and <tt class="literal">O_RSYNC</tt> may also be seen.</p>
</td>
</tr>

<tr>
<td><tt class="literal">O_EXLOCK</tt></td>
<td>
<p>
<tt class="literal">flock</tt> with <tt class="literal">LOCK_EX</tt>
(advisory only).</p>
</td>
</tr>

<tr>
<td><tt class="literal">O_SHLOCK</tt></td>
<td>
<p>
<tt class="literal">flock</tt> with <tt class="literal">LOCK_SH</tt>
(advisory only).</p>
</td>
</tr>

<tr>
<td><tt class="literal">O_DIRECTORY</tt></td>
<td>
<p>Fail if the file is <em class="emphasis">not</em> a
directory.</p>
</td>
</tr>

<tr>
<td><tt class="literal">O_NOFOLLOW</tt></td>
<td>Fail if the last path component is a symbolic link.</td>
</tr>

<tr>
<td><tt class="literal">O_BINARY</tt></td>
<td>
<p>
<tt class="literal">binmode</tt> the handle for Microsoft 
systems.  An <tt class="literal">O_TEXT</tt> may also
sometimes exist to get the opposite behavior.</p>
</td>
</tr>

<tr>
<td><tt class="literal">O_LARGEFILE</tt></td>
<td>
<p>Some systems need this for files over 2 GB.</p>
</td>
</tr>

<tr>
<td><tt class="literal">O_NOCTTY</tt></td>
<td>
<p>Opening a terminal file won't make that terminal become
the process's controlling terminal if you don't have one yet.  Usually
no longer needed.</p>
</td>
</tr>


</table>
<p>
<a name="INDEX-5320"></a><a name="INDEX-5321"></a>
The <tt class="literal">O_EXCL</tt> flag is <em class="emphasis">not</em> for locking: here, exclusiveness means
that if the file already exists, <tt class="literal">sysopen</tt> fails.</p>

<p>If the file named by <em class="replaceable">FILENAME</em> does not exist and the <em class="replaceable">MODE</em>
includes the <tt class="literal">O_CREAT</tt> flag, then <tt class="literal">sysopen</tt> creates the file with initial
permissions determined by the <em class="replaceable">MASK</em> argument (or <tt class="literal">0666</tt> if
omitted) as modified by your process's current <tt class="literal">umask</tt>.  This
default is reasonable: see the entry on <tt class="literal">umask</tt> for  an explanation.</p>

<p>Filehandles opened with <tt class="literal">open</tt> and <tt class="literal">sysopen</tt> may be used
interchangeably.  You do not need to use <tt class="literal">sysread</tt> and friends
just because you happened to open the file with <tt class="literal">sysopen</tt>, nor are
you precluded from doing so if you opened it with <tt class="literal">open</tt>.  Both
can do things that the other can't.  Regular <tt class="literal">open</tt> can open pipes,
fork processes, set disciplines, duplicate file handles, and convert a file descriptor
number into a filehandle. It also ignores leading and trailing
whitespace in filenames and respects "<tt class="literal">-</tt>" as a special filename.
But when it comes to opening actual files, <tt class="literal">sysopen</tt> can do anything
that <tt class="literal">open</tt> can.</p>

<p>The following examples show equivalent calls to both functions.  We
omit the <tt class="literal">or die $!</tt> checks for clarity, but make sure to always
check return values in your programs.  We'll restrict ourselves to
using only flags available on virtually all operating systems.  It's
just a matter of controlling the values that you OR together using
the bitwise <tt class="literal">|</tt> operator to pass in <em class="replaceable">MODE</em> argument.</p>

<ul>
<li>
<p>Open a file for reading:
<blockquote>
<pre class="programlisting">open(FH, "&lt;", $path);
sysopen(FH, $path, O_RDONLY);</pre>
</blockquote>
</p>
</li>
<li>
<p>Open a file for writing, creating a new file if needed, or truncating
an old file:
<blockquote>
<pre class="programlisting">open(FH, "&gt;", $path);
sysopen(FH, $path, O_WRONLY | O_TRUNC | O_CREAT);</pre>
</blockquote>
</p>
</li>
<li>
<p>Open a file for appending, creating one if necessary:
<blockquote>
<pre class="programlisting">open(FH, "&gt;&gt;", $path);
sysopen(FH, $path, O_WRONLY | O_APPEND | O_CREAT);</pre>
</blockquote>
</p>
</li>
<li>
<p>Open a file for update, where the file must already exist:
<blockquote>
<pre class="programlisting">open(FH, "+&lt;", $path);
sysopen(FH, $path, O_RDWR);</pre>
</blockquote>
</p>
</li>
</ul>
<p>
</p>

<p>And here are things you can do with <tt class="literal">sysopen</tt> but <em class="emphasis">not</em> with regular <tt class="literal">open</tt>:</p>

<ul>
<li>
<p>Open and create a file for writing, which must not previously
exist:
<blockquote>
<pre class="programlisting">sysopen(FH, $path, O_WRONLY | O_EXCL | O_CREAT);</pre>
</blockquote>
</p>
</li>
<li>
<p>Open a file for appending, which must already exist:
<blockquote>
<pre class="programlisting">sysopen(FH, $path, O_WRONLY | O_APPEND);</pre>
</blockquote>
</p>
</li>
<li>
<p>Open a file for update, creating a new file if necessary:
<blockquote>
<pre class="programlisting">sysopen(FH, $path, O_RDWR | O_CREAT);</pre>
</blockquote>
</p>
</li>
<li>
<p>Open a file for update, which must not already exist:
<blockquote>
<pre class="programlisting">sysopen(FH, $path, O_RDWR | O_EXCL | O_CREAT);</pre>
</blockquote>
</p>
</li>
<li>
<p>Open a write-only file without blocking, but not creating
it if it doesn't exist:
<blockquote>
<pre class="programlisting">sysopen(FH, $path, O_WRONLY | O_NONBLOCK);</pre>
</blockquote>
</p>
</li>
</ul>
<p>
</p>

<p>The <tt class="literal">FileHandle</tt> module described in <a href="ch32_01.htm">Chapter 32, "Standard Modules"</a> provides
a set of object-oriented synonyms (plus a small bit of new
functionality) for opening files.  You are welcome to call the
appropriate <tt class="literal">FileHandle</tt> methods<a href="#FOOTNOTE-14">[14]</a> on any handle created with <tt class="literal">open</tt>,
<tt class="literal">sysopen</tt>, <tt class="literal">pipe</tt>, <tt class="literal">socket</tt>, or <tt class="literal">accept</tt>, even if you didn't
use the module to initialize those handles.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-14"></a>
<p>[14]Really <tt class="literal">IO::File</tt> or
<tt class="literal">IO::Handle</tt> methods.</p>

</blockquote>






<h3 class="sect2">29.2.172. sysread&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/dollarat.gif"> [taintgray] <img src="figs/xarg.gif"> <img src="figs/xro.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">sysread <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">SCALAR</em>, <em class="replaceable">LENGTH</em>, <em class="replaceable">OFFSET</em>
sysread <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">SCALAR</em>, <em class="replaceable">LENGTH</em>
</pre>
</blockquote>
<a name="INDEX-5322"></a><a name="INDEX-5323"></a><a name="INDEX-5324"></a><a name="INDEX-5325"></a>
This function attempts to read <em class="replaceable">LENGTH</em> bytes of data into variable
<em class="replaceable">SCALAR</em> from the specified <em class="replaceable">FILEHANDLE</em> using a low-level syscall,
<em class="emphasis">read</em>(2).  The function returns the number of bytes read, or 0
at EOF.<a href="#FOOTNOTE-15">[15]</a>  The <tt class="literal">sysread</tt> function returns
<tt class="literal">undef</tt> on error.  <em class="replaceable">SCALAR</em> will grow or shrink
to the length actually read.  The <em class="replaceable">OFFSET</em>, if specified, says
where in the string to start putting the bytes, so that you can
read into the middle of a string that's being used as a buffer.
For an example of using <em class="replaceable">OFFSET</em>, see <tt class="literal">syswrite</tt>.  
An exception is raised if <em class="replaceable">LENGTH</em> is negative or if <em class="replaceable">OFFSET</em> points
outside the string.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-15"></a>
<p>[15]There is no <tt class="literal">syseof</tt> function, which is okay,
since <tt class="literal">eof</tt> doesn't work well on device files (like terminals)
anyway.  Use <tt class="literal">sysread</tt> and check for a return value for 0 to decide
whether you're done.</p>

</blockquote>

<p>You should be prepared to handle the problems (like interrupted
syscalls) that standard I/O normally handles for you.  Because it
bypasses standard I/O, do not mix <tt class="literal">sysread</tt> with other kinds of reads, <tt class="literal">print</tt>,
<tt class="literal">printf</tt>, <tt class="literal">write</tt>, <tt class="literal">seek</tt>, <tt class="literal">tell</tt>, or <tt class="literal">eof</tt> on the same filehandle
unless you are into heavy wizardry (and/or pain).  Also, please be
aware that, when reading from a file containing Unicode or any other
multibyte encoding, the buffer boundary may fall in the middle of a
character.</p>






<h3 class="sect2">29.2.173. sysseek&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">sysseek <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">POSITION</em>, <em class="replaceable">WHENCE</em>
</pre>
</blockquote>

This function sets <em class="replaceable">FILEHANDLE</em>'s
system position using the syscall
<em class="emphasis">lseek</em>(2).  It bypasses standard I/O, so
mixing this with reads (other than <tt class="literal">sysread</tt>),
<tt class="literal">print</tt>, <tt class="literal">write</tt>,
<tt class="literal">seek</tt>, <tt class="literal">tell</tt>, or
<tt class="literal">eof</tt> may cause confusion.
<em class="replaceable">FILEHANDLE</em> may be an expression whose value
gives the name of the filehandle.  The values for
<em class="replaceable">WHENCE</em> are <tt class="literal">0</tt> to set the
new position to <em class="replaceable">POSITION</em>,
<tt class="literal">1</tt> to set the it to the current position plus
<em class="replaceable">POSITION</em>, and <tt class="literal">2</tt> to set
it to EOF plus <em class="replaceable">POSITION</em> (typically
negative).  For <em class="replaceable">WHENCE</em>, you may use the
constants <tt class="literal">SEEK_SET</tt>, <tt class="literal">SEEK_CUR</tt>,
and <tt class="literal">SEEK_END</tt> from the standard
<tt class="literal">IO::Seekable</tt> and <tt class="literal">POSIX</tt>
modules--or, as of the 5.6 release, from <tt class="literal">Fcntl</tt>,
which is more portable and convenient.</p>

<p>Returns the new position, or <tt class="literal">undef</tt> on failure.  A
position of zero is returned as the special string "<tt class="literal">0 but
true</tt>", which can be used numerically without producing
warnings.</p>






<h3 class="sect2">29.2.174. system&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/dollarquestion.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">system <em class="replaceable">PATHNAME</em> <em class="replaceable">LIST</em>
system <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-5326"></a><a name="INDEX-5327"></a><a name="INDEX-5328"></a><a name="INDEX-5329"></a>
This function executes any program on the system for you and returns
that program's exit status--not its output.  To capture the output
from a command, use backticks or <tt class="literal">qx//</tt> instead.  The
<tt class="literal">system</tt> function works exactly like
<tt class="literal">exec</tt>, except that <tt class="literal">system</tt> does a
<tt class="literal">fork</tt> first and then, after the
<tt class="literal">exec</tt>, waits for the executed program to complete.
That is, it runs the program for you and returns when it's done,
whereas <tt class="literal">exec</tt><em class="emphasis">replaces</em> your
running program with the new one, so it never returns if the
replacement succeeds.</p>

<p>Argument processing varies depending on the number of arguments,
as described under <tt class="literal">exec</tt>, including determining
whether the shell will be called and
whether you've lied to the program about its name by specifying a
separate <em class="replaceable">PATHNAME</em>.</p>

<p>Because <tt class="literal">system</tt> and backticks block
<tt class="literal">SIGINT</tt> and <tt class="literal">SIGQUIT</tt>, sending one
of those signals (such as from a Control-C) to the program being run
doesn't interrupt your main program.  But the other program you're
running <em class="emphasis">does</em> get the signal.  Check the return
value from <tt class="literal">system</tt> to see whether the program you
were running exited properly or not.
<blockquote>
<pre class="programlisting">@args = ("command", "arg1", "arg2");
system(@args) == 0
     or die "system @args failed: $?"</pre>
</blockquote>

The return value is the exit status of the program as returned through
the <em class="emphasis">wait</em>(2) syscall.  Under traditional
semantics, to get the real exit value, divide by 256 or shift right by
8 bits.  That's because the lower byte has something else in it.  (Two
somethings, really.)  The lowest seven bits indicate the signal number
that killed the process (if any), and the eighth bit indicates whether
the process dumped core.  You can check all possible failure
possibilities, including signals and core dumps, by inspecting
<tt class="literal">$?</tt> (<tt class="literal">$CHILD_ERROR</tt>):
<blockquote>
<pre class="programlisting">$exit_value  = $? &gt;&gt; 8;
$signal_num  = $? &amp; 127;    # or 0x7f, or 0177, or 0b0111_1111
$dumped_core = $? &amp; 128;    # or 0x80, or 0200, or 0b1000_0000</pre>
</blockquote>
When the program has been run through the system
shell<a href="#FOOTNOTE-16">[16]</a>
because you had only one argument and that argument had shell
metacharacters in it, normal return codes are subject to that shell's
additional quirks and capabilities.  In other words, under those
circumstances, you may be unable to recover the detailed information
described earlier.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-16"></a>
<p>[16]That's <em class="emphasis">/bin/sh</em> by
definition, or whatever makes sense on your platform, but not whatever
shell the user just happens to be using at the time.</p>

</blockquote>






<h3 class="sect2">29.2.175. syswrite&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/dollarat.gif"> <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">syswrite <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">SCALAR</em>, <em class="replaceable">LENGTH</em>, <em class="replaceable">OFFSET</em>
syswrite <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">SCALAR</em>, <em class="replaceable">LENGTH</em>
syswrite <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">SCALAR</em>
</pre>
</blockquote>
<a name="INDEX-5330"></a><a name="INDEX-5331"></a><a name="INDEX-5332"></a>
This function attempts to write <em class="replaceable">LENGTH</em>
bytes of data from variable <em class="replaceable">SCALAR</em> to the
specified <em class="replaceable">FILEHANDLE</em> using the
<em class="emphasis">write</em>(2) syscall.  The function returns
the number of bytes written, or <tt class="literal">undef</tt> on error.
The <em class="replaceable">OFFSET</em>, if specified, says where in the
string to start writing from.  (You might do this if you were using
the string as a buffer, for instance, or if you needed to recover from
a partial write.)  A negative <em class="replaceable">OFFSET</em>
specifies that writing should start that many bytes backward from the
end of the string.  If <em class="replaceable">SCALAR</em> is empty, the
only <em class="replaceable">OFFSET</em> permitted is 0.  An exception
is raised if <em class="replaceable">LENGTH</em> is negative or if
<em class="replaceable">OFFSET</em> points outside the string.</p>

<p>To copy data from filehandle <tt class="literal">FROM</tt> into filehandle
<tt class="literal">TO</tt>, you can use something like:
<blockquote>
<pre class="programlisting">use Errno qw/EINTR/;
$blksize = (stat FROM)[11] || 16384;  # preferred block size?
while ($len = sysread FROM, $buf, $blksize) {
    if (!defined $len) {
        next if $! == EINTR;
        die "System read error: $!\n";
    }
    $offset = 0;
    while ($len) {          # Handle partial writes.
        $written = syswrite TO, $buf, $len, $offset;
        die "System write error: $!\n" unless defined $written;
        $offset += $written;
        $len    -= $written;
    }
}</pre>
</blockquote>

You must be prepared to handle the problems that standard I/O
normally handles for you, such as partial writes.  Because <tt class="literal">syswrite</tt>
bypasses the C standard I/O library, do not mix calls to it with
reads (other than <tt class="literal">sysread</tt>), writes (like <tt class="literal">print</tt>, <tt class="literal">printf</tt>,
or <tt class="literal">write</tt>), or other stdio functions like <tt class="literal">seek</tt>, <tt class="literal">tell</tt>, or
<tt class="literal">eof</tt> unless you are into heavy wizardry.<a href="#FOOTNOTE-17">[17]</a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-17"></a>
<p>[17]Or pain.</p>

</blockquote>






<h3 class="sect2">29.2.176. tell&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">tell <em class="replaceable">FILEHANDLE</em>
tell</pre>
</blockquote>
<a name="INDEX-5333"></a><a name="INDEX-5334"></a><a name="INDEX-5335"></a>
This function returns the current file position (in bytes, zero-based) for
<em class="replaceable">FILEHANDLE</em>. This value typically will be fed to the <tt class="literal">seek</tt> function at
some future time to get back to the current position. <em class="replaceable">FILEHANDLE</em> may
be an expression giving the name of the actual filehandle, or
a reference to a filehandle object. If <em class="replaceable">FILEHANDLE</em> is omitted, the
function returns the position of the file last read.  File positions are
only meaningful on regular files.  Devices, pipes, and sockets have no
file position.</p>

<p>There is no <tt class="literal">systell</tt> function.  Use <tt class="literal">sysseek(FH, 0, 1)</tt> for that.
Seek <tt class="literal">seek</tt> for an example telling how to use <tt class="literal">tell</tt>.</p>






<h3 class="sect2">29.2.177. telldir&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xarg.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">telldir <em class="replaceable">DIRHANDLE</em>
</pre>
</blockquote>
<a name="INDEX-5336"></a>
This function returns the current position of the <tt class="literal">readdir</tt> routines on
<em class="replaceable">DIRHANDLE</em>. This value may be given to <tt class="literal">seekdir</tt> to access a
particular location in a directory.  The function has the same caveats
about possible directory compaction as the corresponding system library
routine.  This function might not be implemented everywhere that
<tt class="literal">readdir</tt> is.  Even if it is, no calculation may be done with the
return value.  It's just an opaque value, meaningful only to <tt class="literal">seekdir</tt>.</p>






<h3 class="sect2">29.2.178. tie&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarat.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">tie <em class="replaceable">VARIABLE</em>, <em class="replaceable">CLASSNAME</em>, <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-5337"></a><a name="INDEX-5338"></a><a name="INDEX-5339"></a><a name="INDEX-5340"></a><a name="INDEX-5341"></a>
This function binds a variable to a package class that will provide the
implementation for the variable.  <em class="replaceable">VARIABLE</em> is the variable (scalar,
array, or hash) or typeglob (representing a filehandle) to be tied.
<em class="replaceable">CLASSNAME</em> is the name of a class implementing objects of an
appropriate type.</p>

<p>Any additional arguments are passed to the appropriate constructor
method of the class, meaning one of <tt class="literal">TIESCALAR</tt>, <tt class="literal">TIEARRAY</tt>,
<tt class="literal">TIEHASH</tt>, or <tt class="literal">TIEHANDLE</tt>.  (If the appropriate method is not found,
an exception is raised.)  Typically, these are arguments such
as might be passed to the <em class="emphasis">dbm_open</em>(3) function of C, but their
meaning is package dependent.  The object returned by the constructor
is in turn returned by the <tt class="literal">tie</tt> function, which can be useful if you
want to access other methods in <em class="replaceable">CLASSNAME</em>.  (The object can also
be accessed through the <tt class="literal">tied</tt> function.)  So, a class for tying a
hash to an ISAM implementation might provide an extra method to
traverse a set of keys sequentially (the "S" of ISAM), since your
typical DBM implementation can't do that.</p>

<p>Functions such as <tt class="literal">keys</tt> and <tt class="literal">values</tt> may return huge list
values when used on large objects like DBM files.  You may prefer to use
the <tt class="literal">each</tt> function to iterate over such.  For example:
<blockquote>
<pre class="programlisting">use NDBM_File;
tie %ALIASES, "NDBM_File", "/etc/aliases", 1, 0
    or die "Can't open aliases: $!\n";
while (($key,$val) = each %ALIASES) {
    print $key, ' = ', $val, "\n";
}
untie %ALIASES;</pre>
</blockquote>

A class implementing a hash should provide the following methods:
<blockquote>
<pre class="programlisting">TIEHASH <em class="replaceable">CLASS</em>, <em class="replaceable">LIST</em>
FETCH <em class="replaceable">SELF</em>, <em class="replaceable">KEY</em>
STORE <em class="replaceable">SELF</em>, <em class="replaceable">KEY</em>, <em class="replaceable">VALUE</em>
DELETE <em class="replaceable">SELF</em>, <em class="replaceable">KEY</em>
CLEAR <em class="replaceable">SELF</em>
EXISTS <em class="replaceable">SELF</em>, <em class="replaceable">KEY</em>
FIRSTKEY <em class="replaceable">SELF</em>
NEXTKEY <em class="replaceable">SELF</em>, <em class="replaceable">LASTKEY</em>
DESTROY <em class="replaceable">SELF</em>
</pre>
</blockquote>

A class implementing an ordinary array should provide the following
methods:
<blockquote>
<pre class="programlisting">TIEARRAY <em class="replaceable">CLASS</em>, <em class="replaceable">LIST</em>
FETCH <em class="replaceable">SELF</em>, <em class="replaceable">SUBSCRIPT</em>
STORE <em class="replaceable">SELF</em>, <em class="replaceable">SUBSCRIPT</em>, <em class="replaceable">VALUE</em>
FETCHSIZE <em class="replaceable">SELF</em>
STORESIZE <em class="replaceable">SELF</em>, <em class="replaceable">COUNT</em>
CLEAR <em class="replaceable">SELF</em>
PUSH <em class="replaceable">SELF</em>, <em class="replaceable">LIST</em>
POP <em class="replaceable">SELF</em>
SHIFT <em class="replaceable">SELF</em>
UNSHIFT <em class="replaceable">SELF</em>, <em class="replaceable">LIST</em>
SPLICE <em class="replaceable">SELF</em>, <em class="replaceable">OFFSET</em>, <em class="replaceable">LENGTH</em>, LIST
EXTEND <em class="replaceable">SELF</em>, <em class="replaceable">COUNT</em>
DESTROY <em class="replaceable">SELF</em>
</pre>
</blockquote>
A class implementing a scalar should provide the following methods:
<blockquote>
<pre class="programlisting">TIESCALAR <em class="replaceable">CLASS</em>, <em class="replaceable">LIST</em>
FETCH <em class="replaceable">SELF</em>,
STORE <em class="replaceable">SELF</em>, <em class="replaceable">VALUE</em>
DESTROY <em class="replaceable">SELF</em>
</pre>
</blockquote>

A class implementing a filehandle should have the following methods:
<blockquote>
<pre class="programlisting">TIEHANDLE <em class="replaceable">CLASS</em>, <em class="replaceable">LIST</em>
READ <em class="replaceable">SELF</em>, <em class="replaceable">SCALAR</em>, <em class="replaceable">LENGTH</em>, <em class="replaceable">OFFSET</em>
READLINE <em class="replaceable">SELF</em>
GETC <em class="replaceable">SELF</em>
WRITE <em class="replaceable">SELF</em>, <em class="replaceable">SCALAR</em>, <em class="replaceable">LENGTH</em>, <em class="replaceable">OFFSET</em>
PRINT <em class="replaceable">SELF</em>, <em class="replaceable">LIST</em>
PRINTF <em class="replaceable">SELF</em>, <em class="replaceable">FORMAT</em>, <em class="replaceable">LIST</em>
CLOSE <em class="replaceable">SELF</em>
DESTROY <em class="replaceable">SELF</em>
</pre>
</blockquote>

Not all methods indicated above need be implemented: the
<tt class="literal">Tie::Hash</tt>, <tt class="literal">Tie::Array</tt>,
<tt class="literal">Tie::Scalar</tt>, and <tt class="literal">Tie::Handle</tt>
modules provide base classes that have reasonable defaults.  See <a href="ch14_01.htm">Chapter 14, "Tied Variables"</a>, for a detailed discussion of all
these methods.  Unlike <tt class="literal">dbmopen</tt>, the
<tt class="literal">tie</tt> function will not <tt class="literal">use</tt> or
<tt class="literal">require</tt> a module for you--you need to do that
explicitly yourself.  See the <tt class="literal">DB_File</tt> and
<tt class="literal">Config</tt> modules for interesting
<tt class="literal">tie</tt> implementations.</p>






<h3 class="sect2">29.2.179. tied&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">tied <em class="replaceable">VARIABLE</em>
</pre>
</blockquote>
<a name="INDEX-5342"></a>
This function returns a reference to the object underlying the
scalar, array, hash, or typeglob contained in <em class="replaceable">VARIABLE</em> (the same
value that was originally returned by the <tt class="literal">tie</tt> call that bound
the variable to a package).  It returns the undefined value if
<em class="replaceable">VARIABLE</em> isn't tied to a package.  So, for example, you can use:
<blockquote>
<pre class="programlisting">ref tied %hash</pre>
</blockquote>

to find out which package your hash is tied to.  (Presuming
you've forgotten.)</p>






<h3 class="sect2">29.2.180. time&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">time</pre>
</blockquote>
<a name="INDEX-5343"></a><a name="INDEX-5344"></a>
This function returns the number of nonleap seconds since "the
epoch", traditionally 00:00:00 on January 1st, 1970, UTC.<a href="#FOOTNOTE-18">[18]</a>  The returned value is
suitable for feeding to <tt class="literal">gmtime</tt> and <tt class="literal">localtime</tt>, for comparison
with file modification and access times returned by <tt class="literal">stat</tt>, and
for feeding to <tt class="literal">utime</tt>.
<blockquote>
<pre class="programlisting">$start = time();
system("some slow command");
$end   = time();
if ($end - $start &gt; 1) {
    print "Program started: ", scalar localtime($start), "\n";
    print "Program ended:   ", scalar localtime($end), "\n";
}</pre>
</blockquote>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-18"></a>
<p>[18]Not to be confused with the "epic", which is about the making of
Unix.  (Other operating systems may have a different epoch, not to
mention a different epic.)</p>

</blockquote>






<h3 class="sect2">29.2.181. times&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">times</pre>
</blockquote>
<a name="INDEX-5345"></a><a name="INDEX-5346"></a><a name="INDEX-5347"></a><a name="INDEX-5348"></a>
In list context, this function returns a four-element list giving
the user and system CPU times, in seconds (probably fractional),
for this process and terminated children of this process.
<blockquote>
<pre class="programlisting">($user, $system, $cuser, $csystem) = times();
printf "This pid and its kids have consumed %.3f seconds\n",
            $user + $system + $cuser + $csystem;</pre>
</blockquote>

In scalar context, returns just the user time.  For example, to
time the execution speed of a section of Perl code:
<blockquote>
<pre class="programlisting">$start = times();
...
$end = times();
printf "that took %.2f CPU seconds of user time\n",
        $end - $start;</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.182. tr///&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xro.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">tr///
y///</pre>
</blockquote>
<a name="INDEX-5349"></a><a name="INDEX-5350"></a>
This is the transliteration (also called translation) operator, which
is like the <tt class="literal">y///</tt> operator in the Unix <em class="emphasis">sed</em> program, only better,
in everybody's humble opinion.  See <a href="ch05_01.htm">Chapter 5, "Pattern Matching"</a>.</p>






<h3 class="sect2">29.2.183. truncate&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xarg.gif"> <img src="figs/xu.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">truncate <em class="replaceable">FILEHANDLE</em>, <em class="replaceable">LENGTH</em>
truncate <em class="replaceable">EXPR</em>, <em class="replaceable">LENGTH</em>
</pre>
</blockquote>
<a name="INDEX-5351"></a><a name="INDEX-5352"></a>
This function truncates the file opened on <em class="replaceable">FILEHANDLE</em>, or named
by <em class="replaceable">EXPR</em>, to the specified length.  The function raises an exception
if <em class="emphasis">ftruncate</em>(2) or an equivalent isn't implemented on your
system.  (You can always truncate a file by copying the front of
it, if you have the disk space.) The function returns true on success, <tt class="literal">undef</tt>
otherwise.</p>






<h3 class="sect2">29.2.184. uc&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> [taintgray]</h3>

<p>
<blockquote>
<pre class="programlisting">uc <em class="replaceable">EXPR</em>
uc</pre>
</blockquote>
<a name="INDEX-5353"></a><a name="INDEX-5354"></a><a name="INDEX-5355"></a>
This function returns an uppercased version of <em class="replaceable">EXPR</em>. This is the
internal function implementing the <tt class="literal">\U</tt> escape in double-quoted
strings.  Perl will try to do the right thing with respect to your
current locale settings, but we're still working out how that
interacts with Unicode.  See the <em class="emphasis">perllocalle</em> manpage for the latest guess.  In
any event, when Perl uses the Unicode tables, <tt class="literal">uc</tt> translates to
uppercase rather than to titlecase.  See <tt class="literal">ucfirst</tt> for titlecase
translation.</p>






<h3 class="sect2">29.2.185. ucfirst&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> [taintgray]</h3>

<p>
<blockquote>
<pre class="programlisting">ucfirst <em class="replaceable">EXPR</em>
ucfirst</pre>
</blockquote>
<a name="INDEX-5356"></a><a name="INDEX-5357"></a>
This function returns a version of <em class="replaceable">EXPR</em> with the first character
capitalized (titlecased in "Unicodese"), and other characters left
alone.  This is the internal function implementing the <tt class="literal">\u</tt> escape in
double-quoted strings.  Your current <tt class="literal">LC_CTYPE</tt> locale may be
respected if you <tt class="literal">use locale</tt> and your data doesn't look like
Unicode, but we make no guarantees at this time.</p>

<p>To force the initial character to titlecase and everything else to
lowercase, use:
<blockquote>
<pre class="programlisting">ucfirst lc $word</pre>
</blockquote>

which is equivalent to <tt class="literal">"\u\L$word"</tt>.</p>






<h3 class="sect2">29.2.186. umask&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xt.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">umask <em class="replaceable">EXPR</em>
umask</pre>
</blockquote>
<a name="INDEX-5358"></a><a name="INDEX-5359"></a><a name="INDEX-5360"></a><a name="INDEX-5361"></a>
This function sets the umask for the process and returns the old
one using the <em class="emphasis">umask</em>(2) syscall.  Your umask tells the operating system
which permission bits to <em class="emphasis">disallow</em> when creating a new file,
including files that happen to be directories.  If <em class="replaceable">EXPR</em> is
omitted, the function merely returns the current umask.  For example,
to ensure that the "user" bits are allowed, and the "other" bits
disallowed, try something like:
<blockquote>
<pre class="programlisting">umask((umask() &amp; 077) | 7);   # don't change the group bits</pre>
</blockquote>

Remember that a umask is a number, usually given in octal; it is <em class="emphasis">not</em> a
string of octal digits.  See also <tt class="literal">oct</tt>, if all you have is a string.
Remember also that the umask's bits are complemented compared to ordinary
permissions.</p>

<p>The Unix permission <tt class="literal">rwxr-x---</tt> is represented as three sets of three
bits, or three octal digits: <tt class="literal">0750</tt> (the leading 0 indicates octal and
doesn't count as one of the digits).  Since the umask's bits are
flipped, it represents disabled permissions bits.  The permission (or
"mode") values you supply to <tt class="literal">mkdir</tt> or <tt class="literal">sysopen</tt> are modified by
your umask, so even if you tell <tt class="literal">sysopen</tt> to create a file with
permissions <tt class="literal">0777</tt>, if your umask is <tt class="literal">0022</tt>, the file is created with
permissions <tt class="literal">0755</tt>.  If your <tt class="literal">umask</tt> were <tt class="literal">0027</tt> (group can't write;
others can't read, write, or execute), then passing <tt class="literal">sysopen</tt> a
<em class="replaceable">MASK</em> of <tt class="literal">0666</tt> would create a file with mode <tt class="literal">0640</tt> (since <tt class="literal">0666 &amp; ~0027</tt> is <tt class="literal">0640</tt>).</p>

<p>Here's some advice: supply a creation mode of <tt class="literal">0666</tt> for regular
files (in <tt class="literal">sysopen</tt>) and one of <tt class="literal">0777</tt> both for directories (in
<tt class="literal">mkdir</tt>) and for executable files.  This gives users the freedom of
choice: if they want protected files, they choose process umasks
of <tt class="literal">022</tt>, <tt class="literal">027</tt>, or even the particularly antisocial mask of
<tt class="literal">077</tt>.  Programs should rarely if ever make policy decisions better
left to the user.  The exception to this rule is programs that write files that
should be kept private: mail files, web browser cookies, <em class="emphasis">.rhosts</em>
files, and so on.</p>

<p>If <em class="emphasis">umask</em>(2) is not implemented on your system and you are trying
to restrict your <em class="emphasis">own</em> access (that is, if 
<em class="replaceable">EXPR</em><tt class="literal">&amp; 0700) &gt; 0</tt>),
you'll trigger a run-time exception.  If <em class="emphasis">umask</em>(2) is not
implemented and you are not trying to restrict your own access, the
function simply returns <tt class="literal">undef</tt>.</p>






<h3 class="sect2">29.2.187. undef&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xro.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">undef <em class="replaceable">EXPR</em>
undef</pre>
</blockquote>
<a name="INDEX-5362"></a><a name="INDEX-5363"></a><tt class="literal">undef</tt> is the name by which we refer to the abstraction known as "the
undefined value".  It also conveniently happens to be the name of a
function that always returns the undefined value.  We happily confuse the
two.</p>

<p>Coincidentally, the <tt class="literal">undef</tt> function can also explicitly undefine an
entity if you supply its name as an argument.  The <em class="replaceable">EXPR</em> argument, if
specified, must be an lvalue.  Hence you may only use this on a scalar
value, an entire array or hash, a subroutine name (using the <tt class="literal">&amp;</tt>
prefix), or a typeglob.  Any storage associated with the object will be
recovered for reuse (though not returned to the system, for most
operating systems).  The <tt class="literal">undef</tt> function will probably not do what
you expect on most special variables.  Using it on a read-only variable
like <tt class="literal">$1</tt> raises an exception.</p>

<p>The <tt class="literal">undef</tt> function is a unary operator, not a list operator, so you
can only undefine one thing at a time.  Here are some uses of <tt class="literal">undef</tt>
as a unary operator:
<blockquote>
<pre class="programlisting">undef $foo;
undef $bar{'blurfl'};   # Different from delete $bar{'blurfl'};
undef @ary;
undef %hash;
undef &amp;mysub;
undef *xyz;             # destroys $xyz, @xyz, %xyz, &amp;xyz, etc.</pre>
</blockquote>
Without an argument, <tt class="literal">undef</tt> is just used for its value:
<blockquote>
<pre class="programlisting">select(undef, undef, undef, $naptime);

return (wantarray ? () : undef) if $they_blew_it;
return if $they_blew_it;  # same thing</pre>
</blockquote>

You may use <tt class="literal">undef</tt> as a placeholder on the left side of a list
assignment, in which case the corresponding value from the right
side is simply discarded.  Apart from that, you may not use <tt class="literal">undef</tt>
as an lvalue.
<blockquote>
<pre class="programlisting">($a, $b, undef, $c) = &amp;foo;       # Ignore third value returned</pre>
</blockquote>

Also, do not try to compare anything to <tt class="literal">undef</tt>--it doesn't do what
you think.  All it does is compare against <tt class="literal">0</tt> or the null string.
Use the <tt class="literal">defined</tt> function to determine if a value is defined.</p>






<h3 class="sect2">29.2.188. unlink&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarunderscore.gif"> <img src="figs/dollarbang.gif"> <img src="figs/xt.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">unlink <em class="replaceable">LIST</em>
unlink</pre>
</blockquote>
<a name="INDEX-5364"></a><a name="INDEX-5365"></a><a name="INDEX-5366"></a>
This function deletes a list of files.<a href="#FOOTNOTE-19">[19]</a> The function returns the number of filenames
successfully deleted.  Some sample examples:
<blockquote>
<pre class="programlisting">$count = unlink 'a', 'b', 'c';
unlink @goners;
unlink glob("*.orig");</pre>
</blockquote>
<a name="INDEX-5367"></a><a name="INDEX-5368"></a>
The <tt class="literal">unlink</tt> function will not delete directories unless you are superuser
and the supply <tt class="userinput"><b>-U</b></tt> command-line option to Perl.  Even if
these conditions are met, be warned that unlinking a directory can
inflict Serious Damage on your filesystem.  Use <tt class="literal">rmdir</tt> instead.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-19"></a>
<p>[19] Actually, under a
POSIX filesystem, it removes the directory entries (filenames) that refer to the
real files.  Since a file may be referenced (linked) from more than
one directory, the file isn't removed until the last reference to it
is removed.</p>

</blockquote>

<p>Here's a simple <em class="emphasis">rm</em> command with very simple error checking:
<blockquote>
<pre class="programlisting">#!/usr/bin/perl
@cannot = grep {not unlink} @ARGV;
die "$0: could not unlink @cannot\n" if @cannot;</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.189. unpack&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarat.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">unpack <em class="replaceable">TEMPLATE</em>, <em class="replaceable">EXPR</em>
</pre>
</blockquote>
<a name="INDEX-5369"></a><a name="INDEX-5370"></a><a name="INDEX-5371"></a>
This function does the reverse of <tt class="literal">pack</tt>: it expands
a string (<em class="replaceable">EXPR</em>) representing a data
structure into a list of values according to the
<em class="replaceable">TEMPLATE</em> and returns those values.  In
scalar context, it can be used to unpack a single value.  The
<em class="replaceable">TEMPLATE</em> here has much the same format as
it has in the <tt class="literal">pack</tt> function--it specifies the order
and type of the values to be unpacked.  See <tt class="literal">pack</tt>
for a detailed description of <em class="replaceable">TEMPLATE</em>.  An
invalid element in the <em class="replaceable">TEMPLATE</em>, or an
attempt to move outside the string with the <tt class="literal">x</tt>,
<tt class="literal">X</tt>, or <tt class="literal">@</tt> formats, raises an
exception.</p>

<p>The string is broken into chunks described by the <em class="replaceable">TEMPLATE</em>.  Each
chunk is converted separately to a value.  Typically, the bytes of
the string either are the result of a <tt class="literal">pack</tt>, or represent a
C structure of some kind.</p>

<p>If the repeat count of a field is larger than the remainder of the
input string allows, the repeat count is silently decreased.
(Normally, you'd use a repeat count of <tt class="literal">*</tt> here, anyway.)  If the
input string is longer than what <em class="replaceable">TEMPLATE</em> describes, the rest
of the string is ignored.</p>

<p>The <tt class="literal">unpack</tt> function is also useful for plain text data, too,
not just binary data.  Imagine that you had a data file that contained
records that looked like this:
<blockquote>
<pre class="programlisting">1986 Ender's Game           Orson Scott Card
1985 Neuromancer            William Gibson
1984 Startide Rising        David Brin
1983 Foundation's Edge      Isaac Asimov
1982 Downbelow Station      C. J. Cherryh
1981 The Snow Queen         Joan D. Vinge</pre>
</blockquote>

you can't use <tt class="literal">split</tt> to parse out the fields because they have no
distinct separator. Instead, fields are determined
by their byte-offset into the record.  So even though this is a
regular text record, because it's in a fixed format, you
want to use <tt class="literal">unpack</tt> to pull it apart:
<blockquote>
<pre class="programlisting">while (&lt;&gt;) {
        ($year, $title, $author) = unpack("A4 x A23 A*", $_);
        print "$author won ${year}'s Hugo for $title.\n";
}</pre>
</blockquote>

(The reason we wrote <tt class="literal">${year}'s</tt> there is because Perl would have
treated <tt class="literal">$year's</tt> as meaning <tt class="literal">$year::s</tt>.)</p>

<p>Here's a complete <em class="emphasis">uudecode</em> program:
<blockquote>
<pre class="programlisting">#!/usr/bin/perl
$_ = &lt;&gt; until ($mode,$file) = /^begin\s*(\d*)\s*(\S*)/;
open(OUT,"&gt; $file") if $file ne "";
while (&lt;&gt;) {
    last if /^end/;
    next if /[a-z]/;
    next unless int((((ord() - 32) &amp; 077) + 2) / 3) ==
                int(length() / 4);
    print OUT unpack "u", $_;
}
chmod oct($mode), $file;</pre>
</blockquote>
<a name="INDEX-5372"></a><a name="INDEX-5373"></a><a name="INDEX-5374"></a>
In addition to fields allowed in <tt class="literal">pack</tt>, you may prefix a field
with <em class="replaceable">%number</em> to produce a simple <em class="replaceable">number</em>-bit additive checksum
of the items instead of the items themselves.  Default is a 16-bit
checksum.  The checksum is calculated by summing numeric values of
expanded values (for string fields, the sum of <tt class="literal">ord($char)</tt> is
taken, and for bit fields, the sum of zeros and ones).  For example,
the following computes the same number as the SysV <em class="emphasis">sum</em>(1) program:
<blockquote>
<pre class="programlisting">undef $/;
$checksum = unpack ("%32C*", &lt;&gt;) % 65535;</pre>
</blockquote>

The following efficiently counts the number of set bits in a bitstring:
<blockquote>
<pre class="programlisting">$setbits = unpack "%32b*", $selectmask;</pre>
</blockquote>

Here's a simple BASE64 decoder:
<blockquote>
<pre class="programlisting">while (&lt;&gt;) {
    tr#A-Za-z0-9+/##cd;                   # remove non-base64 chars
    tr#A-Za-z0-9+/# -_#;                  # convert to uuencoded format
    $len = pack("c", 32 + 0.75*length);   # compute length byte
    print unpack("u", $len . $_);         # uudecode and print
}</pre>
</blockquote>
</p>






<h3 class="sect2">29.2.190. unshift&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">unshift <em class="replaceable">ARRAY</em>, <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-5375"></a><a name="INDEX-5376"></a><a name="INDEX-5377"></a><a name="INDEX-5378"></a>
This function does the opposite of <tt class="literal">shift</tt>. (Or the opposite of
<tt class="literal">push</tt>, depending on how you look at it.)  It prepends <em class="replaceable">LIST</em> to the
front of the array, and returns the new number of elements in the array:
<blockquote>
<pre class="programlisting">unshift @ARGV, '-e', $cmd unless $ARGV[0] =~ /^-/;</pre>
</blockquote>

Note the <em class="replaceable">LIST</em> is prepended whole, not one element at a time, so the
prepended elements stay in the same order.  Use <tt class="literal">reverse</tt> to do the
reverse.</p>






<h3 class="sect2">29.2.191. untie&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">untie <em class="replaceable">VARIABLE</em>
</pre>
</blockquote>
<a name="INDEX-5379"></a><a name="INDEX-5380"></a><a name="INDEX-5381"></a><a name="INDEX-5382"></a><a name="INDEX-5383"></a>
Breaks the binding between the variable or typeglob contained in
<em class="replaceable">VARIABLE</em> and the package that it's tied to.
See <tt class="literal">tie</tt>, and all of <a href="ch14_01.htm">Chapter 14, "Tied Variables"</a>, but especially the section "A
Subtle Untying Trap".</p>






<h3 class="sect2">29.2.192. use&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/dollarat.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">use <em class="replaceable">MODULE</em> <em class="replaceable">VERSION</em> <em class="replaceable">LIST</em>
use <em class="replaceable">MODULE</em> <em class="replaceable">VERSION</em> ()
use <em class="replaceable">MODULE</em> <em class="replaceable">VERSION</em>
use <em class="replaceable">MODULE</em> <em class="replaceable">LIST</em>
use <em class="replaceable">MODULE</em> ()
use <em class="replaceable">MODULE</em>
use <em class="replaceable">VERSION</em>
</pre>
</blockquote>
<a name="INDEX-5384"></a><a name="INDEX-5385"></a><a name="INDEX-5386"></a><a name="INDEX-5387"></a>
The <tt class="literal">use</tt> declaration loads in a module, if it hasn't been loaded
before, and imports subroutines and variables into the current
package from the named module.  (Technically speaking, it imports
some semantics into the current package from the named module,
generally by aliasing certain subroutine or variable names into
your package.)  Most <tt class="literal">use</tt> declarations looks like this:
<blockquote>
<pre class="programlisting">use <em class="replaceable">MODULE</em> <em class="replaceable">LIST</em>;</pre>
</blockquote>

That is exactly equivalent to saying:
<blockquote>
<pre class="programlisting">BEGIN { require <em class="replaceable">MODULE</em>; import <em class="replaceable">MODULE</em> <em class="replaceable">LIST</em>; }</pre>
</blockquote>

The <tt class="literal">BEGIN</tt> forces the <tt class="literal">require</tt> and <tt class="literal">import</tt> to happen at compile
time.  The <tt class="literal">require</tt> makes sure the module is loaded into memory
if it hasn't been yet.  The <tt class="literal">import</tt> is not a built-in--it's just
an ordinary class method call into the package named by <em class="replaceable">MODULE</em>
to tell that module to pull the list of features back into the
current package.  The module can implement its import method any
way it likes, though most modules just choose to derive their import
method via inheritance from the Exporter class that is defined in
the <tt class="literal">Exporter</tt> module.  See <a href="ch11_01.htm">Chapter 11, "Modules"</a>,
and the <tt class="literal">Exporter</tt> module for more information.
If no <tt class="literal">import</tt> method can be found, then the call is skipped without murmur.</p>

<p>If you don't want your namespace altered, explicitly supply an empty
list:
<blockquote>
<pre class="programlisting">use <em class="replaceable">MODULE</em> ();</pre>
</blockquote>

That is exactly equivalent to the following:
<blockquote>
<pre class="programlisting">BEGIN { require <em class="replaceable">MODULE</em>; }</pre>
</blockquote>

If the first argument to <tt class="literal">use</tt> is a version number like 5.6.2, the
currently executing version of Perl must be at least as modern as the
version specified.  If the current version of Perl is less than
<em class="replaceable">VERSION</em>, an error message is printed and Perl exits immediately.
This is useful for checking the current Perl version before loading
library modules that depend on newer versions, since occasionally we
have to "break" the misfeatures of older versions of Perl.  (We try not
to break things any more than we have to.  In fact, we often try to
break things less than we have to.)</p>

<p>Speaking of not breaking things, Perl still accepts old version
numbers of the form:
<blockquote>
<pre class="programlisting">use 5.005_03;</pre>
</blockquote>

However, in order to align better with industry standards, Perl
5.6 now accepts, (and we prefer to see) the three-tuple form:
<blockquote>
<pre class="programlisting">use 5.6.0;   # That's version 5, subversion 6, patchlevel 0.</pre>
</blockquote>

If the <em class="replaceable">VERSION</em> argument is present after
<em class="replaceable">MODULE</em>, then the <tt class="literal">use</tt>
will call the <tt class="literal">VERSION</tt> method in class
<em class="replaceable">MODULE</em> with the given
<em class="replaceable">VERSION</em> as an argument.  Note that there is
no comma after <em class="replaceable">VERSION</em>!  The
default <tt class="literal">VERSION</tt> method, which is inherited from the
<tt class="literal">UNIVERSAL</tt> class, croaks if the given version is
larger than the value of the variable
<tt class="literal">$Module::VERSION</tt>.</p>

<p>See <a href="ch32_01.htm">Chapter 32, "Standard Modules"</a> for a list of standard modules.</p>

<p>Because <tt class="literal">use</tt> provides a wide-open interface, pragmas (compiler
directives) are also implemented via modules.  Examples of currently
implemented pragmas include:
<blockquote>
<pre class="programlisting">use autouse 'Carp' =&gt; qw(carp croak);
use bytes;
use constant PI =&gt; 4 * atan2(1,1);
use diagnostics;
use integer;
use lib '/opt/projects/spectre/lib';
use locale;
use sigtrap qw(die INT QUIT);
use strict  qw(subs vars refs);
use warnings "deprecated";</pre>
</blockquote>

Many of these pragmatic modules import semantics into the current
lexical scope.  (This is unlike ordinary modules, which only import
symbols into the current package, which has little relation to the
current lexical scope other than that the lexical scope is being
compiled with that package in mind.  That is to say...oh, never mind,
see <a href="ch11_01.htm">Chapter 11, "Modules"</a>.)</p>

<p>There's a corresponding declaration, <tt class="literal">no</tt>, that "unimports" any
meanings originally imported by <tt class="literal">use</tt> that have since become, er,
unimportant:
<blockquote>
<pre class="programlisting">no integer;
no strict 'refs';
no utf8;
no warnings "unsafe";</pre>
</blockquote>

See <a href="ch31_01.htm">Chapter 31, "Pragmatic Modules"</a> for a list of standard pragmas.</p>






<h3 class="sect2">29.2.193. utime&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/xt.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">utime <em class="replaceable">LIST</em>
</pre>
</blockquote>
<a name="INDEX-5388"></a><a name="INDEX-5389"></a><a name="INDEX-5390"></a><a name="INDEX-5391"></a><a name="INDEX-5392"></a>
This function changes the access and modification times on each
file of a list of files. The first two elements of the list must
be the <em class="emphasis">numerical</em> access and modification times, in that order.
The function returns the number of files successfully changed. The
inode change time of each file is set to the current time. Here's
an example of a <em class="emphasis">touch</em> command that sets the modification date of the file
(assuming you're the owner) to about a month in the future:
<blockquote>
<pre class="programlisting">#!/usr/bin/perl
# montouch - post-date files now + 1 month
$day = 24 * 60 * 60;            # 24 hours of seconds
$later = time() + 30 * $day;    # 30 days is about a month
utime $later, $later, @ARGV;</pre>
</blockquote>

and here's a more sophisticated <em class="emphasis">touch</em>-like command with a
smattering of error checking:
<blockquote>
<pre class="programlisting">#!/usr/bin/perl
# montouch - post-date files now + 1 month
$later = time() + 30 * 24 * 60 * 60;
@cannot = grep {not utime $later, $later, $_} @ARGV;
die "$0: Could not touch @cannot.\n" if @cannot;</pre>
</blockquote>

To read the times from existing files, use <tt class="literal">stat</tt> and then pass
the appropriate fields through <tt class="literal">localtime</tt> or <tt class="literal">gmtime</tt> for printing.</p>






<h3 class="sect2">29.2.194. values&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">values <em class="replaceable">HASH</em>
</pre>
</blockquote>
<a name="INDEX-5393"></a><a name="INDEX-5394"></a>
This function returns a list consisting of all the values in the
indicated <em class="replaceable">HASH</em>. The values are returned in an apparently random
order, but it is the same order as either the <tt class="literal">keys</tt> or <tt class="literal">each</tt>
function would produce on the same hash.  Oddly, to sort a hash by its
values, you usually need to use the <tt class="literal">keys</tt> function, so see the
example under <tt class="literal">keys</tt> for that.</p>

<p>You can modify the values of a hash using this function because the
returned list contains aliases of the values, not just copies.
(In earlier versions, you needed to use a hash slice for that.)
<blockquote>
<pre class="programlisting">for (@hash{keys %hash}) { s/foo/bar/g }   # old way
for (values %hash)      { s/foo/bar/g }   # now changes values</pre>
</blockquote>

Using <tt class="literal">values</tt> on a hash that is bound to a humongous DBM file is
bound to produce a humongous list, causing you to have a humongous
process. You might prefer to use the <tt class="literal">each</tt>
function, which will iterate over the hash entries one by one without
slurping them all into a single gargantuan, er, humongous list.</p>






<h3 class="sect2">29.2.195. vec&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xro.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">vec <em class="replaceable">EXPR</em>, <em class="replaceable">OFFSET</em>, <em class="replaceable">BITS</em>
</pre>
</blockquote>
<a name="INDEX-5395"></a><a name="INDEX-5396"></a><a name="INDEX-5397"></a><a name="INDEX-5398"></a><a name="INDEX-5399"></a>
The <tt class="literal">vec</tt> function provides compact storage of lists of unsigned
integers.  These integers are packed as tightly as possible within an
ordinary Perl string.  The string in <em class="replaceable">EXPR</em> is treated as a bit string
made up of some arbitrary number of elements depending on the length of
the string.</p>

<p>
<em class="replaceable">OFFSET</em> specifies the index of the particular element you're
interested in.  The syntaxes for reading and writing the element are the
same, since <tt class="literal">vec</tt> stores or returns the value of the element depending
on whether you use it in an lvalue or an rvalue context.</p>

<p>
<em class="replaceable">BITS</em> specifies how wide each element is in bits, which must be a
power of two: <tt class="literal">1</tt>, <tt class="literal">2</tt>, <tt class="literal">4</tt>, <tt class="literal">8</tt>, <tt class="literal">16</tt>, or <tt class="literal">32</tt> (and also <tt class="literal">64</tt>
on some platforms).  (An exception is raised if any other value is
used.)  Each element can therefore contain an integer in the range
<tt class="literal">0..(2**</tt><em class="replaceable">BITS</em><tt class="literal">)-1</tt>.  For the smaller sizes, as many elements as
possible are packed into each byte. When <em class="replaceable">BITS</em> is <tt class="literal">1</tt>, there are eight
elements per byte.  When <em class="replaceable">BITS</em> is <tt class="literal">2</tt>, there are four elements per
byte.  When <em class="replaceable">BITS</em> is <tt class="literal">4</tt>, there are two elements (traditionally called
nybbles) per byte.  And so on.  Integers larger than a byte are stored
in big-endian order.</p>

<p>A list of unsigned integers can be stored in a single scalar
variable by assigning them individually to the <tt class="literal">vec</tt> function.
(If <em class="replaceable">EXPR</em> is not a valid lvalue, an exception is raised.)
In the following example, the elements are each 4 bits wide:
<blockquote>
<pre class="programlisting">$bitstring = "";
$offset = 0;

foreach $num (0, 5, 5, 6, 2, 7, 12, 6) {
    vec($bitstring, $offset++, 4) = $num;
}</pre>
</blockquote>

If an element off the end of the string is written to,
Perl will first extend the string with sufficiently many zero bytes.</p>

<p>The vectors stored in the scalar variable can be subsequently
retrieved by specifying the correct <em class="replaceable">OFFSET</em>.
<blockquote>
<pre class="programlisting">$num_elements = length($bitstring)*2;  # 2 elements per byte

foreach $offset (0 .. $num_elements-1) {
    print vec($bitstring, $offset, 4), "\n";
}</pre>
</blockquote>

If the selected element is off the end of the string, a value of <tt class="literal">0</tt> is
returned.</p>

<p>Strings created with <tt class="literal">vec</tt> can also be manipulated
with the logical operators <tt class="literal">|</tt>,
<tt class="literal">&amp;</tt>, <tt class="literal">^</tt>, and
<tt class="literal">~</tt>.  These operators will assume that a bit string
operation is desired when both operands are strings.  See the examples
of this in <a href="ch03_01.htm">Chapter 3, "Unary and Binary Operators"</a>, in
the section "Bitwise Operators".</p>

<p>If <em class="replaceable">BITS</em><tt class="literal"> == 1</tt>, a bitstring can be created to store
a series of bits all in one scalar.  The ordering is such that
<tt class="literal">vec($bitstring,0,1)</tt> is guaranteed to go into the lowest bit of
the first byte of the string.
<blockquote>
<pre class="programlisting">@bits = (0,0,1,0, 1,0,1,0, 1,1,0,0, 0,0,1,0);

$bitstring = "";
$offset = 0;

foreach $bit (@bits) {
    vec($bitstring, $offset++, 1) = $bit;
}

print "$bitstring\n";        # "TC", ie. '0x54', '0x43'</pre>
</blockquote>

A bit string can be translated to or from a string of
<tt class="literal">1</tt>'s and <tt class="literal">0</tt>'s by supplying a
"<tt class="literal">b*</tt>" template to <tt class="literal">pack</tt> or
<tt class="literal">unpack</tt>.  Alternatively, <tt class="literal">pack</tt> can
be used with a "<tt class="literal">b*</tt>" template to create the bit
string from a string of <tt class="literal">1</tt>'s and
<tt class="literal">0</tt>'s.  The ordering is compatible with that expected
by <tt class="literal">vec</tt>.
<blockquote>
<pre class="programlisting">$bitstring = pack "b*", join('', @bits);
print "$bitstring\n";   # "TC", same as before</pre>
</blockquote>
<tt class="literal">unpack</tt> can be used to extract the list of <tt class="literal">0</tt>'s and <tt class="literal">1</tt>'s from
the bit string.
<blockquote>
<pre class="programlisting">@bits = split(//, unpack("b*", $bitstring));
print "@bits\n";        # 0 0 1 0 1 0 1 0 1 1 0 0 0 0 1 0</pre>
</blockquote>

If you know the exact length in bits, it can be used in place of the "<tt class="literal">*</tt>".</p>

<p>See <tt class="literal">select</tt> for additional examples of using bitmaps generated
with <tt class="literal">vec</tt>.  See <tt class="literal">pack</tt> and <tt class="literal">unpack</tt> for higher-level manipulation
of binary data.</p>






<h3 class="sect2">29.2.196. wait&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/dollarquestion.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">wait</pre>
</blockquote>
<a name="INDEX-5400"></a><a name="INDEX-5401"></a><a name="INDEX-5402"></a>
This function waits for a child process to terminate and returns
the PID of the deceased process, or <tt class="literal">-1</tt> if there are no child processes
(or on some systems, if child processes are being automatically
reaped). The status is returned in <tt class="literal">$?</tt> as described under <tt class="literal">system</tt>.
If you get zombie child processes, you should be calling this
function, or <tt class="literal">waitpid</tt>.</p>

<p>If you expected a child and didn't find it with
<tt class="literal">wait</tt>, you probably had a call to
<tt class="literal">system</tt>, a close on a pipe, or backticks between the
<tt class="literal">fork</tt> and the <tt class="literal">wait</tt>.  These
constructs also do a <em class="emphasis">wait</em>(2) and may have
harvested your child process.  Use <tt class="literal">waitpid</tt> to avoid
this problem.</p>






<h3 class="sect2">29.2.197. waitpid&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/dollarquestion.gif"> <img src="figs/xu.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">waitpid <em class="replaceable">PID</em>, <em class="replaceable">FLAGS</em>
</pre>
</blockquote>
<a name="INDEX-5403"></a><a name="INDEX-5404"></a>
This function waits for a particular child process to terminate and
returns the PID when the process is dead, <tt class="literal">-1</tt> if
there are no child processes, or <tt class="literal">0</tt> if the
<em class="replaceable">FLAGS</em> specify nonblocking and the process
isn't dead yet.  The status of the dead process is returned in
<tt class="literal">$?</tt> as described under <tt class="literal">system</tt>.
To get valid flag values, you'll need to import the
<tt class="literal">":sys_wait_h"</tt> import tag group from the
<tt class="literal">POSIX</tt> module.  Here's an example that does a
nonblocking wait for all pending zombie processes.
<blockquote>
<pre class="programlisting">use POSIX ":sys_wait_h";
do {
    $kid = waitpid(-1,&amp;WNOHANG);
} until $kid == -1;</pre>
</blockquote>

On systems that implement neither the <em class="emphasis">waitpid</em>(2) nor <em class="emphasis">wait4</em>(2)
syscall, <em class="replaceable">FLAGS</em> may be specified only as <tt class="literal">0</tt>.  In other words, you
can wait for a specific <em class="replaceable">PID</em> there, but you can't do so in nonblocking
mode.</p>

<p>On some systems, a return value of <tt class="literal">-1</tt> could mean that child processes
are being automatically reaped because you set <tt class="literal">$SIG{CHLD} = 'IGNORE'</tt>.</p>






<h3 class="sect2">29.2.198. wantarray&nbsp;&nbsp;&nbsp;&nbsp;</h3>

<p>
<blockquote>
<pre class="programlisting">wantarray</pre>
</blockquote>
<a name="INDEX-5405"></a><a name="INDEX-5406"></a><a name="INDEX-5407"></a>
This function returns true if the context of the currently executing
subroutine is looking for a list value, and false otherwise.  The
function returns a defined false value (<tt class="literal">""</tt>) if the calling context
is looking for a scalar, and the undefined false value (<tt class="literal">undef</tt>) if
the calling context isn't looking for anything; that is, if it's in
void context.</p>

<p>Here's are examples of typical usage:
<blockquote>
<pre class="programlisting">return unless defined wantarray;    # don't bother doing more
my @a = complex_calculation();
return wantarray ? @a : \@a;</pre>
</blockquote>

See also <tt class="literal">caller</tt>.  This function should really have been named
"<tt class="literal">wantlist</tt>", but we named it back when list contexts were still called
array contexts.</p>






<h3 class="sect2">29.2.199. warn&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">warn <em class="replaceable">LIST</em>
warn</pre>
</blockquote>
<a name="INDEX-5408"></a><a name="INDEX-5409"></a><a name="INDEX-5410"></a>
This function produces an error message, printing <em class="replaceable">LIST</em> to <tt class="literal">STDERR</tt>
just like <tt class="literal">die</tt>, but doesn't try to exit or throw an exception.
For example:
<blockquote>
<pre class="programlisting">warn "Debug enabled" if $debug;</pre>
</blockquote>

If <em class="replaceable">LIST</em> is empty and <tt class="literal">$@</tt> already contains a value (typically from
a previous <tt class="literal">eval</tt>), the string "<tt class="literal">\t...caught</tt>" is appended following
<tt class="literal">$@</tt> on <tt class="literal">STDERR</tt>.  (This is similar to the way <tt class="literal">die</tt> propagates
errors, except that <tt class="literal">warn</tt> doesn't propagate (reraise) the exception.) If the message string
supplied is empty, the message "<tt class="literal">Warning: Something's wrong</tt>" is
used.</p>

<p>As with <tt class="literal">die</tt>, if the strings supplied don't end in a newline,
file and line number information is automatically appended.  The
<tt class="literal">warn</tt> function is unrelated to Perl's <tt class="literal">-w</tt> command-line option,
but can be used in conjunction with it, such as when you wish to
emulate built-ins:
<blockquote>
<pre class="programlisting">warn "Something wicked\n" if $^W;</pre>
</blockquote>

No message is printed if there is a <tt class="literal">$SIG{__WARN__}</tt> handler
installed.  It is the handler's responsibility to deal with the
message as it sees fit.  One thing you might want to do is promote
a mere warning into an exception:
<blockquote>
<pre class="programlisting">local $SIG{__WARN__} = sub {
    my $msg = shift;
    die $msg if $msg =~ /isn't numeric/;
};</pre>
</blockquote>

Most handlers must therefore make arrangements to display
the warnings that they are not prepared to deal with, by calling
<tt class="literal">warn</tt> again in the handler.  This is perfectly safe; it won't produce
an endless loop because <tt class="literal">__WARN__</tt> hooks are not called from inside
<tt class="literal">__WARN__</tt> hooks.  This behavior differs slightly from that of
<tt class="literal">$SIG{__DIE__}</tt> handlers (which don't suppress the error text, but
can instead call <tt class="literal">die</tt> again to change it).</p>

<p>Using a <tt class="literal">__WARN__</tt> handler provides a powerful way to silence all
warnings, even the so-called mandatory ones.  Sometimes
you need to wrap this in a <tt class="literal">BEGIN{}</tt> block so that it
can happen at compile time:
<blockquote>
<pre class="programlisting"># wipe out *all* compile-time warnings
BEGIN { $SIG{__WARN__} = sub { warn $_[0] if $DOWARN } }
my $foo = 10;
my $foo = 20;          # no warning about duplicate my $foo,
                       # but hey, you asked for it!

# no compile-time or run-time warnings before here
$DOWARN = 1;           # *not* a built-in variable

# run-time warnings enabled after here
warn "\$foo is alive and $foo!";     # does show up</pre>
</blockquote>

See the <tt class="literal">use warnings</tt> pragma for lexically scoped
control of warnings.  See the <tt class="literal">Carp</tt> module's
<tt class="literal">carp</tt> and <tt class="literal">cluck</tt> functions for
other ways to produce warning messages.</p>






<h3 class="sect2">29.2.200. write&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/dollarbang.gif"> <img src="figs/dollarat.gif"> <img src="figs/xarg.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">write <em class="replaceable">FILEHANDLE</em>
write</pre>
</blockquote>
<a name="INDEX-5411"></a><a name="INDEX-5412"></a>
This function writes a formatted record (possibly multiline) to the
specified filehandle, using the format associated with that
filehandle--see the section "Format Variables" in <a href="ch07_01.htm">Chapter 7, "Formats"</a>.  By default the format associated
with a filehandle is the one having the same name as the filehandle.
However, the format for a filehandle may be changed by altering the
<tt class="literal">$~</tt> variable after you <tt class="literal">select</tt>
that handle:
<blockquote>
<pre class="programlisting">$old_fh = select(HANDLE);
$~ = "NEWNAME";
select($old_fh);</pre>
</blockquote>

or by saying:
<blockquote>
<pre class="programlisting">use IO::Handle;
HANDLE-&gt;format_name("NEWNAME");</pre>
</blockquote>

Since formats are put into a package namespace, you may have
to fully qualify the format name if the <tt class="literal">format</tt>
was declared in a different package:
<blockquote>
<pre class="programlisting">$~ = "OtherPack::NEWNAME";</pre>
</blockquote>
<a name="INDEX-5413"></a>
Top-of-form processing is handled automatically: if there is
insufficient room on the current page for the formatted record, the
page is advanced by writing a form feed, a special top-of-page format
is used for the new page header, and then the record is written.  The
number of lines remaining on the current page is in the variable
<tt class="literal">$-</tt>, which can be set to 0 to force a new page on
the next <tt class="literal">write</tt>.  (You may need to
<tt class="literal">select</tt> the filehandle first.)  By default, the name
of the top-of-page format is the name of the filehandle with
"<tt class="literal">_TOP</tt>" appended, but the format for a filehandle
may be changed altering the <tt class="literal">$^</tt> variable after
<tt class="literal">select</tt>ing that handle, or by saying:
<blockquote>
<pre class="programlisting">use IO::Handle;
HANDLE-&gt;format_top_name("NEWNAME_TOP");</pre>
</blockquote>

If <em class="replaceable">FILEHANDLE</em> is unspecified, output goes to the current default
output filehandle, which starts out as <tt class="literal">STDOUT</tt>, but may be changed
by the single-argument form of the <tt class="literal">select</tt> operator. If the
<em class="replaceable">FILEHANDLE</em> is an expression, then the expression is evaluated
to determine the actual <em class="replaceable">FILEHANDLE</em> at run time.</p>

<p>If a specified <tt class="literal">format</tt> or the current top-of-page <tt class="literal">format</tt> does
not exist, an exception is raised.</p>

<p>The <tt class="literal">write</tt> function is <em class="emphasis">not</em> the opposite of <tt class="literal">read</tt>.  Unfortunately.
Use <tt class="literal">print</tt> for simple string output.  If you looked up this entry
because you wanted to bypass standard I/O, see <tt class="literal">syswrite</tt>.</p>






<h3 class="sect2">29.2.201. y//&nbsp;&nbsp;&nbsp;&nbsp; <img src="figs/xro.gif"></h3>

<p>
<blockquote>
<pre class="programlisting">y///</pre>
</blockquote>
<a name="INDEX-5414"></a><a name="INDEX-5415"></a><a name="INDEX-5416"></a>
The transliteration (historically, also called translation) operator,
also known as <tt class="literal">tr///</tt>. See <a href="ch05_01.htm">Chapter 5, "Pattern Matching"</a>.</p>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch29_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch30_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">29.1. Perl Functions by Category</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">30. The Standard Perl Library</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
