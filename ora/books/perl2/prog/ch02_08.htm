<html>
<head>
<title>List Values and Arrays (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="List Values and Arrays">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm">Chapter 2: Bits and Pieces</a></td><td align="right" valign="top" width="172"><a href="ch02_09.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">2.8. List Values and Arrays</h2>

<a name="INDEX-672"></a><a name="INDEX-673"></a><a name="INDEX-674"></a><a name="INDEX-675"></a><a name="INDEX-676"></a><a name="INDEX-677"></a>
<p>Now that we've talked about context, we can talk about list literals
and how they behave in context.  You've already seen some list
literals.  List literals are denoted by separating individual values by
commas (and enclosing the list in parentheses where precedence requires
it).  Because it (almost) never hurts to use extra parentheses, the
syntax diagram of a list value is usually indicated like this:
<blockquote>
<pre class="programlisting">(<em class="replaceable">LIST</em>)</pre>
</blockquote>

Earlier we said that <em class="replaceable">LIST</em> in a syntax
description indicates something that supplies list context to its
arguments, but a bare list literal itself is the one partial exception
to that rule, in that it supplies a list context to its arguments only
when the list as a whole is in list context.  The value of a list
literal in list context is just the values of the arguments in the
order specified.  As a fancy sort of term in an expression, a list
literal merely pushes a series of temporary values onto Perl's stack,
to be collected off the stack later by whatever operator wants the
list.
<a name="INDEX-678"></a>
</p>

<p>In a scalar context, however, the list literal doesn't really behave
like a <em class="replaceable">LIST</em>, in that it doesn't supply list context to its values.
Instead, it merely evaluates each of its arguments in scalar context,
and returns the value of the final element.  That's because it's
really just the C comma operator in disguise, which is a binary operator
that always throws away the value on the left and returns the value
on the right.  In terms of what we discussed earlier, the left side
of the comma operator really provides a void context.  Because the
comma operator is left associative, if you have a series of
comma-separated values, you always end up with the last value
because the final comma throws away whatever any previous commas
produced.  So, to contrast the two, the list assignment:
<blockquote>
<pre class="programlisting">@stuff = ("one", "two", "three");</pre>
</blockquote>

assigns the entire list value to array <tt class="literal">@stuff</tt>, but the scalar
assignment:
<blockquote>
<pre class="programlisting">$stuff = ("one", "two", "three");</pre>
</blockquote>

assigns only the value "<tt class="literal">three</tt>" to variable
<tt class="literal">$stuff</tt>.  Like the <tt class="literal">@files</tt> array
we mentioned earlier the comma operator knows whether it is in a
scalar or list context, and chooses its behavior accordingly.</p>

<p>
<a name="INDEX-679"></a><a name="INDEX-680"></a>
It bears repeating that a list value is different from an array.
A real array variable also knows its context, and in a list context,
it would return its internal list of values just like a list literal.
But in a scalar context it returns only the length of the array.
The following assigns to <tt class="literal">$stuff</tt> the value 3:
<blockquote>
<pre class="programlisting">@stuff = ("one", "two", "three");
$stuff = @stuff;</pre>
</blockquote>

If you expected it to get the value "<tt class="literal">three</tt>", you were probably
making a false generalization by assuming that Perl uses the comma
operator rule to throw away all but one of the temporary values that
<tt class="literal">@stuff</tt> put on the stack.  But that's not how it works.  The
<tt class="literal">@stuff</tt> array never put all its values on the stack.  It never put
any of its values on the stack, in fact.  It only put one value, the
length of the array, because it <em class="emphasis">knew</em> it was in scalar context.  No
term or operator in scalar context will ever put a list on the stack.
Instead, it will put one scalar on the stack, whatever it feels like,
which is unlikely to be the last value of the list it <em class="emphasis">would</em> have
returned in list context, because the last value is not likely to be
the most useful value in scalar context.  Got that?  (If not, you'd
better reread this paragraph, because it's important.)</p>

<p>
<a name="INDEX-681"></a><a name="INDEX-682"></a>
Now back to true <em class="replaceable">LIST</em>s, the ones
that do list context.  Until now we've pretended that list literals
were just lists of literals.  But just as a string literal might
interpolate other substrings, a list literal can interpolate other
sublists.  Any expression that returns values may be used within a
list.  The values so used may be either scalar values or list values,
but they all become part of the new list value because
<em class="replaceable">LIST</em>s do automatic interpolation of
sublists.  That is, when a <em class="replaceable">LIST</em> is
evaluated, each element of the list is evaluated in a list context,
and the resulting list value is interpolated into
<em class="replaceable">LIST</em> just as if each individual element
were a member of <em class="replaceable">LIST</em>.  Thus arrays lose
their identity in a <em class="replaceable">LIST</em>.<a href="#FOOTNOTE-18">[18]</a> The list:
<blockquote>
<pre class="programlisting">(@stuff,@nonsense,funkshun())</pre>
</blockquote>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-18"></a>
<p>[18]Some people seem to think this is a problem, but it's not.  You can
always interpolate a reference to an array if you do not want it to
lose its identity.  See
<a href="ch08_01.htm">Chapter 8, "References"</a>.</p>

</blockquote>

<p>
<a name="INDEX-683"></a><a name="INDEX-684"></a><a name="INDEX-685"></a>
contains the elements of <tt class="literal">@stuff</tt>, followed by the
elements of <tt class="literal">@nonsense</tt>, followed by whatever values
the subroutine <tt class="literal">&amp;funkshun</tt> decides to return when
called in list context.  Note that any or all of these might have
interpolated a null (empty) list, in which case it's as if no array or
function call had been interpolated at that point.  The null list
itself is represented by the literal <tt class="literal">()</tt>.  As with a
null array, which interpolates as a null list and is therefore
effectively ignored, interpolating the null list into another list has
no effect.  Thus, <tt class="literal">((),(),())</tt> is equivalent to
<tt class="literal">()</tt>.</p>

<p>
A corollary to this rule is that you may place an optional comma at the end
of any list value.  This makes it easy to come back later and add more
elements after the last one:
<blockquote>
<pre class="programlisting">@releases = (
    "alpha",
    "beta",
    "gamma",
);</pre>
</blockquote>
<a name="INDEX-686"></a>
</p>

<p>
<a name="INDEX-687"></a><a name="INDEX-688"></a>
Or you can do away with the commas entirely: another way to specify a
literal list is with the <tt class="literal">qw</tt> (quote words) syntax we mentioned earlier.
This construct is equivalent to splitting a single-quoted string on
whitespace.  For example:
<blockquote>
<pre class="programlisting">@froots = qw(
    apple       banana      carambola
    coconut     guava       kumquat
    mandarin    nectarine   peach
    pear        persimmon   plum
);</pre>
</blockquote>

(Note that those parentheses are behaving as quote characters, not
ordinary parentheses.  We could just as easily have picked angle
brackets or braces or slashes.  But parens are pretty.)
<a name="INDEX-689"></a>
</p>

<p>A list value may also be subscripted like a normal array.  You must put
the list in parentheses (real ones) to avoid ambiguity.  Though it's
often used to fetch a single value out of a list, it's really
a slice of the list, so the syntax is:
<blockquote>
<pre class="programlisting">(LIST)[LIST]</pre>
</blockquote>

Examples:
<blockquote>
<pre class="programlisting"># Stat returns list value.
$modification_time = (stat($file))[9];

# SYNTAX ERROR HERE.
$modification_time = stat($file)[9];  # OOPS, FORGOT PARENS

# Find a hex digit.
$hexdigit = ('a','b','c','d','e','f')[$digit-10];

# A "reverse comma operator".
return (pop(@foo),pop(@foo))[0];

# Get multiple values as a slice.
($day, $month, $year) = (localtime)[3,4,5];</pre>
</blockquote>
</p>


<h3 class="sect2">2.8.1. List Assignment</h3>

<a name="INDEX-690"></a><a name="INDEX-691"></a>
<p>
<a name="INDEX-692"></a>
A list may be assigned to only if each element of the list is
itself legal to assign to:
<blockquote>
<pre class="programlisting">($a, $b, $c) = (1, 2, 3);

($map{red}, $map{green}, $map{blue}) = (0xff0000, 0x00ff00, 0x0000ff);</pre>
</blockquote>

You may assign to <tt class="literal">undef</tt> in a list.  This is useful for throwing
away some of the return values of a function:
<blockquote>
<pre class="programlisting">($dev, $ino, undef, undef, $uid, $gid) = stat($file);</pre>
</blockquote>

The final list element may be an array or a hash:
<blockquote>
<pre class="programlisting">($a, $b, @rest) = split;
my ($a, $b, %rest) = @arg_list;</pre>
</blockquote>

You can actually put an array or hash anywhere in the list you assign
to, but the first array or hash in the list will soak up all the
remaining values, and anything after it will be set to the undefined
value.  This may be useful in a <tt class="literal">local</tt> or
<tt class="literal">my</tt>, where you probably want the arrays initialized
to be empty anyway.</p>

<p>You can even assign to the empty list:
<blockquote>
<pre class="programlisting">() = funkshun();</pre>
</blockquote>

That ends up calling your function in list context, but discarding
the return values.  If you had just called the function without an
assignment, it would have instead been called in void context, which
is a kind of scalar context, and might have caused the function to
behave completely differently.
<a name="INDEX-693"></a>
</p>

<p>
<a name="INDEX-694"></a>
List assignment in scalar context returns the number of elements
produced by the expression on the <em class="emphasis">right</em> side of the assignment:
<blockquote>
<pre class="programlisting">$x = ( ($a, $b) = (7,7,7) );    # set $x to 3, not 2
$x = ( ($a, $b) = funk() );     # set $x to funk()'s return count
$x = ( () = funk() );           # also set $x to funk()'s return count</pre>
</blockquote>

This is handy when you want to do a list assignment in a Boolean
context, because most list functions return a null list when finished,
which when assigned produces a 0, which is interpreted as false.
Here's how you might use it in a <tt class="literal">while</tt> statement:
<blockquote>
<pre class="programlisting">while (($login, $password) = getpwent) {
    if (crypt($login, $password) eq $password) {
        print "$login has an insecure password!\n";
    }
}</pre>
</blockquote>
<a name="INDEX-695"></a>
</p>






<h3 class="sect2">2.8.2. Array Length</h3>

<p>
<a name="INDEX-696"></a><a name="INDEX-697"></a><a name="INDEX-698"></a><a name="INDEX-699"></a>
You may find the number of elements in the array <tt class="literal">@days</tt> by evaluating
<tt class="literal">@days</tt> in a scalar context, such as:
<blockquote>
<pre class="programlisting">@days + 0;      # implicitly force @days into a scalar context
scalar(@days)   # explicitly force @days into a scalar context</pre>
</blockquote>

Note that this only works for arrays.  It does not work for list values
in general.  As we mentioned earlier, a comma-separated list evaluated
in scalar context returns the last value, like the C comma operator.
But because you almost never actually need to know the length of a list
in Perl, this is not a problem.</p>

<p>
<a name="INDEX-700"></a><a name="INDEX-701"></a><a name="INDEX-702"></a><a name="INDEX-703"></a>
Closely related to the scalar evaluation of
<tt class="literal">@days</tt> is <tt class="literal">$#days</tt>.  This will
return the subscript of the last element of the array, or one less
than the length, since there is (ordinarily) a 0th element.  Assigning
to <tt class="literal">$#days</tt> changes the length of the array.
Shortening an array by this method destroys intervening values.  You
can gain some measure of efficiency by pre-extending an array that is
going to get big. (You can also extend an array by assigning to an
element beyond the end of the array.) You can truncate an array down
to nothing by assigning the null list <tt class="literal">()</tt> to it.
The following two statements are equivalent:
<blockquote>
<pre class="programlisting">@whatever = ();
$#whatever = -1;</pre>
</blockquote>

And the following is always true:
<blockquote>
<pre class="programlisting">scalar(@whatever) == $#whatever + 1;</pre>
</blockquote>

Truncating an array does not recover its memory.  You have to
<tt class="literal">undef(@whatever)</tt> to free its memory back to your process's memory
pool.  You probably can't free it all the way back to your system's
memory pool, because few operating systems support this.
<a name="INDEX-704"></a>
</p>

<a name="INDEX-705"></a><a name="INDEX-706"></a>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_09.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.7. Context</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.9. Hashes</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
