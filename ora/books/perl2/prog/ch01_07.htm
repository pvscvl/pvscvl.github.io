<html>
<head>
<title>Regular Expressions (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Regular Expressions">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch01_01.htm">Chapter 1: An Overview of Perl</a></td><td align="right" valign="top" width="172"><a href="ch01_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">1.7. Regular Expressions</h2>

<p>
<a name="INDEX-325"></a><a name="INDEX-326"></a><a name="INDEX-327"></a><a name="INDEX-328"></a><a name="INDEX-329"></a><a name="INDEX-330"></a><a name="INDEX-331"></a><a name="INDEX-332"></a><a name="INDEX-333"></a><a name="INDEX-334"></a><a name="INDEX-335"></a><em class="emphasis">Regular expressions</em> (a.k.a. regexes, regexps, or
REs) are used by many search programs such as
<em class="emphasis">grep</em> and <em class="emphasis">findstr</em>,
text-munging programs like <em class="emphasis">sed</em> and
<em class="emphasis">awk</em>, and editors like <em class="emphasis">vi</em> and
<em class="emphasis">emacs</em>.  A regular expression is a way of
describing a set of strings without having to list all the strings in
your set.<a href="#FOOTNOTE-22">[22]</a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-22"></a>
<p>[22] A good source of information on regular
expression concepts is Jeffrey Friedl's book, <em class="emphasis">Mastering
Regular Expressions</em> (O'Reilly &amp;
Associates).</p>

</blockquote>

<p>
<a name="INDEX-336"></a>
Many other computer languages incorporate regular expressions (some of
them even advertise "Perl5 regular expressions"!), but none of
these languages integrates regular expressions into the language the
way Perl does.  Regular expressions are used several ways in Perl.
First and foremost, they're used in conditionals to determine whether
a string matches a particular pattern, because in a Boolean context
they return true and false.  So when you see something that looks like
<tt class="literal">/foo/</tt> in a conditional, you know you're
looking at an ordinary <em class="emphasis">pattern-matching</em> operator:
<blockquote>
<pre class="programlisting">if (/Windows 95/) { print "Time to upgrade?\n" }</pre>
</blockquote>
<a name="INDEX-337"></a><a name="INDEX-338"></a>
</p>

<p>Second, if you can locate patterns within a string, you can replace them
with something else.  So when you see something that looks like
<tt class="literal">s/foo/bar/</tt>, you know it's asking Perl to substitute "bar" for "foo",
if possible.  We call that the <em class="emphasis">substitution</em> operator.  It also
happens to return true or false depending on whether it succeeded,
but usually it's evaluated for its side effect:
<blockquote>
<pre class="programlisting">s/Windows/Linux/;</pre>
</blockquote>
<a name="INDEX-339"></a>
</p>

<p>
<a name="INDEX-340"></a>
Finally, patterns can specify not only where something is, but also
where it <em class="emphasis">isn't</em>.  So the <tt class="literal">split</tt>
operator uses a regular expression to specify where the data isn't.  That 
is, the regular expression defines the <em class="emphasis">separators</em>
that delimit the fields of data.  Our Average Example has a couple of
trivial examples of this.  Lines 5 and 12 each split strings on the space
character in order to return a list of words. But you can split on any 
separator you can specify with a regular expression:
<blockquote>
<pre class="programlisting">($good, $bad, $ugly) = split(/,/, "vi,emacs,teco");</pre>
</blockquote>
(There are various modifiers you can use in each of these situations to
do exotic things like ignore case when matching alphabetic characters,
but these are the sorts of gory details that we'll cover later when
we get to the gory details.)</p>

<p>
<a name="INDEX-341"></a><a name="INDEX-342"></a>
The simplest use of regular expressions is to match a literal
expression.  In the case of the <tt class="literal">split</tt> above, we
matched on a single comma character.  But if you match on several
characters in a row, they all have to match sequentially.  That is,
the pattern looks for a substring, much as you'd expect.  Let's say we
want to show all the lines of an HTML file that contain HTTP links (as
opposed to FTP links).  Let's imagine we're working with HTML for the
first time, and we're being a little na&amp;#239;ve.  We know that these
links will always have "<tt class="literal">http:</tt>" in them somewhere.  We 
could loop through our file with this:
<blockquote>
<pre class="programlisting">while ($line = &lt;FILE&gt;) {
    if ($line =~ /http:/) {
        print $line;
    }
}</pre>
</blockquote>
<a name="INDEX-343"></a><a name="INDEX-344"></a><a name="INDEX-345"></a><a name="INDEX-346"></a><a name="INDEX-347"></a>
Here, the <tt class="literal">=~</tt> (pattern-binding operator) is telling
Perl to look for a match of the regular expression
"<tt class="literal">http:</tt>" in the variable
<tt class="literal">$line</tt>.  If it finds the expression, the operator
returns a true value and the block (a <tt class="literal">print</tt>
statement) is executed.<a href="#FOOTNOTE-23">[23]</a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-23"></a>
<p>[23] This is very similar to what the
Unix command <tt class="literal">grep 'http:' file</tt> would do.  On MS-DOS
you could use the <em class="emphasis">find</em> command, but it doesn't
know how to do more complicated regular expressions.  (However, the
misnamed <em class="emphasis">findstr</em> program of Windows NT does know
about regular expressions.)</p>

</blockquote>

<p>
<a name="INDEX-348"></a><a name="INDEX-349"></a>
By the way, if you don't use the <tt class="literal">=~</tt> binding operator, Perl will
search a default string instead of <tt class="literal">$line</tt>.  It's like when you say,
"Eek! Help me find my contact lens!"  People automatically know to look
around near you without your actually having to tell them that.
Likewise, Perl knows that there is a default place to search for things
when you don't say where to search for them.  This default string is
actually a special scalar variable that goes by the odd name of <tt class="literal">$_</tt>.
In fact, it's not the default just for pattern matching; many operators
in Perl default to using the <tt class="literal">$_</tt> variable, so a veteran Perl
programmer would likely write the last example as:
<blockquote>
<pre class="programlisting">while (&lt;FILE&gt;) {
    print if /http:/;
}</pre>
</blockquote>

(Hmm, another one of those statement modifiers seems to have snuck in
there.  Insidious little beasties.)</p>

<p>This stuff is pretty handy, but what if we wanted to find all of the
link types, not just the HTTP links?  We could give a list of link types,
like "<tt class="literal">http:</tt>", "<tt class="literal">ftp:</tt>", "<tt class="literal">mailto:</tt>", and so on.  But that list
could get long, and what would we do when a new kind of link was
added?
<blockquote>
<pre class="programlisting">while (&lt;FILE&gt;) {
    print if /http:/;
    print if /ftp:/;
    print if /mailto:/;
    # What next?
}</pre>
</blockquote>
<a name="INDEX-350"></a><a name="INDEX-351"></a><a name="INDEX-352"></a><a name="INDEX-353"></a>
</p>

<p>Since regular expressions are descriptive of a set of strings, we can
just describe what we are looking for: a number of alphabetic characters
followed by a colon.  In regular expression talk (Regexese?), that
would be <tt class="literal">/[a-zA-Z]+:/</tt>, where the brackets define a
<em class="emphasis">character class</em>.  The <tt class="literal">a-z</tt> and
<tt class="literal">A-Z</tt> represent all alphabetic characters (the
dash means the range of all characters between the starting and ending
character, inclusive).  And the <tt class="literal">+</tt> is a special character that says
"one or more of whatever was before me".  It's what we call a
<em class="emphasis">quantifier</em>, meaning a gizmo that says how many times something is
allowed to repeat.  (The slashes aren't really part of the regular
expression, but rather part of the pattern-match operator.   The slashes
are acting like quotes that just happen to contain a regular
expression.)</p>

<p>
<a name="INDEX-354"></a><a name="INDEX-355"></a><a name="INDEX-356"></a><a name="INDEX-357"></a><a name="INDEX-358"></a><a name="INDEX-359"></a><a name="INDEX-360"></a>
Because certain classes like the alphabetics are so commonly used, Perl
defines shortcuts for them:</p>


<a name="perl3-tab-over-re-meta"></a>
<table border="1">

<tr>
<th>Name</th>
<th>ASCII Definition</th>
<th>Code</th>
</tr>




<tr>
<td>Whitespace</td>
<td><tt class="literal">[ \t\n\r\f]</tt></td>
<td><tt class="literal">\s</tt></td>
</tr>

<tr>
<td>Word character</td>
<td><tt class="literal">[a-zA-Z_0-9]</tt></td>
<td><tt class="literal">\w</tt></td>
</tr>

<tr>
<td>Digit</td>
<td><tt class="literal">[0-9]</tt></td>
<td><tt class="literal">\d</tt></td>
</tr>


</table>
<p>
Note that these match <em class="emphasis">single</em> characters.  A
<tt class="literal">\w</tt> will match any single word character, not an
entire word.  (Remember that <tt class="literal">+</tt> quantifier?  You can
say <tt class="literal">\w+</tt> to match a word.)  Perl also provides the
negation of these classes by using the uppercased character, such as
<tt class="literal">\D</tt> for a nondigit character.</p>

<p>
<a name="INDEX-361"></a><a name="INDEX-362"></a>
We should note that <tt class="literal">\w</tt> is not always equivalent to
<tt class="literal">[a-zA-Z_0-9]</tt> (and <tt class="literal">\d</tt> is not
always <tt class="literal">[0-9]</tt>).  Some locales define additional
alphabetic characters outside the ASCII sequence, and
<tt class="literal">\w</tt> respects them.  Newer versions of Perl also know
about Unicode letter and digit properties and treat Unicode characters
with those properties accordingly.  (Perl also considers ideographs to
be <tt class="literal">\w</tt> characters.)</p>

<p>
<a name="INDEX-363"></a> There is one other very special
character class, written with a "<tt class="literal">.</tt>", that will
match any character whatsoever.<a href="#FOOTNOTE-24">[24]</a> For
example, <tt class="literal">/a./</tt> will match any string containing an
"<tt class="literal">a</tt>" that is not the last character in the string.  Thus 
it will match "<tt class="literal">at</tt>" or "<tt class="literal">am</tt>" or even
"<tt class="literal">a!</tt>", but not "<tt class="literal">a</tt>", since there's 
nothing after the "<tt class="literal">a</tt>" for the dot to match.  Since
it's searching for the pattern anywhere in the string, it'll
match "<tt class="literal">oasis</tt>" and "<tt class="literal">camel</tt>", but
not "<tt class="literal">sheba</tt>".  It matches
"<tt class="literal">caravan</tt>" on the first "<tt class="literal">a</tt>".  It
could match on the second "<tt class="literal">a</tt>", but it stops after
it finds the first suitable match, searching from left to right.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-24"></a>
<p>[24] Except that it won't
normally match a newline.  When you think about it, a
"<tt class="literal">.</tt>" doesn't normally match a newline in
<em class="emphasis">grep</em>(1) either.</p>

</blockquote>


<h3 class="sect2">1.7.1. Quantifiers</h3>

<p>
<a name="INDEX-364"></a>
The characters and character classes we've talked about all match single
characters.  We mentioned that you could match multiple "word"
characters with <tt class="literal">\w+</tt>.  The <tt class="literal">+</tt> is
one kind of quantifier, but there are others.  All of them are placed
after the item being quantified.</p>

<p>
<a name="INDEX-365"></a><a name="INDEX-366"></a><a name="INDEX-367"></a>
The most general form of quantifier specifies both the minimum and maximum
number of times an item can match.  You put the two numbers in braces,
separated by a comma.  For example, if you were trying to match North
American phone numbers, the sequence <tt class="literal">\d{7,11}</tt> would
match at least seven digits, but no more than eleven digits.  If you
put a single number in the braces, the number specifies both the
minimum and the maximum; that is, the number specifies the exact
number of times the item can match.  (All unquantified items have an
implicit <tt class="literal">{1}</tt>
quantifier.)</p>

<p>
<a name="INDEX-368"></a><a name="INDEX-369"></a>
If you put the minimum and the comma but omit the maximum, then the
maximum is taken to be infinity.  In other words, it will match at
least the minimum number of times, plus as many as it can get after
that. For example, <tt class="literal">\d{7}</tt> will match only the first
seven digits (a local North American phone number, for instance, or
the first seven digits of a longer number), while
<tt class="literal">\d{7,}</tt> will match any phone number, even an
international one (unless it happens to be shorter than seven
digits).  There is no special way of saying "at most" a certain
number of times.  Just say <tt class="literal">.{0,5}</tt>, for example,
to find at most five arbitrary characters.</p>

<p>
<a name="INDEX-370"></a><a name="INDEX-371"></a>
Certain combinations of minimum and maximum occur frequently, so Perl
defines special quantifiers for them.  We've already seen <tt class="literal">+</tt>, which is
the same as <tt class="literal">{1,}</tt>, or "at least one of the preceding item".  There is
also <tt class="literal">*</tt>, which is the same as <tt class="literal">{0,}</tt>, or "zero or more of the
preceding item", and <tt class="literal">?</tt>, which is the same as <tt class="literal">{0,1}</tt>, or "zero or
one of the preceding item" (that is, the preceding item is optional).</p>

<p>
<a name="INDEX-372"></a><a name="INDEX-373"></a>
You need to be careful of a couple
things about quantification.  First of all, Perl quantifiers are by
default <em class="emphasis">greedy</em>.  This means that they will
attempt to match as much as they can as long as the whole pattern
still matches.  For example, if you are matching
<tt class="literal">/\d+/</tt> against "<tt class="literal">1234567890</tt>", it
will match the entire string.  This is something to watch out for
especially when you are using "<tt class="literal">.</tt>", any character.
Often, someone will have a string like:
<blockquote>
<pre class="programlisting">larry:JYHtPh0./NJTU:100:10:Larry Wall:/home/larry:/bin/tcsh</pre>
</blockquote>
<a name="INDEX-374"></a><a name="INDEX-375"></a>
and will try to match "<tt class="literal">larry:</tt>" with
<tt class="literal">/.+:/</tt>.  However, since the <tt class="literal">+</tt>
quantifier is greedy, this pattern will match everything up to and
including "<tt class="literal">/home/larry:</tt>", because it matches as
much as possible before the last colon, including all the other
colons.  Sometimes you can avoid this by using a negated character
class, that is, by saying <tt class="literal">/[^:]+:/</tt>, which says to
match one or more noncolon characters (as many as possible), up to the
first colon.  It's that little caret in there that negates the Boolean
sense of the character class.<a href="#FOOTNOTE-25">[25]</a> The
other point to be careful about is that regular expressions will try
to match as <em class="emphasis">early</em> as possible.  This even takes
precedence over being greedy.  Since scanning happens left-to-right,
this means that the pattern will match as far left as possible, even
if there is some other place where it could match longer.  (Regular
expressions may be greedy, but they aren't into delayed
gratification.)  For example, suppose you're using the substitution
command (<tt class="literal">s///</tt>) on the default string (variable
<tt class="literal">$_</tt>, that is), and you want to remove a
string of x's from the middle of the string.  If you say:
<a name="INDEX-376"></a>
<blockquote>
<pre class="programlisting">$_ = "fred xxxxxxx barney";
s/x*//;</pre>
</blockquote>

it will have absolutely no effect!  This is because the <tt class="literal">x*</tt> (meaning
zero or more "<tt class="literal">x</tt>" characters) will be able to match the "nothing" at
the beginning of the string, since the null string happens to be zero
characters wide and there's a null string just sitting there plain as
day before the "<tt class="literal">f</tt>" of "<tt class="literal">fred</tt>".<a href="#FOOTNOTE-26">[26]</a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-25"></a>
<p>[25] Sorry, we didn't pick
that notation, so don't blame us.  That's just how negated character
classes are customarily written in Unix culture.</p>

</blockquote>
<blockquote class="footnote">

<a name="FOOTNOTE-26"></a>
<p>[26] Don't feel bad.  Even the
authors get caught by this from time to time.</p>

</blockquote>

<p>There's one other thing you need to know.  By default, quantifiers apply
to a single preceding character, so <tt class="literal">/bam{2}/</tt> will match "<tt class="literal">bamm</tt>" but
not "<tt class="literal">bambam</tt>".  To apply a quantifier to more than one character, use
parentheses. So to match "<tt class="literal">bambam</tt>", use the pattern <tt class="literal">/(bam){2}/</tt>.</p>






<h3 class="sect2">1.7.2. Minimal Matching</h3>

<p>
<a name="INDEX-377"></a><a name="INDEX-378"></a>
If you were using an ancient version of Perl and you didn't want greedy
matching, you had to use a negated character class.  (And really, you
were still getting greedy matching of a constrained variety.)</p>

<p>In modern versions of Perl, you can force nongreedy, minimal matching
by placing a question mark after any quantifier.  Our same username
match would now be <tt class="literal">/.*?:/</tt>.  That
<tt class="literal">.*?</tt> will now try to match as few characters as
possible, rather than as many as possible, so it stops at the first
colon rather than at the last.</p>






<h3 class="sect2">1.7.3. Nailing Things Down</h3>

<p>
<a name="INDEX-379"></a> Whenever you try to
match a pattern, it's going to try to match in every location till it
finds a match.  An <em class="emphasis">anchor</em> allows you to restrict
where the pattern can match.  Essentially, an anchor is something that
matches a "nothing", but a special kind of nothing that depends on its
surroundings.  You could also call it a rule, or a constraint, or an
assertion.  Whatever you care to call it, it tries to match something
of zero width, and either succeeds or fails.  (Failure merely means
that the pattern can't match that particular way.  The pattern will go
on trying to match some other way, if there are any other ways left to
try.)</p>

<p>
<a name="INDEX-380"></a><a name="INDEX-381"></a><a name="INDEX-382"></a><a name="INDEX-383"></a> The special symbol
<tt class="literal">\b</tt> matches at a word boundary, which is defined as
the "nothing" between a word character (<tt class="literal">\w</tt>) and a
nonword character (<tt class="literal">\W</tt>), in either order.  (The
characters that don't exist off the beginning and end of your string
are considered to be nonword characters.) For example,
<blockquote>
<pre class="programlisting">/\bFred\b/</pre>
</blockquote>

would match "<tt class="literal">Fred</tt>" in both
"<tt class="literal">The Great Fred</tt>" and "<tt class="literal">Fred the
Great</tt>", but not in "<tt class="literal">Frederick the Great</tt>"
because the "<tt class="literal">d</tt>" in "<tt class="literal">Frederick</tt>"
is not followed by a nonword character.</p>

<p>
<a name="INDEX-384"></a><a name="INDEX-385"></a> In a similar vein, there are also
anchors for the beginning of the string and the end of the string.  If
it is the first character of a pattern, the caret
(<tt class="literal">^</tt>) matches the "nothing" at the beginning of the
string.  Therefore, the pattern <tt class="literal">/^Fred/</tt> would match
"<tt class="literal">Fred</tt>" in "Frederick the Great" but not in "The
Great Fred", whereas <tt class="literal">/Fred^/</tt> wouldn't match either.
(In fact, it doesn't even make much sense.)  The dollar sign
(<tt class="literal">$</tt>) works like the caret, except that it matches
the "nothing" at the end of the string instead of the
beginning.<a href="#FOOTNOTE-27">[27]</a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-27"></a>
<p>[27] This is a bit oversimplified, since we're
assuming here that your string contains no newlines;
<tt class="literal">^</tt> and <tt class="literal">$</tt> are actually anchors for
the beginnings and endings of lines rather than strings.  We'll try to
straighten this all out in <a href="ch05_01.htm">Chapter 5, "Pattern Matching"</a>
(to the extent that it can be straightened out).</p>

</blockquote>

<p>So now you can probably figure out that when we said:
<blockquote>
<pre class="programlisting">next LINE if $line =~ /^#/;</pre>
</blockquote>

we meant "Go to the next iteration of <tt class="literal">LINE</tt> loop if this line happens
to begin with a <tt class="literal">#</tt> character."</p>

<p>Earlier we said that the sequence <tt class="literal">\d{7,11}</tt> would match a number from
seven to eleven digits long.  While strictly true, the statement is
misleading:  when you use that sequence within a real pattern match
operator such as <tt class="literal">/\d{7,11}/</tt>, it does not preclude there being extra
unmatched digits after the 11 matched digits!  You often need to anchor
quantified patterns on either or both ends to get what you expect.</p>






<h3 class="sect2">1.7.4. Backreferences</h3>

<p>
<a name="INDEX-386"></a><a name="INDEX-387"></a><a name="INDEX-388"></a>
We mentioned earlier that you can use parentheses to group things for
quantifiers, but you can also use parentheses to remember bits and
pieces of what you matched.  A pair of parentheses around a part of a
regular expression causes whatever was matched by that part to be
remembered for later use.  It doesn't change what the part matches, so
<tt class="literal">/\d+/</tt> and <tt class="literal">/(\d+)/</tt> will still
match as many digits as possible, but in the latter case they will be
remembered in a special variable to be backreferenced later.</p>

<p>How you refer back to the remembered part of the string depends on
where you want to do it from.  Within the same regular expression, you
use a backslash followed by an integer.  The integer corresponding to
a given pair of parentheses is determined by counting left parentheses
from the beginning of the pattern, starting with one.  So for example,
to match something similar to an HTML tag like
"<tt class="literal">&lt;B&gt;Bold&lt;/B&gt;</tt>", you might use
<tt class="literal">/&lt;(.*?)&gt;.*?&lt;\/\1&gt;/</tt>.  This forces the
two parts of the pattern to match the exact same string, such as the
"<tt class="literal">B</tt>" in this example.</p>

<p>Outside the regular expression itself, such as in the replacement part
of a substitution, you use a <tt class="literal">$</tt> followed by an
integer, that is, a normal scalar variable named by the integer.  So,
if you wanted to swap the first two words of a string, for example,
you could use:
<blockquote>
<pre class="programlisting">s/(\S+)\s+(\S+)/$2 $1/</pre>
</blockquote>
</p>

<p>
<a name="INDEX-389"></a>
The right side of the substitution (between the second and third
slashes) is mostly just a funny kind of double-quoted string, which is
why you can interpolate variables there, including backreference
variables.  This is a powerful concept: interpolation (under
controlled circumstances) is one of the reasons Perl is a good
text-processing language.  The other reason is the pattern matching,
of course.  Regular expressions are good for picking things apart, and
interpolation is good for putting things back together again.  Perhaps
there's hope for Humpty Dumpty after all.</p>

<a name="INDEX-390"></a>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch01_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">1.6. Control Structures</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">1.8. List Processing</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
