<html>
<head>
<title>Formats (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Formats">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm">Part 2: The Gory Details</a></td><td align="right" valign="top" width="172"><a href="ch07_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h1 class="chapter">Chapter 7.  Formats</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch07_01.htm">Format Variables</a>
<br>
<a href="ch07_02.htm">Footers</a>
<br>
</p>
</div>

<a name="INDEX-1884"></a>
<p>
<a name="INDEX-1885"></a><a name="INDEX-1886"></a>
Perl has a mechanism to help you generate simple reports and charts.
To facilitate this, Perl helps you code up your output page close to
how it will look when it's printed.  It can keep track of things like
how many lines are on a page, the current page number, when to print
page headers, and so on. Keywords are borrowed from FORTRAN:
<tt class="literal">format</tt> to declare and <tt class="literal">write</tt> to
execute; see the relevant entries in <a href="ch29_01.htm">Chapter 29, "Functions"</a>.  Fortunately, the layout is much more
legible, more like the <tt class="literal">PRINT USING</tt> statement of
BASIC. Think of it as a poor man's
<em class="emphasis">nroff</em>(1).  (If you know
<em class="emphasis">nroff</em>, that may not sound like a recommendation.)</p>

<p>
<a name="INDEX-1887"></a><a name="INDEX-1888"></a><a name="INDEX-1889"></a><a name="INDEX-1890"></a>
Formats, like packages and subroutines, are declared rather than
executed, so they may occur at any point in your program.  (Usually
it's best to rukeep them all together.) They have their own namespace
apart from all the other types in Perl.  This means that if you have a
function named "<tt class="literal">Foo</tt>", it is not the same thing as a
format named "<tt class="literal">Foo</tt>".  However, the default name for
the format associated with a given filehandle is the same as the name
of that filehandle.  Thus, the default format for
<tt class="literal">STDOUT</tt> is named "<tt class="literal">STDOUT</tt>", and
the default format for filehandle <tt class="literal">TEMP</tt> is named
"<tt class="literal">TEMP</tt>".  They just look the same.  They aren't.</p>

<p>
<a name="INDEX-1891"></a>
Output record formats are declared as follows:
<blockquote>
<pre class="programlisting">format <em class="replaceable">NAME</em> =
<em class="replaceable">FORMLIST</em>
.</pre>
</blockquote>

If <em class="replaceable">NAME</em> is omitted, format <tt class="literal">STDOUT</tt> is defined. <em class="replaceable">FORMLIST</em> consists
of a sequence of lines, each of which may be of one of three types:</p>

<ul>
<li>
<p>A comment, indicated by putting a <tt class="literal">#</tt> in the first column.</p>
</li>
<li>
<p>A "picture" line giving the format for one output line.</p>
</li>
<li>
<p>An argument line supplying values to plug into the previous picture
line.</p>
</li>
</ul>
<a name="INDEX-1892"></a><a name="INDEX-1893"></a><a name="INDEX-1894"></a><a name="INDEX-1895"></a>
<p>Picture lines are printed exactly as they look, except for certain
fields that substitute values into the line.<a href="#FOOTNOTE-1">[1]</a> Each substitution field in a picture line
starts with either <tt class="literal">@</tt> (at) or <tt class="literal">^</tt>
(caret).  These lines do not undergo any kind of variable
interpolation.  The <tt class="literal">@</tt> field (not to be confused
with the array marker <tt class="literal">@</tt>) is the normal kind of
field; the other kind, the ^ field, is used to do rudimentary
multiline text-block filling.  The length of the field is supplied by
padding out the field with multiple <tt class="literal">&lt;</tt>,
<tt class="literal">&gt;</tt>, or <tt class="literal">|</tt> characters to
specify, respectively, left justification, right justification, or
centering.  If the variable exceeds the width specified, it is
truncated.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-1"></a>
<p>[1] Even
those fields maintain the integrity of the columns you put them in,
however.  There is nothing in a picture line that can cause fields to
grow or shrink or shift back and forth.  The columns you see are
sacred in a WYSIWYG sense--assuming you're using a fixed-width
font.  Even control characters are assumed to have a width of
one.</p>

</blockquote>

<p>
<a name="INDEX-1896"></a><a name="INDEX-1897"></a><a name="INDEX-1898"></a>
As an alternate form of right justification, you may also use
<tt class="literal">#</tt> characters (after an initial <tt class="literal">@</tt>
or <tt class="literal">^</tt>) to specify a numeric field.  You can insert a
<tt class="literal">.</tt> in place of one of the <tt class="literal">#</tt>
characters to line up the decimal points.  If any value supplied for
these fields contains a newline, only the text up to the newline is
printed. Finally, the special field <tt class="literal">@*</tt> can be used
for printing multiline, nontruncated values; it should generally
appear on a picture line by itself.</p>

<p>The values are specified on the following line in the same order as
the picture fields.  The expressions providing the values should be
separated by commas.  The expressions are all evaluated in a list
context before the line is processed, so a single list expression
could produce multiple list elements.  The expressions may be spread
out to more than one line if enclosed in braces.  (If so, the opening
brace must be the first token on the first line).  This lets you line
up the values under their respective format fields for easier reading.</p>

<p>
<a name="INDEX-1899"></a>
If an expression evaluates to a number with a decimal part, and if the
corresponding picture specifies that the decimal part should appear in
the output (that is, any picture except multiple <tt class="literal">#</tt>
characters without an embedded <tt class="literal">.</tt>), the character
used for the decimal point is always determined by the current
<tt class="literal">LC_NUMERIC</tt> locale.  This means that if, for
example, the run-time environment happens to specify a German locale,
a comma will be used instead of a period.  See the
<em class="emphasis">perllocale</em> manpage for more information.</p>

<p>
<a name="INDEX-1900"></a>
Inside an expression, the whitespace characters <tt class="literal">\n</tt>,
<tt class="literal">\t</tt>, and <tt class="literal">\f</tt> are all considered
equivalent to a single space.  Thus, you could think of this filter as
being applied to each value in the format:
<blockquote>
<pre class="programlisting">$value =~ tr/\n\t\f/ /;</pre>
</blockquote>

The remaining whitespace character, <tt class="literal">\r</tt>, forces the
printing of a new line if the picture line allows it.</p>

<p>
<a name="INDEX-1901"></a>
Picture fields that begin with <tt class="literal">^</tt> rather than
<tt class="literal">@</tt> are treated specially.  With a
<tt class="literal">#</tt> field, the field is blanked out if the value is
undefined.  For other field types, the caret enables a kind of fill
mode.  Instead of an arbitrary expression, the value supplied must be
a scalar variable name that contains a text string.  Perl puts as much
text as it can into the field, and then chops off the front of the
string so that the next time the variable is referenced, more of the
text can be printed. (Yes, this means that the variable itself is
altered during execution of the <tt class="literal">write</tt> call and is
not preserved. Use a scratch variable if you want to preserve the
original value.)  Normally you would use a sequence of fields lined up
vertically to print out a block of text.  You might wish to end the
final field with the text "<tt class="literal">...</tt>", which will
appear in the output if the text was too long to appear in its
entirety.  You can change which characters are legal to "break" on (or
after) by changing the variable <tt class="literal">$:</tt> (that's
<tt class="literal">$FORMAT_LINE_BREAK_CHARACTERS</tt> if you're using the
<tt class="literal">English</tt> module) to a list of the desired
characters.</p>

<p>
<a name="INDEX-1902"></a><a name="INDEX-1903"></a><a name="INDEX-1904"></a>
Using <tt class="literal">^</tt> fields can produce variable-length records.  If the text to be
formatted is short, just repeat the format line with the ^ field in it a
few times.  If you just do this for short data you'd end up getting a
few blank lines.  To suppress lines that would end up blank, put a <tt class="literal">~</tt>
(tilde) character anywhere in the line.  (The tilde itself will be
translated to a space upon output.)  If you put a second tilde
next to the first, the line will be repeated until all the text in
the fields on that line are exhausted.  (This works because the <tt class="literal">^</tt>
fields chew up the strings they print.  But if you use a field of the
<tt class="literal">@</tt> variety in conjunction with two tildes, the expression you supply
had better not give the same value every time forever!  Use a <tt class="literal">shift</tt>,
or some other operator with a side effect that exhausts the set of
values.)</p>

<p>
<a name="INDEX-1905"></a><a name="INDEX-1906"></a><a name="INDEX-1907"></a>
Top-of-form processing is by default handled by a format with the same
name as the current filehandle with <tt class="literal">_TOP</tt> concatenated to it.
It's triggered at the top of each page.  See <tt class="literal">write</tt> in 
<a href="ch29_01.htm">Chapter 29, "Functions"</a>.</p>

<p>Here are some examples:
<blockquote>
<pre class="programlisting"># a report on the /etc/passwd file
format STDOUT_TOP =
                         Passwd File
Name                Login    Office   Uid   Gid Home
------------------------------------------------------------------
.
format STDOUT =
@&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; @||||||| @&lt;&lt;&lt;&lt;&lt;&lt;@&gt;&gt;&gt;&gt; @&gt;&gt;&gt;&gt; @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
$name,              $login,  $office,$uid,$gid, $home
.

# a report from a bug report form
format STDOUT_TOP =
                         Bug Reports
@&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;     @|||         @&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
$system,                      $%,         $date
------------------------------------------------------------------
.
format STDOUT =
Subject: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
         $subject
Index: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
       $index,                       $description
Priority: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Date: @&lt;&lt;&lt;&lt;&lt;&lt;&lt; ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
          $priority,        $date,   $description
From: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
      $from,                         $description
Assigned to: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
             $programmer,            $description
~                                    ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                                     $description
~                                    ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                                     $description
~                                    ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                                     $description
~                                    ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                                     $description
~                                    ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;...
                                     $description
.</pre>
</blockquote>
<a name="INDEX-1908"></a>
</p>

<p>
<a name="INDEX-1909"></a>
Lexical variables are not visible within a format unless the format is
declared within the scope of the lexical variable.</p>

<p>
<a name="INDEX-1910"></a>
It is possible to intermix <tt class="literal">print</tt>s with <tt class="literal">write</tt>s on the same output
channel, but you'll have to handle the <tt class="literal">$-</tt> special variable
(<tt class="literal">$FORMAT_LINES_LEFT</tt> if you're using the <tt class="literal">English</tt> module) yourself.</p>


<h2 class="sect1">7.1. Format Variables</h2>

<a name="INDEX-1911"></a><a name="INDEX-1912"></a><a name="INDEX-1913"></a><a name="INDEX-1914"></a><a name="INDEX-1915"></a><a name="INDEX-1916"></a><a name="INDEX-1917"></a><a name="INDEX-1918"></a><a name="INDEX-1919"></a>
<p>
<a name="INDEX-1920"></a>
The current format name is stored in the variable
<tt class="literal">$~</tt> (<tt class="literal">$FORMAT_NAME</tt>), and the
current top-of-form format name is in <tt class="literal">$^</tt>
(<tt class="literal">$FORMAT_TOP_NAME</tt>).  The current output page number
is stored in <tt class="literal">$%</tt>
(<tt class="literal">$FORMAT_PAGE_NUMBER</tt>), and the number of lines on
the page is in <tt class="literal">$=</tt>
(<tt class="literal">$FORMAT_LINES_PER_PAGE</tt>). Whether to flush the
output buffer on this handle automatically is stored in
<tt class="literal">$|</tt> (<tt class="literal">$OUTPUT_AUTOFLUSH</tt>).  The
string to be output before each top of page (except the first) is
stored in <tt class="literal">$^L</tt>
(<tt class="literal">$FORMAT_FORMFEED</tt>).  These variables are set on a
per-filehandle basis, so you'll need to <tt class="literal">select</tt> the
filehandle associated with a format in order to affect its format
variables:
<blockquote>
<pre class="programlisting">select((select(OUTF), 
        $~ = "My_Other_Format",
        $^ = "My_Top_Format"
       )[0]);</pre>
</blockquote>

Pretty ugly, eh?  It's a common idiom though, so don't be too surprised
when you see it.  You can at least use a temporary variable to hold the
previous filehandle:
<blockquote>
<pre class="programlisting">$ofh = select(OUTF);
$~ = "My_Other_Format";
$^ = "My_Top_Format";
select($ofh);</pre>
</blockquote>
<a name="INDEX-1921"></a><a name="INDEX-1922"></a>
</p>

<p>This is a much better approach in general because
not only does legibility improve, but you now have an intermediary
statement in the code to stop on when you're single-stepping in the
debugger. If you use the <tt class="literal">English</tt> module, you can even read the variable names:</p>

<blockquote>
<pre class="programlisting">use English;
$ofh = select(OUTF);
$FORMAT_NAME     = "My_Other_Format";
$FORMAT_TOP_NAME = "My_Top_Format";
select($ofh);</pre>
</blockquote>

<p>But you still have those funny calls to <tt class="literal">select</tt>.  If you want to
avoid them, use the <tt class="literal">FileHandle</tt> module bundled with Perl.  Now you
can access these special variables using lowercase method names
instead:
<blockquote>
<pre class="programlisting">use FileHandle;
OUTF-&gt;format_name("My_Other_Format");
OUTF-&gt;format_top_name("My_Top_Format");</pre>
</blockquote>

Much better!</p>

<p>
<a name="INDEX-1923"></a>
Since the values line following your picture line may contain arbitrary
expressions (for <tt class="literal">@</tt> fields, not <tt class="literal">^</tt> fields), you can farm out more
sophisticated processing to other functions, like <tt class="literal">sprintf</tt> or one of
your own.  For example, to insert commas into a number:
<blockquote>
<pre class="programlisting">format Ident = 
    @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
    commify($n)
.</pre>
</blockquote>

To get a real <tt class="literal">@</tt>, <tt class="literal">~</tt>, or <tt class="literal">^</tt> into the field, do this:
<blockquote>
<pre class="programlisting">format Ident = 
I have an @ here.
         "@"
.</pre>
</blockquote>
<a name="INDEX-1924"></a><a name="INDEX-1925"></a>
</p>

<p>To center a whole line of text, do something like this:
<blockquote>
<pre class="programlisting">format Ident = 
@||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
                          "Some text line"
.</pre>
</blockquote>
<a name="INDEX-1926"></a><a name="INDEX-1927"></a><a name="INDEX-1928"></a><a name="INDEX-1929"></a><a name="INDEX-1930"></a>
</p>

<p>The <tt class="literal">&gt;</tt> field-length indicator ensures that the text will be
right-justified within the field, but the field as a whole occurs
exactly where you show it occurring. There is no built-in way to say
"float this field to the right-hand side of the page, however wide it
is."  You have to specify where it goes relative to the left margin. The
truly desperate can generate their own format on the fly, based on the
current number of columns (not supplied), and then <tt class="literal">eval</tt> it:
<blockquote>
<pre class="programlisting">$format  = "format STDOUT = \n"
         . '^' . '&lt;' x $cols . "\n"
         . '$entry' . "\n"
         . "\t^" . "&lt;" x ($cols-8) . "~~\n"
         . '$entry' . "\n"
         . ".\n";
print $format if $Debugging;
eval $format; 
die $@ if $@;</pre>
</blockquote>

The most important line there is probably the <tt class="literal">print</tt>. What the
<tt class="literal">print</tt> would print out looks something like this:
<blockquote>
<pre class="programlisting">format STDOUT = 
^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
$entry
    ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;~~
$entry
.</pre>
</blockquote>
<a name="INDEX-1931"></a>
</p>

<p>
<a name="INDEX-1932"></a>
Here's a little program that behaves like the <em class="emphasis">fmt</em>(1) Unix
utility:</p>

<blockquote>
<pre class="programlisting">format = 
^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; ~~
$_

.

$/ = "";
while (&lt;&gt;) {
    s/\s*\n\s*/ /g;
    write;
}</pre>
</blockquote>


















<a name="INDEX-1944"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch07_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">6.5. Subroutine Attributes</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">7.2. Footers</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
