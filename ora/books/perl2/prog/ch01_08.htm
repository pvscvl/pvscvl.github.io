<html>
<head>
<title>List Processing (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="List Processing">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch01_01.htm">Chapter 1: An Overview of Perl</a></td><td align="right" valign="top" width="172"><a href="ch01_09.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">1.8. List Processing</h2>

<p>
<a name="INDEX-391"></a>
Much earlier in this chapter, we mentioned that Perl has two main
contexts, scalar context (for dealing with singular things) and list
context (for dealing with plural things).  Many of the traditional
operators we've described so far have been strictly scalar in their
operation.  They always take singular arguments (or pairs of singular
arguments for binary operators) and always produce a singular result,
even in list context.  So if you write this:
<blockquote>
<pre class="programlisting">@array = (1 + 2, 3 - 4, 5 * 6, 7 / 8);</pre>
</blockquote>
you know that the list on the right side contains exactly four values,
because the ordinary math operators always produce scalar values, even
in the list context provided by the assignment to an array.</p>

<p>However, other Perl operators can produce either a scalar or a list
value, depending on their context.  They just "know" whether a scalar or
a list is expected of them.  But how will you know that? It turns out to
be pretty easy to figure out, once you get your mind around a few key
concepts.</p>

<p>
<a name="INDEX-392"></a><a name="INDEX-393"></a>
First, list context has to be provided by something in the
"surroundings".  In the previous example, the list assignment provides it.
Earlier we saw that the list of a <tt class="literal">foreach</tt> loop provides it.
The <tt class="literal">print</tt> operator also provides it.  But you don't have to
learn these one by one.</p>

<p>If you look at the various syntax summaries scattered throughout the
rest of the book, you'll see various operators that are defined to
take a <em class="replaceable">LIST</em> as an argument. Those are the
operators that <em class="emphasis">provide</em> a list context.
Throughout this book, <em class="replaceable">LIST</em> is used as a
specific technical term to mean "a syntactic construct that provides a
list context". For example, if you look up <tt class="literal">sort</tt>,
you'll find the syntax summary:
<blockquote>
<pre class="programlisting">sort <em class="replaceable">LIST</em>
</pre>
</blockquote>

That means that <tt class="literal">sort</tt> provides a list context to its arguments.</p>

<p>Second, at compile time (that is, while Perl is parsing your program
and translating to internal opcodes), any operator that takes a <em class="replaceable">LIST</em>
provides a list context to each syntactic element of that <em class="replaceable">LIST</em>.  So
every top-level operator or entity in the <em class="replaceable">LIST</em> knows at compile time
that it's supposed to produce the best list it knows how to produce.
This means that if you say:
<blockquote>
<pre class="programlisting">sort @dudes, @chicks, other();</pre>
</blockquote>

then each of <tt class="literal">@dudes</tt>, <tt class="literal">@chicks</tt>,
and <tt class="literal">other()</tt> knows at compile time that it's
supposed to produce a list value rather than a scalar value.  So the
compiler generates internal opcodes that reflect this.</p>

<p>Later, at run time (when the internal opcodes are actually
interpreted), each of those <em class="replaceable">LIST</em> elements
produces its list in turn, and then (this is important) all the
separate lists are joined together, end to end, into a single list.
And that squashed-flat, one-dimensional list is what is finally handed
off to the function that wanted the <em class="replaceable">LIST</em> in
the first place.  So if <tt class="literal">@dudes</tt> contains
<tt class="literal">(Fred,Barney)</tt>, <tt class="literal">@chicks</tt> contains
<tt class="literal">(Wilma,Betty)</tt>, and the <tt class="literal">other()</tt>
function returns the single-element list <tt class="literal">(Dino)</tt>,
then the <em class="replaceable">LIST</em> that <tt class="literal">sort</tt>
sees is:
<blockquote>
<pre class="programlisting">(Fred,Barney,Wilma,Betty,Dino)</pre>
</blockquote>
and the <em class="replaceable">LIST</em> that <tt class="literal">sort</tt>
returns is:
<blockquote>
<pre class="programlisting">(Barney,Betty,Dino,Fred,Wilma)</pre>
</blockquote>
<a name="INDEX-394"></a>
</p>

<p>
<a name="INDEX-395"></a><a name="INDEX-396"></a><a name="INDEX-397"></a><a name="INDEX-398"></a><a name="INDEX-399"></a>
Some operators produce lists (like <tt class="literal">keys</tt>), while some
consume them (like <tt class="literal">print</tt>), and others transform lists
into other lists (like <tt class="literal">sort</tt>).  Operators in the last
category can be considered filters, except that, unlike
in the shell, the flow of data is from right to left, since list
operators operate on arguments passed in from the right.  You can
stack up several list operators in a row:
<blockquote>
<pre class="programlisting">print reverse sort map {lc} keys %hash;</pre>
</blockquote>

That takes the keys of <tt class="literal">%hash</tt> and returns them to
the <tt class="literal">map</tt> function, which lowercases all the keys by
applying the <tt class="literal">lc</tt> operator to each of them, and
passes them to the <tt class="literal">sort</tt> function, which sorts them,
and passes them to the <tt class="literal">reverse</tt> function, which
reverses the order of the list elements, and passes them to the
<tt class="literal">print</tt> function, which prints them.</p>

<p>As you can see, that's much easier to describe in Perl than in English.</p>

<p>There are many other ways in which list processing produces more
natural code.  We can't enumerate all the ways here, but for an
example, let's go back to regular expressions for a moment.  We talked
about using a pattern in a scalar context to see whether it matched,
but if instead you use a pattern in a list context, it does something
else: it pulls out all the backreferences as a list.  Suppose you're
searching through a log file or a mailbox, and you want to parse a
string containing a time of the form "12:59:59 am".  You might say
this:
<blockquote>
<pre class="programlisting">($hour, $min, $sec, $ampm) = /(\d+):(\d+):(\d+) *(\w+)/;</pre>
</blockquote>

That's a convenient way to set several variables simultaneously.  But
you could just as easily say
<blockquote>
<pre class="programlisting">@hmsa = /(\d+):(\d+):(\d+) *(\w+)/;</pre>
</blockquote>

and put all four values into one array.  Oddly, by decoupling the power
of regular expressions from the power of Perl expressions, list context
increases the power of the language.  We don't often admit it, but
Perl is actually an orthogonal language in addition to being a diagonal
language.  Have your cake, and eat it too.</p>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch01_09.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">1.7. Regular Expressions</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">1.9. What You Don't Know Won't Hurt You (Much)</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
