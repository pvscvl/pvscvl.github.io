<html>
<head>
<title>Statements and Declarations (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Statements and Declarations">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_21.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm">Part 2: The Gory Details</a></td><td align="right" valign="top" width="172"><a href="ch04_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h1 class="chapter">Chapter 4.  Statements and Declarations</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch04_01.htm">Simple Statements</a>
<br>
<a href="ch04_02.htm">Compound Statements</a>
<br>
<a href="ch04_03.htm">if and unless Statements</a>
<br>
<a href="ch04_04.htm">Loop Statements</a>
<br>
<a href="ch04_05.htm">Bare Blocks</a>
<br>
<a href="ch04_06.htm">goto</a>
<br>
<a href="ch04_07.htm">Global Declarations</a>
<br>
<a href="ch04_08.htm">Scoped Declarations</a>
<br>
<a href="ch04_09.htm">Pragmas</a>
<br>
</p>
</div>

<a name="INDEX-1030"></a><a name="INDEX-1031"></a><a name="INDEX-1032"></a>
<p>A Perl program consists of a sequence of declarations and statements.
A declaration may be placed anywhere a statement may be placed, but
its primary effect occurs at compile time.  A few declarations do
double duty as ordinary statements, but most are totally transparent
at run time.  After compilation, the main sequence of statements is
executed just once.</p>

<p>
<a name="INDEX-1033"></a><a name="INDEX-1034"></a>
Unlike many programming languages, Perl doesn't require variables to
be explicitly declared; they spring into existence upon their first
use, whether you've declared them or not.  If you try to use a value
from a variable that's never had a value assigned to it, it's quietly
treated as <tt class="literal">0</tt> when used as a number, as
<tt class="literal">""</tt> (the null string) when used as a string, or
simply as false when used as a logical value.  If you prefer to be
warned about using undefined values as though they were real strings
or numbers, or even to treat doing so as an error, the <tt class="literal">use
warnings</tt> declaration will take care of that; see the section <a href="ch04_09.htm">Section 4.9, "Pragmas"</a> at the end of this chapter.</p>

<p>
<a name="INDEX-1035"></a><a name="INDEX-1036"></a>
You <em class="emphasis">may</em> declare your variables though, if you
like, using either <tt class="literal">my</tt> or <tt class="literal">our</tt> in
front of the variable name.  You can even make it an error to use an
undeclared variable.  This kind of discipline is fine, but you have to
declare that you want the discipline.  Normally, Perl minds its own
business about your programming habits, but under the <tt class="literal">use
strict</tt> declaration, the use of undeclared variables is
apprehended at compile time.  Again, see <a href="ch04_09.htm">Section 4.9, "Pragmas"</a>.</p>


<h2 class="sect1">4.1. Simple Statements</h2>

<a name="INDEX-1037"></a>
<p>
<a name="INDEX-1038"></a><a name="INDEX-1039"></a><a name="INDEX-1040"></a>
A simple statement is an expression evaluated for its side effects.
Every simple statement must end in a semicolon, unless it is the
final statement in a block.  In that case, the semicolon is
optional--Perl knows that you must be done with the statement, since
you've finished the block.  But put the semicolon in anyway if it's
at the end of a multiline block, because you might eventually add
another line.</p>

<p>
<a name="INDEX-1041"></a>
Even though
operators like <tt class="literal">eval {}</tt>, <tt class="literal">do {}</tt>,
and <tt class="literal">sub {}</tt> all look like compound statements, they
really aren't.  True, they allow multiple statements on the inside,
but that doesn't count.  From the outside, those operators are just
terms in an expression, and thus they need an explicit semicolon if
used as the last item in a statement.</p>

<p>
<a name="INDEX-1042"></a><a name="INDEX-1043"></a><a name="INDEX-1044"></a><a name="INDEX-1045"></a>
Any simple statement may optionally be followed by a single modifier,
just before the terminating semicolon (or block ending).  The possible
modifiers are:
<blockquote>
<pre class="programlisting">if <em class="replaceable">EXPR</em>
unless <em class="replaceable">EXPR</em>
while <em class="replaceable">EXPR</em>
until <em class="replaceable">EXPR</em>
foreach <em class="replaceable">LIST</em>
</pre>
</blockquote>

The <tt class="literal">if</tt> and <tt class="literal">unless</tt> modifiers work pretty much as they do in English:
<blockquote>
<pre class="programlisting">$trash-&gt;take('out') if $you_love_me;
shutup() unless $you_want_me_to_leave;</pre>
</blockquote>
</p>

<p>The <tt class="literal">while</tt> and <tt class="literal">until</tt> modifiers
evaluate repeatedly.  As you might expect, a <tt class="literal">while</tt>
modifier keeps executing the expression as long as its expression
remains true, and an <tt class="literal">until</tt> modifier keeps executing
only as long as it remains false:
<blockquote>
<pre class="programlisting">$expression++ while -e "$file$expression";
kiss('me') until $I_die;</pre>
</blockquote>
<a name="INDEX-1046"></a><a name="INDEX-1047"></a>
</p>

<p>The <tt class="literal">foreach</tt> modifier (also spelled
<tt class="literal">for</tt>) evaluates once for each element in its
<em class="replaceable">LIST</em>, with <tt class="literal">$_</tt> aliased to
the current element:
<blockquote>
<pre class="programlisting">s/java/perl/ for @resumes;
print "field: $_\n" foreach split /:/, $dataline;</pre>
</blockquote>
<a name="INDEX-1048"></a><a name="INDEX-1049"></a><a name="INDEX-1050"></a>
</p>

<p>The <tt class="literal">while</tt> and <tt class="literal">until</tt> modifiers
have the usual while-loop semantics (conditional evaluated first),
except when applied to a <tt class="literal">do</tt><em class="replaceable">BLOCK</em> (or to the now-deprecated
<tt class="literal">do</tt><em class="replaceable">SUBROUTINE</em>
statement), in which case the block executes once before the
conditional is evaluated.  This allows you to write loops like this:
<blockquote>
<pre class="programlisting">do {
    $line = &lt;STDIN&gt;;
    ...
} until $line eq ".\n";</pre>
</blockquote>

See the three different <tt class="literal">do</tt> entries in <a href="ch29_01.htm">Chapter 29, "Functions"</a>.  Note also that the loop-control
operators described later will not work in this construct, since
modifiers don't take loop labels. You can always place an extra block
around it to terminate early, or inside it to iterate early, as
described later in the section <a href="ch04_05.htm">Section 4.5, "Bare Blocks"</a>.  Or you could write a
real loop with multiple loop controls inside.  Speaking of real loops,
we'll talk about compound statements next.</p>

















































































<a name="INDEX-1249"></a><a name="INDEX-1250"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_21.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.21. C Operators Missing from Perl</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.2. Compound Statements</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
