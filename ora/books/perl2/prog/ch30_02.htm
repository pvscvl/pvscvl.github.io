<html>
<head>
<title>A Tour of the Perl Library (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="A Tour of the Perl Library">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch30_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch30_01.htm">Chapter 30: The Standard Perl Library</a></td><td align="right" valign="top" width="172"><a href="ch31_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">30.2. A Tour of the Perl Library</h2>

<p>You'll save an enormous amount of time if you make the effort to
familiarize yourself with the standard Perl library, because there's no
reason to reinvent those particular wheels.  You should be aware,
however, that this collection contains a wide range of material.
Although some libraries may be extremely helpful, others might be
completely irrelevant to your needs.  For example, if you're only
writing in 100% pure Perl, those modules that support the dynamic
loading of C and C++ extensions aren't going to help you much.</p>

<p>Perl expects to find library modules somewhere in its library
"include" path, <tt class="literal">@INC</tt>. This array specifies
the ordered list of directories Perl searches
when you load in some library code using the keywords <tt class="literal">do</tt>,
<tt class="literal">require</tt>, or <tt class="literal">use</tt>.  You can easily list out those directories
by calling Perl with the <span class="option">-V</span> switch for Very Verbose Version information,
or with this simple code:
<blockquote>
<pre class="programlisting">% <tt class="userinput"><b>perl -le "print foreach @INC"</b></tt>
/usr/libdata/perl5/sparc-openbsd/5.00503
/usr/local/libdata/perl5/sparc-openbsd/5.00503
/usr/libdata/perl5
/usr/local/libdata/perl5
/usr/local/libdata/perl5/site_perl/sparc-openbsd
/usr/libdata/perl5/site_perl/sparc-openbsd
/usr/local/libdata/perl5/site_perl
/usr/libdata/perl5/site_perl
.</pre>
</blockquote>

That's only one sample of possible output.  Every installation of Perl
uses its own paths.  The important thing is that, although contents
will vary depending upon your vendor's and your site's installation
policy, you can rely upon all standard libraries being installed with
Perl.  If you want to find out where a file was actually loaded from,
consult the <tt class="literal">%INC</tt> variable.  For a module file, you
can find exactly where Perl is getting it from with this command:
<blockquote>
<pre class="programlisting">% <tt class="userinput"><b>perldoc -l <em class="replaceable">MODULE</em></b></tt>
</pre>
</blockquote>
If you look through the directories in <tt class="literal">@INC</tt> and
their subdirectories, you'll find several different kinds of files
installed.  Most have names ending in <em class="emphasis">.pm</em>, but
some end in <em class="emphasis">.pl</em>, <em class="emphasis">.ph</em>,
<em class="emphasis">.al</em>, or <em class="emphasis">.so</em>.  The ones that
most interest you are the first set, because a suffix of
<em class="emphasis">.pm</em> indicates that the file is a proper Perl
module.  More on those in a minute.</p>

<p>The few files you see there ending in <em class="emphasis">.pl</em> are
those old Perl libraries we mentioned earlier.  They are included for
compatibility with ancient releases of Perl from the 80s and early
90s.  Because of this, Perl code that worked back in, say, 1990,
should continue to behave properly without any fuss even if you have a
modern version of Perl installed.  When writing new code that makes
use of the standard Perl library, you should always elect to use the
<em class="emphasis">.pm</em> version over any <em class="emphasis">.pl</em>,
where possible.  That's because modules don't pollute your namespace
the way many of the old <em class="emphasis">.pl</em> files do.</p>

<p>One note on the use of the <em class="emphasis">.pl</em> extension: it
means Perl library, not Perl program.  Although
<em class="emphasis">.pl</em> is sometimes used to identify Perl programs
on web servers that need to distinguish executable programs from
static content in the same directory, we suggest that you use a suffix
of <em class="emphasis">.plx</em> instead to indicate an executable Perl
program.  (Similar advice holds for operating systems that choose
interpreters based on filename extensions.)</p>

<p>Files with extensions of <em class="emphasis">.al</em> are small pieces of
larger modules will be automatically loaded when you use their
parent <em class="emphasis">.pm</em> file.  If you build your module layout
using the standard <em class="emphasis">h2xs</em>
tool that comes with Perl (and if you haven't used Perl's <span class="option">-A</span>
flag), the
<tt class="literal">make install</tt> procedure will use the
<tt class="literal">AutoLoader</tt> module to create these
little <em class="emphasis">.al</em> files for you.</p>

<p>The <em class="emphasis">.ph</em> files were made by the standard
<em class="emphasis">h2ph</em> program, a somewhat aging but still
occasionally necessary tool that does its best to translate C
preprocessor directives into Perl.  The resulting
<em class="emphasis">.ph</em> files contain constants sometimes needed by
low-level functions like <tt class="literal">ioctl</tt>,
<tt class="literal">fcntl</tt>, or <tt class="literal">syscall</tt>.  (Nowadays
most of these values are more conveniently and portably available in
standard modules such as the <tt class="literal">POSIX</tt>,
<tt class="literal">Errno</tt>, <tt class="literal">Fcntl</tt>, or
<tt class="literal">Socket</tt> modules.)  See
<em class="emphasis">perlinstall</em> for how to install these optional but
sometimes important components.</p>

<p>One last file extension you might encounter while poking around is
<em class="emphasis">.so</em> (or whatever your system uses for shared
libraries).  These <em class="emphasis">.so</em> files are
platform-dependent portions of extension modules.  Originally written
in C or C++, these modules have been compiled into dynamically
relocatable object code.  The end user doesn't need to be aware of
their existence, however, because the module interface hides them.
When the user code says <tt class="literal">require Module</tt> or
<tt class="literal">use Module</tt>, Perl loads
<em class="emphasis">Module.pm</em> and executes it, which lets the module
pull in any other necessary pieces, such as
<em class="emphasis">Module.so</em> or any autoloaded
<em class="emphasis">.al</em> components.  In fact, the module could load
anything it jolly well pleases, including 582 other modules.  It could
download all of CPAN if it felt like it, and maybe the last two years
of <em class="emphasis">freshmeat.net</em> archives.</p>

<p>A module is not just a static chunk of code in Perl.  It's an active
agent that figures out how to implement an interface on your behalf.
It may follow all the standard conventions, or it may not.  It's allowed to
do anything to warp the meaning of the rest of your program, up to and
including translating the rest of your program into SPITBOL.  This sort
of chicanery is considered perfectly fair as long as it's well
documented.  When you use such a Perl module, you're agreeing to 
<em class="emphasis">its</em> contract, not a standard contract written by Perl.</p>

<p>So you'd best read the fine print.</p>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch30_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch31_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">30.1. Library Science</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">31. Pragmatic Modules</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
