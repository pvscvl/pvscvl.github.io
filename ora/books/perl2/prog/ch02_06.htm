<html>
<head>
<title>Scalar Values (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Scalar Values">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm">Chapter 2: Bits and Pieces</a></td><td align="right" valign="top" width="172"><a href="ch02_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">2.6. Scalar Values</h2>

<p>
<a name="INDEX-521"></a><a name="INDEX-522"></a><a name="INDEX-523"></a><a name="INDEX-524"></a><a name="INDEX-525"></a><a name="INDEX-526"></a><a name="INDEX-527"></a><a name="INDEX-528"></a>
Whether it's named directly or indirectly, and whether it's in a
variable, or an array element, or is just a temporary value, a scalar
always contains a single value.  This value may be a number, a string,
or a reference to another piece of data.  Or, there might even be no
value at all, in which case the scalar is said to be
<em class="emphasis">undefined</em>.  Although we might speak of a scalar
as "containing" a number or a string, scalars are typeless: you are
not required to declare your scalars to be of type integer or
floating-point or string or whatever.<a href="#FOOTNOTE-9">[9]</a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-9"></a>
<p>[9] Future versions
of Perl will allow you to insert <tt class="literal">int</tt>,
<tt class="literal">num</tt>, and <tt class="literal">str</tt> type declarations,
not to enforce strong typing, but only to give the optimizer hints
about things that it might not figure out for itself.  Generally,
you'd only consider doing this in tight code that must run very fast,
so we're not going to tell you how to do it yet. Optional types are
also used by the pseudohash mechanism, in which case they can function
as types do in a more strongly typed language.  See
<a href="ch08_01.htm">Chapter 8, "References"</a> for more.</p>

</blockquote>

<p>
<a name="INDEX-529"></a><a name="INDEX-530"></a>
Perl stores strings as sequences of characters, with no arbitrary constraints
on length or content.  In human terms, you don't have to decide in advance
how long your strings are going to get, and you can include any characters
including null bytes within your string.  Perl stores numbers as signed
integers if possible, or as double-precision floating-point values in
the machine's native format otherwise. Floating-point values are not
infinitely precise.  This is important to remember because comparisons
like <tt class="literal">(10/3 == 1/3*10)</tt> tend to fail mysteriously.</p>

<p>
<a name="INDEX-531"></a><a name="INDEX-532"></a><a name="INDEX-533"></a>
Perl converts between the various subtypes as needed, so you can treat
a number as a string or a string as a number, and Perl will do the
Right Thing.  To convert from string to number, Perl internally uses
something like the C library's <em class="emphasis">atof</em>(3)
function.  To convert from number to string, it does the equivalent of
an <em class="emphasis">sprintf</em>(3) with a format of
<tt class="literal">"%.14g"</tt> on most machines.  Improper conversions of
a nonnumeric string like <tt class="literal">foo</tt> to a number count as
numeric 0; these trigger
warnings if you have them enabled, but are silent otherwise.  See
<a href="ch05_01.htm">Chapter 5, "Pattern Matching"</a>, for examples of
detecting what sort of data a string holds.</p>

<p>
<a name="INDEX-534"></a>
Although strings and numbers are interchangeable for nearly all intents,
references are a bit different.  They're strongly typed, uncastable
pointers with built-in reference-counting and destructor invocation.  That is,
you can use them to create complex data types, including user-defined objects.
But they're still scalars, for all that, because no matter how complicated
a data structure gets, you often want to treat it as a single value.</p>

<p>
<a name="INDEX-535"></a><a name="INDEX-536"></a>
By <em class="emphasis">uncastable</em>, we mean that you can't, for
instance, convert a reference to an array into a reference to a hash.
References are not castable to other pointer types.  However, if you
use a reference as a number or a string, you will get a numeric or
string value, which is guaranteed to retain the uniqueness of the
reference even though the "referenceness" of the value is lost when
the value is copied from the real reference.  You can compare such
values or extract their type.  But you can't do much else with the
values, since there's no way to convert numbers or strings back into
references.  Usually, this is not a problem, because Perl doesn't
force you to do pointer arithmetic--or even allow it.  See <a href="ch08_01.htm">Chapter 8, "References"</a> for more on references.</p>


<h3 class="sect2">2.6.1. Numeric Literals</h3>

<a name="INDEX-537"></a><a name="INDEX-538"></a>
<p>
<a name="INDEX-539"></a>
Numeric literals are specified in any of several customary<a href="#FOOTNOTE-10">[10]</a> floating-point or integer formats:
<blockquote>
<pre class="programlisting">$x = 12345;                # integer
$x = 12345.67;             # floating point
$x = 6.02e23;              # scientific notation
$x = 4_294_967_296;        # underline for legibility
$x = 0377;                 # octal
$x = 0xffff;               # hexadecimal
$x = 0b1100_0000;          # binary</pre>
</blockquote>
<a name="INDEX-540"></a><a name="INDEX-541"></a><a name="INDEX-542"></a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-10"></a>
<p>[10]Customary in Unix culture, that is.  If you're from a different culture,
welcome to ours!</p>

</blockquote>

<p>
<a name="INDEX-543"></a><a name="INDEX-544"></a><a name="INDEX-545"></a><a name="INDEX-546"></a><a name="INDEX-547"></a><a name="INDEX-548"></a><a name="INDEX-549"></a><a name="INDEX-550"></a>
Because Perl uses the comma as a list separator, you cannot use it
to separate the thousands in a large number.  Perl does allow you to
use an underscore character instead.  The underscore only works within
literal numbers specified in your program, not for strings functioning
as numbers or data read from somewhere else.  Similarly, the leading
<tt class="literal">0x</tt> for hexadecimal, <tt class="literal">0b</tt> for binary, and <tt class="literal">0</tt> for octal work only
for literals.  The automatic conversion of a string to a number does not
recognize these prefixes--you must do an explicit conversion<a href="#FOOTNOTE-11">[11]</a> with the <tt class="literal">oct</tt> function--which
works for hex and binary numbers, too, as it happens, provided you supply
the <tt class="literal">0x</tt> or <tt class="literal">0b</tt> on the front.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-11"></a>
<p>[11]Sometimes people think Perl should convert all incoming data for them. But there are far too many decimal numbers with leading zeros in
the world to make Perl do this automatically.  For example, the Zip
Code for the O'Reilly &amp; Associates office in Cambridge, MA, is <tt class="literal">02140</tt>. The postmaster would get confused if your mailing label program turned
<tt class="literal">02140</tt> into <tt class="literal">1120</tt> decimal.</p>

</blockquote>






<h3 class="sect2">2.6.2. String Literals</h3>

<p>
<a name="INDEX-551"></a><a name="INDEX-552"></a><a name="INDEX-553"></a><a name="INDEX-554"></a><a name="INDEX-555"></a><a name="INDEX-556"></a><a name="INDEX-557"></a>
String literals are usually surrounded by either single or double
quotes.  They work much like Unix shell quotes: double-quoted string
literals are subject to backslash and variable interpolation, but
single-quoted strings are not (except for <tt class="literal">\'</tt> and
<tt class="literal">\\</tt>, so that you can embed single quotes and
backslashes into single-quoted strings).  If&nbsp;you want to embed any
other backslash sequences such as <tt class="literal">\n</tt> (newline), you
must use the double-quoted form.  (Backslash sequences are also known
as <em class="emphasis">escape&nbsp;sequences</em>, because you "escape" the
normal interpretation of characters 

temporarily.)
<a name="INDEX-558"></a>
</p>

<p>
<a name="INDEX-559"></a>
A single-quoted string must be separated from a preceding word by a
space because a single quote is a valid--though archaic--character in
an identifier.  Its use has been replaced by the more visually
distinct <tt class="literal">::</tt> sequence.  That means that
<tt class="literal">$main'var</tt> and <tt class="literal">$main::var</tt> are the
same thing, but the second is generally considered easier to read for
people and programs.</p>

<p>
<a name="INDEX-560"></a><a name="INDEX-561"></a>
Double-quoted strings are subject to various forms of character
interpolation, many of which will be familiar to programmers of other
languages.  These are listed in <a href="ch02_06.htm">Table 2-1</a>.</p>

<a name="perl2-ch-2-tab-4"></a>
<h4 class="objtitle">Table 2.1. Backslashed Character Escapes</h4>
<table border="1">

<tr>
<th>Code</th>
<th>Meaning</th>
</tr>




<tr>
<td><tt class="literal">\n</tt></td>
<td>Newline (usually LF)</td>
</tr>

<tr>
<td><tt class="literal">\r</tt></td>
<td>Carriage return (usually CR)</td>
</tr>

<tr>
<td><tt class="literal">\t</tt></td>
<td>Horizontal tab</td>
</tr>

<tr>
<td><tt class="literal">\f</tt></td>
<td>Form feed</td>
</tr>

<tr>
<td><tt class="literal">\b</tt></td>
<td>Backspace<a name="INDEX-562"></a></td>
</tr>

<tr>
<td><tt class="literal">\a</tt></td>
<td>Alert (bell)<a name="INDEX-563"></a></td>
</tr>

<tr>
<td><tt class="literal">\e</tt></td>
<td>ESC character<a name="INDEX-564"></a></td>
</tr>

<tr>
<td><tt class="literal">\033</tt></td>
<td>ESC in octal<a name="INDEX-565"></a></td>
</tr>

<tr>
<td><tt class="literal">\x7f</tt></td>
<td>DEL in hexadecimal<a name="INDEX-566"></a></td>
</tr>

<tr>
<td><tt class="literal">\cC</tt></td>
<td>Control-C<a name="INDEX-567"></a></td>
</tr>

<tr>
<td><tt class="literal">\x{263a}</tt></td>
<td>Unicode (smiley)<a name="INDEX-568"></a></td>
</tr>

<tr>
<td><tt class="literal">\N{</tt><em class="replaceable">NAME</em><tt class="literal">}</tt><a name="INDEX-569"></a></td>
<td>Named character</td>
</tr>


</table>

<p>
<a name="INDEX-570"></a>
The
<tt class="literal">\N{</tt><em class="replaceable">NAME</em><tt class="literal">}</tt>
notation is usable only in conjunction with the <tt class="literal">use
charnames</tt> pragma described in <a href="ch31_01.htm">Chapter 31, "Pragmatic Modules"</a>.  This allows you to specify
character names symbolically, as in <tt class="literal">\N{GREEK SMALL LETTER
SIGMA}</tt>, <tt class="literal">\N{greek:Sigma}</tt>, or
<tt class="literal">\N{sigma}</tt>--depending on how you call the pragma.
See also <a href="ch15_01.htm">Chapter 15, "Unicode"</a>.</p>

<p>
<a name="INDEX-571"></a>
There are also escape sequences to modify the case or "meta-ness" of
subsequent characters.  See <a href="ch02_06.htm">Table 2-2</a>.</p>

<a name="perl2-ch-2-tab-5"></a>
<h4 class="objtitle">Table 2.2. Translation Escapes</h4>
<table border="1">

<tr>
<th>Code</th>
<th>Meaning</th>
</tr>




<tr>
<td><tt class="literal">\u</tt></td>
<td>Force next character to uppercase ("titlecase" in Unicode).<a name="INDEX-572"></a></td>
</tr>

<tr>
<td><tt class="literal">\l</tt></td>
<td>Force next character to lowercase.<a name="INDEX-573"></a></td>
</tr>

<tr>
<td><tt class="literal">\U</tt></td>
<td>Force all following characters to uppercase.</td>
</tr>

<tr>
<td><tt class="literal">\L</tt></td>
<td>Force all following characters to lowercase.</td>
</tr>

<tr>
<td><tt class="literal">\Q</tt></td>
<td>Backslash all following nonalphanumeric characters.<a name="INDEX-574"></a></td>
</tr>

<tr>
<td><tt class="literal">\E</tt></td>
<td>End <tt class="literal">\U</tt>, <tt class="literal">\L</tt>, or <tt class="literal">\Q</tt>.<a name="INDEX-575"></a></td>
</tr>


</table>

<a name="INDEX-576"></a><a name="INDEX-577"></a>
<p>You may also embed newlines directly in your strings; that is, they
can begin and end on different lines.  This is often useful,
but it also means that if you forget a trailing quote, the error
will not be reported until Perl finds another line containing the
quote character, which may be much further on in the script.
Fortunately, this usually causes an immediate syntax error on the
same line, and Perl is then smart enough to warn you that you might
have a runaway string where it thought the string started.</p>

<p>
<a name="INDEX-578"></a><a name="INDEX-579"></a>
Besides the backslash escapes listed above, double-quoted strings are
subject to <em class="emphasis">variable interpolation</em> of scalar and list values.  This
means that you can insert the values of certain variables directly into
a string literal.  It's really just a handy form of string
concatenation.<a href="#FOOTNOTE-12">[12]</a> Variable
interpolation may be done for scalar variables, entire arrays (but not
hashes), single elements from an array or hash, or slices (multiple
subscripts) of an array or hash.  Nothing else interpolates.  In other
words, you may only interpolate expressions that begin with <tt class="literal">$</tt> or
<tt class="literal">@</tt>, because those are the two characters (along with backslash) that
the string parser looks for.  Inside strings, a literal <tt class="literal">@</tt> that is
not part of an array or slice identifier but is followed by an
alphanumeric character must be escaped with a backslash (<tt class="literal">\@</tt>), or
else a compilation error will result.  Although a complete hash
specified with a <tt class="literal">%</tt> may not be interpolated into the string, single
hash values or hash slices are okay, because they begin with <tt class="literal">$</tt> and
<tt class="literal">@</tt> respectively.
<a name="INDEX-580"></a><a name="INDEX-581"></a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-12"></a>
<p>[12]With warnings enabled, Perl may report
undefined values interpolated into strings as using the concatenation
or join operations, even though you don't actually use those operators
there.  The compiler created them for you anyway.</p>

</blockquote>

<p>The following code segment prints out "<tt class="literal">The price is $100.</tt>":
<blockquote>
<pre class="programlisting">$Price = '$100';                    # not interpolated
print "The price is $Price.\n";     # interpolated</pre>
</blockquote>
<a name="INDEX-582"></a><a name="INDEX-583"></a><a name="INDEX-584"></a>
</p>

<p>As in some shells, you can put braces around the identifier to
distinguish it from following alphanumerics: <tt class="literal">"How ${verb}able!"</tt>.
An identifier within such braces is forced to be a string, as is
any single identifier within a hash subscript.  For

example:
<blockquote>
<pre class="programlisting">$days{'Feb'}</pre>
</blockquote>

can be written as:
<blockquote>
<pre class="programlisting">$days{Feb}</pre>
</blockquote>

and the quotes will be assumed.  Anything more complicated in the
subscript is interpreted as an expression, and then you'd have to
put in the quotes:
<blockquote>
<pre class="programlisting">$days{'February 29th'}   # Ok.
$days{"February 29th"}   # Also ok. "" doesn't have to interpolate.
$days{ February 29th }   # WRONG, produces parse error.</pre>
</blockquote>

In particular, you should always use quotes in slices such as:
<blockquote>
<pre class="programlisting">@days{'Jan','Feb'}       # Ok.
@days{"Jan","Feb"}       # Also ok.
@days{ Jan,  Feb }       # Kinda wrong (breaks under use strict)</pre>
</blockquote>
</p>

<p>
<a name="INDEX-585"></a>
Apart from the subscripts of interpolated array and hash variables,
there are no multiple levels of interpolation.  Contrary to the
expectations of shell programmers, backticks do not interpolate
within double quotes, nor do single quotes impede evaluation of
variables when used within double quotes.  Interpolation is extremely
powerful but strictly controlled in Perl.  It happens only inside
double quotes, and in certain other "double-quotish" operations
that we'll describe in the next section:
<blockquote>
<pre class="programlisting">print "\n";              # Ok, print a newline.
print  \n ;              # WRONG, no interpolative context.</pre>
</blockquote>
</p>

<a name="INDEX-586"></a>





<a name="ch02-sect-pick"></a>
<h3 class="sect2">2.6.3. Pick Your Own Quotes</h3>

<a name="INDEX-587"></a><a name="INDEX-588"></a><a name="INDEX-589"></a><a name="INDEX-590"></a>
<p>Although we usually think of quotes as literal values, in Perl they
function more like operators, providing various kinds of interpolating
and pattern-matching capabilities.  Perl provides the customary
quote characters for these behaviors, but also provides a more general way for
you to choose your quote character for any of them.  In
<a href="ch02_06.htm">Table 2-3</a>, any nonalphanumeric, nonwhitespace
delimiter may be used in place of <tt class="literal">/</tt>.  (The newline
and space characters are no longer allowed as delimiters, although ancient
versions of Perl once allowed this.)</p>

<a name="perl2-ch-2-tab-5a"></a>
<h4 class="objtitle">Table 2.3. Quote Constructs</h4>
<table border="1">

<tr>
<th>Customary</th>
<th>Generic</th>
<th>Meaning</th>
<th>Interpolates</th>
</tr>




<tr>
<td><tt class="literal">''</tt></td>
<td><tt class="literal">q//</tt></td>
<td>Literal string</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">""</tt></td>
<td><tt class="literal">qq//</tt></td>
<td>Literal string</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">``</tt></td>
<td><tt class="literal">qx//</tt></td>
<td>Command execution</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">()</tt></td>
<td><tt class="literal">qw//</tt></td>
<td>Word list</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">//</tt></td>
<td><tt class="literal">m//</tt></td>
<td>Pattern match</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">s///</tt></td>
<td><tt class="literal">s///</tt></td>
<td>Pattern substitution</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">y///</tt></td>
<td><tt class="literal">tr///</tt></td>
<td>Character translation</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">""</tt></td>
<td><tt class="literal">qr//</tt></td>
<td>Regular expression</td>
<td>Yes</td>
</tr>


</table>

<p>
<a name="INDEX-591"></a>
Some of these are simply forms of "syntactic sugar" to let you avoid
putting too many backslashes into quoted strings, particularly into
pattern matches where your regular slashes and backslashes tend to
get all tangled.</p>

<p>
<a name="INDEX-592"></a>
If you choose single quotes for delimiters, no variable interpolation
is done even on those forms that ordinarily interpolate.  If the
opening delimiter is an opening parenthesis, bracket, brace, or
angle bracket, the closing delimiter will be the corresponding
closing character.  (Embedded occurrences of the delimiters must
match in pairs.)  Examples:
<blockquote>
<pre class="programlisting">$single = q!I said, "You said, 'She said it.'"!;

$double = qq(Can't we get some "good" $variable?);


$chunk_of_code = q {
    if ($condition) {
        print "Gotcha!";
    }
};</pre>
</blockquote>
<a name="INDEX-593"></a>
The last example demonstrates that you can use whitespace between the
quote specifier and its initial bracketing character.  For two-element
constructs like <tt class="literal">s///</tt> and <tt class="literal">tr///</tt>,
if the first pair of quotes is a bracketing pair, the second part gets
its own starting quote character.  In fact, the second pair needn't be
the same as the first pair.  So you can write things like
<tt class="literal">s&lt;foo&gt;(bar)</tt> or
<tt class="literal">tr(a-f)[A-F]</tt>.  Because whitespace is also allowed
between the two inner quote characters, you could even write that last
one as:
<blockquote>
<pre class="programlisting">tr (a-f)
   [A-F];</pre>
</blockquote>

Whitespace is not allowed, however, when <tt class="literal">#</tt> is being used as the
quoting character.  <tt class="literal">q#foo#</tt> is parsed as the string <tt class="literal">'foo'</tt>, while
<tt class="literal">q #foo#</tt> is parsed as the quote operator <tt class="literal">q</tt> followed by a comment.
Its delimiter will be taken from the next line.  Comments can also be
placed in the middle of two-element constructs, which allows you to
write:
<blockquote>
<pre class="programlisting">s {foo}   # Replace foo
  {bar};  #    with bar.

tr [a-f]  # Transliterate lowercase hex
   [A-F]; #            to uppercase hex</pre>
</blockquote>
<a name="INDEX-594"></a>
</p>






<h3 class="sect2">2.6.4. Or Leave the Quotes Out Entirely</h3>

<a name="INDEX-595"></a><a name="INDEX-596"></a><a name="INDEX-597"></a><a name="INDEX-598"></a>
<p>A name that has no other interpretation in the grammar will be
treated as if it were a quoted string.  These are known as
<em class="emphasis">barewords</em>.<a href="#FOOTNOTE-13">[13]</a> As with filehandles and labels, a
bareword that consists entirely of lowercase letters risks conflict
with future reserved words.  If you have warnings enabled, Perl will
warn you about barewords.  For example:
<blockquote>
<pre class="programlisting">@days = (Mon,Tue,Wed,Thu,Fri);
print STDOUT hello, ' ', world, "\n";</pre>
</blockquote>
<a name="INDEX-599"></a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-13"></a>
<p>[13] Variable names, filehandles, labels, and the
like are not considered barewords because they have a meaning forced by
a preceding token or a following token (or both).  Predeclared names
such as subroutines aren't barewords either.  It's only a bareword when
the parser has no clue.</p>

</blockquote>

<p>sets the array <tt class="literal">@days</tt> to the short form of the weekdays 
and prints "<tt class="literal">hello world</tt>" followed by a newline on <tt class="literal">STDOUT</tt>.  If you leave the
filehandle out, Perl tries to interpret <tt class="literal">hello</tt> as a filehandle,
resulting in a syntax error.  Because this is so error-prone, some
people may wish to avoid barewords entirely.  The quoting operators
listed earlier provide many convenient forms, including the <tt class="literal">qw//</tt> "quote
words" construct which nicely quotes a list of space-separated words:
<blockquote>
<pre class="programlisting">@days = qw(Mon Tue Wed Thu Fri);
print STDOUT "hello world\n";</pre>
</blockquote>

You can go as far as to outlaw barewords entirely.  If you say:
<blockquote>
<pre class="programlisting">use strict 'subs';</pre>
</blockquote>

then any bareword will produce a compile-time error.  The restriction
lasts through the end of the enclosing scope.  An inner scope may
countermand this by saying:
<blockquote>
<pre class="programlisting">no strict 'subs';</pre>
</blockquote>

Note that the bare identifiers in constructs like:
<blockquote>
<pre class="programlisting">"${verb}able"
$days{Feb}</pre>
</blockquote>

are not considered barewords since they're allowed by explicit rule
rather than by having "no other interpretation in the grammar".
<a name="INDEX-600"></a><a name="INDEX-601"></a>
</p>

<p>
<a name="INDEX-602"></a><a name="INDEX-603"></a>
An unquoted name with a trailing double colon, such as
<tt class="literal">main::</tt> or <tt class="literal">Dog::</tt>, is always
treated as the package name.  Perl turns the would-be bareword
<tt class="literal">Camel::</tt> into the string "<tt class="literal">Camel</tt>"
at compile time, so this usage is not subject to rebuke by
<tt class="literal">use strict</tt>.</p>






<h3 class="sect2">2.6.5. Interpolating Array Values</h3>

<a name="INDEX-604"></a><a name="INDEX-605"></a><a name="INDEX-606"></a><a name="INDEX-607"></a><a name="INDEX-608"></a>
<p>Array variables are interpolated into double-quoted strings by joining
all elements of the array with the separator specified in the
<tt class="literal">$"</tt> variable<a href="#FOOTNOTE-14">[14]</a> (which contains a space by
default).  The following are equivalent:
<blockquote>
<pre class="programlisting">$temp = join( $", @ARGV );
print $temp;

print "@ARGV";</pre>
</blockquote>
<a name="INDEX-609"></a><a name="INDEX-610"></a><a name="INDEX-611"></a>
Within search patterns, which also undergo double-quotish interpolation,
there is an unfortunate ambiguity:  is <tt class="literal">/$foo[bar]/</tt> to be interpreted
as <tt class="literal">/${foo}[bar]/</tt> (where <tt class="literal">[bar]</tt> is a character class for the
regular expression) or as <tt class="literal">/${foo[bar]}/</tt> (where <tt class="literal">[bar]</tt> is the
subscript to array <tt class="literal">@foo</tt>)?  If <tt class="literal">@foo</tt> doesn't otherwise exist,
it's obviously a character class.  If <tt class="literal">@foo</tt> exists, Perl takes a
good guess about <tt class="literal">[bar]</tt>, and is almost always right.<a href="#FOOTNOTE-15">[15]</a>  If it does guess wrong,
or if you're just plain paranoid, you can force the correct
interpretation with braces as shown earlier.  Even if you're merely
prudent, it's probably not a bad idea.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-14"></a>
<p>[14]<tt class="literal">$LIST_SEPARATOR</tt> if you use the English module
bundled with Perl.</p>

</blockquote>
<blockquote class="footnote">

<a name="FOOTNOTE-15"></a>
<p>[15]The guesser is too boring to describe in full, but basically takes
a weighted average of all the things that look like character classes
(<tt class="literal">a-z</tt>, <tt class="literal">\w</tt>, initial <tt class="literal">^</tt>) versus things that look like expressions
(variables or reserved words).</p>

</blockquote>






<h3 class="sect2">2.6.6. "Here" Documents</h3>

<a name="INDEX-612"></a><a name="INDEX-613"></a><a name="INDEX-614"></a><a name="INDEX-615"></a><a name="INDEX-616"></a><a name="INDEX-617"></a><a name="INDEX-618"></a>
<p>A line-oriented form of quoting is based on the Unix shell's
<em class="emphasis">here-document</em> syntax.  It's line-oriented in the
sense that the delimiters are lines rather than characters.  The
starting delimiter is the current line, and the terminating delimiter
is a line consisting of the string you specify.  Following a
<tt class="literal">&lt;&lt;</tt>, you specify the string to terminate the
quoted material, and all lines following the current line down to but
not including the terminating line are part of the string.  The
terminating string may be either an identifier (a word) or some quoted
text.  If quoted, the type of quote determines the treatment of the
text, just as it does in regular quoting.  An unquoted identifier
works as though it were in double quotes. A backslashed identifier
works as though it were in single quotes (for compatibility with shell
syntax).  There must be no space between the
<tt class="literal">&lt;&lt;</tt> and an unquoted identifier, although
whitespace is permitted if you specify a quoted string instead of the
bare identifier.  (If you insert a space, it will be treated as a null
identifier, which is valid but deprecated, and matches the first blank
line--see the first <tt class="literal">Hurrah!</tt> example below.)  The
terminating string must appear by itself, unquoted and with no extra
whitespace on either side, on the terminating line.
<blockquote>
<pre class="programlisting">print &lt;&lt;EOF;    # same as earlier example
The price is $Price.
EOF

print &lt;&lt;"EOF";  # same as above, with explicit quotes
The price is $Price.
EOF

print &lt;&lt;'EOF';    # single-quoted quote
All things (e.g. a camel's journey through
A needle's eye) are possible, it's true.
But picture how the camel feels, squeezed out
In one long bloody thread, from tail to snout.
                                -- C.S. Lewis
EOF

print &lt;&lt; x 10;    # print next line 10 times
The camels are coming!  Hurrah!  Hurrah!

print &lt;&lt;"" x 10;  # the preferred way to write that
The camels are coming!  Hurrah!  Hurrah!

print &lt;&lt;`EOC`;    # execute commands
echo hi there
echo lo there
EOC

print &lt;&lt;"dromedary", &lt;&lt;"camelid";   # you can stack them
I said bactrian.
dromedary
She said llama.
camelid

funkshun(&lt;&lt;"THIS", 23, &lt;&lt;'THAT');   # doesn't matter if they're in parens
Here's a line
or two.
THIS
And here's another.
THAT</pre>
</blockquote>

Just don't forget that you have to put a semicolon on the end to finish
the statement, because Perl doesn't know you're not going to try to do this:
<blockquote>
<pre class="programlisting">print &lt;&lt;'odd'
2345
odd
    + 10000;   # prints 12345</pre>
</blockquote>
<a name="INDEX-619"></a><a name="INDEX-620"></a>
If you want your here docs to be indented with the rest of the code,
you'll need to remove leading whitespace from each line manually:
<blockquote>
<pre class="programlisting">($quote = &lt;&lt;'QUOTE') =~ s/^\s+//gm;
    The Road goes ever on and on,
    down from the door where it began.
QUOTE</pre>
</blockquote>

You could even populate an array with the lines of a here document as
follows:
<blockquote>
<pre class="programlisting">@sauces = &lt;&lt;End_Lines =~ m/(\S.*\S)/g;
   normal tomato
   spicy tomato
   green chile
   pesto
   white wine
End_Lines</pre>
</blockquote>
</p>






<h3 class="sect2">2.6.7. V-String Literals</h3>

<p>
<a name="INDEX-621"></a><a name="INDEX-622"></a><a name="INDEX-623"></a><a name="INDEX-624"></a>
A literal that begins with a <tt class="literal">v</tt> and is followed by one or more
dot-separated integers is treated as a string literal composed of
characters with the specified ordinal values:
<blockquote>
<pre class="programlisting">$crlf = v13.10;           # ASCII carriage return, line feed</pre>
</blockquote>

These are called <em class="emphasis">v-strings</em>, short for "vector strings" or "version
strings" or anything else you can think of that starts with "v" and
deals with lists of integers.  They provide an alternate and more
legible way to construct strings when you want to specify the numeric
values of each character.  Thus, <tt class="literal">v1.20.300.4000</tt> is a more winsome way to
produce the same string value as any of:
<blockquote>
<pre class="programlisting">"\x{1}\x{14}\x{12c}\x{fa0}"
pack("U*", 1, 20, 300, 4000)
chr(1) . chr(20) . chr(300) . chr(4000)</pre>
</blockquote>

If such a literal has two or more dots (three or more integers), the
leading <tt class="literal">v</tt> may be omitted.
<blockquote>
<pre class="programlisting">print v9786;              # prints UTF-8 encoded SMILEY, "\x{263a}"
print v102.111.111;       # prints "foo"
print 102.111.111;        # same thing

use 5.6.0;                # require a particular Perl version (or later)

$ipaddr = 204.148.40.9;   # the IPv4 address of oreilly.com</pre>
</blockquote>

V-strings are useful for representing IP address and version numbers.
In particular, since characters can have an ordinal value larger than
255 these days, v-strings provide a way to represent version numbers of
any size that can be correctly compared with a simple string
comparison.</p>

<p>Version numbers and IP addresses stored in v-strings are not human
readable, since the individual integers are stored as arbitrary
characters.  To produce something legible, use the
<tt class="literal">v</tt> flag in a <tt class="literal">printf</tt> mask, like
<tt class="literal">"%vd"</tt>, as described under
<tt class="literal">sprintf</tt> in <a href="ch29_01.htm">Chapter 29, "Functions"</a>.
For more on Unicode strings, see <a href="ch15_01.htm">Chapter 15, "Unicode"</a>
and the <tt class="literal">use bytes</tt> pragma in
<a href="ch31_01.htm">Chapter 31, "Pragmatic Modules"</a>; for comparing version
strings using string comparison operators, see <tt class="literal">$^V</tt> in 
<a href="ch28_01.htm">Chapter 28, "Special Names"</a>; and for representing IPv4
addresses, see <tt class="literal">gethostbyaddr</tt> in
<a href="ch29_01.htm">Chapter 29, "Functions"</a>.</p>






<h3 class="sect2">2.6.8. Other Literal Tokens</h3>

<a name="INDEX-625"></a><a name="INDEX-626"></a><a name="INDEX-627"></a><a name="INDEX-628"></a><a name="INDEX-629"></a><a name="INDEX-630"></a><a name="INDEX-631"></a><a name="INDEX-632"></a><a name="INDEX-633"></a><a name="INDEX-634"></a>
<p>You should consider any identifier that both begins and ends with a
double underscore to be reserved for special syntactic use by Perl.
Two such special literals are <tt class="literal">__LINE__</tt> and <tt class="literal">__FILE__</tt>, which
represent the current line number and filename at that point in your
program.  They may only be used as separate tokens; they will not be
interpolated into strings.  Likewise, <tt class="literal">__PACKAGE__</tt> is the name of
the package the current code is being compiled into.  If there is no
current package (due to an empty <tt class="literal">package;</tt> directive),
<tt class="literal">__PACKAGE__</tt> is the undefined value.  The token <tt class="literal">__END__</tt> (or
alternatively, a Control-D or Control-Z character) may be used to
indicate the logical end of the script before the real end-of-file.
Any following text is ignored, but may be read via the <tt class="literal">DATA</tt>
filehandle.
<a name="INDEX-635"></a><a name="INDEX-636"></a>
</p>

<p>
<a name="INDEX-637"></a> The <tt class="literal">__DATA__</tt> token
functions similarly to the <tt class="literal">__END__</tt> token, but opens
the <tt class="literal">DATA</tt> filehandle within the current package's
namespace, so that files you <tt class="literal">require</tt> can each have
their own <tt class="literal">DATA</tt> filehandles open simultaneously.
For more information, see <tt class="literal">DATA</tt> in
<a href="ch28_01.htm">Chapter 28, "Special Names"</a>.</p>

<a name="INDEX-638"></a>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.5. Names</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.7. Context</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
