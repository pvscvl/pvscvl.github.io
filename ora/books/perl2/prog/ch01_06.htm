<html>
<head>
<title>Control Structures (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Control Structures">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch01_01.htm">Chapter 1: An Overview of Perl</a></td><td align="right" valign="top" width="172"><a href="ch01_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">1.6. Control Structures</h2>

<p>
<a name="INDEX-285"></a>
So far, except for our one large example, all of our examples have been
completely linear; we executed each command in order.  We've seen a few
examples of using the short-circuit operators to cause a single command
to be (or not to be) executed.  While you can write some very useful
linear programs (a lot of CGI scripts fall into this category), you can
write much more powerful programs if you have conditional expressions
and looping mechanisms.  Collectively, these are known as control
structures.  So you can also think of Perl as a control language.</p>

<p>But to have control, you have to be able to decide things, and to decide
things, you have to know the difference between what's true and what's
false.</p>


<h3 class="sect2">1.6.1. What Is Truth?</h3>

<p>
<a name="INDEX-286"></a><a name="INDEX-287"></a><a name="INDEX-288"></a><a name="INDEX-289"></a>
We've bandied about the term truth,<a href="#FOOTNOTE-20">[20]</a> and we've mentioned that certain operators return a
true or a false value.  Before we go any further, we really ought to
explain exactly what we mean by that.  Perl treats truth a little
differently than most computer languages, but after you've worked with
it a while, it will make a lot of sense.  (Actually, we hope it'll
make a lot of sense after you've read the following.)</p>
<blockquote class="footnote">

<a name="FOOTNOTE-20"></a>
<p>[20] Strictly speaking, this is
not true.</p>

</blockquote>

<p>Basically, Perl holds truths to be self-evident.  That's a glib way of
saying that you can evaluate almost anything for its truth value.  Perl
uses practical definitions of truth that depend on the type of thing
you're evaluating.  As it happens, there are many more kinds of truth
than there are of nontruth.</p>

<p>
<a name="INDEX-290"></a>
Truth in Perl is always evaluated in a scalar context.  Other than
that, no type coercion is done.  So here are the rules for the various
kinds of values a scalar can hold:</p>

<ol>
<li>
<p>Any string is true except for <tt class="literal">""</tt> and <tt class="literal">"0"</tt>.
<a name="INDEX-291"></a>
</p>
</li>
<li>
<p>Any number is true except for 0.
<a name="INDEX-292"></a>
</p>
</li>
<li>
<p>Any reference is true.
<a name="INDEX-293"></a>
</p>
</li>
<li>
<p>Any undefined value is false.
<a name="INDEX-294"></a>
</p>
</li>
</ol>
<p>Actually, the last two rules can be derived from the first two.  Any
reference (rule&nbsp;3) would point to something with an address and would
evaluate to a number or string containing that address, which is never
0 because it's always defined.  And any undefined value (rule 4) would
always evaluate to 0 or the null string.</p>

<p>And in a way, you can derive rule 2 from rule 1 if you pretend that
everything is a string.  Again, no string coercion is actually done to evaluate
truth, but if the string coercion <em class="emphasis">were</em> done, then any numeric value
of 0 would simply turn into the string <tt class="literal">"0"</tt> and be false.  Any other
number would not turn into the string <tt class="literal">"0"</tt>, and so would be true.
Let's look at some examples so we can understand this better:
<blockquote>
<pre class="programlisting">0          # would become the string "0", so false.
1          # would become the string "1", so true.
10 - 10    # 10 minus 10 is 0, would convert to string "0", so false.
0.00       # equals 0, would convert to string "0", so false.
"0"        # is the string "0", so false.
""         # is a null string, so false.
"0.00"     # is the string "0.00", neither "" nor "0", so true!
"0.00" + 0 # would become the number 0 (coerced by the +), so false.
\$a        # is a reference to $a, so true, even if $a is false.
undef()    # is a function returning the undefined value, so false.</pre>
</blockquote>

Since we mumbled something earlier about truth being evaluated in a
scalar context, you might be wondering what the truth value of a list
is.  Well, the simple fact is, none of the operations in Perl will
return a list in a scalar context.  They'll all notice they're in a
scalar context and return a scalar value instead, and then you apply
the rules of truth to that scalar.  So there's no problem, as long as
you can figure out what any given operator will return in a scalar
context.  As it happens, both arrays and hashes return scalar values
that conveniently happen to be true if the array or hash contains any
elements.  More on that later.</p>


<h3 class="sect3">1.6.1.1. The if and unless statements</h3>

<p>
<a name="INDEX-295"></a><a name="INDEX-296"></a><a name="INDEX-297"></a><a name="INDEX-298"></a>
We saw earlier how a logical operator could function as a conditional. A
slightly more complex form of the logical operators is the <tt class="literal">if</tt>
statement.  The <tt class="literal">if</tt> statement evaluates a truth condition (that is,
a Boolean expression) and executes a block if the condition is true:
<blockquote>
<pre class="programlisting">if ($debug_level &gt; 0) {
    # Something has gone wrong.  Tell the user.
    print "Debug: Danger, Will Robinson, danger!\n";
    print "Debug: Answer was '54', expected '42'.\n";
}</pre>
</blockquote>

A block is one or more statements grouped together by a set of braces.
Since the <tt class="literal">if</tt> statement executes a block, the braces are required by
definition.  If you know a language like C, you'll notice that this is
different.  Braces are optional in C if you have a single statement,
but the braces are not optional in Perl.
<a name="INDEX-299"></a>
</p>

<p>
<a name="INDEX-300"></a>
Sometimes, just executing a block when a condition is met isn't enough.
You may also want to execute a different block if that condition
<em class="emphasis">isn't</em> met.  While you could certainly use two <tt class="literal">if</tt> statements, one
the negation of the other, Perl provides a more elegant solution.  After
the block, <tt class="literal">if</tt> can take an optional second condition, called <tt class="literal">else</tt>,
to be executed only if the truth condition is false.  (Veteran computer
programmers will not be surprised at this point.)</p>

<p>
<a name="INDEX-301"></a>
At times you may even have more than two possible choices.  In this
case, you'll want to add an <tt class="literal">elsif</tt> truth condition
for the other possible choices.  (Veteran computer programmers may
well be surprised by the spelling of
"<tt class="literal">elsif</tt>", for which nobody here is going to
apologize.  Sorry.)
<blockquote>
<pre class="programlisting">if ($city eq "New York") {
    print "New York is northeast of Washington, D.C.\n";
}
elsif ($city eq "Chicago") {
    print "Chicago is northwest of Washington, D.C.\n";
}
elsif ($city eq "Miami") {
    print "Miami is south of Washington, D.C.  And much warmer!\n";
}
else {
    print "I don't know where $city is, sorry.\n";
}</pre>
</blockquote>
</p>

<p>
<a name="INDEX-302"></a>
The <tt class="literal">if</tt> and <tt class="literal">elsif</tt> clauses are
each computed in turn, until one is found to be true or the
<tt class="literal">else</tt> condition is reached.  When one of the
conditions is found to be true, its block is executed and all
remaining branches are skipped. Sometimes, you don't want to do
anything if the condition is true, only if it is false.  Using an
empty <tt class="literal">if</tt> with an <tt class="literal">else</tt> may be
messy, and a negated <tt class="literal">if</tt> may be illegible; it sounds
weird in English to say "if not this is true, do something".  In these
situations, you would use the <tt class="literal">unless</tt> statement:
<blockquote>
<pre class="programlisting">unless ($destination eq $home) {
    print "I'm not going home.\n";
}</pre>
</blockquote>

There is no <tt class="literal">elsunless</tt> though.  This is generally construed as a
feature.</p>







<h3 class="sect2">1.6.2. Iterative (Looping) Constructs</h3>

<p>
<a name="INDEX-303"></a><a name="INDEX-304"></a> Perl has four main
iterative statement types: <tt class="literal">while</tt>,
<tt class="literal">until</tt>, <tt class="literal">for</tt>, and
<tt class="literal">foreach</tt>. These statements allow a Perl program to
repeatedly execute the same code.</p>


<h3 class="sect3">1.6.2.1. The while and until statements</h3>

<p>
<a name="INDEX-305"></a><a name="INDEX-306"></a><a name="INDEX-307"></a><a name="INDEX-308"></a>
 The <tt class="literal">while</tt> and
<tt class="literal">until</tt> statements behave just like the
<tt class="literal">if</tt> and <tt class="literal">unless</tt> statements, except
that they'll execute the block repeatedly.  That is, they loop.
First, the conditional part of the statement is checked.  If the
condition is met (if it is true for a <tt class="literal">while</tt> or
false for an <tt class="literal">until</tt>), the block of the statement is
executed.
<blockquote>
<pre class="programlisting">while ($tickets_sold &lt; 10000) {
    $available = 10000 - $tickets_sold;
    print "$available tickets are available.  How many would you like: ";
    $purchase = &lt;STDIN&gt;;
    chomp($purchase);
    $tickets_sold += $purchase;
}</pre>
</blockquote>

Note that if the original condition is never met, the loop will never be
entered at all.  For example, if we've already sold 10,000 tickets, we
might want to have the next line of the program say something like:
<blockquote>
<pre class="programlisting">print "This show is sold out, please come back later.\n";</pre>
</blockquote>

In our Average Example earlier, line 4 reads:
<blockquote>
<pre class="programlisting">while ($line = &lt;GRADES&gt;) {</pre>
</blockquote>
<a name="INDEX-309"></a>
This assigns the next line to the variable <tt class="literal">$line</tt> and, as we explained
earlier, returns the value of <tt class="literal">$line</tt> so that the condition of the
<tt class="literal">while</tt> statement can evaluate <tt class="literal">$line</tt> for truth.  You might wonder
whether Perl will get a false negative on blank lines and exit the loop
prematurely.  The answer is that it won't.  The reason is clear if you
think about everything we've said.  The line input operator leaves the
newline on the end of the string, so a blank line has the value <tt class="literal">"\n"</tt>.
And you know that <tt class="literal">"\n"</tt> is not one of the canonical false values.  So
the condition is true, and the loop continues even on blank lines.
<a name="INDEX-310"></a><a name="INDEX-311"></a>
</p>

<p>
<a name="INDEX-312"></a>
On the other hand, when we finally do reach the end of the file, the
line input operator returns the undefined value, which always evaluates
to false.  And the loop terminates, just when we wanted it to.  There's
no need for an explicit test of the <tt class="literal">eof</tt> function in Perl,
because the input operators are designed to work smoothly in a
conditional context.</p>

<p>In fact, almost everything is designed to work smoothly in a
conditional (Boolean) context.  If you mention an array in a scalar
context, the length of the array is returned.  So you often see command-line
arguments processed like this:
<blockquote>
<pre class="programlisting">while (@ARGV) {
    process(shift @ARGV);
}</pre>
</blockquote>
<a name="INDEX-313"></a> The
<tt class="literal">shift</tt> operator removes one element from the
argument list each time through the loop (and returns that element).
The loop automatically exits when array <tt class="literal">@ARGV</tt> is
exhausted, that is, when its length goes to 0.  And 0 is already false
in Perl.  In a sense, the array itself has become
"false".<a href="#FOOTNOTE-21">[21]</a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-21"></a>
<p>[21] This is how Perl programmers think.  So there's
no need to compare 0 to 0 to see if it's false.  Despite the fact that
other languages force you to, don't go out of your way to write explicit
comparisons like <tt class="literal">while (@ARGV != 0)</tt>.  That's just
inefficient for both you and the computer.  And anyone who
has to maintain your code.</p>

</blockquote>




<h3 class="sect3">1.6.2.2. The for statement</h3>

<p>
<a name="INDEX-314"></a><a name="INDEX-315"></a><a name="INDEX-316"></a> Another iterative
statement is the <tt class="literal">for</tt> loop.  The
<tt class="literal">for</tt> loop runs exactly like the
<tt class="literal">while</tt> loop, but looks a good deal different. (C
programmers will find it very familiar though.)
<blockquote>
<pre class="programlisting">for ($sold = 0; $sold &lt; 10000; $sold += $purchase) {
    $available = 10000 - $sold;
    print "$available tickets are available.  How many would you like: ";
    $purchase = &lt;STDIN&gt;;
    chomp($purchase);
}</pre>
</blockquote>

This <tt class="literal">for</tt> loop takes three expressions within the
loop's parentheses: an expression to set the initial state of the loop
variable, a condition to test the loop variable, and an expression to
modify the state of the loop variable.  When a <tt class="literal">for</tt>
loop starts, the initial state is set and the truth condition is
checked.  If the condition is true, the block is executed.  When the
block finishes, the modification expression is executed, the truth
condition is again checked, and if true, the block is rerun with the
next value.  As long as the truth condition remains true, the block
and the modification expression will continue to be executed.  (Note
that only the middle expression is evaluated for its value.  The first
and third expressions are evaluated only for their side effects, and
the resulting values are thrown away!)</p>




<h3 class="sect3">1.6.2.3. The foreach statement</h3>

<p>
<a name="INDEX-317"></a><a name="INDEX-318"></a><a name="INDEX-319"></a> The last of
Perl's iterative statements is the <tt class="literal">foreach</tt>
statement, which is used to execute the same code for each of a known
set of scalars, such as an array:
<blockquote>
<pre class="programlisting">foreach $user (@users) {
    if (-f "$home{$user}/.nexrc") {
        print "$user is cool... they use a perl-aware vi!\n";
    }
}</pre>
</blockquote>
<a name="INDEX-320"></a>
Unlike the <tt class="literal">if</tt> and <tt class="literal">while</tt>
statements, which provide scalar context to a conditional expression,
the <tt class="literal">foreach</tt> statement provides a list context to
the expression in parentheses.  So the expression is evaluated to
produce a list (not a scalar, even if there's only one scalar in the
list).  Then each element of the list is aliased to the loop variable
in turn, and the block of code is executed once for each list
element.  Note that the loop variable refers to the element itself,
rather than a copy of the element.  Hence, modifying the loop variable
also modifies the original array.</p>

<p>You'll find many more <tt class="literal">foreach</tt> loops in the typical
Perl program than <tt class="literal">for</tt> loops, because it's very easy
in Perl to generate the kinds of lists that <tt class="literal">foreach</tt>
wants to iterate over.  One idiom you'll often see is a loop to
iterate over the sorted keys of a hash:
<blockquote>
<pre class="programlisting">foreach $key (sort keys %hash) {</pre>
</blockquote>

In fact, line 9 of our Average Example does precisely that.</p>




<h3 class="sect3">1.6.2.4. Breaking out: next and last</h3>

<p>
<a name="INDEX-321"></a><a name="INDEX-322"></a><a name="INDEX-323"></a>
The <tt class="literal">next</tt> and <tt class="literal">last</tt> operators allow you to modify the flow of your
loop.  It is not at all uncommon to have a special case; you may want to
skip it, or you may want to quit when you encounter it. For example, if
you are dealing with Unix accounts, you may want to skip the system
accounts (like <em class="emphasis">root</em> or <em class="emphasis">lp</em>).  The <tt class="literal">next</tt> operator would allow you to
skip to the end of your current loop iteration, and start the next
iteration.  The <tt class="literal">last</tt> operator would allow you to skip to the end of
your block, as if your loop's test condition had returned false.  This might be
useful if, for example, you are looking for a specific account and want
to quit as soon as you find it.
<blockquote>
<pre class="programlisting">foreach $user (@users) {
    if ($user eq "root" or $user eq "lp") {
        next;
    }
    if ($user eq "special") {
        print "Found the special account.\n";
        # do some processing
        last;
    }
}</pre>
</blockquote>

It's possible to break out of multilevel loops by labeling your loops
and specifying which loop you want to break out of.  Together with
statement modifiers (another form of conditional which we'll talk
about later), this can make for extremely readable loop exits (if you
happen to think English is readable):
<blockquote>
<pre class="programlisting">LINE: while ($line = &lt;ARTICLE&gt;) {
    last LINE if $line eq "\n"; # stop on first blank line
    next LINE if $line =~ /^#/; # skip comment lines
    # your ad here
}</pre>
</blockquote>
</p>

<p>You may be saying, "Wait a minute, what's that funny
<tt class="literal">^#</tt> thing there inside the leaning toothpicks?  That
doesn't look much like English."  And you're right.  That's a pattern
match containing a regular expression (albeit a rather simple one). And 
that's what the next section is about.  Perl is the best text
processing language in the world, and regular expressions are at the
heart of Perl's text processing.</p>

<a name="INDEX-324"></a>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch01_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">1.5. Operators</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">1.7. Regular Expressions</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
