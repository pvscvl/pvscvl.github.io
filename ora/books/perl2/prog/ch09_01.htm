<html>
<head>
<title>Data Structures (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Data Structures">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm">Part 2: The Gory Details</a></td><td align="right" valign="top" width="172"><a href="ch09_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h1 class="chapter">Chapter 9.  Data Structures</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch09_01.htm">Arrays of Arrays</a>
<br>
<a href="ch09_02.htm">Hashes of Arrays</a>
<br>
<a href="ch09_03.htm">Arrays of Hashes</a>
<br>
<a href="ch09_04.htm">Hashes of Hashes</a>
<br>
<a href="ch09_05.htm">Hashes of Functions</a>
<br>
<a href="ch09_06.htm">More Elaborate Records</a>
<br>
<a href="ch09_07.htm">Saving Data Structures</a>
<br>
</p>
</div>

<a name="INDEX-2070"></a>
<p>
<a name="INDEX-2071"></a><a name="INDEX-2072"></a><a name="INDEX-2073"></a><a name="INDEX-2074"></a><a name="INDEX-2075"></a><a name="INDEX-2076"></a><a name="INDEX-2077"></a>
Perl provides for free many of the data structures that you have to
build yourself in other programming languages.  The stacks and queues
that budding computer scientists learn about are both just arrays in
Perl. When you <tt class="literal">push</tt> and <tt class="literal">pop</tt> (or
<tt class="literal">shift</tt> and <tt class="literal">unshift</tt>) an array,
it's a stack; when you <tt class="literal">push</tt> and
<tt class="literal">shift</tt> (or <tt class="literal">unshift</tt> and
<tt class="literal">pop</tt>) an array, it's a queue.  And many of the tree
structures in the world are built only to provide fast, dynamic access
to a conceptually flat lookup table.  Hashes, of course, are built
into Perl, and provide fast, dynamic access to a conceptually flat
lookup table, only without the mind-numbingly recursive data
structures that are claimed to be beautiful by people whose minds have
been suitably numbed already.</p>

<p>
<a name="INDEX-2078"></a>
But sometimes you want nested data structures because they most
naturally model the problem you're trying to solve.  So Perl lets you
combine and nest arrays and hashes to create arbitrarily complex data
structures.  Properly applied, they can be used to create linked
lists, binary trees, heaps, B-trees, sets, graphs, and anything else
you can devise.  See <em class="citetitle">Mastering Algorithms with
Perl</em> (O'Reilly, 1999), the <em class="citetitle">Perl
Cookbook</em> (O'Reilly, 1998), or CPAN, the central repository
for all such modules.  But simple combinations of arrays and hashes
may be all you ever need, so they're what we'll talk about in this
chapter.</p>


<h2 class="sect1">9.1. Arrays of Arrays</h2>

<p>
<a name="INDEX-2079"></a><a name="INDEX-2080"></a><a name="INDEX-2081"></a><a name="INDEX-2082"></a><a name="INDEX-2083"></a><a name="INDEX-2084"></a><a name="INDEX-2085"></a>
</p>

<p>There are many kinds of nested data structures. The simplest kind to
build is an array of arrays, also called a two-dimensional array or a
matrix.  (The obvious generalization applies: an array of arrays of
arrays is a three-dimensional array, and so on for higher dimensions.)
It's reasonably easy to understand, and nearly everything that applies
here will also be applicable to the fancier data structures that we'll
explore in subsequent sections.</p>


<h3 class="sect2">9.1.1. Creating and Accessing a Two-Dimensional Array</h3>

<p>
<a name="INDEX-2086"></a><a name="INDEX-2087"></a><a name="INDEX-2088"></a>
Here's how to put together a two-dimensional array:
<blockquote>
<pre class="programlisting"># Assign a list of array references to an array.
@AoA = (
         [ "fred", "barney" ],
         [ "george", "jane", "elroy" ],
         [ "homer", "marge", "bart" ],
);

print $AoA[2][1];   # prints "marge"</pre>
</blockquote>

The overall list is enclosed by parentheses, not brackets, because
you're assigning a list and not a reference.  If you wanted a
reference to an array instead, you'd use brackets:
<blockquote>
<pre class="programlisting"># Create an reference to an array of array references.
$ref_to_AoA = [
    [ "fred", "barney", "pebbles", "bamm bamm", "dino", ],
    [ "homer", "bart", "marge", "maggie", ],
    [ "george", "jane", "elroy", "judy", ],
];

print $ref_to_AoA-&gt;[2][3];   # prints "judy"</pre>
</blockquote>

Remember that there is an implied <tt class="literal">-&gt;</tt> between every pair of
adjacent braces or brackets.  Therefore these two lines:
<blockquote>
<pre class="programlisting">$AoA[2][3]
$ref_to_AoA-&gt;[2][3]</pre>
</blockquote>

are equivalent to these two lines:
<blockquote>
<pre class="programlisting">$AoA[2]-&gt;[3]
$ref_to_AoA-&gt;[2]-&gt;[3]</pre>
</blockquote>

There is, however, no implied <tt class="literal">-&gt;</tt> before the
first pair of brackets, which is why the dereference of
<tt class="literal">$ref_to_AoA</tt> requires the initial
<tt class="literal">-&gt;</tt>.  Also remember that you can count backward
from the end of an array with a negative index, so:
<blockquote>
<pre class="programlisting">$AoA[0][-2]</pre>
</blockquote>

is the next-to-last element of the first row.</p>






<h3 class="sect2">9.1.2. Growing Your Own</h3>

<p>
<a name="INDEX-2089"></a>
Those big list assignments are well and good for creating a fixed data
structure, but what if you want to calculate each element on the fly,
or otherwise build the structure piecemeal?</p>

<p>Let's read in a data structure from a file.  We'll assume that it's a
plain text file, where each line is a row of the structure, and each
line consists of elements delimited by whitespace.  Here's how to
proceed:<a href="#FOOTNOTE-1">[1]</a>
<blockquote>
<pre class="programlisting">while (&lt;&gt;) {
    @tmp = split;           # Split elements into an array.
    push @AoA, [ @tmp ];    # Add an anonymous array reference to @AoA.
}</pre>
</blockquote>

Of course, you don't need to name the temporary array, so you could
also say:
<blockquote>
<pre class="programlisting">while (&lt;&gt;) {
    push @AoA, [ split ];
}</pre>
</blockquote>

If you want a reference to an array of arrays, you can do this:
<blockquote>
<pre class="programlisting">while (&lt;&gt;) {
    push @$ref_to_AoA, [ split ];
}</pre>
</blockquote>
<a name="INDEX-2090"></a>
Both of those examples add new rows to the array of arrays.  What about
adding new columns? If you're just dealing with two-dimensional arrays,
it's often easiest to use simple assignment:<a href="#FOOTNOTE-2">[2]</a>
<blockquote>
<pre class="programlisting">for $x (0 .. 9) {                       # For each row...
    for $y (0 .. 9) {                   # For each column...
        $AoA[$x][$y] = func($x, $y);    # ...set that cell
    }
}

for $x ( 0..9 ) {                       # For each row...
    $ref_to_AoA-&gt;[$x][3] = func2($x);   # ...set the fourth column
}</pre>
</blockquote>
<a name="INDEX-2091"></a>
It doesn't matter in what order you assign the elements, nor does it
matter whether the subscripted elements of <tt class="literal">@AoA</tt> are
already there or not; Perl will gladly create them for you, setting
intervening elements to the undefined value as need be.  (Perl will
even create the original reference in <tt class="literal">$ref_to_AoA</tt>
for you if it needs to.)  If you just want to append to a row, you
have to do something a bit funnier:
<blockquote>
<pre class="programlisting"># Append new columns to an existing row.
push @{ $AoA[0] }, "wilma", "betty";</pre>
</blockquote>
Notice that this wouldn't work:
<blockquote>
<pre class="programlisting">push $AoA[0], "wilma", "betty";  # WRONG!</pre>
</blockquote>

That won't even compile, because the argument to
<tt class="literal">push</tt> must be a real array, not just a reference to
an array.  Therefore, the first argument absolutely must begin with an
<tt class="literal">@</tt> character.  What comes after the
<tt class="literal">@</tt> is somewhat negotiable.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-1"></a>
<p>[1] Here as in other chapters, we omit (for
clarity) the <tt class="literal">my</tt> declarations that you would
ordinarily put in.  In this example, you'd normally write <tt class="literal">my
@tmp = split</tt>.</p>

</blockquote>
<blockquote class="footnote">

<a name="FOOTNOTE-2"></a>
<p>[2] As with the temp
assignment earlier, we've simplified; the loops in this chapter would
likely be written <tt class="literal">for my $x</tt> in real code.</p>

</blockquote>






<h3 class="sect2">9.1.3. Access and Printing</h3>

<p>
<a name="INDEX-2092"></a><a name="INDEX-2093"></a>
Now let's print the data structure.  If you only want one element,
this is sufficient:
<blockquote>
<pre class="programlisting">print $AoA[3][2];</pre>
</blockquote>

But if you want to print the whole thing, you can't just say:
<blockquote>
<pre class="programlisting">print @AoA;         # WRONG</pre>
</blockquote>
<a name="INDEX-2094"></a><a name="INDEX-2095"></a>
</p>

<p>
<a name="INDEX-2096"></a>
It's wrong because you'll see stringified references instead of your
data.  Perl never automatically dereferences for you.  Instead, you
have to roll yourself a loop or two.  The following code prints the
whole structure, looping through the elements of <tt class="literal">@AoA</tt> and
dereferencing each inside the <tt class="literal">print</tt> statement:
<blockquote>
<pre class="programlisting">for $row ( @AoA ) {
    print "@$row\n";
}</pre>
</blockquote>

If you want to keep track of subscripts, you might do this:
<blockquote>
<pre class="programlisting">for $i ( 0 .. $#AoA ) {
    print "row $i is: @{$AoA[$i]}\n";
}</pre>
</blockquote>

or maybe even this (notice the inner loop):
<blockquote>
<pre class="programlisting">for $i ( 0 .. $#AoA ) {
    for $j ( 0 .. $#{$AoA[$i]} ) {
        print "element $i $j is $AoA[$i][$j]\n";
    }
}</pre>
</blockquote>

As you can see, things are getting a bit complicated.  That's why
sometimes it's easier to use a temporary variable on your way through:
<blockquote>
<pre class="programlisting">for $i ( 0 .. $#AoA ) {
    $row = $AoA[$i];
    for $j ( 0 .. $#{$row} ) {
        print "element $i $j is $row-&gt;[$j]\n";
    }
}</pre>
</blockquote>
</p>






<h3 class="sect2">9.1.4. Slices</h3>

<a name="INDEX-2097"></a>
<p>
<a name="INDEX-2098"></a><a name="INDEX-2099"></a>
If you want to access a slice (part of a row) of a multidimensional
array, you're going to have to do some fancy subscripting.  The
pointer arrows give us a nice way to access a single element, but no
such convenience exists for slices.  You can always extract the
elements of your slice one-by-one with a loop:
<blockquote>
<pre class="programlisting">@part = ();
for ($y = 7; $y &lt; 13; $y++) {
    push @part, $AoA[4][$y];
}</pre>
</blockquote>

This particular loop could be replaced with an array slice:
<blockquote>
<pre class="programlisting">@part = @{ $AoA[4] } [ 7..12 ];</pre>
</blockquote>

If you want a <em class="emphasis">two-dimensional slice</em>, say, with <tt class="literal">$x</tt> running from
<tt class="literal">4..8</tt> and <tt class="literal">$y</tt> from <tt class="literal">7..12</tt>, here's one way to do it:
<blockquote>
<pre class="programlisting">@newAoA = ();
for ($startx = $x = 4; $x &lt;= 8; $x++) {
    for ($starty = $y = 7; $y &lt;= 12; $y++) {
        $newAoA[$x - $startx][$y - $starty] = $AoA[$x][$y];
    }
}</pre>
</blockquote>
<a name="INDEX-2100"></a>
In this example, the individual values within our destination
two-dimensional array, <tt class="literal">@newAoA</tt>, are assigned one by one, taken from a
two-dimensional subarray of <tt class="literal">@AoA</tt>.  An alternative is to create
anonymous arrays, each consisting of a desired slice of an <tt class="literal">@AoA</tt>
subarray, and then put references to these anonymous arrays into
<tt class="literal">@newAoA</tt>.  We would then be writing references into <tt class="literal">@newAoA</tt>
(subscripted once, so to speak) instead of subarray values into a
twice-subscripted <tt class="literal">@newAoA</tt>.  This method eliminates the innermost
loop:
<blockquote>
<pre class="programlisting">for ($x = 4; $x &lt;= 8; $x++) {
    push @newAoA, [ @{ $AoA[$x] } [ 7..12 ] ];
}</pre>
</blockquote>
<a name="INDEX-2101"></a>
Of course, if you do this often, you should probably write a
subroutine called something like <tt class="literal">extract_rectangle</tt>.
And if you do it very often with large collections of multidimensional
data, you should probably use the <tt class="literal">PDL</tt> (Perl Data
Language) module, available from CPAN.</p>






<h3 class="sect2">9.1.5. Common Mistakes</h3>

<a name="INDEX-2102"></a><a name="INDEX-2103"></a><a name="INDEX-2104"></a>
<p>As mentioned earlier, Perl arrays and hashes are one-dimensional.  In
Perl, even "multidimensional" arrays are actually one-dimensional, but
the values along that dimension are references to other arrays, which
collapse many elements into one.  If you print these values out
without dereferencing them, you will get the

stringified references rather than the data you want.  For example,
these two lines:
<blockquote>
<pre class="programlisting">@AoA = ( [2, 3], [4, 5, 7], [0] );
print "@AoA";</pre>
</blockquote>

result in something like:
<blockquote>
<pre class="programlisting">ARRAY(0x83c38) ARRAY(0x8b194) ARRAY(0x8b1d0)</pre>
</blockquote>

On the other hand, this line displays <tt class="literal">7</tt>:
<blockquote>
<pre class="programlisting">print $AoA[1][2];</pre>
</blockquote>
</p>

<p>When constructing an array of arrays, remember to compose new
references for the subarrays.  Otherwise, you will just create
an array containing the element counts of the subarrays, like
this:
<blockquote>
<pre class="programlisting">for $i (1..10) {
    @array = somefunc($i);
    $AoA[$i] = @array;       # WRONG!
}</pre>
</blockquote>

Here <tt class="literal">@array</tt> is being accessed in a scalar context,
and therefore yields the count of its elements, which is dutifully
assigned to <tt class="literal">$AoA[$i]</tt>.  The proper way to assign the
reference will be shown in a moment.</p>

<p>After making the previous mistake, people realize they need to assign a
reference, so the next mistake people naturally make involves taking a
reference to the same memory location over and over again:
<blockquote>
<pre class="programlisting">for $i (1..10) {
    @array = somefunc($i);
    $AoA[$i] = \@array;      # WRONG AGAIN!
}</pre>
</blockquote>

Every reference generated by the second line of the <tt class="literal">for</tt> loop is the
same, namely, a reference to the single array <tt class="literal">@array</tt>.  Yes, this
array changes on each pass through the loop, but when everything is
said and done, <tt class="literal">$AoA</tt> contains 10 references to the same array,
which now holds the last set of values assigned to it.  <tt class="literal">print
@{$AoA[1]}</tt> will reveal the same values as <tt class="literal">print @{$AoA[2]}</tt>.</p>

<p>Here's a more successful approach:
<blockquote>
<pre class="programlisting">for $i (1..10) {
    @array = somefunc($i);
    $AoA[$i] = [ @array ];   # RIGHT!
}</pre>
</blockquote>

The brackets around <tt class="literal">@array</tt> create a new anonymous
array, into which the elements of <tt class="literal">@array</tt> are
copied.  We then store a reference to that new array.</p>

<p>A similar result--though more difficult to read--would be produced by:
<blockquote>
<pre class="programlisting">for $i (1..10) {
    @array = somefunc($i);
    @{$AoA[$i]} = @array;
}</pre>
</blockquote>

Since <tt class="literal">$AoA[$i]</tt> needs to be a new reference, the reference springs into
existence.  Then, the preceding <tt class="literal">@</tt> dereferences this new reference,
with the result that the values of <tt class="literal">@array</tt> are assigned (in list
context) to the array referenced by <tt class="literal">$AoA[$i]</tt>.  You might wish
to avoid this construct for clarity's sake.</p>

<p>But there <em class="emphasis">is</em> a situation in which you might use it. Suppose <tt class="literal">@AoA</tt>
is already an array of references to arrays. That is, you've made
assignments like:
<blockquote>
<pre class="programlisting">$AoA[3] = \@original_array;</pre>
</blockquote>

And now suppose that you want to change <tt class="literal">@original_array</tt> (that is, you
want to change the fourth row of <tt class="literal">$AoA</tt>) so that it refers to the
elements of <tt class="literal">@array</tt>.  This code will work:
<blockquote>
<pre class="programlisting">@{$AoA[3]} = @array;</pre>
</blockquote>

In this case, the reference itself does not change, but the elements
of the referenced array do.  This overwrites the values of
<tt class="literal">@original_array</tt>.</p>

<p>Finally, the following dangerous-looking code actually works fine:
<blockquote>
<pre class="programlisting">for $i (1..10) {
    my @array = somefunc($i);
    $AoA[$i] = \@array;
}</pre>
</blockquote>

That's because the lexically scoped <tt class="literal">my @array</tt> variable is created
afresh on each pass through the loop.  So even though it looks as
though you've stored the same variable reference each time, you haven't.
This is a subtle distinction, but the technique can produce more
efficient code, at the risk of misleading less-enlightened programmers.
(It's more efficient because there's no copy in the final assignment.)
On the other hand, if you have to copy the values anyway (which the
first assignment in the loop is doing), then you might as well use the
copy implied by the brackets and avoid the temporary variable:
<blockquote>
<pre class="programlisting">for $i (1..10) {
    $AoA[$i] = [ somefunc($i) ];
}</pre>
</blockquote>

In summary:
<blockquote>
<pre class="programlisting">$AoA[$i] = [ @array ];   # Safest, sometimes fastest
$AoA[$i] = \@array;      # Fast but risky, depends on my-ness of array
@{ $AoA[$i] } = @array;  # A bit tricky</pre>
</blockquote>

Once you've mastered arrays of arrays, you'll want to tackle more
complex data structures.  If you're looking for C structures or Pascal
records, you won't find any special reserved words in Perl to set
these up for you.  What you get instead is a more flexible system.  If
your idea of a record structure is less flexible than this, or if
you'd like to provide your users with something more opaque and rigid,
then you can use the object-oriented features detailed in <a href="ch12_01.htm">Chapter 12, "Objects"</a>.</p>

<p>
<a name="INDEX-2105"></a><a name="INDEX-2106"></a><a name="INDEX-2107"></a><a name="INDEX-2108"></a><a name="INDEX-2109"></a>
Perl has just two ways of organizing data: as ordered lists stored in
arrays and accessed by position, or as unordered key/value pairs
stored in hashes and accessed by name.  The best way to represent a
record in Perl is with a hash reference, but how you choose to
organize such records will vary.  You might want to keep an ordered
list of these records that you can look up by number, in which case
you'd use an array of hash references to store the records.  Or, you
might wish to look the records up by name, in which case you'd
maintain a hash of hash references. You could even do both at once,
with pseudohashes.</p>

<p>In the following sections, you will find code examples detailing how
to compose (from scratch), generate (from other sources), access, and
display several different data structures.  We first demonstrate three
straightforward combinations of arrays and hashes, followed by a hash
of functions and more irregular data structures.  We end with a
demonstration of how these data structures can be saved.  These
examples assume that you have already familiarized yourself with the
explanations set forth earlier in this chapter.
<a name="INDEX-2110"></a><a name="INDEX-2111"></a><a name="INDEX-2112"></a>
</p>


























































<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch09_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">8.5. Braces, Brackets, and Quoting</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">9.2. Hashes of Arrays</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
