<html>
<head>
<title>Debugger Commands (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Debugger Commands">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch20_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch20_01.htm">Chapter 20: The Perl Debugger</a></td><td align="right" valign="top" width="172"><a href="ch20_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">20.2. Debugger Commands</h2>

<p>
<a name="INDEX-3525"></a><a name="INDEX-3526"></a><a name="INDEX-3527"></a><a name="INDEX-3528"></a>
When you type commands into the debugger, you don't need to terminate
them with a semicolon.  Use a backslash to continue lines (but only in
the debugger).</p>

<p>Since the debugger uses <tt class="literal">eval</tt> to execute commands,
<tt class="literal">my</tt>, <tt class="literal">our</tt>, and
<tt class="literal">local</tt> settings will disappear once the command
returns.  If a debugger command coincides with some function in your
own program, simply precede the function call with anything that
doesn't look like a debugger command, such as a leading
<tt class="literal">;</tt> or a <tt class="literal">+</tt>.</p>

<p>If the output of a debugger built-in command scrolls past your
screen, just precede the command with a leading pipe symbol so it's
run through your pager:
<blockquote>
<pre class="programlisting">DB&lt;1&gt; <b class="emphasis-bold">|h</b>
</pre>
</blockquote>
</p>

<p>The debugger has plenty of commands, and we divide them (somewhat
arbitrarily) into stepping and running, breakpoints, tracing, display,
locating code, automatic command execution, and, of course, miscellaneous.</p>

<p>Perhaps the most important command is <tt class="literal">h</tt>, which
provides help.  If you type <tt class="literal">h h</tt> at the debugger
prompt, you'll get a compact help listing designed to fit on one
screen.  If you type <tt class="literal">h</tt><em class="replaceable">COMMAND</em>, you'll get help on that debugger
command.</p>


<h3 class="sect2">20.2.1. Stepping and Running</h3>

<p>
<a name="INDEX-3529"></a><a name="INDEX-3530"></a>
The debugger operates by <em class="emphasis">stepping</em> through your
program line by line.  The following commands let you control what you
skip over and where you stop.</p>

<dl>
<dt>
<b><tt class="literal">s</tt></b>
</dt>
<dt>
<b><tt class="literal">s</tt>
<em class="replaceable">EXPR</em></b>
</dt>
<dd>
<p>
<a name="INDEX-"></a>
The <tt class="literal">s</tt> debugger command single-steps through the
program.  That is, the debugger will execute the next line of your
program until another statement is reached, descending into subroutine
calls as necessary. If the next line to execute involves a function
call, then the debugger stops at the first line inside that
function. If an <em class="replaceable">EXPR</em> is supplied that
includes function calls, these will be single-stepped, too.</p>
</dd>


<dt>
<b><tt class="literal">n</tt></b>
</dt>
<dt>
<b><tt class="literal">n</tt> <em class="replaceable">EXPR</em></b>
</dt>
<dd>
<p>
<a name="INDEX-"></a>
The <tt class="literal">n</tt> command executes subroutine calls, without
stepping through them, until the beginning of the next statement at
this same level (or higher).  If an <em class="replaceable">EXPR</em> is
supplied that includes function calls, those functions will be
executed with stops before each statement.</p>
</dd>


<dt>
<b><tt class="literal">&lt;ENTER&gt;</tt></b>
</dt>
<dd>
<p>If you just hit enter at the debugger prompt, the previous
<tt class="literal">n</tt> or <tt class="literal">s</tt> command is repeated.</p>
</dd>


<dt>
<b><tt class="literal">.</tt></b>
</dt>
<dd>
<p>The <tt class="literal">.</tt> command returns the internal debugger pointer to the line
last executed and prints out that line.
<a name="INDEX-"></a>
</p>
</dd>


<dt>
<b><tt class="literal">r</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-"></a>
This command continues until the currently executing
subroutine returns.  It displays the return value if the <tt class="literal">PrintRet</tt> option is
set, which it is by default.</p>
</dd>

</dl>

<p>
</p>






<h3 class="sect2">20.2.2. Breakpoints</h3>

<a name="INDEX-3531"></a><a name="INDEX-3532"></a>
<dl>
<dt>
<b><tt class="literal">b</tt></b>
</dt>
<dt>
<b><tt class="literal">b</tt> <em class="replaceable">LINE</em></b>
</dt>
<dt>
<b><tt class="literal">b</tt> <em class="replaceable">CONDITION</em></b>
</dt>
<dt>
<b><tt class="literal">b</tt> <em class="replaceable">LINE</em> <em class="replaceable">CONDITION</em></b>
</dt>
<dt>
<b><tt class="literal">b</tt> <em class="replaceable">SUBNAME</em></b>
</dt>
<dt>
<b><tt class="literal">b</tt> <em class="replaceable">SUBNAME</em> <em class="replaceable">CONDITION</em></b>
</dt>
<dt>
<b><tt class="literal">b postpone</tt> <em class="replaceable">SUBNAME</em></b>
</dt>
<dt>
<b><tt class="literal">b postpone</tt> <em class="replaceable">SUBNAME</em> <em class="replaceable">CONDITION</em></b>
</dt>
<dt>
<b><tt class="literal">b compile</tt> <em class="replaceable">SUBNAME</em></b>
</dt>
<dt>
<b><tt class="literal">b load</tt> <em class="replaceable">FILENAME</em></b>
</dt>
<dd>
<p>The <tt class="literal">b</tt> debugger command sets a <em class="emphasis">breakpoint</em> before <em class="replaceable">LINE</em>, telling
the debugger to stop the program at that point so that you
can poke around.  If <em class="replaceable">LINE</em> is omitted, sets a breakpoint on the line
that's about to execute.  If <em class="replaceable">CONDITION</em> is specified, it's evaluated
each time the statement is reached: a breakpoint is triggered only if
<em class="replaceable">CONDITION</em> is true.  Breakpoints may only be set on lines that begin
an executable statement.  Note that conditions don't use <tt class="literal">if</tt>:
<blockquote>
<pre class="programlisting">b 237 $x &gt; 30
b 237 ++$count237 &lt; 11
b 33 /pattern/i</pre>
</blockquote>

The <tt class="literal">b</tt><em class="replaceable">SUBNAME</em> form sets a (possibly conditional) breakpoint
before the first line of the named subroutine.  <em class="replaceable">SUBNAME</em> may be a
variable containing a code reference; if so, <em class="replaceable">CONDITION</em> is not
supported.</p>

<p>There are several ways to set a breakpoint on code that hasn't even
been compiled yet.  The <tt class="literal">b postpone</tt> form sets a (possibly
conditional) breakpoint at the first line of <em class="replaceable">SUBNAME</em> after it is
compiled.</p>

<p>The <tt class="literal">b compile</tt> form sets a breakpoint on the first statement to be
executed after <em class="replaceable">SUBNAME</em> is compiled.  Note that unlike the
<tt class="literal">postpone</tt> form, this statement is outside the subroutine in question
because the subroutine hasn't been called yet, only compiled.</p>

<p>The <tt class="literal">b load</tt> form sets a breakpoint on the first executed line of
the file.  The <em class="replaceable">FILENAME</em> should be a full pathname as found in the <tt class="literal">%INC</tt>
values.</p>
</dd>


<dt>
<b><tt class="literal">d</tt></b>
</dt>
<dt>
<b><tt class="literal">d</tt> <em class="replaceable">LINE</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3533"></a><a name="INDEX-3534"></a>
This command deletes the breakpoint at <em class="replaceable">LINE</em>; if omitted, it deletes
the breakpoint on the line about to execute.</p>
</dd>


<dt>
<b><tt class="literal">D</tt></b>
</dt>
<dd>
<p>This command deletes all breakpoints.</p>
</dd>


<dt>
<b><tt class="literal">L</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3535"></a><a name="INDEX-3536"></a>
This command lists all the breakpoints and actions.</p>
</dd>


<dt>
<b><tt class="literal">c</tt></b>
</dt>
<dt>
<b><tt class="literal">c</tt> <em class="replaceable">LINE</em></b>
</dt>
<dd>
<p>This command continues execution, optionally inserting a one-time-only
breakpoint at the specified <em class="replaceable">LINE</em>.</p>
</dd>

</dl>






<h3 class="sect2">20.2.3. Tracing</h3>

<a name="INDEX-3537"></a><a name="INDEX-3538"></a>
<dl>
<dt>
<b><tt class="literal">T</tt></b>
</dt>
<dd>
<p>This command produces a stack backtrace.</p>
</dd>


<dt>
<b><tt class="literal">t</tt></b>
</dt>
<dt>
<b><tt class="literal">t</tt> <em class="replaceable">EXPR</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3539"></a>
This command toggles trace mode, which prints out every line in your
program as it is evaluated.  See also the <tt class="literal">AutoTrace</tt> option discussed later in this chapter.
If an <em class="replaceable">EXPR</em> is provided, the debugger will trace through its
execution.  See also the later section <a href="ch20_04.htm">Section 20.4, "Unattended Execution"</a>.</p>
</dd>


<dt>
<b><tt class="literal">W</tt></b>
</dt>
<dt>
<b><tt class="literal">W</tt> <em class="replaceable">EXPR</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3540"></a><a name="INDEX-3541"></a>
This command adds <em class="replaceable">EXPR</em> as a global watch expression.  (A watch
expression is an expression that will cause a breakpoint when its value changes.)
If no <em class="replaceable">EXPR</em> is provided, all watch expressions are deleted.</p>
</dd>

</dl>






<h3 class="sect2">20.2.4. Display</h3>

<p>
<a name="INDEX-3542"></a><a name="INDEX-3543"></a>
Perl's debugger has several commands for examining data structures
while your program is stopped at a breakpoint.</p>

<dl>
<dt>
<b><tt class="literal">p</tt></b>
</dt>
<dt>
<b><tt class="literal">p</tt> <em class="replaceable">EXPR</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3544"></a><a name="INDEX-3545"></a>
This command is the same as <tt class="literal">print DB::OUT</tt><em class="replaceable">EXPR</em> in the current
package.  In particular, since this is just Perl's own <tt class="literal">print</tt>
function, nested data structures and objects are not shown--use
the <tt class="literal">x</tt> command for that. The <tt class="literal">DB::OUT</tt> handle prints to your terminal (or perhaps an editor window) no matter where standard
output may have been redirected.</p>
</dd>


<dt>
<b><tt class="literal">x</tt></b>
</dt>
<dt>
<b><tt class="literal">x</tt> <em class="replaceable">EXPR</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3546"></a>
The <tt class="literal">x</tt> command evaluates its expression in list context and displays the result, pretty-printed.  That is, nested data structures are
printed out recursively and with unviewable characters suitably
encoded.</p>
</dd>


<dt>
<b><tt class="literal">V</tt></b>
</dt>
<dt>
<b><tt class="literal">V</tt> <em class="replaceable">PKG</em></b>
</dt>
<dt>
<b><tt class="literal">V</tt> <em class="replaceable">PKG</em> <em class="replaceable">VARS</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3547"></a>
This command displays all (or when you specify <em class="replaceable">VARS</em>, some) variables
in the specified <em class="replaceable">PKG</em> (defaulting to the <tt class="literal">main</tt> package) using a
pretty printer.  Hashes show their keys and values, control characters
are rendered legibly, nested data structures print out in a legible
fashion, and so on.  This is similar to calling the <tt class="literal">x</tt> command on
each applicable variable, except that <tt class="literal">x</tt> works with lexical
variables, too.  Also, here you type the identifiers <em class="emphasis">without</em> a type
specifier such as <tt class="literal">$</tt> or <tt class="literal">@</tt>, like this:
<blockquote>
<pre class="programlisting">V Pet::Camel SPOT FIDO</pre>
</blockquote>

In place of a variable name in <em class="replaceable">VARS</em>, you can use <tt class="literal">~</tt><em class="replaceable">PATTERN</em> or
<tt class="literal">!</tt><em class="replaceable">PATTERN</em> to print existing variables whose names either match or
don't match the specified pattern.</p>
</dd>


<dt>
<b><tt class="literal">X</tt></b>
</dt>
<dt>
<b><tt class="literal">X</tt> <em class="replaceable">VARS</em></b>
</dt>
<dd>
<p>This command is the same as <tt class="literal">V</tt><em class="replaceable">CURRENTPACKAGE</em>, where
<em class="replaceable">CURRENTPACKAGE</em> is the package that the current line was compiled
into.</p>
</dd>


<dt>
<b><tt class="literal">H</tt></b>
</dt>
<dt>
<b><tt class="literal">H</tt> -<em class="replaceable">NUMBER</em></b>
</dt>
<dd>
<p>This command displays the last <em class="replaceable">NUMBER</em> commands.  Only commands longer than one character are stored in the history.  (Most of them
would be <tt class="literal">s</tt> or <tt class="literal">n</tt>, otherwise.) If <em class="replaceable">NUMBER</em> is omitted, all commands
are listed.</p>
</dd>

</dl>






<h3 class="sect2">20.2.5. Locating Code</h3>

<p>
<a name="INDEX-3548"></a><a name="INDEX-3549"></a>
Inside the debugger, you can extract and display parts of your program
with these commands.</p>

<dl>
<dt>
<b><tt class="literal">l</tt></b>
</dt>
<dt>
<b><tt class="literal">l</tt> <em class="replaceable">LINE</em></b>
</dt>
<dt>
<b><tt class="literal">l</tt> <em class="replaceable">SUBNAME</em></b>
</dt>
<dt>
<b><tt class="literal">l</tt> <em class="replaceable">MIN</em>+<em class="replaceable">INCR</em></b>
</dt>
<dt>
<b><tt class="literal">l</tt> <em class="replaceable">MIN-MAX</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3550"></a>
The <tt class="literal">l</tt> command lists next the few lines of your program, or the specified <em class="replaceable">LINE</em> if provided, or the first few lines of the <em class="replaceable">SUBNAME</em> subroutine or code reference.</p>

<p>The <tt class="literal">l</tt><em class="replaceable">MIN+INCR</em> form lists <em class="replaceable">INCR</em><tt class="literal">+1</tt> lines, starting at
<em class="replaceable">MIN</em>.  The <tt class="literal">l</tt><em class="replaceable">MIN-MAX</em> form lists lines <em class="replaceable">MIN</em> through <em class="replaceable">MAX</em>.</p>
</dd>


<dt>
<b><tt class="literal">-</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3551"></a>
This command lists the previous few lines of your program.</p>
</dd>


<dt>
<b><tt class="literal">w</tt></b>
</dt>
<dt>
<b><tt class="literal">w</tt> <em class="replaceable">LINE</em></b>
</dt>
<dd>
<p>Lists a window (a few lines) around the given source <em class="replaceable">LINE</em>, or the current line if no <em class="replaceable">LINE</em> is supplied.</p>
</dd>


<dt>
<b><tt class="literal">f</tt> <em class="replaceable">FILENAME</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3552"></a>
This command lets you view a different program or <tt class="literal">eval</tt> statement. If the <em class="replaceable">FILENAME</em> is not a full pathname as found in the values of <tt class="literal">%INC</tt>,
it is interpreted as a regular expression to find the filename you mean.</p>
</dd>


<dt>
<b><tt class="literal">/</tt><em class="replaceable">PATTERN</em><tt class="literal">/</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3553"></a><a name="INDEX-3554"></a><a name="INDEX-3555"></a>
This command searches forward in the program for <em class="replaceable">PATTERN</em>; the final
<tt class="literal">/</tt> is optional.  The entire <em class="replaceable">PATTERN</em> is optional, too, and if
omitted, repeats the previous search.</p>
</dd>


<dt>
<b><tt class="literal">?</tt><em class="replaceable">PATTERN</em><tt class="literal">?</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3556"></a>
This command searches backward for <em class="replaceable">PATTERN</em>; the final <tt class="literal">?</tt> is
optional.  It repeats the previous search if <em class="replaceable">PATTERN</em> is omitted.</p>
</dd>


<dt>
<b><tt class="literal">S</tt></b>
</dt>
<dt>
<b><tt class="literal">S</tt> <em class="replaceable">PATTERN</em></b>
</dt>
<dt>
<b><tt class="literal">S !</tt><em class="replaceable">PATTERN</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3557"></a>
The <tt class="literal">S</tt> command lists those subroutine names matching (or, with <tt class="literal">!</tt>, those
not matching) <em class="replaceable">PATTERN</em>. If no <em class="replaceable">PATTERN</em> is provided, all
subroutines are listed.</p>
</dd>

</dl>






<h3 class="sect2">20.2.6. Actions and Command Execution</h3>

<p>
<a name="INDEX-3558"></a><a name="INDEX-3559"></a>
From inside the debugger, you can specify actions to be taken
at particular times. You can also launch external programs.</p>

<dl>
<dt>
<b><tt class="literal">a</tt></b>
</dt>
<dt>
<b><tt class="literal">a</tt> <em class="replaceable">COMMAND</em></b>
</dt>
<dt>
<b><tt class="literal">a</tt> <em class="replaceable">LINE</em></b>
</dt>
<dt>
<b><tt class="literal">a</tt> <em class="replaceable">LINE</em> <em class="replaceable">COMMAND</em></b>
</dt>
<dd>
<p>This command sets an action to take before
<em class="replaceable">LINE</em> executes, or the current line if
<em class="replaceable">LINE</em> is omitted.  For example, this prints
out <tt class="literal">$foo</tt> every time line 53 is reached:</p>

<p>
<blockquote>
<pre class="programlisting">a 53 print "DB FOUND $foo\n"</pre>
</blockquote>

If no <tt class="literal">COMMAND</tt> is specified, the action on the
specified <em class="replaceable">LINE</em> is deleted.  With neither
<em class="replaceable">LINE</em> nor
<em class="replaceable">COMMAND</em>, the action on the current line is
deleted.</p>
</dd>


<dt>
<b><tt class="literal">A</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3560"></a><a name="INDEX-3561"></a>
The <tt class="literal">A</tt> debugger command deletes all actions.</p>
</dd>


<dt>
<b><tt class="literal">&lt;</tt></b>
</dt>
<dt>
<b><tt class="literal">&lt; ?</tt></b>
</dt>
<dt>
<b><tt class="literal">&lt;</tt> <em class="replaceable">EXPR</em></b>
</dt>
<dt>
<b><tt class="literal">&lt;&lt;</tt> <em class="replaceable">EXPR</em></b>
</dt>
<dd>
<p>The <tt class="literal">&lt;</tt><em class="replaceable">EXPR</em> form
specifies a Perl expression to be evaluated before every debugger
prompt.  You can add another expression with the
<tt class="literal">&lt;&lt;</tt><em class="replaceable">EXPR</em> form, list
them with <tt class="literal">&lt; ?</tt>, and delete them all with a plain
<tt class="literal">&lt;</tt>.</p>
</dd>


<dt>
<b><tt class="literal">&gt;</tt></b>
</dt>
<dt>
<b><tt class="literal">&gt; ?</tt></b>
</dt>
<dt>
<b><tt class="literal">&gt;</tt> <em class="replaceable">EXPR</em></b>
</dt>
<dt>
<b><tt class="literal">&gt;&gt;</tt> <em class="replaceable">EXPR</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3562"></a>
The <tt class="literal">&gt;</tt> commands behave just like their
<tt class="literal">&lt;</tt> cousins but are executed after the debugger
prompt instead of before.</p>
</dd>


<dt>
<b><tt class="literal">{</tt></b>
</dt>
<dt>
<b><tt class="literal">{ ?</tt></b>
</dt>
<dt>
<b><tt class="literal">{</tt> <em class="replaceable">COMMAND</em></b>
</dt>
<dt>
<b><tt class="literal">{{</tt> <em class="replaceable">COMMAND</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3563"></a>
The <tt class="literal">{</tt> debugger commands behave just like
<tt class="literal">&lt;</tt> but specify a debugger command to be executed
before the debugger prompt instead of a Perl expression.  A warning is
issued if you appear to have accidentally entered a block of code
instead.  If that's what you really mean to do, write it with
<tt class="literal">;{ ... }</tt> or even <tt class="literal">do { ... }</tt>.</p>
</dd>


<dt>
<b><tt class="literal">!</tt></b>
</dt>
<dt>
<b><tt class="literal">!</tt> <em class="replaceable">NUMBER</em></b>
</dt>
<dt>
<b><tt class="literal">! -</tt><em class="replaceable">NUMBER</em></b>
</dt>
<dt>
<b><tt class="literal">!</tt><em class="replaceable">PATTERN</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3564"></a>
A lone <tt class="literal">!</tt> repeats the previous command.  The
<em class="replaceable">NUMBER</em> specifies which command from the
history to execute; for instance, <tt class="literal">! 3</tt> executes the
third command typed into the debugger.  If a minus sign precedes the
<em class="replaceable">NUMBER</em>, the commands are counted backward:
<tt class="literal">! -3</tt> executes the third-to-last command.  If a
<em class="replaceable">PATTERN</em> (no slashes) is provided instead of
a <em class="replaceable">NUMBER</em>, the last command that began with
<em class="replaceable">PATTERN</em> is executed.  See also the
<tt class="literal">recallCommand</tt> debugger option.)</p>
</dd>


<dt>
<b><tt class="literal">!!</tt> <em class="replaceable">CMD</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3565"></a><a name="INDEX-3566"></a>
This debugger command runs the external command <em class="replaceable">CMD</em> in a
subprocess, which will read from <tt class="literal">DB::IN</tt> and write to <tt class="literal">DB::OUT</tt>.
See also the <tt class="literal">shellBang</tt> debugger option.  This command uses whatever
shell is named in <tt class="literal">$ENV{SHELL}</tt>, which can sometimes interfere with
proper interpretation of status, signal, and core dump information.
If you want a consistent exit value from the command, set
<tt class="literal">$ENV{SHELL}</tt> to <tt class="literal">/bin/sh</tt>.</p>
</dd>


<dt>
<b><tt class="literal">|</tt></b>
</dt>
<dt>
<b><tt class="literal">|</tt><em class="replaceable">DBCMD</em></b>
</dt>
<dt>
<b><tt class="literal">||</tt><em class="replaceable">PERLCMD</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3567"></a><a name="INDEX-3568"></a>
The <tt class="literal">|</tt><em class="replaceable">DBCMD</em> command runs
the debugger command <em class="replaceable">DBCMD</em>, piping
<tt class="literal">DB::OUT</tt> to <tt class="literal">$ENV{PAGER}</tt>.  This is
often used with commands that would otherwise produce long output,
such as:
<blockquote>
<pre class="programlisting">DB&lt;1&gt; <b class="emphasis-bold">|V main</b>
</pre>
</blockquote>
Note that this is for debugger commands, not commands you'd type from
your shell.  If you wanted to pipe the external command
<em class="emphasis">who</em> through your pager, you could do something
like this:</p>

<blockquote>
<pre class="programlisting">DB&lt;1&gt; <b class="emphasis-bold">!!who | more</b>
</pre>
</blockquote>

<p>The <tt class="literal">||</tt><em class="replaceable">PERLCMD</em> command is
like <tt class="literal">|</tt><em class="replaceable">DBCMD</em>, but
<tt class="literal">DB::OUT</tt> is temporarily <tt class="literal">select</tt>ed
as well, so any commands that call <tt class="literal">print</tt>,
<tt class="literal">printf</tt>, or <tt class="literal">write</tt> without a
filehandle will also be sent down the pipe.  For example, if you had a
function that generated loads of output by calling
<tt class="literal">print</tt>, you'd use this command instead of the
previous one to page through that output:
<blockquote>
<pre class="programlisting">DB&lt;1&gt; <tt class="userinput"><b>sub saywho { print "Users: ", `who` }</b></tt>
DB&lt;2&gt; <tt class="userinput"><b>||sawwho()</b></tt>
</pre>
</blockquote>
</p>
</dd>

</dl>






<h3 class="sect2">20.2.7. Miscellaneous Commands</h3>

<dl>
<dt>
<b><tt class="literal">q</tt> and <tt class="literal">^D</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3569"></a><a name="INDEX-3570"></a><a name="INDEX-3571"></a>
These commands quit the debugger.  This is the recommended way to
exit, although typing <tt class="literal">exit</tt> twice sometimes works.
Set the <tt class="literal">inhibit_exit</tt> option to <tt class="literal">0</tt>
if you want to be able to step off the end of the program and remain
in the debugger anyway.  You may also need to set
<tt class="literal">$DB::finished</tt> to <tt class="literal">0</tt> if you want
to step through global destruction.</p>
</dd>


<dt>
<b><tt class="literal">R</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3572"></a>
Restart the debugger by <tt class="literal">exec</tt>ing a new session.  The
debugger tries to maintain your history across sessions, but some
internal settings and command-line options may be lost.  The following
settings are currently preserved: history, breakpoints, actions,
debugger options, and the Perl command-line options
<span class="option">-w</span>, <span class="option">-I</span>, and <span class="option">-e</span>.</p>
</dd>


<dt>
<b><tt class="literal">=</tt></b>
</dt>
<dt>
<b><tt class="literal">=</tt> <em class="replaceable">ALIAS</em></b>
</dt>
<dt>
<b><tt class="literal">=</tt> <em class="replaceable">ALIAS</em> <em class="replaceable">VALUE</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3573"></a><a name="INDEX-3574"></a>
This command prints out the current value of <em class="replaceable">ALIAS</em> if no <em class="replaceable">VALUE</em> is given. With a <em class="replaceable">VALUE</em>, it defines a new debugger command with the name <em class="replaceable">ALIAS</em>.  If both
<em class="replaceable">ALIAS</em> and <em class="replaceable">VALUE</em> are omitted, all current aliases are listed.
For example:
<blockquote>
<pre class="programlisting">= quit q</pre>
</blockquote>
An <em class="replaceable">ALIAS</em> should be a simple identifier, and should translate to a simple
identifier as well.  You can do more sophisticated aliasing by adding
your own entries to <tt class="literal">%DB::aliases</tt> directly.  See "Debugger
Customization" later in this chapter.</p>
</dd>


<dt>
<b><tt class="literal">man</tt></b>
</dt>
<dt>
<b><tt class="literal">man</tt> <em class="replaceable">MANPAGE</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3575"></a><a name="INDEX-3576"></a><a name="INDEX-3577"></a>
This command calls your system's default documentation viewer on the
given page or on the viewer itself if <em class="replaceable">MANPAGE</em> is omitted.  If that
viewer is <em class="emphasis">man</em>, the current <tt class="literal">%Config</tt> information is used to invoke
it.  The "<tt class="literal">perl</tt>" prefix will be automatically supplied for you when
necessary; this lets you type <tt class="literal">man debug</tt> and <tt class="literal">man op</tt> from the
debugger.</p>

<p>
<a name="INDEX-3578"></a>
On systems that do not normally have the <em class="emphasis">man</em> utility, the debugger
invokes <em class="emphasis">perldoc</em>; if you want to change that behavior, set
<tt class="literal">$DB::doccmd</tt> to whatever viewer you like.  This may be set in an <em class="emphasis">rc</em>
file or through direct assignment.</p>
</dd>


<dt>
<b><tt class="literal">O</tt></b>
</dt>
<dt>
<b><tt class="literal">O</tt> <em class="replaceable">OPTION</em><tt class="literal"> ...</tt></b>
</dt>
<dt>
<b><tt class="literal">O</tt> <em class="replaceable">OPTION</em><tt class="literal">? ...</tt></b>
</dt>
<dt>
<b><tt class="literal">O</tt> <em class="replaceable">OPTION</em>=<em class="replaceable">VALUE</em><tt class="literal">...</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3579"></a>
The <tt class="literal">O</tt> command lets you manipulate debugger options, which are
listed in <a href="ch20_03.htm">Section 20.3.3, "Debugger Options"</a> later in this chapter.  The <tt class="literal">O</tt><em class="replaceable">OPTION</em> form sets each
of the listed debugger options to <tt class="literal">1</tt>.  If a question mark follows
an <em class="replaceable">OPTION</em>, its current value is displayed.</p>

<p>The <tt class="literal">O</tt><em class="replaceable">OPTION</em>=<em class="replaceable">VALUE</em> form sets the values; if <em class="replaceable">VALUE</em> has
internal whitespace, it should be quoted.  For example, you could set
<tt class="literal">O pager="less -MQeicsNfr" </tt> to use <em class="emphasis">less</em> with those specific flags.
You may use either single or double quotes, but if you do, you must
escape embedded instances of the same sort of quote that you began with.
You must also escape any backslash that immediately precedes the quote
but is not meant to escape the quote itself.  In other words,
just follow single-quoting rules irrespective of the quote actually
used.  The debugger responds by showing you the value of the option
just set, always using single-quoted notation for its output:
<blockquote>
<pre class="programlisting">DB&lt;1&gt; <tt class="userinput"><b>O</b></tt> <em class="replaceable">OPTION</em><tt class="userinput"><b>='this isn\'t bad'</b></tt>
               <em class="replaceable">OPTION</em> = 'this isn\'t bad'

DB&lt;2&gt; <b class="emphasis-bold">O</b> <em class="replaceable">OPTION</em><tt class="userinput"><b>="She said, \" Isn't it?\""</b></tt>
               <em class="replaceable">OPTION</em> = 'She said, "Isn\'t it?"'</pre>
</blockquote>

For historical reasons, the <tt class="literal">=</tt><em class="replaceable">VALUE</em> is optional, but defaults
to <tt class="literal">1</tt> only where safe to do so--that is, mostly for Boolean
options.  It is better to assign a specific <em class="replaceable">VALUE</em> using <tt class="literal">=</tt>.
The <em class="replaceable">OPTION</em> can be abbreviated, but unless you're trying to be
intentionally cryptic, it probably should not be.  Several options can
be set together.  See the section <a href="ch20_03.htm">Section 20.3.3, "Debugger Options"</a> for a list
of these.</p>
</dd>

</dl>





<a name="INDEX-3580"></a><a name="INDEX-3581"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch20_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch20_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">20.1. Using the Debugger</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">20.3. Debugger Customization</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
