<html>
<head>
<title>Overloadable Operators (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Overloadable Operators">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch13_01.htm">Chapter 13: Overloading</a></td><td align="right" valign="top" width="172"><a href="ch13_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">13.3. Overloadable Operators</h2>

<p>
<a name="INDEX-2616"></a><a name="INDEX-2617"></a>
You can only overload certain operators, which are shown in <a href="ch13_03.htm">Table 13-1</a>.  The operators are also listed in
the <tt class="literal">%overload::ops</tt> hash made available when you
<tt class="literal">use overload</tt>, though the categorization is a little
different there.</p>

<a name="perl3-tab-overloadops"></a>
<h4 class="objtitle">Table 13.1. Overloadable Operators</h4>
<table border="1">

<tr>
<th>Category</th>
<th>Operators</th>
</tr>




<tr>
<td>Conversion</td>
<td><tt class="literal">"" 0+ bool</tt></td>
</tr>

<tr>
<td>Arithmetic</td>
<td><tt class="literal">+ - * / % ** x . neg</tt></td>
</tr>

<tr>
<td>Logical</td>
<td><tt class="literal">!</tt></td>
</tr>

<tr>
<td>Bitwise</td>
<td><tt class="literal">&amp; | ~ ^ ! &lt;&lt; &gt;&gt;</tt></td>
</tr>

<tr>
<td>Assignment</td>
<td><tt class="literal">+= -= *= /= %= **= x= .= &lt;&lt;= &gt;&gt;= ++ --</tt></td>
</tr>

<tr>
<td>Comparison</td>
<td><tt class="literal">== &lt; &lt;= &gt; &gt;= != &lt;=&gt; lt le gt ge eq ne cmp</tt></td>
</tr>

<tr>
<td>Mathematical</td>
<td><tt class="literal">atan2 cos sin exp abs log sqrt</tt></td>
</tr>

<tr>
<td>Iterative</td>
<td><tt class="literal">&lt;&gt;</tt></td>
</tr>

<tr>
<td>Dereference</td>
<td><tt class="literal">${} @{} %{} &amp;{} *{}</tt></td>
</tr>

<tr>
<td>Pseudo</td>
<td><tt class="literal">nomethod fallback =&gt;</tt></td>
</tr>


</table>

<p>
Note that <tt class="literal">neg</tt>, <tt class="literal">bool</tt>,
<tt class="literal">nomethod</tt>, and <tt class="literal">fallback</tt> are not
actual Perl operators.  The five dereferencers, <tt class="literal">""</tt>,
and <tt class="literal">0+</tt> probably don't <em class="emphasis">seem</em>
like operators either.  Nevertheless, they are all valid keys for the
parameter list you provide to <tt class="literal">use overload</tt>.  This
is not really a problem.  We'll let you in on a little secret: it's a
bit of a fib to say that the <tt class="literal">overload</tt> pragma
overloads operators.  It overloads the underlying operations, whether
invoked explicitly via their "official" operators, or implicitly via
some related operator.  (The pseudo-operators we mentioned can only be
invoked implicitly.)  In other words, overloading happens not at the
syntactic level, but at the semantic level. The point is not to look
good.  The point is to do the right thing.  Feel free to generalize.
<a name="INDEX-2618"></a>
</p>

<p>Note also that <tt class="literal">=</tt> does <em class="emphasis">not</em>
overload Perl's assignment operator, as you might expect.  That would
not do the right thing.  More on that later.</p>

<p>
<a name="INDEX-2619"></a><a name="INDEX-2620"></a><a name="INDEX-2621"></a>
We'll start by discussing the conversion operators, not because
they're the most obvious (they aren't), but because they're the most
useful.  Many classes overload nothing but stringification, specified
by the <tt class="literal">""</tt> key.  (Yes, that really is two
double-quotes in a row.)</p>

<dl>
<dt>
<b><em class="emphasis">Conversion operators:</em>
<tt class="literal">""</tt><em class="emphasis">,</em>
<tt class="literal">0+</tt><em class="emphasis">,</em>
<tt class="literal">bool</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-"></a>
These three keys let you provide behaviors for Perl's automatic
conversions to strings, numbers, and Boolean values, respectively.</p>

<a name="INDEX-"></a>
<p>We say that <em class="emphasis">stringification</em> occurs when any
nonstring variable is used as a string.  It's what happens when you
convert a variable into a string via printing, interpolation,
concatenation, or even by using it as a hash key.  Stringification is
also why you see something like <tt class="literal">SCALAR(0xba5fe0)</tt>
when you try to <tt class="literal">print</tt> an object.</p>

<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
We say that <em class="emphasis">numification</em> occurs when a nonnumeric
variable is converted into a number in any numeric context,
such as any mathematical expression, array index, or even as an
operand of the <tt class="literal">..</tt> range operator.</p>

<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
Finally, while nobody here quite has the nerve to call it
<em class="emphasis">boolification</em>, you can define how an object
should be interpreted in a Boolean context (such as
<tt class="literal">if</tt>, <tt class="literal">unless</tt>,
<tt class="literal">while</tt>, <tt class="literal">for</tt>,
<tt class="literal">and</tt>, <tt class="literal">or</tt>, <tt class="literal">&amp;&amp;</tt>,
<tt class="literal">||</tt>, <tt class="literal">?:</tt>, or the block of a
<tt class="literal">grep</tt> expression) by creating a
<tt class="literal">bool</tt> handler.</p>

<p>Any of the three conversion operators can be
<em class="emphasis">autogenerated</em> if you have any one of them (we'll
explain autogeneration later).  Your handlers can return any value you
like.  Note that if the operation that triggered the conversion is
also overloaded, <em class="emphasis">that</em> overloading will occur
immediately afterward.</p>

<p>
<a name="INDEX-"></a>
Here's a demonstration of <tt class="literal">""</tt> that invokes an
object's <tt class="literal">as_string</tt> handler upon stringification.
Don't forget to quote the quotes:
<blockquote>
<pre class="programlisting">package Person;

use overload q("") =&gt; \&amp;as_string;

sub new {
    my $class = shift;
    return bless { @_ } =&gt; $class;
}

sub as_string {
    my $self = shift;
    my ($key, $value, $result);
    while (($key, $value) = each %$self) {
        $result .= "$key =&gt; $value\n";
    }
    return $result;
}

$obj = Person-&gt;new(height =&gt; 72, weight =&gt; 165, eyes =&gt; "brown");

print $obj;</pre>
</blockquote>

Instead of something like <tt class="literal">Person=HASH(0xba1350)</tt>,
this prints (in hash order):
<blockquote>
<pre class="programlisting">weight =&gt; 165
height =&gt; 72
eyes =&gt; brown</pre>
</blockquote>

(We sincerely hope this person was not measured in kg and cm.)</p>
</dd>


<dt>
<b><em class="emphasis">Arithmetic operators:</em>
<tt class="literal">+</tt><em class="emphasis">,</em>
<tt class="literal">-</tt><em class="emphasis">,</em>
<tt class="literal">*</tt><em class="emphasis">,</em>
<tt class="literal">/</tt><em class="emphasis">,</em>
<tt class="literal">%</tt><em class="emphasis">,</em>
<tt class="literal">**</tt><em class="emphasis">,</em>
<tt class="literal">x</tt><em class="emphasis">,</em>
<tt class="literal">.</tt><em class="emphasis">,</em>
<tt class="literal">neg</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
These should all be familiar except for <tt class="literal">neg</tt>, which
is a special overloading key for the unary minus: the
<tt class="literal">-</tt> in <tt class="literal">-123</tt>.  The distinction
between the <tt class="literal">neg</tt> and <tt class="literal">-</tt> keys
allows you to specify different behaviors for unary minus and binary
minus, more commonly known as subtraction.</p>

<p>
<a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a>
If you overload <tt class="literal">-</tt> but not <tt class="literal">neg</tt>,
and then try to use a unary minus, Perl will emulate a
<tt class="literal">neg</tt> handler for you.  This is known as
<em class="emphasis">autogeneration</em>, where certain operators can be
reasonably deduced from other operators (on the assumption that the
overloaded operators will have the same relationships as the regular
operators).  Since unary minus can be expressed as a function of
binary minus (that is, <tt class="literal">-123</tt> is equivalent to
<tt class="literal">0 - 123</tt>), Perl doesn't force you to overload
<tt class="literal">neg</tt> when <tt class="literal">-</tt> will do.  (Of course,
if you've arbitrarily defined binary minus to divide the second
argument by the first, unary minus will be a fine way to throw a
divide-by-0 exception.)</p>

<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
Concatenation via the <tt class="literal">.</tt> operator can be
autogenerated via the stringification handler (see
<tt class="literal">""</tt> above).</p>
</dd>


<dt>
<b><em class="emphasis">Logical operator:</em>
<tt class="literal">!</tt></b>
</dt>
<dd>
<p>If a handler for <tt class="literal">!</tt> is not specified, it can be
autogenerated using the <tt class="literal">bool</tt>,
<tt class="literal">""</tt>, or <tt class="literal">0+</tt> handler.  If you
overload the <tt class="literal">!</tt> operator, the <tt class="literal">not</tt>
operator will also trigger whatever behavior you requested.  (Remember
our little secret?)
<a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a>
</p>

<p>
<a name="INDEX-"></a>
You may be surprised at the absence of the other logical operators, but
most logical operators can't be overloaded because they short-circuit.
They're really control-flow operators that need to be able to delay
evaluation of some of their arguments.  That's also the reason the
<tt class="literal">?:</tt> operator isn't overloaded.</p>
</dd>


<dt>
<b><em class="emphasis">Bitwise operators:</em> <tt class="literal">&amp;</tt><em class="emphasis">,</em> <tt class="literal">|</tt><em class="emphasis">,</em> <tt class="literal">~</tt><em class="emphasis">,</em> <tt class="literal">^</tt><em class="emphasis">,</em> <tt class="literal">&lt;&lt;</tt><em class="emphasis">,</em> <tt class="literal">&gt;&gt;</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
The <tt class="literal">~</tt> operator is a unary operator; all the others
are binary.  Here's how we could overload <tt class="literal">&gt;&gt;</tt>
to do something like <tt class="literal">chop</tt>:
<blockquote>
<pre class="programlisting">package ShiftString;

use overload
    '&gt;&gt;' =&gt; \&amp;right_shift,
    '""' =&gt; sub { ${ $_[0] } };

sub new {
    my $class = shift;
    my $value = shift;
    return bless \$value =&gt; $class;
}

sub right_shift {
    my ($x, $y) = @_;
    my $value = $$x;
    substr($value, -$y) = "";
    return bless \$value =&gt; ref($x);
}

$camel = ShiftString-&gt;new("Camel");
$ram = $camel &gt;&gt; 2;
print $ram;            # Cam</pre>
</blockquote>
</p>
</dd>


<dt>
<b><em class="emphasis">Assignment operators:</em> <tt class="literal">+=</tt><em class="emphasis">,</em> <tt class="literal">-=</tt><em class="emphasis">,</em> <tt class="literal">*=</tt><em class="emphasis">,</em> <tt class="literal">/=</tt><em class="emphasis">,</em> <tt class="literal">%=</tt><em class="emphasis">,</em> <tt class="literal">**=</tt><em class="emphasis">,</em> <tt class="literal">x=</tt><em class="emphasis">,</em> <tt class="literal">.=</tt><em class="emphasis">,</em> <tt class="literal">&lt;&lt;=</tt><em class="emphasis">,</em> <tt class="literal">&gt;&gt;=</tt><em class="emphasis">,</em> <tt class="literal">++</tt><em class="emphasis">,</em> <tt class="literal">--</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
These assignment operators might change the value of their arguments
or leave them as is.  The result is assigned to the lefthand operand
only if the new value differs from the old one. This allows the same
handler to be used to overload both <tt class="literal">+=</tt> and
<tt class="literal">+</tt>.  Although this is permitted, it is seldom
recommended, since by the semantics described later under "When an
Overload Handler Is Missing (nomethod and fallback)", Perl will invoke
the handler for <tt class="literal">+</tt> anyway, assuming
<tt class="literal">+=</tt> hasn't been overloaded directly.</p>

<p>
<a name="INDEX-"></a>
Concatenation (<tt class="literal">.=</tt>) can be autogenerated using
stringification followed by ordinary string concatenation. The
<tt class="literal">++</tt> and <tt class="literal">--</tt> operators can
be autogenerated from <tt class="literal">+</tt> and <tt class="literal">-</tt>
(or <tt class="literal">+=</tt> and <tt class="literal">-=</tt>).</p>

<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
Handlers implementing <tt class="literal">++</tt> and <tt class="literal">--</tt> are expected to <em class="emphasis">mutate</em> (alter)
their arguments.  If you wanted autodecrement to work on letters as
well as numbers, you could do that with a handler as follows:
<blockquote>
<pre class="programlisting">package MagicDec;

use overload
    q(--) =&gt; \&amp;decrement,
    q("") =&gt; sub { ${ $_[0] } };

sub new {
    my $class = shift;
    my $value = shift;
    bless \$value =&gt; $class;
}

sub decrement {
    my @string = reverse split(//, ${ $_[0] } );
    my $i;
    for ($i = 0; $i &lt; @string; $i++ ) {
        last unless $string[$i] =~ /a/i;
        $string[$i] = chr( ord($string[$i]) + 25 );
    }
    $string[$i] = chr( ord($string[$i]) - 1 );
    my $result = join('', reverse @string);
    $_[0] = bless \$result =&gt; ref($_[0]);
}

package main;

for $normal (qw/perl NZ Pa/) {
    $magic = MagicDec-&gt;new($normal);
    $magic--;
    print "$normal goes to $magic\n";
}</pre>
</blockquote>

That prints out:
<blockquote>
<pre class="programlisting">perl goes to perk
NZ goes to NY
Pa goes to Oz</pre>
</blockquote>

exactly reversing Perl's magical string autoincrement operator.
<a name="INDEX-"></a>
</p>

<p>The <tt class="literal">++$a</tt> operation can be autogenerated using
<tt class="literal">$a += 1</tt> or <tt class="literal">$a = $a + 1</tt>, and
<tt class="literal">$a--</tt> using <tt class="literal">$a -= 1</tt> or
<tt class="literal">$a = $a - 1</tt>.  However, this does not trigger the
copying behavior that a real <tt class="literal">++</tt> operator would.
See "The Copy Constructor" later in this chapter.</p>
</dd>


<dt>
<b><em class="emphasis">Comparison operators:</em>
<tt class="literal">==</tt><em class="emphasis">,</em>
<tt class="literal">&lt;</tt><em class="emphasis">,</em>
<tt class="literal">&lt;=</tt><em class="emphasis">,</em>
<tt class="literal">&gt;</tt><em class="emphasis">,</em>
<tt class="literal">&gt;=</tt><em class="emphasis">,</em>
<tt class="literal">!=</tt><em class="emphasis">,</em>
<tt class="literal">&lt;=&gt;</tt><em class="emphasis">,</em>
<tt class="literal">lt</tt><em class="emphasis">,</em>
<tt class="literal">le</tt><em class="emphasis">,</em>
<tt class="literal">gt</tt><em class="emphasis">,</em>
<tt class="literal">ge</tt><em class="emphasis">,</em>
<tt class="literal">eq</tt><em class="emphasis">,</em>
<tt class="literal">ne</tt><em class="emphasis">,</em> <tt class="literal">cmp</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
If <tt class="literal">&lt;=&gt;</tt> is overloaded, it can be used to
autogenerate behaviors for <tt class="literal">&lt;</tt>,
<tt class="literal">&lt;=</tt>, <tt class="literal">&gt;</tt>,
<tt class="literal">&gt;=</tt>, <tt class="literal">==</tt>, and
<tt class="literal">!=</tt>.  Similarly, if <tt class="literal">cmp</tt> is
overloaded, it can be used to autogenerate behaviors for
<tt class="literal">lt</tt>, <tt class="literal">le</tt>, <tt class="literal">gt</tt>,
<tt class="literal">ge</tt>, <tt class="literal">eq</tt>, and
<tt class="literal">ne</tt>.</p>

<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
Note that overloading <tt class="literal">cmp</tt> won't let you sort
objects as easily as you'd like, because what will be compared are
the stringified versions of the objects instead of the objects
themselves.  If that was your
goal, you'd want to overload <tt class="literal">""</tt> as well.</p>
</dd>


<dt>
<b><em class="emphasis">Mathematical functions:</em> <tt class="literal">atan2</tt><em class="emphasis">,</em> <tt class="literal">cos</tt><em class="emphasis">,</em> <tt class="literal">sin</tt><em class="emphasis">,</em> <tt class="literal">exp</tt><em class="emphasis">,</em> <tt class="literal">abs</tt><em class="emphasis">,</em> <tt class="literal">log</tt><em class="emphasis">,</em> <tt class="literal">sqrt</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
If <tt class="literal">abs</tt> is unavailable, it can be autogenerated from
<tt class="literal">&lt;</tt> or <tt class="literal">&lt;=&gt;</tt> combined with
either unary minus or subtraction.</p>

<p>An overloaded <tt class="literal">-</tt> can be used to autogenerate missing
handlers for unary minus or for the <tt class="literal">abs</tt> function,
which may also be separately overloaded.  (Yes, we know that
<tt class="literal">abs</tt> looks like a function, whereas unary minus
looks like an operator, but they aren't all that different as far as
Perl's concerned.)</p>
</dd>


<dt>
<b><em class="emphasis">Iterative operator:</em> <tt class="literal">&lt;&gt;</tt></b>
</dt>
<dd>
<a name="INDEX-"></a><a name="INDEX-"></a>
<p>The <tt class="literal">&lt;&gt;</tt> handler can be triggered by using
either <tt class="literal">readline</tt> (when it reads from a filehandle,
as in <tt class="literal">while (&lt;FH&gt;)</tt>) or
<tt class="literal">glob</tt> (when it is used for fileglobbing, as in
<tt class="literal">@files = &lt;*.*&gt;</tt>).
<blockquote>
<pre class="programlisting">package LuckyDraw;
 
use overload
    '&lt;&gt;' =&gt; sub {
        my $self = shift;
        return splice @$self, rand @$self, 1;
    };
 
 
sub new {
    my $class = shift;
    return bless [@_] =&gt; $class;
}
 
package main;
 
$lotto = new LuckyDraw 1 .. 51;
 
for (qw(1st 2nd 3rd 4th 5th 6th)) {
    $lucky_number = &lt;$lotto&gt;;
    print "The $_ lucky number is: $lucky_number.\n";
}
 
$lucky_number = &lt;$lotto&gt;;
print "\nAnd the bonus number is: $lucky_number.\n";</pre>
</blockquote>

In California, this prints:
<blockquote>
<pre class="programlisting">The 1st lucky number is: 18
The 2nd lucky number is: 11
The 3rd lucky number is: 40

The 4th lucky number is: 7
The 5th lucky number is: 51
The 6th lucky number is: 33
 
And the bonus number is: 5</pre>
</blockquote>
</p>
</dd>


<dt>
<b><em class="emphasis">Dereference operators:</em> <tt class="literal">${}</tt><em class="emphasis">,</em> <tt class="literal">@{}</tt><em class="emphasis">,</em> <tt class="literal">%{}</tt><em class="emphasis">,</em> <tt class="literal">&amp;{}</tt><em class="emphasis">,</em> <tt class="literal">*{}</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
Attempts to dereference scalar, array, hash, subroutine, and glob
references can be intercepted by overloading these five symbols.</p>

<p>
<a name="INDEX-"></a>
The online Perl documentation for <tt class="literal">overload</tt> demonstrates how you can
use this operator to simulate your own pseudohashes.  Here's a simpler example
that implements an object as an anonymous array but permits hash
referencing.  Don't try to treat it as a real hash; you won't be able
to <tt class="literal">delete</tt> key/value pairs from the object.  If you want to combine
array and hash notations, use a real pseudohash (as it were).
<blockquote>
<pre class="programlisting">package PsychoHash;

use overload '%{}' =&gt; \&amp;as_hash;

sub as_hash {
    my ($x) = shift;
    return { @$x };
}

sub new {
    my $class = shift;
    return bless [ @_ ] =&gt; $class;
}

$critter = new PsychoHash( height =&gt; 72, weight =&gt; 365, type =&gt; "camel" );

print $critter-&gt;{weight};   # prints 365</pre>
</blockquote>

Also see <a href="ch14_01.htm">Chapter 14, "Tied Variables"</a>, for a mechanism to let you redefine basic
operations on hashes, arrays, and scalars.</p>
</dd>

</dl>

<p>
</p>

<p>
<a name="INDEX-2622"></a><a name="INDEX-2623"></a><a name="INDEX-2624"></a><a name="INDEX-2625"></a>
When overloading an operator, try not to create objects with references
to themselves.  For instance,
<blockquote>
<pre class="programlisting">use overload '+' =&gt; sub { bless [ \$_[0], \$_[1] ] };</pre>
</blockquote>

This is asking for trouble, since if you say <tt class="literal">$animal +=
$vegetable</tt>, the result will make 
<tt class="literal">$animal</tt>
a reference to a blessed array reference whose first element is
<tt class="literal">$animal</tt>.  This is a <em class="emphasis">circular
reference</em>, which means that even if you destroy
<tt class="literal">$animal</tt>, its memory won't be freed until your
process (or interpreter) terminates.  See "Garbage Collection,
Circular References, and Weak References" in <a href="ch08_01.htm">Chapter 8, "References"</a>.</p>

<a name="INDEX-2626"></a><a name="INDEX-2627"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch13_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">13.2. Overload Handlers</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">13.4. The Copy Constructor (=)</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
