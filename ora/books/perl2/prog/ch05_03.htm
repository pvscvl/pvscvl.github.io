<html>
<head>
<title>Metacharacters and Metasymbols (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Metacharacters and Metasymbols">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm">Chapter 5: Pattern Matching</a></td><td align="right" valign="top" width="172"><a href="ch05_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">5.3. Metacharacters and Metasymbols</h2>

<p>
<a name="INDEX-1456"></a><a name="INDEX-1457"></a><a name="INDEX-1458"></a>
Now that we've admired all the fancy cages, we can go back to looking
at the critters in the cages, those funny-looking symbols you put
inside the patterns.  By now you'll have cottoned to the fact that
these symbols aren't regular Perl code like function calls or
arithmetic operators.  Regular expressions are their own little
language nestled inside of Perl.  (There's a bit of the jungle in all
of us.)</p>

<p>For all their power and expressivity, patterns in Perl recognize the
same 12 traditional metacharacters (the Dirty Dozen, as it were)
found in many other regular expression packages:
<blockquote>
<pre class="programlisting">\ | ( ) [ { ^ $ * + ? .</pre>
</blockquote>

Some of those bend the rules, making otherwise normal characters that
follow them special.  We don't like to call the longer sequences
"characters", so when they make longer sequences, we call them
<em class="emphasis">metasymbols</em> (or sometimes just "symbols").  But
at the top level, those twelve metacharacters are all you (and Perl)
need to think about.  Everything else proceeds from there.</p>

<p>
<a name="INDEX-1459"></a><a name="INDEX-1460"></a><a name="INDEX-1461"></a><a name="INDEX-1462"></a><a name="INDEX-1463"></a><a name="INDEX-1464"></a><a name="INDEX-1465"></a><a name="INDEX-1466"></a><a name="INDEX-1467"></a><a name="INDEX-1468"></a><a name="INDEX-1469"></a>
Some simple metacharacters stand by themselves, like
<tt class="literal">.</tt> and <tt class="literal">^</tt> and
<tt class="literal">$</tt>.  They don't directly affect anything around
them.  Some metacharacters work like prefix operators, governing what
follows them, like <tt class="literal">\</tt>.  Others work like postfix
operators, governing what immediately precedes them, like
<tt class="literal">*</tt>, <tt class="literal">+</tt>, and <tt class="literal">?</tt>.
One metacharacter, <tt class="literal">|</tt>, acts like an infix operator,
standing between the operands it governs.  There are even bracketing
metacharacters that work like circumfix operators, governing something
contained inside them, like <tt class="literal">(...)</tt> and
<tt class="literal">[...]</tt>.  Parentheses are particularly
important, because they specify the bounds of <tt class="literal">|</tt> on
the inside, and of <tt class="literal">*</tt>, <tt class="literal">+</tt>, and
<tt class="literal">?</tt> on the outside.</p>

<p>
<a name="INDEX-1470"></a><a name="INDEX-1471"></a>
If you learn only one of the twelve metacharacters, choose the
backslash.  (Er&nbsp;.&nbsp;.&nbsp;.&nbsp;and the parentheses.)
That's because backslash disables the others.  When a backslash
precedes a nonalphanumeric character in a Perl pattern, it always
makes that next character a literal.  If you need to match one of the
twelve metacharacters in a pattern literally, you write them with a
backslash in front.  Thus, <tt class="literal">\.</tt> matches a real dot,
<tt class="literal">\$</tt> a real dollar sign, <tt class="literal">\\</tt> a real
backslash, and so on.  This is known as "escaping" the metacharacter,
or "quoting it", or sometimes just "backslashing" it.  (Of course, you
already know that backslash is used to suppress variable interpolation
in double-quoted strings.)</p>

<p>Although a backslash turns a metacharacter into a literal character,
its effect upon a following alphanumeric character goes the other
direction.  It takes something that was regular and makes it special.
That is, together they make a metasymbol.  An alphabetical list of
these metasymbols can be found below in
<a href="ch05_03.htm">Table 5-7</a>.</p>


<h3 class="sect2">5.3.1. Metasymbol Tables</h3>

<p>
<a name="INDEX-1472"></a><a name="INDEX-1473"></a>
In the following tables, the Atomic column says "yes" if the given
metasymbol is quantifiable (if it can match something with width, more
or less).  Also, we've used "<tt class="literal">...</tt>" to represent "something else".
Please see the later discussion to find out what "<tt class="literal">...</tt>" means, if it
is not clear from the one-line gloss in the table.)</p>

<p>
<a name="INDEX-1474"></a><a name="INDEX-1475"></a><a href="ch05_03.htm">Table 5-4</a> shows the basic
traditional metasymbols.  The first four of these are the structural
metasymbols we mentioned earlier, while the last three are simple
metacharacters.  The <tt class="literal">.</tt> metacharacter is an example
of an atom because it matches something with width (the width of a
character, in this case); <tt class="literal">^</tt> and
<tt class="literal">$</tt> are examples of assertions, because they match
something of zero width, and because they are only evaluated to see if
they're true or not.</p>

<a name="perl3-tab-general-metacharacters"></a>
<h4 class="objtitle">Table 5.4. General Regex Metacharacters</h4>
<table border="1">

<tr>
<th>Symbol</th>
<th>Atomic</th>
<th>Meaning</th>
</tr>




<tr>
<td><tt class="literal">\...</tt></td>
<td>Varies</td>
<td>
<p>De-meta next nonalphanumeric character, meta next
alphanumeric character (maybe).<a name="INDEX-1476"></a>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">...|...</tt><a name="INDEX-1477"></a></td>
<td>No</td>
<td>
<p>Alternation (match one or the other).
<a name="INDEX-1478"></a>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">(...)</tt></td>
<td>Yes</td>
<td>
<p>Grouping (treat as a unit).
<a name="INDEX-1479"></a><a name="INDEX-1480"></a>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">[...]</tt></td>
<td>Yes</td>
<td>
<p>Character class (match one character from a set).
<a name="INDEX-1481"></a>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">^</tt></td>
<td>No</td>
<td>True at beginning of string (or after any newline, maybe).</td>
</tr>

<tr>
<td><tt class="literal">.</tt></td>
<td>Yes</td>
<td>
<p>Match one character (except newline, normally).</p>
</td>
</tr>

<tr>
<td><tt class="literal">$</tt></td>
<td>No</td>
<td>
<p>True at end of string (or before any newline, maybe).</p>
</td>
</tr>


</table>

<p>
<a name="INDEX-1482"></a><a name="INDEX-1483"></a>
The quantifiers, which are further described in their own section,
indicate how many times the preceding atom (that is, single character
or grouping) should match.  These are listed in
<a href="ch05_03.htm">Table 5-5</a>.</p>

<a name="perl3-tab-regex-quantifiers"></a>
<h4 class="objtitle">Table 5.5. Regex Quantifiers</h4>
<table border="1">

<tr>
<th>Quantifier</th>
<th>Atomic</th>
<th>
<p>Meaning</p>
</th>
</tr>




<tr>
<td>
<p>
<tt class="literal">*</tt>
</p>
</td>
<td>No</td>
<td>
<p>Match 0 or more times (maximal).
<a name="INDEX-1484"></a>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">+</tt></td>
<td>No</td>
<td>
<p>Match 1 or more times (maximal).
<a name="INDEX-1485"></a>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">?</tt></td>
<td>No</td>
<td>
<p>Match 1 or 0 times (maximal).
<a name="INDEX-1486"></a>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">{</tt><em class="replaceable">COUNT</em><tt class="literal">}</tt></td>
<td>No</td>
<td>
<p>Match exactly <em class="replaceable">COUNT</em> times.
<a name="INDEX-1487"></a>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">{</tt><em class="replaceable">MIN</em><tt class="literal">,}</tt></td>
<td>No</td>
<td>
<p>Match at least <em class="replaceable">MIN</em> times (maximal).
<a name="INDEX-1488"></a>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">{</tt><em class="replaceable">MIN</em><tt class="literal">,</tt><em class="replaceable">MAX</em><tt class="literal">}</tt></td>
<td>No</td>
<td>
<p>Match at least <em class="replaceable">MIN</em> but not more than <em class="replaceable">MAX</em> times (maximal).
<a name="INDEX-1489"></a>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">*?</tt></td>
<td>No</td>
<td>
<p>Match 0 or more times (minimal).
<a name="INDEX-1490"></a>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">+?</tt></td>
<td>No</td>
<td>
<p>Match 1 or more times (minimal).
<a name="INDEX-1491"></a>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">??</tt></td>
<td>No</td>
<td>
<p>Match 0 or 1 time (minimal).
<a name="INDEX-1492"></a>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">{</tt><em class="replaceable">MIN</em><tt class="literal">,}?</tt></td>
<td>No</td>
<td>
<p>Match at least <em class="replaceable">MIN</em> times (minimal).</p>
</td>
</tr>

<tr>
<td><tt class="literal">{</tt><em class="replaceable">MIN</em><tt class="literal">,</tt><em class="replaceable">MAX</em><tt class="literal">}?</tt></td>
<td>No</td>
<td>
<p>Match at least <em class="replaceable">MIN</em> but not more than
<em class="replaceable">MAX</em> times (minimal).</p>
</td>
</tr>


</table>

<p>
<a name="INDEX-1493"></a>
A minimal quantifier tries to match as <em class="emphasis">few</em>
characters as possible within its allowed range.  A maximal quantifier
tries to match as <em class="emphasis">many</em> characters as possible
within its allowed range.  For instance, <tt class="literal">.+</tt> is
guaranteed to match at least one character of the string, but will
match all of them given the opportunity.  The opportunities are
discussed later in "The Little Engine That /Could(n't)?/".</p>

<p>You'll note that quantifiers may never be quantified.</p>

<p>
<a name="INDEX-1494"></a>
We wanted to provide an extensible syntax for new kinds of
metasymbols.  Given that we only had a dozen metacharacters to work
with, we chose a formerly illegal regex sequence to use for arbitrary
syntactic extensions.  These metasymbols are all of the form
<tt class="literal">(?</tt><em class="replaceable">KEY</em><tt class="literal">...)</tt>;
that is, a (balanced) parenthesis followed by a question mark,
followed by a <em class="replaceable">KEY</em> and the rest of the
subpattern.  The <em class="replaceable">KEY</em> character indicates
which particular regex extension it is.  See
<a href="ch05_03.htm">Table 5-6</a> for a list of these.  Most
of them behave structurally since they're based on parentheses, but they
also have additional meanings.  Again, only atoms may be quantified
because they represent something that's really there (potentially).
<a name="INDEX-1495"></a>
</p>

<a name="perl3-tab-extended-regexes"></a>
<h4 class="objtitle">Table 5.6. Extended Regex Sequences</h4>
<table border="1">

<tr>
<th>Extension</th>
<th>Atomic</th>
<th>Meaning</th>
</tr>




<tr>
<td><tt class="literal">(?#...)</tt></td>
<td>No</td>
<td>
<p>Comment, discard.</p>
</td>
</tr>

<tr>
<td><tt class="literal">(?:...)</tt></td>
<td>Yes</td>
<td>
<p>Cluster-only parentheses, no capturing.</p>
</td>
</tr>

<tr>
<td><tt class="literal">(?imsx-imsx)</tt></td>
<td>No</td>
<td>
<p>Enable/disable pattern modifiers.</p>
</td>
</tr>

<tr>
<td><tt class="literal">(?imsx-imsx:...)</tt></td>
<td>Yes</td>
<td>Cluster-only parentheses plus modifiers.</td>
</tr>

<tr>
<td><tt class="literal">(?=...)</tt></td>
<td>No</td>
<td>
<p>True if lookahead assertion succeeds.</p>
</td>
</tr>

<tr>
<td><tt class="literal">(?!...)</tt></td>
<td>No</td>
<td>
<p>True if lookahead assertion fails.</p>
</td>
</tr>

<tr>
<td><tt class="literal">(?&lt;=...)</tt></td>
<td>No</td>
<td>
<p>True if lookbehind assertion succeeds.</p>
</td>
</tr>

<tr>
<td><tt class="literal">(?&lt;!...)</tt></td>
<td>No</td>
<td>
<p>True if lookbehind assertion fails.</p>
</td>
</tr>

<tr>
<td><tt class="literal">(?&gt;...)</tt></td>
<td>Yes</td>
<td>
<p>Match nonbacktracking subpattern.</p>
</td>
</tr>

<tr>
<td><tt class="literal">(?{...})</tt></td>
<td>No</td>
<td>
<p>Execute embedded Perl code.</p>
</td>
</tr>

<tr>
<td><tt class="literal">(??{...})</tt></td>
<td>Yes</td>
<td>Match regex from embedded Perl code.</td>
</tr>

<tr>
<td><tt class="literal">(?(...)...|...)</tt></td>
<td>Yes</td>
<td>
<p>Match with if-then-else pattern.</p>
</td>
</tr>

<tr>
<td><tt class="literal">(?(...)...)</tt></td>
<td>Yes</td>
<td>
<p>Match with if-then pattern.</p>
</td>
</tr>


</table>

<p>
<a name="INDEX-1496"></a><a name="INDEX-1497"></a>
And finally, <a href="ch05_03.htm">Table 5-7</a> shows all of your
favorite alphanumeric metasymbols.  (Symbols that are processed by the
variable interpolation pass are marked with a dash in the Atomic
column, since the Engine never even sees them.)</p>

<a name="perl3-tab-regex-meta-alpha"></a>
<h4 class="objtitle">Table 5.7. Alphanumeric Regex Metasymbols</h4>
<table border="1">

<tr>
<th>Symbol</th>
<th>Atomic</th>
<th>Meaning</th>
</tr>




<tr>
<td><tt class="literal">\0</tt></td>
<td>Yes</td>
<td>
<p>Match the null character (ASCII NUL).</p>
</td>
</tr>

<tr>
<td><tt class="literal">\</tt><em class="replaceable">NNN</em></td>
<td>Yes</td>
<td>
<p>Match the character given in octal, up to <tt class="literal">\377</tt>.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\</tt><em class="replaceable">n</em></td>
<td>Yes</td>
<td>
<p>Match <em class="replaceable">n</em>th previously captured string (decimal).</p>
</td>
</tr>

<tr>
<td><tt class="literal">\a</tt></td>
<td>Yes</td>
<td>
<p>Match the alarm character (BEL).</p>
</td>
</tr>

<tr>
<td><tt class="literal">\A</tt></td>
<td>No</td>
<td>
<p>True at the beginning of a string.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\b</tt></td>
<td>Yes</td>
<td>
<p>Match the backspace character (BS).</p>
</td>
</tr>

<tr>
<td><tt class="literal">\b</tt></td>
<td>No</td>
<td>
<p>True at word boundary.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\B</tt></td>
<td>No</td>
<td>
<p>True when not at word boundary.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\c</tt><em class="replaceable">X</em></td>
<td>Yes</td>
<td>Match the control character Control-<em class="replaceable">X</em> (<tt class="literal">\cZ</tt>, <tt class="literal">\c[</tt>, etc.).</td>
</tr>

<tr>
<td><tt class="literal">\C</tt></td>
<td>Yes</td>
<td>Match one byte (C <tt class="literal">char</tt>) even in utf8 (dangerous).</td>
</tr>

<tr>
<td><tt class="literal">\d</tt></td>
<td>Yes</td>
<td>
<p>Match any digit character.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\D</tt></td>
<td>Yes</td>
<td>
<p>Match any nondigit character.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\e</tt></td>
<td>Yes</td>
<td>Match the escape character (ASCII ESC, not backslash).</td>
</tr>

<tr>
<td><tt class="literal">\E</tt></td>
<td>--</td>
<td>
<p>End case (<tt class="literal">\L</tt>, <tt class="literal">\U</tt>) or metaquote (<tt class="literal">\Q</tt>) translation.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\f</tt></td>
<td>Yes</td>
<td>
<p>Match the form feed character (FF).</p>
</td>
</tr>

<tr>
<td><tt class="literal">\G</tt></td>
<td>No</td>
<td>
<p>True at end-of-match position of prior <tt class="literal">m//g</tt>.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\l</tt></td>
<td>--</td>
<td>
<p>Lowercase the next character only.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\L</tt></td>
<td>--</td>
<td>
<p>Lowercase till <tt class="literal">\E</tt>.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\n</tt></td>
<td>Yes</td>
<td>Match the newline character (usually NL, but CR on Macs).</td>
</tr>

<tr>
<td><tt class="literal">\N{</tt><em class="replaceable">NAME</em><tt class="literal">}</tt></td>
<td>Yes</td>
<td>
<p>Match the named char (<tt class="literal">\N{greek:Sigma}</tt>).</p>
</td>
</tr>

<tr>
<td><tt class="literal">\p{</tt><em class="replaceable">PROP</em><tt class="literal">}</tt></td>
<td>Yes</td>
<td>
<p>Match any character with the named property.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\P{</tt><em class="replaceable">PROP</em><tt class="literal">}</tt></td>
<td>Yes</td>
<td>Match any character without the named property.</td>
</tr>

<tr>
<td><tt class="literal">\Q</tt></td>
<td>--</td>
<td>
<p>Quote (de-meta) metacharacters till <tt class="literal">\E</tt>.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\r</tt></td>
<td>Yes</td>
<td>
<p>Match the return character (usually CR, but NL on Macs).</p>
</td>
</tr>

<tr>
<td><tt class="literal">\s</tt></td>
<td>Yes</td>
<td>
<p>Match any whitespace character.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\S</tt></td>
<td>Yes</td>
<td>
<p>Match any nonwhitespace character.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\t</tt></td>
<td>Yes</td>
<td>
<p>Match the tab character (HT).</p>
</td>
</tr>

<tr>
<td><tt class="literal">\u</tt></td>
<td>--</td>
<td>
<p>Titlecase next character only.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\U</tt></td>
<td>--</td>
<td>
<p>Uppercase (not titlecase) till <tt class="literal">\E</tt>.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\w</tt></td>
<td>Yes</td>
<td>
<p>Match any "word" character (alphanumerics plus "_").</p>
</td>
</tr>

<tr>
<td><tt class="literal">\W</tt></td>
<td>Yes</td>
<td>
<p>Match any nonword character.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\x{</tt><em class="replaceable">abcd</em><tt class="literal">}</tt></td>
<td>Yes</td>
<td>
<p>Match the character given in hexadecimal.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\X</tt></td>
<td>Yes</td>
<td>
<p>Match Unicode "combining character sequence" string.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\z</tt></td>
<td>No</td>
<td>
<p>True at end of string only.</p>
</td>
</tr>

<tr>
<td><tt class="literal">\Z</tt></td>
<td>No</td>
<td>
<p>True at end of string or before optional newline.</p>
</td>
</tr>


</table>

<p>The braces are optional on <tt class="literal">\p</tt> and
<tt class="literal">\P</tt> if the property name is one character.  The
braces are optional on <tt class="literal">\x</tt> if the hexadecimal number
is two digits or less.  The braces are never optional on
<tt class="literal">\N</tt>.</p>

<p>
<a name="INDEX-1498"></a><a name="INDEX-1499"></a>
Only metasymbols with "Match the..." or
"Match any..." descriptions may be used
within character classes (square brackets).  That is, character
classes are limited to containing specific sets of characters, so
within them you may only use metasymbols that describe other specific
sets of characters, or that describe specific individual characters.
Of course, these metasymbols may also be used outside character
classes, along with all the other nonclassificatory metasymbols.  Note
however that <tt class="literal">\b</tt> is two entirely different beasties:
it's a backspace character inside the character class, but a word
boundary assertion outside.</p>

<p>There is some amount of overlap between the characters that a pattern
can match and the characters an ordinary double-quoted string can
interpolate.  Since regexes undergo two passes, it is sometimes
ambiguous which pass should process a given character.  When there is
ambiguity, the variable interpolation pass defers the interpretation of
such characters to the regular expression parser.</p>

<p>But the variable interpolation pass can only defer to the regex parser
when it knows it is parsing a regex.  You can specify regular
expressions as ordinary double-quoted strings, but then you must
follow normal double-quote rules.  Any of the previous metasymbols
that happen to map to actual characters will still work, even though
they're not being deferred to the regex parser.  But you can't use any
of the other metasymbols in ordinary double quotes (or in any similar
constructs such as <tt class="literal">`...`</tt>,
<tt class="literal">qq(...)</tt>, <tt class="literal">qx(...)</tt>, or
the equivalent here documents).  If you want your string to be parsed
as a regular expression without doing any matching, you should be
using the <tt class="literal">qr//</tt> (quote regex) operator.</p>

<p>
<a name="INDEX-1500"></a>
Note that the case and metaquote translation escapes
(<tt class="literal">\U</tt> and friends) must be processed during the
variable interpolation pass because the purpose of those metasymbols
is to influence how variables are interpolated.  If you suppress
variable interpolation with single quotes, you don't get the
translation escapes either.  Neither variables nor translation escapes
(<tt class="literal">\U</tt>, etc.) are expanded in any single quoted
string, nor in single-quoted <tt class="literal">m'...'</tt> or
<tt class="literal">qr'...'</tt> operators.  Even when you do
interpolation, these translation escapes are ignored if they show up
as the <em class="emphasis">result</em> of variable interpolation, since by
then it's too late to influence variable interpolation.</p>

<p>Although the transliteration operator doesn't take regular expressions,
any metasymbol we've discussed that matches a single specific character also
works in a <tt class="literal">tr///</tt> operation.  The rest do not (except for backslash,
which continues to work in the backward way it always works.)</p>






<h3 class="sect2">5.3.2. Specific Characters</h3>

<p>
<a name="INDEX-1501"></a><a name="INDEX-1502"></a>
As mentioned before, everything that's not special in a pattern
matches itself.  That means an <tt class="literal">/a/</tt> matches an "a", an <tt class="literal">/=/</tt>
matches an "=", and so on.  Some characters, though, aren't very
easy to type in from the keyboard or, even if you manage that, don't
show up on a printout; control characters are notorious for this.
In a regular expression, Perl recognizes the following double-quotish
character aliases:</p>

<a name="perl3-tab-re-dblquotechars"></a>
<table border="1">

<tr>
<th>Escape</th>
<th>Meaning</th>
</tr>




<tr>
<td><tt class="literal">\0</tt></td>
<td>Null character (ASCII NUL)</td>
</tr>

<tr>
<td><tt class="literal">\a</tt></td>
<td>Alarm (BEL)</td>
</tr>

<tr>
<td><tt class="literal">\e</tt></td>
<td>Escape (ESC)</td>
</tr>

<tr>
<td><tt class="literal">\f</tt></td>
<td>Form feed (FF)</td>
</tr>

<tr>
<td><tt class="literal">\n</tt></td>
<td>Newline (NL, CR on Mac)</td>
</tr>

<tr>
<td><tt class="literal">\r</tt></td>
<td>Return (CR, NL on Mac)</td>
</tr>

<tr>
<td><tt class="literal">\t</tt></td>
<td>Tab (HT)</td>
</tr>


</table>
<p>
<a name="INDEX-1503"></a><a name="INDEX-1504"></a>
Just as in double-quoted strings, Perl also honors the following four
metasymbols in patterns:</p>

<dl>
<dt>
<b><tt class="literal">\c</tt><em class="replaceable">X</em></b>
</dt>
<dd>
<p>A named control character, like <tt class="literal">\cC</tt> for Control-C, <tt class="literal">\cZ</tt> for
Control-Z, <tt class="literal">\c[</tt> for ESC, and <tt class="literal">\c?</tt> for DEL.
<a name="INDEX-1505"></a>
</p>
</dd>


<dt>
<b><tt class="literal">\</tt><em class="replaceable">NNN</em></b>
</dt>
<dd>
<p> A character specified using its two- or three-digit
octal code.  The leading <tt class="literal">0</tt> is optional, except for
values less than <tt class="literal">010</tt> (8 decimal) since (unlike in
double-quoted strings) the single-digit versions are always considered
to be backreferences to captured strings within a pattern.  Multiple
digits are interpreted as the <em class="emphasis">n</em>th
backreference if you've captured at least <em class="emphasis">n</em>
substrings earlier in the pattern (where <em class="emphasis">n</em> is
considered as a decimal number).  Otherwise, they are interpreted as a
character specified in octal.<a name="INDEX-1506"></a><a name="INDEX-1507"></a>
</p>
</dd>


<dt>
<b><tt class="literal">\x{</tt><em class="replaceable">LONGHEX</em><tt class="literal">}</tt></b>
</dt>
<dt>
<b><tt class="literal">\x</tt><em class="replaceable">HEX</em></b>
</dt>
<dd>
<p>A character number specified as one or two hex digits (<tt class="literal">[0-9a-fA-F]</tt>), as in
<tt class="literal">\x1B</tt>.  The one-digit form is usable only if the character following
it is not a hex digit.  If braces are used, you may use as many digits
as you'd like, which may result in a Unicode character.  For example,
<tt class="literal">\x{262f}</tt> matches a Unicode YIN YANG.
<a name="INDEX-1508"></a>
</p>
</dd>


<dt>
<b><tt class="literal">\N{</tt><em class="replaceable">NAME</em><tt class="literal">}</tt></b>
</dt>
<dd>
<p> A named character, such <tt class="literal">\N{GREEK SMALL
LETTER EPSILON}</tt>, <tt class="literal">\N{greek:epsilon}</tt>, or
<tt class="literal">\N{epsilon}</tt>.  This requires the <tt class="literal">use
charnames</tt> pragma described in <a href="ch31_01.htm">Chapter 31, "Pragmatic Modules"</a>, which also determines which
flavors of those names you may use (<tt class="literal">":long"</tt>,
<tt class="literal">":full"</tt>, <tt class="literal">":short"</tt> respectively,
corresponding to the three styles just shown).
<a name="INDEX-1509"></a>
</p>

<p>A list of all Unicode character names can be found in your closest
Unicode standards document, or in
<em class="replaceable">PATH_TO_PERLLIB</em><em class="emphasis">/unicode/Names.txt</em>.</p>
</dd>

</dl>






<h3 class="sect2">5.3.3. Wildcard Metasymbols</h3>

<p>
<a name="INDEX-1510"></a><a name="INDEX-1511"></a><a name="INDEX-1512"></a><a name="INDEX-1513"></a><a name="INDEX-1514"></a><a name="INDEX-1515"></a><a name="INDEX-1516"></a>
Three special metasymbols serve as generic wildcards, each of them
matching "any" character (for certain values of "any").  These are the
dot ("<tt class="literal">.</tt>"), <tt class="literal">\C</tt>, and
<tt class="literal">\X</tt>.  None of these may be used in a character
class.  You can't use the dot there because it would match (nearly)
any character in existence, so it's something of a universal character
class in its own right. If you're going to include or exclude
everything, there's not much point in having a character class.  The
special wildcards <tt class="literal">\C</tt> and <tt class="literal">\X</tt> have
special structural meanings that don't map well to the notion of
choosing a single Unicode character, which is the level at which
character classes work.</p>

<p>
<a name="INDEX-1517"></a>
The dot metacharacter matches any one character other than a
newline.  (And with the <tt class="literal">/s</tt> modifier, it matches
that, too.)  Like any of the dozen special characters in a pattern, to
match a dot literally, you must escape it with a backslash.  For
example, this checks whether a filename ends with a dot followed by a
one-character extension:
<blockquote>
<pre class="programlisting">if ($pathname =~ /\.(.)\z/s) {
    print "Ends in $1\n";
}</pre>
</blockquote>

The first dot, the escaped one, is the literal character, and the
second says "match any character".  The <tt class="literal">\z</tt> says to
match only at the end of the string, and the <tt class="literal">/s</tt>
modifier lets the dot match a newline as well. (Yes, using a newline
as a file extension Isn't Very Nice, but that doesn't mean it can't
happen.)</p>

<p>
<a name="INDEX-1518"></a>
The dot metacharacter is most often used with a quantifier.  A
<tt class="literal">.*</tt> matches a maximal number of characters, while a
<tt class="literal">.*?</tt> matches a minimal number of characters.  But
it's also sometimes used without a quantifier for its width:
<tt class="literal">/(..):(..):(..)/</tt> matches three colon-separated
fields, each of which is two characters long.</p>

<p>
<a name="INDEX-1519"></a><a name="INDEX-1520"></a>
If you use a dot in a pattern compiled under the lexically scoped
<tt class="literal">use utf8</tt> pragma, then it will match any Unicode
character.  (You're not supposed to need a <tt class="literal">use utf8</tt>
for that, but accidents will happen.  The pragma may not be necessary
by the time you read this.)
<blockquote>
<pre class="programlisting">use utf8;
use charnames qw/:full/;
$BWV[887] = "G\N{MUSIC SHARP SIGN} minor";
($note, $black, $mode) = $BWV[887] =~ /^([A-G])(.)\s+(\S+)/;
print "That's lookin' sharp!\n" if $black eq chr(9839);</pre>
</blockquote>
</p>

<p>
<a name="INDEX-1521"></a>
The <tt class="literal">\X</tt> metasymbol matches a character in a more
extended sense.  It really matches a string of one or more Unicode
characters known as a "combining character sequence".  Such a sequence
consists of a base character followed by any "mark" characters
(diacritical markings like cedillas or diereses) that combine with
that base character to form one logical unit.  <tt class="literal">\X</tt>
is exactly equivalent to <tt class="literal">(?:\PM\pM*)</tt>.  This allows
it to match one logical character, even when that really comprises
several separate characters.  The length of the match in
<tt class="literal">/\X/</tt> would exceed one character if it matched any
combining characters.  (And that's character length, which has little
to do with byte length).</p>

<p>If you are using Unicode and really want to get at a single byte
instead of a single character, you can use the <tt class="literal">\C</tt>
metasymbol.  This will always match one byte (specifically, one C
language <tt class="literal">char</tt> type), even if this gets you out of
sync with your Unicode character stream.  See the appropriate warnings
about doing this in <a href="ch15_01.htm">Chapter 15, "Unicode"</a>.</p>

<a name="INDEX-1522"></a><a name="INDEX-1523"></a><a name="INDEX-1524"></a>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.2. Pattern-Matching Operators</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.4. Character Classes</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
