<html>
<head>
<title>Special Variables in Alphabetical Order (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Special Variables in Alphabetical Order">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch28_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch28_01.htm">Chapter 28: Special Names</a></td><td align="right" valign="top" width="172"><a href="ch29_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">28.2. Special Variables in Alphabetical Order</h2>

<p>We've alphabetized these entries according to the long variable name.
If you don't know the long name of a variable, you can find it in
the previous section.  (Variables without alphabetical names are sorted to the front.)</p>

<p>So that we don't have to keep repeating ourselves, each variable
description starts with one or more of these annotations:</p>

<a name="perl3-tab-specvar"></a>
<table border="1">

<tr>
<th>Annotation</th>
<th>Meaning</th>
</tr>




<tr>
<td>XXX</td>
<td>
<p>Deprecated, <em class="emphasis">do not use</em> in anything new.</p>
</td>
</tr>

<tr>
<td>NOT</td>
<td>
<p>Not Officially There (internal use only).</p>
</td>
</tr>

<tr>
<td>ALL</td>
<td>
<p>Truly global, shared by all packages.</p>
</td>
</tr>

<tr>
<td>PKG</td>
<td>Package global; each package can have its own.</td>
</tr>

<tr>
<td>FHA</td>
<td>
<p>Filehandle attribute; one per I/O object.</p>
</td>
</tr>

<tr>
<td>DYN</td>
<td>Dynamically scoped automatically (implies ALL).</td>
</tr>

<tr>
<td>LEX</td>
<td>
<p>Lexically scoped at compile time.</p>
</td>
</tr>

<tr>
<td>RO</td>
<td>
<p>Read only; raises an exception if you modify.</p>
</td>
</tr>


</table>
<p>When more than one variable name or symbol is listed, only the short
one is available by default.  Using the <tt class="literal">English</tt> module makes the
longer synonyms available to the current package, and only to
the current package, even if the variable is marked [ALL].</p>

<p>Entries of the form <em class="replaceable">method HANDLE EXPR</em> show object-oriented
interfaces to the per-filehandle variables provided by the
<tt class="literal">FileHandle</tt> and various <tt class="literal">IO::</tt> modules.  (You may also use the 
<em class="replaceable">HANDLE</em><tt class="literal">-&gt;</tt><em class="replaceable">method</em><tt class="literal">(</tt><em class="replaceable">EXPR</em><tt class="literal">)</tt> notation if you prefer.) These let you
avoid having to call <tt class="literal">select</tt> to change the default output handle
before examining or changing that variable.  Each such method returns
the old value of the <tt class="literal">FileHandle</tt> attribute; a new value is set if
the <em class="replaceable">EXPR</em> argument is supplied.  If not supplied, most of the methods
do nothing to the current value, except for <tt class="literal">autoflush</tt>, which assumes
an argument of <tt class="literal">1</tt>, just to be different.</p>

<dl>
<dt>
<b><tt class="literal">_</tt> (underline)</b>
</dt>
<dd>
<p>
<a name="INDEX-4388"></a>
</p>

<p>[ALL] This is the special filehandle used to cache the information
from the last successful <tt class="literal">stat</tt>, <tt class="literal">lstat</tt>, or file test operator (like <tt class="literal">-w $file</tt>
or <tt class="literal">-d $file</tt>).</p>
</dd>


<dt>
<b><tt class="literal">$</tt><em class="replaceable">digits</em></b>
</dt>
<dd>
<p>
<a name="INDEX-4389"></a><a name="INDEX-4390"></a><a name="INDEX-4391"></a>
[DYN,RO] The numbered variables <tt class="literal">$1</tt>,
<tt class="literal">$2</tt>, and so on (up just as high as you
want)<a href="#FOOTNOTE-1">[1]</a> contain the text that is
matched by the corresponding set of parentheses in the last matched
pattern within the currently active dynamic scope.  (Mnemonic: like
<tt class="literal">\</tt><em class="replaceable">digits</em>.)</p>
<blockquote class="footnote">

<a name="FOOTNOTE-1"></a>
<p>[1] Although many regular expression engines only support
up to nine backreferences, Perl has no such limit, so if you go around
writing <tt class="literal">$768</tt>, Perl won't mind, although maintainers
of your code might if you actually use that many parentheses in your
regular expressions.</p>

</blockquote>
</dd>


<dt>
<b><tt class="literal">$[</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4392"></a><a name="INDEX-4393"></a><a name="INDEX-4394"></a><a name="INDEX-4395"></a>
[XXX,LEX] The index of the first element in an array and of the first
character in a substring.  Default is 0, but we used to set it to 1 to
make Perl behave more like <em class="emphasis">awk</em> (or FORTRAN) when
subscripting and when evaluating the <tt class="literal">index</tt> and
<tt class="literal">substr</tt> functions.  Because it was found to be so
dangerous, assignment to <tt class="literal">$[</tt> is now treated as a
lexically scoped compiler directive and cannot influence the behavior
of any other file.  (Mnemonic: <tt class="literal">[</tt> begins
subscripts.)</p>
</dd>


<dt>
<b><tt class="literal">$#</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4396"></a>
[XXX,ALL] Don't use this; use <tt class="literal">printf</tt> instead.
<tt class="literal">$#</tt> contains the output format for printed numbers,
in a half-hearted attempt to emulate
<em class="emphasis">awk</em>'s <tt class="literal">OFMT</tt> variable.
(Mnemonic: <tt class="literal">#</tt> is the number sign, but if you're
sharp, you'll just forget it so you don't make a hash of your program
and get pounded for it.)</p>
</dd>


<dt>
<b><tt class="literal">$*</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4397"></a>
[XXX,ALL] Wow, three deprecated variables in a row!  This one can (but
shouldn't) be set to true to get Perl to assume <tt class="literal">/m</tt> on every pattern
match that doesn't have an explicit <tt class="literal">/s</tt>.  (Mnemonic: <tt class="literal">*</tt> matches
multiple things.)</p>
</dd>


<dt>
<b><tt class="literal">$a</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4398"></a><a name="INDEX-4399"></a>
[PKG] This variable is used by the <tt class="literal">sort</tt> function to hold the first
of each pair of values to be compared (<tt class="literal">$b</tt> is the second of each
pair).  The package for <tt class="literal">$a</tt> is the same one that the <tt class="literal">sort</tt> operator
was compiled in, which is not necessarily the same as the one its
comparison function was compiled into.  This variable is implicitly
localized within the <tt class="literal">sort</tt> comparison block.  Because it is a global,
it is exempt from <tt class="literal">use strict</tt> complaints.  Because it is an alias for
the actual array value, you might think you can modify it, but you
shouldn't.  See the <tt class="literal">sort</tt> function.</p>
</dd>


<dt>
<b><tt class="literal">$ACCUMULATOR</tt></b>
</dt>
<dt>
<b><tt class="literal">$^A</tt></b>
</dt>
<dd>
<a name="INDEX-4400"></a><a name="INDEX-4401"></a>
<p>[ALL] The current value of the <tt class="literal">write</tt> accumulator
for <tt class="literal">format</tt> lines.  A format contains
<tt class="literal">formline</tt> commands that put their result into
<tt class="literal">$^A</tt>.  After calling its format,
<tt class="literal">write</tt> prints out the contents of
<tt class="literal">$^A</tt> and empties it.  So you never actually see the
contents of <tt class="literal">$^A</tt> unless you call
<tt class="literal">formline</tt> yourself and then look at it.  See the
<tt class="literal">formline</tt> function.</p>
</dd>


<dt>
<b><tt class="literal">$ARG</tt></b>
</dt>
<dt>
<b><tt class="literal">$_</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4402"></a><a name="INDEX-4403"></a><a name="INDEX-4404"></a>
[ALL] The default input and pattern-search space. These pairs are
equivalent:
<blockquote>
<pre class="programlisting">while (&lt;&gt;) {...}    # equivalent only in unadorned while test
while (defined($_ = &lt;&gt;)) {...}

chomp
chomp($_)

/^Subject:/
$_ =~ /^Subject:/

tr/a-z/A-Z/
$_ =~ tr/a-z/A-Z/</pre>
</blockquote>

Here are the places where Perl will assume <tt class="literal">$_</tt> if you don't 
specify something to operate on:</p>
</dd>


<dt>
<b><tt class="literal">@ARG</tt></b>
</dt>
<dt>
<b><tt class="literal">@_</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4405"></a><a name="INDEX-4406"></a><a name="INDEX-4407"></a><a name="INDEX-4408"></a><a name="INDEX-4409"></a>
[ALL] Within a subroutine, this array holds the argument list passed to
that subroutine.  See <a href="ch06_01.htm">Chapter 6, "Subroutines"</a>.  A <tt class="literal">split</tt> in scalar context splits to this array, but this usage is deprecated.</p>
</dd>


<dt>
<b><tt class="literal">ARGV</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4410"></a>
[ALL] The special filehandle that iterates over command-line filenames in <tt class="literal">@ARGV</tt>.  Usually written as the null filehandle
in the angle operator: <tt class="literal">&lt;&gt;</tt>.</p>
</dd>


<dt>
<b><tt class="literal">$ARGV</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4411"></a>
[ALL] Contains the name of the current file when reading from the <tt class="literal">ARGV</tt>
handle using the <tt class="literal">&lt;&gt;</tt> or <tt class="literal">readline</tt> operators.</p>
</dd>


<dt>
<b><tt class="literal">@ARGV</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4412"></a>
[ALL] The array containing the command-line arguments intended for the
script.  Note that <tt class="literal">$#ARGV</tt> is generally the number of arguments
minus one, since <tt class="literal">$ARGV[0]</tt> is the first argument, not the command
name; use <tt class="literal">scalar @ARGV</tt> for the number of program arguments.  See
<tt class="literal">$0</tt> for the program name.</p>
</dd>


<dt>
<b><tt class="literal">ARGVOUT</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4413"></a>
[ALL] The special filehandle is used while processing the <tt class="literal">ARGV</tt>
handle under the <span class="option">-i</span> switch or the <tt class="literal">$^I</tt> variable.  See the
<span class="option">-i</span> switch in <a href="ch19_01.htm">Chapter 19, "The Command-Line Interface"</a>.</p>
</dd>


<dt>
<b><tt class="literal">$b</tt></b>
</dt>
<dd>
<p>[PKG] The variable, companion to <tt class="literal">$a</tt>, used in <tt class="literal">sort</tt>
comparisons.  See <tt class="literal">$a</tt> and the <tt class="literal">sort</tt> function for details.</p>
</dd>


<dt>
<b><tt class="literal">$BASETIME</tt></b>
</dt>
<dt>
<b><tt class="literal">$^T</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4414"></a><a name="INDEX-4415"></a><a name="INDEX-4416"></a><a name="INDEX-4417"></a>
[ALL] The time at which the script began running, in seconds since the epoch
(the beginning of 1970, for Unix systems).  The values returned by the
<tt class="literal">-M</tt>, <tt class="literal">-A</tt>, and <tt class="literal">-C</tt> file tests are relative to this moment.</p>
</dd>


<dt>
<b><tt class="literal">$CHILD_ERROR</tt></b>
</dt>
<dt>
<b><tt class="literal">$?</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4418"></a><a name="INDEX-4419"></a><a name="INDEX-4420"></a><a name="INDEX-4421"></a><a name="INDEX-4422"></a><a name="INDEX-4423"></a>
[ALL] The status returned by the last pipe close, backtick
(<tt class="literal">``</tt>) command, or <tt class="literal">wait</tt>,
<tt class="literal">waitpid</tt>, or <tt class="literal">system</tt> functions.
Note that this is not just the simple exit code, but the entire 16-bit
status word returned by the underlying
<em class="emphasis">wait</em>(2) or
<em class="emphasis">waitpid</em>(2) syscall (or equivalent).  Thus,
the exit value of the subprocess is in the high byte, that is,
<tt class="literal">$? &gt;&gt; 8</tt>; in the low byte, <tt class="literal">$? &amp;
127</tt> says which signal (if any) the process died from, while
<tt class="literal">$? &amp; 128</tt> reports whether its demise produced a
core dump.  (Mnemonic: similar to <tt class="literal">$?</tt> in the
<em class="emphasis">sh</em> and its offspring.)</p>

<p>Inside an <tt class="literal">END</tt> block, <tt class="literal">$?</tt> contains the value that is going to be
given to <tt class="literal">exit</tt>.  You can modify <tt class="literal">$?</tt> in an <tt class="literal">END</tt> to
change the exit status of the script.</p>

<p>Under VMS, the pragma <tt class="literal">use vmsish 'status'</tt> makes <tt class="literal">$?</tt> reflect
the true VMS exit status, instead of the default emulation of POSIX
status.</p>

<p>If the <tt class="literal">h_errno</tt> variable is supported in C, its numeric value is
returned via <tt class="literal">$?</tt> if any of the <tt class="literal">gethost*()</tt> functions fail.</p>
</dd>


<dt>
<b><tt class="literal">$COMPILING</tt></b>
</dt>
<dt>
<b><tt class="literal">$^C</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4424"></a><a name="INDEX-4425"></a><a name="INDEX-4426"></a><a name="INDEX-4427"></a>
[ALL] The current value of the internal flag associated with the
<span class="option">-c</span> switch, mainly of use with
<span class="option">-MO</span> and the
<em class="emphasis">perlcc</em>(1) tool to let code alter its
behavior when being compiled for code generation.  For example, you
might want to <tt class="literal">AUTOLOAD</tt> at compile time instead of
using the normal, deferred loading so that code can be generated right
away.  See <a href="ch18_01.htm">Chapter 18, "Compiling"</a>.</p>
</dd>


<dt>
<b><tt class="literal">DATA</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4428"></a><a name="INDEX-4429"></a><a name="INDEX-4430"></a>
[PKG] This special filehandle refers to anything following
either the <tt class="literal">__END__</tt> token or the <tt class="literal">__DATA__</tt> token in the current file.
The <tt class="literal">__END__</tt> token always opens the <tt class="literal">main::DATA</tt> filehandle, and so is
used in the main program.  The <tt class="literal">__DATA__</tt> token opens the <tt class="literal">DATA</tt> handle
in whichever package is in effect at the time, so different modules can
each have their own <tt class="literal">DATA</tt> filehandle, since they (presumably) have
different package names.</p>
</dd>


<dt>
<b><tt class="literal">$DEBUGGING</tt></b>
</dt>
<dt>
<b><tt class="literal">$^D</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4431"></a><a name="INDEX-4432"></a><a name="INDEX-4433"></a>
[ALL] The current value of the internal debugging flags, set from the
<span class="option">-D</span> switch on the command line; see <a href="ch19_01.htm">Chapter 19, "The Command-Line Interface"</a> for the bit values.  (Mnemonic:  value of the <span class="option">-D</span> switch.)</p>
</dd>


<dt>
<b><tt class="literal">$EFFECTIVE_GROUP_ID</tt></b>
</dt>
<dt>
<b><tt class="literal">$EGID</tt></b>
</dt>
<dt>
<b><tt class="literal">$)</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4434"></a><a name="INDEX-4435"></a><a name="INDEX-4436"></a><a name="INDEX-4437"></a>
[ALL] The effective GID (group ID) of this process.  If you are on a
machine that supports membership in multiple groups simultaneously,
<tt class="literal">$)</tt> gives a space-separated list of groups you are
in.  The first number is the one returned by
<em class="emphasis">getegid</em>(2), and the subsequent ones by
<em class="emphasis">getgroups</em>(2), one of which may be the same
as the first number.</p>

<p>Similarly, a value assigned to <tt class="literal">$)</tt> must also be a
space-separated list of numbers.  The first number is used to set the
effective GID, and the rest (if any) are passed to the
<em class="emphasis">setgroups</em>(2) syscall.  To get the effect
of an empty list for <tt class="literal">setgroups</tt>, just repeat the new
effective GID; for example,

to force an effective GID of 5 and an
effectively empty <tt class="literal">setgroups</tt> list, say:
<blockquote>
<pre class="programlisting">$) = "5 5";</pre>
</blockquote>
</p>

<p>(Mnemonic: parentheses are used to <em class="emphasis">group</em> things.  The effective
GID is the group that's <em class="emphasis">right</em> for you, if you're running setgid.)  Note: <tt class="literal">$&lt;</tt>, <tt class="literal">$&gt;</tt>, <tt class="literal">$(</tt>, and <tt class="literal">$)</tt> can only be set on
machines that support the corresponding system set-id routine.
<tt class="literal">$(</tt> and <tt class="literal">$)</tt> can be swapped only on machines supporting
<em class="emphasis">setregid</em>(2).</p>
</dd>


<dt>
<b><tt class="literal">$EFFECTIVE_USER_ID</tt></b>
</dt>
<dt>
<b><tt class="literal">$EUID</tt></b>
</dt>
<dt>
<b><tt class="literal">$&gt;</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4438"></a><a name="INDEX-4439"></a><a name="INDEX-4440"></a><a name="INDEX-4441"></a><a name="INDEX-4442"></a>
[ALL] The effective UID of this process as returned by the
<em class="emphasis">geteuid</em>(2) syscall.  Example:
<blockquote>
<pre class="programlisting">$&lt; = $&gt;;            # set real to effective uid
($&lt;,$&gt;) = ($&gt;,$&lt;);  # swap real and effective uid</pre>
</blockquote>

(Mnemonic: it's the UID you went <em class="emphasis">to</em>, if you're
running setuid.)  Note: <tt class="literal">$&lt;</tt> and
<tt class="literal">$&gt;</tt> can only be swapped on machines supporting
<em class="emphasis">setreuid</em>(2).  And sometimes not even then.</p>
</dd>


<dt>
<b><tt class="literal">%ENV</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4443"></a><a name="INDEX-4444"></a><a name="INDEX-4445"></a>
[ALL] The hash containing your current environment variables.  Setting
a value in <tt class="literal">%ENV</tt> changes the environment for both your process and child processes launched after the assignment.  (It cannot change
a parent process's environment on any system resembling Unix.)
<blockquote>
<pre class="programlisting">$ENV{PATH}  = "/bin:/usr/bin";
$ENV{PAGER} = "less";
$ENV{LESS}  = "MQeicsnf";  # our favorite switches to less(1)
system "man perl";         # picks up new settings</pre>
</blockquote>

To remove something from your environment, make sure to use the <tt class="literal">delete</tt>
function instead of <tt class="literal">undef</tt> on the hash value.</p>

<p>Note that processes running as <em class="emphasis">crontab</em>(5)
entries inherit a particularly impoverished set of environment
variables. (If your program runs fine from the command line but not
under <em class="emphasis">cron</em>, this is probably why.)  Also note that
you should set <tt class="literal">$ENV{PATH}</tt>,
<tt class="literal">$ENV{SHELL}</tt>, <tt class="literal">$ENV{BASH_ENV}</tt>, and
<tt class="literal">$ENV{IFS}</tt> if you are running as a setuid script.
See <a href="ch23_01.htm">Chapter 23, "Security"</a>.</p>
</dd>


<dt>
<b><tt class="literal">$EVAL_ERROR</tt></b>
</dt>
<dt>
<b><tt class="literal">$@</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4446"></a><a name="INDEX-4447"></a><a name="INDEX-4448"></a><a name="INDEX-4449"></a>
[ALL] The currently raised exception or the Perl syntax error message
from the last <tt class="literal">eval</tt> operation. (Mnemonic: where was
the syntax error "at"?)  Unlike <tt class="literal">$!</tt>
(<tt class="literal">$OS_ERROR</tt>), which is set on failure but not cleared
on success, <tt class="literal">$@</tt> is guaranteed to be set (to a true
value) if the last <tt class="literal">eval</tt> had a compilation error or
run-time exception, and guaranteed to be cleared (to a false value) if
no such problem occurred.</p>

<p>Warning messages are not collected in this variable.  You
can, however, set up a routine to process warnings by setting
<tt class="literal">$SIG{__WARN__}</tt> as described later in this section.</p>

<p>Note that the value of <tt class="literal">$@</tt> may be an exception object rather than a string.
If so, you can still probably treat it as a string if the exception object
has stringification overloading defined for its class.  If you propagate
an exception by saying:
<blockquote>
<pre class="programlisting">die if $@;</pre>
</blockquote>

then an exception object will call <tt class="literal">$@-&gt;PROPAGATE</tt> to see what to do.
(A string exception merely adds a "propagated at" line to the string.)</p>
</dd>


<dt>
<b><tt class="literal">$EXCEPTIONS_BEING_CAUGHT</tt></b>
</dt>
<dt>
<b><tt class="literal">$^S</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4450"></a><a name="INDEX-4451"></a>
[ALL] This variable reflects the current state of the interpreter,
returning true if inside an <tt class="literal">eval</tt>, false otherwise.  It's undefined if
parsing of the current compilation unit hasn't finished yet, which may
be the case in <tt class="literal">$SIG{__DIE__}</tt> and <tt class="literal">$SIG{__WARN__}</tt> handlers.  (Mnemonic: state of <tt class="literal">eval</tt>.)</p>
</dd>


<dt>
<b><tt class="literal">$EXECUTABLE_NAME</tt></b>
</dt>
<dt>
<b><tt class="literal">$^X</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4452"></a><a name="INDEX-4453"></a><a name="INDEX-4454"></a>
[ALL] The name that the <em class="emphasis">perl</em> binary itself was executed as, from C's
<tt class="literal">argv[0]</tt>.</p>
</dd>


<dt>
<b><tt class="literal">@EXPORT</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4455"></a>
[PKG] This array variable is consulted by the
<tt class="literal">Exporter</tt> module's <tt class="literal">import</tt> method
to find the list of other package variables and subroutines to be
exported by default when the module is <tt class="literal">use</tt>d, or
when the <tt class="literal">:DEFAULT</tt> import tag is used.  It is not
exempt from <tt class="literal">use strict</tt> complaints, so it must be
declared with <tt class="literal">our</tt> or fully qualified by package
name if you've enabled that pragma.  However, all variables whose
names begin with the string "<tt class="literal">EXPORT</tt>" are exempt
from warnings about being used only once.  See <a href="ch11_01.htm">Chapter 11, "Modules"</a>.
</p>
</dd>


<dt>
<b><tt class="literal">@EXPORT_OK</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4456"></a>
[PKG] This array variable is consulted by the <tt class="literal">Exporter</tt>
module's <tt class="literal">import</tt> method to determine whether a requested import
is legal.  It is not exempt from <tt class="literal">use strict</tt>.  See <a href="ch11_01.htm">Chapter 11, "Modules"</a>.</p>
</dd>


<dt>
<b><tt class="literal">%EXPORT_TAGS</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4457"></a>
[PKG] This hash variable is consulted by the <tt class="literal">Exporter</tt>
module's <tt class="literal">import</tt> method when an import symbol with a leading colon
is requested, as in <tt class="literal">use POSIX ":sys_wait_h"</tt>.  The keys are the
colon tags, but without the loading colon.  The values should be
references to arrays containing symbols to import when the
colon tag is requested, all of which must also appear in either
<tt class="literal">@EXPORT</tt> or <tt class="literal">@EXPORT_OK</tt>.  It is not exempt from <tt class="literal">use strict</tt>.
See <a href="ch11_01.htm">Chapter 11, "Modules"</a>.</p>
</dd>


<dt>
<b><tt class="literal">$EXTENDED_OS_ERROR</tt></b>
</dt>
<dt>
<b><tt class="literal">$^E</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4458"></a><a name="INDEX-4459"></a>
</p>

<p>[ALL] Error information specific to the current operating system.  Under
Unix, <tt class="literal">$^E</tt> is identical to <tt class="literal">$!</tt> (<tt class="literal">$OS_ERROR</tt>), but it differs under OS/2, VMS,
and Microsoft systems, and on MacPerl.  See your port's information for
specifics.  Caveats mentioned in the description of <tt class="literal">$!</tt> generally
apply to <tt class="literal">$^E</tt> as well.  (Mnemonic: extra error explanation.)</p>
</dd>


<dt>
<b><tt class="literal">@F</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4460"></a><a name="INDEX-4461"></a><a name="INDEX-4462"></a><a name="INDEX-4463"></a>
[PKG] The array into which the input line's fields are split when the
<span class="option">-a</span>
command-line

 switch is given.  If the
<span class="option">-a</span> option is not used, this array has no special
meaning.  (This array is actually only <tt class="literal">@main::F</tt>,
and not in all packages at once.)</p>
</dd>


<dt>
<b><tt class="literal">%FIELDS</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4464"></a>
[NOT,PKG] This hash is for internal use by the <tt class="literal">use fields</tt> pragma to
determine the current legal fields in an object hash.  See <tt class="literal">use
fields</tt>, <tt class="literal">use base</tt>, and "Field Declarations with use fields" in
<a href="ch12_01.htm">Chapter 12, "Objects"</a>.</p>
</dd>


<dt>
<b><tt class="literal">format_formfeed</tt> <em class="replaceable">HANDLE EXPR</em></b>
</dt>
<dt>
<b><tt class="literal">$FORMAT_FORMFEED</tt></b>
</dt>
<dt>
<b><tt class="literal">$^L</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4465"></a><a name="INDEX-4466"></a><a name="INDEX-4467"></a>
[ALL] What a <tt class="literal">write</tt> function implicitly outputs to perform a form feed before
it emits a top of form header.  Default is <tt class="literal">"\f"</tt>.</p>
</dd>


<dt>
<b><tt class="literal">format_lines_left</tt> <em class="replaceable">HANDLE EXPR</em></b>
</dt>
<dt>
<b><tt class="literal">$FORMAT_LINES_LEFT</tt></b>
</dt>
<dt>
<b><tt class="literal">$-</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4468"></a><a name="INDEX-4469"></a>
[FHA] The number of lines left on the page of the currently selected output
handle, for use with the <tt class="literal">format</tt> declaration and the
<tt class="literal">write</tt> function.  (Mnemonic: <tt class="literal">lines_on_page
- lines_printed</tt>.)</p>
</dd>


<dt>
<b><tt class="literal">format_lines_per_page</tt> <em class="replaceable">HANDLE EXPR</em></b>
</dt>
<dt>
<b><tt class="literal">$FORMAT_LINES_PER_PAGE</tt></b>
</dt>
<dt>
<b><tt class="literal">$=</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4470"></a><a name="INDEX-4471"></a>
[FHA] The current page length (printable lines) of the currently selected
output handle, for use with <tt class="literal">format</tt> and <tt class="literal">write</tt>.  Default is 60.
(Mnemonic: <tt class="literal">=</tt> has horizontal lines.)</p>
</dd>


<dt>
<b><tt class="literal">format_line_break_characters</tt> <em class="replaceable">HANDLE EXPR</em></b>
</dt>
<dt>
<b><tt class="literal">$FORMAT_LINE_BREAK_CHARACTERS</tt></b>
</dt>
<dt>
<b><tt class="literal">$:</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4472"></a><a name="INDEX-4473"></a><a name="INDEX-4474"></a><a name="INDEX-4475"></a>
[ALL] The current set of characters after which a string may be broken
to fill continuation fields (starting with <tt class="literal">^</tt>) in a
format.  Default is <tt class="literal">" \n-"</tt>, to break on whitespace
or hyphens.  (Mnemonic: a colon is a technical word meaning part of a
line in poetry.  Now you just have to remember the mnemonic...)</p>
</dd>


<dt>
<b><tt class="literal">format_name</tt> <em class="replaceable">HANDLE EXPR</em></b>
</dt>
<dt>
<b><tt class="literal">$FORMAT_NAME</tt></b>
</dt>
<dt>
<b><tt class="literal">$~</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4476"></a><a name="INDEX-4477"></a>
[FHA] The name of the current report format for the currently selected output
handle.  Default is the filehandle's name.  (Mnemonic: takes a turn
after <tt class="literal">$^</tt>.)</p>
</dd>


<dt>
<b><tt class="literal">format_page_number</tt> <em class="replaceable">HANDLE EXPR</em></b>
</dt>
<dt>
<b><tt class="literal">$FORMAT_PAGE_NUMBER</tt></b>
</dt>
<dt>
<b><tt class="literal">$%</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4478"></a><a name="INDEX-4479"></a><a name="INDEX-4480"></a><a name="INDEX-4481"></a><a name="INDEX-4482"></a><a name="INDEX-4483"></a>
[FHA] The current page number of the currently selected output handle,
for use with <tt class="literal">format</tt> and <tt class="literal">write</tt>.
(Mnemonic: <tt class="literal">%</tt> is the page number register in <em class="emphasis">troff</em>(1).  What, you don't
know what <em class="emphasis">troff</em> is?)</p>
</dd>


<dt>
<b><tt class="literal">format_top_name</tt> <em class="replaceable">HANDLE EXPR</em></b>
</dt>
<dt>
<b><tt class="literal">$FORMAT_TOP_NAME</tt></b>
</dt>
<dt>
<b><tt class="literal">$^</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4484"></a><a name="INDEX-4485"></a><a name="INDEX-4486"></a><a name="INDEX-4487"></a>
[FHA] The name of the current top-of-page format for the currently selected
output handle.  Default is name of the filehandle with <tt class="literal">_TOP</tt>
appended. (Mnemonic: points to top of page.)</p>
</dd>


<dt>
<b><tt class="literal">$^H</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4488"></a><a name="INDEX-4489"></a><a name="INDEX-4490"></a>
</p>

<p>[NOT,LEX] This variable contains lexically scoped status bits (a.k.a. hints) for the Perl parser.  This variable is strictly for internal use
only.  Its availability, behavior, and contents are subject to change
without notice.  If you touch it, you will undoubtedly die a horrible
death of some loathsome tropical disease unknown to science.  (Mnemonic: we won't give you a hint.)</p>
</dd>


<dt>
<b><tt class="literal">%^H</tt></b>
</dt>
<dd>
<p>[NOT,LEX] The <tt class="literal">%^H</tt> hash provides the same lexical scoping semantics
as <tt class="literal">$^H</tt>, making it useful for implementation of lexically scoped
pragmas.  Read the dire warnings listed under <tt class="literal">$^H</tt>, and then add to
them the fact that this variable is still experimental.</p>
</dd>


<dt>
<b><tt class="literal">%INC</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4491"></a><a name="INDEX-4492"></a><a name="INDEX-4493"></a>
</p>

<p>[ALL] The hash containing entries for the filename of each Perl file
loaded via <tt class="literal">do</tt><em class="replaceable">FILE</em>,
<tt class="literal">require</tt>, or <tt class="literal">use</tt>.  The key is the
filename you specified, and the value is the location of the file
actually found.  The <tt class="literal">require</tt> operator uses this
array to determine whether a given file has already been loaded.  For
example:
<blockquote>
<pre class="programlisting">% <tt class="userinput"><b>perl -MLWP::Simple -le 'print $INC{"LWP/Simple.pm"}'</b></tt>
/opt/perl/5.6.0/lib/site_perl/LWP/Simple.pm</pre>
</blockquote>
</p>
</dd>


<dt>
<b><tt class="literal">@INC</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4494"></a><a name="INDEX-4495"></a><a name="INDEX-4496"></a>
[ALL] The array containing the list of directories where Perl modules
may be found by <tt class="literal">do</tt><em class="replaceable">FILE</em>,
<tt class="literal">require</tt>, or <tt class="literal">use</tt>.  It initially
consists of the arguments to any <span class="option">-I</span> command-line
switches and directories in the <tt class="literal">PERL5LIB</tt>
environment variable, followed by the default Perl libraries, such as:
<blockquote>
<pre class="programlisting">/usr/local/lib/perl5/5.6.0/sun4-solaris
/usr/local/lib/perl5/5.6.0
/usr/local/lib/perl5/site_perl/5.6.0/sun4-solaris
/usr/local/lib/perl5/site_perl/5.6.0
/usr/local/lib/perl5/site_perl/5.00552/sun4-solaris
/usr/local/lib/perl5/site_perl/5.00552
/usr/local/lib/perl5/site_perl/5.005/sun4-solaris
/usr/local/lib/perl5/site_perl/5.005
/usr/local/lib/perl5/site_perl</pre>
</blockquote>

followed by "<tt class="literal">.</tt>", to represent the current
directory.  If you need to modify this list from within your program,
try the <tt class="literal">use lib</tt> pragma, which not only modifies the
variable at compile time, but also adds in any related
architecture-dependent directories (such as those that contain the
shared libraries used by XS modules):
<blockquote>
<pre class="programlisting">use lib "/mypath/libdir/";
use SomeMod;</pre>
</blockquote>
</p>
</dd>


<dt>
<b><tt class="literal">$INPLACE_EDIT</tt></b>
</dt>
<dt>
<b><tt class="literal">$^I</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4497"></a><a name="INDEX-4498"></a><a name="INDEX-4499"></a>
</p>

<p>[ALL] The current value of the inplace-edit extension.  Use <tt class="literal">undef</tt> to
disable inplace editing.  You can use this from within your program
to get the same behavior as the <span class="option">-i</span> switch provides.  For example,
to do the equivalent of this command:
<blockquote>
<pre class="programlisting">% <tt class="userinput"><b>perl -i.orig -pe 's/foo/bar/g' *.c</b></tt>
</pre>
</blockquote>

you can use the following equivalent code in your program:
<blockquote>
<pre class="programlisting">local $^I   = '.orig';
local @ARGV = glob("*.c");
while (&lt;&gt;) {
    s/foo/bar/g;
    print;
}</pre>
</blockquote>

(Mnemonic: value of the <tt class="userinput"><b>-i</b></tt> switch.)</p>
</dd>


<dt>
<b><tt class="literal">$INPUT_LINE_NUMBER</tt></b>
</dt>
<dt>
<b><tt class="literal">$NR</tt></b>
</dt>
<dt>
<b><tt class="literal">$.</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4500"></a><a name="INDEX-4501"></a><a name="INDEX-4502"></a>
[ALL] The current record number (usually line number) for the last
filehandle you read from (or called <tt class="literal">seek</tt> or
<tt class="literal">tell</tt> on).  The value may be different from the
actual physical line number in the file, depending on what notion of
"line" is in effect--see <tt class="literal">$/</tt>
(<tt class="literal">$INPUT_RECORD_SEPARATOR</tt>) on how to affect that.
An explicit close on a filehandle resets the line number.  Because
<tt class="literal">&lt;&gt;</tt> never does an explicit close, line numbers
increase across <tt class="literal">ARGV</tt> files (but see examples under
<tt class="literal">eof</tt>).  Localizing <tt class="literal">$.</tt> also
localizes Perl's notion of "the last read filehandle".  (Mnemonic:
many programs use "<tt class="literal">.</tt>" to mean the current line
number.)</p>
</dd>


<dt>
<b><tt class="literal">$INPUT_RECORD_SEPARATOR</tt></b>
</dt>
<dt>
<b><tt class="literal">$RS</tt></b>
</dt>
<dt>
<b><tt class="literal">$/</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4503"></a><a name="INDEX-4504"></a><a name="INDEX-4505"></a><a name="INDEX-4506"></a>
[ALL] The input record separator, newline by default, which is
consulted by the <tt class="literal">readline</tt> function, the
<tt class="literal">&lt;FH&gt;</tt> operator, and the
<tt class="literal">chomp</tt> function.  It works like
<em class="emphasis">awk</em>'s <tt class="literal">RS</tt> variable,
and, if set to the null string, treats one or more blank lines as a
record terminator.  (But a blank line must contain no hidden spaces or
tabs.)  You may set it to a multicharacter string to match a
multicharacter terminator, but you may not set it to a
pattern--<em class="emphasis">awk</em> has to be better at something.</p>

<p>Note that setting <tt class="literal">$/</tt> to <tt class="literal">"\n\n"</tt>
means something slightly different than setting it to
<tt class="literal">""</tt>, if the file contains consecutive blank lines.
Setting it to <tt class="literal">""</tt> will treat two or
<em class="emphasis">more</em> consecutive blank lines as a single blank
line.  Setting it to <tt class="literal">"\n\n"</tt> means Perl will blindly
assume that a third newline belongs to the next paragraph.</p>

<p>Entirely undefining <tt class="literal">$/</tt> makes the next line input operation
slurp in the remainder of the file as one scalar value:
<blockquote>
<pre class="programlisting">undef $/;           # enable whole-file mode
$_ = &lt;FH&gt;;          # whole file now here
s/\n[ \t]+/ /g;     # fold indented lines</pre>
</blockquote>

If you're using the <tt class="literal">while (&lt;&gt;)</tt> construct to
access <tt class="literal">ARGV</tt> handle while <tt class="literal">$/</tt> is undefined, each
read gets the next file:
<blockquote>
<pre class="programlisting">undef $/;
while (&lt;&gt;) {        # $_ has the whole next file in it
    ...
}</pre>
</blockquote>
<a name="INDEX-4507"></a>
</p>

<p>Although we used <tt class="literal">undef</tt> above, it's safer to undefine <tt class="literal">$/</tt> using <tt class="literal">local</tt>:</p>

<blockquote>
<pre class="programlisting">{
    local $/;
    $_ = &lt;FH&gt;;
}</pre>
</blockquote>

<p>Setting <tt class="literal">$/</tt> to a reference to either an integer, a scalar containing
an integer, or a scalar that's convertible to an integer will make
<tt class="literal">readline</tt> and <tt class="literal">&lt;FH&gt;</tt> operations read in fixed-length records
(with the maximum record size being the referenced integer) instead of
variable-length record terminated by a particular string.  So this:
<blockquote>
<pre class="programlisting">$/ = \32768; # or \"32768" or \$scalar_var_containing_32768
open(FILE, $myfile);
$record = &lt;FILE&gt;;</pre>
</blockquote>

will read a record of no more than 32,768 bytes from the
<tt class="literal">FILE</tt> handle.  If you're not reading from a
record-oriented file (or your operating system doesn't have
record-oriented files), then you'll likely get a full chunk of data
with every read.  If a record is larger than the record size you've
set, you'll get the record back in pieces.  Record mode mixes well
with line mode only on systems where standard I/O supplies a
<em class="emphasis">read</em>(3) function; VMS is a notable
exception.</p>

<p>Calling <tt class="literal">chomp</tt> when <tt class="literal">$/</tt> is set to
enable record mode--or when it is undefined--has no effect.  See also
the <span class="option">-0</span> (the digit) and the <span class="option">-l</span> (the
letter) command-line switches in <a href="ch19_01.htm">Chapter 19, "The Command-Line Interface"</a>.  (Mnemonic:
<tt class="literal">/</tt> is used to separate lines when quoting poetry.)</p>
</dd>


<dt>
<b><tt class="literal">@ISA</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4508"></a>
[PKG] This array contains names of other packages to look
through when a method call cannot be found in the current package.  That is,
it contains the base classes of the package.  The <tt class="literal">use base</tt>
pragma sets this implicitly.  It is not exempt from <tt class="literal">use strict</tt>.  See <a href="ch12_01.htm">Chapter 12, "Objects"</a>.</p>
</dd>


<dt>
<b><tt class="literal">@LAST_MATCH_END</tt></b>
</dt>
<dt>
<b><tt class="literal">@+</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4509"></a><a name="INDEX-4510"></a><a name="INDEX-4511"></a>
This array holds the offsets of the ends of the last successful
submatches in the currently active dynamic scope.
<tt class="literal">$+[0]</tt> is the offset of the end of the entire match.
This is the same value the <tt class="literal">pos</tt> function returns
when called on the variable that was matched against.  (When we say
"offset of the end", we really mean the offset to the first character
<em class="emphasis">following</em> the end of whatever matched, so that we
can subtract beginning offsets from end offsets and arrive at the
length.)  The <em class="emphasis">n</em>th element of this array
holds the offset of the <em class="emphasis">n</em>th submatch, so
<tt class="literal">$+[1]</tt> is the offset where <tt class="literal">$1</tt>
ends, <tt class="literal">$+[2]</tt> the offset where <tt class="literal">$2</tt>
ends, and so on.  You can use <tt class="literal">$#+</tt> to determine how
many subgroups were in the last successful match.  See also
<tt class="literal">@_</tt> (<tt class="literal">@LAST_MATCH_START</tt>).</p>

<p>After a successful match against some variable <tt class="literal">$var</tt>:</p>
</dd>
<ul>
<li><tt>$`</tt> is the same as <tt>substr($var, 0, $-[0])</tt>
<li><tt>$&amp;</tt> is the same as <tt>substr($var, $-[0], $+[0] - $-[0])</tt>
<li><tt>$'</tt> is the same as <tt>substr($var, $+[0])</tt>
<li><tt>$1</tt> is the same as <tt>substr($var, $-[1], $+[1] - $-[1])</tt>
<li><tt>$2</tt> is the same as <tt>substr($var, $-[2], $+[2] - $-[2])</tt>
<li><tt>$3</tt> is the same as <tt>substr($var, $-[3], $+[3] - $-[2])</tt>, and so on.
</ul>

<dt>
<b><tt class="literal">@LAST_MATCH_START</tt></b>
</dt>
<dt>
<b><tt class="literal">@-</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4512"></a><a name="INDEX-4513"></a><a name="INDEX-4514"></a>
[DYN,RO] This array holds the offsets of the beginnings of the last
successful submatches in the currently active dynamic scope.
<tt class="literal">$-[0]</tt> is the offset of the beginning of the entire
match.  The <em class="emphasis">n</em>th element of this array
holds the offset of the <em class="emphasis">n</em>th submatch, so
<tt class="literal">$-[1]</tt> is the offset where <tt class="literal">$1</tt>
begins, <tt class="literal">$-[2]</tt> the offset where
<tt class="literal">$2</tt> begins, and so on.  You can use
<tt class="literal">$#-</tt> to determine how many subgroups were in the
last successful match.  See also <tt class="literal">@+</tt>
(<tt class="literal">@LAST_MATCH_END</tt>).</p>
</dd>


<dt>
<b><tt class="literal">$LAST_PAREN_MATCH</tt></b>
</dt>
<dt>
<b><tt class="literal">$+</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4515"></a><a name="INDEX-4516"></a>
[DYN,RO] This returns the last parenthesized submatch from the last
successful pattern in the currently active dynamic scope.  This
is useful when you don't know (or care) which of a set of alternative
patterns matched.  (Mnemonic: be positive and forward looking.)
Example:
<blockquote>
<pre class="programlisting">$rev = $+   if /Version: (.*)|Revision: (.*)/;</pre>
</blockquote>
</p>
</dd>


<dt>
<b><tt class="literal">$LAST_REGEXP_CODE_RESULT</tt></b>
</dt>
<dt>
<b><tt class="literal">$^R</tt></b>
</dt>
<dd>
<p>[DYN] This contains the result of the last snippet of code executed
inside a successful pattern with the <tt class="literal">(?{&nbsp;</tt><em class="replaceable">CODE</em><tt class="literal">&nbsp;})</tt> construct.
<tt class="literal">$^R</tt> gives you a way to execute code and remember the result for use
later in the pattern, or even afterward.</p>

<p>As the Perl regular expression engine moves through the pattern, it
may encounter multiple <tt class="literal">(?{&nbsp;</tt><em class="replaceable">CODE</em><tt class="literal">&nbsp;})</tt> expressions.  As it does, it
remembers each value of <tt class="literal">$^R</tt> so that if it later has to backtrack
past an expression, it restores the previous value of <tt class="literal">$^R</tt>.  In
other words, <tt class="literal">$^R</tt> has a dynamic scope within the pattern, much like
<tt class="literal">$1</tt> and friends.</p>

<p>So <tt class="literal">$^R</tt> is not simply the result of the last
snippet of code executed inside a pattern.  It's the result of the
last snippet of code <em class="emphasis">leading to a successful match</em>.  A corollary is
that if the match was not successful, <tt class="literal">$^R</tt> will be restored to
whatever value it had before the match occurred.</p>

<p>If the <tt class="literal">(?{&nbsp;</tt><em class="replaceable">CODE</em><tt class="literal">&nbsp;})</tt> pattern is functioning directly
as the conditional of a <tt class="literal">(?(</tt><em class="replaceable">COND</em><tt class="literal">)</tt><em class="replaceable">IFTRUE</em><tt class="literal">|</tt><em class="replaceable">IFFALSE</em><tt class="literal">)</tt>
subpattern, <tt class="literal">$^R</tt> is not set.</p>
</dd>


<dt>
<b><tt class="literal">$LIST_SEPARATOR</tt></b>
</dt>
<dt>
<b><tt class="literal">$"</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4517"></a><a name="INDEX-4518"></a>
[ALL] When an array or slice is interpolated into a double-quoted
string (or the like), this variable specifies the string to put
between individual elements.  Default is a space.  (Mnemonic: obvious,
one hopes.)</p>
</dd>


<dt>
<b><tt class="literal">$^M</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4519"></a><a name="INDEX-4520"></a><a name="INDEX-4521"></a><a name="INDEX-4522"></a><a name="INDEX-4523"></a><a name="INDEX-4524"></a>
[ALL] By default, running out of memory is not trappable.  However, if your
<em class="emphasis">perl</em> was compiled to take advantage of <tt class="literal">$^M</tt>, you may use it as an
emergency memory pool.  If your Perl is compiled with
<tt class="userinput"><b>-DPERL_EMERGENCY_SBRK</b></tt> and uses Perl's <tt class="literal">malloc</tt>, then:
<blockquote>
<pre class="programlisting">$^M = 'a' x (1 &lt;&lt; 16);</pre>
</blockquote>

would allocate a 64K buffer for emergency use.  See the <em class="emphasis">INSTALL</em> file
in the Perl source distribution directory for information on how to
enable this option.  As a disincentive to casual use of this advanced
feature, there is no <tt class="literal">use English</tt> long name for this variable (and
we won't tell you what the mnemonic is).</p>
</dd>


<dt>
<b><tt class="literal">$MATCH</tt></b>
</dt>
<dt>
<b><tt class="literal">$&amp;</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4525"></a><a name="INDEX-4526"></a>
[DYN,RO] The string matched by the last successful pattern match in
the currently active dynamic scope.  (Mnemonic: like
<tt class="literal">&amp;</tt> in some editors.)</p>
</dd>


<dt>
<b><tt class="literal">$OLD_PERL_VERSION</tt></b>
</dt>
<dt>
<b><tt class="literal">$]</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4527"></a><a name="INDEX-4528"></a><a name="INDEX-4529"></a>
[ALL] Returns the version + patchlevel/1000.  It can be used to
determine at the beginning of a script whether the Perl interpreter
executing the script is in the right range of versions.  (Mnemonic: is
this version of Perl in the right bracket?) Example:
<blockquote>
<pre class="programlisting">warn "No checksumming!\n" if $] &lt; 3.019;
die "Must have prototyping available\n" if $] &lt; 5.003;</pre>
</blockquote>

See also the documentation of <tt class="literal">use</tt><em class="replaceable">VERSION</em> and <tt class="literal">require</tt><em class="replaceable">VERSION</em> for a convenient way to fail if the
Perl interpreter is too old.  See <tt class="literal">$^V</tt> for a more
flexible UTF-8 representation of the Perl version.</p>
</dd>


<dt>
<b><tt class="literal">$OSNAME</tt></b>
</dt>
<dt>
<b><tt class="literal">$^O</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4530"></a><a name="INDEX-4531"></a><a name="INDEX-4532"></a><a name="INDEX-4533"></a>
[ALL] This variable contains the name of the platform (usually the operating
system) the current <em class="emphasis">perl</em> binary was compiled for.  It's a cheap
alternative to pulling it out of the <tt class="literal">Config</tt> module.</p>
</dd>


<dt>
<b><tt class="literal">$OS_ERROR</tt></b>
</dt>
<dt>
<b><tt class="literal">$ERRNO</tt></b>
</dt>
<dt>
<b><tt class="literal">$!</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4534"></a><a name="INDEX-4535"></a><a name="INDEX-4536"></a><a name="INDEX-4537"></a>
[ALL] If used in a numeric context, yields the current value of the last
syscall error, with all the usual caveats.  (This means that you
shouldn't depend on the value of <tt class="literal">$!</tt> to be anything in particular
unless you've gotten a specific error return indicating a system
error.)  If used in a string context, <tt class="literal">$!</tt> yields the corresponding system
error string.  You can assign an error number to <tt class="literal">$!</tt> if, for instance, you want
<tt class="literal">$!</tt> to return the string for that particular error, or you want to set
the exit value for <tt class="literal">die</tt>.  See also the <tt class="literal">Errno</tt> module in <a href="ch32_01.htm">Chapter 32, "Standard Modules"</a>.  (Mnemonic: what just went bang?)</p>
</dd>


<dt>
<b><tt class="literal">%OS_ERROR</tt></b>
</dt>
<dt>
<b><tt class="literal">%ERRNO</tt></b>
</dt>
<dt>
<b><tt class="literal">%!</tt></b>
</dt>
<dd>
<p>[ALL] This hash is defined only if you've loaded the standard
<tt class="literal">Errno</tt> module described in <a href="ch32_01.htm">Chapter 32, "Standard Modules"</a>.  Once you've done this, you
can subscript into <tt class="literal">%!</tt> using a particular error
string, and its value is true only if that's the current error.  For
example, <tt class="literal">$!{ENOENT}</tt> is true only if the C
<tt class="literal">errno</tt> variable is currently set to the C
<tt class="literal">#define</tt> value, <tt class="literal">ENOENT</tt>.  This is
convenient for accessing vendor-specific symbols.</p>
</dd>


<dt>
<b><tt class="literal">autoflush</tt> <em class="replaceable">HANDLE EXPR</em></b>
</dt>
<dt>
<b><tt class="literal">$OUTPUT_AUTOFLUSH</tt></b>
</dt>
<dt>
<b><tt class="literal">$AUTOFLUSH</tt></b>
</dt>
<dt>
<b><tt class="literal">$|</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4538"></a><a name="INDEX-4539"></a><a name="INDEX-4540"></a><a name="INDEX-4541"></a><a name="INDEX-4542"></a>
[FHA] If set to true, forces a buffer flush after every <tt class="literal">print</tt>,
<tt class="literal">printf</tt>, and <tt class="literal">write</tt> on the currently selected output handle.
(We call this <em class="emphasis">command buffering</em>.  Contrary to popular belief, setting
this variable does not turn off buffering.)  The default is false, which on
many systems means that <tt class="literal">STDOUT</tt> will be line buffered if
output is to the terminal, and block buffered otherwise, even on pipes
and sockets.  Setting this variable is useful when you are
outputting to a pipe, such as when you are running a Perl script under
<em class="emphasis">rsh</em>(1) and want to see the output as it's happening.  If you have
pending, unflushed data in the currently selected filehandle's output
buffer when this variable is set to true, that buffer will be immediately
flushed as a side-effect of assignment.   See the one-argument form of
<tt class="literal">select</tt> for examples of controlling buffering on filehandles other
than <tt class="literal">STDOUT</tt>.  (Mnemonic: when you want your pipes to be piping hot.)</p>

<p>This variable has no effect on input buffering; for that, see <tt class="literal">getc</tt>
in <a href="ch29_01.htm">Chapter 29, "Functions"</a> or the example in the <tt class="literal">POSIX</tt> module
in <a href="ch32_01.htm">Chapter 32, "Standard Modules"</a>.</p>
</dd>


<dt>
<b><tt class="literal">$OUTPUT_FIELD_SEPARATOR</tt></b>
</dt>
<dt>
<b><tt class="literal">$OFS</tt></b>
</dt>
<dt>
<b><tt class="literal">$,</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4543"></a><a name="INDEX-4544"></a><a name="INDEX-4545"></a><a name="INDEX-4546"></a><a name="INDEX-4547"></a><a name="INDEX-4548"></a><a name="INDEX-4549"></a>
[ALL] The output field separator (terminator, actually) for <tt class="literal">print</tt>.  Ordinarily, <tt class="literal">print</tt>
simply prints out the list elements you specify without anything
between them.  Set this variable as you would set <em class="emphasis">awk</em>'s
<tt class="literal">OFS</tt> variable to specify what is printed between fields.  (Mnemonic:
what is printed when there is a "<tt class="literal">,</tt>" in your <tt class="literal">print</tt> statement.)</p>
</dd>


<dt>
<b><tt class="literal">$OUTPUT_RECORD_SEPARATOR</tt></b>
</dt>
<dt>
<b><tt class="literal">$ORS</tt></b>
</dt>
<dt>
<b><tt class="literal">$\</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4550"></a><a name="INDEX-4551"></a>
[ALL] The output record separator (terminator, actually) for
<tt class="literal">print</tt>.  Ordinarily, <tt class="literal">print</tt> simply
prints out the comma-separated fields you specify, with no trailing
newline or record separator assumed.  Set this variable as you would
set <em class="emphasis">awk</em>'s <tt class="literal">ORS</tt> variable
to specify what is printed at the end of the <tt class="literal">print</tt>.
(Mnemonic: you set <tt class="literal">$\</tt> instead of adding
<tt class="literal">"\n"</tt> at the end of the print.  Also, it's just like
<tt class="literal">/</tt>, but it's what you get "back" from Perl.) See
also the <span class="option">-l</span> (for "line") command-line switch in <a href="ch19_01.htm">Chapter 19, "The Command-Line Interface"</a>.</p>
</dd>


<dt>
<b><tt class="literal">%OVERLOAD</tt></b>
</dt>
<dd>
<p>[NOT,PKG] This hash's entries are set internally by the <tt class="literal">use overload</tt> pragma
to implement operator overloading for objects of the current
package's class.  See <a href="ch13_01.htm">Chapter 13, "Overloading"</a>.</p>
</dd>


<dt>
<b><tt class="literal">$PERLDB</tt></b>
</dt>
<dt>
<b><tt class="literal">$^P</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4552"></a><a name="INDEX-4553"></a>
</p>

<p>[NOT,ALL] The internal variable for enabling the Perl debugger
(<em class="emphasis">perl -d</em>).</p>
</dd>


<dt>
<b><tt class="literal">$PERL_VERSION</tt></b>
</dt>
<dt>
<b><tt class="literal">$^V</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4554"></a><a name="INDEX-4555"></a><a name="INDEX-4556"></a><a name="INDEX-4557"></a><a name="INDEX-4558"></a>
[ALL] The revision, version, and subversion of the Perl interpreter,
represented as a binary "version string".  V-strings don't generally
have a a numeric value, but this variable is dual-valued, and has a
numeric value equivalent to the old <tt class="literal">$]</tt> variable; that is, a floating-point number that amounts to revision + version/1000 +
subversion/1,000,000.  The string value is made of UTF-8 characters: <tt class="literal">chr($revision) .  chr($version) .  chr($subversion)</tt>.
This means that <tt class="literal">$^V</tt> is <em class="emphasis">not</em> printable.  To
print it, you have to say:
<blockquote>
<pre class="programlisting">printf "%vd", $^V;</pre>
</blockquote>

On the plus side, it also means that ordinary string comparison can be
used to determine whether the Perl interpreter executing your script is in
the right range of versions.  (This applies to any version numbers
represented with v-strings, not just Perl's.)
Example:
<blockquote>
<pre class="programlisting">warn "No 'our' declarations!\n" if $^V lt v5.6;</pre>
</blockquote>

See the documentation of <tt class="literal">use</tt><em class="replaceable">VERSION</em> and <tt class="literal">require</tt><em class="replaceable">VERSION</em> for a convenient way to fail if the
running Perl interpreter is older than you were hoping.  See also
<tt class="literal">$]</tt> for the original representation of the Perl
version.</p>
</dd>


<dt>
<b><tt class="literal">$POSTMATCH</tt></b>
</dt>
<dt>
<b><tt class="literal">$'</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4559"></a><a name="INDEX-4560"></a>
[DYN,RO] The string following whatever was matched by the last successful
pattern in the currently active dynamic scope.  (Mnemonic: <tt class="literal">'</tt>
often follows a quoted string.) Example:
<blockquote>
<pre class="programlisting">$_ = 'abcdefghi';
/def/;
print "$`:$&amp;:$'\n";         # prints abc:def:ghi</pre>
</blockquote>

Thanks to dynamic scope, Perl can't know which patterns will need
their results saved away into these variables, so mentioning <tt class="literal">$`</tt> or <tt class="literal">$'</tt>
anywhere in a program incurs a performance penalty on all pattern
matches throughout the program.  This isn't much of an issue in
small programs, but you probably should avoid this pair when you're
writing reusable module code.  The example above can be equivalently
recoded like this, but without the global performance hit:
<blockquote>
<pre class="programlisting">$_ = 'abcdefghi';
/(.*?)(def)(.*)/s;          # /s in case $1 contains newlines
print "$1:$2:$3\n";         # prints abc:def:ghi</pre>
</blockquote>
</p>
</dd>


<dt>
<b><tt class="literal">$PREMATCH</tt></b>
</dt>
<dt>
<b><tt class="literal">$`</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4561"></a><a name="INDEX-4562"></a>
[DYN,RO] The string preceding whatever was matched by the last
successful pattern in the currently active dynamic scope.  (Mnemonic:
<tt class="literal">`</tt> often precedes a quoted string.) See the performance note under
<tt class="literal">$'</tt> previously.</p>
</dd>


<dt>
<b><tt class="literal">$PROCESS_ID</tt></b>
</dt>
<dt>
<b><tt class="literal">$PID</tt></b>
</dt>
<dt>
<b><tt class="literal">$$</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4563"></a><a name="INDEX-4564"></a><a name="INDEX-4565"></a>
[ALL] The process number (PID) of the Perl running this script.  This
variable is automatically updated upon a <tt class="literal">fork</tt>.  In
fact, you can even set <tt class="literal">$$</tt> yourself; this will not,
however, change your PID.  That would be a neat trick.  (Mnemonic:
same as in the various shells.)</p>

<p>You need to be careful not to use <tt class="literal">$$</tt> anywhere it
might be misinterpreted as a dereference:
<tt class="literal">$$alphanum</tt>.  In this situation, write
<tt class="literal">${$}alphanum</tt> to distinguish it from
<tt class="literal">${$alphanum}</tt>.</p>
</dd>


<dt>
<b><tt class="literal">$PROGRAM_NAME</tt></b>
</dt>
<dt>
<b><tt class="literal">$0</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4566"></a><a name="INDEX-4567"></a><a name="INDEX-4568"></a><a name="INDEX-4569"></a><a name="INDEX-4570"></a>
[ALL] Contains the name of the file containing the Perl script being
executed.  Assignment to <tt class="literal">$0</tt> is magical: it attempts to modify the
argument area that the <em class="emphasis">ps</em>(1) program normally reports on.  This
is more useful as a way of indicating the current program state
than it is for hiding the program you're running.  But it doesn't
work on all systems.  (Mnemonic: same as <em class="emphasis">sh</em>, <em class="emphasis">ksh</em>, <em class="emphasis">bash</em>, etc.)</p>
</dd>


<dt>
<b><tt class="literal">$REAL_GROUP_ID</tt></b>
</dt>
<dt>
<b><tt class="literal">$GID</tt></b>
</dt>
<dt>
<b><tt class="literal">$(</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4571"></a><a name="INDEX-4572"></a><a name="INDEX-4573"></a><a name="INDEX-4574"></a><a name="INDEX-4575"></a><a name="INDEX-4576"></a><a name="INDEX-4577"></a>
[ALL] The real group ID (GID) of this process.  If you are on a
platform that supports simultaneous membership in multiple groups,
<tt class="literal">$(</tt> gives a

space-separated 

 
list of groups you are in.  The first number is the one returned by
<em class="emphasis">getgid</em>(2), and the subsequent ones by
<em class="emphasis">getgroups</em>(2), one of which may be the same
as the first number.</p>

<p>However, a value assigned to <tt class="literal">$(</tt> must be a single
number used to set the real GID.  So the value given by
<tt class="literal">$(</tt> should <em class="emphasis">not</em> be assigned back
to <tt class="literal">$(</tt> without being forced to be numeric, such as
by adding zero.  This is because you can have only one real group.
See <tt class="literal">$)</tt> (<tt class="literal">$EFFECTIVE_GROUP_ID</tt>)
instead, which allows you to set multiple effective groups.</p>

<p>(Mnemonic: parentheses are used to <em class="emphasis">group</em> things.  The real GID is the group you <em class="emphasis">left</em>, if you're running setgid.)</p>
</dd>


<dt>
<b><tt class="literal">$REAL_USER_ID</tt></b>
</dt>
<dt>
<b><tt class="literal">$UID</tt></b>
</dt>
<dt>
<b><tt class="literal">$&lt;</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4578"></a><a name="INDEX-4579"></a>
[ALL] The real user ID (UID) of this process as returned by the <em class="emphasis">getuid</em>(2) syscall.  Whether and how you can
modify this is subject to the vagaries of your system's
implementation--see examples under <tt class="literal">$&gt;</tt> (<tt class="literal">$EFFECTIVE_USER_ID</tt>).
(Mnemonic: it's the UID you came <em class="emphasis">from</em>, if you're running setuid.)</p>
</dd>


<dt>
<b><tt class="literal">%SIG</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4580"></a><a name="INDEX-4581"></a>
</p>

<p>[ALL] The hash used to set signal handlers for various signals.
(See the section "Signals" in <a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a>.)
For example:
<blockquote>
<pre class="programlisting">sub handler {
    my $sig = shift;   # 1st argument is signal name
    syswrite STDERR, "Caught a SIG$sig--shutting down\n";
                       # Avoid standard I/O in async handlers to suppress
                       # core dumpage.  (Even that string concat is risky.)
    close LOG;         # This calls standard I/O, so may dump core anyway!
    exit 1;            # But since we're exiting, no harm in trying.
}

$SIG{INT}  = \&amp;handler;
$SIG{QUIT} = \&amp;handler;
...
$SIG{INT}  = 'DEFAULT';    # restore default action
$SIG{QUIT} = 'IGNORE';     # ignore SIGQUIT</pre>
</blockquote>

The <tt class="literal">%SIG</tt> hash contains undefined values
corresponding to those signals for which no handler has been set. A
handler may be specified as a subroutine reference or as a string.  A
string value that is not one of the two special actions
"<tt class="literal">DEFAULT</tt>" or "<tt class="literal">IGNORE</tt>" is the
name of a function, which, if unqualified by package, is interpreted
to be the <tt class="literal">main</tt> package.  Here are some other

examples:
<blockquote>
<pre class="programlisting">$SIG{PIPE} = "Plumber";   # okay, assumes main::Plumber
$SIG{PIPE} = \&amp;Plumber;   # fine, use Plumber from current package</pre>
</blockquote>
<a name="INDEX-4582"></a>
</p>

<p>Certain internal hooks can also be set using the <tt class="literal">%SIG</tt> hash.  The
routine indicated by <tt class="literal">$SIG{__WARN__}</tt> is called when a warning
message is about to be printed.  The warning message is passed as
the first argument.  The presence of a <tt class="literal">__WARN__</tt> hook causes the
ordinary printing of warnings to <tt class="literal">STDERR</tt> to be suppressed.  You
can use this to save warnings in a variable or to turn warnings into
fatal errors, like this:
<blockquote>
<pre class="programlisting">local $SIG{__WARN__} = sub { die $_[0] };
eval $proggie;</pre>
</blockquote>

This is similar to saying:
<blockquote>
<pre class="programlisting">use warnings qw/FATAL all/;
eval $proggie;</pre>
</blockquote>

except that the first has dynamic scope, whereas the second has lexical scope.</p>

<p>
<a name="INDEX-4583"></a>
The routine indicated by <tt class="literal">$SIG{__DIE__}</tt> provides a way to turn a frog
exception into a prince exception with a magical kiss, which often
doesn't work.  The best use is for a moribund program that's about to
die of an untrapped exception to do some last-moment processing on its
way out.  You can't save yourself this way, but you can give one last
hurrah.</p>

<p>The exception message is passed as the first argument.  When a
<tt class="literal">__DIE__</tt> hook routine returns, exception processing continues as
it would have in the absence of the hook, unless the hook routine
itself exits via a <tt class="literal">goto</tt>, a loop exit, or a <tt class="literal">die</tt>.  The <tt class="literal">__DIE__</tt>
handler is explicitly disabled during the call, so that you yourself
can then call the real <tt class="literal">die</tt> from a <tt class="literal">__DIE__</tt> handler.  (If it
weren't disabled, the handler would call itself recursively forever.) The handler for <tt class="literal">$SIG{__WARN__}</tt> works similarly.</p>

<p>Only the main program should set <tt class="literal">$SIG{__DIE__}</tt>, not 
modules. That's because currently, even exceptions that are being trapped
still trigger a <tt class="literal">$SIG{__DIE__}</tt> handler.  This is strongly discouraged
because of its potential for breaking innocent modules who aren't
expecting their predicted exceptions to be mysteriously altered. 
Use this feature only as a last resort, and if you must, always put
a <tt class="literal">local</tt> on the front to limit the period of danger.</p>

<p>Do not attempt to build an exception-handling mechanism on this feature.
Use <tt class="literal">eval {}</tt> to trap exceptions instead.</p>
</dd>


<dt>
<b><tt class="literal">STDERR</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4584"></a>
[ALL] The special filehandle for standard error in any package.</p>
</dd>


<dt>
<b><tt class="literal">STDIN</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4585"></a>
[ALL] The special filehandle for standard input in any package.</p>
</dd>


<dt>
<b><tt class="literal">STDOUT</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4586"></a>
[ALL] The special filehandle for standard output in any package.</p>
</dd>


<dt>
<b><tt class="literal">$SUBSCRIPT_SEPARATOR</tt></b>
</dt>
<dt>
<b><tt class="literal">$SUBSEP</tt></b>
</dt>
<dt>
<b><tt class="literal">$;</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4587"></a><a name="INDEX-4588"></a><a name="INDEX-4589"></a><a name="INDEX-4590"></a>
[ALL] The subscript separator for multidimensional hash emulation.  If you
refer to a hash element as:
<blockquote>
<pre class="programlisting">$foo{$a,$b,$c}</pre>
</blockquote>

it really means:
<blockquote>
<pre class="programlisting">$foo{join($;, $a, $b, $c)}</pre>
</blockquote>

But don't put:
<blockquote>
<pre class="programlisting">@foo{$a,$b,$c}      # a slice--note the @</pre>
</blockquote>

which means:
<blockquote>
<pre class="programlisting">($foo{$a},$foo{$b},$foo{$c})</pre>
</blockquote>
The default is <tt class="literal">"\034"</tt>, the same as
SUBSEP in <em class="emphasis">awk</em>.  Note that if your keys
contain binary data, there might not be any safe value for
<tt class="literal">$;</tt>.  (Mnemonic: comma--the syntactic
subscript separator--is a
semi-semicolon.  Yeah, we know, it's pretty lame, but
<tt class="literal">$,</tt> is already taken for something more important.)</p>

<p>Although we haven't deprecated this feature, you should instead consider
using "real" multidimensional hashes now, such as <tt class="literal">$foo{$a}{$b}{$c}</tt>
instead of <tt class="literal">$foo{$a,$b,$c}</tt>.  The fake ones may be easier to sort,
however, and are much more amenable to use as DBM files.</p>
</dd>


<dt>
<b><tt class="literal">$SYSTEM_FD_MAX</tt></b>
</dt>
<dt>
<b><tt class="literal">$^F</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4591"></a><a name="INDEX-4592"></a><a name="INDEX-4593"></a>
[ALL] The maximum "system" file descriptor, ordinarily 2.  System file
descriptors are passed to new programs during an <tt class="literal">exec</tt>, while 
higher file descriptors are not.
Also, during an <tt class="literal">open</tt>, system file descriptors
are preserved even if the <tt class="literal">open</tt> fails. (Ordinary file descriptors
are closed before the <tt class="literal">open</tt> is attempted and stay closed if the
<tt class="literal">open</tt> fails.)
Note that the close-on-exec status of a file descriptor will be decided according 
to the value of <tt class="literal">$^F</tt> at the time of the 
<tt class="literal">open</tt>, not the time of the <tt class="literal">exec</tt>. Avoid 
this by temporarily jacking <tt class="literal">$^F</tt> through the roof first:
<blockquote>
<pre class="programlisting">{
    local $^F = 10_000;
    pipe(HITHER,THITHER) or die "can't pipe: $!";
}</pre>
</blockquote>
</p>
</dd>


<dt>
<b><tt class="literal">$VERSION</tt></b>
</dt>
<dd>
<p>[PKG] This variable is accessed whenever a minimum acceptable version of a
module is specified, as in <tt class="literal">use SomeMod 2.5</tt>.  If <tt class="literal">$SomeMod::VERSION</tt>
is less than that, an exception is raised.  Technically, it's the
<tt class="literal">UNIVERSAL-&gt;VERSION</tt> method that looks at this variable, so
you could define your own <tt class="literal">VERSION</tt> function in the current package if
you want something other than the default behavior.
See <a href="ch12_01.htm">Chapter 12, "Objects"</a>.</p>
</dd>


<dt>
<b><tt class="literal">$WARNING</tt></b>
</dt>
<dt>
<b><tt class="literal">$^W</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4594"></a><a name="INDEX-4595"></a>
[ALL] The current Boolean value of the global warning switch (not to
be confused with the global warming switch, about which we hear many
global warnings).  See also the <tt class="literal">use warnings</tt> pragma
in <a href="ch31_01.htm">Chapter 31, "Pragmatic Modules"</a>, and the
<span class="option">-W</span> and <span class="option">-X</span> command-line switches for
lexically scoped warnings, which are unaffected by this variable.
(Mnemonic: the value is related to the <span class="option">-w</span> switch.)</p>
</dd>


<dt>
<b><tt class="literal">${^WARNING_BITS}</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4596"></a><a name="INDEX-4597"></a><a name="INDEX-4598"></a><a name="INDEX-4599"></a>
</p>

<p>[NOT,ALL] The current set of warning checks enabled by the
<tt class="literal">use warnings</tt> pragma.  See <tt class="literal">use</tt><tt class="literal">warnings</tt> in <a href="ch31_01.htm">Chapter 31, "Pragmatic Modules"</a> for more details.</p>
</dd>


<dt>
<b><tt class="literal">${^WIDE_SYSTEM_CALLS}</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-4600"></a><a name="INDEX-4601"></a><a name="INDEX-4602"></a><a name="INDEX-4603"></a>
[ALL] Global flag that enables all syscalls made by Perl to use
wide-character APIs native to the system, if available.  This can also
be enabled from the command line using the <span class="option">-C</span> command-line switch.
The initial value is typically <tt class="literal">0</tt> for compatibility with Perl
versions earlier than 5.6, but may be automatically set to <tt class="literal">1</tt> by Perl
if the system provides a user-settable default (such as via
<tt class="literal">$ENV{LC_CTYPE}</tt>).  The <tt class="literal">use bytes</tt> pragma always overrides the
effect of this flag in the current lexical scope.</p>
</dd>

</dl>

<p>Now brace yourself for a <em class="emphasis">big</em> chapter...</p>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch28_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch29_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">28.1. Special Names Grouped by Type</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">29. Functions</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
