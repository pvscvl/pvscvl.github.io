<HTML
><HEAD
>
<TITLE>5.2 The Block Form: Exception Handling (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:35Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. Eval"><LINK
REL="prev"
HREF="ch05_01.htm"
TITLE="5.1 The String Form: Expression Evaluation"><LINK
REL="next"
HREF="ch05_03.htm"
TITLE="5.3 Watch Your Quotes"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_01.htm"
TITLE="5.1 The String Form: Expression Evaluation"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.1 The String Form: Expression Evaluation"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. Eval"
>Chapter 5<BR>Eval</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_03.htm"
TITLE="5.3 Watch Your Quotes"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.3 Watch Your Quotes"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-14017"
>5.2 The Block Form: Exception Handling</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-951175-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951175-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951175-2"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951175-3"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951175-4"
></A
>In this form, <KBD
CLASS="command"
>eval</KBD
> is followed by a block of code, not a scalar containing a string. It is used for handling run-time errors, or <I
CLASS="firstterm"
>exceptions</I
>. Errors can be internal built-in ones (out-of-memory, divide-by-zero) or user-defined ones produced by <KBD
CLASS="command"
>die</KBD
>. </P
><P
CLASS="para"
>The following example shows how you can use the block form <KBD
CLASS="command"
>eval</KBD
> to trap a run-time <A
CLASS="indexterm"
NAME="ch05-idx-951220-0"
></A
>divide-by-zero error:</P
><PRE
CLASS="programlisting"
>eval {
     $a = 10; $b = 0;
     $c = $a / $b;     # Causes a run-time error, 
                       # which is trapped by eval
};
print $@;   # Prints  &quot;Illegal division by 0 at try.pl line 3</PRE
><P
CLASS="para"
>When the script is compiled, Perl syntax-checks the block of code and generates code. If it encounters a run-time error, Perl skips the rest of the <KBD
CLASS="command"
>eval</KBD
> block and sets <KBD
CLASS="command"
>$@</KBD
> to the corresponding error text.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-951221-0"
></A
>To signal your own errors, you use <KBD
CLASS="command"
>die</KBD
>. Perl knows whether a piece of code is currently executing inside an <KBD
CLASS="command"
>eval</KBD
>, and so, when <KBD
CLASS="command"
>die</KBD
> is called, Perl simply gives the error string&nbsp;- <KBD
CLASS="command"
>die</KBD
>'s argument&nbsp;- to the global <KBD
CLASS="command"
>$@</KBD
>, and jumps to the statement following the <KBD
CLASS="command"
>eval</KBD
> block. In the following example, <KBD
CLASS="command"
>open_file</KBD
> invokes <KBD
CLASS="command"
>die</KBD
> if it has trouble opening a file. To use this function, wrap it inside an eval.</P
><PRE
CLASS="programlisting"
>sub open_file {
    open (F, $_[0]) || <B
CLASS="emphasis.bold"
>die &quot;Could not open file: $!&quot;</B
>;
}

$f = 'test.dat';
while (1) {    
    <B
CLASS="emphasis.bold"
>eval {</B
>
<B
CLASS="emphasis.bold"
>          open_file($f);   </B
># if open_file dies, the program doesn't quit
<B
CLASS="emphasis.bold"
>    };</B
>
    last unless $@;     # no error: break out of the loop.
    print &quot;$f is not present. Please enter new file name $f&quot;;
    chomp($f = &lt;STDIN&gt;);
}</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-951223-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951223-1"
></A
>Java/C++ programmers would of course recognize the parallel to the <EM
CLASS="emphasis"
>throw, try</EM
>, and <EM
CLASS="emphasis"
>catch</EM
> statements, where <EM
CLASS="emphasis"
>try</EM
> corresponds to the <KBD
CLASS="command"
>eval</KBD
> block, <EM
CLASS="emphasis"
>catch</EM
> to the checking of <KBD
CLASS="command"
>$@</KBD
>, and <EM
CLASS="emphasis"
>throw</EM
> to <KBD
CLASS="command"
>die</KBD
>. (Essentially, the caller says to the run-time environment, "Here, <EM
CLASS="emphasis"
>try</EM
> this code, and <EM
CLASS="emphasis"
>catch</EM
> whatever errors are <EM
CLASS="emphasis"
>thrown</EM
> by the callee.") </P
><P
CLASS="para"
>One thing I like a lot about the Java environment is that both the interpreter and the standard libraries make extensive and <EM
CLASS="emphasis"
>consistent</EM
> use of <EM
CLASS="emphasis"
>try</EM
>, <EM
CLASS="emphasis"
>throw</EM
>, and <EM
CLASS="emphasis"
>catch</EM
> for error handling. In some ways, using these constructs is better than simply returning an error code, because it <EM
CLASS="emphasis"
>requires</EM
> the programmer to pay attention to errors (if you ignore the error, the program dies).</P
><P
CLASS="para"
>In C++ and Java, a function can rethrow an exception if it doesn't want to handle it itself. In Perl, you can do so by calling <KBD
CLASS="command"
>die</KBD
> without arguments: </P
><PRE
CLASS="programlisting"
>eval {
    ...
};
if ($@ =~ /sorry, bucko/) {
    ....
} else {
   # hmm .. don't know what to do with it.
   die;  # Identical to die $@
}</PRE
><P
CLASS="para"
>If there is an enclosing <KBD
CLASS="command"
>eval</KBD
> block, this exception will be caught; otherwise, the program terminates.<A
CLASS="indexterm"
NAME="ch05-idx-951222-0"
></A
></P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-951085"
>5.2.1 Standard Modules</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-951225-0"
></A
>Since C++ and Java contain special constructs for trapping and handling errors, some Perl programmers would like them too. Here are a couple of options.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch05-pgfId-951087"
>5.2.1.1 Exception.pm</A
></H4
><P
CLASS="para"
>As this book goes to press, a new module, <A
CLASS="indexterm"
NAME="ch05-idx-951224-0"
></A
>Exception, built over <KBD
CLASS="command"
>eval</KBD
> and <KBD
CLASS="command"
>die</KBD
>, is just being announced to CPAN. You need to understand Perl's support for object orientation to understand the following small example, so you might want to revisit this example on a subsequent reading. </P
><P
CLASS="para"
>This snippet throws exceptions if you attempt to withdraw more than $300 or exceed the current balance:</P
><PRE
CLASS="programlisting"
>use Exception;
package AmountExceededException; # User-defined exception
@ISA = ('Exception');

package OverdraftException;      # User-defined exception
@ISA = ('Exception');

package BankAccount;
sub withdraw_money {
    my $amount = shift;
    if ($amount &gt; 300) {
        throw new AmountExceededException;
    }
    if ($amount &gt; $balance) {
         throw new OverdraftException;
    }
    ...    # Change balance
}

try {
    print &quot;How much do you need?&quot;; chomp($amount = &lt;STDIN&gt;);
    withdraw_money ($amount);
}
catch AmountExceededException =&gt; 
               sub {print 'Cannot withdraw more than $300'},
      OverdraftException      =&gt; 
               sub {print $_[0]-&gt;message},
      Default =&gt;
               sub {print &quot;Internal error. Try later&quot;};<A
CLASS="indexterm"
NAME="ch05-idx-951227-0"
></A
></PRE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch05-pgfId-947853"
>5.2.1.2 exceptions.pl</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-951230-0"
></A
>The standard Perl library currently has a module called <EM
CLASS="emphasis"
>exceptions.pl</EM
>, which is also a thin wrapper over <KBD
CLASS="command"
>eval</KBD
> and <KBD
CLASS="command"
>die</KBD
> and provides subroutines called <KBD
CLASS="command"
>catch</KBD
> and <KBD
CLASS="command"
>throw</KBD
>. <KBD
CLASS="command"
>catch</KBD
> takes a piece of code as a <EM
CLASS="emphasis"
>string</EM
> (instead of as a block, as the previous example) and a list of regular expressions to match against the error string when it <KBD
CLASS="command"
>eval</KBD
>'s the code. </P
><P
CLASS="para"
>This module has one serious problem, which is actually solved by the newer module, <EM
CLASS="emphasis"
>Exception.pm:</EM
> because <CODE
CLASS="literal"
>catch</CODE
> is a subroutine, lexical variables in the current scope (localized with <KBD
CLASS="command"
>my</KBD
>) are not available to it. </P
><P
CLASS="para"
>I suspect that programmers disdain making a language look like another;[<A
CLASS="footnote"
HREF="#ch05-pgfId-951096"
>3</A
>] in the final analysis, using <KBD
CLASS="command"
>eval</KBD
> and <KBD
CLASS="command"
>die</KBD
> in the raw is probably the easiest option.<A
CLASS="indexterm"
NAME="ch05-idx-951179-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951179-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951179-2"
></A
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch05-pgfId-951096"
>[3]</A
> That excludes Larry Wall, considering that he designed Perl to look like C, sh, and awk!</P
></DIV
></BLOCKQUOTE
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_01.htm"
TITLE="5.1 The String Form: Expression Evaluation"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.1 The String Form: Expression Evaluation"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_03.htm"
TITLE="5.3 Watch Your Quotes"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.3 Watch Your Quotes"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.1 The String Form: Expression Evaluation</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.3 Watch Your Quotes</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
