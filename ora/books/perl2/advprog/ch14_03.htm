<HTML
><HEAD
>
<TITLE>14.3 Widget Tour (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:38:15Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch14_01.htm"
TITLE="14. User Interfaces with Tk"><LINK
REL="prev"
HREF="ch14_02.htm"
TITLE="14.2 Starting with Perl/Tk"><LINK
REL="next"
HREF="ch14_04.htm"
TITLE="14.4 Geometry Management"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_02.htm"
TITLE="14.2 Starting with Perl/Tk"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.2 Starting with Perl/Tk"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch14_01.htm"
TITLE="14. User Interfaces with Tk"
>Chapter 14<BR>User Interfaces with Tk</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_04.htm"
TITLE="14.4 Geometry Management"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.4 Geometry Management"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch14-12216"
>14.3 Widget Tour</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000745-0"
></A
>This section provides an introduction to most of the interesting widget classes implemented in Tk and Tix and exercises their commonly used configuration options and methods. To reduce clutter and to allow quick lookups later on (when you know what you are looking for), this extensive set of properties and methods is provided as a separate appendix: <A
CLASS="xref"
HREF="appa_01.htm"
TITLE="Tk Widget Reference"
>Appendix A, <CITE
CLASS="appendix"
>Tk Widget Reference</CITE
></A
>. Be aware that this chapter, extensive as it is, is only a subset (though a significant subset) of the entire Tk widget feature set. It also does not cover all widgets provided by Tk and Tix. Perl/Tk comes with the entire original well-written and comprehensive Tk documentation. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-995206"
>14.3.1 Widget Properties</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000759-0"
></A
>Please skim <A
CLASS="xref"
HREF="appa_01.htm"
TITLE="Generic Widget Properties"
>Table A.1</A
> to get an idea of the kind of configurable properties that all widgets share. Most of these properties are ordinary strings or numbers, but three types of properties are worth delving into some detail before we proceed to discussing the actual widgets: fonts, images, and colors.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch14-23206"
>14.3.1.1 Fonts</A
></H4
><P
CLASS="para"
>Font values are specified in the XLFD format (X Logical Font Description), which consists of 14 fields separated by hyphens, as shown in <A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="Fields in a font"
>Figure 14.2</A
>.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch14-33002"
>Figure 14.2: Fields in a font</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_1402.gif"
ALT="Figure 14.2"><P
CLASS="para"
>Fortunately, we don't have to remember the purpose of most of these fields. Any of these fields can have the wildcard "*" or "?", but it is important to get the number of hyphens right. On the X Windows system, there are two utilities, a graphical one called <EM
CLASS="emphasis"
>fontsel</EM
>, and a batch utility called <EM
CLASS="emphasis"
>xlsfonts</EM
>, that list all combinations of these fields available, so it is a simple matter of picking one. Essentially, you have to look only for the foundry, family, weight, slant, and points fields; ignore the rest of the fields. Note that "points" is in tenths of points, so 120 means a 12-point font. The slant can be "i" for italic or "r" for regular. To set the font of a widget, you configure its font property:</P
><PRE
CLASS="programlisting"
>$label-&gt;configure (
   font =&gt; '-adobe-helvetica-medium-r-normal--8-80-75-75-p-46-*-1');</PRE
><P
CLASS="para"
>Once Perl/Tk is ported to the Windows and Mac, font values can be specified in either the XLFD format or the simpler Windows style: <KBD
CLASS="command"
>Helvetica</KBD
> <KBD
CLASS="command"
>24</KBD
> <KBD
CLASS="command"
>bold</KBD
>. The former format will continue to be supported on all platforms.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch14-39397"
>14.3.1.2 Images</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000763-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000763-1"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000763-2"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000763-3"
></A
>Some widgets, such as buttons and labels, can display two-color <I
CLASS="firstterm"
>bitmaps</I
> or multi-color <I
CLASS="firstterm"
>pixmaps</I
>. Because the same bitmap or image can be used to decorate more than one widget, Tk considers them to be objects that are rendered in one or more places. That is, the image object holds the data, and the widgets know how to render them in their own space. Hence, two steps are involved in displaying a bitmap or a pixmap on a widget: create an image object given an image file, and configure the widget's bitmap or pixmap property with the image object.</P
><P
CLASS="para"
>Depending on the type of image file you have, you have to make one of three calls to create the appropriate type of image object:</P
><PRE
CLASS="programlisting"
>#For XBM (X Bitmaps) only 
$image = $label-&gt;Bitmap(file =&gt; 'face.xbm'); 

#For XPM (X Pixmaps only)
$image = $label-&gt;Pixmap(file =&gt; 'smiley.xpm');

#For GIF or PPM (Portable pixmap) formats, use the Photo constructor
$image = $label-&gt;Photo(file =&gt; 'frown.gif');</PRE
><P
CLASS="para"
>Now you can change the label's image easily:</P
><PRE
CLASS="programlisting"
>$label-&gt;configure (image =&gt; $image);</PRE
><P
CLASS="para"
>Note that if the image is a bitmap, you must use the "bitmap" option, and if it is an XPM or GIF files, use the "image" property. In the bitmap case, the "<KBD
CLASS="command"
>foreground</KBD
>" and "<KBD
CLASS="command"
>background</KBD
>" options dictate the two colors; for images, the file supplies its own colors.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch14-41501"
>14.3.1.3 Colors</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000764-0"
></A
>Colors can be given symbolic names such as "red" and "yellow." The library directory in an X installation has a file called <EM
CLASS="emphasis"
>rgb.txt</EM
> that enumerates all the available symbolic names. Alternatively, you can give RGB values in the form #RGB, #RRGGBB, #RRRGGGBBB, or #RRRRGGGGBBBB, where each R, G, or B represents one hexadecimal digit of red, green, or blue intensity, respectively.</P
><P
CLASS="para"
>Our detour is now complete; let us briefly visit Tk's and Tix's widgets.<A
CLASS="indexterm"
NAME="ch14-idx-1000761-0"
></A
></P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-995273"
>14.3.2 Labels and Buttons</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000765-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000765-1"
></A
>The standard widget properties described in <A
CLASS="xref"
HREF="appa_01.htm"
TITLE="Generic Widget Properties"
>Table A.1</A
> pretty much cover everything that labels have to offer. They are also fairly self-explanatory, so we will not say more about them.</P
><P
CLASS="para"
>Buttons are labels with one additional property&nbsp;- the "command" option, which allows you to associate a <A
CLASS="indexterm"
NAME="ch14-idx-1000766-0"
></A
>callback with a button click. The next example shows the callback procedure, <KBD
CLASS="command"
>change_label</KBD
>, toggling the label of the widget:</P
><PRE
CLASS="programlisting"
>use Tk;
$top = MainWindow-&gt;new();
$button = $top-&gt;Button(text    =&gt; 'Start', 
                       command =&gt; \&amp;change_label);
$button-&gt;pack();
MainLoop();
sub change_label {                       # Create 
    $button-&gt;cget('text') eq &quot;Start&quot;         ? 
        $button-&gt;configure(text =&gt; 'Stop') :
        $button-&gt;configure(text =&gt; 'Start');
}</PRE
><P
CLASS="para"
>The <KBD
CLASS="command"
>cget</KBD
><A
CLASS="indexterm"
NAME="ch14-idx-1000767-0"
></A
> method retrieves the value of a configurable property. </P
><P
CLASS="para"
>The callback can instead be a closure, like this (omitting the rest of the boiler-plate code): </P
><PRE
CLASS="programlisting"
>$button = $top-&gt;Button(
              text    =&gt; 'Start', 
              command =&gt; sub {
                                $button-&gt;cget('text') eq &quot;Start&quot;    ? 
                                $button-&gt;configure(text =&gt; 'Stop') :
                                $button-&gt;configure(text =&gt; 'Start')
                           }
}</PRE
><P
CLASS="para"
>A third way of configuring the <KBD
CLASS="command"
>command</KBD
> property is to give it an anonymous array whose first element is the callback procedure parameter. The other elements of this array are passed to the callback when it is invoked:</P
><PRE
CLASS="programlisting"
>$button-&gt;configure (command =&gt; [\&amp;change_label, &quot;new label&quot;]);</PRE
><P
CLASS="para"
>We'll use this style in application-defined scrolling later in this chapter. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-995322"
>14.3.3 Radiobuttons and Checkbuttons</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000768-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000768-1"
></A
>A radiobutton is a widget that displays a textual string, bitmap, or image and a diamond called an indicator (see <A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="Radiobutton example"
>Figure 14.3</A
>). Radiobuttons, like buttons, support the "command" option. Unlike buttons, however, radiobuttons are typically used in groups to give the user an option to select one of many choices. For this reason, a radiobutton provides two properties called <KBD
CLASS="command"
>variable</KBD
> and <KBD
CLASS="command"
>value</KBD
> for synchronizing with the others in its group so that only one indicator is "on." If you click on a radiobutton, that enables its indicator and changes its associated variable's value to its own value property. Conversely, if that variable's value is changed, the radiobutton checks to see whether it matches its own <KBD
CLASS="command"
>value</KBD
> property; if so, it turns its own indicator on. As you may have guessed, the tie facility is used internally to monitor changes to the variable. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch14-20828"
>Figure 14.3: Radiobutton example</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_1403.gif"
ALT="Figure 14.3"><P
CLASS="para"
>The following example builds a radiobutton group. <KBD
CLASS="command"
>$bev</KBD
> is the synchronizing variable.</P
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>$bev</B
> = &quot;coffee&quot;;                     # Starting value
$coffee = $top-&gt;Radiobutton ( <B
CLASS="emphasis.bold"
>variable =&gt; \$bev</B
>, 
                              text     =&gt; 'Coffee', 
                              value    =&gt; 'coffee');

$tea    = $top-&gt;Radiobutton ( <B
CLASS="emphasis.bold"
>variable =&gt; \$bev</B
>, 
                              text     =&gt; 'Tea', 
                              value    =&gt; 'tea');

$milk   = $top-&gt;Radiobutton ( <B
CLASS="emphasis.bold"
>variable =&gt; \$bev</B
>, 
                              text     =&gt; 'Milk', 
                              value    =&gt; 'milk');
# Lay out the radiobuttons 
$coffee-&gt;pack (side =&gt; 'left');
$tea-&gt;pack    (side =&gt; 'left');
$milk-&gt;pack   (side =&gt; 'left');</PRE
><P
CLASS="para"
>Because the radiobuttons have different values and because they share the same variable, we ensure that only one indicator is on at any time. </P
><P
CLASS="para"
>Please refer to <A
CLASS="xref"
HREF="appa_01.htm"
TITLE="Radiobutton Properties and Methods"
>Table A.3</A
> for more radiobutton properties and methods.</P
><P
CLASS="para"
>A <A
CLASS="indexterm"
NAME="ch14-idx-1000769-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000769-1"
></A
>checkbutton is very similar to a radiobutton. It has a square indicator that toggles depending on its associated variable's value. Unlike a radiobutton, toggling its value is not expected to change some other checkbutton's value, though you can easily arrange it that way. A checkbutton is used where you want the user to be able to select all applicable options.<A
CLASS="indexterm"
NAME="ch14-idx-1000771-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000771-1"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000771-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-995357"
>14.3.4 Canvas</A
></H3
><P
CLASS="para"
>A <A
CLASS="indexterm"
NAME="ch14-idx-1000773-0"
></A
>canvas widget implements structured graphics. It provides methods to create and manipulate graphic <EM
CLASS="emphasis"
>items</EM
> such as circles, rectangles, arcs, lines, bitmaps, polylines, and text. It even allows you to embed other widgets and treat them as ordinary canvas items.</P
><P
CLASS="para"
>Unlike Java's Abstract Windowing Toolkit's support for canvases (and pretty much every other GUI toolkit I know of), Tk's canvas items are objects in their own right: they support configurable properties just like widgets and allow these properties to be applied to individual items or to entire named groups of items. They can also be associated with callbacks. (You can say, in effect, "if the mouse passes over this circle, call procedure <KBD
CLASS="command"
>foo</KBD
>.")</P
><P
CLASS="para"
>Canvas items are different from widgets in that while each widget gets its own window on the X server, a canvas item does not. Also, unlike widgets, canvas items do not take part in geometry management (they cannot be resized by their container). It has always been unclear to me why the toolkit chose to expose this distinction to the user. In the InterViews toolkit (a C++ based X Windows library, later available as "Fresco"), for example, widgets and structured graphics all inherit from a generic graphic object called a <EM
CLASS="emphasis"
>glyph</EM
>. This feels like a much cleaner design. On the other hand, I am thankful that such a fine implementation for structured graphics is available for free, with nice documentation to boot, so my quibble is minor in the larger scheme of things.</P
><P
CLASS="para"
>To draw a line inside a canvas widget, you invoke the <KBD
CLASS="command"
>Canvas::create</KBD
> method:</P
><PRE
CLASS="programlisting"
>$top = MainWindow-&gt;new();
# first create a canvas widget
$canvas = $top-&gt;Canvas(width =&gt; 200, height =&gt; 100)-&gt;pack();

# Create line inside the canvas
$id = $canvas-&gt;create ('line', 
                      10, 10, 100, 100,  # from x0,y0  to x1, y1
                      fill =&gt; 'red');  # fill color of object</PRE
><P
CLASS="para"
>The first parameter to the <KBD
CLASS="command"
>create</KBD
> command is the type of canvas item, and the rest of the parameters depend on this item. <KBD
CLASS="command"
>create</KBD
> returns an identifier that can be used to refer to that object later on. For example, you can update the coordinates of the object using the <KBD
CLASS="command"
>coords </KBD
>method:</P
><PRE
CLASS="programlisting"
>$canvas-&gt;coords ($id, 10, 100);</PRE
><P
CLASS="para"
>All coordinates in Tk are in reference to the top-left corner. The x coordinate increases from left to right, and the y coordinate increases from top to bottom. </P
><P
CLASS="para"
>You can move the object relative to its current position using <KBD
CLASS="command"
>move</KBD
>:</P
><PRE
CLASS="programlisting"
>$canvas-&gt;move ($id, 15, 23); # 15 and 23 represent x and y offsets</PRE
><P
CLASS="para"
>Canvas items can be configured using the <KBD
CLASS="command"
>itemconfigure</KBD
> method; <A
CLASS="xref"
HREF="appa_02.htm"
TITLE="Canvas Class"
>Table A.5</A
> shows the properties and methods for each type of item, as well as the canvas widget as a whole.</P
><P
CLASS="para"
>One of the canvas widget's most convenient features is its ability to tag one or more objects with a string identifier. An object can be tagged with as many strings as you want. The tag string <KBD
CLASS="command"
>all</KBD
> represents all the canvas's objects. You can tag an object at creation time or with the <KBD
CLASS="command"
>addtag</KBD
> method. The tag <KBD
CLASS="command"
>current</KBD
> represents the item over which the mouse is currently hovering. All canvas methods that accept an item ID also accept a string tag instead. For example, to move all objects labeled "bunch" 10 pixels to the right, do this:</P
><PRE
CLASS="programlisting"
>$canvas-&gt;move('bunch', 10, 0); # xoffset = 10, yoffset = 0</PRE
><P
CLASS="para"
>We will exploit this property extensively in <A
CLASS="xref"
HREF="ch15_01.htm"
TITLE="GUI Example: Tetris"
>Chapter 15</A
>.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="Drawing an Archimedean Spiral"
>Example 14.2</A
> shows a set of circles whose centers are drawn along an <A
CLASS="indexterm"
NAME="ch14-idx-1000784-0"
></A
>Archimedean spiral (see <A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="Structured graphics using canvas"
>Figure 14.4</A
>). An Archimedean spiral is defined by the equation <EM
CLASS="emphasis"
>r</EM
> = <EM
CLASS="emphasis"
>a</EM
><IMG
SRC="../chars/theta.gif"
ALT="[theta]">, where<EM
CLASS="emphasis"
> r,</EM
> the radius (as depicted by the lines) is proportionally dependent on the angle, <IMG
SRC="../chars/theta.gif"
ALT="[theta]">. For added visual effect, the sizes of the circles are also made proportional to the angle.     </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch14-11244"
>Figure 14.4: Structured graphics using canvas</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_1404.gif"
ALT="Figure 14.4"><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch14-13770"
>Example 14.2: Drawing an Archimedean Spiral</A
></H4
><PRE
CLASS="programlisting"
>use Tk;
$top = MainWindow-&gt;new();
$canvas = $top-&gt;Canvas(width =&gt; 300, height =&gt; 245)-&gt;pack();
# Draw a set of circles along an archimedean spiral
# The centers of these circles move along the spiral 
# (radius of spiral = constant * theta)

$origin_x = 110; $origin_y = 70;           # origin of the spiral
$PI = 3.1415926535;
$circle_radius = 5;                        # radius of the first circle
$path_radius = 0;

for ($angle = 0; $angle &lt;= 180; 
     $path_radius += 7, $circle_radius += 3, $angle += 10) 
{
    # offset of path coordinates: r.cos(<IMG
SRC="../chars/theta.gif"
ALT="[theta]">) and r.sin(<IMG
SRC="../chars/theta.gif"
ALT="[theta]">)
    # sin() and cos() like their angles in radians (degrees*<IMG
SRC="../chars/pi.gif"
ALT="[pi]">/90)
    $path_x = $origin_x + $path_radius * cos ($angle * $PI / 90);
    $path_y = $origin_y - $path_radius * sin ($angle * $PI / 90);
    # path_x and path_y are the coordinates of the center of the new 
    # circle. Canvas::create likes top-left and bottom-right corners
    $canvas-&gt;create ('oval', 
             $path_x - $circle_radius,
             $path_y - $circle_radius,
             $path_x + $circle_radius,
             $path_y + $circle_radius,
             fill =&gt; 'yellow');
    $canvas-&gt;create ('line', 
             $origin_x, $origin_y,
             $path_x, $path_y,
             fill =&gt; 'slategray');

}

MainLoop();<A
CLASS="indexterm"
NAME="ch14-idx-1000776-0"
></A
></PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-998891"
>14.3.5 Text and Entry</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000785-0"
></A
>The text widget displays one or more lines of text and allows you to edit the text. (Its default key bindings are those of Emacs, so, ahem, those of you still using    <EM
CLASS="emphasis"
>vi</EM
>...) The widget is powerful enough to address the presentation needs of a web browser, and several projects have done precisely that. The Perl/Tk distribution comes with an implementation of a web browser called <EM
CLASS="emphasis"
>tkweb</EM
>, and Guido Von Rossum, Python's creator, has used Python and Tk for a web browser called <EM
CLASS="emphasis"
>Grail</EM
>, capable of executing Python applets. </P
><P
CLASS="para"
>In this section, we will take a brief look at the text widget's capabilities, and in <A
CLASS="xref"
HREF="ch16_01.htm"
TITLE="GUI Example: Man Page Viewer"
>Chapter 16, <CITE
CLASS="chapter"
>GUI Example: Man Page Viewer</CITE
></A
>, we will study it in greater depth and build an application based on it.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch14-pgfId-998468"
>14.3.5.1 Inserting text at absolute positions</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000786-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000786-1"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000786-2"
></A
>When you want to programmatically insert a piece of text at some position or select a range, you need to specify one or more indices. An <A
CLASS="indexterm"
NAME="ch14-idx-1000790-0"
></A
>index is a string such as "2.5," which means line 2, column 5 (line numbers start from 1, and columns start from 0). The following code creates a text widget and inserts a string at that position:</P
><PRE
CLASS="programlisting"
>$t = $top-&gt;Text(width =&gt; 80, height =&gt; 10)-&gt;pack();
$t-&gt;insert('Sample', '2.5');</PRE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch14-pgfId-998469"
>14.3.5.2 Inserting text at logical positions</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000787-0"
></A
>The text widget supports the notion of a <I
CLASS="firstterm"
>mark</I
><A
CLASS="indexterm"
NAME="ch14-idx-1000788-0"
></A
>, a user-defined name assigned to a single position within the text widget. This position refers to the gap between two characters, not to a line and column pair. This makes it convenient to insert a character at a mark. A marked position is a logical entity; it does not change with insertion or deletion. The widget supports built-in mark names such as <KBD
CLASS="command"
>insert</KBD
> (where the insert cursor is), <KBD
CLASS="command"
>current</KBD
> (the character closest to the mouse pointer<KBD
CLASS="command"
>)</KBD
>, <KBD
CLASS="command"
>wordend</KBD
> (end of the word on which the insert cursor is placed), <KBD
CLASS="command"
>end</KBD
> (the end of the insert cursor's line), and so on. These mark names can be used in place of the row and column numbers mentioned earlier:</P
><PRE
CLASS="programlisting"
>$t-&gt;insert(&quot;Sample&quot;, &quot;end&quot;);              # Insert text at end</PRE
><P
CLASS="para"
>Please take a look at the text preceding <A
CLASS="xref"
HREF="appa_02.htm"
TITLE="Text Properties and Methods"
>Table A.6</A
> for details on index specifiers. The example code in the following sections creates a text widget and inserts strings at different locations using different types of indexing identifiers.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch14-pgfId-998470"
>14.3.5.3 Insertion with relative indexing</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000791-0"
></A
>Indices can also be relative to a base index. For example:</P
><PRE
CLASS="programlisting"
>$t-&gt;insert('Sample', 
           'insert +5'); # 5 chars after insert cursor's position. 
$t-&gt;insert('Sample', 'insert linestart'); # go to insert position, 
                                          # and then that line's start<A
CLASS="indexterm"
NAME="ch14-idx-1000789-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000789-1"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000789-2"
></A
></PRE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch14-pgfId-998331"
>14.3.5.4 Using tags to change properties of text ranges</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000792-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000792-1"
></A
>The widget supports the concept of <I
CLASS="firstterm"
>tags</I
> or tagged styles, which are user-defined strings representing a list of text properties (font, color, stippling style, and so on). Consider</P
><PRE
CLASS="programlisting"
>$text-&gt;tagConfigure('foo',
                    foreground =&gt; 'yellow', background =&gt; 'red');</PRE
><P
CLASS="para"
>The string "foo" can be applied to one or more contiguous ranges of text within that widget, like this:</P
><PRE
CLASS="programlisting"
>$text-&gt;tagAdd('foo', '3.5', '3.7');</PRE
><P
CLASS="para"
>This highlights the stretch of text on line 3, character indices 5 through 7. The indices specifying the range can also be absolute or relative mark positions. For example, the following snippet changes the properties of the line on which the insert cursor is positioned:</P
><PRE
CLASS="programlisting"
>$text-&gt;tagAdd('foo', 'insert linestart', 'insert lineend');</PRE
><P
CLASS="para"
>Multiple tags can apply to overlapping ranges of text; conversely, one tag can be applied to many ranges. All text widgets support a special tag called <KBD
CLASS="command"
>sel</KBD
> that reflects the current range of selected text. You can insert new text and apply a section by supplying the tag name as the third parameter to insert: </P
><PRE
CLASS="programlisting"
>$t-&gt;insert('Sample', '3.5','foo');</PRE
><P
CLASS="para"
>The text widget allows you to embed any other widget and treat it as a single character, which means that you can have buttons and listboxes in your text moving around as you insert more text.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch14-pgfId-995489"
>14.3.5.5 The entry widget</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000793-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000793-1"
></A
>For single-line text entries, Perl/Tk provides a widget called Entry, which does not support tags, marks, or embedded windows. It is essentially a lightweight version of the Text widget.</P
><P
CLASS="para"
>Perl/Tk (not the native Tk) also provides a widget called TextUndo, which is a subclass of the Text widget. It provides an unlimited undo facility (alas, there's no "redo"; you cannot undo an undo!) and has methods to load and save text from and to files. This widget is not part of the original Tcl/Tk distribution.<A
CLASS="indexterm"
NAME="ch14-idx-1000798-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000798-1"
></A
></P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch14-pgfId-998259"
>14.3.5.6 Text widget and ties</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000802-0"
></A
>The text widget supports the <KBD
CLASS="command"
>TIEHANDLE</KBD
> and <KBD
CLASS="command"
>print</KBD
> methods, allowing it to be used as a module to simulate filehandles. Here's how you can use this facility to redirect filehandle activity to the text widget:</P
><PRE
CLASS="programlisting"
>use Tk;
my $mw = MainWindow-&gt;new;            # Create a top-level window
my $t  = $mw-&gt;Scrolled('Text');      # Create a scrolled text window
$t-&gt;pack(-expand =&gt; 1, 
         -fill =&gt; 'both');           # Configure it
tie (*TEXT, 'Tk::Text',$t);          # tie the filehandle and widget
print TEXT &quot;Hi there\n&quot;;             # This shows up on the widget<A
CLASS="indexterm"
NAME="ch14-idx-1000797-0"
></A
></PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-995491"
>14.3.6 Listbox</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000801-0"
></A
>A listbox displays a list of strings, one per line, as shown in <A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="Listbox showing a choice of wines"
>Figure 14.5</A
>. All strings have the same display characteristics. If you want to mix and match different fonts and colors, you can write a simple wrapper over the text widget and simulate a fancy listbox. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch14-18790"
>Figure 14.5: Listbox showing a choice of wines</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_1405.gif"
ALT="Figure 14.5"><P
CLASS="para"
>The default bindings of a listbox select and deselect items, but if you want something extra, such as special handling for a mouse double-click, it is your responsibility to bind it to a function of your choice. Selection modes are "single," "browse" (default), "multiple," and "extended." Single or browse mode indicates that only one element can be selected at any time. Browse mode also allows you to drag the selection with button 1. In multiple mode, you can select any number of elements; selecting and deselecting one doesn't affect any other. The extended mode allows you to select multiple elements by clicking and dragging, but a single click deselects the previous selection before selecting the current element.</P
><P
CLASS="para"
>Like the text widget, the listbox has various ways of identifying list positions in addition to the index; examples include <KBD
CLASS="command"
>end</KBD
> and <KBD
CLASS="command"
>active</KBD
> (where the location cursor is poised). <A
CLASS="xref"
HREF="appa_04.htm"
TITLE="Listbox Widget Properties and Methods"
>Table A.8</A
> describes these indices as well as the listbox's properties and methods. <A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="Listbox with Callbacks"
>Example 14.3</A
> creates the listbox shown in <A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="Listbox showing a choice of wines"
>Figure 14.5</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch14-31095"
>Example 14.3: Listbox with Callbacks</A
></H4
><PRE
CLASS="programlisting"
>use Tk;
$top = MainWindow-&gt;new();
$wine_list = $top-&gt;Listbox(&quot;width&quot; =&gt; 20, &quot;height&quot; =&gt; 5
                          )-&gt;pack();
$wine_list-&gt;insert('end', # Insert the following list at end
                   &quot;Napa Valley Chardonnay&quot;, &quot;Cabernet Sauvignon&quot;,
                   &quot;Dry Chenin Blanc&quot;, &quot;Merlot&quot;, &quot;Sangiovese&quot; );
$wine_list-&gt;bind('&lt;Double-1&gt;', \&amp;buy_wine);
sub buy_wine {
    my $wine = $wine_list-&gt;get('active');
    return if (!$wine);  # Return if no list item is active
    print &quot;Ah, '$wine'. An excellent choice\n&quot;;
    # Remove the wine from the inventory
    $wine_list-&gt;delete('active');
}
MainLoop();</PRE
></DIV
><P
CLASS="para"
>The listbox does not provide a property such as <KBD
CLASS="command"
>command</KBD
>, so we have to use the more general method, <KBD
CLASS="command"
>bind</KBD
>, to set up a binding between a double mouse-click and a user-defined subroutine. More details on this technique are given in the section <A
CLASS="xref"
HREF="ch14_06.htm"
TITLE="Event Bindings"
>Section 14.6, "Event Bindings</A
>." <A
CLASS="indexterm"
NAME="ch14-idx-1000803-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-997021"
>14.3.7 Frame</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000804-0"
></A
>Frame widgets are fairly uninteresting widgets, but come in very handy when you want sophisticated widget layouts or are creating composite widgets. </P
><P
CLASS="para"
>If you have a complex GUI form, you are better off dividing the screen into major chunks, each with a specific function, and putting each chunk into its own frame. Then at the top level, you can arrange and rearrange these chunks easily. There is more on this in the section <A
CLASS="xref"
HREF="ch14_04.htm"
TITLE="Geometry Management"
>"Geometry Management</A
>" later in this chapter. Frame widgets, being containers, can be asked to create other "fundamental" widgets such as buttons, text, and scrollbars. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-997029"
>14.3.8 Menus</A
></H3
><P
CLASS="para"
>The term "<A
CLASS="indexterm"
NAME="ch14-idx-1000805-0"
></A
>menu" commonly refers to an arrangement whereby a user clicks on a menu button and a collection of label or button widgets pops up. Menus come in one of three configurations: pulldown menu, option menu, or popup menu. </P
><P
CLASS="para"
>Tk provides a <A
CLASS="indexterm"
NAME="ch14-idx-1000806-0"
></A
>MenuButton widget, which, when clicked, can be made to pop up a Menu widget. The Menu widget is just a container of the menu item widgets; it does not refer to the whole arrangement. We'll use the difference in font styles to distinguish between the concept of menu and the Menu widget. <A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="Pulldown menu and menubutton"
>Figure 14.6</A
> shows the components.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch14-13509"
>Figure 14.6: Pulldown menu and menubutton</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_1406.gif"
ALT="Figure 14.6"><P
CLASS="para"
>To construct a menu, you need to go through the following steps:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch14-pgfId-995593"
></A
>Create a <I
CLASS="firstterm"
>menu bar</I
> to hold the MenuButton widget. The menu bar is an ordinary Frame widget.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch14-pgfId-995594"
></A
>Create one or more MenuButton widgets and pack them into the menu bar.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch14-pgfId-995595"
></A
>Ask the MenuButton widgets to create and manage menu entry widgets. </P
></LI
></OL
><P
CLASS="para"
>The properties and API of the MenuButton and Menu widgets are listed in Tables <A
CLASS="xref"
HREF="appa_05.htm"
TITLE="MenuButton Widget Properties and Methods"
>Table A.9</A
> and <A
CLASS="xref"
HREF="appa_05.htm"
TITLE="Menu Widget Properties and Methods"
>Table A.10</A
>, respectively. <A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="Pulldown Menu for Text Search"
>Example 14.4</A
> shows how the menu in <A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="Pulldown menu and menubutton"
>Figure 14.6</A
> is created. </P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch14-28996"
>Example 14.4: Pulldown Menu for Text Search</A
></H4
><PRE
CLASS="programlisting"
>use Tk;
$top = MainWindow-&gt;new();
# Use a Frame widget as a container for menubuttons 
$menu_bar = $top-&gt;Frame()-&gt;pack(side =&gt; 'top');
 
#Search menu button
$search_mb = $menu_bar-&gt;Menubutton(text         =&gt; 'Search',
                                   relief       =&gt; 'raised',
                                   borderwidth  =&gt; 2,
                                   )-&gt;pack(side =&gt; 'left',
                                           padx =&gt; 2
                                           );
# &quot;Find&quot; menubutton
$search_mb-&gt;command(label       =&gt; 'Find',
                    accelerator =&gt; 'Meta+F',
                    underline   =&gt; 0,
                    command     =&gt; sub {print &quot;find\n&quot;}
                    );
# &quot;Find Again&quot; menubutton
$search_mb-&gt;command(label       =&gt; 'Find Again',
                    accelerator =&gt; 'Meta+A',
                    underline   =&gt; 5,
                    command     =&gt; sub {print &quot;find again\n&quot;}
                    );

$search_mb-&gt;separator();
$match_type = 'regexp';    # Default search is by regexp.
$case_type = 1;            # Ignore case, by default (enable checkbutton)
# Regexp match
$search_mb-&gt;radiobutton(label    =&gt; 'Regexp match',
                        value    =&gt; 'regexp',
                        variable =&gt; \$match_type);
# Exact match
$search_mb-&gt;radiobutton(label    =&gt; 'Exact match',
                        value    =&gt; 'exact',
                        variable =&gt; \$match_type);
$search_mb-&gt;separator();
# Ignore case
$search_mb-&gt;checkbutton(label    =&gt; 'Ignore case?',
                        variable =&gt; \$case_type);

MainLoop();</PRE
></DIV
><P
CLASS="para"
>This example invokes methods such as <KBD
CLASS="command"
>command</KBD
>, <KBD
CLASS="command"
>separator</KBD
>, <KBD
CLASS="command"
>checkbutton</KBD
>, and <KBD
CLASS="command"
>cascade</KBD
> on the MenuButton widget (<KBD
CLASS="command"
>$search_mb</KBD
>). Curiously enough, these methods actually belong to the Menu widget's interface, not the MenuButton's (see Tables <A
CLASS="xref"
HREF="appa_05.htm"
TITLE="MenuButton Widget Properties and Methods"
>Table A.9</A
> and <A
CLASS="xref"
HREF="appa_05.htm"
TITLE="Menu Widget Properties and Methods"
>Table A.10</A
>). For convenience, Perl/Tk's MenuButton accepts these commands and silently delegates them to its associated Menu widget.</P
><P
CLASS="para"
>Normally, the menu entries are stacked in the order in which they are created, but you can specify the index position explicitly using the <KBD
CLASS="command"
>add</KBD
> method. The indexing syntax is similar to that of the listbox and is described in <A
CLASS="xref"
HREF="appa_01.htm"
TITLE="Tk Widget Reference"
>Appendix A</A
>. We'll use this method to dynamically create menus in <A
CLASS="xref"
HREF="ch16_01.htm"
TITLE="GUI Example: Man Page Viewer"
>Chapter 16</A
>.<A
CLASS="indexterm"
NAME="ch14-idx-1000807-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-995694"
>14.3.9 Scrollbars and Scrolling</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000828-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000828-1"
></A
>Although scrollbars are full-fledged widgets, they are seldom used by themselves; they always control associated widgets. Because of this close association, Perl/Tk provides a convenience function called <KBD
CLASS="command"
>Scrolled</KBD
><A
CLASS="indexterm"
NAME="ch14-idx-1000829-0"
></A
> that wraps scrollbars around a widget of your choice without having to explicitly create, size, and pack them. The following example creates a scrolled listbox:</P
><PRE
CLASS="programlisting"
>$scrolled_list = $top-&gt;Scrolled('Listbox', <CODE
CLASS="replaceable"
><I
>listbox options</I
></CODE
>,
                                scrollbars =&gt; 'se');</PRE
><P
CLASS="para"
>Internally, this creates a Frame widget, horizontal and vertical scrollbars (if required), and a listbox; packs all of them together; and returns the reference to the Frame widget (the container). Isn't that nice? In fact, for the most common case of scrolled listboxes and scrolled text boxes, Perl/Tk provides convenient methods called <KBD
CLASS="command"
>ScrlListBox</KBD
><A
CLASS="indexterm"
NAME="ch14-idx-1000830-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000830-1"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000830-2"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000830-3"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000830-4"
></A
> and <KBD
CLASS="command"
>ScrlText</KBD
>, respectively, reducing your typing even further:</P
><PRE
CLASS="programlisting"
>$scrolled_list = $top-&gt;ScrlListBox(<CODE
CLASS="replaceable"
><I
>listbox options</I
></CODE
>);</PRE
><P
CLASS="para"
>This is typically all you need to know about scrolling, and you can safely go on to the <A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="Scale"
>Section 14.3.10, "Scale</A
>" section without loss of continuity.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch14-pgfId-995701"
>14.3.9.1 Custom scrolling</A
></H4
><P
CLASS="para"
>There are times, though, when you want to handle your own scrolling. For example, suppose you have three listboxes and want to synchronize their scrolling. This means that you need to arrange to have the scrollbar send messages to all three widgets whenever its slider is moved. The subtle issue here is that the inverse also holds true: the widgets also should send messages when they are themselves scrolled by using other means. For example, if you click on one listbox and drag the cursor, the listbox will scroll its own contents. It must then make sure that the scrollbar and the other two listboxes are in sync. In other words, the scrollbar is not always in the driver's seat; it is very much a "I'll scroll you, you scroll me" kind of relationship.</P
><P
CLASS="para"
>As <A
CLASS="xref"
HREF="appa_06.htm"
TITLE="Scrollbar Properties and Methods (in addition to Table 8-1)"
>Table A.11</A
> shows, there is no explicit property tying a scrollbar to a widget, but the scrollbar does have a callback property called <KBD
CLASS="command"
>command</KBD
> that is notified when the slider is moved. Meanwhile, it so happens that all widgets that are scrollable (listboxes, text widgets, frames, and canvases) support two methods called <KBD
CLASS="command"
>xview</KBD
> and <KBD
CLASS="command"
>yview</KBD
> (<A
CLASS="xref"
HREF="appa_06.htm"
TITLE="Scrollable Widget Properties and Methods"
>Table A.12</A
>), which tell the scrollable widget what part of its contents to show in its window. Hence, to make a scrollbar send a message to a widget to scroll itself, we configure the scrollbar's <KBD
CLASS="command"
>command</KBD
> property like this:</P
><PRE
CLASS="programlisting"
>$scrollbar-&gt;configure (command =&gt; [N$widget]);</PRE
><P
CLASS="para"
>The scrollbar automatically calls the specified method (<KBD
CLASS="command"
>xview</KBD
> or <KBD
CLASS="command"
>yview</KBD
>) on the widget. How does the widget know where to scroll to? Ah, unbeknownst to you, the scrollbar supplies some arguments to the <KBD
CLASS="command"
>yview</KBD
> invocation, so internally, the message from the scrollbar to the widget might look like this:</P
><PRE
CLASS="programlisting"
>$widget-&gt;yview('moveto', 30);</PRE
><P
CLASS="para"
>This tells the widget to align its contents such that the top line or pixel represents the 30% mark.</P
><P
CLASS="para"
>Now let us look in the other direction, where the widget informs the scrollbar.</P
><P
CLASS="para"
>All scrollable widgets support two methods called <KBD
CLASS="command"
>xscrollcommand</KBD
><A
CLASS="indexterm"
NAME="ch14-idx-1000846-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000846-1"
></A
> and <KBD
CLASS="command"
>yscrollcommand</KBD
>, which should be set up to call the scrollbar's <KBD
CLASS="command"
>set</KBD
> method as follows:</P
><PRE
CLASS="programlisting"
>$listbox-&gt;configure ('yscrollcommand', [N$scrollbar]);</PRE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="Interaction between a scrollbar and an associated widget (a listbox)"
>Figure 14.7</A
> shows this symbiotic relationship. The details of the commands and properties described above are provided in Tables <A
CLASS="xref"
HREF="appa_06.htm"
TITLE="Scrollbar Properties and Methods (in addition to Table 8-1)"
>Table A.11</A
> and <A
CLASS="xref"
HREF="appa_06.htm"
TITLE="Scrollable Widget Properties and Methods"
>Table A.12</A
>.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch14-31090"
>Figure 14.7: Interaction between a scrollbar and an associated widget (a listbox)</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_1407.gif"
ALT="Figure 14.7"><P
CLASS="para"
>Note that in this example, you don't have to make each listbox drive the other two listboxes. It is enough if each of them drives the scrollbar, because the scrollbar is tied to the other two.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="Setting up a Scrollbar and Listbox to Scroll Each Other"
>Example 14.5</A
> puts the various configuration commands together for one list.<A
CLASS="indexterm"
NAME="ch14-idx-1000848-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000848-1"
></A
></P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch14-36284"
>Example 14.5: Setting up a Scrollbar and Listbox to Scroll Each Other</A
></H4
><PRE
CLASS="programlisting"
>use Tk;
$top = MainWindow-&gt;new();
$car_list = $top-&gt;Listbox(&quot;width&quot; =&gt; 15, &quot;height&quot; =&gt; 4,
                          )-&gt;pack(side =&gt; 'left',
                                  padx =&gt; 10);

$car_list-&gt;insert('end', # Insert at end, the following list
                  &quot;Acura&quot;, &quot;BMW&quot;, &quot;Ferrari&quot;, &quot;Lotus&quot;, &quot;Maserati&quot;, 
                  &quot;Lamborghini&quot;, &quot;Chevrolet&quot;
                 );

# Create scrollbar, and inform it about the listbox
$scroll = $top-&gt;Scrollbar(orient  =&gt; 'vertical',
                          width   =&gt; 10,
                          command =&gt; ['yview', $car_list]
                         )-&gt;pack(side =&gt; 'left',
                                 fill =&gt; 'y',
                                 padx =&gt; 10);

# Inform listbox about the scrollbar
$car_list-&gt;configure(yscrollcommand =&gt; ['set', $scroll]);
MainLoop();</PRE
></DIV
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-36542"
>14.3.10 Scale</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch14-idx-1000850-0"
></A
>Scale widget is like a thermometer. It displays tick marks along a horizontal or vertical "trough" and provides a slider inside the trough that can be moved programmatically or manually (with the mouse or keyboard). <A
CLASS="xref"
HREF="appa_07.htm"
TITLE="Scale Methods and Properties"
>Table A.13</A
> shows the scale's properties and methods.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="Coordinated Celsuis and Fahrenheit scales"
>Figure 14.8</A
> shows two scales displaying Celsius and Fahrenheit values (corresponding to 0-100 degrees Celsius). The scales are coordinated so that a movement of one slider causes a corresponding movement in the other.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch14-19158"
>Figure 14.8: Coordinated Celsuis and Fahrenheit scales</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_1408.gif"
ALT="Figure 14.8"><P
CLASS="para"
><A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="Celsius/Fahrenheit Conversion Shown Using Two Scale Widgets"
>Example 14.6</A
> shows how you might implement it. </P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch14-19772"
>Example 14.6: Celsius/Fahrenheit Conversion Shown Using Two Scale Widgets</A
></H4
><PRE
CLASS="programlisting"
>use Tk;
# Show Celsius/Fahrenheit equivalence using scales.
$top = MainWindow-&gt;new();

$celsius_val = 50;
compute_fahrenheit();
#---------------------- CELSIUS Scale -------------------------------
$top-&gt;Scale(orient       =&gt; 'horizontal',
            from         =&gt; 0,                    # From 0 degrees C
            to           =&gt; 100,                  # To 100 degrees C
            tickinterval =&gt; 10,
            label        =&gt; 'Celsius', 
            font         =&gt; '-adobe-helvetica-medium-r-normal' .
                              . '--10-100-75-75-p-56-iso8859-1',
            length       =&gt; 300,                  # in pixels
            variable     =&gt; \$celsius_val,        # global variable
            command      =&gt; \&amp;compute_fahrenheit  # Change fahrenheit
            )-&gt;pack(side =&gt; 'top',
                    fill =&gt; 'x');
#---------------------- FAHRENHEIT Scale ----------------------------
$top-&gt;Scale(orient       =&gt; 'horizontal',
            from         =&gt; 32,                   # From 32 degrees F
            to           =&gt; 212,                  # To 212  degrees F
            tickinterval =&gt; 20,                   # tick every 20 deg.
            label        =&gt; 'Fahrenheit', 
            font         =&gt; '-adobe-helvetica-medium-r-normal'
                              . '--10-100-75-75-p-56-iso8859-1',
            length       =&gt; 300,                  # In pixels
            variable     =&gt; \$fahrenheit_val,     # global variable
            command      =&gt; \&amp;compute_celsius     # Change celsius
            )-&gt;pack(side =&gt; 'top',
                    fill =&gt; 'x',
                    pady =&gt; '5');


sub compute_celsius {
    # The Celsius scale's slider automatically moves when this 
    # $celsius_val is changed
    $celsius_val = ($fahrenheit_val - 32)*5/9;
}

sub compute_fahrenheit {
    $fahrenheit_val = ($celsius_val * 9 / 5) + 32;
}

MainLoop();</PRE
></DIV
><P
CLASS="para"
>In this example, the Celsius scale calls <KBD
CLASS="command"
>compute_fahrenheit()</KBD
> when its slider is moved. This procedure changes <KBD
CLASS="command"
>$fahrenheit_val</KBD
>, which is associated with the Fahrenheit scale. As you can see, using the <KBD
CLASS="command"
>command</KBD
> and <KBD
CLASS="command"
>variable</KBD
> properties is typically enough to work with scales. You don't have to invoke the <KBD
CLASS="command"
>set()</KBD
> method explicitly.<A
CLASS="indexterm"
NAME="ch14-idx-1000851-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-995902"
>14.3.11 HList</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000852-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000852-1"
></A
>Hierarchical data, like filesystem structures or organization charts, can be represented with the hierarchical list widget, HList. Each entry is indented one level to the right of its parent entry. HList optionally draws branches and can associate icons or other widgets with each entry. An entry is identified not by its index (as the listbox does) but by its "entry path," which is like a file pathname with a separator character of your choice. <A
CLASS="xref"
HREF="appa_08.htm"
TITLE="HList Methods and Properties"
>Table A.14</A
> describes some of the interesting properties and methods of this widget.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="Directory Browser Built Using an HList Widget"
>Example 14.7</A
> builds a directory browser using HList. Double-clicking on a directory entry expands or collapses the directory and changes the icon correspondingly. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch14-21727"
>Figure 14.9: HList widget used for a directory browsing application</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_1409.gif"
ALT="Figure 14.9"><P
CLASS="para"
><A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="Directory Browser Built Using an HList Widget"
>Example 14.7</A
> shows one of way of building the browser in <A
CLASS="xref"
HREF="ch14_03.htm"
TITLE="HList widget used for a directory browsing application"
>Figure 14.9</A
>. Pay particular attention to the code that opens and sets bitmaps and the part that changes the shape of the cursor when it is doing its work.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch14-29513"
>Example 14.7: Directory Browser Built Using an HList Widget</A
></H4
><PRE
CLASS="programlisting"
>use Tk;
require Tk::HList;
$top = MainWindow-&gt;new();
$hlist = $top-&gt;Scrolled('HList', 
                        drawbranch     =&gt; 1,   # yes, draw branches
                        separator      =&gt; '/', # filename separator
                        indent         =&gt; 15,  # pixels
                        command        =&gt; \&amp;show_or_hide_dir);
$hlist-&gt;pack(fill   =&gt; 'both',expand =&gt; 'y');
# Read bitmap files and create &quot;image&quot; objects.
$open_folder_bitmap   = $top-&gt;Bitmap(file =&gt; './open_folder.xbm');
$closed_folder_bitmap = $top-&gt;Bitmap(file =&gt; './folder.xbm');

# Start with the root directory
show_or_hide_dir(&quot;/&quot;);
MainLoop();

#-----------------------------------------------------------------------
sub show_or_hide_dir {    # Called when an entry is double-clicked
    my $path = $_[0];
    return if (! -d $path);  # Not a directory.
    if ($hlist-&gt;info('exists', $path)) { 
        # Toggle the directory state. 
        # We know that a directory is open if the next entry is a 
        # a substring of the current path
        $next_entry = $hlist-&gt;info('next', $path);
        if (!$next_entry || (index ($next_entry, &quot;$path/&quot;) == -1)) {
            # Nope. open it
            $hlist-&gt;entryconfigure($path, image =&gt; $open_folder_bitmap);
            add_dir_contents($path);
        } else {
            # Yes. Close it by changing the icon, and deleting its children
            $hlist-&gt;entryconfigure($path, 
                                    image =&gt; $closed_folder_bitmap);
            $hlist-&gt;delete('offsprings', $path);
        }
    } else {
        die &quot;'$path' is not a directory\n&quot; if (! -d $path);
        $hlist-&gt;add($path, itemtype =&gt; 'imagetext',
                           image    =&gt; $icons{&quot;open&quot;},
                           text     =&gt; $path );
        add_dir_contents($path);
    }
}

sub add_dir_contents {
    my $path = $_[0];
    my $oldcursor = $top-&gt;cget('cursor'); # Remember current cursor, and 
    $top-&gt;configure(cursor =&gt; 'watch'); # change cursor to watch
    $top-&gt;update();
    my @files = glob &quot;$path/*&quot;;
    foreach $file (@files) {
        $file =~ s|//|/|g;
        ($text = $file) =~ s|^.*/||g;
        if (-d $file) {
            $hlist-&gt;add($file, itemtype =&gt; 'imagetext',
                        image =&gt; $icons{&quot;closed&quot;}, text =&gt; $text);
        } else {
            $hlist-&gt;add($file, itemtype =&gt; 'text',
                        text =&gt; $text);
        }
    }
    $top-&gt;configure(cursor =&gt; $oldcursor);
}</PRE
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_02.htm"
TITLE="14.2 Starting with Perl/Tk"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.2 Starting with Perl/Tk"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_04.htm"
TITLE="14.4 Geometry Management"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.4 Geometry Management"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>14.2 Starting with Perl/Tk</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>14.4 Geometry Management</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
