<HTML
><HEAD
>
<TITLE>4.2 Using Subroutine References (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:31:40Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Subroutine References and Closures"><LINK
REL="prev"
HREF="ch04_01.htm"
TITLE="4.1 Subroutine References"><LINK
REL="next"
HREF="ch04_03.htm"
TITLE="4.3 Closures"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_01.htm"
TITLE="4.1 Subroutine References"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.1 Subroutine References"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Subroutine References and Closures"
>Chapter 4<BR>Subroutine References and Closures</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_03.htm"
TITLE="4.3 Closures"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.3 Closures"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-21969"
>4.2 Using Subroutine References</A
></H2
><P
CLASS="para"
>Let's look at some common examples of using subroutine references: callback functions and higher-order procedures.</P
><P
CLASS="para"
>A <A
CLASS="indexterm"
NAME="ch04-idx-950822-0"
></A
>callback function is an ordinary subroutine whose reference is passed around. The caller (who uses that reference) doesn't necessarily have an idea of which subroutine is getting invoked. Let's examine three simple examples involving callback functions: dispatch tables, signal handlers, and plotting functions.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-947892"
>4.2.1 Dispatch Table</A
></H3
><P
CLASS="para"
>A typical <A
CLASS="indexterm"
NAME="ch04-idx-950823-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-950823-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-950823-2"
></A
>dispatch table is an array of subroutine references. The following example shows <KBD
CLASS="command"
>%options</KBD
> as a dispatch table that maps a set of command-line options to different subroutines:</P
><PRE
CLASS="programlisting"
>%options = (       # For each option, call appropriate subroutine.
   &quot;-h&quot;         =&gt; \&amp;help,
   &quot;-f&quot;         =&gt; sub {$askNoQuestions = 1},
   &quot;-r&quot;         =&gt; sub {$recursive = 1},
   &quot;_default_&quot;  =&gt; \&amp;default,
);

ProcessArgs (\@ARGV, \%options); # Pass both as references</PRE
><P
CLASS="para"
>Some of these references in this code are to named subroutines. Others don't do much, so it is just simpler to code them as inline, anonymous subroutines. <KBD
CLASS="command"
>ProcessArgs</KBD
> can now be written in a very generic way. It takes two arguments: a reference to an array that it parses and a mapping of options that it refers to while processing the array. For each option, it calls the appropriate "mapped" function, and if an invalid flag is supplied in <KBD
CLASS="command"
>@ARGV</KBD
>, it calls the function corresponding to the string  <KBD
CLASS="command"
>_default_.</KBD
></P
><P
CLASS="para"
><KBD
CLASS="command"
>ProcessArgs</KBD
> is shown in <A
CLASS="xref"
HREF="ch04_02.htm"
TITLE="ProcessArgs"
>Example 4.1</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch04-30761"
>Example 4.1: ProcessArgs</A
></H4
><PRE
CLASS="programlisting"
>ProcessArgs (\@ARGV, \%options); # Pass both as references
sub ProcessArgs {
    # Notice the notation: rl = ref. to array, rh = ref. to hash
    my ($rlArgs, $rhOptions) = @_;
    foreach $arg (@$rlArgs) {
        if (exists $rhOptions-&gt;{$arg}) {
            # The value must be a reference to a subroutine
            $rsub = $rhOptions-&gt;{$arg};
            &amp;$rsub();   # Call it.
        } else {        #option does not exist.
            if (exists $rhOptions-&gt;{&quot;_default_&quot;}) {
                &amp;{$rhOptions{&quot;_default_&quot;}};
            }
        }
    }
}</PRE
></DIV
><P
CLASS="para"
>You can omit one step by using the block form of dereferencing (hark back to <A
CLASS="xref"
HREF="ch01_02.htm"
TITLE="A More General Rule"
>Section 1.2.5, "A More General Rule"</A
>), like this:</P
><PRE
CLASS="programlisting"
>if (exists $rhOptions-&gt;{$arg}) {
    &amp;<B
CLASS="emphasis.bold"
>{$rhOptions-&gt;{$arg}}</B
>(); # Dereference and call sub in one shot
}</PRE
><P
CLASS="para"
>I prefer the more verbose version for its readability. <A
CLASS="indexterm"
NAME="ch04-idx-950825-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-939241"
>4.2.2 Signal Handlers</A
></H3
><P
CLASS="para"
>Usually, a program works by calling functions implemented by the operating system, not vice versa. An exception to this rule is when the operating system has an urgent message to deliver to the program. In many operating systems, the delivery is accomplished by means of <A
CLASS="indexterm"
NAME="ch04-idx-950827-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-950827-1"
></A
>signals. A signal might be issued, for example, when a user presses <A
CLASS="indexterm"
NAME="ch04-idx-950830-0"
></A
>Ctrl-C, when a floating-point exception is trapped by the hardware, or when a child process dies. You can specify a function to be called whenever a signal is delivered to your program. This allows you to take appropriate action. A Ctrl-C handler, for example, might perform clean-up before exiting. A floating-point exception handler might set an error flag and resume normal operation. </P
><P
CLASS="para"
>Perl provides a convenient way to specify signal handlers for each type of signal. There's a special variable called <KBD
CLASS="command"
>%SIG</KBD
><A
CLASS="indexterm"
NAME="ch04-idx-950828-0"
></A
> whose keys are the names of signals, and its values correspond to subroutine names or references, which are called for the corresponding signal.</P
><PRE
CLASS="programlisting"
>sub ctrl_c_handler  {
        print &quot;Ctrl C pressed \n&quot;;
}
$SIG {&quot;INT&quot;} = \&amp;ctrl_c_handler;  # &quot;INT&quot; indicates  &quot;Interrupt&quot; 
                                  # signal. </PRE
><P
CLASS="para"
>Here, the word <KBD
CLASS="command"
>INT</KBD
><A
CLASS="indexterm"
NAME="ch04-idx-950829-0"
></A
> is a reserved string and signifies keyboard interrupts with Ctrl-C. Your operating system's documentation for signals will tell you the names of signals that might be sent to your program or script. In fact, you can get this information from Perl also by asking it to print out some of its configuration information:</P
><PRE
CLASS="programlisting"
>use Config; # Load the Config module
print $Config{sig_name};</PRE
><P
CLASS="para"
>When you assign values to <KBD
CLASS="command"
>%SIG</KBD
>, Perl also allows you to give the <EM
CLASS="emphasis"
>name</EM
> of the subroutine, so you don't <EM
CLASS="emphasis"
>have</EM
> to give it a subroutine reference:</P
><PRE
CLASS="programlisting"
>$SIG {&quot;INT&quot;} = 'ctrl_c_handler';  # Name of the subroutine passed.</PRE
><P
CLASS="para"
>Incidentally, signal handlers are fraught with peril. Perl internally uses C library functions such as <KBD
CLASS="command"
>malloc</KBD
>, which are not <I
CLASS="firstterm"
>reentrant</I
>. If a signal handler is triggered just when such a function is being called and the signal handler also happens to call the same function, the function gets totally confused and is likely to crash the system. This behavior is even more insidious at the script level, because you have no idea when Perl might call <KBD
CLASS="command"
>malloc</KBD
>. (<A
CLASS="xref"
HREF="ch20_01.htm"
TITLE="Perl Internals"
>Chapter 20, <CITE
CLASS="chapter"
>Perl Internals</CITE
></A
>, should give you a very good idea.) The moral of the story is that you should attempt to do the least possible work in a signal handler, such as set a previously defined global variable to true, and check this variable's value in the code outside.<A
CLASS="indexterm"
NAME="ch04-idx-950831-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-950831-1"
></A
></P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch04-pgfId-939400"
>4.2.2.1 Expression plotting</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch04-idx-950832-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-950832-1"
></A
>Suppose we want to plot a variety of functions, of the general type:</P
><PRE
CLASS="programlisting"
>y = f(x)</PRE
><P
CLASS="para"
>where <CODE
CLASS="literal"
>f(x)</CODE
> is a function that takes a number as an argument and returns another number. Examples include <KBD
CLASS="command"
>sin(x)</KBD
>, <KBD
CLASS="command"
>cos(x)</KBD
>, and <KBD
CLASS="command"
>sqrt(x)</KBD
>. But in addition to such simple examples, we would like to be able to plot arbitrarily complex expressions such as</P
><PRE
CLASS="programlisting"
>y = sin(2x) + cos<SUP
CLASS="superscript"
>2</SUP
>(x); </PRE
><P
CLASS="para"
>It is easy to develop a subroutine <KBD
CLASS="command"
>plot</KBD
> that can plot this expression in the range 0 to 2<IMG
SRC="../chars/pi.gif"
ALT="[pi]">:</P
><PRE
CLASS="programlisting"
>$PI = 3.1415927;
$rs = sub {                           # Anonymous subroutine
    my($x) = @_;
    return sin (2*$x) + cos($x) ** 2; # Function to be plotted
};
plot ($rs, 0, 2 * $PI, 0.01);</PRE
><P
CLASS="para"
>This is an example of a <A
CLASS="indexterm"
NAME="ch04-idx-950833-0"
></A
>higher-order procedure that takes (a reference to) another user-defined subroutine as an input parameter and calls it one or more times. <KBD
CLASS="command"
>sort</KBD
> is an example of a built-in higher-order procedures; the difference is that it takes subroutine <EM
CLASS="emphasis"
>names</EM
>, not references.<A
CLASS="indexterm"
NAME="ch04-idx-950809-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-950809-1"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_01.htm"
TITLE="4.1 Subroutine References"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.1 Subroutine References"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_03.htm"
TITLE="4.3 Closures"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.3 Closures"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.1 Subroutine References</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.3 Closures</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
