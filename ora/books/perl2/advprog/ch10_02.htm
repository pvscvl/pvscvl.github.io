<HTML
><HEAD
>
<TITLE>10.2 Streamed Data (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:24Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. Persistence"><LINK
REL="prev"
HREF="ch10_01.htm"
TITLE="10.1 Persistence Issues"><LINK
REL="next"
HREF="ch10_03.htm"
TITLE="10.3 Record-Oriented Approach"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_01.htm"
TITLE="10.1 Persistence Issues"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.1 Persistence Issues"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch10_01.htm"
TITLE="10. Persistence"
>Chapter 10<BR>Persistence</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_03.htm"
TITLE="10.3 Record-Oriented Approach"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.3 Record-Oriented Approach"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch10-24773"
>10.2 Streamed Data</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-982597-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-982597-1"
></A
>We look at three modules, FreezeThaw, Data::Dumper, and Storable, in this section. All of them serialize Perl data structures to ASCII or binary strings; only Storable actually writes them to disk. The other two modules are important because they can be used in conjunction with other persistence mechanisms such as databases and DBM files. All of them correctly account for blessed object references and self-referential data structures, but trip up when it comes to typeglobs, tied variables, or scalars containing pointers to C data types (justifiably so). It is also impossible for these (or any) modules to understand implicit relationships. For example, if you use the ObjectTemplate approach described in <A
CLASS="xref"
HREF="ch08_01.htm"
TITLE="Efficient Attribute Storage"
>Section 8.1, "Efficient Attribute Storage"</A
>, the "object" is basically an array index, and so the disk will get to see only a bunch of meaningless array indices minus the data. Another subtle error occurs when you use references as hash indices and Perl converts them to strings (such as <KBD
CLASS="command"
>SCALAR(0xe3f434)</KBD
>). This is not a real reference, so if you store the hash table to a file and recreate it, the implicit reference to the original structure is not valid any more.</P
><P
CLASS="para"
>Moral of the story: simple nests of Perl structures are handled easily; in all other cases, it is your responsibility to translate your application data into a structure containing ordinary Perl elements before sending it to disk.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-976236"
>10.2.1 FreezeThaw</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-982598-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-982598-1"
></A
>FreezeThaw, written by Ilya <A
CLASS="indexterm"
NAME="ch10-idx-982605-0"
></A
>Zakharevich, is a pure Perl module (no C extensions) and encodes complex data structures into printable ASCII strings. It does not deal directly with files and leaves it to you to send the encoded string to a normal file, a DBM file, or a database. Here's an example of the module's use:</P
><PRE
CLASS="programlisting"
>use FreezeThaw qw(freeze thaw); # Import freeze() and thaw()
# Create a complex data structure: a hash of arrays
$c = { 'even' =&gt; [2, 4, 6, 8],
       'odd'  =&gt; [1, 3, 5, 7]};
# Create sample object
$obj = bless {'foo' =&gt; 'bar'}, 'Example';
$msg = freeze($c, $obj);
open (F, &quot;&gt; test&quot;) || die;
syswrite (F, $msg, length($msg)); # can also use write() or print()</PRE
><P
CLASS="para"
>The <KBD
CLASS="command"
>freeze()</KBD
> function takes a list of scalars to be encoded and returns one string. Arrays and hashes must be passed by reference. The <KBD
CLASS="command"
>thaw</KBD
> method takes an encoded string and returns the same list of scalars:</P
><PRE
CLASS="programlisting"
>($c, $obj) = thaw ($msg);</PRE
><P
CLASS="para"
>We will use FreezeThaw in <A
CLASS="xref"
HREF="ch13_01.htm"
TITLE="Msg: Messaging Toolkit"
>Section 13.1, "Msg: Messaging Toolkit"</A
>, to send data structures across a socket connection. Because the encoding is ASCII, we don't need to worry about machine-specific details such as byte order, or the length of integers and floating point numbers.<A
CLASS="indexterm"
NAME="ch10-idx-982600-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-982600-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-976240"
>10.2.2 Data::Dumper</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-982603-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-982603-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-982603-2"
></A
>Data::Dumper, written by Gurusamy <A
CLASS="indexterm"
NAME="ch10-idx-982606-0"
></A
>Sarathy, is similar in spirit to FreezeThaw, but takes a very different approach. It converts the list of scalars passed to its <CODE
CLASS="literal"
>Dumper</CODE
> function into pretty-printed Perl code, which can be stored into a file and subsequently <KBD
CLASS="command"
>eval</KBD
>ed. Consider</P
><PRE
CLASS="programlisting"
>use Data::Dumper ; 
# Create a complex data structure: a hash of arrays
$c = { 'even' =&gt; [2, 4,],
       'odd'  =&gt; [1, 3,]};
# Create sample object
$obj = bless {'foo' =&gt; 'bar'}, 'Example';
$msg = <B
CLASS="emphasis.bold"
>Dumper</B
>($c, $obj);
print $msg;</PRE
><P
CLASS="para"
>This prints</P
><PRE
CLASS="programlisting"
>$VAR1 = {
          even =&gt; [
                    2,
                    4
                  ],
          odd =&gt; [
                   1,
                   3
                 ]
        };
$VAR2 = bless( {
                 foo =&gt; 'bar'
               }, 'Example' );</PRE
><P
CLASS="para"
>Data::Dumper assigns an arbitrary variable name to each scalar, which is not really useful if you want to <KBD
CLASS="command"
>eval</KBD
> it subsequently and recreate your original data. The module allows you to assign your own variable names by using the <KBD
CLASS="command"
>Dump</KBD
> method:</P
><PRE
CLASS="programlisting"
>$a = 100;
@b = (2,3);
print <B
CLASS="emphasis.bold"
>Data::Dumper-&gt;Dump</B
>([$a, \@b], [&quot;foo&quot;, &quot;*bar&quot;]);</PRE
><P
CLASS="para"
>This prints</P
><PRE
CLASS="programlisting"
>$foo = 100;
@bar = (
         2,
         3
       );</PRE
><P
CLASS="para"
><KBD
CLASS="command"
>Dump</KBD
> takes two parameters: a reference to a list of scalars to be dumped and a reference to a list of corresponding names. If a "<KBD
CLASS="command"
>*</KBD
>" precedes a name, <CODE
CLASS="literal"
>Dump</CODE
> outputs the appropriate type of the variable. That is, instead of assigning to <KBD
CLASS="command"
>$b</KBD
> a reference to an anonymous array, it assigns a real list to <KBD
CLASS="command"
>@b</KBD
>. You can substitute <KBD
CLASS="command"
>Dumpx</KBD
> for <KBD
CLASS="command"
>Dump</KBD
> and take advantage of a C extension that implements the same functionality and gives you a speed increase of four to five times. </P
><P
CLASS="para"
>Data::Dumper gives you an opportunity to specify custom subroutines to serialize and deserialize data, which allows you to smooth the troublesome spots mentioned earlier. Please refer to the documentation for details.<A
CLASS="indexterm"
NAME="ch10-idx-982608-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-982608-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-982608-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-976867"
>10.2.3 Storable</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-982610-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-982610-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-982610-2"
></A
>Storable is a C extension module for serializing data directly to files and is the fastest of the three approaches. The <KBD
CLASS="command"
>store</KBD
> function takes a reference to a data structure (the <EM
CLASS="emphasis"
>root</EM
>) and the name of a file. The <KBD
CLASS="command"
>retrieve</KBD
> method does the converse: given a filename, it returns the root:</P
><PRE
CLASS="programlisting"
>use Storable;
$a = [100, 200, {'foo' =&gt; 'bar'}];
eval {
    store($a, 'test.dat');
};
print &quot;Error writing to file: $@&quot; if $@;
$a = retrieve('test.dat');</PRE
><P
CLASS="para"
>If you have more than one structure to stuff into a file, simply put all of them in an anonymous array and pass this array's reference to <KBD
CLASS="command"
>store</KBD
>. </P
><P
CLASS="para"
>You can pass an open filehandle to <KBD
CLASS="command"
>store_fd</KBD
> instead of giving a filename to <KBD
CLASS="command"
>store</KBD
>. The functions <KBD
CLASS="command"
>nstore</KBD
> and <KBD
CLASS="command"
>nstore_fd</KBD
> can be used for storing the data in "network" order, making the data machine-independent. When you use <KBD
CLASS="command"
>retrieve</KBD
> or <KBD
CLASS="command"
>retrieve_fd</KBD
>, the data is automatically converted back to the native machine format (while storing, the module stores a flag indicating whether it has stored it in a machine-independent format or not).<A
CLASS="indexterm"
NAME="ch10-idx-982673-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-982673-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-982673-2"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-982673-3"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_01.htm"
TITLE="10.1 Persistence Issues"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.1 Persistence Issues"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_03.htm"
TITLE="10.3 Record-Oriented Approach"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.3 Record-Oriented Approach"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.1 Persistence Issues</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>10.3 Record-Oriented Approach</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
