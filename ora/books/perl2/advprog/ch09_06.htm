<HTML
><HEAD
>
<TITLE>9.6 Comparisons with Other Languages (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:09Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch09_01.htm"
TITLE="9. Tie"><LINK
REL="prev"
HREF="ch09_05.htm"
TITLE="9.5 Example: Monitoring Variables"><LINK
REL="next"
HREF="ch10_01.htm"
TITLE="10. Persistence"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_05.htm"
TITLE="9.5 Example: Monitoring Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.5 Example: Monitoring Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch09_01.htm"
TITLE="9. Tie"
>Chapter 9<BR>Tie</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch10_01.htm"
TITLE="10. Persistence"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10. Persistence"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch09-40546"
>9.6 Comparisons with Other Languages</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-955096-0"
></A
>We have used the <KBD
CLASS="command"
>tie</KBD
> facility in two ways. One is to give an existing package an easy frontend (as Perl does for DBM files); another is to monitor an existing variable. Let us examine what the other languages have to offer in these contexts.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-947435"
>9.6.1 Tcl</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-955092-0"
></A
>Tcl provides a command called <KBD
CLASS="command"
>trace</KBD
> to trap read and write accesses to scalars and associative arrays. (Scalars and lists are interchangeable, so there's no separate facility for the latter.) The Tk toolkit puts tracing to good use, as we shall soon see in <A
CLASS="xref"
HREF="ch14_01.htm"
TITLE="Introduction to GUIs, Tk, and Perl/Tk"
>Section 14.1, "Introduction to GUIs, Tk, and Perl/Tk"</A
>. <KBD
CLASS="command"
>trace</KBD
> doesn't occlude the previous value, so writing a monitoring package is simpler.</P
><P
CLASS="para"
>Tcl's C API allows you to create traces much more easily than is possible with Perl. (Actually, this ease of use factor is true of the rest of the Tcl API also, as we shall see in <A
CLASS="xref"
HREF="ch20_01.htm"
TITLE="Perl Internals"
>Chapter 20, <CITE
CLASS="chapter"
>Perl Internals</CITE
></A
>.)</P
><P
CLASS="para"
>While an existing Tcl package can use this facility to provide an easy frontend for a package, I'm not aware of any that take advantage of it, as Perl does for DBM files.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-955068"
>9.6.2 Python</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-955093-0"
></A
>Python allows you to write special functions per class called <KBD
CLASS="command"
>__getattr__</KBD
> and  <KBD
CLASS="command"
>__setattr __</KBD
> that allow you to trap accesses to member attributes (or simulate new attributes). Similarly, you can make a class simulate an array by providing special methods called <KBD
CLASS="command"
>__getitem__</KBD
> and <KBD
CLASS="command"
>__setitem__</KBD
>. There are 40 such methods to overload all kinds of behavior.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-949110"
>9.6.3 C++</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-955095-0"
></A
>C++ does not allow dynamic traces to be put on a variable. On the other hand, it does provide an extensive set of operators and operator-overloading syntactic structures to allow you to substitute an object where fundamental data types or other objects are used.</P
><P
CLASS="para"
>Commercial tools and libraries such as Purify are capable of setting a dynamic trace on any region of memory. They also provide a C API to write your own callbacks on such an event.<A
CLASS="indexterm"
NAME="ch09-idx-955098-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-955176"
>9.6.4 Java</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-955177-0"
></A
>Java does not allow you to arbitrarily trap accesses. Some commercial transaction- processing systems go to the extent of looking at the byte-code to recognize accesses to member attributes and insert traces where necessary. This allows them to make any object transactional without the explicit cooperation of the object. This approach is clearly not for the faint of heart!</P
><P
CLASS="para"
>Java does not have any way to implement the other aspect either: making a class appear as an ordinary variable. </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_05.htm"
TITLE="9.5 Example: Monitoring Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.5 Example: Monitoring Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch10_01.htm"
TITLE="10. Persistence"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10. Persistence"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>9.5 Example: Monitoring Variables</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>10. Persistence</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
