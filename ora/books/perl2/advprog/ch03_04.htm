<HTML
><HEAD
>
<TITLE>3.4 Filehandles, Directory Handles, and Formats (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:31:34Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_01.htm"
TITLE="3. Typeglobs and Symbol Tables"><LINK
REL="prev"
HREF="ch03_03.htm"
TITLE="3.3 Typeglobs and References"><LINK
REL="next"
HREF="ch04_01.htm"
TITLE="4. Subroutine References and Closures"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_03.htm"
TITLE="3.3 Typeglobs and References"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.3 Typeglobs and References"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Typeglobs and Symbol Tables"
>Chapter 3<BR>Typeglobs and Symbol Tables</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch04_01.htm"
TITLE="4. Subroutine References and Closures"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4. Subroutine References and Closures"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch03-16077"
>3.4 Filehandles, Directory Handles, and Formats</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-954086-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-954086-1"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-954086-2"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-954086-3"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-954086-4"
></A
>The built-in functions <KBD
CLASS="command"
>open</KBD
> and <KBD
CLASS="command"
>opendir</KBD
> initialize a filehandle and a directory handle, respectively:</P
><PRE
CLASS="programlisting"
>open(F, &quot;/home/calvin&quot;);
opendir (D, &quot;/usr&quot;);</PRE
><P
CLASS="para"
>The symbols <KBD
CLASS="command"
>F</KBD
> and <KBD
CLASS="command"
>D</KBD
> are user-defined identifiers, but without a prefix symbol. Unfortunately, these handles don't have some basic facilities enjoyed by the important data types such as scalars, arrays, and hashes&nbsp;- you cannot assign handles, and you cannot create local handles:[<A
CLASS="footnote"
HREF="#ch03-pgfId-950974"
>4</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch03-pgfId-950974"
>[4]</A
> I don't know why filehandles didn't get a standard prefix symbol and the other features enjoyed by the other data types.</P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>local (G);   # invalid 
G = F;       # also invalid</PRE
><P
CLASS="para"
>Before we go further, it is important to know that the standard Perl distribution comes with a module called <A
CLASS="indexterm"
NAME="ch03-idx-954087-0"
></A
>FileHandle that provides an object-oriented version of filehandles. This allows you to create filehandle "objects," to assign one to the other, and to create them local to the block. Similarly, directory handles are handled by <A
CLASS="indexterm"
NAME="ch03-idx-954088-0"
></A
>DirHandle. Developers are now encouraged to use these facilities instead of the techniques described next. But you still need to wade through the next discussion because there is a large amount of freeware code in which you will see these constructs; in fact, the standard modules FileHandle, DirHandle, and <A
CLASS="indexterm"
NAME="ch03-idx-954089-0"
></A
>Symbol, as well as the entire IO hierarchy of modules, are built on this foundation.</P
><P
CLASS="para"
>Why is it so important to be able to assign handles and create local filehandles? Without assignment, you cannot pass filehandles as parameters to subroutines or maintain them in data structures. Without local filehandles, you cannot create recursive subroutines that open files (for processing included files, which themselves might include more, for example).</P
><P
CLASS="para"
>The simple answer to this solution is to use <A
CLASS="indexterm"
NAME="ch03-idx-954090-0"
></A
>typeglob assignment. That is, if you feel the urge to say,</P
><PRE
CLASS="programlisting"
>G = F;
# or,
local(F);</PRE
><P
CLASS="para"
>you can write it instead in terms of typeglobs:</P
><PRE
CLASS="programlisting"
>*G = *F;
# or, 
local (*F);</PRE
><P
CLASS="para"
>Similarly, if you want to store filehandles in data structures or create references to them, you use the corresponding typeglob. All I/O operators that require filehandles also accept typeglob references. Let us take a look at what we can do with assigning filehandles and localizing them (using typeglobs, of course).</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-951085"
>3.4.1 I/O Redirection</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-954091-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-954091-1"
></A
>The following example shows how I/O can be simply redirected:</P
><PRE
CLASS="programlisting"
>open(F, '&gt;/tmp/x') || die;
*STDOUT = *F;
print &quot;hello world\n&quot;;</PRE
><P
CLASS="para"
>The <KBD
CLASS="command"
>print</KBD
> function thinks it is sending the output to <KBD
CLASS="command"
>STDOUT</KBD
> but ends up sending it to the open file instead, because the typeglob associated with <KBD
CLASS="command"
>STDOUT</KBD
> has been aliased to <KBD
CLASS="command"
>F</KBD
>. If you want this redirection to be temporary, you can localize <KBD
CLASS="command"
>*STDOUT</KBD
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-951093"
>3.4.2 Passing Filehandles to Subroutines</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-954092-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-954092-1"
></A
>The following piece of code passes a filehandle to a subroutine:</P
><PRE
CLASS="programlisting"
>open (F, &quot;/tmp/sesame&quot;) || die $!;
read_and_print(*F);
sub read_and_print {
    local (*G) = @_;  # Filehandle G is the same as filehandle F
    while (&lt;G&gt;) { print; }
}</PRE
><P
CLASS="para"
>You might wonder why you don't need to do the same with <KBD
CLASS="command"
>open</KBD
>; after all it is a subroutine too and takes a filehandle as a parameter. Well, for built-in functions such as <KBD
CLASS="command"
>open</KBD
>, <KBD
CLASS="command"
>read</KBD
>, <KBD
CLASS="command"
>write</KBD
>, and <KBD
CLASS="command"
>readdir</KBD
>, Perl automatically passes the typeglob of that symbol (instead of a string called "F", for example).</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-946637"
>3.4.3 Localizing Filehandles</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-954093-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-954093-1"
></A
>Let us look at a subroutine that traverses include declarations in C header files. The subroutine shown next, <KBD
CLASS="command"
>ProcessFile</KBD
>, looks at each line of a file and, if it matches a <EM
CLASS="emphasis"
>#include</EM
> declaration, extracts the filename and calls itself recursively. Since it has more lines to process in the original file, it cannot <KBD
CLASS="command"
>close</KBD
> the filehandle <KBD
CLASS="command"
>F</KBD
>. If <KBD
CLASS="command"
>F</KBD
> is global, it cannot be reused to open another file, so we use <KBD
CLASS="command"
>local(*F)</KBD
> to localize it. That way, each recursive invocation of <CODE
CLASS="literal"
>ProcessFile</CODE
> gets its own unique filehandle value. </P
><PRE
CLASS="programlisting"
>sub ProcessFile {
    my ($filename) = @_;
    my ($line);
    <B
CLASS="emphasis.bold"
>local (*F);</B
>           # Save old value of typeglob, (which means
                          # its filehandles, among other things)
    open (F, $filename) || return; 
    while ($line = &lt;F&gt;) {
      # same as before
      ........
    }
    close(F);
}</PRE
><P
CLASS="para"
>Although we have not studied packages, it might be worth it to see how we could have used the <A
CLASS="indexterm"
NAME="ch03-idx-954098-0"
></A
>FileHandle module in this case:</P
><PRE
CLASS="programlisting"
>use FileHandle;
sub ProcessFile {
    my ($filename) = @_;
    my ($line);
    <B
CLASS="emphasis.bold"
>my $fh = new FileHandle;</B
> # Create local filehandle
    open (<B
CLASS="emphasis.bold"
>$fh</B
>, $filename) || return; 
    while ($line = &lt;<B
CLASS="emphasis.bold"
>$fh</B
>&gt;) {
      ........
    }
    close(<B
CLASS="emphasis.bold"
>$fh</B
>);
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-946639"
>3.4.4 Strings as Handles</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-954094-0"
></A
>It so happens that typeglobs and objects of the FileHandle module are not the only solution. All Perl I/O functions that accept a handle also happen to accept a string instead. Consider</P
><PRE
CLASS="programlisting"
>$fh = &quot;foo&quot;;
open ($fh, &quot;&lt; /home/snoopy&quot;) ;
read ($fh, $buf, 1000);</PRE
><P
CLASS="para"
>When <KBD
CLASS="command"
>open</KBD
> examines its parameters, it finds a string where a typeglob should have been. In this case, it automatically creates a typeglob of that name and then proceeds as before. Similarly, when <KBD
CLASS="command"
>read</KBD
> gets a string instead of a typeglob, it looks up the corresponding typeglob from the symbol table, and then the internal filehandle, and proceeds to read the appropriate file.<KBD
CLASS="command"
> </KBD
>This extra lookup is slightly slower than using a bareword symbol, but the time taken is insignificant if you do the I/O in reasonably large chunks (the optimal size varies from system to system).<A
CLASS="indexterm"
NAME="ch03-idx-954096-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-954096-1"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_03.htm"
TITLE="3.3 Typeglobs and References"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.3 Typeglobs and References"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch04_01.htm"
TITLE="4. Subroutine References and Closures"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4. Subroutine References and Closures"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.3 Typeglobs and References</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4. Subroutine References and Closures</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
