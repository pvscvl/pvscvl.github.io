<HTML
><HEAD
>
<TITLE>12.2 Socket API and IO::Socket (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:36:50Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch12_01.htm"
TITLE="12. Networking with Sockets"><LINK
REL="prev"
HREF="ch12_01.htm"
TITLE="12.1 Networking Primer"><LINK
REL="next"
HREF="ch12_03.htm"
TITLE="12.3 Handling Multiple Clients"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_01.htm"
TITLE="12.1 Networking Primer"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.1 Networking Primer"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch12_01.htm"
TITLE="12. Networking with Sockets"
>Chapter 12<BR>Networking with Sockets</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_03.htm"
TITLE="12.3 Handling Multiple Clients"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.3 Handling Multiple Clients"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-32265"
>12.2 Socket API and IO::Socket</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-978529-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978529-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978529-2"
></A
>Perl provides native support for sockets and a module called Socket to smooth some of the rough edges associated with the native <KBD
CLASS="command"
>socket</KBD
> call. It turns out that there are still a large number of options to deal with, and since most applications use a fairly standard set of options, we instead use a truly convenient module called IO::Socket, which is built on Socket.</P
><P
CLASS="para"
>This section uses this module to build a sending and receiving program. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-974527"
>12.2.1 Receiver</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-978535-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978535-1"
></A
>Just as you would ask the phone company for a telephone number and a physical handset, both sender and receiver ask the module to create sockets. Sockets, like telephones, are bidirectional endpoints: once a connection is established, either side can send and receive data, as long as there is an understanding between the two programs about the direction of communication.</P
><P
CLASS="para"
>Because only the receiving side needs to have a well-known address, we create a receiving socket as follows:</P
><PRE
CLASS="programlisting"
>use IO::Socket;
$sock = new IO::Socket::INET (LocalHost =&gt; 'goldengate',
                              LocalPort =&gt; 1200,
                              Proto     =&gt; 'tcp',
                              Listen    =&gt; 5,
                              Reuse     =&gt; 1,
                             );
die &quot;Could not connect: $!&quot; unless $sock;</PRE
><P
CLASS="para"
>The IO::Socket::<A
CLASS="indexterm"
NAME="ch12-idx-978536-0"
></A
>INET module provides a nice wrapper for Internet domain sockets. The LocalHost and LocalPort parameters specify the host and port on which this socket is going to listen. The number 1200 is chosen arbitrarily, but you must make sure that it doesn't conflict with the port number used by some other application on that machine (otherwise, you get an error saying, "Address already in use"). We set the <KBD
CLASS="command"
>Reuse</KBD
> option, because if this program ends without properly closing the socket and is subsequently restarted, it will complain about the socket being in use. The <KBD
CLASS="command"
>Listen</KBD
> option specifies the maximum number of callers that can be put on hold while they are <EM
CLASS="emphasis"
>dialing</EM
> this number, figuratively speaking.</P
><P
CLASS="para"
>Once created, the socket is all set to receive incoming calls. The <KBD
CLASS="command"
>accept()</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-978537-0"
></A
> method listens on the given port until another program attempts to connect to it (we'll shortly see the calling side to see how this is done); at this point, <KBD
CLASS="command"
>accept</KBD
> returns a new socket:</P
><PRE
CLASS="programlisting"
>$new_sock = $sock-&gt;accept();</PRE
><P
CLASS="para"
>This is analogous to a switchboard operator indicating a different handset for you to converse on, while he goes back to waiting for the main number to ring. Messages sent by the client can now be obtained by reading from <KBD
CLASS="command"
>$new_sock</KBD
>. You can use this socket as a filehandle and call any of the input operators, <KBD
CLASS="command"
>&lt;&gt; </KBD
>, <KBD
CLASS="command"
>read</KBD
>, or<KBD
CLASS="command"
> sysread</KBD
>, like this:</P
><PRE
CLASS="programlisting"
>$buf = &lt;$new_sock&gt;;
# or, 
$bytes_read = sysread ($new_sock, $buf, $num_bytes_to_read);</PRE
><P
CLASS="para"
>Both return <KBD
CLASS="command"
>undef</KBD
> on an end of file condition. </P
><P
CLASS="para"
>The following code summarizes the above discussion. It binds a socket to an address and waits for an incoming connection request. When that happens, it reads the new socket created until the other end closes its end of the connection. At this point, the <KBD
CLASS="command"
>&lt;&gt;</KBD
> operator returns <KBD
CLASS="command"
>undef</KBD
> (<KBD
CLASS="command"
>sysread</KBD
> returns 0, the number of bytes read).</P
><PRE
CLASS="programlisting"
>use IO::Socket;
$sock = new IO::Socket::INET (LocalHost =&gt; 'goldengate',
                              LocalPort =&gt; 1200,
                              Proto     =&gt; 'tcp',
                              Listen    =&gt; 5,
                               Reuse     =&gt; 1                             
                             );
die &quot;Socket could not be created. Reason: $!&quot; unless $sock;
while ($new_sock = $sock-&gt;accept()) {
    while (defined ($buf = &lt;$new_sock&gt;)) {
       print $buf;
    }
}
close ($sock);</PRE
><P
CLASS="para"
>You can also use <KBD
CLASS="command"
>$new_sock-&gt;get_line()</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-978538-0"
></A
> instead of <KBD
CLASS="command"
>&lt;$new_sock&gt;</KBD
>. <A
CLASS="indexterm"
NAME="ch12-idx-978541-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978541-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-974555"
>12.2.2 Sender</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-978539-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978539-1"
></A
>The calling side is even simpler. It creates a socket giving it the receiver's address and, if successful, starts sending data to it:</P
><PRE
CLASS="programlisting"
>use IO::Socket;
$sock = new IO::Socket::INET (PeerAddr =&gt; 'goldengate',
                              PeerPort =&gt; 1200,
                              Proto    =&gt; 'tcp',
                             );
die &quot;Socket could not be created. Reason: $!\n&quot; unless $sock;
foreach (1 .. 10) {
    print $sock &quot;Msg $_: How are you?\n&quot;;
}
close ($sock);</PRE
><P
CLASS="para"
>Notice how the parameters to the <KBD
CLASS="command"
>IO::Socket::INET::new</KBD
> method define whether it is a server- or client-side socket. The <KBD
CLASS="command"
>Listen</KBD
> and <KBD
CLASS="command"
>Reuse</KBD
> parameters are ignored for sending ports.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-974566"
>12.2.3 Bidirectional Communications</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-978543-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978543-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978543-2"
></A
>You can read and write from sockets, but as the preceding scripts show, two communicating processes must have a common understanding of who is doing the talking and who the listening. The programs can <EM
CLASS="emphasis"
>deadlock</EM
><A
CLASS="indexterm"
NAME="ch12-idx-978544-0"
></A
> if both are too polite and start reading their respective sockets (<KBD
CLASS="command"
>sysread</KBD
> and other input operators wait until they are able to read the requisite amount of data). They can also deadlock if both are too impolite and start speaking into the phone at the same time, figuratively speaking (<KBD
CLASS="command"
>syswrite</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-978595-0"
></A
> blocks once the buffers fill up, and because the other end is not listening, deadlock is a likely possibility). In a typical client/server setup, this protocol is well established. The client program initiates the conversation, makes a request, and waits for an answer. The typical server never attempts to connect to a client program or initiate requests; it listens and responds. Deadlocks thus happen only in peer-peer conversations.<A
CLASS="indexterm"
NAME="ch12-idx-978532-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978532-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978532-2"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_01.htm"
TITLE="12.1 Networking Primer"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.1 Networking Primer"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_03.htm"
TITLE="12.3 Handling Multiple Clients"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.3 Handling Multiple Clients"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.1 Networking Primer</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>12.3 Handling Multiple Clients</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
