<HTML
><HEAD
>
<TITLE>Extending Perl:A First Course (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:39:56Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Advanced Perl Programming"><LINK
REL="prev"
HREF="ch17_06.htm"
TITLE="17.6 Resources"><LINK
REL="next"
HREF="ch18_02.htm"
TITLE="18.2 Example: Fractals with Perl"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_06.htm"
TITLE="17.6 Resources"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.6 Resources"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 18</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_02.htm"
TITLE="18.2 Example: Fractals with Perl"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.2 Example: Fractals with Perl"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch18-40208"
>18. Extending Perl:A First Course</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch18-19903"
TITLE="18.1 Writing an Extension: Overview"
>Writing an Extension: Overview</A
><BR><A
CLASS="sect1"
HREF="ch18_02.htm"
TITLE="18.2 Example: Fractals with Perl"
>Example: Fractals with Perl</A
><BR><A
CLASS="sect1"
HREF="ch18_03.htm"
TITLE="18.3 SWIG Features"
>SWIG Features</A
><BR><A
CLASS="sect1"
HREF="ch18_04.htm"
TITLE="18.4 XS Features"
>XS Features</A
><BR><A
CLASS="sect1"
HREF="ch18_05.htm"
TITLE="18.5 Degrees of Freedom"
>Degrees of Freedom</A
><BR><A
CLASS="sect1"
HREF="ch18_06.htm"
TITLE="18.6 A Detour into Fractals"
>A Detour into Fractals</A
><BR><A
CLASS="sect1"
HREF="ch18_07.htm"
TITLE="18.7 Resources"
>Resources</A
></P
><P
></P
></DIV
><DIV
CLASS="epigraph"
ALIGN="right"
><P
CLASS="para"
ALIGN="right"
><I
>Thompson's rule for first-time telescope makers: "It is faster to make a four-inch mirror, then a six-inch mirror, than to make a six-inch mirror."</I
></P
><P
CLASS="attribution"
ALIGN="right"
>-&nbsp;Programming Pearls, <EM
CLASS="emphasis"
>Communications of the ACM</EM
>, Sept. 1985</P
></DIV
><P
CLASS="para"
>Scripting is almost always a more pleasant and productive alternative to using a systems programming language. Scripting languages aren't designed to do everything,[<A
CLASS="footnote"
HREF="#ch18-pgfId-965080"
>1</A
>] however, and there comes a time when you need to dig down to C/C++ for speed, fine-grained data structures, type safety, and access to existing libraries. <A
CLASS="indexterm"
NAME="ch18-idx-971882-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971882-1"
></A
>The ability of languages such as Perl, Visual Basic, Python, and Tcl to integrate well with C accords them the status of a serious development language, in contrast to <EM
CLASS="emphasis"
>awk</EM
> and early versions of BASIC, which were seldom used for production applications.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch18-pgfId-965080"
>[1]</A
> In Perl's case, the definition of <EM
CLASS="emphasis"
>everything</EM
> may be a bit hard to nail down!</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>In this chapter, we will examine what it takes to cement Perl and C code together and then study two tool sets that do a remarkable job of performing this binding for us. The first is a pair of tools called <EM
CLASS="emphasis"
>h2xs</EM
> and <EM
CLASS="emphasis"
>xsubpp</EM
>, packaged with the Perl distribution. For brevity, we will refer to this pair as XS,[<A
CLASS="footnote"
HREF="#ch18-pgfId-968933"
>2</A
>] because it involves an intermediate language of the same name. The other tool is <A
CLASS="indexterm"
NAME="ch18-idx-971887-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971887-1"
></A
>SWIG (Simplified Wrapper and Interface Generator), written by Dave <A
CLASS="indexterm"
NAME="ch18-idx-971889-0"
></A
>Beazley at the University of Utah. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch18-pgfId-968933"
>[2]</A
> Both XSUB and XS stand for eXternal SUBroutine.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>We'll cover an often-used subset of these tools' capabilities and learn that a lot can be achieved without having to know anything at all about the internal Perl API. But a number of powerful features will have to wait until the section <A
CLASS="xref"
HREF="ch20_05.htm"
TITLE="Meaty Extensions"
>"Meaty Extensions"</A
> in <A
CLASS="xref"
HREF="ch20_01.htm"
TITLE="Perl Internals"
>Chapter 20, <CITE
CLASS="chapter"
>Perl Internals</CITE
></A
>.</P
><P
CLASS="para"
>This chapter requires you to have the following modules handy: C::Scan, Data::Flow, both required by <EM
CLASS="emphasis"
>h2xs</EM
> and available from CPAN, and the <EM
CLASS="emphasis"
>gd</EM
> library for creating GIF files, downloadable from <A
CLASS="systemitem.url"
HREF="../../../../../../../www.boutell.com/"
>www.boutell.com</A
>. </P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch18-19903"
>18.1 Writing an Extension: Overview</A
></H2
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch18_01.htm"
TITLE="Calling C from Perl"
>Figure 18.1</A
> shows a file called <EM
CLASS="emphasis"
>testmatrix.pl</EM
> making a call to an underlying Matrix library written in C. To bind the two sets of code together, we need to have some <EM
CLASS="emphasis"
>glue</EM
><A
CLASS="indexterm"
NAME="ch18-idx-971880-0"
></A
> code, indicated by the dark gray boxes.   </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch18-23732"
>Figure 18.1: Calling C from Perl</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_1801.gif"
ALT="Figure 18.1"><P
CLASS="para"
>XS and SWIG both create this glue code in two files&nbsp;- a Perl module and a C wrapper file&nbsp;- and address the following issues:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Data type translation</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971881-0"
></A
>A Perl scalar argument can be translated to a fundamental C data type such as <EM
CLASS="emphasis"
>int</EM
>, <EM
CLASS="emphasis"
>double</EM
>, or <EM
CLASS="emphasis"
>char *</EM
> (and vice versa) with ease. Dealing with a user-defined structure such as <KBD
CLASS="command"
>Matrix</KBD
> <KBD
CLASS="command"
>*</KBD
> or <KBD
CLASS="command"
>Vector</KBD
> <KBD
CLASS="command"
>*</KBD
> is trickier. <KBD
CLASS="command"
>$mat</KBD
> in <A
CLASS="xref"
HREF="ch18_01.htm"
TITLE="Calling C from Perl"
>Figure 18.1</A
> holds a C pointer to a user-defined data type. Both <EM
CLASS="emphasis"
>xsubpp</EM
> and SWIG are equipped with a <EM
CLASS="emphasis"
>type-mapping</EM
> facility, which allows you to write custom code for handling translations between Perl and unfamiliar C data types. You have to know some internal API before you can write typemaps, so we will visit this issue again in <A
CLASS="xref"
HREF="ch20_01.htm"
TITLE="Perl Internals"
>Chapter 20</A
>. </P
></DD
><DT
CLASS="term"
>Memory management</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971890-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971890-1"
></A
>Perl automatically manages the memory allocated for user-defined variables, while C expects the programmer to spell out everything. This issue is especially important when data crosses the Perl-C interface. Unfortunately, a C function's signature gives no clue about its memory management protocol; it is difficult for humans to divine it, let alone automated tools such as SWIG and XS. Let us assume that the C matrix library stores its data as a series of Vector objects internally (each row is represented as a Vector), and that <KBD
CLASS="command"
>matrix_get_row</KBD
> returns the Vector corresponding to that row. As you can see, both <KBD
CLASS="command"
>new_matrix</KBD
> and <KBD
CLASS="command"
>matrix_get_row</KBD
> return a pointer to an object, but in the first case, the caller is expected to take ownership of the object (delete it when it is no longer required), and in the latter, the matrix library owns the memory. While the extension tools provide certain default choices, you have to be constantly on the watch. You should also ensure that the appropriate function deletes the memory&nbsp;- <KBD
CLASS="command"
>free</KBD
>, <KBD
CLASS="command"
>delete</KBD
>, or <KBD
CLASS="command"
>delete[]</KBD
>, for objects allocated by <KBD
CLASS="command"
>malloc</KBD
> or C++'s <KBD
CLASS="command"
>new</KBD
> or <KBD
CLASS="command"
>new[]</KBD
>, respectively. <A
CLASS="indexterm"
NAME="ch18-idx-971895-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971895-1"
></A
></P
></DD
><DT
CLASS="term"
>Perl conveniences</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A simple call such as </P
><PRE
CLASS="programlisting"
>     ($a,$b,$c) = $mat-&gt;get_row(10);</PRE
><P
CLASS="para"
>exercises Perl features such as packages, variable number of function arguments, multiple return values from functions, OO notation, the <KBD
CLASS="command"
>wantarray</KBD
> functionality, and so on. An extension should strive to make a Perl programmer feel at home. </P
></DD
><DT
CLASS="term"
>Bootstrapping and initialization</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971897-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971897-1"
></A
>For the C library to be called from Perl, it needs to be statically or dynamically linked in to the Perl interpreter. The Perl module generated by XS and SWIG contains the code for bootstrapping and initializing the C library. (The rest of the functions described above are present in the C wrapper code.)</P
></DD
></DL
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-964162"
>18.1.1 The Extension Process</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971898-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971898-1"
></A
>C header files (such as <I
CLASS="filename"
>Matrix.h</I
>) contain data structure declarations, preprocessor macros, publicly accessible variables, and function prototypes&nbsp;- essentially, the interface for a C library. You are typically not interested in making everything available to a Perl script; there's nothing worse than attempting C programming in Perl. In most cases, it suffices to export a subset of public functions, and some constants (which are available as initialized variables, <KBD
CLASS="command"
>#define</KBD
>'s, or <KBD
CLASS="command"
>enum</KBD
>s). We refer to them collectively as the public interface and extract them into a public header file. </P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch18_01.htm"
TITLE="SWIG and XS processes"
>Figure 18.2</A
> shows how the Matrix library's header file is used as input for the two sets of tools.      </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch18-35349"
>Figure 18.2: SWIG and XS processes</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_1802.gif"
ALT="Figure 18.2"><P
CLASS="para"
>The public header file may contain complex C declarations. <A
CLASS="indexterm"
NAME="ch18-idx-971902-0"
></A
>SWIG expects you, the extension developer, to boil the interface down to a still simpler form and express it in its interface definition language. Fortunately, this language is close enough to ANSI C and simple C++ that a large number of header files don't need any translation at all. From the interface description, SWIG generates the glue code; in the Matrix case, it will be <I
CLASS="filename"
>Matrix.pm</I
> and <I
CLASS="filename"
>Matrix_wrap.c</I
>. If your system supports dynamic linking (shared libraries on Unix, and DLLs on Windows), and if the Perl executable has been built to use it, all that is left to be done is to convert the glue code and your C library into a dynamic library. If dynamic linking is not an option, then a new Perl executable is generated by statically linking the Perl archive library (<I
CLASS="filename"
>libperl.a</I
> on Unix or <I
CLASS="filename"
>perl.lib</I
> on Microsoft Windows) with the pieces of code mentioned above.</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>h2xs</EM
><A
CLASS="indexterm"
NAME="ch18-idx-971903-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971903-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971903-2"
></A
> and <EM
CLASS="emphasis"
>xsubpp</EM
> take a slightly different approach. <EM
CLASS="emphasis"
>h2xs</EM
> understands C header files (but not C++) and converts all constants and function prototypes to a meta language called XS. But a function declaration may still be too complex for scripting purposes, so this approach expects you to twiddle with the <I
CLASS="filename"
>.xs</I
> file produced by <EM
CLASS="emphasis"
>h2xs</EM
> and take the necessary steps to simplify the interface. Of course, the hand conversion is unnecessary if the interface is already simple enough. The XS language is a mixture of C and funny keywords and provides directives for you to override the glue code produced by <EM
CLASS="emphasis"
>xsubpp</EM
>. </P
><P
CLASS="para"
>Incidentally, the code generated by both tools is quite similar, and it is perfectly acceptable to have some extensions built using the XS approach and some using SWIG. Which brings us to the question: which one should you use?<A
CLASS="indexterm"
NAME="ch18-idx-971900-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971900-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-965944"
>18.1.2 SWIG or XS?</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971904-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971904-1"
></A
>Differences in SWIG's and XS's features spring from differences in their design goals. SWIG is designed to help create a scripting language wrapper over a C library and supports Python, Tcl, and Guile in addition to Perl. In contrast, XS is designed only for Perl and allows for a number of Perlisms that SWIG cannot easily generalize to the other languages.</P
><P
CLASS="para"
>I prefer SWIG to the XS approach because it <EM
CLASS="emphasis"
>feels</EM
> a lot cleaner, is far less internals-oriented than XS is, and supports multiple languages. In addition, it has excellent support for data structures (not just functions), whereas XS supports only functions. I build C++ and Java applications for a living, so my focus is typically more on the application than on the scripting frontend&nbsp;- I leave the choice of scripting language to the user. Your mileage may vary. </P
><P
CLASS="para"
>You'll find that <EM
CLASS="emphasis"
>all</EM
> modules in the Perl distribution and on CPAN are currently written by using XS. The chief reason is that XS comes bundled with Perl. Besides, it has supported powerful features such as typemaps since its inception, whereas SWIG has been beefed up only recently. If you have to understand or modify any of the CPAN modules, you have to know XS.</P
><P
CLASS="para"
>Both tools provide significant degrees of freedom to compensate for most deficiencies, so my advice is to pick one and go with it. </P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_06.htm"
TITLE="17.6 Resources"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.6 Resources"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_02.htm"
TITLE="18.2 Example: Fractals with Perl"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.2 Example: Fractals with Perl"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>17.6 Resources</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>18.2 Example: Fractals with Perl</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
