<HTML
><HEAD
>
<TITLE>6.4 Privacy (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:33:07Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Modules"><LINK
REL="prev"
HREF="ch06_03.htm"
TITLE="6.3 Package Initialization and Destruction"><LINK
REL="next"
HREF="ch06_05.htm"
TITLE="6.5 Importing Symbols"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_03.htm"
TITLE="6.3 Package Initialization and Destruction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.3 Package Initialization and Destruction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Modules"
>Chapter 6<BR>Modules</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_05.htm"
TITLE="6.5 Importing Symbols"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.5 Importing Symbols"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-15700"
>6.4 Privacy</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-960825-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960825-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960825-2"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960825-3"
></A
>Symbols in Perl are freely accessible; privacy is not enforced. The online documentation says, rather colorfully, "Perl does not enforce private and public parts of its modules as you may have been used to in other languages like C++, Ada, or Modula-17. Perl doesn't have an infatuation with enforced privacy. It would prefer that you stayed out of its living room because you weren't invited, not because it has a shotgun."[<A
CLASS="footnote"
HREF="#ch06-pgfId-955886"
>2</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch06-pgfId-955886"
>[2]</A
> I once saw this gem in a piece of C++ code: "<CODE
CLASS="literal"
>#define private public</CODE
>", just before including a header file. Someone who wants data that badly will find a means to get at it!</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>In addition to accessing a foreign package's existing variables or subroutines, a package can easily create new names in another package's <A
CLASS="indexterm"
NAME="ch06-idx-960829-0"
></A
>namespace, as we saw earlier. Consider</P
><PRE
CLASS="programlisting"
>package Test;
# Create a variable subroutine and subroutine in another package
$main::foo = 10;    
sub <B
CLASS="emphasis.bold"
>main::myFunc</B
> {  
    print &quot;Hello \n&quot;;
}

package main;
myFunc();   #  prints &quot;Hello&quot;</PRE
><P
CLASS="para"
>Although this is not a very kosher thing to do in a normal application, this facility can be put to good use if applied in a controlled manner. You can use it to import foreign package symbol names into your own namespace; we will study this in the next section. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-955919"
>6.4.1 Enforcing Privacy</A
></H3
><P
CLASS="para"
>You can use the <KBD
CLASS="command"
>my</KBD
> operator at file scope to get unassailably private variables. Because they are not associated in any way with a package, they cannot be accessed from a different scope (in this case, file scope). But because they don't have anything to do with packages, they are restricted at most to file boundaries. Consider</P
><PRE
CLASS="programlisting"
>package A;
my $a = 10;   # A lexical variable

package B; 
print $A::a;  # No such variable in package A
print $a;     # prints 10, because it can see the lexical variable
              # (even though package B is in effect)</PRE
><P
CLASS="para"
>What if you want to make a <A
CLASS="indexterm"
NAME="ch06-idx-960832-0"
></A
>subroutine name private? You cannot use <KBD
CLASS="command"
>my</KBD
> to declare a private subroutine, but you can use anonymous subroutines and hold references to them in lexical variables:</P
><PRE
CLASS="programlisting"
>my $rs_func = sub {
                    ....
              };</PRE
><P
CLASS="para"
>Now, <KBD
CLASS="command"
>$rs_func</KBD
> can be dereferenced from within that scope (if it is a global variable anywhere within that file), but it cannot be accessed in another file. Whenever you want to call this function, you can either say <KBD
CLASS="command"
>&amp;$rs_func</KBD
> or, if you intend to call it a number of times, use typeglob aliasing for convenience and efficiency:</P
><PRE
CLASS="programlisting"
>{
    local (*func) = $rs_func;
    for (1..100) {func()};
}</PRE
><P
CLASS="para"
>While you can hide your own global identifiers, there's nothing you can do to prevent another module from installing new names into your namespace. In fact, older Perl libraries took this liberty a lot more. (Look at the <EM
CLASS="emphasis"
>bigint.pl</EM
> package in the standard Perl library, for example.)<A
CLASS="indexterm"
NAME="ch06-idx-960827-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960827-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960827-2"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960827-3"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960827-4"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_03.htm"
TITLE="6.3 Package Initialization and Destruction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.3 Package Initialization and Destruction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_05.htm"
TITLE="6.5 Importing Symbols"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.5 Importing Symbols"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.3 Package Initialization and Destruction</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6.5 Importing Symbols</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
