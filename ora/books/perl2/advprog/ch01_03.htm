<HTML
><HEAD
>
<TITLE>1.3 Nested Data Structures (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:29:59Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Data References and Anonymous Storage"><LINK
REL="prev"
HREF="ch01_02.htm"
TITLE="1.2 Using References"><LINK
REL="next"
HREF="ch01_04.htm"
TITLE="1.4 Querying a Reference"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_02.htm"
TITLE="1.2 Using References"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.2 Using References"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Data References and Anonymous Storage"
>Chapter 1<BR>Data References and Anonymous Storage</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_04.htm"
TITLE="1.4 Querying a Reference"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.4 Querying a Reference"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch01-37579"
>1.3 Nested Data Structures</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-953711-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953711-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953711-2"
></A
>Recall that arrays and hashes contain only scalars; they cannot directly contain another array or hash as such. But considering that references can refer to an array or a hash and that references are scalars, you can see how one or more elements in an array or hash can point to other arrays or hashes. In this section, we will study how to build nested, heterogeneous data structures.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-953717-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953717-1"
></A
>Let us say we would like to track a person's details and that of their dependents. One approach is to create separate <EM
CLASS="emphasis"
>named</EM
> hash tables for each person:</P
><PRE
CLASS="programlisting"
>%sue = (              # Parent
    'name' =&gt; 'Sue',
    'age'  =&gt; '45');
%john = (             # Child
    'name' =&gt; 'John',
    'age'  =&gt; '20');
%peggy = (            # Child
    'name' =&gt; 'Peggy',
    'age'  =&gt; '16');</PRE
><P
CLASS="para"
>The structures for John and Peggy can now be related to Sue like this:</P
><PRE
CLASS="programlisting"
>@children = (\%john, \%peggy);
$sue{'children'} = \@children;

# Or
$sue{'children'} = [\%john, \%peggy];</PRE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch01_03.htm"
TITLE="Mixing scalars with arrays and hashes."
>Figure 1.2</A
> shows this structure after it has been built.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch01-28104"
>Figure 1.2: Mixing scalars with arrays and hashes.</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_0102.gif"
ALT="Figure 1.2"><P
CLASS="para"
>This is how you can print Peggy's age, given <KBD
CLASS="command"
>%sue</KBD
>:</P
><PRE
CLASS="programlisting"
>print $sue{children}-&gt;[1]-&gt;{age};</PRE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-951202"
>1.3.1 Implicit Creation of Complex Structures</A
></H3
><P
CLASS="para"
>Suppose the first line in your program is this: </P
><PRE
CLASS="programlisting"
>$sue{children}-&gt;[1]-&gt;{age} = 10;</PRE
><P
CLASS="para"
>Perl automatically creates the hash <KBD
CLASS="command"
>%sue</KBD
>, gives it a hash element indexed by the string <CODE
CLASS="literal"
>children</CODE
>, points that entry to a newly allocated array, whose second element is made to refer to a freshly allocated hash, which gets an entry indexed by the string <CODE
CLASS="literal"
>age</CODE
>. Talk about programmer efficiency. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-948957"
>1.3.2 Final Shortcut: Omit Arrows Between Subscripts</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-953724-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953724-1"
></A
>While on the subject of programmer efficiency, let us discuss one more optimization for typing. You can omit -<KBD
CLASS="command"
>&gt;</KBD
> if (and only if) it is between subscripts. That is, the following expressions are identical:</P
><PRE
CLASS="programlisting"
>print $sue{children}-&gt;[1]-&gt;{age};
print $sue{children}[1]{age};</PRE
><P
CLASS="para"
>This is similar to the way C implements <A
CLASS="indexterm"
NAME="ch01-idx-953726-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953726-1"
></A
>multidimensional arrays, in which every index except the last one behaves like a pointer to the next level (or dimension) and the final index corresponds to the actual data. The difference&nbsp;- which doesn't really matter at a usage level&nbsp;- between C's and Perl's approaches is that C treats an <EM
CLASS="emphasis"
>n</EM
>-dimensional array as a contiguous stream of bytes and does not allocate space for pointers to subarrays, whereas Perl allocates space for references to intermediate single-dimension arrays.</P
><P
CLASS="para"
>Continuing from where we left off, you will find that even such a simple example benefits from using <EM
CLASS="emphasis"
>anonymous</EM
><A
CLASS="indexterm"
NAME="ch01-idx-953727-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953727-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953727-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953727-3"
></A
> arrays and hashes, rather than named ones, as shown in the following snippet:</P
><PRE
CLASS="programlisting"
>%sue = (                                    # Parent
    'name'     =&gt; 'Sue',
    'age'      =&gt; '45',
    'children' =&gt; [                         # Anon array of two hashes
                      {                     # Anon hash 1
                         'name' =&gt; 'John',
                         'age'  =&gt; '20'
                      },
                      {                     # Anon hash 2
                         'name' =&gt; 'Peggy',
                         'age'  =&gt; '16'
                      }
                  ]
);</PRE
><P
CLASS="para"
>This snippet of code contains only one named variable. The "children" attribute is a reference to an anonymous array, which itself contains references to anonymous hashes containing the children's details. This nesting can be as deep as you want; for example, you might represent John's educational qualifications as a reference to an anonymous array of hash records (each of which contain details of school attended, grade points, and so on). None of these arrays or hashes actually embed the next level hash or array; recall that the anonymous array and hash syntax yields references, which is what the containing structures see. In other words, such a nesting does not reflect a <EM
CLASS="emphasis"
>containment</EM
> hierarchy. Try <KBD
CLASS="command"
>print values(%sue)</KBD
> to convince yourself.</P
><P
CLASS="para"
>It is comforting to know that Perl automatically deletes all nested structures as soon as the top-level structure (<KBD
CLASS="command"
>%sue</KBD
>) is deleted or reassigned to something else. Internal structures or elements that are are still referred to elsewhere aren't deleted.<A
CLASS="indexterm"
NAME="ch01-idx-953714-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953714-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953714-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953714-3"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_02.htm"
TITLE="1.2 Using References"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.2 Using References"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_04.htm"
TITLE="1.4 Querying a Reference"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.4 Querying a Reference"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.2 Using References</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.4 Querying a Reference</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
