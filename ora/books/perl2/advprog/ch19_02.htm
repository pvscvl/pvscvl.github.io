<HTML
><HEAD
>
<TITLE>19.2 Embedding Overview (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:34Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch19_01.htm"
TITLE="19. Embedding Perl:The Easy Way"><LINK
REL="prev"
HREF="ch19_01.htm"
TITLE="19.1 Why Embed?"><LINK
REL="next"
HREF="ch19_03.htm"
TITLE="19.3 Examples"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_01.htm"
TITLE="19.1 Why Embed?"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.1 Why Embed?"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch19_01.htm"
TITLE="19. Embedding Perl:The Easy Way"
>Chapter 19<BR>Embedding Perl:The Easy Way</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_03.htm"
TITLE="19.3 Examples"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.3 Examples"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch19-29287"
>19.2 Embedding Overview</A
></H2
><P
CLASS="para"
>Strange as it may seem, there are no tools to automate the task of embedding Perl as there are for extending Perl. Why is that? After all, extensions also have to account for translating data from Perl to C and back (input and output parameters). The reason is that when Perl drives C code, it specifies precisely how and when a C extension is loaded. As an extension writer, you have the job of simply writing XSUBs in a callback style, providing some initializations; the XSUBs will be called when the script invokes the appropriate corresponding functions. In contrast, since there is no standard way to write a C application, you have to decide when to initialize an embedded Perl interpreter and how to give control over to a Perl script. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-969749-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-969749-1"
></A
>To simplify embedding, this chapter shows you an easy-to-use veneer over Perl's internal API. These routines have been developed for this book to save you the bother of assimilating over 50 pages of internal documentation. But if you are the type who thrives on such details, <A
CLASS="xref"
HREF="ch20_01.htm"
TITLE="Perl Internals"
>Chapter 20, <CITE
CLASS="chapter"
>Perl Internals</CITE
></A
>, should provide the needed fix. It also explains the code for these convenience routines.</P
><P
CLASS="para"
>It so happens that the Perl executable is made up of two parts: a library of core Perl routines[<A
CLASS="footnote"
HREF="#ch19-pgfId-967061"
>2</A
>] (<EM
CLASS="emphasis"
>libperl.a</EM
> on Unix systems and <EM
CLASS="emphasis"
>perl.lib</EM
> on Microsoft Windows systems, or dynamically loadable equivalents of the same) and a simple driver file, <I
CLASS="filename"
>perlmain.c</I
>, containing <KBD
CLASS="command"
>main()</KBD
>, which, shorn of all its portability aspects, looks like this:<PRE
CLASS="programlisting"
> #include &lt;EXTERN.h&gt; 
 #include &lt;perl.h&gt; 
 static PerlInterpreter *my_perl;  
 int main(int argc, char **argv, char **env)
 {
     my_perl = perl_alloc();                        #
     perl_construct(my_perl);                       # Initialize

     perl_parse(my_perl, xs_init, argc, argv, env); #
     perl_run(my_perl);                             # Run

     perl_destruct(my_perl);                        # Shut down
     perl_free(my_perl);
 }</PRE
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch19-pgfId-967061"
>[2]</A
> Not to be confused with the <I
CLASS="filename"
>lib</I
> directory in a Perl distribution.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
><KBD
CLASS="command"
>perl_alloc</KBD
><A
CLASS="indexterm"
NAME="ch19-idx-969780-0"
></A
> and <KBD
CLASS="command"
>perl_construct</KBD
><A
CLASS="indexterm"
NAME="ch19-idx-969781-0"
></A
> create an interpreter object. <KBD
CLASS="command"
>perl_parse</KBD
><A
CLASS="indexterm"
NAME="ch19-idx-969782-0"
></A
> does some more initializations, parses the command-line parameters provided to it via <KBD
CLASS="command"
>argc</KBD
> and <KBD
CLASS="command"
>argv</KBD
>, calls an initialization routine, <KBD
CLASS="command"
>xs_init</KBD
>, to load other extensions (or to at least initialize the dynamic loader), and finally parses the script provided as part of the command line. <KBD
CLASS="command"
>perl_run</KBD
> executes the script. Finally, <KBD
CLASS="command"
>perl_destruct</KBD
> and <KBD
CLASS="command"
>perl_free</KBD
> shut down and deallocate the interpreter.</P
><P
CLASS="para"
>To take advantage of the power of Perl, all you need to do is link the Perl library to your application and essentially clone the code in <I
CLASS="filename"
>perlmain.c</I
>. We will talk about <KBD
CLASS="command"
>xs_init</KBD
> in the section <A
CLASS="xref"
HREF="ch19_04.htm"
TITLE="Adding Extensions"
>"Adding Extensions</A
>" later in this chapter; until then, we will assume that we don't need any extensions and pass <KBD
CLASS="command"
>NULL</KBD
> to <CODE
CLASS="literal"
>perl_parse</CODE
> instead of <CODE
CLASS="literal"
>xs_init</CODE
>. The interpreter is fully primed once <KBD
CLASS="command"
>perl_parse</KBD
> is done, after which you can call all functions exported by the Perl library. In this chapter, however, we will restrict ourselves to a few high-level calls, listed in <A
CLASS="xref"
HREF="ch19_02.htm"
TITLE="Perl API Calls for Easy Embedding"
>Table 19.1</A
>.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch19-38103"
>Table 19.1: Perl API Calls for Easy Embedding</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Function Name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="ch19-idx-969775-0"
></A
>perl_call_argv(
    char *sub,
    I32  flags,
    char **argv);</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>This call is available in the standard Perl distribution. It calls a subroutine with an array of string arguments terminated by NULL. Unfortunately, it doesn't return results in a convenient way. For this reason, the only flag we will use in this chapter is G_DISCARD, to tell Perl to silently discard all returned results.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="ch19-idx-969776-0"
></A
>perl_call_va (
    char *sub,
    [char *type, arg,]*
    [&quot;OUT&quot;,]
    [char *type, arg,]*
    NULL
);</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>This provides a convenient interface for passing a null-terminated list of typed parameters to a Perl subroutine and to collect the returned results into a list of parameters (similar to <KBD
CLASS="command"
>printf</KBD
> and <KBD
CLASS="command"
>scanf</KBD
>). The <CODE
CLASS="literal"
>type</CODE
> argument can be <KBD
CLASS="command"
>i</KBD
>, <KBD
CLASS="command"
>s</KBD
>, or <KBD
CLASS="command"
>d</KBD
> (integer, string, double). The string <KBD
CLASS="command"
>OUT</KBD
> begins a list of return parameters, which are pairs of type specifiers and appropriately typed pointers. String output parameters are copied into the buffers supplied, which consequently should have enough space to absorb the returned strings.</P
><P
CLASS="para"
>The parameter list must always be NULL-terminated.</P
><P
CLASS="para"
>The function returns -1 on failure and the number of parameters returned by the procedure, if successful.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>int <A
CLASS="indexterm"
NAME="ch19-idx-969777-0"
></A
>perl_eval_va(
      char *str,
      [char *type,
            *arg],
      NULL);</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Evaluates an arbitrary string, not just a subroutine. The string can be followed by any number of out parameters in the style discussed above. It does not need input parameters because they are already encoded in the string. <KBD
CLASS="command"
>perl_eval_va</KBD
> returns -1 on failure, or the number of result parameters returned by the evaluation.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>set_int(char *var,
        int  value);
int get_int(
        char *var,
        int *pvalue);</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Gets or sets a globally accessible, integer-valued scalar. <CODE
CLASS="literal"
>var</CODE
> can contain ordinary scalar variable names or array and hash indices as follows: <KBD
CLASS="command"
>foo</KBD
>, <KBD
CLASS="command"
>foo[10]</KBD
>, or <KBD
CLASS="command"
>foo{hello}</KBD
>. </P
><P
CLASS="para"
><KBD
CLASS="command"
>get_int</KBD
> takes a pointer to an integer and returns 1 if successful (or 0 on failure).</P
><P
CLASS="para"
><KBD
CLASS="command"
>set_int</KBD
> creates a variable if it doesn't already exist.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>set_double(char *var,
           double 
           value);
int get_double(
          char *var, 
          double
          *pvalue);</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Similar to above.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>set_str(char *var,
        char *value);
int get_str(char *var,
        char **value);</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>get_str</KBD
> returns the address of the string. You are expected to copy it into your own buffer.</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The <KBD
CLASS="command"
>get_*</KBD
> and <KBD
CLASS="command"
>set_*</KBD
> functions can be used only to manipulate a scalar at a time. The reason I allowed this limitation is that Perl already provides a nice chunk of functions that can slice, dice, and iterate through arrays and hashes; we'll take a detailed look at them in <A
CLASS="xref"
HREF="ch20_01.htm"
TITLE="Perl Internals"
>Chapter 20</A
>. These functions, while faster and more fine-grained, are tied to internals-related details (memory management, temporary variables, and so on); hence any discussion of them necessitates discussing these other aspects too. The <KBD
CLASS="command"
>get_*</KBD
> and <KBD
CLASS="command"
>set_*</KBD
> functions are simpler.<A
CLASS="indexterm"
NAME="ch19-idx-969757-0"
></A
></P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_01.htm"
TITLE="19.1 Why Embed?"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.1 Why Embed?"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_03.htm"
TITLE="19.3 Examples"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.3 Examples"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>19.1 Why Embed?</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>19.3 Examples</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
