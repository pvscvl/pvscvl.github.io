<HTML
><HEAD
>
<TITLE>11.3 Implementation (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:36:27Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11. Implementing Object Persistence"><LINK
REL="prev"
HREF="ch11_02.htm"
TITLE="11.2 Design Notes"><LINK
REL="next"
HREF="ch11_04.htm"
TITLE="11.4 Resources"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_02.htm"
TITLE="11.2 Design Notes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.2 Design Notes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11. Implementing Object Persistence"
>Chapter 11<BR>Implementing Object Persistence</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_04.htm"
TITLE="11.4 Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.4 Resources"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-16700"
>11.3 Implementation</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-989197-0"
></A
>This section explains the implementation of Adaptor::DBI and Adaptor::File. We will cover only the key procedures that perform query processing and file or database I/O. Pay as much attention to the design gotchas and unimplemented features as you do to the code.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-979742"
>11.3.1 Adaptor::File</A
></H3
><P
CLASS="para"
>An <A
CLASS="indexterm"
NAME="ch11-idx-989267-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989267-1"
></A
>Adaptor::File instance represents all objects stored in one file. When this adaptor is created (using <KBD
CLASS="command"
>new</KBD
>), it reads the entire file and translates the data to in-memory objects. Slurping the entire file into memory avoids the problem of having to implement fancy on-disk schemes for random access to variable-length data; after all, that is the job of DBM and database implementations. For this reason, this approach is not recommended for large numbers of objects (over 1,000, to pick a number).</P
><P
CLASS="para"
>The file adaptor has an attribute called <KBD
CLASS="command"
>all_instances</KBD
>, a hash table of all objects given to its <KBD
CLASS="command"
>store</KBD
> method (and indexed by their <KBD
CLASS="command"
>_id</KBD
>), as shown in <A
CLASS="xref"
HREF="ch11_03.htm"
TITLE="Structure of file adaptor"
>Figure 11.2</A
>.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch11-14895"
>Figure 11.2: Structure of file adaptor</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_1102.gif"
ALT="Figure 11.2"><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch11-pgfId-985117"
>11.3.1.1 Storing objects</A
></H4
><P
CLASS="para"
>Let us examine the two methods for storing objects to files: <KBD
CLASS="command"
>store()</KBD
> and <KBD
CLASS="command"
>flush</KBD
>. </P
><P
CLASS="para"
><KBD
CLASS="command"
>store</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989268-0"
></A
> allocates a new unique identifier for the object (if necessary) and simply pegs the object onto the <KBD
CLASS="command"
>all_instances</KBD
> hash. It doesn't send the data to disk. </P
><PRE
CLASS="programlisting"
>sub <B
CLASS="emphasis.bold"
>store</B
> {                    # adaptor-&gt;store($obj)
    (@_ == 2) || die  'Usage adaptor-&gt;store ($obj_to_store)';
    my ($this, $obj_to_store) = @_;  # $this  is 'all_instances'
    my ($id) = $obj_to_store-&gt;get_attributes('_id');
    my $all_instances = $this-&gt;{all_instances};
    if (!defined ($id )) {
        # Haven't seen this object before. Generate an id (doesn't
        # matter how this id is generated)
        $id = $this-&gt;_get_next_id(); 
        $obj_to_store-&gt;set_attributes('_id'=&gt; $id);
    }
    $all_instances-&gt;{$id} = $obj_to_store;
    $id;          # Return the object identifier
}</PRE
><P
CLASS="para"
>Note that the object is told about its new identifier (using <KBD
CLASS="command"
>set_attributes</KBD
>), so if it is given again to <KBD
CLASS="command"
>store</KBD
>, a new identifier is not allocated. </P
><P
CLASS="para"
>The real work of storing the data in the file is done by <KBD
CLASS="command"
>flush</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989273-0"
></A
>:</P
><PRE
CLASS="programlisting"
>sub <B
CLASS="emphasis.bold"
>flush</B
> {    # adaptor-&gt;flush();
    my $this = $_[0];
    my $all_instances = $this-&gt;{'all_instances'};
    my $file          = $this-&gt;{'file'};
    return unless defined $file;
    open (F, &quot;&gt;$file&quot;) || die &quot;Error opening $file: $!\n&quot;;
    my ($id, $obj);
    while (($id, $obj) = each %$all_instances) {
        my $class = ref($obj);
        my @attrs = 
           $obj-&gt;get_attributes(@{$this-&gt;get_attrs_for_class($class)});
        Storable::store_fd([$class, $id, @attrs], \*F);
    }
    close(F);
}</PRE
><P
CLASS="para"
><KBD
CLASS="command"
>flush</KBD
> simply walks the <KBD
CLASS="command"
>all_instances</KBD
> hash and, for each user-defined object, calls its <KBD
CLASS="command"
>get_attributes</KBD
> method. <KBD
CLASS="command"
>get_attrs_for_class</KBD
> returns a list of persistent attributes for each class (as an array reference) and is loaded from the configuration file supplied to the adaptor's constructor.</P
><P
CLASS="para"
>The attribute values, together with the class and instance identifier, are packaged in an anonymous array before being given to <KBD
CLASS="command"
>Storable::store_fd</KBD
>. </P
><P
CLASS="para"
>This implementation is unsatisfactorily slow (a second or two to store 1,000 objects), largely because so many lookups and accessor functions are called per object. At this stage of prototyping, I do not consider it a big issue.<A
CLASS="indexterm"
NAME="ch11-idx-989276-0"
></A
></P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="AUTOID-6589"
>11.3.1.2 Retrieving objects</A
></H4
><P
CLASS="para"
>The <KBD
CLASS="command"
>load_all</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989278-0"
></A
> method, called from <KBD
CLASS="command"
>new</KBD
>, simply does the reverse of <KBD
CLASS="command"
>flush</KBD
>. It reads the file, recreates each object, and inserts it in the <KBD
CLASS="command"
>all_instances</KBD
> attribute as shown:</P
><PRE
CLASS="programlisting"
>sub <B
CLASS="emphasis.bold"
>load_all</B
> {  # $all_instances = load_all($file);
    my $file = shift;
    return undef unless -e $file;
    open(F, $file) || croak &quot;Unable to load $file: $!&quot;;
    # Global information first
    my ($class, $id, $obj, $rh_attr_names, @attrs, $all_instances);
    eval {
        while (1) {
            ($class, $id, @attrs) = @{Storable::retrieve_fd(\*F)};
            $obj = $all_instances-&gt;{$id};
            $obj = $class-&gt;new() unless defined($obj);
            $rh_attr_names = $this-&gt;get_attrs_for_class($class);
            $obj-&gt;set_attributes(
                    &quot;_id&quot; =&gt; $id,
                    map {$rh_attr_names-&gt;[$_] =&gt; $attrs[$_]}
                        (0 .. $#attrs)
            );
            $all_instances-&gt;{$id} = $obj;
        } 
    };
    $all_instances;
}</PRE
><P
CLASS="para"
><KBD
CLASS="command"
>load_all</KBD
> calls <KBD
CLASS="command"
>Storable</KBD
>'s <KBD
CLASS="command"
>retrieve_fd</KBD
> function, calls the constructor of the appropriate class (<KBD
CLASS="command"
>new</KBD
>) to construct an uninitialized object of that class, and invokes <KBD
CLASS="command"
>set_attributes</KBD
> on this newly created object. The <KBD
CLASS="command"
>map</KBD
> statement constructs a list of attribute name-value pairs. When <KBD
CLASS="command"
>Storable::retrieve_fd</KBD
> has no more data, it throws an exception (using <KBD
CLASS="command"
>die</KBD
>). It breaks the infinite loop but is trapped by the <KBD
CLASS="command"
>eval</KBD
>.<KBD
CLASS="command"
></KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989280-0"
></A
></P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch11-pgfId-980275"
>11.3.1.3 Query processing</A
></H4
><P
CLASS="para"
>The <KBD
CLASS="command"
>retrieve_where</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989282-0"
></A
> method accepts a class name and a query expression, which is a subset of the SQL syntax. The query is not guaranteed to work for SQL keywords such as <KBD
CLASS="command"
>LIKE</KBD
>, <KBD
CLASS="command"
>BETWEEN</KBD
>, and <KBD
CLASS="command"
>IN</KBD
>; however, it will work for the database adaptor because it is sent untranslated to the database.</P
><P
CLASS="para"
>Writing a query processor for parsing and executing arbitrary query expressions is not a trivial task. But we know that Perl itself deals with expression evaluation, so if we can convert a query to a Perl expression, we can simply use <KBD
CLASS="command"
>eval</KBD
> to do the dirty work for us, as we saw in <A
CLASS="xref"
HREF="ch05_01.htm"
TITLE="Eval"
>Chapter 5, <CITE
CLASS="chapter"
>Eval</CITE
></A
>. </P
><P
CLASS="para"
><KBD
CLASS="command"
>retrieve_where</KBD
> hence invokes <KBD
CLASS="command"
>parse_query</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989283-0"
></A
> to convert the expression to an <KBD
CLASS="command"
>eval</KBD
>able Perl Boolean expression and dynamically creates a piece of code incorporating this expression to traverse all the objects in the <KBD
CLASS="command"
>all_instances</KBD
> attribute. That is, a call such as:</P
><PRE
CLASS="programlisting"
>retrieve_where ('Employee', 'age &lt; 45 &amp;&amp; name != 'John')</PRE
><P
CLASS="para"
>is translated to the following piece of Perl code, and <KBD
CLASS="command"
>eval</KBD
>ed:</P
><PRE
CLASS="programlisting"
>my $dummy_key; my $obj;
while (($dummy_key, $obj) = each %$all_instances) {
    next unless ref($obj) eq &quot;<B
CLASS="emphasis.bold"
>Employee</B
>&quot;;
    my ($age, $name) = $obj-&gt;get_attributes(qw(age name));
    push (@retval, $obj) if <B
CLASS="emphasis.bold"
>$age &lt; 45 &amp;&amp; $name ne 'John'</B
>;
}</PRE
><P
CLASS="para"
>The Boolean expression in the <KBD
CLASS="command"
>push</KBD
> statement and the list of attribute names are both returned by <KBD
CLASS="command"
>parse_query</KBD
>, discussed later. <KBD
CLASS="command"
>retrieve_where</KBD
> is implemented like this:</P
><PRE
CLASS="programlisting"
>sub retrieve_where {
    my ($this, $class, $query) = @_;
    my $all_instances = $$this;
    # blank queries result in a list of all objects
    return $this-&gt;retrieve_all() if ($query !~ /\S/);

    my ($boolean_expression, @attrs) = parse_query($query);
    # @attrs contains the attribute names used in the query
    # Construct a statement to fetch the required attributes, 
    # of the form:
    #   my ($name, $age) = $obj-&gt;get_attributes(qw(name age));
    my $fetch_stmt = &quot;my (&quot; . join(&quot;,&quot;,map{'$' . $_} @attrs) . &quot;) = &quot; .
               &quot;\$obj-&gt;get_attributes(qw(@attrs))&quot;;

    my (@retval);

    my $eval_str = qq{
        my \$dummy_key; my \$obj;
        while ((\$dummy_key, \$obj) = each \%\$all_instances) {
           next unless ref(\$obj) eq &quot;$class&quot;;
           $fetch_stmt;
           push (\@retval, \$obj) if ($boolean_expression);
        }
    };
    print STDERR &quot;EVAL:\n\t$eval_str\n&quot; if $debugging ;
    eval ($eval_str);
    if ($@) {
        print STDERR &quot;Ill-formed query:\n\t$query\n&quot;;
        print STDERR $@ if $debugging;
    }
    @retval;
}</PRE
><P
CLASS="para"
>Instead of constructing a list of objects for every query, <KBD
CLASS="command"
>retrieve_where</KBD
> should optionally take a callback reference as the third parameter, which can be called for every object that matches this query.<KBD
CLASS="command"
></KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989285-0"
></A
></P
><P
CLASS="para"
>Now let us take a look at <KBD
CLASS="command"
>parse_query</KBD
>, which, as was mentioned earlier, translates the SQL <CODE
CLASS="literal"
>where</CODE
> clause to a Perl expression. The input query expression is essentially a series of query terms of the form <EM
CLASS="emphasis"
>variable</EM
> <EM
CLASS="emphasis"
>op value</EM
>, strung together with logical operators (<KBD
CLASS="command"
>&amp;&amp;</KBD
> and <KBD
CLASS="command"
>||</KBD
>). The rules of the transformation are as follows:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch11-pgfId-981845"
></A
>If query is blank, it should evaluate to TRUE.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch11-pgfId-981912"
></A
>Escaped quotes should be preserved. That is, a string such as <KBD
CLASS="command"
>&quot;foo\'bar&quot;</KBD
> should not cause confusion.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch11-pgfId-981921"
></A
>"<KBD
CLASS="command"
>=</KBD
>" is mapped to "<KBD
CLASS="command"
>==</KBD
>".</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch11-pgfId-981851"
></A
><EM
CLASS="emphasis"
>variable</EM
> is mapped to <EM
CLASS="emphasis"
>$variable</EM
>. When processing this step, <KBD
CLASS="command"
>parse_query</KBD
> also keeps a note of the attribute names encountered. This list is returned to its calling procedure, <KBD
CLASS="command"
>retrieve_where</KBD
>.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch11-pgfId-981860"
></A
>If <EM
CLASS="emphasis"
>value</EM
> is a quoted string, then <EM
CLASS="emphasis"
>op</EM
> gets mapped to the appropriate string comparison operator (see <KBD
CLASS="command"
>%string_op</KBD
> below).</P
></LI
></OL
><P
CLASS="para"
><KBD
CLASS="command"
>parse_query</KBD
> is implemented like this: </P
><PRE
CLASS="programlisting"
>my %string_op = ( # Map from any operator to corresponding string op
              '=='  =&gt; 'eq',
              '&lt;'   =&gt;  'lt',
              '&lt;='  =&gt;  'le',
              '&gt;'   =&gt;  'gt',
              '&gt;='  =&gt;  'ge',
              '!='  =&gt;  'ne',
              );
my $ANY_OP = '&lt;=|&gt;=|&lt;|&gt;|!=|==';      # Any comparison operator
sub <B
CLASS="emphasis.bold"
>parse_query</B
> {
    my ($query) = @_;
    # Rule 1.
    return 1 if ($query =~ /^\s*$/);
    # First squirrel away all instances of escaped quotes - Rule 2.
    # This way it doesn't get in the way when we are processing 
    # rule 5.
    $query =~ s/\\[# Hopefully \200 and \201 aren't being
    $query =~ s/\\[&quot;]/\201/g; # being used. 
    # Rule 3 - Replace all '=' by '=='
    $query =~ s/([^!&gt;&lt;=])=/$1 == /g;
    my %attrs;
    # Rule 4 - extract fields, and replace <CODE
CLASS="replaceable"
><I
>var</I
></CODE
> with <CODE
CLASS="replaceable"
><I
>$var</I
></CODE
>
    $query =~
       s/(\w+)\s*($ANY_OP)/$attrs{$1}++, &quot;\$$1 $2&quot;/eg;
    # Rule 5 - replace comparison operators before quoted strings
    # with string comparison opersators
    $query =~ 
          s{
             ($ANY_OP)         (?# Any comparison operator)
             \s*               (?#  followed by zero or more spaces,)
             [' (?#  then by a quoted string )
           }{
             $string_op{$1} . ' \'' . $2 . '\''
           }goxse;   # global, compile-once, extended, 
                     # treat as single line, eval
    # Restore all escaped quote characters
    $query =~ s/\200/\\'/g;
    $query =~ s/\201/\\&quot;/g; 
    ($query, keys %attrs);  # Return modified query, and field list
}<KBD
CLASS="command"
></KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989288-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989288-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989288-2"
></A
></PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-980155"
>11.3.2 Adaptor::DBI</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-989290-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989290-1"
></A
>Adaptor::DBI is considerably simpler than Adaptor::File. It does not maintain a table of objects in memory; when asked to store an object, it sends it to the database, and when asked to retrieve one or more objects, it simply passes the request along to the database. This scheme is also its biggest failing, as was pointed out earlier in the section <A
CLASS="xref"
HREF="ch11_02.htm"
TITLE="Uniqueness of Objects in Memory"
>"Uniqueness of Objects in Memory</A
>."</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>new</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989291-0"
></A
> method simply opens a DBI connection, as was illustrated in <A
CLASS="xref"
HREF="ch10_01.htm"
TITLE="Persistence"
>Chapter 10, <CITE
CLASS="chapter"
>Persistence</CITE
></A
>, and creates an adaptor object with the connection handle as its sole attribute. No rocket science here. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch11-pgfId-985414"
>11.3.2.1 Storing objects</A
></H4
><P
CLASS="para"
>The adaptor's <KBD
CLASS="command"
>store</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989292-0"
></A
> method sends an object to the database:</P
><PRE
CLASS="programlisting"
>sub store {    # adaptor-&gt;store($obj)
    (@_ == 2) || croak  'Usage adaptor-&gt;store ($obj)';
    my $sql_cmd;
    my ($this, $obj) = @_;
    my $class = ref($obj);
    my $rh_class_info = $map_info{$class};
    my $table = $rh_class_info-&gt;{&quot;table&quot;};
    croak &quot;No mapping defined for package $class&quot; 
        unless defined($table);
    my $rl_attr_names = $rh_class_info-&gt;{&quot;attributes&quot;};
    my ($id)          = $obj-&gt;get_attributes('_id');
    my ($attr);
    if (!defined ($id )) {
        $id = $this-&gt;_get_next_id($table);
        $obj-&gt;set_attributes('_id'=&gt; $id);
        # Generate a statement like:
        #       insert into Employee (_id, name,    age) 
        #                     values (100, &quot;jason&quot;, 33)
        $sql_cmd  = &quot;insert into $table (&quot;;
        my ($col_name, $type, $attr);
        my (@attrs) = $obj-&gt;get_attributes(@$rl_attr_names);
        $sql_cmd .= join(&quot;,&quot;,@$rl_attr_names) . &quot;) values (&quot;;
        my $val_cmd = &quot;&quot;;
        foreach $attr (@attrs) {
            my $quote = ($attr =~ /\D/)
                           ? &quot;'&quot;
                           : &quot;&quot;;
            $val_cmd .= &quot;${quote}${attr}${quote},&quot;;
        }
        chop ($val_cmd);
        $sql_cmd .= $val_cmd . &quot;)&quot; ;
    } else {
        # Object already exists in the database. Update it
        # with a statement like:
        #       update Employee set name = &quot;jason&quot;, age = 33
        #                where _id  = 100;

        $sql_cmd = &quot;update $table set &quot;;
        my ($name, $quote);
        my @attrs = $obj-&gt;get_attributes(@$rl_attr_names);
        foreach $name (@$rl_attr_names) {
            if ($name eq '_id') {
                shift @attrs;   # Can't update primary row
                next;
            }
            $attr = shift @attrs;
            $quote = ($attr =~ /\D/)
                           ? &quot;'&quot;
                           : &quot;&quot;;
            $sql_cmd .= &quot;$name=${quote}${attr}${quote},&quot;;
        }
        chop($sql_cmd); # remove trailing comma
        $sql_cmd .= &quot; where _id = $id&quot;;
    }
    # Sql query constructed. Give it to the appropriate db connection
    # to execute. 
    $this-&gt;{dbconn}-&gt;do($sql_cmd); # 
    die &quot;DBI Error: $DBI::errstr&quot; if $DBI::err;
    $id;
}</PRE
><P
CLASS="para"
>The global variable <KBD
CLASS="command"
>%map_info</KBD
> stores database configuration information for every package mentioned in the configuration file: the name of the corresponding database table, the list of persistent attributes, and the corresponding database column names. If the object already has an attribute called <KBD
CLASS="command"
>_id </KBD
>, the corresponding database row is updated; otherwise, a new identifier is allocated and a new database row is inserted. All string valued attributes are automatically quoted. </P
><P
CLASS="para"
>Clearly, we can do much better than this implementation. If we create 1000 objects, the preceding code creates and evaluates 1000 fresh SQL insert statements. A better approach is to prepare <CODE
CLASS="literal"
>insert</CODE
>/<CODE
CLASS="literal"
>delete</CODE
>/<CODE
CLASS="literal"
>update</CODE
>/<CODE
CLASS="literal"
>fetch</CODE
> statements for each class the first time an object of that class is encountered, like this:</P
><PRE
CLASS="programlisting"
>$insert{'Employee'} = $dbh-&gt;prepare (
                        &quot;insert into Employee (_id, name, age) 
                                       values (?  , ?   , ?  )&quot;);
$delete{'Employee'} = $dbh-&gt;prepare (
                        &quot;delete from Employee where _id = ?&quot;;
$update{'Employee'} = $dbh-&gt;prepare (
                        &quot;update Employee (name=?, age=?&quot;);
$fetch {'Employee'} = $dbh-&gt;prepare (
                        &quot;select name, age, from Employee
                                     where _id = ?&quot;);</PRE
><P
CLASS="para"
><KBD
CLASS="command"
>store</KBD
> can simply execute these statements with the appropriate statements. An even faster way is to take advantage of stored procedures. As it stands, the current implementation works reasonably well for prototypes. <KBD
CLASS="command"
></KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989294-0"
></A
></P
><P
CLASS="para"
>Incidentally, Adaptor::DBI's <KBD
CLASS="command"
>flush()</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989296-0"
></A
> method does not do anything, because <KBD
CLASS="command"
>store()</KBD
> doesn't keep any object in memory.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch11-pgfId-980168"
>11.3.2.2 Queries</A
></H4
><P
CLASS="para"
><KBD
CLASS="command"
>retrieve_where</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989297-0"
></A
> creates a select query from the mapping information for that class. As was pointed out earlier, the same query executed twice will get you two different sets of objects, whose data are duplicates of the other: </P
><PRE
CLASS="programlisting"
>sub retrieve_where {
    my ($this, $class, $query) = @_;
    my $where;
    $where = ($query =~ /\S/)
                   ? &quot;where $query&quot;
                   : &quot;&quot;;
    my $rh_class_info = $map_info{$class};
    my $table = $rh_class_info-&gt;{&quot;table&quot;};
    croak &quot;No mapping defined for package $class&quot; 
          unless defined($table);
    my $rl_attr_names = $rh_class_info-&gt;{&quot;attributes&quot;};
    my $rl_col_names  = $rh_class_info-&gt;{&quot;columns&quot;};
    my $sql_cmd      = &quot;select &quot; 
                       . join(&quot;,&quot;, @{$rl_col_names}) 
                       . &quot; from $table $where&quot;;
    print $sql_cmd if $debugging;
    my $rl_rows      = $this-&gt;{d}-&gt;do($sql_cmd);
    my @retval;
    my $size = @$rl_attr_names - 1;
    
    if ($rl_rows &amp;&amp; @$rl_rows) {
        my $i; my $rl_row;
        foreach $rl_row (@$rl_rows) {
            my $obj = $class-&gt;new;
            $obj-&gt;set_attributes(map {
                                  $rl_attr_names-&gt;[$_] =&gt; $rl_row-&gt;[$_]
                                 }(0 .. $size));
            push (@retval, $obj);
        }
    }
    @retval;
}<KBD
CLASS="command"
></KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989314-0"
></A
></PRE
><P
CLASS="para"
>The preceding <KBD
CLASS="command"
>set_attributes</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989316-0"
></A
> statement perhaps requires some explanation. The objective of this statement is to set all the attributes returned by the database. Since <KBD
CLASS="command"
>set_attributes</KBD
> requires a list of name-value pairs, we use the <KBD
CLASS="command"
>map</KBD
> built-in function to return a list. This function takes two parameters&nbsp;- a block of code and a list&nbsp;- and, for each element of the list, evaluates the block in a list context. The function returns a list containing the result executing that block across all iterations.<A
CLASS="indexterm"
NAME="ch11-idx-989318-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989318-1"
></A
></P
><P
CLASS="para"
>At this point, if your enthusiasm continues unabated, you may find it worthwhile to go back and understand how Adaptor handles the issues raised in the "Design Notes" section.<A
CLASS="indexterm"
NAME="ch11-idx-989194-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989194-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989194-2"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_02.htm"
TITLE="11.2 Design Notes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.2 Design Notes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_04.htm"
TITLE="11.4 Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.4 Resources"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.2 Design Notes</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.4 Resources</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
