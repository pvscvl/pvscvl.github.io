<HTML
><HEAD
>
<TITLE>Eval (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:16Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Advanced Perl Programming"><LINK
REL="prev"
HREF="ch04_06.htm"
TITLE="4.6 Resources"><LINK
REL="next"
HREF="ch05_02.htm"
TITLE="5.2 The Block Form: Exception Handling"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_06.htm"
TITLE="4.6 Resources"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.6 Resources"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 5</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_02.htm"
TITLE="5.2 The Block Form: Exception Handling"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.2 The Block Form: Exception Handling"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch05-22043"
>5. Eval</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch05-22194"
TITLE="5.1 The String Form: Expression Evaluation"
>The String Form: Expression Evaluation</A
><BR><A
CLASS="sect1"
HREF="ch05_02.htm"
TITLE="5.2 The Block Form: Exception Handling"
>The Block Form: Exception Handling</A
><BR><A
CLASS="sect1"
HREF="ch05_03.htm"
TITLE="5.3 Watch Your Quotes"
>Watch Your Quotes</A
><BR><A
CLASS="sect1"
HREF="ch05_04.htm"
TITLE="5.4 Using Eval for Expression Evaluation"
>Using Eval for Expression Evaluation</A
><BR><A
CLASS="sect1"
HREF="ch05_05.htm"
TITLE="5.5 Using Eval for Efficiency"
>Using Eval for Efficiency</A
><BR><A
CLASS="sect1"
HREF="ch05_06.htm"
TITLE="5.6 Using Eval for Time-Outs"
>Using Eval for Time-Outs</A
><BR><A
CLASS="sect1"
HREF="ch05_07.htm"
TITLE="5.7 Eval in Other Languages"
>Eval in Other Languages</A
><BR><A
CLASS="sect1"
HREF="ch05_08.htm"
TITLE="5.8 Resources"
>Resources</A
></P
><P
></P
></DIV
><DIV
CLASS="epigraph"
ALIGN="right"
><P
CLASS="para"
ALIGN="right"
><I
>One person's data is another person's program.</I
></P
><P
CLASS="attribution"
ALIGN="right"
>-&nbsp;Programming Pearls, <CITE
CLASS="citetitle"
>Communications of the ACM</CITE
>, Sept. 1985</P
></DIV
><P
CLASS="para"
>Years ago, a friend of mine showed me an elegant program running on a tiny 48K machine, the BBC Micro, that accepted any mathematical expression such as <CODE
CLASS="literal"
>sin(x)</CODE
> <CODE
CLASS="literal"
>+</CODE
> <CODE
CLASS="literal"
>cos</CODE
> <CODE
CLASS="literal"
>(x**2)</CODE
> and graphed it. Fresh from a study of parsers, I'd wondered how many hundreds of lines it took him to write it. He showed me the code; the entire program fit on the small screen. He had used the <CODE
CLASS="literal"
>eval</CODE
> statement provided by BASIC.</P
><P
CLASS="para"
>Most self-respecting scripting languages such as BASIC (some versions, anyway), Perl, Tcl, LISP, and Python have a feature that clearly sets them apart from systems programming languages like C: the ability to treat character strings as little programs.[<A
CLASS="footnote"
HREF="#ch05-pgfId-947501"
>1</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch05-pgfId-947501"
>[1]</A
> On a related note, see the section <A
CLASS="xref"
HREF="appb_06.htm"
TITLE="Dynamic Behavior"
>"Dynamic Behavior"</A
> in <A
CLASS="xref"
HREF="appb_06.htm"
TITLE="Dynamic Behavior"
>Section 20.22</A
> for other Perl constructs that set Perl apart from systems programming languages.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>For me, Perl's <A
CLASS="indexterm"
NAME="ch05-idx-951168-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951168-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951168-2"
></A
>run-time evaluation capability is one of the biggest reasons for using the language. (The other is its terrific support for regular expressions.) I use run-time evaluation for creating little snippets of code on the fly, which then execute at typical Perl speeds (i.e., fast!), for writing sophisticated interpreters for little languages.[<A
CLASS="footnote"
HREF="#ch05-pgfId-948916"
>2</A
>] The <KBD
CLASS="command"
>eval</KBD
> function is the gateway to this power. We will use this feature in <A
CLASS="xref"
HREF="ch07_01.htm"
TITLE="Object-Oriented Programming"
>Chapter 7, <CITE
CLASS="chapter"
>Object-Oriented Programming</CITE
></A
>, for creating object accessor functions, and in <A
CLASS="xref"
HREF="ch11_01.htm"
TITLE="Implementing Object Persistence"
>Chapter 11, <CITE
CLASS="chapter"
>Implementing Object Persistence</CITE
></A
>, for building an SQL query evaluator, among other things.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch05-pgfId-948916"
>[2]</A
> For a delightful discussion of little languages, do have a look at Jon Bentley's <EM
CLASS="emphasis"
>More Programming Pearls</EM
> [<A
CLASS="xref"
HREF="ch05_08.htm"
TITLE=""
>3</A
>].</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>As it turns out, Perl's <KBD
CLASS="command"
>eval</KBD
> function works in two somewhat distinct ways, depending on the type of its argument. If given a <EM
CLASS="emphasis"
>string</EM
>, <KBD
CLASS="command"
>eval</KBD
> treats the string as a little program and compiles and executes it (as mentioned above); this is called dynamic expression evaluation. The contents of the string may or may not be known at compile time. Alternatively, if given a <EM
CLASS="emphasis"
>block</EM
> of code&nbsp;- that is, the code is known at compile time&nbsp;- <KBD
CLASS="command"
>eval </KBD
>traps run-time exceptions.</P
><P
CLASS="para"
>Dynamic expression evaluation and exception handling are very different topics and one would expect them to be performed by different keywords. Larry Wall once mentioned that he had toyed with the idea of using a different keyword, <KBD
CLASS="command"
>try</KBD
>, for the exception-handling version, but he was into keyword conservation at that point. I find that a single keyword actually works well because expressions evaluated on the fly have a greater chance of generating run-time exceptions as code known at compile-time.</P
><P
CLASS="para"
>In this chapter, you will gain an in-depth understanding of how the two forms of <KBD
CLASS="command"
>eval</KBD
> work and add an important dimension to your toolkit of idioms.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-22194"
>5.1 The String Form: Expression Evaluation</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-951169-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951169-1"
></A
>When Perl is given a file to execute or a string as a <A
CLASS="indexterm"
NAME="ch05-idx-951213-0"
></A
>command line option (using    <EM
CLASS="emphasis"
>-e</EM
>), it needs to parse the contents, check it for syntax errors, and, if all is fine, execute it. Perl makes this feature available to the programmer through the <KBD
CLASS="command"
>eval</KBD
> <EM
CLASS="emphasis"
>string</EM
> form. This contrasts powerfully with languages such as C, C++, or Java, where the compiler itself is a separate beast from your program, not available to it at run-time. In other words, the Perl interpreter itself works <EM
CLASS="emphasis"
>somewhat</EM
> like this:</P
><PRE
CLASS="programlisting"
># Slurp in the entire file
while ($line = &lt;&gt;) {
    $str .= $line;   # Accumulate the entire file.
}

# $str now contains the entire file. Execute it !
eval $str;</PRE
><P
CLASS="para"
>As you can see, <KBD
CLASS="command"
>eval</KBD
> handles any Perl script handed to it. The beauty of this thing is that this facility is available not just to Larry, but to mortals like you and me. Try this:</P
><PRE
CLASS="programlisting"
># put some code inside $str
$str = '$c = $a + $b'; # Perl doesn't care what's inside $str
$a = 10; $b = 20;
eval $str;             # Treat $str as code, and execute it.
print $c;              # prints 30</PRE
><P
CLASS="para"
>In this snippet, <KBD
CLASS="command"
>$str</KBD
> is treated as an ordinary string at first, because that is what it is. But <KBD
CLASS="command"
>eval</KBD
> thinks of it as a program and executes it. The important point is that it doesn't think of it as a <EM
CLASS="emphasis"
>separate</EM
> program, but as if it belonged right there in the original code <EM
CLASS="emphasis"
>instead</EM
> of the <CODE
CLASS="literal"
>eval</CODE
> statement, as shown in <A
CLASS="xref"
HREF="ch05_01.htm"
TITLE="eval compiles and executes the string in its own context"
>Figure 5.1</A
>.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch05-17637"
>Figure 5.1: eval compiles and executes the string in its own context</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_0501.gif"
ALT="Figure 5.1"><P
CLASS="para"
>For this reason, the string that is given to <KBD
CLASS="command"
>eval</KBD
> can use <A
CLASS="indexterm"
NAME="ch05-idx-951214-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951214-1"
></A
>variables and subroutines available to it at that point, including <KBD
CLASS="command"
>my</KBD
> and <KBD
CLASS="command"
>local</KBD
> variables, and optionally produce new ones in the same environment. In the preceding example, the string given to <KBD
CLASS="command"
>eval</KBD
> adds two initialized variables (<KBD
CLASS="command"
>$a</KBD
> and <KBD
CLASS="command"
>$b</KBD
>) and produces a new variable, <KBD
CLASS="command"
>$c</KBD
>. </P
><P
CLASS="para"
>If you have more than one statement inside the string (remember that the string can be as big a program as you want), <KBD
CLASS="command"
>eval</KBD
> evaluates all of them and returns the result of the last evaluation:</P
><PRE
CLASS="programlisting"
>$str = '$a++; $a + $b'; # Contains two expressions
$a = 10; $b = 20;
$c = eval $str; # $c gets 31 (result of the 2nd expression, $a+$b)</PRE
><P
CLASS="para"
>Of course, it's quite pointless to <CODE
CLASS="literal"
>eval</CODE
> a piece of code that you know at compile time, as in the example above. Things get interesting if <KBD
CLASS="command"
>$str</KBD
> comes from elsewhere&nbsp;- standard input, a file, or over the network. We will shortly look at some examples that make use of this.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> <A
CLASS="indexterm"
NAME="ch05-idx-951215-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951215-1"
></A
>The string form of <KBD
CLASS="command"
>eval</KBD
> is a security risk. If the string argument comes from an untrusted source and contains, say,</P
><P
CLASS="para"
>     <KBD
CLASS="command"
>system(</KBD
>'<KBD
CLASS="command"
>rm</KBD
> <KBD
CLASS="command"
>*</KBD
>'<KBD
CLASS="command"
>)</KBD
></P
><P
CLASS="para"
>the code would be merrily executed&nbsp;- and result in a distinct lack of merriment on your part. In situations in which you cannot trust input, you can use the taint-checking option provided by Perl, which prevents you from using data derived from outside the program to affect files or things outside the program [<A
CLASS="xref"
HREF="ch05_08.htm"
TITLE=""
>5</A
>]. You can also use the Safe module bundled with the Perl distribution, which provides safe compartments in which to <CODE
CLASS="literal"
>eval</CODE
> strings, similar to the environment that a web browser provides for Java or Tcl/Tk applets. </P
></BLOCKQUOTE
><P
CLASS="para"
>What if <KBD
CLASS="command"
>$str</KBD
> doesn't contain a valid Perl expression? Perl then puts an error message in a special variable called <KBD
CLASS="command"
>$@</KBD
><A
CLASS="indexterm"
NAME="ch05-idx-951216-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951216-2"
></A
> (or <KBD
CLASS="command"
>$EVAL_ERROR</KBD
>, if you use the English module). Since <KBD
CLASS="command"
>eval</KBD
> compiles the string before actually executing it, this can be either a compilation or a run-time error. <KBD
CLASS="command"
>$@</KBD
> is guaranteed to be <KBD
CLASS="command"
>undef</KBD
> if <KBD
CLASS="command"
>$str</KBD
> contains error-free code (well, I should say free of syntax errors, because it can't really protect you against flawed logic).</P
><P
CLASS="para"
>Since <KBD
CLASS="command"
>eval</KBD
> is used by the Perl interpreter itself to parse and execute a given script, the error strings (in <KBD
CLASS="command"
>$@</KBD
>) are exactly those you see on the standard error output when processing a flawed script.<KBD
CLASS="command"
></KBD
><A
CLASS="indexterm"
NAME="ch05-idx-951218-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951218-2"
></A
></P
><P
CLASS="para"
>There is one subtle, yet important, point that needs to be mentioned. <KBD
CLASS="command"
>eval</KBD
> treats the string as a block, which is why it is able to process a number of statements (not just expressions) and return the value of the last statement. This also means that you don't see the changes to localized or lexical variables present in the <KBD
CLASS="command"
>eval</KBD
>'ed string.<A
CLASS="indexterm"
NAME="ch05-idx-951172-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951172-1"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_06.htm"
TITLE="4.6 Resources"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.6 Resources"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_02.htm"
TITLE="5.2 The Block Form: Exception Handling"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.2 The Block Form: Exception Handling"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.6 Resources</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.2 The Block Form: Exception Handling</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
