<HTML
><HEAD
>
<TITLE>2.5 Pretty-Printing (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:31:02Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Implementing Complex Data Structures"><LINK
REL="prev"
HREF="ch02_04.htm"
TITLE="2.4 Pass the Envelope"><LINK
REL="next"
HREF="ch02_06.htm"
TITLE="2.6 Resources"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_04.htm"
TITLE="2.4 Pass the Envelope"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.4 Pass the Envelope"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Implementing Complex Data Structures"
>Chapter 2<BR>Implementing Complex Data Structures</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_06.htm"
TITLE="2.6 Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.6 Resources"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-42235"
>2.5 Pretty-Printing</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-949564-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-949564-1"
></A
>In building complicated data structures, it is always nice to have a pretty-printer handy for debugging. There are at least two options for pretty-printing data structures. The first is the <A
CLASS="indexterm"
NAME="ch02-idx-949565-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-949565-1"
></A
>Perl debugger itself. It uses a function called <CODE
CLASS="literal"
>dumpValue</CODE
> in a file called <EM
CLASS="emphasis"
>dumpvar.pl</EM
>, which can be found in the standard library directory. We can help ourselves to it, with the caveat that it is an unadvertised function and could change someday. To pretty-print this structure, for example:</P
><PRE
CLASS="programlisting"
>  @sample = (11.233,{3 =&gt; 4, &quot;hello&quot; =&gt; [6,7]});</PRE
><P
CLASS="para"
>we write the following:</P
><PRE
CLASS="programlisting"
>require 'dumpvar.pl';
dumpValue(\@sample); # always pass by reference</PRE
><P
CLASS="para"
>This prints something like this:</P
><PRE
CLASS="programlisting"
>0  11.233
1  HASH(0xb75dc0)
   3 =&gt; 4
   'hello' =&gt; ARRAY(0xc70858)
      0  6
      1  7</PRE
><P
CLASS="para"
>We will cover the <KBD
CLASS="command"
>require</KBD
> statement in <A
CLASS="xref"
HREF="ch06_01.htm"
TITLE="Modules"
>Chapter 6, <CITE
CLASS="chapter"
>Modules</CITE
></A
>. Meanwhile, just think of it as a fancy <KBD
CLASS="command"
>#include</KBD
> (which doesn't load the file if it is already loaded).<A
CLASS="indexterm"
NAME="ch02-idx-949579-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-949579-1"
></A
> </P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch02-idx-949567-0"
></A
>Data::Dumper module available from CPAN is another viable alternative for pretty-printing. <A
CLASS="xref"
HREF="ch10_01.htm"
TITLE="Persistence"
>Chapter 10, <CITE
CLASS="chapter"
>Persistence</CITE
></A
>, covers this module in some detail, so we will not say any more about it here. Both modules detect circular references and handle subroutine and glob references.</P
><P
CLASS="para"
>It is fun and instructive to write a pretty-printer ourselves. <A
CLASS="xref"
HREF="ch02_05.htm"
TITLE="Pretty-Printing"
>Example 2.5</A
> illustrates a simple effort, which accounts for circular references but doesn't follow typeglobs or subroutine references. This example is used as follows:</P
><PRE
CLASS="programlisting"
>pretty_print(@sample); # Doesn't <CODE
CLASS="replaceable"
><I
>need</I
></CODE
> a reference</PRE
><P
CLASS="para"
>This prints </P
><PRE
CLASS="programlisting"
>11.233
{ # HASH(0xb78b00)
:  3 =&gt; 4
:  hello =&gt;
:  :  [ # ARRAY(0xc70858)
:  :  :  6
:  :  :  7
:  :  ]
}</PRE
><P
CLASS="para"
>The following code contains specialized procedures (<KBD
CLASS="command"
>print_array</KBD
>, <KBD
CLASS="command"
>print_hash</KBD
>, or <KBD
CLASS="command"
>print_scalar</KBD
>) that know how to print specific data types. <KBD
CLASS="command"
>print_ref</KBD
>, charged with the task of pretty-printing a reference, simply dispatches control to one of the above procedures depending upon the type of argument given to it. In turn, these procedures may call <CODE
CLASS="literal"
>print_ref</CODE
> recursively if the data types that they handle contain one or more references. </P
><P
CLASS="para"
>Whenever a reference is encountered, it is also checked with a hash <KBD
CLASS="command"
>%already_seen</KBD
> to determine whether the reference has been printed before. This prevents the routine from going into an infinite loop in the presence of circular references. All functions manipulate the global variable <KBD
CLASS="command"
>$level</KBD
> and call <KBD
CLASS="command"
>print_indented</KBD
>, which appropriately indents and prints the string given to it.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch02-11753"
>Example 2.5: Pretty-Printing</A
></H4
><PRE
CLASS="programlisting"
>$level = -1; # Level of indentation

sub pretty_print {
    my $var;
    foreach $var (@_) {
        if (ref ($var)) {
            print_ref($var);
        } else {
            print_scalar($var);
        }
    }
}

sub print_scalar {
    ++$level;
    my $var = shift;
    print_indented ($var);
    --$level;
}

sub print_ref {
    my $r = shift;
    if (exists ($already_seen{$r})) {
        print_indented (&quot;$r (Seen earlier)&quot;);
        return;
    } else {
        $already_seen{$r}=1;
    }
    my $ref_type = ref($r);
    if ($ref_type eq &quot;ARRAY&quot;) {
        print_array($r);
    } elsif ($ref_type eq &quot;SCALAR&quot;) {
        print &quot;Ref -&gt; $r&quot;;
        print_scalar($$r);
    } elsif ($ref_type eq &quot;HASH&quot;) {
        print_hash($r);
    } elsif ($ref_type eq &quot;REF&quot;) {
        ++$level;
        print_indented(&quot;Ref -&gt; ($r)&quot;);
        print_ref($$r);
        --$level;
    } else {
        print_indented (&quot;$ref_type (not supported)&quot;);
    }
}

sub print_array {
    my ($r_array) = @_;
    ++$level;
    print_indented (&quot;[ # $r_array&quot;);
    foreach $var (@$r_array) {
        if (ref ($var)) {
            print_ref($var);
        } else {
            print_scalar($var);
        }
    }
    print_indented (&quot;]&quot;);
    --$level;
}

sub print_hash {
    my($r_hash) = @_;
    my($key, $val);
    ++$level; 
    print_indented (&quot;{ # $r_hash&quot;);
    while (($key, $val) = each %$r_hash) {
        $val = ($val ? $val : '&quot;&quot;');
        ++$level;
        if (ref ($val)) {
            print_indented (&quot;$key =&gt; &quot;);
            print_ref($val);
        } else {
            print_indented (&quot;$key =&gt; $val&quot;);
        }
        --$level;
    }
    print_indented (&quot;}&quot;);
    --$level;
}

sub print_indented {
    $spaces = &quot;:  &quot; x $level;
    print &quot;${spaces}$_[0]\n&quot;;
}</PRE
></DIV
><P
CLASS="para"
><KBD
CLASS="command"
>print_ref</KBD
> simply prints its argument (a reference) and returns if it has already seen this reference. If you were to read the output produced by this code, you would find it hard to imagine which reference points to which structure. As an exercise, you might try producing a better pretty-printer, which identifies appropriate structures by easily identifiable numeric labels like this:</P
><PRE
CLASS="programlisting"
>:  hello =&gt;
:  :  [          # 10
:  :  :  6
:  :  :  7
:  :  ]
:  foobar =&gt; array-ref # 10
}</PRE
><P
CLASS="para"
>The number 10 is an automatically generated label, which is more easily identifiable than something like <KBD
CLASS="command"
>ARRAY(0xc70858)</KBD
>.<A
CLASS="indexterm"
NAME="ch02-idx-949569-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-949569-1"
></A
></P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_04.htm"
TITLE="2.4 Pass the Envelope"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.4 Pass the Envelope"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_06.htm"
TITLE="2.6 Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.6 Resources"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.4 Pass the Envelope</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.6 Resources</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
