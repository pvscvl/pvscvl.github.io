<HTML
><HEAD
>
<TITLE>12.5 IO Objects and Filehandles (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:37:06Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch12_01.htm"
TITLE="12. Networking with Sockets"><LINK
REL="prev"
HREF="ch12_04.htm"
TITLE="12.4 Real-World Servers"><LINK
REL="next"
HREF="ch12_06.htm"
TITLE="12.6 Prebuilt Client Modules"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_04.htm"
TITLE="12.4 Real-World Servers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.4 Real-World Servers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch12_01.htm"
TITLE="12. Networking with Sockets"
>Chapter 12<BR>Networking with Sockets</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_06.htm"
TITLE="12.6 Prebuilt Client Modules"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.6 Prebuilt Client Modules"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-30242"
>12.5 IO Objects and Filehandles</A
></H2
><P
CLASS="para"
>Perl supports the BSD <KBD
CLASS="command"
>socket</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-978620-0"
></A
> call, which returns a <A
CLASS="indexterm"
NAME="ch12-idx-978621-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978621-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978621-2"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978621-3"
></A
>filehandle, as <KBD
CLASS="command"
>open</KBD
> does for files and pipes. This filehandle can be used as an argument for all the built-in input-output operators: <KBD
CLASS="command"
>&lt;&gt; </KBD
>, <KBD
CLASS="command"
>read</KBD
>, <KBD
CLASS="command"
>sysread</KBD
>, <KBD
CLASS="command"
>print</KBD
>, <KBD
CLASS="command"
>write</KBD
>, <KBD
CLASS="command"
>syswrite</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-978607-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978607-1"
></A
>, and so on. In addition, it can be used by socket-specific functions such as <KBD
CLASS="command"
>send</KBD
>, <KBD
CLASS="command"
>recv</KBD
>, and <KBD
CLASS="command"
>setsockopt</KBD
>. </P
><P
CLASS="para"
>The IO::Socket module's <KBD
CLASS="command"
>new</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-978625-0"
></A
> method returns an object that can also be used as a parameter to these I/O routines. Internally, it calls <KBD
CLASS="command"
>socket</KBD
> and uses the typeglob corresponding to the filehandle to store other attributes; we described this hideous-looking trick in <A
CLASS="xref"
HREF="ch08_01.htm"
TITLE="Efficient Attribute Storage"
>Section 8.1, "Efficient Attribute Storage"</A
>. In other words, its return value is the same object that was given to <KBD
CLASS="command"
>socket</KBD
>, which is why it does not matter to the I/O operators which option you choose. My recommendation is to go for the considerably easier to use IO::Socket option.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-978626-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978626-1"
></A
>IO::Select is another story, however. If performance is absolutely crucial, you may prefer to do yourself what IO::Select implements:</P
><PRE
CLASS="programlisting"
>$r_bitset = $w_bitset = $e_bitset = '';
# Monitor $sock1 for reading
vec($r_bitset, $sock1-&gt;fileno(), 1) = 1;
# Monitor $sock2 for writing
vec($w_bitset, $sock2-&gt;fileno(), 1) = 1;
# Monitor both for errors
$e_bitset = $r_bitset | $w_bitset;

($nfound, $timeleft) = 
    select ($r_bitset, $w_bitset, $e_bitset, $timeout);</PRE
><P
CLASS="para"
>The native <KBD
CLASS="command"
>select</KBD
> function requires three bit vectors representing collections of open files, sockets, or pipes. Each bit in these bit sets corresponds to an integer file descriptor, which in turn is tracked by the appropriate filehandles or IO objects. The <KBD
CLASS="command"
>fileno()</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-978627-0"
></A
> method of IO::Socket, or the built-in function, <KBD
CLASS="command"
>fileno</KBD
>, can be used to retrieve this number. The rest is simple: we create three bit sets, for checking readability, writability, and error conditions, and use <KBD
CLASS="command"
>vec</KBD
> to set the appropriate bits in each bit set. Before <KBD
CLASS="command"
>select</KBD
> returns, it modifies the bit sets to indicate which file descriptors are ready for doing input or output. </P
><P
CLASS="para"
>Because these bit sets are modified, we have to construct them all over again before going back to <KBD
CLASS="command"
>select</KBD
>, which gets to be somewhat expensive. Instead, a common technique is to make a copy of these sets before getting them clobbered by <KBD
CLASS="command"
>select</KBD
>:</P
><PRE
CLASS="programlisting"
># Set up $r_bitset and $w_bitset once
...

while (1) {
    ($nfound, $timeout) = select ($r_copy = $r_bitset, 
                                  $w_copy = $w_bitset, 
                                  $e_copy = $e_bitset, $timeout);

    # Check $r_copy, $w_copy for readiness ...
}</PRE
><P
CLASS="para"
>Note that the assignment happens before <KBD
CLASS="command"
>select</KBD
> gets control, and <KBD
CLASS="command"
>select</KBD
> sees only <KBD
CLASS="command"
>$r_copy</KBD
>, <KBD
CLASS="command"
>$w_copy</KBD
>, and <KBD
CLASS="command"
>$e_copy</KBD
>, which it feels free to modify.</P
><P
CLASS="para"
>The only place where we really save time over using IO::Select is that we don't have to make a list of ready filehandles; we can process the bit set directly. For the applications I have built, this marginal gain in efficiency is not worth it, so I use IO::Select.<A
CLASS="indexterm"
NAME="ch12-idx-978623-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978623-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978623-2"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978623-3"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978623-4"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-978623-5"
></A
></P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_04.htm"
TITLE="12.4 Real-World Servers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.4 Real-World Servers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_06.htm"
TITLE="12.6 Prebuilt Client Modules"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.6 Prebuilt Client Modules"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.4 Real-World Servers</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>12.6 Prebuilt Client Modules</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
