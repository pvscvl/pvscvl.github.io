<HTML
><HEAD
>
<TITLE>9.5 Example: Monitoring Variables (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:05Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch09_01.htm"
TITLE="9. Tie"><LINK
REL="prev"
HREF="ch09_04.htm"
TITLE="9.4 Tying Filehandles"><LINK
REL="next"
HREF="ch09_06.htm"
TITLE="9.6 Comparisons with Other Languages"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_04.htm"
TITLE="9.4 Tying Filehandles"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.4 Tying Filehandles"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch09_01.htm"
TITLE="9. Tie"
>Chapter 9<BR>Tie</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_06.htm"
TITLE="9.6 Comparisons with Other Languages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.6 Comparisons with Other Languages"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch09-11511"
>9.5 Example: Monitoring Variables</A
></H2
><P
CLASS="para"
><KBD
CLASS="command"
>tie</KBD
><A
CLASS="indexterm"
NAME="ch09-idx-955161-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-955161-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-955161-2"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-955161-3"
></A
> makes it really convenient to monitor a variable. In this section, we will develop a module called <I
CLASS="filename"
>Monitor.pm</I
> that prints out a message on <CODE
CLASS="literal"
>STDERR</CODE
> whenever a variable of your choice is accessed. [<A
CLASS="footnote"
HREF="#ch09-pgfId-948110"
>2</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch09-pgfId-948110"
>[2]</A
> This is a lightweight version of a CPAN module called Tie::Watch, written by Stephen Lidie. Tie::Watch is used to invoke user-defined callbacks when certain variables are accessed.</P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>use Monitor;
monitor(\$x, 'x');
monitor(\%y, 'y');</PRE
><P
CLASS="para"
>Whenever <KBD
CLASS="command"
>$x</KBD
> or <KBD
CLASS="command"
>%y</KBD
> is changed, this module prints out something like this on <KBD
CLASS="command"
>STDERR</KBD
>:</P
><PRE
CLASS="programlisting"
>Wrote   : $x ... 10
Read    : $x ... 10
Died    : $x
Wrote   : $y{a} ... 1
Cleared : %y
</PRE
><P
CLASS="para"
>This module is useful while debugging, where it is not clear at what point a certain variable is changing, especially when it changes indirectly through a reference. This module can be enhanced to support watch expressions such as <KBD
CLASS="command"
>print</KBD
> <KBD
CLASS="command"
>'ahhh'</KBD
> <KBD
CLASS="command"
>when</KBD
> <KBD
CLASS="command"
>$array[5]</KBD
> <KBD
CLASS="command"
>&gt;</KBD
> <KBD
CLASS="command"
>10</KBD
>. Given Perl's support for <KBD
CLASS="command"
>eval</KBD
>, this is a reasonably simple task.</P
><P
CLASS="para"
><CODE
CLASS="literal"
>monitor</CODE
> takes a variable by reference and a name to be used when it prints out its messages. The first parameter is used to do a <KBD
CLASS="command"
>tie</KBD
> on the variable. <KBD
CLASS="command"
>tie</KBD
> has the unfortunate property that it hides the original value held by the variable. (The value is restored upon <KBD
CLASS="command"
>untie</KBD
>.) Clearly, we don't want Heisenberg's Uncertainty Principle to creep in here&nbsp;- our act of monitoring should not affect the user's view of that variable. For this reason, we store away the original value as an attribute of the tied object and have <KBD
CLASS="command"
>FETCH</KBD
> and <KBD
CLASS="command"
>STORE</KBD
> use this copy. Finally, when we are not interested in the variable any more, we use <KBD
CLASS="command"
>unmonitor</KBD
>, which calls <KBD
CLASS="command"
>untie</KBD
> internally. </P
><P
CLASS="para"
>Monitor, shown in <A
CLASS="xref"
HREF="ch09_05.htm"
TITLE="Monitor.pm"
>Example 9.3</A
>, delegates responsibility to a nested module dedicated to each type of value (scalar, array, hash). The <KBD
CLASS="command"
>tie</KBD
> constructors in these modules return a blessed anonymous array (the tied object), which stores the name supplied by the user (the second parameter of <KBD
CLASS="command"
>monitor</KBD
>) and the current value of the variable. </P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch09-40135"
>Example 9.3: Monitor.pm</A
></H4
><PRE
CLASS="programlisting"
>#----------------------------------------------------------------------
<B
CLASS="emphasis.bold"
>package Monitor</B
>;
require Exporter;
@ISA = (&quot;Exporter&quot;);
@EXPORT = qw(monitor unmonitor);
use strict;

sub <B
CLASS="emphasis.bold"
>monitor</B
> {
   my ($r_var, $name) = @_;
   my ($type) = ref($r_var);
   if ($type =~ /SCALAR/) {
       return tie $$r_var, 'Monitor::Scalar', $r_var, $name;
   } elsif ($type =~ /ARRAY/) {
       return tie @$r_var, 'Monitor::Array', $r_var, $name;
   } elsif ($type =~ /HASH/) {
       return tie %$r_var, 'Monitor::Hash', $r_var, $name;
   } else {
       print STDERR &quot;require ref. to scalar, array or hash&quot; unless $type;
   }
}
sub <B
CLASS="emphasis.bold"
>unmonitor</B
> {
   my ($r_var) = @_;
   my ($type) = ref($r_var);
   my $obj;
   if ($type =~ /SCALAR/) {
       Monitor::Scalar-&gt;unmonitor($r_var);
   } elsif ($type =~ /ARRAY/) {
       Monitor::Array-&gt;unmonitor($r_var);
   } elsif ($type =~ /HASH/) {
       Monitor::Hash-&gt;unmonitor($r_var);
   } else {
       print STDERR &quot;require ref. to scalar, array or hash&quot; unless $type;
   } 
}
#------------------------------------------------------------------------
package <B
CLASS="emphasis.bold"
>Monitor::Scalar</B
>;

sub <B
CLASS="emphasis.bold"
>TIESCALAR</B
> {
   my ($pkg, $rval, $name) = @_;
   my $obj = [$name, $$rval];
   bless $obj, $pkg;
   return $obj;
}

sub <B
CLASS="emphasis.bold"
>FETCH</B
> {
   my ($obj) = @_;
   my $val = $obj-&gt;[1];
   print STDERR 'Read    $', $obj-&gt;[0], &quot; ... $val \n&quot;;
   return $val;
}
sub <B
CLASS="emphasis.bold"
>STORE</B
> {
   my ($obj, $val) = @_;
   print STDERR 'Wrote   $', $obj-&gt;[0], &quot; ... $val \n&quot;;
   $obj-&gt;[1] = $val;
   return $val;
}

sub <B
CLASS="emphasis.bold"
>unmonitor</B
> {
   my ($pkg, $r_var) = @_;
   my $val;
   {
      my $obj = tied $$r_var;
      $val = $obj-&gt;[1];
      $obj-&gt;[0] = &quot;_UNMONITORED_&quot;;
   }
   untie $$r_var;
   $$r_var = $val;
}

sub <B
CLASS="emphasis.bold"
>DESTROY</B
> {
   my ($obj) = @_;
   if ($obj-&gt;[0] ne '_UNMONITORED_') {
      print STDERR 'Died    $', $obj-&gt;[0];
   }
}
#------------------------------------------------------------------------
package <B
CLASS="emphasis.bold"
>Monitor::Array</B
>;

sub <B
CLASS="emphasis.bold"
>TIEARRAY</B
> {
   my ($pkg, $rarray, $name) = @_;
   my $obj = [$name, [@$rarray]];
   bless $obj, $pkg;
   return $obj;
}

sub <B
CLASS="emphasis.bold"
>FETCH</B
> {
   my ($obj, $index) = @_;
   my $val = $obj-&gt;[1]-&gt;[$index];
   print STDERR 'Read    $', $obj-&gt;[0], &quot;[$index] ... $val\n&quot;;
   return $val;
}

sub <B
CLASS="emphasis.bold"
>STORE</B
> {
   my ($obj, $index, $val) = @_;
   print STDERR 'Wrote   $', $obj-&gt;[0], &quot;[$index] ... $val\n&quot;;
   $obj-&gt;[1]-&gt;[$index] = $val;
   return $val;
}


sub <B
CLASS="emphasis.bold"
>DESTROY</B
> {
   my ($obj) = @_;
   if ($obj-&gt;[0] ne '_UNMONITORED_') {
      print STDERR 'Died    %', $obj-&gt;[0];
   }
}

sub <B
CLASS="emphasis.bold"
>unmonitor</B
> {
   my ($pkg, $r_var) = @_;
   my $r_array;
   {
      my $obj = tied @$r_var;
      $r_array = $obj-&gt;[1];
      $obj-&gt;[0] = &quot;_UNMONITORED_&quot;;
   }
   untie @$r_var;
   @$r_var = @$r_array;
}
#------------------------------------------------------------------------
package <B
CLASS="emphasis.bold"
>Monitor::Hash</B
>;
sub <B
CLASS="emphasis.bold"
>TIEHASH</B
> {
   my ($pkg, $rhash, $name) = @_;
   my $obj = [$name, {%$rhash}];
   return (bless $obj, $pkg);
}

sub <B
CLASS="emphasis.bold"
>CLEAR</B
> {
   my ($obj) = @_;
   print STDERR 'Cleared %', $obj-&gt;[0], &quot;\n&quot;;
}

sub <B
CLASS="emphasis.bold"
>FETCH</B
> {
   my ($obj, $index) = @_;
   my $val = $obj-&gt;[1]-&gt;{$index};
   print STDERR 'Read    $', $obj-&gt;[0], &quot;{$index} ... $val\n&quot;;
   return $val;
}

sub <B
CLASS="emphasis.bold"
>STORE</B
> {
   my ($obj, $index, $val) = @_;
   print STDERR 'Wrote   $', $obj-&gt;[0], &quot;{$index} ... $val\n&quot;;
   $obj-&gt;[1]-&gt;{$index} = $val;
   return $val;
}

sub <B
CLASS="emphasis.bold"
>DESTROY</B
> {
   my ($obj) = @_;
   if ($obj-&gt;[0] ne '_UNMONITORED_') {
      print STDERR 'Died    %', $obj-&gt;[0];
   }
}
sub <B
CLASS="emphasis.bold"
>unmonitor</B
> {
   my ($pkg, $r_var) = @_;
   my $r_hash;
   {
      my $obj = tied %$r_var;
      $r_hash = $obj-&gt;[1];
      $obj-&gt;[0] = &quot;_UNMONITORED_&quot;;
   }
   untie %$r_var;
   %$r_var = %$r_hash;
}
1;</PRE
></DIV
><P
CLASS="para"
><KBD
CLASS="command"
>unmonitor</KBD
> is slightly tricky. We want to do an <KBD
CLASS="command"
>untie</KBD
>, but Perl restores the variable's value to that held by it just before <KBD
CLASS="command"
>tie</KBD
> was invoked. Clearly, this is undesirable. We want this operation to go on without the variable's user being affected in any way. Since we have the variable's current value as an attribute of the tied object, we can attempt to restore the value after the untie. Unfortunately, the following code doesn't quite work:</P
><PRE
CLASS="programlisting"
># For a tied scalar 
my $obj = tied $$r_var;         # Get the object tied to the variable
$latest_value = $obj-&gt;[1];      # Extract the latest value
untie $$r_var;                  # untie 
$$r_var = $latest_value;        # Restore the variable to the latest 
                                # value</PRE
><P
CLASS="para"
>Perl complains, "Can't untie: 1 inner references still exist ..." if the <A
CLASS="indexterm"
NAME="ch09-idx-955157-0"
></A
><EM
CLASS="emphasis"
>-w</EM
> flag is turned on. The problem is that the local variable <KBD
CLASS="command"
>$obj</KBD
> bumps up the reference count of the tied object, so an <KBD
CLASS="command"
>untie</KBD
> is not able to <KBD
CLASS="command"
>DESTROY</KBD
> the tied object. The solution is fairly straightforward: extract the value in an inner block and let <KBD
CLASS="command"
>$obj</KBD
> go out of scope, like this:</P
><PRE
CLASS="programlisting"
>my $latest_value;
{
    my $obj = tied $$r_var;
    $latest_value = $obj-&gt;[1]; # Extract the latest value.
                               # Note that $latest_value is defined
                               # outside this inner block
}
# $obj is no longer in scope, so we can peacefully untie.
untie $$r_var;
$$r_var = $latest_value; <KBD
CLASS="command"
></KBD
><A
CLASS="indexterm"
NAME="ch09-idx-955122-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-955122-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-955122-2"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-955122-3"
></A
></PRE
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_04.htm"
TITLE="9.4 Tying Filehandles"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.4 Tying Filehandles"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_06.htm"
TITLE="9.6 Comparisons with Other Languages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.6 Comparisons with Other Languages"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>9.4 Tying Filehandles</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9.6 Comparisons with Other Languages</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
