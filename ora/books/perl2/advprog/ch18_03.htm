<HTML
><HEAD
>
<TITLE>18.3 SWIG Features (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:10Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch18_01.htm"
TITLE="18. Extending Perl:A First Course"><LINK
REL="prev"
HREF="ch18_02.htm"
TITLE="18.2 Example: Fractals with Perl"><LINK
REL="next"
HREF="ch18_04.htm"
TITLE="18.4 XS Features"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_02.htm"
TITLE="18.2 Example: Fractals with Perl"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.2 Example: Fractals with Perl"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch18_01.htm"
TITLE="18. Extending Perl:A First Course"
>Chapter 18<BR>Extending Perl:A First Course</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_04.htm"
TITLE="18.4 XS Features"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.4 XS Features"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch18-11650"
>18.3 SWIG Features</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971921-0"
></A
>Having completed a tour of the extension process, let's zoom in for a closer look at SWIG's compendium of features. We mentioned earlier that SWIG handles a useful subset of ANSI C/C++, which means support for data structures as well as functions. Specifically, it supports the following:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Constants and global variables</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A C variable can be exported into Perl space as a scalar variable of the same name. SWIG supports the fundamental C data types, enums, and #defined constant values. Variables of complex or user-defined types are automatically mapped to a pair of get/set accessor functions.</P
></DD
><DT
CLASS="term"
>Pointers</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971927-0"
></A
>Every pointer is treated as a <KBD
CLASS="command"
>void</KBD
> <KBD
CLASS="command"
>*</KBD
> by default, regardless of whether it is a <KBD
CLASS="command"
>char**</KBD
> or <KBD
CLASS="command"
>Matrix*</KBD
> or <KBD
CLASS="command"
>double</KBD
> <KBD
CLASS="command"
>***</KBD
>. This strategy works especially well for user-defined types, because most C libraries don't expect you to dereference such pointers. For example, <CODE
CLASS="literal"
>fopen</CODE
> returns a <KBD
CLASS="command"
>FILE *</KBD
>, which is simply handed over to <KBD
CLASS="command"
>fread()</KBD
> and <KBD
CLASS="command"
>fwrite()</KBD
>. In Perl, this pointer is available as a scalar, and Perl doesn't have to know whether the pointer refers to an array, structure, or a typedef. On the other hand, if you want a <KBD
CLASS="command"
>Vector</KBD
> <KBD
CLASS="command"
>*</KBD
> to a list of integer-valued scalars, you will have to help SWIG out by providing a typemap.</P
></DD
><DT
CLASS="term"
>Typemaps</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971928-0"
></A
>Not every data type is a simple conversion from Perl to C or vice versa. SWIG (like <EM
CLASS="emphasis"
>xsubpp</EM
>) provides a way for you to write arbitrary transformations, such as converting a Perl array to a 10-by-10 matrix. To write a typemap, you need to know Perl's API for accessing its internal data types, so we'll cover this topic  in the section <A
CLASS="xref"
HREF="ch20_05.htm"
TITLE="SWIG Typemaps"
>"SWIG Typemaps"</A
> in <A
CLASS="xref"
HREF="ch20_01.htm"
TITLE="Perl Internals"
>Chapter 20</A
>. Typemaps can be applied not just to function parameters, but also to structure members and global variables. You can also optionally create named typemaps, which apply to specific named entities (function arguments, variable names, function names), instead of all entities of that type.</P
></DD
><DT
CLASS="term"
>Arrays </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Both simple <A
CLASS="indexterm"
NAME="ch18-idx-971929-0"
></A
>arrays (<KBD
CLASS="command"
>vector[100])</KBD
> and multidimensional arrays (<KBD
CLASS="command"
>vector[10][10]</KBD
>) are mapped to a simple pointer (<KBD
CLASS="command"
>vector</KBD
> <KBD
CLASS="command"
>*</KBD
>). Typemap support for arrays exists, but there are still a number of thorny issues for which SWIG cannot provide a general solution; please read the SWIG documentation for details.</P
></DD
><DT
CLASS="term"
>Structures and C++ classes</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971930-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971930-1"
></A
>SWIG automatically creates accessor functions for each member of a structure or class defined in the interface file. As with the other facilities, these declarations cannot have the full generality of a C structure or a C++ class, but they are powerful enough for handling most common interface issues. </P
></DD
><DT
CLASS="term"
>Methods</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971934-0"
></A
>SWIG provides constructor and destructor procedures, which allow you to allocate and free C structures from Perl space. You can convert basic C structures to objects in Perl space with a primitive called <KBD
CLASS="command"
>%addmethods</KBD
>.</P
></DD
><DT
CLASS="term"
>Ordinary functions</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971931-0"
></A
>SWIG creates function wrappers that look pretty similar to their C equivalents. Each parameter can be optionally typemapped, but since a typemap provides a translation in isolation (from other parameters), the <EM
CLASS="emphasis"
>number</EM
> of parameters cannot be changed. This is not a constraint in XS. </P
><P
CLASS="para"
>In other words, with SWIG you cannot map the C function</P
><PRE
CLASS="programlisting"
>    char ** permute(char *string); // returns permutations of string</PRE
><P
CLASS="para"
>to </P
><PRE
CLASS="programlisting"
>    @array = permute ($str);
</PRE
><P
CLASS="para"
>because one parameter, <KBD
CLASS="command"
>char**</KBD
>, needs conversion to a variable number of scalars (to be assigned to <KBD
CLASS="command"
>@array</KBD
>). You can instead write a typemap to convert the <KBD
CLASS="command"
>char**</KBD
> to an array and <EM
CLASS="emphasis"
>return its reference</EM
>, so in Perl space, it is accessible this way:</P
><PRE
CLASS="programlisting"
>    $rarray = permute ($str);
    print join(' ', @$rarray);
</PRE
><P
CLASS="para"
>Of course, you can always write a wrapper Perl function and insert it in the <I
CLASS="filename"
>.pm</I
> file created automatically by SWIG:</P
><PRE
CLASS="programlisting"
>    sub fancy_permute {
        @{permute($_[0])}; # dereferences array 
    }</PRE
></DD
><DT
CLASS="term"
>Default and optional parameters</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971944-0"
></A
>Parameters can have default values but, as in C++, can be applied only to the rightmost parameters. This is how you specify the function signature in the interface file:</P
><PRE
CLASS="programlisting"
>    draw_mandel (file,width,height,orig_real,orig_imag,range,<B
CLASS="emphasis.bold"
>depth=30</B
>);
</PRE
><P
CLASS="para"
>This allows you to optionally skip the last parameter when calling from Perl.</P
></DD
><DT
CLASS="term"
>Centralized exception handling</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971932-0"
></A
>SWIG provides a <KBD
CLASS="command"
>%except</KBD
> directive to wrap all external library calls inside a generic exception handler. This way you can trap all user-defined errors and C++ exceptions in one central place and translate them into Perl exceptions. Please see the SWIG documentation for examples.</P
></DD
><DT
CLASS="term"
>Shadow classes</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971933-0"
></A
>SWIG optionally creates wrapper Perl code that allows you to access member attributes and functions of C or C++ objects using the Perl hash notation, <KBD
CLASS="command"
>$person-&gt;{age}</KBD
>. This mechanism is built on top of the attribute accessor functions mentioned earlier.</P
></DD
><DT
CLASS="term"
>Nested structures</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971935-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971935-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971935-2"
></A
>An embedded structure gets the same treatment as an outermost structure&nbsp;- accessor functions and support from shadow classes. </P
></DD
></DL
><P
CLASS="para"
>The following interface file shows an example of using classes, accessing methods, and creating shadow classes:</P
><PRE
CLASS="programlisting"
>%module Graphics

class Shape {
public:
    int x, y; // origin
    int w, h; // width, ht (defines bounding area)
    draw();
};
class Polygon : public Shape {
public:
    Polygon(int x, int y, int w, int h);
    draw();
};</PRE
><P
CLASS="para"
>We invoke SWIG with the <KBD
CLASS="command"
>-c++</KBD
> option, since it is not enabled by default, and the <KBD
CLASS="command"
>-shadow</KBD
> option for creating shadow classes: </P
><PRE
CLASS="programlisting"
>%<B
CLASS="emphasis.bold"
> swig -c++ -shadow Graphics.i</B
></PRE
><P
CLASS="para"
>SWIG sets up an identical inheritance hierarchy in script space, and using this class in Perl feels completely natural:</P
><PRE
CLASS="programlisting"
>use Graphics;
$poly = new Polygon(10, 10, 30, 40);
printf &quot;Origin: %d %d \n&quot;, $poly-&gt;{x}, poly-&gt;{y};
$poly-&gt;draw();</PRE
><P
CLASS="para"
>You'll be happy to know that SWIG properly handles the relationship between base classes and derived classes. For example, a function involving a base class will recognize pointers that have been blessed into a derived class. In the case of multiple inheritance, SWIG performs proper C++ type-casting to make sure the pointer values are correct. XS has no such feature.</P
><P
CLASS="para"
>While the shadow class feature is convenient, you should be aware that for every instance generated using <KBD
CLASS="command"
>new</KBD
>, an additional object is created internally. The reason is that to support the member access notation (<KBD
CLASS="command"
>$poly-&gt;{x}</KBD
>), <KBD
CLASS="command"
>new</KBD
> returns a tied hash, whose <KBD
CLASS="command"
>FETCH</KBD
> subroutine calls the appropriate accessor function. You know by now that the tie facility interposes an intermediate object.<A
CLASS="indexterm"
NAME="ch18-idx-971924-0"
></A
></P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_02.htm"
TITLE="18.2 Example: Fractals with Perl"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.2 Example: Fractals with Perl"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_04.htm"
TITLE="18.4 XS Features"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.4 XS Features"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>18.2 Example: Fractals with Perl</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>18.4 XS Features</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
