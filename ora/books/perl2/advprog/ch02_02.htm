<HTML
><HEAD
>
<TITLE>2.2 Example: Matrices (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:30:41Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Implementing Complex Data Structures"><LINK
REL="prev"
HREF="ch02_01.htm"
TITLE="2.1 User-Defined Structures"><LINK
REL="next"
HREF="ch02_03.htm"
TITLE="2.3 Professors, Students, Courses"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_01.htm"
TITLE="2.1 User-Defined Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.1 User-Defined Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Implementing Complex Data Structures"
>Chapter 2<BR>Implementing Complex Data Structures</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_03.htm"
TITLE="2.3 Professors, Students, Courses"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.3 Professors, Students, Courses"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-18651"
>2.2 Example: Matrices</A
></H2
><P
CLASS="para"
><EM
CLASS="emphasis"
></EM
><A
CLASS="indexterm"
NAME="ch02-idx-949516-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-949516-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-949516-2"
></A
>Before we embark on this example, you must know that if you really want a good efficient implementation of matrices, you should check out the <A
CLASS="indexterm"
NAME="ch02-idx-949520-0"
></A
>PDL module (Perl Data Language) from CPAN.</P
><P
CLASS="para"
>To gain a better understanding of different matrix representations, we will write routines to construct these structures from a data file and to multiply two matrices. The file is formatted as follows:</P
><PRE
CLASS="programlisting"
>MAT1
1  2  4
10 30 0

MAT2
5  6 
1  10</PRE
><P
CLASS="para"
>Each matrix has a label and some data. We use these labels to create global variables with the corresponding names (<KBD
CLASS="command"
>@MAT1</KBD
> and <KBD
CLASS="command"
>@MAT2</KBD
>).</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-949521-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-949521-1"
></A
>An array of arrays is the most intuitive representation for a matrix in Perl, since there is no direct support for two-dimensional arrays: </P
><PRE
CLASS="programlisting"
>@matrix = (
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
); 
# Change 6, the element at row  1, column 2 to 100
$matrix[1][2] = 100;</PRE
><P
CLASS="para"
>Note that <KBD
CLASS="command"
>@matrix</KBD
> is a simple array whose elements happen to be references to anonymous arrays. Further, recall that <KBD
CLASS="command"
>$matrix[1][2]</KBD
> is a simpler way of saying <KBD
CLASS="command"
>$matrix[1]-&gt;[2]</KBD
>.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch02_02.htm"
TITLE="Reading a Matrix from a File"
>Example 2.1</A
> reads the file and creates the array of arrays structure for each matrix. Pay particular attention to the <KBD
CLASS="command"
>push</KBD
> statement (highlighted); it uses the symbolic reference facility to create variables (<KBD
CLASS="command"
>@{$matrix_name}</KBD
>) and appends a reference to a new row in every iteration. We are assured of newly allocated rows in every iteration because <KBD
CLASS="command"
>@row</KBD
> is local to that block, and when the <KBD
CLASS="command"
>if</KBD
> statement is done, its contents live on because we squirrel away a reference to the array's value. (Recall that it is the value that is reference counted, not the name.) </P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch02-35403"
>Example 2.1: Reading a Matrix from a File</A
></H4
><PRE
CLASS="programlisting"
>sub matrix_read_file {
    my ($filename) = @_;
    open (F, $filename) || die &quot;Could not open $filename: $!&quot;;
    while ($line = &lt;F&gt;) {
        chomp($line);
        next if $line =~ /^\s*$/; # skip blank lines
        if ($line =~ /^([A-Za-z]\w*)/) {
            $matrix_name = $1;
        } else {
            <B
CLASS="emphasis.bold"
>my (@row)</B
> = split (/\s+/, $line);
            <B
CLASS="emphasis.bold"
>push (@{$matrix_name}, \@row;) </B
># insert the row-array into
                                           # the outer matrix array
        }
    }
    close(F);
}</PRE
></DIV
><P
CLASS="para"
>Now let us use this array-of-arrays structure to multiply two matrices. In case you have forgotten how matrix multiplication works, the product of two matrices <B
CLASS="emphasis.bold"
>A</B
><SUB
CLASS="subscript"
>mn</SUB
> (<EM
CLASS="emphasis"
>m</EM
> rows, <EM
CLASS="emphasis"
>n</EM
> columns) and <B
CLASS="emphasis.bold"
>B</B
><SUB
CLASS="subscript"
>np</SUB
> is defined as</P
><IMG
CLASS="graphic"
SRC="figs/eqn02_01.gif"
ALT="Equation 2.1"><P
CLASS="para"
>The element (i, j) of the matrix product is the sum of successive pairs of elements taken from the <EM
CLASS="emphasis"
>i</EM
><SUB
CLASS="subscript"
>th</SUB
> row of <B
CLASS="emphasis.bold"
>A</B
> and the <EM
CLASS="emphasis"
>j</EM
><SUB
CLASS="subscript"
>th</SUB
> column of <B
CLASS="emphasis.bold"
>B</B
>. Translated into Perl, it looks like <A
CLASS="xref"
HREF="ch02_02.htm"
TITLE="Matrix Multiply"
>Example 2.2</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch02-13383"
>Example 2.2: Matrix Multiply</A
></H4
><PRE
CLASS="programlisting"
>sub matrix_multiply {
    my ($r_mat1, $r_mat2) = @_;       # Taking matrices by reference
    my ($r_product);                  # Returing product by reference
    my ($r1, $c1) = matrix_count_rows_cols ($r_mat1);
    my ($r2, $c2) = matrix_count_rows_cols ($r_mat2);
    die &quot;Matrix 1 has $c1 columns and matrix 2 has $r2 rows.&quot; 
         . &quot; Cannot multiply\n&quot; unless ($c1 == $r2);
    for ($i = 0; $i &lt; $r1; $i++) {
        for ($j = 0; $j &lt; $c2; $j++) {
            $sum = 0;
            for ($k = 0; $k &lt; $c1; $k++) {
                $sum += <B
CLASS="emphasis.bold"
>$r_mat1-&gt;[$i][$k]</B
> * $r_mat2-&gt;[$k][$j];
            }
            $r_product-&gt;[$i][$j] = $sum; 
        }
    }
    $r_product;
}
       
sub matrix_count_rows_cols {  # return number of rows and columns
    my ($r_mat)  = @_;
    my $num_rows = <B
CLASS="emphasis.bold"
>@$r_mat</B
>;
    my $num_cols = <B
CLASS="emphasis.bold"
>@{$r_mat-&gt;[0]}</B
>; # Assume all rows have an equal no.
                                   # of columns. 
    ($num_rows, $num_cols); 
}</PRE
></DIV
><P
CLASS="para"
><CODE
CLASS="literal"
>matrix_multiply</CODE
> takes two matrices by reference. A single element is obtained as <KBD
CLASS="command"
>$r_mat-&gt;[$i][$j]</KBD
>, and a single row is obtained as <KBD
CLASS="command"
>$r_mat-&gt;[0]</KBD
>.<A
CLASS="indexterm"
NAME="ch02-idx-949526-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-949526-1"
></A
></P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-pgfId-946158"
>2.2.1 Hash of Hashes Representation</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-949524-0"
></A
>If the matrix is large and sparse (only a few elements have nonzero values), a hash of hashes is likely a more space-efficient representation. For example, the matrix </P
><IMG
CLASS="graphic"
SRC="figs/eqn02_02.gif"
ALT="Equation 2.2"><P
CLASS="para"
>can be built like this:</P
><PRE
CLASS="programlisting"
>$matrix{0}{2} = 100;
$matrix{1}{0} = 200;
$matrix{2}{1} = 300;</PRE
><P
CLASS="para"
>The code above creates a hash table, <KBD
CLASS="command"
>%matrix</KBD
>, which maps a row number to a nested hash. Only rows with nonzero elements are represented. Each nested hash maps a column number to the actual value of the element at that row and column. Again, only columns with nonzero values in that row are represented. Of course, we have to store the total number of rows and columns separately, since unlike the array representation, these numbers are not implicit. Since <KBD
CLASS="command"
>%matrix</KBD
> is a hash, they can be stored as <KBD
CLASS="command"
>$matrix{rows}</KBD
> and <KBD
CLASS="command"
>$matrix{cols}</KBD
>. Because hash indices are strings, this approach is efficient only if the matrix is large and sparse. </P
><P
CLASS="para"
>To make the matrix routines developed in the previous section work for this new representation, it might seem a simple matter to convert all square brackets to braces. True, it'll work, but there's a subtle problem. Let's say that the entire third row of a matrix is zero-valued (so there's no entry for <KBD
CLASS="command"
>$r_mat-&gt;{2}</KBD
>). Now, if you do this:</P
><PRE
CLASS="programlisting"
>$element = $r_mat-&gt;{2}{3}; </PRE
><P
CLASS="para"
>Perl automatically creates an entry for <KBD
CLASS="command"
>$r_mat-&gt;{2}</KBD
>, and hangs a hash reference off this entry. (The nested hash table is not created.) Thus the very act of examining an element gobbles up space, which is what we had hoped to avoid in the first place when we chose the hash of hashes representation. To prevent this, we have to check for the presence of a hash element with <KBD
CLASS="command"
>exists</KBD
> before retrieving it, as shown next:</P
><PRE
CLASS="programlisting"
>if ((exists $r_mat-&gt;{$row}) &amp;&amp; (exists $r_mat-&gt;{$row}{$col})) {<A
CLASS="indexterm"
NAME="ch02-idx-949529-0"
></A
>
   ....</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-pgfId-946217"
>2.2.2 Other Matrix Representations</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-949531-0"
></A
>If the columns are sparse but the rows are well represented, you could choose an array of hashes structure. It is possible to store a matrix even more economically in terms of space, using a single hash table, at the expense of more complex code. If you imagine the matrix as a grid and number each cell of the grid consecutively, any cell can then be identified with exactly one unique number. So in a matrix with 10 rows and 5 columns, the element (8, 4) will have the number 38 (7 * 5 + 3) and hence can be referred to as <KBD
CLASS="command"
>$r_mat-&gt;{38}</KBD
>. We actually use this scheme in <A
CLASS="xref"
HREF="ch15_01.htm"
TITLE="GUI Example: Tetris"
>Chapter 15, <CITE
CLASS="chapter"
>GUI Example: Tetris</CITE
></A
> (though that usage is more for convenience than for saving space). The choice of data structure depends on the size of the matrices, performance, and coding convenience. </P
><P
CLASS="para"
>Changing the data structure of a program clearly ends up changing all code that depends on it. To contain the amount of changes required (should the structure change), it is always a good idea to have only a small set of procedures that know the structure. For example, if you had procedures such as <CODE
CLASS="literal"
>create_matrix(  )</CODE
>, <CODE
CLASS="literal"
>get_element(mat,i,j)</CODE
>, and <CODE
CLASS="literal"
>set_element(mat,i,j)</CODE
>, other procedures do not have to know the internal representation. Coding for change is often better than coding for run-time efficiency. We'll discuss this approach a great deal more in <A
CLASS="xref"
HREF="ch07_01.htm"
TITLE="Object-Oriented Programming"
>Chapter 7</A
>.<EM
CLASS="emphasis"
></EM
><A
CLASS="indexterm"
NAME="ch02-idx-949512-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-949512-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-949512-2"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_01.htm"
TITLE="2.1 User-Defined Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.1 User-Defined Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_03.htm"
TITLE="2.3 Professors, Students, Courses"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.3 Professors, Students, Courses"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.1 User-Defined Structures</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.3 Professors, Students, Courses</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
