<HTML
><HEAD
>
<TITLE>10.3 Record-Oriented Approach (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:33Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. Persistence"><LINK
REL="prev"
HREF="ch10_02.htm"
TITLE="10.2 Streamed Data"><LINK
REL="next"
HREF="ch10_04.htm"
TITLE="10.4 Relational Databases"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_02.htm"
TITLE="10.2 Streamed Data"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.2 Streamed Data"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch10_01.htm"
TITLE="10. Persistence"
>Chapter 10<BR>Persistence</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_04.htm"
TITLE="10.4 Relational Databases"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.4 Relational Databases"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch10-39949"
>10.3 Record-Oriented Approach</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-982615-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-982615-1"
></A
>In this section, we will study three modules that essentially depend on the DBM library. DBM is a disk-based hash table, originally written by Ken <A
CLASS="indexterm"
NAME="ch10-idx-982629-0"
></A
>Thompson for the Seventh Edition Unix system. This library has since spawned many variants: SDBM (Simple DBM, a public-domain module bundled with Perl), NDBM (New DBM, which is packaged with some operating systems), and GDBM (from the Free Software Foundation). All these libraries can be accessed from equivalent Perl modules, which use Perl's <KBD
CLASS="command"
>tie</KBD
> facility to provide transparent access to the disk-based table. Performance and portability are the only criteria for selecting one of these systems. Be warned that the files produced by these approaches are not interchangeable.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-979759"
>10.3.1 DBM</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-982626-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-982626-1"
></A
>We use SDBM here, because it is bundled with Perl. The <A
CLASS="indexterm"
NAME="ch10-idx-982614-0"
></A
>SDBM_File module provides a wrapper over this extension:</P
><PRE
CLASS="programlisting"
>use Fcntl;
use SDBM_File;
tie (%capital, 'SDBM_File', 'capitals.dat', O_RDWR|O_CREAT, 0666) 
     || die $!;
$capital{USA}      = &quot;Washington D.C.&quot;;
$capital{Colombia} = &quot;Bogota&quot;;
untie %capital;</PRE
><P
CLASS="para"
>The <KBD
CLASS="command"
>tie</KBD
> statement associates the in-memory hash variable, <KBD
CLASS="command"
>%capital</KBD
>, with the disk-based hash file, <I
CLASS="filename"
>capitals.dat</I
>. Read and write accesses to <KBD
CLASS="command"
>%capital</KBD
> are automatically translated to corresponding accesses to the file. <KBD
CLASS="command"
>untie</KBD
> breaks this association and flushes any pending changes to the disk. <KBD
CLASS="command"
>O_RDWR</KBD
> and <KBD
CLASS="command"
>O_CREAT</KBD
>, "constants" imported from <KBD
CLASS="command"
>Fcntl</KBD
>, specify that <I
CLASS="filename"
>capitals.dat</I
> is to be opened for reading and writing, and to create it if it doesn't exist. The file's mode (bitmask for access privileges) is set to the 0644 in this case&nbsp;- the result of 0666 &amp; ~022, where 022 is the umask. </P
><P
CLASS="para"
>The biggest problem with the DBM approaches mentioned earlier is that the value in a tied key-value pair has to be a string or number; if it is a reference, these modules do not dereference it automatically. So to associate a key with a complex data structure, you must serialize the structure using Data::Dumper or Freeze-Thaw, which is exactly what is done by MLDBM, described next.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-977111"
>10.3.2 MLDBM</A
></H3
><P
CLASS="para"
>Gurusamy <A
CLASS="indexterm"
NAME="ch10-idx-982628-0"
></A
>Sarathy's <A
CLASS="indexterm"
NAME="ch10-idx-982627-0"
></A
>MLDBM (multilevel DBM) stores complex values in a DBM file. It uses Data::Dumper to serialize any data structures, and uses a DBM module of your choice (SDBM_File is used by default) to send it to disk. This is how it is used:</P
><PRE
CLASS="programlisting"
>use SDBM_File;
use MLDBM qw (SDBM_File); 
use Fcntl;
tie (%h, 'MLDBM', 'bar', O_CREAT|O_RDWR, 0666) || die $!;
$sample   = {'burnt' =&gt; 'umber', 'brownian' =&gt; 'motion'} ;
$h{pairs} = $sample;   # Creating a disk-based hash of hashes
untie %h;</PRE
><P
CLASS="para"
>All parameters to <KBD
CLASS="command"
>tie</KBD
> following the string "MLDBM" are simply passed to the module specified in the <KBD
CLASS="command"
>use</KBD
> statement. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-977293"
>10.3.3 Berkeley DB</A
></H3
><P
CLASS="para"
>DB [<A
CLASS="xref"
HREF="ch10_05.htm"
TITLE=""
>5</A
>]&nbsp;- also referred to as <I
CLASS="firstterm"
>Berkeley DB</I
><A
CLASS="indexterm"
NAME="ch10-idx-982630-0"
></A
>&nbsp;- is a public-domain C library of database access methods, including B+Tree, Extended Linear Hashing, and fixed/variable length records. The latest release also supports concurrent updates, transactions, and recovery. The corresponding Perl module, <A
CLASS="indexterm"
NAME="ch10-idx-982634-0"
></A
>DB_File, puts a DBM wrapper around the B-tree and hashing implementations, and a tied array wrapper over the fixed/variable length record (also known as the <KBD
CLASS="command"
>recno</KBD
> access method).</P
><P
CLASS="para"
>The DBM usage is identical to the ones shown in the preceding sections. The <KBD
CLASS="command"
>tie</KBD
> statement is as follows:</P
><PRE
CLASS="programlisting"
>use DB_File;
use Fcntl;    # For the constants O_RDWR and O_CREAT
tie (%h, 'DB_File', $file, O_RDWR|O_CREAT, 0666, $DB_BTREE);</PRE
><P
CLASS="para"
>The <KBD
CLASS="command"
>$DB_BTREE</KBD
> constant tells the library to use the btree format, allowing the key-value pairs to be stored in a sorted, balanced multiway tree; that is, the keys are stored in lexical order. You can also specify your custom sorting subroutine like this:</P
><PRE
CLASS="programlisting"
>$DB_BTREE-&gt;{'compare'} = \&amp;sort_ignorecase;
sub sort_ignorecase {
    my ($key1, $key2) = @_;
    $key1 =~ s/\s*//g;          # Get rid of white space
    $key2 =~ s/\s*//g;
    lc($key1) cmp lc($key2);    # Ignore case when comparing
}</PRE
><P
CLASS="para"
>Now, when you use <KBD
CLASS="command"
>keys</KBD
>, <KBD
CLASS="command"
>values</KBD
>, or <KBD
CLASS="command"
>each</KBD
> to retrieve data from the tied hash, you get them in your custom sorted order. An ordinary hash and the other DBM modules do not give you this facility. </P
><P
CLASS="para"
>You can use <KBD
CLASS="command"
>$DB_RECNO</KBD
> instead of <KBD
CLASS="command"
>$DB_BTREE</KBD
>, which uses <KBD
CLASS="command"
>TIEARRAY</KBD
> to treat a file as a collection of variable-length records:</P
><PRE
CLASS="programlisting"
>use Fcntl;
use DB_File;
tie (@l, 'DB_File', 'foo.txt', O_RDWR|O_CREAT,0666, $DB_RECNO);
print $l[1];                    # Retrieve second line
$l[3] = 'Three musketeers';     # Modify fourth line
untie @l;</PRE
><P
CLASS="para"
>As was mentioned in <A
CLASS="xref"
HREF="ch09_01.htm"
TITLE="Tie"
>Chapter 9, <CITE
CLASS="chapter"
>Tie</CITE
></A
>, the current <KBD
CLASS="command"
>TIEARRAY</KBD
> implementation allows only array indexing; operators like <KBD
CLASS="command"
>push</KBD
> and <KBD
CLASS="command"
>splice</KBD
> are not supported. The DB_File module provides extra methods called <KBD
CLASS="command"
>push</KBD
>, <KBD
CLASS="command"
>pop</KBD
>, <KBD
CLASS="command"
>shift</KBD
>, <KBD
CLASS="command"
>unshift</KBD
>, and <KBD
CLASS="command"
>length</KBD
>, which can be used like this:</P
><PRE
CLASS="programlisting"
>$db = tied @l;<I
CLASS="firstterm"
></I
><A
CLASS="indexterm"
NAME="ch10-idx-982632-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-982632-1"
></A
>
$db-&gt;push($x);<A
CLASS="indexterm"
NAME="ch10-idx-982621-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-982621-1"
></A
></PRE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_02.htm"
TITLE="10.2 Streamed Data"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.2 Streamed Data"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_04.htm"
TITLE="10.4 Relational Databases"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.4 Relational Databases"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.2 Streamed Data</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>10.4 Relational Databases</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
