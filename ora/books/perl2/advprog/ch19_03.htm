<HTML
><HEAD
>
<TITLE>19.3 Examples (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:39Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch19_01.htm"
TITLE="19. Embedding Perl:The Easy Way"><LINK
REL="prev"
HREF="ch19_02.htm"
TITLE="19.2 Embedding Overview"><LINK
REL="next"
HREF="ch19_04.htm"
TITLE="19.4 Adding Extensions"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_02.htm"
TITLE="19.2 Embedding Overview"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.2 Embedding Overview"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch19_01.htm"
TITLE="19. Embedding Perl:The Easy Way"
>Chapter 19<BR>Embedding Perl:The Easy Way</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_04.htm"
TITLE="19.4 Adding Extensions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.4 Adding Extensions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch19-24581"
>19.3 Examples</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-969760-0"
></A
>Let us now write some code to see this API in action. Suppose you have a Perl script, <EM
CLASS="emphasis"
>search.pl</EM
>, containing subroutine <KBD
CLASS="command"
>search_files</KBD
><A
CLASS="indexterm"
NAME="ch19-idx-969768-0"
></A
>, defined in <A
CLASS="xref"
HREF="ch19_03.htm"
TITLE="search.pl"
>Example 19.1</A
>. </P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch19-11898"
>Example 19.1: search.pl</A
></H4
><PRE
CLASS="programlisting"
># search_files - a simple grep. Called as ...
#    search_files (&quot;struct&quot;, &quot;*.h&quot;)
sub search_files {
    my ($pattern, $filepattern) = @_;
    local (@ARGV) = glob($filepattern);
    return unless (@ARGV);
    while (&lt;&gt;) {       # Can do this because @ARGV has been primed
        if (/$pattern/o) {
            print &quot;$ARGV\[$.\]: $_&quot;; # File, line number, match line
        }
    }
}</PRE
></DIV
><P
CLASS="para"
><KBD
CLASS="command"
>search_files</KBD
> takes two string parameters and returns nothing. There are several ways of calling this procedure from C. Let's start with <KBD
CLASS="command"
>perl_call_argv()</KBD
><A
CLASS="indexterm"
NAME="ch19-idx-969774-0"
></A
>, since it takes string arguments. The piece of code in <A
CLASS="xref"
HREF="ch19_03.htm"
TITLE="ex.c: Embedding Perl"
>Example 19.2</A
> searches for the word "struct" in all C header files.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch19-25878"
>Example 19.2: ex.c: Embedding Perl</A
></H4
><PRE
CLASS="programlisting"
>#include &lt;EXTERN.h&gt;
#include &lt;perl.h&gt;
static PerlInterpreter *my_perl;  
main(int argc, char **argv, char **env) {
<B
CLASS="emphasis.bold"
>    char *my_argv[] = {&quot;struct&quot;, &quot;*.h&quot;, NULL};</B
>
    my_perl = perl_alloc();
    perl_construct(my_perl);
    perl_parse(my_perl, NULL, argc, argv, env);

    <B
CLASS="emphasis.bold"
>perl_call_argv(&quot;search_files&quot;, G_DISCARD, my_argv);</B
>

perl_destruct(my_perl);
perl_free(my_perl);
}</PRE
></DIV
><P
CLASS="para"
>By passing <KBD
CLASS="command"
>NULL</KBD
> instead of <KBD
CLASS="command"
>xs_init</KBD
>, we indicate to <KBD
CLASS="command"
>perl_parse</KBD
><A
CLASS="indexterm"
NAME="ch19-idx-969783-0"
></A
> that we are not interested in loading any extensions. In addition, instead of calling <KBD
CLASS="command"
>perl_run</KBD
>, we call <KBD
CLASS="command"
>search_files</KBD
> using <KBD
CLASS="command"
>perl_call_argv</KBD
> (with the <KBD
CLASS="command"
>G_DISCARD</KBD
> flag to tell it to discard all returned results). This is how I compile and link this code on a Linux box:[<A
CLASS="footnote"
HREF="#ch19-pgfId-968633"
>3</A
>]<PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>% </B
>gcc -o ex -I/usr/local/lib/perl5/i586-linux/5.004/CORE \
            -L/usr/local/lib/perl5/i586-linux/5.004/CORE \
            -Dbool=char -DHAS_BOOL                       \
         ex.c -lperl -lm</PRE
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch19-pgfId-968633"
>[3]</A
> You don't have to remember or look up the include and library directory paths. The last section in this chapter discusses a module called ExtUtils::Embed that makes creating embedded interpreters a snap.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>We have created our first custom Perl interpreter. Since <CODE
CLASS="literal"
>perl_parse</CODE
> is given all the command-line arguments, <I
CLASS="filename"
>ex</I
> can be invoked just like Perl, as shown:</P
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>% ex search.pl</B
></PRE
><P
CLASS="para"
>This outputs something like this (when invoked in the Perl source directory):</P
><PRE
CLASS="programlisting"
>av.h[10]: struct xpvav {
cop.h[58]: struct cop {
cop.h[60]:     char *   cop_label;      /* label for this construct */
cop.h[75]: struct block_sub {
cop.h[98]:      { struct block_sub cxsub;
...</PRE
><P
CLASS="para"
>We need to give the name of the script as an argument because <KBD
CLASS="command"
>perl_parse</KBD
> is given the command-line arguments untranslated.</P
><P
CLASS="para"
>Instead of using <KBD
CLASS="command"
>perl_call_argv</KBD
>, we could have used the other two calls instead, as follows:</P
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="ch19-idx-969784-0"
></A
>perl_eval_va(&quot;search_files (qw(struct *.h))&quot;,
              NULL);           // No return parameters </PRE
><P
CLASS="para"
>or</P
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="ch19-idx-969785-0"
></A
>perl_call_va (&quot;search_files&quot;, 
              &quot;s&quot;, &quot;struct&quot;,    // First parameter of type string
              &quot;s&quot;, &quot;*.h&quot;,       // Second parameter also of type string
              NULL);</PRE
><P
CLASS="para"
>Clearly, the <KBD
CLASS="command"
>perl_eval_va</KBD
> approach is the easiest of the lot in this particular example. Incidentally, did you notice how we used the <KBD
CLASS="command"
>qw</KBD
> operator to avoid embedded quotes?</P
><P
CLASS="para"
>Let us now take a look at another small example that requires us to pass in a mixture of parameter types. This time we call a Perl subroutine, <KBD
CLASS="command"
>nice_number</KBD
>, to insert commas into big numbers (1000000 is formatted as "1,000,000"). The subroutine, shown below, interposes a comma whenever it sees a group of four consecutive digits, and continues to do so until it no longer matches this pattern. To test this subroutine, we use an additional subroutine called <KBD
CLASS="command"
>test_nice</KBD
>, which, given a number <EM
CLASS="emphasis"
>n</EM
>, generates an <EM
CLASS="emphasis"
>n</EM
>-digit number composed of 1's and feeds it to nice_number:</P
><PRE
CLASS="programlisting"
>sub nice_number {
    my $num = shift;
    1 while ($num =~ s/(.*\d)(\d\d\d)/$1,$2/g);
    $num;
}
sub test_nice {                   # test_nice(4) produces 1,111
    my $len = shift; 
    nice_number(1 x $len);
}</PRE
><P
CLASS="para"
>Instead of putting this code into a file and parsing it using <KBD
CLASS="command"
>perl_parse</KBD
> (as we did earlier), we use <KBD
CLASS="command"
>perl_eval_va</KBD
> to parse and load this subroutine. It so happens that <KBD
CLASS="command"
>perl_parse</KBD
> does some crucial initializations, so we <EM
CLASS="emphasis"
>have</EM
> to call it.[<A
CLASS="footnote"
HREF="#ch19-pgfId-966014"
>4</A
>] If we give it a null <KBD
CLASS="command"
>argc</KBD
>/<KBD
CLASS="command"
>argv</KBD
> array, it has the unfortunate property of waiting on standard input, as you normally expect Perl to do. For this reason, we give it the shortest possible script that compiles cleanly and doesn't take any time to finish, as shown in the following command line:<PRE
CLASS="programlisting"
>perl -e 0</PRE
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch19-pgfId-966014"
>[4]</A
> In fact, <KBD
CLASS="command"
>perl_parse</KBD
> should be called at most once, because it reinitializes the interpreter without checking that it has already been done.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>The only way to have a shorter script is to reduce the font size! Note the call to <KBD
CLASS="command"
>perl_parse</KBD
> in <A
CLASS="xref"
HREF="ch19_03.htm"
TITLE="ex2.c: Embedding Perl"
>Example 19.3</A
>. </P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch19-26409"
>Example 19.3: ex2.c: Embedding Perl</A
></H4
><PRE
CLASS="programlisting"
>#include &lt;EXTERN.h&gt;
#include &lt;perl.h&gt;
static PerlInterpreter *my_perl;  
main() {
    static char *dummy_argv[] = {&quot;&quot;,&quot;-e&quot;,&quot;0&quot;}; int num;
    my_perl = perl_alloc();
    perl_construct(my_perl);

    perl_parse(my_perl, NULL, 3, dummy_argv, env);

    if (perl_eval_va (                         # define code inline
                  &quot;sub main::nice_number {&quot;
                      &quot;my $num = shift;&quot;
                      &quot;1 while ($num =~ s/(.*\\d)(\\d\\d\\d)/$1,$2/g);&quot;
                      &quot;$num;&quot;
                 &quot;}&quot;
                 &quot;sub main::test_nice {&quot;
                     &quot;my $num = shift;&quot;
                     &quot;nice_number (1 x $num);&quot;
                 &quot;}&quot;, 
                 NULL ) == -1) {
            fprintf (stderr, &quot;Eval unsuccessful. Aborted\n&quot;);
            exit(1);
    }
    # Subroutines defined. Now call test_nice
    for (num = 1; num &lt;= 7; num++) {
        char buf[20];
        *buf = '\0';
        perl_call_va (&quot;test_nice&quot;,
                      &quot;i&quot;,  num,        /* Input parameters */
                      &quot;OUT&quot;,
                      &quot;s&quot;,  buf,        /* Output parameter */
                      NULL);            /* Don't forget this! */
        printf (&quot;%d: %s\n&quot;, num, buf);
    }
    perl_close();
}</PRE
></DIV
><P
CLASS="para"
>This prints</P
><PRE
CLASS="programlisting"
>1: 1
2: 11
3: 111
4: 1,111
5: 11,111
6: 111,111<KBD
CLASS="command"
></KBD
><A
CLASS="indexterm"
NAME="ch19-idx-969771-0"
></A
>
7: 1,111,111<A
CLASS="indexterm"
NAME="ch19-idx-969763-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-969763-1"
></A
></PRE
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_02.htm"
TITLE="19.2 Embedding Overview"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.2 Embedding Overview"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_04.htm"
TITLE="19.4 Adding Extensions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.4 Adding Extensions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>19.2 Embedding Overview</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>19.4 Adding Extensions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
