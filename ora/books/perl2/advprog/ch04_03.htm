<HTML
><HEAD
>
<TITLE>4.3 Closures (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:31:47Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Subroutine References and Closures"><LINK
REL="prev"
HREF="ch04_02.htm"
TITLE="4.2 Using Subroutine References"><LINK
REL="next"
HREF="ch04_04.htm"
TITLE="4.4 Using Closures"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm"
TITLE="4.2 Using Subroutine References"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2 Using Subroutine References"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Subroutine References and Closures"
>Chapter 4<BR>Subroutine References and Closures</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_04.htm"
TITLE="4.4 Using Closures"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.4 Using Closures"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-36100"
>4.3 Closures</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch04-idx-950834-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-950834-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-950834-2"
></A
>Instead of returning <EM
CLASS="emphasis"
>data</EM
>, a Perl subroutine can return a reference to a <EM
CLASS="emphasis"
>subroutine</EM
>. This is really no different from any other ways of passing subroutine references around, except for a somewhat hidden feature involving anonymous subroutines and lexical (<KBD
CLASS="command"
>my</KBD
>) variables. Consider</P
><PRE
CLASS="programlisting"
>$greeting = &quot;hello world&quot;;
$rs = sub {
    print $greeting;
};
&amp;$rs();  #prints &quot;hello world&quot;</PRE
><P
CLASS="para"
>In this example, the anonymous subroutine makes use of the global variable <KBD
CLASS="command"
>$greeting</KBD
>. No surprises here, right? Now, let's modify this innocuous example slightly:</P
><PRE
CLASS="programlisting"
>sub generate_greeting {
    my($greeting) = &quot;hello world&quot;;
    return sub {print $greeting};
}
$rs = generate_greeting();
&amp;$rs(); # Prints &quot;hello world&quot;</PRE
><P
CLASS="para"
>The <KBD
CLASS="command"
>generate_greeting</KBD
> subroutine returns the reference to an anonymous subroutine, which in turn prints <KBD
CLASS="command"
>$greeting</KBD
>. The curious thing is that <KBD
CLASS="command"
>$greeting</KBD
> is a <KBD
CLASS="command"
>my</KBD
> variable that belongs to <KBD
CLASS="command"
>generate_greeting</KBD
>. Once <KBD
CLASS="command"
>generate_greeting</KBD
> finishes executing, you would expect all its local variables to be destroyed. But when you invoke the anonymous subroutine later on, using <KBD
CLASS="command"
>&amp;$rs()</KBD
>, it manages to still print <KBD
CLASS="command"
>$greeting</KBD
>. How does it work?</P
><P
CLASS="para"
>Any other expression in place of the anonymous subroutine definition would have used <KBD
CLASS="command"
>$greeting</KBD
> right away. A subroutine block, on the other hand, is a package of code to be invoked at a <EM
CLASS="emphasis"
>later</EM
> time, so it keeps track of all the variables it is going to need later on (taking them "to go," in a manner of speaking). When this subroutine is called subsequently and invokes <KBD
CLASS="command"
>print</KBD
> &quot;<KBD
CLASS="command"
>$greeting&quot;</KBD
>, the subroutine remembers the value that <KBD
CLASS="command"
>$greeting</KBD
> had when that subroutine was <EM
CLASS="emphasis"
>created</EM
>. </P
><P
CLASS="para"
>Let's modify this a bit more to really understand what this idiom is capable of:</P
><PRE
CLASS="programlisting"
>sub generate_greeting {
    my($greeting) = @_;     # $greeting primed by arguments
    return sub {
                 my($subject)= @_;
                 print &quot;$greeting $subject \n&quot;;
           };
}
$rs1 = generate_greeting(&quot;hello&quot;);
$rs2 = generate_greeting(&quot;my fair&quot;);

# $rs1 and $rs2 are two subroutines holding on to different $greeting's
&amp;$rs1 (&quot;world&quot;) ;  # prints &quot;hello world&quot;
&amp;$rs2 (&quot;lady&quot;) ;   # prints &quot;my fair lady&quot;</PRE
><P
CLASS="para"
>Instead of hardcoding <KBD
CLASS="command"
>$greeting</KBD
>, we get it from <KBD
CLASS="command"
>generate_greeting</KBD
>'s arguments. When <KBD
CLASS="command"
>generate_greeting</KBD
> is called the first time, the anonymous subroutine that it returns holds onto <KBD
CLASS="command"
>$greeting</KBD
>'s value. Hence the subroutine referred to by <KBD
CLASS="command"
>$rs1</KBD
> behaves somewhat like this:</P
><PRE
CLASS="programlisting"
>$rs1 = sub { 
    my ($subject) = @_;
    my $greeting = &quot;hello&quot;;
    print &quot;$greeting $subject\n&quot;;   # $greeting's value is &quot;hello&quot;
}</PRE
><P
CLASS="para"
>The subroutine is known as a <EM
CLASS="emphasis"
>closure</EM
> (the term comes from the LISP world). As you can see, it captures <KBD
CLASS="command"
>$greeting</KBD
>'s value, and when it is invoked later on, it needs only one parameter. </P
><P
CLASS="para"
>Like some immigrants to a country who retain the culture and customs of the place in which they are born, closures are subroutines that package all the variables they need from the scope in which they are created. </P
><P
CLASS="para"
>As it happens, Perl creates closures only over lexical (<KBD
CLASS="command"
>my</KBD
>) variables and not over global or localized (tagged with <KBD
CLASS="command"
>local</KBD
>) variables. Let's take a peek under the covers to understand why this is so.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-944893"
>4.3.1 Closures, Behind the Scenes</A
></H3
><P
CLASS="para"
>If you are not interested in the details of how closures work, you can safely go on to the next section without loss of continuity.</P
><P
CLASS="para"
>Recall that the name of a variable and its value are separate entities. When it first sees <KBD
CLASS="command"
>$greeting</KBD
>, Perl binds the name "greeting" to a freshly allocated scalar value, setting the value's reference count to 1 (there's now an arrow pointing to the value). At the end of the block, Perl disassociates the name from the scalar value and decrements the value's reference count. In a typical block where you don't squirrel away references to that value, the value would be deallocated, since the reference count comes down to zero. In this example, however, the anonymous subroutine happens to use <KBD
CLASS="command"
>$greeting</KBD
>, so it increments that scalar value's reference count, thus preventing its automatic deallocation when <KBD
CLASS="command"
>generate_greeting</KBD
> finishes. When <KBD
CLASS="command"
>generate_greeting</KBD
> is called a second time, the name "greeting" is bound to a whole new scalar value, and so the second closure gets to hang on to <EM
CLASS="emphasis"
>its own</EM
> scalar value.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch04-idx-950842-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-950842-1"
></A
>Why don't closures work with <KBD
CLASS="command"
>local</KBD
> variables? Recall from <A
CLASS="xref"
HREF="ch03_01.htm"
TITLE="Typeglobs and Symbol Tables"
>Chapter 3, <CITE
CLASS="chapter"
>Typeglobs and Symbol Tables</CITE
></A
>, that variables marked <KBD
CLASS="command"
>local</KBD
> are dynamically scoped (or "temporarily global"). A <KBD
CLASS="command"
>local</KBD
> variable's value depends on the call stack at the moment at which it is <EM
CLASS="emphasis"
>used</EM
>. For this reason, if <KBD
CLASS="command"
>$greeting</KBD
> were declared <KBD
CLASS="command"
>local</KBD
>, Perl would look up its value when the anonymous subroutine is <EM
CLASS="emphasis"
>called</EM
> (actually when <KBD
CLASS="command"
>print</KBD
> is called inside it), not when it is <EM
CLASS="emphasis"
>defined</EM
>. You can verify this with a simple test:</P
><PRE
CLASS="programlisting"
>sub generate_greeting {
    local ($greeting) = @_;
    return sub {
       print &quot;$greeting \n&quot; ;
    }
}
$rs = generate_greeting(&quot;hello&quot;);
$greeting = &quot;Goodbye&quot;;
&amp;$rs();      # Prints &quot;Goodbye&quot;, not &quot;hello&quot;</PRE
><P
CLASS="para"
>The anonymous subroutine is <EM
CLASS="emphasis"
>not</EM
> a closure in this case, because it doesn't hang onto the local value of <KBD
CLASS="command"
>$greeting</KBD
> ("hello") at the time of its creation. Once <KBD
CLASS="command"
>generate_greeting</KBD
> has finished executing, <KBD
CLASS="command"
>$greeting</KBD
> is back to its old global value, which is what is seen by the anonymous subroutine while executing. </P
><P
CLASS="para"
>It might appear that every time <KBD
CLASS="command"
>generate_greeting</KBD
> returns an anonymous subroutine, it creates a whole new packet of code internally. That isn't so. The code for the anonymous subroutine is generated once during compile time. <KBD
CLASS="command"
>$rs</KBD
> is internally a reference to a "code value," which in turn keeps track not only of the byte-codes themselves (which it shares with all other subroutine references pointing to the same piece of code), but also all the variables it requires from its environment (each subroutine reference packs its own private context for later use). <A
CLASS="xref"
HREF="ch20_01.htm"
TITLE="Perl Internals"
>Chapter 20</A
> does less hand-waving and supplies exact details.</P
><P
CLASS="para"
>To summarize, a closure is the special case of an anonymous subroutine holding onto data that used to belong to its scope at the time of its creation.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm"
TITLE="4.2 Using Subroutine References"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2 Using Subroutine References"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_04.htm"
TITLE="4.4 Using Closures"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.4 Using Closures"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.2 Using Subroutine References</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.4 Using Closures</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
