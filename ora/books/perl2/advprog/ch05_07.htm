<HTML
><HEAD
>
<TITLE>5.7 Eval in Other Languages (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:48Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. Eval"><LINK
REL="prev"
HREF="ch05_06.htm"
TITLE="5.6 Using Eval for Time-Outs"><LINK
REL="next"
HREF="ch05_08.htm"
TITLE="5.8 Resources"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_06.htm"
TITLE="5.6 Using Eval for Time-Outs"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.6 Using Eval for Time-Outs"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. Eval"
>Chapter 5<BR>Eval</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_08.htm"
TITLE="5.8 Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.8 Resources"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-11955"
>5.7 Eval in Other Languages</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-951206-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951206-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951206-2"
></A
>Let's find out what other languages have by way of run-time evaluation and exception handling. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-946852"
>5.7.1 Tcl (Tool Command Language)</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch05-idx-951271-0"
></A
>Tcl interpreter follows the typical shell syntax: each statement is a command followed by a bunch of arguments. If the command is known at compile-time, it generates byte-codes and executes it subsequently, but if it is a variable, the interpreter waits until run-time to compile and execute that statement. (Earlier versions of Tcl always treated the program as strings and parsed a statement every time it was hit, even if it was within a loop. As this book goes to press, the Tcl interpreter has just recently taken some steps toward becoming a byte-code interpreter.) Tcl supports a user-level <KBD
CLASS="command"
>eval</KBD
> call, which recursively calls the parser and interprets the contents of the string as a command followed by a bunch of parameters. </P
><P
CLASS="para"
>For error handling, Tcl provides the <KBD
CLASS="command"
>error</KBD
> and <KBD
CLASS="command"
>catch</KBD
> statements, equivalent to <KBD
CLASS="command"
>die</KBD
> and <KBD
CLASS="command"
>eval</KBD
> in Perl.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-943591"
>5.7.2 Python</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-951273-0"
></A
>Python's <KBD
CLASS="command"
>eval</KBD
> function allows a string to be evaluated and executed, but the string cannot contain newlines. An <KBD
CLASS="command"
>exec</KBD
> statement allows newlines, but since Python relies on leading whitespace instead of an explicit block structure, it is important that you get the whitespace correct in a dynamically constructed string to be given to <KBD
CLASS="command"
>exec</KBD
>. This is quite a bit more painful than getting the block scoping right in Perl.</P
><P
CLASS="para"
>Python goes through a compilation and execution stage similar to Perl, and for every module called <EM
CLASS="emphasis"
>module.py</EM
>, it stores the intermediate byte codes in a file called <EM
CLASS="emphasis"
>module.pyc</EM
>. The next time the module is used, the intermediate byte code file is automatically picked up. Perl is likely to see this kind of facility in the near future, considering that Malcolm Beattie's Perl compiler is in the alpha stage as of this writing.</P
><P
CLASS="para"
>For exception handling, Python supports the notion of exception classes as part of the language, like Java and C++. You raise exceptions with <KBD
CLASS="command"
>raise</KBD
> and trap them with a <KBD
CLASS="command"
>try</KBD
>/<KBD
CLASS="command"
>except</KBD
>/<KBD
CLASS="command"
>finally</KBD
> syntax. (<KBD
CLASS="command"
>try</KBD
> and <KBD
CLASS="command"
>except</KBD
> are equivalent to the <KBD
CLASS="command"
>eval</KBD
> <KBD
CLASS="command"
>BLOCK</KBD
> form. The <KBD
CLASS="command"
>finally</KBD
> keyword indicates a default <KBD
CLASS="command"
>except</KBD
> block that is invoked if none of the other <KBD
CLASS="command"
>except</KBD
> statements is able to trap the exception.) I especially like how the interpreter and the Python library make consistent use of this facility.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-943598"
>5.7.3 C / C++</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-951296-0"
></A
>There is no run-time evaluation, but there are a number of public domain and commercial interpreters that can be linked in with your C application to support C or C++-like interpreted languages. Look for C-Interp or XCoral in the free compilers list available from <A
CLASS="systemitem.url"
HREF="../../../../../../../www.idiom.com/free-compilers"
>http://www.idiom.com/free-compilers</A
>.</P
><P
CLASS="para"
>C has no keywords for exception handling. C++ has a <CODE
CLASS="literal"
>try/catch/throw</CODE
> syntax identical to Java's. Exceptions can be user-defined objects and can have their own private data as well as behavior.<A
CLASS="indexterm"
NAME="ch05-idx-951289-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951289-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951289-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-951327"
>5.7.4 Java</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-951328-0"
></A
>Java goes through the same two phases as Perl: (1) compilation to an intermediate byte-code form, and (2) execution of this intermediate code. What it doesn't allow, however, is the production and evaluation of <EM
CLASS="emphasis"
>new</EM
> code on the fly. There is really no reason why this isn't technically feasible, because the <KBD
CLASS="command"
>javac</KBD
> compiler itself is written in Java, and it should be possible to package it as a library instead of a standalone program without violating new security constraints.</P
><P
CLASS="para"
>For error handling, Java has a <CODE
CLASS="literal"
>try/catch</CODE
> syntax that is equivalent to the <KBD
CLASS="command"
>eval BLOCK</KBD
> approach in Perl, in that all the code is known at compile-time. Exceptions are true first-class objects in Java, so you can discriminate between them much better than the string comparison required in Perl. Java has the <CODE
CLASS="literal"
>throw </CODE
>keyword to raise a user-defined exception, similar to Perl's <KBD
CLASS="command"
>die</KBD
>. </P
><P
CLASS="para"
>Java does strict type-checking and requires that a function enumerate the exceptions it might throw (this is considered part of the signature of the function). So if you call a function that throws an exception, Java either requires your function to either not rethrow it or, if you want to pass it on, you have to include that exception as part of your function's signature. This way, when you see a function, you know the exact list of exceptions you have to deal with, which is very important for big applications written by a team of people. Depending on your viewpoint, Perl doesn't have any such feature or restriction. <A
CLASS="indexterm"
NAME="ch05-idx-951332-0"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_06.htm"
TITLE="5.6 Using Eval for Time-Outs"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.6 Using Eval for Time-Outs"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_08.htm"
TITLE="5.8 Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.8 Resources"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.6 Using Eval for Time-Outs</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.8 Resources</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
