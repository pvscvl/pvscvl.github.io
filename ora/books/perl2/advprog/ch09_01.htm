<HTML
><HEAD
>
<TITLE>Tie (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:34:50Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Advanced Perl Programming"><LINK
REL="prev"
HREF="ch08_04.htm"
TITLE="8.4 Resources"><LINK
REL="next"
HREF="ch09_02.htm"
TITLE="9.2 Tying Arrays"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_04.htm"
TITLE="8.4 Resources"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.4 Resources"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 9</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_02.htm"
TITLE="9.2 Tying Arrays"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.2 Tying Arrays"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch09-11447"
>9. Tie</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch09-20680"
TITLE="9.1 Tying Scalars"
>Tying Scalars</A
><BR><A
CLASS="sect1"
HREF="ch09_02.htm"
TITLE="9.2 Tying Arrays"
>Tying Arrays</A
><BR><A
CLASS="sect1"
HREF="ch09_03.htm"
TITLE="9.3 Tying Hashes"
>Tying Hashes</A
><BR><A
CLASS="sect1"
HREF="ch09_04.htm"
TITLE="9.4 Tying Filehandles"
>Tying Filehandles</A
><BR><A
CLASS="sect1"
HREF="ch09_05.htm"
TITLE="9.5 Example: Monitoring Variables"
>Example: Monitoring Variables</A
><BR><A
CLASS="sect1"
HREF="ch09_06.htm"
TITLE="9.6 Comparisons with Other Languages"
>Comparisons with Other Languages</A
></P
><P
></P
></DIV
><DIV
CLASS="epigraph"
ALIGN="right"
><P
CLASS="para"
ALIGN="right"
><I
>Give me a wild tie brother,<BR>One with a cosmic urge,<BR>A tie that will swear and rip and tear,<BR>When it sees my old blue serge.</I
></P
><P
CLASS="attribution"
ALIGN="right"
>-&nbsp;Stoddard King, <EM
CLASS="emphasis"
>The Ties That Bind</EM
></P
></DIV
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-955087-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-955087-1"
></A
>Normally, when you read or update a scalar, array, hash, or filehandle, Perl performs the appropriate operation on the corresponding internal data structure. Alternatively, you can use the <KBD
CLASS="command"
>tie</KBD
> keyword to bind  the value (or variable) to a user-defined object, so that when you read from or write to that variable, Perl simply calls a specific method of the object it is tied to. In other words, while it provides the implementation for a "normal" variable, Perl expects a user-defined module to do so for a tied variable. Once a variable is tied, even accesses from the C API of the Perl library are delegated to the corresponding tied object. </P
><P
CLASS="para"
>This approach may seem like syntactic sugar, but as you'll see from the examples in this chapter, it is the <EM
CLASS="emphasis"
>syntax</EM
> that gives it its power: an ordinary variable can be made to invoke a user-defined function whenever a variable is manipulated, without the user's code changing or being necessarily aware of the subterfuge. The most common use of this technique is to tie a hash variable to a module that can manipulate DBM files, which are typically disk-based hash tables (they can also be BTrees). This technique allows you to make a hash value persistent and is capable of storing much more information than can fit into available memory, while giving the impression that you are manipulating an ordinary associative array.</P
><P
CLASS="para"
>In the following pages, we will study how <KBD
CLASS="command"
>tie</KBD
> works with the various data types, and look at a few useful examples of this feature. </P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch09-20680"
>9.1 Tying Scalars</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-955100-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-955100-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-955100-2"
></A
>At the most basic level, there are only four things you can do with a scalar. You can create it, get or set its value, and destroy it (by ending the scope or <KBD
CLASS="command"
>undef</KBD
>'ing it). <KBD
CLASS="command"
>tie</KBD
> allows you to supply a subroutine to be called back for each of these operations. </P
><P
CLASS="para"
>The syntax of <KBD
CLASS="command"
>tie</KBD
> is as follows:</P
><PRE
CLASS="programlisting"
>tie <CODE
CLASS="replaceable"
><I
>variable</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>classname</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>list</I
></CODE
>;</PRE
><P
CLASS="para"
>The first parameter should be one of the four supported types described above. The second parameter is the name of a user-defined class. You are expected to have invoked <KBD
CLASS="command"
>use</KBD
> <CODE
CLASS="replaceable"
><I
>classname</I
></CODE
> or <KBD
CLASS="command"
>require</KBD
> <CODE
CLASS="replaceable"
><I
>classname</I
></CODE
> before calling <KBD
CLASS="command"
>tie</KBD
>.</P
><P
CLASS="para"
>When this statement is executed, Perl checks the type of the variable (the first parameter). It then calls the method <KBD
CLASS="command"
><CODE
CLASS="replaceable"
><I
>classname</I
></CODE
>-&gt;TIESCALAR(<A
CLASS="indexterm"
NAME="ch09-idx-955135-0"
></A
><CODE
CLASS="replaceable"
><I
>list</I
></CODE
>)</KBD
>, or <KBD
CLASS="command"
>TIEARRAY</KBD
>, <KBD
CLASS="command"
>TIEHASH</KBD
>, or <KBD
CLASS="command"
>TIEHANDLE</KBD
>, depending on whether the tied variable is a scalar, array, hash, or filehandle. It is a run-time error if this method is not present in the class. <KBD
CLASS="command"
>TIESCALAR()</KBD
> is expected to return an object, which is then internally associated with (or <I
CLASS="firstterm"
>tied</I
> to) the given variable. Now, when you read and write to the variable, Perl internally calls <KBD
CLASS="command"
><CODE
CLASS="replaceable"
><I
>object</I
></CODE
>-&gt;FETCH()</KBD
><A
CLASS="indexterm"
NAME="ch09-idx-955136-0"
></A
> and <KBD
CLASS="command"
><CODE
CLASS="replaceable"
><I
>object</I
></CODE
>-&gt;STORE(<A
CLASS="indexterm"
NAME="ch09-idx-955137-0"
></A
><CODE
CLASS="replaceable"
><I
>new value</I
></CODE
>)</KBD
>, respectively. Finally, when the tied variable goes out of scope, Perl calls <KBD
CLASS="command"
><CODE
CLASS="replaceable"
><I
>object</I
></CODE
>-&gt;DESTROY()</KBD
><A
CLASS="indexterm"
NAME="ch09-idx-955138-0"
></A
>. Simple, isn't it?</P
><P
CLASS="para"
>The names <KBD
CLASS="command"
>FETCH</KBD
>, <KBD
CLASS="command"
>STORE</KBD
>, and <KBD
CLASS="command"
>TIESCALAR</KBD
> are similar to <KBD
CLASS="command"
>AUTOLOAD</KBD
> and <KBD
CLASS="command"
>DESTROY</KBD
> in that they have a special significance for Perl only under appropriate circumstances. That is, a module can have a method called <KBD
CLASS="command"
>FETCH</KBD
>, which can be used normally like any other user-defined subroutine. But if you use <KBD
CLASS="command"
>tie</KBD
>, this method assumes a special meaning.</P
><P
CLASS="para"
>Perl does not care about the exact data structure used for the object (whether you used a hash or ObjectTemplate). <A
CLASS="xref"
HREF="ch09_01.htm"
TITLE="Flow of Control in a Tie Scalar Operation"
>Table 9.1</A
> shows a variable "<KBD
CLASS="command"
>$temperature</KBD
>" tied to an automatic temperature control system, which is represented by a Perl module called AC.pm.[<A
CLASS="footnote"
HREF="#ch09-pgfId-950651"
>1</A
>] An attempt to read <KBD
CLASS="command"
>$temperature</KBD
>'s value is translated to a call to the temperature sensor, and an attempt to set its value translates to a command to the heating system to do what is needed.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch09-pgfId-950651"
>[1]</A
> Air conditioning, not alternating current!</P
></DIV
></BLOCKQUOTE
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch09-18512"
>Table 9.1: Flow of Control in a Tie Scalar Operation</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>When you say:</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Perl translates it to the method call:</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The method looks like this:</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>tie $temperature,
    'AC';</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>$obj = AC-&gt;TIESCALAR()</PRE
><P
CLASS="para"
>Perl now "ties" </P
><P
CLASS="para"
><CODE
CLASS="literal"
>$temperature</CODE
> and <KBD
CLASS="command"
>$obj</KBD
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>package AC;
sub TIESCALAR {
  ...
  $ac = bless {...},
        $pkg;
  return $ac;
}</PRE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>$x = $temperature;</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>$x = $obj-&gt;FETCH();</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>sub FETCH {
  $ac-&gt;get_temp();
}</PRE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>$temperature = 20;</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>$obj-&gt;STORE(20);</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>sub STORE {
 ($obj, $t) = @_;
 $ac-&gt;set_temp($t);
}</PRE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>untie $temperature;
#or
undef $temperature;</PRE
><P
CLASS="para"
>or when <CODE
CLASS="literal"
>$temperature</CODE
> goes out of scope </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>$obj-&gt;DESTROY()</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>sub DESTROY {
}</PRE
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>As you can see, the AC module is an ordinary class with a constructor and three object methods (whose names happen to be special). Perl interacts with this module behind the scenes, providing the user with a much simpler interaction model. You can get the tied object as the return value of <KBD
CLASS="command"
>tie</KBD
> or invoke the <KBD
CLASS="command"
>tied</KBD
> function to get to it at any other time. Therefore the statement </P
><PRE
CLASS="programlisting"
>$temperature = 20;</PRE
><P
CLASS="para"
>is identical to</P
><PRE
CLASS="programlisting"
>(tied $temperature)-&gt;STORE(20);</PRE
><P
CLASS="para"
>The <KBD
CLASS="command"
>untie</KBD
> function restores the original value of the variable and also calls the object's <KBD
CLASS="command"
>DESTROY</KBD
> method.</P
><P
CLASS="para"
>Perl does not constrain the object's module in any way other than to expect it to provide the methods we saw earlier. It can store whatever data it wants, can have other methods, and is perfectly usable even in a non-tie context.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-945598"
>9.1.1 Example: Stopwatch</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-955139-0"
></A
>Let us look at a simple example of a stopwatch using a tied scalar. When you store any value into it, it notes the current time (that is, it ignores the value). When you retrieve a value from it, it returns the amount of time elapsed since the last time a store was attempted on it. This is how it is used:</P
><PRE
CLASS="programlisting"
>use Stopwatch;
tie $s, 'Stopwatch';

# $s is scalar transparently tied to a Stopwatch object.
$s = 0;             # Writing to it forces a reset
sleep(10);          # Sleep 10 seconds
print &quot;$s\n&quot;;       # Should print 10</PRE
><P
CLASS="para"
>The example might sometimes print 9 because of <KBD
CLASS="command"
>sleep</KBD
>'s resolution. </P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch09_01.htm"
TITLE="Stopwatch Implemented Using tie"
>Example 9.1</A
> shows how Stopwatch is implemented.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch09-23233"
>Example 9.1: Stopwatch Implemented Using tie</A
></H4
><PRE
CLASS="programlisting"
>package Stopwatch;

sub TIESCALAR {
   my ($pkg) = @_;
   my $obj = time();  # $obj stores the time at last reset.
   return (bless \$obj, $pkg);
}

sub FETCH {
   my ($r_obj) = @_;
   # Return the time elapsed since it was last reset 
   return (time() - $$r_obj); 
}

sub STORE {
   my ($r_obj, $val) = @_;
   # Ignore the value. Any write to it is seen as a reset
   return ($$r_obj = time());
}

1;</PRE
></DIV
><P
CLASS="para"
><KBD
CLASS="command"
>TIESCALAR</KBD
> notes the current time and returns a reference to a blessed scalar (with the current time in it). As was mentioned earlier, you are under no obligation to provide a blessed <EM
CLASS="emphasis"
>scalar</EM
> reference; Perl does not care whether the object is a scalar or an array or a complex data structure. The only requirement is that it be blessed into a module that supports the <KBD
CLASS="command"
>FETCH</KBD
> and <KBD
CLASS="command"
>STORE</KBD
> methods. In this case, <KBD
CLASS="command"
>FETCH</KBD
> computes the interval between the current time (as reported by <KBD
CLASS="command"
>time</KBD
>) and the last reset time. </P
><P
CLASS="para"
>Incidentally, the time calculations in this module work at the granularity of only a second. If you want a finer granularity, you can use the <A
CLASS="indexterm"
NAME="ch09-idx-955143-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-955143-1"
></A
>Time::HiRes module available from CPAN, which gives microsecond resolution on Unix systems (gives access to the usleep and ualarm system calls). On Microsoft Windows systems, you can use the <KBD
CLASS="command"
>Win32::Timer</KBD
><A
CLASS="indexterm"
NAME="ch09-idx-955144-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-955144-1"
></A
> call for millisecond-level timing.<A
CLASS="indexterm"
NAME="ch09-idx-955141-0"
></A
></P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch09-pgfId-945636"
>9.1.1.1 tie works with anonymous values</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-955145-0"
></A
>The first argument to <KBD
CLASS="command"
>tie</KBD
> must boil down to a scalar, array, hash, or filehandle <EM
CLASS="emphasis"
>value </EM
>; it does not <EM
CLASS="emphasis"
>have</EM
> to be a variable. The following code shows two valid examples of scalar ties:</P
><PRE
CLASS="programlisting"
>$r = \$s; 
tie $$r, 'Stopwatch';  # Indirect tie to $s

@foo = (1, 2);
tie $foo[1], 'Stopwatch';</PRE
><P
CLASS="para"
>As you can see, this facility works with the underlying values and is not associated with a variable name (unlike the <EM
CLASS="emphasis"
>trace</EM
> facility in TCL).<A
CLASS="indexterm"
NAME="ch09-idx-955102-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-955102-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-955102-2"
></A
></P
></DIV
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_04.htm"
TITLE="8.4 Resources"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.4 Resources"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_02.htm"
TITLE="9.2 Tying Arrays"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.2 Tying Arrays"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.4 Resources</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9.2 Tying Arrays</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
