<HTML
><HEAD
>
<TITLE>18.4 XS Features (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:15Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch18_01.htm"
TITLE="18. Extending Perl:A First Course"><LINK
REL="prev"
HREF="ch18_03.htm"
TITLE="18.3 SWIG Features"><LINK
REL="next"
HREF="ch18_05.htm"
TITLE="18.5 Degrees of Freedom"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_03.htm"
TITLE="18.3 SWIG Features"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.3 SWIG Features"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch18_01.htm"
TITLE="18. Extending Perl:A First Course"
>Chapter 18<BR>Extending Perl:A First Course</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_05.htm"
TITLE="18.5 Degrees of Freedom"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.5 Degrees of Freedom"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch18-39369"
>18.4 XS Features</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971939-0"
></A
>XS, as we mentioned earlier, is an interface definition language. Unlike SWIG, XS concentrates solely on C functions and <KBD
CLASS="command"
>#define</KBD
>'d constants and does not provide any support for <KBD
CLASS="command"
>struct</KBD
> or <KBD
CLASS="command"
>class</KBD
> definitions (although there are plans for doing so in the future). In practice, I haven't missed this support for structures and classes too much because I rarely export data structures, in keeping with encapsulation principles.</P
><P
CLASS="para"
>The XS approach allows you to modify the XS file and supply glue code (in C) in varying degrees. It is analogous to C or Pascal compilers that allow you to insert native assembly code within a program. This gives a lot of power if you know what you are doing, but requires you to be conversant with the internal Perl API and protocols.</P
><P
CLASS="para"
>By modifying the XS file, you can create <CODE
CLASS="literal"
>write</CODE
> function wrappers that take a variable number of input parameters, modify some input parameters (as <KBD
CLASS="command"
>read</KBD
> does), and return an array of result values. Combine this with the ability to write custom typemaps and modify the Perl module (produced by <EM
CLASS="emphasis"
>h2xs</EM
>), and you have several ways of creating extensions.</P
><P
CLASS="para"
>Let us take a brief look at XS syntax. <I
CLASS="filename"
>Fractal.xs</I
>, from our earlier example, looks like this in its most essential form:</P
><PRE
CLASS="programlisting"
>#include &lt;mandel.h&gt;

MODULE = Fractal    PACKAGE = Fractal

int 
draw_mandel (filename,width,height,origin_real,origin_imag,range,depth)
      char*  filename
      int    width
      int    height
      double origin_real
      double origin_imag
      double range
      double depth</PRE
><P
CLASS="para"
>All text preceding a <KBD
CLASS="command"
>MODULE</KBD
> statement is considered to be raw C code and is sent untranslated into the <I
CLASS="filename"
>Fractal.c</I
>, the glue code (like the <KBD
CLASS="command"
>%{</KBD
> ... <KBD
CLASS="command"
>%}</KBD
> block in SWIG). An XS module can contain more than one package, but since this is not typical, the <KBD
CLASS="command"
>MODULE</KBD
> and <KBD
CLASS="command"
>PACKAGE</KBD
> keywords have the same value. All exportable functions are listed in a special way. The return type comes first, on its own line (you must specify <KBD
CLASS="command"
>void</KBD
> in the absence of a return type), then the name of the function with a list of parameter names, and, finally, each parameter on a separate line. It is important to keep the "*" along with the type, not the name&nbsp;- you must say <KBD
CLASS="command"
>char*</KBD
> <KBD
CLASS="command"
>filename</KBD
>, not <KBD
CLASS="command"
>char</KBD
> <KBD
CLASS="command"
>*filename</KBD
>. The next function declaration simply starts after a blank line. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-969518"
>18.4.1 What Does xsubpp Do?</A
></H3
><P
CLASS="para"
>It pays to understand a little bit about the glue code generated by <EM
CLASS="emphasis"
>xsubpp</EM
><A
CLASS="indexterm"
NAME="ch18-idx-971943-0"
></A
>. When <EM
CLASS="emphasis"
>xsubpp</EM
> is given the XS snippet shown above, it creates a function called <KBD
CLASS="command"
>Fractal_xs_draw_mandel</KBD
> (in <I
CLASS="filename"
>Fractal.c</I
>) with the same signature as the XS declaration. This function translates the arguments supplied in Perl space to the C function's parameters, calls the real <KBD
CLASS="command"
>draw_mandel</KBD
> function, and finally packages its return value into a Perl value. </P
><P
CLASS="para"
>XS provides several keywords to either inject your own code at suitable locations inside the generated function or completely replace the generated glue code with your own. For example, you can write typemap functions that handle how Perl arguments get translated to C; you can use the <KBD
CLASS="command"
>CODE</KBD
> keyword (described later) to specify that you are supplying your own code. </P
><P
CLASS="para"
>With this brief overview in mind, let us now look at a few of the important aspects of the XS language.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-968986"
>18.4.2 Default and Optional Parameters</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971945-0"
></A
>Parameters can have default values but, as in C++, can be applied only to the rightmost parameters:</P
><PRE
CLASS="programlisting"
>draw_mandel (file,width,height,orig_real,orig_imag,range,depth=30)</PRE
><P
CLASS="para"
>This allows you to optionally skip the last parameter when calling from Perl.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-966269"
>18.4.3 Modifying Parameters</A
></H3
><P
CLASS="para"
>XS allows you to modify parameters before they are given to the real <KBD
CLASS="command"
>draw_mandel</KBD
> function:</P
><PRE
CLASS="programlisting"
>int 
draw_mandel (filename,width,height,origin_real,origin_imag,range,depth)
      char*  filename
      int    width
      int    height
      double origin_real
      double origin_imag
      double range
      double depth
    INIT:
    if (width &gt; 400) { 
        fprintf (stderr, &quot;Width cannot exceed 400. Truncating.\n&quot;;
        width = 400;
    }</PRE
><P
CLASS="para"
>The <KBD
CLASS="command"
>INIT:</KBD
> keyword tells XS to insert the code following it between the argument translation (from Perl to C) and the call to the real function.</P
><P
CLASS="para"
>In SWIG, you would use a named typemap for the same effect. The XS approach, however, allows you to make a decision based on more than one parameter. For example, if you had to maintain a certain aspect ratio, you would have to look at both width and height and modify one of them. A typemap cannot give you this flexibility because it looks at each parameter in isolation.</P
><P
CLASS="para"
>Incidentally, the <KBD
CLASS="command"
>PREINIT:</KBD
> keyword can be used to insert variable declarations; <EM
CLASS="emphasis"
>xsubpp</EM
> puts these declarations ahead of any generated code. Of course, this keyword is not important if you compile the glue code with a C++ compiler, since it allows you to declare variables anywhere in the code.<A
CLASS="indexterm"
NAME="ch18-idx-971947-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-966295"
>18.4.4 Special Code</A
></H3
><P
CLASS="para"
>You can write the <A
CLASS="indexterm"
NAME="ch18-idx-971949-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971949-1"
></A
>glue code yourself if you want. Consider the <KBD
CLASS="command"
>sin()</KBD
> function in the math library, which requires you to supply the angle in radians. You can create a new function in Perl to accept the angle in degrees using the <KBD
CLASS="command"
>CODE</KBD
> keyword, like this (the indentation scheme is arbitrary):</P
><PRE
CLASS="programlisting"
>double
d_sin(angle)
   double angle
  CODE:
   RETVAL = sin(angle  * PI / 180);
  OUTPUT: 
   RETVAL</PRE
><P
CLASS="para"
>When <EM
CLASS="emphasis"
>xsubpp</EM
> sees the <KBD
CLASS="command"
>CODE</KBD
> keyword, it just maps the arguments from Perl data types to C types and leaves you to supply the rest of the code, which means that you have to make the call to the underlying external subroutine yourself. The <KBD
CLASS="command"
>CODE</KBD
> directive does not change the essential structure of the C call; you can modify input parameters and you can return at most one result value. </P
><P
CLASS="para"
>The <KBD
CLASS="command"
>OUTPUT:</KBD
> directive tells <EM
CLASS="emphasis"
>xsubpp</EM
> to supply some code to package the returned result and load it back into Perl space. <KBD
CLASS="command"
>RETVAL</KBD
> is automatically declared by <EM
CLASS="emphasis"
>xsubpp</EM
> to match the return value of the function. In the preceding example, the return value of <KBD
CLASS="command"
>sin()</KBD
> is the only output parameter and is listed under <KBD
CLASS="command"
>OUTPUT</KBD
>. </P
><P
CLASS="para"
>The <KBD
CLASS="command"
>CODE</KBD
> directive does not help if you want a variable number of input parameters or returned results. In this case, you use the <KBD
CLASS="command"
>PPCODE</KBD
> directive and explicitly manage the entire argument stack. We will have more on this in <A
CLASS="xref"
HREF="ch20_01.htm"
TITLE="Perl Internals"
>Chapter 20</A
>.</P
><P
CLASS="para"
>Please take a look at the XS documentation for other keywords, details, and examples.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-968095"
>18.4.5 C++ Code</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971950-0"
></A
>XS supports two special procedures for automatically creating and deleting C++ objects. Consider the following XS code for a module called <KBD
CLASS="command"
>Car</KBD
>:</P
><PRE
CLASS="programlisting"
>Car*
Car::new()

void
Car::DESTROY()

void
Car::turn_left()</PRE
><P
CLASS="para"
>When you say <KBD
CLASS="command"
>new</KBD
> <KBD
CLASS="command"
>Car</KBD
> in Perl, the wrapper code corresponding to <KBD
CLASS="command"
>Car::new</KBD
> makes the C++ invocation, <KBD
CLASS="command"
>new Car()</KBD
>. Later on, when you say in Perl space, <KBD
CLASS="command"
>$car-&gt;turn_left()</KBD
>, the appropriate C++ function is automatically called. If you want to supply <KBD
CLASS="command"
>CODE</KBD
> or <KBD
CLASS="command"
>PPCODE</KBD
> directives for C++ interfaces, you can refer to the object as <KBD
CLASS="command"
>THIS</KBD
> and to the class as <KBD
CLASS="command"
>CLASS</KBD
>.</P
><P
CLASS="para"
>This example has one hitch. It has no clue what's in the data type <KBD
CLASS="command"
>Car</KBD
>. Unlike SWIG, which quite unconcernedly treats a <KBD
CLASS="command"
>Car*</KBD
> like a <KBD
CLASS="command"
>void*</KBD
>, <EM
CLASS="emphasis"
>xsubpp</EM
> expects help in the form of a typemap. Since we need to know the internal Perl API to create a typemap, we'll leave this issue unresolved until <A
CLASS="xref"
HREF="ch20_01.htm"
TITLE="Perl Internals"
>Chapter 20</A
>.<A
CLASS="indexterm"
NAME="ch18-idx-971941-0"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_03.htm"
TITLE="18.3 SWIG Features"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.3 SWIG Features"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_05.htm"
TITLE="18.5 Degrees of Freedom"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.5 Degrees of Freedom"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>18.3 SWIG Features</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>18.5 Degrees of Freedom</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
