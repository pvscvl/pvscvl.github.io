<HTML
><HEAD
>
<TITLE>6.9 Language Comparisons (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:33:27Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Modules"><LINK
REL="prev"
HREF="ch06_08.htm"
TITLE="6.8 Accessing the Symbol Table"><LINK
REL="next"
HREF="ch07_01.htm"
TITLE="7. Object-Oriented Programming"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_08.htm"
TITLE="6.8 Accessing the Symbol Table"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.8 Accessing the Symbol Table"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Modules"
>Chapter 6<BR>Modules</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch07_01.htm"
TITLE="7. Object-Oriented Programming"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7. Object-Oriented Programming"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-15104"
>6.9 Language Comparisons</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-960752-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960752-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960752-2"
></A
>In this chapter, we have seen that Perl offers namespace partitioning, limited access protection, reflection, run-time subroutine loading (autoloading), package initialization and destruction constructs, and exportation of names to different namespaces. Let's look at some other languages with these features in mind.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-951253"
>6.9.1 Tcl</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-960754-0"
></A
>Tcl's "package" feature basically provides a way to annotate a set of code with a version number and for the user of that code to explicitly state the version it requires. Tcl flags an error if there's a mismatch. Perl supports version numbers also (more on this in the next chapter).</P
><P
CLASS="para"
>Packages don't act like global namespaces as they do in Perl. Instead, Tcl supports the concept of multiple interpreters coexisting in the same program to provide completely distinct namespaces. This facility is used to create <KBD
CLASS="command"
>SafeTcl</KBD
>, which offers secure and insecure compartments in which to evaluate code. Perl's <KBD
CLASS="command"
>Safe</KBD
> package uses a completely different mechanism internally (neither packages nor multiple interpreters), as we shall see in <A
CLASS="xref"
HREF="ch20_01.htm"
TITLE="Perl Internals"
>Chapter 20, <CITE
CLASS="chapter"
>Perl Internals</CITE
></A
>.</P
><P
CLASS="para"
>For reflection, Tcl has an "info" command for finding out about global symbols. It has no inheritance feature, but several free extensions such as [<EM
CLASS="emphasis"
>incr Tcl</EM
> ] and <EM
CLASS="emphasis"
>stoop</EM
> attempt to fill the gap by providing an object orientation layer over the basic language.</P
><P
CLASS="para"
>Dynamic function calls are common and trivial to implement; just specify the name of a command as a variable, and it will get interpolated and executed at run time.<A
CLASS="indexterm"
NAME="ch06-idx-960755-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-960922"
>6.9.2 Python</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-960923-0"
></A
>Python offers packaging facilities very similar to Perl's. Each Python module is a namespace (a dictionary or hash table keyed by name), and Python allows you to traverse and query this dictionary. Like Perl, it does not enforce privacy of namespaces and leaves it to the programmer's judgment to respect module boundaries. As a module's user, you can import specific symbols into your namespace. (There is no mechanism equivalent to <KBD
CLASS="command"
>@EXPORT</KBD
>, which I think is a good thing.) Python does not provide anything like Perl's file-scope lexicals, which means that, unlike Perl, Python cannot give you true privacy if you need it.<A
CLASS="indexterm"
NAME="ch06-idx-960925-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960925-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960925-2"
></A
>  </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-951254"
>6.9.3 C/C++</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-960756-0"
></A
>Of all the languages mentioned here, C and C++ are the least dynamic; their focus is on getting everything nailed down at compile-time so at run-time the code can just whistle along. </P
><P
CLASS="para"
>Virtual functions in C++ provide run-time binding of functions. While compile-time type checking ensures that this is a safe binding, it also tends to make the code verbose in comparison to more dynamic languages such as Objective C or even Java.</P
><P
CLASS="para"
>C++ supports <A
CLASS="indexterm"
NAME="ch06-idx-960883-0"
></A
>RTTI (Run Time Type Identification), but this feature is limited to finding the actual type of a pointer and to dynamically cast it. (The run-time environment throws an exception if a pointer is wrongly cast.) The facility does not tell you what a variable is really pointing to. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-960892"
>6.9.4 Java</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-960893-0"
></A
>Java offers two levels of modularity: <EM
CLASS="emphasis"
>packages</EM
> and <EM
CLASS="emphasis"
>classes</EM
><A
CLASS="indexterm"
NAME="ch06-idx-960894-0"
></A
>, where a package is a collection of classes. (We'll learn about the notion of classes in the next chapter.) Perl's <KBD
CLASS="command"
>package</KBD
> is equivalent to both. Java does not allow one package to mess around with another package's namespace (no export) but allows a package to selectively import the classes it requires. It focuses a considerable amount of attention on security, which hasn't really stopped determined crackers. The Perl world has third-party packages called Safe and Penguin (which depends on Safe) that attempt to provide similar isolation characteristics (and don't offer any security guarantees either).</P
><P
CLASS="para"
>Since the arrival of the Java Beans and the 1.1 version of the Java Development Kit (JDK), Java has gained significant reflection capabilities, though nowhere near the amount of publicly available information Perl gives you. There are reasonably good arguments to be made both for providing this information and for not providing it; everything comes down to different models of programming. Men were sent to the moon while FORTRAN and COBOL ruled the roost, which proves that you can get a whole lot done if you don't indulge in language wars.</P
><P
CLASS="para"
>Java allows you to dynamically "dispatch" a function call, by giving the function's name as a string, and to trap an exception if the function doesn't exist; this is like using Perl's symbolic references.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_08.htm"
TITLE="6.8 Accessing the Symbol Table"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.8 Accessing the Symbol Table"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch07_01.htm"
TITLE="7. Object-Oriented Programming"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7. Object-Oriented Programming"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.8 Accessing the Symbol Table</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7. Object-Oriented Programming</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
