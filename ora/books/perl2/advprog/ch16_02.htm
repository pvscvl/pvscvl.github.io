<HTML
><HEAD
>
<TITLE>16.2 Implementation (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:39:32Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch16_01.htm"
TITLE="16. GUI Example: Man Page Viewer"><LINK
REL="prev"
HREF="ch16_01.htm"
TITLE="16.1 man and perlman"><LINK
REL="next"
HREF="ch16_03.htm"
TITLE="16.3 Resources"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_01.htm"
TITLE="16.1 man and perlman"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.1 man and perlman"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch16_01.htm"
TITLE="16. GUI Example: Man Page Viewer"
>Chapter 16<BR>GUI Example: Man Page Viewer</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_03.htm"
TITLE="16.3 Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.3 Resources"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch16-38847"
>16.2 Implementation</A
></H2
><P
CLASS="para"
><EM
CLASS="emphasis"
>perlman</EM
>'s implementation can be logically divided into four chunks: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch16-pgfId-992003"
></A
>Formatting and displaying man pages in the text widget: the routines <KBD
CLASS="command"
>show_man</KBD
> and <KBD
CLASS="command"
>get_command_line</KBD
>.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch16-pgfId-993815"
></A
>Search facility: <KBD
CLASS="command"
>search</KBD
>.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch16-pgfId-993816"
></A
>Screen layout: <KBD
CLASS="command"
>create_ui</KBD
>.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch16-pgfId-993817"
></A
>Displaying the list of help topics available in every section. We will not look at this particular piece of functionality, because it does not have much user interface code.</P
></LI
></UL
><P
CLASS="para"
>Before we barrel into each of the subroutines mentioned above, let us briefly study all the capabilities of the text widget used by <EM
CLASS="emphasis"
>perlman</EM
>:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch16-pgfId-993145"
></A
>Inserting text at end, and marking it with a tag ("section"):</P
><PRE
CLASS="programlisting"
>$text-&gt;insert('end', 'sample text', 'section');</PRE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch16-pgfId-993248"
></A
>Retrieving a stretch of text between two indices:</P
><PRE
CLASS="programlisting"
>$line = $text-&gt;get($start_index, $end_index);</PRE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch16-pgfId-993365"
></A
>Ensuring that a particular index is visible:</P
><PRE
CLASS="programlisting"
>$text-&gt;see($index)</PRE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch16-pgfId-993144"
></A
>Deleting entire contents:</P
><PRE
CLASS="programlisting"
>$text-&gt;delete('1.0', 'end'); # From line 1, column 0, to end</PRE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch16-pgfId-993840"
></A
>Creating and configuring a tag:</P
><PRE
CLASS="programlisting"
>$text-&gt;tagConfigure('search',  
                    'foreground' =&gt; yellow, 'background' =&gt; 'red');</PRE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch16-pgfId-993843"
></A
>Deleting a tag:</P
><PRE
CLASS="programlisting"
>$text-&gt;tagDelete('search');</PRE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch16-pgfId-993845"
></A
>Applying a tag to a range of text, given an index position and number of characters:</P
><PRE
CLASS="programlisting"
>$text-&gt;tagAdd('search', $current, &quot;$current + $length char&quot;);</PRE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch16-pgfId-993063"
></A
>Listing all mark names and deleting each of them:</P
><PRE
CLASS="programlisting"
>foreach $mark ( $text-&gt;markNames() ) { $text-&gt;markUnset($mark); }</PRE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch16-pgfId-993067"
></A
>Getting the line and column number (the index) from logical positions:</P
><PRE
CLASS="programlisting"
># row and col of current end position
$index = $text-&gt;index('end'); 

# go to current insert position, then to the beginning of the word
# and report the line and column
$start_index = $text-&gt;index('insert wordstart'); 

# Go to 10th row, column 3, advance 5 chars, and report the new
# row and column
$i = $text-&gt;index(&quot;10.3 + 5 char&quot;);</PRE
><P
CLASS="para"
>Note that the <KBD
CLASS="command"
>index</KBD
> method does not change the state of the widget.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch16-pgfId-993285"
></A
>Doing an exact or regular expression search, specifying where to start and where to end: </P
><PRE
CLASS="programlisting"
>$current = $text-&gt;search('-count' =&gt; \$length,     
                         '-regex', '-nocase','--', # search options
                         $search_pattern,   
                         $current, 'end');         # from , to </PRE
><P
CLASS="para"
>The <KBD
CLASS="command"
>search</KBD
> method returns the index of the text at which the search succeeds and sets the variable associated with the <KBD
CLASS="command"
>-count</KBD
> property. It returns <KBD
CLASS="command"
>undef</KBD
> if the search failed.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch16-pgfId-993217"
></A
>Binding a mouse double-click to a subroutine:</P
><PRE
CLASS="programlisting"
>$text-&gt;bind('&lt;Double-1&gt;', \&amp;pick_word);</PRE
></LI
></UL
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-992024"
>16.2.1 Showing Man Pages</A
></H3
><P
CLASS="para"
>Let us dive into the meat of the application, the procedure <KBD
CLASS="command"
>show_man</KBD
>. As can be seen in <A
CLASS="xref"
HREF="ch16_01.htm"
TITLE="perlman screen"
>Figure 16.1</A
>, an entry widget labeled "Show:" accepts a topic name. When the user types text into this widget, <KBD
CLASS="command"
>$show</KBD
>, and hits the Return key, <KBD
CLASS="command"
>show_man</KBD
> is called. This procedure fetches the string from <KBD
CLASS="command"
>$show</KBD
> and calls <KBD
CLASS="command"
>get_command_line</KBD
> to construct a command pipeline to read from <KBD
CLASS="command"
>man</KBD
> (for <KBD
CLASS="command"
>open</KBD
>'s purposes). It then reads this pipe a line at a time and examines the line to see whether it is a likely heading (such as "NAME" or "DESCRIPTION"). Headings in man pages are typically in all caps and start from the first column. If a line looks like a heading, <KBD
CLASS="command"
>show_man</KBD
> inserts the line with a tag called "section"; otherwise, it inserts it as regular untagged text. The "section" tag is preconfigured with a larger size font. In addition, <KBD
CLASS="command"
>show_man</KBD
> appends a new entry to the "Headings" menu and arranges the callback associated with this entry to scroll the text widget to the line containing that section header.</P
><PRE
CLASS="programlisting"
>sub show_man {
    my $entry = $show-&gt;get();   # get entry from $show
    # $entry can be something like 'csh', or 'csh(1)'
    my ($man, $section) = ($entry =~ /^(\w+)(\(.*\))?/);
    if ($section &amp;&amp; (!is_valid_section($section))) {
        undef $section ;
    }
    my $cmd_line = get_command_line($man, $section); # used by open

    # Erase everything to do with current page (contents, menus, marks)
    $text-&gt;delete('1.0', 'end');  # erase current page
    # Insert 'working' message; use the 'section' tag because
    # it has nice large fonts.
    $text-&gt;insert('end', 
                  &quot;Formatting \&quot;$man\&quot; .. please wait&quot;, 'section');
    $text-&gt;update();  # Flush changes to text widget
    $menu_headings-&gt;menu()-&gt;delete(0,'end'); # Delete current headings
    my $mark;
    foreach $mark ($text-&gt;markNames) {  # remove all marks 
        $text-&gt;markUnset($mark);
    }

    # UI is clean now. Open the file
    if (!open (F, $cmd_line)) {
        # Use the text widget for error messages 
        $text-&gt;insert('end', &quot;\nError in running man or rman&quot;);
        $text-&gt;update();
        return;
    }
    # Erase the &quot;Formatting $man ...&quot; message
    $text-&gt;delete('1.0', 'end');
    my $lines_added = 0; my $line;
    
    while (defined($line = &lt;F&gt;)) {
        $lines_added = 1;
        # If first character is a capital letter, it's likely a section
        if ($line =~ /^[A-Z]/) {  
            # Likely a section heading
            ($mark = $line) =~ s/\s.*$//g;  # $mark has section title
            my $index = $text-&gt;index('end');# note current end location
            # Give 'section' tag to the section title
            $text-&gt;insert('end', &quot;$mark\n\n&quot;, 'section');
            # Create a section heading menu entry. Have callback
            # invoke text widget's 'see' method to go to the index
            # noted above
            $menu_headings-&gt;command(
                    '-label' =&gt; $mark,
                    '-command' =&gt; [sub {$text-&gt;see($_[0])},$index])
        } else {
            $text-&gt;insert('end', $line); # Ordinary text. Just insert.
        }
    }
    if ( ! $lines_added ) {
        $text-&gt;insert('end', &quot;Sorry. No information found on $man&quot;);
    }
    close(F);
}</PRE
><P
CLASS="para"
><KBD
CLASS="command"
>get_command_line</KBD
> takes the name of a man page and an optional section and returns an appropriate command line that can be used for the <KBD
CLASS="command"
>open</KBD
> command. Different systems might need different command lines, and the following listing  shows the command line for Solaris. Since <EM
CLASS="emphasis"
>man</EM
> (actually, <EM
CLASS="emphasis"
>nroff</EM
>  ) formats the page for a terminal (inserting escape sequences to show words in bold and headers and footers for every page), we use a freely available utility called <EM
CLASS="emphasis"
>rman</EM
> ("RosettaMan"; see the <A
CLASS="xref"
HREF="ch16_03.htm"
TITLE="Resources"
>Section 16.3</A
>" section at the end of this chapter) to filter out this noise.</P
><PRE
CLASS="programlisting"
>sub get_command_line {
    my ($man, $section) = @_; 
    if ($section) {
        $section =~ s/[()]//g; # remove parens
        return &quot;man -s $section $man 2&gt; /dev/null | rman |&quot;;
    } else {
        return &quot;man $man 2&gt; /dev/null | rman |&quot;;
    }
}</PRE
><P
CLASS="para"
>The <KBD
CLASS="command"
>pick_word</KBD
> procedure is called when you double-click on the text widget. It uses the <KBD
CLASS="command"
>index</KBD
> method to compute the index of the beginning of the word clicked on, and that of the end of the line, and extracts this range of text. <KBD
CLASS="command"
>pick_word</KBD
> then looks for an ordinary string (the topic), followed by an optional string within parentheses (the section). Before invoking <KBD
CLASS="command"
>show_man</KBD
>, it inserts this string into the entry widget, <KBD
CLASS="command"
>$show</KBD
>, thus pretending to be a user who has typed in that text.</P
><PRE
CLASS="programlisting"
>sub pick_word {
    my $start_index = $text-&gt;index('insert wordstart');
    my $end_index = $text-&gt;index('insert lineend');
    my $line = $text-&gt;get($start_index, $end_index);
    my ($page, $section) = ($line =~ /^(\w+)(\(.*?\))?/); 
    return unless $page;
    $show-&gt;delete('0', 'end');
    if ($section &amp;&amp; is_valid_section($section)) {
        $show-&gt;insert('end', &quot;$page${section}&quot;);
    } else {
        $show-&gt;insert('end', $page);
    }
    show_man();
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-993436"
>16.2.2 Searching for Text</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch16-idx-996433-0"
></A
>The menu bar contains a search menu exactly as described in the example under "Menus" in <A
CLASS="xref"
HREF="ch14_01.htm"
TITLE="Introduction to GUIs, Tk, and Perl/Tk"
>Section 14.1, "Introduction to GUIs, Tk, and Perl/Tk"</A
>. When the "Find" menu item is selected, the subroutine <KBD
CLASS="command"
>search</KBD
> is called. It first calls <KBD
CLASS="command"
>tagDelete</KBD
> to remove all highlights (which may be present from a previous search). Then it starts from the top (line 1, column 0) and invokes the widget's <KBD
CLASS="command"
>search</KBD
> method to find the first piece of matching text. When a match is found, this method updates the variable supplied to the <KBD
CLASS="command"
>-count</KBD
> parameter with the length of the matched text. This stretch of text is then highlighted using a tag called "search." The cursor is advanced beyond the matching text, and the search is resumed.</P
><PRE
CLASS="programlisting"
>sub search {
    my $search_pattern = $search-&gt;get();
    $text-&gt;tagDelete('search');  # Removing the tag restores the 
                                 # associated regions of text to their
                                 # default style
    $text-&gt;tagConfigure('search', 
                        '-background' =&gt; 'yellow',
                        '-foreground' =&gt; 'red');

    my $current = '1.0';# Start at line 1, column 0 (beginning of file)
    my $length = '0';
    while (1) {
        if ($ignore_case) {
            $current = $text-&gt;search('-count' =&gt; \$length,
                                     $match_type, '-nocase','--',
                                     $search_pattern,
                                     $current,  
                                     'end');
        } else {
            $current = $text-&gt;search('-count' =&gt; \$length,
                                     $match_type, '--',
                                     $search_pattern,
                                     $current,
                                     'end');
        }
        last if (!$current);
        # Tag the matching text range with the tag name 'search'
        $text-&gt;tagAdd('search', $current, &quot;$current + $length char&quot;);
        # Move the cursor ahead, and continue searching
        $current = $text-&gt;index(&quot;$current + $length char&quot;);
    }
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-993545"
>16.2.3 Screen Layout</A
></H3
><P
CLASS="para"
><KBD
CLASS="command"
>create_ui</KBD
> sets up the simple user interface. Pay particular attention to the padding options given to <KBD
CLASS="command"
>pack</KBD
> and the event bindings set up on the text and entry widgets. </P
><PRE
CLASS="programlisting"
>sub create_ui {
    my $top = MainWindow-&gt;new();
    #-----------------------------------------------------------------
    # Create menus
    #-----------------------------------------------------------------
    # Menu bar
    my $menu_bar = $top-&gt;Frame()-&gt;pack('-side' =&gt; 'top', 
                                       '-fill' =&gt; 'x');

    #----------- File menu ------------------------
    my $menu_file = $menu_bar-&gt;Menubutton('-text' =&gt; 'File',
                                          '-relief' =&gt; 'raised',
                                          '-borderwidth' =&gt; 2,
                                          )-&gt;pack('-side' =&gt; 'left',
                                                  '-padx' =&gt; 2,
                                                  );
    $menu_file-&gt;separator();
    $menu_file-&gt;command('-label' =&gt; 'Quit', 
                        '-command' =&gt; sub {exit(0)});

    #----------- Sections Menu ------------------------
    $menu_headings = $menu_bar-&gt;Menubutton('-text' =&gt; 'Headings',
                                           '-relief' =&gt; 'raised',
                                           '-borderwidth' =&gt; 2,
                                           )-&gt;pack('-side' =&gt; 'left',
                                                   '-padx' =&gt; 2,
                                                   );
    $menu_headings-&gt;separator();

    #----------- Search Menu ------------------------
    my $search_mb = $menu_bar-&gt;Menubutton('-text'         =&gt; 'Search',
                                          '-relief'       =&gt; 'raised',
                                          '-borderwidth'  =&gt; 2,
                                          )-&gt;pack('-side' =&gt; 'left',
                                                  '-padx' =&gt; 2
                                               );
    $match_type = &quot;-regexp&quot;; $ignore_case = 1;
    $search_mb-&gt;separator();

    # Regexp match
    $search_mb-&gt;radiobutton('-label'    =&gt; 'Regexp match',
                            '-value'    =&gt; '-regexp',
                            '-variable' =&gt; \$match_type);
    # Exact match
    $search_mb-&gt;radiobutton('-label'    =&gt; 'Exact match',
                            '-value'    =&gt; '-exact',
                            '-variable' =&gt; \$match_type);
    $search_mb-&gt;separator();
    # Ignore case
    $search_mb-&gt;checkbutton('-label'    =&gt; 'Ignore case?',
                            '-variable' =&gt; \$ignore_case);
    #----------- Sections Menu ------------------------
    my $menu_sections = $menu_bar-&gt;Menubutton('-text' =&gt; 'Sections',
                                              '-relief' =&gt; 'raised',
                                              '-borderwidth' =&gt; 2,
                                             )-&gt;pack('-side' =&gt; 'left',
                                                     '-padx' =&gt; 2,
                                                      );
    # Populate sections menu with keys of %sections
    my $section_name;
    foreach $section_name (sort keys %sections) {
        $menu_sections-&gt;command (
               '-label' =&gt; &quot;($section_name)&quot;,
               '-command' =&gt; [\&amp;show_section_contents, $section_name]);
    }
    
    #-----------------------------------------------------------------
    # Create and configure text, and show and search entry widgets
    #-----------------------------------------------------------------
    $text = $top-&gt;Text ('-width' =&gt;  80, 
                        '-height' =&gt; 40)-&gt;pack();
    $text-&gt;tagConfigure('section', 
                        '-font' =&gt; 
    '-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'); 
    # Used xlsfonts(1) for this font spec.
    $text-&gt;bind('&lt;Double-1&gt;', \&amp;pick_word);
    $top-&gt;Label('-text' =&gt; 'Show:')-&gt;pack('-side' =&gt; 'left');

    $show = $top-&gt;Entry ('-width'   =&gt;  20,
                         )-&gt;pack('-side' =&gt; 'left');
    $show-&gt;bind('&lt;KeyPress-Return&gt;', \&amp;show_man);

    $top-&gt;Label('-text' =&gt; 'Search:'
                )-&gt;pack('-side' =&gt; 'left', '-padx' =&gt; 10);
    $search = $top-&gt;Entry ('-width' =&gt; 20,
                           )-&gt;pack('-side' =&gt; 'left');
    $search-&gt;bind('&lt;KeyPress-Return&gt;', \&amp;search);
}</PRE
><P
CLASS="para"
>Please take a look at the file <I
CLASS="filename"
>perlman.pl</I
>, packaged with the rest of this book's software and available from O'Reilly's FTP site. You can, if you wish, make a few valuable (and simple) additions to this utility: Add caching of formatted manual pages and the ability to show all man pages for a given topic name (not just the first one in MANPATH).<EM
CLASS="emphasis"
></EM
><A
CLASS="indexterm"
NAME="ch16-idx-996421-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-996421-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-996421-2"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-996421-3"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_01.htm"
TITLE="16.1 man and perlman"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.1 man and perlman"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_03.htm"
TITLE="16.3 Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.3 Resources"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>16.1 man and perlman</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>16.3 Resources</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
