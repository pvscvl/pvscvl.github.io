<HTML
><HEAD
>
<TITLE>17.4 Jeeves Implementation (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:39:49Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. Template-Driven Code Generation"><LINK
REL="prev"
HREF="ch17_03.htm"
TITLE="17.3 Jeeves Overview"><LINK
REL="next"
HREF="ch17_05.htm"
TITLE="17.5 Sample Specification Parser"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_03.htm"
TITLE="17.3 Jeeves Overview"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.3 Jeeves Overview"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. Template-Driven Code Generation"
>Chapter 17<BR>Template-Driven Code Generation</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_05.htm"
TITLE="17.5 Sample Specification Parser"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.5 Sample Specification Parser"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch17-21991"
>17.4 Jeeves Implementation</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-977909-0"
></A
>In the following pages, we implement all the components of the Jeeves framework. You may find it helpful to run <KBD
CLASS="command"
>jeeves</KBD
> for a sample problem and have a copy of the output handy.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-974095"
>17.4.1 AST Module</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch17-idx-977938-0"
></A
>AST module is a very simple library, so we will look at only a few of the more interesting procedures below. </P
><P
CLASS="para"
>An AST node is a container of properties, so a hash table suits the job perfectly. Each node is given a name for ease of debugging:</P
><PRE
CLASS="programlisting"
>package Ast;
use strict;
sub <B
CLASS="emphasis.bold"
>new</B
> {
    my ($pkg, $name) = @_;
    bless {'ast_node_name' =&gt; $name}, $pkg;
}</PRE
><P
CLASS="para"
><KBD
CLASS="command"
>new</KBD
>, <KBD
CLASS="command"
>add_prop</KBD
><A
CLASS="indexterm"
NAME="ch17-idx-977939-0"
></A
>, and <KBD
CLASS="command"
>add_prop_list</KBD
> are used by all specification parsers to create AST objects:</P
><PRE
CLASS="programlisting"
>sub <B
CLASS="emphasis.bold"
>add_prop</B
> {
    my ($node, $prop_name, $prop_value) = @_;
    $node-&gt;{$prop_name} = $prop_value;
}
sub <B
CLASS="emphasis.bold"
>add_prop_list</B
> {
    my ($node, $prop_name, $node_ref) = @_;
    if (! exists $node-&gt;{$prop_name}) {
        $node-&gt;{$prop_name} = [];
    }
    push (@{$node-&gt;{$prop_name}}, $node_ref);
}</PRE
><P
CLASS="para"
><KBD
CLASS="command"
>add_prop</KBD
> simply adds a name-value pair to the AST object. <KBD
CLASS="command"
>add_prop_list</KBD
><A
CLASS="indexterm"
NAME="ch17-idx-977940-0"
></A
> creates a list-valued property. The property value is an anonymous array that contains references to other AST nodes. You can have your own list-valued properties, but you should never use them as an argument to <KBD
CLASS="command"
>@foreach</KBD
> because it assumes that the elements of that list are AST nodes.</P
><PRE
CLASS="programlisting"
>my @saved_values_stack;
sub <B
CLASS="emphasis.bold"
>visit</B
> {
    no strict 'refs';
    my $node = shift;
    package main;
    my ($var, $val, $old_val, %saved_values);
    while (($var,$val) = each %{$node}) {
        if (defined ($old_val = $$var)) {
           $saved_values{$var} = $old_val;
        }
        $$var = $val;
    }
    push (@saved_values_stack, \%saved_values);
}</PRE
><P
CLASS="para"
>The <KBD
CLASS="command"
>visit</KBD
><A
CLASS="indexterm"
NAME="ch17-idx-977941-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-977941-1"
></A
> and <KBD
CLASS="command"
>bye</KBD
> methods are used by the intermediate Perl file. <KBD
CLASS="command"
>$node</KBD
> is the node being visited, so <KBD
CLASS="command"
>%$node</KBD
> is the corresponding hash table. <KBD
CLASS="command"
>$var</KBD
> is a property name such as <CODE
CLASS="literal"
>class_name</CODE
>, so to check whether a variable such as <KBD
CLASS="command"
>$class_name</KBD
> already exists, we use symbolic references: <KBD
CLASS="command"
>if</KBD
> <KBD
CLASS="command"
>defined($$var</KBD
>). All such variables that existed before are squirreled away into a hash table (<KBD
CLASS="command"
>%saved_values</KBD
>), which is then pushed into a stack. This stack represents collections of such saved values.</P
><PRE
CLASS="programlisting"
>sub <B
CLASS="emphasis.bold"
>bye</B
> {
    my $rh_saved_values = pop(@saved_values_stack);
    no strict 'refs';
    package main;
    my ($var,$val);
    while (($var,$val) = each %$rh_saved_values) {
        $$var = $val;
    }
}</PRE
><P
CLASS="para"
><KBD
CLASS="command"
>bye()</KBD
> simply pops this stack and restores the global variables to their former values. Incidentally, since <KBD
CLASS="command"
>use</KBD
> <KBD
CLASS="command"
>strict</KBD
> doesn't encourage symbolic references, we have to explicitly turn it off for a short while with <KBD
CLASS="command"
>no</KBD
> <KBD
CLASS="command"
>strict</KBD
> <KBD
CLASS="command"
>'refs'</KBD
>.<A
CLASS="indexterm"
NAME="ch17-idx-977947-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-967470"
>17.4.2 Template Parser</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-977945-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-977945-1"
></A
>The template parser supports the directives in <A
CLASS="xref"
HREF="ch17_04.htm"
TITLE="Directives Recognized by Jeeves"
>Table 17.1</A
>.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch17-39818"
>Table 17.1: Directives Recognized by Jeeves</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>Directive</B
></P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>Description</B
></P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>@//</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Comment. This line is not output</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>@foreach var [condition]
@end</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>This loops through each element of <CODE
CLASS="literal"
>var</CODE
>  (it is assumed that <CODE
CLASS="literal"
>var</CODE
> is an array) and executes the body if the (optional) condition is true. Conditions are simply pieces of embedded Perl code and can be used like this:</P
><PRE
CLASS="programlisting"
>@FOREACH attr_list ($className eq &quot;Test&quot;)</PRE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>@if @elsif @else @end</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Translates directly to Perl's <KBD
CLASS="command"
>if</KBD
> statement.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>@openfile filename 
              [options]</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>All statements following this line are simply sent to this file until another <CODE
CLASS="literal"
>@OPENFILE</CODE
> is encountered. Options are: </P
><P
CLASS="para"
><KBD
CLASS="command"
>-append</KBD
>: open the file in append mode</P
><P
CLASS="para"
><KBD
CLASS="command"
>-no_overwrite</KBD
>: do not overwrite the file if it already exists</P
><P
CLASS="para"
><KBD
CLASS="command"
>-only_if_different</KBD
>: overwrites the file only if it is different. Useful in a <KBD
CLASS="command"
>make</KBD
> environment, where you don't want to unnecessarily touch files.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>@perl</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>For embedding Perl code, provided as an escape to a higher power.</P
><PRE
CLASS="programlisting"
>@perl $user_name = $ENV{USER};
@perl print $user_name;</PRE
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The following template parser code simply translates all template directives to corresponding pieces of Perl code in the intermediate files. Explanations follow each subroutine definition.</P
><PRE
CLASS="programlisting"
>package TemplateParser;
use strict;</PRE
><PRE
CLASS="programlisting"
></PRE
><PRE
CLASS="programlisting"
>sub <B
CLASS="emphasis.bold"
>parse</B
> {
    # Args : template file, intermediate perl file
    my ($pkg,$template_file, $inter_file) = @_;
    unless (open (T, $template_file)) {
        warn &quot;$template_file : $@&quot;;
        return 1;
    }
    open (I, &quot;&gt; $inter_file&quot;) || 
        die &quot;Error opening intermediate file $inter_file : $@&quot;;
    
    emit_opening_stmts($template_file);
    my $line;
    while (defined($line = &lt;T&gt;)) {
        if ($line !~ /^\s*\@/) { # Is it a command?
            emit_text($line);
            next;
        } 
        if ($line =~ /^\s*\@OPENFILE\s*(.*)\s*$/i) {
            emit_open_file ($1);
        } elsif ($line =~ /^\s*\@FOREACH\s*(\w*)\s*(.*)\s*/i) {
            emit_loop_begin ($1,$2);
        } elsif ($line =~ /^\s*\@END/i) {
            emit_loop_end();
        } elsif ($line =~ /^\s*\@PERL(.*)/i) {
            emit_perl(&quot;$1\n&quot;);
        };
    }
    emit_closing_stmts();
    
    close(I);
    return 0;
}</PRE
><P
CLASS="para"
>TemplateParser::parse is called by the driver, with the name of the template file. For every line in the template, it checks to see whether that line is a command or ordinary text and calls the appropriate "emit" routine. All emitted code is shown in italics.</P
><PRE
CLASS="programlisting"
>sub <B
CLASS="emphasis.bold"
>emit_opening_stmts</B
> {
    my $template_file = shift;
    emit(&quot;# Created automatically from $template_file&quot;);
    emit(&lt;&lt;'_EOC_');
<EM
CLASS="emphasis"
>use Ast;</EM
>
<EM
CLASS="emphasis"
>use JeevesUtil;</EM
>

<EM
CLASS="emphasis"
>$tmp_file = &quot;jeeves.tmp&quot;;</EM
>
<EM
CLASS="emphasis"
>sub open_file;</EM
>
<EM
CLASS="emphasis"
>if (! (defined ($ROOT) &amp;&amp; $ROOT)) {</EM
>
<EM
CLASS="emphasis"
>    die &quot;ROOT not defined \n&quot;;</EM
>
<EM
CLASS="emphasis"
>}</EM
>

<EM
CLASS="emphasis"
>$file = &quot;&gt; -&quot;;   # Assumes STDOUT, unless @OPENFILE changes it.</EM
>
<EM
CLASS="emphasis"
>open (F, $file) || die $@;</EM
>
<EM
CLASS="emphasis"
>$code = &quot;&quot;;</EM
>
<EM
CLASS="emphasis"
>$ROOT-&gt;visit();</EM
>
_EOC_
}</PRE
><P
CLASS="para"
>All pieces of code that go into the intermediate file (<EM
CLASS="emphasis"
>emitted</EM
>) are shown in italics. Perl's "<A
CLASS="indexterm"
NAME="ch17-idx-977948-0"
></A
>here document" feature is used extensively because we can use quotes and newlines without restrictions. <KBD
CLASS="command"
>emit_opening_statement</KBD
><A
CLASS="indexterm"
NAME="ch17-idx-977950-0"
></A
> visits the syntax tree's root node (the driver makes it available as a global variable called <KBD
CLASS="command"
>$ROOT</KBD
>). By default, all output from the intermediate file is to standard output until it comes across an <KBD
CLASS="command"
>@openfile</KBD
> directive.</P
><PRE
CLASS="programlisting"
>sub <B
CLASS="emphasis.bold"
>emit_open_file</B
> {
    my $file = shift;
    my $no_overwrite      = ($file =~ s/-no_overwrite//gi) ? 1 : 0;
    my $append            = ($file =~ s/-append//gi) ? 1 : 0;
    my $only_if_different = ($file =~ s/-only_if_different//gi) ? 1 : 0;
    $file =~ s/\s*//g;
    emit (&lt;&lt;&quot;_EOC_&quot;);
# Line $.
open_file(\&quot;$file\&quot;, $no_overwrite, $only_if_different, $append);
_EOC_
}</PRE
><P
CLASS="para"
><KBD
CLASS="command"
>emit_open_file</KBD
><A
CLASS="indexterm"
NAME="ch17-idx-977949-0"
></A
> contains the translation for <KBD
CLASS="command"
>@openfile</KBD
> and simply emits a call to the utility function <EM
CLASS="emphasis"
>open_file</EM
> (discussed later).</P
><PRE
CLASS="programlisting"
>sub <B
CLASS="emphasis.bold"
>emit_loop_begin</B
> {
    my $l_name = shift; # Name of the list variable
    my $condition = shift;
    my $l_name_i = $l_name . &quot;_i&quot;;
emit (&lt;&lt;&quot;_EOC_&quot;);
<CODE
CLASS="replaceable"
><I
># Line $.</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>foreach \$$l_name_i (\@\${$l_name}) {</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>    \$$l_name_i</I
></CODE
>-&gt;<CODE
CLASS="replaceable"
><I
>visit ();</I
></CODE
>
_EOC_
    if ($condition) {
        emit (&quot;<CODE
CLASS="replaceable"
><I
>next if (! ($condition));\n</I
></CODE
>&quot;);
    }
}
sub <B
CLASS="emphasis.bold"
>emit_loop_end</B
> {
    emit(&lt;&lt;&quot;_EOC_&quot;);
<CODE
CLASS="replaceable"
><I
>#Line $.</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>    Ast-&gt;bye();</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>}</I
></CODE
>
_EOC_
}</PRE
><P
CLASS="para"
>We saw earlier the code generated for a <KBD
CLASS="command"
>@foreach</KBD
> directive. Note how we manufacture the iterator name and protect certain expressions from getting interpolated. This code can be better understood by looking at the sample output.</P
><PRE
CLASS="programlisting"
>sub <B
CLASS="emphasis.bold"
>emit</B
> {
    print I $_[0];
}
sub <B
CLASS="emphasis.bold"
>emit_perl</B
> {
    emit(<CODE
CLASS="replaceable"
><I
>$_[0]</I
></CODE
>);
}
sub <B
CLASS="emphasis.bold"
>emit_text</B
> {
    my $text = $_[0];
    chomp $text;
    # Escape quotes in the text
    $text =~ s/&quot;/\\&quot;/g;
    $text =~ s/'/\\'/g;
    emit(&lt;&lt;&quot;_EOC_&quot;);
<CODE
CLASS="replaceable"
><I
>output(&quot;$text\\n&quot;);</I
></CODE
>
_EOC_
}

sub <B
CLASS="emphasis.bold"
>emit_closing_stmts</B
> {
    emit(&lt;&lt;'_EOC_');
<CODE
CLASS="replaceable"
><I
>Ast::bye();</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>close(F);</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>unlink ($tmp_file);</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>sub open_file {</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>    my ($a_file, $a_nooverwrite, $a_only_if_different, $a_append) = @_;</I
></CODE
>

<CODE
CLASS="replaceable"
><I
>    #First deal with the file previously opened</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>    close (F);</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>    if ($only_if_different) {</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>        if (JeevesUtil::compare ($orig_file, $curr_file) != 0) {</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>            rename ($curr_file, $orig_file) || </I
></CODE
>
<CODE
CLASS="replaceable"
><I
>            die &quot;Error renaming $curr_file  to $orig_file&quot;;</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>        }</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>    }</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>    #Now for the new file ...</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>    $curr_file = $orig_file = $a_file;</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>    $only_if_different = ($a_only_if_different &amp;&amp; (-f $curr_file)) </I
></CODE
>
<CODE
CLASS="replaceable"
><I
>                         ? 1 : 0;</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>    $no_overwrite = ($a_nooverwrite &amp;&amp; (-f $curr_file))  ? 1 : 0;</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>    $mode =  ($a_append) ? &quot;&gt;&gt;&quot; : &quot;&gt;&quot;;</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>    if ($only_if_different) {</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>        unlink ($tmp_file);</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>        $curr_file = $tmp_file;</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>    }</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>    if (! $no_overwrite) {</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>        open (F, &quot;$mode $curr_file&quot;) || die &quot;could not open $curr_file&quot;;</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>    }</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>}</I
></CODE
>

<CODE
CLASS="replaceable"
><I
>sub output {</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>    print F @_ (! $no_overwrite);</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>}</I
></CODE
>
<CODE
CLASS="replaceable"
><I
>1;</I
></CODE
>
_EOC_
}</PRE
><P
CLASS="para"
>The <KBD
CLASS="command"
>open_file</KBD
> and <KBD
CLASS="command"
>output</KBD
> routines are present in all intermediate code files (for no particular reason&nbsp;- they might as well have been put in the JeevesUtil package). <KBD
CLASS="command"
>open_file</KBD
> closes the previously opened file. If you say, <KBD
CLASS="command"
>@openfile foo -only_if_different</KBD
>, the intermediate file dumps the template output into a temporary file, and when it is done, it compares this temporary file to the contents of <KBD
CLASS="command"
>foo</KBD
>, and overwrites it only if it is different.<A
CLASS="indexterm"
NAME="ch17-idx-977952-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-977952-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-972476"
>17.4.3 Jeeves Driver</A
></H3
><P
CLASS="para"
>The <EM
CLASS="emphasis"
>jeeves</EM
><A
CLASS="indexterm"
NAME="ch17-idx-977954-0"
></A
> script is merely a driver that first calls the template parser to produce the intermediate file, then calls the input parser (its <KBD
CLASS="command"
>parse()</KBD
> method, actually) to produce the syntax tree, and finally <CODE
CLASS="literal"
>eval</CODE
>s the intermediate file. The template file is recompiled only if it is newer than the intermediate file.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch17_04.htm"
TITLE="Jeeves"
>Example 17.3</A
> gives the code for <EM
CLASS="emphasis"
>jeeves</EM
>, minus the uninteresting stuff (such as <KBD
CLASS="command"
>process_args()</KBD
>).</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch17-39311"
>Example 17.3: Jeeves</A
></H4
><PRE
CLASS="programlisting"
>#!/opt/bin/perl
# process_args initializes the following global variables:
#   $spec_file     - Name of the input specification (emp.om)
#   $template_file - Name of the template file (oo.tpl)
#   $inter_file    - name of the intermediate file 
#                        (defaults to &quot;${template_file}.pl&quot;
process_args();  
#-------------------------------------------------------------------------
# Parse the template file
#-------------------------------------------------------------------------
# Use &quot;require&quot; to allow process_args() to set @INC first
require 'TemplateParser.pm';
my $compile_template = 1;
if ((-e $inter_file) &amp;&amp;
    (-M $inter_file) &gt;= (-M $template_file)) {
        $compile_template = 0; # Don't compile if inter-file is newer.
}
if ($compile_template) {
    if (TemplateParser-&gt;parse ($template_file, $inter_file) == 0) {
        print STDERR (&quot;Translated $template_file to $inter_file\n&quot;)
           if $verbose;
    } else {
        die &quot;Could not parse template file - exiting\n&quot;;
    }
}
#-------------------------------------------------------------------------
# Parse the input specification file
#-------------------------------------------------------------------------
require &quot;${spec_parser}.pm&quot;; $spec_parser-&gt;import;
$ROOT = $spec_parser-&gt;parse($spec_file);
print STDERR (&quot;Parsed $spec_file\n&quot;) if $verbose;
$ROOT-&gt;print() if $debugging;
#-------------------------------------------------------------------------
# Eval the intermediate Perl file
#-------------------------------------------------------------------------
require &quot;$inter_file&quot;;
die &quot;$@\n&quot; if $@;
exit(0);


#-------------------------------------------------------------------------
sub Usage {
    print STDERR &lt;&lt;&quot;_EOT_&quot;;

Usage: jeeves &lt;options&gt; &lt;specification file&gt;
 where options are: 
 -t &lt;template file&gt;            : Name of the template file. 
                                 Default : &quot;./jeeves.template&quot;
                                 Default template directory = &quot;.&quot;, which
                                 can be modified by setenv-ing
                                 &quot;JEEVESTEMPLATEDIR&quot;
 -q                            : Quiet Mode
 -d                            : Set a debugging trace. This is NOT quiet!
 -s &lt;specification parser&gt;     : Parser module that can parse the input
                                 specification file
                                 Default : &quot;oo_schema&quot;
[-ti &lt;intermediate perl file&gt;] : jeeves translates the template file to
                               : perl code. Default : &quot;&lt;template&gt;.pl&quot;
-D var[=value]                 : Define variables on the command line 

The command line can be specified in the envt. variable &quot;JEEVESOPTIONS&quot;.

The pathname to all Jeeves modules can be set in the envt. variable 
    &quot;JEEVESLIBDIR&quot; (colon-separated);
_EOT_
    exit(1);<A
CLASS="indexterm"
NAME="ch17-idx-977931-0"
></A
>
}<A
CLASS="indexterm"
NAME="ch17-idx-977913-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-977913-1"
></A
></PRE
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_03.htm"
TITLE="17.3 Jeeves Overview"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.3 Jeeves Overview"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_05.htm"
TITLE="17.5 Sample Specification Parser"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.5 Sample Specification Parser"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>17.3 Jeeves Overview</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>17.5 Sample Specification Parser</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
