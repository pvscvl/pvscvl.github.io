<HTML
><HEAD
>
<TITLE>Preface</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:28:09Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Advanced Perl Programming"><LINK
REL="next"
HREF="prf1_02.htm"
TITLE="Why Perl?"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>&nbsp;</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Preface</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="prf1_02.htm"
TITLE="Why Perl?"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: Why Perl?"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="preface"
><H1
CLASS="preface"
><A
CLASS="title"
NAME="ch00-pgfId-952651"
>Preface</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch00-41640"
TITLE="The Case for Scripting"
>The Case for Scripting</A
><BR><A
CLASS="sect1"
HREF="prf1_02.htm"
TITLE="Why Perl?"
>Why Perl?</A
><BR><A
CLASS="sect1"
HREF="prf1_03.htm"
TITLE="What Must I Know?"
>What Must I Know?</A
><BR><A
CLASS="sect1"
HREF="prf1_04.htm"
TITLE="The Book's Approach"
>The Book's Approach</A
><BR><A
CLASS="sect1"
HREF="prf1_05.htm"
TITLE="Conventions"
>Conventions</A
><BR><A
CLASS="sect1"
HREF="prf1_06.htm"
TITLE="Resources"
>Resources</A
><BR><A
CLASS="sect1"
HREF="prf1_07.htm"
TITLE="Perl Resources"
>Perl Resources</A
><BR><A
CLASS="sect1"
HREF="prf1_08.htm"
TITLE="We'd Like to Hear from You"
>We'd Like to Hear from You</A
><BR><A
CLASS="sect1"
HREF="prf1_09.htm"
TITLE="Acknowledgments"
>Acknowledgments</A
></P
><P
></P
></DIV
><DIV
CLASS="epigraph"
ALIGN="right"
><P
CLASS="para"
ALIGN="right"
><I
>Errors, like straws, upon the surface flow;<BR>He who would search for pearls must dive below.</I
></P
><P
CLASS="attribution"
ALIGN="right"
>-&nbsp;John Dryden, <CITE
CLASS="citetitle"
>All for Love</CITE
>, Prologue</P
></DIV
><P
CLASS="para"
>This book has two  goals: to make you a Perl expert, and, at a broader level, to supplement your current arsenal of techniques and tools for crafting applications. It covers advanced features of the Perl language, teaches you how the <KBD
CLASS="command"
>perl</KBD
> interpreter works, and presents areas of modern computing technology such as networking, user interfaces, persistence, and code generation.</P
><P
CLASS="para"
>You will not merely dabble with language syntax or the APIs of different modules as you read this book. You will spend just as much time dealing with real-world issues such as avoiding deadlocks during remote procedure calls and switching smoothly between data storage using a flat file or a database. Along the way, you'll become comfortable with such Perl techniques as run-time evaluation, nested data structures, objects, and closures.</P
><P
CLASS="para"
>This book expects you to know the essentials of Perl&nbsp;- a minimal subset, actually; you must be conversant with the basic data types (scalars, arrays, and hashes), regular expressions, subroutines, basic control structures (<CODE
CLASS="literal"
>if</CODE
>, <CODE
CLASS="literal"
>while</CODE
>, <CODE
CLASS="literal"
>unless</CODE
>, <CODE
CLASS="literal"
>for</CODE
>, <CODE
CLASS="literal"
>foreach</CODE
>), file I/O, and standard variables such as <KBD
CLASS="command"
>@ARGV</KBD
> and <KBD
CLASS="command"
>$_</KBD
>. Should this not be the case, I recommend Randal Schwartz and Tom Christiansen's excellent tutorial, <A
CLASS="citetitle"
HREF="../../../../../../../www.oreilly.com/catalog/lperl2/"
TITLE="Learning Perl"
><CITE
CLASS="citetitle"
>Learning Perl</CITE
></A
>, Second Edition.</P
><P
CLASS="para"
>The book&nbsp;- in particular, this preface&nbsp;- substantiates two convictions of mine. </P
><P
CLASS="para"
>The first is that a two-language approach is most appropriate for tackling typical large-application projects: a scripting language (such as Perl, Visual Basic, Python, or Tcl) in conjunction with a systems programming language (C, C++, Java). A scripting language has weak compile-time type checking, has high-level data structures (for instance, Perl's hash table is a fundamental type; C has no such thing), and does not typically have a separate compilation-linking phase. A systems programming language is typically closer to the operating system, has fine-grained data types (C has short, int, long, unsigned int, float, double, and so on, whereas Perl has a scalar data type), and is typically faster than interpreted languages. Perl spans the language spectrum to a considerable degree: It performs extremely well as a scripting language, yet gives you low-level access to operating system API, is much faster than Java (as this book goes to press), and can optionally be compiled.</P
><P
CLASS="para"
>The distinction between scripting and systems programming languages is a contentious one, but it has served me well in practice. This point will be underscored in the last three chapters of the book (on extending Perl, embedding Perl, and Perl internals).</P
><P
CLASS="para"
>I believe that neither type of language is properly equipped to handle sophisticated application projects satisfactorily on its own, and I hope to make the case for Perl and C/C++ as the two-language combination mentioned earlier. Of course, it would be most gratifying, or <EM
CLASS="emphasis"
>totally tubular</EM
>, as the local kids are wont to say, if the design patterns and lessons learned in this book help you even if you were to choose other languages.</P
><P
CLASS="para"
>The second conviction of mine is that to deploy effective applications, it is not enough just to know the language syntax well. You must know, in addition, the internals of the language's environment, and you must have a solid command of technology areas such as networking, user interfaces, databases, and so forth (specially issues that transcend language-specific libraries). </P
><P
CLASS="para"
>Let's look at these two points in greater detail.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch00-41640"
>The Case for Scripting</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch00-idx-954918-0"
></A
>I started my professional life building entire applications in assembler, on occasion worrying about trying to save 100 bytes of space and optimizing away that one extra instruction. C and PL/M changed my world view. I found myself getting a chance to reflect on the application as a whole, on the life-cycle of the project, and on how it was being used by the end-user. Still, where efficiency was paramount, as was the case for interrupt service routines, I continued with assembler. (Looking back, I suspect that the PL/M compiler could generate far better assembly code than I, but my vanity would have prevented such an admission.)</P
><P
CLASS="para"
>My applications' requirements continued to increase in complexity; in addition to dealing with graphical user interfaces, transactions, security, network transparency, and heterogeneous platforms, I began to get involved in designing software architectures for problems such as aircraft scheduling and network management. My own efficiency had become a much more limiting factor than that of the applications. While object orientation was making me more effective at the design level, the implementation language, C++, and the libraries and tools available weren't helping me raise my level of programming. I was still dealing with low-level issues such as constructing frameworks for dynamic arrays, meta-data, text manipulation, and memory management. Unfortunately, environments such as Eiffel, Smalltalk, and the NeXT system that dealt with these issues effectively were never a very practical choice for my organization. You might understand why I have now become a raucous cheerleader for Java as the application development language of choice. The story doesn't end there, though.</P
><P
CLASS="para"
>Lately, the realization has slowly crept up on me that I have been ignoring two big time-sinks at either end of a software life-cycle. At the designing end, sometimes the only way to clearly understand the problem is to create an electronic storyboard (prototype). And later, once the software is implemented, users are always persnickety (er, discerning) about everything they can <EM
CLASS="emphasis"
>see</EM
>, which means that even simple form-based interfaces are constantly tweaked and new types of reports are constantly requested. And, of course, the sharper developers wish to move on to the next project as soon as the software is implemented. These are occasions when scripting languages shine. They provide quick turnaround, dynamic user interfaces, terrific facilities for text handling, run-time evaluation, and good connections to databases and networks. Best of all, they don't need prima donna programmers to baby-sit them. You can focus your attention on making the application much more user-centric, instead of trying to figure out how to draw a pie chart using Xlib's[<A
CLASS="footnote"
HREF="#ch00-pgfId-953780"
>1</A
>] lines and circles.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch00-pgfId-953780"
>[1]</A
> X Windows Library. Someone once mentioned that programming X Windows is like taking the square root of a number using Roman numerals!</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Clearly, it is not practical to develop complex applications in a scripting language alone; you still want to retain features such as performance, fine-grained data structures, and type safety (crucial when many programmers are working on one problem). This is why I am now an enthusiastic supporter of using scripting languages <EM
CLASS="emphasis"
>along with</EM
> C/C++ (or Java when it becomes practical in terms of performance). Many people have been reaping enormous benefits from this <I
CLASS="firstterm"
>component-based</I
><A
CLASS="indexterm"
NAME="ch00-idx-954926-0"
></A
> approach, in which the components are written in C and woven together using a scripting language. Just ask any of the zillions of Visual Basic, PowerBuilder, Delphi, Tcl, and Perl programmers&nbsp;- or, for that matter, Microsoft Office and Emacs users. </P
><P
CLASS="para"
>For a much more informed and eloquent (not to mention controversial) testimonial to the scripting approach, please read the paper by Dr. John <A
CLASS="indexterm"
NAME="ch00-idx-954927-0"
></A
>Ousterhout,[<A
CLASS="footnote"
HREF="#ch00-pgfId-949641"
>2</A
>] available at <A
CLASS="systemitem.url"
HREF="../../../../../../../www.scriptics.com/people/john.ousterhout/"
>http://www.scriptics.com/people/john.ousterhout/</A
>.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch00-pgfId-949641"
>[2]</A
> Inventor of Tcl (Tool Command Language, pronounced "tickle").</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>For an even better feel for this argument, play with the Tcl plug-in for Netscape (from the same address), take a look at the sources for Tcl applets ("Tclets"), and notice how compactly you can solve simple problems. A 100-line applet for a calculator, including the UI? I suspect that an equivalent Java applet would not take fewer than 800 lines and would be far less flexible.<A
CLASS="indexterm"
NAME="ch00-idx-954920-0"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>&nbsp;</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="prf1_02.htm"
TITLE="Why Perl?"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: Why Perl?"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>&nbsp;</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>Why Perl?</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
