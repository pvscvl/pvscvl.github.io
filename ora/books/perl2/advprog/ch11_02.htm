<HTML
><HEAD
>
<TITLE>11.2 Design Notes (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:36:09Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11. Implementing Object Persistence"><LINK
REL="prev"
HREF="ch11_01.htm"
TITLE="11.1 Adaptor: An Introduction"><LINK
REL="next"
HREF="ch11_03.htm"
TITLE="11.3 Implementation"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_01.htm"
TITLE="11.1 Adaptor: An Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.1 Adaptor: An Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11. Implementing Object Persistence"
>Chapter 11<BR>Implementing Object Persistence</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_03.htm"
TITLE="11.3 Implementation"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.3 Implementation"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-13378"
>11.2 Design Notes</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-989206-0"
></A
>The adaptor interface is undoubtedly simple; in this section, we will ask ourselves whether it is too simplistic. The Adaptor implementation is still at the level of a prototype but, as we shall see in the next few pages, is significant enough to challenge us on all the issues that the people working with object persistence are trying to grapple with. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-984240"
>11.2.1 Design Goals</A
></H3
><P
CLASS="para"
>I wanted the Adaptor API to be <EM
CLASS="emphasis"
>transparent</EM
><A
CLASS="indexterm"
NAME="ch11-idx-989216-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989216-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989216-2"
></A
> ; that is, to be able to change the type of persistent store at will. The idea was to write small prototypes without messing around with databases and then migrate to a database for the real thing by simply changing the adaptor. Further, I wanted to retain the flexibility of an object living in multiple persistent stores concurrently, because that is the only way to copy objects from one store to another.</P
><P
CLASS="para"
>I wanted to retain the best features of memory-based data structures (navigability, speed, ease of use) and those of databases (transactions, concurrency, queries), where available. Finally, I did not want the adaptor to break object encapsulation, which means that the implementation could not assume anything about how a module stores instance-specific information and, more subtly, how it constructs its objects. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-984299"
>11.2.2 Object Encapsulation</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-989217-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989217-1"
></A
>One important stricture that we easily forget is that an object is not just data. The three serialization modules we saw in the last chapter&nbsp;- FreezeThaw, Data::Dumper, and Storable&nbsp;- all make this assumption. They look past an object reference at the underlying structure and serialize whatever is reachable from there. This assumes that all instance-specific data is reachable from the reference: a false assumption. For example, an object reference of type ObjectTemplate is merely a reference to a scalar. By studying that reference, you have no idea of the object's attributes. </P
><P
CLASS="para"
>There is a worse problem with the above modules: when restoring objects from a byte stream, they simply recreate the original data structure in memory and bless it under the target module, without the module's involvement. This has the possibility of missing a few key initializations.</P
><P
CLASS="para"
>To avoid these problems, Adaptor requires each class that wants persistence to support three methods: a constructor, <KBD
CLASS="command"
>new()</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989311-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989311-1"
></A
>, and two attribute accessor methods, <KBD
CLASS="command"
>get_attributes()</KBD
> and <KBD
CLASS="command"
>set_attributes()</KBD
>, as follows:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch11-pgfId-983280"
></A
><CODE
CLASS="literal"
>new()</CODE
>: The module must provide this constructor (a "default constructor," in C++ parlance), capable of creating an object without any input parameters. The simplest default constructor for creating hash-table-based objects looks like this:</P
><PRE
CLASS="programlisting"
>    sub new {
       bless {}; # bless a hash-table reference and return it.
    }</PRE
><P
CLASS="para"
>Of course, an even simpler alternative is to use ObjectTemplate, which provides an inheritable default constructor. As it happens, it also provides the other two methods listed next. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch11-pgfId-983285"
></A
><CODE
CLASS="literal"
>get_attributes(</CODE
><A
CLASS="indexterm"
NAME="ch11-idx-989219-0"
></A
><CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
><CODE
CLASS="literal"
>)</CODE
>: Given a list of attribute names, this method should return a list of corresponding values. For now, the restriction is that these values must be scalars (a big limitation; we will have more to say about this shortly). Because this method can be coded efficiently, it is preferable to Adaptor calling individual accessor functions. For example, if you use a hash table for your objects, you can implement this method as a hash slice:</P
><PRE
CLASS="programlisting"
>    sub get_attributes {
       my $obj = shift; # @_ now contains names of attributes
       @{$obj}{@_};     # hash slice returns corresponding values
    }</PRE
><P
CLASS="para"
>Adaptor uses the configuration file to specify the list of persistent attributes. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch11-pgfId-983316"
></A
><CODE
CLASS="literal"
>set_attributes(</CODE
><A
CLASS="indexterm"
NAME="ch11-idx-989220-0"
></A
><CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
><CODE
CLASS="literal"
>)</CODE
>: Given a list of attribute name and value pairs, this method updates the appropriate attributes. Both this function and <KBD
CLASS="command"
>get_attributes</KBD
> above must allow an attribute called <KBD
CLASS="command"
>_id </KBD
>, for reasons to be outlined shortly. </P
></LI
></OL
><P
CLASS="para"
>These methods are perfectly general functions; they are not tied to persistence in any way. In contrast, some libraries, especially in the C++ world (Microsoft Foundation Classes and the NIH library), require the object to support a streaming interface. Since a streamed object is of no use to a database, I chose to keep the attributes distinct. Besides, if we wanted to send these attributes to a file, we know we can always rely on other modules to stream them, without having to ask the object to do it for us.<A
CLASS="indexterm"
NAME="ch11-idx-989221-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-984365"
>11.2.3 Object-Adaptor Protocol</A
></H3
><P
CLASS="para"
>When storing the object, the adaptor consults the configuration information for the list of persistent attributes for that class. It gives this list to <KBD
CLASS="command"
>get_attributes</KBD
> to retrieve the corresponding values and, depending on the type of the adaptor, either serializes it to a file or updates the database with an SQL query.</P
><P
CLASS="para"
>When retrieving an object from the database, the adaptor calls <KBD
CLASS="command"
>new()</KBD
> on the appropriate class and calls <KBD
CLASS="command"
>set_attributes</KBD
> to prime the newly constructed object with data from the persistent store. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-984492"
>11.2.4 Multivalued Attributes and Database Mapping</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-989228-0"
></A
>Adaptor::DBI simply translates an object to a single row in an RDBMS table. For this reason, it requires each value returned by <KBD
CLASS="command"
>get_attributes</KBD
> to be a simple scalar (number or string, not a reference). My hope is to eventually ease this restriction with the help of <I
CLASS="filename"
>typemaps</I
>&nbsp;- pieces of code that can perform customized translations of data types.[<A
CLASS="footnote"
HREF="#ch11-pgfId-984539"
>7</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch11-pgfId-984539"
>[7]</A
> In <A
CLASS="xref"
HREF="ch18_01.htm"
TITLE="Writing an Extension: Overview"
>Section 18.1, "Writing an Extension: Overview"</A
>, we will see how the concept of typemaps is used in creating extensions. </P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Here are the currently available choices for how to handle an object with one or more non-simple-scalar attributes:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch11-pgfId-986368"
></A
><EM
CLASS="emphasis"
>Customized</EM
> <KBD
CLASS="command"
>{get,set}_attributes</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989223-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989223-1"
></A
>: <A
CLASS="indexterm"
NAME="ch11-idx-989222-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989222-1"
></A
>Adaptor::DBI allows multivalued attributes in memory. All it requires is that <KBD
CLASS="command"
>get_attributes</KBD
> translate such attributes to a simple scalar in a way that <KBD
CLASS="command"
>set_attributes</KBD
> will be able to convert back to the original structure, when the data is read back from disk. It can do this translation using FreezeThaw, Data::Dumper, <KBD
CLASS="command"
>sprintf</KBD
>, or <KBD
CLASS="command"
>pack</KBD
>; the last two are probably the best, because you can control the length of the resulting scalar (it matters because database columns have predeclared maximum sizes). The scalar can then be mapped to a database column capable of accommodating a variable number of characters (such as <CITE
CLASS="citetitle"
>VARCHAR</CITE
>) or a binary string (such as Oracle's <EM
CLASS="emphasis"
>RAW</EM
> or <EM
CLASS="emphasis"
>LONG RAW</EM
>). Incidentally, there are still a lot of problems associated with BLOB (Binary Large OBjects) columns: some databases only allow one BLOB column, and others sport an API that is completely different from that of the conventional data types.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch11-pgfId-984599"
></A
><EM
CLASS="emphasis"
>Use file storage </EM
>: <A
CLASS="indexterm"
NAME="ch11-idx-989224-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989224-1"
></A
>Adaptor::File doesn't care whether the attributes are references or ordinary scalars, because it simply hands over the attributes to Storable. In other words, <KBD
CLASS="command"
>get/set_attributes</KBD
> doesn't have to worry about multivalued attributes if you use Adaptor::File. Of course, the solution won't work if you decide to use a database adaptor tomorrow. There is also the danger that you might inadvertently store unrelated objects this way, just because they happen to be reachable from some attribute.<A
CLASS="indexterm"
NAME="ch11-idx-989226-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989226-1"
></A
></P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch11-pgfId-983657"
></A
><EM
CLASS="emphasis"
>Separate object class</EM
>: If an attribute is a reference to a sequence of homogenous records (an employee has multiple records of educational qualifications, for example), that attribute can be modeled as a separate class that gets its own table. More on this when we study object associations later in this section.</P
></LI
></OL
><P
CLASS="para"
>Since <KBD
CLASS="command"
>{get,set}_attributes</KBD
> are general methods, how do they know whether or not to serialize complex attributes? Well, they don't. If you want to make this distinction, you could have a different set of attribute <EM
CLASS="emphasis"
>names</EM
> for persistence purposes (<KBD
CLASS="command"
>db_address</KBD
>, for example) and have these methods recognize these special cases. This strategy conflicts with our original intention of not embedding db-specific code within an object. Oh, well. As Jiri Soukup notes in his book <EM
CLASS="emphasis"
>Taming C++: Pattern Classes and Persistence for Large Projects</EM
> [<A
CLASS="xref"
HREF="ch11_04.htm"
TITLE=""
>11</A
>], "It is popular to show elegant C++ programs, and elegance is not a feature of programs providing persistent data."<KBD
CLASS="command"
></KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989233-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989233-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-984530"
>11.2.5 Inheritance and Database Mapping</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-989235-0"
></A
>The common strategy for mapping an inheritance relationship to a database is to have the superclass and derived class each map to its own table. The table representing the derived class contains all the attributes of all its superclasses; in other words, the inheritance hierarchy is flattened. Another strategy&nbsp;- less commonly used&nbsp;- is to create one table with the <EM
CLASS="emphasis"
>union</EM
> of all attributes of an inheritance hierarchy and have all objects of all classes in that hierarchy use that one table. You can have an extra column identify the specific class of object. Adaptor does not have a problem with either strategy, because it puts the burden of interpreting the attribute names and values on the <KBD
CLASS="command"
>get/set</KBD
> methods.<KBD
CLASS="command"
></KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989230-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-983417"
>11.2.6 Object Identity</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-989236-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989236-1"
></A
>One key notion in OO circles is that an object has properties separate from its identity. Two objects may have identical properties but still occupy different address spaces; they will be considered <I
CLASS="filename"
>equivalent</I
>, not <I
CLASS="filename"
>identical</I
>. </P
><P
CLASS="para"
>In memory, an object's address provides its identity, and in a database, the primary key does the same. Adaptor requires each object to support an attribute called <KBD
CLASS="command"
>_id</KBD
>, so a future implementation can automatically convert relationship attributes (those that point to other objects) to the <KBD
CLASS="command"
>_id</KBD
>s of the objects on the other end. For example, if you ask an Employee object for its <KBD
CLASS="command"
>dept</KBD
> attribute, it will ask the department object it is pointing to for its <KBD
CLASS="command"
>_id</KBD
> and return that. Note that the object doesn't necessarily have to allocate memory for its <KBD
CLASS="command"
>_id</KBD
>; the <KBD
CLASS="command"
>get/set_attributes</KBD
> methods can compute it on the fly based on some other attribute. For example, an employee object can return the Social Security number or employee number when asked for its <KBD
CLASS="command"
>_id.</KBD
></P
><P
CLASS="para"
>When <KBD
CLASS="command"
>store()</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-989241-0"
></A
> is called, Adaptor supplies the object with a unique identity, if it doesn't already have one. The identity cannot be a simple global counter, because when the program restarts, it will get reset to 0, and the adaptor will start handing out numbers that might have been given to persistent objects in an earlier incarnation. Storing the counter's last value in a file is slow because you have to make sure you flush this value to the file every single time you store an object. (You never know when the program might crash.) The current implementation experiments with an alternate approach. When the program starts, it notes down the time (using <KBD
CLASS="command"
>time</KBD
>, which returns the seconds elapsed since January 1, 1970), and appends to it a five-digit counter; the combined number can be used as an object identifier. When the counter overflows, the time is again noted. If the program crashes and comes back again, the identifier is unique, unless it crashes and comes back up within one second. The trouble with this scheme is that it generates long identifiers (eight bytes, using <KBD
CLASS="command"
>pack()</KBD
>). It also does not work in a distributed setup, because there is the real possibility that two programs call <KBD
CLASS="command"
>time()</KBD
> within the same second, thus generating the same identifier. To avoid this, you have to create an even bigger identifier that incorporates the IP address of the machine.<A
CLASS="indexterm"
NAME="ch11-idx-989238-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989238-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-983742"
>11.2.7 Object Associations</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-989244-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989244-1"
></A
>An attribute that is a reference to some other object can be translated to the other object's <KBD
CLASS="command"
>_id</KBD
> value (a <I
CLASS="firstterm"
>foreign key</I
><A
CLASS="indexterm"
NAME="ch11-idx-989240-0"
></A
>, in database-speak) when storing it in a database or file. As currently implemented, Adaptor does not automatically do this translation, because I don't have a good solution to handle the following problem.</P
><P
CLASS="para"
>Assume that an employee object's <KBD
CLASS="command"
>dept</KBD
> attribute points to a department object. When storing <KBD
CLASS="command"
>dept</KBD
>, we can simply store the department object's <KBD
CLASS="command"
>_id</KBD
>. No problems so far. Now, when we retrieve the employee record back from disk, what do we do with the encoded <KBD
CLASS="command"
>dept</KBD
> attribute? Do we immediately create a department object so that the in-memory <KBD
CLASS="command"
>dept</KBD
> attribute can refer to it? If so, what data should it contain? Should we read the database to correctly populate the department object? That has the problem that an innocuous query on an employee ends up loading all kinds of objects from the database. Alternatively, should we keep the department in an uninitialized state, and only populate it the first time it is used? Further, we must ensure that when the department data is read from disk, it doesn't create a fresh new object, because one with the same identity already exists in memory. We will have more to say on this subject in the following section. For now, it eases my life a little to leave it to the objects to implement foreign key attributes. </P
><P
CLASS="para"
>Now let us look at how associations of varying cardinalities can be implemented in a database regardless of how they appear in memory.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-989242-0"
></A
>One-to-many associations such as a department containing a list of employees can be implemented as a foreign-key attribute on the <EM
CLASS="emphasis"
>many</EM
> side. That is, in the database, the employee object points <EM
CLASS="emphasis"
>back</EM
> to its containing department object, instead of the department maintaining a multivalued attribute. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-989243-0"
></A
>Many-to-many associations can be modeled as a separate class; this way, each association becomes a single record in the database. For example, an employee can work on many projects; a project has many employees working on it; we can model this relationship in a separate class called <KBD
CLASS="command"
>ProjectEmployee</KBD
>. This scheme has the additional advantage that the relationships can be queried and updated, independent of the objects they are supposed to connect. Associations with cardinalities higher than two (ternary associations, for example) map to distinct tables. Rumbaugh et al. [<A
CLASS="xref"
HREF="ch11_04.htm"
TITLE=""
>6</A
>] give an excellent treatment of database-mapping approaches.</P
><P
CLASS="para"
>All these strategies (or limitations) will change dramatically once object-relational extensions become widely available.<A
CLASS="indexterm"
NAME="ch11-idx-989246-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989246-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-36078"
>11.2.8 Uniqueness of Objects in Memory</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-989248-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989248-1"
></A
>Close on the heels of object identity issues comes a very thorny problem. Consider the following query:</P
><PRE
CLASS="programlisting"
>@emps = $db-&gt;retrieve_where ('Employee', 'age &lt; 40');</PRE
><P
CLASS="para"
>This returns a list of object references that match the query criteria. Now if you re-issue this query, it is not too much to expect it to return an identical list of objects (the same object references, that is). This means that Adaptor has to keep an in-memory cache of objects that have been retrieved from disk in previous queries, so that if a database row is reread, the corresponding object is reused. The problem with this scheme is that if this cache is in script space, it increments the reference count of all its constituent objects, which means that once an object is in this cache, it will never be freed, even if no one else is interested in it. In other words, the cache can never shrink, and in the worst case, it has a copy of all the objects present in the database. </P
><P
CLASS="para"
>One solution to this problem is to implement the cache in C and not update the reference count at all.[<A
CLASS="footnote"
HREF="#ch11-pgfId-986469"
>8</A
>] If all persistent objects were to inherit from a module called Persistent, say, then this module's <CODE
CLASS="literal"
>DESTROY</CODE
> method can be used to remove unwanted entries from this cache. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch11-pgfId-986469"
>[8]</A
> You will know how to do this once you have read <A
CLASS="xref"
HREF="ch20_01.htm"
TITLE="Perl Internals"
>Chapter 20, <CITE
CLASS="chapter"
>Perl Internals</CITE
></A
>.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch11-idx-989255-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989255-1"
></A
>Adaptor::DBI module, as currently implemented, takes the easy way out and creates a fresh set of objects for each query, leaving it to Perl to automatically deallocate them when no other object refers to them. This means that the applications developer has to be careful when modifying an object returned from a query. This is a clumsy solution, I know. In addition, there is currently no provision for <I
CLASS="firstterm"
>cache inconsistency</I
>&nbsp;- where the cache is out-of-date if someone else modifies the database. </P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch11-idx-989263-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989263-1"
></A
>Adaptor::File module does not have this problem because it maintains a list of <EM
CLASS="emphasis"
>all</EM
> objects given to its <KBD
CLASS="command"
>store()</KBD
> method (for reasons to be explained in the next section); hence successive identical queries return identical lists. <A
CLASS="indexterm"
NAME="ch11-idx-989261-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-989261-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-984963"
>11.2.9 Queries</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-989265-0"
></A
>One big reason why object-oriented databases haven't caught on is the lack of a query language (or at least a standard query language). When you have a million objects in the database, it would be a terrible thing to load every single object in memory to see whether it matches your criteria; this is a job best left to the database. Adaptor::DBI simply translates queries to equivalent SQL queries, while Adaptor::File implements a simple-minded scheme for file based objects: it converts the query expression to an <CODE
CLASS="literal"
>eval</CODE
>able Perl expression and cycles through all objects, matching them against the query specification.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-986726"
>11.2.10 Schema Evolution</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-989266-0"
></A
>Let us say you have sent your objects' data to a file, and tomorrow, some more attributes are added to the object implementation. The schema is said to have evolved. The framework has to be able to reconcile old data with newer object implementations.<A
CLASS="indexterm"
NAME="ch11-idx-989199-0"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_01.htm"
TITLE="11.1 Adaptor: An Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.1 Adaptor: An Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_03.htm"
TITLE="11.3 Implementation"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.3 Implementation"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.1 Adaptor: An Introduction</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.3 Implementation</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
