<HTML
><HEAD
>
<TITLE>Subroutine References and Closures (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:31:37Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Advanced Perl Programming"><LINK
REL="prev"
HREF="ch03_04.htm"
TITLE="3.4 Filehandles, Directory Handles, and Formats"><LINK
REL="next"
HREF="ch04_02.htm"
TITLE="4.2 Using Subroutine References"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_04.htm"
TITLE="3.4 Filehandles, Directory Handles, and Formats"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.4 Filehandles, Directory Handles, and Formats"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 4</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm"
TITLE="4.2 Using Subroutine References"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.2 Using Subroutine References"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch04-41665"
>4. Subroutine References and Closures</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch04-36372"
TITLE="4.1 Subroutine References"
>Subroutine References</A
><BR><A
CLASS="sect1"
HREF="ch04_02.htm"
TITLE="4.2 Using Subroutine References"
>Using Subroutine References</A
><BR><A
CLASS="sect1"
HREF="ch04_03.htm"
TITLE="4.3 Closures"
>Closures</A
><BR><A
CLASS="sect1"
HREF="ch04_04.htm"
TITLE="4.4 Using Closures"
>Using Closures</A
><BR><A
CLASS="sect1"
HREF="ch04_05.htm"
TITLE="4.5 Comparisons to Other Languages"
>Comparisons to Other Languages</A
><BR><A
CLASS="sect1"
HREF="ch04_06.htm"
TITLE="4.6 Resources"
>Resources</A
></P
><P
></P
></DIV
><DIV
CLASS="epigraph"
ALIGN="right"
><P
CLASS="para"
ALIGN="right"
><I
>Many are called, but few are called back.</I
></P
><P
CLASS="attribution"
ALIGN="right"
>-&nbsp;Sister Mary Tricky</P
></DIV
><P
CLASS="para"
>As with ordinary variables, subroutines can be named or anonymous, and Perl has a syntax for taking a reference to either type. Such references work rather like pointers to functions in C, and they can be used to create such sophisticated structures as the following:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch04-pgfId-947292"
></A
><EM
CLASS="emphasis"
>Dispatch tables</EM
>. Or data structures that map events to subroutine references. When an event comes in, a dispatch table is used to look up the corresponding subroutine. This is useful in creating large and efficient switch statements, finite state machines, signal handlers, and GUI toolkits.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch04-pgfId-947293"
></A
><EM
CLASS="emphasis"
>Higher-order procedures</EM
>. A higher-order procedure takes other procedures as arguments (like the C library procedure <KBD
CLASS="command"
>qsort</KBD
>) or returns new procedures. The latter feature is available only in interpreted languages such as Perl, Python, and LISP (hey, LISPers, you have lambda functions!).</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch04-pgfId-947294"
></A
><EM
CLASS="emphasis"
>Closures</EM
>. A closure is a subroutine that, when created, packages its containing subroutine's environment (all the variables it requires and that are not local to itself). </P
></LI
></UL
><P
CLASS="para"
>In the following sections, we look at the syntax for taking and managing subroutine references and subsequently use them in the applications listed. </P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-36372"
>4.1 Subroutine References</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch04-idx-950805-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-950805-1"
></A
>There's nothing particularly fancy or magical about subroutine references. In this section, we'll study how to create references to named and anonymous subroutines and how to dereference them.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-947809"
>4.1.1 References to Named Subroutines</A
></H3
><P
CLASS="para"
>We saw earlier that to take a reference to an existing variable, we prefix it with a backslash. It is much the same with subroutines. <KBD
CLASS="command"
>\&amp;mysub</KBD
> is a reference to <KBD
CLASS="command"
>&amp;mysub</KBD
>. For example:</P
><PRE
CLASS="programlisting"
>sub greet {
    print &quot;hello \n&quot;;
}
$rs = \&amp;greet; # Create a reference to subroutine greet</PRE
><P
CLASS="para"
>It is important to note that we are not<EM
CLASS="emphasis"
> calling</EM
> the <KBD
CLASS="command"
>greet</KBD
> subroutine here, in the same way that we don't evaluate the value of a scalar when we take a reference to it. </P
><P
CLASS="para"
>Contrast this to the following code, which uses parentheses: </P
><PRE
CLASS="programlisting"
>$rs = \&amp;greet();</PRE
><P
CLASS="para"
>This expression likely doesn't do what you expect. It calls <KBD
CLASS="command"
>greet</KBD
> and produces a reference to its <EM
CLASS="emphasis"
>return value</EM
>, which is the value of the last expression evaluated inside that subroutine. Since <KBD
CLASS="command"
>print</KBD
> executed last and returned a 1 or a 0 (indicating whether or not it was successful in printing the value), the result of this expression is a reference to a scalar containing 1 or 0! These are the kind of mistakes that make you wish for type-safety once in a while!</P
><P
CLASS="para"
>To summarize, do not use parentheses when taking a subroutine reference.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-947810"
>4.1.2 References to Anonymous Subroutines</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch04-idx-950813-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-950813-1"
></A
>You can create an anonymous subroutine simply by omitting the name in a subroutine declaration. In every other respect, the declaration is identical to a named one.</P
><PRE
CLASS="programlisting"
>$rs = sub {
           print &quot;hello \n&quot;;
      };</PRE
><P
CLASS="para"
>This expression returns a reference to the newly declared subroutine. Notice that because it is an expression, it requires the semicolon at the end, unlike the declaration of a named subroutine.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-25598"
>4.1.3 Dereferencing Subroutine References</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch04-idx-950817-0"
></A
>Dereferencing a subroutine reference calls the subroutine indirectly. As with data references, Perl does not care whether <KBD
CLASS="command"
>$rs</KBD
> is pointing to a named or an anonymous subroutine; dereferencing works the same way in either case.</P
><P
CLASS="para"
>It should come as no surprise that prepending <KBD
CLASS="command"
>$rs</KBD
> with the appropriate prefix&nbsp;- "<KBD
CLASS="command"
>&amp;</KBD
>", in this case&nbsp;- dereferences it:</P
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>&amp;$rs</B
>(10, 20);  # Call the subroutine indirectly</PRE
><P
CLASS="para"
>That's all there is to it.</P
><P
CLASS="para"
>Just as you can use the <KBD
CLASS="command"
>-&gt;</KBD
> syntax with arrays or hashes (<KBD
CLASS="command"
>$ra-&gt;[10]</KBD
> or <KBD
CLASS="command"
>$rh-&gt;{'k2'}</KBD
>), you can call subroutines indirectly through references, like this: </P
><PRE
CLASS="programlisting"
>$rsub-&gt;(10);</PRE
><P
CLASS="para"
>In fact, subroutine calls can be chained if the intermediate calls return subroutine references. For example:</P
><PRE
CLASS="programlisting"
>$rs = \&amp;test1;
$rs-&gt;(&quot;Batman&quot;)-&gt;(&quot;Robin&quot;); # Prints &quot;Batman and Robin&quot;

sub test1 {
    my $arg = shift;
    print &quot;$arg&quot;;
    return \&amp;test2;
}
sub test2 {
    my $arg = shift;
    print &quot; and $arg\n&quot;;
}<A
CLASS="indexterm"
NAME="ch04-idx-950819-0"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-948153"
>4.1.4 Symbolic References</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch04-idx-950821-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-950821-1"
></A
>Recall that symbolic references contain names (strings), not real references. There is no difference in syntax between real and symbolic references. Consider</P
><PRE
CLASS="programlisting"
>sub foo { print &quot;foo called\n&quot; }
$rs = &quot;foo&quot;; 
&amp;$rs();  # prints &quot;foo called&quot;</PRE
><P
CLASS="para"
>Using symbolic references is a mite slower than using real references.</P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_04.htm"
TITLE="3.4 Filehandles, Directory Handles, and Formats"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.4 Filehandles, Directory Handles, and Formats"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm"
TITLE="4.2 Using Subroutine References"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.2 Using Subroutine References"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.4 Filehandles, Directory Handles, and Formats</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.2 Using Subroutine References</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
