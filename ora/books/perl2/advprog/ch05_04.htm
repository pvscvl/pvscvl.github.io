<HTML
><HEAD
>
<TITLE>5.4 Using Eval for Expression Evaluation (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:39Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. Eval"><LINK
REL="prev"
HREF="ch05_03.htm"
TITLE="5.3 Watch Your Quotes"><LINK
REL="next"
HREF="ch05_05.htm"
TITLE="5.5 Using Eval for Efficiency"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_03.htm"
TITLE="5.3 Watch Your Quotes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.3 Watch Your Quotes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. Eval"
>Chapter 5<BR>Eval</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_05.htm"
TITLE="5.5 Using Eval for Efficiency"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.5 Using Eval for Efficiency"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-35706"
>5.4 Using Eval for Expression Evaluation</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-951186-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951186-1"
></A
>There are a number of tasks, such as parsing and expression evaluation, in which you can make Perl do all the dirty work. Assuming, of course, that your parsing requirements are similar to Perl's own. Perl, after all, knows a thing or two about parsing and evaluating Perlish statements!</P
><P
CLASS="para"
>Let's assume that your input data is a bunch of quoted strings and you would like to verify that the quotes are balanced:</P
><PRE
CLASS="programlisting"
>'He said, &quot;come on over&quot;'
'There are times when &quot;Peter&quot; doesn\'t work at all'</PRE
><P
CLASS="para"
>Instead of fretting over backslash escapes and writing code to check whether the quotes are correctly paired (balanced), you can simply <KBD
CLASS="command"
>eval</KBD
> the strings, as shown in <A
CLASS="xref"
HREF="ch05_04.htm"
TITLE="eval.pl"
>Example 5.1</A
>. Remember that a string is a correct Perl expression too. If Perl puts an error in <KBD
CLASS="command"
>$@</KBD
>, you can be sure you have faulty input.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch05-24985"
>Example 5.1: eval.pl</A
></H4
><PRE
CLASS="programlisting"
>while (defined($s = &lt;&gt;)) {          # Read a line into $s
    $result = eval $s;              # Evaluate that line
    if ($@) {                       # Check for compile or run-time errors.
        print &quot;Invalid string:\n $s&quot;;
    } else {
        print $result, &quot;\n&quot;;
    }
}</PRE
></DIV
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-951234-0"
></A
>The neat thing about this code is that it works equally well as a fancy calculator, because <KBD
CLASS="command"
>$s</KBD
> can be <EM
CLASS="emphasis"
>any</EM
> valid Perl statement, with arithmetic operators, loops, variable assignments, subroutines, and so on. Here's how you might use the program:</P
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>% perl eval.pl</B
>
<B
CLASS="emphasis.bold"
>2 * log (10);</B
>
4.60517018598809
<B
CLASS="emphasis.bold"
>$a = 10; $a += $a ** 2;</B
>
110
<B
CLASS="emphasis.bold"
>for (1..10) {print $_ , &quot; &quot; }</B
>
1 2 3 4 5 6 7 8 9 10</PRE
><P
CLASS="para"
>For each line you enter, Perl computes and prints out the result (shown in non-bold type). How much simpler a shell can you possibly ask for? Note that the code requires each input line to be a fully formed expression, so you cannot write multiline expressions, but you can always change the program to start evaluating only when the user enters a blank line.</P
><P
CLASS="para"
>It is worth contrasting these few lines with the effort of learning <EM
CLASS="emphasis"
>lex</EM
> and <EM
CLASS="emphasis"
>yacc</EM
>&nbsp;- see, for example, the <EM
CLASS="emphasis"
>yacc</EM
>, <EM
CLASS="emphasis"
>lex</EM
>, and C-based calculator ("hoc") developed by Kernighan and Pike in their classic, The Unix Programming Environment. Other static languages such as Java and C++ present similar challenges: you are forced to reinvent the wheel, since you don't have access to the power of the compiler itself.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-947223"
>5.4.1 Expression Evaluation in Substitutions</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-951240-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951240-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951240-2"
></A
>The Perl substitution operator is ordinarily of the form <KBD
CLASS="command"
>s/<CODE
CLASS="replaceable"
><I
>regex</I
></CODE
>/<CODE
CLASS="replaceable"
><I
>replacement</I
></CODE
>/</KBD
> and substitutes the replacement string wherever the input string matches the regular expression pattern. The <KBD
CLASS="command"
>/e</KBD
> flag adds a twist to this: it tells the substitution operator that the second part is a <EM
CLASS="emphasis"
>Perl expression</EM
>, not an ordinary replacement string; the <EM
CLASS="emphasis"
>result</EM
> of the expression is used as the replacement instead. Consider</P
><PRE
CLASS="programlisting"
>$line = 'Expression Evaluation';
$line =~ s/(\w+)/ <B
CLASS="emphasis.bold"
>scalar (reverse($1)) /e</B
>g;
print $line; # prints &quot;noisserpxE noitaulavE&quot;</PRE
><P
CLASS="para"
>The second parameter to the substitute operator is an expression: <KBD
CLASS="command"
>reverse</KBD
> is used in a scalar context to reverse the string given to it. The <KBD
CLASS="command"
>/g</KBD
> flag ensures that every word is matched and reversed. </P
><P
CLASS="para"
>This topic is somewhat tangential to the <KBD
CLASS="command"
>eval</KBD
> keyword, but it is still germane to our discussion about run-time expression evaluation; in fact, <KBD
CLASS="command"
>/e</KBD
> stands for "expression," not for "eval." This expression is checked for syntax at compile-time, so if you need to watch for run-time errors, you still need to put the entire statement within an <KBD
CLASS="command"
>eval</KBD
> block. Consider another example, which replaces any string containing the pattern "number/number" with an equivalent fraction:</P
><PRE
CLASS="programlisting"
>$l = 'His chances of winning are between 2/5 and 1/3';
eval {
    $l =~ s|(\d+)/(\d+)| $1 / $2 |eg;
};
print $l unless $@;</PRE
><P
CLASS="para"
>This prints "His chances of winning are between 0.4 and 0.333333333333333." The <KBD
CLASS="command"
>eval</KBD
> block traps divide-by-zero<A
CLASS="indexterm"
NAME="ch05-idx-951243-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951243-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951243-2"
></A
> errors.<A
CLASS="indexterm"
NAME="ch05-idx-951190-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951190-1"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_03.htm"
TITLE="5.3 Watch Your Quotes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.3 Watch Your Quotes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_05.htm"
TITLE="5.5 Using Eval for Efficiency"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.5 Using Eval for Efficiency"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.3 Watch Your Quotes</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.5 Using Eval for Efficiency</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
