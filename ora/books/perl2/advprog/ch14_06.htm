<HTML
><HEAD
>
<TITLE>14.6 Event Bindings (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:39:11Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch14_01.htm"
TITLE="14. User Interfaces with Tk"><LINK
REL="prev"
HREF="ch14_05.htm"
TITLE="14.5 Timers"><LINK
REL="next"
HREF="ch14_07.htm"
TITLE="14.7 Event Loops"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_05.htm"
TITLE="14.5 Timers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.5 Timers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch14_01.htm"
TITLE="14. User Interfaces with Tk"
>Chapter 14<BR>User Interfaces with Tk</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_07.htm"
TITLE="14.7 Event Loops"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.7 Event Loops"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch14-26608"
>14.6 Event Bindings</A
></H2
><P
CLASS="para"
>An <A
CLASS="indexterm"
NAME="ch14-idx-1000888-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000888-1"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000888-2"
></A
>event binding associates a <A
CLASS="indexterm"
NAME="ch14-idx-1000898-0"
></A
>callback function with any type of event. You have already seen instances of event bindings&nbsp;- the button widget's <KBD
CLASS="command"
>command</KBD
> property arranges for a user-defined procedure to be called on a mouse click, for example. The <KBD
CLASS="command"
>bind()</KBD
><A
CLASS="indexterm"
NAME="ch14-idx-1000899-0"
></A
> command provides a more general (and hence low-level) access to the most fundamental events such as keyboard and mouse button presses and releases. (A mouse click is a press and release, so we are talking about really low-level events here.) Other "interesting" event types include mouse motion, the mouse pointer entering or leaving a window, and windows getting mapped or resized on the display. All widgets themselves rely on the <KBD
CLASS="command"
>bind</KBD
> method for their own functionality, and allow you to create extra bindings yourself. The bound procedure executes if the event you're tracking happens inside that widget or is related to that widget (such as a window resize). </P
><P
CLASS="para"
>The syntax of bind is as follows:</P
><PRE
CLASS="programlisting"
>$widget-&gt;bind(<CODE
CLASS="replaceable"
><I
>event sequence, callback</I
></CODE
>);</PRE
><P
CLASS="para"
>The event sequence is a string containing a sequence of basic events, with each basic event contained in angle brackets. Examples of event sequences are as follows:</P
><PRE
CLASS="programlisting"
>&quot;&lt;a&gt;&quot;                   # Key &quot;a&quot; pressed (Control/shift/meta not
                        # pressed)
&quot;&lt;Control-a&gt;            # Control and a pressed
&quot;&lt;Escape&gt; &lt;Control-a&gt;&quot;  # Two-event sequence
&quot;&lt;Button1&gt;&quot;             # Mouse button 1 clicked
&quot;&lt;Button1-Motion&gt;&quot;      # Mouse moves while Button 1 is down</PRE
><P
CLASS="para"
>A single event (within angle brackets) has the following generic syntax:</P
><PRE
CLASS="programlisting"
>&quot;&lt;<CODE
CLASS="replaceable"
><I
>modifier-modifier...-modifier-type-detail</I
></CODE
>&gt;&quot; </PRE
><P
CLASS="para"
>Examples of <I
CLASS="firstterm"
>modifiers</I
><A
CLASS="indexterm"
NAME="ch14-idx-1000901-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000901-1"
></A
> are <CODE
CLASS="literal"
>Control</CODE
>, <CODE
CLASS="literal"
>Meta</CODE
>, <CODE
CLASS="literal"
>Alt</CODE
>, <CODE
CLASS="literal"
>Shift</CODE
>, <CODE
CLASS="literal"
>Button1</CODE
> (or <CODE
CLASS="literal"
>B1</CODE
>), <CODE
CLASS="literal"
>Button2</CODE
>, <CODE
CLASS="literal"
>Double</CODE
> (double click), and <CODE
CLASS="literal"
>Triple</CODE
>. The modifier <CODE
CLASS="literal"
>Any</CODE
> is a wildcard&nbsp;- all possible modifiers (including none of them) match the basic event.</P
><P
CLASS="para"
>The <I
CLASS="firstterm"
>type</I
> of the event is one of <KBD
CLASS="command"
>KeyPress</KBD
>, <KBD
CLASS="command"
>KeyRelease</KBD
>, <KBD
CLASS="command"
>ButtonPress</KBD
> (or <KBD
CLASS="command"
>Button</KBD
>), <KBD
CLASS="command"
>ButtonRelease</KBD
>, <KBD
CLASS="command"
>Enter</KBD
>, <KBD
CLASS="command"
>Leave</KBD
>, and <KBD
CLASS="command"
>Motion</KBD
>. </P
><P
CLASS="para"
>For <A
CLASS="indexterm"
NAME="ch14-idx-1000900-0"
></A
>keyboard event specifications, the <I
CLASS="firstterm"
>detail</I
> is a textual string describing the exact key. X Windows calls this a <EM
CLASS="emphasis"
>keysym</EM
>. For printable ASCII characters, the keysym is the printed character itself. Other examples of keysyms are <KBD
CLASS="command"
>Enter</KBD
>, <KBD
CLASS="command"
>Right</KBD
>, <KBD
CLASS="command"
>Pickup</KBD
>, <KBD
CLASS="command"
>Delete</KBD
>, <KBD
CLASS="command"
>BackSpace</KBD
>, <KBD
CLASS="command"
>Escape</KBD
>, <KBD
CLASS="command"
>Help</KBD
>, <KBD
CLASS="command"
>F1</KBD
> (function key), and so on.</P
><P
CLASS="para"
>The most common event types are key presses and button clicks, so Tk allows an abbreviated form of binding: instead of saying <KBD
CLASS="command"
>&lt;KeyPress-a&gt;</KBD
>, you can say, <KBD
CLASS="command"
>&lt;a&gt;</KBD
>; instead of writing <KBD
CLASS="command"
>&lt;Button1-ButtonPress&gt;</KBD
>, you can say, <KBD
CLASS="command"
>&lt;1&gt;</KBD
>.</P
><P
CLASS="para"
>The text and canvas widgets support bindings at a finer level of granularity. They support event bindings for different tags in addition to bindings for the widget itself. <KBD
CLASS="command"
>bind</KBD
> allows you to specify the name of the tag as the first parameter and the event sequence and callback as the second and third parameters, respectively:</P
><PRE
CLASS="programlisting"
>$text-&gt;bind('hyper-link', '&lt;1&gt;', \&amp;open_page);</PRE
><P
CLASS="para"
>This code ensures that any stretch of text tagged with "hyper-link" will respond to a button click event and call the procedure <KBD
CLASS="command"
>open_page</KBD
>.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-996204"
>14.6.1 Multiple Bindings</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000902-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000902-1"
></A
>It is possible to have several bindings to respond to the same event. For example, when a mouse button is pressed, both <KBD
CLASS="command"
>&lt;Button1&gt;</KBD
> and <KBD
CLASS="command"
>&lt;Double-Button1&gt;</KBD
> are candidates. If there's a conflict for a given widget (or tag), the rule is that the most specific binding is called. <KBD
CLASS="command"
>&lt;Double-Button1&gt;</KBD
> is more specific than <KBD
CLASS="command"
>&lt;Button1&gt;</KBD
>, since it is a longer specification.</P
><P
CLASS="para"
>In addition to matching the most specific binding at the widget level, Tk matches the most specific bindings at the class level (the class that represents all buttons, for example), then at the widget's top level, then at a level called "all." All four categories of bindings are executed. This order itself can be changed using the <KBD
CLASS="command"
>bindtags()</KBD
> method, but I recommend that you avoid doing this.</P
><P
CLASS="para"
>Although Tk allows you to change default widget bindings, I recommend that you don't modify them because people get used to them working in a certain way. For example, a double-click inside a text widget usually selects the word under the mouse pointer, and it would be quite disconcerting for a user if you happened to change that behavior. On the other hand, there are plenty of other places where you can, and need to, add your own bindings. Canvas and text widget tags are the most frequent target of event bindings, as we shall see in the next two chapters.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-996207"
>14.6.2 Event Details</A
></H3
><P
CLASS="para"
>We have seen how to specify an event accurately. There are times when we do exactly the opposite&nbsp;- make the event specifier most general, such as <KBD
CLASS="command"
>&lt;Any-KeyPress&gt;</KBD
>. For instance, you probably don't want to specify a unique binding for each character on the keyboard. But when a key is pressed, the callback might like to know which key was pressed. This is where <A
CLASS="indexterm"
NAME="ch14-idx-1000903-0"
></A
>event details come in.</P
><P
CLASS="para"
>Each event carries with it all the details related to that event, and the function <KBD
CLASS="command"
>Ev()</KBD
><A
CLASS="indexterm"
NAME="ch14-idx-1000904-0"
></A
> is used to get at those details. The parameter to <KBD
CLASS="command"
>Ev()</KBD
> is a single character that specifies the part of the event record you are interested in. <KBD
CLASS="command"
>Ev('k')</KBD
> specifies the keycode, <KBD
CLASS="command"
>Ev('x')</KBD
> and <KBD
CLASS="command"
>Ev('y')</KBD
> specify the <EM
CLASS="emphasis"
>x</EM
> and <EM
CLASS="emphasis"
>y</EM
> coordinates of the mouse pointer, and <KBD
CLASS="command"
>Ev('t')</KBD
> specifies the time of the event. There are over 30 such parameters to <KBD
CLASS="command"
>Ev</KBD
>. The following example shows how you can use this facility:</P
><PRE
CLASS="programlisting"
>$label-&gt;bind(&quot;&lt;Any-KeyPress&gt;&quot; =&gt; [\&amp;move, Ev('k')]);
sub move {
    my $key = shift;
    if ($key eq 'k') {
       move_left();
    } elsif ($key eq 'l') {
       move_right();
    }
}</PRE
><P
CLASS="para"
>In this example, the <KBD
CLASS="command"
>bind</KBD
> specification registers its interest in key events and specifies that it wants the keycode supplied to the callback procedure whenever it is invoked. <A
CLASS="indexterm"
NAME="ch14-idx-1000890-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000890-1"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000890-2"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000890-3"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_05.htm"
TITLE="14.5 Timers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.5 Timers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_07.htm"
TITLE="14.7 Event Loops"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.7 Event Loops"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>14.5 Timers</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>14.7 Event Loops</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
