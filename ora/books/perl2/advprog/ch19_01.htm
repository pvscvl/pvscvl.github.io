<HTML
><HEAD
>
<TITLE>Embedding Perl:The Easy Way (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:32Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Advanced Perl Programming"><LINK
REL="prev"
HREF="ch18_07.htm"
TITLE="18.7 Resources"><LINK
REL="next"
HREF="ch19_02.htm"
TITLE="19.2 Embedding Overview"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_07.htm"
TITLE="18.7 Resources"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.7 Resources"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 19</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_02.htm"
TITLE="19.2 Embedding Overview"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.2 Embedding Overview"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch19-26642"
>19. Embedding Perl:The Easy Way</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch19-36621"
TITLE="19.1 Why Embed?"
>Why Embed?</A
><BR><A
CLASS="sect1"
HREF="ch19_02.htm"
TITLE="19.2 Embedding Overview"
>Embedding Overview</A
><BR><A
CLASS="sect1"
HREF="ch19_03.htm"
TITLE="19.3 Examples"
>Examples</A
><BR><A
CLASS="sect1"
HREF="ch19_04.htm"
TITLE="19.4 Adding Extensions"
>Adding Extensions</A
><BR><A
CLASS="sect1"
HREF="ch19_05.htm"
TITLE="19.5 Resources"
>Resources</A
></P
><P
></P
></DIV
><DIV
CLASS="epigraph"
ALIGN="right"
><P
CLASS="para"
ALIGN="right"
><I
>A rock pile ceases to be a rock pile the moment a single man contemplates it, bearing within him the image of a cathedral.</I
></P
><P
CLASS="attribution"
ALIGN="right"
>-&nbsp;Antoine de Saint-Exupery </P
></DIV
><P
CLASS="para"
>Much as there are reasons for writing C extensions for Perl, there are any number of reasons to execute Perl scripts from within C/C++ applications; we refer to this activity as <EM
CLASS="emphasis"
>embedding</EM
> the Perl interpreter. Embedding does not mean that we wish to conceal the interpreter; it just indicates that the application retains overall control and, when required, makes calls to the Perl internal API.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-969740-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-969740-1"
></A
>This chapter introduces a simple API for embedding the Perl interpreter in your C application. These functions are not standard (that is, they have been introduced in this book), and shield you from having to know anything at all about Perl internals, reference counting, memory management, and calling conventions. Although these details will be discussed in the next chapter, you shouldn't <EM
CLASS="emphasis"
>have</EM
> to know them to get useful work done. The <I
CLASS="filename"
>perlembed</I
> document written by Jon Orwant and Doug MacEachern [<A
CLASS="xref"
HREF="ch19_05.htm"
TITLE=""
>7</A
>] provides a fine tutorial-style coverage of this subject, but expects you to be conversant with the internals.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch19-36621"
>19.1 Why Embed?</A
></H2
><P
CLASS="para"
>A C application can make use of a scripting language in different ways:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Power through scripted extensions</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Applications such as Emacs, Microsoft Office, and Autocad provide scripting language frontends. Although they work reasonably well on their own, their real power comes from the large community of developers writing scripted extensions. To paraphrase Brian Kernighan, a good tool is one that is used in ways its developers never thought of. The <EM
CLASS="emphasis"
>calc</EM
> package in Emacs is capable of doing symbolic mathematics, for example. Who would have thought of putting this in a text editor?! [<A
CLASS="footnote"
HREF="#ch19-pgfId-966352"
>1</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch19-pgfId-966352"
>[1]</A
> Of course, <EM
CLASS="emphasis"
>vi</EM
> folks would ask <EM
CLASS="emphasis"
>why </EM
>?</P
></DIV
></BLOCKQUOTE
></DD
><DT
CLASS="term"
>As glue</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Emacs is an excellent example of an application that implements its basic functionality in C for speed and operating system interfaces and everything else in LISP (it has an embedded LISP interpreter), which provide the necessary glue for the C code. The editor won't even start without some crucial LISP code.</P
></DD
><DT
CLASS="term"
>Using the scripting language's power</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>I once had to work on a Unix-based application talking to a mainframe. The files coming off the mainframe were curiously formatted, and of course, wouldn't match the specifications. Since munging files is so much easier in Perl than in C, I used Perl scripts and an embedded Perl interpreter to parse these files so that I could change the parsing strategy at will. </P
><P
CLASS="para"
>I could have chosen the easier option of spawning an external Perl script using <KBD
CLASS="command"
>system(3)</KBD
> or <KBD
CLASS="command"
>popen(3)</KBD
> and fetching its output from a temporary file or a pipe. This approach works very well for a large number of applications, as is evident from the success of CGI. There is much to be said for separating application functionality into two separately debuggable programs. But it wasn't fast enough for my application. Additionally, the data flowing across the interface wasn't simple enough, so I would have had to write a lot of code to format this data on one end and to parse it on the other. Spawning external scripts has the additional problem that it doesn't give you a persistent context. That is, every time you launch a Perl script, it doesn't remember anything from the time it was last invoked, and it would have to reopen socket connections, database connections, restart transactions, and so on. An identical approach is taken by the Apache web server [<A
CLASS="xref"
HREF="ch19_05.htm"
TITLE=""
>8</A
>].</P
></DD
><DT
CLASS="term"
>Better C code</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Writing a scripting frontend forces you to simplify the interface functions to ease the integration with the scripting language. Happily enough, this also makes life easy for other C programmers using your libraries.</P
></DD
><DT
CLASS="term"
>Instrumentation</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A scripting facility presents an opportunity to provide programmatic access to instrumentation probes embedded in the code (for monitoring performance, memory usage, dynamic assertions, etc.). For example, you can automatically set up an audit trail of all inbound user connections when the number of users exceeds 50. </P
></DD
><DT
CLASS="term"
>Powerful configuration files</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Applications may not be satisfied with simple configuration files (name-value properties, such as those provided by the Microsoft Windows Registry).</P
></DD
></DL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_07.htm"
TITLE="18.7 Resources"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.7 Resources"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_02.htm"
TITLE="19.2 Embedding Overview"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.2 Embedding Overview"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>18.7 Resources</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>19.2 Embedding Overview</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
