<HTML
><HEAD
>
<TITLE>14.7 Event Loops (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:39:15Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch14_01.htm"
TITLE="14. User Interfaces with Tk"><LINK
REL="prev"
HREF="ch14_06.htm"
TITLE="14.6 Event Bindings"><LINK
REL="next"
HREF="ch14_08.htm"
TITLE="14.8 Resources"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_06.htm"
TITLE="14.6 Event Bindings"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.6 Event Bindings"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch14_01.htm"
TITLE="14. User Interfaces with Tk"
>Chapter 14<BR>User Interfaces with Tk</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_08.htm"
TITLE="14.8 Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.8 Resources"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch14-24907"
>14.7 Event Loops</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000893-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000893-1"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000893-2"
></A
><CODE
CLASS="literal"
>MainLoop</CODE
> executes an event loop that picks up events from the underlying windowing system and dispatches it to the appropriate widgets. When a callback procedure is called in response to an event, it is the responsibility of the callback to return (or "yield") as soon as possible; otherwise, it holds up all events that have since arrived. </P
><P
CLASS="para"
>For long-running activities that are CPU-intensive, it is your responsibility to chop that activity up into manageable pieces and arrange for a timer to call the processing routine at regular intervals. This gives the event loop a chance to dispatch pending events. This kind of CPU sharing is called cooperative multitasking. Early versions of Microsoft Windows (until Version 3.1) similarly depended on your application being a good citizen; otherwise, it would hang the entire operating system.</P
><P
CLASS="para"
>For tasks such as ray-tracing and animations that are both CPU- and GUI-intensive, you can use the <KBD
CLASS="command"
>$widget-&gt;update</KBD
> method to process all events. This method doesn't return until all pending event messages (including repaint events) in the event queue have been processed. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-1000905-0"
></A
>Blocking system calls are not a very good idea in an event-driven environment, as we discussed in <A
CLASS="xref"
HREF="ch12_01.htm"
TITLE="Networking with Sockets"
>Chapter 12</A
>. The most common of these are the <KBD
CLASS="command"
>read</KBD
> and <KBD
CLASS="command"
>write</KBD
> calls, especially if they are talking to pipes and sockets. For example, the diamond operator (<KBD
CLASS="command"
>&lt;&gt;</KBD
>) blocks until it can get a line of text. Instead of directly calling an I/O call, you must let Perl/Tk tell you that it is safe to use that call, since it won't block. Tk provides a procedure called <KBD
CLASS="command"
>fileevent</KBD
> that notifies a callback when the file descriptor becomes readable or writable. This is how you use it:</P
><PRE
CLASS="programlisting"
>open (F, &quot;/tmp/foo&quot;);
$button-&gt;fileevent(F, &quot;readable&quot;, \&amp;read_file);
sub read_file {
    if (eof(F)) {
        $button-&gt;fileevent(F, &quot;readable&quot;, undef); # cancel binding
            return ;
    }
    if (sysread (F, $buf, 1024)) {
        $text-&gt;insert('end', $buf); # Append the data read
    } else {
        # sysread returned undef. Problem with file
        $text-&gt;insert('end', &quot;ERROR !!!&quot;; 
        button-&gt;fileevent(F, &quot;readable&quot;, undef); # cancel binding
    }
}</PRE
><P
CLASS="para"
>When the callback is invoked, Tk (which on Unix uses the <KBD
CLASS="command"
>select</KBD
> call internally) guarantees that at most one character is ready to be read or written. Beyond that it may or may not block; no assurances are given. The callback is also called if there's an end-of-file or error, so you must check both these conditions. Otherwise, the callback is called again as soon it returns, resulting in an infinite loop. As we discussed in the networking chapters, it is best to use nonblocking I/O if your system supports it. </P
><P
CLASS="para"
>In this chapter, we have studied widgets, event loops, timers, and event bindings. The next two chapters are designed to pull all these concepts together and to apply them to some practical problems. They also give us a chance to go beyond a mere test run of the two really neat widgets in the Tk pantheon: canvas and text.<A
CLASS="indexterm"
NAME="ch14-idx-1000896-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000896-1"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000896-2"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000896-3"
></A
></P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_06.htm"
TITLE="14.6 Event Bindings"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.6 Event Bindings"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_08.htm"
TITLE="14.8 Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.8 Resources"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>14.6 Event Bindings</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>14.8 Resources</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
