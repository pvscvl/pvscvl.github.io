<HTML
><HEAD
>
<TITLE>7.5 Comparison with Other OO Languages (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:34:24Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. Object-Oriented Programming"><LINK
REL="prev"
HREF="ch07_04.htm"
TITLE="7.4 Recap of Conventions"><LINK
REL="next"
HREF="ch07_06.htm"
TITLE="7.6 Resources"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_04.htm"
TITLE="7.4 Recap of Conventions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.4 Recap of Conventions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. Object-Oriented Programming"
>Chapter 7<BR>Object-Oriented Programming</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_06.htm"
TITLE="7.6 Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.6 Resources"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch07-29644"
>7.5 Comparison with Other OO Languages</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-969838"
>7.5.1 Tcl</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch07-idx-969865-0"
></A
>The base <A
CLASS="indexterm"
NAME="ch07-idx-969839-0"
></A
>Tcl library does not have any object-oriented features. It has recently acquired a package construct that provides a namespace for subroutines and global variables (there is no relationship between packages). Tcl is a very malleable language, and several freely available libraries strive to impose an object-oriented structure on the language. A package called <KBD
CLASS="command"
>stoop</KBD
> provides a pure Tcl solution featuring single and multiple inheritance, dynamic binding, run-time type identification, and so on. Another, called [<KBD
CLASS="command"
>incr</KBD
> <KBD
CLASS="command"
>Tcl]</KBD
>, is a slightly more ambitious effort and provides a C++-like set of keywords and facilities. <KBD
CLASS="command"
>incr Tcl</KBD
> requires a patch to Tcl, though.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-969847"
>7.5.2 Python</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch07-idx-969848-0"
></A
>Python is an excellent language for learning object orientation. (It also happens to be my favorite OO scripting language.) All facilities, including internal data structures such as lists and dictionaries (hash tables) and external libraries have consistent object-oriented interfaces. Python provides a number of hooks for class developers to write different types of accessor methods and supports multiple inheritance. All objects in Python are implemented as hash tables, unlike in Perl, in which you have to choose a representation (or looking at it more optimistically, where you are free to choose the optimal representation).</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-969836"
>7.5.3 C++ and Java</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch07-idx-969810-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-969810-1"
></A
>There are a number of significant differences between Perl and C++ in their approach to object-orientation.</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch07-pgfId-958701"
></A
><EM
CLASS="emphasis"
>Object structure </EM
>. C++ requires you to declare your object's structure using the <KBD
CLASS="command"
>class</KBD
> keyword, unlike Perl, which doesn't care how you keep your object's state&nbsp;- as a hash, array, or scalar. The only thing Perl really asks is that you return a blessed reference to that data.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch07-pgfId-958702"
></A
><EM
CLASS="emphasis"
>Privacy</EM
>. C++ has keywords to enforce various shades of privacy (<KBD
CLASS="command"
>private</KBD
>, <KBD
CLASS="command"
>protected</KBD
>, <KBD
CLASS="command"
>public</KBD
>). Perl does not enforce privacy; if you need privacy you can use lexical variables.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch07-pgfId-958703"
></A
><EM
CLASS="emphasis"
>Constructors/destructors</EM
>. C++ requires that the constructing subroutine of an object have the same name as the class. Perl doesn't have any such strictures&nbsp;- any subroutine can be a constructor (the name <KBD
CLASS="command"
>new</KBD
> is just a convention). On the other hand, when an object is going to be destroyed, both Perl and C++ require well-known destructor names. A C++ constructor is really an initializer; the memory is allocated before the constructor is given control. In Perl, it is the programmer's responsibility to do both allocation and initialization.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch07-pgfId-958704"
></A
><EM
CLASS="emphasis"
>Static versus instance methods</EM
>. C++ provides the <KBD
CLASS="command"
>static</KBD
> keyword to distinguish between static functions and object methods. Perl doesn't make that distinction&nbsp;- subroutines are indistinguishable from each other. A Perl subroutine can examine its arguments and can act as either.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch07-pgfId-958705"
></A
><EM
CLASS="emphasis"
>Declaration and definition</EM
>. C++, unlike Perl, requires that declaration of a class be independent of its implementation (unless the implementation is inline). The typical C++ convention is to put the declarations in a header file and the implementation in a separate file.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch07-pgfId-958706"
></A
><EM
CLASS="emphasis"
>Compile-time versus run-time features</EM
>. C++ requires that all class information, such as the inheritance hierarchy, the number and type of attributes and methods, and so on, be known at compile-time. Perl allows a run-time redefinition of everything; you can add, delete, or update methods or change the inheritance hierarchy by changing <KBD
CLASS="command"
>@ISA</KBD
>. I recommend that you not take advantage of this ability.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch07-pgfId-969855"
></A
><EM
CLASS="emphasis"
>Run-time binding</EM
>. Since C++ does strict type-checking, run-time binding works only if the objects inherit from a common base class. Perl doesn't have this restriction. </P
></LI
></UL
><P
CLASS="para"
>Much of what has been said of C++ in the above comparison is true of Java too.<A
CLASS="indexterm"
NAME="ch07-idx-969861-0"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_04.htm"
TITLE="7.4 Recap of Conventions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.4 Recap of Conventions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_06.htm"
TITLE="7.6 Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.6 Resources"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.4 Recap of Conventions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.6 Resources</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
