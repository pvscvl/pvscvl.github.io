<HTML
><HEAD
>
<TITLE>20.6 Easy Embedding API (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:50Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch20_01.htm"
TITLE="20. Perl Internals"><LINK
REL="prev"
HREF="ch20_05.htm"
TITLE="20.5 Meaty Extensions"><LINK
REL="next"
HREF="ch20_07.htm"
TITLE="20.7 A Peek into the Future"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_05.htm"
TITLE="20.5 Meaty Extensions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.5 Meaty Extensions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch20_01.htm"
TITLE="20. Perl Internals"
>Chapter 20<BR>Perl Internals</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_07.htm"
TITLE="20.7 A Peek into the Future"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.7 A Peek into the Future"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch20-22641"
>20.6 Easy Embedding API</A
></H2
><P
CLASS="para"
>We have learned enough (and more) to implement the convenience API introduced in <A
CLASS="xref"
HREF="ch19_01.htm"
TITLE="Embedding Perl:The Easy Way"
>Chapter 19</A
>. They are <KBD
CLASS="command"
>perl_call_va</KBD
><A
CLASS="indexterm"
NAME="ch20-idx-973055-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973055-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973055-2"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973055-3"
></A
>, <KBD
CLASS="command"
>perl_eval_va</KBD
>, and the set of functions for accessing or modifying scalar values: <KBD
CLASS="command"
>get_int</KBD
>, <KBD
CLASS="command"
>set_int</KBD
>, and so on. We'll implement only <KBD
CLASS="command"
>perl_call_va</KBD
> in this section. <KBD
CLASS="command"
>perl_eval_va</KBD
> is a shorter form of this procedure since it doesn't expect any input parameters (the string to be <CODE
CLASS="literal"
>eval</CODE
>'d contains all the information). The API functions to modify scalars are simple wrappers over <KBD
CLASS="command"
>sv_set*</KBD
>, <KBD
CLASS="command"
>av_store</KBD
>, and <KBD
CLASS="command"
>hv_store</KBD
>, and are left as an exercise to the reader.[<A
CLASS="footnote"
HREF="#ch20-pgfId-955229"
>12</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch20-pgfId-955229"
>[12]</A
> I've always wanted to say that! (See the Preface for the FTP site where you can download this code and other examples in this book.) </P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Recall that <KBD
CLASS="command"
>perl_call_va</KBD
> takes a NULL-terminated list of typed arguments. This list contains both input and output parameters. The following implementation processes the entire list by <KBD
CLASS="command"
>XPUSH</KBD
>'ing the input parameters and storing the output parameters in an array of <KBD
CLASS="command"
>Out_Param</KBD
> structures. Knowing the number of output parameters expected by the caller allows us to specify <KBD
CLASS="command"
>G_SCALAR</KBD
>, <KBD
CLASS="command"
>G_ARRAY</KBD
>, or <KBD
CLASS="command"
>G_DISCARD</KBD
>. The full code is shown in <A
CLASS="xref"
HREF="ch20_06.htm"
TITLE="perl_call_va Implementation"
>Example 20.3</A
>. </P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch20-39891"
>Example 20.3: perl_call_va Implementation</A
></H4
><PRE
CLASS="programlisting"
>#define MAX_PARAMS 20
typedef struct {
    char type;       
    void *pdata;
} Out_Param;                  /* To remember the &quot;Out&quot; section */

int perl_call_va (char *subname, ...)
{
    char      *p   = NULL;
    char      *str = NULL; int i = 0; double d = 0;
    int       nret = 0;               /* number of return params expected*/
    int       ii   = 0;
    va_list   vl;
    int       out = 0;
    int       result = 0;
    Out_Param op[MAX_PARAMS];

    dSP;                               /* Standard ...    */
    ENTER;                             /*    ... Prologue */
    SAVETMPS;
    PUSHMARK(sp);
    va_start (vl, subname);
    while (p = va_arg(vl, char *)) {   /* Fetch next argument */
        switch (*p) {
        case 's' :                     /* String */
            if (out) {
                /* Comes here if we are processing the &quot;Out&quot; section */
                op[nret].pdata = (void*) va_arg(vl, char *);
                op[nret++].type = 's';
            } else {
                str = va_arg(vl, char *);
                ii = strlen(str);
                XPUSHs(sv_2mortal(newSVpv(str,ii)));
            }
            break;
        case 'i' :                    /* Integer */
            if (out) {
                op[nret].pdata = (void*) va_arg(vl, int *);
                op[nret++].type = 'i';
            } else {
                ii = va_arg(vl, int);
                XPUSHs(sv_2mortal(newSViv(ii)));
            }
            break;
        case 'd' :                    /* Double */
            if (out) {
                op[nret].pdata = (void*) va_arg(vl, double *);
                op[nret++].type = 'd';
            } else {
               d = va_arg(vl, double);
               XPUSHs(sv_2mortal(newSVnv(d)));
            }
            break;
        case 'O': 
            out = 1;                      /* Out parameters starting */
            break;          
        default:
             fprintf (stderr, &quot;perl_eval_va: Unknown option \'%c\'.\n&quot;
                               &quot;Did you forget a trailing NULL ?\n&quot;, *p);
            return 0;
        }
        if (nret &gt; MAX_PARAMS) {
            printf (stderr, &quot;Can't accept more than %d return params\n&quot;,
                    MAX_PARAMS);
            return -1;
        }
    }
    va_end(vl);
    PUTBACK;
    /* All input parameters have been pushed on stack, and &quot;nret&quot; contains
     * the number of values expected back from the Perl function */
    result = perl_call_pv(subname, (nret == 0) ? G_DISCARD :
                                   (nret == 1) ? G_SCALAR  :
                                                 G_ARRAY  );
    /* Process output arguments */
    SPAGAIN;
    if (nret &gt; result)
        nret = result;
 
    for (i = --nret; i &gt;= 0; i--) {
        switch (op[i].type) {
        case 's':
            str = POPp;
            strcpy((char *)op[i].pdata, str);
            break;
        case 'i':
            *((int *)(op[i].pdata)) = POPi;
            break;
        case 'd':
            *((double *) (op[i].pdata)) = POPd;
            break;
        }
    }
   
    FREETMPS ;
    LEAVE ;
    return result;
}<KBD
CLASS="command"
></KBD
><A
CLASS="indexterm"
NAME="ch20-idx-973057-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973057-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973057-2"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973057-3"
></A
></PRE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_05.htm"
TITLE="20.5 Meaty Extensions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.5 Meaty Extensions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_07.htm"
TITLE="20.7 A Peek into the Future"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.7 A Peek into the Future"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>20.5 Meaty Extensions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>20.7 A Peek into the Future</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
