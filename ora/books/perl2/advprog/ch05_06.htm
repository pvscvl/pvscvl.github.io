<HTML
><HEAD
>
<TITLE>5.6 Using Eval for Time-Outs (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:47Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. Eval"><LINK
REL="prev"
HREF="ch05_05.htm"
TITLE="5.5 Using Eval for Efficiency"><LINK
REL="next"
HREF="ch05_07.htm"
TITLE="5.7 Eval in Other Languages"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_05.htm"
TITLE="5.5 Using Eval for Efficiency"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.5 Using Eval for Efficiency"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. Eval"
>Chapter 5<BR>Eval</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_07.htm"
TITLE="5.7 Eval in Other Languages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.7 Eval in Other Languages"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-27968"
>5.6 Using Eval for Time-Outs</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-951200-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951200-1"
></A
>When you call <KBD
CLASS="command"
>eval</KBD
>, Perl makes a note of the next statement to start executing just in case a <KBD
CLASS="command"
>die</KBD
> is invoked somewhere within. Internally, <KBD
CLASS="command"
>die</KBD
> happens to invoke a <KBD
CLASS="command"
>longjmp</KBD
><A
CLASS="indexterm"
NAME="ch05-idx-951266-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951266-1"
></A
>, so Perl wastes no time at all transferring control back up to the statement following <KBD
CLASS="command"
>eval</KBD
>, regardless of how deep the stack is. (All temporary and local variables created in the <CODE
CLASS="literal"
>eval</CODE
>'ed code are automatically garbage collected.)</P
><P
CLASS="para"
>The use of <KBD
CLASS="command"
>setjmp</KBD
> and <KBD
CLASS="command"
>longjmp</KBD
> internally gives us one new technique: aborting blocked system calls and infinite loops. Let's say you want to wait at most 10 seconds for the user to type something.[<A
CLASS="footnote"
HREF="#ch05-pgfId-945972"
>4</A
>] If you say <KBD
CLASS="command"
>$buf</KBD
> <KBD
CLASS="command"
>=</KBD
> <KBD
CLASS="command"
>&lt;&gt;</KBD
>, the program is blocked until the user deigns to hit a carriage return, but we would like Perl to abort it after waiting 10 seconds. Generating a time-out is not really a problem; the built-in function <KBD
CLASS="command"
>alarm()</KBD
><A
CLASS="indexterm"
NAME="ch05-idx-951267-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951267-1"
></A
> can be used to generate an <KBD
CLASS="command"
>ALRM</KBD
> signal after a given number of seconds, like this:<PRE
CLASS="programlisting"
>$SIG{ALRM} = \&amp;timed_out;
alarm(10);      # Tells the OS to issue an ALRM signal after 10 seconds
$buf = &lt;&gt;;      # Go into a blocking read</PRE
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch05-pgfId-945972"
>[4]</A
> Thanks to Tom Christiansen for this example.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>The procedure <KBD
CLASS="command"
>timed_out</KBD
> is called (after 10 seconds) regardless of what Perl happens to be executing at that time, be it a blocked <KBD
CLASS="command"
>read</KBD
> or an infinite loop. The problem is, how does <KBD
CLASS="command"
>timed_out</KBD
> force Perl to abandon what Perl happened to be doing at the time it was called? That's where <KBD
CLASS="command"
>eval</KBD
>/<KBD
CLASS="command"
>die</KBD
><A
CLASS="indexterm"
NAME="ch05-idx-951269-0"
></A
> come in. Put an <KBD
CLASS="command"
>eval</KBD
> around <KBD
CLASS="command"
>$buf = &lt;&gt;</KBD
> and a <KBD
CLASS="command"
>die</KBD
> inside <KBD
CLASS="command"
>timed_out()</KBD
>, and control will be restored to the statement following <KBD
CLASS="command"
>eval</KBD
> (the <KBD
CLASS="command"
>if</KBD
> statement), as shown here:</P
><PRE
CLASS="programlisting"
>$SIG{ALRM} = \&amp;timed_out;
eval {
    alarm (10);
    $buf = &lt;&gt;;
    alarm(0);           # Cancel the pending alarm if user responds.
};
if ($@ =~ /GOT TIRED OF WAITING/) {
    print &quot;Timed out. Proceeding with default\n&quot;;
    ....
}

sub timed_out {
    die &quot;GOT TIRED OF WAITING&quot;;
}</PRE
><P
CLASS="para"
>If the user doesn't hit a return within 10 seconds, <KBD
CLASS="command"
>timed_out</KBD
> is called from the signal handler, which calls <KBD
CLASS="command"
>die</KBD
>, which internally <KBD
CLASS="command"
>longjmps</KBD
><A
CLASS="indexterm"
NAME="ch05-idx-951270-0"
></A
> over to the statement following the innermost <KBD
CLASS="command"
>eval</KBD
>. If the user does hit a return within the allotted time, <KBD
CLASS="command"
>alarm(0)</KBD
> is called to reset the alarm. </P
><P
CLASS="para"
>Note that if the alarm goes off, <KBD
CLASS="command"
>$@</KBD
> contains something like "GOT TIRED OF WAITING at foo.pl line 100," so you cannot use <KBD
CLASS="command"
>eq</KBD
>; you must use a regular expression match (or the <KBD
CLASS="command"
>index</KBD
> operator).</P
><P
CLASS="para"
>Tom <A
CLASS="indexterm"
NAME="ch05-idx-951268-0"
></A
>Christiansen pointed out a subtle and interesting point. It is essential that you set <KBD
CLASS="command"
>alarm</KBD
> inside the <KBD
CLASS="command"
>eval</KBD
> block, because on a heavily loaded machine (and for small time-out periods), it is possible to lose the time-slice after the call to <KBD
CLASS="command"
>alarm</KBD
> and before it has a chance to enter the protected section (the <KBD
CLASS="command"
>eval</KBD
> block). Later on, when the program regains the time-slice, it is possible that the time-out interval has expired, and the program will abort.<A
CLASS="indexterm"
NAME="ch05-idx-951204-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-951204-1"
></A
></P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_05.htm"
TITLE="5.5 Using Eval for Efficiency"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.5 Using Eval for Efficiency"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_07.htm"
TITLE="5.7 Eval in Other Languages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.7 Eval in Other Languages"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.5 Using Eval for Efficiency</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.7 Eval in Other Languages</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
