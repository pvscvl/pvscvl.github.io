<HTML
><HEAD
>
<TITLE>1.6 A View of the Internals (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:30:05Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Data References and Anonymous Storage"><LINK
REL="prev"
HREF="ch01_05.htm"
TITLE="1.5 Symbolic References"><LINK
REL="next"
HREF="ch01_07.htm"
TITLE="1.7 References in Other Languages"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_05.htm"
TITLE="1.5 Symbolic References"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.5 Symbolic References"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Data References and Anonymous Storage"
>Chapter 1<BR>Data References and Anonymous Storage</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_07.htm"
TITLE="1.7 References in Other Languages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.7 References in Other Languages"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch01-42451"
>1.6 A View of the Internals</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-953738-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953738-1"
></A
>Let us now take a look inside Perl to understand how it manages memory. You can safely skip this section without loss of continuity. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-953742-0"
></A
>A variable logically represents a binding between a <EM
CLASS="emphasis"
>name</EM
> and a <EM
CLASS="emphasis"
>value</EM
>, as <A
CLASS="xref"
HREF="ch01_06.htm"
TITLE="A variable is a name and value pair"
>Figure 1.3</A
> illustrates.[<A
CLASS="footnote"
HREF="#ch01-pgfId-953063"
>6</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch01-pgfId-953063"
>[6]</A
> This is true whether the variable is global, dynamically scoped (using <CODE
CLASS="literal"
>local()</CODE
>), or lexically scoped (using <CODE
CLASS="literal"
>my()</CODE
>). More details are given in <A
CLASS="xref"
HREF="ch03_01.htm"
TITLE="Typeglobs and Symbol Tables"
>Chapter 3</A
>.</P
></DIV
></BLOCKQUOTE
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch01-16736"
>Figure 1.3: A variable is a name and value pair</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_0103.gif"
ALT="Figure 1.3"><P
CLASS="para"
>An <A
CLASS="indexterm"
NAME="ch01-idx-953743-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953743-1"
></A
>array or a hash is not just a collection of numbers or strings. It is a collection of <EM
CLASS="emphasis"
>scalar values</EM
>, and this distinction is important, as <A
CLASS="xref"
HREF="ch01_06.htm"
TITLE="An array value is a collection of scalar values"
>Figure 1.4</A
> illustrates. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch01-40214"
>Figure 1.4: An array value is a collection of scalar values</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_0104.gif"
ALT="Figure 1.4"><P
CLASS="para"
>Each box in <A
CLASS="xref"
HREF="ch01_06.htm"
TITLE="An array value is a collection of scalar values"
>Figure 1.4</A
> represents a distinct value. An array has one value that represents <EM
CLASS="emphasis"
>the collection</EM
> of scalar values. Each element of the array is a distinct scalar value. This is analogous to a pride of lions being treated as a single entity (which is why we refer to it in the singular) that has properties distinct from those of the individual lion.</P
><P
CLASS="para"
>Notice also that while a name always points to a value, a value doesn't always have to be pointed to by a name, as the array elements in <A
CLASS="xref"
HREF="ch01_06.htm"
TITLE="An array value is a collection of scalar values"
>Figure 1.4</A
> or anonymous arrays and hashes exemplify.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-945311"
>1.6.1 Reference Counts</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-953744-0"
></A
>To support painless and transparent memory management, Perl maintains a reference count for every <EM
CLASS="emphasis"
>value</EM
>, whether it is directly pointed to by a name or not. Let's add this piece of information to our earlier view. Refer to <A
CLASS="xref"
HREF="ch01_06.htm"
TITLE="Adding reference counts to all values"
>Figure 1.5</A
>.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch01-40356"
>Figure 1.5: Adding reference counts to all values</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_0105.gif"
ALT="Figure 1.5"><P
CLASS="para"
>As you can see, the reference count represents the number of arrows pointing to the value part of a variable. Because there is always an arrow from the name to its value, the variable's reference count is at least 1. When you obtain a reference to a variable, the corresponding value's reference count is incremented. </P
><P
CLASS="para"
>It is important to stress the point that even though we would like to think of <KBD
CLASS="command"
>$ra</KBD
> as pointing to <KBD
CLASS="command"
>$a</KBD
>, it really points to <KBD
CLASS="command"
>$a</KBD
>'s <EM
CLASS="emphasis"
>value</EM
>. In fact, <KBD
CLASS="command"
>$ra</KBD
> does not even know whether the value it is pointing to has a corresponding entry in the symbol table. The value of the reference variable is the <EM
CLASS="emphasis"
>address</EM
> of another scalar value, which does not change even if <KBD
CLASS="command"
>$a</KBD
>'s value changes.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-953749-0"
></A
>Perl automatically deletes a value when its reference count drops to zero. When variables (named values) go out of scope, the binding between the name and the value is removed, resulting in the value's reference count being decremented. In the typical case in which this count is 1, the value is deleted (or <EM
CLASS="emphasis"
>garbage collected </EM
>).[<A
CLASS="footnote"
HREF="#ch01-pgfId-949479"
>7</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch01-pgfId-949479"
>[7]</A
> For efficiency, Perl doesn't actually delete it; it just sends it to its own free pool and reuses it when you need a new value. It is <EM
CLASS="emphasis"
>logically</EM
> deleted, nevertheless.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>The reference counting technique is sometimes referred to as "<A
CLASS="indexterm"
NAME="ch01-idx-953750-0"
></A
>poor man's garbage collection," in contrast to much more sophisticated techniques used by environments such as LISP, Java, and Smalltalk (though the early versions of Smalltalk used reference counting). The problem is that reference counts take up space, which adds up if you consider that every piece of data in your application has an extra integer associated with it. </P
><P
CLASS="para"
>Then there is also the problem of <A
CLASS="indexterm"
NAME="ch01-idx-953748-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953748-1"
></A
>circular references. The simplest case is this: </P
><PRE
CLASS="programlisting"
>$a = \$a;</PRE
><P
CLASS="para"
>This is a classic case of narcissism. <KBD
CLASS="command"
>$a</KBD
>'s reference count indicates that something is pointing to it, so it will never get freed. A more practical case of circular references is that of network graphs (each node keeps track of each of its neighbors) or ring buffers (where the last element points to the first one). Modern garbage collection algorithms implemented in Java and Smalltalk can detect circular references and deallocate the entire circular structure if none of the elements are reachable from other variables.</P
><P
CLASS="para"
>On the other hand, reference counting is simple to understand and implement and makes it easy to integrate Perl with C or C++ code. Please refer to item 2 in the <A
CLASS="xref"
HREF="ch01_08.htm"
TITLE="Resources"
>Section 1.8, "Resources</A
>" section at the end of the chapter for a comprehensive treatment of garbage collection techniques.</P
><P
CLASS="para"
>Note that while symbolic references allow you to access variables in an indirect way, no actual reference variables are created. In other words, the reference count of a symbolically accessed variable is not modified. Hence symbolic references are also called <I
CLASS="firstterm"
>soft</I
><A
CLASS="indexterm"
NAME="ch01-idx-953751-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953751-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953751-2"
></A
> references, in contrast to <I
CLASS="firstterm"
>hard</I
> references, which actually allocate storage to keep track of the indirection. </P
><P
CLASS="para"
>This is similar to the concept of soft versus hard links in the Unix filesystem. The i-node of a file has its reference count incremented every time someone creates a hard link to that file, so you can't really delete the file's <EM
CLASS="emphasis"
>contents</EM
> until its reference count goes down to zero. A symbolic link, on the other hand, stores only the name of the file and can point to a nonexistent file; you'll never know until you try to open the file using the symbolic link.<A
CLASS="indexterm"
NAME="ch01-idx-953746-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-945421"
>1.6.2 Array/Hash References Versus Element References</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-953752-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953752-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953752-2"
></A
>Recall that there is a distinction between the array as a whole and each of its constituent scalar values. The array's value maintains its own reference count, and each of its elements has its own. When you take a reference to an array, its own reference count is incremented without its elements getting affected, as shown in <A
CLASS="xref"
HREF="ch01_06.htm"
TITLE="Taking a reference to an array"
>Figure 1.6</A
>.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch01-31941"
>Figure 1.6: Taking a reference to an array</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_0106.gif"
ALT="Figure 1.6"><P
CLASS="para"
>In contrast, <A
CLASS="xref"
HREF="ch01_06.htm"
TITLE="Referring to a list element"
>Figure 1.7</A
> shows the picture when you create a reference to an <EM
CLASS="emphasis"
>element</EM
> of an array or a hash.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch01-22782"
>Figure 1.7: Referring to a list element</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_0107.gif"
ALT="Figure 1.7"><P
CLASS="para"
>When you take a reference to an element of an array (or a hash), Perl increments that scalar value's reference count. If, say, you now <KBD
CLASS="command"
>pop</KBD
> it from the array, its reference count goes down by 1 because the array is no longer interested in the scalar value. But since there is an outstanding reference to the array element (and its reference count is still 1), it is not destroyed. <A
CLASS="xref"
HREF="ch01_06.htm"
TITLE="@array popped once; $r_array_elem holds on to the popped scalar"
>Figure 1.8</A
> shows the picture after <KBD
CLASS="command"
>@array</KBD
> has been popped<A
CLASS="indexterm"
NAME="ch01-idx-953740-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953740-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953740-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953740-3"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-953740-4"
></A
> once.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch01-21987"
>Figure 1.8: @array popped once; $r_array_elem holds on to the popped scalar</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_0108.gif"
ALT="Figure 1.8"></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_05.htm"
TITLE="1.5 Symbolic References"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.5 Symbolic References"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_07.htm"
TITLE="1.7 References in Other Languages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.7 References in Other Languages"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.5 Symbolic References</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.7 References in Other Languages</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
