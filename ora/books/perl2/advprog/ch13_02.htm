<HTML
><HEAD
>
<TITLE>13.2 Remote Procedure Calls (RPC) (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:37:32Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. Networking: Implementing RPC"><LINK
REL="prev"
HREF="ch13_01.htm"
TITLE="13.1 Msg: Messaging Toolkit"><LINK
REL="next"
HREF="ch13_03.htm"
TITLE="13.3 Resources"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_01.htm"
TITLE="13.1 Msg: Messaging Toolkit"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.1 Msg: Messaging Toolkit"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. Networking: Implementing RPC"
>Chapter 13<BR>Networking: Implementing RPC</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_03.htm"
TITLE="13.3 Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.3 Resources"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-29054"
>13.2 Remote Procedure Calls (RPC)</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-981103-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-981103-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-981103-2"
></A
>In this section, we use the Msg library to implement a Remote Procedure Call module, <EM
CLASS="emphasis"
>RPC.pm</EM
>. The idea of RPC is to transparently invoke a subroutine in another process space and have it behave exactly as if it had been invoked in its own process. The following are the features we take for granted while calling ordinary subroutines, which the <KBD
CLASS="command"
>RPC</KBD
> module takes into account:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Synchronicity</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-981104-0"
></A
>The caller waits until the called procedure finishes. The RPC module invokes <KBD
CLASS="command"
>Msg::send_now</KBD
> and <KBD
CLASS="command"
>Msg::rcv_now</KBD
> to get this blocking behavior.</P
></DD
><DT
CLASS="term"
>Parameters</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A Perl subroutine can take any number of parameters of any type (including references to objects, complex data structures, and subroutines). The RPC module uses the FreezeThaw module described in <A
CLASS="xref"
HREF="ch10_01.htm"
TITLE="Persistence"
>Chapter 10, <CITE
CLASS="chapter"
>Persistence</CITE
></A
>, for <EM
CLASS="emphasis"
>marshalling</EM
><A
CLASS="indexterm"
NAME="ch13-idx-981105-0"
></A
> parameters: all parameters are flattened and encoded into a single string (<EM
CLASS="emphasis"
>frozen</EM
>) and recovered on the other side (<EM
CLASS="emphasis"
>thawed</EM
>). This means that all data structures sent by reference are copied in their entirety so that the receiving subroutine on the other side can get a reference to an object (as it would if it were in the same process). FreezeThaw&nbsp;- and hence RPC&nbsp;- does not account for code references, because there is no way (in Perl) to decode a code reference and get the subroutine text (because it could be compiled into machine code). We could create a dummy subroutine on the remote side and have it make a nested RPC invocation back to the real code reference, but the current implementation does not have this feature (though it doesn't preclude it).</P
></DD
><DT
CLASS="term"
>Context </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A subroutine can use <KBD
CLASS="command"
>wantarray</KBD
> to find out whether the caller is specifying a list or scalar context. The fact that the subroutine is being called from a remote process should not be an issue. The RPC module arranges the necessary transparency. Another example of context (not to be confused with the Perl meaning of the word) is the caller's package. When you say <KBD
CLASS="command"
>foo()</KBD
>, you mean <KBD
CLASS="command"
>foo()</KBD
> in the current package.</P
></DD
><DT
CLASS="term"
>Exceptions</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A subroutine can invoke <KBD
CLASS="command"
>die</KBD
>, and expect its caller to trap it. The receiving side of <KBD
CLASS="command"
>RPC</KBD
> invokes the target subroutine inside an <KBD
CLASS="command"
>eval</KBD
>, and if it dies, it sends a message back to the calling process, which in turn invokes a <CODE
CLASS="literal"
>die</CODE
> in its own space with the error received.</P
></DD
><DT
CLASS="term"
>Mutual recursion</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Subroutine A can call subroutine B, which in turn can call A&nbsp;- they are said to be mutually recursive. RPC allows this because of its ability to process incoming messages while it is blocked on a send.</P
></DD
><DT
CLASS="term"
>No deadlocks</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Traditional RPC systems are subject to <A
CLASS="indexterm"
NAME="ch13-idx-981106-0"
></A
>deadlocks if two peer processes decide to call each other at the same time, because as we saw in <A
CLASS="xref"
HREF="ch12_01.htm"
TITLE="Networking with Sockets"
>Chapter 12</A
>, they are too impolite to listen to what the other is saying. Not so with RPC. In fact, it can dispatch incoming messages on all file descriptors while, from the caller's perspective, it is still blocked.</P
></DD
><DT
CLASS="term"
>No code generation</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Typical RPC systems generate client and server stub code, but RPC does not need to&nbsp;- a tribute to the dynamic aspects of Perl.</P
></DD
></DL
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-37172"
>13.2.1 Using RPC</A
></H3
><P
CLASS="para"
>Let us take a look at a sample use of the RPC module. The client is shown first:</P
><PRE
CLASS="programlisting"
># Client stuff
use RPC; 
my $conn = RPC-&gt;connect($host, $port);
my $answer = $conn-&gt;rpc('ask_sheep', 
                        &quot;Ba ba black sheep, have you any wool ?&quot;);
print &quot;$answer\n&quot;;</PRE
><P
CLASS="para"
>The client sets up an RPC connection, given a host and port. A subroutine that is normally invoked as</P
><PRE
CLASS="programlisting"
>$answer = ask_sheep ($question);</PRE
><P
CLASS="para"
>is invoked by using RPC as follows:</P
><PRE
CLASS="programlisting"
>$answer = $conn-&gt;rpc (&quot;ask_sheep&quot;, $question);</PRE
><P
CLASS="para"
>The client code <EM
CLASS="emphasis"
>knows</EM
> it is making an RPC call. Making this transparent (as typical RPC systems do) is quite simple, really. Using <KBD
CLASS="command"
>eval</KBD
>, we can dynamically create a dummy client stub called <KBD
CLASS="command"
>ask_sheep</KBD
> on the caller's side and have it make the call to <KBD
CLASS="command"
>rpc()</KBD
>.</P
><P
CLASS="para"
>The called subroutine, however, does not know whether it has been invoked locally or from a remote process (unless of course, it uses <KBD
CLASS="command"
>caller()</KBD
> to find out).</P
><P
CLASS="para"
>The remote process (call it the RPC server) provides the required subroutines and invokes <KBD
CLASS="command"
>new_server</KBD
> and <KBD
CLASS="command"
>event_loop</KBD
> to accept incoming RPC calls; <KBD
CLASS="command"
>ask_sheep</KBD
> will get called at the right time. Simple!</P
><PRE
CLASS="programlisting"
># Server stuff
RPC-&gt;new_rpc_server($host, $port);
RPC-&gt;event_loop();

sub ask_sheep {  # Sample subroutine to be invoked from client
    print &quot;Question: @_\n&quot;;
    return &quot;No&quot;;
}</PRE
><P
CLASS="para"
>Now, let us look at an example of using RPC between <EM
CLASS="emphasis"
>peer processes</EM
>. Process 1 (identified by <KBD
CLASS="command"
>$host1</KBD
>, <KBD
CLASS="command"
>$port1</KBD
>) calls subroutine <CODE
CLASS="literal"
>two</CODE
> on Process 2 (<KBD
CLASS="command"
>$host2</KBD
>, <KBD
CLASS="command"
>$port2</KBD
>), which in turn calls subroutine one back on Process 1.</P
><P
CLASS="para"
>Process 1 looks like this:</P
><PRE
CLASS="programlisting"
>sub one {
    print &quot;One called\n&quot;;
}
$conn2 = RPC-&gt;new_rpc_server($host2, $port2);
$conn2-&gt;rpc (&quot;two&quot;);</PRE
><P
CLASS="para"
>Process 2 looks like this:</P
><PRE
CLASS="programlisting"
>sub two {
    print &quot;Two called\n&quot;;
}
$conn1 = RPC-&gt;new_rpc_server($host1, $port1);
$conn1-&gt;rpc (&quot;one&quot;);</PRE
><P
CLASS="para"
>Each process calls <KBD
CLASS="command"
>new_rpc_server</KBD
> to establish a listening port. Since the <KBD
CLASS="command"
>rpc</KBD
> call listens to incoming messages while it is still sending stuff out, neither process needs to call <KBD
CLASS="command"
>event_loop</KBD
> explicitly. A process that intends to hang around for a while should, of course, do so. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-35212"
>13.2.2 RPC: Implementation</A
></H3
><P
CLASS="para"
>The RPC implementation is surprisingly small, thanks to the Msg and FreezeThaw modules. It inherits from Msg to provide the same connection and event loop abstractions. </P
><P
CLASS="para"
>Let us examine the calling side first:</P
><PRE
CLASS="programlisting"
>package RPC;
use Msg;
use strict;
use Carp;
@RPC::ISA = qw(Msg);
use FreezeThaw qw(freeze thaw);

sub <B
CLASS="emphasis.bold"
>connect</B
> {
   my ($pkg, $host, $port) = @_;
   my $conn = $pkg-&gt;SUPER::connect($host,$port, \&amp;_incoming_msg);
   return $conn;
}</PRE
><P
CLASS="para"
><KBD
CLASS="command"
>connect</KBD
> simply calls Msg's <KBD
CLASS="command"
>connect</KBD
>, with <KBD
CLASS="command"
>_incoming_msg</KBD
> as the subroutine to notify on all incoming messages (including responses to subroutine calls and end-of-file indications). It leaves it to Msg's <KBD
CLASS="command"
>connect</KBD
> to create a connection object and bless it under RPC's auspices. Both Msg and RPC have been written so that they can be inherited by another module; the package name is not hardcoded.</P
><PRE
CLASS="programlisting"
>my $g_msg_id = 0;
my $send_err = 0;
sub <B
CLASS="emphasis.bold"
>handle_send_err</B
> {
   $send_err = $!;
}</PRE
><P
CLASS="para"
><KBD
CLASS="command"
>handle_send_err</KBD
> overrides <KBD
CLASS="command"
>Msg::handle_send_err</KBD
> and stores any errors encountered while sending a message. This error code is checked in <KBD
CLASS="command"
>rpc</KBD
>, as shown next. The error handling in both RPC and Msg is definitely not up to snuff and needs a considerable amount of work before it can be reliably used in a production application.</P
><PRE
CLASS="programlisting"
>sub <B
CLASS="emphasis.bold"
>rpc</B
> {
    my $conn = shift;
    my $subname = shift;
    
    $subname = (caller() . '::' . $subname) unless $subname =~ /:/;
    my $gimme = wantarray ?  'a' : 's';  # Array or scalar
    my $msg_id = ++$g_msg_id;
    my $serialized_msg = freeze ('&gt;', $msg_id, $gimme, @_);
    # Send and Receive
    $conn-&gt;send_later ($serialized_msg);
    do {
        Msg-&gt;event_loop(1); # Dispatch other messages until we 
                            # get a response
    } until (exists $conn-&gt;{rcvd}-&gt;{$msg_id} || $send_err);
    if ($send_err) {
       die &quot;RPC Error: $send_err&quot;;
    }

    # Dequeue message.
    my $rl_retargs = delete $conn-&gt;{rcvd}-&gt;{$msg_id}; # ref to list
    if (ref($rl_retargs-&gt;[0]) eq 'RPC::Error') {
        die ${$rl_retargs-&gt;[0]};
    }
    wantarray ? @$rl_retargs : $rl_retargs-&gt;[0];
}</PRE
><P
CLASS="para"
><KBD
CLASS="command"
>rpc</KBD
> uses the FreezeThaw module's <KBD
CLASS="command"
>freeze</KBD
><A
CLASS="indexterm"
NAME="ch13-idx-981107-0"
></A
> method to bundle the following pieces of information into one big string: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch13-pgfId-977416"
></A
>Name of the remote subroutine. The caller's module is prepended to the subroutine name if it is not fully qualified, which is the behavior expected of a normal subroutine.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch13-pgfId-977417"
></A
>Parameters to the subroutine.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch13-pgfId-977426"
></A
><KBD
CLASS="command"
>wantarray</KBD
> indicator (<KBD
CLASS="command"
>$gimme</KBD
>): "<KBD
CLASS="command"
>s</KBD
>" for scalar, "<KBD
CLASS="command"
>a</KBD
>" for array.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch13-pgfId-977429"
></A
>Request or response indicator. "&gt;" indicates request, and "&lt;" indicates response. When the receiver gets a message, it should know whether it is a response to an outgoing message or an incoming request that it is expected to evaluate.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch13-pgfId-977434"
></A
>A message identifier. This is to identify the response corresponding to this request.</P
></LI
></UL
><P
CLASS="para"
>The <KBD
CLASS="command"
>freeze</KBD
> method accounts for cyclic data structures and objects and returns one ASCII string, which means that we don't have to worry about the size of native integers or doubles or their memory layout (byte order). <KBD
CLASS="command"
>Msg-&gt;send_later()</KBD
> is used because it triggers nonblocking I/O where available. The message is really sent only when <KBD
CLASS="command"
>event_loop</KBD
> is called, because it determines when the socket is writable. At the same time, <KBD
CLASS="command"
>event_loop</KBD
> tracks other incoming messages and dispatches them. The count of 1 forces the event loop to return right after dispatching one round of messages, so we can retain control. When the response comes from the remote host, <KBD
CLASS="command"
>event_loop</KBD
> calls <KBD
CLASS="command"
>_incoming_msgs</KBD
>, which decodes it and hangs the return arguments on the connection object. Read on. </P
><P
CLASS="para"
>Let us now take a look at the receiving side:</P
><PRE
CLASS="programlisting"
>sub <B
CLASS="emphasis.bold"
>new_server</B
> {
    my ($pkg, $my_host, $my_port) = @_;
    $pkg-&gt;SUPER::new_server($my_host, $my_port, 
                            sub {$pkg-&gt;_login(@_)});
}
sub <B
CLASS="emphasis.bold"
>_login</B
> {
    \&amp;_incoming_msg;
}</PRE
><P
CLASS="para"
><KBD
CLASS="command"
>new_server</KBD
>, like <KBD
CLASS="command"
>connect</KBD
>, is a simple wrapper over its Msg counterpart. All incoming connections are unconditionally accepted by default, and messages are directed towards the subroutine <KBD
CLASS="command"
>_incoming_msg</KBD
>, shown next. Calling the         <KBD
CLASS="command"
>_login</KBD
> procedure indirectly via <KBD
CLASS="command"
>$pkg</KBD
> gives you the opportunity to subclass RPC and supply your own <KBD
CLASS="command"
>_login</KBD
> procedure and refuse the connection if needed. </P
><PRE
CLASS="programlisting"
>sub <B
CLASS="emphasis.bold"
>_incoming_msg</B
> {
    my ($conn, $msg, $err) = @_;
    return if ($err);   # Need better error handling.
    return unless defined($msg);
    my ($dir, $id, @args) = thaw ($msg);
    my ($result, @results);
    if ($dir eq '&gt;') {
        # New request message
        my $gimme = shift @args;
        my $sub_name = shift @args;
        eval {
            no strict 'refs';  # Because we call the subroutine using
                               # a symbolic reference
            if ($gimme eq 'a') {  # Want an array back
                @results = &amp;{$sub_name} (@args); 
            } else {
                $result = &amp;{$sub_name} (@args);
            }
        };
        if ($@) {
            $msg = bless \$@, &quot;RPC::Error&quot;;
            $msg = freeze('&lt;', $id, $msg);
        } elsif ($gimme eq 'a') {
            $msg = freeze('&lt;', $id, @results);
        } else {
            $msg = freeze('&lt;', $id, $result);
        }
        $conn-&gt;send_later($msg);
    } else {
        # Response to a message we had sent out earlier
        $conn-&gt;{rcvd}-&gt;{$id} = \@args;
    }
}</PRE
><P
CLASS="para"
><KBD
CLASS="command"
>_incoming_msg</KBD
> is the counterpart to the <KBD
CLASS="command"
>rpc</KBD
> method. It unpacks the message sent by <KBD
CLASS="command"
>rpc</KBD
> and checks the direction (whether it is a request or a response). If it is a request, it calls the required subroutine using a symbolic reference. Notice that depending on the <KBD
CLASS="command"
>wantarray</KBD
> indication, it provides a scalar or vector result parameter. If <KBD
CLASS="command"
>eval</KBD
> reports an error, the <KBD
CLASS="command"
>$@</KBD
> variable is stamped with an RPC::Error module tag and shipped back to the calling process (which invokes <KBD
CLASS="command"
>die</KBD
>)<KBD
CLASS="command"
>.</KBD
><A
CLASS="indexterm"
NAME="ch13-idx-981109-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-981109-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-981109-2"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_01.htm"
TITLE="13.1 Msg: Messaging Toolkit"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.1 Msg: Messaging Toolkit"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_03.htm"
TITLE="13.3 Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.3 Resources"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>13.1 Msg: Messaging Toolkit</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>13.3 Resources</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
