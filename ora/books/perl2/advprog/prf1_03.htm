<HTML
><HEAD
>
<TITLE>What Must I Know? (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:28:16Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="prf1_01.htm"
TITLE="Preface"><LINK
REL="prev"
HREF="prf1_02.htm"
TITLE="Why Perl?"><LINK
REL="next"
HREF="prf1_04.htm"
TITLE="The Book's Approach"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="prf1_02.htm"
TITLE="Why Perl?"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: Why Perl?"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="preface"
REL="up"
HREF="prf1_01.htm"
TITLE="Preface"
>Preface</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="prf1_04.htm"
TITLE="The Book's Approach"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: The Book's Approach"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch00-11625"
>What Must I Know?</A
></H2
><P
CLASS="para"
>To use Perl effectively in an application, you must be conversant with three aspects:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch00-pgfId-945242"
></A
>The <EM
CLASS="emphasis"
>language syntax</EM
> and<EM
CLASS="emphasis"
> idioms</EM
> afforded by the language.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch00-pgfId-945135"
></A
>The <EM
CLASS="emphasis"
>Perl interpreter</EM
> for writing C extensions for your Perl scripts or embedding the Perl interpreter in your C/C++ applications.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch00-pgfId-945290"
></A
><EM
CLASS="emphasis"
>Technology issues</EM
> such as networking, user interfaces, the Web, and persistence.</P
></LI
></UL
><P
CLASS="para"
><A
CLASS="xref"
HREF="prf1_03.htm"
TITLE="Classification of topics covered in this book"
>Figure 1</A
> shows a map of the topics dealt with in this book. Each major aspect listed above is further classified. The rest of this section presents a small blurb about each topic and the corresponding chapter where the subject is detailed. The discussion is arranged by topic rather than by the sequence in which the chapters appear.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch00-32813"
>Figure 1: Classification of topics covered in this book</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_pr01.gif"
ALT="Figure 1"><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch00-pgfId-947539"
>Language Syntax</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch00-idx-954931-0"
></A
>Pointers or references bring an enormous sophistication to the type of data structures you can create with a language. Perl's support for references and its ability to let you code without having to specify every single step makes it an especially powerful language. For example, you can create something as elaborate as an array of hashes of arrays[<A
CLASS="footnote"
HREF="#ch00-pgfId-952801"
>4</A
>] all in a single line. <A
CLASS="xref"
HREF="ch01_01.htm"
TITLE="Data References and Anonymous Storage"
>Chapter 1, <CITE
CLASS="chapter"
>Data References and Anonymous Storage</CITE
></A
>, introduces you to references and what Perl does internally for memory management. <A
CLASS="xref"
HREF="ch02_01.htm"
TITLE="Implementing Complex Data Structures"
>Chapter 2, <CITE
CLASS="chapter"
>Implementing Complex Data Structures</CITE
></A
>, exercises the syntax introduced in the earlier chapter with a few practical examples.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch00-pgfId-952801"
>[4]</A
> We'll henceforth refer to indexed lists/arrays as "arrays" and associative arrays as "hashes" to avoid confusion.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Perl supports references to subroutines and a powerful construct called closures, which, as LISPers know, is essentially an unnamed subroutine that carries its environment around with it. This facility and its concomitant idioms will be clarified and put to good use in <A
CLASS="xref"
HREF="ch04_01.htm"
TITLE="Subroutine References and Closures"
>Chapter 4, <CITE
CLASS="chapter"
>Subroutine References and Closures</CITE
></A
>.</P
><P
CLASS="para"
>References are only one way of obtaining indirection. Scalars can contain embedded pointers to native C data structures. This subject is covered in <A
CLASS="xref"
HREF="ch20_01.htm"
TITLE="Perl Internals"
>Chapter 20, <CITE
CLASS="chapter"
>Perl Internals</CITE
></A
>. Ties represent an alternative case of indirection: All Perl values can optionally trigger specific Perl subroutines when they are created, accessed, or destroyed. This aspect is discussed in <A
CLASS="xref"
HREF="ch09_01.htm"
TITLE="Tie"
>Chapter 9, <CITE
CLASS="chapter"
>Tie</CITE
></A
>. </P
><P
CLASS="para"
>Filehandles, directory handles, and formats aren't quite first-class data types; they cannot be assigned to one another or passed as parameters, and you cannot create local versions of them. In <A
CLASS="xref"
HREF="ch03_01.htm"
TITLE="Typeglobs and Symbol Tables"
>Chapter 3, <CITE
CLASS="chapter"
>Typeglobs and Symbol Tables</CITE
></A
>, we study why we want these facilities in the first place and the work-arounds to achieve them. This chapter focuses on a somewhat hidden data type called a typeglob and its internal representation, the understanding of which is crucial for obtaining information about the state of the interpreter (<I
CLASS="firstterm"
>meta-data</I
>) and for creating convenient aliases.</P
><P
CLASS="para"
>Now let's turn to language issues not directly related to Perl data types.</P
><P
CLASS="para"
>Perl supports exception handling, including asynchronous exceptions (the ability to raise user-defined exception from signal handlers). As it happens, <KBD
CLASS="command"
>eval</KBD
> is used for trapping exceptions as well as for run-time evaluation, so <A
CLASS="xref"
HREF="ch05_01.htm"
TITLE="Eval"
>Chapter 5, <CITE
CLASS="chapter"
>Eval</CITE
></A
>, does double-duty explaining these distinct, yet related, topics.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch06_02.htm"
TITLE="Packages and Files"
>Section 6.2, "Packages and Files"</A
>, <A
CLASS="indexterm"
NAME="ch00-idx-954935-0"
></A
>details Perl's support for modular programming, including features such as run-time binding (in which the procedure to be called is known only at run-time), inheritance (Perl's ability to transparently use a subroutine from another class), and autoloading (trapping accesses to functions that don't exist and doing something meaningful). <A
CLASS="xref"
HREF="ch07_01.htm"
TITLE="Object-Oriented Programming"
>Chapter 7, <CITE
CLASS="chapter"
>Object-Oriented Programming</CITE
></A
>, takes modules to the next logical step: making modules reusable not only from the viewpoint of a library user, but also from that of a developer adding more facets to the library.</P
><P
CLASS="para"
>Perl supports <A
CLASS="indexterm"
NAME="ch00-idx-954936-0"
></A
>run-time evaluation: the ability to treat character strings as little Perl programs and dynamically evaluate them. <A
CLASS="xref"
HREF="ch05_01.htm"
TITLE="Eval"
>Chapter 5</A
> introduces the <KBD
CLASS="command"
>eval</KBD
> keyword and some examples of how this facility can be used, but its importance is truly underscored in later chapters, where it is used in such diverse areas as SQL query evaluation (<A
CLASS="xref"
HREF="ch11_01.htm"
TITLE="Implementing Object Persistence"
>Chapter 11, <CITE
CLASS="chapter"
>Implementing Object Persistence</CITE
></A
>), code generation (<A
CLASS="xref"
HREF="ch17_01.htm"
TITLE="Template-Driven Code Generation"
>Chapter 17</A
>), and dynamic generation of accessor functions for object attributes (<A
CLASS="xref"
HREF="ch08_01.htm"
TITLE="Object Orientation: The Next Few Steps"
>Chapter 8, <CITE
CLASS="chapter"
>Object Orientation: The Next Few Steps</CITE
></A
>).<A
CLASS="indexterm"
NAME="ch00-idx-954933-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch00-pgfId-947778"
>The Perl Interpreter</A
></H3
><P
CLASS="para"
>Three chapters are devoted to working with and understanding the <A
CLASS="indexterm"
NAME="ch00-idx-954937-0"
></A
>Perl interpreter. There are two main reasons for delving into this internal aspect of Perl. One is to extend Perl, by which I mean adding a C module that can do things for which Perl is not well-suited or is not fast enough. The other is to embed Perl in C, so that a C program can invoke Perl for a specific task such as handling a regular expression substitution, which you may not want to code up in C.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch18_01.htm"
TITLE="Extending Perl:A First Course"
>Chapter 18, <CITE
CLASS="chapter"
>Extending Perl:A First Course</CITE
></A
>, presents two tools (<KBD
CLASS="command"
>xsubpp</KBD
> and <KBD
CLASS="command"
>SWIG</KBD
>) to create custom dynamically loadable C libraries for <EM
CLASS="emphasis"
>extending</EM
> the Perl interpreter. </P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch19_01.htm"
TITLE="Embedding Perl:The Easy Way"
>Chapter 19, <CITE
CLASS="chapter"
>Embedding Perl:The Easy Way</CITE
></A
>, presents an easy API that was developed for this book to enable you to embed the interpreter without having to worry about the internals of Perl.</P
><P
CLASS="para"
>But if you really want to know what is going on underneath or want to develop powerful extensions, <A
CLASS="xref"
HREF="ch20_01.htm"
TITLE="Perl Internals"
>Chapter 20</A
> should quench your thirst (or drown you in detail, depending on your perspective).</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch00-pgfId-945191"
>Technology Areas</A
></H3
><P
CLASS="para"
>I am of the opinion that an applications developer should master at least the following six major technology areas: user interfaces, persistence, interprocess communication and networking, parsing and code generation, the Web, and the operating system. This book presents detailed explanations of the first four topics (in Chapters <A
CLASS="xref"
HREF="ch10_01.htm"
TITLE="Persistence"
>Chapter 10, <CITE
CLASS="chapter"
>Persistence</CITE
></A
> through <A
CLASS="xref"
HREF="ch17_01.htm"
TITLE="Template-Driven Code Generation"
>Chapter 17</A
>). Instead of just presenting the API of publicly available modules, the book starts with real problems and develops useful solutions, including appropriate Perl packages. For example, <A
CLASS="xref"
HREF="ch13_01.htm"
TITLE="Networking: Implementing RPC"
>Chapter 13, <CITE
CLASS="chapter"
>Networking: Implementing RPC</CITE
></A
>, explains the implementation of an RPC toolkit that avoids deadlocks even if two processes happen to call each other at the same time. As another example, <A
CLASS="xref"
HREF="ch11_01.htm"
TITLE="Implementing Object Persistence"
>Chapter 11</A
>, develops an "adaptor" to transparently send a collection of objects to a persistent store of your choice (relational database, plain file, or DBM file) and implements querying on all of them. </P
><P
CLASS="para"
>This book does not deal with operating system specific issues, partly because Perl hides a tremendous number of these differences and partly because these details will distract us from the core themes of the book. Practically all the code in this book is OS-neutral.</P
><P
CLASS="para"
>I have chosen to ignore web-related issues and, more specifically, CGI. This is primarily because there are numerous books[<A
CLASS="footnote"
HREF="#ch00-pgfId-951664"
>5</A
>] and tutorials on CGI scripting with Perl that do more justice to this subject than the limited space on this book can afford. In addition, developers of most interesting CGI applications will spend much more time with the concepts presented in this book than with the simple details of the CGI protocol per se<I
CLASS="foreignphrase"
>.</I
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch00-pgfId-951664"
>[5]</A
> Refer to Shishir Gundavaram's book <EM
CLASS="emphasis"
>CGI Programming on the World Wide Web</EM
> (O'Reilly)</P
></DIV
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="prf1_02.htm"
TITLE="Why Perl?"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: Why Perl?"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="prf1_04.htm"
TITLE="The Book's Approach"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: The Book's Approach"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>Why Perl?</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>The Book's Approach</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
