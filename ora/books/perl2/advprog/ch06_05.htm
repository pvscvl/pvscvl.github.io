<HTML
><HEAD
>
<TITLE>6.5 Importing Symbols (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:33:09Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Modules"><LINK
REL="prev"
HREF="ch06_04.htm"
TITLE="6.4 Privacy"><LINK
REL="next"
HREF="ch06_06.htm"
TITLE="6.6 Nesting Packages"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_04.htm"
TITLE="6.4 Privacy"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.4 Privacy"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Modules"
>Chapter 6<BR>Modules</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_06.htm"
TITLE="6.6 Nesting Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.6 Nesting Packages"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-33437"
>6.5 Importing Symbols</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-960833-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960833-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960833-2"
></A
>Sometimes, you may want to selectively import symbols into your namespace, just for typing efficiency. For example, you might want to say <KBD
CLASS="command"
>sqrt</KBD
> instead of <KBD
CLASS="command"
>math::sqrt</KBD
> or <KBD
CLASS="command"
>deposit</KBD
> instead of <KBD
CLASS="command"
>BankAccount::deposit</KBD
>. The <KBD
CLASS="command"
>use</KBD
><A
CLASS="indexterm"
NAME="ch06-idx-960837-0"
></A
> statement allows you to specify an optional list of function names to be imported:</P
><PRE
CLASS="programlisting"
>use BankAccount ('withdraw', 'deposit');
withdraw();  # Can now call function without fully qualifying it.</PRE
><P
CLASS="para"
>For its part, the module has to be ready to export these names (and only them) to whoever <KBD
CLASS="command"
>use</KBD
>s it. It should also have a policy for what it should do if the user does not specify a list at all. Both these tasks are handled for you by a standard module called <A
CLASS="indexterm"
NAME="ch06-idx-960838-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960838-1"
></A
>Exporter. The BankAccount class can be implemented as shown next:</P
><PRE
CLASS="programlisting"
>package BankAccount;
use Exporter;
@ISA = ('Exporter');     # Inherit from Exporter
@EXPORT_OK = ('withdraw', 'deposit');

sub deposit  { .... }
sub withdraw { .... }</PRE
><P
CLASS="para"
>This code loads the Exporter module and arranges to inherit from that module, using the <KBD
CLASS="command"
>@ISA</KBD
> array. For now, take it on faith that this works; we will study inheritance shortly. The <KBD
CLASS="command"
>@EXPORT_OK</KBD
> array states which symbols are fine to export. The user of this module can in turn specify a list of one or more symbols specified in <KBD
CLASS="command"
>@EXPORT_OK</KBD
> to the <KBD
CLASS="command"
>use</KBD
> statement. If the user says,</P
><PRE
CLASS="programlisting"
>use BankAccount ('deposit');</PRE
><P
CLASS="para"
>the <KBD
CLASS="command"
>deposit</KBD
> function can be called without fully qualifying the name, in contrast to <KBD
CLASS="command"
>withdraw()</KBD
>. To tell the Exporter module not to export any symbols into your namespace, leave the list blank. </P
><P
CLASS="para"
>If the module uses <KBD
CLASS="command"
>@EXPORT</KBD
> instead of <KBD
CLASS="command"
>@EXPORT_OK</KBD
>, the user gets all the exported symbols, regardless of whether they were mentioned in the import list or not. I recommend that as a module writer, you use the more polite <KBD
CLASS="command"
>@EXPORT_OK </KBD
>. </P
><P
CLASS="para"
>Please see the Exporter documentation for numerous other features, which, among other things, allow the user of the module to import groups of functions using tag names, or to specify the group using one or more regular expressions.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-956256"
>6.5.1 How Do use and Exporter Work?</A
></H3
><P
CLASS="para"
>If you are not interested in the details of how <KBD
CLASS="command"
>use</KBD
> and Exporter work, you can easily skip this section without loss of continuity. This is one of those "knowledge for knowledge's sake" kind of sections.</P
><P
CLASS="para"
>The statement</P
><PRE
CLASS="programlisting"
>use BankAccount ('withdraw', 'deposit');</PRE
><P
CLASS="para"
>behaves exactly as if you had said</P
><PRE
CLASS="programlisting"
>BEGIN { require BankAccount; 
        BankAccount::import('withdraw', 'deposit');}</PRE
><P
CLASS="para"
><KBD
CLASS="command"
>BEGIN</KBD
> ensures that this statement is parsed and executed as soon as it is seen. <KBD
CLASS="command"
>require</KBD
> loads the file <I
CLASS="filename"
>BankAccount.pm</I
> if it has not been loaded already. Finally, the <KBD
CLASS="command"
>import</KBD
> subroutine is called on that module.[<A
CLASS="footnote"
HREF="#ch06-pgfId-959331"
>3</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch06-pgfId-959331"
>[3]</A
> A bit of a white lie here. It actually does <KBD
CLASS="command"
>BankAccount-&gt;import</KBD
> (uses an arrow instead of the ::), a slightly different way of calling a subroutine. We'll study this notation in detail in <A
CLASS="xref"
HREF="ch07_01.htm"
TITLE="Object-Oriented Programming"
>Chapter 7, <CITE
CLASS="chapter"
>Object-Oriented Programming</CITE
></A
>. For now, this explanation is adequate.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
><KBD
CLASS="command"
>import</KBD
><A
CLASS="indexterm"
NAME="ch06-idx-960839-0"
></A
> is not a Perl keyword. It is simply a call to a user-defined subroutine known as <KBD
CLASS="command"
>import</KBD
>, and the module can define it any way it wishes and do what it wants with its argument list. If <KBD
CLASS="command"
>BankAccount</KBD
> does not define <KBD
CLASS="command"
>import</KBD
> and doesn't inherit it, there is no difference between <KBD
CLASS="command"
>use</KBD
> <KBD
CLASS="command"
>BankAccount</KBD
> and <KBD
CLASS="command"
>require</KBD
> <KBD
CLASS="command"
>BankAccount</KBD
>. By using Exporter, a module can simply inherit an <KBD
CLASS="command"
>import</KBD
> method without having to implement it.</P
><P
CLASS="para"
>To understand how Exporter works, let us build an <KBD
CLASS="command"
>import</KBD
> subroutine ourselves. We develop a simple module called Environment that lets us quickly access environment variables. This is how we want to use it:</P
><PRE
CLASS="programlisting"
>use Environment;
print $USER, $PATH;</PRE
><P
CLASS="para"
>Instead of saying <KBD
CLASS="command"
>$ENV{'USER'}</KBD
>, we can now simply say <KBD
CLASS="command"
>$USER</KBD
>. In other words, the Environment module (and specifically a function called <KBD
CLASS="command"
>import</KBD
> in that module) installs variables like <KBD
CLASS="command"
>$USER</KBD
> and <KBD
CLASS="command"
>$PATH</KBD
> in its caller's namespace.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch06_05.htm"
TITLE="Environment.pm: Create Variables Corresponding to Environment Variables"
>Example 6.1</A
> shows one way to do write this subroutine.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch06-32152"
>Example 6.1: Environment.pm: Create Variables Corresponding to Environment Variables</A
></H4
><PRE
CLASS="programlisting"
>package Environment;
sub import {
    # Get some caller details; its package name, and the current file name
    # and line number
    my ($caller_package) = caller; 
    foreach $envt_var_name (keys %ENV) {
         *{&quot;${caller_package}::${envt_var_name}&quot;} = \$ENV{$envt_var_name};
    }
}
1;  # To signify successful initialization</PRE
></DIV
><P
CLASS="para"
>To keep the example small, <KBD
CLASS="command"
>import</KBD
> ignores its parameter list. It uses the <KBD
CLASS="command"
>caller</KBD
> built-in function to find out the calling package's name and creates aliases in that package. For an environment variable <KBD
CLASS="command"
>USER</KBD
>, the statement inside the <KBD
CLASS="command"
>foreach</KBD
> line is translated to this:</P
><PRE
CLASS="programlisting"
>*{&quot;main::USER&quot;} = \$ENV{USER};</PRE
><P
CLASS="para"
>assuming that <KBD
CLASS="command"
>main</KBD
> is the calling package.</P
><P
CLASS="para"
>This small nugget encapsulates most of the knowledge of <A
CLASS="xref"
HREF="ch03_01.htm"
TITLE="Typeglobs and Symbol Tables"
>Chapter 3</A
>. The right-hand side returns a reference to the scalar containing the value of the environment variable, which is assigned to a typeglob. (Remember our discussion of selective aliasing?) The typeglob expression on the left creates a symbol table entry in <KBD
CLASS="command"
>main</KBD
>'s symbol table, whose scalar component is made to point to the value from the right-hand side. Exporter works exactly the same way, except that it aliases only function names.</P
><P
CLASS="para"
>Incidentally, the standard Perl distribution contains a module called <A
CLASS="indexterm"
NAME="ch06-idx-960840-0"
></A
>Env that looks quite similar to our Environment package. The only distinction is that instead of creating an alias of the environment variables, Env uses the <KBD
CLASS="command"
>tie</KBD
> mechanism,[<A
CLASS="footnote"
HREF="#ch06-pgfId-958435"
>4</A
>] a much more inefficient way of doing things than the approach just shown.<A
CLASS="indexterm"
NAME="ch06-idx-960835-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960835-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960835-2"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960835-3"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-960835-4"
></A
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch06-pgfId-958435"
>[4]</A
> We'll discuss the <CODE
CLASS="literal"
>tie</CODE
> approach in <A
CLASS="xref"
HREF="ch09_01.htm"
TITLE="Tie"
>Chapter 9, <CITE
CLASS="chapter"
>Tie</CITE
></A
>.</P
></DIV
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_04.htm"
TITLE="6.4 Privacy"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.4 Privacy"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_06.htm"
TITLE="6.6 Nesting Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.6 Nesting Packages"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.4 Privacy</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6.6 Nesting Packages</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
