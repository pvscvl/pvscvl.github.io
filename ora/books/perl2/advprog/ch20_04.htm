<HTML
><HEAD
>
<TITLE>20.4 Stacks and Messaging Protocol (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:19Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch20_01.htm"
TITLE="20. Perl Internals"><LINK
REL="prev"
HREF="ch20_03.htm"
TITLE="20.3 Perl Value Types"><LINK
REL="next"
HREF="ch20_05.htm"
TITLE="20.5 Meaty Extensions"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_03.htm"
TITLE="20.3 Perl Value Types"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.3 Perl Value Types"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch20_01.htm"
TITLE="20. Perl Internals"
>Chapter 20<BR>Perl Internals</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_05.htm"
TITLE="20.5 Meaty Extensions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.5 Meaty Extensions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch20-31893"
>20.4 Stacks and Messaging Protocol</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-972999-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-972999-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-972999-2"
></A
>Whew! We have now finished a reasonably in-depth look at all the value types offered by Perl. The next half of this chapter is devoted to understanding the data structures, API, and protocol used between caller and called subroutines. </P
><P
CLASS="para"
>We mentioned earlier that the argument stack is the data structure used for passing parameters and results between functions. <A
CLASS="xref"
HREF="ch20_04.htm"
TITLE="Argument and mark stack after foo has been called and foo has just called bar"
>Figure 20.11</A
> shows the stack after calling <KBD
CLASS="command"
>foo(10,20)</KBD
>, which in turn has called<KBD
CLASS="command"
> bar("hello",</KBD
> <KBD
CLASS="command"
>30.2,</KBD
> <KBD
CLASS="command"
>100)</KBD
>.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch20-19421"
>Figure 20.11: Argument and mark stack after foo has been called and foo has just called bar</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_2011.gif"
ALT="Figure 20.11"><P
CLASS="para"
>How does <KBD
CLASS="command"
>bar</KBD
> know how many parameters it should pick up from the top of <KBD
CLASS="command"
>stack</KBD
>? Well, Perl keeps track of the stretches of the argument stack using another stack called a <KBD
CLASS="command"
>markstack</KBD
><A
CLASS="indexterm"
NAME="ch20-idx-973005-0"
></A
> (a stack of bookmarks, in a sense). <KBD
CLASS="command"
>bar</KBD
> knows the parameters meant for it by simply computing the difference between the current top of <KBD
CLASS="command"
>stack</KBD
> and the bookmark stored at the top of <KBD
CLASS="command"
>markstack</KBD
>. This stretch of the stack corresponds to <KBD
CLASS="command"
>bar</KBD
>'s <KBD
CLASS="command"
>@_</KBD
> array. Conversely, when <KBD
CLASS="command"
>bar</KBD
> is ready to return, it dumps one or more results in its stretch of stack, and <KBD
CLASS="command"
>foo</KBD
> knows how many scalars have been returned by looking at the markstack.</P
><P
CLASS="para"
>All these manipulations happen transparently when you are in script space. But if you write C routines that are called by Perl (extending Perl) or call Perl functions from C (embedding Perl), there are some details to contend with. Although tools such as XS and SWIG help you write extensions easily, you will find that the following sections will pave the way for even more powerful and intuitive extensions (intuitive, that is, for the script writer).</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-952383"
>20.4.1 Calling a Perl Subroutine</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-973006-0"
></A
>Let's start with the case in which you call a Perl subroutine from C, normally done when you embed the Perl interpreter in your application. <A
CLASS="xref"
HREF="ch20_04.htm"
TITLE="Macros Used in Calling a Perl Routine (Embedding)"
>Table 20.6</A
> contains the macros (defined in <I
CLASS="filename"
>pp.h</I
>) that you will need to use, <EM
CLASS="emphasis"
>in the order given</EM
>. These macros may be difficult to remember on one reading, but the good news is that they are called exactly in the same order every time, and they sort of grow on you after a while.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch20-34394"
>Table 20.6: Macros Used in Calling a Perl Routine (Embedding)<A
CLASS="indexterm"
NAME="ch20-idx-973204-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973204-1"
></A
></A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Function/Macro</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>dSP</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Declare a few variables used by the following macros.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>ENTER</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Start scope. </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>SAVETMPS</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>All mortal variables created after this call will be deleted when <KBD
CLASS="command"
>FREETMPS</KBD
> is called.</P
><P
CLASS="para"
>See explanation of <KBD
CLASS="command"
>tmps_stack</KBD
> in the next section.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>PUSHMARK</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Remember the current top of <KBD
CLASS="command"
>stack</KBD
> (updates <KBD
CLASS="command"
>markstack</KBD
>).</P
><P
CLASS="para"
><KBD
CLASS="command"
>ENTER</KBD
>, <KBD
CLASS="command"
>SAVETMPS</KBD
>, and <KBD
CLASS="command"
>PUSHMARK </KBD
>are called to prepare the stack for a subroutine call.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>XPUSHs(SV*)</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Now you can push any number of arguments onto the stack. If you push newly created SVs, you can mark them as mortal, and Perl will automatically delete them at end of scope.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>PUTBACK</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Indicates that all arguments have been pushed in. <KBD
CLASS="command"
>PUSHMARK</KBD
> and <KBD
CLASS="command"
>PUTBACK</KBD
> bracket the arguments, in a sense.</P
><P
CLASS="para"
>At this stage, the Perl procedure can be called using <KBD
CLASS="command"
>perl_call_pv</KBD
> or <KBD
CLASS="command"
>perl_call_sv</KBD
>. (See the following example.)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>SPAGAIN</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Like <KBD
CLASS="command"
>PUSHMARK</KBD
>, it provides the opening bracket for the returned results. Even if there aren't any returned results, you must call it anyway.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>POPi
POPl
POPn
POPp
POPs</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Pop a scalar from the stack and return the appropriate type:</P
><P
CLASS="para"
>integer, long, double, pointer (typically to string), and SV.</P
><P
CLASS="para"
><KBD
CLASS="command"
>perl_call_pv</KBD
> returns the number of result parameters pushed onto the stack, and you must take care to call these macros only that many times.</P
><P
CLASS="para"
>Keep in mind that <CODE
CLASS="literal"
>POP</CODE
> returns the results in the inverse order in which the Perl procedure pushed its results on the stack.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>PUTBACK</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Call this after all result parameters have been popped.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>FREETMPS</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>See <KBD
CLASS="command"
>SAVETMPS</KBD
>.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>LEAVE</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Ends scope. See <KBD
CLASS="command"
>ENTER</KBD
>.</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The code snippet shown next illustrates how to invoke a Perl procedure called <KBD
CLASS="command"
>add</KBD
>, with two input parameters <KBD
CLASS="command"
>10</KBD
> and <KBD
CLASS="command"
>20</KBD
>, and how to retrieve the results. Note again that the macros are used in the order given in <A
CLASS="xref"
HREF="ch20_04.htm"
TITLE="Macros Used in Calling a Perl Routine (Embedding)"
>Table 20.6</A
>.</P
><PRE
CLASS="programlisting"
>#include &lt;perl.h&gt;
void foo() {
    int n;         /* number of parameters returned by add       */
    dSP;  
    ENTER;         /* Tell perl we are entering a new scope      */
    SAVETMPS;      /* Ensure that FREETMPS will free only those
                      mortals created after this stmt            */
    PUSHMARK(sp);  /* Remember the current stack pointer. sp is 
                     declared by dSP                             */
    /* Push arguments */
    XPUSHs(sv_2mortal(newSViv(10)));         /* push an integer  */
    XPUSHs(sv_2mortal(newSViv(20)));         /* push another     */
    PUTBACK;                                 /* End of arguments */

    /* Call subroutine by name, and expect it to return a scalar */
    n = perl_call_pv (&quot;add&quot;, G_SCALAR); 

    SPAGAIN;                  /* Start looking at return results */

    /* Retrieve returned value from stack */
    if (n == 1)
        printf (&quot;Result: %d \n&quot;, POPi);
    /* Closing details                                           */ 
    PUTBACK;            /* Finished removing results from stack  */
    /* Time to clean up and leave ..                             */
    FREETMPS;  /* Frees the two mortal parameters passed to add  */
    LEAVE;     /* Leave scope                                    */
}</PRE
><P
CLASS="para"
>This is all you need to understand the section <A
CLASS="xref"
HREF="ch20_06.htm"
TITLE="Easy Embedding API"
>"Easy Embedding API</A
>," which implements the <KBD
CLASS="command"
>perl_call_va</KBD
> convenience function introduced in <A
CLASS="xref"
HREF="ch19_01.htm"
TITLE="Embedding Perl:The Easy Way"
>Chapter 19</A
>.<A
CLASS="indexterm"
NAME="ch20-idx-973007-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973007-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-20585"
>20.4.2 The Called Side: Hand-Coding an XSUB</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-973008-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973008-1"
></A
>Having seen what it takes to call a Perl subroutine, let's look at the stack from the viewpoint of a called subroutine. This is precisely the situation that all XSUBs are in, and after this section, you'll be able to completely understand the code produced by <A
CLASS="indexterm"
NAME="ch20-idx-973011-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973011-1"
></A
>SWIG and <EM
CLASS="emphasis"
>xsubpp</EM
>.</P
><P
CLASS="para"
>First, let's settle the issue of how Perl discovers your XSUB. That is, if someone writes "<KBD
CLASS="command"
>add($a,$b,$c)</KBD
>" in a script, how does Perl know to call the C procedure <KBD
CLASS="command"
>add</KBD
>, or <KBD
CLASS="command"
>my_add</KBD
>, or whatever? Well, you have to create a binding between a subroutine name (as known in script space) and a C procedure, using the procedure <KBD
CLASS="command"
>newXS</KBD
> like this:</P
><PRE
CLASS="programlisting"
>extern XS(add);             /* XS macro explained in <A
CLASS="xref"
HREF="ch20_04.htm"
TITLE="Macros Used to Manipulate the Stack (Embedding)"
>Table 20.7</A
> next */
newXS(&quot;add&quot;, add, &quot;add.c&quot;); /* Filename given for debugging reasons  */</PRE
><P
CLASS="para"
>For a module called <KBD
CLASS="command"
>foo</KBD
>, XS and SWIG generate a procedure called <KBD
CLASS="command"
>boot_foo</KBD
>, which uses <KBD
CLASS="command"
>newXS</KBD
> to bind all XSUBs in that module to the corresponding names. The elegant thing about this approach is that <KBD
CLASS="command"
>boot_foo</KBD
> itself is an XSUB, and if you use dynamic loading, this procedure is called by the Dynaloader module at run-time<EM
CLASS="emphasis"
>.</EM
></P
><P
CLASS="para"
>XSUBs use the <A
CLASS="indexterm"
NAME="ch20-idx-973019-0"
></A
>macros (defined in <EM
CLASS="emphasis"
>XSUB.h</EM
>) listed in <A
CLASS="xref"
HREF="ch20_04.htm"
TITLE="Macros Used to Manipulate the Stack (Embedding)"
>Table 20.7</A
> to examine the stack and return results. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch20-22578"
>Table 20.7: Macros Used to Manipulate the Stack (Embedding)</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Function/Macro</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>XS</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Supplies the standard signature required for your XSUB. For example, the procedure <KBD
CLASS="command"
>foo</KBD
> should be declared thus:<PRE
CLASS="programlisting"
>   XS(foo) {
   }</PRE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>dXSARGS</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Defines some local variables used by the other macros. The important one is an integer called <KBD
CLASS="command"
>items</KBD
>, which contains the number of parameters pushed onto the stack by the caller.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>SV* ST(n)</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Retrieves the <EM
CLASS="emphasis"
>n</EM
>th parameter (an SV*) from the stack. <KBD
CLASS="command"
>ST(0)</KBD
> refers to the first parameter (<KBD
CLASS="command"
>$_[0]</KBD
>), and <KBD
CLASS="command"
>ST(items-1)</KBD
> is the last parameter. </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>XSRETURN(n)</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Indicates that you have left <EM
CLASS="emphasis"
>n</EM
> result parameters on the stack and returns. In the typical case in which you have only one value to return, you can use one of the more convenient macros listed below.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>XSRETURN_NO
XSRETURN_YES
XSRETURN_UNDEF</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Issues <CODE
CLASS="literal"
>XSRETURN(1)</CODE
> after leaving an SV on the stack with a value of 0, 1, or undef.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>XSRETURN_EMPTY</PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The same as <KBD
CLASS="command"
>XSRETURN(0).</KBD
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
>XSRETURN_IV (int)
XSRETURN_NV (double)
XSRETURN_PV (char *) </PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Leaves a new mortal scalar with the appropriate value type. This scalar will be deleted when the caller invokes <KBD
CLASS="command"
>FREETMPS</KBD
>.</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The following snippet shows the hand-coded XSUB <KBD
CLASS="command"
>add</KBD
>, which adds all its input parameters and returns the result:</P
><PRE
CLASS="programlisting"
>#include &lt;perl.h&gt;
#include &lt;XSUB.h&gt;
XS(add)                              /* All XSUBs have this signature*/
{
    int sum = 0;
    dXSARGS;                         /* defines 'items', and inits it* 
                                      * with the number of params    */
    if (items == 0) 
        XSRETURN_IV(0);    /* Return 0 if param list is empty        */

    for (--items ; items &gt;= 0 ; --items) {
        if (SvIOK(ST(items))         /* If SV contains an integer    */
           sum += SvIV(ST(items));   
    }
    XSRETURN_IV (sum);
}</PRE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch20-pgfId-967968"
>20.4.2.1 Returning a variable list of results</A
></H4
><P
CLASS="para"
>The subroutine in the preceding example returns one parameter. Returning multiple parameters is straightforward too. The following example shows how a null-terminated array of strings (<KBD
CLASS="command"
>argv</KBD
>) is converted to an equal number of result parameters on the stack:</P
><PRE
CLASS="programlisting"
>int i = 0;
for ( ; *argv; argv++, i++) {
    ST(i) = sv_2mortal(newSVPV(*argv,0));
} 
XSRETURN(i);</PRE
><P
CLASS="para"
>As you can see, returned parameters occupy the stretch of argument stack between <KBD
CLASS="command"
>ST(0)</KBD
><A
CLASS="indexterm"
NAME="ch20-idx-973020-0"
></A
> and <KBD
CLASS="command"
>ST(n-1)</KBD
>. <KBD
CLASS="command"
>XSRETURN</KBD
><A
CLASS="indexterm"
NAME="ch20-idx-973018-0"
></A
> adjusts the markstack so that the caller can see the number of scalars being returned. It is important to note that the preceding code does not modify the <EM
CLASS="emphasis"
>input arguments</EM
> that happen to live in the same stretch; it updates the <EM
CLASS="emphasis"
>stack</EM
> to point to new SVs. (Remember that the stack is an array of SV*s.) To modify an input parameter directly, you would instead write:</P
><PRE
CLASS="programlisting"
>sv_setpv(ST(i), &quot;hello&quot;, 0); /* Like modifying $_[<CODE
CLASS="replaceable"
><I
>i</I
></CODE
>] */</PRE
><P
CLASS="para"
>While functions such as <KBD
CLASS="command"
>read</KBD
> do this, I recommend that you refrain from taking advantage of it, and create new SVs instead. In addition, to save the calling code from worrying about memory management or reference counting issues, give that responsibility to Perl by making these new values mortal. They will then be automatically deleted at the end of scope.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch20-25223"
>20.4.2.2 Ensuring that the stack is big enough</A
></H4
><P
CLASS="para"
>The <KBD
CLASS="command"
>ST</KBD
> macro refers directly to the corresponding spot on the stack. Because the stack may not have been extended enough to accommodate the argument in the macro, you cannot arbitrarily say, for example, <KBD
CLASS="command"
>ST(100)</KBD
> without risking a crash. The <KBD
CLASS="command"
>EXTEND</KBD
><A
CLASS="indexterm"
NAME="ch20-idx-973021-0"
></A
> macro ensures that the stack is big enough to hold your data:</P
><PRE
CLASS="programlisting"
>EXTEND(sp, 100); /* Extend stack by 100 elements */</PRE
><P
CLASS="para"
>This macro can be used in both the caller and the called subroutines. The variable <KBD
CLASS="command"
>sp</KBD
> (the stack pointer) is defined automatically for you (by the <KBD
CLASS="command"
>dSP</KBD
> and <KBD
CLASS="command"
>dXSARGS</KBD
> macros). <KBD
CLASS="command"
>ST()</KBD
> could have used <KBD
CLASS="command"
>av_store()</KBD
> to automatically extend the stack, but that would be considerably slower.</P
><P
CLASS="para"
>There's an alternative approach. If we reset the stack pointer back to the bottom of our stretch of stack, then we can use the <KBD
CLASS="command"
>XPUSH</KBD
><A
CLASS="indexterm"
NAME="ch20-idx-973022-0"
></A
>s macro, which automatically extends the stack for you: </P
><PRE
CLASS="programlisting"
>i = 0;
sp -= items;          /* Resets stack pointer to beginning */
for ( ; *argv; argv++, i++) {
    /* Push fresh mortal string-valued scalars */
    XPUSHs(sv_2mortal(newSVpv(*argv, 0)));
}
XSRETURN(i);</PRE
><P
CLASS="para"
>This is precisely the strategy adopted by the <KBD
CLASS="command"
>PPCODE</KBD
> directive in XS, as we shall soon see. As I said earlier, this code doesn't modify the input parameters; it simply replaces those pointers in the stack with new ones. Note that if we forgot to reset the stack pointer, we would be piling stuff on top of the input parameters, and all hell would break loose when this procedure returns.<A
CLASS="indexterm"
NAME="ch20-idx-973013-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973013-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973013-2"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973013-3"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973013-4"
></A
></P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-14695"
>20.4.3 Inside Other Stacks</A
></H3
><P
CLASS="para"
>Let us take a brief look at the stacks available inside Perl (besides the argument and mark stacks) to understand what the macros described in the preceding sections do internally. Unless you are curious about these kind of details, you can safely skip this section without loss of continuity.</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Save stack (<KBD
CLASS="command"
>savestack</KBD
>)</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-973023-0"
></A
>This stack is used as a repository for storing all pieces of global information that are liable to change within a nested scope. To safely squirrel away an integer, for example, Perl uses a macro called <KBD
CLASS="command"
>SSPUSHINT</KBD
> (in <I
CLASS="filename"
>scope.h</I
>). This macro pushes three pieces of information on <KBD
CLASS="command"
>savestack</KBD
>: the value of the integer, the address of the integer, and the fact that an integer has been stored. The value of this integer can now be changed freely within a nested scope. At the end of the current scope, Perl pops the savestack and knows that because an integer has been stored, it must also have stored the old pointer and value. Thus the original integer is efficiently restored.</P
><P
CLASS="para"
>A statement such as <KBD
CLASS="command"
>local($a)</KBD
> is implemented by saving the GV corresponding to "<KBD
CLASS="command"
>a</KBD
>" and its scalar value on the save stack; the scalar value is replaced with a new scalar. When the scope ends, the GV and its scalar pointer are automatically restored. </P
></DD
><DT
CLASS="term"
>Scope stack (<KBD
CLASS="command"
>scopestack</KBD
>)</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch20-idx-973024-0"
></A
>scope stack is used to remember positions along the save stack that correspond to different scopes (analogous to the markstack providing bookmarks for the argument stack). When the scope ends (upon <KBD
CLASS="command"
>LEAVE</KBD
>), Perl knows exactly how many objects to pop off the save stack and restores them to their former values.</P
></DD
><DT
CLASS="term"
>Temporaries stack (<KBD
CLASS="command"
>tmps_stack</KBD
>)</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-973025-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973025-1"
></A
>When you create a mortal variable or mark a variable as mortal (using <KBD
CLASS="command"
>sv_2mortal</KBD
> or <KBD
CLASS="command"
>local</KBD
>, in script space), Perl pushes this SV on to this stack (without touching its reference count). At the end of scope, it decrements the reference count of all temporary variables pushed into the stack in that scope. Recall that <KBD
CLASS="command"
>my</KBD
> variables (lexicals) sit in CV-specific scratchpads, so they never touch the temporaries stack. </P
></DD
><DT
CLASS="term"
>Return stack (<KBD
CLASS="command"
>retstack</KBD
>)</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-973026-0"
></A
>Before calling a subroutine, Perl remembers the starting opcode of the statement following that subroutine call by pushing it on the <KBD
CLASS="command"
>retstack</KBD
>. </P
></DD
><DT
CLASS="term"
>Context stack (<KBD
CLASS="command"
>cxstack</KBD
>)</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-973027-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973027-1"
></A
>This stack keeps track of the context information for the current block, such as the block label and the CV to execute when <KBD
CLASS="command"
>last</KBD
>, <KBD
CLASS="command"
>redo</KBD
>, or <KBD
CLASS="command"
>next</KBD
> are invoked. These are restored to the previous elements when the block is exited. I do not know why there are two stacks to deal with scope-related context information.<A
CLASS="indexterm"
NAME="ch20-idx-973002-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973002-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-973002-2"
></A
></P
></DD
></DL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_03.htm"
TITLE="20.3 Perl Value Types"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.3 Perl Value Types"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_05.htm"
TITLE="20.5 Meaty Extensions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.5 Meaty Extensions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>20.3 Perl Value Types</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>20.5 Meaty Extensions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
