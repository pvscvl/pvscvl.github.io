<HTML
><HEAD
>
<TITLE>2.3 Professors, Students, Courses (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:30:50Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Implementing Complex Data Structures"><LINK
REL="prev"
HREF="ch02_02.htm"
TITLE="2.2 Example: Matrices"><LINK
REL="next"
HREF="ch02_04.htm"
TITLE="2.4 Pass the Envelope"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_02.htm"
TITLE="2.2 Example: Matrices"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.2 Example: Matrices"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Implementing Complex Data Structures"
>Chapter 2<BR>Implementing Complex Data Structures</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_04.htm"
TITLE="2.4 Pass the Envelope"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.4 Pass the Envelope"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-19101"
>2.3 Professors, Students, Courses</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-949533-0"
></A
>This example shows how you might represent professor, student, and course data as hierarchical records and how to link them up. Assume that the data files look like this:</P
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>#file: professor.dat</B
>
id          : 42343                #Employee Id
Name        : E.F.Schumacher
Office Hours: Mon 3-4, Wed 8-9
Courses     : HS201, SS343         #Course taught
...


<B
CLASS="emphasis.bold"
>#file: student.dat</B
>
id          : 52003                 # Registration id
Name        : Garibaldi
Courses     : H301, H302, M201      # Courses taken
...
<B
CLASS="emphasis.bold"
>#file: courses.dat</B
>
id          : HS201
Description : Small is beautiful
Class Hours : Mon 2-4, Wed 9-10, Thu 4-5
...</PRE
><P
CLASS="para"
>Each "id:" line starts a new record.</P
><P
CLASS="para"
>Among other tasks, let us say we are required to find out whether there is a scheduling conflict on professors' and students' hours. Because our focus is on data representation and getting a feel for Perl's reference syntax, we will look at implementing only some parts of the problem.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-pgfId-943836"
>2.3.1 Representation</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-949532-0"
></A
>A hash table is a good representation for a heterogeneous record, as we mentioned earlier, so a student structure may be implemented like this:</P
><PRE
CLASS="programlisting"
>$student{42343} = {
    'Name'    =&gt; 'Garibaldi',
    'Courses' =&gt; [ ]};</PRE
><P
CLASS="para"
>A number of subtle design choices have been made here.</P
><P
CLASS="para"
>We could have replaced "foreign keys" (to use the database term) such as "HS201" with references to the corresponding course data structures. We didn't, because it is then tempting to directly dereference these references, in which case the student code is aware of how the course data is structured. </P
><P
CLASS="para"
>We maintain separate global hash tables for students, courses, and professors&nbsp;- yet another effort to keep mostly unrelated data completely separate and to make it possible to change a part of the system without affecting everyone. </P
><P
CLASS="para"
>There is one piece of data we haven't discussed before: time ranges. Both professors and courses have certain "busy" or "active" hours. What is a good representation for this? You might choose to represent the line "Mon 2-3, Tue 4-6" as follows:</P
><PRE
CLASS="programlisting"
>$time_range = {
    'Mon' =&gt; [2,3],
    'Tue' =&gt; [4,6]
};</PRE
><P
CLASS="para"
>There is a much simpler representation, in case you haven't already guessed it. The key insight is that since we are concerned only with clashes in time, the system should be able to quickly tell us whether a professor or a course is "active" in a given hour of the week or not. Considering that there are only       24 * 7 = 168 hours in a week, the entire week's schedule can be represented by a bitmap vector of 21 bytes (168/8). If a bit is set, we know that the professor is teaching something in that hour. In fact we can reduce the storage requirements further if we only account for the <EM
CLASS="emphasis"
>effective</EM
> hours in a week (say, 7:00 A.M. to 7:00 P.M., Monday to Friday). That brings it down to 8 bytes (12 hours * 5 days / 8). The nice thing here is that an entire sequence of time ranges boils down to one scalar containing a bitmap vector. The other cool thing is that you can obtain time conflicts by logically AND-ing two bitmaps. </P
><P
CLASS="para"
>Having settled the representation, let us write some code to read the <EM
CLASS="emphasis"
>professor.dat</EM
> file, and construct the data structures.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch02-pgfId-949673"
>Example 2.3: Read professor.dat and Create Hierarchical Records in Memory</A
></H4
><PRE
CLASS="programlisting"
>my (%profs);  # prof_read_file() populates this data structure from file

sub <B
CLASS="emphasis.bold"
>prof_read_file</B
> {
    my ($filename) = @_;
    my ($line, $curr_prof);
    open (F, $filename) || die &quot;Could not open $filename&quot;;
    while ($line = &lt;F&gt;) {
        chomp($line);
        next if $line =~ /^\s*$/;       # skip blank lines
        if ($line =~ /^id.*:\s*(.*)/) {
            # Use an anonymous hash to store a professor's data
            $profs{$1} = $curr_prof = {};
        } elsif ($line =~ /^Office Hours.*:\s*(.*)/) {
            # $1 contains a string like 'Mon 2-3, Tue 4-6'
            $curr_prof-&gt;{Office Hours} = interval_parse($1);
        } elsif ($line =~ /^Courses.*:\s*(.*)/) {
            # $1 contains something like 'HS201, MA101'
            my (@courses_taught) =  split(/[\s,]+/, $1);
            $curr_prof-&gt;{Courses} = \@courses_taught;
        }
    }
}</PRE
></DIV
><P
CLASS="para"
>Notice that the <KBD
CLASS="command"
>courses_taught</KBD
> array is local to the block. When the block ends, <KBD
CLASS="command"
>$curr_prof-&gt;{Courses}</KBD
> continues to hang on to this array. You can omit one step like this:</P
><PRE
CLASS="programlisting"
>$curr_prof-&gt;{Courses} = [split(/[\s,]+/, $1)];</PRE
><P
CLASS="para"
>I prefer the earlier approach because it is more readable. </P
><P
CLASS="para"
>The <KBD
CLASS="command"
>interval_parse</KBD
> method parses a string such as "Mon 3-5, Wed 2-6" into a bit string, as was mentioned earlier. The code looks like this:</P
><PRE
CLASS="programlisting"
># Each hour in a week (with days from 7am to 7pm) gets its own
# unique bit in an 8-byte string.
# Mon 7-8 is the 0th bit, Mon 6-7pm is 11, ... Fri 6-7 (pm) is 60th.
my %base_hours = (
   mon =&gt; 0, tue =&gt; 12, wed =&gt; 24 , thu =&gt; 36, fri =&gt; 48
);
sub <B
CLASS="emphasis.bold"
>interval_parse</B
> {
    my ($interval_sequence) = @_; #contains &quot;Mon 3-5, Tue 2-6&quot;
    my ($time_range) = &quot;&quot;;
    foreach $day_hours (split /,/, $interval_sequence) {
       # $day_hours contains &quot;Mon 3-5&quot; etc.
       my ($day, $from, $to) = 
           ($day_hours =~ /([A-Za-z]+).*(\d+)-(\d+)/);
       # if $from or $to is less than 7, it must be afternoon. Normalize
       # it by adding 12. Then reduce it to a zero base by subtracting 7
       # (that is, 7 hrs to 19 hrs becomes 0 - 12. Finally, 
       # normalize each hour in a day with respect to weekly hours, 
       # by adding in the day's &quot;base hour&quot;
       $to = 19 if $to == 7;
       $from += 12 if $from &lt; 7 ; $to += 12  if $to &lt;= 7;
       my $base = $base_hours{lc $day};
       $from += $base - 7; $to += $base - 7;
       # At this point Tue 7a.m ==&gt; 12 and Tue 4 p.m =&gt; 21
       for ($i = $from; $i &lt; $to;  $i++) {
           # Set the corresponding bit
           vec($time_range, $i, 1) = 1;
       }
    }
    $time_range;
}</PRE
><P
CLASS="para"
>To check for scheduling constraints on a professor's time, we have to calculate overlapping hours between the professor's office hours and each course he or she teaches and between the courses themselves, as shown in <A
CLASS="xref"
HREF="ch02_03.htm"
TITLE="Checking Constraints on a Professor's Time"
>Example 2.4</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch02-30177"
>Example 2.4: Checking Constraints on a Professor's Time</A
></H4
><PRE
CLASS="programlisting"
>sub prof_check_constraints {
    my ($prof) = @_;
    my $r_prof = $profs{$prof};  # %profs created by prof_read_file
    my $office_hours = $r_prof-&gt;{Office Hours};
    my $rl_courses = <B
CLASS="emphasis.bold"
>$r_prof-&gt;{Courses}</B
>; 
    for $i (0 .. $#{$rl_courses}) {
       $course_hours = course_get_hours($rl_courses-&gt;[$i]);
       if (interval_conflicts($office_hours, $course_hours)) {
           print &quot;Prof. &quot;, $r_prof-&gt;{name},
               &quot; Office hours conflict with course $course_taught\n&quot;;
       }
       for $j ($i .. $#{$rl_courses}) {
           my ($other_course_hours) = course_get_hours($rl_courses-&gt;[$j]);
           if (interval_conflicts ($course_hours, $other_course_hours)) {
               print &quot;Prof. &quot;, $r_prof-&gt;{name},
                &quot;: Course conflict: &quot;, $rl_courses-&gt;[$i], &quot; &quot;
                                       $rl_courses-&gt;[$j], &quot;\n&quot;;
       }
    }
}</PRE
></DIV
><P
CLASS="para"
>The subroutine <CODE
CLASS="literal"
>interval_conflicts</CODE
> simply compares the two bitmaps, as shown below:</P
><PRE
CLASS="programlisting"
>sub interval_conflicts {
    my ($t1, $t2) = @_;
    my ($combined) = $t1 &amp; $t2;
    # $combined will have at least one bit set if there's a conflict
    my $offset = length($combined) * 8;
    # start counting down from last bit, and see if any is set
    while (--$offset &gt;= 0) {
        return 1 if vec($combined,$offset,1);
    }
    return 0;
}</PRE
><P
CLASS="para"
>Note that all knowledge of the internal representation of a time interval is encapsulated in functions with the prefix <CODE
CLASS="literal"
>interval_</CODE
>. These functions thus encapsulate an <EM
CLASS="emphasis"
>abstract data type</EM
> called "interval." When we study modules and objects in later chapters, we will learn ways of organizing such pieces of code into reusable entities.<A
CLASS="indexterm"
NAME="ch02-idx-949548-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-949548-1"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_02.htm"
TITLE="2.2 Example: Matrices"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.2 Example: Matrices"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_04.htm"
TITLE="2.4 Pass the Envelope"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.4 Pass the Envelope"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.2 Example: Matrices</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.4 Pass the Envelope</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
