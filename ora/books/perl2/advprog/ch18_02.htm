<HTML
><HEAD
>
<TITLE>18.2 Example: Fractals with Perl (Advanced Perl Programming)</TITLE>
<META
NAME="DC.title"
CONTENT="Advanced Perl Programming"><META
NAME="DC.creator"
CONTENT="Sriram Srinivasan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:05Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-220-4"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch18_01.htm"
TITLE="18. Extending Perl:A First Course"><LINK
REL="prev"
HREF="ch18_01.htm"
TITLE="18.1 Writing an Extension: Overview"><LINK
REL="next"
HREF="ch18_03.htm"
TITLE="18.3 SWIG Features"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Perl Programming"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Advanced Perl Programming"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_01.htm"
TITLE="18.1 Writing an Extension: Overview"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.1 Writing an Extension: Overview"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch18_01.htm"
TITLE="18. Extending Perl:A First Course"
>Chapter 18<BR>Extending Perl:A First Course</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_03.htm"
TITLE="18.3 SWIG Features"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.3 SWIG Features"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch18-34609"
>18.2 Example: Fractals with Perl</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-971907-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971907-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971907-2"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971907-3"
></A
>Enough general talk! Let us test-drive both tools using a simple piece of fractal-drawing code. This problem is tailor-made for C, because generating a fractal image involves performing a series of computations on every pixel, which calls for compact data structures <EM
CLASS="emphasis"
>and</EM
> fast number-crunching. This exercise creates the familiar Mandelbrot set image shown in <A
CLASS="xref"
HREF="ch18_02.htm"
TITLE="Mandelbrot set"
>Figure 18.3</A
>.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch18-20212"
>Figure 18.3: Mandelbrot set</A
></H4
><IMG
CLASS="graphic"
SRC="figs/wpa_1803.gif"
ALT="Figure 18.3"><P
CLASS="para"
>Our Mandelbrot code is implemented in <I
CLASS="filename"
>mandel.c</I
> and <I
CLASS="filename"
>mandel.h</I
>. To avoid a non-portable GUI solution, we use a public domain library, <EM
CLASS="emphasis"
>gd</EM
>, written by Tom Boutell [<A
CLASS="xref"
HREF="ch18_07.htm"
TITLE=""
>14</A
>], which allows you to treat a GIF file as a canvas and render points, lines, and circles on it. This GIF file can then be viewed by using any web browser. </P
><P
CLASS="para"
><I
CLASS="filename"
>mandel.c</I
> implements one function called <KBD
CLASS="command"
>draw_mandel</KBD
>, with the signature shown in <A
CLASS="xref"
HREF="ch18_02.htm"
TITLE="Mandel.h"
>Example 18.1</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch18-26415"
>Example 18.1: Mandel.h</A
></H4
><PRE
CLASS="programlisting"
>extern int 
draw_mandel (char *filename,
              int width, int height,
              double origin_real, double origin_imag,
              double range, double depth);</PRE
></DIV
><P
CLASS="para"
>The meaning of the parameters will be explained in the <A
CLASS="xref"
HREF="ch18_06.htm"
TITLE="A Detour into Fractals"
>Section 18.6, "A Detour into Fractals</A
>," later in this chapter. First, we'll first concentrate on making it callable from Perl.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-963937"
>18.2.1 Fractals Using SWIG</A
></H3
><P
CLASS="para"
>We start by writing a <A
CLASS="indexterm"
NAME="ch18-idx-971909-0"
></A
>SWIG interface file, <I
CLASS="filename"
>Fractal.i</I
>, as in <A
CLASS="xref"
HREF="ch18_02.htm"
TITLE="Fractal.i&nbsp- SWIG Interface File"
>Example 18.2</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch18-21722"
>Example 18.2: Fractal.i&nbsp;- SWIG Interface File</A
></H4
><PRE
CLASS="programlisting"
>%module Fractal
%{
#include &quot;mandel.h&quot;
%}
%include mandel.h</PRE
></DIV
><P
CLASS="para"
>The <KBD
CLASS="command"
>%module</KBD
> statement gives a unique namespace to all the interface declarations in that file. We call the module Fractal because we would like to have one namespace for all fractal drawing code, and the Mandelbrot set is only one of many choices.</P
><P
CLASS="para"
>The statements between <KBD
CLASS="command"
>%{</KBD
> and <KBD
CLASS="command"
>%}</KBD
> are meant for "raw" C code. We include <I
CLASS="filename"
>mandel.h</I
> here because the interface file is soon going to be converted to C glue code, which in turn needs this header. Now comes the portion where all data structures and exported functions (with complete signatures) are to be listed. Since the interface file format is very close to ANSI C, we can simply <KBD
CLASS="command"
>%include</KBD
> <I
CLASS="filename"
>mandel.h</I
>. Unlike the first include, which began with a <KBD
CLASS="command"
>#</KBD
> because it is called later from C code, this include starts with <KBD
CLASS="command"
>%</KBD
> because it is called immediately within SWIG.</P
><P
CLASS="para"
>Next, we invoke SWIG on this interface file and specify perl5 as the scripting language:</P
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>% swig -perl5 Fractal.i</B
>
Generating wrappers for Perl 5
<B
CLASS="emphasis.bold"
>% ls</B
>
mandel.h     mandel.c        Fractal_wrap.doc
Fractal.i    Fractal.pm      Fractal_wrap.c</PRE
><P
CLASS="para"
>SWIG creates four files from the interface file. <I
CLASS="filename"
>Fractal.pm</I
> contains some code to make the C library dynamically loadable. <I
CLASS="filename"
>Fractal_wrap.c</I
> contains the wrapper code; for a function <I
CLASS="function"
>foo</I
> listed in the interface file, this wrapper file contains a function called <KBD
CLASS="command"
>_wrap_foo</KBD
> that translates Perl argument values to C, calls <KBD
CLASS="command"
>foo</KBD
>, and packages the return results back into Perl data types. You don't have to understand the contents of <I
CLASS="filename"
>Fractal.pm</I
> and <I
CLASS="filename"
>Fractal_wrap.c</I
>. SWIG also extracts all documentation out of the interface file into <I
CLASS="filename"
>Fractal_wrap.doc</I
> (ASCII)<I
CLASS="filename"
>, </I
>or <I
CLASS="filename"
>Fractal_wrap.html</I
> (HTML), or <I
CLASS="filename"
>Fractal_wrap.tex</I
> (LaTeX). </P
><P
CLASS="para"
>All we have left to do is to compile the two <I
CLASS="filename"
>.c</I
> files and make them dynamically loadable.[<A
CLASS="footnote"
HREF="#ch18-pgfId-967898"
>3</A
>] SWIG (as well as XS) simplifies this part again by helping you create a makefile. Because a makefile is dependent on machine- and site-specific details such as operating system peculiarities, compiler, linker options, Perl installation directories, the name and location of the C compiler, and so on, these tools do not generate a makefile directly. <A
CLASS="indexterm"
NAME="ch18-idx-971917-0"
></A
>Instead they generate a Perl script called <I
CLASS="filename"
>Makefile.PL</I
>, which, when executed, produces a makefile that is customized for your system. This script is very simple, shown here after manually adding the LIBS and OBJECT lines:<PRE
CLASS="programlisting"
>use ExtUtils::MakeMaker;
WriteMakefile(
    'NAME'       =&gt; 'Fractal',    # Name of module
    'LIBS'       =&gt; [M    # All custom libraries to be linked with
    'OBJECT' =&gt; 'mandel.o Fractal_wrap.o'  # All object files
);</PRE
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch18-pgfId-967898"
>[3]</A
> Since this is a much simpler option than static linking, and since most self-respecting operating systems support it, we consider only dynamic linking in this book. </P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>The standard ExtUtils::MakeMaker module does all the magic of finding out about the configuration of your system and creating a custom makefile.<A
CLASS="indexterm"
NAME="ch18-idx-971919-0"
></A
></P
><P
CLASS="para"
>The next three steps build and install this extension:</P
><PRE
CLASS="programlisting"
>% <B
CLASS="emphasis.bold"
>perl Makefile.PL      </B
># create Makefile
% <B
CLASS="emphasis.bold"
>make                  </B
># compiles sources and creates shared library
% <B
CLASS="emphasis.bold"
>make install          </B
># optional. installs library </PRE
><P
CLASS="para"
>(How much easier and more portable do you want it to get?)</P
><P
CLASS="para"
>We are now all set to create fractal images. The following call to <KBD
CLASS="command"
>draw_mandel()</KBD
> creates the beautiful image shown in <A
CLASS="xref"
HREF="ch18_02.htm"
TITLE="Mandelbrot set"
>Figure 18.3</A
>.</P
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>use Fractal;</B
>
Fractal::draw_mandel('mandel.gif', 300, 300,  # file, width, height
                      -1.5, 1.0,              # origin x, y
                       2.0, 20);              # range, max iterations</PRE
><P
CLASS="para"
>Since the chief purpose of this chapter is to illustrate writing extensions, we'll (reluctantly) put off the discussion of <I
CLASS="function"
>draw_mandel</I
> to the end.<A
CLASS="indexterm"
NAME="ch18-idx-971915-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-964366"
>18.2.2 Fractals Using XS</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch18-idx-971913-0"
></A
>XS process is also extremely straightforward. <EM
CLASS="emphasis"
>h2xs</EM
> understands normal C header files, so a fractal extension is produced as follows:</P
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>% h2xs -x -n Fractal mandel.h</B
></PRE
><P
CLASS="para"
>This creates <EM
CLASS="emphasis"
>Fractal.pm</EM
>, the Perl module, <I
CLASS="filename"
>Makefile.PL</I
>, the makefile-generating script, and <I
CLASS="filename"
>Fractal.xs</I
>. At this point, you don't need to know what this file contains. </P
><P
CLASS="para"
>Since <I
CLASS="filename"
>Makefile.PL</I
> is automatically generated, you will need to add or modify the <KBD
CLASS="command"
>OBJECT</KBD
> and <KBD
CLASS="command"
>LIB</KBD
> lines, as shown earlier. The build and install are identical to what we saw earlier:</P
><PRE
CLASS="programlisting"
>% <B
CLASS="emphasis.bold"
>perl Makefile.PL</B
>
% <B
CLASS="emphasis.bold"
>make</B
>
% <B
CLASS="emphasis.bold"
>make install</B
></PRE
><P
CLASS="para"
>The makefile generated in the first step notices <I
CLASS="filename"
>Fractal.xs</I
>, and feeds it to <KBD
CLASS="command"
>xsubpp</KBD
> to create the glue code in <I
CLASS="filename"
>Fractal.c</I
>. Note that the name is not <EM
CLASS="emphasis"
>Fractal_wrap.c</EM
> as with SWIG, so the <KBD
CLASS="command"
>OBJECT</KBD
> line in <I
CLASS="filename"
>Makefile.PL</I
> should look like this:</P
><PRE
CLASS="programlisting"
>'OBJECT' =&gt; 'mandel.o Fractal.o' # mandel.o contains the real function
                                 # Fractal.o contains the glue code<A
CLASS="indexterm"
NAME="ch18-idx-971911-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971911-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971911-2"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-971911-3"
></A
></PRE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_01.htm"
TITLE="18.1 Writing an Extension: Overview"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.1 Writing an Extension: Overview"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Perl Programming"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Perl Programming"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_03.htm"
TITLE="18.3 SWIG Features"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.3 SWIG Features"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>18.1 Writing an Extension: Overview</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>18.3 SWIG Features</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
