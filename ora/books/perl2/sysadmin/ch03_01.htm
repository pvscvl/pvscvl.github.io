<html>
<head>
<title>User Accounts  (Perl for System Administration)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David N. Blank-Edelman">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1565926099L" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="User Accounts">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Perl for System Administration"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm">Perl for System Administration</a></td><td align="right" valign="top" width="172"><a href="ch03_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 3.  User Accounts</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch03_01.htm">Unix User Identity</a>
<br>
<a href="ch03_02.htm">Windows NT/2000 User Identity</a>
<br>
<a href="ch03_03.htm">Building an Account System to Manage Users</a>
<br>
<a href="ch03_04.htm">Module Information for This Chapter</a>
<br>
<a href="ch03_05.htm">References for More Information</a>
<br>
</p>
</div>










<p>Here's a short pop quiz. If it wasn't for users, system
administration would be:</p>





<blockquote class="simplelist">

<p>a) More pleasant.</p>

<p>b) Nonexistent.</p>

</blockquote>





<p>Despite the comments from system administrators on their most
beleaguered days, b) is the best answer to this question. As I
mentioned in the first chapter, ultimately system administration is
about making it possible for people to use the available technology.</p>





<p>Why all the grumbling then? Users introduce two things into the
systems and networks we administer that make them significantly more
complex: nondeterminism and individuality. We'll address the
nondeterminism issues when we discuss user activity in the next
chapter, but for now let's focus on individuality.</p>





<p>
<a name="INDEX-139"></a>In most cases, users want to retain their
own separate identities. Not only do they want a unique name, but
they want unique "stuff" too. They want to be able to
say, "These are <em class="emphasis">my</em> files. I keep them in
<em class="emphasis">my</em> directories. I print them with
<em class="emphasis">my</em> print quota. I make them available from
<em class="emphasis">my</em> home page on the Web." Modern operating
systems keep an account of all of these details for each user.</p>





<p>But who keeps track of all of the accounts on a system or network of
systems? Who is ultimately responsible for creating, protecting, and
disposing of these little shells for individuals? I'd hazard a
guess and say "<em class="emphasis">you</em>, dear reader"
-- or if not you personally, then tools you'll build to
act as your proxy. This chapter is designed to help you with that
responsibility.</p>





<p>Let's begin our discussion of users by addressing some of the
pieces of information that form their identity and how it is stored
on a system. We'll start by looking at Unix and Unix-variant
users, and then address the same issues for Windows NT/Windows 2000.
For current-generation MacOS systems, this is a non-issue, so
we'll skip MacOS in this chapter. Once we address identity
information for both operating systems, we'll construct a basic
account system.</p>




































<h2 class="sect1">3.1. Unix User Identity</h2>





<p>
<a name="INDEX-140"></a><a name="INDEX-141"></a>When discussing this topic, we have
to putter around in a few key files because they store the persistent
definition of a user's identity. By persistent definition, I
mean those attributes of a user that exist during the entire lifespan
of that user, persisting even while that user is not actively using a
computer. Another word that we'll use for this persistent
identity is <em class="emphasis">account</em>. If you have an account on a
system, you can log in and become a user of that system.</p>





<p>Users come into being on a system at the point when their information
is first added to the password file (or the directory service which
offers the same information). A user's subsequent departure
from the scene occurs when this entry is removed. We'll dive
right in and look at how the user identity is stored.</p>





<a name="ch03-2-fm2xml"></a>
<h3 class="sect2">3.1.1. The Classic Unix Password File</h3>





<p>
<a name="INDEX-142"></a><a name="INDEX-143"></a>Let's
start off with the "classic" password file format and
then get more sophisticated from there. I call this format classic
because it is the parent for all of the other Unix password file
formats currently in use. It is still in use today in many Unix
variants, including SunOS, Digital Unix, and Linux. Usually found on
the system as <em class="filename">/etc/passwd</em>, this file consists of
lines of ASCII text, each line representing a different account on
the system or a link to another directory service. A line in this
file is composed of several colon-separated fields. We'll take
a close look at all of these fields as soon as we see how to retrieve
them.</p>





<p>Here's an example line from <em class="filename">/etc/passwd</em>:</p>





<blockquote>
<pre class="programlisting">dnb:fMP.olmno4jGA6:6700:520:David N. Blank-Edelman:/home/dnb:/bin/zsh</pre>
</blockquote>





<p>There are at least two ways to go about accessing this information
from Perl:</p>





<ol>
<li>
<p>If we access it "by hand," we can treat this file like
any random text file and parse it accordingly:</p>





<blockquote>
<pre class="programlisting">$passwd = "/etc/passwd";
open(PW,$passwd) or die "Can't open $passwd:$!\n";
while (&lt;PW&gt;){
	($name,$passwd,$uid,$gid,$gcos,$dir,$shell) = split(/:/);
    <tt class="userinput"><b>&lt;your code here&gt;</b></tt>
}
close(PW);</pre>
</blockquote>
</li>

<li>
<p>Or we can "let the system do it," in which case Perl
makes available some of the Unix system library calls that parse this
file for us. For instance, another way to write that last code
snippet is:</p>





<blockquote>
<pre class="programlisting">while(($name,$passwd,$uid,$gid,$gcos,$dir,$shell) = getpwent(  )){
       <tt class="userinput"><b>&lt;your code here&gt;</b></tt>
}
endpwent(  );</pre>
</blockquote>
</li>
</ol>

<p>Using these calls has the added advantage of automatically tying in
to any OS-level name service being used (e.g., Network Information
Service, or NIS). We'll see more of these library call
functions in a moment (including an easier way to use
<tt class="literal">getpwent( )</tt>), but for now let's look at
the fields our code returns:<a href="#FOOTNOTE-1">[1]</a>
</p>
<blockquote class="footnote">




<a name="FOOTNOTE-1"></a>
<p>[1]The values returned by <tt class="literal">getpwent( )</tt> changed
between Perl 5.004 and 5.005; this is the 5.004 list of values. In
5.005 and later, there are two additional fields,
<tt class="literal">$quota</tt> and <tt class="literal">$comment</tt>, in the list
right before <tt class="literal">$gcos</tt>. See your system documentation
for <tt class="literal">getpwent( )</tt> for more information.</p>




</blockquote>





<dl>
<dt>
<b>Name</b>
</dt>
<dd>
<p>The login name field holds the short (usually eight characters or
less), unique, <em class="emphasis">nomme de machine</em> for each account
on the system. The Perl function <tt class="literal">getpwent( )</tt>,
which we saw earlier being used in a list context, will return the
name field if we call it in a scalar context:</p>





<blockquote>
<pre class="programlisting">$name = getpwent(  );</pre>
</blockquote>
</dd>





<dt>
<b>User ID (UID)</b>
</dt>
<dd>
<p>
<a name="INDEX-144"></a><a name="INDEX-145"></a>On
Unix systems, the user ID (UID) is actually more important than the
login name for most things. All of the files on a system are owned by
a UID, not a login name. If we change the login name associated with
UID 2397 in <em class="filename">/etc/passwd</em> from
<em class="emphasis">danielr</em> to <em class="emphasis">drinehart</em>, these files
instantly show up as be owned by <em class="emphasis">drinehart</em> instead.
The UID is the persistent part of a user's identity internal to
the operating system. The Unix kernel and filesystems keep track of
UIDs, not login names, for ownership and resource allocation. A login
name can be considered to be the part of a user's identity that
is <em class="emphasis">external</em> to the core OS; it exists to make
things easier for humans.</p>





<p>Here's some simple code to find the next available unique UID
in a password file. This code looks for the highest UID in use and
produces the next number:</p>





<blockquote>
<pre class="programlisting">$passwd = "/etc/passwd";
open(PW,$passwd) or die "Can't open $passwd:$!\n";
while (&lt;PW&gt;){
    @fields = split(/:/);
    $highestuid = ($highestuid &lt; $fields[2]) ? $fields[2] : $highestuid;
}
close(PW);
print "The next available UID is " . ++$highestuid . "\n";</pre>
</blockquote>





<p>
<a href="ch03_01.htm">Table 3-1</a> lists other useful name- and UID-related
Perl functions and variables.</p>
</dd>

</dl>





<a name="ch03-70133"></a>
<h4 class="objtitle">Table 3.1. Login Name- and UID-Related Variables and Functions</h4>
<table border="1">



<tr>
<th>
<p>Function/Variable</p>
</th>
<th>
<p>How Used</p>
</th>
</tr>










<tr>
<td>
<blockquote>
<pre class="programlisting">getpwnam($name)</pre>
</blockquote>
</td>
<td>
<p>In a scalar context returns the UID for that login name; in a list
context returns all of the fields of a password entry</p>
</td>
</tr>




<tr>
<td>
<blockquote>
<pre class="programlisting">getpwuid($uid)</pre>
</blockquote>
</td>
<td>
<p>In a scalar context returns the login name for that UID; in a list
context returns all of the fields of a password entry</p>
</td>
</tr>




<tr>
<td>
<blockquote>
<pre class="programlisting">$&gt;</pre>
</blockquote>
</td>
<td>
<p>Holds the effective UID of the currently running Perl program</p>
</td>
</tr>




<tr>
<td>
<blockquote>
<pre class="programlisting">$&lt;</pre>
</blockquote>
</td>
<td>
<p>Holds the real UID of the currently running Perl program</p>
</td>
</tr>





</table>





<dl>
<dt>
<b>The primary group ID (GID)</b>
</dt>
<dd>
<p>
<a name="INDEX-146"></a><a name="INDEX-147"></a><a name="INDEX-148"></a>On multiuser systems, users often want
to share files and other resources with a select set of other users.
Unix provides a user grouping mechanism to assist in this process. An
account on a Unix system can be part of several groups, but it must
be assigned to one primary group. The primary group ID (GID) field in
the password file lists the primary group for that account.</p>





<p>Group names, GIDs, and group members are usually stored in the
<em class="filename">/etc/group </em>file. To make an account part of
several groups, you just list that account in several places in the
file. Some OSes have a hard limit on the number of groups an account
can join (eight used to be a common restriction). Here's a
couple of lines from an <em class="filename">/etc/group</em> file:</p>





<blockquote>
<pre class="programlisting">bin::2:root,bin,daemon
sys::3:root,bin,sys,adm</pre>
</blockquote>





<p>The first field is the group name, the second is the password (some
systems allow people to join a group by entering a password), the
third is the GID of the group, and the last field is a list of the
users in this group.</p>





<p>Schemes for group ID assignment are site-specific because each site
has its own particular administrative and project boundaries. Groups
can be created to model certain populations (students, salespeople,
etc.), roles (backup operators, network administrators, etc.), or
account purposes (backup accounts, batch processing accounts, etc.).</p>





<p>Dealing with group files via Perl files is a very similar process to
the <em class="filename">passwd</em> parsing we did above. We can either
treat it as a standard text file or use special Perl functions to
perform the task. <a href="ch03_01.htm">Table 3-2</a> lists the
group-related Perl functions and variables.</p>
</dd>

</dl>





<a name="ch03-23704"></a>
<h4 class="objtitle">Table 3.2. Group Name- and GID-Related Variables and Functions</h4>
<table border="1">



<tr>
<th>
<p>Function/Variable</p>
</th>
<th>
<p>How Used</p>
</th>
</tr>










<tr>
<td>
<blockquote>
<pre class="programlisting">getgrent(  )</pre>
</blockquote>
</td>
<td>
<p>In a scalar context returns the group name; in a list context returns
these fields: <tt class="literal">$name,$passwd,$gid,$members</tt>
</p>
</td>
</tr>




<tr>
<td>
<blockquote>
<pre class="programlisting">getgrnam($name)</pre>
</blockquote>
</td>
<td>
<p>In a scalar context returns the group ID; in a list context returns
the same fields mentioned for <tt class="literal">getgrent( )</tt>
</p>
</td>
</tr>




<tr>
<td>
<blockquote>
<pre class="programlisting">getgrgid($gid)</pre>
</blockquote>
</td>
<td>
<p>In a scalar context returns the group name; in a list context returns
the same fields mentioned for <tt class="literal">getgrent( )</tt>
</p>
</td>
</tr>




<tr>
<td>
<blockquote>
<pre class="programlisting">$)</pre>
</blockquote>
</td>
<td>
<p>Holds the effective GID of the currently running Perl program</p>
</td>
</tr>




<tr>
<td>
<blockquote>
<pre class="programlisting">$(</pre>
</blockquote>
</td>
<td>
<p>Holds the real GID of the currently running Perl program</p>
</td>
</tr>





</table>





<dl>
<dt>
<b>The "encrypted" password</b>
</dt>
<dd>
<p>
<a name="INDEX-149"></a>So far
we've seen three key parts of how a user's identity is
stored on a Unix machine. The next field is not part of this
identity, but is used to verify that someone should be allowed to
assume all of the rights, responsibilities, and privileges bestowed
upon a particular user ID. This is how the computer knows that
someone presenting her or himself as <em class="emphasis">mguerre</em> should be
allowed to assume a particular UID. There are other, better forms of
authentication that now exist in the world (e.g., public key
cryptographic), but this is the one that has been inherited from the
early Unix days.</p>





<p>It is common to see a line in a password file with just an asterisk
(*) for a password. This convention is usually used when an
administrator wants to disable the user from logging into an account
without removing it altogether.</p>





<p>Dealing with user passwords is a topic unto itself. We deal with it
later in this book in <a href="ch10_01.htm">Chapter 10, "Security and Network Monitoring"</a>.</p>
</dd>





<dt>
<b>GCOS field</b>
</dt>
<dd>
<p>The GCOS<a href="#FOOTNOTE-2">[2]</a> field is the least important field (from the
computer's point of view). This field usually contains the full
name of the user (e.g., "Roy G. Biv"). Often, people put
their title and/or phone extension in this field as well.</p>
<blockquote class="footnote">




<a name="FOOTNOTE-2"></a>
<p>[2]For some amusing details on the origin of
the name of this field, see the GCOS entry at the Jargon Dictionary:
<a href="../../../../../../../www.jargon.org/">http://www.jargon.org</a>.</p>




</blockquote>





<p>
<a name="INDEX-150"></a>System
administrators who are concerned about privacy issues on behalf of
their users (as all should be) need to watch the contents of this
field. It is a standard source for account-name-to-real-name
mappings. On most Unix systems, this field is available as part of a
world-readable <em class="filename">/etc/passwd</em> file or directory
service, and hence the information is available to everyone on the
system. Many Unix programs, mailers and finger daemons also consult
this field when they attach a user's login name to some piece
of information. If you have any need to withhold a user's real
name from other people (e.g., if that user is a political dissident,
federal witness, or a famous person), this is one of the places you
must monitor.</p>





<p>As a side note, if you maintain a site with a less mature user base,
it is often a good idea to disable mechanisms that allow users to
change their GCOS field to any random string (for the same reasons
that user-selected login names can be problematic). You may not want
your password file to contain expletives or other unprofessional
information.</p>
</dd>





<dt>
<b>Home directory</b>
</dt>
<dd>
<p>
<a name="INDEX-151"></a>The next field contains the name of the
user's <em class="emphasis">home directory</em>. This is the
directory where the user begins her or his time on the system.
Typically this is also where the files that configure that
user's environment live.</p>





<p>It is important for security purposes that an account's home
directory be owned and writable by that account only. World-writable
home directories allow trivial account hacking. There are cases,
however, where even a <em class="emphasis">user</em>-writable home
directory is problematic. For example, in restricted shell scenarios
(accounts that can only log in to perform a specific task without
permission to change anything on the system), a user-writable home
directory is a big no-no.</p>





<p>Here's some Perl code to make sure that every user's home
directory is owned by that user and is not world
writable:<a name="INDEX-152"></a>
</p>





<blockquote>
<pre class="programlisting">use User::pwent;
use File::stat;

# note: this code will beat heavily upon any machine using 
# automounted homedirs
while($pwent = getpwent(  )){
    # make sure we stat the actual dir, even through layers of symlink
    # indirection
    $dirinfo = stat($pwent-&gt;dir."/."); 
    unless (defined $dirinfo){
        warn "Unable to stat ".$pwent-&gt;dir.": $!\n";
        next;
    }
    warn $pwent-&gt;name."'s homedir is not owned by the correct uid (".
         $dirinfo-&gt;uid." instead ".$pwent-&gt;uid.")!\n"
        if ($dirinfo-&gt;uid != $pwent-&gt;uid);

    # world writable is fine if dir is set "sticky" (i.e., 01000), 
    # see the manual page for chmod for more information
    warn $pwent-&gt;name."'s homedir is world-writable!\n"
      if ($dirinfo-&gt;mode &amp; 022 and (!$stat-&gt;mode &amp; 01000));
}
endpwent(  );</pre>
</blockquote>





<p>This code looks a bit different than our previous parsing code
because it uses two magic modules by Tom Christiansen:
<tt class="literal">User::pwent</tt> and <tt class="literal">File::stat</tt>.
These modules override the normal <tt class="literal">getpwent( )</tt>
and <tt class="literal">stat( )</tt> functions, causing them to return
something different than the values mentioned before. When
<tt class="literal">User::pwent</tt> and <tt class="literal">File::stat</tt> are
loaded, these functions return objects instead of lists or scalars.
Each object has a method named after a field that normally would be
returned in a list context. So code like:</p>





<blockquote>
<pre class="programlisting">$gid = (stat("filename"))[5];</pre>
</blockquote>





<p>can be written more legibly as:</p>





<blockquote>
<pre class="programlisting">use File::stat;
$stat = stat("filename");
$gid = $stat-&gt;gid;</pre>
</blockquote>





<p>or even:</p>





<blockquote>
<pre class="programlisting">use File::stat;
$gid = stat("filename")-&gt;gid;</pre>
</blockquote>
</dd>





<dt>
<b>User shell</b>
</dt>
<dd>
<p>
<a name="INDEX-153"></a><a name="INDEX-154"></a>The final
field in the classic password file format is the user shell field.
This field usually contains one of a set of standard interactive
programs (e.g., <tt class="command">sh</tt>, <tt class="command">csh</tt>,
<tt class="command">tcsh</tt>, <tt class="command">ksh</tt>,
<tt class="command">zsh</tt>) but it can actually be set to the path of any
executable program or script. From time to time, people have joked
(half-seriously) about setting their shell to be the Perl
interpreter. For at least one shell (<em class="emphasis">zsh</em>),
people have actually contemplated embedding a Perl interpreter in the
shell itself, but this has yet to happen. There is, however, some
serious work that has been done to create a Perl shell (<a href="../../../../../../../www.focusresearch.com/gregor/psh/">http://www.focusresearch.com/gregor/psh/</a> )
and to embed Perl into Emacs, an editor that could easily pass for an
operating system (<a href="../../../../../../../john-edwin-tobey.org/perlmacs/">http://john-edwin-tobey.org/perlmacs/</a> ).</p>





<p>On occasion, you might have reason to list nonstandard interactive
programs in this field. For instance, if you wanted to create a
menu-driven account, you could place the menu program's name
here. In these cases some care has to be taken to prevent someone
using that account from reaching a real shell or they may wreak
havoc. A common mistake made is including a mail program in the menu
that allows the user to launch an editor or pager for mail
composition and mail reading. Either the editor or pager could have a
shell-escape function built in.</p>





<p>A list of standard, acceptable shells on a system is often kept in
<em class="filename">/etc/shells</em> for the FTP daemon's benefit.
Most FTP daemons will not allow a normal user to connect to a machine
if their shell in <em class="filename">/etc/passwd</em> (or networked
password file) is not one of a list kept in
<em class="filename">/etc/shells</em>. Here's some Perl code to
report accounts that do not have approved shells:</p>





<blockquote>
<pre class="programlisting">use User::pwent;

$shells = "/etc/shells";
open (SHELLS,$shells) or die "Unable to open $shells:$!\n";
while(&lt;SHELLS&gt;){
    chomp;
    $okshell{$_}++;
}
close(SHELLS);

while($pwent = getpwent(  )){
   warn $pwent-&gt;name." has a bad shell (".$pwent-&gt;shell.")!\n"
     unless (exists $okshell{$pwent-&gt;shell});
}
endpwent(  );</pre>
</blockquote>
</dd>

</dl>

















<a name="ch03-3-fm2xml"></a>
<h3 class="sect2">3.1.2. Extra Fields in BSD 4.4 passwd Files</h3>





<p>At the BSD (Berkeley Software Distribution) 4.3 to 4.4 upgrade point,
the BSD variants added two twists to the classic password file
format: additional fields, and the introduction of a binary database
format used to store account information.<a name="INDEX-155"></a><a name="INDEX-156"></a>
</p>





<p>BSD 4.4 systems add some fields to the password file in between the
GID and GCOS fields. The first field they added was the
<em class="emphasis">class</em> field. This allows a system administrator
to partition the accounts on a system into separate classes (e.g.,
different login classes might be given different resource limits like
CPU time restrictions). BSD variants also add
<em class="emphasis">change</em> and <em class="emphasis">expire</em> fields to
hold an indication of when a password must be changed and when the
account will expire. We'll see fields like these when we get to
the next Unix password file format as well.</p>





<p>When compiled under an operating system that supports these extra
fields, Perl includes the contents of these fields in the return
value of functions like <tt class="literal">getpwent( )</tt>. This is one
good reason to use <tt class="literal">getpwent( )</tt> in your programs
instead of <tt class="literal">split( )</tt>ing the password file entries
by hand.</p>

















<a name="ch03-4-fm2xml"></a>
<h3 class="sect2">3.1.3. Binary Database Format in BSD 4.4</h3>





<p>
<a name="INDEX-157"></a><a name="INDEX-158"></a>The second twist added to the password
mechanisms by BSD is their use of a database format, rather than
plain text, for primary storage of password file information. BSD
machines keep their password file information in DB format, a greatly
updated version of the older (Unix database) DBM (Database
Management) libraries. This change allows the system to do speedy
lookups of password information.<a name="INDEX-159"></a><a name="INDEX-160"></a>
</p>





<p>The program <tt class="command">pwd_mkdb</tt> takes the name of a password
text file as its argument, creates and moves two database files into
place, and then moves this text file into
<em class="filename">/etc/master.passwd</em>. The two databases are used
to provide a shadow password scheme, differing in their read
permissions and encrypted password field contents. We'll talk
more about this in the next section.</p>





<p>Perl has the ability to directly work with DB files (we'll work
with this format later in <a href="ch09_01.htm">Chapter 9, "Log Files"</a>), but in
general I would not recommend directly editing the databases while
the system is in use. The issue here is one of locking: it's
very important not to change a crucial database like your password
file without making sure other programs are not similarly trying to
write to it or read from it. Standard operating system programs like
<tt class="command">chpasswd</tt> handle this locking for you.<a href="#FOOTNOTE-3">[3]</a> The
sleight-of-hand approach we saw for quotas in <a href="ch02_01.htm">Chapter 2, "Filesystems"</a>, 
which used the EDITOR variable, can be used
with <tt class="command">chpasswd</tt> as well.</p>
<blockquote class="footnote">




<a name="FOOTNOTE-3"></a>
<p>[3]<tt class="command">pwd_mkdb </tt>may or may not perform this locking
for you (depending on the BSD flavor and version)<em class="emphasis">,
</em>however, so caveat implemptor.</p>




</blockquote>

















<a name="ch03-5-fm2xml"></a>
<h3 class="sect2">3.1.4. Shadow Passwords</h3>





<p>
<a name="INDEX-161"></a><a name="INDEX-162"></a>Earlier I emphasized the importance of
protecting the contents of the GCOS field, since this information is
publicly available through a number of different mechanisms. Another
fairly public, yet rather sensitive piece of information is the list
of encrypted passwords for all of the users on the system. Even
though the password information is cryptologically hidden, having it
exposed in a world-readable file still provides some measure of
vulnerability. Parts of the password file need to be world-readable
(e.g., the UID and login name mappings), but not all of it.
There's no need to provide a list of encrypted passwords to
users who may be tempted to run password-cracking programs.</p>





<p>One alterative is to banish the encrypted password string for each
user to a special file that is only readable by
<em class="emphasis">root</em>. This second file is known as a
"shadow password" file, since it contains lines that
shadow the entries in the real password file.</p>





<p>Here's how it all works: the original password file is left
intact with one small change. The encrypted password field contains a
special character or characters to indicate password shadowing is in
effect. Placing an <tt class="literal">x</tt> in this field is common,
though the insecure copy of the BSD database uses a
<tt class="literal">*</tt>.</p>





<p>I've heard of some shadow password suites that insert a
special, normal-looking string of characters in this field. If your
password file goes awanderin', this provides a lovely time for
the recipient who will attempt to crack a password file of random
strings that bear no relation to the real passwords.</p>





<p>Most operating systems take advantage of this second shadow password
file to store more information about the account. This additional
information resembles the surplus fields we saw in the BSD files,
storing account expiration data and information on password changing
and aging.</p>





<p>In most cases Perl's normal password functions like
<tt class="literal">getpwent( )</tt> can handle shadow password files. As
long as the C libraries shipped with the OS do the right thing, so
will Perl. Here's what "do the right thing" means:
when your Perl script is run with the appropriate privileges (as
<em class="emphasis">root</em>), these routines will return the encrypted
password. Under all other conditions that password will not be
accessible to those routines.</p>





<p>
<a name="INDEX-163"></a>Unfortunately, it is dicier if you want
to retrieve the additional fields found in the shadow<em class="filename">
</em>file. Perl may not return them for you. Eric Estabrooks
has written a <tt class="literal">Passwd::Solaris</tt> module, but that
only helps if you are running Solaris. If these fields are important
to you, or you want to play it safe, the sad truth (in conflict with
my recommendation to use <tt class="literal">getpwent( )</tt> above) is
that it is often simpler to open the <em class="filename">shadow</em> file
by hand and parse it manually.<a name="INDEX-164"></a><a name="INDEX-165"></a>
</p>












































































































































<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.8. References for More Information</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.2. Windows NT/2000 User Identity</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
