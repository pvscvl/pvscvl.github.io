<html>
<head>
<title>Monitoring Server Health  (Perl for System Administration)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David N. Blank-Edelman">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1565926099L" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Monitoring Server Health">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Perl for System Administration"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch07_01.htm">Chapter 7: SQL Database Administration</a></td><td align="right" valign="top" width="172"><a href="ch07_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">7.6. Monitoring Server Health</h2>





<p>
<a name="INDEX-755"></a><a name="INDEX-756"></a><a name="INDEX-757"></a>For our final set of examples,
we'll take a look at several ways to monitor the health of an
SQL server. This sort of routine monitoring is similar in nature to
the network service monitoring we saw in <a href="ch05_01.htm">Chapter 5, "TCP/IP Name Services"</a>.</p>





<a name="ch07-7-fm2xml"></a>
<h3 class="sect2">7.6.1. Space Monitoring</h3>





<p>To get technical for a moment, database servers are places to hold
stuff. If you run out of space to hold stuff, this is known as either
"a bad thing" or "a very bad thing." As a
result, programs that help us monitor the amount of space allocated
and used on a server are very useful indeed. Let's look at a
DBI program designed to look at the space situation on a Sybase
server.</p>





<p>Here's a snippet of output from a program that shows
graphically how space is used in each database on the server. Each
section shows a bar chart of the percentage of allocated data and log
space in use in a database. In the following chart,
<tt class="literal">d</tt> stands for data space and <tt class="literal">l</tt>
stands for log space. For each bar the percentage of space used and
the total available space is indicated:</p>





<blockquote>
<pre class="programlisting">|ddddddd                                          |15.23%/5MB
hpotter--------|                                                 |
               |                                                 |0.90%/5MB

               |ddddddd                                          |15.23%/5MB
dumbledore-----|                                                 |
               |                                                 |1.52%/5MB


               |dddddddd                                         |16.48%/5MB
hgranger-------|                                                 |
               |                                                 |1.52%/5MB

               |ddddddd                                          |15.23%/5MB
rweasley-------|                                                 |
               |l                                                |3.40%/5MB

               |ddddddddddddddddddddddddddd                      |54.39%/2MB
hagrid---------|                                                 |
               |- no log                                         |</pre>
</blockquote>





<p>Here's how we generated this output:</p>





<blockquote>
<pre class="programlisting">use DBI;

$admin = 'sa';
print "Enter passwd for $admin: ";
chomp($pw = &lt;STDIN&gt;);
$pages = 2; # data is stored in 2k pages

# connect to the server
$dbh = DBI-&gt;connect('dbi:Sybase:',$admin,$pw);
die "Unable to connect: $DBI::errstr\n" 
  unless (defined $dbh);

# get the name of the databases on the server
$sth = $dbh-&gt;prepare(q{SELECT name from sysdatabases}) or
  die "Unable to prepare sysdatabases query: ".$dbh-&gt;errstr."\n";
$sth-&gt;execute or
  die "Unable to execute sysdatabases query: ".$dbh-&gt;errstr."\n";

while ($aref = $sth-&gt;fetchrow_arrayref) {
    push(@dbs, $aref-&gt;[0]);
}
$sth-&gt;finish;

# retrieve stats for each of the databases
foreach $db (@dbs) {
    
    # get and total the size column from all non-log segments
    $size    = &amp;querysum(qq{SELECT size FROM master.dbo.sysusages 
                           WHERE  dbid = db_id(\'$db\') 
                           AND    segmap != 4});
    # get and total the size column for the log segment
    $logsize = &amp;querysum(qq{SELECT size FROM master.dbo.sysusages
                           WHERE  dbid = db_id(\'$db\') 
                           AND    segmap = 4});		      

    # change to the database and retrieve usage stats
    $dbh-&gt;do(q{use $db}) or
      die "Unable to change to $db: ".$dbh-&gt;errstr."\n";

    # we used the reserved_pgs function to return the number of pages
    # used by both the data (doampg) and index (ioampg) part 
    # of the database
    $used=&amp;querysum(q{SELECT reserved_pgs(id,doampg)+reserved_pgs(id,ioampg) 
                     FROM sysindexes 
                     WHERE id != 8});

    # same, except this time we look at the log usage
    $logused=&amp;querysum(q{SELECT reserved_pgs(id, doampg) 
                        FROM sysindexes 
                        WHERE id=8});
    
    # show this information graphically
    &amp;graph($db,$size,$logsize,$used,$logused);
}
$dbh-&gt;disconnect;

# prepare/exec a given single-column SELECT query, return 
# the sum of the results
sub querysum {
    my($query) = shift;
    my($sth,$aref,$sum);

    $sth = $dbh-&gt;prepare($query) or
      die "Unable to prepare $query: ".$dbh-&gt;errstr."\n";
    $sth-&gt;execute or 
      die "Unable to exec $query: ".$dbh-&gt;errstr."\n";

    while ($aref=$sth-&gt;fetchrow_arrayref) {
        $sum += $aref-&gt;[0];
    }
    $sth-&gt;finish;

    $sum;
}

# print out nice chart given database name, size, log size, 
# and usage info
sub graph {
    my($dbname,$size,$logsize,$used,$logused) = @_;

    # line for data space usage
    print ' 'x15 . '|'.'d'x (50 *($used/$size)) .
          ' 'x (50-(50*($used/$size))) . '|';

    # percentage used and total M for data space
    printf("%.2f",($used/$size*100));
    print "%/". (($size * $pages)/1024)."MB\n";
    print $dbname.'-'x(14-length($dbname)).'-|'.(' 'x 49)."|\n";

    if (defined $logsize) { # line for log space usage  
        print ' 'x15 . '|' . 'l'x (50 *($logused/$logsize)) .
	           ' 'x (50-(50*($logused/$logsize))) . '|';
        # percentage used and total M for log space
        printf("%.2f",($logused/$logsize*100));
        print "%/". (($logsize * $pages)/1024)."MB\n";
    }
    else { # some databases do not have separate log space
	     print ' 'x15 . "|- no log".(' 'x 41)."|\n";
    }
    print "\n";
}</pre>
</blockquote>





<p>SQL-savvy folks will probably wonder why a special subroutine
(<tt class="literal">querysum</tt>) is being invoked to total the
contents of a single column instead of using the perfectly good
<tt class="literal">SUM</tt> calculation operator in SQL.
<tt class="literal">querysum( )</tt> is just meant to be an example of
the sort of manipulation on the fly one can do from Perl. A Perl
subroutine is probably more appropriate for more complex jobs. For
instance, if we need to keep separate running totals based on a
regular expression, that's probably best done from Perl rather
than asking the server to perform the tabulation (even if it could).</p>





<a name="ch07-84757"></a>
<div class="sidebar">
<h4 class="objtitle">Where Does the Work Get Done?</h4>





<p>One question that may come up when writing SQL programs from
within Perl is "Should I manipulate my data on the server using
SQL, or on my client using Perl?" Often there is an overlap
between the SQL functions offered by a server (e.g., <tt class="literal">SUM(
)</tt>) and Perl's operators.</p>




<p>For example,
it is probably more efficient to use the <tt class="literal">DISTINCT</tt>
keyword to eliminate duplicates from a returned data set before they
get to your Perl program, even though this is an operation you could
easily do in Perl.</p>




<p>Unfortunately, there are too many
variables to be able to provide a hard and fast rule for deciding
which method to use. Here are some factors you may wish to consider:</p>




<ul>
<li>
<p>How efficiently does the
server handle a particular query?</p>
</li>
</ul>
<ul>
<li>
<p>How much data is in play?</p>
</li>
</ul> <ul>
<li>
<p>How much do
you have to manipulate the data and how complex is that manipulation?</p>
</li>
</ul> <ul>
<li>
<p>What are the speeds of the server, client, and intervening
network (if there is one)?</p>
</li>
</ul>
<ul>
<li>
<p>Do you want your code to be portable
between database servers?</p>
</li>
</ul>
<p>Often you just have to try it both ways before deciding.</p>





</div>

















<a name="ch07-8-fm2xml"></a>
<h3 class="sect2">7.6.2. Monitoring the CPU Health of a SQL Server</h3>





<p>For the final example of this chapter, we'll use DBI to show us
a minute-by-minute status line display of the CPU health of a SQL
server. Just to make it more interesting, we'll monitor two
separate servers simultaneously from the same script. We'll
comment on this code in a moment:</p>





<blockquote>
<pre class="programlisting">use DBI;

$syadmin = "sa";
print "Sybase admin passwd: ";
chomp($sypw = &lt;STDIN&gt;);

$msadmin = "sa";
print "MS-SQL admin passwd: ";
chomp($mspw = &lt;STDIN&gt;);

# connect to Sybase server
$sydbh = DBI-&gt;connect("dbi:Sybase:server=SYBASE",$syadmin,$sypw);
die "Unable to connect to sybase server: $DBI::errstr\n" 
  unless (defined $sydbh);
# turn on the ChopBlanks option to remove trailing whitespace in columns
$sydbh-&gt;{ChopBlanks} = 1;

# connect to MS-SQL server (handy that we can use DBD::Sybase for this!)
$msdbh = DBI-&gt;connect("dbi:Sybase:server=MSSQL",$msadmin,$mspw);
die "Unable to connect to mssql server: $DBI::errstr\n" 
  unless (defined $msdbh);
# turn on the ChopBlanks option to remove trailing whitespace in columns 
$msdbh-&gt;{ChopBlanks} = 1;

$|=1; # turn off STDOUT IO buffering

# initialize the signal handler so we can cleanup nicely
$SIG{INT} = sub {$byebye = 1;};

# infinitely loop unless our interrupt flag has been set
while (1) {
    last if ($byebye);
    
    # run the stored procedure sp_monitor
    $systh = $sydbh-&gt;prepare(q{sp_monitor}) or
       die "Unable to prepare sy sp_monitor:".$sydbh-&gt;errstr."\n";
    $systh-&gt;execute or 
       die "Unable to execute sy sp_monitor:".$sydbh-&gt;errstr."\n";
    # loop to retrieve the lines from the output we need. 
    # We know we have all of it when we see the cpu_busy information
    while($href = $systh-&gt;fetchrow_hashref or 
          $systh-&gt;{syb_more_results}) {
             # got what we needed, stop asking
             last if (defined $href-&gt;{cpu_busy}); 
    }
    $systh-&gt;finish;
    
    # substitute out everything but the % number from 
    # the values we receive 
    for (keys %{$href}) {
	    $href-&gt;{$_} =~ s/.*-(\d+%)/\1/;
    }

    # collect all the data we need into a single line
    $info = "Sybase: (".$href-&gt;{cpu_busy}." CPU), ".
                    "(".$href-&gt;{io_busy}." IO), ".
                    "(".$href-&gt;{idle}." idle)   ";

    # ok, now let's do it all over again for the second server (MS-SQL)
    $mssth = $msdbh-&gt;prepare(q{sp_monitor}) or
       die "Unable to prepare ms sp_monitor:".$msdbh-&gt;errstr."\n";
    $mssth-&gt;execute or
       die "Unable to execute ms sp_monitor:".$msdbh-&gt;errstr."\n";
    while($href = $mssth-&gt;fetchrow_hashref or 
            $mssth-&gt;{syb_more_results}) {
              # got what we needed, stop asking
	          last if (defined $href-&gt;{cpu_busy}); 
    }
    $mssth-&gt;finish;

    # substitute out everything but the % number from 
    # the values we receive
    for (keys %{$href}) {	
	    $href-&gt;{$_} =~ s/.*-(\d+%)/\1/;
    }

    $info .= "MSSQL: (" . $href-&gt;{'cpu_busy'}." CPU), ".
                    "(".$href-&gt;{'io_busy'}." IO), ".
                    "(".$href-&gt;{'idle'}." idle)";
    print " "x78,"\r";
    print $info,"\r";
    
    sleep(5) unless ($byebye);
}

# only end up here if we've broken out of the loop thanks to an interrupt
$sydbh-&gt;disconnect;
$msdbh-&gt;disconnect;</pre>
</blockquote>





<p>This script keeps this line on your screen, which is refreshed every
five seconds:</p>





<blockquote>
<pre class="programlisting">Sybase: (33% CPU), (33% IO), (0% idle)   MSSQL: (0% CPU), (0% IO), (100% idle)</pre>
</blockquote>





<p>The heart of this program is the stored procedure
<tt class="literal">sp_monitor </tt>that exists both on Sybase and
MS-SQL. <tt class="literal">sp_monitor</tt>'s output looks like
this:</p>





<blockquote>
<pre class="programlisting">last_run                    current_run                 seconds     
--------------------------- --------------------------- ----------- 
Aug 3 1998 12:05AM          Aug 3 1998 12:05AM          1      
     
cpu_busy                  io_busy                   idle                      
------------------------- ------------------------- ------------------------- 
0(0)-0%                   0(0)-0%                   40335(0)-0%      
         
packets_received          packets_sent              packet_errors             
------------------------- ------------------------- ------------------------- 
1648(0)                   1635(0)                   0(0)              
        
total_read          total_write         total_errors        connections        
------------------- ------------------- ------------------- ------------------ 
391(0)              180(0)              0(0)                11(0)</pre>
</blockquote>





<p>Unfortunately, <tt class="literal">sp_monitor</tt> exposes a nonportable
Sybase-ism that was carried over to MS-SQL: multiple result sets.
Each of the lines returned comes back as a separate result set.
<tt class="literal">DBD::Sybase</tt> handles this by setting a special
statement attribute. That's why you see this test:</p>





<blockquote>
<pre class="programlisting">while($href = $systh-&gt;fetchrow_hashref or 
      $systh-&gt;{syb_more_results}) {</pre>
</blockquote>





<p>and why we exit this loop early once we've seen the columns
we're looking for:</p>





<blockquote>
<pre class="programlisting"># got what we needed, stop asking
	   last if (defined $href-&gt;{cpu_busy});</pre>
</blockquote>





<p>The program itself loops forever until it receives an interrupt
signal (most likely from the user pressing Ctrl-C). When we receive
this signal, we do the safest thing possible in a signal handler and
set an exit flag. This is the technique recommended by the
<em class="filename">perlipc</em> manpage for safe signal handling.
Receiving the INT signal will set a flag that punts us out of the
loop on the next iteration. Catching this signal allows the program
to nicely close its database handles before shuffling off this mortal
coil.</p>





<p>This small program just scratches the surface of the sort of server
monitoring we can do. It would be easy to take the results we get
from <tt class="literal">sp_monitor</tt> and graph them over time to get
a better notion of how our server is being used. Let creeping
featurism be your muse.<a name="INDEX-758"></a><a name="INDEX-759"></a><a name="INDEX-760"></a><a name="INDEX-761"></a><a name="INDEX-762"></a><a name="INDEX-763"></a>
</p>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch07_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">7.5. Database Logins</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">7.7. Module Information for This Chapter</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
