<html>
<head>
<title>It's Not Easy Being Omnipotent  (Perl for System Administration)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David N. Blank-Edelman">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1565926099L" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="It's Not Easy Being Omnipotent">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Perl for System Administration"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch01_01.htm">Chapter 1: Introduction</a></td><td align="right" valign="top" width="172"><a href="ch01_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">1.6. It's Not Easy Being Omnipotent</h2>





<p>
<a name="INDEX-27"></a><a name="INDEX-28"></a><a name="INDEX-29"></a>Before we continue with the book,
let's take a few minutes for some cautionary words. Programs
written for system administration have a twist that makes them
different from most other programs. On Unix and NT/2000 they are
often run with elevated privileges, i.e., as
<em class="emphasis">root</em> or <em class="emphasis">Administrator</em>. With
this power comes responsibility. There is an extra onus on us as
programmers to write secure code. We write code that can and will
bypass the security restrictions placed on mere mortals. If we are
not careful, less "ethical" users may use flaws in our
code for nefarious purposes. Here are some of the issues you should
consider when you use Perl under these circumstances.</p>





<a name="ch01-5-fm2xml"></a>
<h3 class="sect2">1.6.1. Don't Do It</h3>





<p>By all means, use Perl. But if you can, avoid having your code run in
a privileged context. Most tasks do not require <em class="emphasis">root
</em>or<em class="emphasis"> Administrator</em> privileges. For
example, your log analysis program probably does not need to run as
<em class="emphasis">root</em>. Create another, less privileged user for
this sort of automation. Have a small, dedicated, privileged program
hand the data to that user if necessary, and then use that user to
perform the analysis.</p>

















<a name="ch01-6-fm2xml"></a>
<h3 class="sect2">1.6.2. Drop Your Privileges as Soon as Possible</h3>





<p>
<a name="INDEX-30"></a>Sometimes you can't avoid running a
script as <em class="emphasis">root</em> or
<em class="emphasis">Administrator</em>. For instance, a mail delivery
program you create may need to be able to write to a file as any user
on the system. Programs like these should shed their omnipotence as
soon as possible during their run.</p>





<p>
<a name="INDEX-31"></a><a name="INDEX-32"></a><a name="INDEX-33"></a>Perl programs running under Unix and
Linux can set the <tt class="literal">$&lt;</tt> and
<tt class="literal">$&gt;</tt> variables:</p>





<blockquote>
<pre class="programlisting"># permanently drops privs
($&lt;,$&gt;) = (getpwnam('nobody'),getpwnam('nobody'));</pre>
</blockquote>





<p>This sets the real and effective user IDs to that of
<em class="emphasis">nobody,</em> hopefully an underprivileged user. To be
even more thorough, you may wish to use <tt class="literal">$(</tt> and
<tt class="literal">$)</tt>to change the real and effective group IDs as
well.</p>





<p>
<a name="INDEX-34"></a><a name="INDEX-35"></a>Windows NT and Windows 2000 do
not have user IDs per se, but there are similar processes for
dropping privileges. Windows 2000 has a feature called
"RunAs" which can be used to run processes as a different
user. Under both Windows NT and Windows 2000, users with the user
right of <tt class="literal">Act as part of the operating system</tt> can impersonate other users. This
user right can be set using the <tt class="command">User Manager</tt> or
<tt class="command">User Manager for Domains</tt>
program:<a name="INDEX-36"></a>
</p>





<ol>
<li>
<p>Under the "Policies" menu, choose "User
Rights."</p>
</li>
<li>
<p>Select the "Show Advanced User Rights" check box.</p>
</li>
<li>
<p>Choose "Act as part of the operating system" from the
drop-down selector.</p>
</li>
<li>
<p>Select "Add..." and choose the users or groups who should
receive this right. You may need to choose "Show Users"
if you will be adding this right to a specific user.</p>
</li>
<li>
<p>If this is an interactive user, that user must log out and back in
again to make use of this new user right.</p>
</li>
</ol>
<p>You will also need to add the rights <tt class="literal">Replace a process level token</tt> and in some cases
<tt class="literal">Bypass traverse checking</tt> (see the
<tt class="literal">Win32::AdminMisc</tt> documentation). Once you have
assigned these rights to a user, that user can run Perl scripts with
<tt class="literal">LogonAsUser( )</tt> from David Roth's
<tt class="literal">Win32::AdminMisc</tt> module found at <a href="../../../../../../../www.roth.net/">http://www.roth.net</a>:</p>





<blockquote>
<pre class="programlisting">use Win32::AdminMisc;
die "Unable to impersonate $user\n" 
    if (!Win32::AdminMisc::LogonAsUser('',$user,$userpw);</pre>
</blockquote>





<p>Note: there is some danger here, because unlike the previous example,
you must pass the password of the user to the <tt class="literal">LogonAsUser(
)</tt> call.</p>

















<a name="ch01-7-fm2xml"></a>
<h3 class="sect2">1.6.3. Be Careful When Reading Data</h3>





<p>
<a name="INDEX-37"></a>When reading important data like
configuration files, test for unsafe conditions first. For instance,
you may wish to check that the file and all of the directories that
hold the file are not writeable (since that means someone could have
tampered with them). There's a good recipe for testing this in
Chapter 8 of the <em class="citetitle">Perl Cookbook</em>, by Tom
Christiansen and Nathan Torkington (O'Reilly).</p>





<p>
<a name="INDEX-38"></a>The
other concern is user input. Never trust that input from a user is
palatable. Even if you explicitly print <tt class="literal">Please answer Y or N:</tt>, there is nothing preventing the user from
answering with 2049 random characters (either out of spite, malice,
or because they stepped away from the keyboard and a two-year-old
came over to the keyboard instead).</p>





<p>
<a name="INDEX-39"></a>User input can be the cause of
even more subtle trouble. My favorite example is the "Poison
NULL Byte" exploit as reported in an article on Perl CGI
problems. Be sure to see the whole article (cited in the References
section at the end of this chapter). This particular exploit takes
advantage of the difference between Perl's handling of a NULL
(<tt class="literal">\000</tt>) byte in a string and the handling done by
the C libraries on a system. To Perl, there is nothing special about
this character. To the libraries, this character is used to indicate
the end of a string.</p>





<p>In practical terms, this means that it is possible for a user to
evade simple security tests. One example given in the article is that
of a password-changing program whose code looks like this:</p>





<blockquote>
<pre class="programlisting">if ($user ne "root"){ <em class="replaceable">&lt;call the necessary C library routine&gt;</em>}</pre>
</blockquote>





<p>If <tt class="literal">$user</tt> is set to <tt class="literal">root\000</tt>
(i.e., <tt class="literal">root</tt> followed by a NULL byte) then the
above test will succeed. When that string is passed to the underlying
library, the string will be treated as just
<em class="emphasis">root</em>, and someone will have just walked right
past the security check. If not caught, this same exploit will allow
access to random files and other resources. The easiest way to avoid
being caught by this exploit is to sanitize your input with something
like:</p>





<blockquote>
<pre class="programlisting">$input =~ tr /\000//d;</pre>
</blockquote>





<p>This is just one example of how user input can get our programs in
trouble. Because user input can be so problematic, Perl has a
security precaution called "taint mode." See the
<em class="citetitle">perlsec</em> manpage that ships with Perl for an
excellent discussion of "taintedness" and other security
precautions.</p>

















<a name="ch01-8-fm2xml"></a>
<h3 class="sect2">1.6.4. Be Careful When Writing Data</h3>





<p>If your program can write or append to every single file on the local
filesystem, you need to take special care with the how, where, and
when it writes data. On Unix systems, this is especially important
because symbolic links make file switching and redirection easy.
Unless your program is diligent, it may find itself writing to the
wrong file or device. There are two classes of programs where this
concern comes especially into play.</p>





<p>
<a name="INDEX-40"></a><a name="INDEX-41"></a>Programs that append data to a file
fall into the first class. The steps your program should take in
sequence <em class="emphasis">before</em> appending to a file are:</p>





<ol>
<li>
<p>Check the file's attributes before opening it using
<tt class="literal">stat( )</tt> and the normal file test operators. Make
sure it is not a hard or soft link, that it has the appropriate
permissions and ownership, etc.</p>
</li>
<li>
<p>Open the file for appending.</p>
</li>
<li>
<p>
<tt class="literal">stat(   )</tt> the open filehandle.</p>
</li>
<li>
<p>Compare the values from steps 1 and 3 to be sure that you have an
open file handle to the file you intended.</p>
</li>
</ol>
<p>You can see the <tt class="command">bigbuffy</tt> program in <a href="ch09_01.htm">Chapter 9, "Log Files"</a>, for sample code that uses this procedure.</p>





<p>Programs that use temporary files or directories are in the second
class. You've often seen code like this:</p>





<blockquote>
<pre class="programlisting">open(TEMPFILE,"&gt;/tmp/temp.$$") or die "unable to write /tmp/temp.$$:$!\n";</pre>
</blockquote>





<p>Unfortunately, that's not sufficiently secure on a multiuser
machine. The process ID (<tt class="literal">$$</tt>) sequence on most
machines is easily predictable, which means the next temporary
filename your script will use is equally predictable. If someone can
predict that name, they may be able to get there first and
that's usually bad news.</p>





<p>Some operating systems have library calls that will produce a
temporary filename using a decent randomization algorithm. To test
your operating system, you can run the following code. If the printed
names look reasonably random to you, <tt class="literal">POSIX::tmpnam(
)</tt> is a safe bet. If not, you may have to roll your own
random filename generation function:</p>





<blockquote>
<pre class="programlisting">use POSIX qw(tmpnam);
for (1..20){ print POSIX::tmpnam(  ),"\n"; }</pre>
</blockquote>





<p>Once you have a filename that cannot be guessed, you will need to
open it securely:</p>





<blockquote>
<pre class="programlisting">sysopen(TEMPFILE,$tmpname,O_RDWR|O_CREAT|O_EXCL,0666);</pre>
</blockquote>





<p>There is a second, easier way to perform these two steps (getting and
opening a temporary file). The <tt class="literal">IO::File-&gt;new_tmpfile(
)</tt> method from the <tt class="literal">IO::File</tt> module will
not only pick a good name (if the system libraries support this), but
it will also open the file for you for reading and writing.</p>





<p>Examples of <tt class="literal">POSIX::tmpnam( )</tt> and
<tt class="literal">IO::File-&gt;new_tmpfile( )</tt> along with other
information about this topic can be found in Chapter 7 of the
<em class="citetitle">Perl Cookbook</em>. Tim Jenness'
<tt class="literal">File::Temp</tt> module also attempts to provide secure
temporary file operations.</p>

















<a name="ch01-9-fm2xml"></a>
<h3 class="sect2">1.6.5. Avoid Race Conditions</h3>





<p>
<a name="INDEX-42"></a>Whenever possible, avoid writing code
that is susceptible to race condition exploits. The traditional race
condition starts with the assumption that the following sequence is
valid:</p>





<ol>
<li>
<p>Your program will amass some data.</p>
</li>
<li>
<p>Your program can then act on that data.</p>
</li>
</ol>
<p>If users can break into this sequence, let's say at step 1.5,
and make some key substitutions, they may cause trouble. If they can
get your program in step 2 to naively act upon different data than it
found in step 1, they have effectively exploited a race condition
(i.e., their program won the race to get at the data in question).
Other race conditions occur if you do not handle file locking
properly.</p>





<p>Race conditions often show up in system administration programs that
scan the filesystem as a first pass and then change things in a
second pass. Nefarious users may be able to make changes to the
filesystem right after the scanner pass so that changes are made to
the wrong file. Make sure your code does not leave gaps like this
open.<a name="INDEX-43"></a><a name="INDEX-44"></a><a name="INDEX-45"></a>
</p>

















<a name="ch01-77946"></a>
<h3 class="sect2">1.6.6. Enjoy</h3>





<p>It is important to remember that system administration is fun. Not
all the time, and not when you have to deal with the most frustrating
of problems, but there's a definite enjoyment to be found.
There is a real pleasure in supporting other people and building the
infrastructures that make other people's lives better. When the
collection of Perl programs you've just written brings other
people together for a common purpose, there is joy.</p>





<p>Now that you are ready, let's get to work on those wires.</p>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch01_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">1.5. Locating and Installing Modules</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">1.7. References for More Information</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
