<html>
<head>
<title>Preventing Suspicious Activities  (Perl for System Administration)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David N. Blank-Edelman">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1565926099L" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Preventing Suspicious Activities">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Perl for System Administration"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch10_01.htm">Chapter 10: Security and Network Monitoring</a></td><td align="right" valign="top" width="172"><a href="ch10_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">10.5. Preventing Suspicious Activities</h2>





<p>
<a name="INDEX-1076"></a><a name="INDEX-1077"></a>The very last attribute of a night
watchman that we will consider is an eye towards prevention. This is
the voice that says "You know, you shouldn't leave those
fresh-baked pies on the window sill to cool."</p>





<p>We're going to conclude this chapter with an example that, when
properly deployed, could positively impact a single machine, or an
entire computing infrastructure. As a symbolic gesture to close this
book, we'll build our own module instead of showing you how to
make use of other people's.
<a name="INDEX-1078"></a>
</p>





<p>
<a name="INDEX-1079"></a>The goal I have in mind is the prevention,
or at least reduction, of bad passwords. Good security mechanisms
have been thwarted by the selection of bad passwords since the dawn
of time. Oog's password to get back into the clan's cave
was probably "oog." Nowadays, the situation is
exacerbated by the widespread availability of sophisticated password
cracking programs like <tt class="command">John the Ripper</tt> by Solar
Designer, <tt class="command">L0phtCrack</tt> by Mudge and Weld Pond, and
Alec Muffett's <tt class="command">Crack</tt>.
<a name="INDEX-1080"></a><a name="INDEX-1081"></a><a name="INDEX-1082"></a><a name="INDEX-1083"></a>
</p>





<p>The only way to prevent the vulnerability in your systems these
programs expose is to avoid bad passwords in the first place. You
need to help your users choose and retain hard-to-crack passwords.
One way to do this on Unix machines (though the code could easily be
ported to NT or MacOS) is to use <tt class="command">libcrack</tt>, also by
Alec Muffett. In the process of writing <tt class="command">Crack</tt>,
Muffett did the system administration community a great service by
taking some of the methods used in <tt class="command">Crack</tt> and
distilling them to a single password-checking library written in C.
<a name="INDEX-1084"></a>
</p>





<p>This library has exactly one function for its user interface:
<tt class="literal">FascistCheck( )</tt>. <tt class="literal">FascistCheck(
)</tt> takes two arguments: a string to check and the full
pathname prefix of the dictionary file created when installing
<tt class="command">libcrack</tt>. It returns either
<tt class="literal">NULL</tt> if the string would be a "safe"
password, or an explanatory piece of text, e.g., "is a
dictionary word," if it is vulnerable to cracking. It would be
extremely handy to be able to use this functionality as part of any
Perl program that sets or changes a password,<a href="#FOOTNOTE-2">[2]</a> so
let's look at how we would build a module that would
incorporate this function. This foray will require a very brief peek
at some C code, but I promise it will be quick and painless.</p>
<blockquote class="footnote">




<a name="FOOTNOTE-2"></a>
<p>[2]A
similar example where <tt class="command">libcrack</tt> has been put to
good use is <tt class="command">npasswd </tt>(found at <a href="../../../../../../../www.utexas.edu/cc/unix/software/npasswd/">http://www.utexas.edu/cc/unix/software/npasswd/</a>), Clyde Hoover's superb replacement for the Unix
changing program <tt class="command">passwd</tt>.</p>




</blockquote>





<p>
<a name="INDEX-1085"></a><a name="INDEX-1086"></a>Our first step is to build the
<tt class="command">libcrack</tt> package at <a href="../../../../../../../www.users.dircon.co.uk/~crypto/">http://www.users.dircon.co.uk/~crypto/</a>. The
process detailed in the distribution is straightforward. Let me offer
two hints:</p>





<ul>
<li>
<p>The larger the dictionary you can build, the better. A good source of
wordlists to be included in that dictionary is ftp://ftp.ox.ac.uk/pub/wordlists. The build
process requires a significant amount of temporary disk space (for
the <tt class="command">sort</tt> process in
<tt class="command">utils/mkdict</tt>), so plan accordingly.</p>
</li>
<li>
<p>Be sure to build <tt class="command">libcrack</tt> with the same
development tools you built Perl. For instance, if you used
<tt class="command">gcc</tt> to compile Perl, be sure to use
<tt class="command">gcc</tt> for the <tt class="command">libcrack</tt> build
process as well. This is true of all modules that need to link in
additional C libraries.</p>
</li>
</ul>
<p>Once we have the C library <tt class="command">libcrack.a</tt> built, we
need to pick a method for calling the <tt class="literal">FascistCheck(
)</tt> function in that library from within Perl. There are two
popular methods for creating this sort of binding, XS and SWIG.
We'll be using XS because it is easy to use for simple jobs and
all of the necessary tools ship with the Perl distribution. For an in
depth comparison of the two methods, see <em class="citetitle">Advanced Perl
Programming</em> by Sriram Srinivasan (O'Reilly).</p>





<p>The easiest way to begin with XS is to use the
<tt class="command">h2xs</tt> program to create a proto-module for
you:<a name="INDEX-1087"></a>
</p>





<blockquote>
<pre class="programlisting">$ <tt class="userinput"><b>h2xs -A -n Cracklib</b></tt>
Writing Cracklib/Cracklib.pm
Writing Cracklib/Cracklib.xs
Writing Cracklib/Makefile.PL
Writing Cracklib/test.pl
Writing Cracklib/Changes
Writing Cracklib/MANIFEST</pre>
</blockquote>





<p>
<a href="ch10_05.htm">Table 10-2</a> describes the files created by this
command.</p>





<a name="ch10-67885"></a>
<h4 class="objtitle">Table 10.2. Files Created by h2xs -A -n Cracklib</h4>
<table border="1">



<tr>
<th>
<p>Filename</p>
</th>
<th>
<p>Description</p>
</th>
</tr>










<tr>
<td>
<p>
<em class="filename">Cracklib/Cracklib.pm</em>
</p>
</td>
<td>
<p>Prototype Perl stub and documentation</p>
</td>
</tr>




<tr>
<td>
<p>
<em class="filename">Cracklib/Cracklib.xs</em>
</p>
</td>
<td>
<p>C code glue</p>
</td>
</tr>




<tr>
<td>
<p>
<em class="filename">Cracklib/Makefile.PL</em>
</p>
</td>
<td>
<p>Makefile-generating Perl code</p>
</td>
</tr>




<tr>
<td>
<p>
<em class="filename">Cracklib/test.pl</em>
</p>
</td>
<td>
<p>Prototype test code</p>
</td>
</tr>




<tr>
<td>
<p>
<em class="filename">Cracklib/Changes</em>
</p>
</td>
<td>
<p>Version documentation</p>
</td>
</tr>




<tr>
<td>
<p>
<em class="filename">Cracklib/MANIFEST</em>
</p>
</td>
<td>
<p>List of files shipped with module</p>
</td>
</tr>





</table>





<p>We only need to change two of these files to get the functionality we
seek. Let's take on the hardest part first: the C code glue.
Here's how the function is defined in the
<tt class="command">libcrack</tt> documentation:</p>





<blockquote>
<pre class="programlisting">char *FascistCheck(char *pw, char *dictpath);</pre>
</blockquote>





<p>In our <em class="filename">Cracklib/Cracklib.xs</em> glue file, we repeat
this definition:</p>





<blockquote>
<pre class="programlisting">PROTOTYPES: ENABLE
 
char *
FascistCheck(pw,dictpath)
      char *pw
      char *dictpath</pre>
</blockquote>





<p>The <tt class="literal">PROTOTYPES</tt> directive will create Perl
prototypes for the functions in our glue file. This isn't an
issue for the code we're writing, but we include the directive
to stifle a warning message in the build process.</p>





<p>Right after the function definition, we describe how it's
called and what it returns:</p>





<blockquote>
<pre class="programlisting">CODE:
      RETVAL = (char *)FascistCheck(pw,dictpath);
      OUTPUT:
      RETVAL</pre>
</blockquote>





<p>
<tt class="literal">RETVAL</tt> is the actual glue here. It represents the
transfer point between the C code and the Perl interpreter. Here we
tell Perl that it should receive a string of characters returned from
the <tt class="literal">FascistCheck( )</tt> C library function and make
that available as the return value (i.e., <tt class="literal">OUTPUT)</tt>
of the Perl <tt class="literal">Cracklib::FascistCheck( )</tt> function.
That's all the C code we'll need to touch.</p>





<p>The other file we need to modify needs only a single line changed. We
need to add another argument to the <tt class="literal">WriteMakefile(
)</tt> call in <em class="emphasis">Makefile.PL</em> to be sure Perl
can find the <em class="filename">libcrack.a</em> file. Here's that
new line in context:</p>





<blockquote>
<pre class="programlisting">'LIBS'      =&gt; [''],   # e.g., '-lm'
 'MYEXTLIB' =&gt; '/usr/local/lib/libcrack$(LIB_EXT)' # location of cracklib
 'DEFINE'    =&gt; '',     # e.g., '-DHAVE_SOMETHING'</pre>
</blockquote>





<p>That's the bare minimum we need to do to make this module work.
If we type:</p>





<blockquote>
<pre class="programlisting">
<tt class="userinput"><b>perl Makefile.PL</b></tt>
<tt class="userinput"><b>make</b></tt>
<tt class="userinput"><b>make install</b></tt>
</pre>
</blockquote>





<p>we could begin to use our new module like this:</p>





<blockquote>
<pre class="programlisting">use Cracklib;
use Term::ReadKey;    # for reading of password<a name="INDEX-1088"></a>
<a name="INDEX-1089"></a>
$dictpath = "/usr/local/etc/cracklib/pw_dict";

print "Please enter a password: ";
ReadMode 2;           # turn off echo
chomp($pw = ReadLine);# read password
ReadMode 0;           # return tty to prev state
print "\n";

$result = Cracklib::FascistCheck($pw,$dictpath);
if (defined $result){
    print "That is not a valid password because $result.\n";
}
else {
    print "That password is peachy, thanks!\n";
}</pre>
</blockquote>





<p>Don't skip right to using the module yet. Let's make this
a professional-grade module before we install it.</p>





<p>First, add a script to test that the module is working correctly.
This script needs to call our function with some known values and
report back in a very specific way if it received the correct known
responses. At the start of our tests, we need to print a range of
test numbers. For example, if we were going to provide 10 tests, we
would first print <tt class="literal">1..10</tt>. Then, for every test we
perform, we need to print either "ok" or "not
ok" and the test number. The standard Perl module building code
will then interpret this output and present the user with a nice
summary of the test results.</p>





<p>
<tt class="command">h2xs</tt> was kind enough to provide a sample test
script we can modify. Let's make a <em class="filename">t</em>
directory (the standard default directory for a module test suite)
and rename <em class="filename">test.pl</em> to
<em class="filename">t/cracklib.t</em>. Here's some code we can tag
on to the end of <em class="filename">t/cracklib.t</em> to perform a set
of tests:</p>





<blockquote>
<pre class="programlisting"># location of our cracklib dictionary files
$dictpath = "/usr/local/etc/pw_dict"; 

# test strings and their known cracklib responses
%test = 
  ("happy"        =&gt; "it is too short",
   "a"            =&gt; "it's WAY too short",
   "asdfasdf"     =&gt; "it does not contain enough DIFFERENT characters",
   "minicomputer" =&gt; "it is based on a dictionary word",
   "1ftm2tgr3fts" =&gt; "");

# Cycle through all of the keys in our mapping, checking to see if 
# cracklib returns the expected response. If it does, print "ok",
# otherwise print "not ok"
$testnum = 2;
foreach $pw (keys %test){
    my ($result) = Cracklib::FascistCheck($pw,$dictpath);
    if ((defined $result and $result eq $test{$pw}) or
       (!defined $result and $test{$pw} eq "")){
          print "ok ",$testnum++,"\n";
    }
    else {
	    print "not ok ",$testnum++,"\n";
    }
}</pre>
</blockquote>





<p>There are six tests being made (the previous five from the
<tt class="literal">%test</tt> hash and a module load test), so we need
to change the line in <em class="filename">t/cracklib.t</em> that says:</p>





<blockquote>
<pre class="programlisting">BEGIN { $| = 1; print "1..1\n"; }</pre>
</blockquote>





<p>to:</p>





<blockquote>
<pre class="programlisting">BEGIN { $| = 1; print "1..6\n"; }</pre>
</blockquote>





<p>Now, we can type <em class="emphasis">make test</em> and
<em class="filename">Makefile</em> will run the test code to check that
our module is working properly.</p>





<p>A test script is certainly important, but our script won't be
nearly respectable if we omit this crucial component: documentation.
Take some time and flesh out the stub information in the
<em class="filename">Cracklib.pm</em> and <em class="filename">Changes</em>
files<em class="filename">.</em> It is also a good idea to add a
<em class="filename">README</em> or <em class="filename">INSTALL</em> file
describing how to build the module, where to get the component parts
like <tt class="command">libcrack</tt>, example code, etc. These new files
and the earlier renaming of the <em class="filename">test.pl</em> file
should be noted in the <em class="filename">MANIFEST</em> file to keep the
generic module-building code happy.<a name="INDEX-1090"></a><a name="INDEX-1091"></a>
</p>





<p>Finally, install your module everywhere in your infrastructure.
Sprinkle calls to <tt class="literal">Cracklib::FascistCheck( )</tt>
everywhere you need to set or change passwords. As the number of bad
passwords diminishes in your environment, so shall the night watchman
smile kindly upon you.<a name="INDEX-1092"></a><a name="INDEX-1093"></a><a name="INDEX-1094"></a><a name="INDEX-1095"></a><a name="INDEX-1096"></a>
</p>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch10_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">10.4. Danger on the Wire</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">10.6. Module Information for This Chapter</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
