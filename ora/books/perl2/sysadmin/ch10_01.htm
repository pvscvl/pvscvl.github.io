<html>
<head>
<title>Security and Network Monitoring  (Perl for System Administration)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David N. Blank-Edelman">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1565926099L" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Security and Network Monitoring">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Perl for System Administration"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm">Perl for System Administration</a></td><td align="right" valign="top" width="172"><a href="ch10_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 10.  Security and Network Monitoring</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch10_01.htm">Noticing Unexpected or Unauthorized Changes</a>
<br>
<a href="ch10_02.htm">Noticing Suspicious Activities</a>
<br>
<a href="ch10_03.htm">SNMP</a>
<br>
<a href="ch10_04.htm">Danger on the Wire</a>
<br>
<a href="ch10_05.htm">Preventing Suspicious Activities</a>
<br>
<a href="ch10_06.htm">Module Information for This Chapter</a>
<br>
<a href="ch10_07.htm">References for More Information</a>
<br>
</p>
</div>










<p>
<a name="INDEX-984"></a>Any
discussion of <em class="emphasis">security</em> is fraught with peril.
There are at least three snares that can doom a discussion on
security:</p>





<ol>
<li>
<p>Security means different things to different people. If you walked
into a conference of Greco-Roman scholars and asked about Rome, the
first scholar would rise dramatically to her feet and begin to
lecture about aqueducts (infrastructure and delivery), the second
<em class="emphasis">Pax Romana</em> (ideology and policies), a third
would expound on the Roman legions (enforcement), a fourth on the
Roman Senate (administration), and so on. The need to deal with every
facet of security at once is security's first trap.</p>
</li>
<li>
<p>People think that something can be secure, be it a program, a
computer, a network, etc. This chapter will never claim to show you
how to make anything secure; it will try to help you make something
<em class="emphasis">more</em> secure, or at least recognize when
something is <em class="emphasis">less</em> secure. Security is a
continuum.</p>
</li>
<li>
<p>Finally, one of the most deadly traps in this business is
specificity. It is true that the deity of security is often in the
details, but it is an ever-shifting set of details. Patching security
holes A, B, and C on your system only guarantees (and perhaps not
even) that those particular holes will not be a source of trouble. It
does nothing to help when hole D is found. That's why this
chapter will focus on principles and tools for improving security. It
will not tell you how to fix any particular buffer overflow,
vulnerable registry key, or world-writable system file.</p>
</li>
</ol>
<p>One good way to get into a discussion of these principles is to
examine how security manifests itself in the physical world. In both
the real and virtual worlds, it all comes down to
<em class="emphasis">fear</em>. Will something I care about be damaged,
lost, or revealed? Is there something I can do to prevent this from
happening? Is it happening <em class="emphasis">right now</em>?</p>





<p>If we look at how this fear is faced in the physical world, we can
learn ways to deal with it in our domain as well. One way we deal
with this fear is to invent stronger ways of partitioning space. With
physical space we use constructs like bank vaults; with intellectual
space we use data-hiding methods like "top secret
clearance" or encryption. But this is a never-ending pursuit.
For every hour spent designing a security system, there is at least
an hour spent looking for a way to evade it. In our case, there are
also hordes of bored teenagers with computers and disgruntled former
employees looking for something to do with excess energy.</p>





<p>A slightly better approach to improving security that has persisted
over the ages is the use of a designated person to allay these fears.
Once upon a time, there was nothing so comforting as the sound of the
night watchman's footsteps as he or she walked through the
town, jiggling doors handles to make sure everything was locked and
secure. We'll use this quaint image as the jump point for our
exploration into security and network monitoring with Perl.</p>




































<h2 class="sect1">10.1. Noticing Unexpected or Unauthorized Changes</h2>





<p>
<a name="INDEX-985"></a>A good watchman notices change. He or
she knows when things are in the wrong place in your environment. If
your precious Maltese falcon gets replaced with a forgery, the
watchman is the first person that should notice. Similarly, if
someone modifies or replaces key files on your system, you want
sirens to blare and klaxons to sound. More often than not, the change
will be harmless. But the first time someone breaches your security
and mucks with <em class="filename">/bin/login</em>,
<em class="filename">msgina.dll</em>, or <em class="filename">Finder</em>,
you'll be so glad you noticed that you will excuse any prior
false alarms.</p>





<a name="ch10-2-fm2xml"></a>
<h3 class="sect2">10.1.1. Local Filesystem Changes</h3>





<p>
<a name="INDEX-986"></a><a name="INDEX-987"></a>Filesystems are an excellent place to
begin our exploration into change-checking programs. We're
going to explore ways to check if important files like operating
system binaries and security-related files (e.g.,
<em class="filename">/etc/passwd</em> or <em class="filename">msgina.dll </em>)
have changed. Changes to these files made without the knowledge of
the administrator are often signs of an intruder. There are some
relatively sophisticated cracker toolkits available on the Net that
do a very good job of installing Trojan versions of important files
and covering up their tracks. That's the most malevolent kind
of change we can detect. On the other end of the spectrum, sometimes
it is just nice to know when important files have been changed
(especially in environments where multiple people administer the same
systems). The techniques we're about to explore will work
equally well in both cases.<a name="INDEX-988"></a><a name="INDEX-989"></a>
</p>





<p>
<a name="INDEX-990"></a><a name="INDEX-991"></a><a name="INDEX-992"></a>The easiest way to tell if a file
has changed is to use the Perl functions <tt class="literal">stat( )</tt>
and <tt class="literal">lstat( )</tt>. These functions take a filename or
a filehandle and return an array with information about that file.
The only difference between the two functions manifests itself on
operating systems like Unix that support symbolic links. In these
cases <tt class="literal">lstat( )</tt> is used to return information
about the target of a symbolic link instead of the link itself. On
all other operating systems the information returned by
<tt class="literal">lstat( )</tt> should be the same as that returned by
<tt class="literal">stat( )</tt>.</p>





<p>Using <tt class="literal">stat( )</tt> or <tt class="literal">lstat( )</tt>
is easy:</p>





<blockquote>
<pre class="programlisting">@information = stat("filename");</pre>
</blockquote>





<p>
<a name="INDEX-993"></a>As demonstrated in <a href="ch03_01.htm">Chapter 3, "User Accounts"</a>, we can also use Tom
Christiansen's <tt class="literal">File::Stat</tt>
module to provide this information using an object-oriented
syntax.<a name="INDEX-994"></a><a name="INDEX-995"></a>
</p>





<p>The information returned by <tt class="literal">stat( )</tt> or
<tt class="literal">lstat( )</tt> is operating-system-dependent.
<tt class="literal">stat( )</tt> and <tt class="literal">lstat( )</tt> began
as Unix system calls, so the Perl documentation for these calls is
skewed towards the return values for Unix systems. <a href="ch10_01.htm">Table 10-1</a> shows how these values compare to those
returned by <tt class="literal">stat( )</tt> on Windows NT/2000 and
MacOS. The first two columns show the Unix field number and
description.</p>





<a name="ch10-55330"></a>
<h4 class="objtitle">Table 10.1. stat() Return Value Comparison</h4>
<table border="1">





<tr>
<th>
<p>#</p>
</th>
<th>
<p>Unix Field Description</p>
</th>
<th>
<p>Valid for NT/2000</p>
</th>
<th>
<p>Valid for MacOS</p>
</th>
</tr>










<tr>
<td>
<p>0</p>
</td>
<td>
<p>Device number of filesystem</p>
</td>
<td>
<p>Yes (drive #)</p>
</td>
<td>
<p>Yes (but is vRefNum)</p>
</td>
</tr>




<tr>
<td>
<p>1</p>
</td>
<td>
<p>Inode number</p>
</td>
<td>
<p>No (always 0)</p>
</td>
<td>
<p>Yes (but is fileID/dirID)</p>
</td>
</tr>




<tr>
<td>
<p>2</p>
</td>
<td>
<p>File mode (type and   permissions)</p>
</td>
<td>
<p>Yes</p>
</td>
<td>
<p>Yes (but is 777 for dirs and applications, 666 for unlocked
documents, 444 for locked documents)</p>
</td>
</tr>




<tr>
<td>
<p>3</p>
</td>
<td>
<p>Number of (hard) links to the file</p>
</td>
<td>
<p>Yes (for NTFS)</p>
</td>
<td>
<p>No (always 1)</p>
</td>
</tr>




<tr>
<td>
<p>4</p>
</td>
<td>
<p>Numeric user ID of file's owner</p>
</td>
<td>
<p>No (always 0)</p>
</td>
<td>
<p>No (always 0)</p>
</td>
</tr>




<tr>
<td>
<p>5</p>
</td>
<td>
<p>Numeric group ID of file's owner</p>
</td>
<td>
<p>No (always 0)</p>
</td>
<td>
<p>No (always 0)</p>
</td>
</tr>




<tr>
<td>
<p>6</p>
</td>
<td>
<p>The device identifier (special files only)</p>
</td>
<td>
<p>Yes (drive #)</p>
</td>
<td>
<p>No (always null)</p>
</td>
</tr>




<tr>
<td>
<p>7</p>
</td>
<td>
<p>Total size of file, in bytes</p>
</td>
<td>
<p>Yes (but does not include the size of any alternate data streams)</p>
</td>
<td>
<p>Yes (but returns size of data fork only)</p>
</td>
</tr>




<tr>
<td>
<p>8</p>
</td>
<td>
<p>Last access time since the epoch</p>
</td>
<td>
<p>Yes</p>
</td>
<td>
<p>Yes (but epoch is 66 years earlier than Unix, at 1/1/1904, and value
is same as field #9)<a href="#FOOTNOTE-1">[1]</a>
</p>
</td>
</tr>




<tr>
<td>
<p>9</p>
</td>
<td>
<p>Last modify time since the epoch</p>
</td>
<td>
<p>Yes</p>
</td>
<td>
<p>Yes (but epoch is 1/1/1904 and value is same as field #8)</p>
</td>
</tr>




<tr>
<td>
<p>10</p>
</td>
<td>
<p>Inode change time since the epoch</p>
</td>
<td>
<p>Yes (but is file <em class="emphasis">creation</em> time)</p>
</td>
<td>
<p>Yes (but epoch is 1/1/1904 and is file <em class="emphasis">creation</em>
time)</p>
</td>
</tr>




<tr>
<td>
<p>11</p>
</td>
<td>
<p>Preferred block size for filesystem I/O</p>
</td>
<td>
<p>No (always null)</p>
</td>
<td>
<p>Yes</p>
</td>
</tr>




<tr>
<td>
<p>12</p>
</td>
<td>
<p>Actual number of blocks allocated</p>
</td>
<td>
<p>No (always null)</p>
</td>
<td>
<p>Yes</p>
</td>
</tr>





</table>
<blockquote class="footnote">




<a name="FOOTNOTE-1"></a>
<p>[1]Also, MacOS epoch is counted
from <em class="emphasis">local</em> time, not Universal Time Coordinated
(UTC). So if the clocks in two MacOS computers are synchronized, but
one has a time zone setting (TZ) of -0800 and the other has a TZ of
-0500, the values for <tt class="literal">time( )</tt>on these computers
will be three hours apart.</p>




</blockquote>





<p>In addition to <tt class="literal">stat( )</tt> and <tt class="literal">lstat(
)</tt>, other non-Unix versions of Perl have special functions
to return attributes of a file that are peculiar to that OS. See
<a href="ch02_01.htm">Chapter 2, "Filesystems"</a>, for discussions of functions like
<tt class="literal">MacPerl::GetFileInfo( )</tt> and
<tt class="literal">Win32::FileSecurity::Get( )</tt>.</p>





<p>Once you have queried the <tt class="literal">stat( )</tt>ish values for
a file, the next step is to compare the "interesting"
values against a known set of values for that file. If the values
changed, something about the file must have changed. Here's a
program that both generates a string of <tt class="literal">lstat( )</tt>
values and checks files against a known set of those values. We
intentionally exclude field #8 from the above table (last access
time) because it changes every time a file is read.</p>





<p>This program takes either a <em class="emphasis">-p filename</em> argument
to print <tt class="literal">lstat( )</tt> values for a given file or a
<em class="emphasis">-c filename</em> argument to check the
<tt class="literal">lstat( )</tt> values all of the files listed in
<em class="emphasis">filename</em>.<a name="INDEX-996"></a><a name="INDEX-997"></a>
</p>





<blockquote>
<pre class="programlisting">use Getopt::Std;

# we use this for prettier output later in &amp;printchanged(  )
@statnames = qw(dev ino mode nlink uid gid rdev 
                size mtime ctime blksize blocks);

getopt('p:c:');

die "Usage: $0 [-p &lt;filename&gt;|-c &lt;filename&gt;]\n"
  unless ($opt_p or $opt_c);

if ($opt_p){
    die "Unable to stat file $opt_p:$!\n"
      unless (-e $opt_p);
    print $opt_p,"|",join('|',(lstat($opt_p))[0..7,9..12]),"\n";
    exit;
}

if ($opt_c){
    open(CFILE,$opt_c) or
      die "Unable to open check file $opt_c:$!\n";
    while(&lt;CFILE&gt;){
        chomp;
        @savedstats = split('\|');
        die "Wrong number of fields in line beginning with
            $savedstats[0]\n"
          unless ($#savedstats == 12);
        @currentstats = (lstat($savedstats[0]))[0..7,9..12];
        
        # print the changed fields only if something has changed
        &amp;printchanged(\@savedstats,\@currentstats)
          if ("@savedstats[1..13]" ne "@currentstats");
    }
    close(CFILE);
}

# iterates through attributes lists and prints any changes between
# the two
sub printchanged{
    my($saved,$current)= @_;
    
    # print the name of the file after popping it off of the array read
    # from the check file
    print shift @{$saved},":\n";

    for (my $i=0; $i &lt; $#{$saved};$i++){
         if ($saved-&gt;[$i] ne $current-&gt;[$i]){
             print "\t".$statnames[$i]." is now ".$current-&gt;[$i];
             print " (should be ".$saved-&gt;[$i].")\n";
         }     
    }
}</pre>
</blockquote>





<p>To use this program, we might type <tt class="command">checkfile -p /etc/passwd
&gt;&gt; checksumfile</tt>. <em class="filename">checksumfile</em>
should then contain a line that looks like this:</p>





<blockquote>
<pre class="programlisting">/etc/passwd|1792|11427|33060|1|0|0|24959|607|921016509|921016509|8192|2</pre>
</blockquote>





<p>We would then repeat this step for each file we want to monitor.
Then, running the script with <tt class="command">checkfile -c
checksumfile</tt> will show any changes. For instance, if I
remove a character from <em class="filename">/etc/passwd</em>, this script
will complain like this:</p>





<blockquote>
<pre class="programlisting">/etc/passwd:
        size is now 606 (should be 607)
        mtime is now 921020731 (should be 921016509)
        ctime is now 921020731 (should be 921016509)</pre>
</blockquote>





<p>There's one quick Perl trick in this code to mention before we
move on. The following line demonstrates a quick-and-dirty way of
comparing two lists for equality (or lack thereof ):</p>





<blockquote>
<pre class="programlisting">if ("@savedstats[1..12]" ne "@currentstats");</pre>
</blockquote>





<p>The contents of the two lists are automatically
"stringified" by Perl by concatenating the list elements
with a space between them:</p>





<blockquote>
<pre class="programlisting">join(" ",@savedstats[1..12]))</pre>
</blockquote>





<p>and then the resulting strings are compared. For short lists where
the order and number of the list elements is important, this
technique works well. In most other cases, you'll need an
iterative or hash solution like the ones documented in the Perl FAQs.</p>





<p>Now that you have file attributes under your belt, I've got bad
news for you. Checking to see that a file's attributes have not
changed is a good first step, but it doesn't go far enough. It
is not difficult to alter a file while keeping attributes like the
access and modification times the same. Perl even has a function,
<tt class="literal">utime( )</tt>, for changing the access or
modification times of a file. Time to pull out the power tools.</p>





<p>Detecting change in data is one of the fortes of a particular set of
algorithms known as "message-digest algorithms."
Here's how Ron Rivest describes a particular message-digest
algorithm called the "RSA Data Security, Inc. MD5
Message-Digest Algorithm" in
RFC1321:<a name="INDEX-998"></a><a name="INDEX-999"></a>
</p>






<p>The algorithm takes as input a message of arbitrary length and
produces as output a 128-bit "fingerprint" or
"message digest" of the input. It is conjectured that it
is computationally infeasible to produce two messages having the same
message digest, or to produce any message having a given prespecified
target message digest.</p>






<p>For our purposes this means that if we run MD5 on a file, we'll
get a unique fingerprint. If the data in this file were to change in
any way, no matter how small, the fingerprint for that file will
change. The easiest way to harness this magic from Perl is through
the <tt class="literal">Digest</tt> module family and its
<tt class="literal">Digest::MD5</tt>
module.<a name="INDEX-1000"></a>
</p>





<p>
<a name="INDEX-1001"></a>The <tt class="literal">Digest::MD5</tt>
module is easy to use. You create a <tt class="literal">Digest::MD5</tt>
object, add the data to it using the <tt class="literal">add( )</tt> or
<tt class="literal">addfile( )</tt> methods, and then ask the module to
create a digest (fingerprint) for you.</p>





<p>To compute the MD5 fingerprint for a password file on Unix, we could
use something like this:</p>





<blockquote>
<pre class="programlisting">use Digest::MD5 qw(md5);

$md5 = new Digest::MD5;

open(PASSWD,"/etc/passwd") or die "Unable to open passwd:$!\n";
$md5-&gt;addfile(PASSWD);
close(PASSWD);

print $md5-&gt;hexdigest."\n";</pre>
</blockquote>





<p>The <tt class="literal">Digest::MD5</tt> documentation demonstrates that we
can string methods together to make the above program more compact:</p>





<blockquote>
<pre class="programlisting">use Digest::MD5 qw(md5);

open(PASSWD,"/etc/passwd") or die "Unable to open passwd:$!\n";
print Digest::MD5-&gt;new-&gt;addfile(PASSWD)-&gt;hexdigest,"\n";
close(PASSWD);</pre>
</blockquote>





<p>Both of these code snippets print out:</p>





<blockquote>
<pre class="programlisting">a6f905e6b45a65a7e03d0809448b501c</pre>
</blockquote>





<p>If we make even the slightest change to that file, the output
changes. Here's the output after I transpose just<em class="emphasis"> two
characters</em> in the password file:</p>





<blockquote>
<pre class="programlisting">335679c4c97a3815230a4331a06df3e7</pre>
</blockquote>





<p>Any change in the data now becomes obvious. Let's extend our
previous attribute-checking program to include MD5:</p>





<blockquote>
<pre class="programlisting">use Getopt::Std;
use Digest::MD5 qw(md5);

@statnames = 
 qw(dev ino mode nlink uid gid rdev size mtime ctime blksize blocks md5);

getopt('p:c:');

die "Usage: $0 [-p &lt;filename&gt;|-c &lt;filename&gt;]\n"
  unless ($opt_p or $opt_c);

if ($opt_p){
    die "Unable to stat file $opt_p:$!\n"
      unless (-e $opt_p);

    open(F,$opt_p) or die "Unable to open $opt_p:$!\n";
    $digest = Digest::MD5-&gt;new-&gt;addfile(F)-&gt;hexdigest;
    close(F);

    print $opt_p,"|",join('|',(lstat($opt_p))[0..7,9..12]),
          "|$digest","\n";
    exit;
}

if ($opt_c){
    open(CFILE,$opt_c) or 
      die "Unable to open check file $opt_c:$!\n";

    while (&lt;CFILE&gt;){
        chomp;
        @savedstats = split('\|');
        die "Wrong number of fields in \'$savedstats[0]\' line.\n"
          unless ($#savedstats == 13);

        @currentstats = (lstat($savedstats[0]))[0..7,9..12];

        open(F,$savedstats[0]) or die "Unable to open $opt_c:$!\n";
        push(@currentstats,Digest::MD5-&gt;new-&gt;addfile(F)-&gt;hexdigest);
        close(F);

        &amp;printchanged(\@savedstats,\@currentstats)
          if ("@savedstats[1..13]" ne "@currentstats");
    }
    close(CFILE);
}

sub printchanged {
    my($saved,$current)= @_;
    
    print shift @{$saved},":\n";

    for (my $i=0; $i &lt;= $#{$saved};$i++){
         if ($saved-&gt;[$i] ne $current-&gt;[$i]){
             print " ".$statnames[$i]." is now ".$current-&gt;[$i];
             print " (".$saved-&gt;[$i].")\n";
         }
     }
}<a name="INDEX-1002"></a>
<a name="INDEX-1003"></a>
</pre>
</blockquote>

















<a name="ch10-3-fm2xml"></a>
<h3 class="sect2">10.1.2. Network Service Changes</h3>





<p>
<a name="INDEX-1004"></a><a name="INDEX-1005"></a>We've
looked at ways to detect change on our local filesystem. How about
noticing changes on other machines or in the services they provide?
In <a href="ch05_01.htm">Chapter 5, "TCP/IP Name Services"</a>, we saw ways to query NIS and DNS. It
would be easy to check repeated queries to these services for
changes. For instance, if our DNS servers are configured to allow
this, we can pretend to be a secondary server and request a dump
(i.e., a "zone transfer") of that server's data for
a particular domain:<a name="INDEX-1006"></a><a name="INDEX-1007"></a>
</p>





<blockquote>
<pre class="programlisting">use Net::DNS;

# takes two command-line arguments: the first is the name server 
# to query, the # second is the domain to query from that name server
$server = new Net::DNS::Resolver;
$server-&gt;nameservers($ARGV[0]); 

print STDERR "Transfer in progress...";
@zone = $server-&gt;axfr($ARGV[1]);
die $server-&gt;errorstring unless (defined @zone);
print STDERR "done.\n";

for $record (@zone){
  $record-&gt;print;
}</pre>
</blockquote>





<p>Combine this idea with MD5. Instead of printing the zone information,
let's take a digest of it:<a name="INDEX-1008"></a>
</p>





<blockquote>
<pre class="programlisting">use Net::DNS;
use FreezeThaw qw{freeze};
use Digest::MD5 qw(md5);

$server = new Net::DNS::Resolver;
$server-&gt;nameservers($ARGV[0]);

print STDERR "Transfer in progress...";
@zone = $server-&gt;axfr($ARGV[1]);
die $server-&gt;errorstring unless (defined @zone);
print STDERR "done.\n";

$zone = join('',sort map(freeze($_),@zone));

print "MD5 fingerprint for this zone transfer is: ";
print Digest::MD5-&gt;new-&gt;add($zone)-&gt;hexdigest,"\n";</pre>
</blockquote>





<p>MD5 works on a scalar chunk of data (a message), not a Perl
list-of-hashes data structure like <tt class="literal">@zone</tt>.
That's where this line of code comes into play:</p>





<blockquote>
<pre class="programlisting">$zone = join('',sort map(freeze($_),@zone));</pre>
</blockquote>





<p>
<a name="INDEX-1009"></a><a name="INDEX-1010"></a>We're using the
<tt class="literal">FreezeThaw</tt> module we saw in <a href="ch09_01.htm">Chapter 9, "Log Files"</a>, to flatten each <tt class="literal">@zone</tt>
record data structure into a plain text string. Once flattened, the
records are sorted before being concatenated into one large scalar
value. The sort step allows us to ignore the order in which the
records are returned in the zone transfer.</p>





<p>Dumping the contents of an entire server's zone file is a bit
extreme, especially for large zones, so it may make more sense to
monitor only an important subset of addresses. See <a href="ch05_01.htm">Chapter 5, "TCP/IP Name Services"</a> for an example of this. Also, it is a good
idea to restrict the ability to do zone transfers to as few machines
as possible for security reasons.</p>





<p>The material we've seen so far doesn't get you completely
out of the woods. Here are a few questions you might want to ponder:</p>





<ul>
<li>
<p>What if someone tampers with your database of MD5 digests and
substitutes valid fingerprints for their Trojan file replacements or
service changes?</p>
</li>
<li>
<p>What if someone tampers with your script so it only
<em class="emphasis">appears</em> to check the digests against your
database?</p>
</li>
<li>
<p>What if someone tampers with the MD5 module on your system?</p>
</li>
<li>
<p>For the ultimate in paranoia, what if someone manages to tamper with
the Perl executable, one of its shared libraries, or the operating
system core itself?</p>
</li>
</ul>
<p>The usual answers to these questions (poor as they may be) involve
keeping known good copies of everything related to the process
(digest databases, modules, statically-linked Perl, etc.) on
read-only medium.</p>





<p>This conundrum is another illustration of the continuum of security.
It is always possible to find more to fear.<a name="INDEX-1011"></a><a name="INDEX-1012"></a><a name="INDEX-1013"></a>
</p>
















































































































































































































<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch10_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">9.7. References for More Information</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">10.2. Noticing Suspicious Activities</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
