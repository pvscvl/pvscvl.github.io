<html>
<head>
<title>The Ten-Minute LDAP Tutorial  (Perl for System Administration)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David N. Blank-Edelman">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1565926099L" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The Ten-Minute LDAP Tutorial">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Perl for System Administration"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appa_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm">Perl for System Administration</a></td><td align="right" valign="top" width="172"><a href="appc_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Appendix B.  The Ten-Minute LDAP Tutorial</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="appb_01.htm">LDAP Data Organization </a>
<br>
</p>
</div>








<p>The Lightweight Directory Access Protocol (LDAP) is one of the
pre-eminent directory services deployed in the world today. Over
time, system administrators are likely to find themselves dealing
with LDAP servers and clients in a number of contexts. This tutorial
will give you an introduction to the LDAP nomenclature and concepts
you'll need when using the material in <a href="ch06_01.htm">Chapter 6, "Directory Services"</a>.</p>




<p>The action in LDAP takes place around a data structure known as an
<em class="emphasis">entry</em>. <a href="appb_01.htm">Figure B-1</a> is a picture
to keep in mind as we look at an entry's component parts.</p>




<a name="appb-72396"></a>
<div class="figure">
<img alt="figure" src="figs/psa_ab01.gif"></div>
<h4 class="objtitle">Figure B-1. The LDAP entry data structure</h4>

<p>
<a name="INDEX-1103"></a>An
entry has a set of named component parts called
<em class="emphasis">attributes</em> that hold the data for that
entry<em class="emphasis">.</em> To use database terms, they are like the
fields in a database record. In <a href="ch06_01.htm">Chapter 6, "Directory Services"</a>
we'll use Perl to keep a list of machines in an LDAP directory.
Each machine entry will have attributes like name, model, location,
owner, etc.</p>




<p>Besides its name, an attribute consists of a
<em class="emphasis">type</em> and a set of <em class="emphasis">values</em>
that conform to that type. If you are storing employee information,
your entry might have a <tt class="literal">phone</tt> attribute that has a
type of <tt class="literal">telephoneNumber</tt>. The values of this
attribute might be that employee's phone numbers. A type also
has a <em class="emphasis">syntax</em> that dictates what kind of data can
be used (strings, numbers, etc.), how it is sorted, and how it is
used in a search (is it case-sensitive?).</p>




<p>Each entry has a special attribute called
<tt class="command">objectClass</tt>. <tt class="command">objectClass</tt>
contains multiple values that, when combined with server and user
settings, dictate which attributes must and may exist in that
particular entry.</p>




<p>
<a name="INDEX-1104"></a>Let's look a little closer at
the <tt class="command">objectClass</tt> attribute for a moment because it
illustrates some of the important qualities of LDAP and allows us to
pick off the rest of the jargon we haven't seen yet. If we
consider the <tt class="command">objectClass</tt> attribute, we notice the
following:</p>




<dl>
<dt>
<b><em class="emphasis">LDAP is object-oriented</em></b>
</dt>
<dd>
<p>Each of the values of an <tt class="command">objectClass</tt> attribute is
a name of an object class. These classes either define the set of
attributes that can or must be in an entry, or expand on the
definitions inherited from another class.</p>




<p>Here's an example: an <tt class="command">objectClass</tt> in an
entry may contain the string <tt class="literal">residentialPerson</tt>.
RFC2256, which has the daunting title of "A Summary of the
X.500(96) User Schema for use with LDAPv3," defines the
<tt class="literal">residentialPerson</tt> object class like this:</p>




<blockquote>
<pre class="programlisting">residentialPerson
   ( 2.5.6.10 NAME 'residentialPerson' SUP person STRUCTURAL MUST l
     MAY ( businessCategory $ x121Address $ registeredAddress $
     destinationIndicator $ preferredDeliveryMethod $ telexNumber $
     teletexTerminalIdentifier $ telephoneNumber $
     internationaliSDNNumber $
     facsimileTelephoneNumber $ preferredDeliveryMethod $ street $
     postOfficeBox $ postalCode $ postalAddress $
     physicalDeliveryOfficeName $ st $ l ) )</pre>
</blockquote>




<p>This definition says that an entry of object class
<tt class="literal">residentialPerson</tt> must have an
<tt class="literal">l</tt> attribute (short for locality) and may have a
whole other set of attributes (<tt class="literal">registeredAddress</tt>,
<tt class="literal">postOfficeBox</tt>, etc.). The key part of the
specification is the <tt class="literal">SUP person</tt> string. It says
that the superior class (the one that
<tt class="literal">residentialPerson</tt> inherits
<em class="emphasis">its</em> attributes from) is the
<tt class="literal">person</tt> object class. That definition looks like
this:</p>




<blockquote>
<pre class="programlisting">person 
   ( 2.5.6.6 NAME 'person' SUP top STRUCTURAL MUST ( sn $ cn )
     MAY ( userPassword $ telephoneNumber $ seeAlso $ description ) )</pre>
</blockquote>




<p>So an entry with object class <tt class="literal">residentialPerson</tt>
must have <tt class="literal">sn</tt> (surname), <tt class="literal">cn</tt>
(common name), and <tt class="literal">l</tt> (locality) attributes and may
have the other attributes listed in the <tt class="literal">MAY</tt>
sections of these two RFC excerpts. We also know that
<tt class="literal">person</tt> is the top of the object hierarchy for
<tt class="literal">residentialPerson</tt> since its superior class is the
special abstract class <tt class="literal">top</tt>.</p>




<p>In most cases, you can get away with using the pre-defined standard
object classes. If you need to construct entries with attributes not
found in an existing object class, it is usually good form to locate
the closest existing object class and build upon it, like
<tt class="literal">residentialPerson,</tt> builds upon
<tt class="literal">person</tt> above.</p>
</dd>




<dt>
<b>LDAP has its origins in the database world</b>
</dt>
<dd>
<p>A second quality we see in <tt class="command">objectClass</tt> is
LDAP's database roots. A collection of object classes that
specify attributes for the entries in an LDAP server is called a
<em class="emphasis">schema</em>. The RFC we quoted above is one example
of an LDAP schema specification. We won't be addressing the
considerable issues surrounding schema in this book. Like database
design, schema design can be a book topic in itself, but you should
at least be familiar with the term "schema" because it
will pop up later.</p>
</dd>




<dt>
<b>LDAP is not limited to storing information in strict tree structures</b>
</dt>
<dd>
<p>One final note about <tt class="command">objectClass</tt> to help us move
from our examination of a single entry to the larger picture: our
previous object class example specified <tt class="literal">top</tt> at the
top of the object hierarchy, but there's another
quasi-superclass worth mentioning: <tt class="literal">alias</tt>. If
<tt class="literal">alias</tt> is specified, then this entry is actually an
alias for another entry (specified by the
<tt class="literal">aliasedObjectName</tt> attribute in that entry). LDAP
strongly encourages hierarchical tree structures, but it
doesn't demand them. It's important to keep this
flexibility in mind when you code to avoid making incorrect
assumptions about the data hierarchy on a server.</p>
</dd>

</dl>




























<h2 class="sect1">B.1. LDAP Data Organization </h2>




<p>
<a name="INDEX-1105"></a>So far we've been focused on a single
entry, but there's very little call for a directory that
contains only one entry. When we expand our focus and consider a
directory populated with many entries, we are immediately faced with
the question that began this chapter: How do you find anything?</p>




<p>The stuff we've discussed so far all falls under what the LDAP
specification calls its "information model." This is the
part that sets the rules for how information is represented. But for
the answer to our question we need to look to LDAP's
"naming model," which dictates how information is
organized.</p>




<p>If you look at <a href="appb_01.htm">Figure B-1</a>, you can see we've
discussed all of the parts of an entry except for its name. Each
entry has a name, known as its <em class="emphasis">Distinguished
Name</em> (DN). The DN consists of a string of
<em class="emphasis">Relative Distinguished Name</em>s (RDNs). We'll
return to DNs in a moment, but first let's concentrate on the
RDN building blocks.<a name="INDEX-1106"></a><a name="INDEX-1107"></a><a name="INDEX-1108"></a><a name="INDEX-1109"></a>
</p>




<p>An RDN is composed of one or several attribute name-value pairs. For
example: <tt class="literal">cn=Jay</tt><tt class="literal">Sekora</tt> (where
<tt class="literal">cn</tt> stands for "common name") could be
an RDN. The attribute name is <tt class="literal">cn</tt> and the value is
<tt class="literal">Jay Sekora</tt>.</p>




<p>Neither the LDAP nor the X.500 specifications dictate which
attributes should be used to form an RDN. They do require RDNs to be
unique at each level in a directory hierarchy. This restriction
exists because LDAP has no inherent notion of "the third entry
in the fourth branch of a directory tree" so it must rely on
unique names at each level to distinguish between individual entries
at that level. Let's see how this restriction plays out in
practice.</p>




<p>Take, for instance, another example RDN: <tt class="literal">cn=Robert
Smith</tt>. This is probably not a good RDN choice, since there
is likely to be more than one Robert Smith in an organization of even
moderate size. If you have a large number of people in your
organization and your LDAP hierarchy is relatively flat, name
collisions like this are to be expected. A better entry would combine
two attributes, perhaps <tt class="literal">cn=Robert Smith</tt><tt class="literal">+</tt><tt class="literal">l=Boston</tt>. (Attributes in RDNs
are combined with a plus sign.)</p>




<p>Our revised RDN, which appends a locality attribute, still has
problems. We may have postponed a name clash, but we haven't
eliminated the possibility. Furthermore, if Smith moves to some other
facility, we'll have to change both the RDN for the entry
<em class="emphasis">and</em> the location attribute in the entry. Perhaps
the best RDN we could use would be one with a unique and immutable
user ID for this person. For example, we could use that
person's email address so the RDN would be
<tt class="literal">uid=rsmith</tt>. This example should give you a taste
of the decisions involved in the world of schemas.</p>




<p>Astute readers will notice that we're not really expanding our
focus; we're still puttering around with a single entry. The
RDN discussion was a prelude to this; here's the real jump:
entries live in a tree-like<a href="#FOOTNOTE-1">[1]</a> structure
known as a <em class="emphasis">Directory Information Tree</em> (DIT) or
just <em class="emphasis">directory tree</em>. The latter is probably the
preferred term to use, because in X.500 nomenclature DIT usually
refers to a single universal tree, similar to the global DNS
hierarchy or the Management Information Base (MIB) we'll be
seeing later when we discuss SNMP. <a name="INDEX-1110"></a><a name="INDEX-1111"></a><a name="INDEX-1112"></a>
</p>
<blockquote class="footnote">



<a name="FOOTNOTE-1"></a>
<p>[1]It is called
<em class="emphasis">tree-like</em> rather than just <em class="emphasis">tree
</em>because the <tt class="literal">alias</tt> object class we
mentioned earlier allows you create a directory structure that is not
strictly a tree (at least from a computer-science,
directed-acyclic-graph perspective).</p>



</blockquote>




<p>Let's bring DNs back into the picture. Each entry in a
directory tree can be located by its Distinguished Name. A DN is
composed of an entry's RDN followed by all of the RDNs
(separated by commas or semi-colons) found as you walk your way back
up the tree towards the root entry. If we follow the arrows in <a href="appb_01.htm">Figure B-2</a> and accumulate RDNs as we go, we'll
construct DNs for each highlighted entry.</p>




<a name="appb-26522"></a>
<div class="figure">
<img alt="figure" src="figs/psa_ab02.gif"></div>
<h4 class="objtitle">Figure B-2. Walking back up the tree to produce a DN</h4>

<p>In the first picture, our DN would be:</p>




<blockquote>
<pre class="programlisting">cn=Robert Smith, l=main campus, ou=CCS, o=Hogwarts School, c=US</pre>
</blockquote>




<p>In the second, it is:</p>




<blockquote>
<pre class="programlisting">uid=rsmith, ou=systems, ou=people, dc=ccs, dc=hogwarts, dc=edu</pre>
</blockquote>




<p>
<tt class="literal">ou</tt> is short for organizational unit,
<tt class="literal">o</tt> is short for organization, <tt class="literal">dc</tt>
stands for "domain component" &amp;#224; la DNS, and
<tt class="literal">c</tt> is for country (Sesame Street notwithstanding).</p>




<p>An analogy is often made between DNs and absolute pathnames in a
filesystem, but DNs are more like postal addresses because they have
a "most specific component first" ordering. In a postal
address like:</p>




<blockquote class="simplelist">

<p>Pat Hinds</p>

<p>288 St. Bucky Avenue</p>

<p>Anywhere, MA 02104</p>

<p>USA</p>

</blockquote>




<p>you start off with the most specific object (the person) and get more
vague from there, eventually winding up at the least specific
component (the country or planet). So too it goes with DNs. You can
see this ordering in our DN examples.</p>




<p>The very top of the directory tree is known as the directory's
<em class="emphasis">suffix</em>, since it is the end portion of every DN
in that directory tree. Suffixes are important when constructing a
hierarchical infrastructure using multiple delegated LDAP servers.
Using an LDAPv3 concept known as a <em class="emphasis">referral</em>, it
is possible to place an entry in the directory tree that essentially
says, "for all entries with this suffix, go ask that server
instead." Referrals are specified using an <em class="emphasis">LDAP
URL</em>, which look similar to your run-of-the-mill web URL
except they reference a particular DN or other LDAP-specific
information. Here's an example from RFC2255, the RFC that
specifies the LDAP URL format:</p>




<blockquote>
<pre class="programlisting">ldap://ldap.itd.umich.edu/o=University%20of%20Michigan,c=US?postalAddress <a name="INDEX-1113"></a>
<a name="INDEX-1114"></a>
<a name="INDEX-1115"></a>
</pre>
</blockquote>



























<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appa_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="appc_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">A.1. References for More Information</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">C. The Eight-Minute XML Tutorial</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
