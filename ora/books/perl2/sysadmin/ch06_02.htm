<html>
<head>
<title>Finger: A Simple Directory Service  (Perl for System Administration)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David N. Blank-Edelman">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1565926099L" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Finger: A Simple Directory Service">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Perl for System Administration"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch06_01.htm">Chapter 6: Directory Services</a></td><td align="right" valign="top" width="172"><a href="ch06_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">6.2. Finger: A Simple Directory Service</h2>





<p>
<a name="INDEX-525"></a><a name="INDEX-526"></a>Finger and
WHOIS are good examples of simple directory services. Finger exists
primarily to provide read-only information about the users of a
machine (although we'll see some more creative uses shortly).
Later versions of Finger, like the GNU Finger server and its
derivatives, expanded upon this basic functionality by allowing you
to query one machine and receive information back from all of the
machines on your network.</p>





<p>Finger was one of the first widely deployed directory services. Once
upon a time, if you wanted to locate a user's email address at
another site, or even within your own, the <tt class="command">finger</tt>
command was the best option. <tt class="command">finger
harry@hogwarts.edu</tt> would tell you whether Harry's
email address was <tt class="literal">harry</tt>,
<tt class="literal">hpotter</tt>, or something more obscure (along with
listing all of the other Harrys at that school). Though it is still
in use today, Finger's popularity has waned over time as web
home pages became prevalent and the practice of freely giving out
user information became problematic.</p>





<p>
<a name="INDEX-527"></a>Using the Finger protocol from Perl
provides another good example of TMTOWTDI. When I first looked on
CPAN for something to perform Finger operations, there were no
modules available for this task. If you look now, you'll find
Dennis Taylor's <tt class="literal">Net::Finger</tt> module, which he
published six months or so after my initial search. We'll see
how to use it in a moment, but in the meantime, let's pretend
it doesn't exist and take advantage of this opportunity to
learn how to use a more generic module to talk a specific protocol
when the "perfect" module doesn't exist.</p>





<p>The Finger protocol itself is a very simple TCP/IP-based text
protocol. Defined in RFC1288, it calls for a standard TCP connect to
port 79. The client passes a simple CRLF-terminated<a href="#FOOTNOTE-1">[1]</a> string over the connection. This string either requests
specific user information or, if empty, asks for information about
all users of that machine. The server responds with the requested
data and closes the connection at the end of the data stream. You can
see this in action by <tt class="command">telnet</tt> ing to the Finger
port directly on a remote machine:</p>
<blockquote class="footnote">




<a name="FOOTNOTE-1"></a>
<p>[1]Carriage return + linefeed, i.e., ASCII 13 + ASCII 10.</p>




</blockquote>





<blockquote>
<pre class="programlisting">$ <tt class="userinput"><b>telnet kantine.diku.dk 79</b></tt>
Trying 192.38.109.142 ...
Connected to kantine.diku.dk.
Escape character is '^]'.
<tt class="userinput"><b>cola&lt;CR&gt;&lt;LF&gt;</b></tt>
Login: cola                             Name: RHS Linux User
Directory: /home/cola                   Shell: /bin/noshell
Never logged in.
No mail.
Plan:

Current state of the coke machine at DIKU
This file is updated every 5 seconds
At the moment, it's necessary to use correct change. 
This has been the case the last 19 hours and 17 minutes

Column 1 is currently *empty*.
   It's been 14 hours and 59 minutes since it became empty.
   31 items were sold from this column before it became empty.
Column 2 contains some cokes.
   It's been 2 days, 17 hours, and 43 minutes since it was filled.
   Meanwhile, 30 items have been sold from this column.
Column 3 contains some cokes.
   It's been 2 days, 17 hours, and 41 minutes since it was filled.
   Meanwhile, 11 items have been sold from this column.
Column 4 contains some cokes.
   It's been 5 days, 15 hours, and 28 minutes since it was filled.
   Meanwhile, 26 items have been sold from this column.
Column 5 contains some cokes.
   It's been 5 days, 15 hours, and 29 minutes since it was filled.
   Meanwhile, 18 items have been sold from this column.
Column 6 contains some coke-lights.
   It's been 5 days, 15 hours, and 30 minutes since it was filled.
   Meanwhile, 16 items have been sold from this column.

Connection closed by foreign host.
$</pre>
</blockquote>





<p>In this example we've connected directly to <em class="emphasis">kantine.diku.dk</em>'s Finger port. We
typed the user name "cola," and the server returned
information about that user.</p>





<p>I chose this particular host and user just to show you some of the
whimsy that accompanied the early days of the Internet. Finger
servers got pressed into service for all sorts of tasks. In this
case, anyone anywhere on the planet can see whether the soda machine
at the Department of Computer Science at the University of Copenhagen
is currently stocked. For more examples of strange devices hooked to
Finger servers, you may wish to check out Bennet Yee's
"Internet Accessible Coke Machines" and "Internet
Accessible Machines" pages; they are available online at
<a href="../../../../../../../www.cs.ucsd.edu/~bsy/fun.html">http://www.cs.ucsd.edu/~bsy/fun.html</a>.</p>





<p>Let's take the network communication we just performed using a
<tt class="command">telnet</tt> binary back to the world of Perl. With
Perl, we can also open up a network socket and communicate over it.
Instead of using lower-level socket commands, we'll use Jay
Roger's <tt class="literal">Net::Telnet</tt> module to introduce a
family of modules that handle generic network discussions. Other
modules in this family (some of which we use in other chapters)
include Eric Arnold's <tt class="command">Comm.pl</tt>, Austin
Schutz's <tt class="command">Expect.pm,</tt> and the venerable but
outdated and nonportable <tt class="command">chat2.pl</tt> by Randal L.
Schwartz.<a name="INDEX-528"></a><a name="INDEX-529"></a>
</p>





<p>
<tt class="literal">Net::Telnet</tt> will handle all of the connection
setup work for us and provides a clean interface for sending and
receiving data over this connection. Though we won't use them
in this example, <tt class="literal">Net::Telnet</tt> also provides some
handy pattern-scanning mechanisms that allow your program to watch
for specific responses from the other
server.<a name="INDEX-530"></a>
</p>





<p>Here's a <tt class="literal">Net::Telnet</tt> version of a simple
Finger client. This code takes an argument of the form
<em class="emphasis">user@finger_server</em>. If the user name is omitted, a
list of all users considered active by the server will be returned.
If the hostname is omitted, we query the local host:</p>





<blockquote>
<pre class="programlisting">use Net::Telnet;

($username,$host) = split(/\@/,$ARGV[0]);
$host = $host ? $host : 'localhost';

# create a new connection
$cn = new Net::Telnet(Host =&gt; $host,
                      Port =&gt; 'finger');

# send the username down this connection
unless ($cn-&gt;print("$username")){ # could be "/W $username"
    $cn-&gt;close;              
    die "Unable to send finger string: ".$cn-&gt;errmg."\n";
}

# grab all of the data we receive, stopping when the 
# connection is dropped
while (defined $ret = $cn-&gt;get) {
    $data .= $ret;
}

# close the connection
$cn-&gt;close;                  

# display the data we collected
print $data;</pre>
</blockquote>





<p>RFC1288 specifies that a <tt class="literal">/W</tt> switch can be
prepended to the username sent to the server to request it to provide
"a higher level of verbosity in the user information
output," hence the <tt class="literal">/W</tt> comment above.</p>





<p>If you need to connect to another TCP-based text protocol besides
Finger, you'd use very similar code. For example, to connect to
a Daytime server (which shows the local time on a machine) the code
looks very similar:</p>





<blockquote>
<pre class="programlisting">use Net::Telnet;

$host = $ARGV[0] ? $ARGV[0] : 'localhost';

$cn = new Net::Telnet(Host =&gt; $host, 
                      Port =&gt; 'daytime');

while (defined $ret = $cn-&gt;get) {
    $data .= $ret;
}
$cn-&gt;close;                  

print $data;</pre>
</blockquote>





<p>Now you have a sense of how easy it is to create generic TCP-based
network clients. If someone has taken the time to write a module
specifically designed to handle a protocol, it can be even easier. In
the case of Finger, you can use Taylor's
<tt class="literal">Net::Finger</tt> to turn the whole task into a single
function call:<a name="INDEX-531"></a><a name="INDEX-532"></a>
</p>





<blockquote>
<pre class="programlisting">use Net::Finger;

# finger(  ) takes a user@host string and returns the data received
print finger($ARGV[0]);</pre>
</blockquote>





<p>Just to present all of the options, there's also the fallback
position of calling another executable (if it exists on the machine)
like so:</p>





<blockquote>
<pre class="programlisting">($username,$host) = split('@',$ARGV[0]);
$host = $host ? $host : 'localhost';

# location of finger executable, MacOS users can't use this method
$fingerex = ($^O eq "MSWin32") ? 
                 $ENV{'SYSTEMROOT'}."\\System32\\finger" :
                 "/usr/ucb/finger";  # (could also be /usr/bin/finger)

print `$fingerex ${username}\@${host}`</pre>
</blockquote>





<p>Now you've seen three different methods for performing Finger
requests. The third method is probably the least ideal because it
requires spawning another process.
<tt class="literal">Net::Finger</tt><a name="INDEX-533"></a> will handle simple
Finger requests; for everything else, <tt class="literal">Net::Telnet</tt>
or any of its kin should work well for you.<a name="INDEX-534"></a><a name="INDEX-535"></a>
</p>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch06_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">6.1. What's a Directory?</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">6.3. The WHOIS Directory Service</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
