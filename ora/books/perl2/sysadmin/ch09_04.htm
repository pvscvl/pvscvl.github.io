<html>
<head>
<title>Disk Space Problems  (Perl for System Administration)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David N. Blank-Edelman">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1565926099L" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Disk Space Problems">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Perl for System Administration"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch09_01.htm">Chapter 9: Log Files</a></td><td align="right" valign="top" width="172"><a href="ch09_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">9.4. Disk Space Problems</h2>





<p>
<a name="INDEX-917"></a><a name="INDEX-918"></a>The downside to having programs that can
provide useful or verbose logging output is the amount of disk space
this output can consume. This is a concern for all three operating
systems covered in this book: Unix, MacOS, and Windows NT/2000. Of
the three, NT/2000 is probably the least troublesome of the lot
because its central logging facility has built-in autotrimming
support. MacOS does not have a central logging facility, but it too
can run servers that will happily produce enough logging output to
fill your disks if given the chance.</p>





<p>Usually, the task of keeping the log files down to a reasonable size
is handed off to the system administrator. Most Unix vendors provide
some sort of automated log size management mechanism with the OS, but
it often only handles the select set of log files shipped with the
machine. As soon as you add another service to a machine that creates
a separate log file, it becomes necessary to tweak (or even toss) the
vendor-supplied solution.</p>





<a name="ch09-75821"></a>
<h3 class="sect2">9.4.1. Log Rotation</h3>





<p>
<a name="INDEX-919"></a><a name="INDEX-920"></a>The usual
solution to the space problem is to rotate your log files.
(We'll see an unusual solution later in this section.) After a
specific duration has passed or a file size has been reached, the
current log file is moved to another name, e.g.,
<em class="filename">logfile.0</em>. The logging process is then continued
into an empty file. At the next interval or limit, we repeat the
process, first moving the backup file (<em class="filename">logfile.0</em>
) to another name (like <em class="filename">logfile.1</em>). This process
is repeated until a set number backup files have been created. The
oldest backup file at that point is deleted. <a href="ch09_04.htm">Figure 9-3</a> shows a picture of this process.</p>





<a name="ch09-61977"></a>
<div class="figure">
<img alt="figure" src="figs/psa_0903.gif"></div>
<h4 class="objtitle">Figure 9.3. A pictorial representation of log rotation</h4>

<p>This method allows us to keep a reasonable, finite amount of log data
around. <a href="ch09_04.htm">Table 9-2</a> provides one recipe for log
rotation and the Perl functions needed to perform each step.</p>





<a name="ch09-89639"></a>
<h4 class="objtitle">Table 9.2. A Recipe for Log Rotation in Perl</h4>
<table border="1">



<tr>
<th>
<p>Process</p>
</th>
<th>
<p>Perl</p>
</th>
</tr>










<tr>
<td>
<p>Move the older backup logs out of the way (i.e., move each one to a
new name in the sequence).</p>
</td>
<td>
<p>
<tt class="literal">rename( )</tt> or <tt class="literal">&amp;File::Copy::move(
)</tt> if moving files cross-filesystem.</p>
</td>
</tr>




<tr>
<td>
<p>If necessary, signal the process creating this particular log file to
close the current file and cease logging to disk until told
otherwise.</p>
</td>
<td>
<p>
<tt class="literal">kill( )</tt> for programs that take signals,
<tt class="literal">system( )</tt> or <tt class="literal">``</tt>
(backticks) if another administrative program has to be called for
this purpose.</p>
</td>
</tr>




<tr>
<td>
<p>Copy or move the log file that was just in use to another file.</p>
</td>
<td>
<p>
<tt class="literal">&amp;File::Copy </tt>to copy, <tt class="literal">rename(
)</tt> to rename (or <tt class="literal">&amp;File::Copy::move(
)</tt> if moving files cross-filesystem).</p>
</td>
</tr>




<tr>
<td>
<p>If necessary, truncate the current log file.</p>
</td>
<td>
<p>
<tt class="literal">truncate( )</tt> or
<tt class="literal">open(</tt><tt class="literal">FILE,</tt>"<em class="replaceable">&gt;filename</em>"<tt class="literal">).</tt>
</p>
</td>
</tr>




<tr>
<td>
<p>If necessary, signal the logging process to resume logging.</p>
</td>
<td>
<p>See step 2 of this table.</p>
</td>
</tr>




<tr>
<td>
<p>If desired, compress or post-process the copied file.</p>
</td>
<td>
<p>
<tt class="literal">system( )</tt> or backticks to run a compression
program or other code for post-processing.</p>
</td>
</tr>




<tr>
<td>
<p>Delete other, older log file copies.</p>
</td>
<td>
<p>
<tt class="literal">stat( )</tt> to examine file sizes and dates,
<tt class="literal">unlink( )</tt> to delete files.</p>
</td>
</tr>





</table>





<p>There are many variations on this theme. Everyone and their
aunt's vendor have written their own script to do log rotation.
It should come as no surprise that there is a Perl module to handle
log rotation. Let's take a quick look at
<tt class="literal">Logfile::Rotate</tt> by Paul Gampe.<a name="INDEX-921"></a><a name="INDEX-922"></a>
</p>





<p>
<tt class="literal">Logfile::Rotate</tt> uses the object-oriented
programming convention of first creating a new log file object
instance and then running a method of that instance. First, we create
a new instance with the parameters found in <a href="ch09_04.htm">Table 9-3</a>.</p>





<a name="ch09-93666"></a>
<h4 class="objtitle">Table 9.3. Logfile::Rotate Parameters</h4>
<table border="1">



<tr>
<th>
<p>Parameter</p>
</th>
<th>
<p>Purpose</p>
</th>
</tr>










<tr>
<td>
<p>
<tt class="literal">File</tt>
</p>
</td>
<td>
<p>Name of log file to rotate</p>
</td>
</tr>




<tr>
<td>
<p>
<tt class="literal">Count</tt> (optional, default: 7)</p>
</td>
<td>
<p>Number of backup files to keep around</p>
</td>
</tr>




<tr>
<td>
<p>
<tt class="literal">Gzip</tt> (optional, default: Perl's default as
found during the Perl build)</p>
</td>
<td>
<p>Full path to <em class="emphasis">gzip</em> compression program executable</p>
</td>
</tr>




<tr>
<td>
<p>
<tt class="literal">Signal</tt>
</p>
</td>
<td>
<p>Code to be executed after the rotation has been completed, as in step
5 of <a href="ch09_04.htm">Table 9-2</a>
</p>
</td>
</tr>





</table>





<p>Here's some example code that uses these parameters:</p>





<blockquote>
<pre class="programlisting">use Logfile::Rotate;
$logfile = new Logfile::Rotate(
                File   =&gt; "/var/adm/log/syslog",
                Count  =&gt; 5,
                Gzip   =&gt; "/usr/local/bin/gzip",
                Signal =&gt; 
                   sub {
                        open PID, "/etc/syslog.pid" or
                           die "Unable to open pid file:$!\n";
                        chomp($pid = &lt;PID&gt;);
                        close PID;
                        # should check validity first
                        kill 'HUP', $pid; 
                        }
            );</pre>
</blockquote>





<p>This locks the log file you've specified and prepares the
module for rotating it. Once you've created this object,
actually rotating the log is trivial:</p>





<blockquote>
<pre class="programlisting">$logfile-&gt;rotate(  );
undef $logfile;</pre>
</blockquote>





<p>The <tt class="literal">undef</tt> line is there to be sure that the log
file is unlocked after rotation (it stays locked while the logfile
object is still in existence).</p>





<p>As mentioned in the documentation, if this module is run by a
privileged user (like <em class="emphasis">root</em>) there are a few concerns.
First, <tt class="literal">Logfile::Rotate</tt> makes a system call to run
the <tt class="command">gzip</tt> program, potentially a security hole.
Second, the <tt class="literal">Signal</tt> subroutine must be coded in a
defensive manner. In the previous example, we don't check to
see that the process ID retrieved from
<em class="filename">/etc/syslog.pid</em> is actually the correct PID for
<tt class="command">syslog</tt>. It would be better to use one of the
process table listing strategies we discussed in <a href="ch04_01.htm">Chapter 4, "User Activity"</a>, before sending the signal via <tt class="literal">kill(
)</tt>. See <a href="ch01_01.htm">Chapter 1, "Introduction"</a>, for more tips on
coding defensively.<a name="INDEX-923"></a><a name="INDEX-924"></a><a name="INDEX-925"></a><a name="INDEX-926"></a>
</p>

















<a name="ch09-4-fm2xml"></a>
<h3 class="sect2">9.4.2. Circular Buffering</h3>





<p>We've just discussed the traditional log rotation method for
dealing with storage of ever-growing logs. Let me show you a more
unusual approach that you can add to your toolkit.</p>





<p>Here's a common scenario: you're trying to debug a server
daemon that provides a torrent of log output. You're only
interested in a small part of the total output, perhaps just the
lines the server produces after you run some sort of test with a
special client. Saving all of the log output to disk as per usual
would fill your disk quickly. Rotating the logs as often as needed
with this volume of output would slow down the server. What do you
do?</p>





<p>
<a name="INDEX-927"></a><a name="INDEX-928"></a>I wrote a program called
<tt class="command">bigbuffy</tt> to deal with this conundrum. The approach
is pretty straightforward. <tt class="command">bigbuffy</tt> reads from its
usual "standard" or "console" input one line
at a time. These lines are stored in a circular buffer of a set size.
When the buffer is full, it starts filling from the top again. This
read-store process continues forever until
<tt class="command">bigbuffy</tt> receives a signal from the user. Upon
receiving this signal, it dumps the current contents of the buffer to
a file and returns to its normal cycle. What's left behind on
disk is essentially a window into the log stream, showing just the
data you need.</p>





<p>
<tt class="command">bigbuffy</tt> can be paired with a service-monitoring
program like those found in <a href="ch05_01.htm">Chapter 5, "TCP/IP Name Services"</a>. As soon as
the monitor detects a problem, it can signal
<tt class="command">bigbuffy</tt> to dump its log buffer. Now you've
got a snapshot of the log localized to the failure instance (assuming
your buffer is large enough and your monitor noticed the problem in
time).</p>





<p>Here's a simplified version of <tt class="command">bigbuffy</tt>. The
code is longer than the examples we've seen so far in this
chapter, but it is not very complex. We'll use it in a moment
as a springboard for addressing some important issues like input
blocking and security:</p>





<blockquote>
<pre class="programlisting">$buffsize = 200; # default circular buffer size (in lines)

use Getopt::Long;

# parse the options
GetOptions("buffsize=i" =&gt; \$buffsize,
           "dumpfile=s" =&gt; \$dumpfile);

# set up the signal handler and initialize a counter
&amp;setup;

# and away we go! (with just a simple 
# read line--store line loop)
while (&lt;&gt;){
    # insert line into data structure 
    # note, we do this first, even if we've caught a signal. 
    # Better to dump an extra line than lose a line of data if 
    # something goes wrong in the dumping process

    $buffer[$whatline] = $_;

    # where should the next line go? 
	($what_line %= $buff_size)++;

    # if we receive a signal, dump the current buffer
    if ($dumpnow) {
	   &amp;dodump(  );
    }
}

sub setup {
    die "USAGE: $0 [--buffsize=&lt;lines&gt;] --dumpfile=&lt;filename&gt;"
      unless (length($dumpfile));

    $SIG{'USR1'} = \&amp;dumpnow; # set a signal handler for dump

    $whatline = 1; # start line in circular buffer
}

# simple signal handler that just sets an exception flag, 
# see perlipc(1)
sub dumpnow {
    $dumpnow = 1;
}

# dump the circular buffer out to a file, appending to file if
# it exists
sub dodump{
    my($line);     # counter for line dump
    my($exists);   # flag, does the output file exist already?
    my(@firststat,@secondstat); # to hold output of lstats

    $dumpnow = 0;  # reset the flag and signal handler
    $SIG{'USR1'} = \&amp;dumpnow;

    if (-e $dumpfile and (! -f $dumpfile or -l $dumpfile)) {
       warn "ALERT: dumpfile exists and is not a plain file, 
             skipping dump.\n";
       return undef;
    }

    # we have to take special precautions when we're doing an 
    # append. The next set of "if" statements perform a set of 
    # security checks while opening the file for append
    if (-e $dumpfile) {
	    $exists = 1;
	    unless(@firststat = lstat $dumpfile){
	        warn "Unable to lstat $dumpfile, 
                  skipping dump.\n";
	        return undef;
	    }
	    if ($firststat[3] != 1) {
	        warn "$dumpfile is a hard link, skipping dump.\n";
	        return undef;
	    }
    }

    unless (open(DUMPFILE,"&gt;&gt;$dumpfile")){
	    warn "Unable to open $dumpfile for append, 
             skipping dump.\n";
	    return undef;
    }
    if ($exists) {
	    unless (@secondstat = lstat DUMPFILE){
	        warn "Unable to lstat opened $dumpfile, 
                  skipping dump.\n";
	        return undef;
	    }

	    if ($firststat[0] != $secondstat[0] or # check dev num
	        $firststat[1] != $secondstat[1] or # check inode
	        $firststat[7] != $secondstat[7])   # check sizes
	     {
	       warn "SECURITY PROBLEM: lstats don't match, 
                skipping dump.\n";
	       return undef;
	     }
    }

    $line = $whatline;
    print DUMPFILE "-".scalar(localtime).("-"x50)."\n";
    do {
        # in case buffer was not full
	    last unless (defined $buffer[$line]);
	    print DUMPFILE $buffer[$line];
	    $line = ($line == $buffsize) ? 1 : $line+1;
    } while ($line != $whatline);

    close(DUMPFILE);

    # zorch the active buffer to avoid leftovers 
    # in future dumps
    $whatline = 1;
    $buffer = (  );
    
    return 1;
}</pre>
</blockquote>





<p>A program like this can stir up a few interesting implementation
issues.</p>





<a name="ch09-5-fm2xml"></a>
<h3 class="sect3">9.4.2.1. Input blocking in log processing programs</h3>





<p>I mentioned earlier that this is a simplified version of
<tt class="command">bigbuffy</tt>. For ease of implementation, especially
cross-platform, this version has an unsavory characteristic: while
dumping data to disk, it can't continue reading input. During a
buffer dump, the program sending output to
<tt class="command">bigbuffy</tt> may be told by the OS to pause operation
pending the drain of its output buffer. Luckily, the dump is fast, so
the window where this could happen is very small, but this is still
less passive than we'd like.</p>





<p>Two possible solutions to this problem include:</p>





<ul>
<li>
<p>Rewriting <tt class="command">bigbuffy</tt> to use a double-buffered,
multitasking approach. Instead of using a single storage buffer, two
would be employed. Upon receiving the signal, the program would begin
to log to a second buffer while a child process or another thread
handled the dumping of the first buffer. At the next signal, buffers
are swapped again.</p>
</li>
<li>
<p>Rewriting <em class="emphasis">bigbuffy</em> to interleave reading and
writing while it is dumping. The simplest version of this approach
would involve writing some number of lines to the output file each
time a new line is read. This gets a bit tricky if the log output
being read is "bursty" instead of arriving as constant
flow. You wouldn't want to wait for a new line of output before
you could receive the requested log buffer dump. You'd have to
use some sort of timeout or internal clock mechanism to get around
this problem.</p>
</li>
</ul>
<p>Both approaches are hard to pull off portably in a cross-platform
environment, hence the simplified version shown in this book.</p>










<a name="ch09-6-fm2xml"></a>
<h3 class="sect3">9.4.2.2. Security in log processing programs</h3>





<p>
<a name="INDEX-929"></a><a name="INDEX-930"></a>You may have noticed that
<tt class="command">bigbuffy</tt> troubles itself more than usual with the
opening and writing of its output file. This is an example of the
defensive coding style mentioned earlier in <a href="ch09_04.htm">Section 9.4.1, "Log Rotation"</a>. If this program is to be used to debug
server daemons, it is likely to be run by privileged users on a
system. It is important to think about unpleasant situations that
might allow this program to be abused.</p>





<p>For example, take the case where the output file we've
specified is maliciously swapped with a link to another file. If we
naively opened and wrote to the file, we might find ourselves
inadvertently stomping on an important file like
<em class="filename">/etc/passwd</em> instead. Even if we checked the
output file before opening it, a nasty person may have switched it on
us before we began to write to it. To avoid this scenario:<a name="INDEX-931"></a>
</p>





<ul>
<li>
<p>We check if the output file exists already. If it does, we
<tt class="literal">lstat( )</tt> it to get filesystem information.</p>
</li>
<li>
<p>We open the file in append mode.</p>
</li>
<li>
<p>Before we actually write to this file, we <tt class="literal">lstat(
)</tt> the open filehandle and check that it is still the same
file we expect it to be and it hasn't been switched since we
initially checked it. If it is not the same file (e.g., someone
swapped the file with a link right before the
<tt class="literal">open</tt>), we do <em class="emphasis">not</em> write to the
file and complain loudly. This last step avoids a race condition as
mentioned in <a href="ch01_01.htm">Chapter 1, "Introduction"</a>.</p>
</li>
</ul>
<p>If we didn't have to append, we could have opened a temporary
file with a randomized name (so it couldn't be guessed ahead of
time) and renamed the temporary file into place.</p>





<p>These sorts of gyrations are necessary on most Unix systems because
Unix was not originally designed with security as a high priority.
Symbolic-link security breaches are not a problem under NT4 since
they are a little-used part of the POSIX subsystem, and MacOS, which
doesn't have the notion of "privileged
user."<a href="#FOOTNOTE-3">[3]</a><a name="INDEX-932"></a><a name="INDEX-933"></a><a name="INDEX-934"></a><a name="INDEX-935"></a>
</p>
<blockquote class="footnote">




<a name="FOOTNOTE-3"></a>
<p>[3]In fairness, both NT and MacOS have
their own unique security weaknesses. Also, there is considerable
time and effort these days being spent to "harden"
various Unix distributions (e.g., OpenBSD).</p>




</blockquote>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch09_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">9.3. Stateful and Stateless Data</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">9.5. Log Analysis</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
