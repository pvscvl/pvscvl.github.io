<html>
<head>
<title>XML Is Picky  (Perl for System Administration)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David N. Blank-Edelman">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1565926099L" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="XML Is Picky">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Perl for System Administration"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appc_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="appc_01.htm">Appendix C: The Eight-Minute XML Tutorial</a></td><td align="right" valign="top" width="172"><a href="appc_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">C.2. XML Is Picky</h2>




<p>Despite XML's flexibility, it is pickier in places than HTML.
There are syntax and grammar rules that your data must follow. These
rules are set down rather tersely in the XML specification found at
<a href="../../../../../../../www.w3.org/TR/1998/REC-xml-19980210">http://www.w3.org/TR/1998/REC-xml-19980210</a>. Rather than poring through
the official spec, I recommend you seek out one of the annotated
versions, like Tim Bray's version at <a href="../../../../../../../www.xml.com/">http://www.xml.com</a>, or Robert
Ducharme's book <em class="citetitle">XML: The Annotated
Specification</em> (Prentice Hall). The former is online and
free; the latter has many good examples of actual XML code.</p>




<p>Here are two of the XML rules that tend to trip up people who know
HTML:</p>




<ol>
<li>
<p>If you begin something, you must end it. In the above example we
started a machine listing with <tt class="literal">&lt;machine&gt;</tt> and
finished it with <tt class="literal">&lt;/machine&gt;</tt>. Leaving off the
ending tag would not have been acceptable XML.</p>




<p>In HTML, tags like <tt class="literal">&lt;img src="picture.jpg" &gt;</tt>
are legally allowed to stand by themselves. Not so in XML; this would
have to be written either as:</p>
</li>
</ol>
<blockquote>
<pre class="programlisting">&lt;img src="picture.jpg" &gt; &lt;/img&gt;</pre>
</blockquote>




<p> or:</p>




<blockquote>
<pre class="programlisting">&lt;img src="picture.jpg" /&gt;</pre>
</blockquote>




<p>The extra slash at the end of this last tag lets the XML parser know
that this single tag serves as both its own start and end tag. Data
and its surrounding start and end tags is called an
<em class="emphasis">element</em>.</p>




<ol>
<li>
<p>Start tags and end tags must mirror themselves exactly. Mixing case
in not allowed. If your start tag is
<tt class="literal">&lt;MaChINe&gt;</tt>, your end tag must be
<tt class="literal">&lt;/MaChINe&gt;</tt>, and cannot be
<tt class="literal">&lt;/MACHine&gt;</tt> or any other case combination.
HTML is much more forgiving in this regard.</p>
</li>
</ol>
<p>These are two of the general rules in the XML specification. But
sometimes you want to define your own rules for an XML parser to
enforce. By "enforce" we mean "complain
vociferously" or "stop parsing" while reading the
XML data. If we use our previous machine database XML snippet as an
example, one additional rule we might to enforce is "all
<tt class="literal">&lt;machine&gt;</tt> entries must contain a
<tt class="literal">&lt;name&gt;</tt> and an
<tt class="literal">&lt;ipaddress&gt;</tt> element." You may also
wish to restrict the contents of an element to a set of specific
values like "YES" or "NO."</p>




<p>How these rules get defined is less straightforward than the other
material we'll cover because there are several complimentary
and competitive proposals for a definition "language"
afloat at the moment. XML will eventually be self-defining (i.e., the
document itself or something linked into the document describes its
structure).</p>




<p>The current XML specification uses a DTD (Document Type Definition),
the SGML standby. Here's an example piece of XML code from the
XML specification that has its definition code at the beginning of
the document itself:<a name="INDEX-1117"></a><a name="INDEX-1118"></a>
</p>




<blockquote>
<pre class="programlisting">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE greeting [
  &lt;!ELEMENT greeting (#PCDATA)&gt;
]&gt;
&lt;greeting&gt;Hello, world!&lt;/greeting&gt;</pre>
</blockquote>




<p>The first line of this example specifies the version of XML in use
and the character encoding (Unicode) for the document. The next three
lines define the types of data in this document. This is followed by
the actual document content (the <tt class="literal">&lt;greeting&gt;</tt>
element) in the final line of the example.</p>




<p>If we wanted to define how the <tt class="literal">&lt;machine&gt;</tt> XML
code at the beginning of this appendix should be validated, we could
place something like this at the beginning of the file:</p>




<blockquote>
<pre class="programlisting">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE machines [
  &lt;!ELEMENT machine (name,department,room,owner,ipaddress)&gt;
  &lt;!ELEMENT name       (#PCDATA)&gt;
  &lt;!ELEMENT department (#PCDATA)&gt;
  &lt;!ELEMENT room       (#PCDATA)&gt;
  &lt;!ELEMENT owner      (#PCDATA)&gt;
  &lt;!ELEMENT ipaddress  (#PCDATA)&gt;
]&gt;</pre>
</blockquote>




<p>This definition requires that a machine element consist of
<tt class="literal">name</tt>, <tt class="literal">department</tt>,
<tt class="literal">room</tt>, <tt class="literal">owner</tt>, and
<tt class="literal">ipaddress</tt> elements (in this specific order). Each
of those elements is described as being <tt class="literal">PCDATA</tt>
(see the <a href="appc_04.htm">Section C.4, "Leftovers"</a> section at the
end of this appendix).</p>




<p>Another popular set of proposals that are not yet specifications
recommend using data descriptions called <em class="emphasis">schemas</em>
for DTD-like purposes. Schemas are themselves written in XML code.
Here's an example of schema code that uses the Microsoft
implementation of the XML-data proposal found at <a href="../../../../../../../www.w3.org/TR/1998/NOTE-XML-data/">http://www.w3.org/TR/1998/NOTE-XML-data/</a>:</p>




<blockquote>
<pre class="programlisting">&lt;?XML version='1.0' ?&gt;
&lt;schema id='MachineSchema' 
        xmlns="urn:schemas-microsoft-com:xml-data"
        xmlns:dt="urn:schemas-microsoft-com:datatypes"&gt;

&lt;!-- define our element types (they are all just strings/PCDATA) --&gt;
    &lt;elementType id="name"&gt;
        &lt;string/&gt;
    &lt;/elementType&gt;
    &lt;elementType id="department"&gt;
        &lt;string/&gt;
    &lt;/elementType&gt;
    &lt;elementType id="room"&gt;
      &lt;string/&gt;
    &lt;/elementType&gt;
    &lt;elementType id="owner"&gt;
        &lt;string/&gt;
    &lt;/elementType&gt;
    &lt;elementType id="ipaddress"&gt;
        &lt;string/&gt;
    &lt;/elementType&gt;

    &lt;!-- now define our actual machine element --&gt;
    &lt;elementType id="Machine" content="CLOSED"&gt;
       &lt;element type="#name"       occurs="REQUIRED"/&gt;
       &lt;element type="#department" occurs="REQUIRED"/&gt;
       &lt;element type="#room"       occurs="REQUIRED"/&gt;
       &lt;element type="#owner"      occurs="REQUIRED"/&gt;
       &lt;element type="#ipaddress"  occurs="REQUIRED"/&gt;
    &lt;/elementType&gt;
&lt;/schema&gt;</pre>
</blockquote>




<p>XML schema technology is (as of this writing) still very much in the
discussion phase in the standards process. XML-data, which we used in
the above example, is just one of the proposals in front of the
Working Group studying this issue. Because the technology moves fast,
I recommend paying careful attention to the most current standards
(found at <a href="../../../../../../../www.w3.org/">http://www.w3.org</a>) and
your software's level of compliance with them.</p>




<p>Both the mature DTD and fledgling schema mechanisms can get
complicated quickly, so we're going to leave further discussion
of them to the books that are dedicated to XML/SGML.</p>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appc_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="appc_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">C.1. XML Is a Markup Language</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">C.3. Two Key XML Terms</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
