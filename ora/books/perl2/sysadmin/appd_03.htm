<html>
<head>
<title>Querying Information  (Perl for System Administration)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David N. Blank-Edelman">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1565926099L" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Querying Information">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Perl for System Administration"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appd_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="appd_01.htm">Appendix D: The Fifteen-Minute SQL Tutorial</a></td><td align="right" valign="top" width="172"><a href="appd_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">D.3. Querying Information</h2>




<p>
<a name="INDEX-1133"></a><a name="INDEX-1134"></a>As an administrator, the SQL
command you'll probably use the most often is
<tt class="literal">SELECT</tt>. <tt class="literal">SELECT</tt> is used to query
information from a server. Before we talk about this command, a quick
disclaimer: <tt class="literal">SELECT</tt> is a gateway
into a whole wing of the SQL language. We're only going to
demonstrate some of its simpler forms. There is an art to
constructing good queries (and designing databases so they can be
queried well), but more in-depth coverage like this is best found in
books entirely devoted to SQL and
databases.<a name="INDEX-1135"></a>
</p>




<p>The simplest <tt class="literal">SELECT</tt> form is used mostly for
retrieving server and connection-specific information. With this
form, you do not specify a data source. Here are two examples:</p>




<blockquote>
<pre class="programlisting">-- both of these are database vendor specific
SELECT @@SERVERNAME

SELECT VERSION(  );</pre>
</blockquote>




<p>The first statement returns the name of the server from a Sybase or
MS-SQL server; the second returns the current version number of a
MySQL server.</p>




<a name="appd-4-fm2xml"></a>
<h3 class="sect2">D.3.1. Retrieving All of the Rows in a Table</h3>




<p>
<a name="INDEX-1136"></a>To get at all of the data in our
hosts table, use this SQL code:</p>




<blockquote>
<pre class="programlisting">USE sysadm
SELECT * FROM hosts</pre>
</blockquote>




<p>This returns all of the rows and columns in the same column order as
our table was created:</p>




<blockquote>
<pre class="programlisting">name      ipaddr        aliases                     owner             dept     
bldg   room manuf      model      
--------- ------------ ---------------------------- ----------------- --------
------ ---- ---------- --------- 
shimmer   192.168.1.11  shim shimmy shimmydoodles   David Davis
Software   
Main  309  Sun        Ultra60    
bendir    192.168.1.3   ben bendoodles              Cindy Coltrane IT        
West  143  Apple      7500/100   
sander    192.168.1.55  sandy micky mickydoo        Alex Rollins IT        
Main  1101 Intergraph TD-325     
sulawesi  192.168.1.12  sula su-lee                 Ellen Monk
Design   
 Main  1116 Apple      G3</pre>
</blockquote>




<p>If we want to see specific columns, we just need to specify them by
name:</p>




<blockquote>
<pre class="programlisting">USE sysadm
SELECT name,ipaddr FROM hosts</pre>
</blockquote>




<p>When we specify the columns by name they are returned in the order we
specify them, independent of the order used when creating the table.
For instance, to see IP addresses per building:</p>




<blockquote>
<pre class="programlisting">USE sysadm
SELECT bldg,ipaddr FROM hosts</pre>
</blockquote>




<p>This returns:</p>




<blockquote>
<pre class="programlisting">bldg       ipaddr          
---------- --------------- 
Main       192.168.1.11    
West       192.168.1.3     
Main       192.168.1.55    
Main       192.168.1.12</pre>
</blockquote>













<a name="appd-5-fm2xml"></a>
<h3 class="sect2">D.3.2. Retrieving a Subset of the Rows in a Table</h3>




<p>
<a name="INDEX-1137"></a>Databases wouldn't be very
interesting if you couldn't retrieve a subset of your data. In
SQL, we use the <tt class="literal">SELECT</tt> command and add a
<tt class="literal">WHERE</tt> clause containing a conditional:</p>




<blockquote>
<pre class="programlisting">USE sysadm
SELECT * FROM hosts WHERE bldg="Main"</pre>
</blockquote>




<p>This shows:</p>




<blockquote>
<pre class="programlisting">name      ipaddr        aliases                     owner             dept     bldg   room manuf      model      
--------- ------------ ---------------------------- ----------------- -------- ------ ---- ---------- --------- 
shimmer   192.168.1.11  shim shimmy shimmydoodles   David Davis       Software  Main  309  Sun        Ultra60    
sander    192.168.1.55  sandy micky mickydoo        Alex Rollins      IT        Main  1101 Intergraph TD-325     
sulawesi  192.168.1.12  sula su-lee                 Ellen Monk        Design    Main  1116 Apple      G3</pre>
</blockquote>




<p>
<a name="INDEX-1138"></a>The set
of available conditional operators for <tt class="literal">WHERE</tt>
clauses are the standard programming fare:</p>




<blockquote>
<pre class="programlisting">=      &gt;      &gt;=      &lt;      &lt;=      &lt;&gt;</pre>
</blockquote>




<p>Unlike Perl, SQL does not have separate string and numeric comparison
operators.</p>




<p>Conditional operators can be combined with <tt class="literal">AND/OR</tt>
and negated with <tt class="literal">NOT</tt>. We can test for an empty
column using <tt class="literal">IS NULL </tt>or non-empty with
<tt class="literal">IS NOT NULL</tt>. For instance, this SQL code will
show all of the machines without owners listed in our table:</p>




<blockquote>
<pre class="programlisting">USE sysadm
SELECT name FROM hosts WHERE owner IS NULL</pre>
</blockquote>




<p>If you want to find all of the rows that have a column whose contents
is one of several specified values, you can use the
<tt class="literal">IN</tt> operator to specify a list:</p>




<blockquote>
<pre class="programlisting">USE sysadm
SELECT name FROM hosts WHERE dept IN ('IT', 'Software')</pre>
</blockquote>




<p>This shows all of the machines in use in either the IT or software
departments. SQL will also allow you to return rows that match a
certain range of values (most useful with numeric or date values)
with the <tt class="literal">BETWEEN</tt> operator. Here's an example
that shows all of the machines in the main building on the tenth
floor:</p>




<blockquote>
<pre class="programlisting">USE sysadm
SELECT name FROM hosts 
  WHERE (bldg = 'Main') AND 
        (room BETWEEN '1000' AND '1999')</pre>
</blockquote>




<p>Finally, the <tt class="literal">WHERE</tt> clause can be used with
<tt class="literal">LIKE</tt> to choose rows using weak pattern matching
(in comparison to Perl's regular expressions). For instance,
this will select all of the machines that have the string
"doodles" somewhere in their aliases:</p>




<blockquote>
<pre class="programlisting">USE sysadm
SELECT name FROM hosts WHERE aliases LIKE '%doodles%'</pre>
</blockquote>




<p>
<a href="appd_03.htm">Table D-2</a> lists the supported
<tt class="literal">LIKE</tt> wildcards.<a name="INDEX-1139"></a>
</p>





<a name="appd-19597"></a>
<h4 class="objtitle">Table D-2. LIKE Wildcards</h4>
<table border="1">




<tr>
<th>
<p>Wildcard</p>
</th>
<th>
<p>Meaning</p>
</th>
<th>
<p>Closest Perl Regexp Equivalent</p>
</th>
</tr>








<tr>
<td>
<p>%</p>
</td>
<td>
<p>Zero or more characters</p>
</td>
<td>
<p>.*</p>
</td>
</tr>



<tr>
<td>
<p>_</p>
</td>
<td>
<p>A single character</p>
</td>
<td>
<p>.</p>
</td>
</tr>



<tr>
<td>
<p>[  ]</p>
</td>
<td>
<p>A single character that is one of a specified set or range</p>
</td>
<td>
<p>[  ]</p>
</td>
</tr>




</table>




<p>Some database servers have added extensions to SQL to allow for
regular expression use in <tt class="literal">SELECT</tt>s. For instance,
MySQL offers the <tt class="literal">REGEXP</tt> operator for use with
<tt class="literal">SELECT</tt>. <tt class="literal">REGEXP</tt> doesn't
have all the power of Perl's regular expression engine, but it
offers a substantial increase in flexibility over the standard SQL
wildcards.</p>













<a name="appd-6-fm2xml"></a>
<h3 class="sect2">D.3.3. Simple Manipulation of Data Returned by Queries</h3>




<p>
<a name="INDEX-1140"></a><a name="INDEX-1141"></a><a name="INDEX-1142"></a>Two useful clauses for a
<tt class="literal">SELECT</tt> statement are <tt class="literal">DISTINCT</tt>
and <tt class="literal">ORDER BY</tt>. The first allows us to eliminate
duplicate records returned by a query. If we want a list of all of
the distinct manufacturers represented in our hosts table, we could
use <tt class="literal">DISTINCT</tt>:</p>




<blockquote>
<pre class="programlisting">USE sysadm
SELECT DISTINCT manuf FROM hosts</pre>
</blockquote>




<p>If we want to see our data returned in a sorted order, we can use
<tt class="literal">ORDER BY</tt>:</p>




<blockquote>
<pre class="programlisting">USE sysadm
SELECT name,ipaddr,dept,owner FROM hosts ORDER BY dept</pre>
</blockquote>




<p>SQL has several operators that can be used to modify the output
returned by a query. They allow you to change column names, do
summary and intra/intercolumn calculations, reformat how fields are
displayed, perform subqueries, and a whole host of other things.
Please see an SQL book for more detail on
<tt class="literal">SELECT</tt>'s many clause operators.</p>













<a name="appd-7-fm2xml"></a>
<h3 class="sect2">D.3.4. Adding the Query Results to Another Table</h3>




<p>
<a name="INDEX-1143"></a>A new table containing the results of a
query can be created on the fly by using an <tt class="literal">INTO</tt>
clause on some SQL servers:</p>




<blockquote>
<pre class="programlisting">USE sysadm
SELECT name,ipaddr INTO itmachines FROM hosts WHERE dept = 'IT'</pre>
</blockquote>




<p>This statement works just like those we've seen previously,
except the results of the query are added to another table called
<em class="filename">itmachines</em>. With some servers, this table is
created on the fly if it does not exist. You can think of this
operator clause as the equivalent of the "&gt;" operator
in most Unix and NT command-line shells. <a name="INDEX-1144"></a><a name="INDEX-1145"></a>
</p>




<a name="appd-8-fm2xml"></a>
<blockquote class="note">
<h4 class="objtitle">TIP</h4>
<p>Some database servers (like MySQL) do not support
<tt class="literal">SELECT</tt><tt class="literal">INTO</tt><tt class="command">
</tt>; they require the use of an <em class="emphasis">INSERT</em>
command to perform this action. Other servers such as MS-SQL and
Sybase require a special flag be set on a database before
<tt class="literal">SELECT</tt><tt class="literal">INTO</tt> can be used within
that database, or the command will fail.</p>



</blockquote>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appd_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="appd_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">D.2. Inserting Data into a Table</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">D.4. Changing Table Information</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
