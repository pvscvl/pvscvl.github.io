<html>
<head>
<title>Querying Filesystem Usage  (Perl for System Administration)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David N. Blank-Edelman">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1565926099L" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Querying Filesystem Usage">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Perl for System Administration"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm">Chapter 2: Filesystems</a></td><td align="right" valign="top" width="172"><a href="ch02_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">2.6. Querying Filesystem Usage</h2>





<p>
<a name="INDEX-129"></a><a name="INDEX-130"></a>Given the methods of controlling
filesystem usage we've just explored, it is only natural to
want to keep track of how well they work. To end this chapter,
let's look at a method for querying the filesystem usage on
each of the operating systems found in this book.</p>





<p>
<a name="INDEX-131"></a>MacOS is the operating system for which this
task is hardest. MacOS does have a Macintosh Toolbox routine
(<tt class="literal">PBHGetVInfo</tt>) to retrieve volume information,
but at the current time there is no MacPerl module available to make
calling this function easy. Instead, we have to take a roundabout
approach and ask the <tt class="command">Finder</tt> to query this
information for us. This is easy in practice thanks to a glue module,
but the setup needed for this method makes MacOS the more difficult
operating system to deal with.</p>





<p>All the materials for the following involve work by Chris Nandor and
can be found at <a href="../../../../../../../pudge.net/">http://pudge.net</a>
or on CPAN. Bear with me as we go over this setup step by step:</p>





<ol>
<li>
<p>
Install the
<tt class="command">cpan-mac</tt> bundle. <tt class="command">cpan-mac</tt> includes the
<tt class="literal">CPAN.pm</tt> module by Andreas J. K&amp;#246;nig and other
handy modules we mentioned in <a href="ch01_01.htm">Chapter 1, "Introduction"</a>. Even if
you don't want to query filesystem usage from MacOS,
you'll still be well served by installing this bundle. When you
install this bundle, be sure to follow all of the directions found in
the <em class="filename">README</em> file.</p>
</li>
<li>
<p>Install the latest <tt class="literal">Mac::AppleEvents::Simple</tt> module by dropping the distribution file on
top of the <tt class="command">installme</tt> droplet.</p>
</li>
<li>
<p>Install the <tt class="literal">Mac::Glue</tt>
module. The
<tt class="command">installme</tt> droplet decompresses and unpacks the
contents of the <tt class="literal">Mac::Glue</tt> distribution file into a
new folder as part of the installation process. Be sure to run the
<tt class="command">gluedialect</tt> and <tt class="command">gluescriptadds</tt>
setup scripts from the <em class="filename">scripts</em> subfolder of the
unpacked distribution.</p>
</li>
<li>
<p>Create the finder glue file. Open your <em class="filename">System
Folder</em> and drag the <em class="filename">Finder</em> file on
top of the <tt class="command">gluemac</tt> droplet to create the necessary
glue file (and, in a particularly nice touch by Nandor, to create pod
documentation for the glue).</p>
</li>
</ol>
<p>This complex setup process allows us to write the following
simple-looking code:</p>





<blockquote>
<pre class="programlisting">use Mac::Glue qw(:all);

$fobj  = new Mac::Glue 'Finder';

$volumename = "Macintosh HD"; # the name of one of our mounted disks
$total = $fobj-&gt;get($fobj-&gt;prop('capacity',
                    disk =&gt; $volumename),
                    as =&gt; 'doub');
$free  = $fobj-&gt;get($fobj-&gt;prop('free_space',
                    disk =&gt; $volumename),
                    as =&gt; 'doub');

print "$free bytes of $total bytes free\n";</pre>
</blockquote>





<p>
<a name="INDEX-132"></a>Let's move to easier territory.
If we wanted to query the same information from a Win32 machine, we
could use Dave Roth's <tt class="literal">Win32::AdminMisc</tt>
module:</p>





<blockquote>
<pre class="programlisting">use Win32::AdminMisc;

($total,$free) = Win32::AdminMisc::GetDriveSpace("c:\\"); 

print "$free bytes of $total bytes free\n";</pre>
</blockquote>





<p>
<a name="INDEX-133"></a><a name="INDEX-134"></a><a name="INDEX-135"></a><a name="INDEX-136"></a>Finally, let's end this chapter by
looking at the Unix equivalent. There are several Unix modules
available, including <tt class="literal">Filesys::DiskSpace</tt> by Fabien
Tassin, <tt class="literal">Filesys::Df</tt> by Ian Guthrie, and
<tt class="literal">Filesys::DiskFree</tt> by Alan R. Barclay. The first
two of these make use of the Unix system call <tt class="literal">statvfs(
)</tt> while the last one actually parses the output of the
Unix command <tt class="command">df</tt> on all of the systems it supports.
Choosing between these modules is mostly a matter of personal
preference and operating system support. I prefer
<tt class="literal">Filesys::Df</tt> because it offers a rich feature set
and does not spawn another process (a potential security risk, as
discussed in <a href="ch01_01.htm">Chapter 1, "Introduction"</a>) as part of a query.
Here's one way to write code equivalent to the previous two
examples:</p>





<blockquote>
<pre class="programlisting">use Filesys::Df;

$fobj = df("/");

print $fobj-&gt;{su_bavail}*1024." bytes of ".
      $fobj-&gt;{su_blocks}*1024." bytes free\n";</pre>
</blockquote>





<p>We have to do a little bit of arithmetic (i.e.,
<tt class="literal">*1024</tt>) because <tt class="literal">Filesys::Df</tt>
returns values in terms of blocks, and each block is 1024 bytes on
our system. The <tt class="literal">df( )</tt> function for this module
can be passed a second optional argument for block size if necessary.
Also worth noting about this code are the two hash values we've
requested. <tt class="literal">su_bavail</tt> and
<tt class="literal">su_blocks</tt> are the values returned by this module
for the "real" size and disk usage information. On most
Unix filesystems, the <tt class="command">df</tt> command would show a
value that hides the standard 10% of a disk set aside for superuser
overflow. If we wanted to see the total amount of space available and
the current amount free from a normal user's perspective, we
would have used <tt class="literal">user_blocks</tt> and
<tt class="literal">user_bavail</tt> instead.</p>





<p>With the key pieces of Perl code we've just seen, it is
possible to build more sophisticated disk monitoring and management
systems. These filesystem watchdogs will help you deal with space
problems before they occur.<a name="INDEX-137"></a><a name="INDEX-138"></a>
</p>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.5. Manipulating Disk Quotas</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.7. Module Information for This Chapter</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
