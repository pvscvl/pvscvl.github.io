<html>
<head>
<title>Filesystem Differences  (Perl for System Administration)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David N. Blank-Edelman">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1565926099L" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Filesystem Differences">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Perl for System Administration"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm">Chapter 2: Filesystems</a></td><td align="right" valign="top" width="172"><a href="ch02_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">2.2. Filesystem Differences</h2>





<p>
<a name="INDEX-49"></a>We'll start with a quick review
of the native filesystems for each of our target operating systems.
Some of this may be old news to you, especially if you have
significant experience with a particular operating system. Still, it
is worth your while to pay careful attention to the differences
between the filesystems (especially the ones you don't know) if
you intend to write Perl code that works on multiple platforms.</p>





<a name="ch02-2-fm2xml"></a>
<h3 class="sect2">2.2.1. Unix</h3>





<p>
<a name="INDEX-50"></a><a name="INDEX-51"></a>All
modern Unix variants ship with a native filesystem with semantics
that resemble those of their common ancestor, the Berkeley Fast File
System. Different vendors have extended their filesystem
implementations in different ways (e.g., Solaris adds Access Control
Lists for better security, Digital Unix ships a spiffy
transaction-based filesystem called <em class="filename">advfs</em>,
etc.). We'll be writing code aimed at the lowest common
denominator to allow it to work across different Unix
platforms.<a name="INDEX-52"></a><a name="INDEX-53"></a>
</p>





<p>The top, or root, of a Unix filesystem is indicated by a forward
slash (<tt class="literal">/</tt>). To uniquely identify a file or
directory in a Unix filesystem, we construct a path starting with a
slash and then add directories, separating them with forward slashes,
as we descend deeper into the filesystem. The final component of this
path is the desired directory or filename. Directory and filenames in
modern Unix variants are case sensitive. Almost all ASCII characters
can be used in these names if you are crafty enough, but sticking to
alphanumeric characters and some limited punctuation will save you
hassle later.</p>

















<a name="ch02-3-fm2xml"></a>
<h3 class="sect2">2.2.2. Microsoft Windows NT/2000</h3>





<p>
<a name="INDEX-54"></a><a name="INDEX-55"></a><a name="INDEX-56"></a>Windows
NT (Version 4.0 as of this writing) ships with two supported
filesystems: File Allocation Table (FAT) and NT FileSystem (NTFS).
Windows 2000 adds FAT32, an improved version of FAT that allows for
larger partitions and smaller cluster sizes to the NT family.</p>





<p>
<a name="INDEX-57"></a><a name="INDEX-58"></a><a name="INDEX-59"></a><a name="INDEX-60"></a>Windows
NT uses an extended version of the basic FAT filesystems found in
DOS. Before we look at the extended version, it is important to
understand the foibles of the basic FAT filesystem. In basic or
real-mode FAT filesystems, filenames conform to the 8.3
specification. This means that file and directory names can start
with no more than eight characters, must have a period (or
<em class="emphasis">dot</em> as it is spoken), and are followed by a
suffix of up to three characters in length. Unlike Unix, where a
period in a filename has no special meaning, basic FAT filesystems
can only use a single period as an enforced separator between the
filename and its extension or suffix.</p>





<p>Real-mode FAT was later enhanced in a version called VFAT or
protected-mode FAT. This is roughly the version that Windows NT and
Windows 2000 support. VFAT hides all of the name restrictions from
the user. Longer filenames without separators are provided by a very
creative hack. VFAT uses a chain of standard file/directory name
slots to transparently shoehorn extended filename support into the
basic FAT filesystem structure. For compatibility, every file and
directory name can still be accessed using a special 8.3-conforming
DOS alias. For instance, the directory called <em class="filename">Downloaded
Program Files</em> is also available as
<em class="filename">DOWNLO~1</em>.</p>





<p>There are four key differences between a VFAT and a Unix filesystem:</p>





<ol>
<li>
<p>FAT filesystems are case-insensitive. In Unix, an attempt to open a
file using the wrong case (i.e., <em class="filename">MYFAVORITEFILE</em>
versus <em class="filename">myfavoritefile</em>) will fail. With FAT or
VFAT, this will succeed with no problem.</p>
</li>
<li>
<p>The second difference is the choice of characters used to separate
path components and root designations. Instead of forward slash, FAT
uses the backward slash (<tt class="literal">\</tt>) as its path separator.
This has a direct ramification for the Perl programmer. The backslash
is a quoting character in Perl. Paths written in single quotes with
only single separators (i.e.,
<tt class="literal">$path='\dir\dir\filename'</tt>) are just fine. However,
situations in which you need to place multiple backslashes next to
each other (i.e., <em class="emphasis">\\server\dir\file</em>) are
potential trouble. In those cases, you have to be vigilant in
doubling any multiple backslashes. Some Perl functions and some Perl
modules will accept paths with forward slashes, but this convention
should not be counted upon when programming. It is better to bite the
bullet and write <tt class="literal">\\\\winnt\\temp\</tt> than to learn
that your code breaks because the conversion hasn't been done
for you.</p>
</li>
<li>
<p>FAT files and directories have special flags associated with them
that are called <em class="emphasis">attributes</em>. Example attributes
include "Read-only" and "System."</p>
</li>
<li>
<p>Finally, the last difference is in the root directory specification.
The root of a FAT filesystem is specified starting at the drive
letter that filesystem lives on. For instance, the absolute path for
a file might be specified as
<em class="filename">c:\home\cindy\docs\resume\current.doc</em>.
<a name="INDEX-61"></a>
</p>
</li>
</ol>
<p>FAT32 and NTFS filesystems have the same semantics as VFAT. They
share the same support for long filenames and use the same root
designator. NTFS is slightly more sophisticated in its name support
because it allows these names to be specified using Unicode. Unicode
is a multibyte character encoding scheme that can be used to
represent all of the characters of all of the written languages on
the planet.</p>





<p>NTFS also has some functional differences that distinguish it from
the other Windows NT/2000 and basic Unix filesystems. NTFS supports
the notion of an Access Control List (ACL). ACLs provide a
fine-grained permission mechanism for file and directory access.
Later on in this chapter we will write some code to take advantage of
some of these differences. <a name="INDEX-62"></a>
</p>





<p>
<a name="INDEX-63"></a>Before we move on to another operating
system, it is important to at least mention the Universal Naming
Convention. UNC is a convention for locating things (files and
directories in our case) in a networked environment. Instead of the
drive letter and a colon preceding an absolute path, the
<em class="filename">drive letter:</em> part is replaced with
<em class="filename">\\server\sharename</em>. This convention suffers from
the same Perl backslash syntax clash we saw a moment ago. As a
result, it is not uncommon to see a set of leaning toothpicks like
this:</p>





<blockquote>
<pre class="programlisting">$path = "\\\\server\\sharename\\directory\\file"</pre>
</blockquote>

















<a name="ch02-4-fm2xml"></a>
<h3 class="sect2">2.2.3. MacOS</h3>





<p>
<a name="INDEX-64"></a><a name="INDEX-65"></a>Despite its GUI-centrist approach, the
MacOS Hierarchical File System (HFS) also lets users specify textual
pathnames, albeit with a few twists. Absolute pathnames are specified
using the following form: <em class="filename">Drive/Volume
Name:Folder:Folder:Folder:FileName</em>. A specification with
no colons refers to a file in the current directory.</p>





<p>
<a name="INDEX-66"></a><a name="INDEX-67"></a>Unlike the two previous operating
systems, HFS paths are considered absolute if they do
<em class="emphasis">not</em> begin with their path separator (:). An HFS
path that begins with a colon is a relative path. One subtle
difference that sets MacOS paths apart from the other operating
systems is the number of separators you need to use when pointing to
objects higher up in the directory hierarchy. For instance, under
Unix, you would use <em class="filename">.. /.. /.. /FileName</em> to get
to a file three levels higher than the current directory. Under
MacOS, you would use four separators (i.e.,
<em class="filename">::::FileName</em>), because you must include a
reference to the current directory in addition to the three previous
levels.</p>





<p>File and directory names are limited to 31 characters under HFS. As
of MacOS Version 8.1, an alternative volume format called MacOS
Extended Format or HFS+ was introduced to allow for 255 Unicode
character filenames. Although the HFS+ filesystem allows these long
names, MacOS does not yet support them as of this writing.</p>





<p>A more significant departure from the previous two operating systems
(at least from a Perl programming point of view) is MacOS's use
of the "fork" idiom for its file storage. Each file is
said to have a <em class="emphasis">data fork</em> and a
<em class="emphasis">resource fork</em>. The former holds the data part of
the file, while the latter contains a variety of different
<em class="emphasis">resources</em>. These resources can include
executable code (in the case of a program), user interface
specifications (dialog boxes, fonts, etc.), or any other components a
programmer wishes to define. Though we won't be dealing with
forks per se this chapter, MacPerl does have facilities for reading
and writing to both forks.</p>





<a name="ch02-5-fm2xml"></a>
<blockquote class="note">
<h4 class="objtitle">TIP</h4>
<p>The core Perl operators and functions operate on the data fork only
in MacPerl. For example, the <em class="emphasis">-s</em> operator returns
only the data fork's size of a file. You will need to use some
of the bundled Macintosh Toolbox modules if you wish to access a
file's resource fork.</p>




</blockquote>

<p>Each file in the HFS filesystem also has two special tags,
<em class="emphasis">creator</em> and <em class="emphasis">type,</em> that
allow the OS to identify which application created that file and what
kind of file it is purported to be. These tags play the same role as
extensions used in the FAT filesystem (e.g.,
<em class="filename">.doc</em> or <em class="filename">.exe</em>). Later in
this chapter we'll briefly show how to use the type/creator
tags to your advantage.</p>

















<a name="ch02-6-fm2xml"></a>
<h3 class="sect2">2.2.4. Filesystem Differences Summary</h3>





<p>
<a href="ch02_02.htm">Table 2-1</a> summarizes all of the differences we
just discussed along with a few more items of interest.</p>





<a name="ch02-90257"></a>
<h4 class="objtitle">Table 2.1. Filesystem Comparison</h4>
<table border="1">








<tr>
<th>
<p>OS and Filesystem</p>
</th>
<th>
<p>Path separator</p>
</th>
<th>
<p>Case-Sensitive?</p>
</th>
<th>
<p>Filename Specification Length</p>
</th>
<th>
<p>Absolute Path Format</p>
</th>
<th>
<p>Relative Path Format</p>
</th>
<th>
<p>Unique Features</p>
</th>
</tr>










<tr>
<td>
<p>Unix</p>





<p>(Berkeley Fast File System and others)</p>
</td>
<td>
<p>/</p>
</td>
<td>
<p>Y</p>
</td>
<td>
<p>OS-dependent number of chars</p>
</td>
<td>
<p>
<em class="filename">/dir/file</em>
</p>
</td>
<td>
<p>
<em class="filename">dir/file</em>
</p>
</td>
<td>
<p>OS-variant-dependent additions</p>
</td>
</tr>




<tr>
<td>
<p>MacOS (HFS)</p>
</td>
<td>
<p>:</p>
</td>
<td>
<p>Y</p>
</td>
<td>
<p>31 chars (or 255 if using HFS+)</p>
</td>
<td>
<p>
<em class="filename">volume:dir:file</em>
</p>
</td>
<td>
<p>
<em class="filename">:dir:file</em>
</p>
</td>
<td>
<p>Data/resource forks, creator/type attributes</p>
</td>
</tr>




<tr>
<td>
<p>WinNT/2000 (NTFS)</p>
</td>
<td>
<p>\</p>
</td>
<td>
<p>N</p>
</td>
<td>
<p>255 chars</p>
</td>
<td>
<p>
<em class="filename">Drive:\dir\file</em>
</p>
</td>
<td>
<p>
<em class="filename">dir\file</em>
</p>
</td>
<td>
<p>ACLs, attributes, Unicode names</p>
</td>
</tr>




<tr>
<td>
<p>DOS (BASIC FAT)</p>
</td>
<td>
<p>\</p>
</td>
<td>
<p>N</p>
</td>
<td>
<p>8.3</p>
</td>
<td>
<p>
<em class="filename">Drive:\dir\file</em>
</p>
</td>
<td>
<p>
<em class="filename">dir\file</em>
</p>
</td>
<td>
<p>Attributes</p>
</td>
</tr>





</table>

















<a name="ch02-7-fm2xml"></a>
<h3 class="sect2">2.2.5. Dealing with Filesystem Differences from Perl</h3>





<p>
<a name="INDEX-68"></a><a name="INDEX-69"></a>Perl can help you write
code that takes most of these filesystem quirks into account. It
ships with a module called <tt class="literal">File::Spec</tt> to hide some
of the differences between the filesystems. For instance, if we pass
in the components of a path to the <tt class="literal">catfile</tt>
method like so:</p>





<blockquote>
<pre class="programlisting">use File::Spec;

$path = File::Spec-&gt;catfile("home","cindy","docs","resume.doc");</pre>
</blockquote>





<p>then <tt class="literal">$path</tt> is set to
<tt class="literal">home\cindy\docs\resume.doc</tt> on a Windows NT/2000
system, while on a Unix system it becomes
<tt class="literal">home/cindy/docs/resume.doc</tt>, and so on.
<tt class="literal">File::Spec</tt> also has methods like
<tt class="literal">curdir</tt> and <tt class="literal">updir</tt> that
return the punctuation necessary to describe the current and parent
directories (e.g., "." and ".."). The methods
in this module give you an abstract way to construct and manipulate
your path specifications. If you'd prefer not to have to write
your code using an object-oriented syntax, the module
<tt class="literal">File::Spec::Functions</tt> provides a more direct route
to the methods found in <tt class="literal">File::Spec</tt>.<a name="INDEX-70"></a>
</p>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.1. Perl to the Rescue</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.3. Walking or Traversing the Filesystem</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
