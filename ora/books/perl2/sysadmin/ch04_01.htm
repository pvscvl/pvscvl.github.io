<html>
<head>
<title>User Activity  (Perl for System Administration)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David N. Blank-Edelman">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1565926099L" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="User Activity">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Perl for System Administration"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm">Perl for System Administration</a></td><td align="right" valign="top" width="172"><a href="ch04_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 4.  User Activity</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch04_01.htm">MacOS Process Control</a>
<br>
<a href="ch04_02.htm">NT/2000 Process Control</a>
<br>
<a href="ch04_03.htm">Unix Process Control</a>
<br>
<a href="ch04_04.htm">Tracking File and Network Operations </a>
<br>
<a href="ch04_05.htm">Module Information for This Chapter</a>
<br>
<a href="ch04_06.htm">References for More Information</a>
<br>
</p>
</div>










<p>In the previous chapter, we explored the identity of a user and how
this identity is managed and stored. Now let's talk about how
to manage users while they are active on our systems and network.</p>





<p>The significant actions of users fall into four domains:</p>





<dl>
<dt>
<b><em class="emphasis">Processes</em>
<a name="INDEX-267"></a> </b>
</dt>
<dd>
<p>Users can spawn, kill, pause, and resume processes on our machines.
These processes compete for a computer's finite processing
power, adding resource issues to the list of problems a system
administrator needs to mediate.</p>
</dd>





<dt>
<b><em class="emphasis">File operations</em>
<a name="INDEX-268"></a> </b>
</dt>
<dd>
<p>Most of the time, operations like writing, reading, creating,
deleting, etc., take place when some user process interacts with
files in a filesystem. But under Unix, there's more to this
picture. Unix uses the filesystem as a gateway to more than just file
storage. Device control, input/output channels, and even some process
control and network access are file operations. We dealt with
filesystem administration in <a href="ch02_01.htm">Chapter 2, "Filesystems"</a>, but in
this chapter we'll approach this topic from a user
administration perspective.</p>
</dd>





<dt>
<b><em class="emphasis">Network</em> <a name="INDEX-269"></a></b>
</dt>
<dd>
<p>Users can send and receive data over network interfaces on our
machine. There is material elsewhere in this book on networking, but
we'll address this issue here from a different perspective.</p>
</dd>





<dt>
<b><em class="emphasis">OS-specific activities</em> </b>
</dt>
<dd>
<p>This last domain is a catchall for the OS-specific features that
users can access via different APIs. Included in this list are things
like GUI element controls, shared memory usage, file sharing APIs,
sound, etc. This category is so diverse that there's no way to
discuss it well in our current context. I recommend tracking down the
OS-specific web sites like <a href="../../../../../../../www.macperl.com/">http://www.macperl.com</a> for information on
these topics.</p>
</dd>

</dl>





<p>Let's look at ways to deal with the first three of these
domains using Perl. Each of the operating systems in this book treats
this topic differently, so we're going to have to address them
on an individual basis. The closest thing to common ground they share
is the Perl <tt class="literal">kill( )</tt> function, and even that is
not implemented under MacOS. We will take each OS in turn, beginning
with the least complicated (from a Perl perspective). Because
we're interested in user administration, the focus here will be
on dealing with processes started by other users.</p>




































<h2 class="sect1">4.1. MacOS Process Control</h2>





<p>
<a name="INDEX-270"></a><a name="INDEX-271"></a><a name="INDEX-272"></a>"Control" might be too strong a
word for the functionality offered under MacOS, since MacOS is not
multiuser and is just barely multitasking. Using the module
<tt class="literal">Mac::Processes</tt>, we can interact with the Macintosh
Process Manager using the MacOS Toolbox API for process control. If
you are going to delve any deeper than surface level with this
module, you'll want to seek out a copy of the <em class="citetitle">Inside
Macintosh:Processes</em> volume that deals with the Process
Manager.<a name="INDEX-273"></a>
</p>





<p>When we load <tt class="literal">Mac::Processes</tt> via the standard
<tt class="literal">use Mac::Processes</tt> directive, it initializes a
special hash called <tt class="literal">%Process</tt>. This hash is magical
because it always contains a representation of the
<em class="emphasis">current</em> process state of the machine thanks to
Perl's tied variable functionality. Each time the contents of
<tt class="literal">%Process</tt> are accessed, information about the
machine's current running processes are returned. To see a list
of the current process serial numbers (the MacOS term for process ID,
often abbreviated as PSN ), we can simply query the list of keys in
this
hash:<a name="INDEX-274"></a>
</p>





<blockquote>
<pre class="programlisting">use Mac::Processes;
print map{"$_\n"} keys %Process;</pre>
</blockquote>





<p>For more information on the individual processes, we need to work
with the values returned for each key. Each hash entry contains an
object representing a <tt class="literal">ProcessInfo</tt> structure. To
get at the individual fields of this structure, you call object
methods with their names. For more information on each field and what
it represents, see the canonical reference book <em class="citetitle">Inside
Macintosh:Processes</em>. The currently available method names
are <tt class="literal">processName( )</tt>, <tt class="literal">processNumber(
)</tt>, <tt class="literal">processType( )</tt>,
<tt class="literal">processSignature( )</tt>, <tt class="literal">processSize(
)</tt>, <tt class="literal">processMode( )</tt>,
<tt class="literal">processLocation( )</tt>, <tt class="literal">processLauncher(
)</tt>, <tt class="literal">processLaunchDate( )</tt>,
<tt class="literal">processActiveTime( )</tt>, and
<tt class="literal">processAppSpec( )</tt>.</p>





<p>To get a list of the running processes and their names, we could
write:</p>





<blockquote>
<pre class="programlisting">use Mac::Processes;
while(($psn, $psi) = each (%Process)){
  $name = $psi-&gt;processName(  );
  write;
}

format STDOUT_TOP =
Process Serial Number      Process Name
=====================      =========================================
.

format STDOUT =
@&lt;&lt;&lt;&lt;&lt;&lt;                    @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
$psn,                      $name
.</pre>
</blockquote>





<p>which would yield output that looked like this:</p>





<blockquote>
<pre class="programlisting">Process Serial Number      Process Name
=====================      =========================
8192                       FaxMonitor
8193                       Queue Watcher
8194                       Finder
8195                       Serial Port Monitor
8198                       MacPerl</pre>
</blockquote>





<p>Once you know the processes running on a machine, it is natural to
want to control them. Unfortunately, our abilities in this realm are
negligible. The most exciting thing we can do is bring a process to
the foreground using <tt class="literal">SetFrontProcess($psn)</tt>. We
don't even have the ability to directly kill a process (the
Perl <tt class="literal">kill( )</tt> function is not implemented). The
best we can do is send an AppleEvent to a running application or the
finder to request that this process shut itself down. The easiest way
to perform this task is to use Chris Nandor's
<tt class="literal">Mac::Apps::Launch</tt> module. It offers a function
called <tt class="literal">QuitApps( )</tt> that can quit an application
given its creator ID. <tt class="literal">Mac::Apps::Launch</tt> also
provides some useful functions for launching applications and
bringing them to and away from the foreground similar to those we
mentioned in
<tt class="literal">Mac::Processes</tt>.<a name="INDEX-275"></a><a name="INDEX-276"></a>
</p>





<p>Let's move on to an operating system that is much less limited
in the process control realm.</p>













































































































































































<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.5. References for More Information</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.2. NT/2000 Process Control</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
