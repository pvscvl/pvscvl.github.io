<HTML
><HEAD
>
<TITLE>7.4 Object Syntax (Perl in a Nutshell)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl in a Nutshell"><META
NAME="DC.creator"
CONTENT="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:35Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-286-7"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. Packages, Modules, and Objects"><LINK
REL="prev"
HREF="ch07_03.htm"
TITLE="7.3 Object-Oriented Perl"><LINK
REL="next"
HREF="ch08_01.htm"
TITLE="8. Standard Modules"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl in a Nutshell"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,71"
HREF="index.htm"
ALT="Perl in a Nutshell"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_03.htm"
TITLE="7.3 Object-Oriented Perl"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.3 Object-Oriented Perl"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. Packages, Modules, and Objects"
>Chapter 7<BR>Packages, Modules, and Objects</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="CHAPTER"
HREF="ch08_01.htm"
TITLE="8. Standard Modules"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8. Standard Modules"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PNUT-CH-7-SECT-4"
>7.4 Object Syntax</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-12393"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12396"
></A
>Perl uses two forms of syntax for invoking methods on objects.
For both types of syntax, the object reference or class name is given 
as the first argument. 
A method that takes a class name is called
a <EM
CLASS="emphasis"
>class method</EM
>, and one
that takes an object reference is
called an <EM
CLASS="emphasis"
>instance method</EM
>.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-12402"
></A
>Class methods provide functionality for the entire class, not just for
a single object that belongs to the class.  Class methods expect a
class name as their first argument.  Following this explanation, a
constructor is an example of a class method:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>sub new {
   my $self = {};
   bless $self;
   return $self;
}</PRE
></BLOCKQUOTE
>

<A
CLASS="indexterm"
NAME="AUTOID-12405"
></A
>
On the other hand, an instance method expects an object
reference as its first argument.  An instance method will shift the
first argument and use this argument as a reference:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>sub instance_method {
   my $self = shift;
   my($one, $two, $three) = @_;
   # do stuff
}</PRE
></BLOCKQUOTE
>


Here is an example of a constructor creating a new object and
returning a reference:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$tri = new Triangle::Right (side1 =&gt; 3, side2 =&gt; 4);</PRE
></BLOCKQUOTE
>


This example creates a new right-triangle object and references it
with <CODE
CLASS="literal"
>$tri</CODE
>. The parameters are given as a hash-style list. This
is common for constructors, as they set initial parameters for an
object that is probably just a hash. Now that we have an object, we
can invoke some method on it. Suppose Triangle::Right defines a method,
<CODE
CLASS="literal"
>hypot</CODE
>, that returns the length of the hypotenuse for a given
right-triangle object. It would be used like this:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$h = hypot $tri;
print &quot;The hypotenuse is: $h.\n&quot;;</PRE
></BLOCKQUOTE
>


In this particular example, there happens to be no additional arguments to the <CODE
CLASS="literal"
>hypot</CODE
> method,
but there could have been.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-12414"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12416"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12418"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12420"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12423"
></A
>With the arrow (<CODE
CLASS="literal"
>-&gt;</CODE
>) notation,
the left side of the
arrow must be an object reference or a class name, while the right side of
the arrow must be a method defined for that object. Any arguments must
follow the method inside of parentheses.  For example:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$obj-&gt;method(<EM
CLASS="emphasis"
>args</EM
>)
CLASS-&gt;method(<EM
CLASS="emphasis"
>args</EM
>)</PRE
></BLOCKQUOTE
>


You have to use parentheses because this form can't be used as a list
operator, although the first type of method syntax can.</P
><P
CLASS="para"
>The examples given above would look like this using the arrow syntax:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$tri = Triangle::Right-&gt;new(side1 =&gt; 3, side2 =&gt; 4);
$h = $tri-&gt;hypot();
print &quot;The hypotenuse is: $h.\n&quot;;</PRE
></BLOCKQUOTE
>


The arrow syntax provides a helpful visual relationship between the
object and its method, but both forms of syntax do the same
thing. Precedence for the arrow syntax is left to right, exactly the
same as the dereferencing operator. This allows you to chain together
objects and methods if you want to simplify things. You just have to
make sure you have an object to the left of the arrow and a method to
the right:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>%sides = (side1 =&gt; 3, side2 =&gt; 4);
$h = Triangle::Right-&gt;new(%sides)-&gt;hypot();
print &quot;The hypotenuse is: $h.\n&quot;;</PRE
></BLOCKQUOTE
>


In this example, you never assign a variable name to the right-triangle
object; the reference is passed directly to the <CODE
CLASS="literal"
>hypot</CODE
> method.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_03.htm"
TITLE="7.3 Object-Oriented Perl"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.3 Object-Oriented Perl"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl in a Nutshell"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl in a Nutshell"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="CHAPTER"
HREF="ch08_01.htm"
TITLE="8. Standard Modules"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8. Standard Modules"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.3 Object-Oriented Perl</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>8. Standard Modules</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<p><!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
