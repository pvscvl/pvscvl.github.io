<HTML
><HEAD
>
<TITLE>18.12 The Canvas Widget (Perl in a Nutshell)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl in a Nutshell"><META
NAME="DC.creator"
CONTENT="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:58:58Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-286-7"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch18_01.htm"
TITLE="18. Perl/Tk"><LINK
REL="prev"
HREF="ch18_11.htm"
TITLE="18.11 The Text Widget"><LINK
REL="next"
HREF="ch18_13.htm"
TITLE="18.13 The Scale Widget"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl in a Nutshell"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,71"
HREF="index.htm"
ALT="Perl in a Nutshell"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch18_11.htm"
TITLE="18.11 The Text Widget"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.11 The Text Widget"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch18_01.htm"
TITLE="18. Perl/Tk"
>Chapter 18<BR>Perl/Tk</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch18_13.htm"
TITLE="18.13 The Scale Widget"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.13 The Scale Widget"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PNUT-CH-18-SECT-12"
>18.12 The Canvas Widget</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="PNUT-CH-18-IX-CANVAS-WIDGET-PERL-TK"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-18-IX-TK-EXTENSION-TO-PERL-WIDGETS-CANVAS-WIDGET"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-18-IX-PERL-TK-WIDGETS-CANVAS-WIDGET"
></A
>Create a canvas for drawing with the <CODE
CLASS="literal"
>Canvas</CODE
> method.  
The Canvas widget uses
a coordinate system with the x coordinate increasing 
as you move right, and the y coordinate increasing
as you move <EM
CLASS="emphasis"
>down</EM
> (i.e., the y coordinate is 
mathematically upside-down).  The x and y coordinates
are specified in pixels by default.


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$parentwidget-&gt;Canvas ( <EM
CLASS="emphasis"
>options</EM
>)</PRE
></BLOCKQUOTE
>


The standard configuration options that apply to <CODE
CLASS="literal"
>Canvas</CODE
> are:
<CODE
CLASS="literal"
>-background</CODE
>,
<CODE
CLASS="literal"
>-borderwidth</CODE
>,
<CODE
CLASS="literal"
>-cursor</CODE
>,
<CODE
CLASS="literal"
>-height</CODE
>,
<CODE
CLASS="literal"
>-highlightbackground</CODE
>,
<CODE
CLASS="literal"
>-highlightcolor</CODE
>,
<CODE
CLASS="literal"
>-highlightthickness</CODE
>,
<CODE
CLASS="literal"
>-insertbackground</CODE
>,
<CODE
CLASS="literal"
>-insertborderwidth</CODE
>,
<CODE
CLASS="literal"
>-insertofftime</CODE
>,
<CODE
CLASS="literal"
>-insertontime</CODE
>,
<CODE
CLASS="literal"
>-insertwidth</CODE
>,
<CODE
CLASS="literal"
>-relief</CODE
>,
<CODE
CLASS="literal"
>-selectbackground</CODE
>,
<CODE
CLASS="literal"
>-selectborderwidth</CODE
>,
<CODE
CLASS="literal"
>-selectforeground</CODE
>,
<CODE
CLASS="literal"
>-takefocus</CODE
>,
<CODE
CLASS="literal"
>-width</CODE
>,
<CODE
CLASS="literal"
>-xscrollcommand</CODE
>,
and
<CODE
CLASS="literal"
>-yscrollcommand</CODE
>.</P
><P
CLASS="para"
>Other options are:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>-closeenough =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>amount</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-38745"
></A
>The distance considered &quot;close enough&quot; to an item to be
judged to be within it.  Default is 1 pixel.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-confine =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>boolean</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-38753"
></A
>Whether to limit the canvas to the scroll region.
Default is 1.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-scrollregion =&gt;</CODE
> [ <CODE
CLASS="replaceable"
><I
>x, y, w, h</I
></CODE
> ]</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-38761"
></A
>Sets the region that the user is allowed to scroll.  The option
is a list reference that conveniently corresponds to the return
value of the <CODE
CLASS="literal"
>bbox</CODE
> method.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-xscrollincrement =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>amount</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-38770"
></A
>The distance to use for scrolling in the x direction.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-yscrollincrement =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>amount</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-38778"
></A
>The distance to use for scrolling in the y direction.  </P
></DD
></DL
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-18-SECT-12.1"
>18.12.1 Canvas Creation Methods</A
></H3
><P
CLASS="para"
>To place graphic elements in a canvas, there are several
item creation commands:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>createArc</CODE
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-38789"
></A
>Creates an arc contained within the given bounding box.  For example,
to create an oval bounded by the box from 
(0,0) to (40,100):


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$canvas-&gt;createArc(0,0,40,100, -extent =&gt; 360);</PRE
></BLOCKQUOTE
>


The <CODE
CLASS="literal"
>-extent</CODE
> option gives a number between 0 and 360 defining
the length of the arc.  The default <CODE
CLASS="literal"
>-extent</CODE
> is 90, or 1/4 of
an oval; an extent of 360 gives you a full oval.  
The complete list
of options to <CODE
CLASS="literal"
>createArc</CODE
> is:

<DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>-extent =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>degrees</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Creates an arc of the specified extent.  <CODE
CLASS="replaceable"
><I
>degrees</I
></CODE
> can be any
number between 0 and 360, as described above.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-fill =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>color</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Fills the arc with the specified color.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-outline =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>color</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Draws the arc with the specified color (default = black).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-outlinestipple =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>bitmap</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Draws the outline with the specified bitmap pattern.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-start =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>degrees</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Starts drawing the arc from the specified position, where the
position is represented by a number from 0 to 360.
The default is 0, which means to start drawing at the 3 o'clock
position.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-stipple =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>bitmap</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Uses the specified bitmap to fill the arc (if <CODE
CLASS="literal"
>-fill</CODE
>
is also specified).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-style =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>type</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Draws the arc as specified.  Values are:</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>'pieslice'</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Draws lines from the center to the ends of the arc (the default).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>'chord'</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Draws a line connecting the two ends of the arc.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>'arc'</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Draws the arc with no other lines.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-tags =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>tagnames</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Associates the arc with the specified tag(s).  Multiple tag names
can be supplied as an anonymous list.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-width =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>amount</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The width of the outline.  Default is 1.</P
></DD
></DL
>&#13;</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>createBitmap</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-38872"
></A
>Inserts a bitmap.  For example, to place the <CODE
CLASS="literal"
>&quot;calculator&quot;</CODE
> bitmap
at the (0,0) coordinates:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$canvas -&gt; createBitmap(0, 0, -bitmap =&gt; 'calculator');</PRE
></BLOCKQUOTE
>


Options are:

<DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>-anchor =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>position</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Anchors the bitmap at the specified position.  Values are <CODE
CLASS="literal"
>&quot;center&quot;</CODE
> (default), <CODE
CLASS="literal"
>&quot;n&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;e&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;s&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;w&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;ne&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;nw&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;se&quot;</CODE
>, and <CODE
CLASS="literal"
>&quot;sw&quot;</CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-background =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>color</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the color to use for the &quot;0&quot; pixels in the bitmap
(default is to be transparent).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-bitmap =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>bitmap</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the bitmap name.  For a built-in bitmap, just specify
the name; for a local bitmap file, specify the name with an &quot;@&quot;
symbol preceding it.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-foreground =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>color</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the color to use for the &quot;1&quot; pixels in the bitmap
(default is black).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-tags =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>tagnames</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Associates the bitmap with the specified tag(s).  Multiple tag names
can be supplied as an anonymous list.  </P
></DD
></DL
>&#13;</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>createImage</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-38921"
></A
>Creates an image.  For example, to place an image at (0,0):


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$canvas-&gt;createImage(0,0, -image =&gt; $imgptr);</PRE
></BLOCKQUOTE
>


Options are:

<DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>-anchor =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>position</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Anchors the image at the specified position.  Values are <CODE
CLASS="literal"
>&quot;center&quot;</CODE
>
(default), <CODE
CLASS="literal"
>&quot;n&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;e&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;s&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;w&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;ne&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;nw&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;se&quot;</CODE
>, and <CODE
CLASS="literal"
>&quot;sw&quot;</CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-image =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>$imgptr</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><CODE
CLASS="replaceable"
><I
>$imgptr</I
></CODE
> is a pointer to a Photo or Image object 
made using a GIF or PPM file.  For example:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$imgptr = $mainwindow-&gt;Photo(-file =&gt; &quot;doggie.gif&quot;);</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-tags =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>tagnames</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Associate the image with the specified tag(s).  Multiple tag names
can be supplied as an anonymous list.  </P
></DD
></DL
>&#13;</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>createLine</CODE
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-38959"
></A
>Creates a line or several adjoining lines.  For example, to 
create a line from (0,0) to (100, 100) and then back to (100, 0):


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$canvas-&gt;createLine (0,0,100,100,100,0);</PRE
></BLOCKQUOTE
>


The first four coordinates are required.  Any additional coordinates
are taken to represent a continuation of that line.  Options are:

<DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>-arrow =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>position</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies where to place arrowheads.  Values are <CODE
CLASS="literal"
>'none'</CODE
> (default), <CODE
CLASS="literal"
>'first'</CODE
>, <CODE
CLASS="literal"
>'last'</CODE
>, and <CODE
CLASS="literal"
>'both'</CODE
>.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-arrowshape =&gt;</CODE
> [ <CODE
CLASS="replaceable"
><I
>head</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>length</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>flare</I
></CODE
> ]</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the dimensions of the arrow as a three-element anonymous list,
describing (in order) the distance from the base to the &quot;head&quot; of 
the arrow, the distance from the rear point(s) to the head of the
arrow, and the distance from the rear point(s) to the line.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-capstyle =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>type</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Defines the type of arrowhead.  Values are <CODE
CLASS="literal"
>&quot;butt&quot;</CODE
> (the default), <CODE
CLASS="literal"
>&quot;projecting&quot;</CODE
>, and <CODE
CLASS="literal"
>&quot;round&quot;</CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-fill =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>color</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The color to use to draw the line.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-joinstyle =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>type</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Defines how multiple lines are joined.  Values are <CODE
CLASS="literal"
>&quot;miter&quot;</CODE
> (default),
<CODE
CLASS="literal"
>&quot;bevel&quot;</CODE
>, and <CODE
CLASS="literal"
>&quot;round&quot;</CODE
>.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-smooth =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>boolean</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Determines whether the lines are drawn with a Bezier spine.  
Default is 0.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-splinesteps =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>n</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Determines how smooth the Bezier curve is.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-stipple =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>bitmap</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Draws the line with the specified bitmap pattern.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-tags =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>tagnames</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Associates the line with the specified tag(s).  Multiple tag names
can be supplied as an anonymous list.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-width =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>amount</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The width of the line (default = 1 pixel).  </P
></DD
></DL
>&#13;</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>createOval</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39040"
></A
>Creates an oval.  For example, to create a circle bounded by the
box from (50,50) to (150,150):


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$canvas-&gt;createOval(50,50,150,150);</PRE
></BLOCKQUOTE
>


Options are:

<DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>-fill =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>color</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Fills the arc with the specified color.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-outline =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>color</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the color for the outline (default = black).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-stipple =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>bitmap</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies a bitmap to fill the oval with.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-tags =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>tagnames</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Associates the oval with the specified tag(s).  Multiple tag names
can be supplied as an anonymous list.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-width =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>amount</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The width of the outline (default = 1 pixel).  </P
></DD
></DL
>&#13;</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>createPolygon</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39079"
></A
>Creates a polygon.  At least three sets of coordinates are required;
the first point is automatically connected to the last point to 
complete the polygon.

<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$canvas -&gt; createPolygon(0,0,130, 20, 90, -35);</PRE
></BLOCKQUOTE
>

Options are:

<DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>-fill =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>color</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The color to use to fill the polygon.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-outline =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>color</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the color for the outline (default = black).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-smooth =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>boolean</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Determines whether the outline is drawn with a Bezier spine.  
Default is 0.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-splinesteps =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>n</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Determines how smooth the Bezier curve is.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-stipple =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>bitmap</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Fills the polygon with the specified bitmap pattern.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-tags =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>tagnames</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Associates the polygon with the specified tag(s).  Multiple tag names
can be supplied as an anonymous list.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-width =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>amount</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The width of the outline (default = 1 pixel).  </P
></DD
></DL
>&#13;</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>createRectangle</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39130"
></A
>Creates a rectangle.  For example, to create a square with one
corner at (0,0) and another at (100,100):


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$canvas-&gt;createRectangle(0,0,100,100);</PRE
></BLOCKQUOTE
>


Options are:

<DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>-fill =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>color</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The color to use to fill the rectangle.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-outline =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>color</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the color for the outline (default = black).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-stipple =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>bitmap</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Fills the rectangle with the specified bitmap pattern.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-tags =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>tagnames</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Associates the rectangle with the specified tag(s).  Multiple tag names
can be supplied as an anonymous list.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-width =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>amount</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The width of the outline (default = 1 pixel).  </P
></DD
></DL
>&#13;</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>createText</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39169"
></A
>Places text in a canvas widget.  For example, to write &quot;Broadway&quot; 
centered at the position (130,-40):


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$canvas-&gt;createText(130,-40, -text =&gt; &quot;Broadway&quot;);</PRE
></BLOCKQUOTE
>


Options are:

<DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>-anchor =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>position</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Anchors the text at the specified position.  Values are <CODE
CLASS="literal"
>&quot;center&quot;</CODE
> (default), <CODE
CLASS="literal"
>&quot;n&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;e&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;s&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;w&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;ne&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;nw&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;se&quot;</CODE
>, and <CODE
CLASS="literal"
>&quot;sw&quot;</CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-fill =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>color</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The color to use for the text.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-font =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>fontname</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The font for the text.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-justify =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>position</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The justification of the text (any of <CODE
CLASS="literal"
>'left'</CODE
>, <CODE
CLASS="literal"
>'right'</CODE
>, and <CODE
CLASS="literal"
>'center'</CODE
>).  The default is <CODE
CLASS="literal"
>'left'</CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-stipple =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>bitmap</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Fills the text with the specified bitmap pattern.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-tags =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>tagnames</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Associates the text with the specified tag(s).  Multiple tag names
can be supplied as an anonymous list.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-text =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>string</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the text to display.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-width =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>amount</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The maximum length of each line of text.  Default is 0, which
means that lines are only broken at explicit newline characters.</P
></DD
></DL
>&#13;</P
><P
CLASS="para"
>There is a set of methods for manipulating text items within
a Canvas widget.  For each of these methods, the first argument
is the tag name or tag ID, and subsequent arguments use
text indexes as described for the Text widget.

<DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>dchars</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Deletes characters from a text item, given the tag name or ID, 
and indexes of the first and last characters to delete.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>icursor</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Places the insert cursor at the specified index.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>index</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Gets a numerical index from a named one.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>insert</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Adds a string to the text item.</P
></DD
></DL
>&#13;</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>createWindow</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39261"
></A
>Embeds another widget inside of a canvas.  The widget must have
been already created as a child of the canvas or of the canvas's parent.
Options are:

<DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>-anchor =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>position</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Anchors the widget at the specified position.  Values are <CODE
CLASS="literal"
>&quot;center&quot;</CODE
> (default), <CODE
CLASS="literal"
>&quot;n&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;e&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;s&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;w&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;ne&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;nw&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;se&quot;</CODE
>, and <CODE
CLASS="literal"
>&quot;sw&quot;</CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-height =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>amount</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the height of the widget.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-tags =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>tagnames</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Associates the widget with the specified tag(s).  Multiple tag names
can be supplied as an anonymous list.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-width =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>amount</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The width of the widget.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-window =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>$widget</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the widget to embed.  </P
></DD
></DL
>
&#13;</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-18-SECT-12.2"
>18.12.2 Item Tags and IDs</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39306"
></A
>Each item in a Canvas Widget is given a unique ID when it is created.  This ID is
returned from the canvas creation command.  In addition, each
item can have a tag associated with it, either when created 
or with the <CODE
CLASS="literal"
>addtag</CODE
> method.  You can use either the ID 
or the tag to refer to an item in the canvas.  Unlike IDs, 
tags do not have to be unique, which makes it possible to configure
several items as a group.</P
><P
CLASS="para"
>Two special tags are created automatically.  The &quot;all&quot; tag 
refers to all items in the canvas.  The &quot;current&quot; tag refers to the 
item that the cursor is currently over, if any.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-18-SECT-12.3"
>18.12.3 Canvas Methods</A
></H3
><P
CLASS="para"
>In addition to <CODE
CLASS="literal"
>configure</CODE
> and <CODE
CLASS="literal"
>cget</CODE
>, the following
methods are supported by the Canvas widget.  </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>addtag</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39321"
></A
>Defines a tag for an already-created canvas item.  
For example, to assign a tag
called <CODE
CLASS="literal"
>&quot;everything&quot;</CODE
> to all items in a canvas:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$canvas-&gt;addtag(&quot;everything&quot;, &quot;all&quot;);</PRE
></BLOCKQUOTE
>


To change the tag for an item from <CODE
CLASS="literal"
>&quot;tmp&quot;</CODE
> to <CODE
CLASS="literal"
>&quot;circle&quot;</CODE
>:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$canvas-&gt;addtag(&quot;circle&quot;, &quot;withtag&quot;, &quot;tmp&quot;);</PRE
></BLOCKQUOTE
>


To assign the tag <CODE
CLASS="literal"
>&quot;origin&quot;</CODE
> to the item closest to the coordinates
(0,0):


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$canvas-&gt;addtag(&quot;origin&quot;, &quot;closest&quot;, 0, 0);</PRE
></BLOCKQUOTE
>


The full list of identifiers is:

<DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>above</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Assigns the tag to the item above the specified item in the display
list.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>all</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Assigns the tag to all items in the canvas.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>below</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Assigns the tag to the item below the specified item in 
the display list.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>closest</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Assigns the tag to the item closest to the specified x,y coordinate.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>enclosed</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Assigns the tag to all items that are completely enclosed within the
specified bounding box.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>overlapping</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Assigns the tag to all items that are even partially inside the
specified bounding box.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>withtag</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Assigns the tag to all items with the specified tag.</P
></DD
></DL
>&#13;</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>bind</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39371"
></A
>Binds a callback to an item.  (To bind a callback to the canvas widget
itself, you must specify Tk::bind.)</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>bbox</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39379"
></A
>Returns the bounding box of an item.  For example, to get
the bounding box for all items in the canvas:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$canvas-&gt;bbox(&quot;all&quot;);</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>itemconfigure</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39388"
></A
>Configures one of the items within the canvas.  
Works just like
the <CODE
CLASS="literal"
>configure</CODE
> method for widgets, but the first argument is the
tag name or ID for the canvas item.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>itemcget</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39396"
></A
>Gets configuration information for one of the items within the canvas.
Works just like
the <CODE
CLASS="literal"
>cget</CODE
> method for widgets, but the first argument is the
tag name or ID for the canvas item.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>move</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39404"
></A
>Moves an item on the canvas by adding the specified x and y 
distances to it.


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$canvas-&gt;move(&quot;circle1&quot;, 100, 100);</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>coords</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39412"
></A
>Gets the current x,y coordinates for an item, or
moves an item to an explicit x,y coordinate.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>lower</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39420"
></A
>Sets the priority for the item in the display list to be 
lower than the item identified by the specified tag or ID.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>raise</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39427"
></A
>Sets the priority for the item in the display list to be 
higher than the item identified by the specified tag or ID.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>delete</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39434"
></A
>Removes an item from the canvas.  You can specify as many
tags or IDs in the argument list as you want.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>find</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39442"
></A
>Finds the specified items.  The first argument can be any of:

<DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>above</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Finds the item above the specified item in the display
list.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>all</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Finds all items in the canvas.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>below</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Finds the item below the specified item in 
the display list.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>closest</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Finds the item closest to the specified x,y coordinate.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>enclosed</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Finds all items that are completely enclosed within the
specified bounding box.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>overlapping</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Finds all items that are even partially inside the
specified bounding box.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>withtag</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Finds all items with the specified tag.</P
></DD
></DL
>&#13;</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>gettags</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39485"
></A
>Retrieves a list of all tags associated with an item.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>type</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39492"
></A
>Determines the type of the specified item.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>focus</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39500"
></A
>Assigns the keyboard focus to the specified item. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>postscript</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39507"
></A
>Renders the canvas as PostScript.  Options are:

<DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>-colormap =&gt;</CODE
> \@<CODE
CLASS="replaceable"
><I
>colorcommand</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies a PostScript command for setting color values.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-colormode =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>mode</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sets the mode to <CODE
CLASS="literal"
>&quot;color&quot;</CODE
> (full color), <CODE
CLASS="literal"
>&quot;gray&quot;</CODE
> (grayscale), or <CODE
CLASS="literal"
>&quot;mono&quot;</CODE
> (black and white).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-file =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>filename</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the file to store the PostScript output.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-fontmap =&gt;</CODE
> \@<CODE
CLASS="replaceable"
><I
>fontspec</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies a font name and point size.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-height =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>size</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The height of the area to print.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-pageanchor =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>position</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The anchor position of the page.  Values are <CODE
CLASS="literal"
>&quot;center&quot;</CODE
> (default), <CODE
CLASS="literal"
>&quot;n&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;e&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;s&quot;</CODE
>, and <CODE
CLASS="literal"
>&quot;w&quot;</CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-pageheight =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>height</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The height of the printed page.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-pagewidth =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>width</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The width of the printed page.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-pagex =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>x</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The x positioning point.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-pagey =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>y</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The y positioning point.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-rotate =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>boolean</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Whether to rotate to landscape orientation.  Default is 0.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-width =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>size</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The width of the area to print.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-x =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>x</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The left edge of the canvas.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-y =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>y</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The top edge of the canvas.</P
></DD
></DL
>&#13;</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>scale</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39607"
></A
>Changes the scaling of the canvas or any individual items.  
For example, to scale the entire canvas to half its dimensions:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$canvas-&gt;scale(&quot;all&quot;, 0, 0, .5, .5);</PRE
></BLOCKQUOTE
>
&#13;</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>xview</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39615"
></A
>Manipulates the canvas area in view.  With no arguments, returns a
list of two numbers between 0 and 1, defining what portion of the
canvas is currently hidden on the left and right sides,
respectively.  With arguments, the function of <CODE
CLASS="literal"
>xview</CODE
>
changes:

<DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>moveto</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Moves the specified fraction of the text to the left
of the visible portion.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>scroll</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Scrolls the canvas left or right by the specified number of
units or pages.
Used primarily as a callback to a scrollbar; pressing on
an arrow would move by units (characters), and pressing on the
trough would move by pages.
The number is either 1 or -1, to move forwards or backwards,
respectively.</P
></DD
></DL
>&#13;</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>yview</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-39635"
></A
>Manipulates the canvas in view.  With no arguments, returns a
list of two numbers between 0 and 1, defining what portion of the
canvas is currently hidden on the top and bottom,
respectively.  With arguments, its function changes:

<DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>moveto</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Moves the specified fraction of the canvas area to the top
of the visible portion.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>scroll</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Scrolls the canvas up or down by the specified number of
units or pages.  
Used primarily as a callback to a scrollbar; pressing on
an arrow would move by units (lines), and pressing on the
trough would move by pages.
The number is either 1 or -1, to move forwards or backwards,
respectively.</P
></DD
></DL
>&#13;</P
></DD
></DL
><A
CLASS="indexterm"
NAME="AUTOID-39649"
></A
><A
CLASS="indexterm"
NAME="AUTOID-39650"
></A
><A
CLASS="indexterm"
NAME="AUTOID-39651"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch18_11.htm"
TITLE="18.11 The Text Widget"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.11 The Text Widget"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl in a Nutshell"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl in a Nutshell"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch18_13.htm"
TITLE="18.13 The Scale Widget"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.13 The Scale Widget"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>18.11 The Text Widget</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>18.13 The Scale Widget</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<p><!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
