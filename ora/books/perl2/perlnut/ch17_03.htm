<HTML
><HEAD
>
<TITLE>17.3 The HTTP Modules (Perl in a Nutshell)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl in a Nutshell"><META
NAME="DC.creator"
CONTENT="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:57:54Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-286-7"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. The LWP Library"><LINK
REL="prev"
HREF="ch17_02.htm"
TITLE="17.2 The LWP Modules"><LINK
REL="next"
HREF="ch17_04.htm"
TITLE="17.4 The HTML Module"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl in a Nutshell"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,71"
HREF="index.htm"
ALT="Perl in a Nutshell"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch17_02.htm"
TITLE="17.2 The LWP Modules"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.2 The LWP Modules"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. The LWP Library"
>Chapter 17<BR>The LWP Library</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch17_04.htm"
TITLE="17.4 The HTML Module"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.4 The HTML Module"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PNUT-CH-17-SECT-3"
>17.3 The HTTP Modules</A
></H2
><P
CLASS="para"
>The HTTP modules implement an interface to the HTTP messaging protocol used
in web transactions. Its most useful modules are HTTP::Request and HTTP::Response,
which create objects for client requests and server responses. 
Other modules provide means for manipulating headers, interpreting
server response codes, managing cookies, converting date formats, and creating
basic server applications.</P
><P
CLASS="para"
>Client applications created with LWP::UserAgent use HTTP::Request objects to
create and send requests to servers. The information returned from a server is
saved as an HTTP::Response object. Both of these objects are subclasses of
HTTP::Message, which provides general methods of creating and modifying HTTP
messages.
The header information included in HTTP messages can be represented by objects
of the HTTP::Headers class.</P
><P
CLASS="para"
>HTTP::Status includes 
functions to classify response codes into the categories of informational, successful, 
redirection, error, client error, or server error. It also exports symbolic aliases 
of HTTP response codes; one could refer to the status code of 200 as RC_OK and 
refer to 404 as RC_NOT_FOUND.</P
><P
CLASS="para"
>The HTTP::Date module converts date strings from and to machine time.
The HTTP::Daemon module can be used to create webserver applications, utilizing
the functionality of the rest of the LWP modules to communicate with clients.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-17-SECT-3.1"
>17.3.1 HTTP::Request</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-REQUESTS-HTTP-HTTPREQUEST-MODULE"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-HTTP-MODULES-HTTPREQUEST-MODULE"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-LWP-LIBRARY-HTTP-MODULES-HTTPREQUEST"
></A
><A
CLASS="indexterm"
NAME="AUTOID-33791"
></A
><A
CLASS="indexterm"
NAME="AUTOID-33793"
></A
><A
CLASS="indexterm"
NAME="AUTOID-33795"
></A
>This module summarizes a web client's request. For a simple GET request, 
you define an object with the GET method and assign a URL to apply it to.
Basic headers would be filled in automatically by LWP.
For a POST or PUT request, you might want to specify a custom HTTP::Headers 
object for the request, or use the contents of a file for an entity body. 
Since HTTP::Request inherits everything in HTTP::Message, you can use the header and 
entity body manipulation methods from HTTP::Message in HTTP::Request objects. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-33798"
></A
>The constructor for HTTP::Request looks like this:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$req = http::Request-&gt;new (<EM
CLASS="emphasis"
>method</EM
>, <EM
CLASS="emphasis"
>url</EM
>, [<EM
CLASS="emphasis"
>$header</EM
>, [<EM
CLASS="emphasis"
>content</EM
>]]);</PRE
></BLOCKQUOTE
>


The method and URL values for the request are required parameters. The header and
content arguments are not required, nor even necessary for all requests. The parameters
are described as follows:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="replaceable"
><I
>method</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A string specifying the HTTP request method. GET, HEAD, and POST are the most
commonly used. Other methods defined in the HTTP specification such as PUT and DELETE
are not supported by most servers.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="replaceable"
><I
>url</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The address and resource name of the information you are requesting. This
argument may be either a string containing an absolute URL (the hostname is
required), or a URI::URL object that stores all the information about the URL.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="replaceable"
><I
>$header</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A reference to an HTTP::Headers object.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="replaceable"
><I
>content</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A scalar that specifies the entity body of the request. If omitted, the entity body is
empty.</P
></DD
></DL
><P
CLASS="para"
>The following methods can be used on HTTP::Request objects: 
<UL
CLASS="nutlist"
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_029.htm#"
TITLE="Reference: as_string"
>as_string</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_030.htm#"
TITLE="Reference: method"
>method</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_031.htm#"
TITLE="Reference: url"
>url</A
></LI
></UL
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-17-SECT-3.2"
>17.3.2 HTTP::Response</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-HTTP-MODULES-HTTPRESPONSE-MODULE"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-LWP-LIBRARY-HTTP-MODULES-HTTPRESPONSE"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-RESPONSES-HTTP"
></A
>Responses from a web server are described by HTTP::Response objects. 
An HTTP response message contains a status line, headers, and any 
content data that was requested by the client (like an HTML file). The status
line is the minimum requirement for a response. It contains the version of HTTP
that the server is running, a status code indicating the success, failure, or other
condition the request received from the server, and a short message describing
the status code.</P
><P
CLASS="para"
>If LWP has 
problems fulfilling your request, it internally generates an HTTP::Response object 
and fills in an appropriate response code. In the context of web
client programming, 
you'll usually get an HTTP::Response object from LWP::UserAgent and LWP::RobotUA. </P
><P
CLASS="para"
>If you plan to write extensions to LWP or to a web server or proxy server, you might 
use HTTP::Response to generate your own responses.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-33882"
></A
>The constructor for HTTP::Response looks like this:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$resp = HTTP::Response-&gt;new (<EM
CLASS="emphasis"
>rc</EM
>, [<EM
CLASS="emphasis"
>msg</EM
>, [<EM
CLASS="emphasis"
>header</EM
>, [<EM
CLASS="emphasis"
>content</EM
>]]]);</PRE
></BLOCKQUOTE
>


In its simplest form, an HTTP::Response object can contain just a response code. If 
you would like to specify a more detailed message than &quot;OK&quot; or &quot;Not found,&quot; you can 
specify a text description of the response code as the second parameter. 
As a third parameter, you can pass a reference to an HTTP::Headers object to specify 
the response headers. Finally, you can also include an entity body in the fourth 
parameter as a scalar.</P
><P
CLASS="para"
>For client applications, it is unlikely that you will build your own response object
with the constructor for this class. You receive a client object when you use the <CODE
CLASS="literal"
>request</CODE
>
method on an LWP::UserAgent object, for example:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ua = LWP::UserAgent-&gt;new;
$req = HTTP::Request-&gt;new(GET, $url)
$resp = $ua-&gt;request($req);</PRE
></BLOCKQUOTE
>


The server's response is contained in the object <CODE
CLASS="literal"
>$resp</CODE
>. When you have this object, you
can use the HTTP::Response methods to get the information about the response. Since
HTTP::Response is a subclass of HTTP::Message, you can also use methods from that
class on response objects. See 
<A
CLASS="xref"
HREF="ch17_03.htm"
TITLE="HTTP::Message"
>Section 17.3.8, "HTTP::Message</A
>&quot; later in this chapter for 
a description of its methods.</P
><P
CLASS="para"
>The following methods can be used on objects created by HTTP::Response:
<UL
CLASS="nutlist"
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_032.htm#"
TITLE="Reference: as_string"
>as_string</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_033.htm#"
TITLE="Reference: base"
>base</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_034.htm"
TITLE="Reference: code"
>code</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_035.htm"
TITLE="Reference: current_age"
>current_age</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_036.htm#"
TITLE="Reference: error_as_HTML"
>error_as_HTML</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_037.htm#"
TITLE="Reference: freshness_lifetime"
>freshness_lifetime</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_038.htm#"
TITLE="Reference: fresh_until"
>fresh_until</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_039.htm#"
TITLE="Reference: is_error"
>is_error</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_040.htm#"
TITLE="Reference: is_fresh"
>is_fresh</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_041.htm#"
TITLE="Reference: is_info"
>is_info</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_042.htm#"
TITLE="Reference: is_redirect"
>is_redirect</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_043.htm#"
TITLE="Reference: is_success"
>is_success</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_044.htm#"
TITLE="Reference: message"
>message</A
></LI
></UL
><A
CLASS="indexterm"
NAME="AUTOID-34028"
></A
><A
CLASS="indexterm"
NAME="AUTOID-34029"
></A
><A
CLASS="indexterm"
NAME="AUTOID-34030"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-17-SECT-3.3"
>17.3.3 HTTP::Headers</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-HTTP-MODULES-HTTPHEADERS-MODULE"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-LWP-LIBRARY-HTTP-MODULES-HTTPHEADERS"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-HEADERS-HTTP"
></A
>This module deals with HTTP header definition and manipulation. You can 
use these methods on HTTP::Request and HTTP::Response objects to retrieve headers they
contain, or to set new headers and values for new objects you are building.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-34044"
></A
>The constructor for an HTTP::Headers object looks like this:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$h = HTTP::Headers-&gt;new([<EM
CLASS="emphasis"
>name</EM
> =&gt; <EM
CLASS="emphasis"
>val</EM
>],...);</PRE
></BLOCKQUOTE
>


This code creates a new headers object. You can set headers in the constructor by
providing a header name and its value.  Multiple <CODE
CLASS="replaceable"
><I
>name</I
></CODE
><CODE
CLASS="literal"
>=&gt;</CODE
><CODE
CLASS="replaceable"
><I
>val</I
></CODE
>
pairs can be used to set multiple headers.</P
><P
CLASS="para"
>The following methods can be used by objects in the HTTP::Headers class. These
methods can also be used on objects from HTTP::Request and HTTP::Response, since
they inherit from HTTP::Headers. In fact, most header manipulation will
occur on the request and response objects in LWP applications.
<UL
CLASS="nutlist"
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_045.htm"
TITLE="Reference: clone"
>clone</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_046.htm#"
TITLE="Reference: header"
>header</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_047.htm#"
TITLE="Reference: push_header"
>push_header</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_048.htm#"
TITLE="Reference: remove_header"
>remove_header</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_049.htm#"
TITLE="Reference: scan"
>scan</A
></LI
></UL
></P
><P
CLASS="para"
>The HTTP::Headers class allows you to use a number of convenience methods on
header objects to set (or read) common field values. If you supply a value
for an argument, that value will be set for the field. The previous value
for the header is always returned. The following methods are available:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>date
expires
if_modified_since
if_unmodified_since
last_modified
content_type
content_encoding
content_length
content_language
title
user_agent
server
from
referrer
www_authenticate
proxy_authenticate
authorization
proxy_authorization
authorization_basic
proxy_authorization_basic</PRE
></BLOCKQUOTE
>

<A
CLASS="indexterm"
NAME="AUTOID-34115"
></A
><A
CLASS="indexterm"
NAME="AUTOID-34116"
></A
><A
CLASS="indexterm"
NAME="AUTOID-34117"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-17-SECT-3.4"
>17.3.4 HTTP::Status</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-HTTP-MODULES-HTTPSTATUS-MODULE"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-LWP-LIBRARY-HTTP-MODULES-HTTPSTATUS"
></A
>This module provides methods to determine the type of a response code. 
It also exports a list of mnemonics that can be used by the programmer to 
refer to a status code.</P
><P
CLASS="para"
>The following methods are used on response objects:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>is_info</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-34135"
></A
>Returns true when the response code is 100 through 199.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>is_success</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-34143"
></A
>Returns true when the response code is 200 through 299.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>is_redirect</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-34151"
></A
>Returns true when the response code is 300 through 399.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>is_client_error</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-34159"
></A
>Returns true when the response code is 400 through 499.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>is_server_error</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-34166"
></A
>Returns true when the response code is 500 through 599.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>is_error</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-34173"
></A
>Returns true when the response code is 400 through 599. When an error occurs, 
you might want to use <CODE
CLASS="literal"
>error_as_HTML</CODE
> to generate an HTML explanation of the error.</P
></DD
></DL
><P
CLASS="para"
>HTTP::Status exports the following constant functions for you to use
as mnemonic substitutes for status codes.
For example, you could do something like:<A
CLASS="indexterm"
NAME="AUTOID-34178"
></A
>


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>if ($rc = RC_OK) {....}</PRE
></BLOCKQUOTE
>


Here are the mnemonics, followed by the status codes they represent:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>RC_CONTINUE (100)
RC_SWITCHING_PROTOCOLS (101)
RC_OK (200)
RC_CREATED (201)
RC_ACCEPTED (202)
RC_NON_AUTHORITATIVE_INFORMATION (203)
RC_NO_CONTENT (204)
RC_RESET_CONTENT (205)
RC_PARTIAL_CONTENT (206)
RC_MULTIPLE_CHOICES (300)
RC_MOVED_PERMANENTLY (301)
RC_MOVED_TEMPORARILY (302)
RC_SEE_OTHER (303)
RC_NOT_MODIFIED (304)
RC_USE_PROXY (305)
RC_BAD_REQUEST (400)
RC_UNAUTHORIZED (401)
RC_PAYMENT_REQUIRED (402)
RC_FORBIDDEN (403)
RC_NOT_FOUND (404)
RC_METHOD_NOT_ALLOWED (405)
RC_NOT_ACCEPTABLE (406)
RC_PROXY_AUTHENTICATION_REQUIRED (407)
RC_REQUEST_TIMEOUT (408)
RC_CONFLICT (409)
RC_GONE (410)
RC_LENGTH_REQUIRED (411)
RC_PRECONDITION_FAILED (412)
RC_REQUEST_ENTITY_TOO_LARGE (413)
RC_REQUEST_URI_TOO_LARGE (414)
RC_UNSUPPORTED_MEDIA_TYPE (415)
RC_REQUEST_RANGE_NOT_SATISFIABLE (416)
RC_INTERNAL_SERVER_ERROR (500)
RC_NOT_IMPLEMENTED (501)
RC_BAD_GATEWAY (502)
RC_SERVICE_UNAVAILABLE (503)
RC_GATEWAY_TIMEOUT (504)
RC_HTTP_VERSION_NOT_SUPPORTED (505)</PRE
></BLOCKQUOTE
>

<A
CLASS="indexterm"
NAME="AUTOID-34182"
></A
><A
CLASS="indexterm"
NAME="AUTOID-34183"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-17-SECT-3.5"
>17.3.5 HTTP::Date</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-34187"
></A
><A
CLASS="indexterm"
NAME="AUTOID-34190"
></A
><A
CLASS="indexterm"
NAME="AUTOID-34194"
></A
>The HTTP::Date module is useful when you want to process a date string.
It exports two functions that convert date strings to and from standard
time formats:

<UL
CLASS="nutlist"
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_050.htm#"
TITLE="Reference: time2str"
>time2str</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_051.htm#"
TITLE="Reference: str2time"
>str2time</A
></LI
></UL
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-17-SECT-3.6"
>17.3.6 HTTP::Cookies</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-COOKIES-HTTPCOOKIES-MODULE"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-HTTP-MODULES-HTTPCOOKIES-MODULE"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-LWP-LIBRARY-HTTP-MODULES-HTTPCOOKIES"
></A
>HTTP cookies provide a mechanism for preserving information about a client or user
across several different visits to a site or page. The &quot;cookie&quot; is a name-value
pair sent to the client on its initial visit to a page. This cookie is stored by
the client and sent back in the request upon revisit to the same page.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-34234"
></A
>A server initializes a cookie with the Set-Cookie header. Set-Cookie sets
the name and value of a cookie, as well as other parameters such as how
long the cookie is valid and the range of URLs to which the cookie applies.
Each cookie (a single name-value pair) is sent in its own Set-Cookie header,
so if there is more than one cookie being sent to a client, multiple Set-Cookie
headers are sent in the response. Two Set-Cookie headers may be used
in server responses: Set-Cookie is defined in the original Netscape
cookie specification, and Set-Cookie2 is the latest, IETF-defined<A
CLASS="indexterm"
NAME="AUTOID-34236"
></A
>
header. Both header styles are supported by HTTP::Cookies. The latest
browsers also support both styles.</P
><P
CLASS="para"
>If a client visits a page for which it has a valid cookie stored, the client <A
CLASS="indexterm"
NAME="AUTOID-34239"
></A
>
sends the cookie in the request with the Cookie header. This header's value
contains any name-value pairs that apply to the URL.
Multiple cookies are separated by semicolons in the header.</P
><P
CLASS="para"
>The HTTP::Cookies module is used to retrieve, return, and manage the cookies
used by an LWP::UserAgent client application. Setting cookies from LWP-created server
requires only the coding of the proper response headers sent by an HTTP::Daemon
server application. HTTP::Cookies is not designed to be used in setting cookies
on the server side, although you may find use for it in managing sent cookies.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-34243"
></A
>The <CODE
CLASS="literal"
>new</CODE
> constructor for HTTP::Cookies creates an object called a cookie
jar, which represents a collection of saved cookies usually read from a file.
Methods on the cookie jar object allow you to add new cookies or to send cookie
information in a client request to a specific URL. The constructor may take
optional parameters, as shown in the following example:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$cjar = HTTP::Cookies-&gt;new( file =&gt; 'cookies.txt', 
                            autosave =&gt; 1,
                            ignore_discard =&gt; 0 );</PRE
></BLOCKQUOTE
>


The cookie jar object <CODE
CLASS="literal"
>$cjar</CODE
> created here contains any cookie information
stored in the file <EM
CLASS="emphasis"
>cookies.txt</EM
>. The <CODE
CLASS="literal"
>autosave</CODE
> parameter takes a boolean
value which determines if the state of the cookie jar is saved to the file upon
destruction of the object. <CODE
CLASS="literal"
>ignore_discard</CODE
> also takes a boolean value to determine if
cookies marked to be discarded are still saved to the file.</P
><P
CLASS="para"
>Cookies received by a client are added to the cookie jar with the <CODE
CLASS="literal"
>extract_cookies</CODE
> method.
This method searches an HTTP::Response object for Set-Cookie and Set-Cookie2 headers
and adds them to the cookie jar. Cookies are sent in a client request using the
<CODE
CLASS="literal"
>add-cookie-header</CODE
> method. This method takes an HTTP::Request object with
the URL component already set, and if the URL matches any entries in the cookie jar,
adds the appropriate Cookie headers to the request.</P
><P
CLASS="para"
>These methods can be used on a cookie jar object created by HTTP::Cookies:</P
><UL
CLASS="nutlist"
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_052.htm#"
TITLE="Reference: add_cookie_header"
>add_cookie_header</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_053.htm#"
TITLE="Reference: as_string"
>as_string</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_054.htm"
TITLE="Reference: clear"
>clear</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_055.htm#"
TITLE="Reference: extract_cookies"
>extract_cookies</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_056.htm"
TITLE="Reference: load"
>load</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_057.htm#"
TITLE="Reference: revert"
>revert</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_058.htm"
TITLE="Reference: save"
>save</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_059.htm#"
TITLE="Reference: set_cookie"
>set_cookie</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_060.htm#"
TITLE="Reference: scan"
>scan</A
></LI
></UL
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PNUT-CH-17-SECT-3.6.1"
>17.3.6.1 HTTP::Cookies::Netscape</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-34439"
></A
><A
CLASS="indexterm"
NAME="AUTOID-34442"
></A
><A
CLASS="indexterm"
NAME="AUTOID-34445"
></A
>The HTTP::Cookies class contains one subclass that supports Netscape-style
cookies within a cookie jar object. Netscape-style cookies were defined in the
original cookie specification for Navigator 1.1, which outlined the syntax
for the Cookie and Set-Cookie HTTP headers. Netscape cookie headers are different
from the newer Set-Cookie2-style cookies in that they don't support as many
additional parameters when a cookie is set. The Cookie header also does not use
a version-number attribute. Many browsers and servers still use the original Netscape
cookies, and the Netscape subclass of HTTP::Cookies can be used to support this style.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-34450"
></A
>The <CODE
CLASS="literal"
>new</CODE
> constructor for this subclass creates a Netscape-compatible
cookie jar object like this:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$njar = HTTP::Cookies::Netscape-&gt;new(
                  File     =&gt; &quot;$ENV{HOME}/.netscape/cookies&quot;,
                  AutoSave =&gt; 1 );</PRE
></BLOCKQUOTE
>


The methods described above can be used on this object, although many of the
parameters used in Set-Cookie2 headers will simply be lost when cookies are
saved to the cookie jar.<A
CLASS="indexterm"
NAME="AUTOID-34455"
></A
><A
CLASS="indexterm"
NAME="AUTOID-34456"
></A
><A
CLASS="indexterm"
NAME="AUTOID-34457"
></A
></P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-17-SECT-3.7"
>17.3.7 HTTP::Daemon</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-HTTP-MODULES-HTTPDAEMON-MODULE"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-LWP-LIBRARY-HTTP-MODULES-HTTPDAEMON"
></A
>The HTTP::Daemon module creates HTTP server applications. The module provides objects based
on the IO::Socket::INET class that can listen on a socket for client requests and send
server responses. The objects implemented by the module are HTTP 1.1 servers. Client requests
are stored as HTTP::Request objects, and all the methods for that class can be used to obtain
information about the request. HTTP::Response objects can be used to send information back to
the client.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-34469"
></A
>An HTTP::Daemon object is created by using the <CODE
CLASS="literal"
>new</CODE
> constructor. Since the base class for this
object is IO::Socket::INET, the parameters used in that class's constructor are the same here. For
example:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$d = HTTP::Daemon-&gt;new ( LocalAddr =&gt; 'maude.oreilly.com',
                         LocalPort =&gt; 8888,
                         Listen =&gt; 5 );</PRE
></BLOCKQUOTE
>


The HTTP::Daemon object is a server socket that automatically listens for requests on the
specified port (or on the default port if none is given).
When a client request is received, the object uses the <CODE
CLASS="literal"
>accept</CODE
> method to create a connection
with the client on the network. 


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$d = HTTP::Daemon-&gt;new;
while ( $c = $d-&gt;accept ) {
     $req = $c-&gt;get_request;
     # process request and send response here
     }
$c = undef;   # don't forget to close the socket</PRE
></BLOCKQUOTE
>

<A
CLASS="indexterm"
NAME="AUTOID-34476"
></A
>
The <CODE
CLASS="literal"
>accept</CODE
> method returns a reference to a new object of the HTTP::Daemon::ClientConn
class. This class is also based on IO::Socket::INET and is used to extract the request message and send
the response and any requested file content.</P
><P
CLASS="para"
>The sockets created by both HTTP::Daemon and HTTP::Daemon::ClientConn work the same
way as those in IO::Socket::INET. The methods are also the same except for some slight variations
in usage. The methods for the HTTP::Daemon classes are listed in the sections below and include
the adjusted IO::Socket::INET methods. For more detailed information about sockets and the
IO::Socket classes and methods, see <A
CLASS="xref"
HREF="ch13_01.htm"
TITLE="Sockets"
>Chapter 13</A
>.</P
><P
CLASS="para"
>The following methods can be used on HTTP::Daemon objects:</P
><UL
CLASS="nutlist"
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_061.htm"
TITLE="Reference: accept"
>accept</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_062.htm#"
TITLE="Reference: url"
>url</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_063.htm#"
TITLE="Reference: product_tokens"
>product_tokens</A
></LI
></UL
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PNUT-CH-17-SECT-3.7.1"
>17.3.7.1 HTTP::Daemon::ClientConn methods</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-HTTP-MODULES-HTTPDAEMONCLIENTCONN-MODULE"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-LWP-LIBRARY-HTTP-MODULES-HTTPDAEMONCLIENTCONN"
></A
>The following methods can be used on HTTP::Daemon::ClientConn objects:</P
><UL
CLASS="nutlist"
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_064.htm#"
TITLE="Reference: get_request"
>get_request</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_065.htm#"
TITLE="Reference: antique_client"
>antique_client</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_066.htm#"
TITLE="Reference: send_status_line"
>send_status_line</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_067.htm#"
TITLE="Reference: send_basic_header"
>send_basic_header</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_068.htm#"
TITLE="Reference: send_response"
>send_response</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_069.htm#"
TITLE="Reference: send_redirect"
>send_redirect</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_070.htm#"
TITLE="Reference: send_error"
>send_error</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_071.htm#"
TITLE="Reference: send_file_response"
>send_file_response</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_072.htm"
TITLE="Reference: send_file"
>send_file</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_073.htm#"
TITLE="Reference: daemon"
>daemon</A
></LI
></UL
><A
CLASS="indexterm"
NAME="AUTOID-34661"
></A
><A
CLASS="indexterm"
NAME="AUTOID-34662"
></A
><A
CLASS="indexterm"
NAME="AUTOID-34663"
></A
><A
CLASS="indexterm"
NAME="AUTOID-34664"
></A
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-17-SECT-3.8"
>17.3.8 HTTP::Message</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-HTTP-MODULES-HTTPMESSAGE-MODULE"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-LWP-LIBRARY-HTTP-MODULES-HTTPMESSAGE"
></A
>HTTP::Message is the generic base-class for HTTP::Request and HTTP::Response. It provides
a couple of methods that are used on both classes. The constructor for this class
is used internally by the Request and Response classes, so you will probably
not need to use it. Methods defined by the HTTP::Headers class will also work
on Message objects.</P
><UL
CLASS="nutlist"
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_074.htm#"
TITLE="Reference: add_content"
>add_content</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_075.htm"
TITLE="Reference: clone"
>clone</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_076.htm"
TITLE="Reference: content"
>content</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_077.htm"
TITLE="Reference: content_ref"
>content_ref</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_078.htm#"
TITLE="Reference: headers"
>headers</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c17_079.htm#"
TITLE="Reference: protocol"
>protocol</A
></LI
></UL
><A
CLASS="indexterm"
NAME="AUTOID-34743"
></A
><A
CLASS="indexterm"
NAME="AUTOID-34744"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch17_02.htm"
TITLE="17.2 The LWP Modules"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.2 The LWP Modules"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl in a Nutshell"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl in a Nutshell"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch17_04.htm"
TITLE="17.4 The HTML Module"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.4 The HTML Module"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>17.2 The LWP Modules</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>17.4 The HTML Module</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<p><!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
