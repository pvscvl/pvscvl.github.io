<HTML
><HEAD
>
<TITLE>Reference: struct (Perl in a Nutshell)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl in a Nutshell"><META
NAME="DC.creator"
CONTENT="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:43:53Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-286-7"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_32.htm"
TITLE="8.32 Class::Struct"><LINK
REL="prev"
HREF="ch08_32.htm"
TITLE="8.32 Class::Struct"><LINK
REL="next"
HREF="ch08_32.htm"
TITLE="8.32 Class::Struct"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl in a Nutshell"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,71"
HREF="index.htm"
ALT="Perl in a Nutshell"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch08_32.htm"
TITLE="8.32 Class::Struct"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.32 Class::Struct"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. Standard Modules"
>Chapter 8<BR>Standard Modules</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch08_32.htm"
TITLE="8.32 Class::Struct"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.32 Class::Struct"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="NUTENTRY"
><H2
CLASS="nutentry"
><A
CLASS="term"
NAME="AUTOID-14250"
>struct</A
></H2
><PRE
CLASS="nutsynopsis"
>struct (<CODE
CLASS="replaceable"
><I
>paramlist</I
></CODE
>)</PRE
><DL
CLASS="nutentrybody"
><P
CLASS="para"
>Creates a class, with object methods for each element of the class. The
parameter list <EM
CLASS="emphasis"
>paramlist</EM
> can take one of three forms:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>struct( CLASS_NAME =&gt; [ ELEMENT_LIST ]); # object is array-based
struct( CLASS_NAME =&gt; { ELEMENT_LIST }); # object is hash-based
struct( ELEMENT_LIST );     # class name is current package name
                            # and object is array-based</PRE
></BLOCKQUOTE
>


The array-based element lists are faster and smaller, but the hash-based
list is more flexible. The class that is created can be a subclass of
the UNIVERSAL class, but not of any other class.</P
><DIV
CLASS="refsect2"
><H3
CLASS="refsect2"
><A
CLASS="title"
NAME="AUTOID-14258"
>Element list</A
></H3
><P
CLASS="para"
>The items in the ELEMENT_LIST are of the form:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>NAME =&gt; TYPE, ...</PRE
></BLOCKQUOTE
>


where each <CODE
CLASS="literal"
>NAME=&gt;TYPE</CODE
> pair declares one element of the <CODE
CLASS="literal"
>struct</CODE
>. Each element
name is defined as an accessor method, unless a method 
is explicitly defined with that name. (In that case, a warning is issued if the
<EM
CLASS="emphasis"
>-w</EM
> flag is set.)</P
></DIV
><DIV
CLASS="refsect2"
><H3
CLASS="refsect2"
><A
CLASS="title"
NAME="AUTOID-14265"
>Element types and accessor methods</A
></H3
><P
CLASS="para"
>There are four possible element types, each represented by a string.
Each string may start with an asterisk (<CODE
CLASS="literal"
>*</CODE
>), indicating that a reference
to the element is to be returned. The type of an
element determines the accessor method provided. The following list shows
the element types, the strings that represent them, and the accessor:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>array (</EM
><CODE
CLASS="literal"
>@</CODE
> <EM
CLASS="emphasis"
>or</EM
> <CODE
CLASS="literal"
>*@</CODE
><EM
CLASS="emphasis"
>)</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The element is an array, initialized to <CODE
CLASS="literal"
>()</CODE
>.
With no argument, the accessor returns a reference to the element's
whole array.
With one or two arguments, the first argument is an index specifying
one element of the array; the second argument, if present, is the value
to be assigned to that array element.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>class (</EM
><CODE
CLASS="literal"
>Class_Name</CODE
> <EM
CLASS="emphasis"
>or</EM
> <CODE
CLASS="literal"
>*Class_Name</CODE
><EM
CLASS="emphasis"
>)</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The element's value must be a reference blessed to the named class
or to one of its subclasses. The element is initialized to the
result of calling the <CODE
CLASS="literal"
>new</CODE
> constructor of the named class.
The accessor's argument, if any, is the value to be 
assigned to the element. The
accessor <CODE
CLASS="literal"
>croak</CODE
>s if it's not an appropriate object reference.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>hash (</EM
><CODE
CLASS="literal"
>%</CODE
> <EM
CLASS="emphasis"
>or</EM
> <CODE
CLASS="literal"
>*%</CODE
><EM
CLASS="emphasis"
>)</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The element is a hash, initialized to <CODE
CLASS="literal"
>()</CODE
>.
With no argument, the accessor returns a reference to the element's
whole hash.
With one or two arguments, the first argument is a key specifying
one element of the hash; the second argument, if present, is the value
to be assigned to that hash element.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>scalar (</EM
><CODE
CLASS="literal"
>$</CODE
> <EM
CLASS="emphasis"
>or</EM
> <CODE
CLASS="literal"
>*$</CODE
><EM
CLASS="emphasis"
>)</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The element is a scalar, initialized to <CODE
CLASS="literal"
>undef</CODE
>.
The accessor's argument, if any, is assigned to the element.</P
></DD
></DL
></DIV
></DL
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch08_32.htm"
TITLE="8.32 Class::Struct"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.32 Class::Struct"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl in a Nutshell"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl in a Nutshell"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch08_32.htm"
TITLE="8.32 Class::Struct"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.32 Class::Struct"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.32 Class::Struct</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>8.32 Class::Struct</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<p><!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
