<HTML
><HEAD
>
<TITLE>4.3 Statements (Perl in a Nutshell)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl in a Nutshell"><META
NAME="DC.creator"
CONTENT="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:30:43Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-286-7"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. The Perl Language"><LINK
REL="prev"
HREF="ch04_02.htm"
TITLE="4.2 Data Types and Variables"><LINK
REL="next"
HREF="ch04_04.htm"
TITLE="4.4 Special Variables"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl in a Nutshell"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,71"
HREF="index.htm"
ALT="Perl in a Nutshell"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_02.htm"
TITLE="4.2 Data Types and Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2 Data Types and Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. The Perl Language"
>Chapter 4<BR>The Perl Language</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_04.htm"
TITLE="4.4 Special Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.4 Special Variables"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PNUT-CH-4-SECT-3"
>4.3 Statements</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="PNUT-CH-4-IX-STATEMENTS"
></A
>A simple statement is an expression evaluated for its side effects. Every
simple statement must end in a semicolon, unless it is the 
final statement in a block. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2912"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2914"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2917"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2920"
></A
>A sequence of statements that defines a scope is called a <EM
CLASS="emphasis"
>block</EM
>.
Generally, a block is delimited by braces, or <CODE
CLASS="literal"
>{ }</CODE
>.
Compound statements are built out of expressions and blocks. 
A conditional expression is evaluated
to determine whether a statement block will be executed. 
Compound statements are defined in terms of
blocks, not statements, which means that
braces are required. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2926"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2929"
></A
>Any block can be given a label.
<EM
CLASS="emphasis"
>Labels</EM
> are identifiers that follow the variable-naming rules (i.e., 
they begin with a letter or underscore, and can contain alphanumerics and 
underscores). 
They are placed just before the block and are followed by a colon, 
like <CODE
CLASS="literal"
>SOMELABEL</CODE
> here:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>SOMELABEL: {
  ...<EM
CLASS="emphasis"
>statements</EM
>...
  }</PRE
></BLOCKQUOTE
>


By convention, labels are all uppercase, so as not to conflict with
reserved words. Labels are used with the loop-control
commands <CODE
CLASS="literal"
>next</CODE
>, <CODE
CLASS="literal"
>last</CODE
>, and <CODE
CLASS="literal"
>redo</CODE
> to alter 
the flow of execution
in your programs. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-4-SECT-3.1"
>4.3.1 Conditionals and Loops</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2942"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2944"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2946"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2948"
></A
>The <CODE
CLASS="literal"
>if</CODE
> and <CODE
CLASS="literal"
>unless</CODE
> statements execute blocks of code depending
on whether a condition is met. These statements take the following forms:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>if (<EM
CLASS="emphasis"
>expression</EM
>) {<EM
CLASS="emphasis"
>block</EM
>} else {<EM
CLASS="emphasis"
>block</EM
>}

unless (<EM
CLASS="emphasis"
>expression</EM
>) {<EM
CLASS="emphasis"
>block</EM
>} else {<EM
CLASS="emphasis"
>block</EM
>}

if (<EM
CLASS="emphasis"
>expression1</EM
>) {<EM
CLASS="emphasis"
>block</EM
>}
elsif (<EM
CLASS="emphasis"
>expression2</EM
>) {<EM
CLASS="emphasis"
>block</EM
>}
  ...
elsif (<EM
CLASS="emphasis"
>lastexpression</EM
>) {<EM
CLASS="emphasis"
>block</EM
>}
else {<EM
CLASS="emphasis"
>block</EM
>}</PRE
></BLOCKQUOTE
>
&#13;</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PNUT-CH-4-SECT-3.1.1"
>4.3.1.1 while loops</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2969"
></A
>The <CODE
CLASS="literal"
>while</CODE
> statement repeatedly executes a block as long as
its conditional expression is true.
For example: 


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>while (&lt;INFILE&gt;) {
    print OUTFILE, &quot;$_\n&quot;;
}</PRE
></BLOCKQUOTE
>


This loop reads each line from the file opened with the filehandle INFILE
and prints them to the OUTFILE filehandle. The loop will cease when
it encounters an end-of-file.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2974"
></A
>If the word <CODE
CLASS="literal"
>while</CODE
> is replaced by the word <CODE
CLASS="literal"
>until</CODE
>, the
sense of the test is reversed. The conditional is still tested before
the first iteration, though.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2979"
></A
>The <CODE
CLASS="literal"
>while</CODE
> statement has an optional extra block on the end called a
<CODE
CLASS="literal"
>continue</CODE
> block. This block is executed before every successive
iteration of the loop, even if the main <CODE
CLASS="literal"
>while</CODE
> block is exited<A
CLASS="indexterm"
NAME="AUTOID-2984"
></A
>
early by the loop control command <CODE
CLASS="literal"
>next</CODE
>. However, the <CODE
CLASS="literal"
>continue</CODE
> block
is not executed if the main block is exited by a <CODE
CLASS="literal"
>last</CODE
> statement.
The <CODE
CLASS="literal"
>continue</CODE
> block is always executed before the conditional is evaluated again.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PNUT-CH-4-SECT-3.1.2"
>4.3.1.2 for loops</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2993"
></A
>The <CODE
CLASS="literal"
>for</CODE
> loop has three semicolon-separated expressions within
its parentheses. These three expressions function respectively as the
initialization, the condition, and the re-initialization expressions of
the loop.   The <CODE
CLASS="literal"
>for</CODE
> loop can be defined in terms
of the corresponding <CODE
CLASS="literal"
>while</CODE
> loop:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>for ($i = 1; $i &lt; 10; $i++) {
    ...
}</PRE
></BLOCKQUOTE
>


is the same as:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$i = 1;
while ($i &lt; 10) {
    ...
}
continue {
    $i++;
}</PRE
></BLOCKQUOTE
>
&#13;</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PNUT-CH-4-SECT-3.1.3"
>4.3.1.3 foreach loops</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3003"
></A
>The <CODE
CLASS="literal"
>foreach</CODE
> loop iterates over a list value and sets the
control variable (<CODE
CLASS="replaceable"
><I
>var</I
></CODE
>) to be each element of the list in turn:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>foreach <EM
CLASS="emphasis"
>var</EM
> (<EM
CLASS="emphasis"
>list</EM
>) {
    ...
}</PRE
></BLOCKQUOTE
>


Like the <CODE
CLASS="literal"
>while</CODE
> statement, the <CODE
CLASS="literal"
>foreach</CODE
> statement can also 
take a <CODE
CLASS="literal"
>continue</CODE
> block.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PNUT-CH-4-SECT-3.1.4"
>4.3.1.4 Modifiers</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3016"
></A
><A
CLASS="indexterm"
NAME="AUTOID-3018"
></A
><A
CLASS="indexterm"
NAME="AUTOID-3020"
></A
><A
CLASS="indexterm"
NAME="AUTOID-3022"
></A
><A
CLASS="indexterm"
NAME="AUTOID-3024"
></A
><A
CLASS="indexterm"
NAME="AUTOID-3026"
></A
>Any simple statement may be followed by a single modifier
that gives the statement a conditional or looping mechanism. This syntax 
provides 
a simpler and often more elegant method than using the corresponding compound
statements. These modifiers are:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
><EM
CLASS="emphasis"
>statement</EM
> if <EM
CLASS="emphasis"
>EXPR</EM
>;
<EM
CLASS="emphasis"
>statement</EM
> unless <EM
CLASS="emphasis"
>EXPR</EM
>;
<EM
CLASS="emphasis"
>statement</EM
> while <EM
CLASS="emphasis"
>EXPR</EM
>;
<EM
CLASS="emphasis"
>statement</EM
> until <EM
CLASS="emphasis"
>EXPR</EM
>;</PRE
></BLOCKQUOTE
>


For example:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$i = $num if ($num &lt; 50); # $i will be less than 50
$j = $cnt unless ($cnt &lt; 100); # $j will equal 100 or greater
$lines++ while &lt;FILE&gt;;
print &quot;$_\n&quot; until /The end/;</PRE
></BLOCKQUOTE
>


The conditional is evaluated first with the <CODE
CLASS="literal"
>while</CODE
> and <CODE
CLASS="literal"
>until</CODE
> modifiers 
except when applied to a<A
CLASS="indexterm"
NAME="AUTOID-3040"
></A
>
<CODE
CLASS="literal"
>do {}</CODE
> statement, in
which case the block executes once before the conditional is evaluated.
For example:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>do {
    $line = &lt;STDIN&gt;;
    ...
} until $line eq &quot;.\n&quot;;</PRE
></BLOCKQUOTE
>


For more information on <CODE
CLASS="literal"
>do</CODE
>, see <A
CLASS="xref"
HREF="ch05_01.htm"
TITLE="Function Reference"
>Chapter 5, <CITE
CLASS="chapter"
>Function Reference</CITE
></A
>.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PNUT-CH-4-SECT-3.1.5"
>4.3.1.5 Loop control</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3049"
></A
><A
CLASS="indexterm"
NAME="AUTOID-3052"
></A
>You can put a label on a loop to give it a name. The
loop's label
identifies the loop for the loop-control commands <CODE
CLASS="literal"
>next</CODE
>,
<CODE
CLASS="literal"
>last</CODE
>, and <CODE
CLASS="literal"
>redo</CODE
>. 


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>LINE: while (&lt;SCRIPT&gt;) {
    print;
    next LINE if /^#/;      # discard comments
    }</PRE
></BLOCKQUOTE
>


The syntax for the loop-control commands is:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>last <EM
CLASS="emphasis"
>label</EM
>
next <EM
CLASS="emphasis"
>label</EM
>
redo <EM
CLASS="emphasis"
>label</EM
></PRE
></BLOCKQUOTE
>


If the label is omitted,
the loop-control command refers to the innermost enclosing loop. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3064"
></A
>The <CODE
CLASS="literal"
>last</CODE
> command is like the <CODE
CLASS="literal"
>break</CODE
> statement in C (as used in
loops); it immediately exits the loop in question. 
The <CODE
CLASS="literal"
>continue</CODE
>
block, if any, is not executed. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3070"
></A
>The <CODE
CLASS="literal"
>next</CODE
> command is like the <CODE
CLASS="literal"
>continue</CODE
> statement in C; it skips
the rest of the current iteration and starts the next iteration of the
loop. If there is a <CODE
CLASS="literal"
>continue</CODE
> block
on the loop, it is always executed
just before the conditional is about to be evaluated again.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3076"
></A
>The <CODE
CLASS="literal"
>redo</CODE
> command restarts the loop block without evaluating the
conditional again. The <CODE
CLASS="literal"
>continue</CODE
> block,
if any, is not executed.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PNUT-CH-4-SECT-3.1.6"
>4.3.1.6 goto</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3083"
></A
>Perl supports a <CODE
CLASS="literal"
>goto</CODE
> command. There are three forms:
<CODE
CLASS="literal"
>goto</CODE
> <CODE
CLASS="replaceable"
><I
>label</I
></CODE
>, <CODE
CLASS="literal"
>goto</CODE
> <CODE
CLASS="replaceable"
><I
>expr</I
></CODE
>, and <CODE
CLASS="literal"
>goto</CODE
> <CODE
CLASS="literal"
>&amp;</CODE
><CODE
CLASS="replaceable"
><I
>name</I
></CODE
>.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>goto</CODE
> <CODE
CLASS="replaceable"
><I
>label</I
></CODE
> form finds the statement labeled with
<CODE
CLASS="replaceable"
><I
>label</I
></CODE
> and
resumes execution there. It may not be used to go inside any construct
that requires initialization, such as a subroutine or a <CODE
CLASS="literal"
>foreach</CODE
>
loop. </P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>goto</CODE
> <CODE
CLASS="replaceable"
><I
>expr</I
></CODE
>
form expects the expression to return a label name.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>goto &amp;</CODE
><CODE
CLASS="replaceable"
><I
>name</I
></CODE
> form 
substitutes a call to the 
named subroutine for the currently running subroutine. <A
CLASS="indexterm"
NAME="AUTOID-3104"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_02.htm"
TITLE="4.2 Data Types and Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2 Data Types and Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl in a Nutshell"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl in a Nutshell"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_04.htm"
TITLE="4.4 Special Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.4 Special Variables"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.2 Data Types and Variables</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.4 Special Variables</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<p><!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
