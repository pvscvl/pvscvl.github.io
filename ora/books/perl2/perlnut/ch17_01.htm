<HTML
><HEAD
>
<TITLE>The LWP Library (Perl in a Nutshell)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl in a Nutshell"><META
NAME="DC.creator"
CONTENT="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:57:42Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-286-7"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part06.htm"
TITLE="VI. Network Programming"><LINK
REL="prev"
HREF="ch16_03.htm"
TITLE="16.3 FTP Configuration with Net::Netrc"><LINK
REL="next"
HREF="ch17_02.htm"
TITLE="17.2 The LWP Modules"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl in a Nutshell"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,71"
HREF="index.htm"
ALT="Perl in a Nutshell"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch16_03.htm"
TITLE="16.3 FTP Configuration with Net::Netrc"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.3 FTP Configuration with Net::Netrc"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 17</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch17_02.htm"
TITLE="17.2 The LWP Modules"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.2 The LWP Modules"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="CHAPTER"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="PNUT-CH-17"
>17. The LWP Library</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="SECT1"
HREF="#PNUT-CH-17-SECT-1"
TITLE="17.1 LWP Overview"
>LWP Overview</A
><BR><A
CLASS="SECT1"
HREF="ch17_02.htm"
TITLE="17.2 The LWP Modules"
>The LWP Modules</A
><BR><A
CLASS="SECT1"
HREF="ch17_03.htm"
TITLE="17.3 The HTTP Modules"
>The HTTP Modules</A
><BR><A
CLASS="SECT1"
HREF="ch17_04.htm"
TITLE="17.4 The HTML Module"
>The HTML Module</A
><BR><A
CLASS="SECT1"
HREF="ch17_05.htm"
TITLE="17.5 The URI Module"
>The URI Module</A
></P
><P
></P
></DIV
><P
CLASS="para"
></P
><P
CLASS="para"
>LWP, the library for web access in Perl, is a bundle of modules that provide a consistent,
object-oriented approach to creating web applications. The library, downloaded as the single
file named <EM
CLASS="emphasis"
>libwww-perl</EM
>, contains the following classes:<A
CLASS="indexterm"
NAME="AUTOID-33179"
></A
><A
CLASS="indexterm"
NAME="AUTOID-33182"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-17-IX-LWP-LIBRARY"
></A
></P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>File</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Parses directory listings. </P
></DD
><DT
CLASS="term"
>Font</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Handles Adobe Font Metrics. </P
></DD
><DT
CLASS="term"
>HTML</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Parses HTML files and converts them to printable or other forms. </P
></DD
><DT
CLASS="term"
>HTTP</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Provides client requests, server responses, and protocol implementation. </P
></DD
><DT
CLASS="term"
>LWP</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The core of all web client programs. It creates network connections 
and manages the communication and transactions between client and server.</P
></DD
><DT
CLASS="term"
>URI</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Creates, parses, and translates URLs.</P
></DD
><DT
CLASS="term"
>WWW</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Implements standards used for robots (automatic client programs).</P
></DD
></DL
><P
CLASS="para"
>Each module provides different building blocks that make up a
whole web transaction&nbsp;- from connection, to request, to response and returned data.
Each part is encapsulated by an object to give a standard interface to every
web program you write. The following section gives an overview of how LWP works
to create a web client.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PNUT-CH-17-SECT-1"
>17.1 LWP Overview</A
></H2
><P
CLASS="para"
>Any web transaction requires an application that can establish a TCP/IP network
connection and send and receive messages using the appropriate protocol (usually
HTTP). TCP/IP connections are established using sockets, and messages are exchanged
via socket filehandles. See <A
CLASS="xref"
HREF="ch13_01.htm"
TITLE="Sockets"
>Chapter 13, <CITE
CLASS="chapter"
>Sockets</CITE
></A
>, for information on how to manually create
socket applications. LWP provides an object for this application with LWP::UserAgent<A
CLASS="indexterm"
NAME="AUTOID-33221"
></A
><A
CLASS="indexterm"
NAME="AUTOID-33224"
></A
><A
CLASS="indexterm"
NAME="AUTOID-33226"
></A
>
for clients; HTTP::Daemon provides a server object. The UserAgent object
acts as the browser: it connects to a server, sends requests, receives responses,
and manages the received data. This is how you create a UserAgent object:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>use LWP::UserAgent;
$ua = new LWP::UserAgent;</PRE
></BLOCKQUOTE
>


The UserAgent now needs to send a message to a server requesting a URL
(Universal Resource Locator) using the <CODE
CLASS="literal"
>request</CODE
> method. <CODE
CLASS="literal"
>request</CODE
>
forms an HTTP request from the object given as its argument. This request
object is created by HTTP::Request.<A
CLASS="indexterm"
NAME="AUTOID-33233"
></A
><A
CLASS="indexterm"
NAME="AUTOID-33236"
></A
><A
CLASS="indexterm"
NAME="AUTOID-33239"
></A
></P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-33244"
></A
><A
CLASS="indexterm"
NAME="AUTOID-33247"
></A
>An HTTP request message contains three elements. The first line of
a message always contains an HTTP command called a <EM
CLASS="emphasis"
>method</EM
>, a Universal
Resource Identifier (URI), which identifies the file or resource the
client is querying, and the HTTP version number. The following lines
of a client request contain header information, which provides information
about the client and any data it is sending the server. The third part
of a client request is the entity body, which is data being sent to the server
(for the POST method). The following is a sample HTTP request:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>GET /index.html HTTP/1.0
User-Agent: Mozilla/1.1N (Macintosh; I; 68K)
Accept: */*
Accept: image/gif
Accept: image/jpeg</PRE
></BLOCKQUOTE
>


<CODE
CLASS="literal"
>LWP::UserAgent-&gt;request</CODE
> forms this message from an HTTP::Request object.
A request object requires a method for the first argument. The GET
method asks for a file, while the POST method supplies information
such as form data to a server application. There are other methods, but
these two are most commonly used.</P
><P
CLASS="para"
>The second argument is
the URL for the request. The URL must contain the server name, for
this is how the UserAgent knows where to connect. The URL argument<A
CLASS="indexterm"
NAME="AUTOID-33253"
></A
><A
CLASS="indexterm"
NAME="AUTOID-33256"
></A
>
can be represented as a string or as a URI::URL object, which allows
more complex URLs to be formed and managed. Optional parameters
for an HTTP::Request include your own headers, in the form of an
HTTP::Headers object, and any POST data for the message. The following
example creates a request object:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>use HTTP::Request;

$req = new HTTP::Request(GET, $url, $hdrs);</PRE
></BLOCKQUOTE
>


The URL object is created like this:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>use URI::URL;

$url = new URI::URL('www.ora.com/index.html');</PRE
></BLOCKQUOTE
>


And a header object can be created like this:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>use HTTP::Headers;

$hdrs = new HTTP::Headers(Accept =&gt; 'text/plain',
                          User-Agent =&gt; 'MegaBrowser/1.0');</PRE
></BLOCKQUOTE
>


Then you can put them all together to make a request:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>use LWP::UserAgent;  # This will cover all of them!

$hdrs = new HTTP::Headers(Accept =&gt; 'text/plain',
                          User-Agent =&gt; 'MegaBrowser/1.0');

$url = new URI::URL('www.ora.com/index.html');
$req = new HTTP::Request(GET, $url, $hdrs);
$ua = new LWP::UserAgent;
$resp = $ua-&gt;request($req);
if ($resp-&gt;is_success) {
        print $resp-&gt;content;}
else {
        print $resp-&gt;message;}</PRE
></BLOCKQUOTE
>

<A
CLASS="indexterm"
NAME="AUTOID-33263"
></A
><A
CLASS="indexterm"
NAME="AUTOID-33266"
></A
>
Once the request has been made by the user agent, the response from
the server is returned as another object, described by HTTP::Response.
This object contains the status code of the request, returned
headers, and the content you requested, if successful. In the example,
<CODE
CLASS="literal"
>is_success</CODE
> checks to see if the request was fulfilled without problems,
thus outputting the content. If unsuccessful, a message describing the
server's response code is printed.</P
><P
CLASS="para"
>There are other modules and classes that create useful objects for web clients
in LWP, but the above examples show the most basic ones. For server applications,
many of the objects used above become pieces of a server transaction, which
you either create yourself (such as response objects) or
receive from a client (like request objects).</P
><P
CLASS="para"
>Additional functionality for both client and server applications is provided
by the HTML module. This module provides many classes for both the creation
and interpretation of HTML documents.</P
><P
CLASS="para"
>The rest of this chapter provides information for the LWP, HTTP, HTML,
and URI modules.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch16_03.htm"
TITLE="16.3 FTP Configuration with Net::Netrc"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.3 FTP Configuration with Net::Netrc"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl in a Nutshell"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl in a Nutshell"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch17_02.htm"
TITLE="17.2 The LWP Modules"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.2 The LWP Modules"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>16.3 FTP Configuration with Net::Netrc</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>17.2 The LWP Modules</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<p><!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
