<HTML
><HEAD
>
<TITLE>Sockets (Perl in a Nutshell)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl in a Nutshell"><META
NAME="DC.creator"
CONTENT="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:56:17Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-286-7"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part06.htm"
TITLE="VI. Network Programming"><LINK
REL="prev"
HREF="part06.htm"
TITLE="VI. Network Programming"><LINK
REL="next"
HREF="ch13_02.htm"
TITLE="13.2 The IO::Socket Module"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl in a Nutshell"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,71"
HREF="index.htm"
ALT="Perl in a Nutshell"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="PART"
HREF="part06.htm"
TITLE="VI. Network Programming"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: VI. Network Programming"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 13</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch13_02.htm"
TITLE="13.2 The IO::Socket Module"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.2 The IO::Socket Module"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="CHAPTER"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="PNUT-CH-13"
>13. Sockets</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="SECT1"
HREF="#PNUT-CH-13-SECT-1"
TITLE="13.1 Built-in Socket Functions"
>Built-in Socket Functions</A
><BR><A
CLASS="SECT1"
HREF="ch13_02.htm"
TITLE="13.2 The IO::Socket Module"
>The IO::Socket Module</A
></P
><P
></P
></DIV
><P
CLASS="para"
></P
><P
CLASS="para"
>Why build networking functionality into your Perl scripts?
You might want to access your email remotely, or write
a simple script that updates
files on a FTP site.<A
CLASS="indexterm"
NAME="PNUT-CH-13-IX-SOCKETS"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-13-IX-NETWORKING-SOCKETS"
></A
>
You might want to check up on your employees with
a program that searches for Usenet postings that came
from your site.  
You might want to check a web site for any recent changes, 
or even write your own home-grown web server.
The network is the computer these days, and Perl
makes network applications easy.</P
><P
CLASS="para"
>Perl programmers have their choice of
modules for doing common tasks with network protocols;
<A
CLASS="xref"
HREF="ch14_01.htm"
TITLE="Email Connectivity"
>Chapter 14, <CITE
CLASS="chapter"
>Email Connectivity</CITE
></A
>, through <A
CLASS="xref"
HREF="ch17_01.htm"
TITLE="The LWP Library"
>Chapter 17, <CITE
CLASS="chapter"
>The LWP Library</CITE
></A
>, cover the modules for 
writing email, news, FTP, and web applications in Perl.  
If you can do what you want with the available modules, you're 
encouraged to jump to those
chapters and skip this one.  However,
there will be times that you'll
have to wrestle with sockets directly, and that's
where this chapter comes in.</P
><P
CLASS="para"
>Sockets are the underlying mechanism for networking on the
Internet.  With sockets, one application (a <EM
CLASS="emphasis"
>server</EM
>)
sits on a port waiting for connections.  Another application
(the <EM
CLASS="emphasis"
>client</EM
>) connects to that port and says hello;
then the client and server have a chat.  Their actual conversation
is done with whatever protocol they choose&nbsp;- for example, a
web client and server would use HTTP, an email server would
use POP3 and SMTP, etc.  But at the most basic level, you
might say that all network programming comes down to
opening a socket, reading and writing data, and closing
the socket again.  </P
><P
CLASS="para"
>You can work with sockets in Perl at various levels. At
the lowest level, Perl's built-in functions include socket routines
similar to the system calls in C of the same name.
To make these routines easier to use, the Socket module in the standard library 
imports common definitions and constants specific to your system's
networking capabilities. Finally,
the IO::Socket module provides an object interface 
to the socket functions through a standard set of methods and options
for constructing both client and server communications programs.</P
><P
CLASS="para"
>Sockets provide a connection between systems or applications. They
can be set up to handle streaming data or discrete data packets.
Streaming data continually comes and goes over a 
connection. A transport
protocol like TCP (Transmission Control Protocol) is used to process streaming
data so that all of the data is properly received and ordered.<A
CLASS="indexterm"
NAME="AUTOID-28101"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28103"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28105"
></A
>
Packet-oriented
communication sends data across the network in discrete chunks. The 
message-oriented protocol UDP
(User Datagram Protocol) works on this type of connection.
Although streaming sockets using TCP
are widely used for applications, UDP sockets also have their uses.</P
><P
CLASS="para"
>Sockets exist in one of two address domains: the Internet domain and the Unix domain.
Sockets that are used for Internet connections require the careful binding
and assignment of the proper type of address dictated by the Internet<A
CLASS="indexterm"
NAME="AUTOID-28108"
></A
>
Protocol (IP). These sockets are referred to as Internet-domain
sockets.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28111"
></A
>Sockets in the Unix domain create connections between applications
either on the same machine or within a LAN. The addressing scheme is less complicated,
often just providing the name of the target process.</P
><P
CLASS="para"
>In Perl, sockets are attached to a filehandle after they have been
created. Communication
over the connection is then handled by standard Perl I/O functions.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PNUT-CH-13-SECT-1"
>13.1 Built-in Socket Functions</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="PNUT-CH-13-IX-NETWORKING-SOCKETS-BUILT-IN-FUNCTIONS-FOR"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-13-IX-SOCKETS-BUILT-IN-FUNCTIONS-FOR"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-13-IX-BUILT-IN-FUNCTIONS-SOCKET-RELATED"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-13-IX-FUNCTIONS-BUILT-IN-SOCKET-RELATED"
></A
>Perl provides built-in support for sockets. The following
functions are defined specifically for socket
programming. For full descriptions and syntax, see <A
CLASS="xref"
HREF="ch05_01.htm"
TITLE="Function Reference"
>Chapter 5, <CITE
CLASS="chapter"
>Function Reference</CITE
></A
>.</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>socket</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28137"
></A
>Initializes a socket and assigns a filehandle to it.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>bind</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28145"
></A
>For servers, associates a socket with a port and address.
For clients, associates a socket with a specific source address.  </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>listen</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28153"
></A
>(Server only.) Waits for incoming connection with a client.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>accept</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28161"
></A
>(Server only.) Accepts incoming connection with a client.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>connect</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28169"
></A
>(Client only.) Establishes a network connection on a socket.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>recv</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28177"
></A
>Reads data from a socket filehandle.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>send</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28185"
></A
>Writes data to a filehandle.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>shutdown</CODE
> (or <CODE
CLASS="literal"
>close</CODE
>)</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28193"
></A
>Terminates a network connection.</P
></DD
></DL
><P
CLASS="para"
>Regular functions that read and write filehandles can also be used for sockets,
i.e., <CODE
CLASS="literal"
>write</CODE
>, <CODE
CLASS="literal"
>print</CODE
>, <CODE
CLASS="literal"
>printf</CODE
>, and the diamond input operator,
<CODE
CLASS="literal"
>&lt;&gt;</CODE
>.</P
><P
CLASS="para"
>The socket functions tend to use hard-coded values for some
parameters, which severely hurt portability. 
Perl solves this problem with a module called Socket, included in the standard library.
Use this module for any socket applications that you build with the built-in functions
(i.e., <CODE
CLASS="literal"
>use Socket</CODE
>).
The module loads the <EM
CLASS="emphasis"
>socket.h</EM
> header file, 
which enables the built-in functions
to use the constants and names specific to your system's 
network programming, as well as additional functions for dealing
with address and protocol names. </P
><P
CLASS="para"
>The next few sections describe Perl socket programming
using a combination of the built-in functions together with the Socket
module. After that, we describe the use of the IO::Socket module.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-13-SECT-1.1"
>13.1.1 Initializing a Socket</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28208"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28210"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28213"
></A
>Both client and server use the <CODE
CLASS="literal"
>socket</CODE
> call to create a 
socket and associate it with a filehandle. The <CODE
CLASS="literal"
>socket</CODE
> 
function takes several arguments: the name of the filehandle,
the network domain, an indication of whether the socket is stream-oriented or 
record-oriented,
and the network protocol to be used. For example, HTTP (web) transactions
require stream-oriented connections running TCP. The following line
creates a socket for this case and associates it with 
the filehandle <CODE
CLASS="literal"
>SH</CODE
>:<A
CLASS="indexterm"
NAME="AUTOID-28218"
></A
>


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>use Socket;
socket(SH, PF_INET, SOCK_STREAM, getprotobyname('tcp')) || die $!;</PRE
></BLOCKQUOTE
>


The <CODE
CLASS="literal"
>PF_INET</CODE
> argument indicates that the socket will connect to addresses
in the Internet domain (i.e., IP addresses). Sockets with a Unix domain
address use <CODE
CLASS="literal"
>PF_UNIX</CODE
>.</P
><P
CLASS="para"
>Because this is a streaming connection using TCP, we specify 
<CODE
CLASS="literal"
>SOCK_STREAM</CODE
> for the second argument. The alternative would be to
specify <CODE
CLASS="literal"
>SOCK_DGRAM</CODE
> for a packet-based UDP connection.</P
><P
CLASS="para"
>The third argument indicates the protocol used for
the connection. Each protocol has a number assigned to it by the system;
that number is passed to <CODE
CLASS="literal"
>socket</CODE
> as the third argument. In the scalar
context, <CODE
CLASS="literal"
>getprotobyname</CODE
> returns the protocol number.<A
CLASS="indexterm"
NAME="AUTOID-28230"
></A
></P
><P
CLASS="para"
>Finally, if the socket call fails, the program will <CODE
CLASS="literal"
>die</CODE
>, printing
the error message found in <CODE
CLASS="literal"
>$!</CODE
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-13-SECT-1.2"
>13.1.2 Client Connections</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28238"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28240"
></A
>On the client side, the next step is to make a connection with a server
at a particular port and host. To do this, the client <A
CLASS="indexterm"
NAME="AUTOID-28243"
></A
>
uses the <CODE
CLASS="literal"
>connect</CODE
> call. <CODE
CLASS="literal"
>connect</CODE
> requires the
socket filehandle as its first argument.  The second argument is
a data structure containing the port and hostname that together specify
the address. The Socket package<A
CLASS="indexterm"
NAME="AUTOID-28248"
></A
>
provides the <CODE
CLASS="literal"
>sockaddr_in</CODE
> function to create this structure for 
Internet addresses and the <CODE
CLASS="literal"
>sockaddr_un</CODE
> function for
Unix domain 
addresses.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>sockaddr_in</CODE
> function takes a port number for its first argument and a
32-bit IP address for the second argument. The 32-bit address is formed
from the <CODE
CLASS="literal"
>inet_aton</CODE
> function found in the Socket package. This function takes
either a hostname (e.g., <A
CLASS="systemitem.sitename"
HREF="../../../../../../../www.oreilly.com/"
>www.oreilly.com</A
>) or a 
dotted-decimal string (e.g., 207.54.2.25),
and it returns the corresponding 32-bit structure.</P
><P
CLASS="para"
>Continuing with
the previous example, a call to <CODE
CLASS="literal"
>connect</CODE
> could look like this:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>my $dest = sockaddr_in (80, inet_aton('www.oreilly.com'));
connect (SH, $dest) || die $!;</PRE
></BLOCKQUOTE
>


This call attempts to establish a network connection to the specified
server and port. If successful, it returns true. Otherwise, it returns false
and <CODE
CLASS="literal"
>die</CODE
>s with the error in <CODE
CLASS="literal"
>$!</CODE
>.</P
><P
CLASS="para"
>Assuming that the <CODE
CLASS="literal"
>connect</CODE
> call has completed successfully and a
connection has been established, there are a number of functions we
can use to write to and read from the file handle.
For example, the <CODE
CLASS="literal"
>send</CODE
> function sends data to a socket:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$data = &quot;Hello&quot;;
send (FH, $data);</PRE
></BLOCKQUOTE
>

<A
CLASS="indexterm"
NAME="AUTOID-28265"
></A
>
The <CODE
CLASS="literal"
>print</CODE
> function allows a wider variety of expressions 
for sending
data to a filehandle.


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>select (FH);
print &quot;$data&quot;;</PRE
></BLOCKQUOTE
>


To read incoming data from a socket, use either the <CODE
CLASS="literal"
>recv</CODE
> function
or the &quot;diamond&quot;
input operator regularly used on filehandles. For example:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>recv (FH, $buffer);
$input = &lt;FH&gt;;</PRE
></BLOCKQUOTE
>


After the conversation with the server is finished, use <CODE
CLASS="literal"
>close</CODE
> or 
<CODE
CLASS="literal"
>shutdown</CODE
> to close the connection and destroy the socket.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-13-SECT-1.3"
>13.1.3 Server Connections</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28277"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28279"
></A
>After creating a socket with the <CODE
CLASS="literal"
>socket</CODE
> function as above, a server application
must go through the following steps to receive network connections:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Bind a port number and machine address to the socket.<A
CLASS="indexterm"
NAME="AUTOID-28286"
></A
></P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Listen for incoming connections from clients on the port.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Accept a client request and assign the connection to a specific filehandle.</P
></LI
></OL
><P
CLASS="para"
>We start out by creating a socket for the server:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>my $proto = getprotobyname('tcp');
socket(FH, PF_INET, SOCK_STREAM, $proto) || die $!;</PRE
></BLOCKQUOTE
>


The filehandle <CODE
CLASS="literal"
>$FH</CODE
> is the generic filehandle for the socket.
This filehandle only receives requests from clients; each specific connection
is passed to a different filehandle by <CODE
CLASS="literal"
>accept</CODE
>, where the rest
of the communication occurs.</P
><P
CLASS="para"
>A server-side socket must be bound to a port on the local machine
by passing a port and an address data structure to the <CODE
CLASS="literal"
>bind</CODE
> function<A
CLASS="indexterm"
NAME="AUTOID-28299"
></A
>
via <CODE
CLASS="literal"
>sockaddr_in</CODE
>. The Socket module provides identifiers for
common local addresses, such as localhost and the broadcast address. Here<A
CLASS="indexterm"
NAME="AUTOID-28302"
></A
>
we use <CODE
CLASS="literal"
>INADDR_ANY</CODE
>, which allows the system to pick the appropriate
address for the machine:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>my $sin = sockaddr_in (80, INADDR_ANY);
bind (FH, $sin) || die $!;</PRE
></BLOCKQUOTE
>

<A
CLASS="indexterm"
NAME="AUTOID-28306"
></A
>
The <CODE
CLASS="literal"
>listen</CODE
> function tells the operating system that the server is ready
to accept incoming network connections on the port. The first argument is
the socket filehandle. The second argument gives a queue length, in case
multiple clients are connecting to the port at the same time. This number
indicates how many clients can wait for an <CODE
CLASS="literal"
>accept</CODE
> at one time.


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>listen (FH, $length);</PRE
></BLOCKQUOTE
>

<A
CLASS="indexterm"
NAME="AUTOID-28312"
></A
>
The <CODE
CLASS="literal"
>accept</CODE
> function completes a connection after a client requests
and assigns a new filehandle specific to that connection. The new filehandle
is given as the first argument to <CODE
CLASS="literal"
>accept</CODE
>, and the generic socket filehandle
is given as the second:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>accept (NEW, FH) || die $!;</PRE
></BLOCKQUOTE
>


Now the server can read and write to the filehandle <CODE
CLASS="literal"
>NEW</CODE
> for its
communication with the client.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-13-SECT-1.4"
>13.1.4 Socket Module Functions</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28322"
></A
>The following functions are imported from the Socket module for use in
socket applications:
<UL
CLASS="nutlist"
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_001.htm"
TITLE="Reference: inet_aton"
>inet_aton</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_002.htm"
TITLE="Reference: inet_ntoa"
>inet_ntoa</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_003.htm"
TITLE="Reference: sockaddr_in"
>sockaddr_in</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_004.htm"
TITLE="Reference: sockaddr_un"
>sockaddr_un</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_005.htm"
TITLE="Reference: unpack_sockaddr_in"
>unpack_sockaddr_in</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_006.htm"
TITLE="Reference: unpack_sockaddr_un"
>unpack_sockaddr_un</A
></LI
></UL
>
The following constants are defined in the Socket module:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>INADDR_ANY</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28409"
></A
>The four-byte packed string for the wildcard IP address that specifies any 
of the host's addresses (if the host has multiple addresses).
This is equivalent to <CODE
CLASS="literal"
>inet_aton('0.0.0.0')</CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>INADDR_BROADCAST</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28417"
></A
>The four-byte packed string for the broadcast address. 
This is equivalent to <CODE
CLASS="literal"
>inet_aton('255.255.255.255')</CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>INADDR_LOOPBACK</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28425"
></A
>The four-byte packed string for the loopback address. This is equivalent 
to <CODE
CLASS="literal"
>inet_aton('localhost')</CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>INADDR_NONE</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28433"
></A
>The four-byte packed string for the &quot;invalid&quot; IP address (bitmask). Equivalent 
to <CODE
CLASS="literal"
>inet_aton('255.255.255.255')</CODE
>.<A
CLASS="indexterm"
NAME="AUTOID-28437"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28438"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28439"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28440"
></A
></P
></DD
></DL
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="PART"
HREF="part06.htm"
TITLE="VI. Network Programming"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: VI. Network Programming"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl in a Nutshell"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl in a Nutshell"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch13_02.htm"
TITLE="13.2 The IO::Socket Module"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.2 The IO::Socket Module"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>VI. Network Programming</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>13.2 The IO::Socket Module</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<p><!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
