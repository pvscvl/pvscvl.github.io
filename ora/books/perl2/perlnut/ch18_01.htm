<HTML
><HEAD
>
<TITLE>Perl/Tk (Perl in a Nutshell)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl in a Nutshell"><META
NAME="DC.creator"
CONTENT="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:58:45Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-286-7"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part07.htm"
TITLE="VII. Perl/Tk"><LINK
REL="prev"
HREF="part07.htm"
TITLE="VII. Perl/Tk"><LINK
REL="next"
HREF="ch18_02.htm"
TITLE="18.2 Geometry Managers"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl in a Nutshell"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,71"
HREF="index.htm"
ALT="Perl in a Nutshell"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="PART"
HREF="part07.htm"
TITLE="VII. Perl/Tk"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: VII. Perl/Tk"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 18</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch18_02.htm"
TITLE="18.2 Geometry Managers"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.2 Geometry Managers"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="CHAPTER"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="PNUT-CH-18"
>18. Perl/Tk</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="SECT1"
HREF="#PNUT-CH-18-SECT-1"
TITLE="18.1 Widgets"
>Widgets</A
><BR><A
CLASS="SECT1"
HREF="ch18_02.htm"
TITLE="18.2 Geometry Managers"
>Geometry Managers</A
><BR><A
CLASS="SECT1"
HREF="ch18_03.htm"
TITLE="18.3 Common Widget Configuration Options"
>Common Widget Configuration Options</A
><BR><A
CLASS="SECT1"
HREF="ch18_04.htm"
TITLE="18.4 The Button Widget"
>The Button Widget</A
><BR><A
CLASS="SECT1"
HREF="ch18_05.htm"
TITLE="18.5 The Checkbutton Widget"
>The Checkbutton Widget</A
><BR><A
CLASS="SECT1"
HREF="ch18_06.htm"
TITLE="18.6 The Radiobutton Widget"
>The Radiobutton Widget</A
><BR><A
CLASS="SECT1"
HREF="ch18_07.htm"
TITLE="18.7 The Label Widget"
>The Label Widget</A
><BR><A
CLASS="SECT1"
HREF="ch18_08.htm"
TITLE="18.8 The Entry Widget"
>The Entry Widget</A
><BR><A
CLASS="SECT1"
HREF="ch18_09.htm"
TITLE="18.9 The Scrollbar Widget"
>The Scrollbar Widget</A
><BR><A
CLASS="SECT1"
HREF="ch18_10.htm"
TITLE="18.10 The Listbox Widget"
>The Listbox Widget</A
><BR><A
CLASS="SECT1"
HREF="ch18_11.htm"
TITLE="18.11 The Text Widget"
>The Text Widget</A
><BR><A
CLASS="SECT1"
HREF="ch18_12.htm"
TITLE="18.12 The Canvas Widget"
>The Canvas Widget</A
><BR><A
CLASS="SECT1"
HREF="ch18_13.htm"
TITLE="18.13 The Scale Widget"
>The Scale Widget</A
><BR><A
CLASS="SECT1"
HREF="ch18_14.htm"
TITLE="18.14 The Menubutton Widget"
>The Menubutton Widget</A
><BR><A
CLASS="SECT1"
HREF="ch18_15.htm"
TITLE="18.15 The Menu Widget"
>The Menu Widget</A
><BR><A
CLASS="SECT1"
HREF="ch18_16.htm"
TITLE="18.16 The Optionmenu Widget"
>The Optionmenu Widget</A
><BR><A
CLASS="SECT1"
HREF="ch18_17.htm"
TITLE="18.17 The Frame Widget"
>The Frame Widget</A
><BR><A
CLASS="SECT1"
HREF="ch18_18.htm"
TITLE="18.18 The Toplevel Widget"
>The Toplevel Widget</A
></P
><P
></P
></DIV
><P
CLASS="para"
></P
><P
CLASS="para"
>Perl/Tk is an extension for writing Perl programs
with a Graphical User Interface (GUI) on both Unix and Windows 95/NT.
Tk was originally developed as an extension
to the Tcl language, for use with the X Window System on Unix.
With its port to Perl, Tk gives Perl programmers the same
control over the graphical desktop that Tcl programmers have
taken for granted.<A
CLASS="indexterm"
NAME="PNUT-CH-18-IX-TK-EXTENSION-TO-PERL"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-18-IX-PERL-TK"
></A
></P
><P
CLASS="para"
>The Tk extension makes it easy to draw a window, put widgets
into it (such as buttons, checkboxes, entry fields, menus, etc.)
and have them perform certain actions based on user input.  A 
simple &quot;Hello World&quot; program would look like this:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>#!/usr/bin/perl -w
use Tk;
my $mw = MainWindow-&gt;new;
$mw-&gt;Button(-text =&gt; &quot;Hello World!&quot;, -command =&gt;sub{exit})-&gt;pack;
MainLoop;</PRE
></BLOCKQUOTE
>


When you run it, it would look like 
<A
CLASS="xref"
HREF="ch18_01.htm"
TITLE="A simple Perl/Tk program"
>Figure 18.1</A
>.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="PNUT-CH-18-FIG-0"
>Figure 18.1: A simple Perl/Tk program</A
></H4
><IMG
CLASS="graphic"
SRC="figs/pns_1801.gif"
ALT="Figure 18.1"><P
CLASS="para"
>Pushing the &quot;Hello World!&quot; button exits the program, and your 
window disappears.  </P
><P
CLASS="para"
>Let's walk through these few lines of code.
After calling the Perl interpreter, the program calls the Tk module.
Then it proceeds to build a generic, standard window (<CODE
CLASS="literal"
>MainWindow</CODE
>)
to act as a parent
for any other widgets you create.  Line 4 of the 
program creates a button and displays it using the <CODE
CLASS="literal"
>pack</CODE
> geometry
manager.
It also gives the button something to do when pushed (in this case,
exit the program).</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-35594"
></A
>The very last line tells the program to &quot;go do it.&quot;  <CODE
CLASS="literal"
>MainLoop</CODE
>
starts the event handler for the graphical interface, and the program
draws any windows until it reaches the <CODE
CLASS="literal"
>MainLoop</CODE
> statement.  
Everything up to that point is preparation; 
until you reach the <CODE
CLASS="literal"
>MainLoop</CODE
> statement, the program simply
prepares its windows and defines what to do when certain events 
happen (such as a mouse click on the &quot;Hello World!&quot; button).  
Nothing is drawn until the <CODE
CLASS="literal"
>MainLoop</CODE
> statement is reached.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PNUT-CH-18-SECT-1"
>18.1 Widgets</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="PNUT-CH-18-IX-WIDGETS-PERL-TK"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-18-IX-TK-EXTENSION-TO-PERL-WIDGETS"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-18-IX-PERL-TK-WIDGETS"
></A
>Widgets in Perl/Tk are created with <EM
CLASS="emphasis"
>widget creation commands</EM
>,
which include <CODE
CLASS="literal"
>Button</CODE
>, <CODE
CLASS="literal"
>Canvas</CODE
>, 
<CODE
CLASS="literal"
>CheckButton</CODE
>, <CODE
CLASS="literal"
>Entry</CODE
>, <CODE
CLASS="literal"
>Frame</CODE
>, <CODE
CLASS="literal"
>Label</CODE
>, <CODE
CLASS="literal"
>Listbox</CODE
>, <CODE
CLASS="literal"
>Menu</CODE
>, <CODE
CLASS="literal"
>Menubutton</CODE
>, <CODE
CLASS="literal"
>Message</CODE
>,
<CODE
CLASS="literal"
>Radiobutton</CODE
>, <CODE
CLASS="literal"
>Scale</CODE
>, <CODE
CLASS="literal"
>Scrollbar</CODE
>, <CODE
CLASS="literal"
>Text</CODE
>, and <CODE
CLASS="literal"
>Toplevel</CODE
>.  </P
><P
CLASS="para"
>Positioning widgets is done with <EM
CLASS="emphasis"
>geometry managers</EM
>.
In the &quot;Hello World&quot; example shown earlier, the <CODE
CLASS="literal"
>pack</CODE
>
command is the geometry manager.  Geometry managers determine
where in the window (or frame) the widget will sit.  We'll talk
more about the Perl/Tk geometry managers later in this chapter.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-18-SECT-1.1"
>18.1.1 Widget Methods</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-35633"
></A
><A
CLASS="indexterm"
NAME="AUTOID-35636"
></A
><A
CLASS="indexterm"
NAME="AUTOID-35639"
></A
><A
CLASS="indexterm"
NAME="AUTOID-35642"
></A
>Widgets can be configured, queried, or manipulated via various <EM
CLASS="emphasis"
>widget
methods</EM
>.  For example, all widgets support the <CODE
CLASS="literal"
>configure</CODE
>
widget method for changing widget
properties after the widget is created.  
In addition, most widgets have specialized
methods associated with them for manipulating the widget
as needed throughout the program.  For example, widgets
that scroll support the <CODE
CLASS="literal"
>xview</CODE
> and <CODE
CLASS="literal"
>yview</CODE
> methods
for determining the viewable portion of the content when the
scrollbar is moved.  
The Entry and Text widgets have methods for
inserting and deleting values.  The Canvas widget has a
whole series of methods for drawing shapes and inserting
text into the canvas.  And so on.</P
><P
CLASS="para"
>Widget methods are listed in the discussion of each widget
later in this chapter.  However, since all widgets support
the <CODE
CLASS="literal"
>configure</CODE
> and <CODE
CLASS="literal"
>cget</CODE
> methods, we're going to
cover them now.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PNUT-CH-18-SECT-1.1.1"
>18.1.1.1 The configure method</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-35655"
></A
>The <CODE
CLASS="literal"
>configure</CODE
> method can be used to 
set and retrieve widget configuration values.
For example, to change the width of a button:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$button-&gt;configure(-width =&gt; 100);</PRE
></BLOCKQUOTE
>


To get the value for a current widget, just supply it without
a value:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$button-&gt;configure(-width);</PRE
></BLOCKQUOTE
>


The result is an array of scalars;  the values you care about
are the last two, which represent the default value and its
current value, respectively.</P
><P
CLASS="para"
>You can also call <CODE
CLASS="literal"
>configure</CODE
> without any options at all, 
which will give you a listing of all options and their values.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PNUT-CH-18-SECT-1.1.2"
>18.1.1.2 The cget method</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-35665"
></A
>For simply retrieving the value of an option, <CODE
CLASS="literal"
>configure</CODE
>
returns more information than you generally want.  The <CODE
CLASS="literal"
>cget</CODE
>
method returns just the current value.</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-18-SECT-1.2"
>18.1.2 Scrollbars</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-35672"
></A
><A
CLASS="indexterm"
NAME="AUTOID-35674"
></A
><A
CLASS="indexterm"
NAME="AUTOID-35677"
></A
><A
CLASS="indexterm"
NAME="AUTOID-35680"
></A
>Many widgets have scrollbars associated with them.  Scrollbars
can be added to a widget in two ways: either using an independent Scrollbar
widget or using the <CODE
CLASS="literal"
>Scrolled</CODE
> method when creating a 
widget.  For simple
scrollbars, the <CODE
CLASS="literal"
>Scrolled</CODE
> method is much easier and therefore
preferable.  </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PNUT-CH-18-SECT-1.2.1"
>18.1.2.1 Using the Scrolled method</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-35688"
></A
>You use the <CODE
CLASS="literal"
>Scrolled</CODE
> method to create both the widget and
the scrollbar in a single command.  For example:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$mainwindow-&gt;Scrolled('Entry', -scrollbars =&gt; 'os'
	-textvariable =&gt; \$address)-&gt;pack;</PRE
></BLOCKQUOTE
>


This creates an Entry widget with an &quot;optional&quot; scrollbar on
the bottom.  The first argument to <CODE
CLASS="literal"
>Scrolled</CODE
> is the type
of widget (in this case, an Entry widget).  Then use the
<CODE
CLASS="literal"
>-scrollbars</CODE
> option to list the location of the scrollbar
(&quot;s&quot; for the south, or bottom, edge of the widget). Here,  we
specify an &quot;optional&quot; scrollbar with &quot;o&quot;, meaning that the
scrollbar will only appear if needed.</P
><P
CLASS="para"
>Any additional options to the <CODE
CLASS="literal"
>Scrolled</CODE
> method are taken as 
options to the widget itself.  In this case, we're setting 
the <CODE
CLASS="literal"
>-textvariable</CODE
> option to the Entry widget.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PNUT-CH-18-SECT-1.2.2"
>18.1.2.2 The Scrollbar widget</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-35700"
></A
>For more flexibility with a scrollbar, you can use the Scrollbar
widget.  To do so, you need to create the target widget to scroll, set<A
CLASS="indexterm"
NAME="AUTOID-35702"
></A
><A
CLASS="indexterm"
NAME="AUTOID-35705"
></A
>
the <CODE
CLASS="literal"
>-xscrollcommand</CODE
> or <CODE
CLASS="literal"
>-yscrollcommand</CODE
> option as appropriate,
configure the scrollbar to talk to the widget,
and position the scrollbar and target widget next to one another.
For example:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$scrollbar = $mainwindow-&gt;Scrollbar(-orient =&gt; 'vertical');
$listbox = $mainwindow-&gt;Entry(-yscrollcommand =&gt; ['set' =&gt; $scrollbar]);
$scrollbar-&gt;configure(-command =&gt; ['yview' =&gt; $listbox]);
$scrollbar-&gt;pack(-side =&gt; 'right', -fill =&gt; 'y');
$listbox-&gt;pack(-side =&gt; 'left', -fill =&gt; 'both');</PRE
></BLOCKQUOTE
>


First, we create the scrollbar with vertical orientation (which
is actually the default).
Next, we create the Listbox widget with the <CODE
CLASS="literal"
>-yscrollcommand</CODE
>
option to define a callback when the widget is scrolled vertically.
The scrollbar is then configured with a callback that says to inform
the Listbox widget when it is clicked vertically.
Finally, the Scrollbar and Listbox widgets are packed side-by-side.
See further discussion of the Scrollbar widget later in this chapter
for more information.</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-18-SECT-1.3"
>18.1.3 Callbacks</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-35715"
></A
><A
CLASS="indexterm"
NAME="AUTOID-35717"
></A
><A
CLASS="indexterm"
NAME="AUTOID-35720"
></A
><A
CLASS="indexterm"
NAME="AUTOID-35723"
></A
>Many widgets allow you to define a <EM
CLASS="emphasis"
>callback</EM
>, which is a 
command to execute when the widget is selected.  For example,
when you press an exit button, the callback might be to a
routine that cleans up and quits the program.  When you click on a
radio button, you might want to change the window to reflect
the new preferences.  </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-35728"
></A
>Widgets that support callbacks have a <CODE
CLASS="literal"
>-command</CODE
> option
to provide the callback function.  
In the &quot;Hello World!&quot; example
shown previously in this chapter, the callback is to 
<CODE
CLASS="literal"
>sub {exit}</CODE
>.  In that example, the callback is called as an
anonymous subroutine.  You could also use a reference to a 
subroutine (e.g., <CODE
CLASS="literal"
>\&amp;routine</CODE
>).  If you want to provide 
arguments to a subroutine, you can call it as an anonymous list
(e.g., <CODE
CLASS="literal"
>[ \&amp;routine, $arg, $arg, ... ]</CODE
>).  </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-18-SECT-1.4"
>18.1.4 Colors and Fonts</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-35737"
></A
><A
CLASS="indexterm"
NAME="AUTOID-35739"
></A
><A
CLASS="indexterm"
NAME="AUTOID-35741"
></A
><A
CLASS="indexterm"
NAME="AUTOID-35744"
></A
><A
CLASS="indexterm"
NAME="AUTOID-35747"
></A
></P
><P
CLASS="para"
>Tk was originally created for the X Window System and is
still primarily used in that environment.  For that reason, it
has inherited the font and color scheme used for the X Window System.</P
><P
CLASS="para"
>Colors that can be used with Tk widgets are identified either by
an RGB value or by a name that has been associated with an RGB value.
In general it is easiest to use a color name rather than an
explicit RGB value;  for a listing of the color names that 
are supported, see the <EM
CLASS="emphasis"
>rgb.txt</EM
> file in your X distribution 
or use the <EM
CLASS="emphasis"
>showrgb</EM
> command.  (Most common color names are
supported, so you can say things like &quot;red,&quot; &quot;pink,&quot; &quot;green,&quot; and
even &quot;chartreuse&quot; with confidence.)</P
><P
CLASS="para"
>Fonts are another matter.  Under the X Window System, fonts 
are named things like
<EM
CLASS="emphasis"
>-adobe-helvetica-medium-o-normal--12-120-75-75-p-67-iso8859-1</EM
>.
Wildcards can make the fonts easier to use, but they're still a
mouthful.  For a listing of fonts available for a particular
X server, use the <EM
CLASS="emphasis"
>xlsfonts</EM
> command.  There are a few font 
&quot;aliases&quot; that have been defined for your convenience (such as
<CODE
CLASS="literal"
>fixed</CODE
>, <CODE
CLASS="literal"
>6x10</CODE
>, <CODE
CLASS="literal"
>9x15</CODE
>, etc.), and you 
might prefer to just stick to those.</P
><A
CLASS="indexterm"
NAME="AUTOID-35760"
></A
><A
CLASS="indexterm"
NAME="AUTOID-35761"
></A
><A
CLASS="indexterm"
NAME="AUTOID-35762"
></A
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="PART"
HREF="part07.htm"
TITLE="VII. Perl/Tk"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: VII. Perl/Tk"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl in a Nutshell"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl in a Nutshell"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch18_02.htm"
TITLE="18.2 Geometry Managers"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.2 Geometry Managers"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>VII. Perl/Tk</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>18.2 Geometry Managers</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<p><!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
