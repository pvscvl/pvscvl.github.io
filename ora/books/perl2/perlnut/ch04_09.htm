<HTML
><HEAD
>
<TITLE>4.9 Filehandles (Perl in a Nutshell)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl in a Nutshell"><META
NAME="DC.creator"
CONTENT="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:28Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-286-7"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. The Perl Language"><LINK
REL="prev"
HREF="ch04_08.htm"
TITLE="4.8 References and Complex Data Structures"><LINK
REL="next"
HREF="ch04_10.htm"
TITLE="4.10 Formats"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl in a Nutshell"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,71"
HREF="index.htm"
ALT="Perl in a Nutshell"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_08.htm"
TITLE="4.8 References and Complex Data Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.8 References and Complex Data Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. The Perl Language"
>Chapter 4<BR>The Perl Language</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_10.htm"
TITLE="4.10 Formats"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.10 Formats"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PNUT-CH-4-SECT-9"
>4.9 Filehandles</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="PNUT-CH-4-IX-FILEHANDLES"
></A
>A filehandle is the name for an I/O connection between your Perl
process and the operating system.  
Filehandle names are like label names, but use their own namespace.
Like label names, the convention is to use all uppercase letters
for filehandle names.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6168"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6170"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6172"
></A
>Every Perl program has three filehandles that are
automatically opened:
STDIN, STDOUT, and STDERR.
By default, the <CODE
CLASS="literal"
>print</CODE
> and <CODE
CLASS="literal"
>write</CODE
>
functions write to STDOUT.  <A
CLASS="indexterm"
NAME="AUTOID-6176"
></A
>
Additional filehandles are created using the <CODE
CLASS="literal"
>open</CODE
> function:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>open (DATA, &quot;numbers.txt&quot;);</PRE
></BLOCKQUOTE
>


DATA is the new filehandle that is attached to the external file,
which is now opened for reading. You can open filehandles for reading,
writing, and appending to external files and devices.
To open a file for writing, prefix the filename with a greater-than sign:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>open(OUT, &quot;&gt;outfile&quot;);</PRE
></BLOCKQUOTE
>

<A
CLASS="indexterm"
NAME="AUTOID-6181"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6184"
></A
>
To open a file for appending, prefix the filename with two greater-than signs:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>open(LOGFILE, &quot;&gt;&gt;error_log&quot;);</PRE
></BLOCKQUOTE
>


The <CODE
CLASS="literal"
>open</CODE
> function returns true if the file is successfully opened, 
and false if it failed to open. 
Opening a file can fail for any number of reasons: a file does
not exist, is write-protected, or you don't have permission for a file or directory.
However, a filehandle that has not been successfully opened can still be
read from (giving you an immediate EOF) or written to, with no noticeable effects.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6190"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6192"
></A
>You should always check the result of <CODE
CLASS="literal"
>open</CODE
> immediately and report an
error if the operation does not succeed. The <CODE
CLASS="literal"
>warn</CODE
> function can report
an error to standard error if something goes wrong, and <CODE
CLASS="literal"
>die</CODE
> can terminate
your program and tell you what went wrong. For example:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>open(LOGFILE, &quot;/usr/httpd/error_log&quot;) 
	|| warn &quot;Could not open /usr/httpd/error_log.\n&quot;;
open(DATA, &quot;&gt;/tmp/data&quot;) || die &quot;Could not create /tmp/data\n.&quot;;</PRE
></BLOCKQUOTE
>

<A
CLASS="indexterm"
NAME="AUTOID-6198"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6201"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6204"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6206"
></A
>
Once the file is opened, you can access the data using the 
diamond operator, <CODE
CLASS="literal"
>&lt;</CODE
><CODE
CLASS="replaceable"
><I
>filehandle</I
></CODE
>&gt;. This is the line-input operator. 
When used on a filehandle in a scalar context, it will return a
line from a filehandle as a string. Each time it is called it will return
the next line from the filehandle, until it reaches the end-of-file. The
operator keeps track of which line it is on in the file, unless the filehandle
is closed and reopened, resetting the operator to the top-of-file. </P
><P
CLASS="para"
>For example, to print any 
line containing the word &quot;secret.html&quot; from the LOGFILE filehandle:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>while (&lt;LOGFILE&gt;) {
	print &quot;$_\n&quot; if /secret\.html/;
}</PRE
></BLOCKQUOTE
>

<A
CLASS="indexterm"
NAME="AUTOID-6212"
></A
>
In a list context, the line-input operator returns a list in which each
line is an element. The empty <CODE
CLASS="literal"
>&lt;&gt;</CODE
> operator reads from the ARGV filehandle,
which reads the array of filenames from the Perl command line. If <CODE
CLASS="literal"
>@ARGV</CODE
> is empty,
the operator resorts to standard input.</P
><P
CLASS="para"
>A number of functions send output to a filehandle. The filehandle
must already be opened for writing, of course. In the previous
example, <CODE
CLASS="literal"
>print</CODE
> wrote to the STDOUT filehandle, even though it wasn't
specified. Without a filehandle, <CODE
CLASS="literal"
>print</CODE
> defaults to the currently
selected output filehandle, which will be STDOUT until you open
and select another one in your program. See the <CODE
CLASS="literal"
>select</CODE
> function
(filehandle version) for more information. </P
><P
CLASS="para"
>If your program involves more than a couple of open filehandles, you should
be safe and specify the filehandles for all of your IO functions:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>print LOGFILE &quot;======= Generated report $date =======&quot;</PRE
></BLOCKQUOTE
>
<A
CLASS="indexterm"
NAME="AUTOID-6222"
></A
>
To close a filehandle, use the <CODE
CLASS="literal"
>close</CODE
> function. Filehandles 
are also closed when the program exits.<A
CLASS="indexterm"
NAME="AUTOID-6225"
></A
></P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_08.htm"
TITLE="4.8 References and Complex Data Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.8 References and Complex Data Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl in a Nutshell"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl in a Nutshell"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_10.htm"
TITLE="4.10 Formats"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.10 Formats"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.8 References and Complex Data Structures</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.10 Formats</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<p><!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
