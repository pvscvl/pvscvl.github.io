<HTML
><HEAD
>
<TITLE>CGI Overview (Perl in a Nutshell)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl in a Nutshell"><META
NAME="DC.creator"
CONTENT="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:55:37Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-286-7"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part04.htm"
TITLE="IV. CGI"><LINK
REL="prev"
HREF="part04.htm"
TITLE="IV. CGI"><LINK
REL="next"
HREF="ch09_02.htm"
TITLE="9.2 URL Encoding"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl in a Nutshell"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,71"
HREF="index.htm"
ALT="Perl in a Nutshell"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="PART"
HREF="part04.htm"
TITLE="IV. CGI"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: IV. CGI"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 9</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch09_02.htm"
TITLE="9.2 URL Encoding"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.2 URL Encoding"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="CHAPTER"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="PNUT-CH-9"
>9. CGI Overview</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="SECT1"
HREF="#PNUT-CH-SECT-1"
TITLE="9.1 A Typical CGI Interaction"
>A Typical CGI Interaction</A
><BR><A
CLASS="SECT1"
HREF="ch09_02.htm"
TITLE="9.2 URL Encoding"
>URL Encoding</A
><BR><A
CLASS="SECT1"
HREF="ch09_03.htm"
TITLE="9.3 Extra Path Information"
>Extra Path Information</A
><BR><A
CLASS="SECT1"
HREF="ch09_04.htm"
TITLE="9.4 CGI Environment Variables"
>CGI Environment Variables</A
></P
><P
></P
></DIV
><P
CLASS="para"
>Perl
is the most commonly used language for CGI programming
on the World Wide Web.<A
CLASS="indexterm"
NAME="PNUT-CH-9-IX-CGI-PROGRAMS"
></A
><A
CLASS="indexterm"
NAME="AUTOID-23998"
></A
>
The Common Gateway Interface (CGI) is an essential tool for creating
and managing comprehensive web sites. 
With CGI, you can write scripts that create interactive,
user-driven applications. </P
><P
CLASS="para"
>CGI allows the web server to communicate with
other programs that are running on the same machine. For example, with CGI, 
the web server
can invoke an external program, while passing user-specific data to the
program (such as what host the user is connecting from, or input
the user has supplied through an HTML form). The program
then processes that data, and the server passes the program's
response back to the web browser.</P
><P
CLASS="para"
>Rather than limiting the Web to documents written ahead of time, 
CGI enables web pages to be created on the fly, based upon the input
of users. You can use CGI scripts to create a wide
range of applications, from surveys to search tools, from Internet
service gateways to quizzes and games. 
You can increment the number of users who access a document or
let them sign an electronic guestbook. You can provide users
with all types of information, collect their comments, and respond
to them. </P
><P
CLASS="para"
>For Perl programmers, there are two approaches you can take
to CGI.  They are:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Programs that handle all CGI interaction directly, without
the use of a module such as CGI.pm.  While often frowned upon by
Perl programmers because it's more likely to 
introduce bugs, bypassing the modules has the advantage 
of avoiding the overhead of CGI.pm for quick, dirty tasks.
This chapter explains the concepts of CGI
necessary if you intend to write CGI programs from scratch.  </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-24009"
></A
>CGI.pm is a Perl module designed to facilitate CGI programming.
For non-trivial CGI programs, especially ones that need to 
maintain state over multiple transactions, CGI.pm is indispensable, and 
is included in the
standard Perl distribution as of Perl 5.004.  Rather
than discuss it in <A
CLASS="xref"
HREF="ch08_01.htm"
TITLE="Standard Modules"
>Chapter 8, <CITE
CLASS="chapter"
>Standard Modules</CITE
></A
>, with the rest of the standard 
libraries, however, its complexity and importance made
it a candidate for its own chapter, <A
CLASS="xref"
HREF="ch10_01.htm"
TITLE="The CGI.pm Module"
>Chapter 10, <CITE
CLASS="chapter"
>The CGI.pm Module</CITE
></A
>.</P
></LI
></UL
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-24014"
></A
>One performance hit for CGI programs is that the Perl
interpreter needs to be started up each and every
time a CGI script is called.  For improving performance
on Apache systems, the <EM
CLASS="emphasis"
>mod_perl</EM
> Apache module 
embeds the Perl interpreter directly into the server,
avoiding the startup overhead.  <A
CLASS="xref"
HREF="ch11_01.htm"
TITLE="Web Server Programming with mod_perl"
>Chapter 11, <CITE
CLASS="chapter"
>Web Server Programming with mod_perl</CITE
></A
>, talks about
installing and using <EM
CLASS="emphasis"
>mod_perl</EM
>.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PNUT-CH-SECT-1"
>9.1 A Typical CGI Interaction</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="PNUT-CH-9-IX-CGI-PROGRAMS-EXAMPLE-CGI-INTERACTION"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-9-IX-GUESTBOOK-CGI-EXAMPLE"
></A
>For an example of a CGI application, suppose you create
a guestbook for your website. The guestbook page asks users
to submit their first name and last name using a fill-in form
composed of two input text fields.  
<A
CLASS="xref"
HREF="ch09_01.htm"
TITLE="HTML form"
>Figure 9.1</A
>
shows the form you might see in your browser window.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="PNUT-CH-9-FIG-0"
>Figure 9.1: HTML form</A
></H4
><IMG
CLASS="graphic"
SRC="figs/pns_0902.gif"
ALT="Figure 9.1"><P
CLASS="para"
>The HTML that produces this form might read as follows:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Guestbook&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Fill in my guestbook!&lt;/H1&gt;
&lt;FORM METHOD=&quot;GET&quot; ACTION=&quot;/cgi-bin/guestbook.pl&quot;&gt;
&lt;PRE&gt;
First Name:   &lt;INPUT TYPE=&quot;TEXT&quot; NAME=&quot;firstname&quot;&gt;
Last Name:    &lt;INPUT TYPE=&quot;TEXT&quot; NAME=&quot;lastname&quot;&gt;

&lt;INPUT TYPE=&quot;SUBMIT&quot;&gt;    &lt;INPUT TYPE=&quot;RESET&quot;&gt;
&lt;/FORM&gt;</PRE
></BLOCKQUOTE
>


The form is written using special &quot;form&quot; tags, as follows:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-24037"
></A
>The <CODE
CLASS="literal"
>&lt;form&gt;</CODE
> tag defines the method used for the form
(either GET or POST) and the action to take when the
form is submitted&nbsp;- that is, the URL of the CGI program to 
pass the parameters to.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-24042"
></A
>The <CODE
CLASS="literal"
>&lt;input&gt;</CODE
> tag can be used in many different ways. In its
first two invocations, it creates a text input field and defines
the variable name to associate with the field's contents when the
form is submitted. The first field is given the variable name
<CODE
CLASS="literal"
>firstname</CODE
> and the second field is given the name <CODE
CLASS="literal"
>lastname</CODE
>.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>In its last two invocations, the <CODE
CLASS="literal"
>&lt;input&gt;</CODE
> tag creates a &quot;submit&quot; 
button and a &quot;reset&quot; button. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The <CODE
CLASS="literal"
>&lt;/form&gt;</CODE
> tag indicates the end of the form.</P
></LI
></UL
><P
CLASS="para"
>When the user presses the &quot;submit&quot; button, data entered
into the <CODE
CLASS="literal"
>&lt;input&gt;</CODE
> text fields is passed to the CGI program specified
by the <CODE
CLASS="literal"
>action</CODE
> attribute of the <CODE
CLASS="literal"
>&lt;form&gt;</CODE
> tag (in this
case, the <EM
CLASS="emphasis"
>/cgi-bin/guestbook.pl</EM
> program). </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-9-SECT-1.1"
>9.1.1 Transferring the Form Data</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-24061"
></A
><A
CLASS="indexterm"
NAME="AUTOID-24063"
></A
>Parameters to a CGI program are transferred either in the URL
or in the body text of the request. The method used to pass
parameters is determined by the <CODE
CLASS="literal"
>method</CODE
> attribute to the <CODE
CLASS="literal"
>&lt;form&gt;</CODE
>
tag. The GET method says to transfer the data within the URL 
itself;  for
example, under the GET method, the browser might initiate the HTTP 
transaction as follows:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>GET /cgi-bin/guestbook.pl?firstname=Joe&amp;lastname=Schmoe HTTP/1.0</PRE
></BLOCKQUOTE
>
&#13;</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-24069"
></A
>The POST method says to use the body portion of the HTTP request
to pass parameters. The same transaction with the POST method
would read as follows:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>POST /cgi-bin/guestbook.pl HTTP/1.0
	<EM
CLASS="emphasis"
>... [More headers here]</EM
>

firstname=Joe&amp;lastname=Schmoe</PRE
></BLOCKQUOTE
>


In both of these examples, you should recognize the <CODE
CLASS="literal"
>firstname</CODE
> and
<CODE
CLASS="literal"
>lastname</CODE
> variable names that were defined in the HTML form,
coupled with the values entered by the user. An ampersand (&amp;) is
used to separate the variable=value pairs. </P
><P
CLASS="para"
>The server now passes the variable=value pairs to the CGI program.
It does this either through Unix environment variables or in
standard input (STDIN). 
If the CGI program is called with the GET method, then parameters 
are expected to be embedded into the URL of the request, and
the server transfers them to the program by assigning them to the<A
CLASS="indexterm"
NAME="AUTOID-24076"
></A
>
QUERY_STRING environment variable. The CGI program can then 
retrieve the parameters from QUERY_STRING as it would read any
environment variable (for example, from the <CODE
CLASS="literal"
>%ENV</CODE
> hash in Perl).
If the CGI program is called
with the POST method, parameters are expected to be embedded
into the body of the request, and the server passes the body text
to the program as standard input (STDIN). </P
><P
CLASS="para"
>Other environment variables defined by the server for CGI
store such information as the format and length 
of the input, the remote host, the user, and various client
information. They also store the server name, the communication
protocol, and the name of the software running the server.
(We provide a list of the most common CGI environment variables 
later in this chapter.)</P
><P
CLASS="para"
>The CGI program needs to retrieve the information as appropriate
and then process it. The sky's the limit on what the CGI 
program actually does with the information it retrieves.
It might return
an anagram of the user's name, or tell her how many times her
name uses the letter &quot;t,&quot; or it might just compile the name into
a list that the programmer regularly sells to telemarketers. 
Only the programmer knows for sure.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-9-SECT-1.2"
>9.1.2 Creating Virtual Documents</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-24084"
></A
><A
CLASS="indexterm"
NAME="AUTOID-24086"
></A
>Regardless of what the CGI program does with its input, 
it's responsible for giving the browser
something to display when it's done.
It must either create
a new document to be served
to the browser or point to an existing document. On Unix,
programs send their output to standard output (STDOUT) as
a data stream that consists of two parts. The first
part is either a full or
partial HTTP header that (at minimum) describes the format
of the returned data (e.g., HTML, ASCII text, GIF, etc.). A blank line signifies the end of the header section.
The second part is the body of the output, which contains
the data conforming to the format type reflected in the header.
For example:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>Content-type: text/html
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Thanks!&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;&lt;H1&gt;Thanks for signing my guest book!&lt;/H1&gt;
	...
&lt;/BODY&gt;&lt;/HTML&gt;</PRE
></BLOCKQUOTE
>

<A
CLASS="indexterm"
NAME="AUTOID-24089"
></A
>
In this case, the only header line generated is 
Content-type, which gives the media format of the output 
as HTML (<CODE
CLASS="literal"
>text/html</CODE
>).
This line is essential for every CGI program, since 
it tells the browser what kind of format to expect.
The blank line separates the header from the body text (which,
in this case, is in HTML format as advertised). </P
><P
CLASS="para"
>The server transfers the results of the CGI program back to the
browser. 
The body text is not modified or interpreted by the server in 
any way, but
the server generally supplies additional headers 
with information such as the date, the name and version of
the server, etc. </P
><P
CLASS="para"
>CGI programs can also supply a complete HTTP header itself, 
in which case the server does not add any additional headers but instead 
transfers the response verbatim as returned by the CGI program.
The server needs to be configured to allow this behavior; see your
server documentation on NPH (no-parsed headers) scripts for more
information.</P
><P
CLASS="para"
>Here is the sample output of a program generating an HTML
virtual document, with a complete HTTP header:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>HTTP/1.0 200 OK
Date:  Thursday, 28-June-96 11:12:21 GMT
Server: NCSA/1.4.2
Content-type: text/html
Content-length: 2041

&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Thanks!&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Thanks for signing my guestbook!&lt;/H1&gt;
 	...
&lt;/BODY&gt;
&lt;/HTML&gt;</PRE
></BLOCKQUOTE
>


The header contains the communication protocol, the date and time
of the response, and the server name and version.
(<CODE
CLASS="literal"
>200 OK</CODE
> is a status code generated by the HTTP
protocol to communicate the status of a request, in this case
successful.)
Most importantly, the header also contains the  content type and
the number of characters (equivalent to the number of bytes)
of the enclosed data.</P
><P
CLASS="para"
>The result is that after users click the &quot;submit&quot; button, 
they see the message contained in the HTML section of the response
thanking them for signing the guestbook.<A
CLASS="indexterm"
NAME="AUTOID-24098"
></A
><A
CLASS="indexterm"
NAME="AUTOID-24099"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="PART"
HREF="part04.htm"
TITLE="IV. CGI"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: IV. CGI"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl in a Nutshell"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl in a Nutshell"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch09_02.htm"
TITLE="9.2 URL Encoding"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.2 URL Encoding"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>IV. CGI</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9.2 URL Encoding</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<p><!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
