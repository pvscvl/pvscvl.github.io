<HTML
><HEAD
>
<TITLE>4.8 References and Complex Data Structures (Perl in a Nutshell)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl in a Nutshell"><META
NAME="DC.creator"
CONTENT="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:24Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-286-7"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. The Perl Language"><LINK
REL="prev"
HREF="ch04_07.htm"
TITLE="4.7 Subroutines"><LINK
REL="next"
HREF="ch04_09.htm"
TITLE="4.9 Filehandles"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl in a Nutshell"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,71"
HREF="index.htm"
ALT="Perl in a Nutshell"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_07.htm"
TITLE="4.7 Subroutines"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.7 Subroutines"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. The Perl Language"
>Chapter 4<BR>The Perl Language</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_09.htm"
TITLE="4.9 Filehandles"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.9 Filehandles"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PNUT-CH-4-SECT-8"
>4.8 References and Complex Data Structures</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="PNUT-CH-4-IX-REFERENCES"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-4-IX-COMPLEX-DATA-STRUCTURES"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-4-IX-DATA-TYPES-COMPLEX-DATA-STRUCTURES"
></A
>A Perl reference is a fundamental data type that &quot;points&quot; to 
another piece of data or code. 
A reference knows the location of the information
and what type of data is stored there.</P
><P
CLASS="para"
>A reference is a scalar and
can be used anywhere a scalar can be used. Any array
element or hash value can contain a reference (a hash key cannot
contain a reference), and this is how nested data structures are
built in Perl. You can construct lists containing references to
other lists, which can contain references to hashes, and so on.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-4-SECT-8.1"
>4.8.1 Creating References</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6075"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6078"
></A
>You can create a reference to an existing variable or subroutine
by prefixing it with a backslash:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$a = &quot;fondue&quot;;
@alist = (&quot;pitt&quot;, &quot;hanks&quot;, &quot;cage&quot;, &quot;cruise&quot;);
%song = (&quot;mother&quot; =&gt; &quot;crying&quot;, &quot;brother&quot; =&gt; &quot;dying&quot;);
sub freaky_friday { s/mother/daughter/ }
# Create references
$ra = \$a;
$ralist = \@alist;
$rsong = \%song;
$rsub = \&amp;freaky_friday; # '&amp;' required for subroutine names</PRE
></BLOCKQUOTE
>


References to scalar constants are created similarly:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$pi = \3.14159;
$myname = \&quot;Charlie&quot;;</PRE
></BLOCKQUOTE
>

<A
CLASS="indexterm"
NAME="AUTOID-6083"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6087"
></A
>
Note that all references are prefixed by a <CODE
CLASS="literal"
>$</CODE
>, even
if they refer to an array or hash. All references are scalars, thus you
can copy a reference to another scalar or even reference
another reference:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$aref = \@names;
$bref = $aref;  # both refer to @names
$cref = \$aref; # $cref is a reference to $aref</PRE
></BLOCKQUOTE
>


Because arrays and hashes are collections of scalars, you can
create references to individual elements by prefixing their
names with backslashes:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$star = \$alist[2];       # refers to third element of @alist
$action = \$song{mother}; # refers to the 'mother' value of %song</PRE
></BLOCKQUOTE
>
&#13;</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PNUT-CH-4-SECT-8.1.1"
>4.8.1.1 Referencing anonymous data</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6096"
></A
>It is also possible to take references to literal data
not stored in a variable. This data is called
<EM
CLASS="emphasis"
>anonymous</EM
> because it is not bound to any named variable.</P
><P
CLASS="para"
>To create a reference to
a scalar constant, simply backslash the
literal string or number. </P
><P
CLASS="para"
>To create a reference to an anonymous array, place the
list of values in square brackets:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$shortbread = [ &quot;flour&quot;, &quot;butter&quot;, &quot;eggs&quot;, &quot;sugar&quot; ];</PRE
></BLOCKQUOTE
>


This creates a reference to an array, but the array is only
available through the reference <CODE
CLASS="literal"
>$shortbread</CODE
>. </P
><P
CLASS="para"
>A reference to an anonymous hash uses curly braces around the
list of elements:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$cast =  { host     =&gt; &quot;Space Ghost&quot;,
           musician =&gt; &quot;Zorak&quot;,
           director =&gt; &quot;Moltar&quot; };</PRE
></BLOCKQUOTE
>
&#13;</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-4-SECT-8.2"
>4.8.2 Dereferencing</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6108"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6110"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6113"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6116"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6119"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6122"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6125"
></A
>Dereferencing returns the value a reference points to. The
general method of dereferencing uses the reference variable
substituted for the regular name part of a variable. If
<CODE
CLASS="literal"
>$r</CODE
> is a reference, then <CODE
CLASS="literal"
>$$r</CODE
>, <CODE
CLASS="literal"
>@$r</CODE
>,
or <CODE
CLASS="literal"
>%$r</CODE
> retrieve the value being referred to, depending
on whether <CODE
CLASS="literal"
>$r</CODE
> is pointing to a scalar, array, or hash.
A reference can be used in all the
places where an ordinary data type can be used. </P
><P
CLASS="para"
>When a reference
is accidentally evaluated as a plain scalar, it returns a string that
indicates what type of data it points to and the memory address
of the data. </P
><P
CLASS="para"
>If you just want to know which type of data is being referenced,<A
CLASS="indexterm"
NAME="AUTOID-6135"
></A
>
use <CODE
CLASS="literal"
>ref</CODE
>, which 
returns one of the following strings if
its argument is a reference. Otherwise, it returns false.


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>SCALAR
ARRAY
HASH
CODE
GLOB
REF</PRE
></BLOCKQUOTE
>
&#13;</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PNUT-CH-4-SECT-8.2.1"
>4.8.2.1 Arrow dereferencing</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6142"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6145"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6147"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6151"
></A
>References to arrays, hashes, and subroutines can be dereferenced using the
<CODE
CLASS="literal"
>-&gt;</CODE
> operator. This operator dereferences the
expression to its left, which must resolve to an array or hash, and accesses
the element represented by the subscripted expression on its right. For
example, these three statement are equivalent:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$$arrayref[0] = &quot;man&quot;;
${$arrayref}[0] = &quot;man&quot;;
$arrayref-&gt;[0] = &quot;man&quot;;</PRE
></BLOCKQUOTE
>


The first statement dereferences <CODE
CLASS="literal"
>$arrayref</CODE
> first and then finds the
first element of that array. The second uses braces to clarify this procedure.
The third statement uses the arrow notation to do the same thing. </P
><P
CLASS="para"
>The arrow dereferencing notation can only be used to access a single
scalar value. You cannot use arrow operators in expressions that return
either slices or whole arrays or hashes.<A
CLASS="indexterm"
NAME="AUTOID-6159"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6160"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6161"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_07.htm"
TITLE="4.7 Subroutines"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.7 Subroutines"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl in a Nutshell"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl in a Nutshell"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_09.htm"
TITLE="4.9 Filehandles"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.9 Filehandles"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.7 Subroutines</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.9 Filehandles</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<p><!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
