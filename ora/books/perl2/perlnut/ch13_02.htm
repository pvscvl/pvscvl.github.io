<HTML
><HEAD
>
<TITLE>13.2 The IO::Socket Module (Perl in a Nutshell)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl in a Nutshell"><META
NAME="DC.creator"
CONTENT="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:56:23Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-286-7"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. Sockets"><LINK
REL="prev"
HREF="ch13_01.htm"
TITLE="13.1 Built-in Socket Functions"><LINK
REL="next"
HREF="ch14_01.htm"
TITLE="14. Email Connectivity"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl in a Nutshell"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,71"
HREF="index.htm"
ALT="Perl in a Nutshell"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch13_01.htm"
TITLE="13.1 Built-in Socket Functions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.1 Built-in Socket Functions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. Sockets"
>Chapter 13<BR>Sockets</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="CHAPTER"
HREF="ch14_01.htm"
TITLE="14. Email Connectivity"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14. Email Connectivity"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PNUT-CH-13-SECT-2"
>13.2 The IO::Socket Module</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="PNUT-CH-13-IX-SOCKETS-IOSOCKET-MODULE"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-13-IX-NETWORKING-SOCKETS-IOSOCKET-MODULE"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-13-IX-IOSOCKET-MODULE"
></A
>The IO::Socket module included in the core Perl distribution
provides an object-oriented approach to socket programming.
This module provides a convenient way to handle the large number of options you
have to deal with, and it
handles the laborious task of forming addresses.
IO::Socket is built upon the Socket module 
provided in the standard library. It inherits from IO::Handle, 
which supports a class of filehandle objects for much
of the IO library.  The following IO::Socket functions are simply frontends
for the corresponding built-in functions and use
the same syntax:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>socket
socketpair
bind
listen
send
recv
peername (same as getpeername)
sockname (same as getsockname)</PRE
></BLOCKQUOTE
>

<A
CLASS="indexterm"
NAME="AUTOID-28454"
></A
>
The <CODE
CLASS="literal"
>accept</CODE
> function in IO::Socket is slightly different from the
equivalent function, however, and is described later in the chapter.</P
><P
CLASS="para"
>IO:Socket contains two subclasses: INET and UNIX. The INET subclass 
is used to create and manipulate
Internet-domain sockets, such as the ones used in the examples. The UNIX 
subclass creates Unix domain sockets.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-13-SECT-2.1"
>13.2.1 Client-Side Sockets</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28462"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28464"
></A
>IO::Socket greatly simplifies the implementation of a socket for client communications.
The following example creates an Internet-domain socket (using the INET 
subclass) and attempts to connect to the specified server:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>use IO::Socket;
$sock = new IO::Socket::INET (PeerAddr =&gt; 'www.ora.com',
                              PeerPort =&gt; 80,
                              Proto    =&gt; 'tcp');
die &quot;$!&quot; unless $sock;</PRE
></BLOCKQUOTE
>


<CODE
CLASS="literal"
>IO::Socket::INET::new</CODE
> creates an object containing a socket filehandle
and connects it to the host and port specified in
<CODE
CLASS="literal"
>PeerAddr</CODE
> and <CODE
CLASS="literal"
>PeerPort</CODE
>. The object <CODE
CLASS="literal"
>$sock</CODE
> can 
then be written to and read from like other socket filehandles.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-13-SECT-2.2"
>13.2.2 Server-Side Sockets</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28475"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28477"
></A
>On the server side, IO::Socket provides a nice wrapper for creating 
server sockets. The wrapper encompasses
the <CODE
CLASS="literal"
>socket</CODE
>, <CODE
CLASS="literal"
>bind</CODE
>, and <CODE
CLASS="literal"
>listen</CODE
> procedures, while creating a new
IO::Socket object. For example, we can create an Internet-domain socket with
<CODE
CLASS="literal"
>IO::Socket::INET</CODE
>:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>use IO::Socket;
$sock = new IO::Socket::INET (LocalAddr =&gt; 'maude.ora.com',
                              LocalPort =&gt; 8888,
                              Proto     =&gt; 'tcp',
                              Listen    =&gt; 5);
die &quot;$!&quot; unless $sock;</PRE
></BLOCKQUOTE
>


The parameters for the new socket object determine whether it is
a server or a client socket.  Because we're creating a server socket, 
<CODE
CLASS="literal"
>LocalAddr</CODE
> and <CODE
CLASS="literal"
>LocalPort</CODE
> 
provide the address and port to bind to the socket. The <CODE
CLASS="literal"
>Listen</CODE
> parameter
gives the queue size for the number of client requests that can wait for an
<CODE
CLASS="literal"
>accept</CODE
> at any one time.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28490"
></A
>When the server receives a client request, it calls
the <CODE
CLASS="literal"
>accept</CODE
> method on the socket
object. This creates a new socket object on which the rest of the communication
can take place:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$new_sock = $sock-&gt;accept();</PRE
></BLOCKQUOTE
>


When communication is finished on both client and server sockets, they should
be destroyed with <CODE
CLASS="literal"
>close</CODE
>. If a socket is not properly closed, the next
time you attempt to use a socket with the same name, the system will complain
that the socket is already in use.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-13-SECT-2.3"
>13.2.3 IO::Socket Methods</A
></H3
><P
CLASS="para"
>The following methods are defined in IO::Socket and can be used on socket objects of 
either the INET or UNIX class:
<UL
CLASS="nutlist"
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_007.htm#"
TITLE="Reference: accept"
>accept</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_008.htm#"
TITLE="Reference: timeout"
>timeout</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_009.htm#"
TITLE="Reference: sockopt"
>sockopt</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_010.htm#"
TITLE="Reference: sockdomain"
>sockdomain</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_011.htm#"
TITLE="Reference: socktype"
>socktype</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_012.htm#"
TITLE="Reference: protocol"
>protocol</A
></LI
></UL
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-13-SECT-2.4"
>13.2.4 IO::Socket::INET Reference</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="PNUT-CH-13-IX-SOCKETS-IOSOCKET-MODULE-IOSOCKETINET-SUBCLASS"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-13-IX-NETWORKING-SOCKETS-IOSOCKETINET-SUBCLASS"
></A
><A
CLASS="indexterm"
NAME="PNUT-CH-13-IX-IOSOCKET-MODULE-IOSOCKETINET-SUBCLASS"
></A
>An Internet-domain socket is created with the <CODE
CLASS="literal"
>new</CODE
> method from
the IO::Socket::INET subclass.
The constructor can take the following options:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>PeerAddr =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>hostname</I
></CODE
><CODE
CLASS="literal"
>[:</CODE
><CODE
CLASS="replaceable"
><I
>port</I
></CODE
><CODE
CLASS="literal"
>]</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28582"
></A
>Specifies the remote host and optional port number for a client connection.
<CODE
CLASS="replaceable"
><I
>hostname</I
></CODE
> can be either a name, like <A
CLASS="systemitem.sitename"
HREF="../../../../../../../www.oreilly.com/"
>www.oreilly.com</A
>,
or an IP number of the form 207.44.21.2.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>PeerPort =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>port</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28592"
></A
>Specifies the port number on the remote host for a client connection. The
name of the service (such as <CODE
CLASS="literal"
>http</CODE
> or <CODE
CLASS="literal"
>nntp</CODE
>) 
may be used for the argument if the port number is not known.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>LocalAddr =&gt; <CODE
CLASS="replaceable"
><I
>hostname</I
></CODE
>[:<CODE
CLASS="replaceable"
><I
>port</I
></CODE
>]</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28603"
></A
>Specifies the local address (and optional port number) to bind to a server-side socket.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>LocalPort =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>port</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28611"
></A
>Specifies the local port number (or service name) to bind to a server-side socket.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>Proto =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>name</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28619"
></A
>Specifies the protocol to be run on the socket, i.e., <CODE
CLASS="literal"
>tcp</CODE
> or <CODE
CLASS="literal"
>udp</CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>Type =&gt; SOCK_STREAM | SOCK_DGRAM</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28628"
></A
>Specifies the type of socket. <CODE
CLASS="literal"
>SOCK_STREAM</CODE
> indicates a stream-based socket connection,
and <CODE
CLASS="literal"
>SOCK_DGRAM</CODE
> indicates a message-based (datagram) connection.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>Listen =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>n</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28639"
></A
>Sets the listen-queue size to <CODE
CLASS="replaceable"
><I
>n</I
></CODE
> number of client requests.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>Reuse =&gt; 1</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28648"
></A
>Given a non-zero number, this option allows the local bind address to
be reused should the socket need to be reopened after an error.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>Timeout =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>n</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28656"
></A
>Sets the timeout.</P
></DD
></DL
><P
CLASS="para"
>Whether a server (receiving) or client (requesting) socket is created depends
on the parameters provided to the constructor. If <CODE
CLASS="literal"
>Listen</CODE
> is defined, a
server socket is automatically created.  If no protocol is specified, it is 
derived from the service on the given port
number. If no port number is given, <CODE
CLASS="literal"
>tcp</CODE
> is used by default.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PNUT-CH-13-SECT-2.4.1"
>13.2.4.1 IO::Socket::INET methods</A
></H4
><P
CLASS="para"
>The following methods can be used on socket filehandle objects created by
IO::Socket::INET:
<UL
CLASS="nutlist"
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_013.htm#"
TITLE="Reference: sockaddr"
>sockaddr</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_014.htm#"
TITLE="Reference: sockport"
>sockport</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_015.htm#"
TITLE="Reference: sockhost"
>sockhost</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_016.htm#"
TITLE="Reference: peeraddr"
>peeraddr</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_017.htm#"
TITLE="Reference: peerport"
>peerport</A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_018.htm#"
TITLE="Reference: peerhost"
>peerhost</A
></LI
></UL
><A
CLASS="indexterm"
NAME="AUTOID-28707"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28708"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28709"
></A
></P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PNUT-CH-13-SECT-2.5"
>13.2.5 IO::Socket::UNIX Reference</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28713"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28716"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28720"
></A
>The IO::Socket::UNIX subclass creates a Unix-domain socket. 
Unix-domain sockets are local to the current host and are used internally to 
implement pipes, thus providing communication between unrelated processes. 
Using
sockets provides finer control than using named pipes, also 
called FIFO (first-in, first-out) buffers. This is because
receiving sockets can distinguish between different client
connections, which can then be assigned to different sessions 
with the <CODE
CLASS="literal"
>accept</CODE
> call.</P
><P
CLASS="para"
>The IO::Socket::UNIX constructor (<CODE
CLASS="literal"
>new()</CODE
>) creates the socket and returns an
object containing a filehandle. The constructor can take the following options:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>Type =&gt; SOCK_STREAM | SOCK_DGRAM</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28732"
></A
>Indicates the type of socket: <CODE
CLASS="literal"
>SOCK_STREAM</CODE
> for streaming, <CODE
CLASS="literal"
>SOCK_DGRAM</CODE
> for packets or datagrams.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>Local =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>pathname</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28743"
></A
>Provides the pathname of the FIFO buffer to bind to the socket.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>Peer =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>pathname</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28751"
></A
>Provides the pathname to the destination FIFO buffer.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>Listen =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>n</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-28759"
></A
>Creates a listen socket and sets the queue size to <CODE
CLASS="replaceable"
><I
>n</I
></CODE
>.</P
></DD
></DL
><P
CLASS="para"
>The following methods can be used on an object created with IO::Socket::UNIX.
<UL
CLASS="nutlist"
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_019.htm#"
TITLE="Reference: hostpath"
><B
CLASS="emphasis.bold"
>hostpath</B
></A
></LI
><LI
CLASS="term"
><A
CLASS="nutentry"
HREF="c13_020.htm#"
TITLE="Reference: peerpath"
><B
CLASS="emphasis.bold"
>peerpath</B
></A
></LI
></UL
><A
CLASS="indexterm"
NAME="AUTOID-28783"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28784"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28785"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28786"
></A
><A
CLASS="indexterm"
NAME="AUTOID-28787"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch13_01.htm"
TITLE="13.1 Built-in Socket Functions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.1 Built-in Socket Functions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl in a Nutshell"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl in a Nutshell"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="CHAPTER"
HREF="ch14_01.htm"
TITLE="14. Email Connectivity"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14. Email Connectivity"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>13.1 Built-in Socket Functions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>14. Email Connectivity</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<p><!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
