<HTML
><HEAD
>
<TITLE>Reference: GetOptions (Perl in a Nutshell)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl in a Nutshell"><META
NAME="DC.creator"
CONTENT="Ellen Siever, Stephen Spainhour &amp; Nathan Patwardhan"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:47:47Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-286-7"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_86.htm"
TITLE="8.86 Getopt::Long"><LINK
REL="prev"
HREF="ch08_86.htm"
TITLE="8.86 Getopt::Long"><LINK
REL="next"
HREF="c08_205.htm"
TITLE="Reference: config"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl in a Nutshell"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,71"
HREF="index.htm"
ALT="Perl in a Nutshell"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch08_86.htm"
TITLE="8.86 Getopt::Long"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.86 Getopt::Long"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. Standard Modules"
>Chapter 8<BR>Standard Modules</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="NUTENTRY"
HREF="c08_205.htm"
TITLE="Reference: config"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: Reference: config"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="NUTENTRY"
><H2
CLASS="nutentry"
><A
CLASS="term"
NAME="AUTOID-18009"
>GetOptions</A
></H2
><PRE
CLASS="nutsynopsis"
>$<CODE
CLASS="replaceable"
><I
>result</I
></CODE
> <B
CLASS="emphasis.bold"
>= GetOptions(</B
><CODE
CLASS="replaceable"
><I
>option-descriptions</I
></CODE
><B
CLASS="emphasis.bold"
>)</B
></PRE
><DL
CLASS="nutentrybody"
><P
CLASS="para"
>Uses descriptions from <EM
CLASS="emphasis"
>option-descriptions</EM
> to retrieve and process the
command-line options with which your Perl program was invoked.
The options are taken from <CODE
CLASS="literal"
>@ARGV</CODE
>.  After <CODE
CLASS="literal"
>GetOptions</CODE
>
has processed the options, <CODE
CLASS="literal"
>@ARGV</CODE
> contains only command-line
arguments that were not options. Returns 0 if errors are detected.
Each option description consists of two elements:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Option specifier</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Defines the option name and optionally a value as an argument specifier.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Option linkage</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A reference to a variable that is set when the option is present.</P
></DD
></DL
><P
CLASS="para"
><CODE
CLASS="literal"
>GetOptions</CODE
> can also take as a first argument a reference to
a hash that describes the linkage for the options. The linkage specified 
in the argument list takes precedence over the 
one specified in the hash. Thus the following are equivalent:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>%optctl = (size =&gt; \$offset);
&amp;GetOptions(\%optctl, &quot;size=i&quot;);</PRE
></BLOCKQUOTE
>


and:


<BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>&amp;GetOptions(&quot;size=i&quot; =&gt; \$offset);</PRE
></BLOCKQUOTE
>
&#13;</P
><DIV
CLASS="refsect2"
><H3
CLASS="refsect2"
><A
CLASS="title"
NAME="AUTOID-18037"
>Option specifiers</A
></H3
><P
CLASS="para"
>Each option specifier consists of an option name and possibly
an argument specifier.  The name can be a name, or a list of names
separated by <CODE
CLASS="literal"
>|</CODE
>; the first name in the list is the true name
of the option and the others are treated as aliases. Option names
may be invoked with the shortest unique abbreviation.
Values for argument specifiers are:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;none&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Option takes no argument.  The option variable is set to 1.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>!&nbsp;&nbsp;&nbsp;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Option does not take an argument and may be negated, that is, prefixed by
&quot;<CODE
CLASS="literal"
>no</CODE
>&quot;.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>=s&nbsp;&nbsp;&nbsp;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Option takes a mandatory argument that is a string to be
assigned to the option variable. 
Even if the argument starts with <CODE
CLASS="literal"
>-</CODE
> or <CODE
CLASS="literal"
>--</CODE
>, it
is assigned to the option variable rather than treated as another
option.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>:s&nbsp;&nbsp;&nbsp;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Option takes an optional string argument. If the option is invoked with no
argument, an empty string (<CODE
CLASS="literal"
>&quot;&quot;</CODE
>) is assigned to the option variable.
If the argument starts with <CODE
CLASS="literal"
>-</CODE
> or <CODE
CLASS="literal"
>--</CODE
>, it
is treated as another option rather than assigned to the option variable.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>=i&nbsp;&nbsp;&nbsp;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Option takes a mandatory integer argument, which
may start with <CODE
CLASS="literal"
>-</CODE
> to indicate a negative value.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>:i&nbsp;&nbsp;&nbsp;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Option takes an optional integer argument that may start with <CODE
CLASS="literal"
>-</CODE
>
to indicate a negative value. With no argument, the value 0 is assigned to the
option variable.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>=f&nbsp;&nbsp;&nbsp;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Option takes a mandatory floating-point argument that
may start with <CODE
CLASS="literal"
>-</CODE
> to indicate a negative value.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>:f&nbsp;&nbsp;&nbsp;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Option takes an optional floating-point argument that may start with
<CODE
CLASS="literal"
>-</CODE
> to indicate a negative value. With no argument,
the value 0 is assigned to the option variable.</P
></DD
></DL
><P
CLASS="para"
>A hyphen (<CODE
CLASS="literal"
>-</CODE
>) by itself is considered an option whose name is
the empty string. A double hyphen (<CODE
CLASS="literal"
>--</CODE
>) by itself terminates
option processing.  Any options following the double hyphen
remain in <CODE
CLASS="literal"
>@ARGV</CODE
> when <CODE
CLASS="literal"
>GetOptions</CODE
> returns.
If an argument specifier ends with <CODE
CLASS="literal"
>@</CODE
> (e.g., <CODE
CLASS="literal"
>=s@</CODE
>),
then the option is treated as an array.</P
><P
CLASS="para"
>The special option specifier <CODE
CLASS="literal"
>&lt;&gt;</CODE
> can be used to designate a subroutine
to handle non-option arguments. For this specifier to be used,
the variable <CODE
CLASS="literal"
>$Getopt::Long::order</CODE
> must have the value of the
predefined and exported variable, <CODE
CLASS="literal"
>$PERMUTE</CODE
>. See the description of
<CODE
CLASS="literal"
>Getopt::Long::config</CODE
> below.</P
></DIV
><DIV
CLASS="refsect2"
><H3
CLASS="refsect2"
><A
CLASS="title"
NAME="AUTOID-18104"
>Linkage specification</A
></H3
><P
CLASS="para"
>The linkage specifier can be a reference to a:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Scalar</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The new value is stored in the referenced
variable.  If the option occurs more than once, the previous value is
overwritten.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Array</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The new value is appended (pushed) onto the referenced array.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Subroutine</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The referenced subroutine is called with
two arguments: the option name, which is always the true name,
and the option value.</P
></DD
></DL
><P
CLASS="para"
>If no linkage is explicitly
specified, but a hash reference is passed, <CODE
CLASS="literal"
>GetOptions</CODE
>
puts the value in the hash. For array options, a 
reference to an anonymous array is generated.</P
><P
CLASS="para"
>If no linkage is explicitly specified and no hash reference is passed,
<CODE
CLASS="literal"
>GetOptions</CODE
> puts the value into a global variable named
after the option, prefixed by <CODE
CLASS="literal"
>opt_</CODE
>. Characters that are not 
part of the variable syntax are translated to underscores.  For example,
<CODE
CLASS="literal"
>--fpp-struct-return</CODE
> sets the variable
<CODE
CLASS="literal"
>$opt_fpp_struct_return</CODE
>.</P
></DIV
></DL
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch08_86.htm"
TITLE="8.86 Getopt::Long"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.86 Getopt::Long"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl in a Nutshell"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl in a Nutshell"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="NUTENTRY"
HREF="c08_205.htm"
TITLE="Reference: config"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: Reference: config"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.86 Getopt::Long</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>Reference: config</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<p><!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
