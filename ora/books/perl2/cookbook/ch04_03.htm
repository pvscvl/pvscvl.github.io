<HTML
><HEAD
>
<TITLE>Recipe 4.2. Printing a List with Commas (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:31:11Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"><LINK
REL="prev"
HREF="ch04_02.htm"
TITLE="4.1. Specifying a List In Your Program"><LINK
REL="next"
HREF="ch04_04.htm"
TITLE="4.3. Changing Array Size"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm"
TITLE="4.1. Specifying a List In Your Program"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.1. Specifying a List In Your Program"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"
>Chapter 4<BR>Arrays</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_04.htm"
TITLE="4.3. Changing Array Size"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.3. Changing Array Size"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-chap04_printing_0"
>4.2. Printing a List with Commas</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-173"
>Problem <A
CLASS="indexterm"
NAME="ch04-idx-1000006608-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006608-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006608-2"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006608-3"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006608-4"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006608-5"
></A
></A
></H3
><P
CLASS="para"
>You'd like to print out a list with an unknown number of elements with an "and" before the last element, and with commas between each element if there are more than two.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-179"
>Solution</A
></H3
><P
CLASS="para"
>Use this function, which returns the formatted string: <A
CLASS="indexterm"
NAME="ch04-idx-1000006616-0"
></A
></P
><PRE
CLASS="programlisting"
>sub commify_series {
    (@_ == 0) ? ''                                      :
    (@_ == 1) ? $_[0]                                   :
    (@_ == 2) ? join(&quot; and &quot;, @_)                       :
                join(&quot;, &quot;, @_[0 .. ($#_-1)], &quot;and $_[-1]&quot;);
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-197"
>Discussion</A
></H3
><P
CLASS="para"
>It often looks odd to print out arrays:</P
><PRE
CLASS="programlisting"
>@array = (&quot;red&quot;, &quot;yellow&quot;, &quot;green&quot;);
print &quot;I have &quot;, @array, &quot; marbles.\n&quot;;
print &quot;I have @array marbles.\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>I have redyellowgreen marbles.</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>I have red yellow green marbles.</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>What you really want it to say is, <CODE
CLASS="literal"
>&quot;I</CODE
> <CODE
CLASS="literal"
>have</CODE
> <CODE
CLASS="literal"
>red,</CODE
> <CODE
CLASS="literal"
>yellow,</CODE
> <CODE
CLASS="literal"
>and</CODE
> <CODE
CLASS="literal"
>green</CODE
> <CODE
CLASS="literal"
>marbles&quot;</CODE
>. The function given in the solution generates strings in that format. The word <CODE
CLASS="literal"
>&quot;and&quot;</CODE
> is placed between the last two list elements. If there are more than two elements in the list, a comma is placed between every element.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch04_03.htm"
TITLE="commify_series (continued)"
>Example 4.1</A
> gives a complete demonstration of the function, with one addition: If any element in the list already contains a comma, a semi-colon is used for the separator character instead.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch04-17462"
>Example 4.1: commify_series (continued)</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# commify_series - show proper comma insertion in list output

@lists = (
    [ 'just one thing' ],
    [ qw(Mutt Jeff) ],
    [ qw(Peter Paul Mary) ],
    [ 'To our parents', 'Mother Theresa', 'God' ],
    [ 'pastrami', 'ham and cheese', 'peanut butter and jelly', 'tuna' ],
    [ 'recycle tired, old phrases', 'ponder big, happy thoughts' ],
    [ 'recycle tired, old phrases', 
      'ponder big, happy thoughts', 
      'sleep and dream peacefully' ],
    );

foreach $aref (@lists) {
    print &quot;The list is: &quot; . commify_series(@$aref) . &quot;.\n&quot;;
} 

sub commify_series {
    my $sepchar = grep(/,/ =&gt; @_) ? &quot;;&quot; : &quot;,&quot;;
    (@_ == 0) ? ''                                      :
    (@_ == 1) ? $_[0]                                   :
    (@_ == 2) ? join(&quot; and &quot;, @_)                       :
                join(&quot;$sepchar &quot;, @_[0 .. ($#_-1)], &quot;and $_[-1]&quot;);
}</PRE
></DIV
><P
CLASS="para"
>Here's the output from the program:</P
><PRE
CLASS="programlisting"
><CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>The list is: just one thing.</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>The list is: Mutt and Jeff.</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>The list is: Peter, Paul, and Mary.</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>The list is: To our parents, Mother Theresa, and God.</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>The list is: pastrami, ham and cheese, peanut butter and jelly, and tuna.</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>The list is: recycle tired, old phrases and ponder big, happy thoughts.</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>The list is: recycle tired, old phrases; ponder </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>   big, happy thoughts; and sleep and dream peacefully.</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>As you see, we don't follow the ill-advised practice of omitting the final comma from a series under any circumstances. To do so introduces unfortunate ambiguities and unjustifiable exceptions. The examples above would have claimed that we were the offspring of Mother Theresa and God, and would have had us eating sandwiches made of jelly and tuna fish fixed together atop the peanut butter.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-289"
>See Also <A
CLASS="indexterm"
NAME="ch04-idx-1000006610-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006610-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006610-2"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006610-3"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006610-4"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006610-5"
></A
></A
></H3
><P
CLASS="para"
>Fowler's <CITE
CLASS="citetitle"
>Modern English Usage</CITE
>; we explain the nested list syntax in <A
CLASS="xref"
HREF="ch11_02.htm"
TITLE="Taking References to Arrays"
>Recipe 11.1</A
>; the <CODE
CLASS="literal"
>grep</CODE
> function in <I
CLASS="filename"
>perlfunc </I
>(1) and <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the conditional operator <CODE
CLASS="literal"
>(&quot;?:&quot;)</CODE
> is discussed in <I
CLASS="filename"
>perlop </I
>(1) and in the <A
CLASS="olink"
HREF="../prog/ch02_05.htm"
>"Conditional Operator"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm"
TITLE="4.1. Specifying a List In Your Program"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.1. Specifying a List In Your Program"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_04.htm"
TITLE="4.3. Changing Array Size"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.3. Changing Array Size"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.1. Specifying a List In Your Program</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.3. Changing Array Size</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
