<HTML
><HEAD
>
<TITLE>Recipe 16.6. Preprocessing Input (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:43:43Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"><LINK
REL="prev"
HREF="ch16_06.htm"
TITLE="16.5. Filtering Your Own Output"><LINK
REL="next"
HREF="ch16_08.htm"
TITLE="16.7. Reading STDERR from a Program"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_06.htm"
TITLE="16.5. Filtering Your Own Output"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.5. Filtering Your Own Output"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"
>Chapter 16<BR>Process Management and Communication</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_08.htm"
TITLE="16.7. Reading STDERR from a Program"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.7. Reading STDERR from a Program"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch16-56421"
>16.6. Preprocessing Input</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1210"
>Problem<A
CLASS="indexterm"
NAME="ch16-idx-1000006281-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006281-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006281-2"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006281-3"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006281-4"
></A
></A
></H3
><P
CLASS="para"
>You'd like your programs to work on files with funny formats, such as compressed files or remote web documents specified with a URL, but your program only knows how to access regular text in local files.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1216"
>Solution</A
></H3
><P
CLASS="para"
>Take advantage of Perl's easy pipe handling by changing your input files' names to pipes before opening them.</P
><P
CLASS="para"
>To autoprocess gzipped or compressed files by decompressing them with <EM
CLASS="emphasis"
>gzip</EM
>, use:</P
><PRE
CLASS="programlisting"
>@ARGV = map { /\.(gz|Z)$/ ? &quot;gzip -dc $_ |&quot; : $_  } @ARGV;
while (&lt;&gt;) {
    # .......
} </PRE
><P
CLASS="para"
>To fetch URLs before processing them, use the <EM
CLASS="emphasis"
>GET</EM
> program from LWP (see <A
CLASS="xref"
HREF="ch20_01.htm"
TITLE="Web Automation"
>Chapter 20, <CITE
CLASS="chapter"
>Web Automation</CITE
></A
>):</P
><PRE
CLASS="programlisting"
>@ARGV = map { m#^\w+://# ? &quot;GET $_ |&quot; : $_ } @ARGV;
while (&lt;&gt;) {
    # .......
} </PRE
><P
CLASS="para"
>You might prefer to fetch just the text, of course, not the HTML. That just means using a different command, perhaps <EM
CLASS="emphasis"
>lynx -dump</EM
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1244"
>Discussion</A
></H3
><P
CLASS="para"
>As shown in <A
CLASS="xref"
HREF="ch16_02.htm"
TITLE="Gathering Output from a Program"
>Recipe 16.1</A
>, Perl's built-in <CODE
CLASS="literal"
>open</CODE
> function is magical: you don't have to do anything special to get Perl to open a pipe instead of a file. (That's why it's sometimes called <EM
CLASS="emphasis"
>magic open</EM
><A
CLASS="indexterm"
NAME="ch16-idx-1000006307-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006307-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006307-2"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006307-3"
></A
> and, when applied to implicit ARGV processing, <EM
CLASS="emphasis"
>magic ARGV</EM
>.) If it looks like a pipe, Perl will open it like a pipe. We take advantage of this by rewriting certain filenames to include a decompression or other preprocessing stage. For example, the file <CODE
CLASS="literal"
>&quot;09tails.gz&quot;</CODE
> becomes <CODE
CLASS="literal"
>&quot;gzcat</CODE
> <CODE
CLASS="literal"
>-dc</CODE
> <CODE
CLASS="literal"
>09tails.gz|&quot;</CODE
>.</P
><P
CLASS="para"
>This technique has further applications. Suppose you wanted to read <EM
CLASS="emphasis"
>/etc/passwd</EM
> if the machine isn't using NIS, and the output of <EM
CLASS="emphasis"
>ypcat passwd</EM
> if it is. You'd use the output of the <EM
CLASS="emphasis"
>domainname</EM
> program to decide if you're running NIS, and then set the filename to open to be either <CODE
CLASS="literal"
>&quot;&lt;</CODE
> <CODE
CLASS="literal"
>/etc/passwd&quot;</CODE
> or <CODE
CLASS="literal"
>&quot;ypcat</CODE
> <CODE
CLASS="literal"
>passwd|&quot;</CODE
>:</P
><PRE
CLASS="programlisting"
>$pwdinfo = `domainname` =~ /^(\(none\))?$/
                ? '&lt; /etc/passwd'
                : 'ypcat  passwd |';

open(PWD, $pwdinfo)                 or die &quot;can't open $pwdinfo: $!&quot;;</PRE
><P
CLASS="para"
>The wonderful thing is that even if you didn't think to build such processing into your program, Perl already did it for you. Imagine a snippet of code like this:</P
><PRE
CLASS="programlisting"
>print &quot;File, please? &quot;;
chomp($file = &lt;&gt;);
open (FH, $file)                    or die &quot;can't open $file: $!&quot;;</PRE
><P
CLASS="para"
>The user can enter a regular filename&nbsp;- or something like <CODE
CLASS="literal"
>&quot;webget</CODE
> <CODE
CLASS="literal"
>http://www.perl.com</CODE
> <CODE
CLASS="literal"
>|&quot;</CODE
> instead&nbsp;- and your program would suddenly be reading from the output of some <EM
CLASS="emphasis"
>webget</EM
> program. They could even enter -, a lone minus sign, which, when opened for reading, interpolates standard input instead.</P
><P
CLASS="para"
>This also comes in handy with the automatic ARGV processing we saw in <A
CLASS="xref"
HREF="ch07_08.htm"
TITLE="Writing a Filter"
>Recipe 7.7</A
>.<A
CLASS="indexterm"
NAME="ch16-idx-1000006283-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006283-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006283-2"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006283-3"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006283-4"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1000005186"
>See Also</A
></H3
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch07_08.htm"
TITLE="Writing a Filter"
>Recipe 7.7</A
>; <A
CLASS="xref"
HREF="ch16_05.htm"
TITLE="Reading or Writing to Another Program"
>Recipe 16.4</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_06.htm"
TITLE="16.5. Filtering Your Own Output"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.5. Filtering Your Own Output"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_08.htm"
TITLE="16.7. Reading STDERR from a Program"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.7. Reading STDERR from a Program"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>16.5. Filtering Your Own Output</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>16.7. Reading STDERR from a Program</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
