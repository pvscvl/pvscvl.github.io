<HTML
><HEAD
>
<TITLE>Recipe 11.11. Printing Data Structures (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:51Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"><LINK
REL="prev"
HREF="ch11_11.htm"
TITLE="11.10. Reading and Writing Hash Records to Text Files"><LINK
REL="next"
HREF="ch11_13.htm"
TITLE="11.12. Copying Data Structures"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_11.htm"
TITLE="11.10. Reading and Writing Hash Records to Text Files"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.10. Reading and Writing Hash Records to Text Files"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"
>Chapter 11<BR>References and Records</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_13.htm"
TITLE="11.12. Copying Data Structures"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.12. Copying Data Structures"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-chap11_printing_0"
>11.11. Printing Data Structures</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-1156"
>Problem<A
CLASS="indexterm"
NAME="ch11-idx-1000004855-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004855-1"
></A
></A
></H3
><P
CLASS="para"
>You want to print out a data structure.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-1162"
>Solution</A
></H3
><P
CLASS="para"
>If the output's legibility and layout are important, write your own custom printing routine.</P
><P
CLASS="para"
>If you are in the Perl debugger, use the <CODE
CLASS="literal"
>x</CODE
><A
CLASS="indexterm"
NAME="ch11-idx-1000004856-0"
></A
> command:</P
><PRE
CLASS="programlisting"
>DB&lt;1&gt; $reference = [ { &quot;foo&quot; =&gt; &quot;bar&quot; }, 3, sub { print &quot;hello, world\n&quot; } ];
DB&lt;2&gt; x $reference
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>  0  ARRAY(0x1d033c)</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>    0  HASH(0x7b390)</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>       'foo' = 'bar'&gt;</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>    1  3</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>    2  CODE(0x21e3e4)</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>       - &amp; in ???&gt;</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>From within your own programs, use the <CODE
CLASS="literal"
>Dumper</CODE
> function from the CPAN module <A
CLASS="indexterm"
NAME="ch11-idx-1000004857-0"
></A
>Data::Dumper:</P
><PRE
CLASS="programlisting"
>use Data::Dumper;
print Dumper($reference);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-1194"
>Discussion</A
></H3
><P
CLASS="para"
>Sometimes you'll want to make a dedicated function for your data structure that delivers a particular output format, but often this is overkill. If you're running under the Perl debugger, the <CODE
CLASS="literal"
>x</CODE
> and <CODE
CLASS="literal"
>X</CODE
> commands provide nice pretty-printing. The <CODE
CLASS="literal"
>x</CODE
> command is more useful because it works on both global and lexical variables, whereas <CODE
CLASS="literal"
>X</CODE
> only works on globals. Pass <CODE
CLASS="literal"
>x</CODE
> a reference to the data structure you want to print.</P
><PRE
CLASS="programlisting"
>D&lt;1&gt; x \@INC
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>  0  ARRAY(0x807d0a8)</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>     0  '/home/tchrist/perllib' </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>     1  '/usr/lib/perl5/i686-linux/5.00403'</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>     2  '/usr/lib/perl5' </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>     3  '/usr/lib/perl5/site_perl/i686-linux' </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>     4  '/usr/lib/perl5/site_perl' </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>     5  '.'</I
></CODE
></B
></CODE
><A
CLASS="indexterm"
NAME="ch11-idx-1000004863-0"
></A
></PRE
><P
CLASS="para"
>These commands use the <EM
CLASS="emphasis"
>dumpvar.pl</EM
> library. Here's an example:</P
><PRE
CLASS="programlisting"
>{ package main; require &quot;dumpvar.pl&quot; } 
*dumpvar = \&amp;main::dumpvar if __PACKAGE__ ne 'main';
dumpvar(&quot;main&quot;, &quot;INC&quot;);             # show both @INC and %INC</PRE
><P
CLASS="para"
>The <EM
CLASS="emphasis"
>dumpvar.pl</EM
> library isn't a module, but we wish it were &nbsp;-  so we cajole it into exporting its <CODE
CLASS="literal"
>dumpvar</CODE
> function anyway. The first two lines forcibly import the <CODE
CLASS="literal"
>main::dumpvar</CODE
> function from package <CODE
CLASS="literal"
>main</CODE
> into the current package, assuming it's different. Here's the output of that call:</P
><PRE
CLASS="programlisting"
><CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>@INC = (</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>   0  '/home/tchrist/perllib/i686-linux'</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>   1  '/home/tchrist/perllib'</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>   2  '/usr/lib/perl5/i686-linux/5.00404'</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>   3  '/usr/lib/perl5'</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>   4  '/usr/lib/perl5/site_perl/i686-linux'</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>   5  '/usr/lib/perl5/site_perl'</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>   6  '.'</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>)</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>%INC = (</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>   'dumpvar.pl' = '/usr/lib/perl5/i686-linux/5.00404/dumpvar.pl'</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>   'strict.pm' = '/usr/lib/perl5/i686-linux/5.00404/strict.pm'</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>)</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>The Data::Dumper module, located on CPAN, has a more flexible solution. It provides a <CODE
CLASS="literal"
>Dumper</CODE
> function that takes a list of references and returns a string with a printable (and <CODE
CLASS="literal"
>eval</CODE
>able) form of those references.</P
><PRE
CLASS="programlisting"
>use Data::Dumper; 
print Dumper(\@INC); 
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>$VAR1 = [</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>      '/home/tchrist/perllib', </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>      '/usr/lib/perl5/i686-linux/5.00403',</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>      '/usr/lib/perl5', </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>      '/usr/lib/perl5/site_perl/i686-linux',</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>      '/usr/lib/perl5/site_perl', </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>      '.'</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>];</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>Data::Dumper supports a variety of output formats. Check its documentation for details.<A
CLASS="indexterm"
NAME="ch11-idx-1000004859-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004859-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004859-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-1276"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the CPAN module Data::Dumper; the section <A
CLASS="olink"
HREF="../prog/ch08_01.htm"
>"The Perl Debugger"</A
> from <A
CLASS="olink"
HREF="../prog/ch08_01.htm"
>Chapter 8</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> or <I
CLASS="filename"
>perldebug </I
>(1)</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_11.htm"
TITLE="11.10. Reading and Writing Hash Records to Text Files"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.10. Reading and Writing Hash Records to Text Files"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_13.htm"
TITLE="11.12. Copying Data Structures"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.12. Copying Data Structures"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.10. Reading and Writing Hash Records to Text Files</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.12. Copying Data Structures</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
