<HTML
><HEAD
>
<TITLE>Recipe 13.1. Constructing an Object (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:15Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"><LINK
REL="prev"
HREF="ch13_01.htm"
TITLE="13.0. Introduction"><LINK
REL="next"
HREF="ch13_03.htm"
TITLE="13.2. Destroying an Object"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_01.htm"
TITLE="13.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"
>Chapter 13<BR>Classes, Objects, and Ties</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_03.htm"
TITLE="13.2. Destroying an Object"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.2. Destroying an Object"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-25741"
>13.1. Constructing an Object</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-281"
>Problem<A
CLASS="indexterm"
NAME="ch13-idx-1000004463-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004463-1"
></A
></A
></H3
><P
CLASS="para"
>You want to create a way for your users to generate new objects.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-287"
>Solution</A
></H3
><P
CLASS="para"
>Make a constructor. In Perl, the constructor method must not only initialize its object, but must also first allocate memory for it, typically using an anonymous hash. C++ constructors, on the other hand, are called with memory already allocated. The rest of the object-oriented world would call C++'s constructors <EM
CLASS="emphasis"
>initializers</EM
><A
CLASS="indexterm"
NAME="ch13-idx-1000004483-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004483-1"
></A
>.</P
><P
CLASS="para"
>Here's the canonical object constructor in Perl:</P
><PRE
CLASS="programlisting"
>sub new {
    my $class = shift;
    my $self  = { };
    bless($self, $class);
    return $self;
} </PRE
><P
CLASS="para"
>This is the equivalent one-liner:</P
><PRE
CLASS="programlisting"
>sub new { bless( { }, shift ) }</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-311"
>Discussion</A
></H3
><P
CLASS="para"
>Any method that allocates and initializes a new object acts as a constructor. The most important thing to remember is that a reference isn't an object until <CODE
CLASS="literal"
>bless</CODE
> has been called on it. The simplest possible constructor, although not particularly useful, is the following:</P
><PRE
CLASS="programlisting"
>sub new { bless({}) }</PRE
><P
CLASS="para"
>Let's add some initialization:</P
><PRE
CLASS="programlisting"
>sub new {
    my $self = { };  # allocate anonymous hash
    bless($self);
    # init two sample attributes/data members/fields
    $self-&gt;{START} = time();  
    $self-&gt;{AGE}   = 0;
    return $self;
} </PRE
><P
CLASS="para"
>This constructor isn't very useful because it uses the single-argument form of <CODE
CLASS="literal"
>bless</CODE
>, which always blesses the object into <EM
CLASS="emphasis"
>the current package</EM
>. This means it can't be usefully inherited from; objects it constructs will always be blessed into the class that the <CODE
CLASS="literal"
>new</CODE
> function was compiled into. In the case of inheritance, this is not necessarily the class on whose behalf the method was invoked.</P
><P
CLASS="para"
>To solve this, have the constructor heed its first argument. For a class method, this is the package name. Pass this class name as the second argument to <CODE
CLASS="literal"
>bless</CODE
>:</P
><PRE
CLASS="programlisting"
>sub new {
    my $classname  = shift;         # What class are we constructing?
    my $self      = {};             # Allocate new memory
    bless($self, $classname);       # Mark it of the right type
    $self-&gt;{START}  = <CODE
CLASS="literal"
>time();</CODE
>       # init data fields
    $self-&gt;{AGE}    = <CODE
CLASS="literal"
>0;</CODE
>
    return $self;                   # And give it back
} </PRE
><P
CLASS="para"
>Now the constructor can be correctly inherited by a derived class.</P
><P
CLASS="para"
>You might also want to separate the memory allocation and blessing step from the instance data initialization step. Simple classes won't need this, but it makes inheritance easier; see <A
CLASS="xref"
HREF="ch13_11.htm"
TITLE="Accessing Overridden Methods"
>Recipe 13.10</A
>.</P
><PRE
CLASS="programlisting"
>sub new {
    my $classname  = shift;         # What class are we constructing?
    my $self      = {};             # Allocate new memory
    bless($self, $classname);       # Mark it of the right type
    $self-&gt;_init(@_);               # Call _init with remaining args
    return $self;
} 

# &quot;private&quot; method to initialize fields.  It always sets START to
# the current time, and AGE to 0.  If called with arguments, _init
# interprets them as key+value pairs to initialize the object with.
sub _init {
    my $self = shift;
    $self-&gt;{START} = <CODE
CLASS="literal"
>time();</CODE
>
    $self-&gt;{AGE}   = 0;
    if (@_) {
        my %extra = @_;
        @$self{keys %extra} = values %extra;
    } 
} <A
CLASS="indexterm"
NAME="ch13-idx-1000004479-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004479-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004479-2"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1000004330"
>See Also</A
></H3
><P
CLASS="para"
><I
CLASS="filename"
>perltoot </I
>(1) and <I
CLASS="filename"
>perlobj </I
>(1); <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <A
CLASS="xref"
HREF="ch13_07.htm"
TITLE="Cloning Objects"
>Recipe 13.6</A
>; <A
CLASS="xref"
HREF="ch13_10.htm"
TITLE="Writing an Inheritable Class"
>Recipe 13.9</A
>; <A
CLASS="xref"
HREF="ch13_11.htm"
TITLE="Accessing Overridden Methods"
>Recipe 13.10</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_01.htm"
TITLE="13.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_03.htm"
TITLE="13.2. Destroying an Object"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.2. Destroying an Object"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>13.0. Introduction</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>13.2. Destroying an Object</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
