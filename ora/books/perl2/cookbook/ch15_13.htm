<HTML
><HEAD
>
<TITLE>Recipe 15.12. Managing the Screen (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:43:24Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch15_01.htm"
TITLE="15. User Interfaces"><LINK
REL="prev"
HREF="ch15_12.htm"
TITLE="15.11. Editing Input"><LINK
REL="next"
HREF="ch15_14.htm"
TITLE="15.13. Controlling Another Program with Expect"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_12.htm"
TITLE="15.11. Editing Input"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.11. Editing Input"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch15_01.htm"
TITLE="15. User Interfaces"
>Chapter 15<BR>User Interfaces</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_14.htm"
TITLE="15.13. Controlling Another Program with Expect"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.13. Controlling Another Program with Expect"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch15-35549"
>15.12. Managing the Screen</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-pgfId-1107"
>Problem<A
CLASS="indexterm"
NAME="ch15-idx-1000005132-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005132-1"
></A
></A
></H3
><P
CLASS="para"
>You want to control the screen layout or highlighting, detect when special keys are pressed, or present full-screen menus, but you don't want to think about what kind of display device the user has.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-pgfId-1113"
>Solution</A
></H3
><P
CLASS="para"
>Use the <A
CLASS="indexterm"
NAME="ch15-idx-1000005141-0"
></A
>Curses module from CPAN, which makes use of your native <EM
CLASS="emphasis"
>curses </EM
>(3) library.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-pgfId-1119"
>Description</A
></H3
><P
CLASS="para"
>The <EM
CLASS="emphasis"
>curses</EM
> library provides easy access to the full screen display in an efficient and device-independent fashion. (By display, we mean any cursor-addressable monitor.) With Curses, you write high-level code to put data on the logical display, building it up character by character or string by string. When you want output to show up, call the <CODE
CLASS="literal"
>refresh</CODE
> function. The library generates output consisting only of the changes on the virtual display since the last call to <CODE
CLASS="literal"
>refresh</CODE
>. This is particularly appreciated on a slow connection.</P
><P
CLASS="para"
>The example program in <A
CLASS="xref"
HREF="ch15_13.htm"
TITLE="rep"
>Example 15.5</A
>, called <EM
CLASS="emphasis"
>rep</EM
><A
CLASS="indexterm"
NAME="ch15-idx-1000005142-0"
></A
>, demonstrates this. Call it with arguments of the program to run, like any of these:</P
><PRE
CLASS="programlisting"
>% rep ps aux
% rep netstat
% rep -2.5 lpq</PRE
><P
CLASS="para"
>The <EM
CLASS="emphasis"
>rep</EM
> script will repeatedly call the listed command, printing its output to the screen, updating only what has changed since the previous run. This is most effective when the changes between runs are small. It maintains the current date in reverse video at the bottom-right corner of your screen.</P
><P
CLASS="para"
>By default, <EM
CLASS="emphasis"
>rep</EM
> waits 10 seconds before rerunning the command. You can change this delay period by calling it an optional number of seconds (which can be a decimal number) as shown above when calling <EM
CLASS="emphasis"
>lpq</EM
>. You may also hit any key during the pause for it to run the command right then.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch15-35516"
>Example 15.5: rep</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# rep - screen repeat command
use strict;
use Curses;

my $timeout = 10;
if (@ARGV &amp;&amp; $ARGV[0] =~ /^-(\d+\.?\d*)$/) { 
    $timeout = $1; 
    shift; 
} 

die &quot;usage: $0 [ -timeout ] cmd args\n&quot; unless @ARGV;
    
initscr();          # start screen
noecho();           
cbreak(); 
nodelay(1);         # so getch() is non-blocking

$SIG{INT} = sub { done(&quot;Ouch!&quot;) };
sub done { endwin(); print &quot;@_\n&quot;; exit; }

while (1) {
    while ((my $key = getch()) ne ERR) {    # maybe multiple keys
        done(&quot;See ya&quot;) if $key eq 'q' 
    }
    my @data = `(@ARGV) 2&gt;&amp;1`;              # gather output+errors
    for (my $i = 0; $i &lt; $LINES; $i++) {
        addstr($i, 0, $data[$i] || ' ' x $COLS);
    } 

    standout();
    addstr($LINES-1, $COLS - 24, scalar localtime);
    standend();

    move(0,0); 
    refresh();                              # flush new output to display

    my ($in, $out) = ('', '');
    vec($in,fileno(STDIN),1) = 1;           # look for key on stdin 
    select($out = $in,undef,undef,$timeout);# wait up to this long
}</PRE
></DIV
><P
CLASS="para"
>Curses lets you tell whether the user typed one of the arrow keys or those other funny keys, like <CODE
CLASS="literal"
>HOME</CODE
> or <CODE
CLASS="literal"
>INSERT</CODE
>. This is normally difficult, because those keys send multiple bytes. With Curses, it's easy:</P
><PRE
CLASS="programlisting"
>keypad(1);                  # enable keypad mode
$key = getch();
if ($key eq 'k'     ||      # vi mode
    $key eq &quot;\cP&quot;   ||      # emacs mode
    $key eq KEY_UP)         # arrow mode
{
    # do something
} </PRE
><P
CLASS="para"
>Other Curses functions let you read the text at particular screen coordinates, control highlighting and standout mode, and even manage multiple windows.</P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch15-idx-1000006049-0"
></A
>perlmenu module, also from CPAN, is built on top of the lower-level Curses module. It provides high-level access to menus and fill-out forms. Here's a sample form from the perlmenu distribution:</P
><PRE
CLASS="programlisting"
>                      Template Entry Demonstration 

   Address Data Example                                     Record # ___

   Name: [________________________________________________]
   Addr: [________________________________________________]
   City: [__________________]          State: [__]       Zip: [\\\\\] 

   Phone: (\\\) \\\-\\\\                            Password: [^^^^^^^^]

   Enter all information available.
   Edit fields with left/right arrow keys or &quot;delete&quot;.
   Switch fields with &quot;Tab&quot; or up/down arrow keys.
   Indicate completion by pressing &quot;Return&quot;.
   Refresh screen with &quot;Control-L&quot;.
   Abort this demo here with &quot;Control-X&quot;.</PRE
><P
CLASS="para"
>The user types in the areas indicated, with regular text indicated by underline fields, numeric data by backslashed fields, and starred-out data with circumflexed fields. This is reminiscent of Perl's formats, except that forms are used for output, not input.<A
CLASS="indexterm"
NAME="ch15-idx-1000005134-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005134-1"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005134-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-pgfId-1269"
>See Also</A
></H3
><P
CLASS="para"
>Your system's <I
CLASS="filename"
>curses </I
>(3) manpage (if you have it); the documentation for the Curses and the perlmenu modules from CPAN; the section on <A
CLASS="olink"
HREF="../prog/ch02_08.htm"
>"Formats"</A
> in <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>, or <I
CLASS="filename"
>perlform </I
>(1); <A
CLASS="xref"
HREF="ch03_11.htm"
TITLE="Short Sleeps"
>Recipe 3.10</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_12.htm"
TITLE="15.11. Editing Input"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.11. Editing Input"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_14.htm"
TITLE="15.13. Controlling Another Program with Expect"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.13. Controlling Another Program with Expect"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>15.11. Editing Input</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>15.13. Controlling Another Program with Expect</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
