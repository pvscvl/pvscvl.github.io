<HTML
><HEAD
>
<TITLE>Recipe 17.11. Forking Servers (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:44:36Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"><LINK
REL="prev"
HREF="ch17_11.htm"
TITLE="17.10. Writing Bidirectional Clients"><LINK
REL="next"
HREF="ch17_13.htm"
TITLE="17.12. Pre-Forking Servers"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_11.htm"
TITLE="17.10. Writing Bidirectional Clients"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.10. Writing Bidirectional Clients"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"
>Chapter 17<BR>Sockets</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_13.htm"
TITLE="17.12. Pre-Forking Servers"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.12. Pre-Forking Servers"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch17-41561"
>17.11. Forking Servers</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1224"
>Problem<A
CLASS="indexterm"
NAME="ch17-idx-1000004806-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004806-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004806-2"
></A
></A
></H3
><P
CLASS="para"
>You want to write a server that forks a subprocess to handle each new client.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1230"
>Solution</A
></H3
><P
CLASS="para"
>Fork in the <CODE
CLASS="literal"
>accept</CODE
> loop, and use a <CODE
CLASS="literal"
>$SIG{CHLD}</CODE
> handler to reap the children.</P
><PRE
CLASS="programlisting"
># set up the socket SERVER, bind and listen ...
use POSIX qw(:sys_wait_h);

sub REAPER {
    1 until (-1 == waitpid(-1, WNOHANG));
    $SIG{CHLD} = \&amp;REAPER;                 # unless $] &gt;= 5.002
}

$SIG{CHLD} = \&amp;REAPER;

while ($hisaddr = accept(CLIENT, SERVER)) {
    next if $pid = fork;                    # parent
    die &quot;fork: $!&quot; unless defined $pid;     # failure
    # otherwise child
    close(SERVER);                          # no use to child
    # ... do something
    exit;                                   # child leaves
} continue { 
    close(CLIENT);                          # no use to parent
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1274"
>Discussion</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-1000004821-0"
></A
>This approach is very common for SOCK_STREAM servers in the Internet and Unix domains. Each incoming connection gets a cloned server of its own. The model is:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch17-pgfId-1278"
></A
>Accept a stream connection.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch17-pgfId-1280"
></A
>Fork off a duplicate to communicate over that stream.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch17-pgfId-1282"
></A
>Return to 1.</P
></LI
></OL
><P
CLASS="para"
>This technique isn't used with SOCK_DGRAM sockets because their method of communication is different. The time it takes to fork makes the forking model impractical for UDP-style servers. Instead of working with a series of stateful, long-running connections, SOCK_DGRAM servers work with a bunch of sporadic datagrams, usually statelessly. With them, the model must become:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch17-pgfId-1286"
></A
>Read a datagram.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch17-pgfId-1288"
></A
>Handle the datagram.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch17-pgfId-1290"
></A
>Return to 1.</P
></LI
></OL
><P
CLASS="para"
>The child process deals with the new connection. Because it will never use the SERVER socket, we immediately close it. This is partly to keep a tidy house, but mainly so that the server socket is closed when the parent (server) process exits. If the children do not close the SERVER socket, the operating system considers the socket still open even when the parent dies. For more on this, see <A
CLASS="xref"
HREF="ch17_10.htm"
TITLE="Closing a Socket After Forking"
>Recipe 17.9</A
>.</P
><P
CLASS="para"
><CODE
CLASS="literal"
>%SIG</CODE
> ensures that we clean up after our children when they exit. See <A
CLASS="xref"
HREF="ch16_01.htm"
TITLE="Process Management and Communication"
>Chapter 16, <CITE
CLASS="chapter"
>Process Management and Communication</CITE
></A
> for details.<A
CLASS="indexterm"
NAME="ch17-idx-1000004817-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004817-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004817-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1298"
>See Also</A
></H3
><P
CLASS="para"
>The 
<A
CLASS="olink"
HREF="../prog/ch03_040.htm"
>&#13;
<CODE
CLASS="literal"
>fork</CODE
></A
> and 
<A
CLASS="olink"
HREF="../prog/ch03_004.htm"
>&#13;
<CODE
CLASS="literal"
>accept</CODE
></A
> functions in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlfunc </I
>(1); <A
CLASS="xref"
HREF="ch16_16.htm"
TITLE="Installing a Signal Handler"
>Recipe 16.15</A
>; <A
CLASS="xref"
HREF="ch16_20.htm"
TITLE="Avoiding Zombie Processes"
>Recipe 16.19</A
>; <A
CLASS="xref"
HREF="ch17_13.htm"
TITLE="Pre-Forking Servers"
>Recipe 17.12</A
>; <A
CLASS="xref"
HREF="ch17_14.htm"
TITLE="Non-Forking Servers"
>Recipe 17.13</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_11.htm"
TITLE="17.10. Writing Bidirectional Clients"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.10. Writing Bidirectional Clients"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_13.htm"
TITLE="17.12. Pre-Forking Servers"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.12. Pre-Forking Servers"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>17.10. Writing Bidirectional Clients</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>17.12. Pre-Forking Servers</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
