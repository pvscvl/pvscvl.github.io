<HTML
><HEAD
>
<TITLE>Recipe 17.3. Communicating over TCP (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:44:24Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"><LINK
REL="prev"
HREF="ch17_03.htm"
TITLE="17.2. Writing a TCP Server"><LINK
REL="next"
HREF="ch17_05.htm"
TITLE="17.4. Setting Up a UDP Client"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_03.htm"
TITLE="17.2. Writing a TCP Server"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.2. Writing a TCP Server"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"
>Chapter 17<BR>Sockets</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_05.htm"
TITLE="17.4. Setting Up a UDP Client"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.4. Setting Up a UDP Client"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch17-32506"
>17.3. Communicating over TCP</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-418"
>Problem<A
CLASS="indexterm"
NAME="ch17-idx-1000004697-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004697-1"
></A
></A
></H3
><P
CLASS="para"
>You want to read or write data over a TCP connection.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-424"
>Solution</A
></H3
><P
CLASS="para"
>This recipe assumes you're using the Internet to communicate. For TCP-like communication within a single machine, see <A
CLASS="xref"
HREF="ch17_07.htm"
TITLE="Using UNIX Domain Sockets"
>Recipe 17.6</A
>.</P
><P
CLASS="para"
>Use <CODE
CLASS="literal"
>print</CODE
> or &lt; &gt; :</P
><PRE
CLASS="programlisting"
>print SERVER &quot;What is your name?\n&quot;;
chomp ($response = &lt;SERVER&gt;);</PRE
><P
CLASS="para"
>Or, use <CODE
CLASS="literal"
>send</CODE
> and <CODE
CLASS="literal"
>recv</CODE
> :</P
><PRE
CLASS="programlisting"
>defined (send(SERVER, $data_to_send, $flags))
    or die &quot;Can't send : $!\n&quot;;

recv(SERVER, $data_read, $maxlen, $flags)
    or die &quot;Can't receive: $!\n&quot;;</PRE
><P
CLASS="para"
>Or, use the corresponding methods on an IO::Socket object:</P
><PRE
CLASS="programlisting"
>use IO::Socket;

$server-&gt;send($data_to_send, $flags)
    or die &quot;Can't send: $!\n&quot;;

$server-&gt;recv($data_read, $flags)
    or die &quot;Can't recv: $!\n&quot;;</PRE
><P
CLASS="para"
>To find out whether data can be read or written, use the <CODE
CLASS="literal"
>select</CODE
> function, which is nicely wrapped by the standard IO::Socket class:</P
><PRE
CLASS="programlisting"
>use IO::Select;

$select = IO::Select-&gt;new();
$select-&gt;add(*FROM_SERVER);
$select-&gt;add($to_client);

@read_from = $select-&gt;can_read($timeout);
foreach $socket (@read_from) {
    # read the pending data from $socket
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-486"
>Discussion</A
></H3
><P
CLASS="para"
>Sockets handle two completely different types of I/O, each with attendant pitfalls and benefits. The normal Perl I/O functions used on files (except for <CODE
CLASS="literal"
>seek</CODE
> and <CODE
CLASS="literal"
>sysseek</CODE
>) work for stream sockets, but datagram sockets require the system calls <CODE
CLASS="literal"
>send</CODE
> and <CODE
CLASS="literal"
>recv</CODE
>, which work on complete records.</P
><P
CLASS="para"
>Awareness of <A
CLASS="indexterm"
NAME="ch17-idx-1000004710-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004710-1"
></A
>buffering issues is particularly important in socket programming. That's because buffering, while designed to enhance performance, can interfere with the interactive feel that some programs require. Gathering input with &lt; &gt; may try to read more data from the socket than is yet available as it looks for a record separator. Both <CODE
CLASS="literal"
>print</CODE
> and &lt; &gt; use <CODE
CLASS="literal"
>stdio</CODE
> buffers, so unless you've changed autoflushing (see the Introduction to <A
CLASS="xref"
HREF="ch07_01.htm"
TITLE="File Access"
>Chapter 7, <CITE
CLASS="chapter"
>File Access</CITE
></A
>) on the socket handle, your data won't be sent to the other end as soon as you <CODE
CLASS="literal"
>print</CODE
> it. Instead, it will wait until a buffer fills up.</P
><P
CLASS="para"
>For line-based clients and servers, this is probably okay, so long as you turn on autoflushing for output. Newer versions of IO::Socket do this automatically on the anonymous filehandles returned by <CODE
CLASS="literal"
>IO::Socket-&gt;new</CODE
>.</P
><P
CLASS="para"
>But stdio isn't the only source of buffering. Output (<CODE
CLASS="literal"
>print,</CODE
> <CODE
CLASS="literal"
>printf</CODE
>, or <CODE
CLASS="literal"
>syswrite</CODE
>&nbsp;- or <CODE
CLASS="literal"
>send</CODE
> on a TCP socket) is further subject to buffering at the operating system level under a strategy called <I
CLASS="firstterm"
>The Nagle Algorithm</I
><A
CLASS="indexterm"
NAME="ch17-idx-1000005813-0"
></A
>. When a packet of data has been sent but not acknowledged, further to-be-sent data is queued and is sent as soon as another complete packet's worth is collected or the outstanding acknowledgment is received. In some situations (mouse events being sent to a windowing system, keystrokes to a real-time application) this buffering is inconvenient or downright wrong. You can disable the Nagle Algorithm with the <A
CLASS="indexterm"
NAME="ch17-idx-1000005814-0"
></A
>TCP_NODELAY socket option:</P
><PRE
CLASS="programlisting"
>use Socket;
require &quot;sys/socket.ph&quot;;    # for &amp;TCP_NODELAY

setsockopt(SERVER, SOL_SOCKET, &amp;TCP_NODELAY, 1)
    or die &quot;Couldn't disable Nagle's algorithm: $!\n&quot;;</PRE
><P
CLASS="para"
>Re-enable it with:</P
><PRE
CLASS="programlisting"
>setsockopt(SERVER, SOL_SOCKET, &amp;TCP_NODELAY, 0)
    or die &quot;Couldn't enable Nagle's algorithm: $!\n&quot;;</PRE
><P
CLASS="para"
>In most cases, TCP_NODELAY isn't something you need. TCP buffering is there for a reason, so don't disable it unless your application is one of the few real-time packet-intensive situations that need to.</P
><P
CLASS="para"
>Load in TCP_NODELAY from <EM
CLASS="emphasis"
>sys/socket.ph</EM
>, a file that isn't automatically installed with Perl, but can be easily built. See <A
CLASS="xref"
HREF="ch12_15.htm"
TITLE="Using h2ph to Translate C #include Files"
>Recipe 12.14</A
> for details.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-1000005971-0"
></A
>Because buffering is such an issue, you have the <CODE
CLASS="literal"
>select</CODE
><A
CLASS="indexterm"
NAME="ch17-idx-1000004717-0"
></A
> function to determine which filehandles have unread input, which can be written to, and which have "exceptional conditions" pending. The <CODE
CLASS="literal"
>select</CODE
> function takes three strings interpreted as binary data, each bit corresponding to a filehandle. A typical call to <CODE
CLASS="literal"
>select</CODE
> looks like this:</P
><PRE
CLASS="programlisting"
>$rin = '';                          # initialize bitmask
vec($rin, fileno(SOCKET), 1) = 1;   # mark SOCKET in $rin
# repeat calls to vec() for each socket to check

$timeout = 10;                      # wait ten seconds

$nfound = select($rout = $rin, undef, undef, $timeout);
if (vec($rout, fileno(SOCKET),1)){
    # data to be read on SOCKET
}</PRE
><P
CLASS="para"
>The four arguments to <CODE
CLASS="literal"
>select</CODE
> are: a bitmask indicating which filehandles to check for unread data; a bitmask indicating which filehandles to check for safety to write without blocking; a bitmask indicating which filehandles to check for exceptional conditions on; and a time in seconds indicating the maximum time to wait (this can be a floating point number).</P
><P
CLASS="para"
>The function changes the bitmask arguments passed to it, so that when it returns, the only bits set correspond to filehandles ready for I/O. This leads to the common strategy of assigning an input mask (<CODE
CLASS="literal"
>$rin</CODE
> above) to an output one (<CODE
CLASS="literal"
>$rout</CODE
> about), so that <CODE
CLASS="literal"
>select</CODE
> can only affect <CODE
CLASS="literal"
>$rout</CODE
>, leaving <CODE
CLASS="literal"
>$rin</CODE
> alone.</P
><P
CLASS="para"
>You can specify a timeout of 0 to <I
CLASS="firstterm"
>poll</I
> (check without blocking). Some beginning programmers think that blocking is bad, so they write programs that "busy wait"&nbsp;- they poll and poll and poll and poll. When a program blocks, the operating system recognizes that the process is pending on input and gives CPU time to other programs until input is available. When a program busy-waits, the system can't let it sleep because it's always doing something&nbsp;- checking for input! Occasionally, polling is the right thing to do, but far more often it's not. A timeout of <CODE
CLASS="literal"
>undef</CODE
> to <CODE
CLASS="literal"
>select</CODE
> means "no timeout," and your program will patiently block until input becomes available.</P
><P
CLASS="para"
>Because <CODE
CLASS="literal"
>select</CODE
> uses bitmasks, which are tiresome to create and difficult to interpret, we use the standard IO::Select module in the Solution section. It bypasses bitmasks and is, generally, the easier route.</P
><P
CLASS="para"
>A full explanation of the exceptional data tested for with the third bitmask in <CODE
CLASS="literal"
>select</CODE
> is beyond the scope of this book. Consult Stevens's <EM
CLASS="emphasis"
>Unix Network Programming</EM
> for a discussion of out-of-band and urgent data.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-1000005979-0"
></A
>Other <CODE
CLASS="literal"
>send</CODE
> and <CODE
CLASS="literal"
>recv</CODE
> flags are listed in the manpages for those system calls.<A
CLASS="indexterm"
NAME="ch17-idx-1000004699-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004699-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-552"
>See Also</A
></H3
><P
CLASS="para"
>The 
<A
CLASS="olink"
HREF="../prog/ch03_139.htm"
>&#13;<CODE
CLASS="literal"
>send</CODE
></A
>, 
<A
CLASS="olink"
HREF="../prog/ch03_119.htm"
>&#13;<CODE
CLASS="literal"
>recv</CODE
></A
>, 
<A
CLASS="olink"
HREF="../prog/ch03_038.htm"
>&#13;<CODE
CLASS="literal"
>fileno</CODE
></A
>, 
<A
CLASS="olink"
HREF="../prog/ch03_188.htm"
>&#13;<CODE
CLASS="literal"
>vec</CODE
></A
>, 
<A
CLASS="olink"
HREF="../prog/ch03_142.htm"
>&#13;<CODE
CLASS="literal"
>setsockopt</CODE
></A
>, and 
<A
CLASS="olink"
HREF="../prog/ch03_135.htm"
>&#13;<CODE
CLASS="literal"
>select</CODE
></A
> functions in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlfunc </I
>(1); the sections on "I/O Operators" and on "Bitwise String Operators" in <I
CLASS="filename"
>perlop </I
>(1); your system's <I
CLASS="filename"
>setsockopt </I
>(2) manpage (if you have one); the documentation for the standard Socket and IO::Socket modules; the section on 
<A
CLASS="olink"
HREF="../prog/ch06_02.htm"
>&#13;"Internet TCP clients and servers"</A
> in <A
CLASS="olink"
HREF="../prog/ch06_01.htm"
>Chapter 6</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlipc </I
>(1); <CITE
CLASS="citetitle"
>Unix Network Programming</CITE
>; <A
CLASS="xref"
HREF="ch17_02.htm"
TITLE="Writing a TCP Client"
>Recipe 17.1</A
>; <A
CLASS="xref"
HREF="ch17_03.htm"
TITLE="Writing a TCP Server"
>Recipe 17.2</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_03.htm"
TITLE="17.2. Writing a TCP Server"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.2. Writing a TCP Server"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_05.htm"
TITLE="17.4. Setting Up a UDP Client"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.4. Setting Up a UDP Client"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>17.2. Writing a TCP Server</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>17.4. Setting Up a UDP Client</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
