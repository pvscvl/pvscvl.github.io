<HTML
><HEAD
>
<TITLE>Recipe 11.4. Taking References to Functions (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:33Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"><LINK
REL="prev"
HREF="ch11_04.htm"
TITLE="11.3. Taking References to Hashes"><LINK
REL="next"
HREF="ch11_06.htm"
TITLE="11.5. Taking References to Scalars"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_04.htm"
TITLE="11.3. Taking References to Hashes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.3. Taking References to Hashes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"
>Chapter 11<BR>References and Records</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_06.htm"
TITLE="11.5. Taking References to Scalars"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.5. Taking References to Scalars"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-28899"
>11.4. Taking References to Functions</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-476"
>Problem<A
CLASS="indexterm"
NAME="ch11-idx-1000004810-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004810-1"
></A
></A
></H3
><P
CLASS="para"
>You need to manipulate a subroutine by reference. This might happen if you need to create a signal handler, a Tk callback, or a hash of function pointers.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-482"
>Solution</A
></H3
><P
CLASS="para"
>To get a code reference:</P
><PRE
CLASS="programlisting"
>$cref = \&amp;func;
$cref = sub { ... };</PRE
><P
CLASS="para"
>To call a code reference:</P
><PRE
CLASS="programlisting"
>@returned = $cref-&gt;(@arguments);
@returned = &amp;$cref(@arguments);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-498"
>Discussion</A
></H3
><P
CLASS="para"
>If the name of a function is <CODE
CLASS="literal"
>func</CODE
>, you can produce a reference to this code by preceding that name with <CODE
CLASS="literal"
>\&amp;</CODE
>. You can also create anonymous functions using the <CODE
CLASS="literal"
>sub</CODE
> <CODE
CLASS="literal"
>{}</CODE
> notation. These code references can be stored just like any other reference.</P
><P
CLASS="para"
>Perl 5.004 introduced the postfix arrow notation for dereferencing a code reference. Prior to that, to call a subroutine by reference, you had to say <CODE
CLASS="literal"
>&amp;$funcname(@ARGS)</CODE
>, where <CODE
CLASS="literal"
>$funcname</CODE
> contained the name of a function. Although it is still possible to store the name of a function in a variable, such as:</P
><PRE
CLASS="programlisting"
>$funcname = &quot;thefunc&quot;;
&amp;$funcname();</PRE
><P
CLASS="para"
>that's not a very good solution for several reasons. First, it uses symbolic references, not real (hard) references, so it is forbidden under the <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>strict</CODE
> <CODE
CLASS="literal"
>'refs'</CODE
> pragma. Symbolic references to variables are usually a bad idea, since they can't access lexical variables, only globals, and aren't reference counted.</P
><P
CLASS="para"
>Second, it doesn't include package information, so if executed in a different package, it would try to call the wrong function. Finally, in the odd case that the function were redefined at some point, the symbolic reference would get whatever the current definition for the function was, whereas the hard reference would retain its old definition.</P
><P
CLASS="para"
>Instead of placing the name of the function in the variable, use the backslash operator to create a reference to the function. This is the normal way to store a function in a variable or pass it to another function. You can mix and match references to named functions with references to unnamed ones:</P
><PRE
CLASS="programlisting"
>my %commands = (
    &quot;happy&quot; =&gt; \&amp;joy,
    &quot;sad&quot;   =&gt; \&amp;sullen,
    &quot;done&quot;  =&gt; sub { die &quot;See ya!&quot; },
    &quot;mad&quot;   =&gt; \&amp;angry,
);

print &quot;How are you? &quot;;
chomp($string = &lt;STDIN&gt;);
if ($commands{$string}) {
    $commands{$string}-&gt;();
} else {
    print &quot;No such command: $string\n&quot;;
} </PRE
><P
CLASS="para"
>If you create an anonymous function that refers to a lexical (<CODE
CLASS="literal"
>my</CODE
>) variable from an enclosing scope, Perl's reference counting ensures that the lexical variable is never deallocated so long as that function reference exists:</P
><PRE
CLASS="programlisting"
>sub counter_maker {
    my $start = 0;
    return sub {                      # this is a closure
        return $start++;              # lexical from enclosing scope
    };
}

$counter = counter_maker();

for ($i = 0; $i &lt; 5; $i ++) {
    print &amp;$counter, &quot;\n&quot;;
}</PRE
><P
CLASS="para"
>Even though <CODE
CLASS="literal"
>counter_maker</CODE
> has ended and <CODE
CLASS="literal"
>$start</CODE
> has gone out of scope, Perl doesn't free it because the anonymous subroutine referenced by <CODE
CLASS="literal"
>$counter</CODE
> still has a reference to <CODE
CLASS="literal"
>$start</CODE
>. If we call <CODE
CLASS="literal"
>counter_maker</CODE
> again, it'll return another anonymous subroutine reference that uses a <EM
CLASS="emphasis"
>different</EM
> <CODE
CLASS="literal"
>$start</CODE
>:</P
><PRE
CLASS="programlisting"
>$counter1 = counter_maker();
$counter2 = counter_maker();

for ($i = 0; $i &lt; 5; $i ++) {
    print &amp;$counter1, &quot;\n&quot;;
}

print &amp;$counter1, &quot; &quot;, &amp;$counter2, &quot;\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>0</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>1</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>2</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>3</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>4</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>5 0</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-1000004818-0"
></A
>Closures are often used in callback routines. In graphical and other event-based programming, you associate code with a keypress, mouse click, window expose event, etc. The code will be called much later, probably from an entirely different scope. Variables mentioned in the closure must be available when it's finally called. To work properly, such variables must be lexicals, not globals.</P
><P
CLASS="para"
>Another use for closures is function generators, that is, functions that create and return brand new functions. <CODE
CLASS="literal"
>counter_maker</CODE
> is a function generator. Here's another simple one:</P
><PRE
CLASS="programlisting"
>sub timestamp {
    my $start_time = time(); 
    return sub { return time() - $start_time };
} 
$early = timestamp(); 
sleep 20; 
$later = timestamp(); 
sleep 10;
printf &quot;It's been %d seconds since early.\n&quot;, $early-&gt;();
printf &quot;It's been %d seconds since later.\n&quot;, $later-&gt;();
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>It's been 30 seconds since early.</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>It's been 10 seconds since later.</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>Each call to <CODE
CLASS="literal"
>timestamp</CODE
> generates and returns a brand new function. The <CODE
CLASS="literal"
>timestamp</CODE
> function creates a lexical called <CODE
CLASS="literal"
>$start_time</CODE
> that contains the current clock time (in epoch seconds). Every time that closure is called, it returns how many seconds have passed since it was created by subtracting its starting time from the current time.<A
CLASS="indexterm"
NAME="ch11-idx-1000004812-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004812-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004812-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-614"
>See Also</A
></H3
><P
CLASS="para"
>The section on <A
CLASS="olink"
HREF="../prog/ch04_03.htm"
>"Closures"</A
> in <A
CLASS="olink"
HREF="../prog/ch04_01.htm"
>Chapter 4</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and the discussion on closures in <I
CLASS="filename"
>perlref </I
>(1); <A
CLASS="xref"
HREF="ch10_12.htm"
TITLE="Prototyping Functions"
>Recipe 10.11</A
>; <A
CLASS="xref"
HREF="ch11_05.htm"
TITLE="Taking References to Functions"
>Recipe 11.4</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_04.htm"
TITLE="11.3. Taking References to Hashes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.3. Taking References to Hashes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_06.htm"
TITLE="11.5. Taking References to Scalars"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.5. Taking References to Scalars"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.3. Taking References to Hashes</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.5. Taking References to Scalars</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
