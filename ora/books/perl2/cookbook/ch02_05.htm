<HTML
><HEAD
>
<TITLE>Recipe 2.4. Converting Between Binary and Decimal (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:30:05Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Numbers"><LINK
REL="prev"
HREF="ch02_04.htm"
TITLE="2.3. Rounding Floating-Point Numbers"><LINK
REL="next"
HREF="ch02_06.htm"
TITLE="2.5. Operating on a Series of Integers"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_04.htm"
TITLE="2.3. Rounding Floating-Point Numbers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.3. Rounding Floating-Point Numbers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Numbers"
>Chapter 2<BR>Numbers</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_06.htm"
TITLE="2.5. Operating on a Series of Integers"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.5. Operating on a Series of Integers"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-10900"
>2.4. Converting Between Binary and Decimal</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-pgfId-315"
>Problem <A
CLASS="indexterm"
NAME="ch02-idx-1000008009-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000008009-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000008009-2"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000008009-3"
></A
></A
></H3
><P
CLASS="para"
>You have an integer whose binary representation you'd like to print out, or a binary representation that you'd like to convert into an integer. You might want to do this if you were displaying non-textual data, such as what you get from interacting with certain system programs and functions.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-pgfId-321"
>Solution</A
></H3
><P
CLASS="para"
>To convert a Perl integer to a text string of ones and zeros, first pack the integer into a number in network byte order[<A
CLASS="footnote"
HREF="#ch02-pgfId-1000000756"
>1</A
>] (the &quot;<CODE
CLASS="literal"
>N</CODE
>&quot; format), then unpack it again bit by bit (the &quot;<CODE
CLASS="literal"
>B32</CODE
>&quot; format).</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch02-pgfId-1000000756"
>[1]</A
> Also known as <I
CLASS="firstterm"
>big-endian</I
>, or <I
CLASS="firstterm"
>MSB</I
> (Most-Significant Bit first) order.</P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>sub dec2bin {
    my $str = unpack(&quot;B32&quot;, pack(&quot;N&quot;, shift));
    $str =~ s/^0+(?=\d)//;   # otherwise you'll get leading zeros
    return $str;
}</PRE
><P
CLASS="para"
>To convert a text string of ones and zeros to a Perl integer, first massage the string by padding it with the right number of zeros, then just reverse the previous procedure.</P
><PRE
CLASS="programlisting"
>sub bin2dec {
    return unpack(&quot;N&quot;, pack(&quot;B32&quot;, substr(&quot;0&quot; x 32 . shift, -32)));
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-pgfId-345"
>Discussion</A
></H3
><P
CLASS="para"
>We're talking about converting between strings like &quot;<CODE
CLASS="literal"
>00100011</CODE
>&quot; and numbers like 35. The string is the binary representation of the number. We can't solve either problem with <CODE
CLASS="literal"
>sprintf</CODE
> (which doesn't have a "print this in binary" format), so we have to resort to Perl's <CODE
CLASS="literal"
>pack</CODE
> and <CODE
CLASS="literal"
>unpack</CODE
> functions for manipulating strings of data.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>pack</CODE
><A
CLASS="indexterm"
NAME="ch02-idx-1000008015-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000008015-1"
></A
> and <CODE
CLASS="literal"
>unpack</CODE
> functions act on strings. You can treat the string as a series of bits, bytes, integers, long integers, floating-point numbers in IEEE representation, checksums &nbsp;-  among other strange things. The <CODE
CLASS="literal"
>pack</CODE
> and <CODE
CLASS="literal"
>unpack</CODE
> functions both take formats, like <CODE
CLASS="literal"
>sprintf</CODE
>, specifying what they should do with their arguments.</P
><P
CLASS="para"
>We use <CODE
CLASS="literal"
>pack</CODE
> and <CODE
CLASS="literal"
>unpack</CODE
> in two ways: "treat this string as a series of bits" and "treat this string as containing a binary representation of an integer." When we treat the string as a series of bits, we have to understand how <CODE
CLASS="literal"
>pack</CODE
> will behave. Such a string is treated as a series of bytes, a byte being eight bits. The bytes are always counted from left to right (the first eight bits are the first byte, the next eight bits are the second, and so on), but the bits within each byte can be counted left-to-right as well as right-to-left.</P
><P
CLASS="para"
>We use <CODE
CLASS="literal"
>pack</CODE
> with a template of &quot;<CODE
CLASS="literal"
>B</CODE
>&quot; to work with bits within each byte from left to right. This is the order that the &quot;<CODE
CLASS="literal"
>N</CODE
>&quot; format expects them in, which we use to treat the series of bits as representing a 32-bit integer.</P
><PRE
CLASS="programlisting"
>$num = bin2dec('0110110');  # $num is 54
$binstr = dec2bin(54);      # $binstr is 110110</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-pgfId-361"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>pack</CODE
> and <CODE
CLASS="literal"
>unpack</CODE
> functions in <EM
CLASS="emphasis"
>perlfunc </EM
>(1) and <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; we also use <CODE
CLASS="literal"
>pack</CODE
> and <CODE
CLASS="literal"
>unpack</CODE
> in <A
CLASS="xref"
HREF="ch01_05.htm"
TITLE="Converting Between ASCII Characters and Values"
>Recipe 1.4</A
>; to convert between decimal, hexadecimal, and octal, see <A
CLASS="xref"
HREF="ch02_17.htm"
TITLE="Converting Between Octal and Hexadecimal"
>Recipe 2.16</A
><CITE
CLASS="citetitle"
> </CITE
><A
CLASS="indexterm"
NAME="ch02-idx-1000008011-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000008011-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000008011-2"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000008011-3"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_04.htm"
TITLE="2.3. Rounding Floating-Point Numbers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.3. Rounding Floating-Point Numbers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_06.htm"
TITLE="2.5. Operating on a Series of Integers"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.5. Operating on a Series of Integers"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.3. Rounding Floating-Point Numbers</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.5. Operating on a Series of Integers</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
