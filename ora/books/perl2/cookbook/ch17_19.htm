<HTML
><HEAD
>
<TITLE>Recipe 17.18. Program: fwdport (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:44:47Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"><LINK
REL="prev"
HREF="ch17_18.htm"
TITLE="17.17. Program: backsniff"><LINK
REL="next"
HREF="ch18_01.htm"
TITLE="18. Internet Services"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_18.htm"
TITLE="17.17. Program: backsniff"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.17. Program: backsniff"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"
>Chapter 17<BR>Sockets</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch18_01.htm"
TITLE="18. Internet Services"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18. Internet Services"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch17-chap17_program_1"
>17.18. Program: fwdport</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-1000004889-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004889-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004889-2"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004889-3"
></A
>Imagine that you're nestled deep inside a protective firewall. Somewhere in the outside world is a server that you'd like access to, but only processes on the firewall can reach it. You don't want to login to the firewall machine each time to access that service.</P
><P
CLASS="para"
>For example, this might arise if your company's ISP provides a news-reading service that seems to come from your main firewall machine, but rejects any NNTP connections from any other address. As the administrator of the firewall, you don't want dozens of people logging on to it, but you would like to let them read and post news from their own workstations.</P
><P
CLASS="para"
>The program in <A
CLASS="xref"
HREF="ch17_19.htm"
TITLE="fwdport"
>Example 17.8</A
>, <EM
CLASS="emphasis"
>fwdport</EM
>, solves this problem in a generic fashion. You may run as many of these as you like, one per outside service. Sitting on the firewall, it can talk to both worlds. When someone wants to access the outside service, they contact this proxy, which connects on their behalf to the external service. To that outside service, the connection is coming from your firewall, so it lets it in. Then your proxy forks off twin processes, one only reading data from the external server and writing that data back to the internal client, the other only reading data from the internal client and writing that data back to the external server.</P
><P
CLASS="para"
>For example, you might invoke it this way:</P
><PRE
CLASS="programlisting"
>% fwdport -s nntp -l fw.oursite.com -r news.bigorg.com</PRE
><P
CLASS="para"
>That means that the program will act as the server for the NNTP service, listening for local connections on the NNTP port on the host <I
CLASS="systemitem.example"
>fw.oursite.com</I
>. When one comes in, it contacts <I
CLASS="systemitem.example"
>news.bigorg.com</I
> (on the same port), and then ferries data between the remote server and local client.</P
><P
CLASS="para"
>Here's another example:</P
><PRE
CLASS="programlisting"
>% fwdport -l myname:9191 -r news.bigorg.com:nntp</PRE
><P
CLASS="para"
>This time we listen for local connections on port 9191 of the host <EM
CLASS="emphasis"
>myname</EM
>, and patch those connecting clients to the remote server <I
CLASS="systemitem.example"
>news.bigorg.com</I
> on its NNTP port.</P
><P
CLASS="para"
>In a way, <EM
CLASS="emphasis"
>fwdport</EM
> acts as both a server and a client. It's a server from the perspective of inside the firewall and a client from the perspective of the remote server outside. The program summarizes this chapter well because it demonstrates just about everything we've covered here. It has server activity, client activity, collecting of zombie children, forking and process management, plus much more thrown in.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch17-30078"
>Example 17.8: fwdport</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# fwdport -- act as proxy forwarder for dedicated services

use strict;                 # require declarations
use Getopt::Long;           # for option processing
use Net::hostent;           # by-name interface for host info
use IO::Socket;             # for creating server and client sockets
use POSIX &quot;:sys_wait_h&quot;;    # for reaping our dead children

my (
    %Children,              # hash of outstanding child processes
    $REMOTE,                # whom we connect to on the outside
    $LOCAL,                 # where we listen to on the inside
    $SERVICE,               # our service name or port number
    $proxy_server,          # the socket we accept() from
    $ME,                    # basename of this program
);

($ME = $0) =~ s,.*/,,;      # retain just basename of script name

check_args();               # processing switches
start_proxy();              # launch our own server
service_clients();          # wait for incoming
die &quot;NOT REACHED&quot;;          # you can't get here from there

# process command line switches using the extended
# version of the getopts library.
sub check_args { 
    GetOptions(
        &quot;remote=s&quot;    =&gt; \$REMOTE,
        &quot;local=s&quot;     =&gt; \$LOCAL,
        &quot;service=s&quot;   =&gt; \$SERVICE,
    ) or die &lt;&lt;EOUSAGE;
    usage: $0 [ --remote host ] [ --local interface ] [ --service service ]   
EOUSAGE
    die &quot;Need remote&quot;                   unless $REMOTE;
    die &quot;Need local or service&quot;         unless $LOCAL || $SERVICE;
}

# begin our server 
sub start_proxy {
    my @proxy_server_config = (
      Proto     =&gt; 'tcp',
      Reuse     =&gt; 1,
      Listen    =&gt; SOMAXCONN,
    );
    push @proxy_server_config, LocalPort =&gt; $SERVICE if $SERVICE;
    push @proxy_server_config, LocalAddr =&gt; $LOCAL   if $LOCAL;
    $proxy_server = IO::Socket::INET-&gt;new(@proxy_server_config)
                    or die &quot;can't create proxy server: $@&quot;;
    print &quot;[Proxy server on &quot;, ($LOCAL || $SERVICE), &quot; initialized.]\n&quot;;
}


sub service_clients { 
    my (
        $local_client,              # someone internal wanting out
        $lc_info,                   # local client's name/port information
        $remote_server,             # the socket for escaping out
        @rs_config,                 # temp array for remote socket options
        $rs_info,                   # remote server's name/port information
        $kidpid,                    # spawned child for each connection
    );

    $SIG{CHLD} = \&amp;REAPER;          # harvest the moribund

    accepting();

    # an accepted connection here means someone inside wants out
    while ($local_client = $proxy_server-&gt;accept()) {
        $lc_info = peerinfo($local_client);
        set_state(&quot;servicing local $lc_info&quot;);
        printf &quot;[Connect from $lc_info]\n&quot;;

        @rs_config = (
            Proto     =&gt; 'tcp',
            PeerAddr  =&gt; $REMOTE,
        );
        push(@rs_config, PeerPort =&gt; $SERVICE) if $SERVICE;

        print &quot;[Connecting to $REMOTE...&quot;;
        set_state(&quot;connecting to $REMOTE&quot;);                 # see below
        $remote_server = IO::Socket::INET-&gt;new(@rs_config)
                         or die &quot;remote server: $@&quot;;
        print &quot;done]\n&quot;;

        $rs_info = peerinfo($remote_server);
        set_state(&quot;connected to $rs_info&quot;);

        $kidpid = fork();
        die &quot;Cannot fork&quot; unless defined $kidpid;
        if ($kidpid) {
            $Children{$kidpid} = time();            # remember his start time
            close $remote_server;                   # no use to master
            close $local_client;                    # likewise
            next;                                   # go get another client
        } 

        # at this point, we are the forked child process dedicated
        # to the incoming client.  but we want a twin to make i/o
        # easier.

        close $proxy_server;                        # no use to slave

        $kidpid = fork(); 
        die &quot;Cannot fork&quot; unless defined $kidpid;

        # now each twin sits around and ferries lines of data.
        # see how simple the algorithm is when you can have
        # multiple threads of control?

        # this is the fork's parent, the master's child
        if ($kidpid) {              
            set_state(&quot;$rs_info --&gt; $lc_info&quot;);
            select($local_client); $| = 1;
            print while &lt;$remote_server&gt;;
            kill('TERM', $kidpid);      # kill my twin cause we're done
            } 
        # this is the fork's child, the master's grandchild
        else {                      
            set_state(&quot;$rs_info &lt;-- $lc_info&quot;);
            select($remote_server); $| = 1;
            print while &lt;$local_client&gt;;
            kill('TERM', getppid());    # kill my twin cause we're done
        } 
        exit;                           # whoever's still alive bites it
    } continue {
        accepting();
    } 
}

# helper function to produce a nice string in the form HOST:PORT
sub peerinfo {
    my $sock = shift;
    my $hostinfo = gethostbyaddr($sock-&gt;peeraddr);
    return sprintf(&quot;%s:%s&quot;, 
                    $hostinfo-&gt;name || $sock-&gt;peerhost, 
                    $sock-&gt;peerport);
} 

# reset our $0, which on some systems make &quot;ps&quot; report
# something interesting: the string we set $0 to!
sub set_state { $0 = &quot;$ME [@_]&quot; } 

# helper function to call set_state
sub accepting {
    set_state(&quot;accepting proxy for &quot; . ($REMOTE || $SERVICE));
}

# somebody just died.  keep harvesting the dead until 
# we run out of them.  check how long they ran.
sub REAPER { 
    my $child;
    my $start;
    while (($child = waitpid(-1,WNOHANG)) &gt; 0) {
        if ($start = $Children{$child}) {
            my $runtime = time() - $start;
            printf &quot;Child $child ran %dm%ss\n&quot;, 
                $runtime / 60, $runtime % 60;
            delete $Children{$child};
        } else {
            print &quot;Bizarre kid $child exited $?\n&quot;;
        } 
    }
    # If I had to choose between System V and 4.2, I'd resign. --Peter Honeyman
    $SIG{CHLD} = \&amp;REAPER; 
};<A
CLASS="indexterm"
NAME="ch17-idx-1000004897-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004897-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004897-2"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004897-3"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-2514"
>See Also</A
></H3
><P
CLASS="para"
><EM
CLASS="emphasis"
>Getopt::</EM
><I
CLASS="filename"
>Long </I
>(3), <EM
CLASS="emphasis"
>Net::</EM
><I
CLASS="filename"
>hostent </I
>(3), <EM
CLASS="emphasis"
>IO::</EM
><I
CLASS="filename"
>Socket </I
>(3), <I
CLASS="filename"
>POSIX </I
>(3), <A
CLASS="xref"
HREF="ch16_20.htm"
TITLE="Avoiding Zombie Processes"
>Recipe 16.19</A
>, <A
CLASS="xref"
HREF="ch17_11.htm"
TITLE="Writing Bidirectional Clients"
>Recipe 17.10</A
> <A
CLASS="indexterm"
NAME="ch17-idx-1000004655-0"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_18.htm"
TITLE="17.17. Program: backsniff"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.17. Program: backsniff"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch18_01.htm"
TITLE="18. Internet Services"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18. Internet Services"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>17.17. Program: backsniff</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>18. Internet Services</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
