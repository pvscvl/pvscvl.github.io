<HTML
><HEAD
>
<TITLE>Recipe 6.18. Matching Multiple-Byte Characters (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:34:58Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"><LINK
REL="prev"
HREF="ch06_18.htm"
TITLE="6.17. Expressing AND, OR, and NOT in a Single Pattern"><LINK
REL="next"
HREF="ch06_20.htm"
TITLE="6.19. Matching a Valid Mail Address"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_18.htm"
TITLE="6.17. Expressing AND, OR, and NOT in a Single Pattern"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.17. Expressing AND, OR, and NOT in a Single Pattern"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"
>Chapter 6<BR>Pattern Matching</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_20.htm"
TITLE="6.19. Matching a Valid Mail Address"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.19. Matching a Valid Mail Address"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-chap06_matching_5"
>6.18. Matching Multiple-Byte Characters</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1000009936"
>Problem</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-1000010766-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000010766-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000010766-2"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000010766-3"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000010766-4"
></A
>You need to perform regular-expression searches against multiple-byte characters.</P
><P
CLASS="para"
>A <EM
CLASS="emphasis"
>character encoding</EM
> is a set mapping from characters and symbols to digital representations. ASCII is an encoding where each character is represented as exactly one byte, but complex writing systems, such as those for Chinese, Japanese, and Korean, have so many characters that their encodings need to use multiple bytes to represent characters.</P
><P
CLASS="para"
>Perl works on the principle that each byte represents a single character, which works well in ASCII but makes regular expression matches on strings containing multiple-byte characters tricky, to say the least. The regular expression engine does not understand the character boundaries in your string of bytes, and so can return "matches" from the middle of one character to the middle of another.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1000010128"
>Solution</A
></H3
><P
CLASS="para"
>Exploit the encoding by tailoring the pattern to the sequences of bytes that constitute characters. The basic approach is to build a pattern that matches a single (multiple byte) character in the encoding, and then use that "any character" pattern in larger patterns.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-chap06_examples_0"
>Discussion</A
></H3
><P
CLASS="para"
>As an example, we'll examine one of the encodings for Japanese, called <EM
CLASS="emphasis"
>EUC-JP</EM
>, and then show how we use this in solving a number of multiple-byte encoding issues. EUC-JP can represent thousands of characters, but it's basically a superset of ASCII. Bytes with values ranging from 0 to 127 (<CODE
CLASS="literal"
>0x00</CODE
> to <CODE
CLASS="literal"
>0x7F</CODE
>) are almost exactly their ASCII counterparts, so those bytes represent one-byte characters. Some characters are represented by a pair of bytes, the first with value <CODE
CLASS="literal"
>0x8E</CODE
> and the second with a value in the range <CODE
CLASS="literal"
>0xA0-0xDF</CODE
>. Some others are represented by three bytes, the first with the value <CODE
CLASS="literal"
>0x8F</CODE
> and the others in the range <CODE
CLASS="literal"
>0xA1-0xFE</CODE
>, while others still are represented by two bytes, each in the <CODE
CLASS="literal"
>0xA1-0xFE</CODE
> range.</P
><P
CLASS="para"
>We can convey this information&nbsp;- what bytes can make up characters in this encoding&nbsp;- as a regular expression. For ease of use later, here we'll define a string, <CODE
CLASS="literal"
>$eucjp</CODE
>, that holds the regular expression to match a single EUC-JP character:</P
><PRE
CLASS="programlisting"
>my $eucjp = q{                 # EUC-JP encoding subcomponents:
    [\x00-\x7F]                # ASCII/JIS-Roman (one-byte/character)
  | \x8E[\xA0-\xDF]            # half-width katakana (two bytes/char)
  | \x8F[\xA1-\xFE][\xA1-\xFE] # JIS X 0212-1990 (three bytes/char)
  | [\xA1-\xFE][\xA1-\xFE]     # JIS X 0208:1997 (two bytes/char)
};</PRE
><P
CLASS="para"
>(Because we've inserted comments and whitespace for pretty-printing, we'll have to use the <CODE
CLASS="literal"
>/x</CODE
> modifier when we use this in a match or substitution.)</P
><P
CLASS="para"
>With this template in hand, the following sections show how to:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch06-pgfId-1000009979"
></A
>Perform a normal match without any "false" matches</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch06-pgfId-1000009981"
></A
>Count, convert (to another encoding), and/or filter characters</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch06-pgfId-1000009983"
></A
>Verify whether the target text is valid according to an encoding</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch06-pgfId-1000009985"
></A
>Detect which encoding the target text uses</P
></LI
></UL
><P
CLASS="para"
>All the examples are shown using EUC-JP as the encoding of interest, but they will work with any of the many multiple-byte encodings commonly used for text processing, such as Unicode, Big-5, etc.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch06-pgfId-1000009989"
>Avoiding false matches</A
></H4
><P
CLASS="para"
>A false match is where the regular expression engine finds a match that begins in the middle of a multiple-byte character sequence. We can get around the problem by carefully controlling the match, ensuring that the pattern matching engine stays synchronized with the character boundaries at all times.</P
><P
CLASS="para"
>This can be done by anchoring the match to the start of the string, then manually bypassing characters ourselves when the real match can't happen at the current location. With the EUC-JP example, the "bypassing characters" part is <CODE
CLASS="literal"
>/(?:</CODE
> <CODE
CLASS="literal"
>$eucjp</CODE
> <CODE
CLASS="literal"
>)*?/</CODE
>. <CODE
CLASS="literal"
>$eucjp</CODE
> is our template to match any valid character, and because it is applied via the non-greedy <CODE
CLASS="literal"
>*?</CODE
>, it can match a character only when whatever follows (presumably the desired real match) can't match. Here's a real example:</P
><PRE
CLASS="programlisting"
>/^ (?: $eucjp )*?  \xC5\xEC\xB5\xFE/ox # Trying to find Tokyo</PRE
><P
CLASS="para"
>In the EUC-JP encoding, the Japanese word for Tokyo is written with two characters, the first encoded by the two bytes <CODE
CLASS="literal"
>\xC5\xEC</CODE
>, the second encoded by the two bytes <CODE
CLASS="literal"
>\xB5\xFE</CODE
>. As far as Perl is concerned, we're looking merely for the four-byte sequence <CODE
CLASS="literal"
>\xC5\xEC\xB5\xFE</CODE
>, but because we use <CODE
CLASS="literal"
>(?:</CODE
> <CODE
CLASS="literal"
>$eucjp</CODE
> <CODE
CLASS="literal"
>)*?</CODE
> to move along the string only by characters of our target encoding, we know we'll stay in synch.</P
><P
CLASS="para"
>Don't forget to use the <CODE
CLASS="literal"
>/ox</CODE
> modifiers. The <CODE
CLASS="literal"
>/x</CODE
> modifier is especially crucial due to the whitespace used in the encoding template <CODE
CLASS="literal"
>$eucjp</CODE
>. The <CODE
CLASS="literal"
>/o</CODE
> modifier is for efficiency, since we know <CODE
CLASS="literal"
>$eucjp</CODE
> won't change from use to use.</P
><P
CLASS="para"
>Use in a replacement is similar, but since the text leading to the real match is also part of the overall match, we must capture it with parentheses, being sure to include it in the replacment text. Assuming that <CODE
CLASS="literal"
>$Tokyo</CODE
> and <CODE
CLASS="literal"
>$Osaka</CODE
> have been set to the bytes sequences for their respective words in the EUC-JP encoding, we could use the following to replace Osaka for Tokyo:</P
><PRE
CLASS="programlisting"
>/^ (  (?:eucjp)*? ) $Tokyo/$1$Osaka/ox</PRE
><P
CLASS="para"
>If used with <CODE
CLASS="literal"
>/g</CODE
>, we want to anchor the match to the end of the previous match, rather than to the start of the string. That's as simple as changing <CODE
CLASS="literal"
>^</CODE
> to <CODE
CLASS="literal"
>\G</CODE
>:</P
><PRE
CLASS="programlisting"
>/\G (  (?:eucjp)*? ) $Tokyo/$1$Osaka/gox</PRE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch06-pgfId-1000010009"
>Splitting multiple-byte strings</A
></H4
><P
CLASS="para"
>Another common task is to split an input string into its individual charcters. With a one-byte-per-character encoding, you can simply split <CODE
CLASS="literal"
>//</CODE
>, but with a multiple-byte encoding, we need something like:</P
><PRE
CLASS="programlisting"
>@chars = /$eucjp/gox; # One character per list element</PRE
><P
CLASS="para"
>Now, <CODE
CLASS="literal"
>@chars</CODE
> contains one character per element. The following snippet shows how you might use this to write a filter of some sort:</P
><PRE
CLASS="programlisting"
>while (&lt;&gt;) {
  my @chars = /$eucjp/gox; # One character per list element
  for my $char (@chars) {
    if (length($char) == 1) {
      # Do something interesting with this one-byte character
    } else {
      # Do something interesting with this multiple-byte character
    }
  }
  my $line = join(&quot;&quot;,@chars); # Glue list back together
  print $line;
}</PRE
><P
CLASS="para"
>In the two "do something interesting" parts, any change to <CODE
CLASS="literal"
>$char</CODE
> will be reflected in the output when <CODE
CLASS="literal"
>@chars</CODE
> is glued back together.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch06-pgfId-1000010032"
>Validating multiple-byte strings</A
></H4
><P
CLASS="para"
>The use of <CODE
CLASS="literal"
>/$eucjp/gox</CODE
> in this kind of technique relies strongly on the input string indeed being properly formatted in our target encoding, EUC-JP. If it's not, the template <CODE
CLASS="literal"
>/$eucjp/</CODE
> won't be able to match, and bytes will be skipped.</P
><P
CLASS="para"
>One way to address this is to use <CODE
CLASS="literal"
>/\G$eucjp/gox</CODE
> instead. This prohibits the pattern matching engine from skipping bytes in order to find a match (since the use of <CODE
CLASS="literal"
>\G</CODE
> indicates that any match must immediately follow the previous match). This is still not a perfect approach, since it will simply stop matching on ill-formatted input data.</P
><P
CLASS="para"
>A better approach to confirm that a string is valid with respect to an encoding is to use something like:</P
><PRE
CLASS="programlisting"
>$is_eucjp = m/^(?:$eucjp)*$/xo;</PRE
><P
CLASS="para"
>If a string has only valid characters from start to end, you know the string as a whole is valid.</P
><P
CLASS="para"
>There is one potential for a problem, and that's due to how the end-of-string metacharacter <CODE
CLASS="literal"
>$</CODE
> works: it can be true at the end of the string (as we want), and also just before a newline at the end of the string. That means you can still match sucessfully even if the newline is not a valid character in the encoding. To get around this problem, you could use the more-complicated <CODE
CLASS="literal"
>(?!\n)$</CODE
> instead of <CODE
CLASS="literal"
>$</CODE
>.</P
><P
CLASS="para"
>You can use the basic validation technique to detect which encoding is being used. For example, Japanese is commonly encoded with either EUC-JP, or another encoding called Shift-JIS. If you've set up the templates, as with <CODE
CLASS="literal"
>$eucjp</CODE
>, you can do something like:</P
><PRE
CLASS="programlisting"
>$is_eucjp = m/^(?:$eucjp)*$/xo;
$is_sjis  = m/^(?:$sjis)*$/xo;</PRE
><P
CLASS="para"
>If both are true, the text is likely ASCII (since, essentially, ASCII is a sub-component of both encodings). (It's not quite fool-proof, though, since some strings with multi-byte characters might appear to be valid in both encodings. In such a case, automatic detection becomes impossible, although one might use character-frequency data to make an educated guess.)</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch06-pgfId-1000010053"
>Converting between encodings</A
></H4
><P
CLASS="para"
>Converting from one encoding to another can be as simple as an extension of the process-each-character routine above. Conversions for some closely related encodings can be done by a simple mathematical computation on the bytes, while others might require huge mapping tables. In either case, you insert the code at the "do something interesting" points in the routine.</P
><P
CLASS="para"
>Here's an example to convert from EUC-JP to Unicode, using a <CODE
CLASS="literal"
>%euc2uni</CODE
> hash as a mapping table:</P
><PRE
CLASS="programlisting"
>while (&lt;&gt;) {
  my @chars = /$eucjp/gox; # One character per list element
  for my $euc (@chars) {
    my $uni = $euc2uni{$char};
    if (defined $uni) {
        $euc = $uni;
    } else {
        ## deal with unknown EUC-&gt;Unicode mapping here.
    }
  }
  my $line = join(&quot;&quot;,@chars);
  print $line;
}</PRE
><P
CLASS="para"
>The topic of multiple-byte matching and processing is of particular importance when dealing with Unicode, which has a variety of possible representations. UCS-2 and UCS-4 are fixed-length encodings. UTF-8 defines a mixed one- through six-byte encoding. UTF-16, which represents the most common instance of Unicode encoding, is a variable-length 16-bit encoding.<A
CLASS="indexterm"
NAME="ch06-idx-1000010159-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000010159-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000010159-2"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000010159-3"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000010159-4"
></A
></P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1000010163"
>See Also</A
></H3
><P
CLASS="para"
>Jeffrey Friedl's article in Issue 5 of <CITE
CLASS="citetitle"
>The Perl Journal </CITE
>; <CITE
CLASS="citetitle"
>CJKV Information Processing</CITE
> by Ken Lunde; O'Reilly &amp; Associates, (due 1999)</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_18.htm"
TITLE="6.17. Expressing AND, OR, and NOT in a Single Pattern"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.17. Expressing AND, OR, and NOT in a Single Pattern"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_20.htm"
TITLE="6.19. Matching a Valid Mail Address"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.19. Matching a Valid Mail Address"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.17. Expressing AND, OR, and NOT in a Single Pattern</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6.19. Matching a Valid Mail Address</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
