<HTML
><HEAD
>
<TITLE>Recipe 4.3. Changing Array Size (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:31:12Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"><LINK
REL="prev"
HREF="ch04_03.htm"
TITLE="4.2. Printing a List with Commas"><LINK
REL="next"
HREF="ch04_05.htm"
TITLE="4.4. Doing Something with Every Element in a List"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_03.htm"
TITLE="4.2. Printing a List with Commas"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2. Printing a List with Commas"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"
>Chapter 4<BR>Arrays</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_05.htm"
TITLE="4.4. Doing Something with Every Element in a List"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.4. Doing Something with Every Element in a List"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-24943"
>4.3. Changing Array Size</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-297"
>Problem <A
CLASS="indexterm"
NAME="ch04-idx-1000006617-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006617-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006617-2"
></A
></A
></H3
><P
CLASS="para"
>You want to enlarge or truncate an array. For example, you might truncate an array of employees that's already sorted by salary to list the five highest-paid employees. Or, if you know how big your array will get and that it will grow piecemeal, it's more efficient to get memory for it in one step by enlarging it just once than it is to keep <CODE
CLASS="literal"
>push</CODE
>ing values onto the end.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-303"
>Solution</A
></H3
><P
CLASS="para"
>Assign to <CODE
CLASS="literal"
>$#ARRAY</CODE
><A
CLASS="indexterm"
NAME="ch04-idx-1000006623-0"
></A
>:</P
><PRE
CLASS="programlisting"
># grow or shrink @ARRAY
$#ARRAY = $NEW_LAST_ELEMENT_INDEX_NUMBER;</PRE
><P
CLASS="para"
>Assigning to an element past the end automatically extends the array:</P
><PRE
CLASS="programlisting"
>$ARRAY[$NEW_LAST_ELEMENT_INDEX_NUMBER] = $VALUE;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-317"
>Discussion</A
></H3
><P
CLASS="para"
><CODE
CLASS="literal"
>$#ARRAY</CODE
> is the number of <A
CLASS="indexterm"
NAME="ch04-idx-1000006629-0"
></A
>the last valid index in <CODE
CLASS="literal"
>@ARRAY</CODE
>. If we assign it a number smaller than its current value, we truncate the array. Truncated elements are lost forever. If we assign <CODE
CLASS="literal"
>$#ARRAY</CODE
> a number larger than its current value, the array grows. New elements have the undefined value.</P
><P
CLASS="para"
><CODE
CLASS="literal"
>$#ARRAY</CODE
> is not <CODE
CLASS="literal"
>@ARRAY</CODE
>, though. Although <CODE
CLASS="literal"
>$#ARRAY</CODE
> is the last valid index in the array, <CODE
CLASS="literal"
>@ARRAY</CODE
> (in scalar context, as when treated as a number) is the <EM
CLASS="emphasis"
>number</EM
> of elements. <CODE
CLASS="literal"
>$#ARRAY</CODE
> is one less than <CODE
CLASS="literal"
>@ARRAY</CODE
> because array indices start at 0.</P
><P
CLASS="para"
>Here's some code that uses both:</P
><PRE
CLASS="programlisting"
>sub what_about_that_array {
    print &quot;The array now has &quot;, scalar(@people), &quot; elements.\n&quot;;
    print &quot;The index of the last element is $#people.\n&quot;;
    print &quot;Element #3 is `$people[3]'.\n&quot;;
}

@people = qw(Crosby Stills Nash Young);
what_about_that_array();</PRE
><P
CLASS="para"
>prints:</P
><PRE
CLASS="programlisting"
><CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>The array now has 4 elements.</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>The index of the last element is 3.</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Element #3 is `Young'.</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>whereas:</P
><PRE
CLASS="programlisting"
>$#people--;
what_about_that_array();</PRE
><P
CLASS="para"
>prints:</P
><PRE
CLASS="programlisting"
><CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>The array now has 3 elements.</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>The index of the last element is 2.</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Element #3 is `'.</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>Element #3 disappeared when we shortened the array. If we'd used the <CODE
CLASS="literal"
>-w</CODE
> flag on this program, Perl would also have warned "use of uninitialized value" because <CODE
CLASS="literal"
>$people[3]</CODE
> is undefined.</P
><PRE
CLASS="programlisting"
>$#people = 10_000;
what_about_that_array();</PRE
><P
CLASS="para"
>prints:</P
><PRE
CLASS="programlisting"
><CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>The array now has 10001 elements.</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>The index of the last element is 10000.</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Element #3 is `'.</I
></CODE
></B
></CODE
><CODE
CLASS="literal"
></CODE
><A
CLASS="indexterm"
NAME="ch04-idx-1000006625-0"
></A
></PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>&quot;Young&quot;</CODE
> element is now gone forever. Instead of assigning to <CODE
CLASS="literal"
>$#people</CODE
>, we could have said:</P
><PRE
CLASS="programlisting"
>$people[10_000] = undef;</PRE
><P
CLASS="para"
>Perl arrays are not sparse. In other words, if you have a 10,000th element, you must have the 9,999 other elements, too. They may be undefined, but they still take up memory. For this reason, <CODE
CLASS="literal"
>$array[time]</CODE
>, or any other construct that uses a very large integer as an array index, is a bad idea. Use a hash instead.</P
><P
CLASS="para"
>We have to say <CODE
CLASS="literal"
>scalar</CODE
> <CODE
CLASS="literal"
>@array</CODE
> in the <CODE
CLASS="literal"
>print</CODE
> because Perl gives list context to (most) functions' arguments, but we want <CODE
CLASS="literal"
>@array</CODE
> in scalar context.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-387"
>See Also</A
></H3
><P
CLASS="para"
>The discussion of the <CODE
CLASS="literal"
>$#ARRAY</CODE
> notation in <EM
CLASS="emphasis"
>perldata </EM
>(1), also explained in the <A
CLASS="olink"
HREF="../prog/ch02_03.htm"
>"List Values and Arrays"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006619-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006619-1"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_03.htm"
TITLE="4.2. Printing a List with Commas"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2. Printing a List with Commas"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_05.htm"
TITLE="4.4. Doing Something with Every Element in a List"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.4. Doing Something with Every Element in a List"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.2. Printing a List with Commas</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.4. Doing Something with Every Element in a List</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
