<HTML
><HEAD
>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:39:01Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Perl Cookbook"><LINK
REL="prev"
HREF="ch08_21.htm"
TITLE="8.20. Program: laston"><LINK
REL="next"
HREF="ch09_02.htm"
TITLE="9.1. Getting and Setting Timestamps"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_21.htm"
TITLE="8.20. Program: laston"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.20. Program: laston"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 9</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_02.htm"
TITLE="9.1. Getting and Setting Timestamps"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.1. Getting and Setting Timestamps"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch09-17883"
>9. Directories</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch09-27257"
TITLE="9.0. Introduction"
>Introduction</A
><BR><A
CLASS="sect1"
HREF="ch09_02.htm"
TITLE="9.1. Getting and Setting Timestamps"
>Getting and Setting Timestamps</A
><BR><A
CLASS="sect1"
HREF="ch09_03.htm"
TITLE="9.2. Deleting a File"
>Deleting a File</A
><BR><A
CLASS="sect1"
HREF="ch09_04.htm"
TITLE="9.3. Copying or Moving a File"
>Copying or Moving a File</A
><BR><A
CLASS="sect1"
HREF="ch09_05.htm"
TITLE="9.4. Recognizing Two Names for the Same File"
>Recognizing Two Names for the Same File</A
><BR><A
CLASS="sect1"
HREF="ch09_06.htm"
TITLE="9.5. Processing All Files in a Directory"
>Processing All Files in a Directory</A
><BR><A
CLASS="sect1"
HREF="ch09_07.htm"
TITLE="9.6. Globbing, or Getting a List of Filenames Matching a Pattern"
>Globbing, or Getting a List of Filenames Matching a Pattern</A
><BR><A
CLASS="sect1"
HREF="ch09_08.htm"
TITLE="9.7. Processing All Files in a Directory Recursively"
>Processing All Files in a Directory Recursively</A
><BR><A
CLASS="sect1"
HREF="ch09_09.htm"
TITLE="9.8. Removing a Directory and Its Contents"
>Removing a Directory and Its Contents</A
><BR><A
CLASS="sect1"
HREF="ch09_10.htm"
TITLE="9.9. Renaming Files"
>Renaming Files</A
><BR><A
CLASS="sect1"
HREF="ch09_11.htm"
TITLE="9.10. Splitting a Filename into Its Component Parts"
>Splitting a Filename into Its Component Parts</A
><BR><A
CLASS="sect1"
HREF="ch09_12.htm"
TITLE="9.11. Program: symirror"
>Program: symirror</A
><BR><A
CLASS="sect1"
HREF="ch09_13.htm"
TITLE="9.12. Program: lst"
>Program: lst</A
></P
><P
></P
></DIV
><DIV
CLASS="epigraph"
ALIGN="right"
><P
CLASS="para"
ALIGN="right"
><I
>Unix has its weak points but its file system is not one of them.</I
></P
><P
CLASS="attribution"
ALIGN="right"
>-&nbsp;Chris Torek </P
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch09-27257"
>9.0. Introduction</A
></H2
><P
CLASS="para"
>To fully understand <A
CLASS="indexterm"
NAME="ch09-idx-1000004336-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004336-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004336-2"
></A
>directories, you need to be acquainted with the underlying mechanics. The following explanation is slanted towards the Unix filesystem, for whose system calls and behavior Perl's directory access routines were designed, but it is applicable to some degree to most other platforms.</P
><P
CLASS="para"
>A <A
CLASS="indexterm"
NAME="ch09-idx-1000005024-0"
></A
>filesystem consists of two parts: a set of data blocks where the contents of files and directories are kept, and an index to those blocks. Each entity in the filesystem has an entry in the index, be it a plain file, a directory, a link, or a special file like those in <CODE
CLASS="literal"
>/dev</CODE
>. Each entry in the index is called an <EM
CLASS="emphasis"
>inode</EM
><A
CLASS="indexterm"
NAME="ch09-idx-1000005026-0"
></A
> (short for <EM
CLASS="emphasis"
>index node</EM
>). Since the index is a flat index, inodes are addressed by number.</P
><P
CLASS="para"
>A directory is a specially formatted file, whose inode entry marks it as a directory. A directory's data blocks contain a set of pairs. Each pair consists of the name of something in that directory and the inode number of that thing. The data blocks for <EM
CLASS="emphasis"
>/usr/bin</EM
> might contain:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Inode</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><EM
CLASS="emphasis"
>bc</EM
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>17</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><EM
CLASS="emphasis"
>du</EM
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>29</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><EM
CLASS="emphasis"
>nvi</EM
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
> 8</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><EM
CLASS="emphasis"
>pine</EM
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>55</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><EM
CLASS="emphasis"
>vi</EM
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
> 8</CODE
></P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Every directory is like this, even the <A
CLASS="indexterm"
NAME="ch09-idx-1000005230-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000005230-1"
></A
>root directory ( <EM
CLASS="emphasis"
>/   </EM
>). To read the file <EM
CLASS="emphasis"
>/usr/bin/vi</EM
>, the operating system reads the inode for <EM
CLASS="emphasis"
>/</EM
>, reads its data blocks to find the entry for <EM
CLASS="emphasis"
>/usr</EM
>, reads <EM
CLASS="emphasis"
>/usr  </EM
>'s inode, reads its data block to find <EM
CLASS="emphasis"
>/usr/bin</EM
>, reads <EM
CLASS="emphasis"
>/usr/bin</EM
>'s inode, reads its data block to find <EM
CLASS="emphasis"
>/usr/bin/vi</EM
>, reads <EM
CLASS="emphasis"
>/usr/bin/vi </EM
>'s inode, and then reads the data from its data block.</P
><P
CLASS="para"
>The name in a directory entry isn't fully qualified. The file <EM
CLASS="emphasis"
>/usr/bin/vi</EM
> has an entry with the name <EM
CLASS="emphasis"
>vi</EM
> in the <EM
CLASS="emphasis"
>/usr/bin</EM
> directory. If you open the directory <EM
CLASS="emphasis"
>/usr/bin</EM
> and read entries one by one, you get filenames like <EM
CLASS="emphasis"
>patch</EM
>, <EM
CLASS="emphasis"
>rlogin</EM
>, and <EM
CLASS="emphasis"
>vi</EM
> instead of fully qualified names like <EM
CLASS="emphasis"
>/usr/bin/patch</EM
>, <EM
CLASS="emphasis"
>/usr/bin/rlogin</EM
>, and <EM
CLASS="emphasis"
>/usr/bin/vi</EM
>.</P
><P
CLASS="para"
>The inode has more than a pointer to the data blocks. Each inode also contains the type of thing it represents (directory, plain file, etc.), the size of the thing, a set of permissions bits, owner and group information, the time the thing was last modified, the number of directory entries that point to this inode, and so on.</P
><P
CLASS="para"
>Some operations on files change the contents of the file's data blocks; some change just the inode. For instance, appending to or truncating a file updates its inode by changing the size field. Other operations change the directory entry that points to the file's inode. Changing a file's name changes only the directory entry; it updates neither the file's data nor its inode.</P
><P
CLASS="para"
>Three fields in the inode structure contain the last access, change, and modification times: <CODE
CLASS="literal"
>atime</CODE
><A
CLASS="indexterm"
NAME="ch09-idx-1000004341-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004341-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004341-2"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004341-3"
></A
>, <CODE
CLASS="literal"
>ctime</CODE
>, and <CODE
CLASS="literal"
>mtime</CODE
>. The <CODE
CLASS="literal"
>atime</CODE
> field is updated each time the pointer to the file's data blocks is followed and the file's data is read. The <CODE
CLASS="literal"
>mtime</CODE
> field is updated each time the file's data changes. The <CODE
CLASS="literal"
>ctime</CODE
> field is updated each time the file's inode changes. The <CODE
CLASS="literal"
>ctime</CODE
> is <EM
CLASS="emphasis"
>not</EM
> creation time; there is no way under standard Unix to find a file's <A
CLASS="indexterm"
NAME="ch09-idx-1000005016-0"
></A
>creation time.</P
><P
CLASS="para"
>Reading a file changes its <CODE
CLASS="literal"
>atime</CODE
> only. Changing a file's name doesn't change <CODE
CLASS="literal"
>atime</CODE
>, <CODE
CLASS="literal"
>ctime</CODE
>, or <CODE
CLASS="literal"
>mtime</CODE
> because it was only the directory entry that changed (it does change the <CODE
CLASS="literal"
>atime</CODE
> and <CODE
CLASS="literal"
>mtime</CODE
> of the directory the file is in, though). Truncating a file doesn't change its <CODE
CLASS="literal"
>atime</CODE
> (because we haven't read, we've just changed the size field in its directory entry), but it does change its <CODE
CLASS="literal"
>ctime</CODE
> because we changed its size field and its <CODE
CLASS="literal"
>mtime</CODE
> because we changed its contents (even though we didn't follow the pointer to do so).</P
><P
CLASS="para"
>We can access a file or directory's inode by calling the built-in function <CODE
CLASS="literal"
>stat</CODE
><A
CLASS="indexterm"
NAME="ch09-idx-1000004342-0"
></A
> on its name. For instance, to get the inode for <EM
CLASS="emphasis"
>/usr/bin/vi</EM
>, say:</P
><PRE
CLASS="programlisting"
>@entry = stat(&quot;/usr/bin/vi&quot;) or die &quot;Couldn't stat /usr/bin/vi : $!&quot;;</PRE
><P
CLASS="para"
>To get the inode for the directory <EM
CLASS="emphasis"
>/usr/bin</EM
>, say:</P
><PRE
CLASS="programlisting"
>@entry = stat(&quot;/usr/bin&quot;)    or die &quot;Couldn't stat /usr/bin : $!&quot;;</PRE
><P
CLASS="para"
>You can stat filehandles, too:</P
><PRE
CLASS="programlisting"
>@entry = stat(INFILE)        or die &quot;Couldn't stat INFILE : $!&quot;;</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>stat</CODE
> function returns a list of the values of the fields in the directory entry. If it couldn't get this information (for instance, if the file doesn't exist), it returns an empty list. It's this empty list we test for with the <CODE
CLASS="literal"
>or</CODE
> <CODE
CLASS="literal"
>die</CODE
> construct. Be careful of using <CODE
CLASS="literal"
>||</CODE
> <CODE
CLASS="literal"
>die</CODE
> because that throws the expression into scalar context, in which case <CODE
CLASS="literal"
>stat</CODE
> only reports whether it worked. It doesn't return the list of values. The <CODE
CLASS="literal"
>_</CODE
><A
CLASS="indexterm"
NAME="ch09-idx-1000006158-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000006156-0"
></A
> cache referred to below will still be updated, though.</P
><P
CLASS="para"
>The values returned by <CODE
CLASS="literal"
>stat</CODE
> are listed in the following table.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Element</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Abbreviation</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>0</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>dev</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Device number of filesystem</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>1</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ino</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Inode number (the "pointer" field)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>2</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mode</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File mode (type and permissions)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>3</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>nlink</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Number of (hard) links to the file</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>4</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>uid</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Numeric user ID of file's owner</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>5</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>gid</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Numeric group ID of file's owner</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>6</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>rdev</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The device identifier (special files only)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>7</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>size</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Total size of file, in bytes</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>8</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>atime</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Last access time, in seconds, since the Epoch</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>9</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mtime</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Last modify time, in seconds, since the Epoch</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>10</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ctime</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Inode change time, in seconds, since the Epoch</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>11</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>blksize</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Preferred block size for filesystem I/O</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>12</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>blocks</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Actual number of blocks allocated</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The standard <A
CLASS="indexterm"
NAME="ch09-idx-1000005421-0"
></A
>File::stat module provides a named interface to these values. It overrides the <CODE
CLASS="literal"
>stat</CODE
> function, so instead of returning the preceding array, it returns an object with a method for each attribute:</P
><PRE
CLASS="programlisting"
>use File::stat;

$inode = stat(&quot;/usr/bin/vi&quot;);
$ctime = $inode-&gt;ctime;
$size  = $inode-&gt;size;</PRE
><P
CLASS="para"
>In addition, Perl provides a set of operators that call <CODE
CLASS="literal"
>stat</CODE
> and return one value only. These are collectively referred to as the <A
CLASS="indexterm"
NAME="ch09-idx-1000004344-0"
></A
>-X operators because they all take the form of a dash followed by a single character. They're modelled on the shell's <EM
CLASS="emphasis"
>test</EM
> operators:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-X</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Stat field</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Meaning</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-r</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mode</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is readable by effective UID/GID</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-w</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mode</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is writable by effective UID/GID</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-x</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mode</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is executable by effective UID/GID</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-o</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mode</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is owned by effective UID</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-R</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mode</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is readable by real UID/GID</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-W</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mode</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is writable by real UID/GID</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-X</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mode</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is executable by real UID/GID</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-O</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mode</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is owned by real UID</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-e</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File exists</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-z</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>size</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File has zero size</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-s</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>size</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File has nonzero size (returns size)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-f</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mode,rdev</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is a plain file</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-d</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mode,rdev</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is a directory</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-l</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mode</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is a symbolic link</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-p</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mode</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is a named pipe (FIFO)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-S</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mode</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is a socket</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-b</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>rdev</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is a block special file</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-c</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>rdev</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is a character special file</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-t</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>rdev</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Filehandle is opened to a tty</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-u</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mode</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File has setuid bit set</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-g</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mode</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File has setgid bit set</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-k</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mode</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File has sticky bit set</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-T</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>N/A</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is a text file</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-B</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>N/A</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is a binary file (opposite of <CODE
CLASS="literal"
>-T</CODE
>)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-M</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mtime</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Age of file in days when script started</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-A</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>atime</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Same for access time</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-C</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ctime</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Same for inode change time (not creation)</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>stat</CODE
> and the <CODE
CLASS="literal"
>-X</CODE
> operators cache the values that the <EM
CLASS="emphasis"
>stat </EM
>(2) system call returned. If you then call <CODE
CLASS="literal"
>stat</CODE
> or a <CODE
CLASS="literal"
>-X</CODE
> operator with the special filehandle <CODE
CLASS="literal"
>_</CODE
> (a single underscore), it won't call <CODE
CLASS="literal"
>stat</CODE
> again but will instead return information from its cache. This lets you test many properties of a single file without calling <EM
CLASS="emphasis"
>stat </EM
>(2) many times or introducing a race condition:</P
><PRE
CLASS="programlisting"
>open( F, &quot;&lt; $filename&quot; )
    or die &quot;Opening $filename: $!\n&quot;;
unless (-s F &amp;&amp; -T _) {
    die &quot;$filename doesn't have text in it.\n&quot;;
}</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>stat</CODE
> call just returns the information in one inode, though. How do we get a list of the contents of a directory? For that, Perl provides <CODE
CLASS="literal"
>opendir</CODE
><A
CLASS="indexterm"
NAME="ch09-idx-1000004346-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004346-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004346-2"
></A
>, <CODE
CLASS="literal"
>readdir</CODE
>, and <CODE
CLASS="literal"
>closedir</CODE
>:</P
><PRE
CLASS="programlisting"
>opendir(DIRHANDLE, &quot;/usr/bin&quot;) or die &quot;couldn't open /usr/bin : $!&quot;;
while ( defined ($filename = readdir(DIRHANDLE)) ) {
    print &quot;Inside /usr/bin is something called $filename\n&quot;;
}
closedir(DIRHANDLE);<A
CLASS="indexterm"
NAME="ch09-idx-1000004345-0"
></A
></PRE
><P
CLASS="para"
>These directory reading functions are designed to look like the file open and close functions. Where <CODE
CLASS="literal"
>open</CODE
> takes a filehandle, though, <CODE
CLASS="literal"
>opendir</CODE
> takes a directory handle. They look the same (a bare word) but they are different: you can <CODE
CLASS="literal"
>open(BIN,</CODE
> <CODE
CLASS="literal"
>&quot;/a/file&quot;)</CODE
> and <CODE
CLASS="literal"
>opendir(BIN,</CODE
> <CODE
CLASS="literal"
>&quot;/a/dir&quot;)</CODE
> and Perl won't get confused. You might, but Perl won't. Because filehandles and directory handles are different, you can't use the &lt; &gt; operator to read from a directory handle.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-1000004347-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004347-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004347-2"
></A
>The filenames in a directory aren't necessarily stored alphabetically. If you want to get an alphabetical list of files, you'll have to read all the entries and sort them yourself.</P
><P
CLASS="para"
>The separation of directory information from inode information can create some odd situations. Operations that change directory only require write permission on the directory, not on the file. Most operations that change information in the file's data require write permission to the file. Operations that alter the permissions of the file require that the caller be the file's owner or the superuser. This can lead to the interesting situation of being able to delete a file you can't read, or write to a file you can't remove.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-1000004348-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004348-1"
></A
>Although these situations make the filesystem structure seem odd at first, they're actually the source of much of Unix's power. Links, two filenames that refer to the same file, are now extremely simple. The two directory entries just list the same inode number. The inode structure includes a count of the number of directory entries referring to the file (<CODE
CLASS="literal"
>nlink</CODE
> in the values returned by <CODE
CLASS="literal"
>stat</CODE
>), but it lets the operating system store and maintain only one copy of the modification times, size, and other file attributes. When one directory entry is <CODE
CLASS="literal"
>unlink</CODE
>ed, data blocks are only deleted if the directory entry was the last one that referred to the file's inode &nbsp;-  and no processes still have the file open. You can <CODE
CLASS="literal"
>unlink</CODE
> an open file, but its disk space won't be released until the last close.</P
><P
CLASS="para"
>Links come in two forms. The kind described above, where two directory entries list the same inode number (like <EM
CLASS="emphasis"
>vi</EM
> and <EM
CLASS="emphasis"
>nvi</EM
> in the earlier table), are called <EM
CLASS="emphasis"
>hard links</EM
><A
CLASS="indexterm"
NAME="ch09-idx-1000004349-0"
></A
>. The operating system cannot tell the first directory entry of a file (the one created when the file was created) from any subsequent hard links to it. The other kind, <EM
CLASS="emphasis"
>soft</EM
> or <EM
CLASS="emphasis"
>symbolic links</EM
><A
CLASS="indexterm"
NAME="ch09-idx-1000004350-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004350-1"
></A
>, are very different. A soft link is a special type of file whose data block stores the filename the file is linked to. Soft links have a different <CODE
CLASS="literal"
>mode</CODE
> value, indicating they're not regular files. The operating system, when asked to <CODE
CLASS="literal"
>open</CODE
> a soft link, instead opens the filename contained in the data block.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-chap09_executive_0"
>Executive Summary</A
></H3
><P
CLASS="para"
>Filenames are kept in a directory, separate from the size, protections, and other metadata kept in an inode.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>stat</CODE
> function returns the inode information (metadata).</P
><P
CLASS="para"
><CODE
CLASS="literal"
>opendir</CODE
>, <CODE
CLASS="literal"
>readdir</CODE
>, and friends provide access to filenames in a directory through a <EM
CLASS="emphasis"
>directory handle</EM
>.</P
><P
CLASS="para"
>Directory handles look like filehandles, but they are not the same. In particular, you can't use &lt; &gt; on directory handles.</P
><P
CLASS="para"
>The permissions on a directory determine whether you can read and write the list of filenames. The permissions on a file determine whether you can change the file's metadata or contents.</P
><P
CLASS="para"
>Three different times are stored in an inode. None of them is the file's creation time.</P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_21.htm"
TITLE="8.20. Program: laston"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.20. Program: laston"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_02.htm"
TITLE="9.1. Getting and Setting Timestamps"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.1. Getting and Setting Timestamps"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.20. Program: laston</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9.1. Getting and Setting Timestamps</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
