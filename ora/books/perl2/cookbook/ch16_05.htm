<HTML
><HEAD
>
<TITLE>Recipe 16.4. Reading or Writing to Another Program (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:43:41Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"><LINK
REL="prev"
HREF="ch16_04.htm"
TITLE="16.3. Replacing the Current Program with a Different One"><LINK
REL="next"
HREF="ch16_06.htm"
TITLE="16.5. Filtering Your Own Output"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_04.htm"
TITLE="16.3. Replacing the Current Program with a Different One"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.3. Replacing the Current Program with a Different One"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"
>Chapter 16<BR>Process Management and Communication</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_06.htm"
TITLE="16.5. Filtering Your Own Output"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.5. Filtering Your Own Output"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch16-16252"
>16.4. Reading or Writing to Another Program</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-988"
>Problem<A
CLASS="indexterm"
NAME="ch16-idx-1000006259-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006259-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006259-2"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006259-3"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006259-4"
></A
></A
></H3
><P
CLASS="para"
>You want to run another program and either read its output or supply the program with input.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-994"
>Solution</A
></H3
><P
CLASS="para"
>Use <CODE
CLASS="literal"
>open</CODE
><A
CLASS="indexterm"
NAME="ch16-idx-1000006265-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006265-1"
></A
> with a pipe symbol at the beginning or end. To read from a program, put the pipe symbol at the end:</P
><PRE
CLASS="programlisting"
>$pid = open(README, &quot;program arguments |&quot;)  or die &quot;Couldn't fork: $!\n&quot;;
while (&lt;README&gt;) {
    # ...
}
close(README)                               or die &quot;Couldn't close: $!\n&quot;;</PRE
><P
CLASS="para"
>To write to the program, put the pipe at the beginning:</P
><PRE
CLASS="programlisting"
>$pid = open(WRITEME, &quot;| program arguments&quot;) or die &quot;Couldn't fork: $!\n&quot;;
print WRITEME &quot;data\n&quot;;
close(WRITEME)                              or die &quot;Couldn't close: $!\n&quot;;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1018"
>Discussion</A
></H3
><P
CLASS="para"
>In the case of reading, this is similar to using backticks, except you have a process ID and a filehandle. As with the backticks, <CODE
CLASS="literal"
>open</CODE
> uses the shell if it sees shell-special characters in its argument, but it doesn't if there aren't any. This is usually a welcome convenience, because it lets the shell do filename wildcard expansion and I/O redirection, saving you the trouble.</P
><P
CLASS="para"
>However, sometimes this isn't desirable. Piped <CODE
CLASS="literal"
>open</CODE
>s that include unchecked user data would be unsafe while running in taint mode or in untrustworthy situations. <A
CLASS="xref"
HREF="ch19_07.htm"
TITLE="Executing Commands Without Shell Escapes"
>Recipe 19.6</A
> shows how to get the effect of a piped <CODE
CLASS="literal"
>open</CODE
> without risking using the shell.</P
><P
CLASS="para"
>Notice how we specifically call <CODE
CLASS="literal"
>close</CODE
> on the filehandle. When you use <CODE
CLASS="literal"
>open</CODE
> to connect a filehandle to a child process, Perl remembers this and automatically waits for the child when you close the filehandle. If the child hasn't exited by then, Perl waits until it does. This can be a very, very long wait if your child doesn't exit:</P
><PRE
CLASS="programlisting"
>$pid = open(F, &quot;sleep 100000|&quot;);    # child goes to sleep
close(F);                           # and the parent goes to lala land</PRE
><P
CLASS="para"
>To avoid this, you can save the PID returned by <CODE
CLASS="literal"
>open</CODE
> to kill your child, or use a manual <CODE
CLASS="literal"
>pipe</CODE
>-<CODE
CLASS="literal"
>fork</CODE
>-<CODE
CLASS="literal"
>exec</CODE
> sequence as described in <A
CLASS="xref"
HREF="ch16_11.htm"
TITLE="Communicating Between Related Processes"
>Recipe 16.10</A
>.</P
><P
CLASS="para"
>If you attempt to write to a process that has gone away, your process will receive a <A
CLASS="indexterm"
NAME="ch16-idx-1000006280-0"
></A
>SIGPIPE. The default disposition for this signal is to kill your process, so the truly paranoid install a SIGPIPE handler just in case.</P
><P
CLASS="para"
>If you want to run another program and be able to supply its STDIN yourself, a similar construct is used:</P
><PRE
CLASS="programlisting"
>$pid = open(WRITEME, &quot;| program args&quot;);
print WRITEME &quot;hello\n&quot;;            # program will get hello\n on STDIN
close(WRITEME);                     # program will get EOF on STDIN</PRE
><P
CLASS="para"
>The leading pipe symbol in the filename argument to <CODE
CLASS="literal"
>open</CODE
> tells Perl to start another process instead. It connects the <CODE
CLASS="literal"
>open</CODE
>ed filehandle to the process's STDIN. Anything you write to the filehandle can be read by the program through its STDIN. When you <CODE
CLASS="literal"
>close</CODE
> the filehandle, the <CODE
CLASS="literal"
>open</CODE
>ed process will get an <CODE
CLASS="literal"
>eof</CODE
> when it next tries to read from STDIN.</P
><P
CLASS="para"
>You can also use this technique to change your program's normal output path. For example, to automatically run everything through a pager, use something like:</P
><PRE
CLASS="programlisting"
>$pager = $ENV{PAGER} || '/usr/bin/less';  # XXX: might not exist
open(STDOUT, &quot;| $pager&quot;);</PRE
><P
CLASS="para"
>Now, without changing the rest of your program, anything you print to standard output will go through the pager automatically.</P
><P
CLASS="para"
>As with <CODE
CLASS="literal"
>open</CODE
>ing a process for reading, text passed to the shell here is subject to shell metacharacter interpretation. To avoid the shell, a similar solution is called for. As before, the parent should also be wary of <CODE
CLASS="literal"
>close</CODE
>. If the parent closes the filehandle connecting it to the child, the parent will block while waiting for the child to finish. If the child doesn't finish, neither will the close. The workaround as before is either to kill your child process prematurely, or else use the low-level <CODE
CLASS="literal"
>pipe</CODE
>-<CODE
CLASS="literal"
>fork</CODE
>-<CODE
CLASS="literal"
>exec</CODE
> scenario.</P
><P
CLASS="para"
>When using piped opens, always check return values of both <CODE
CLASS="literal"
>open</CODE
> and <CODE
CLASS="literal"
>close</CODE
>, not just of <CODE
CLASS="literal"
>open</CODE
>. That's because the return value from <CODE
CLASS="literal"
>open</CODE
> does not indicate whether the command was succesfully launched. With a piped open, you fork a child to execute the command. Assuming the system hadn't run out of processes, the <CODE
CLASS="literal"
>fork</CODE
> immediately returns the PID of the child it just created.<CODE
CLASS="literal"
></CODE
><A
CLASS="indexterm"
NAME="ch16-idx-1000006267-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006267-1"
></A
></P
><P
CLASS="para"
>By the time the child process tries to <CODE
CLASS="literal"
>exec</CODE
> the command, it's a separately scheduled process. So if the command can't be found, there's effectively no way to communicate this back to the <CODE
CLASS="literal"
>open</CODE
> function, because that function is in a different process!</P
><P
CLASS="para"
>Check the return value from <CODE
CLASS="literal"
>close</CODE
> to see whether the command was successful. If the child process exits with non-zero status&nbsp;- which it will do if the command isn't found&nbsp;- the <CODE
CLASS="literal"
>close</CODE
> returns false and <CODE
CLASS="literal"
>$?</CODE
> is set to the wait status of that process. You can interpret its contents as described in <A
CLASS="xref"
HREF="ch16_20.htm"
TITLE="Avoiding Zombie Processes"
>Recipe 16.19</A
>.</P
><P
CLASS="para"
>In the case of a pipe opened for writing, you should also install a SIGPIPE handler, since writing to a child that isn't there will trigger a SIGPIPE.<A
CLASS="indexterm"
NAME="ch16-idx-1000006261-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006261-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006261-2"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006261-3"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006261-4"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1064"
>See Also</A
></H3
><P
CLASS="para"
>The <A
CLASS="olink"
HREF="../prog/ch03_102.htm"
><CODE
CLASS="literal"
>open</CODE
></A
> function in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlfunc </I
>(1); <A
CLASS="xref"
HREF="ch16_11.htm"
TITLE="Communicating Between Related Processes"
>Recipe 16.10</A
>; <A
CLASS="xref"
HREF="ch16_16.htm"
TITLE="Installing a Signal Handler"
>Recipe 16.15</A
>; <A
CLASS="xref"
HREF="ch16_20.htm"
TITLE="Avoiding Zombie Processes"
>Recipe 16.19</A
>; <A
CLASS="xref"
HREF="ch19_07.htm"
TITLE="Executing Commands Without Shell Escapes"
>Recipe 19.6</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_04.htm"
TITLE="16.3. Replacing the Current Program with a Different One"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.3. Replacing the Current Program with a Different One"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_06.htm"
TITLE="16.5. Filtering Your Own Output"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.5. Filtering Your Own Output"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>16.3. Replacing the Current Program with a Different One</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>16.5. Filtering Your Own Output</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
