<HTML
><HEAD
>
<TITLE>Recipe 11.7. Using Closures Instead of Objects (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:37Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"><LINK
REL="prev"
HREF="ch11_07.htm"
TITLE="11.6. Creating Arrays of Scalar References"><LINK
REL="next"
HREF="ch11_09.htm"
TITLE="11.8. Creating References to Methods"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_07.htm"
TITLE="11.6. Creating Arrays of Scalar References"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.6. Creating Arrays of Scalar References"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"
>Chapter 11<BR>References and Records</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_09.htm"
TITLE="11.8. Creating References to Methods"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.8. Creating References to Methods"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-26813"
>11.7. Using Closures Instead of Objects</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-798"
>Problem</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-1000004831-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004831-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004831-2"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004831-3"
></A
>You want records with private state, behavior, and identity, but you don't want to learn object-oriented programming to accomplish this.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-804"
>Solution</A
></H3
><P
CLASS="para"
>Write a function that returns (by reference) a hash of code references. These code references are all closures created in the same scope, so when they execute, they'll all share the same set of bindings to private variables.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-810"
>Discussion</A
></H3
><P
CLASS="para"
>Because a closure is a binding of code and data, it can implement what might be thought of as an object.</P
><P
CLASS="para"
>Here's an example that creates and returns a hash of anonymous functions. <CODE
CLASS="literal"
>mkcounter</CODE
> takes an argument of a seed counter and returns a hash reference that you can use to manipulate the counter indirectly.</P
><PRE
CLASS="programlisting"
>$c1 = mkcounter(20); 
$c2 = mkcounter(77);

printf &quot;next c1: %d\n&quot;, $c1-&gt;{NEXT}-&gt;();  # 21 
printf &quot;next c2: %d\n&quot;, $c2-&gt;{NEXT}-&gt;();  # 78 
printf &quot;next c1: %d\n&quot;, $c1-&gt;{NEXT}-&gt;();  # 22 
printf &quot;last c1: %d\n&quot;, $c1-&gt;{PREV}-&gt;();  # 21 
printf &quot;old  c2: %d\n&quot;, $c2-&gt;{RESET}-&gt;(); # 77</PRE
><P
CLASS="para"
>The code values in the hash references in <CODE
CLASS="literal"
>$c1</CODE
> and <CODE
CLASS="literal"
>$c2</CODE
> maintain their own separate state. Here's how to set that up:</P
><PRE
CLASS="programlisting"
>sub mkcounter {
    my $count  = shift; 
    my $start  = $count; 
    my $bundle = { 
        &quot;NEXT&quot;   =&gt; sub { return ++$count  }, 
        &quot;PREV&quot;   =&gt; sub { return --$count  }, 
        &quot;GET&quot;    =&gt; sub { return $count    },
        &quot;SET&quot;    =&gt; sub { $count = shift   }, 
        &quot;BUMP&quot;   =&gt; sub { $count += shift  }, 
        &quot;RESET&quot;  =&gt; sub { $count = $start  },
    }; 
    $bundle-&gt;{&quot;LAST&quot;} = $bundle-&gt;{&quot;PREV&quot;}; 
    return $bundle;
}</PRE
><P
CLASS="para"
>Because the lexical variables used by the closures in the <CODE
CLASS="literal"
>$bundle</CODE
> hash reference are returned by the function, they are not deallocated. The next time <CODE
CLASS="literal"
>mkcounter</CODE
> is called, the closures get a different set of variable bindings for the same code. Because no one outside of those closures can access these two variables, this assures you of true privacy.</P
><P
CLASS="para"
>The assignment right before the return makes both the <CODE
CLASS="literal"
>&quot;PREV&quot;</CODE
> and <CODE
CLASS="literal"
>&quot;LAST&quot;</CODE
> values point to the same closure. Depending on your object-oriented background, you might think of these as being two different messages, both implemented using the same method.</P
><P
CLASS="para"
>The bundle we return is not an object in that it has no obvious inheritance and polymorphism. (Yet.) But it certainly does have state, behavior, and identity, as well as encapsulation.<A
CLASS="indexterm"
NAME="ch11-idx-1000004833-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004833-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004833-2"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004833-3"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-870"
>See Also</A
></H3
><P
CLASS="para"
>The section on  <A
CLASS="olink"
HREF="../prog/ch04_03.htm"
>"Closures"</A
> in <A
CLASS="olink"
HREF="../prog/ch04_01.htm"
>Chapter 4</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and the discussion on closures in <I
CLASS="filename"
>perlref </I
>(1); <A
CLASS="xref"
HREF="ch11_05.htm"
TITLE="Taking References to Functions"
>Recipe 11.4</A
>; <A
CLASS="xref"
HREF="ch11_10.htm"
TITLE="Constructing Records"
>Recipe 11.9</A
>; <A
CLASS="xref"
HREF="ch13_01.htm"
TITLE="Classes, Objects, and Ties"
>Chapter 13</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_07.htm"
TITLE="11.6. Creating Arrays of Scalar References"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.6. Creating Arrays of Scalar References"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_09.htm"
TITLE="11.8. Creating References to Methods"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.8. Creating References to Methods"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.6. Creating Arrays of Scalar References</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.8. Creating References to Methods</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
