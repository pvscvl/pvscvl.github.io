<HTML
><HEAD
>
<TITLE>Recipe 16.7. Reading STDERR from a Program (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:43:50Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"><LINK
REL="prev"
HREF="ch16_07.htm"
TITLE="16.6. Preprocessing Input"><LINK
REL="next"
HREF="ch16_09.htm"
TITLE="16.8. Controlling Input and Output of Another Program"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_07.htm"
TITLE="16.6. Preprocessing Input"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.6. Preprocessing Input"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"
>Chapter 16<BR>Process Management and Communication</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_09.htm"
TITLE="16.8. Controlling Input and Output of Another Program"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.8. Controlling Input and Output of Another Program"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch16-chap16_reading_1"
>16.7. Reading STDERR from a Program</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1284"
>Problem<A
CLASS="indexterm"
NAME="ch16-idx-1000006308-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006308-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006308-2"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006308-3"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006308-4"
></A
></A
></H3
><P
CLASS="para"
>You want to run a program as you would with <CODE
CLASS="literal"
>system</CODE
>, backticks, or <CODE
CLASS="literal"
>open</CODE
>, but you don't want its STDERR to be sent to your STDERR. You would like to be able to either ignore or read the STDERR.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1290"
>Solution</A
></H3
><P
CLASS="para"
>Use the shell's numeric redirection and duplication syntax for file descriptors. (We don't check the return value from <CODE
CLASS="literal"
>open</CODE
> here, to make the examples easier to read, but you should always check it in your programs!)</P
><P
CLASS="para"
>To capture a command's STDERR and STDOUT together:</P
><PRE
CLASS="programlisting"
>$output = `cmd 2&gt;&amp;1`;                          # with backticks
# or
$pid = open(PH, &quot;cmd 2&gt;&amp;1 |&quot;);                 # with an open pipe
while (&lt;PH&gt;) { }                               # plus a read</PRE
><P
CLASS="para"
>To capture a command's STDOUT and discard its STDERR:</P
><PRE
CLASS="programlisting"
>$output = `cmd 2&gt;/dev/null`;                   # with backticks
# or
$pid = open(PH, &quot;cmd 2&gt;/dev/null |&quot;);          # with an open pipe
while (&lt;PH&gt;) { }                               # plus a read</PRE
><P
CLASS="para"
>To capture a command's STDERR and discard its STDOUT:</P
><PRE
CLASS="programlisting"
>$output = `cmd 2&gt;&amp;1 1&gt;/dev/null`;              # with backticks
# or
$pid = open(PH, &quot;cmd 2&gt;&amp;1 1&gt;/dev/null |&quot;);     # with an open pipe
while (&lt;PH&gt;) { }                               # plus a read</PRE
><P
CLASS="para"
>To exchange a command's STDOUT and STDERR, i.e., capture the STDERR but have its STDOUT come out on our old STDERR:</P
><PRE
CLASS="programlisting"
>$output = `cmd 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3 3&gt;&amp;-`;           # with backticks
# or
$pid = open(PH, &quot;cmd 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3 3&gt;&amp;-|&quot;);   # with an open pipe
while (&lt;PH&gt;) { }                               # plus a read</PRE
><P
CLASS="para"
>To read both a command's STDOUT and its STDERR separately, it's easiest and safest to redirect them separately to files, and then read from those files when the program is done:</P
><PRE
CLASS="programlisting"
>system(&quot;program args 1&gt;/tmp/program.stdout 2&gt;/tmp/program.stderr&quot;);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1332"
>Discussion</A
></H3
><P
CLASS="para"
>When you launch a command with backticks, a piped <CODE
CLASS="literal"
>open</CODE
>, or <CODE
CLASS="literal"
>system</CODE
> on a single string, Perl checks for characters special to the shell. These allow you to redirect the new program's file descriptors. STDIN is file descriptor number 0, STDOUT number 1, and STDERR number 2. You can then use <CODE
CLASS="literal"
>2&gt;</CODE
><I
CLASS="filename"
>file</I
> to redirect STDERR to a file. The special notation <CODE
CLASS="literal"
>&amp;N</CODE
> where N is a file descriptor number is used to redirect to a file descriptor. Therefore, <CODE
CLASS="literal"
>2&gt;&amp;1</CODE
> points STDERR at STDOUT.</P
><P
CLASS="para"
>Here is a table of interesting shell file descriptor redirections:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Redirection</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Meaning</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>0&lt;/dev/null </CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>Make STDIN give immediate EOF</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>1&gt;/dev/null </CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>Discard STDOUT</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>2&gt;/dev/null </CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>Discard STDERR</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>2&gt;&amp;1        </CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>Send STDERR to STDOUT instead</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>2&gt;&amp;-         </CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>Close STDERR (not recommended)</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>3&lt;&gt;/dev/tty </CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>Open fd 3 to</CODE
><I
CLASS="filename"
> /dev/tty</I
><CODE
CLASS="literal"
> in read-write mode</CODE
></P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Using this, let's examine the most complicated of the redirection sequences from the solution section:</P
><PRE
CLASS="programlisting"
>$output = `cmd 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3 3&gt;&amp;-`;        </PRE
><P
CLASS="para"
>There are four steps here:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Step A: <CODE
CLASS="literal"
>3&gt;&amp;1</CODE
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Make a new file descriptor, number 3, be a copy of number 1. This saves where STDOUT had been destined in the new file descriptor we've just opened.</P
></DD
><DT
CLASS="term"
>Step B: <CODE
CLASS="literal"
>1&gt;&amp;2</CODE
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Make STDOUT go wherever STDERR had been going. We still have the saved destination squirreled away in descriptor 3.</P
></DD
><DT
CLASS="term"
>Step C: <CODE
CLASS="literal"
>2&gt;&amp;3</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Make file descriptor 2 a copy of number 3. That means that STDERR is now going out where STDOUT had been originally going.</P
></DD
><DT
CLASS="term"
>Step D: <CODE
CLASS="literal"
>3&gt;&amp;-</CODE
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Since we're done moving streams around, keep everything nice and tidy and close our temporary file descriptor. This avoids file descriptor leaks.</P
></DD
></DL
><P
CLASS="para"
>If that's confusing, it might help to think in terms of regular variables and a sequence of assignment statements, with <CODE
CLASS="literal"
>$fd1</CODE
> representing STDOUT and <CODE
CLASS="literal"
>$fd2</CODE
> representing STDERR. If you wanted to exchange the two variables, you'd use a temporary to hold one value. That's all we're doing here.</P
><PRE
CLASS="programlisting"
>$fd3 = $fd1;
$fd1 = $fd2;
$fd2 = $fd3;
$fd3 = undef;</PRE
><P
CLASS="para"
>When all's said and done, the string returned from the backticks is the command's STDERR, and its STDOUT has been diverted to the original STDERR.</P
><P
CLASS="para"
>Ordering is important in all these examples. That's because the shell processes file descriptor redirections in strictly left to right order.</P
><PRE
CLASS="programlisting"
>system(&quot;prog args 1&gt;tmpfile 2&gt;&amp;1&quot;);
system(&quot;prog args 2&gt;&amp;1 1&gt;tmpfile&quot;);</PRE
><P
CLASS="para"
>The first command sends both standard out and standard error to the temporary file. The second command sends only the old standard output there, and the old standard error shows up on the old standard out. If that's confusing, think in terms of assignments to variables representing file descriptors:</P
><PRE
CLASS="programlisting"
># system (&quot;prog args 1&gt;tmpfile 2&gt;&amp;1&quot;);
$fd1 = &quot;tmpfile&quot;;        # change stdout destination first
$fd2 = $fd1;             # now point stderr there, too</PRE
><P
CLASS="para"
>is very different from:</P
><PRE
CLASS="programlisting"
># system(&quot;prog args 2&gt;&amp;1 1&gt;tmpfile&quot;);
$fd2 = $fd1;             # stderr same destination as stdout
$fd1 = &quot;tmpfile&quot;;        # but change stdout destination <A
CLASS="indexterm"
NAME="ch16-idx-1000006310-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006310-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006310-2"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006310-3"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006310-4"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1384"
>See Also</A
></H3
><P
CLASS="para"
>Your system's <EM
CLASS="emphasis"
>sh </EM
>(1) manpage (if you have one) for details about file descriptor redirection; the <A
CLASS="olink"
HREF="../prog/ch03_167.htm"
><CODE
CLASS="literal"
>system</CODE
></A
> function in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlfunc </I
>(1)</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_07.htm"
TITLE="16.6. Preprocessing Input"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.6. Preprocessing Input"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_09.htm"
TITLE="16.8. Controlling Input and Output of Another Program"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.8. Controlling Input and Output of Another Program"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>16.6. Preprocessing Input</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>16.8. Controlling Input and Output of Another Program</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
