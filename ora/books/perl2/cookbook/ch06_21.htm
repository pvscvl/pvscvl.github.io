<HTML
><HEAD
>
<TITLE>Recipe 6.20. Matching Abbreviations (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:06Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"><LINK
REL="prev"
HREF="ch06_20.htm"
TITLE="6.19. Matching a Valid Mail Address"><LINK
REL="next"
HREF="ch06_22.htm"
TITLE="6.21. Program: urlify"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_20.htm"
TITLE="6.19. Matching a Valid Mail Address"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.19. Matching a Valid Mail Address"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"
>Chapter 6<BR>Pattern Matching</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_22.htm"
TITLE="6.21. Program: urlify"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.21. Program: urlify"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-chap06_matching_7"
>6.20. Matching Abbreviations</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-2423"
>Problem<A
CLASS="indexterm"
NAME="ch06-idx-1000007723-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007723-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007723-2"
></A
></A
></H3
><P
CLASS="para"
>Suppose you had a list of commands, such as <CODE
CLASS="literal"
>&quot;send&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;abort&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;list&quot;</CODE
>, and <CODE
CLASS="literal"
>&quot;edit&quot;</CODE
>. The user types one in, but you don't want to make them type out the whole thing.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-2429"
>Solution</A
></H3
><P
CLASS="para"
>You can use the following technique if the strings all start with different characters or if you want to arrange the matches so one takes precedence over another, as <CODE
CLASS="literal"
>&quot;SEND&quot;</CODE
> has precedence over <CODE
CLASS="literal"
>&quot;STOP&quot;</CODE
> here:</P
><PRE
CLASS="programlisting"
>chomp($answer = &lt;&gt;);
if    (&quot;SEND&quot;  =~ /^\Q$answer/i) { print &quot;Action is send\n&quot;  }
elsif (&quot;STOP&quot;  =~ /^\Q$answer/i) { print &quot;Action is stop\n&quot;  }
elsif (&quot;ABORT&quot; =~ /^\Q$answer/i) { print &quot;Action is abort\n&quot; }
elsif (&quot;LIST&quot;  =~ /^\Q$answer/i) { print &quot;Action is list\n&quot;  }
elsif (&quot;EDIT&quot;  =~ /^\Q$answer/i) { print &quot;Action is edit\n&quot;  }</PRE
><P
CLASS="para"
>Or you can use the Text::Abbrev module:</P
><PRE
CLASS="programlisting"
>use Text::Abbrev;
$href = abbrev qw(send abort list edit);
for (print &quot;Action: &quot;; &lt;&gt;; print &quot;Action: &quot;) {
    chomp;
    my $action = $href-&gt;{ lc($_) };
    print &quot;Action is $action\n&quot;;
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-2463"
>Discussion</A
></H3
><P
CLASS="para"
>The first technique switches the typical order of a match. Normally you have a variable on the left side of the match and a known pattern on the right side. We might try to decide which action the user wanted us to take by saying <CODE
CLASS="literal"
>$answer</CODE
> <CODE
CLASS="literal"
>=~</CODE
> <CODE
CLASS="literal"
>/^ABORT/i</CODE
>, which is true if <CODE
CLASS="literal"
>$answer</CODE
> begins with the string <CODE
CLASS="literal"
>&quot;ABORT&quot;</CODE
>. It matches whether <CODE
CLASS="literal"
>$answer</CODE
> has anything after <CODE
CLASS="literal"
>&quot;ABORT&quot;</CODE
>, so <CODE
CLASS="literal"
>&quot;ABORT</CODE
> <CODE
CLASS="literal"
>LATER&quot;</CODE
> would still match. Handling abbreviations generally requires quite a bit of ugliness: <CODE
CLASS="literal"
>$answer</CODE
> <CODE
CLASS="literal"
>=~</CODE
> <CODE
CLASS="literal"
>/^A(B(O(R(T)?)?)?)?$/i</CODE
>.</P
><P
CLASS="para"
>Compare the classic <CODE
CLASS="literal"
>&quot;variable</CODE
> <CODE
CLASS="literal"
>=~</CODE
> <CODE
CLASS="literal"
>pattern&quot;</CODE
> with <CODE
CLASS="literal"
>&quot;ABORT&quot;</CODE
> <CODE
CLASS="literal"
>=~</CODE
> <CODE
CLASS="literal"
>/^\Q$answer/i</CODE
>. The <CODE
CLASS="literal"
>\Q</CODE
> escapes any characters that would otherwise be treated as regular expression, so your program won't blow up if the user enters an invalid pattern. When the user enters something like <CODE
CLASS="literal"
>&quot;ab&quot;</CODE
>, the expanded match becomes <CODE
CLASS="literal"
>&quot;ABORT&quot;</CODE
> <CODE
CLASS="literal"
>=~</CODE
> <CODE
CLASS="literal"
>/^ab/i</CODE
> after variable substitution and metaquoting. This matches.</P
><P
CLASS="para"
>The standard Text::Abbrev module takes a different approach. You give it a list of words, and it returns a reference to a hash whose keys are all unambiguous abbreviations and whose values are the fully expanded strings. So if <CODE
CLASS="literal"
>$href</CODE
> were created as in the Solution example, <CODE
CLASS="literal"
>$href-&gt;{$var}</CODE
> would return the string <CODE
CLASS="literal"
>&quot;abort&quot;</CODE
>.</P
><P
CLASS="para"
>This technique is commonly used to call a function based on the name of the string the user types in. Do this by using a symbolic reference, like:</P
><PRE
CLASS="programlisting"
>$name = 'send';
&amp;$name();</PRE
><P
CLASS="para"
>But that's scary, because it allows the user to run any function in our program, assuming they know its name. It also runs afoul of that pesky <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>strict</CODE
> <CODE
CLASS="literal"
>'refs'</CODE
> pragma.</P
><P
CLASS="para"
>Here's a partial program that creates a hash in which the key is the command name and the value is a reference to the function to call for that command:</P
><PRE
CLASS="programlisting"
># assumes that &amp;invoke_editor, &amp;deliver_message,
# $file and $PAGER are defined somewhere else.
use Text::Abbrev;
my($href, %actions, $errors);
%actions = (
    &quot;edit&quot;  =&gt; \&amp;invoke_editor,
    &quot;send&quot;  =&gt; \&amp;deliver_message,
    &quot;list&quot;  =&gt; sub { system($PAGER, $file) },
    &quot;abort&quot; =&gt; sub {
                    print &quot;See ya!\n&quot;;
                    exit;
               },
    &quot;&quot;      =&gt; sub {
                    print &quot;Unknown command: $cmd\n&quot;;
                    $errors++;
               },
);

$href = abbrev(keys %actions);

local $_;
for (print &quot;Action: &quot;; &lt;&gt;; print &quot;Action: &quot;) {
    s/^\s+//;       # trim leading  white space
    s/\s+$//;       # trim trailing white space
    next unless $_;
    $actions-&gt;{ $href-&gt;{ lc($_) } }-&gt;();
}</PRE
><P
CLASS="para"
>The last statement could have been written like this if you're not into tight expressions or need practice typing:</P
><PRE
CLASS="programlisting"
>$abbreviation = lc($_);
$expansion    = $href-&gt;{$abbreviation};
$coderef      = $actions-&gt;{$expansion};
&amp;$coderef();<A
CLASS="indexterm"
NAME="ch06-idx-1000007725-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007725-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007725-2"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-2547"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the standard Text::Abbrev module (also in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <CITE
CLASS="citetitle"
>Programming Perl </CITE
>); interpolation is explained in the "Scalar Value Constructors" section of <I
CLASS="filename"
>perldata </I
>(1), and in the <A
CLASS="olink"
HREF="../prog/ch02_03.htm"
>"String literals"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_20.htm"
TITLE="6.19. Matching a Valid Mail Address"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.19. Matching a Valid Mail Address"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_22.htm"
TITLE="6.21. Program: urlify"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.21. Program: urlify"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.19. Matching a Valid Mail Address</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6.21. Program: urlify</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
