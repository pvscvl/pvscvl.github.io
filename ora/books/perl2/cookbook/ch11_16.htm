<HTML
><HEAD
>
<TITLE>Recipe 11.15. Program: Binary Trees (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:56Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"><LINK
REL="prev"
HREF="ch11_15.htm"
TITLE="11.14. Transparently Persistent Data Structures"><LINK
REL="next"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_15.htm"
TITLE="11.14. Transparently Persistent Data Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.14. Transparently Persistent Data Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"
>Chapter 11<BR>References and Records</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12. Packages, Libraries, and Modules"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-chap11_program_0"
>11.15. Program: Binary Trees</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-1000004885-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004885-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004885-2"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004885-3"
></A
>Because Perl's built-in data types are already powerful, high-level, dynamic data types in their own right, most code can use what's already provided. If you just want quick lookups, you nearly always want to use a simple hash. As Larry has said, "The trick is to use Perl's strengths rather than its weaknesses."</P
><P
CLASS="para"
>However, hashes provide no inherent ordering. To traverse the hash in a particular order, you must first extract its keys and then sort them. If you find yourself doing so many times, performance will suffer, but probably not enough to justify the time required to craft a fancy algorithm.</P
><P
CLASS="para"
>A tree structure provides ordered traversals. How do you write a tree in Perl? First, you grab one of your favorite textbooks on data structures; the authors recommend Cormen et al., as mentioned in the "Other Books" section of the Preface. Using an anonymous hash to represent each node in the tree, translate the algorithms in the book into Perl. This is usually much more straightforward than you would imagine.</P
><P
CLASS="para"
>The program code in <A
CLASS="xref"
HREF="ch11_16.htm"
TITLE="bintree"
>Example 11.1</A
> demonstrates a simple binary tree implementation using anonymous hashes. Each node has three fields: a left child, a right child, and a value. The crucial property of an ordered binary tree is that all its left children have values less than the current node's value, and all right children have values greater than the current node's value.</P
><P
CLASS="para"
>The main program does three things. First, it creates a tree with 20 random nodes. Then it shows the in-order, pre-order, and post-order traversals of that tree. Finally, it allows the user to enter a key, and it reports whether that key is in the tree.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>insert</CODE
> function takes advantage of Perl's implicit pass-by-reference behavior on scalars to initialize an empty tree when asked to insert into an empty node. The assignment of the new node back to <CODE
CLASS="literal"
>$_[0]</CODE
> alters the value in its caller.</P
><P
CLASS="para"
>Although this data structure takes much more memory than a simple hash and the lookups are slower, the ordered traversals themselves are faster.</P
><P
CLASS="para"
>If you want to learn more about binary trees, <CITE
CLASS="citetitle"
>Introduction to Algorithms</CITE
> by Cormen, Leiserson, and Rivest and <CITE
CLASS="citetitle"
>Algorithms in C</CITE
> by Robert Sedgewick both cover the material. A B-Tree is not a binary tree; it is a more flexible tree structure normally maintained on disk. DB_File has a BTREE interface (see <EM
CLASS="emphasis"
>DB_File </EM
>(3)), and Mark-Jason Dominus has an excellent article on B-Trees in <EM
CLASS="emphasis"
>The Perl Journal</EM
>, Volume 2, Issue 4, Winter 1997, pp. 35-42.</P
><P
CLASS="para"
>The program is shown in <A
CLASS="xref"
HREF="ch11_16.htm"
TITLE="bintree"
>Example 11.1</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch11-36177"
>Example 11.1: bintree</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# <A
CLASS="indexterm"
NAME="ch11-idx-1000005107-0"
></A
>bintree - binary tree demo program
use strict;
my($root, $n);

# first generate 20 random inserts
while ($n++ &lt; 20) { insert($root, int(rand(1000)))}

# now dump out the tree all three ways
print &quot;Pre order:  &quot;;  pre_order($root);  print &quot;\n&quot;;
print &quot;In order:   &quot;;  in_order($root);   print &quot;\n&quot;;
print &quot;Post order: &quot;;  post_order($root); print &quot;\n&quot;;

# prompt until EOF
for (print &quot;Search? &quot;; &lt;&gt;; print &quot;Search? &quot;) { 
    chomp;
    my $found = search($root, $_);
    if ($found) { print &quot;Found $_ at $found, $found-&gt;{VALUE}\n&quot; }
    else        { print &quot;No $_ in tree\n&quot; }
}

exit;

#########################################

# insert given value into proper point of
# provided tree.  If no tree provided, 
# use implicit pass by reference aspect of @_
# to fill one in for our caller.
sub insert {
    my($tree, $value) = @_;
    unless ($tree) {
        $tree = {};                         # allocate new node
        $tree-&gt;{VALUE}  = $value;
        $tree-&gt;{LEFT}   = undef;
        $tree-&gt;{RIGHT}  = undef;
        $_[0] = $tree;              # $_[0] is reference param!
        return;
    }
    if    ($tree-&gt;{VALUE} &gt; $value) { insert($tree-&gt;{LEFT},  $value) }
    elsif ($tree-&gt;{VALUE} &lt; $value) { insert($tree-&gt;{RIGHT}, $value) }
    else                            { warn &quot;dup insert of $value\n&quot;  }
                                    # XXX: no dups
}

# recurse on left child, 
# then show current value, 
# then recurse on right child.
sub in_order {
    my($tree) = @_;
    return unless $tree;
    in_order($tree-&gt;{LEFT});
    print $tree-&gt;{VALUE}, &quot; &quot;;
    in_order($tree-&gt;{RIGHT});
}

# show current value, 
# then recurse on left child, 
# then recurse on right child.
sub pre_order {
    my($tree) = @_;
    return unless $tree;
    print $tree-&gt;{VALUE}, &quot; &quot;;
    pre_order($tree-&gt;{LEFT});
    pre_order($tree-&gt;{RIGHT});
}

# recurse on left child, 
# then recurse on right child,
# then show current value. 
sub post_order {
    my($tree) = @_;
    return unless $tree;
    post_order($tree-&gt;{LEFT});
    post_order($tree-&gt;{RIGHT});
    print $tree-&gt;{VALUE}, &quot; &quot;;
}

# find out whether provided value is in the tree.
# if so, return the node at which the value was found.
# cut down search time by only looking in the correct
# branch, based on current value.
sub search {
    my($tree, $value) = @_;
    return unless $tree;
    if ($tree-&gt;{VALUE} == $value) {
        return $tree;
    }
    search($tree-&gt;{ ($value &lt; $tree-&gt;{VALUE}) ? &quot;LEFT&quot; : &quot;RIGHT&quot;}, $value)
}<A
CLASS="indexterm"
NAME="ch11-idx-1000005087-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000005087-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000005087-2"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000005087-3"
></A
></PRE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_15.htm"
TITLE="11.14. Transparently Persistent Data Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.14. Transparently Persistent Data Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12. Packages, Libraries, and Modules"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.14. Transparently Persistent Data Structures</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>12. Packages, Libraries, and Modules</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
