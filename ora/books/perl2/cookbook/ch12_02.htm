<HTML
><HEAD
>
<TITLE>Recipe 12.1. Defining a Module's Interface (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:41:22Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"><LINK
REL="prev"
HREF="ch12_01.htm"
TITLE="12.0. Introduction"><LINK
REL="next"
HREF="ch12_03.htm"
TITLE="12.2. Trapping Errors in require or use"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_01.htm"
TITLE="12.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"
>Chapter 12<BR>Packages, Libraries, and Modules</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_03.htm"
TITLE="12.2. Trapping Errors in require or use"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.2. Trapping Errors in require or use"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-28525"
>12.1. Defining a Module's Interface</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-158"
>Problem<A
CLASS="indexterm"
NAME="ch12-idx-1000005139-0"
></A
></A
></H3
><P
CLASS="para"
>You want the standard <A
CLASS="indexterm"
NAME="ch12-idx-1000005140-0"
></A
>Exporter module to define the external interface to your module.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-164"
>Solution</A
></H3
><P
CLASS="para"
>In module file <EM
CLASS="emphasis"
>YourModule.pm</EM
>, place the following code. Fill in the ellipses as explained in the Discussion section.</P
><PRE
CLASS="programlisting"
>package YourModule;
use strict;
use vars qw(@ISA @EXPORT @EXPORT_OK %EXPORT_TAGS $VERSION);

use Exporter;
$VERSION = 1.00;              # Or higher
@ISA = qw(Exporter);

@EXPORT      = qw(...);       # Symbols to autoexport (:DEFAULT tag)
@EXPORT_OK   = qw(...);       # Symbols to export on request
%EXPORT_TAGS = (              # Define names for sets of symbols
    TAG1 =&gt; [...],
    TAG2 =&gt; [...],
    ...
);

########################
# your code goes here
########################

1;                            # this should be your last line</PRE
><P
CLASS="para"
>In other files where you want to use YourModule, choose one of these lines:</P
><PRE
CLASS="programlisting"
>use YourModule;               # Import default symbols into my package.
use YourModule qw(...);       # Import listed symbols into my package.
use YourModule ();            # Do not import any symbols
use YourModule qw(:TAG1);     # Import whole tag set</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-236"
>Discussion</A
></H3
><P
CLASS="para"
>The standard Exporter module handles the module's external interface. Although you could define your own <CODE
CLASS="literal"
>import</CODE
> method for your package, almost no one does this.</P
><P
CLASS="para"
>When someone says <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>YourModule</CODE
>, this does a <CODE
CLASS="literal"
>require</CODE
> <CODE
CLASS="literal"
>&quot;YourModule.pm&quot;</CODE
> statement followed a <CODE
CLASS="literal"
>YourModule-&gt;import()</CODE
> method call, both during compile time. The <CODE
CLASS="literal"
>import</CODE
> method inherited from the Exporter package looks for global variables in your package to govern its behavior. Because they must be package globals, we've declared them with the <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>vars</CODE
> pragma to satisfy <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>strict</CODE
>. These variables are:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>$VERSION</CODE
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-1000005151-0"
></A
>When a module is loaded, a minimal required version number can be supplied. If the version isn't at least this high, the <CODE
CLASS="literal"
>use</CODE
> will raise an exception.</P
><P
CLASS="para"
>use YourModule 1.86;        # If $VERSION &lt; 1.86, fail</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>@EXPORT</CODE
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-1000005152-0"
></A
>This array contains a list of functions and variables that will be exported into the caller's own namespace so they can be accessed without being fully qualified. Typically, a <CODE
CLASS="literal"
>qw()</CODE
> list is used.</P
><PRE
CLASS="programlisting"
>    @EXPORT = qw(&amp;F1 &amp;F2 @List);
    @EXPORT = qw( F1  F2 @List);        # same thing</PRE
><P
CLASS="para"
>When a simple <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>YourModule</CODE
> call is made, the function <CODE
CLASS="literal"
>&amp;F1</CODE
> can be called as <CODE
CLASS="literal"
>F1()</CODE
> rather than <CODE
CLASS="literal"
>YourModule::F1()</CODE
> and the array can be accessed as <CODE
CLASS="literal"
>@List</CODE
> instead of <CODE
CLASS="literal"
>@YourModule::List</CODE
>. The ampersand is optional in front of an exported function specification.</P
><P
CLASS="para"
>To load the module at compile time but request that no symbols be exported, use the special form <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>Exporter</CODE
> <CODE
CLASS="literal"
>()</CODE
>, with empty parentheses.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>@EXPORT_OK</CODE
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-1000005154-0"
></A
>This array contains symbols that can be imported if they're specifically asked for. If the array were loaded this way:</P
><PRE
CLASS="programlisting"
>    @EXPORT_OK = qw(Op_Func %Table);</PRE
><P
CLASS="para"
>Then the user could load the module like so:</P
><PRE
CLASS="programlisting"
>    use YourModule qw(Op_Func %Table F1);</PRE
><P
CLASS="para"
>and import only the <CODE
CLASS="literal"
>Op_Func</CODE
> function, the <CODE
CLASS="literal"
>%Table</CODE
> hash, and the <CODE
CLASS="literal"
>F1</CODE
> function. The <CODE
CLASS="literal"
>F1</CODE
> function was listed in the <CODE
CLASS="literal"
>@EXPORT</CODE
> array. Notice that this does not automatically import <CODE
CLASS="literal"
>F2</CODE
> or <CODE
CLASS="literal"
>@List</CODE
>, even though they're in <CODE
CLASS="literal"
>@EXPORT</CODE
>. To get everything in <CODE
CLASS="literal"
>@EXPORT</CODE
> plus extras from <CODE
CLASS="literal"
>@EXPORT_OK</CODE
>, use the special <CODE
CLASS="literal"
>:DEFAULT</CODE
> tag, such as:</P
><PRE
CLASS="programlisting"
>    use YourModule qw(:DEFAULT %Table);</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>%EXPORT_TAGS</CODE
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>This hash is used by large modules like CGI or POSIX to create higher-level groupings of related import symbols. Its values are references to arrays of symbol names, all of which must be in either <A
CLASS="indexterm"
NAME="ch12-idx-1000005165-0"
></A
><CODE
CLASS="literal"
>@EXPORT</CODE
> or <CODE
CLASS="literal"
>@EXPORT_OK</CODE
>. Here's a sample initialization:</P
><PRE
CLASS="programlisting"
>    %EXPORT_TAGS = (
        Functions =&gt; [ qw(F1 F2 Op_Func) ],
        Variables =&gt; [ qw(@List %Table)  ],
);</PRE
><P
CLASS="para"
>An import symbol with a leading colon means to import a whole group of symbols. Here's an example:</P
><PRE
CLASS="programlisting"
>    use YourModule qw(:Functions %Table);</PRE
><P
CLASS="para"
>That pulls in all the symbols from</P
><PRE
CLASS="programlisting"
><CODE
CLASS="literal"
>    @{</CODE
> <CODE
CLASS="literal"
>$YourModule::EXPORT_TAGS{Functions}</CODE
> <CODE
CLASS="literal"
>}</CODE
>, </PRE
><P
CLASS="para"
>that is, it pulls in the <CODE
CLASS="literal"
>F1</CODE
>, <CODE
CLASS="literal"
>F2</CODE
>, and <CODE
CLASS="literal"
>Op_Func</CODE
> functions and then the <CODE
CLASS="literal"
>%Table</CODE
> hash.</P
><P
CLASS="para"
>Although you don't list it in <CODE
CLASS="literal"
>%EXPORT_TAGS</CODE
>, the implicit tag <CODE
CLASS="literal"
>:DEFAULT</CODE
> automatically means everything in <CODE
CLASS="literal"
>@EXPORT</CODE
>.</P
><P
CLASS="para"
>You don't have to have all those variables defined in your module. You just need the ones that you expect people to be able to use.<A
CLASS="indexterm"
NAME="ch12-idx-1000005142-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005142-1"
></A
></P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-332"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the standard Exporter module, also found in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <A
CLASS="xref"
HREF="ch12_08.htm"
TITLE="Keeping Your Own Module Directory"
>Recipe 12.7</A
>; <A
CLASS="xref"
HREF="ch12_19.htm"
TITLE="Example: Module Template"
>Recipe 12.18</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_01.htm"
TITLE="12.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_03.htm"
TITLE="12.2. Trapping Errors in require or use"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.2. Trapping Errors in require or use"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.0. Introduction</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>12.2. Trapping Errors in require or use</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
