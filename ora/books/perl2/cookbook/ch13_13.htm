<HTML
><HEAD
>
<TITLE>Recipe 13.12. Solving the Data Inheritance Problem (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:28Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"><LINK
REL="prev"
HREF="ch13_12.htm"
TITLE="13.11. Generating Attribute Methods Using AUTOLOAD"><LINK
REL="next"
HREF="ch13_14.htm"
TITLE="13.13. Coping with Circular Data Structures"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_12.htm"
TITLE="13.11. Generating Attribute Methods Using AUTOLOAD"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.11. Generating Attribute Methods Using AUTOLOAD"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"
>Chapter 13<BR>Classes, Objects, and Ties</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_14.htm"
TITLE="13.13. Coping with Circular Data Structures"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.13. Coping with Circular Data Structures"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-25082"
>13.12. Solving the Data Inheritance Problem</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1495"
>Problem<A
CLASS="indexterm"
NAME="ch13-idx-1000004598-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004598-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004598-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004598-3"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004598-4"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004598-5"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004598-6"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004598-7"
></A
></A
></H3
><P
CLASS="para"
>You want to inherit from an existing class, augmenting it with a few extra methods, but you don't know which data fields your parent class is using. How can you safely carve out your own namespace in the object hash without trampling on any ancestors?</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1501"
>Solution</A
></H3
><P
CLASS="para"
>Prepend each of your fieldnames with your own class name and a distinctive separator, such as an underscore or two.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1507"
>Discussion</A
></H3
><P
CLASS="para"
>An irksome problem lurks within the normal Perl OO strategy. The exact class representation must be known, violating the veil of abstraction. The subclass has to get unnaturally chummy with all its parent classes, recursively.</P
><P
CLASS="para"
>We'll pretend we're a big happy object-oriented family and that everyone always uses hashes for objects, thus dodging the problem of a class choosing an array representation but inheriting from one that instead uses a hash model. (The solution to that problem is aggregation and delegation, as shown in <I
CLASS="filename"
>perlbot </I
>(1).) Even with this assumption, an inherited class can't safely use a key in the hash. Even if we agree to use only method calls to access attributes we don't ourselves set, how do we know that we aren't setting a key that a parent class is using? Imagine wanting to use a <CODE
CLASS="literal"
>count</CODE
> field, but unbeknownst to you, your great-great-grandparent class is using the same thing. Using <CODE
CLASS="literal"
>_count</CODE
> to indicate nominal privacy won't help, since gramps might try the same trick.</P
><P
CLASS="para"
>One reasonable approach is to prefix your own data members with your package name. Thus if you were class Employee and wanted an <CODE
CLASS="literal"
>age</CODE
> field, for safety's sake you could use <CODE
CLASS="literal"
>Employee_age</CODE
> instead. Here's a sample access method:</P
><PRE
CLASS="programlisting"
>sub Employee::age {
    my $self = shift;
    $self-&gt;{Employee_age} = shift if @_;
    return $self-&gt;{Employee_age};
} </PRE
><P
CLASS="para"
>In the spirit of the Class::Struct module described in <A
CLASS="xref"
HREF="ch13_06.htm"
TITLE="Using Classes as Structs"
>Recipe 13.5</A
>, here's a more turnkey solution to the problem. Imagine one file with:</P
><PRE
CLASS="programlisting"
>package Person;
use Class::Attributes;  # see explanation below
mkattr qw(name age peers parent);</PRE
><P
CLASS="para"
>and another like this:</P
><PRE
CLASS="programlisting"
>package Employee;
@ISA = qw(Person);
use Class::Attributes;
mkattr qw(salary age boss);</PRE
><P
CLASS="para"
>Notice that they both have an <CODE
CLASS="literal"
>age</CODE
> attribute? If those are to be logically separate, we can't use <CODE
CLASS="literal"
>$self-&gt;{age}</CODE
>, even for ourselves inside the module! Here's an implementation of the <CODE
CLASS="literal"
>Class::Attributes::mkattr</CODE
> function that solves this:</P
><PRE
CLASS="programlisting"
>package Class::Attributes;
use strict;
use Carp;
use Exporter ();
use vars qw(@ISA @EXPORT);
@ISA = qw(Exporter);
@EXPORT = qw(mkattr);
sub mkattr {
    my $hispack = caller();
    for my $attr (@_) {
        my($field, $method);
        $method = &quot;${hispack}::$attr&quot;;
        ($field = $method) =~ s/:/_/g; 
        no strict 'refs'; # here comes the kluglich bit
        *$method = sub {
            my $self = shift;
            confess &quot;too many arguments&quot; if @_ &gt; 1;
            $self-&gt;{$field} = shift if @_;
            return $self-&gt;{$field};   
        };
    } 
} 
1;</PRE
><P
CLASS="para"
>This way <CODE
CLASS="literal"
>$self-&gt;{Person_age}</CODE
> and <CODE
CLASS="literal"
>$self-&gt;{Employee_age}</CODE
> remain separate. The only funniness is that <CODE
CLASS="literal"
>$obj-&gt;age</CODE
> would only get the first one. Now, you could write <CODE
CLASS="literal"
>$obj-&gt;Person::age</CODE
> and <CODE
CLASS="literal"
>$obj-&gt;Employee::age</CODE
> to distinguish these, but well-written Perl code shouldn't use double colons to specify an exact package except under extreme duress. If you really are forced to, perhaps that library could have been better designed.</P
><P
CLASS="para"
>If you didn't want to write it that way, then from inside class Person, just use <CODE
CLASS="literal"
>age($self)</CODE
> and you'll always get Person's version, whereas from inside class Employee, <CODE
CLASS="literal"
>age($self)</CODE
> would get Employee's version. That's because it's a function call, not a method call.<A
CLASS="indexterm"
NAME="ch13-idx-1000004605-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004605-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004605-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004605-3"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004605-4"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004605-5"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004605-6"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004605-7"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1000004048"
>See Also</A
></H3
><P
CLASS="para"
>The documentation on the <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>fields</CODE
> and <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>base</CODE
> pragmas, standard as of Perl 5.005; <A
CLASS="xref"
HREF="ch10_15.htm"
TITLE="Redefining a Function"
>Recipe 10.14</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_12.htm"
TITLE="13.11. Generating Attribute Methods Using AUTOLOAD"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.11. Generating Attribute Methods Using AUTOLOAD"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_14.htm"
TITLE="13.13. Coping with Circular Data Structures"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.13. Coping with Circular Data Structures"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>13.11. Generating Attribute Methods Using AUTOLOAD</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>13.13. Coping with Circular Data Structures</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
