<HTML
><HEAD
>
<TITLE>Recipe 6.10. Speeding Up Interpolated Matches (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:34:24Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"><LINK
REL="prev"
HREF="ch06_10.htm"
TITLE="6.9. Matching Shell Globs as Regular Expressions"><LINK
REL="next"
HREF="ch06_12.htm"
TITLE="6.11. Testing for a Valid Pattern"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_10.htm"
TITLE="6.9. Matching Shell Globs as Regular Expressions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.9. Matching Shell Globs as Regular Expressions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"
>Chapter 6<BR>Pattern Matching</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_12.htm"
TITLE="6.11. Testing for a Valid Pattern"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.11. Testing for a Valid Pattern"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-42168"
>6.10. Speeding Up Interpolated Matches</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1139"
>Problem<A
CLASS="indexterm"
NAME="ch06-idx-1000007620-0"
></A
></A
></H3
><P
CLASS="para"
>You want your function or program to take one or more regular expressions as arguments, but doing so seems to run slower than using literals.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1145"
>Solution</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-1000007622-0"
></A
>To overcome this bottleneck, if you have only one pattern whose value won't change during the entire run of a program, store it in a string and use <CODE
CLASS="literal"
>/$pattern/o</CODE
>.</P
><PRE
CLASS="programlisting"
>while ($line = &lt;&gt;) {
    if ($line =~ /$pattern/o) {
        # do something
    }
}</PRE
><P
CLASS="para"
>If you have more than one pattern, however, that won't work. Use one of the three techniques outlined in the Discussion for a speed-up of an order of magnitude or so.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1163"
>Discussion</A
></H3
><P
CLASS="para"
>When Perl compiles a program, it converts patterns into an internal form. This conversion occurs at compile time for patterns without variables in them, but at run time for those that do contain variables. That means that interpolating variables into patterns, as in <CODE
CLASS="literal"
>/$pattern/</CODE
>, can slow your program down. This is particularly noticeable when <CODE
CLASS="literal"
>$pattern</CODE
> changes often.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>/o</CODE
> modifier is a promise from the script's author that the values of any variables interpolated into that pattern will not change &nbsp;-  or that if they do, Perl should disregard any such changes. Given such a promise, Perl need only interpolate the variable and compile the pattern the first time it encounters the match. But if the interpolated variable were to change, Perl wouldn't notice. Make sure to use it only on unchanging variables, or else wrong answers will result.</P
><P
CLASS="para"
>Using <CODE
CLASS="literal"
>/o</CODE
> on patterns without interpolated variables does not speed anything up. The <CODE
CLASS="literal"
>/o</CODE
> modifier is also of no help when you have an unknown number of regular expressions and need to check one or more strings against all of these patterns. Nor is it of any use when the interpolated variable is a function argument, since each call of the function gives the variable a new value.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch06_11.htm"
TITLE="popgrep1"
>Example 6.4</A
> is an example of the slow but straightforward technique for matching many patterns against many lines. The array <CODE
CLASS="literal"
>@popstates</CODE
> contains the standard two-letter abbreviations for some of the places in the heartland of North America where we normally refer to soft drinks as <I
CLASS="firstterm"
>pop</I
> (<I
CLASS="firstterm"
>soda</I
> to us means either plain soda water or else handmade delicacies from the soda fountain at the corner drugstore, preferably with ice cream). The goal is to print out any line of input that contains any of those places, matching them at word boundaries only. It doesn't use <CODE
CLASS="literal"
>/o</CODE
> because the variable that holds the pattern keeps changing.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch06-22028"
>Example 6.4: popgrep1</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# <A
CLASS="indexterm"
NAME="ch06-idx-1000008674-0"
></A
>popgrep1 - grep for abbreviations of places that say &quot;pop&quot;
# version 1: slow but obvious way
@popstates = qw(CO ON MI WI MN);
LINE: while (defined($line = &lt;&gt;)) {
    for $state (@popstates) {
        if ($line =~ /\b$state\b/) {
            print; next LINE;
       }
    }
}</PRE
></DIV
><P
CLASS="para"
>Such a direct, obvious, brute-force approach is also horribly slow because it has to recompile all patterns with each line of input. Three different ways of addressing this are described in this section. One builds a string of Perl code and <CODE
CLASS="literal"
>eval</CODE
>s it; one caches the internal representations of regular expressions in closures; and one uses the Regexp module from CPAN to hold compiled regular expressions.</P
><P
CLASS="para"
>The traditional way to get Perl to speed up a multiple match is to build up a string containing the code and <CODE
CLASS="literal"
>eval</CODE
> <CODE
CLASS="literal"
>&quot;$code&quot;</CODE
> it. <A
CLASS="xref"
HREF="ch06_11.htm"
TITLE="popgrep2"
>Example 6.5</A
> contains a version that uses this technique.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch06-36871"
>Example 6.5: popgrep2</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# <A
CLASS="indexterm"
NAME="ch06-idx-1000007797-0"
></A
>popgrep2 - grep for abbreviations of places that say &quot;pop&quot;
# version 2: eval strings; fast but hard to quote
@popstates = qw(CO ON MI WI MN);
$code = 'while (defined($line = &lt;&gt;)) {';
for $state (@popstates) {
    $code .= &quot;\tif (\$line =~ /\\b$state\\b/) { print \$line; next; }\n&quot;;
}
$code .= '}';
print &quot;CODE IS\n----\n$code\n----\n&quot; if 0;  # turn on to debug
eval $code;
die if $@;</PRE
></DIV
><P
CLASS="para"
>The <CODE
CLASS="literal"
>popgrep2</CODE
> program builds strings like this:</P
><PRE
CLASS="programlisting"
>while (defined($line = &lt;&gt;)) {
     if ($line =~ /\bCO\b/) { print $line; next; }
     if ($line =~ /\bON\b/) { print $line; next; }
     if ($line =~ /\bMI\b/) { print $line; next; }
     if ($line =~ /\bWI\b/) { print $line; next; }
     if ($line =~ /\bMN\b/) { print $line; next; }
}</PRE
><P
CLASS="para"
>As you see, those end up looking like constant strings to <CODE
CLASS="literal"
>eval</CODE
>. We put the entire loop and pattern match in the <CODE
CLASS="literal"
>eval</CODE
> text, too, which makes it run faster.</P
><P
CLASS="para"
>The worst thing about this <CODE
CLASS="literal"
>eval</CODE
> <CODE
CLASS="literal"
>&quot;STRING&quot;</CODE
> approach is that it's difficult to get the quoting and escaping right. The <CODE
CLASS="literal"
>dequote</CODE
> function from <A
CLASS="xref"
HREF="ch01_12.htm"
TITLE="Indenting Here Documents"
>Recipe 1.11</A
> can make it easier to read, but escaping variables whose use is delayed will still be an issue. Also, none of the strings can contain a slash, since that's what we're using as a delimiter for the <CODE
CLASS="literal"
>m//</CODE
> operator.</P
><P
CLASS="para"
>A solution to these problems is a subtle technique first developed by Jeffrey <A
CLASS="indexterm"
NAME="ch06-idx-1000007631-0"
></A
>Friedl. The key here is building an anonymous subroutine that caches the compiled patterns in the closure it creates. To do this, we <CODE
CLASS="literal"
>eval</CODE
> a string containing the definition of an anonymous subroutine to match any of the supplied patterns. Perl compiles the pattern once, when the subroutine is defined. The string is evaluated to give you comparatively quick matching ability. An explanation of the algorithm can be found at the end of the section "Regex Compilation, the /o Modifier, and Efficiency" in Chapter 7 of <EM
CLASS="emphasis"
>Mastering Regular Expressions</EM
>.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch06_11.htm"
TITLE="popgrep3"
>Example 6.6</A
> is a version of our pop grepper that uses that technique.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch06-35632"
>Example 6.6: popgrep3</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# <A
CLASS="indexterm"
NAME="ch06-idx-1000007799-0"
></A
>popgrep3 - grep for abbreviations of places that say &quot;pop&quot;
# version 3: use build_match_func algorithm
@popstates = qw(CO ON MI WI MN);
    $expr = join('||', map { &quot;m/\\b\$popstates[$_]\\b/o&quot; } 0..$#popstates);
$match_any = eval &quot;sub { $expr }&quot;;
die if $@;
while (&lt;&gt;) {
    print if &amp;$match_any;
}</PRE
></DIV
><P
CLASS="para"
>The string that gets evaluated ends up looking like this, modulo formatting:</P
><PRE
CLASS="programlisting"
>sub {
      m/\b$popstates[0]\b/o || m/\b$popstates[1]\b/o ||
      m/\b$popstates[2]\b/o || m/\b$popstates[3]\b/o ||
      m/\b$popstates[4]\b/o
  }</PRE
><P
CLASS="para"
>The reference to the <CODE
CLASS="literal"
>@popstates</CODE
> array is locked up inside the closure. Each one is different, so the <CODE
CLASS="literal"
>/o</CODE
> is safe here.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch06_11.htm"
TITLE="grepauth"
>Example 6.7</A
> is a generalized form of this technique showing how to create functions that return true if any of the patterns match or if all match.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch06-40846"
>Example 6.7: grepauth</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# <A
CLASS="indexterm"
NAME="ch06-idx-1000007801-0"
></A
>grepauth - print lines that mention both Tom and Nat

$multimatch = build_match_all(q/Tom/, q/Nat/);
while (&lt;&gt;) {
    print if &amp;$multimatch;
}
exit;

sub build_match_any { build_match_func('||', @_) }
sub build_match_all { build_match_func('&amp;&amp;', @_) }
sub build_match_func {
    my $condition = shift;
    my @pattern = @_;  # must be lexical variable, not dynamic one
    my $expr = join $condition =&gt; map { &quot;m/\$pattern[$_]/o&quot; } (0..$#pattern);
    my $match_func = eval &quot;sub { local \$_ = shift if \@_; $expr }&quot;;
    die if $@;  # propagate $@; this shouldn't happen!
    return $match_func;
}</PRE
></DIV
><P
CLASS="para"
>Using <CODE
CLASS="literal"
>eval</CODE
> <CODE
CLASS="literal"
>&quot;STRING&quot;</CODE
> on interpolated strings as we did in <EM
CLASS="emphasis"
>popgrep2</EM
> is a hack that happens to work. Using lexical variables that get bound up in a closure as in <EM
CLASS="emphasis"
>popgrep3</EM
> and the <CODE
CLASS="literal"
>build_match_*</CODE
> functions is deep enough magic that even Perl wizards stare at it a while before they believe in it. Of course, it still works whether they believe in it or not.</P
><P
CLASS="para"
>What you really need is some way to get Perl to compile each pattern once and let you directly refer to the compiled form later on. Such functionality is directly supported in the 5.005 release in the form of a <CODE
CLASS="literal"
>qr//</CODE
><A
CLASS="indexterm"
NAME="ch06-idx-1000008349-0"
></A
> regular-expression quoting operator. For prior releases, that's exactly what the experimental Regexp module from CPAN was designed for. Objects created by this module represent compiled regular expression patterns. Using the <CODE
CLASS="literal"
>match</CODE
> method on these objects matches the pattern against the string argument. Methods in the class exist for extracting backreferences, determining where pattern matched, and passing flags corresponding to modifiers like <CODE
CLASS="literal"
>/i</CODE
>.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch06_11.htm"
TITLE="popgrep4"
>Example 6.8</A
> is a version of our program that demonstrates a simple use of this module.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch06-36674"
>Example 6.8: popgrep4</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# <A
CLASS="indexterm"
NAME="ch06-idx-1000007803-0"
></A
>popgrep4 - grep for abbreviations of places that say &quot;pop&quot;
# version 4: use Regexp module
use Regexp;
@popstates = qw(CO ON MI WI MN);
@poppats   = map { Regexp-&gt;new( '\b' . $_ . '\b') } @popstates;
while (defined($line = &lt;&gt;)) {
    for $patobj (@poppats) {
        print $line if $patobj-&gt;match($line);
    }
}</PRE
></DIV
><P
CLASS="para"
>You might wonder about the comparative speeds of these approaches. When run against the 22,000 line text file (the Jargon File, to be exact), version 1 ran in 7.92 seconds, version 2 in merely 0.53 seconds, version 3 in 0.79 seconds, and version 4 in 1.74 seconds. The last technique is a lot easier to understand than the others, although it does run slightly slower than they do. It's also more flexible. <A
CLASS="indexterm"
NAME="ch06-idx-1000007627-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007627-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1353"
>See Also</A
></H3
><P
CLASS="para"
>Interpolation is explained in the "Scalar Value Constructors" section of <I
CLASS="filename"
>perldata</I
> (1), and in the <A
CLASS="olink"
HREF="../prog/ch02_03.htm"
>"String literals"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the <CODE
CLASS="literal"
>/o</CODE
> modifier in <I
CLASS="filename"
>perlre </I
>(1) and the <A
CLASS="olink"
HREF="../prog/ch02_04.htm"
>"Pattern Matching"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the "Regex Compilation, the /o Modifier, and Efficiency" section of Chapter 7 of <CITE
CLASS="citetitle"
>Mastering Regular Expressions</CITE
>; the documentation with the CPAN module Regexp</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_10.htm"
TITLE="6.9. Matching Shell Globs as Regular Expressions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.9. Matching Shell Globs as Regular Expressions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_12.htm"
TITLE="6.11. Testing for a Valid Pattern"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.11. Testing for a Valid Pattern"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.9. Matching Shell Globs as Regular Expressions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6.11. Testing for a Valid Pattern</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
