<HTML
><HEAD
>
<TITLE>Recipe 8.8. Reading a Particular Line in a File (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:38:44Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. File Contents"><LINK
REL="prev"
HREF="ch08_08.htm"
TITLE="8.7. Randomizing All Lines"><LINK
REL="next"
HREF="ch08_10.htm"
TITLE="8.9. Processing Variable-Length Text Fields"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_08.htm"
TITLE="8.7. Randomizing All Lines"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.7. Randomizing All Lines"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. File Contents"
>Chapter 8<BR>File Contents</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_10.htm"
TITLE="8.9. Processing Variable-Length Text Fields"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.9. Processing Variable-Length Text Fields"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch08-22659"
>8.8. Reading a Particular Line in a File</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-pgfId-702"
>Problem<A
CLASS="indexterm"
NAME="ch08-idx-1000004663-0"
></A
></A
></H3
><P
CLASS="para"
>You want to extract a single line from a file.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-pgfId-708"
>Solution</A
></H3
><P
CLASS="para"
>The simplest solution is to read the lines until you get to the one you want:</P
><PRE
CLASS="programlisting"
># looking for line number $DESIRED_LINE_NUMBER
$. = 0;
do { $LINE = &lt;HANDLE&gt; } until $. == $DESIRED_LINE_NUMBER || eof;</PRE
><P
CLASS="para"
>If you are going to be doing this a lot and the file fits into memory, read the file into an array:</P
><PRE
CLASS="programlisting"
>@lines = &lt;HANDLE&gt;;
$LINE = $lines[$DESIRED_LINE_NUMBER];</PRE
><P
CLASS="para"
>If you will be retrieving lines by number often and the file doesn't fit into memory, build a byte-address index to let you <CODE
CLASS="literal"
>seek</CODE
> directly to the start of the line:</P
><PRE
CLASS="programlisting"
># usage: build_index(*DATA_HANDLE, *INDEX_HANDLE)
sub build_index {
    my $data_file  = shift;
    my $index_file = shift;
    my $offset     = 0;

    while (&lt;$data_file&gt;) {
        print $index_file pack(&quot;N&quot;, $offset);
        $offset = tell($data_file);
    }
}

# usage: line_with_index(*DATA_HANDLE, *INDEX_HANDLE, $LINE_NUMBER)
# returns line or undef if LINE_NUMBER was out of range
sub line_with_index {
    my $data_file   = shift;
    my $index_file  = shift;
    my $line_number = shift;

    my $size;               # size of an index entry
    my $i_offset;           # offset into the index of the entry
    my $entry;              # index entry
    my $d_offset;           # offset into the data file

    $size = length(pack(&quot;N&quot;, 0));
    $i_offset = $size * ($line_number-1);
    seek($index_file, $i_offset, 0) or return;
    read($index_file, $entry, $size);
    $d_offset = unpack(&quot;N&quot;, $entry);
    seek($data_file, $d_offset, 0);
    return scalar(&lt;$data_file&gt;);
}

# usage:
open(FILE, &quot;&lt; $file&quot;)         or die &quot;Can't open $file for reading: $!\n&quot;;
open(INDEX, &quot;+&gt;$file.idx&quot;)
        or die &quot;Can't open $file.idx for read/write: $!\n&quot;;
build_index(*FILE, *INDEX);
$line = line_with_index(*FILE, *INDEX, $seeking);</PRE
><P
CLASS="para"
>If you have the DB_File module, its <CODE
CLASS="literal"
>DB_RECNO</CODE
><A
CLASS="indexterm"
NAME="ch08-idx-1000004664-0"
></A
> access method ties an array to a file, one line per array element:</P
><PRE
CLASS="programlisting"
>use DB_File;
use Fcntl;

$tie = tie(@lines, $FILE, &quot;DB_File&quot;, O_RDWR, 0666, $DB_RECNO) or die 
    &quot;Cannot open file $FILE: $!\n&quot;;
# extract it
$line = $lines[$sought-1];</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-pgfId-818"
>Discussion</A
></H3
><P
CLASS="para"
>Each strategy has different features, useful in different circumstances. The linear access approach is easy to write and best for short files. The index method gives quick two-step lookup, but requires that the index be pre-built, so it is best when the file being indexed doesn't change often compared to the number of lookups. The DB_File mechanism has some initial overhead, but subsequent accesses are much faster than with linear access, so use it for long files that are accessed more than once and are accessed out of order.</P
><P
CLASS="para"
>It is important to know whether you're counting lines from 0 or 1. The <CODE
CLASS="literal"
>$.</CODE
> variable is 1 after the first line is read, so count from 1 when using linear access. The index mechanism uses lots of offsets, so count from 0. DB_File treats the file's records as an array indexed from 0, so count lines from 0.</P
><P
CLASS="para"
>Here are three different implementations of the same program, <EM
CLASS="emphasis"
>print_line</EM
>. The program takes two arguments, a filename, and a line number to extract.</P
><P
CLASS="para"
>The version in <A
CLASS="xref"
HREF="ch08_09.htm"
TITLE="print_line-v1"
>Example 8.1</A
> simply reads lines until it finds the one it's looking for.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch08-41197"
>Example 8.1: print_line-v1</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# <A
CLASS="indexterm"
NAME="ch08-idx-1000004824-0"
></A
>print_line-v1 - linear style

@ARGV == 2 or die &quot;usage: print_line FILENAME LINE_NUMBER\n&quot;;

($filename, $line_number) = @ARGV;
open(INFILE, &quot;&lt; $filename&quot;) or die &quot;Can't open $filename for reading: $!\n&quot;;
while (&lt;INFILE&gt;) {
    $line = $_;
    last if $. == $line_number;
}
if ($. != $line_number) {
    die &quot;Didn't find line $line_number in $filename\n&quot;;
}
print;</PRE
></DIV
><P
CLASS="para"
>The index version in <A
CLASS="xref"
HREF="ch08_09.htm"
TITLE="print_line-v2"
>Example 8.2</A
> must build an index. For many lookups, you could build the index once and then use it for all subsequent lookups:</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch08-19472"
>Example 8.2: print_line-v2</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# print_line-v2 - index style
# build_index and line_with_index from above
@ARGV == 2 or
    die &quot;usage: print_line FILENAME LINE_NUMBER&quot;;

($filename, $line_number) = @ARGV;
open(ORIG, &quot;&lt; $filename&quot;) 
        or die &quot;Can't open $filename for reading: $!&quot;;

# open the index and build it if necessary
# there's a race condition here: two copies of this
# program can notice there's no index for the file and
# try to build one.  This would be easily solved with
# locking
$indexname = &quot;$filename.index&quot;;
sysopen(IDX, $indexname, O_CREAT|O_RDWR)
         or die &quot;Can't open $indexname for read/write: $!&quot;;
build_index(*ORIG, *IDX) if -z $indexname;  # XXX: race unless lock

$line = line_with_index(*ORIG, *IDX, $line_number);
die &quot;Didn't find line $line_number in $filename&quot; unless defined $line;
print $line;</PRE
></DIV
><P
CLASS="para"
>The DB_File version in <A
CLASS="xref"
HREF="ch08_09.htm"
TITLE="print_line-v3"
>Example 8.3</A
> is indistinguishable from magic.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch08-23822"
>Example 8.3: print_line-v3</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# print_line-v3 - DB_File style
use DB_File;
use Fcntl;

@ARGV == 2 or
    die &quot;usage: print_line FILENAME LINE_NUMBER\n&quot;;

($filename, $line_number) = @ARGV;
$tie = tie(@lines, &quot;DB_File&quot;, $filename, O_RDWR, 0666, $DB_RECNO)
        or die &quot;Cannot open file $filename: $!\n&quot;;

unless ($line_number &lt; $tie-&gt;length) {
    die &quot;Didn't find line $line_number in $filename\n&quot;
}

print $lines[$line_number-1];                        # easy, eh?<A
CLASS="indexterm"
NAME="ch08-idx-1000004666-0"
></A
></PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-pgfId-944"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the standard DB_File module (also in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <CITE
CLASS="citetitle"
>Programming Perl </CITE
>); the <CODE
CLASS="literal"
>tie</CODE
> function in <I
CLASS="filename"
>perlfunc </I
>(1) and in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the entry on <CODE
CLASS="literal"
>$.</CODE
> in <I
CLASS="filename"
>perlvar  </I
>(1) and in the "Special Variables" section of Chatper 2 of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_08.htm"
TITLE="8.7. Randomizing All Lines"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.7. Randomizing All Lines"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_10.htm"
TITLE="8.9. Processing Variable-Length Text Fields"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.9. Processing Variable-Length Text Fields"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.7. Randomizing All Lines</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>8.9. Processing Variable-Length Text Fields</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
