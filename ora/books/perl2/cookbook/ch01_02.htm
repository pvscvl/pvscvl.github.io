<HTML
><HEAD
>
<TITLE>Recipe 1.1. Accessing Substrings (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:28:42Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"><LINK
REL="prev"
HREF="ch01_01.htm"
TITLE="1.0. Introduction"><LINK
REL="next"
HREF="ch01_03.htm"
TITLE="1.2. Establishing a Default Value"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_01.htm"
TITLE="1.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"
>Chapter 1<BR>Strings</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_03.htm"
TITLE="1.2. Establishing a Default Value"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.2. Establishing a Default Value"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch01-11736"
>1.1. Accessing Substrings</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-99"
>Problem<A
CLASS="indexterm"
NAME="ch01-idx-1000010134-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010134-1"
></A
></A
></H3
><P
CLASS="para"
>You want to access or modify just a portion of a string, not the whole thing. For instance, you've read a fixed-width record and want to extract the individual fields.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-105"
>Solution</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>substr</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010135-0"
></A
> function lets you read from and write to bits of the string.</P
><PRE
CLASS="programlisting"
>$value = substr($string, $offset, $count);
$value = substr($string, $offset);
    
substr($string, $offset, $count) = $newstring;
substr($string, $offset)         = $newtail;</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>unpack</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010136-0"
></A
> function gives only read access, but is faster when you have many substrings to extract.</P
><PRE
CLASS="programlisting"
># get a 5-byte string, skip 3, then grab 2 8-byte strings, then the rest
($leading, $s1, $s2, $trailing) =
    unpack(&quot;A5 x3 A8 A8 A*&quot;, $data);

# split at five byte boundaries
@fivers = unpack(&quot;A5&quot; x (length($string)/5), $string);

# chop string into individual characters
@chars  = unpack(&quot;A1&quot; x length($string), $string);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-141"
>Discussion</A
></H3
><P
CLASS="para"
>Unlike many other languages that represent strings as arrays of bytes (or characters), in Perl, strings are a basic data type. This means that you must use functions like <CODE
CLASS="literal"
>unpack</CODE
> or <CODE
CLASS="literal"
>substr</CODE
> to access individual characters or a portion of the string.</P
><P
CLASS="para"
>The offset argument to <CODE
CLASS="literal"
>substr</CODE
> indicates the start of the substring you're interested in, counting from the front if positive and from the end if negative. If offset is 0, the substring starts at the beginning. The count argument is the length of the substring.</P
><PRE
CLASS="programlisting"
>$string = &quot;This is what you have&quot;;
#         +012345678901234567890  Indexing forwards  (left to right)
#          109876543210987654321- Indexing backwards (right to left)
#           note that 0 means 10 or 20, etc. above

$first  = substr($string, 0, 1);  # &quot;T&quot;
$start  = substr($string, 5, 2);  # &quot;is&quot;
$rest   = substr($string, 13);    # &quot;you have&quot;
$last   = substr($string, -1);    # &quot;e&quot;
$end    = substr($string, -4);    # &quot;have&quot;
$piece  = substr($string, -8, 3); # &quot;you&quot;</PRE
><P
CLASS="para"
>You can do more than just look at parts of the string with <CODE
CLASS="literal"
>substr</CODE
>; you can actually change them. That's because <CODE
CLASS="literal"
>substr</CODE
> is a particularly odd kind of function &nbsp;- an <EM
CLASS="emphasis"
>lvaluable</EM
><A
CLASS="indexterm"
NAME="ch01-idx-1000010151-0"
></A
> one, that is, a function that may itself be assigned a value. (For the record, the others are <CODE
CLASS="literal"
>vec</CODE
>, <CODE
CLASS="literal"
>pos</CODE
>, and as of the 5.004 release, <CODE
CLASS="literal"
>keys</CODE
>. If you squint, <CODE
CLASS="literal"
>local</CODE
> and <CODE
CLASS="literal"
>my</CODE
> can also be viewed as lvaluable functions.)</P
><PRE
CLASS="programlisting"
>$string = &quot;This is what you have&quot;;
print $string;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>This is what you have</I
></CODE
></B
></CODE
>
substr($string, 5, 2) = &quot;wasn't&quot;; # change &quot;is&quot; to &quot;wasn't&quot;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>This wasn't what you have</I
></CODE
></B
></CODE
>
substr($string, -12)  = &quot;ondrous&quot;;# &quot;This wasn't wondrous&quot;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>This wasn't wondrous</I
></CODE
></B
></CODE
>
substr($string, 0, 1) = &quot;&quot;;       # delete first character
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>his wasn't wondrous</I
></CODE
></B
></CODE
>
substr($string, -10)  = &quot;&quot;;       # delete last 10 characters
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>his wasn'</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>You can use the <CODE
CLASS="literal"
>=~</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010150-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010150-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010150-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010150-3"
></A
> operator and the <CODE
CLASS="literal"
>s///</CODE
>, <CODE
CLASS="literal"
>m//</CODE
>, or <CODE
CLASS="literal"
>tr///</CODE
> operators in conjunction with substr to make them affect only that portion of the string.</P
><PRE
CLASS="programlisting"
># you can test substrings with =~
if (substr($string, -10) =~ /pattern/) {
    print &quot;Pattern matches in last 10 characters\n&quot;;
}

# substitute &quot;at&quot; for &quot;is&quot;, restricted to first five characters
substr($string, 0, 5) =~ s/is/at/g;</PRE
><P
CLASS="para"
>You can even swap values by using several <CODE
CLASS="literal"
>substr</CODE
>s on each side of an assignment:</P
><PRE
CLASS="programlisting"
># exchange the first and last letters in a string
$a = &quot;make a hat&quot;;
(substr($a,0,1), substr($a,-1)) = (substr($a,-1), substr($a,0,1));
print $a;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>take a ham</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>Although <CODE
CLASS="literal"
>unpack</CODE
> is not lvaluable, it is considerably faster than <CODE
CLASS="literal"
>substr</CODE
> when you extract numerous values at once. It doesn't directly support offsets as <CODE
CLASS="literal"
>substr</CODE
> does. Instead, it uses lowercase &quot;<CODE
CLASS="literal"
>x</CODE
>&quot; with a count to skip forward some number of bytes and an uppercase &quot;<CODE
CLASS="literal"
>X</CODE
>&quot; with a count to skip backward some number of bytes.</P
><PRE
CLASS="programlisting"
># extract column with unpack
$a = &quot;To be or not to be&quot;;
$b = unpack(&quot;x6 A6&quot;, $a);  # skip 6, grab 6
print $b;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>or not</I
></CODE
></B
></CODE
>

($b, $c) = unpack(&quot;x6 A2 X5 A2&quot;, $a); # forward 6, grab 2; backward 5, grab 2
print &quot;$b\n$c\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>or</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>be</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>Sometimes you prefer to think of your data as being cut up at specific <A
CLASS="indexterm"
NAME="ch01-idx-1000010152-0"
></A
>columns. For example, you might want to place cuts right before positions 8, 14, 20, 26, and 30. Those are the column numbers where each field begins. Although you could calculate that the proper <CODE
CLASS="literal"
>unpack</CODE
> format is &quot;<CODE
CLASS="literal"
>A7</CODE
> <CODE
CLASS="literal"
>A6</CODE
> <CODE
CLASS="literal"
>A6</CODE
> <CODE
CLASS="literal"
>A6</CODE
> <CODE
CLASS="literal"
>A4</CODE
> <CODE
CLASS="literal"
>A*</CODE
>&quot;, this is too much mental strain for the virtuously lazy Perl programmer. Let Perl figure it out for you. Use the <CODE
CLASS="literal"
>cut2fmt</CODE
> function below:</P
><PRE
CLASS="programlisting"
>sub cut2fmt {
    my(@positions) = @_;
    my $template   = '';
    my $lastpos    = 1;
    foreach $place (@positions) {
        $template .= &quot;A&quot; . ($place - $lastpos) . &quot; &quot;;
        $lastpos   = $place;
    }
    $template .= &quot;A*&quot;;
    return $template;
}

$fmt = cut2fmt(8, 14, 20, 26, 30);
print &quot;$fmt\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>A7 A6 A6 A6 A4 A*</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>The powerful <CODE
CLASS="literal"
>unpack</CODE
> function goes far beyond mere text processing. It's the gateway between text and binary data.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-279"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>unpack</CODE
> and <CODE
CLASS="literal"
>substr</CODE
> functions in <EM
CLASS="emphasis"
>perlfunc </EM
>(1) and <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the <EM
CLASS="emphasis"
>cut2fmt</EM
> subroutine of <A
CLASS="xref"
HREF="ch01_19.htm"
TITLE="Program: psgrep"
>Recipe 1.18</A
>; the binary use of <CODE
CLASS="literal"
>unpack</CODE
> in <A
CLASS="xref"
HREF="ch08_19.htm"
TITLE="Program: tailwtmp"
>Recipe 8.18</A
> <A
CLASS="indexterm"
NAME="ch01-idx-1000010145-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010145-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010145-2"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_01.htm"
TITLE="1.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_03.htm"
TITLE="1.2. Establishing a Default Value"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.2. Establishing a Default Value"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.0. Introduction</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.2. Establishing a Default Value</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
