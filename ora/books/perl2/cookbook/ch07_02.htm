<HTML
><HEAD
>
<TITLE>Recipe 7.1. Opening a File (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:42Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. File Access"><LINK
REL="prev"
HREF="ch07_01.htm"
TITLE="7.0. Introduction"><LINK
REL="next"
HREF="ch07_03.htm"
TITLE="7.2. Opening Files with Unusual Filenames"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_01.htm"
TITLE="7.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. File Access"
>Chapter 7<BR>File Access</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_03.htm"
TITLE="7.2. Opening Files with Unusual Filenames"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2. Opening Files with Unusual Filenames"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch07-38018"
>7.1. Opening a File</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-206"
>Problem</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch07-idx-1000009579-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009579-1"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009579-2"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009579-3"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009579-4"
></A
>You want to read or write to a filename from Perl.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-212"
>Solution</A
></H3
><P
CLASS="para"
>Use <CODE
CLASS="literal"
>open</CODE
> for convenience, <CODE
CLASS="literal"
>sysopen</CODE
> for precision, or the IO::File module to get an anonymous filehandle.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>open</CODE
> function takes two arguments: the filehandle to open and one string containing the filename and special characters indicating how to open it (the mode):</P
><PRE
CLASS="programlisting"
>open(SOURCE, &quot;&lt; $path&quot;)
    or die &quot;Couldn't open $path for reading: $!\n&quot;;

open(SINK, &quot;&gt; $path&quot;)
    or die &quot;Couldn't open $path for writing: $!\n&quot;;</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>sysopen</CODE
> function takes three or four arguments: filehandle, filename, mode, and an optional permissions value. The mode is a number constructed from constants provided by the Fcntl module:</P
><PRE
CLASS="programlisting"
>use Fcntl;

sysopen(SOURCE, $path, O_RDONLY)
    or die &quot;Couldn't open $path for reading: $!\n&quot;;

sysopen(SINK, $path, O_WRONLY)
    or die &quot;Couldn't open $path for writing: $!\n&quot;;</PRE
><P
CLASS="para"
>The IO::File module's <CODE
CLASS="literal"
>new</CODE
> method accepts both <CODE
CLASS="literal"
>open</CODE
> and <CODE
CLASS="literal"
>sysopen</CODE
> style arguments and returns an anonymous filehandle. The <CODE
CLASS="literal"
>new</CODE
> method also accepts a mode in the style of <EM
CLASS="emphasis"
>fopen </EM
>(3):</P
><PRE
CLASS="programlisting"
>use IO::File;

# like Perl's open
$fh = IO::File-&gt;new(&quot;&gt; $filename&quot;)
    or die &quot;Couldn't open $filename for writing: $!\n&quot;;

# like Perl's sysopen
$fh = IO::File-&gt;new($filename, O_WRONLY|O_CREAT)
    or die &quot;Couldn't open $filename for writing: $!\n&quot;;

# like stdio's fopen(3)
$fh = IO::File-&gt;new($filename, &quot;r+&quot;)
    or die &quot;Couldn't open $filename for read and write: $!\n&quot;;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-274"
>Discussion</A
></H3
><P
CLASS="para"
>All input and output goes through filehandles, whether filehandles are mentioned or not. Filehandles aren't exclusively connected to files &nbsp;-  they're also used to communicate with other programs (see <A
CLASS="xref"
HREF="ch16_01.htm"
TITLE="Process Management and Communication"
>Chapter 16, <CITE
CLASS="chapter"
>Process Management and Communication</CITE
></A
>) and for network communication (see <A
CLASS="xref"
HREF="ch17_01.htm"
TITLE="Sockets"
>Chapter 17, <CITE
CLASS="chapter"
>Sockets</CITE
></A
>). The <CODE
CLASS="literal"
>open</CODE
> function can also be used to manipulate file descriptors, discussed in <A
CLASS="xref"
HREF="ch07_20.htm"
TITLE="Opening and Closing File Descriptors by Number"
>Recipe 7.19</A
>.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>open</CODE
> function quickly and conveniently solves the problem of associating a filehandle with a file. It permits a shorthand for common modes (reading, writing, reading and writing, appending) passed in with the filename. It doesn't let you control the permission that files are created with or even whether files are created. For this level of control, you need <CODE
CLASS="literal"
>sysopen</CODE
>, which uses constants provided by the Fcntl module to control individual settings like read, write, create, and truncate.</P
><P
CLASS="para"
>Most programmers meet <CODE
CLASS="literal"
>open</CODE
> long before they meet <CODE
CLASS="literal"
>sysopen</CODE
>. The following table shows how <CODE
CLASS="literal"
>open</CODE
> modes (the <EM
CLASS="emphasis"
>Filename</EM
> column) correspond to <CODE
CLASS="literal"
>sysopen</CODE
> constants (<EM
CLASS="emphasis"
>O_  flags</EM
>) and to the <EM
CLASS="emphasis"
>fopen (3)</EM
> strings that <CODE
CLASS="literal"
>IO::File-&gt;new</CODE
> can take (<EM
CLASS="emphasis"
>Char</EM
>). <EM
CLASS="emphasis"
>Read</EM
> and <EM
CLASS="emphasis"
>Write</EM
> indicate that the filehandle may be read from or written to. <EM
CLASS="emphasis"
>Append</EM
> means no matter where you are in the file, output goes to the end of the file (on most systems). <EM
CLASS="emphasis"
>Create</EM
> indicates whether the <CODE
CLASS="literal"
>open</CODE
> statement creates a file if one having the given name doesn't already exist. <EM
CLASS="emphasis"
>Trunc</EM
> indicates <CODE
CLASS="literal"
>open</CODE
> will clobber any existing data if the file already exists.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Filename</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Read</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Write</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Append</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Create</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Trunc</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>O_flags</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Char</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&lt; <I
CLASS="filename"
>file</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>no</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>no</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>no</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>no</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>RDONLY</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>&quot;r&quot;</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&gt; <I
CLASS="filename"
>file</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>no</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>no</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>WRONLY TRUNC CREAT</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>&quot;w&quot;</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&gt;&gt; <I
CLASS="filename"
>file</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>no</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>no</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>WRONLY APPEND CREAT</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>&quot;a&quot;</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>+&lt; <I
CLASS="filename"
>file</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>no</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>no</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>no</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>RDWR</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>&quot;r+&quot;</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>+&gt; <I
CLASS="filename"
>file</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>no</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>RDWR TRUNC CREAT</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>&quot;w+&quot;</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>+&gt;&gt; <I
CLASS="filename"
>file</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>no</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>RDWR APPEND CREAT</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>&quot;a+&quot; </CODE
></P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Here's a tip: you almost never want to use +&gt; or +&gt;&gt;. The first clobbers your file before you can read it, and the second one is confusing because your read pointer can be anywhere, but on many systems, the writer always jumps to the end of the file.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>sysopen</CODE
> function takes three or four arguments:</P
><PRE
CLASS="programlisting"
>sysopen(FILEHANDLE, $name, $flags)         or die &quot;Can't open $name : $!&quot;;
sysopen(FILEHANDLE, $name, $flags, $perms) or die &quot;Can't open $name : $!&quot;;</PRE
><P
CLASS="para"
><CODE
CLASS="literal"
>$name</CODE
> is the name of the file, without any &lt; or <CODE
CLASS="literal"
>+</CODE
> funny business. <CODE
CLASS="literal"
>$flags</CODE
> is a number, formed by ORing together separate mode values for <CODE
CLASS="literal"
>O_CREAT</CODE
><A
CLASS="indexterm"
NAME="ch07-idx-1000009586-0"
></A
>, <CODE
CLASS="literal"
>O_WRONLY</CODE
>, <CODE
CLASS="literal"
>O_TRUNC</CODE
>, etc. The exact availability of <CODE
CLASS="literal"
>O_*</CODE
> constants depends on your operating system, so consult the online documentation for this (usually <I
CLASS="filename"
>open </I
>(2), but not always), or look in <EM
CLASS="emphasis"
>/usr/include/fcntl.h</EM
>. Common ones are:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>O_RDONLY</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Read only</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>O_WRONLY</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Write only</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>O_RDWR</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Read and write</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>O_CREAT</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Create the file if it doesn't exist</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>O_EXCL</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Fail if the file already exists</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>O_APPEND</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Append to the file</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>O_TRUNC</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Truncate the file</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>O_NONBLOCK</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Non-blocking access</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Less common <CODE
CLASS="literal"
>O_*</CODE
> flags sometimes available include <CODE
CLASS="literal"
>O_SHLOCK</CODE
>, <CODE
CLASS="literal"
>O_EXLOCK</CODE
>, <CODE
CLASS="literal"
>O_BINARY</CODE
>, <CODE
CLASS="literal"
>O_NOCTTY</CODE
>, and <CODE
CLASS="literal"
>O_SYNC</CODE
>. Consult your <I
CLASS="filename"
>open </I
>(2) manpage or its local equivalent for details.</P
><P
CLASS="para"
>If you omit the <CODE
CLASS="literal"
>$perms</CODE
> argument to <CODE
CLASS="literal"
>sysopen</CODE
>, Perl uses the octal value <CODE
CLASS="literal"
>0666</CODE
>. These permissions values need to be in octal and are modified by your process's current <CODE
CLASS="literal"
>umask</CODE
>. A <CODE
CLASS="literal"
>umask</CODE
><A
CLASS="indexterm"
NAME="ch07-idx-1000009585-0"
></A
> value is a number representing disabled permissions bits &nbsp;-  if your <CODE
CLASS="literal"
>umask</CODE
> were 027 (group can't write; others can't read, write, or execute), then passing <CODE
CLASS="literal"
>sysopen</CODE
> 0666 would create a file with mode 0640 (mathematically: <CODE
CLASS="literal"
>0666</CODE
> <CODE
CLASS="literal"
>&amp;~</CODE
> <CODE
CLASS="literal"
>027</CODE
> is 0640).</P
><P
CLASS="para"
>If <CODE
CLASS="literal"
>umask</CODE
> seems confusing, here's some advice: supply a creation mode of 0666 for regular files and one of 0777 for directories and executable files. This gives users a choice: if they want protected files, they can choose process umasks of 022, 027, or even the particularly antisocial mask of 077. Programs should rarely if ever make policy decisions better left to the user. One exception is when writing files that should be kept private: mail files, web browser cookies, <EM
CLASS="emphasis"
>.rhosts</EM
> files, and so on. In short, seldom if ever use 0644 as argument to <CODE
CLASS="literal"
>sysopen</CODE
> because that takes away the user's option to have a more permissive umask.</P
><P
CLASS="para"
>Here are examples of <CODE
CLASS="literal"
>open</CODE
> and <CODE
CLASS="literal"
>sysopen</CODE
> in action.</P
><P
CLASS="para"
>To open file for reading:</P
><PRE
CLASS="programlisting"
>open(FH, &quot;&lt; $path&quot;)                                 or die $!;
sysopen(FH, $path, O_RDONLY)                        or die $!;</PRE
><P
CLASS="para"
>To open file for writing, create new file if needed, or else truncate old file:</P
><PRE
CLASS="programlisting"
>open(FH, &quot;&gt; $path&quot;)                                 or die $!;
sysopen(FH, $path, O_WRONLY|O_TRUNC|O_CREAT)        or die $!;
sysopen(FH, $path, O_WRONLY|O_TRUNC|O_CREAT, 0600)  or die $!;</PRE
><P
CLASS="para"
>To open file for writing, create new file, file must not exist:</P
><PRE
CLASS="programlisting"
>sysopen(FH, $path, O_WRONLY|O_EXCL|O_CREAT)         or die $!;
sysopen(FH, $path, O_WRONLY|O_EXCL|O_CREAT, 0600)   or die $!;</PRE
><P
CLASS="para"
>To open file for appending, create if necessary:</P
><PRE
CLASS="programlisting"
>open(FH, &quot;&gt;&gt; $path&quot;)                                or die $!;
sysopen(FH, $path, O_WRONLY|O_APPEND|O_CREAT)       or die $!;
sysopen(FH, $path, O_WRONLY|O_APPEND|O_CREAT, 0600) or die $!;</PRE
><P
CLASS="para"
>To open file for appending, file must exist:</P
><PRE
CLASS="programlisting"
>sysopen(FH, $path, O_WRONLY|O_APPEND)               or die $!;</PRE
><P
CLASS="para"
>To open file for update, file must exist:</P
><PRE
CLASS="programlisting"
>open(FH, &quot;+&lt; $path&quot;)                                or die $!;
sysopen(FH, $path, O_RDWR)                          or die $!;</PRE
><P
CLASS="para"
>To open file for update, create file if necessary:</P
><PRE
CLASS="programlisting"
>sysopen(FH, $path, O_RDWR|O_CREAT)                  or die $!;
sysopen(FH, $path, O_RDWR|O_CREAT, 0600)            or die $!;</PRE
><P
CLASS="para"
>To open file for update, file must not exist:</P
><PRE
CLASS="programlisting"
>sysopen(FH, $path, O_RDWR|O_EXCL|O_CREAT)           or die $!;
sysopen(FH, $path, O_RDWR|O_EXCL|O_CREAT, 0600)     or die $!;<A
CLASS="indexterm"
NAME="ch07-idx-1000009581-0"
></A
></PRE
><P
CLASS="para"
>We demonstrate using a creation mask of 0600 here only to show how to create a private file. The argument is normally omitted.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-372"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>open</CODE
>, <CODE
CLASS="literal"
>sysopen</CODE
>, and <CODE
CLASS="literal"
>umask</CODE
> functions in <I
CLASS="filename"
>perlfunc </I
>(1) and <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the documentation for the standard IO::File and Fcntl modules (also in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>); your system's <I
CLASS="filename"
>open </I
>(2), <I
CLASS="filename"
>fopen </I
>(3), and <I
CLASS="filename"
>umask </I
>(2) manpages; <A
CLASS="xref"
HREF="ch07_03.htm"
TITLE="Opening Files with Unusual Filenames"
>Recipe 7.2</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_01.htm"
TITLE="7.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_03.htm"
TITLE="7.2. Opening Files with Unusual Filenames"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2. Opening Files with Unusual Filenames"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.0. Introduction</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2. Opening Files with Unusual Filenames</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
