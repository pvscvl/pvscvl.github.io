<HTML
><HEAD
>
<TITLE>Recipe 10.1. Accessing Subroutine Arguments (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:39:35Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. Subroutines"><LINK
REL="prev"
HREF="ch10_01.htm"
TITLE="10.0. Introduction"><LINK
REL="next"
HREF="ch10_03.htm"
TITLE="10.2. Making Variables Private to a Function"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_01.htm"
TITLE="10.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch10_01.htm"
TITLE="10. Subroutines"
>Chapter 10<BR>Subroutines</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_03.htm"
TITLE="10.2. Making Variables Private to a Function"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.2. Making Variables Private to a Function"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch10-35380"
>10.1. Accessing Subroutine Arguments</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-74"
>Problem<A
CLASS="indexterm"
NAME="ch10-idx-1000004632-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004632-1"
></A
></A
></H3
><P
CLASS="para"
>You have written a function and want to use the arguments supplied by its caller.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-80"
>Solution</A
></H3
><P
CLASS="para"
>All values passed as arguments to a function are in the special array <CODE
CLASS="literal"
>@_</CODE
><A
CLASS="indexterm"
NAME="ch10-idx-1000004633-0"
></A
>. Thus, the first argument to the function is in <CODE
CLASS="literal"
>$_[0]</CODE
>, the second is in <CODE
CLASS="literal"
>$_[1]</CODE
>, and so on. The number of arguments is therefore <CODE
CLASS="literal"
>scalar(@_)</CODE
>.</P
><P
CLASS="para"
>For example:</P
><PRE
CLASS="programlisting"
>sub hypotenuse {
    return sqrt( ($_[0] ** 2) + ($_[1] ** 2) );
}

$diag = hypotenuse(3,4);  # $diag is 5</PRE
><P
CLASS="para"
>Your subroutines will almost always start by copying arguments into named private variables for safer and more convenient access:</P
><PRE
CLASS="programlisting"
>sub hypotenuse {
    my ($side1, $side2) = @_;
    return sqrt( ($side1 ** 2) + ($side2 ** 2) );
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-108"
>Discussion</A
></H3
><P
CLASS="para"
>It's been said that programming has only three nice numbers: zero, one, and however many you please. Perl's subroutine mechanism was designed to facilitate writing functions with as many &nbsp;-  or as few &nbsp;-  elements in the parameter and return lists as you wish. All incoming parameters appear as separate scalar values in the special array <CODE
CLASS="literal"
>@_</CODE
> , which is automatically local to each function (see <A
CLASS="xref"
HREF="ch10_14.htm"
TITLE="Saving Global Values"
>Recipe 10.13</A
>). To return a value from a subroutine, use the <CODE
CLASS="literal"
>return</CODE
> statement with an argument. If there is no <CODE
CLASS="literal"
>return</CODE
> statement, the return value is the result of the last evaluated expression.</P
><P
CLASS="para"
>Here are some sample calls to the <CODE
CLASS="literal"
>hypotenuse</CODE
> function defined in the Solution:</P
><PRE
CLASS="programlisting"
>print hypotenuse(3, 4), &quot;\n&quot;;               # prints 5

@a = (3, 4);
print hypotenuse(@a), &quot;\n&quot;;                 # prints 5</PRE
><P
CLASS="para"
>If you look at the arguments used in the second call to <CODE
CLASS="literal"
>hypotenuse</CODE
>, it might appear that only one argument was passed: the array <CODE
CLASS="literal"
>@a</CODE
>. This isn't what happens &nbsp;-  the elements of <CODE
CLASS="literal"
>@a</CODE
> are copied into the <CODE
CLASS="literal"
>@_</CODE
> array separately. Similarly, if we called a function with <CODE
CLASS="literal"
>(@a,</CODE
> <CODE
CLASS="literal"
>@b)</CODE
>, we'd be giving it all the arguments in both arrays. This is the same principle of flattened lists at work as when we say:</P
><PRE
CLASS="programlisting"
>@both = (@men, @women);</PRE
><P
CLASS="para"
>The scalars in <CODE
CLASS="literal"
>@_</CODE
> are implicit aliases for the ones passed in, not copies. That means changing the elements of <CODE
CLASS="literal"
>@_</CODE
> in a subroutine changes the values in the subroutine's caller. This is a holdover from before Perl had proper references.</P
><P
CLASS="para"
>So, we can write functions that leave their arguments intact, by copying the arguments to private variables like this:</P
><PRE
CLASS="programlisting"
>@nums = (1.4, 3.5, 6.7);
@ints = int_all(@nums);        # @nums unchanged
sub int_all {
    my @retlist = @_;          # make safe copy for return
    for my $n (@retlist) { $n = int($n) } 
    return @retlist;
} </PRE
><P
CLASS="para"
>We can also write functions that change their caller's variables:</P
><PRE
CLASS="programlisting"
>@nums = (1.4, 3.5, 6.7);
trunc_em(@nums);               # @nums now (1,3,6)
sub trunc_em {
    for (@_) { $_ = int($_) }  # truncate each argument
} </PRE
><P
CLASS="para"
>Don't pass constants to this kind of function, as in <CODE
CLASS="literal"
>trunc_em(1.4,</CODE
> <CODE
CLASS="literal"
>3.5,</CODE
> <CODE
CLASS="literal"
>6.7)</CODE
>. If you try, you'll get a run-time exception saying <CODE
CLASS="literal"
>Modification</CODE
> <CODE
CLASS="literal"
>of</CODE
> <CODE
CLASS="literal"
>a</CODE
> <CODE
CLASS="literal"
>read-only</CODE
> <CODE
CLASS="literal"
>value</CODE
> <CODE
CLASS="literal"
>attempted</CODE
> <CODE
CLASS="literal"
>at</CODE
> <CODE
CLASS="literal"
>...</CODE
>.</P
><P
CLASS="para"
>The built-in functions <CODE
CLASS="literal"
>chop</CODE
> and <CODE
CLASS="literal"
>chomp</CODE
> work like this, modifying their caller's variables and returning the character(s) removed. People are used to such functions returning the changed values, so they often write things like:</P
><PRE
CLASS="programlisting"
>$line = chomp(&lt;&gt;);                  # WRONG</PRE
><P
CLASS="para"
>until they get the hang of how it works. Given this vast potential for confusion, you might want to think twice before modifying <CODE
CLASS="literal"
>@</CODE
>_ in your <CODE
CLASS="literal"
></CODE
><A
CLASS="indexterm"
NAME="ch10-idx-1000004644-0"
></A
>subroutines.<A
CLASS="indexterm"
NAME="ch10-idx-1000004635-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004635-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-168"
>See Also</A
></H3
><P
CLASS="para"
>The section on <A
CLASS="olink"
HREF="../prog/ch02_07.htm"
>"Subroutines"</A
> in <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and <I
CLASS="filename"
>perlsub </I
>(1)</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_01.htm"
TITLE="10.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_03.htm"
TITLE="10.2. Making Variables Private to a Function"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.2. Making Variables Private to a Function"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.0. Introduction</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>10.2. Making Variables Private to a Function</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
