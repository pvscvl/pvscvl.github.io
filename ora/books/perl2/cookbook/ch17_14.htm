<HTML
><HEAD
>
<TITLE>Recipe 17.13. Non-Forking Servers (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:44:42Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"><LINK
REL="prev"
HREF="ch17_13.htm"
TITLE="17.12. Pre-Forking Servers"><LINK
REL="next"
HREF="ch17_15.htm"
TITLE="17.14. Writing a Multi-Homed Server"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_13.htm"
TITLE="17.12. Pre-Forking Servers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.12. Pre-Forking Servers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"
>Chapter 17<BR>Sockets</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_15.htm"
TITLE="17.14. Writing a Multi-Homed Server"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.14. Writing a Multi-Homed Server"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch17-25596"
>17.13. Non-Forking Servers</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1524"
>Problem<A
CLASS="indexterm"
NAME="ch17-idx-1000004839-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004839-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004839-2"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004839-3"
></A
></A
></H3
><P
CLASS="para"
>You want a server to deal with several simultaneous connections, but you don't want to <CODE
CLASS="literal"
>fork</CODE
> a process to deal with each connection.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1530"
>Solution</A
></H3
><P
CLASS="para"
>Keep an array of open clients, use <CODE
CLASS="literal"
>select</CODE
> to read information when it becomes available, and deal with a client only when you have read a full request from it, as shown in <A
CLASS="xref"
HREF="ch17_14.htm"
TITLE="nonforker"
>Example 17.6</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch17-14829"
>Example 17.6: nonforker</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# <A
CLASS="indexterm"
NAME="ch17-idx-1000005139-0"
></A
>nonforker - server who multiplexes without forking
use POSIX;
use IO::Socket;
use IO::Select;
use Socket;
use Fcntl;
use Tie::RefHash;

$port = 1685;               # change this at will

# Listen to port.
$server = IO::Socket::INET-&gt;new(LocalPort =&gt; $port,
                                Listen    =&gt; 10 )
  or die &quot;Can't make server socket: $@\n&quot;;

# begin with empty buffers
%inbuffer  = ();
%outbuffer = ();
%ready     = ();

tie %ready, 'Tie::RefHash';

nonblock($server);
$select = IO::Select-&gt;new($server);

# Main loop: check reads/accepts, check writes, check ready to process
while (1) {
    my $client;
    my $rv;
    my $data;

    # check for new information on the connections we have

    # anything to read or accept?
    foreach $client ($select-&gt;can_read(1)) {

        if ($client == $server) {
            # accept a new connection

            $client = $server-&gt;accept();
            $select-&gt;add($client);
            nonblock($client);
        } else {
            # read data
            $data = '';
            $rv   = $client-&gt;recv($data, POSIX::BUFSIZ, 0);

            unless (defined($rv) &amp;&amp; length $data) {
                # This would be the end of file, so close the client
                delete $inbuffer{$client};
                delete $outbuffer{$client};
                delete $ready{$client};

                $select-&gt;remove($client);
                close $client;
                next;
            }

            $inbuffer{$client} .= $data;

            # test whether the data in the buffer or the data we
            # just read means there is a complete request waiting
            # to be fulfilled.  If there is, set $ready{$client}
            # to the requests waiting to be fulfilled.
            while ($inbuffer{$client} =~ s/(.*\n)//) {
                push( @{$ready{$client}}, $1 );
            }
        }
    }

    # Any complete requests to process?
    foreach $client (keys %ready) {
        handle($client);
    }

    # Buffers to flush?
    foreach $client ($select-&gt;can_write(1)) {
        # Skip this client if we have nothing to say
        next unless exists $outbuffer{$client};

        $rv = $client-&gt;send($outbuffer{$client}, 0);
        unless (defined $rv) {
            # Whine, but move on.
            warn &quot;I was told I could write, but I can't.\n&quot;;
            next;
        }
        if ($rv == length $outbuffer{$client} ||
            $! == POSIX::EWOULDBLOCK) {
            substr($outbuffer{$client}, 0, $rv) = '';
            delete $outbuffer{$client} unless length $outbuffer{$client};
        } else {
            # Couldn't write all the data, and it wasn't because
            # it would have blocked.  Shutdown and move on.
            delete $inbuffer{$client};
            delete $outbuffer{$client};
            delete $ready{$client};

            $select-&gt;remove($client);
            close($client);
            next;
        }
    }

    # Out of band data?
    foreach $client ($select-&gt;has_exception(0)) {  # arg is timeout
        # Deal with out-of-band data here, if you want to.
    }
}

# handle($socket) deals with all pending requests for $client
sub handle {
    # requests are in $ready{$client}
    # send output to $outbuffer{$client}
    my $client = shift;
    my $request;

    foreach $request (@{$ready{$client}}) {
        # $request is the text of the request
        # put text of reply into $outbuffer{$client}
    }
    delete $ready{$client};
}

# nonblock($socket) puts socket into nonblocking mode
sub nonblock {
    my $socket = shift;
    my $flags;
    
    $flags = fcntl($socket, F_GETFL, 0)
            or die &quot;Can't get flags for socket: $!\n&quot;;
    fcntl($socket, F_SETFL, $flags | O_NONBLOCK)
            or die &quot;Can't make socket nonblocking: $!\n&quot;;
}</PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1804"
>Discussion</A
></H3
><P
CLASS="para"
>As you see, handling multiple simultaneous clients within one process is more complicated than forking dedicated clones. You end up having to do a lot of operating system-like work to split your time between different connections and to ensure you don't block while reading.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>select</CODE
> function tells which connections have data waiting to be read, which can have data written to them, and which have unread out-of-band data. We could use the <CODE
CLASS="literal"
>select</CODE
> function built into Perl, but it would take more work to find out which filehandles are available. So we use the standard (as of 5.004) IO::Select module.</P
><P
CLASS="para"
>We use <CODE
CLASS="literal"
>getsockopt</CODE
><A
CLASS="indexterm"
NAME="ch17-idx-1000004863-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004863-1"
></A
> and <CODE
CLASS="literal"
>setsockopt</CODE
> to turn on the non-blocking option for the server socket. Without it, a single client whose socket buffers filled up would cause the server to pause until the buffers emptied. Using nonblocking I/O, however, means that we have to deal with the case of partial reads and writes &nbsp;-  we can't simply use &lt; &gt; to block until an entire record can be read, or use <CODE
CLASS="literal"
>print</CODE
> to send an entire record with <CODE
CLASS="literal"
>print</CODE
>. <CODE
CLASS="literal"
>%inbuffer</CODE
> holds the incomplete command read from clients, <CODE
CLASS="literal"
>%outbuffer</CODE
> holds data not yet sent, and <CODE
CLASS="literal"
>%ready</CODE
> holds arrays of unhandled messages.</P
><P
CLASS="para"
>To use this code in your program, do three things. First, change the IO::Socket::INET call to specify your service's port. Second, change the code that moves records from the <CODE
CLASS="literal"
>inbuffer</CODE
> to the <CODE
CLASS="literal"
>ready</CODE
> queue. Currently it treats each line (text ending in <CODE
CLASS="literal"
>\n</CODE
>) as a request. If your requests are not lines, you'll want to change this.</P
><PRE
CLASS="programlisting"
>while ($inbuffer{$client} =~ s/(.*\n)//) {
    push( @{$ready{$client}}, $1 );
}</PRE
><P
CLASS="para"
>Finally, change the middle of the loop in <CODE
CLASS="literal"
>handler</CODE
> to actually create a response to the request. A simple echoing program would say:</P
><PRE
CLASS="programlisting"
>$outbuffer{$client} .= $request;</PRE
><P
CLASS="para"
>Error handling is left as an exercise to the reader. At the moment, we assume any read or write that caused an error is reason to end that client's connection. This is probably too harsh, because "errors" like EINTR and EAGAIN don't warrant termination (although you <EM
CLASS="emphasis"
>should</EM
> never get an EAGAIN when using <CODE
CLASS="literal"
>select ()</CODE
>).<A
CLASS="indexterm"
NAME="ch17-idx-1000004844-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004844-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004844-2"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004844-3"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1828"
>See Also</A
></H3
><P
CLASS="para"
>The 
<A
CLASS="olink"
HREF="../prog/ch03_135.htm"
>&#13;<CODE
CLASS="literal"
>select</CODE
></A
> function in 
<A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> or <I
CLASS="filename"
>perlfunc </I
>(1); your system's <I
CLASS="filename"
>fcntl </I
>(2) manpage (if you have one); the documentation for the standard Fcntl, Socket, IO::Select, IO::Socket, and Tie::RefHash modules; <A
CLASS="xref"
HREF="ch17_12.htm"
TITLE="Forking Servers"
>Recipe 17.11</A
>; <A
CLASS="xref"
HREF="ch17_13.htm"
TITLE="Pre-Forking Servers"
>Recipe 17.12</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_13.htm"
TITLE="17.12. Pre-Forking Servers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.12. Pre-Forking Servers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_15.htm"
TITLE="17.14. Writing a Multi-Homed Server"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.14. Writing a Multi-Homed Server"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>17.12. Pre-Forking Servers</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>17.14. Writing a Multi-Homed Server</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
