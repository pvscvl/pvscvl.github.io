<HTML
><HEAD
>
<TITLE>Recipe 11.9. Constructing Records (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:48Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"><LINK
REL="prev"
HREF="ch11_09.htm"
TITLE="11.8. Creating References to Methods"><LINK
REL="next"
HREF="ch11_11.htm"
TITLE="11.10. Reading and Writing Hash Records to Text Files"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_09.htm"
TITLE="11.8. Creating References to Methods"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.8. Creating References to Methods"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"
>Chapter 11<BR>References and Records</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_11.htm"
TITLE="11.10. Reading and Writing Hash Records to Text Files"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.10. Reading and Writing Hash Records to Text Files"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-13425"
>11.9. Constructing Records</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-928"
>Problem<A
CLASS="indexterm"
NAME="ch11-idx-1000004843-0"
></A
></A
></H3
><P
CLASS="para"
>You want to create a record data type.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-934"
>Solution</A
></H3
><P
CLASS="para"
>Use a reference to an anonymous hash.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-940"
>Discussion</A
></H3
><P
CLASS="para"
>Suppose you wanted to create a data type that contained various data fields, akin to a C <CODE
CLASS="literal"
>struct</CODE
> or a Pascal RECORD. The easiest way is to use an anonymous hash. For example, here's how to initialize and use that record:</P
><PRE
CLASS="programlisting"
>$record = {
    NAME   =&gt; &quot;Jason&quot;,
    EMPNO  =&gt; 132,
    TITLE  =&gt; &quot;deputy peon&quot;,
    AGE    =&gt; 23,
    SALARY =&gt; 37_000,
    PALS   =&gt; [ &quot;Norbert&quot;, &quot;Rhys&quot;, &quot;Phineas&quot;],
};

printf &quot;I am %s, and my pals are %s.\n&quot;,
    $record-&gt;{NAME},
    join(&quot;, &quot;, @{$record-&gt;{PALS}});</PRE
><P
CLASS="para"
>Just having one of these records isn't much fun &nbsp;-  you'd like to build larger structures. For example, you might want to create a <CODE
CLASS="literal"
>%ByName</CODE
> hash that you could initialize and use this way:</P
><PRE
CLASS="programlisting"
># store record
$byname{ $record-&gt;{NAME} } = $record;

# later on, look up by name
if ($rp = $byname{&quot;Aron&quot;}) {        # false if missing
    printf &quot;Aron is employee %d.\n&quot;, $rp-&gt;{EMPNO};
}

# give jason a new pal
push @{$byname{&quot;Jason&quot;}-&gt;{PALS}}, &quot;Theodore&quot;;
printf &quot;Jason now has %d pals\n&quot;, scalar @{$byname{&quot;Jason&quot;}-&gt;{PALS}};</PRE
><P
CLASS="para"
>That makes <CODE
CLASS="literal"
>%byname</CODE
> a hash of hashes, because its values are hash references. Looking up employees by name would be easy using such a structure. If we find a value in the hash, we store a reference to the record in a temporary variable, <CODE
CLASS="literal"
>$rp</CODE
>, which we then use to get any field we want.</P
><P
CLASS="para"
>We can use our existing hash tools to manipulate <CODE
CLASS="literal"
>%byname</CODE
>. For instance, we could use the <CODE
CLASS="literal"
>each</CODE
> iterator to loop through it in an arbitrary order:</P
><PRE
CLASS="programlisting"
># Go through all records
while (($name, $record) = each %byname) {
    printf &quot;%s is employee number %d\n&quot;, $name, $record-&gt;{EMPNO};
}</PRE
><P
CLASS="para"
>What about looking employees up by employee number? Just build and use another data structure, an array of hashes called <CODE
CLASS="literal"
>@employees</CODE
>. If your employee numbers aren't consecutive (for instance, they jump from 1 to 159997) an array would be a bad choice. Instead, you should use a hash mapping employee number to record. For consecutive employee numbers, use an array:</P
><PRE
CLASS="programlisting"
># store record
$employees[ $record-&gt;{EMPNO} ] = $record;

# lookup by id
if ($rp = $employee[132]) {
    printf &quot;employee number 132 is %s\n&quot;, $rp-&gt;{NAME};
}</PRE
><P
CLASS="para"
>With a data structure like this, updating a record in one place effectively updates it everywhere. For example, this gives Jason a 3.5% raise:</P
><PRE
CLASS="programlisting"
>$byname{&quot;Jason&quot;}-&gt;{SALARY} *= 1.035;</PRE
><P
CLASS="para"
>This change is reflected in all views of these records. Remember that both <CODE
CLASS="literal"
>$byname{&quot;Jason&quot;}</CODE
> and <CODE
CLASS="literal"
>$employees[132]</CODE
> refer to the same record because the references they contain refer to the same anonymous hash.</P
><P
CLASS="para"
>How would you select all records matching a particular criterion? This is what <CODE
CLASS="literal"
>grep</CODE
> is for. Here's how to get everyone with "peon" in their titles or all the 27-year-olds:</P
><PRE
CLASS="programlisting"
>@peons   = grep { $_-&gt;{TITLE} =~ /peon/i } @employees;
@tsevens = grep { $_-&gt;{AGE}   == 27 }      @employees;</PRE
><P
CLASS="para"
>Each element of <CODE
CLASS="literal"
>@peons</CODE
> and <CODE
CLASS="literal"
>@tsevens</CODE
> is itself a reference to a record, making them arrays of hashes, like <CODE
CLASS="literal"
>@employees</CODE
>.</P
><P
CLASS="para"
>Here's how to print all records sorted in a particular order, say by age:</P
><PRE
CLASS="programlisting"
># Go through all records
foreach $rp (sort { $a-&gt;{AGE} &lt;=&gt; $b-&gt;{AGE} } values %byname) {
    printf &quot;%s is age %d.\n&quot;, $rp-&gt;{NAME}, $rp-&gt;{AGE};
    # or with a hash slice on the reference
    printf &quot;%s is employee number %d.\n&quot;, @$rp{'NAME','EMPNO'};
}</PRE
><P
CLASS="para"
>Rather than take time to sort them by age, you could just create another view of these records, <CODE
CLASS="literal"
>@byage</CODE
>. Each element in this array, <CODE
CLASS="literal"
>$byage[27]</CODE
> for instance, would be an array of all the records with that age. In effect, this is an array of arrays of hashes. You would build it this way:</P
><PRE
CLASS="programlisting"
># use @byage, an array of arrays of records
push @{ $byage[ $record-&gt;{AGE} ] }, $record;</PRE
><P
CLASS="para"
>Then you could find them all this way:</P
><PRE
CLASS="programlisting"
>for ($age = 0; $age &lt;= $#byage; $age++) {
    next unless $byage[$age];
    print &quot;Age $age: &quot;;
    foreach $rp (@{$byage[$age]}) {
        print $rp-&gt;{NAME}, &quot; &quot;;
    }
    print &quot;\n&quot;;
}</PRE
><P
CLASS="para"
>A similar approach is to use <CODE
CLASS="literal"
>map</CODE
> to avoid the <CODE
CLASS="literal"
>foreach</CODE
> loop:</P
><PRE
CLASS="programlisting"
>for ($age = 0; $age &lt;= $#byage; $age++) {
    next unless $byage[$age];
    printf &quot;Age %d: %s\n&quot;, $age,
        join(&quot;, &quot;, map {$_-&gt;{NAME}} @{$byage[$age]});<A
CLASS="indexterm"
NAME="ch11-idx-1000004845-0"
></A
>
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-1000005735"
>See Also</A
></H3
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch04_14.htm"
TITLE="Finding All Elements in an Array Matching Certain Criteria"
>Recipe 4.13</A
>; <A
CLASS="xref"
HREF="ch11_04.htm"
TITLE="Taking References to Hashes"
>Recipe 11.3</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_09.htm"
TITLE="11.8. Creating References to Methods"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.8. Creating References to Methods"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_11.htm"
TITLE="11.10. Reading and Writing Hash Records to Text Files"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.10. Reading and Writing Hash Records to Text Files"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.8. Creating References to Methods</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.10. Reading and Writing Hash Records to Text Files</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
