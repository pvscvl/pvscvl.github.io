<HTML
><HEAD
>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:24Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Perl Cookbook"><LINK
REL="prev"
HREF="ch04_20.htm"
TITLE="4.19. Program: permute"><LINK
REL="next"
HREF="ch05_02.htm"
TITLE="5.1. Adding an Element to a Hash"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_20.htm"
TITLE="4.19. Program: permute"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.19. Program: permute"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 5</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_02.htm"
TITLE="5.1. Adding an Element to a Hash"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.1. Adding an Element to a Hash"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch05-38793"
>5. Hashes</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch05-22072"
TITLE="5.0. Introduction"
>Introduction</A
><BR><A
CLASS="sect1"
HREF="ch05_02.htm"
TITLE="5.1. Adding an Element to a Hash"
>Adding an Element to a Hash</A
><BR><A
CLASS="sect1"
HREF="ch05_03.htm"
TITLE="5.2. Testing for the Presence of a Key in a Hash"
>Testing for the Presence of a Key in a Hash</A
><BR><A
CLASS="sect1"
HREF="ch05_04.htm"
TITLE="5.3. Deleting from a Hash"
>Deleting from a Hash</A
><BR><A
CLASS="sect1"
HREF="ch05_05.htm"
TITLE="5.4. Traversing a Hash"
>Traversing a Hash</A
><BR><A
CLASS="sect1"
HREF="ch05_06.htm"
TITLE="5.5. Printing a Hash"
>Printing a Hash</A
><BR><A
CLASS="sect1"
HREF="ch05_07.htm"
TITLE="5.6. Retrieving from a Hash in Insertion Order"
>Retrieving from a Hash in Insertion Order</A
><BR><A
CLASS="sect1"
HREF="ch05_08.htm"
TITLE="5.7. Hashes with Multiple Values Per Key"
>Hashes with Multiple Values Per Key</A
><BR><A
CLASS="sect1"
HREF="ch05_09.htm"
TITLE="5.8. Inverting a Hash"
>Inverting a Hash</A
><BR><A
CLASS="sect1"
HREF="ch05_10.htm"
TITLE="5.9. Sorting a Hash"
>Sorting a Hash</A
><BR><A
CLASS="sect1"
HREF="ch05_11.htm"
TITLE="5.10. Merging Hashes"
>Merging Hashes</A
><BR><A
CLASS="sect1"
HREF="ch05_12.htm"
TITLE="5.11. Finding Common or Different Keys in Two Hashes"
>Finding Common or Different Keys in Two Hashes</A
><BR><A
CLASS="sect1"
HREF="ch05_13.htm"
TITLE="5.12. Hashing References"
>Hashing References</A
><BR><A
CLASS="sect1"
HREF="ch05_14.htm"
TITLE="5.13. Presizing a Hash"
>Presizing a Hash</A
><BR><A
CLASS="sect1"
HREF="ch05_15.htm"
TITLE="5.14. Finding the Most Common Anything"
>Finding the Most Common Anything</A
><BR><A
CLASS="sect1"
HREF="ch05_16.htm"
TITLE="5.15. Representing Relationships Between Data"
>Representing Relationships Between Data</A
><BR><A
CLASS="sect1"
HREF="ch05_17.htm"
TITLE="5.16. Program: dutree"
>Program: dutree</A
></P
><P
></P
></DIV
><DIV
CLASS="epigraph"
ALIGN="right"
><P
CLASS="para"
ALIGN="right"
><I
>Doing linear scans over an associative array is like trying to club someone to death with a loaded Uzi.</I
></P
><P
CLASS="attribution"
ALIGN="right"
>-&nbsp;Larry Wall </P
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-22072"
>5.0. Introduction</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-1000006415-0"
></A
>People and parts of computer programs interact in all sorts of ways. Single scalar variables are like hermits, living a solitary existence whose only meaning comes from within the individual. Arrays are like cults, where multitudes marshal themselves under the name of a charismatic leader. In the middle lies the comfortable, intimate ground of the one-to-one relationship that is the hash. (Older documentation for Perl often called hashes <I
CLASS="firstterm"
>associative arrays</I
><A
CLASS="indexterm"
NAME="ch05-idx-1000006417-0"
></A
>, but that's a mouthful. Other languages that support similar constructs sometimes use different terms for them; you may hear about <I
CLASS="firstterm"
>hash tables</I
>, <I
CLASS="firstterm"
>tables</I
>, <I
CLASS="firstterm"
>dictionaries</I
>, <I
CLASS="firstterm"
>mappings</I
>, or even <I
CLASS="firstterm"
>alists</I
>, depending on the language.)</P
><P
CLASS="para"
>Unfortunately, this isn't a relationship of equals. Hashes are an <I
CLASS="firstterm"
>of</I
> relationship, like saying "Andy is the boss of Nat," "The blood pressure of our patient is 112/62," and "The name of journal ISSN 1087-903X is <EM
CLASS="emphasis"
>The Perl Journal</EM
>." Hashes only give convenient ways to access values for "Nat's boss" and "1087-903X's name"; you can't ask "Whose boss is Andy?" Finding the answer to that question is a recipe in this chapter.</P
><P
CLASS="para"
>Fortunately, hashes have their benefits, just like relationships. Hashes are a built-in data type in Perl. Their use reduces many complex algorithms to simple variable accesses. They are also fast and convenient ways to build indices and quick lookup tables.</P
><P
CLASS="para"
>It's time to put a name to these notions. The relationship embodied in a hash is a good thing to use for its name. For instance, the relationships in the examples above are <I
CLASS="firstterm"
>boss of</I
>, <I
CLASS="firstterm"
>blood pressure of</I
>, and <I
CLASS="firstterm"
>name of</I
>. We'd give them Perl names <CODE
CLASS="literal"
>%boss</CODE
>, <CODE
CLASS="literal"
>%blood_ pressure</CODE
>, and <CODE
CLASS="literal"
>%name</CODE
>. Where a lone scalar has <CODE
CLASS="literal"
>$</CODE
> as its type identifier and an entire array has <CODE
CLASS="literal"
>@</CODE
>, a hash has <CODE
CLASS="literal"
>%</CODE
>.</P
><P
CLASS="para"
>Only use the <CODE
CLASS="literal"
>%</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000006418-0"
></A
> when referring to the hash as a whole, such as <CODE
CLASS="literal"
>%boss</CODE
>. When referring to the value for a key, it's a single scalar value and so a <CODE
CLASS="literal"
>$</CODE
> is called for, just as when referring to one element of an array you also use a <CODE
CLASS="literal"
>$</CODE
>. This means that "the boss of Nat" would be written as <CODE
CLASS="literal"
>$boss{&quot;Nat&quot;}</CODE
>.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-1000006419-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1000006419-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1000006419-2"
></A
>A regular array uses whole numbers for indices, but the indices of a hash are always strings. Its values may be any arbitrary scalar values, including references. Using references as values, you can create hashes that hold not merely strings or numbers, but also arrays, other hashes, or objects. (Or rather, references to arrays, hashes, or objects.)</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-1000006454-0"
></A
>A hash can be initialized with a list, where elements of the list are key and value pairs:</P
><PRE
CLASS="programlisting"
>%age = ( &quot;Nat&quot;,   24,
         &quot;Jules&quot;, 25,
         &quot;Josh&quot;,  17  );</PRE
><P
CLASS="para"
>This is equivalent to:</P
><PRE
CLASS="programlisting"
>$age{&quot;Nat&quot;}   = 24;
$age{&quot;Jules&quot;} = 25;
$age{&quot;Josh&quot;}  = 17;</PRE
><P
CLASS="para"
>To make it easier to read and write hash initializations, the <CODE
CLASS="literal"
>=&gt;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000006420-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1000006420-1"
></A
> operator, sometimes known as a<CODE
CLASS="literal"
> </CODE
><I
CLASS="firstterm"
>comma arrow</I
><CODE
CLASS="literal"
>, was created. Mostly it behaves as a better-looking comma. For example, you can write a hash initialization this way:</CODE
></P
><PRE
CLASS="programlisting"
>%food_color = (
               &quot;Apple&quot;  =&gt; &quot;red&quot;,
               &quot;Banana&quot; =&gt; &quot;yellow&quot;,
               &quot;Lemon&quot;  =&gt; &quot;yellow&quot;,
               &quot;Carrot&quot; =&gt; &quot;orange&quot;
              );</PRE
><P
CLASS="para"
>(This particular hash is used in many examples in this chapter.) This initialization is also an example of <EM
CLASS="emphasis"
>hash-list equivalence </EM
> &nbsp;-   hashes behave in some ways as though they were lists of key-value pairs. We'll use this in a number of recipes, including the merging and inverting recipes.</P
><P
CLASS="para"
>Unlike a regular comma, the comma arrow has a special property: It quotes any word preceding it, which means you can safely omit the quotes and improve legibility. Single-word hash keys are also automatically quoted, which means you can write <CODE
CLASS="literal"
>$hash{somekey}</CODE
> instead of <CODE
CLASS="literal"
>$hash{&quot;somekey&quot;}</CODE
>. You could rewrite the preceding initialization of <CODE
CLASS="literal"
>%food_color</CODE
> as:</P
><PRE
CLASS="programlisting"
>%food_color = (
                Apple  =&gt; &quot;red&quot;,
                Banana =&gt; &quot;yellow&quot;,
                Lemon  =&gt; &quot;yellow&quot;,
                Carrot =&gt; &quot;orange&quot;
               );</PRE
><P
CLASS="para"
>One important issue to be aware of regarding hashes is that their elements are stored in an internal order convenient for efficient retrieval. This means that no matter what order you insert your data, it will come out in an unpredictable disorder.<A
CLASS="indexterm"
NAME="ch05-idx-1000006421-0"
></A
></P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-1000005714"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>unshift</CODE
> and <CODE
CLASS="literal"
>splice</CODE
> functions in <EM
CLASS="emphasis"
>perlfunc (1) </EM
>and <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the discussions of closures in <EM
CLASS="emphasis"
>perlsub (1)</EM
> and <EM
CLASS="emphasis"
>perlref  (1)</EM
>; and <A
CLASS="olink"
HREF="../prog/ch04_01.htm"
>Chapter 4</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_20.htm"
TITLE="4.19. Program: permute"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.19. Program: permute"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_02.htm"
TITLE="5.1. Adding an Element to a Hash"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.1. Adding an Element to a Hash"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.19. Program: permute</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.1. Adding an Element to a Hash</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
