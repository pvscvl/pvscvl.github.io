<HTML
><HEAD
>
<TITLE>Recipe 11.5. Taking References to Scalars (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:36Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"><LINK
REL="prev"
HREF="ch11_05.htm"
TITLE="11.4. Taking References to Functions"><LINK
REL="next"
HREF="ch11_07.htm"
TITLE="11.6. Creating Arrays of Scalar References"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_05.htm"
TITLE="11.4. Taking References to Functions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.4. Taking References to Functions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"
>Chapter 11<BR>References and Records</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_07.htm"
TITLE="11.6. Creating Arrays of Scalar References"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.6. Creating Arrays of Scalar References"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-chap11_taking_3"
>11.5. Taking References to Scalars</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-624"
>Problem<A
CLASS="indexterm"
NAME="ch11-idx-1000004819-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004819-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004819-2"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004819-3"
></A
></A
></H3
><P
CLASS="para"
>You want to create and manipulate a reference to a scalar value.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-630"
>Solution</A
></H3
><P
CLASS="para"
>To create a reference to a scalar variable, use the backslash operator:</P
><PRE
CLASS="programlisting"
>$scalar_ref = \$scalar;       # get reference to named scalar</PRE
><P
CLASS="para"
>To create a reference to an anonymous scalar value (a value that isn't in a variable), assign through a dereference of an undefined variable:</P
><PRE
CLASS="programlisting"
>undef $anon_scalar_ref;
$$anon_scalar_ref = 15;</PRE
><P
CLASS="para"
>This creates a reference to a constant scalar:</P
><PRE
CLASS="programlisting"
>$anon_scalar_ref = \15;</PRE
><P
CLASS="para"
>Use <CODE
CLASS="literal"
>${...}</CODE
> to dereference:</P
><PRE
CLASS="programlisting"
>print ${ $scalar_ref };       # dereference it
${ $scalar_ref } .= &quot;string&quot;; # alter referent's value</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-654"
>Discussion</A
></H3
><P
CLASS="para"
>If you want to create many new anonymous scalars, use a subroutine that returns a reference to a lexical variable out of scope, as explained in the Introduction:</P
><PRE
CLASS="programlisting"
>sub new_anon_scalar {
    my $temp;
    return \$temp;
}</PRE
><P
CLASS="para"
>Perl almost never implicitly dereferences for you. Exceptions include references to filehandles, code references to <CODE
CLASS="literal"
>sort</CODE
>, and the reference argument to <CODE
CLASS="literal"
>bless</CODE
>. Because of this, you can only dereference a scalar reference by prefacing it with <CODE
CLASS="literal"
>$</CODE
> to get at its contents:</P
><PRE
CLASS="programlisting"
>$sref = new_anon_scalar();
$$sref = 3;
print &quot;Three = $$sref\n&quot;;
@array_of_srefs = ( new_anon_scalar(), new_anon_scalar() );
${ $array[0] } = 6.02e23;
${ $array[1] } = &quot;avocado&quot;;
print &quot;\@array contains: &quot;, join(&quot;, &quot;, map { $$_ } @array ), &quot;\n&quot;;</PRE
><P
CLASS="para"
>Notice we have to put braces around <CODE
CLASS="literal"
>$array[0]</CODE
> and <CODE
CLASS="literal"
>$array[1]</CODE
>. If we tried to say <CODE
CLASS="literal"
>$$array[0]</CODE
>, the tight binding of dereferencing would turn it into <CODE
CLASS="literal"
>$array-&gt;[0]</CODE
>. It would treat <CODE
CLASS="literal"
>$array</CODE
> as an array reference and return the element at index zero.</P
><P
CLASS="para"
>Here are other examples where it is safe to omit the braces:</P
><PRE
CLASS="programlisting"
>$var        = `uptime`;     # $var holds text
$vref       = \$var;        # $vref &quot;points to&quot; $var
if ($$vref =~ /load/) {}    # look at $var, indirectly
chomp $$vref;               # alter $var, indirectly</PRE
><P
CLASS="para"
>As mentioned in the introduction, you may use the <CODE
CLASS="literal"
>ref</CODE
> built-in to inspect a reference for its referent's type. Calling <CODE
CLASS="literal"
>ref</CODE
> on a scalar reference returns the string &quot;<CODE
CLASS="literal"
>SCALAR</CODE
>&quot;:</P
><PRE
CLASS="programlisting"
># check whether $someref contains a simple scalar reference
if (ref($someref) ne 'SCALAR') {
    die &quot;Expected a scalar reference, not $someref\n&quot;;<A
CLASS="indexterm"
NAME="ch11-idx-1000004821-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004821-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004821-2"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004821-3"
></A
>
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-706"
>See Also</A
></H3
><P
CLASS="para"
>Chapter 4 of <I
CLASS="filename"
>Programming Perl</I
> and <I
CLASS="filename"
>perlref </I
>(1)</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_05.htm"
TITLE="11.4. Taking References to Functions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.4. Taking References to Functions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_07.htm"
TITLE="11.6. Creating Arrays of Scalar References"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.6. Creating Arrays of Scalar References"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.4. Taking References to Functions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.6. Creating Arrays of Scalar References</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
