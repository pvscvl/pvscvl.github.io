<HTML
><HEAD
>
<TITLE>Recipe 4.8. Computing Union, Intersection, or Difference of Unique Lists (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:31:46Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"><LINK
REL="prev"
HREF="ch04_08.htm"
TITLE="4.7. Finding Elements in One Array but Not Another"><LINK
REL="next"
HREF="ch04_10.htm"
TITLE="4.9. Appending One Array to Another"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_08.htm"
TITLE="4.7. Finding Elements in One Array but Not Another"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.7. Finding Elements in One Array but Not Another"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"
>Chapter 4<BR>Arrays</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_10.htm"
TITLE="4.9. Appending One Array to Another"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.9. Appending One Array to Another"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-13496"
>4.8. Computing Union, Intersection, or Difference of Unique Lists</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-777"
>Problem</A
></H3
><P
CLASS="para"
>You have a pair of lists, each having unduplicated items. You'd like to find out which items are in both lists (<I
CLASS="firstterm"
>intersection</I
>), one but not the other (<I
CLASS="firstterm"
>difference</I
>), or either (<I
CLASS="firstterm"
>union</I
>).</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-783"
>Solution</A
></H3
><P
CLASS="para"
>The following solutions need the listed initializations:</P
><PRE
CLASS="programlisting"
>@a = (1, 3, 5, 6, 7, 8);
@b = (2, 3, 5, 7, 9);

@union = @isect = @diff = ();
%union = %isect = ();
%count = ();</PRE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch04-pgfId-1000005746"
>Simple solution for union and intersection</A
></H4
><PRE
CLASS="programlisting"
>foreach $e (@a) { $union{$e} = 1 }

foreach $e (@b) {
    if ( $union{$e} ) { $isect{$e} = 1 }
    $union{$e} = 1;
}
@union = keys %union;
@isect = keys %isect;</PRE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch04-29528"
>More idiomatic version</A
></H4
><PRE
CLASS="programlisting"
>foreach $e (@a, @b) { $union{$e}++ &amp;&amp; $isect{$e}++ }

@union = keys %union;
@isect = keys %isect;</PRE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch04-pgfId-1000005764"
>Union, intersection, and symmetric difference<A
CLASS="indexterm"
NAME="ch04-idx-1000006686-0"
></A
></A
></H4
><PRE
CLASS="programlisting"
>foreach $e (@a, @b) { $count{$e}++ }

foreach $e (keys %count) {
    push(@union, $e);
    if ($count{$e} == 2) {
        push @isect, $e;
    } else {
        push @diff, $e;
    }
}</PRE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch04-pgfId-1000005777"
>Indirect solution</A
></H4
><PRE
CLASS="programlisting"
>@isect = @diff = @union = ();

foreach $e (@a, @b) { $count{$e}++ }

foreach $e (keys %count) {
    push(@union, $e);
    push @{ $count{$e} == 2 ? \@isect : \@diff }, $e;
}</PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-801"
>Discussion</A
></H3
><P
CLASS="para"
>The first solution most directly computes the union and intersection of two lists, neither containing duplicates. Two different hashes are used to record whether a particular item goes in the union or the intersection. We first put every element of the first array in the union hash, giving it a true value. Then processing each element of the second array, we check whether that element is already present in the union. If it is, then we put it in the intersection as well. In any event, it is put into the union. When we're done, we extract the keys of both the union and intersection hashes. The values aren't needed.</P
><P
CLASS="para"
>The second solution (<A
CLASS="xref"
HREF="ch04_09.htm"
TITLE="More idiomatic version"
>"More idiomatic version</A
>") is essentially the same but relies on familiarity with the Perl (and <EM
CLASS="emphasis"
>awk</EM
>, C, C++, and Java) <CODE
CLASS="literal"
>++</CODE
> and <CODE
CLASS="literal"
>&amp;&amp;</CODE
> operators. By placing the <CODE
CLASS="literal"
>++</CODE
> after the variable, we first look at its old value before incrementing it. The first time through it won't be in the union, which makes the first part of the <CODE
CLASS="literal"
>&amp;&amp;</CODE
> false, and the second part is consequently ignored. The second time that we encounter the same element, it's already present in the union, so we put it in the intersection as well.</P
><P
CLASS="para"
>The third solution uses just one hash to track how many times each element has been seen. Once both arrays have their elements recorded in the hash, we process those hash keys one at a time. If it's there, it goes in the union array. Keys whose values are 2 were in both arrays, so they are put in the intersection array. Keys whose values are 1 were in just one of the two arrays, so they are put in the difference array. The elements of the output arrays are not in the same order as the elements in the input arrays.</P
><P
CLASS="para"
>The last solution, like the previous one, uses just one hash to count how many times each element has been encountered. However, this time we choose the array within the <CODE
CLASS="literal"
>@{</CODE
> <CODE
CLASS="literal"
>....</CODE
> <CODE
CLASS="literal"
>}</CODE
> block.</P
><P
CLASS="para"
>We compute the symmetric difference here, not the simple difference. These are set theoretic terms. A <I
CLASS="firstterm"
>symmetric</I
> difference is the set of all the elements that are members of either <CODE
CLASS="literal"
>@A</CODE
> or <CODE
CLASS="literal"
>@B</CODE
>, but not of both. A <I
CLASS="filename"
>simple difference</I
> is the set of members of <CODE
CLASS="literal"
>@A</CODE
> but not of <CODE
CLASS="literal"
>@B</CODE
>, which we calculated in <A
CLASS="xref"
HREF="ch04_08.htm"
TITLE="Finding Elements in One Array but Not Another"
>Recipe 4.7</A
>.<A
CLASS="indexterm"
NAME="ch04-idx-1000007368-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000007368-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-1000007370"
>See Also</A
></H3
><P
CLASS="para"
>The <A
CLASS="olink"
HREF="../prog/ch02_03.htm"
>"Hashes (Associative Arrays)"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <A
CLASS="xref"
HREF="ch05_01.htm"
TITLE="Hashes"
>Chapter 5</A
>; we use hashes in a similar fashion in <A
CLASS="xref"
HREF="ch04_07.htm"
TITLE="Extracting Unique Elements from a List"
>Recipe 4.6</A
> and <A
CLASS="xref"
HREF="ch04_08.htm"
TITLE="Finding Elements in One Array but Not Another"
>Recipe 4.7</A
> <A
CLASS="indexterm"
NAME="ch04-idx-1000007377-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000007377-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000007377-2"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000007377-3"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000007377-4"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000007377-5"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_08.htm"
TITLE="4.7. Finding Elements in One Array but Not Another"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.7. Finding Elements in One Array but Not Another"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_10.htm"
TITLE="4.9. Appending One Array to Another"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.9. Appending One Array to Another"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.7. Finding Elements in One Array but Not Another</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.9. Appending One Array to Another</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
