<HTML
><HEAD
>
<TITLE>Recipe 13.6. Cloning Objects (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:22Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"><LINK
REL="prev"
HREF="ch13_06.htm"
TITLE="13.5. Using Classes as Structs"><LINK
REL="next"
HREF="ch13_08.htm"
TITLE="13.7. Calling Methods Indirectly"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_06.htm"
TITLE="13.5. Using Classes as Structs"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.5. Using Classes as Structs"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"
>Chapter 13<BR>Classes, Objects, and Ties</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_08.htm"
TITLE="13.7. Calling Methods Indirectly"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.7. Calling Methods Indirectly"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-36837"
>13.6. Cloning Objects</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-927"
>Problem<A
CLASS="indexterm"
NAME="ch13-idx-1000004533-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004533-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004533-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004533-3"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004533-4"
></A
></A
></H3
><P
CLASS="para"
>You want to write a constructor method that might be called on an existing object.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-933"
>Solution</A
></H3
><P
CLASS="para"
>Start your constructor like this:</P
><PRE
CLASS="programlisting"
>my $proto  = shift;
my $class  = ref($proto) || $proto;
my $parent = ref($proto) &amp;&amp; $proto;</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>$class</CODE
> variable will contain the class to bless into, and the <CODE
CLASS="literal"
>$parent</CODE
> variable will either be false, or else the object you're cloning.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-947"
>Discussion</A
></H3
><P
CLASS="para"
>Sometimes you need another object of the same type as the current one. You could do this:</P
><PRE
CLASS="programlisting"
>$ob1 = SomeClass-&gt;<CODE
CLASS="literal"
>new()</CODE
>;
# later on
$ob2 = (ref $ob1)-&gt;<CODE
CLASS="literal"
>new();</CODE
></PRE
><P
CLASS="para"
>but that's not very clear. It's clearer to have a single constructor that can be called on the class or an existing object. As a class method, it should return a new object with the default initialization. As an instance method, it should return a new object initialized from the object it was called on:</P
><PRE
CLASS="programlisting"
>$ob1 = Widget-&gt;new();
$ob2 = $ob1-&gt;new();</PRE
><P
CLASS="para"
>Here's a version of <CODE
CLASS="literal"
>new</CODE
> that takes this into consideration:</P
><PRE
CLASS="programlisting"
>sub new {
    my $proto  = shift;
    my $class  = ref($proto) || $proto;
    my $parent = ref($proto) &amp;&amp; $proto;

    my $self;
    # check whether we're shadowing a new from @ISA
    if (@ISA &amp;&amp; $proto-&gt;SUPER::can('new') ) {
        $self = $proto-&gt;SUPER::new(@_);
    } else { 
        $self = {};
        bless ($self, $proto);
    }
    bless($self, $class);

    $self-&gt;{PARENT}  = $parent;
    $self-&gt;{START}   = time();   # init data fields
    $self-&gt;{AGE}     = 0;
    return $self;
} </PRE
><P
CLASS="para"
>Initializing doesn't have to mean simply copying values from the parent. If you're writing a linked list or binary tree class, your constructor can return a new object linked into the list or tree, when called as an instance method.<A
CLASS="indexterm"
NAME="ch13-idx-1000004535-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004535-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004535-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004535-3"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004535-4"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1001"
>See Also</A
></H3
><P
CLASS="para"
><I
CLASS="filename"
>perlobj </I
>(1) and <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <A
CLASS="xref"
HREF="ch13_02.htm"
TITLE="Constructing an Object"
>Recipe 13.1</A
>; <A
CLASS="xref"
HREF="ch13_10.htm"
TITLE="Writing an Inheritable Class"
>Recipe 13.9</A
>; <A
CLASS="xref"
HREF="ch13_14.htm"
TITLE="Coping with Circular Data Structures"
>Recipe 13.13</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_06.htm"
TITLE="13.5. Using Classes as Structs"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.5. Using Classes as Structs"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_08.htm"
TITLE="13.7. Calling Methods Indirectly"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.7. Calling Methods Indirectly"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>13.5. Using Classes as Structs</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>13.7. Calling Methods Indirectly</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
