<HTML
><HEAD
>
<TITLE>Recipe 16.20. Blocking Signals (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:44:14Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"><LINK
REL="prev"
HREF="ch16_20.htm"
TITLE="16.19. Avoiding Zombie Processes"><LINK
REL="next"
HREF="ch16_22.htm"
TITLE="16.21. Timing Out an Operation"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_20.htm"
TITLE="16.19. Avoiding Zombie Processes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.19. Avoiding Zombie Processes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"
>Chapter 16<BR>Process Management and Communication</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_22.htm"
TITLE="16.21. Timing Out an Operation"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.21. Timing Out an Operation"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch16-14904"
>16.20. Blocking Signals</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1000005762"
>Problem</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch16-idx-1000006433-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006433-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006433-2"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006433-3"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006433-4"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006433-5"
></A
>You'd like to delay the reception of a signal, possibly to prevent unpredictable behavior from signals that can interrupt your program at any point.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1000005765"
>Solution</A
></H3
><P
CLASS="para"
>Use the POSIX module's interface to the <CODE
CLASS="literal"
>sigprocmask</CODE
> system call. This is only available if your system is POSIX conformant.</P
><P
CLASS="para"
>To block a signal around an operation:</P
><PRE
CLASS="programlisting"
>use POSIX qw(:signal_h);

$sigset = POSIX::SigSet-&gt;new(SIGINT);    # define the signals to block
$old_sigset = POSIX::SigSet-&gt;new;        # where the old sigmask will be kept

unless (defined sigprocmask(SIG_BLOCK, $sigset, $old_sigset)) {
    die &quot;Could not block SIGINT\n&quot;;
}</PRE
><P
CLASS="para"
>To unblock:</P
><PRE
CLASS="programlisting"
>unless (defined sigprocmask(SIG_UNBLOCK, $old_sigset)) {
    die &quot;Could not unblock SIGINT\n&quot;;
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1000005781"
>Discussion</A
></H3
><P
CLASS="para"
>The POSIX standard introduced <CODE
CLASS="literal"
>sigaction</CODE
> and <CODE
CLASS="literal"
>sigprocmask</CODE
> to give you better control over how signals are delivered. The <CODE
CLASS="literal"
>sigprocmask</CODE
> function controls delayed delivery of signals and <CODE
CLASS="literal"
>sigaction</CODE
> installs handlers. If available, Perl uses <CODE
CLASS="literal"
>sigaction</CODE
> when you change <CODE
CLASS="literal"
>%SIG</CODE
>.</P
><P
CLASS="para"
>To use <CODE
CLASS="literal"
>sigprocmask</CODE
>, first build a signal set using <CODE
CLASS="literal"
>POSIX::SigSet-&gt;new</CODE
>. This takes a list of signal numbers. The POSIX module exports functions named after the signals, which return their signal numbers.</P
><PRE
CLASS="programlisting"
>use POSIX qw(:signal_h);

$sigset = POSIX::SigSet-&gt;new( SIGINT, SIGKILL );</PRE
><P
CLASS="para"
>Pass the POSIX::SigSet object to <CODE
CLASS="literal"
>sigprocmask</CODE
> with the SIG_BLOCK flag to delay signal delivery, SIG_UNBLOCK to restore delivery of the signals, or SIG_SETMASK to block only signals in the POSIX::SigSet. The most paranoid of programmers block signals for a <CODE
CLASS="literal"
>fork</CODE
> to prevent a signal handler in the child process being called before Perl can update the child's <CODE
CLASS="literal"
>$$</CODE
> variable, its process id. If the signal handler were called immediately and reported <CODE
CLASS="literal"
>$$</CODE
> in that handler, it could possibly report its parent's <CODE
CLASS="literal"
>$$</CODE
>, not its own. This issue does not arise often.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1000005789"
>See Also</A
></H3
><P
CLASS="para"
>Your system's <EM
CLASS="emphasis"
>sigprocmask</EM
> (2) manpage (if you have one); the documentation for the standard POSIX module in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_20.htm"
TITLE="16.19. Avoiding Zombie Processes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.19. Avoiding Zombie Processes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_22.htm"
TITLE="16.21. Timing Out an Operation"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.21. Timing Out an Operation"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>16.19. Avoiding Zombie Processes</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>16.21. Timing Out an Operation</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
