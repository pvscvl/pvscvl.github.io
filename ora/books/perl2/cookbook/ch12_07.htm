<HTML
><HEAD
>
<TITLE>Recipe 12.6. Automating Module Clean-Up (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:41:34Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"><LINK
REL="prev"
HREF="ch12_06.htm"
TITLE="12.5. Determining the Caller's Package"><LINK
REL="next"
HREF="ch12_08.htm"
TITLE="12.7. Keeping Your Own Module Directory"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_06.htm"
TITLE="12.5. Determining the Caller's Package"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.5. Determining the Caller's Package"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"
>Chapter 12<BR>Packages, Libraries, and Modules</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_08.htm"
TITLE="12.7. Keeping Your Own Module Directory"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.7. Keeping Your Own Module Directory"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-chap12_automating_0"
>12.6. Automating Module Clean-Up</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-1000005924"
>Problem</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-1000005228-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005228-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005228-2"
></A
>You need to create setup code and clean-up code for a module that gets called automatically, without user intervention.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-1000004202"
>Solution</A
></H3
><P
CLASS="para"
>For setup code, put executable statements outside subroutine definitions in the module file. For clean-up code, use an END subroutine in that module.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-862"
>Discussion</A
></H3
><P
CLASS="para"
>In some languages, the programmer must call a module's initialization code before any of that module's regular functions can be safely accessed. Similarly, when the program is done, the programmer may have to call module-specific finalization code.</P
><P
CLASS="para"
>Not so in Perl. For per-module initialization code, executable statements outside of any subroutines in your module suffice. When the module is loaded in, that code runs right then and there. The user never has to remember to do this, because it's done automatically.</P
><P
CLASS="para"
>Now, why would you want automatic clean-up code? It depends on the module. You might want to write a shutdown message to a logfile, tell a database server to commit any pending state, refresh a screen, or return the tty to its original state.</P
><P
CLASS="para"
>Suppose you want a module to log quietly whenever a program using it starts up or finishes. Add code in an END subroutine to run after your program finishes:</P
><PRE
CLASS="programlisting"
>$Logfile = &quot;/tmp/mylog&quot; unless defined $Logfile;
open(LF, &quot;&gt;&gt;$Logfile&quot;)
    or die &quot;can't append to $Logfile: $!&quot;;
select(((select(LF), $|=1))[0]);  # unbuffer LF
logmsg(&quot;startup&quot;);

sub logmsg {
    my $now = scalar gmtime;
    print LF &quot;$0 $$ $now: @_\n&quot;
        or die &quot;write to $Logfile failed: $!&quot;;
}

END {
    logmsg(&quot;shutdown&quot;);
    close(LF)                     
        or die &quot;close $Logfile failed: $!&quot;;
}</PRE
><P
CLASS="para"
>The first part of code, outside any subroutine declaration, is executed at module load time. The module user doesn't have to do anything special to make this happen. Someone might be unpleasantly surprised, however, if the file can't be accessed, since the <CODE
CLASS="literal"
>die</CODE
> would make the <CODE
CLASS="literal"
>use</CODE
> or <CODE
CLASS="literal"
>require</CODE
> fail.</P
><P
CLASS="para"
>END routines work like exit handlers, such as <CODE
CLASS="literal"
>trap</CODE
> <CODE
CLASS="literal"
>0</CODE
> in the shell, <CODE
CLASS="literal"
>atexit</CODE
> in C programming, or global destructors or finalizers in object-oriented languages. All the ENDs in a program are run in the opposite order that they were loaded; that is, last seen, first run. These get called whether the program finishes through normal process termination by implicitly reaching the end of your main program, through an explicit call to the <CODE
CLASS="literal"
>exit</CODE
> function, or via an uncaught exception such as <CODE
CLASS="literal"
>die</CODE
> or a mistake involving division by zero.</P
><P
CLASS="para"
>Uncaught signals are a different matter, however. Death by signal does not run your exit handlers. The following pragma takes care of them:</P
><PRE
CLASS="programlisting"
>use sigtrap qw(die normal-signals error-signals);</PRE
><P
CLASS="para"
>END also isn't called when a process polymorphs itself via the <CODE
CLASS="literal"
>exec</CODE
> function because you are still in the same process, just a different program. All normal process attributes remain, like process ID and parent PID, user and group IDs, umask, current directory, environment variables, resource limits and accumulated statistics, open file descriptors (however, see the <CODE
CLASS="literal"
>$^F</CODE
> variable in <I
CLASS="filename"
>perlvar </I
>(1) or Camel:2). If it didn't work this way, exit handlers would execute redundantly in programs managing <CODE
CLASS="literal"
>fork</CODE
> and <CODE
CLASS="literal"
>exec</CODE
> manually. This would not be good.<A
CLASS="indexterm"
NAME="ch12-idx-1000005230-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005230-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005230-2"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005230-3"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-918"
>See Also</A
></H3
><P
CLASS="para"
>The standard <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>sigtrap</CODE
> pragma, also in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the section on  <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>"Package Constructors and Destructors"</A
> in <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlmod </I
>(1); the <CODE
CLASS="literal"
>$^F</CODE
> variable in the section on <A
CLASS="olink"
HREF="../prog/ch02_09.htm"
>"Special Global Variables"</A
> in <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perldata</I
> (1); the <A
CLASS="olink"
HREF="../prog/ch03_040.htm"
><CODE
CLASS="literal"
>fork</CODE
></A
> and <A
CLASS="olink"
HREF="../prog/ch03_033.htm"
><CODE
CLASS="literal"
>exec</CODE
></A
> functions in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlmod </I
>(1)</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_06.htm"
TITLE="12.5. Determining the Caller's Package"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.5. Determining the Caller's Package"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_08.htm"
TITLE="12.7. Keeping Your Own Module Directory"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.7. Keeping Your Own Module Directory"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.5. Determining the Caller's Package</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>12.7. Keeping Your Own Module Directory</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
