<HTML
><HEAD
>
<TITLE>Recipe 1.2. Establishing a Default Value (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:28:45Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"><LINK
REL="prev"
HREF="ch01_02.htm"
TITLE="1.1. Accessing Substrings"><LINK
REL="next"
HREF="ch01_04.htm"
TITLE="1.3. Exchanging Values Without Using Temporary Variables"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_02.htm"
TITLE="1.1. Accessing Substrings"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.1. Accessing Substrings"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"
>Chapter 1<BR>Strings</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_04.htm"
TITLE="1.3. Exchanging Values Without Using Temporary Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.3. Exchanging Values Without Using Temporary Variables"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch01-chap01_establishing_0"
>1.2. Establishing a Default Value</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-289"
>Problem <A
CLASS="indexterm"
NAME="ch01-idx-1000010153-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010153-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010153-2"
></A
></A
></H3
><P
CLASS="para"
>You would like to give a default value to a scalar variable, but only if it doesn't already have one. It often happens that you want a hard-coded default value for a variable that can be overridden from the command-line or through an environment variable.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-295"
>Solution</A
></H3
><P
CLASS="para"
>Use the <CODE
CLASS="literal"
>||</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010154-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010154-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010154-2"
></A
> or <CODE
CLASS="literal"
>||=</CODE
> operator, which work on both strings and numbers:</P
><PRE
CLASS="programlisting"
># use $b if $b is true, else $c
$a = $b || $c;              

# set $x to $y unless $x is already true
$x ||= $y</PRE
><P
CLASS="para"
>If <CODE
CLASS="literal"
>0</CODE
> or &quot;<CODE
CLASS="literal"
>0</CODE
>&quot; are valid values for your variables, use <CODE
CLASS="literal"
>defined</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010160-0"
></A
> instead:</P
><PRE
CLASS="programlisting"
># use $b if $b is defined, else $c
$a = defined($b) ? $b : $c;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-317"
>Discussion</A
></H3
><P
CLASS="para"
>The big difference between the two techniques (<CODE
CLASS="literal"
>defined</CODE
> and <CODE
CLASS="literal"
>||</CODE
>) is what they test: <A
CLASS="indexterm"
NAME="ch01-idx-1000010161-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010161-1"
></A
>definedness versus truth. Three defined values are still false in the world of Perl: <CODE
CLASS="literal"
>0</CODE
>, &quot;<CODE
CLASS="literal"
>0</CODE
>&quot;, and &quot;&quot;. If your variable already held one of those, and you wanted to keep that value, a <CODE
CLASS="literal"
>||</CODE
> wouldn't work. You'd have to use the clumsier tests with <CODE
CLASS="literal"
>defined</CODE
> instead. It's often convenient to arrange for your program to care only about true or false values, not defined or undefined ones.</P
><P
CLASS="para"
>Rather than being restricted in its return values to a mere 1 or 0 as in most other languages, Perl's <CODE
CLASS="literal"
>||</CODE
> operator has a much more interesting property: It returns its first operand (the left-hand side) if that operand is true; otherwise it returns its second operand. The <CODE
CLASS="literal"
>&amp;&amp;</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010175-0"
></A
> operator also returns the last evaluated expression, but is less often used for this property. These operators don't care whether their operands are strings, numbers, or references&nbsp;- any scalar will do. They just return the first one that makes the whole expression true or false. This doesn't affect the Boolean sense of the return value, but it does make the operators more convenient to use.</P
><P
CLASS="para"
>This property lets you provide a default value to a variable, function, or longer expression in case the first part doesn't pan out. Here's an example of <CODE
CLASS="literal"
>||</CODE
>, which would set <CODE
CLASS="literal"
>$foo</CODE
> to be the contents of either <CODE
CLASS="literal"
>$bar</CODE
> or, if <CODE
CLASS="literal"
>$bar</CODE
> is false, &quot;<CODE
CLASS="literal"
>DEFAULT</CODE
> <CODE
CLASS="literal"
>VALUE</CODE
>&quot;:</P
><PRE
CLASS="programlisting"
>$foo = $bar || &quot;DEFAULT VALUE&quot;;</PRE
><P
CLASS="para"
>Here's another example, which sets <CODE
CLASS="literal"
>$dir</CODE
> to be either the first argument to the program or &quot;<CODE
CLASS="literal"
>/tmp</CODE
>&quot; if no argument was given.</P
><PRE
CLASS="programlisting"
>$dir = shift(@ARGV) || &quot;/tmp&quot;;</PRE
><P
CLASS="para"
>We can do this without altering <CODE
CLASS="literal"
>@ARGV</CODE
>:</P
><PRE
CLASS="programlisting"
>$dir = $ARGV[0] || &quot;/tmp&quot;;</PRE
><P
CLASS="para"
>If <CODE
CLASS="literal"
>0</CODE
> is a valid value for <CODE
CLASS="literal"
>$ARGV[0]</CODE
>, we can't use <CODE
CLASS="literal"
>||</CODE
> because it evaluates as false even though it's a value we want to accept. We must resort to the ternary ("hook") operator:</P
><PRE
CLASS="programlisting"
>$dir = defined($ARGV[0]) ? shift(@ARGV) : &quot;/tmp&quot;;</PRE
><P
CLASS="para"
>We can also write this as follows, although with slightly different semantics:</P
><PRE
CLASS="programlisting"
>$dir = @ARGV ? $ARGV[0] : &quot;/tmp&quot;;</PRE
><P
CLASS="para"
>This checks the number of elements in <CODE
CLASS="literal"
>@ARGV</CODE
>. Using the hook operator as a condition in a <CODE
CLASS="literal"
>?:</CODE
> statement evaluates <CODE
CLASS="literal"
>@ARGV</CODE
> in scalar context. It's only false when there are 0 elements, in which case we use &quot;<CODE
CLASS="literal"
>/tmp</CODE
>&quot;. In all other cases (when the user gives an argument), we use the first argument.</P
><P
CLASS="para"
>The following line increments a value in <CODE
CLASS="literal"
>%count</CODE
>, using as the key either <CODE
CLASS="literal"
>$shell</CODE
> or, if <CODE
CLASS="literal"
>$shell</CODE
> is false, &quot;<CODE
CLASS="literal"
>/bin/sh</CODE
>&quot;.</P
><PRE
CLASS="programlisting"
>$count{ $shell || &quot;/bin/sh&quot; }++;</PRE
><P
CLASS="para"
>You may chain several alternatives together as we have in the following example. The first expression that returns a true value will be used.</P
><PRE
CLASS="programlisting"
># find the user name on Unix systems
$user = $ENV{USER}
     || $ENV{LOGNAME}
     || getlogin()
     || (getpwuid($&lt;))[0]
     || &quot;Unknown uid number $&lt;&quot;;<CODE
CLASS="literal"
></CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010166-0"
></A
></PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>&amp;&amp;</CODE
> operator works analogously: It returns its first operand if that operand is false; otherwise, it returns the second one. Because there aren't as many interesting false values as there are true ones, this property isn't used much. One use is demonstrated in Recipe 13.11 or 14.11.</P
><P
CLASS="para"
><CODE
CLASS="literal"
></CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010171-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010171-1"
></A
>The <CODE
CLASS="literal"
>||=</CODE
> assignment operator looks odd, but it works exactly like the other binary assignment operators. For nearly all Perl's binary operators, <CODE
CLASS="literal"
>$VAR</CODE
> <CODE
CLASS="literal"
>OP=</CODE
> <CODE
CLASS="literal"
>VALUE</CODE
> means <CODE
CLASS="literal"
>$VAR</CODE
> <CODE
CLASS="literal"
>=</CODE
> <CODE
CLASS="literal"
>$VAR</CODE
> <CODE
CLASS="literal"
>OP</CODE
> <CODE
CLASS="literal"
>VALUE</CODE
>; for example, <CODE
CLASS="literal"
>$a</CODE
> <CODE
CLASS="literal"
>+=</CODE
> <CODE
CLASS="literal"
>$b</CODE
> is the same as <CODE
CLASS="literal"
>$a</CODE
> <CODE
CLASS="literal"
>=</CODE
> <CODE
CLASS="literal"
>$a</CODE
> <CODE
CLASS="literal"
>+</CODE
> <CODE
CLASS="literal"
>$b</CODE
>. So <CODE
CLASS="literal"
>||=</CODE
> is used to set a variable when that variable is itself still false. Since the <CODE
CLASS="literal"
>||</CODE
> check is a simple Boolean one&nbsp;- testing for truth&nbsp;- it doesn't care about undefined values even under <B
CLASS="emphasis.bold"
>-w</B
>.</P
><P
CLASS="para"
>Here's an example of <CODE
CLASS="literal"
>||=</CODE
> that sets <CODE
CLASS="literal"
>$starting_point</CODE
> to &quot;<CODE
CLASS="literal"
>Greenwich</CODE
>&quot; unless it is already set. Again, we assume <CODE
CLASS="literal"
>$starting_point</CODE
> won't have the value <CODE
CLASS="literal"
>0</CODE
> or &quot;<CODE
CLASS="literal"
>0</CODE
>&quot;, or that if it does, it's okay to change it.</P
><PRE
CLASS="programlisting"
>$starting_point ||= &quot;Greenwich&quot;;</PRE
><P
CLASS="para"
>You can't use <CODE
CLASS="literal"
>or</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010181-0"
></A
> in place of <CODE
CLASS="literal"
>||</CODE
> in assignments because <CODE
CLASS="literal"
>or</CODE
>'s precedence is too low. <CODE
CLASS="literal"
>$a</CODE
> <CODE
CLASS="literal"
>=</CODE
> <CODE
CLASS="literal"
>$b</CODE
> <CODE
CLASS="literal"
>or</CODE
> <CODE
CLASS="literal"
>$c</CODE
> is equivalent to <CODE
CLASS="literal"
>($a</CODE
> <CODE
CLASS="literal"
>=</CODE
> <CODE
CLASS="literal"
>$b)</CODE
> <CODE
CLASS="literal"
>or</CODE
> <CODE
CLASS="literal"
>$c</CODE
>. This will always assign <CODE
CLASS="literal"
>$b</CODE
> to <CODE
CLASS="literal"
>$a</CODE
>, which is not the behavior you want.</P
><P
CLASS="para"
>Don't extend this curious use of <CODE
CLASS="literal"
>||</CODE
> and <CODE
CLASS="literal"
>||=</CODE
> from scalars to arrays and hashes. It doesn't work because the operators put their left operand into scalar context. Instead, you must do something like this:</P
><PRE
CLASS="programlisting"
>@a = @b unless @a;          # copy only if empty
@a = @b ? @b : @c;          # assign @b if nonempty, else @c</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-381"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>||</CODE
> operator in <EM
CLASS="emphasis"
>perlop</EM
> (1) or <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the <CODE
CLASS="literal"
>defined</CODE
> and <CODE
CLASS="literal"
>exists</CODE
> functions in <I
CLASS="filename"
>perlfunc </I
>(1) and <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010156-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010156-1"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_02.htm"
TITLE="1.1. Accessing Substrings"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.1. Accessing Substrings"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_04.htm"
TITLE="1.3. Exchanging Values Without Using Temporary Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.3. Exchanging Values Without Using Temporary Variables"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.1. Accessing Substrings</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.3. Exchanging Values Without Using Temporary Variables</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
