<HTML
><HEAD
>
<TITLE>Recipe 4.12. Finding the First List Element That Passes a Test (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:31:58Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"><LINK
REL="prev"
HREF="ch04_12.htm"
TITLE="4.11. Processing Multiple Elements of an Array"><LINK
REL="next"
HREF="ch04_14.htm"
TITLE="4.13. Finding All Elements in an Array Matching Certain Criteria"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_12.htm"
TITLE="4.11. Processing Multiple Elements of an Array"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.11. Processing Multiple Elements of an Array"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"
>Chapter 4<BR>Arrays</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_14.htm"
TITLE="4.13. Finding All Elements in an Array Matching Certain Criteria"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.13. Finding All Elements in an Array Matching Certain Criteria"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-20097"
>4.12. Finding the First List Element That Passes a Test</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-1011"
>Problem <A
CLASS="indexterm"
NAME="ch04-idx-1000006718-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006718-1"
></A
></A
></H3
><P
CLASS="para"
>You want the first element in the list (or its index) that passes a test. Alternatively, you want to know whether any element passes the test. The test can be simple identity ("Is this element in the list?")[<A
CLASS="footnote"
HREF="#ch04-pgfId-1000000590"
>1</A
>] or more complex ("I have a list of Employee objects, sorted from highest salary to lowest. Which manager has the highest salary?"). Simple cases normally only require the value of the element, but when the array itself will be altered, you probably need to know the index number of the first matching element.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch04-pgfId-1000000590"
>[1]</A
> But why didn't you use a hash then?</P
></DIV
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-1017"
>Solution</A
></H3
><P
CLASS="para"
>To find a matching value, use <CODE
CLASS="literal"
>foreach</CODE
> to loop over every element, and call <CODE
CLASS="literal"
>last</CODE
><A
CLASS="indexterm"
NAME="ch04-idx-1000006731-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006731-1"
></A
> as soon as you find a match:</P
><PRE
CLASS="programlisting"
>my($match, $found, $item);
foreach $item (@array) {
    if ($criterion) {
        $match = $item;  # must save
        $found = 1;
        last;
    }
}
if ($found) {
    ## do something with $match
} else {
    ## unfound
}</PRE
><P
CLASS="para"
>To find a matching index, use <CODE
CLASS="literal"
>for</CODE
> to loop a variable over every array index, and call <CODE
CLASS="literal"
>last</CODE
> as soon as you find a match:</P
><PRE
CLASS="programlisting"
>my($i, $match_idx);
for ($i = 0; $i &lt; @array; $i++) {
    if ($criterion) {
        $match_idx = $i;    # save the index
        last;
    }
}

if (defined $match_idx) {
    ## found in $array[$match_idx]
} else {
    ## unfound
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-1077"
>Discussion</A
></H3
><P
CLASS="para"
>Not having a built-in mechanism to do this, we must write our own code to go through the list and test each element. We use <CODE
CLASS="literal"
>foreach</CODE
> and <CODE
CLASS="literal"
>for</CODE
> and call <CODE
CLASS="literal"
>last</CODE
> to ensure that we stop as soon as we find a match. Before we use <CODE
CLASS="literal"
>last</CODE
> to stop looking, though, we save the value or index.</P
><P
CLASS="para"
>A common mistake is to try to use <CODE
CLASS="literal"
>grep</CODE
> here. The problem is that <CODE
CLASS="literal"
>grep</CODE
> always tests all elements and finds all matches, so it's inefficient if you only want the first match.</P
><P
CLASS="para"
>We have to set <CODE
CLASS="literal"
>$match</CODE
> when we want the value of the first matching element. We can't just test <CODE
CLASS="literal"
>$item</CODE
> at the end of the loop, because <CODE
CLASS="literal"
>foreach</CODE
> automatically <CODE
CLASS="literal"
>local</CODE
>izes the iterator variable and this prevents us from getting to its last loop value after the loop ends. See <A
CLASS="xref"
HREF="ch04_05.htm"
TITLE="Doing Something with Every Element in a List"
>Recipe 4.4</A
>.</P
><P
CLASS="para"
>Here's an example. Assume that <CODE
CLASS="literal"
>@employees</CODE
> has a list of Employee objects, sorted in descending order by salary. We wish to find out the highest paid engineer, who will be the first engineer in the array. We only want to print the engineer's name, so we want the value, not the index.</P
><PRE
CLASS="programlisting"
>foreach $employee (@employees) {
    if ( $employee-&gt;category() eq 'engineer' ) {
        $highest_engineer = $employee;
        last;
    }
}
print &quot;Highest paid engineer is: &quot;, $highest_engineer-&gt;name(), &quot;\n&quot;;</PRE
><P
CLASS="para"
>When we're searching and only want the index, we can save some code by remembering that <CODE
CLASS="literal"
>$i</CODE
> will not be an acceptable array index if we don't find a match. This mainly saves us code space, as not doing an assignment doesn't really win us much compared to the time we'll have spent testing the list elements. It's more obscure, because it tests <CODE
CLASS="literal"
>if</CODE
> <CODE
CLASS="literal"
>($i</CODE
> <CODE
CLASS="literal"
>&lt;</CODE
> <CODE
CLASS="literal"
>@ARRAY)</CODE
> to check whether we found a match, instead of the more obvious <CODE
CLASS="literal"
>defined</CODE
> test as in the previous Solution.</P
><PRE
CLASS="programlisting"
>for ($i = 0; $i &lt; @ARRAY; $i++) {
    last if $criterion;
}
if ($i &lt; @ARRAY) {
    ## found and $i is the index
} else {
    ## not found
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-1121"
>See Also</A
></H3
><P
CLASS="para"
>The "For Loops," "Foreach Loops," and "Loop Control" sections of <I
CLASS="filename"
>perlsyn </I
>(1) and <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the <CODE
CLASS="literal"
>grep</CODE
> function in <I
CLASS="filename"
>perlfunc </I
>(1) and <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006727-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006727-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006727-2"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006727-3"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_12.htm"
TITLE="4.11. Processing Multiple Elements of an Array"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.11. Processing Multiple Elements of an Array"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_14.htm"
TITLE="4.13. Finding All Elements in an Array Matching Certain Criteria"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.13. Finding All Elements in an Array Matching Certain Criteria"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.11. Processing Multiple Elements of an Array</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.13. Finding All Elements in an Array Matching Certain Criteria</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
