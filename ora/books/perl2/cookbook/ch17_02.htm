<HTML
><HEAD
>
<TITLE>Recipe 17.1. Writing a TCP Client (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:44:21Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"><LINK
REL="prev"
HREF="ch17_01.htm"
TITLE="17.0. Introduction"><LINK
REL="next"
HREF="ch17_03.htm"
TITLE="17.2. Writing a TCP Server"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_01.htm"
TITLE="17.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"
>Chapter 17<BR>Sockets</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_03.htm"
TITLE="17.2. Writing a TCP Server"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.2. Writing a TCP Server"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch17-42449"
>17.1. Writing a TCP Client</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-110"
>Problem<A
CLASS="indexterm"
NAME="ch17-idx-1000004679-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004679-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004679-2"
></A
></A
></H3
><P
CLASS="para"
>You want to connect to a socket on a remote machine.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-116"
>Solution</A
></H3
><P
CLASS="para"
>This solution assumes you're using the Internet to communicate. For TCP-like communication within a single machine, see <A
CLASS="xref"
HREF="ch17_07.htm"
TITLE="Using UNIX Domain Sockets"
>Recipe 17.6</A
>.</P
><P
CLASS="para"
>Either use the standard (as of 5.004) <A
CLASS="indexterm"
NAME="ch17-idx-1000004680-0"
></A
>IO::Socket::INET class:</P
><PRE
CLASS="programlisting"
>use IO::Socket;

$socket = IO::Socket::INET-&gt;new(PeerAddr =&gt; $remote_host,
                                PeerPort =&gt; $remote_port,
                                Proto    =&gt; &quot;tcp&quot;,
                                Type     =&gt; SOCK_STREAM)
    or die &quot;Couldn't connect to $remote_host:$remote_port : $@\n&quot;;

# ... do something with the socket
print $socket &quot;Why don't you call me anymore?\n&quot;;

$answer = &lt;$socket&gt;;

# and terminate the connection when we're done
close($socket);</PRE
><P
CLASS="para"
>or create a socket by hand for better control:</P
><PRE
CLASS="programlisting"
>use Socket;

# create a socket
socket(TO_SERVER, PF_INET, SOCK_STREAM, getprotobyname('tcp'));

# build the address of the remote machine
$internet_addr = inet_aton($remote_host)
    or die &quot;Couldn't convert $remote_host into an Internet address: $!\n&quot;;
$paddr = sockaddr_in($remote_port, $internet_addr);

# connect
connect(TO_SERVER, $paddr)
    or die &quot;Couldn't connect to $remote_host:$remote_port : $!\n&quot;;

# ... do something with the socket
print TO_SERVER &quot;Why don't you call me anymore?\n&quot;;

# and terminate the connection when we're done
close(TO_SERVER);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-194"
>Discussion</A
></H3
><P
CLASS="para"
>While coding this by hand requires a lot of steps, the IO::Socket::INET class wraps them all in a convenient constructor. The important things to know are where you're going (the PeerAddr and PeerPort parameters) and how you're getting there (the Type parameter). IO::Socket::INET tries to determine these things from what you've given it. It deduces Proto from the Type and Port if possible, and assumes <CODE
CLASS="literal"
>tcp</CODE
> otherwise.</P
><P
CLASS="para"
>PeerAddr is a string containing either a hostname (<CODE
CLASS="literal"
>&quot;www.oreilly.com&quot;</CODE
>) or an IP address (<CODE
CLASS="literal"
>&quot;204.148.40.9&quot;</CODE
>). PeerPort is an integer, the port number to connect to. You can embed the port number in the address by giving an address like <CODE
CLASS="literal"
>&quot;www.oreilly.com:80&quot;</CODE
>. Type is the kind of socket to create: SOCK_DGRAM for datagrams, or SOCK_STREAM for streams.</P
><P
CLASS="para"
>If you want a SOCK_STREAM connection to a port on a particular machine with no other options, pass a single string to <CODE
CLASS="literal"
>IO::Socket::INET-&gt;new</CODE
> consisting of the hostname and port separated by a colon:</P
><PRE
CLASS="programlisting"
>$client = IO::Socket::INET-&gt;new(&quot;www.yahoo.com:80&quot;)
    or die $@;</PRE
><P
CLASS="para"
>If an error occurs, IO::Socket::INET will return <CODE
CLASS="literal"
>undef</CODE
> and <CODE
CLASS="literal"
>$@</CODE
> (<EM
CLASS="emphasis"
>not</EM
> <CODE
CLASS="literal"
>$!</CODE
>) will be set to the error message.</P
><PRE
CLASS="programlisting"
>$s = IO::Socket::INET-&gt;new(PeerAddr =&gt; &quot;Does not Exist&quot;,
                           Peerport =&gt; 80,
                           Type     =&gt; SOCK_STREAM )
    or die $@;</PRE
><P
CLASS="para"
>If your packets are disappearing into a network void, it can take a while for your inability to connect to a port to be recognized. You can decrease this time by specifying a <CODE
CLASS="literal"
>Timeout</CODE
> parameter to <CODE
CLASS="literal"
>IO::Socket::INET-&gt;new()</CODE
>:</P
><PRE
CLASS="programlisting"
>$s = IO::Socket::INET-&gt;new(PeerAddr =&gt; &quot;bad.host.com&quot;,
                           PeerPort =&gt; 80,
                           Type     =&gt; SOCK_STREAM,
                           Timeout  =&gt; 5 )
    or die $@;</PRE
><P
CLASS="para"
>If you do this, though, there's no way to tell from <CODE
CLASS="literal"
>$!</CODE
> or <CODE
CLASS="literal"
>$@</CODE
> whether you couldn't connect or whether you timed out. Sometimes it's better to set it up by hand instead of using a module.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-1000004916-0"
></A
>INADDR_ANY is a special address, meaning "listen on any interface." If you want to restrict it to a particular IP address, add a <CODE
CLASS="literal"
>LocalAddr</CODE
> parameter to your call to <CODE
CLASS="literal"
>IO::Socket::INET-&gt;new.</CODE
> If coding by hand code, do this:</P
><PRE
CLASS="programlisting"
>$inet_addr = inet_aton(&quot;208.146.240.1&quot;);
$paddr     = sockaddr_in($port, $inet_addr);
bind(SOCKET, $paddr)         or die &quot;bind: $!&quot;;</PRE
><P
CLASS="para"
>If you know only the name, do this:</P
><PRE
CLASS="programlisting"
>$inet_addr = gethostbyname(&quot;www.yahoo.com&quot;)
                            or die &quot;Can't resolve www.yahoo.com: $!&quot;;
$paddr     = sockaddr_in($port, $inet_addr);
bind(SOCKET, $paddr)        or die &quot;bind: $!&quot;;<A
CLASS="indexterm"
NAME="ch17-idx-1000004682-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004682-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004682-2"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-250"
>See Also</A
></H3
><P
CLASS="para"
>The 
<A
CLASS="olink"
HREF="../prog/ch03_151.htm"
>&#13;<CODE
CLASS="literal"
>socket</CODE
></A
>, 
<A
CLASS="olink"
HREF="../prog/ch03_007.htm"
>&#13;<CODE
CLASS="literal"
>bind</CODE
></A
>, 
<A
CLASS="olink"
HREF="../prog/ch03_020.htm"
>&#13;<CODE
CLASS="literal"
>connect</CODE
></A
>, and 
<A
CLASS="olink"
HREF="../prog/ch03_048.htm"
>&#13;<CODE
CLASS="literal"
>gethostbyname</CODE
></A
> functions in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlfunc </I
>(1); the documentation for the standard Socket, IO::Socket, and Net::hostent modules; the section on 
<A
CLASS="olink"
HREF="../prog/ch06_02.htm"
>&#13;"Internet TCP Clients and Servers"
</A
> in <A
CLASS="olink"
HREF="../prog/ch06_01.htm"
>Chapter 6</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlipc </I
>(1); <CITE
CLASS="citetitle"
>Unix Network Programming</CITE
>, by W. Richard Stevens, published by Prentice Hall (1992); <A
CLASS="xref"
HREF="ch17_03.htm"
TITLE="Writing a TCP Server"
>Recipe 17.2</A
>; <A
CLASS="xref"
HREF="ch17_04.htm"
TITLE="Communicating over TCP"
>Recipe 17.3</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_01.htm"
TITLE="17.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_03.htm"
TITLE="17.2. Writing a TCP Server"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.2. Writing a TCP Server"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>17.0. Introduction</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>17.2. Writing a TCP Server</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
