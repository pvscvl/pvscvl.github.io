<HTML
><HEAD
>
<TITLE>Recipe 13.4. Managing Class Data (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:18Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"><LINK
REL="prev"
HREF="ch13_04.htm"
TITLE="13.3. Managing Instance Data"><LINK
REL="next"
HREF="ch13_06.htm"
TITLE="13.5. Using Classes as Structs"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_04.htm"
TITLE="13.3. Managing Instance Data"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.3. Managing Instance Data"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"
>Chapter 13<BR>Classes, Objects, and Ties</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_06.htm"
TITLE="13.5. Using Classes as Structs"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.5. Using Classes as Structs"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-chap13_managing_1"
>13.4. Managing Class Data</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-581"
>Problem<EM
CLASS="emphasis"
></EM
><A
CLASS="indexterm"
NAME="ch13-idx-1000004515-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004515-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004515-2"
></A
></A
></H3
><P
CLASS="para"
>You need a method to be called on behalf of the whole class, not just on one object. This might be a procedural request, or it might be a global data attribute shared by all instances of the class.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-587"
>Solution</A
></H3
><P
CLASS="para"
>Instead of expecting a reference as their first argument as object methods do, <A
CLASS="indexterm"
NAME="ch13-idx-1000004519-0"
></A
>class methods expect a string containing name of the class. Class methods access package data, not object data, as in the <CODE
CLASS="literal"
>population</CODE
> method shown here:</P
><PRE
CLASS="programlisting"
>package Person;

$Body_Count = 0; 

sub population { return $Body_Count }

sub new {                                   # constructor
    $Body_Count++;
    return bless({}, shift);
}

sub DESTROY { --$BodyCount }                # destructor

# later, the user can say this:
package main;

for (1..10) { push @people, Person-&gt;new }
printf &quot;There are %d people alive.\n&quot;, Person-&gt;population();

<B
CLASS="emphasis.bold"
>There are 10 people alive.</B
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-633"
>Discussion</A
></H3
><P
CLASS="para"
>Normally, each object has its own complete state stored within itself. The value of a data attribute in one object is unrelated to the value that attribute might have in another instance of the same class. For example, setting <EM
CLASS="emphasis"
>her</EM
> gender here does nothing to <EM
CLASS="emphasis"
>his</EM
> gender, because they are different objects with distinct states:</P
><PRE
CLASS="programlisting"
>$him = Person-&gt;<CODE
CLASS="literal"
>new()</CODE
>;
$him-&gt;gender(&quot;male&quot;);

$her = Person-&gt;<CODE
CLASS="literal"
>new()</CODE
>;
$her-&gt;gender(&quot;female&quot;);</PRE
><P
CLASS="para"
>Imagine a classwide attribute where changing the attribute for one instance changes it for all of them. Just as some programmers prefer capitalized global variables, some prefer uppercase names when the method affects class data instead of instance data. Here's an example of using a class method called <CODE
CLASS="literal"
>Max_Bounds</CODE
>:</P
><PRE
CLASS="programlisting"
>FixedArray-&gt;Max_Bounds(100);                # set for whole class
$alpha = FixedArray-&gt;new();
printf &quot;Bound on alpha is %d\n&quot;, $alpha-&gt;Max_Bounds();
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>100</I
></CODE
></B
></CODE
>
$beta = FixedArray-&gt;new();
$beta-&gt;Max_Bounds(50);                      # still sets for whole class
printf &quot;Bound on alpha is %d\n&quot;, $alpha-&gt;Max_Bounds();
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>50</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>The implementation is simple:</P
><PRE
CLASS="programlisting"
>package FixedArray;
$Bounds = 7;  # default
sub new { bless( {}, shift ) }
sub Max_Bounds {
    my $proto  = shift;
    $Bounds    = shift if @_;          # allow updates
    return $Bounds;
} </PRE
><P
CLASS="para"
>To make the value effectively read only, simply remove the update possibility, as in:</P
><PRE
CLASS="programlisting"
>sub Max_Bounds { $Bounds }</PRE
><P
CLASS="para"
>If you're deeply paranoid, make <CODE
CLASS="literal"
>$Bounds</CODE
> a lexical variable private to the scope of the file containing the class. Then no one could say <CODE
CLASS="literal"
>$FixedArray::Bounds</CODE
> to discover its values. They'd be forced to go through the method interface instead.</P
><P
CLASS="para"
>Here's a tip to help build scalable classes: store object data on the object's namespace (in the hash), and store class data in the class namespace (package variables or file-scoped lexicals). Only class methods should directly access classwide attributes. Object methods should only access instance data. If the object method needs access to class data, its constructor should store a reference to that data in the object. Here's an example:</P
><PRE
CLASS="programlisting"
>sub new {
    my $class = shift;
    my $self = bless({}, $class);
    $self-&gt;{Max_Bounds_ref} = \$Bounds;
    return $self;
} <EM
CLASS="emphasis"
></EM
><A
CLASS="indexterm"
NAME="ch13-idx-1000004521-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004521-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004521-2"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-705"
>See Also</A
></H3
><P
CLASS="para"
><I
CLASS="filename"
>perltoot </I
>(1), <I
CLASS="filename"
>perlobj </I
>(1), and <I
CLASS="filename"
>perlbot </I
>(1); the section on <A
CLASS="olink"
HREF="../prog/ch05_05.htm"
>"Class Context and the Object"</A
> in <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <A
CLASS="xref"
HREF="ch13_04.htm"
TITLE="Managing Instance Data"
>Recipe 13.3</A
>; the <CODE
CLASS="literal"
>places</CODE
> method in the <A
CLASS="xref"
HREF="ch13_15.htm"
TITLE="Example: Overloaded FixNum Class"
>"Example: Overloaded FixNum Class</A
>" example in <A
CLASS="xref"
HREF="ch13_15.htm"
TITLE="Overloading Operators"
>Recipe 13.14</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_04.htm"
TITLE="13.3. Managing Instance Data"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.3. Managing Instance Data"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_06.htm"
TITLE="13.5. Using Classes as Structs"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.5. Using Classes as Structs"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>13.3. Managing Instance Data</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>13.5. Using Classes as Structs</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
