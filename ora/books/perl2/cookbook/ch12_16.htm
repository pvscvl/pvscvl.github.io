<HTML
><HEAD
>
<TITLE>Recipe 12.15. Using h2xs to Make a Module with C Code (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:41:59Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"><LINK
REL="prev"
HREF="ch12_15.htm"
TITLE="12.14. Using h2ph to Translate C #include Files"><LINK
REL="next"
HREF="ch12_17.htm"
TITLE="12.16. Documenting Your Module with Pod"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_15.htm"
TITLE="12.14. Using h2ph to Translate C #include Files"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.14. Using h2ph to Translate C #include Files"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"
>Chapter 12<BR>Packages, Libraries, and Modules</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_17.htm"
TITLE="12.16. Documenting Your Module with Pod"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.16. Documenting Your Module with Pod"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-31357"
>12.15. Using h2xs to Make a Module with C Code</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-1518"
>Problem</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-1000005283-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005283-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005283-2"
></A
>You'd like to access your system's unique C functions from Perl.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-1524"
>Solution</A
></H3
><P
CLASS="para"
>Use the <EM
CLASS="emphasis"
>h2xs</EM
> tool to generate the necessary template files, fill the files in appropriately, and then type:</P
><PRE
CLASS="programlisting"
>% perl Makefile.PL
% make</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-1534"
>Discussion</A
></H3
><P
CLASS="para"
>A Perl module need not be written solely in Perl. As with any other module, first pick a module name and use <EM
CLASS="emphasis"
>h2xs</EM
> on it. We'll make a <CODE
CLASS="literal"
>FineTime::time</CODE
> function with the same semantics as in the previous recipe, but this time around, we'll implement it using real C.</P
><P
CLASS="para"
>First, we run the following command:</P
><PRE
CLASS="programlisting"
>% h2xs -cn FineTime</PRE
><P
CLASS="para"
>If we had a <EM
CLASS="emphasis"
>.h</EM
> file with function prototype declarations, we could include that, but because we're writing this one from scratch, we'll use the <B
CLASS="emphasis.bold"
>-c</B
> flag to omit building code to translate any <CODE
CLASS="literal"
>#define</CODE
> symbols. The <B
CLASS="emphasis.bold"
>-n</B
> flag says to create a module directory named <EM
CLASS="emphasis"
>FineTime/</EM
>, which will have the following files:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Manifest</EM
></P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>List of files in the distribution</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Changes</EM
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>change log</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Makefile.PL</EM
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>a meta-makefile</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><EM
CLASS="emphasis"
>FineTime.pm</EM
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>the Perl parts</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><EM
CLASS="emphasis"
>FineTime.xs</EM
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>the soon-to-be C parts</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><EM
CLASS="emphasis"
>test.pl</EM
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>a test driver</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Before we can type <CODE
CLASS="literal"
>make</CODE
>, we'll have to generate a <CODE
CLASS="literal"
>Makefile</CODE
> based on our system's configuration using the <EM
CLASS="emphasis"
>Makefile.PL</EM
> template. Here's how to do that:</P
><PRE
CLASS="programlisting"
>% perl Makefile.PL</PRE
><P
CLASS="para"
>If the <A
CLASS="indexterm"
NAME="ch12-idx-1000005289-0"
></A
>XS code calls library code that isn't in the normal set of libraries Perl links from, add one more line to <EM
CLASS="emphasis"
>Makefile.PL</EM
> first. For example, if we wanted to link against the <EM
CLASS="emphasis"
>librpm.a</EM
> library, which lives in the <EM
CLASS="emphasis"
>/usr/redhat/lib</EM
> directory, we'd change the line of <EM
CLASS="emphasis"
>Makefile.PL</EM
> that reads:</P
><PRE
CLASS="programlisting"
>'LIBS'      =&gt; [''],   # e.g., '-lm'</PRE
><P
CLASS="para"
>so that it says:</P
><PRE
CLASS="programlisting"
>'LIBS'      =&gt; ['-L/usr/redhat/lib -lrpm'],</PRE
><P
CLASS="para"
>If the module is to be installed somewhere other than the local <EM
CLASS="emphasis"
>site_lib</EM
> directory, specify that on the command line:</P
><PRE
CLASS="programlisting"
>% perl Makefile.PL LIB=~/perllib</PRE
><P
CLASS="para"
>Finally, edit the <EM
CLASS="emphasis"
>FineTime.pm</EM
> and <EM
CLASS="emphasis"
>FineTime.xs</EM
> files. In the first case, most of the work has been done for us. We just set up the export list with the function to be exported. This time we put it in <CODE
CLASS="literal"
>@EXPORT_OK</CODE
> so that if the user wants the function, they must ask for it by name. Here's <EM
CLASS="emphasis"
>FineTime.pm</EM
>:</P
><PRE
CLASS="programlisting"
>package FineTime;
use strict;
use vars qw($VERSION @ISA @EXPORT_OK);
require Exporter;
require DynaLoader;
@ISA = qw(Exporter DynaLoader);
@EXPORT_OK = qw(time);
$VERSION = '0.01';
bootstrap FineTime $VERSION;
1;</PRE
><P
CLASS="para"
>The<I
CLASS="filename"
> make</I
> process will automatically translate <EM
CLASS="emphasis"
>FineTime.xs</EM
> into a <EM
CLASS="emphasis"
>FineTime.c</EM
> file and eventually into a shared library, probably called <EM
CLASS="emphasis"
>FineTime.so</EM
> on most platforms. The utility that does this translation is <EM
CLASS="emphasis"
>xsubpp</EM
>, which is described in its own manpage and <I
CLASS="filename"
>perlxstut </I
>(1). The build will call <EM
CLASS="emphasis"
>xsubpp</EM
> automatically.</P
><P
CLASS="para"
>Besides a strong C background, you also need to understand the C-to-Perl interface, called XS (external subroutine). The details and nuances of XS are beyond the scope of this book. The automatically generated <EM
CLASS="emphasis"
>FineTime.xs</EM
> had the Perl-specific include files in it, as well as the MODULE declaration. We've added some extra includes and written the code for the new <CODE
CLASS="literal"
>time</CODE
> function. Although this doesn't look entirely like C, it will, once <EM
CLASS="emphasis"
>xsubpp</EM
> gets done with it.</P
><P
CLASS="para"
>Here's the <EM
CLASS="emphasis"
>FineTime.xs</EM
> we used:</P
><PRE
CLASS="programlisting"
>#include &lt;unistd.h&gt;
#include &lt;sys/time.h&gt;
#include &quot;EXTERN.h&quot;
#include &quot;perl.h&quot;
#include &quot;XSUB.h&quot;

MODULE = FineTime           PACKAGE = FineTime

double
time()
    CODE:
        struct timeval tv;
        gettimeofday(&amp;tv,0);
        RETVAL = tv.tv_sec + ((double) tv.tv_usec) / 1000000;
    OUTPUT:
        RETVAL</PRE
><P
CLASS="para"
>Defining a function by the same name as one from the standard C library won't cause a problem when it's compiled because that's not its real name. That's just what Perl calls it. The C linker will see it as <CODE
CLASS="literal"
>XS_FineTime_time</CODE
>, so no conflict exists.</P
><P
CLASS="para"
>Here's what happened with make install (with some edits):</P
><PRE
CLASS="programlisting"
>% make install
mkdir ./blib/lib/auto/FineTime
cp FineTime.pm ./blib/lib/FineTime.pm
/usr/local/bin/perl -I/usr/lib/perl5/i686-linux/5.00403  -I/usr/lib/perl5
/usr/lib/perl5/ExtUtils/xsubpp -typemap 
    /usr/lib/perl5/ExtUtils/typemap FineTime.xs
FineTime.tc &amp;&amp; mv FineTime.tc FineTime.ccc -c -Dbool=char -DHAS_BOOL 
    -O2-DVERSION=\&quot;0.01\&quot; -DXS_VERSION=\&quot;0.01\&quot; -fpic 
    -I/usr/lib/perl5/i686-linux/5.00403/CORE  
FineTime.cRunning Mkbootstrap for FineTime ()
chmod 644 FineTime.bs
LD_RUN_PATH=&quot;&quot; cc -o blib/arch/auto/FineTime/FineTime.so 
    -shared -L/usr/local/lib FineTime.o
chmod 755 blib/arch/auto/FineTime/FineTime.so
cp FineTime.bs ./blib/arch/auto/FineTime/FineTime.bs
chmod 644 blib/arch/auto/FineTime/FineTime.bs
Installing /home/tchrist/perllib/i686-linux/./auto/FineTime/FineTime.so
Installing /home/tchrist/perllib/i686-linux/./auto/FineTime/FineTime.bs
Installing /home/tchrist/perllib/./FineTime.pm
Writing /home/tchrist/perllib/i686-linux/auto/FineTime/.packlist
Appending installation info to /home/tchrist/perllib/i686-linux/perllocal.pod</PRE
><P
CLASS="para"
>Once this is all done, we'll be able to type something like this into the shell:</P
><PRE
CLASS="programlisting"
>% perl -I ~/perllib -MFineTime=time -le '1 while print time()' | head
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>888177070.090978</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>888177070.09132</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>888177070.091389</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>888177070.091453</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>888177070.091515</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>888177070.091577</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>888177070.091639</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>888177070.0917</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>888177070.091763</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>888177070.091864</I
></CODE
></B
></CODE
><A
CLASS="indexterm"
NAME="ch12-idx-1000005291-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005291-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005291-2"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-1714"
>See Also</A
></H3
><P
CLASS="para"
>Chapters 18 through 20 in <A
CLASS="citetitle"
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
><CITE
CLASS="citetitle"
>Advanced Perl Programming</CITE
></A
>; <I
CLASS="filename"
>perlxstut </I
>(1) and <I
CLASS="filename"
>perlxs</I
> (1) to learn how to call C from Perl; <I
CLASS="filename"
>perlcall </I
>(1) and <I
CLASS="filename"
>perlguts</I
> (1) to understand the internal Perl API; <I
CLASS="filename"
>perlembed</I
> (1) to learn how to call Perl from C; the the documentation for the standard ExtUtils::MakeMaker module, <I
CLASS="filename"
>h2ph </I
>(1) and <I
CLASS="filename"
>xsubpp</I
> (1); <A
CLASS="systemitem.url"
HREF="../../../../../../../www.perl.com/CPAN/authors/Dean_Roehrich/"
>http://www.perl.com/CPAN/authors/Dean_Roehrich/</A
>, which contains Dean's comprehensive XS cookbook that includes directions on interface with C++</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_15.htm"
TITLE="12.14. Using h2ph to Translate C #include Files"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.14. Using h2ph to Translate C #include Files"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_17.htm"
TITLE="12.16. Documenting Your Module with Pod"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.16. Documenting Your Module with Pod"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.14. Using h2ph to Translate C #include Files</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>12.16. Documenting Your Module with Pod</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
