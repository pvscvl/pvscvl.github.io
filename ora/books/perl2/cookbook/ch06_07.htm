<HTML
><HEAD
>
<TITLE>Recipe 6.6. Matching Multiple Lines (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:33:48Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"><LINK
REL="prev"
HREF="ch06_06.htm"
TITLE="6.5. Finding the Nth Occurrence of a Match"><LINK
REL="next"
HREF="ch06_08.htm"
TITLE="6.7. Reading Records with a Pattern Separator"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_06.htm"
TITLE="6.5. Finding the Nth Occurrence of a Match"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.5. Finding the Nth Occurrence of a Match"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"
>Chapter 6<BR>Pattern Matching</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_08.htm"
TITLE="6.7. Reading Records with a Pattern Separator"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.7. Reading Records with a Pattern Separator"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-14503"
>6.6. Matching Multiple Lines</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-755"
>Problem<A
CLASS="indexterm"
NAME="ch06-idx-1000007578-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007578-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007578-2"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007578-3"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007578-4"
></A
></A
></H3
><P
CLASS="para"
>You want to use regular expressions on a string containing more than one line, but the special characters <CODE
CLASS="literal"
>.</CODE
> (any character but newline), <CODE
CLASS="literal"
>^</CODE
> (start of string), and <CODE
CLASS="literal"
>$</CODE
> (end of string) don't seem to work for you. This might happen if you're reading in multiline records or the whole file at once.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-761"
>Solution</A
></H3
><P
CLASS="para"
>Use <CODE
CLASS="literal"
>/m</CODE
><A
CLASS="indexterm"
NAME="ch06-idx-1000007582-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007582-1"
></A
>, <CODE
CLASS="literal"
>/s</CODE
>, or both as pattern modifiers. <CODE
CLASS="literal"
>/s</CODE
> lets <CODE
CLASS="literal"
>.</CODE
> match newline (normally it doesn't). If the string had more than one line in it, then <CODE
CLASS="literal"
>/foo.*bar/s</CODE
> could match a <CODE
CLASS="literal"
>&quot;foo&quot;</CODE
> on one line and a <CODE
CLASS="literal"
>&quot;bar&quot;</CODE
> on a following line. This doesn't affect dots in character classes like <CODE
CLASS="literal"
>[#%.]</CODE
>, since they are regular periods anyway.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>/m</CODE
> modifier lets <CODE
CLASS="literal"
>^</CODE
> and <CODE
CLASS="literal"
>$</CODE
> match next to a newline. <CODE
CLASS="literal"
>/^=head[1-7]$/m</CODE
> would match that pattern not just at the beginning of the record, but anywhere right after a newline as well.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-769"
>Discussion</A
></H3
><P
CLASS="para"
>A common, brute-force approach to parsing documents where newlines are not significant is to read the file one paragraph at a time (or sometimes even the entire file as one string) and then extract tokens one by one. To match across newlines, you need to make <CODE
CLASS="literal"
>.</CODE
> match a newline; it ordinarily does not. In cases where newlines are important and you've read more than one line into a string, you'll probably prefer to have <CODE
CLASS="literal"
>^</CODE
> and <CODE
CLASS="literal"
>$</CODE
> match beginning- and end-of-line, not just beginning- and end-of-string.</P
><P
CLASS="para"
>The difference between <CODE
CLASS="literal"
>/m</CODE
> and <CODE
CLASS="literal"
>/s</CODE
> is important: <CODE
CLASS="literal"
>/m</CODE
> makes <CODE
CLASS="literal"
>^</CODE
> and <CODE
CLASS="literal"
>$</CODE
> match next to a newline, while <CODE
CLASS="literal"
>/s</CODE
> makes <CODE
CLASS="literal"
>.</CODE
> match newlines. You can even use them together &nbsp;- they're not mutually exclusive options.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch06_07.htm"
TITLE="killtags"
>Example 6.2</A
> creates a filter to strip HTML tags out of each file in <CODE
CLASS="literal"
>@ARGV</CODE
> and send the results to STDOUT. First we undefine the record separator so each read operation fetches one entire file. (There could be more than one file, because <CODE
CLASS="literal"
>@ARGV</CODE
> has several arguments in it. In this case, each read would get a whole file.) Then we strip out instances of beginning and ending angle brackets, plus anything in between them. We can't use just <CODE
CLASS="literal"
>.*</CODE
> for two reasons: first, it would match closing angle brackets, and second, the dot wouldn't cross newline boundaries. Using <CODE
CLASS="literal"
>.*?</CODE
> in conjunction with <CODE
CLASS="literal"
>/s</CODE
> solves these problems &nbsp;-  at least in this case.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch06-10877"
>Example 6.2: killtags</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# <A
CLASS="indexterm"
NAME="ch06-idx-1000007791-0"
></A
>killtags - very bad html tag killer
undef $/;           # each read is whole file
while (&lt;&gt;) {        # get one whole file at a time
    s/&lt;.*?&gt;//gs;    # strip tags (terribly)
    print;          # print file to STDOUT
}</PRE
></DIV
><P
CLASS="para"
>Because this is just a single character, it would be much faster to use <CODE
CLASS="literal"
>s/&lt;[^&gt;]*&gt;//gs,</CODE
> but that's still a naïve approach: It doesn't correctly handle tags inside HTML comments or angle brackets in quotes (&lt;<CODE
CLASS="literal"
>IMG</CODE
> <CODE
CLASS="literal"
>SRC=&quot;here.gif&quot;</CODE
> <CODE
CLASS="literal"
>ALT=&quot;&lt;&lt;Ooh</CODE
> <CODE
CLASS="literal"
>la</CODE
> <CODE
CLASS="literal"
>la!&gt;&gt;&quot;&gt;</CODE
>). <A
CLASS="xref"
HREF="ch20_07.htm"
TITLE="Extracting or Removing HTML Tags"
>Recipe 20.6</A
> explains how to avoid these problems.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch06_07.htm"
TITLE="headerfy"
>Example 6.3</A
> takes a plain text document and looks for lines at the start of paragraphs that look like <CODE
CLASS="literal"
>&quot;Chapter</CODE
> <CODE
CLASS="literal"
>20:</CODE
> <CODE
CLASS="literal"
>Better</CODE
> <CODE
CLASS="literal"
>Living</CODE
> <CODE
CLASS="literal"
>Through</CODE
> <CODE
CLASS="literal"
>Chemisery&quot;</CODE
>. It wraps these with an appropriate HTML level one header. Because the pattern is relatively complex, we use the <CODE
CLASS="literal"
>/x</CODE
> modifier so we can embed whitespace and comments.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch06-31611"
>Example 6.3: headerfy</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# <A
CLASS="indexterm"
NAME="ch06-idx-1000007793-0"
></A
>headerfy: change certain chapter headers to html
$/ = '';
while ( &lt;&gt; ) {              # fetch a paragraph
    s{
        \A                  # start of record
        (                   # capture in $1
            Chapter         # text string
            \s+             # mandatory whitespace
            \d+             # decimal number
            \s*             # optional whitespace
            :               # a real colon
            . *             # anything not a newline till end of line
        )
    }{&lt;H1&gt;$1&lt;/H1&gt;}gx;
    print;
}</PRE
></DIV
><P
CLASS="para"
>Here it is as a one-liner from the command line if those extended comments just get in the way of understanding:</P
><PRE
CLASS="programlisting"
>% perl -00pe 's{\A(Chapter\s+\d+\s*:.*)}{&lt;H1&gt;$1&lt;/H1&gt;}gx' datafile</PRE
><P
CLASS="para"
>This problem is interesting because we need to be able to specify both start-of-record and end-of-line in the same pattern. We could normally use <CODE
CLASS="literal"
>^</CODE
> for start-of-record, but we need <CODE
CLASS="literal"
>$</CODE
> to indicate not only end-of-record, but also end-of-line as well. We add the <CODE
CLASS="literal"
>/m</CODE
> modifier, which changes both <CODE
CLASS="literal"
>^</CODE
> and <CODE
CLASS="literal"
>$</CODE
>. So instead of using <CODE
CLASS="literal"
>^</CODE
> to match beginning-of-record, we use <CODE
CLASS="literal"
>\A</CODE
> instead. (We're not using it here, but in case you're interested, the version of <CODE
CLASS="literal"
>$</CODE
> that always matches end-of-record even in the presence of <CODE
CLASS="literal"
>/m</CODE
> is <CODE
CLASS="literal"
>\Z</CODE
>.)</P
><P
CLASS="para"
>The following example demonstrates using both <CODE
CLASS="literal"
>/s</CODE
> and <CODE
CLASS="literal"
>/m</CODE
> together. That's because we want <CODE
CLASS="literal"
>^</CODE
> to match the beginning of any line in the paragraph and also want dot to be able to match a newline. (Because they are unrelated, using them together is simply the sum of the parts. If you have the questionable habit of using "single line" as a mnemonic for <CODE
CLASS="literal"
>/s</CODE
> and "multiple line" for <CODE
CLASS="literal"
>/m </CODE
>, then you may think you can't use them together.) The predefined variable <CODE
CLASS="literal"
>$.</CODE
> represents the record number of the last read file. The predefined variable <CODE
CLASS="literal"
>$ARGV</CODE
> is the file automatically opened by implicit <CODE
CLASS="literal"
>&lt;ARGV&gt;</CODE
> processing.</P
><PRE
CLASS="programlisting"
>$/ = '';            # paragraph read mode for readline access
while (&lt;ARGV&gt;) {
    while (m#^START(.*?)^END#sm) {  # /s makes . span line boundaries
                                    # /m makes ^ match near newlines
        print &quot;chunk $. in $ARGV has &lt;&lt;$1&gt;&gt;\n&quot;;
    }
}</PRE
><P
CLASS="para"
>If you've already committed to using the <CODE
CLASS="literal"
>/m</CODE
> modifier, you can use <CODE
CLASS="literal"
>\A</CODE
> and <CODE
CLASS="literal"
>\Z</CODE
> to get the old meanings of <CODE
CLASS="literal"
>^</CODE
> and <CODE
CLASS="literal"
>$</CODE
> respectively. But what if you've used the <CODE
CLASS="literal"
>/s</CODE
> modifier and want to get the original meaning of <CODE
CLASS="literal"
>.</CODE
>? You can use <CODE
CLASS="literal"
>[^\n]</CODE
>. If you don't care to use <CODE
CLASS="literal"
>/s</CODE
> but want the notion of matching any character, you could construct a character class that matches any one byte, such as <CODE
CLASS="literal"
>[\000-\377]</CODE
> or even <CODE
CLASS="literal"
>[\d\D]</CODE
>. You can't use <CODE
CLASS="literal"
>[.\n]</CODE
> because <CODE
CLASS="literal"
>.</CODE
> is not special in a character <CODE
CLASS="literal"
></CODE
><A
CLASS="indexterm"
NAME="ch06-idx-1000007584-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007584-1"
></A
>class.<A
CLASS="indexterm"
NAME="ch06-idx-1000007573-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007573-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007573-2"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007573-3"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-855"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>$/</CODE
> variable in <I
CLASS="filename"
>perlvar  </I
>(1) and in the <A
CLASS="olink"
HREF="../prog/ch02_09.htm"
>"Special Variables"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the <CODE
CLASS="literal"
>/s</CODE
> and <CODE
CLASS="literal"
>/m</CODE
> modifiers in <I
CLASS="filename"
>perlre </I
>(1) and <A
CLASS="olink"
HREF="../prog/ch02_04.htm"
>"the fine print"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the "String Anchors" section of <CITE
CLASS="citetitle"
>Mastering Regular Expressions</CITE
>; we talk more about the special variable <CODE
CLASS="literal"
>$/</CODE
> in <A
CLASS="xref"
HREF="ch08_01.htm"
TITLE="File Contents"
>Chapter 8</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_06.htm"
TITLE="6.5. Finding the Nth Occurrence of a Match"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.5. Finding the Nth Occurrence of a Match"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_08.htm"
TITLE="6.7. Reading Records with a Pattern Separator"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.7. Reading Records with a Pattern Separator"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.5. Finding the Nth Occurrence of a Match</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6.7. Reading Records with a Pattern Separator</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
