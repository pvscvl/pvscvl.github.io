<HTML
><HEAD
>
<TITLE>Recipe 15.1. Parsing Program Arguments (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:43:14Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch15_01.htm"
TITLE="15. User Interfaces"><LINK
REL="prev"
HREF="ch15_01.htm"
TITLE="15.0. Introduction"><LINK
REL="next"
HREF="ch15_03.htm"
TITLE="15.2. Testing Whether a Program Is Running Interactively"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_01.htm"
TITLE="15.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch15_01.htm"
TITLE="15. User Interfaces"
>Chapter 15<BR>User Interfaces</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_03.htm"
TITLE="15.2. Testing Whether a Program Is Running Interactively"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.2. Testing Whether a Program Is Running Interactively"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch15-34446"
>15.1. Parsing Program Arguments</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-pgfId-83"
>Problem<A
CLASS="indexterm"
NAME="ch15-idx-1000005023-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005023-1"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005023-2"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005023-3"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005023-4"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005023-5"
></A
></A
></H3
><P
CLASS="para"
>You want to let users change your program's behavior by giving options on the command line. For instance, you want to allow the user to control the level of output that your program produces with a <B
CLASS="emphasis.bold"
>-v</B
> (verbose) option.<A
CLASS="indexterm"
NAME="ch15-idx-1000005062-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-pgfId-89"
>Solution</A
></H3
><P
CLASS="para"
>Use the standard Getopt::Std module to permit single-character options:</P
><PRE
CLASS="programlisting"
>use Getopt::Std;

# -v ARG, -D ARG, -o ARG, sets $opt_v, $opt_D, $opt_o
getopt(&quot;vDo&quot;);              
# -v ARG, -D ARG, -o ARG, sets $args{v}, $args{D}, $args{o}
getopt(&quot;vDo&quot;, \%args);

getopts(&quot;vDo:&quot;);         # -v, -D, -o ARG, sets $opt_v, $opt_D, $opt_o
getopts(&quot;vDo:&quot;, \%args); # -v, -D, -o ARG, sets $args{v}, $args{D}, $args{o}</PRE
><P
CLASS="para"
>Or, use the standard <A
CLASS="indexterm"
NAME="ch15-idx-1000005033-0"
></A
>Getopt::Long module to permit named arguments:</P
><PRE
CLASS="programlisting"
>use Getopt::Long;

GetOptions( &quot;verbose&quot;  =&gt; \$verbose,     # --verbose
            &quot;Debug&quot;    =&gt; \$debug,       # --Debug
            &quot;output=s&quot; =&gt; \$output );    # --output=string or --output=string</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-pgfId-119"
>Discussion</A
></H3
><P
CLASS="para"
>Most traditional programs like <EM
CLASS="emphasis"
>ls</EM
> and <EM
CLASS="emphasis"
>rm</EM
> take single-character options (also known as flags or switches), such as <B
CLASS="emphasis.bold"
>-l</B
> and <B
CLASS="emphasis.bold"
>-r</B
>. In the case of <EM
CLASS="emphasis"
>ls -l</EM
> and <EM
CLASS="emphasis"
>rm -r</EM
>, the argument is Boolean: either it is present or it isn't. Contrast this with <EM
CLASS="emphasis"
>gcc -o compiledfile source.c</EM
>, where <EM
CLASS="emphasis"
>compiledfile</EM
> is a value associated with the option <B
CLASS="emphasis.bold"
>-o</B
>. We can combine Boolean options into a single option in any order. For example:</P
><PRE
CLASS="programlisting"
>% rm -r -f /tmp/testdir</PRE
><P
CLASS="para"
>Another way of saying this is:</P
><PRE
CLASS="programlisting"
>% rm -rf /tmp/testdir</PRE
><P
CLASS="para"
>The Getopt::Std module, part of the standard Perl distribution, parses these types of traditional options. Its <CODE
CLASS="literal"
>getopt</CODE
><A
CLASS="indexterm"
NAME="ch15-idx-1000005035-0"
></A
> function takes a single string of characters, each corresponding to an option that takes a value, parses the command-line arguments stored in <CODE
CLASS="literal"
>@ARGV</CODE
>, and sets a global variable for each option. For example, the value for the <B
CLASS="emphasis.bold"
>-D</B
> option will be stored in <CODE
CLASS="literal"
>$opt_D</CODE
>. All options parsed though <CODE
CLASS="literal"
>getopt</CODE
> are value options, not Boolean options.</P
><P
CLASS="para"
>Getopt::Std also provides the <CODE
CLASS="literal"
>getopts</CODE
><A
CLASS="indexterm"
NAME="ch15-idx-1000005034-0"
></A
> function, which lets you specify whether each option is Boolean or takes a value. Arguments that take a value, like the <B
CLASS="emphasis.bold"
>-o</B
> option to <EM
CLASS="emphasis"
>gcc</EM
>, are indicated by a <CODE
CLASS="literal"
>:</CODE
>, as in this code:</P
><PRE
CLASS="programlisting"
>use Getopt::Std;
getopts(&quot;o:&quot;);
if ($opt_o) {
    print &quot;Writing output to $opt_o&quot;;
}</PRE
><P
CLASS="para"
>Both <CODE
CLASS="literal"
>getopt</CODE
> and <CODE
CLASS="literal"
>getopts</CODE
> can take a second argument, a reference to a hash. If present, option values are stored in <CODE
CLASS="literal"
>$hash{X}</CODE
> instead of <CODE
CLASS="literal"
>$opt_X</CODE
>:</P
><PRE
CLASS="programlisting"
>use Getopt::Std;

%option = ();
getopts(&quot;Do:&quot;, \%option);

if ($option{D}) {
    print &quot;Debugging mode enabled.\n&quot;;
}

 # if not set, set output to &quot;-&quot;.  opening &quot;-&quot; for writing
 # means STDOUT
 $option{o} = &quot;-&quot; unless defined $option{o};
                             
print &quot;Writing output to file $option{o}\n&quot; unless $option{o} eq &quot;-&quot;;
open(STDOUT, &quot;&gt; $option{o}&quot;)
     or die &quot;Can't open $option{o} for output: $!\n&quot;;</PRE
><P
CLASS="para"
>You can specify some programs' options using full words instead of single characters. These options are (usually) indicated with two dashes instead of one:</P
><PRE
CLASS="programlisting"
>% gnutar --extract --file latest.tar</PRE
><P
CLASS="para"
>The value for the <B
CLASS="emphasis.bold"
>- -file</B
> option could also be given with an equals sign:</P
><PRE
CLASS="programlisting"
>% gnutar --extract --file=latest.tar</PRE
><P
CLASS="para"
>The Getopt::Long module's <CODE
CLASS="literal"
>GetOptions</CODE
><A
CLASS="indexterm"
NAME="ch15-idx-1000005036-0"
></A
> function parses this style of options. It takes a hash whose keys are options and values are references to scalar variables:</P
><PRE
CLASS="programlisting"
>use Getopt::Long;

GetOptions( &quot;extract&quot; =&gt; \$extract,
            &quot;file=s&quot;  =&gt; \$file );

if ($extract) {
    print &quot;I'm extracting.\n&quot;;
}

die &quot;I wish I had a file&quot; unless defined $file;
print &quot;Working on the file $file\n&quot;;</PRE
><P
CLASS="para"
>If a key in the hash is just an option name, it's a Boolean option. The corresponding variable will be set to false if the option wasn't given, or to <CODE
CLASS="literal"
>1</CODE
> if it was. <A
CLASS="indexterm"
NAME="ch15-idx-1000005224-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005224-1"
></A
>Getopt::Long provides fancier options than just the Boolean and value of Getopt::Std. Here's what the option specifier can look like:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Specifier</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Value?</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Comment</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>option</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>No</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Given as -  -<CODE
CLASS="literal"
>option</CODE
> or not at all</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>option!</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>No</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>May be given as -  -<CODE
CLASS="literal"
>option</CODE
> or -  -<CODE
CLASS="literal"
>nooption</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>option=s</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Mandatory string parameter: -  -<CODE
CLASS="literal"
>option</CODE
>=<CODE
CLASS="literal"
>somestring</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>option:s</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Optional string parameter: -  -<CODE
CLASS="literal"
>option</CODE
> or -  -<CODE
CLASS="literal"
>option</CODE
>=<CODE
CLASS="literal"
>somestring</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>option=i</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Mandatory integer parameter: -  -<CODE
CLASS="literal"
>option</CODE
>=<CODE
CLASS="literal"
>35</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>option:i</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Optional integer parameter: -  -<CODE
CLASS="literal"
>option</CODE
> or -  -<CODE
CLASS="literal"
>option</CODE
>=<CODE
CLASS="literal"
>35</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>option=f</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Mandatory floating point parameter: -  -<CODE
CLASS="literal"
>option</CODE
>=<CODE
CLASS="literal"
>3.141</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>option:f</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Yes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Optional floating point parameter: -  -<CODE
CLASS="literal"
>option</CODE
> or -  -<CODE
CLASS="literal"
>option</CODE
><A
CLASS="indexterm"
NAME="ch15-idx-1000005060-0"
></A
>=<CODE
CLASS="literal"
>3.141</CODE
><A
CLASS="indexterm"
NAME="ch15-idx-1000005025-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005025-1"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005025-2"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005025-3"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005025-4"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005025-5"
></A
></P
></TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-pgfId-229"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the standard Getopt::Long and Getopt::Std modules; examples of argument parsing by hand can be found in <A
CLASS="xref"
HREF="ch01_06.htm"
TITLE="Processing a String One Character at a Time"
>Recipe 1.5</A
>, <A
CLASS="xref"
HREF="ch01_18.htm"
TITLE="Program: fixstyle"
>Recipe 1.17</A
>, <A
CLASS="xref"
HREF="ch06_23.htm"
TITLE="Program: tcgrep"
>Recipe 6.22</A
>, <A
CLASS="xref"
HREF="ch07_08.htm"
TITLE="Writing a Filter"
>Recipe 7.7</A
>, <A
CLASS="xref"
HREF="ch08_20.htm"
TITLE="Program: tctee"
>Recipe 8.19</A
>, and <A
CLASS="xref"
HREF="ch15_13.htm"
TITLE="Managing the Screen"
>Recipe 15.12</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_01.htm"
TITLE="15.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_03.htm"
TITLE="15.2. Testing Whether a Program Is Running Interactively"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.2. Testing Whether a Program Is Running Interactively"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>15.0. Introduction</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>15.2. Testing Whether a Program Is Running Interactively</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
