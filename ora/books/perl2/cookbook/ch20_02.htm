<HTML
><HEAD
>
<TITLE>Recipe 20.1. Fetching a URL from a Perl Script (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:45:55Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch20_01.htm"
TITLE="20. Web Automation"><LINK
REL="prev"
HREF="ch20_01.htm"
TITLE="20.0. Introduction"><LINK
REL="next"
HREF="ch20_03.htm"
TITLE="20.2. Automating Form Submission"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_01.htm"
TITLE="20.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch20_01.htm"
TITLE="20. Web Automation"
>Chapter 20<BR>Web Automation</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_03.htm"
TITLE="20.2. Automating Form Submission"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.2. Automating Form Submission"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch20-16549"
>20.1. Fetching a URL from a Perl Script</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-103"
>Problem<A
CLASS="indexterm"
NAME="ch20-idx-1000002559-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002559-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002559-2"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002559-3"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002559-4"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002559-5"
></A
></A
></H3
><P
CLASS="para"
>You have a URL that you want to fetch from a script.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-109"
>Solution</A
></H3
><P
CLASS="para"
>Use the <CODE
CLASS="literal"
>get</CODE
> function from by the CPAN module LWP::Simple, part of LWP.</P
><PRE
CLASS="programlisting"
>use LWP::Simple;
$content = get($URL);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-119"
>Discussion</A
></H3
><P
CLASS="para"
>The right library makes life easier, and the LWP modules are the right ones for this task.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>get</CODE
> function from LWP::Simple returns <CODE
CLASS="literal"
>undef</CODE
> on error, so check for errors this way:</P
><PRE
CLASS="programlisting"
>use LWP::Simple;
unless (defined ($content = get $URL)) {
    die &quot;could not get $URL\n&quot;;
}</PRE
><P
CLASS="para"
>When it's run that way, however, you can't determine the cause of the error. For this and other elaborate processing, you'll have to go beyond LWP::Simple.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch20_02.htm"
TITLE="titlebytes"
>Example 20.1</A
> is a program that fetches a document remotely. If it fails, it prints out the error status line. Otherwise it prints out the document title and the number of bytes of content. We use three modules from LWP and one other from CPAN.</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>LWP::UserAgent <A
CLASS="indexterm"
NAME="ch20-idx-1000002569-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>This module creates a virtual browser. The object returned from the new constructor is used to make the actual request. We've set the name of our agent to "Schmozilla/v9.14 Platinum" just to give the remote webmaster browser-envy when they see it in their logs.</P
></DD
><DT
CLASS="term"
>HTTP::Request <A
CLASS="indexterm"
NAME="ch20-idx-1000002577-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>This module creates a request but doesn't send it. We create a GET request and set the referring page to a fictitious URL.</P
></DD
><DT
CLASS="term"
>HTTP::Response <A
CLASS="indexterm"
NAME="ch20-idx-1000002582-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>This is the object type returned when the user agent actually runs the request. We check it for errors and contents.</P
></DD
><DT
CLASS="term"
>URI::Heuristic <A
CLASS="indexterm"
NAME="ch20-idx-1000002587-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>This curious little module uses Netscape-style guessing algorithms to expand partial URLs. For example:</P
></DD
></DL
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>   Simple</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>    Guess</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>perl</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><EM
CLASS="emphasis"
>http://www.perl.com</EM
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>www.oreilly.com</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><EM
CLASS="emphasis"
>http://www.oreilly.com</EM
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>ftp.funet.fi</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><EM
CLASS="emphasis"
>ftp://ftp.funet.fi</EM
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>/etc/passwd</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><EM
CLASS="emphasis"
>file:/etc/passwd</EM
></P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Although these aren't legitimate URLs (their format is not in the URI specification), Netscape tries to guess the URL they stand for. Because Netscape does it, most other browsers do too.</P
><P
CLASS="para"
>The source is in <A
CLASS="xref"
HREF="ch20_02.htm"
TITLE="titlebytes"
>Example 20.1</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch20-33755"
>Example 20.1: titlebytes</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w 
# titlebytes - find the title and size of documents 
use LWP::UserAgent; 
use HTTP::Request; 
use HTTP::Response; 
use URI::Heuristic;
my $raw_url = shift                      or die &quot;usage: $0 url\n&quot;; 
my $url = URI::Heuristic::uf_urlstr($raw_url);
$| = 1;                                  # to flush next line 
printf &quot;%s =&gt;\n\t&quot;, $url;
my $ua = LWP::UserAgent-&gt;new(); 
$ua-&gt;agent(&quot;Schmozilla/v9.14 Platinum&quot;); # give it time, it'll get there
my $req = HTTP::Request-&gt;new(GET =&gt; $url); 
$req-&gt;referer(&quot;http://wizard.yellowbrick.oz&quot;);
                                         # perplex the log analysers
my $response = $ua-&gt;request($req);
if ($response-&gt;is_error()) {
     printf &quot; %s\n&quot;, $response-&gt;status_line;
 } else {
     my $count;
     my $bytes;
     my $content = $response-&gt;content();
     $bytes = length $content;
     $count = ($content =~ tr/\n/\n/);
     printf &quot;%s (%d lines, %d bytes)\n&quot;, $response-&gt;title(), $count, $bytes; } </PRE
></DIV
><P
CLASS="para"
>When run, the program produces output like this:</P
><PRE
CLASS="programlisting"
>% titlebytes http://www.tpj.com/
http://www.tpj.com/ =&gt;
    The Perl Journal (109 lines, 4530 bytes)</PRE
><P
CLASS="para"
>Yes, "<A
CLASS="indexterm"
NAME="ch20-idx-1000003762-0"
></A
>referer" is not how "referrer" should be spelled. The standards people got it wrong when they misspelled HTTP_REFERER. Please use two r's when referring to things in English.<A
CLASS="indexterm"
NAME="ch20-idx-1000002561-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002561-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002561-2"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002561-3"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002561-4"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002561-5"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-201"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the CPAN module LWP::Simple, and the <I
CLASS="filename"
>lwpcook </I
>(1) manpage that came with LWP; the documentation for the modules LWP::UserAgent, HTTP::Request, HTTP::Response, and URI::Heuristic; <A
CLASS="xref"
HREF="ch20_03.htm"
TITLE="Automating Form Submission"
>Recipe 20.2</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_01.htm"
TITLE="20.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_03.htm"
TITLE="20.2. Automating Form Submission"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.2. Automating Form Submission"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>20.0. Introduction</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>20.2. Automating Form Submission</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
