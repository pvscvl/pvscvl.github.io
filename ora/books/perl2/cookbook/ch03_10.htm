<HTML
><HEAD
>
<TITLE>Recipe 3.9. High-Resolution Timers (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:30:44Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_01.htm"
TITLE="3. Dates and Times"><LINK
REL="prev"
HREF="ch03_09.htm"
TITLE="3.8. Printing a Date"><LINK
REL="next"
HREF="ch03_11.htm"
TITLE="3.10. Short Sleeps"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_09.htm"
TITLE="3.8. Printing a Date"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.8. Printing a Date"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Dates and Times"
>Chapter 3<BR>Dates and Times</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_11.htm"
TITLE="3.10. Short Sleeps"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.10. Short Sleeps"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch03-89828"
>3.9. High-Resolution Timers</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-734"
>Problem <A
CLASS="indexterm"
NAME="ch03-idx-1000006355-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006355-1"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006355-2"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006355-3"
></A
></A
></H3
><P
CLASS="para"
>You need to measure time with a finer granularity than the full seconds that <CODE
CLASS="literal"
>time</CODE
> returns.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-740"
>Solution</A
></H3
><P
CLASS="para"
>This might not be possible. If your system supports both the <CODE
CLASS="literal"
>syscall</CODE
> function in Perl as well as a system call like <I
CLASS="filename"
>gettimeofday </I
>(2), then you could possibly use them to measure the time. The procedure for using <CODE
CLASS="literal"
>syscall</CODE
> varies from system to system. The Discussion has sample code using it, but this is not necessarily portable.</P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch03-idx-1000006356-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006356-1"
></A
>Time::HiRes module (available from CPAN) encapsulates this functionality for some systems:</P
><PRE
CLASS="programlisting"
>use Time::HiRes qw(gettimeofday);
$t0 = gettimeofday;
## do your operation here
$t1 = gettimeofday;
$elapsed = $t1-$t0;
# $elapsed is a floating point value, representing number
# of seconds between $t0 and $t1</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-762"
>Discussion</A
></H3
><P
CLASS="para"
>Here's some code that uses Time::HiRes to time how long the user takes to press RETURN:</P
><PRE
CLASS="programlisting"
>use Time::HiRes qw(gettimeofday);
print &quot;Press return when ready: &quot;;
$before = gettimeofday;
$line = &lt;&gt;;
$elapsed = gettimeofday-$before;
print &quot;You took $elapsed seconds.\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Press return when ready: </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>You took 0.228149 seconds.</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>Compare this to the equivalent <CODE
CLASS="literal"
>syscall</CODE
> code:</P
><PRE
CLASS="programlisting"
>require 'sys/syscall.ph';

# initialize the structures returned by gettimeofday
$TIMEVAL_T = &quot;LL&quot;;
$done = $start = pack($TIMEVAL_T, ());

# prompt
print &quot;Press return when ready: &quot;;

# read the time into $start
syscall(&amp;SYS_gettimeofday, $start, 0) != -1
           || die &quot;gettimeofday: $!&quot;;

# read a line
$line = &lt;&gt;;

# read the time into $done
syscall(&amp;SYS_gettimeofday, $done, 0) != -1
       || die &quot;gettimeofday: $!&quot;;

# expand the structure
@start = unpack($TIMEVAL_T, $start);
@done  = unpack($TIMEVAL_T, $done);

# fix microseconds
for ($done[1], $start[1]) { $_ /= 1_000_000 }
    
# calculate time difference
$delta_time = sprintf &quot;%.4f&quot;, ($done[0]  + $done[1]  )
                                         -
                              ($start[0] + $start[1] );

print &quot;That took $delta_time seconds\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Press return when ready: </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>That took 0.3037 seconds</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>It's longer because it's doing system calls in Perl, while Time::HiRes does them in C providing a single function. It's complex because directly accessing system calls peculiar to your operating system requires you to know details about the underlying C structures that the system call takes and returns. Some programs that come with the Perl distribution try to automatically calculate the formats to <CODE
CLASS="literal"
>pack</CODE
> and <CODE
CLASS="literal"
>unpack</CODE
> for you, if fed the appropriate C header file. In the example, <EM
CLASS="emphasis"
>sys/syscall.ph</EM
> is a Perl library file generated with <EM
CLASS="emphasis"
>h2ph</EM
>, which converts the <EM
CLASS="emphasis"
>sys/syscall.h</EM
> header file into <EM
CLASS="emphasis"
>sys/syscall.ph</EM
> that defines (among other things) <CODE
CLASS="literal"
>&amp;SYS_gettimeofday</CODE
> as a subroutine that returns the system call number of <CODE
CLASS="literal"
>gettimeofday</CODE
>.</P
><P
CLASS="para"
>Here's another example of Time::HiRes, showing how you could use it to benchmark a sort:</P
><PRE
CLASS="programlisting"
>use Time::HiRes qw(gettimeofday);
# take mean sorting time
$size = 500;
$number_of_times = 100;
$total_time = 0;

for ($i = 0; $i &lt; $number_of_times; $i++) {
    my (@array, $j, $begin, $time);
    # populate array
    @array = ();
    for ($j=0; $j&lt;$size; $j++) { push(@array, rand) }

    # sort it
    $begin = gettimeofday;
    @array = sort { $a &lt;=&gt; $b } @array;
    $time = gettimeofday-$begin;
    $total_time += $time;
}

printf &quot;On average, sorting %d random numbers takes %.5f seconds\n&quot;,
    $size, ($total_time/$number_of_times);
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>On average, sorting 500 random numbers takes 0.02821 seconds</I
></CODE
></B
></CODE
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-904"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the CPAN modules Time::HiRes and Benchmark; the <CODE
CLASS="literal"
>syscall</CODE
> function in <EM
CLASS="emphasis"
>perlfunc </EM
>(1) and <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; your system's <EM
CLASS="emphasis"
>syscall</EM
> (2) manpage<A
CLASS="indexterm"
NAME="ch03-idx-1000006358-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006358-1"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006358-2"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006358-3"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_09.htm"
TITLE="3.8. Printing a Date"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.8. Printing a Date"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_11.htm"
TITLE="3.10. Short Sleeps"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.10. Short Sleeps"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.8. Printing a Date</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.10. Short Sleeps</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
