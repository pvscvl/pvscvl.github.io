<HTML
><HEAD
>
<TITLE>Recipe 14.6. Sorting Large DBM Files (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:51Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch14_01.htm"
TITLE="14. Database Access"><LINK
REL="prev"
HREF="ch14_06.htm"
TITLE="14.5. Locking DBM Files"><LINK
REL="next"
HREF="ch14_08.htm"
TITLE="14.7. Treating a Text File as a Database Array"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_06.htm"
TITLE="14.5. Locking DBM Files"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.5. Locking DBM Files"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch14_01.htm"
TITLE="14. Database Access"
>Chapter 14<BR>Database Access</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_08.htm"
TITLE="14.7. Treating a Text File as a Database Array"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.7. Treating a Text File as a Database Array"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch14-41357"
>14.6. Sorting Large DBM Files</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-604"
>Problem<A
CLASS="indexterm"
NAME="ch14-idx-1000004972-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000004972-1"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000004972-2"
></A
></A
></H3
><P
CLASS="para"
>You want to process a large dataset you'd like to commit to a DBM file in a particular order.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-610"
>Solution</A
></H3
><P
CLASS="para"
>Use the <A
CLASS="indexterm"
NAME="ch14-idx-1000004973-0"
></A
>DB_File's B-tree bindings and supply a comparison function of your own devising:</P
><PRE
CLASS="programlisting"
>use DB_File;

# specify the Perl sub to do key comparison using the
# exported $DB_BTREE hash reference
$DB_BTREE-&gt;{'compare'} = sub {
    my ($key1, $key2) = @_ ;
    &quot;\L$key1&quot; cmp &quot;\L$key2&quot; ;
};

tie(%hash, &quot;DB_File&quot;, $filename, O_RDWR|O_CREAT, 0666, $DB_BTREE)
    or die &quot;can't tie $filename: $!&quot;;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-638"
>Description</A
></H3
><P
CLASS="para"
>An annoyance of hashes, whether in memory or as DBM files, is that they do not maintain proper ordering. The CPAN module Tie::IxHash can make a regular hash in memory maintain its insertion order, but that doesn't help you for DBM databases or arbitrary sorting criteria.</P
><P
CLASS="para"
>The DB_File module supports a nice solution to this using a <A
CLASS="indexterm"
NAME="ch14-idx-1000004974-0"
></A
>B-tree implementation. One advantage of a B-tree over a regular DBM hash is its ordering. When the user defines a comparison function, all calls to <CODE
CLASS="literal"
>keys</CODE
>, <CODE
CLASS="literal"
>values</CODE
>, and <CODE
CLASS="literal"
>each</CODE
> are automatically ordered. For example, <A
CLASS="xref"
HREF="ch14_07.htm"
TITLE="sortdemo"
>Example 14.4</A
> is a program that maintains a hash whose keys will always be sorted case-insensitively.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch14-17113"
>Example 14.4: sortdemo</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# <A
CLASS="indexterm"
NAME="ch14-idx-1000005040-0"
></A
>sortdemo - show auto dbm sorting
use strict;
use DB_File;

$DB_BTREE-&gt;{'compare'} = sub {
    my ($key1, $key2) = @_ ;
    &quot;\L$key1&quot; cmp &quot;\L$key2&quot; ;
};

my %hash;
my $filename = '/tmp/sorthash.db';
tie(%hash, &quot;DB_File&quot;, $filename, O_RDWR|O_CREAT, 0666, $DB_BTREE)
    or die &quot;can't tie $filename: $!&quot;;

my $i = 0;
for my $word (qw(Can't you go camp down by Gibraltar)) {
    $hash{$word} = ++$i;
}

while (my($word, $number) = each %hash) {
    printf &quot;%-12s %d\n&quot;, $word, $number;
}</PRE
></DIV
><P
CLASS="para"
>By default, the entries in a B-tree DB_File database are stored alphabetically. Here, though, we provide a case-insensitive comparison function, so using <CODE
CLASS="literal"
>each</CODE
> to fetch all the keys would show:</P
><PRE
CLASS="programlisting"
><CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>by           6</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>camp         4</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Can't        1</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>down         5</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Gibraltar    7</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>go           3</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>you          2</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>This sorting property on hashes is so convenient that it's worth using even without a permanent database. If you pass <CODE
CLASS="literal"
>undef</CODE
> where the filename is expected on the <CODE
CLASS="literal"
>tie</CODE
>, DB_File will create a file in <EM
CLASS="emphasis"
>/tmp</EM
> and then immediately unlink it, giving an anonymous database:</P
><PRE
CLASS="programlisting"
>tie(%hash, &quot;DB_File&quot;, undef, O_RDWR|O_CREAT, 0666, $DB_BTREE)
        or die &quot;can't tie: $!&quot;;</PRE
><P
CLASS="para"
>Remember these two things if you supply a comparison for your BTREE database. One, the new compare function must be specified when you create the database. Two, you cannot change the ordering once the database has been created; you must use the same compare function every time you access the database.</P
><P
CLASS="para"
>Using BTREE databases under DB_File also permits duplicate or partial keys. See its documentation for examples.<A
CLASS="indexterm"
NAME="ch14-idx-1000004976-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000004976-1"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000004976-2"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000004976-3"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000004976-4"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-1000004725"
>See Also</A
></H3
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch05_07.htm"
TITLE="Retrieving from a Hash in Insertion Order"
>Recipe 5.6</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_06.htm"
TITLE="14.5. Locking DBM Files"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.5. Locking DBM Files"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_08.htm"
TITLE="14.7. Treating a Text File as a Database Array"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.7. Treating a Text File as a Database Array"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>14.5. Locking DBM Files</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>14.7. Treating a Text File as a Database Array</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
