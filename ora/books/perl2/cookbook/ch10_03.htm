<HTML
><HEAD
>
<TITLE>Recipe 10.2. Making Variables Private to a Function (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:39:36Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. Subroutines"><LINK
REL="prev"
HREF="ch10_02.htm"
TITLE="10.1. Accessing Subroutine Arguments"><LINK
REL="next"
HREF="ch10_04.htm"
TITLE="10.3. Creating Persistent Private Variables"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_02.htm"
TITLE="10.1. Accessing Subroutine Arguments"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.1. Accessing Subroutine Arguments"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch10_01.htm"
TITLE="10. Subroutines"
>Chapter 10<BR>Subroutines</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_04.htm"
TITLE="10.3. Creating Persistent Private Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.3. Creating Persistent Private Variables"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch10-30489"
>10.2. Making Variables Private to a Function</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-178"
>Problem<A
CLASS="indexterm"
NAME="ch10-idx-1000004648-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004648-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004648-2"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004648-3"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004648-4"
></A
></A
></H3
><P
CLASS="para"
>Your subroutine needs temporary variables. You shouldn't use global variables, because another subroutine might also use the same variables.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-184"
>Solution</A
></H3
><P
CLASS="para"
>Use <CODE
CLASS="literal"
>my</CODE
> to declare a variable private to a region of your program:</P
><PRE
CLASS="programlisting"
>sub somefunc {
    my $variable;                 # $variable is invisible outside somefunc()
    my ($another, @an_array, %a_hash);     # declaring many variables at once

    # ...
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-202"
>Discussion</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>my</CODE
> operator confines a variable to a particular region of code in which it can be used and accessed. Outside that region, it can't be accessed. This region is called its <EM
CLASS="emphasis"
>scope</EM
>.</P
><P
CLASS="para"
>Variables declared with <CODE
CLASS="literal"
>my</CODE
> have <EM
CLASS="emphasis"
>lexical scope</EM
><A
CLASS="indexterm"
NAME="ch10-idx-1000004658-0"
></A
>, which means that they exist only within a particular textual area of code. For instance, the scope of <CODE
CLASS="literal"
>$variable</CODE
> in the Solution is the function it was defined in, <CODE
CLASS="literal"
>somefunc</CODE
>. When a call to <CODE
CLASS="literal"
>somefunc</CODE
> is made, the variable is created. The variable is destroyed when the function call ends. The variable can be accessed within the function, but not outside of it.</P
><P
CLASS="para"
>A lexical scope is usually a block of code with a set of braces around it, such as those defining the body of the <CODE
CLASS="literal"
>somefunc</CODE
> subroutine or those marking the code blocks of <CODE
CLASS="literal"
>if</CODE
>, <CODE
CLASS="literal"
>while</CODE
>, <CODE
CLASS="literal"
>for</CODE
>, <CODE
CLASS="literal"
>foreach</CODE
>, and <CODE
CLASS="literal"
>eval</CODE
> statements. Lexical scopes may also be an entire file or strings given to <CODE
CLASS="literal"
>eval</CODE
>. Since a lexical scope is usually a block, we'll sometimes talk about lexical variables (variables with lexical scope) being only visible in their block when we mean that they're only visible in their scope. Forgive us. Otherwise, we'll be using the words "scope" and "sub" more than a WWII Navy movie.</P
><P
CLASS="para"
>Because the parts of code that can see a <CODE
CLASS="literal"
>my</CODE
> variable are determined at compile time and don't change after that, lexical scoping is sometimes misleadingly referred to as static scoping. Lexical scoping is in contrast to <EM
CLASS="emphasis"
>dynamic</EM
> scoping, which we'll cover in <A
CLASS="xref"
HREF="ch10_14.htm"
TITLE="Saving Global Values"
>Recipe 10.13</A
>.</P
><P
CLASS="para"
>You can combine a <CODE
CLASS="literal"
>my</CODE
> declaration with an assignment. Use parentheses when defining more than one variable:</P
><PRE
CLASS="programlisting"
>my ($name, $age) = @ARGV;
my $start        = fetch_time();</PRE
><P
CLASS="para"
>These lexical variables behave as you would expect a local variable to. Nested blocks can see lexicals declared in outer blocks, but not in unrelated blocks:</P
><PRE
CLASS="programlisting"
>my ($a, $b) = @pair;
my $c = fetch_time();

sub check_x {
    my $x = $_[0];       
    my $y = &quot;whatever&quot;;  
    run_check();
    if ($condition) {
        print &quot;got $x\n&quot;;
    }
}</PRE
><P
CLASS="para"
>In the preceding code, the <CODE
CLASS="literal"
>if</CODE
> block inside the function can access the private <CODE
CLASS="literal"
>$x</CODE
> variable. However, the <CODE
CLASS="literal"
>run_check</CODE
> function called from within that scope cannot access <CODE
CLASS="literal"
>$x</CODE
> or <CODE
CLASS="literal"
>$y</CODE
> because <CODE
CLASS="literal"
>run_check</CODE
> was presumably defined in another scope. However, <CODE
CLASS="literal"
>check_x</CODE
> could access <CODE
CLASS="literal"
>$a</CODE
>, <CODE
CLASS="literal"
>$b</CODE
>, or <CODE
CLASS="literal"
>$c</CODE
> from the outer scope because the function was defined in the same scope as those three variables.</P
><P
CLASS="para"
>Don't nest the declaration of named subroutines within the declarations of other named subroutines. Such subroutines, unlike proper closures, will not get the right bindings of the lexical variables. <A
CLASS="xref"
HREF="ch10_17.htm"
TITLE="Nesting Subroutines"
>Recipe 10.16</A
> shows how to cope with this restriction.</P
><P
CLASS="para"
>When a lexical goes out of scope, its storage is freed unless a reference to its value's storage space still exists, as with <CODE
CLASS="literal"
>@arguments</CODE
> in the following code:</P
><PRE
CLASS="programlisting"
>sub save_array {
    my @arguments = @_;
    push(@Global_Array, \@arguments);
}</PRE
><P
CLASS="para"
>Perl's garbage collection system knows not to deallocate things until they're no longer used. This is why we can return a reference to a private variable without leaking memory.<A
CLASS="indexterm"
NAME="ch10-idx-1000004650-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-236"
>See Also</A
></H3
><P
CLASS="para"
>The section on <A
CLASS="olink"
HREF="../prog/ch02_06.htm"
>"Scoped Declarations"</A
> in <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and the section on "Private Variables via my(  )" in <I
CLASS="filename"
>perlsub </I
>(1)</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_02.htm"
TITLE="10.1. Accessing Subroutine Arguments"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.1. Accessing Subroutine Arguments"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_04.htm"
TITLE="10.3. Creating Persistent Private Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.3. Creating Persistent Private Variables"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.1. Accessing Subroutine Arguments</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>10.3. Creating Persistent Private Variables</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
