<HTML
><HEAD
>
<TITLE>Recipe 17.2. Writing a TCP Server (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:44:22Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"><LINK
REL="prev"
HREF="ch17_02.htm"
TITLE="17.1. Writing a TCP Client"><LINK
REL="next"
HREF="ch17_04.htm"
TITLE="17.3. Communicating over TCP"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_02.htm"
TITLE="17.1. Writing a TCP Client"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.1. Writing a TCP Client"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"
>Chapter 17<BR>Sockets</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_04.htm"
TITLE="17.3. Communicating over TCP"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.3. Communicating over TCP"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch17-23871"
>17.2. Writing a TCP Server</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-260"
>Problem<A
CLASS="indexterm"
NAME="ch17-idx-1000004687-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004687-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004687-2"
></A
></A
></H3
><P
CLASS="para"
>You want to write a server that waits for clients to connect over the network to a particular port.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-266"
>Solution</A
></H3
><P
CLASS="para"
>This recipe assumes you're using the Internet to communicate. For TCP-like communication within a single Unix machine, see <A
CLASS="xref"
HREF="ch17_07.htm"
TITLE="Using UNIX Domain Sockets"
>Recipe 17.6</A
>.</P
><P
CLASS="para"
>Use the standard (as of 5.004) IO::Socket::INET class:</P
><PRE
CLASS="programlisting"
>use IO::Socket;

$server = IO::Socket::INET-&gt;new(LocalPort =&gt; $server_port,
                                Type      =&gt; SOCK_STREAM,
                                Reuse     =&gt; 1,
                                Listen    =&gt; 10 )   # or SOMAXCONN
    or die &quot;Couldn't be a tcp server on port $server_port : $@\n&quot;;

while ($client = $server-&gt;accept()) {
    # $client is the new connection
}

close($server);</PRE
><P
CLASS="para"
>Or, craft it by hand for better control:</P
><PRE
CLASS="programlisting"
>use Socket;

# make the socket
socket(SERVER, PF_INET, SOCK_STREAM, getprotobyname('tcp'));

# so we can restart our server quickly
setsockopt(SERVER, SOL_SOCKET, SO_REUSEADDR, 1);

# build up my socket address
$my_addr = sockaddr_in($server_port, INADDR_ANY);
bind(SERVER, $my_addr)
    or die &quot;Couldn't bind to port $server_port : $!\n&quot;;

# establish a queue for incoming connections
listen(SERVER, SOMAXCONN)
    or die &quot;Couldn't listen on port $server_port : $!\n&quot;;

# accept and process connections
while (accept(CLIENT, SERVER)) {
    # do something with CLIENT
}

close(SERVER);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-348"
>Discussion</A
></H3
><P
CLASS="para"
>Setting up a server is more complicated than being a client. The optional <CODE
CLASS="literal"
>listen</CODE
> function tells the operating system how many pending, unanswered connections to queue up waiting for your server. The <CODE
CLASS="literal"
>setsockopt</CODE
> function used in the Solution allows you to avoid waiting two minutes after killing your server before you restart it again (valuable in testing). The <CODE
CLASS="literal"
>bind</CODE
> call registers your server with kernel so others may find you. Finally, <CODE
CLASS="literal"
>accept</CODE
> takes the incoming connections one by one.</P
><P
CLASS="para"
>The numeric argument to <CODE
CLASS="literal"
>listen</CODE
> is the number of un<CODE
CLASS="literal"
>accept</CODE
>ed connections that the operating system should queue before clients start getting "connection refused" errors. Historically, the maximum <CODE
CLASS="literal"
>listen</CODE
> value was 5, and even today, many operating systems silently limit this queue size to around 20. With busy web servers becoming commonplace, many vendors have increased this value. Your documented system maximum can be found in the SOMAXCONN constant from the Socket module.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>accept</CODE
><A
CLASS="indexterm"
NAME="ch17-idx-1000004696-0"
></A
> function takes two arguments: the filehandle to connect to the remote client and the server filehandle. It returns the client's port and IP address, as packed by <CODE
CLASS="literal"
>inet_ntoa</CODE
>:</P
><PRE
CLASS="programlisting"
>use Socket;

while ($client_address = accept(CLIENT, SERVER)) {
    ($port, $packed_ip) = sockaddr_in($client_address);
    $dotted_quad = inet_ntoa($packed_ip);
    # do as thou wilt
}</PRE
><P
CLASS="para"
>With the IO::Socket classes, <CODE
CLASS="literal"
>accept</CODE
> is a method of the server filehandle:</P
><PRE
CLASS="programlisting"
>while ($client = $server-&gt;accept()) {
    # ...
}</PRE
><P
CLASS="para"
>If you call the <CODE
CLASS="literal"
>accept</CODE
> method in list context, it returns the client socket and its address:</P
><PRE
CLASS="programlisting"
>while (($client,$client_address) = $server-&gt;accept()) {
    # ...
}</PRE
><P
CLASS="para"
>If no connection is waiting, your program blocks in the <CODE
CLASS="literal"
>accept</CODE
> until a connection comes in. If you want to ensure that your <CODE
CLASS="literal"
>accept</CODE
> won't block, use <A
CLASS="indexterm"
NAME="ch17-idx-1000005983-0"
></A
>non-blocking sockets:</P
><PRE
CLASS="programlisting"
>use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);

$flags = fcntl(SERVER, F_GETFL, 0)
            or die &quot;Can't get flags for the socket: $!\n&quot;;

$flags = fcntl(SERVER, F_SETFL, $flags | O_NONBLOCK)
            or die &quot;Can't set flags for the socket: $!\n&quot;;</PRE
><P
CLASS="para"
>Now, when you <CODE
CLASS="literal"
>accept</CODE
> and nothing is waiting for you, <CODE
CLASS="literal"
>accept</CODE
> will return <CODE
CLASS="literal"
>undef</CODE
> and set <CODE
CLASS="literal"
>$!</CODE
> to <CODE
CLASS="literal"
>EWOULDBLOCK</CODE
>.</P
><P
CLASS="para"
>You might fear that when the return flags from F_GETFL are 0, that this would trigger the <CODE
CLASS="literal"
>die</CODE
> just as a failure from <CODE
CLASS="literal"
>undef</CODE
> would. Not so&nbsp;- as with <CODE
CLASS="literal"
>ioctl</CODE
>, a non-error return from <CODE
CLASS="literal"
>fcntl</CODE
> is mapped by Perl to the special value <A
CLASS="indexterm"
NAME="ch17-idx-1000005960-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000005961-0"
></A
><CODE
CLASS="literal"
>&quot;0</CODE
> <CODE
CLASS="literal"
>but</CODE
> <CODE
CLASS="literal"
>true&quot;</CODE
>. This special string is even exempt from the <B
CLASS="emphasis.bold"
>-w</B
> flag's pesky non-numeric warnings, so feel free to use it in your functions when you want to return a value that's numerically zero yet still true. It probably should have been <CODE
CLASS="literal"
>&quot;0</CODE
> <CODE
CLASS="literal"
>and</CODE
> <CODE
CLASS="literal"
>sneaky&quot;</CODE
> instead.<A
CLASS="indexterm"
NAME="ch17-idx-1000004692-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004692-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004692-2"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004692-3"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-408"
>See Also</A
></H3
><P
CLASS="para"
>The 
<A
CLASS="olink"
HREF="../prog/ch03_151.htm"
>&#13;<CODE
CLASS="literal"
>socket</CODE
></A
>,
<A
CLASS="olink"
HREF="../prog/ch03_007.htm"
>&#13;<CODE
CLASS="literal"
>bind</CODE
></A
>,
<A
CLASS="olink"
HREF="../prog/ch03_086.htm"
><CODE
CLASS="literal"
>listen</CODE
></A
>, 

<A
CLASS="olink"
HREF="../prog/ch03_004.htm"
><CODE
CLASS="literal"
>accept</CODE
></A
>, 
<A
CLASS="olink"
HREF="../prog/ch03_037.htm"
><CODE
CLASS="literal"
>fcntl</CODE
></A
>, 

<A
CLASS="olink"
HREF="../prog/ch03_142.htm"
><CODE
CLASS="literal"
>setsockopt</CODE
></A
>, 
functions in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlfunc </I
>(1); your system's <I
CLASS="filename"
>fcntl </I
>(2), <I
CLASS="filename"
>socket </I
>(2), <I
CLASS="filename"
>setsockopt </I
>(2) manpages (if you have them); the documentation for the standard Socket, IO::Socket, and Net::hostent modules; the section on 
<A
CLASS="olink"
HREF="../prog/ch06_02.htm"
>"Internet TCP Clients and Servers"</A
> in <A
CLASS="olink"
HREF="../prog/ch06_01.htm"
>Chapter 6</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlipc </I
>(1); <CITE
CLASS="citetitle"
>Unix Network Programming</CITE
>; <CITE
CLASS="citetitle"
>Beej's Guide to Network Programming</CITE
> at <A
CLASS="systemitem.url"
HREF="../../../../../../../www.ecst.csuchico.edu/~guide/net"
>http://www.ecst.csuchico.edu/~guide/net</A
>; <A
CLASS="xref"
HREF="ch07_14.htm"
TITLE="Reading from Many Filehandles Without Blocking"
>Recipe 7.13</A
>; <A
CLASS="xref"
HREF="ch07_15.htm"
TITLE="Doing Non-Blocking I/O"
>Recipe 7.14</A
>; <A
CLASS="xref"
HREF="ch17_02.htm"
TITLE="Writing a TCP Client"
>Recipe 17.1</A
>; <A
CLASS="xref"
HREF="ch17_04.htm"
TITLE="Communicating over TCP"
>Recipe 17.3</A
>; <A
CLASS="xref"
HREF="ch17_08.htm"
TITLE="Identifying the Other End of a Socket"
>Recipe 17.7</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_02.htm"
TITLE="17.1. Writing a TCP Client"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.1. Writing a TCP Client"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_04.htm"
TITLE="17.3. Communicating over TCP"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.3. Communicating over TCP"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>17.1. Writing a TCP Client</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>17.3. Communicating over TCP</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
