<HTML
><HEAD
>
<TITLE>Recipe 16.10. Communicating Between Related Processes (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:43:53Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"><LINK
REL="prev"
HREF="ch16_10.htm"
TITLE="16.9. Controlling the Input, Output, and Error of Another Program"><LINK
REL="next"
HREF="ch16_12.htm"
TITLE="16.11. Making a Process Look Like a File with Named Pipes"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_10.htm"
TITLE="16.9. Controlling the Input, Output, and Error of Another Program"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.9. Controlling the Input, Output, and Error of Another Program"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"
>Chapter 16<BR>Process Management and Communication</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_12.htm"
TITLE="16.11. Making a Process Look Like a File with Named Pipes"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.11. Making a Process Look Like a File with Named Pipes"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch16-14419"
>16.10. Communicating Between Related Processes</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1604"
>Problem<A
CLASS="indexterm"
NAME="ch16-idx-1000006345-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006345-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006345-2"
></A
></A
></H3
><P
CLASS="para"
>You have two related processes that need to communicate, and you need better control than you can get from <CODE
CLASS="literal"
>open</CODE
>, <CODE
CLASS="literal"
>system</CODE
>, and backticks.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1610"
>Solution</A
></H3
><P
CLASS="para"
>Use <CODE
CLASS="literal"
>pipe</CODE
> and then <CODE
CLASS="literal"
>fork</CODE
>:</P
><PRE
CLASS="programlisting"
>pipe(READER, WRITER);
if (fork) {
    # run parent code, either reading or writing, not both
} else {
    # run child code, either reading or writing, not both
}</PRE
><P
CLASS="para"
>Or use a special forking form of <CODE
CLASS="literal"
>open</CODE
>:</P
><PRE
CLASS="programlisting"
>if ($pid = open(CHILD, &quot;|-&quot;)) {
        # run parent code, writing to child
} else {
    die &quot;cannot fork: $!&quot; unless defined $pid;
    # otherwise run child code here, reading from parent
}</PRE
><P
CLASS="para"
>Or, going the other way:</P
><PRE
CLASS="programlisting"
>if ($pid = open(CHILD, &quot;-|&quot;)) {
    # run parent code, reading from child
} else {
    die &quot;cannot fork: $!&quot; unless defined $pid;
    # otherwise run child code here, writing to parent
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1656"
>Discussion</A
></H3
><P
CLASS="para"
>Pipes are simply two connected filehandles, where data written to one filehandle can be read by the other. The <CODE
CLASS="literal"
>pipe</CODE
> function creates two filehandles linked in this way, one writable and one readable. Even though you can't take two already existing filehandles and link them, <CODE
CLASS="literal"
>pipe</CODE
> can be used for communication between processes. One process creates a pair of filehandles with the <CODE
CLASS="literal"
>pipe</CODE
> functions, then forks off a child, resulting in two distinct processes both running in the same program, each with a copy of the connected filehandles.</P
><P
CLASS="para"
>It doesn't matter which process is the reader and which is the writer, so long as one of them takes one role and its peer process takes the other. You can only have one-way communication. (But read on.)</P
><P
CLASS="para"
>We'll pull in the IO::Handle module so we can call its <EM
CLASS="emphasis"
></EM
><A
CLASS="indexterm"
NAME="ch16-idx-1000006357-0"
></A
><CODE
CLASS="literal"
>autoflush()</CODE
> method. (You could instead play the <CODE
CLASS="literal"
>select</CODE
> games described in <A
CLASS="xref"
HREF="ch07_01.htm"
TITLE="File Access"
>Chapter 7, <CITE
CLASS="chapter"
>File Access</CITE
></A
>, if you prefer a lightweight solution.) If we didn't, our single line of output would get lodged in the pipe and not make it through to the other side until we closed that handle.</P
><P
CLASS="para"
>The version of the parent writing to the child is shown in <A
CLASS="xref"
HREF="ch16_11.htm"
TITLE="pipe1"
>Example 16.3</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch16-16018"
>Example 16.3: pipe1</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# <A
CLASS="indexterm"
NAME="ch16-idx-1000006351-0"
></A
>pipe1 - use pipe and fork so parent can send to child

use IO::Handle;
pipe(READER, WRITER);
WRITER-&gt;autoflush(1);

if ($pid = fork) {
    close READER;
    print WRITER &quot;Parent Pid $$ is sending this\n&quot;;
    close WRITER;
    waitpid($pid,0);
} else {
    die &quot;cannot fork: $!&quot; unless defined $pid;
    close WRITER;
    chomp($line = &lt;READER&gt;);
    print &quot;Child Pid $$ just read this: `$line'\n&quot;;
    close READER;  # this will happen anyway
    exit;
}</PRE
></DIV
><P
CLASS="para"
>In the examples in this recipe, most error checking has been left as an exercise for the reader. This is so you can more clearly see how the functions interact. In real life, test the return values of all system calls.</P
><P
CLASS="para"
>The version of the child writing to the parent is shown in <A
CLASS="xref"
HREF="ch16_11.htm"
TITLE="pipe2"
>Example 16.4</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch16-26121"
>Example 16.4: pipe2</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# <A
CLASS="indexterm"
NAME="ch16-idx-1000006352-0"
></A
>pipe2 - use pipe and fork so child can send to parent

use IO::Handle;
pipe(READER, WRITER);
WRITER-&gt;autoflush(1);

if ($pid = fork) {
    close WRITER;
    chomp($line = &lt;READER&gt;);
    print &quot;Parent Pid $$ just read this: `$line'\n&quot;;
    close READER;
    waitpid($pid,0);
} else {
    die &quot;cannot fork: $!&quot; unless defined $pid;
    close READER;
    print WRITER &quot;Child Pid $$ is sending this\n&quot;;
    close WRITER;  # this will happen anyway
    exit;
}</PRE
></DIV
><P
CLASS="para"
>In most code, both halves would go into loops, with the reader continuing to read until end of file. This happens when the writer closes or exits.</P
><P
CLASS="para"
>Because piped filehandles are not bidirectional, each process uses just one of the pair and closes the filehandle it doesn't use. The reason is subtle; picture the situation where the reader does not close the writable filehandle. If the writer then exits while the reader is trying to read something, the reader will hang forever. This is because the system won't tell the reader that there's no more data to be read until all copies of the writable filehandle are closed.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>open</CODE
><A
CLASS="indexterm"
NAME="ch16-idx-1000006358-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006358-1"
></A
> function, when passed as its second argument either <CODE
CLASS="literal"
>&quot;-|&quot;</CODE
> or <CODE
CLASS="literal"
>&quot;|-&quot;</CODE
> will implicitly pipe and fork. This makes the piping code above slightly easier. The child talks to the parent over STDIN or STDOUT, depending on whether <CODE
CLASS="literal"
>&quot;-|&quot;</CODE
> or <CODE
CLASS="literal"
>&quot;|-&quot;</CODE
> was used.</P
><P
CLASS="para"
>Using <CODE
CLASS="literal"
>open</CODE
> this way, if the parent wants to write to the child, it does something like what's shown in <A
CLASS="xref"
HREF="ch16_11.htm"
TITLE="pipe3"
>Example 16.5</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch16-36681"
>Example 16.5: pipe3</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# <A
CLASS="indexterm"
NAME="ch16-idx-1000006353-0"
></A
>pipe3 - use forking open so parent can send to child

use IO::Handle;
if ($pid = open(CHILD, &quot;|-&quot;)) {
    CHILD-&gt;autoflush(1);
    print CHILD &quot;Parent Pid $$ is sending this\n&quot;;
    close(CHILD);
} else {
    die &quot;cannot fork: $!&quot; unless defined $pid;
    chomp($line = &lt;STDIN&gt;);
    print &quot;Child Pid $$ just read this: `$line'\n&quot;;
    exit;
}</PRE
></DIV
><P
CLASS="para"
>Since the child already has STDIN set to the parent, the child could <CODE
CLASS="literal"
>exec</CODE
> some other program that expects to read from standard input, such as <EM
CLASS="emphasis"
>lpr</EM
>. In fact, this is useful and commonly done.</P
><P
CLASS="para"
>If the child wants to write to the parent, it does something like what's shown in <A
CLASS="xref"
HREF="ch16_11.htm"
TITLE="pipe4"
>Example 16.6</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch16-42618"
>Example 16.6: pipe4</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# <A
CLASS="indexterm"
NAME="ch16-idx-1000006354-0"
></A
>pipe4 - use forking open so child can send to parent

use IO::Handle;
if ($pid = open(CHILD, &quot;-|&quot;)) {
    chomp($line = &lt;CHILD&gt;);
    print &quot;Parent Pid $$ just read this: `$line'\n&quot;;
    close(CHILD);
} else {
    die &quot;cannot fork: $!&quot; unless defined $pid;
    STDOUT-&gt;autoflush(1);
    print STDOUT &quot;Child Pid $$ is sending this\n&quot;;
    exit;
}</PRE
></DIV
><P
CLASS="para"
>Again, since the child already has its STDOUT connected to the parent, this child could <CODE
CLASS="literal"
>exec</CODE
> some other program to produce something interesting on its standard output. That output would be available to the parent as input from &lt;<CODE
CLASS="literal"
>CHILD&gt;</CODE
>.</P
><P
CLASS="para"
>When using <CODE
CLASS="literal"
>open</CODE
> this way, we don't have to manually call <CODE
CLASS="literal"
>waitpid</CODE
> since we didn't do a manual fork. We do have to call <CODE
CLASS="literal"
>close</CODE
>, though. In both cases, the <CODE
CLASS="literal"
>$?</CODE
> variable will have the child's wait status in it (see <A
CLASS="xref"
HREF="ch16_20.htm"
TITLE="Avoiding Zombie Processes"
>Recipe 16.19</A
> to see how to interpret this status value).</P
><P
CLASS="para"
>The preceding examples were unidirectional. What if you want both processes talking to each other? Just make two calls to <CODE
CLASS="literal"
>pipe</CODE
> before forking. You must be careful about who tells whom what and when, though, or you're apt to deadlock. (See <A
CLASS="xref"
HREF="ch16_11.htm"
TITLE="pipe5"
>Example 16.7</A
>.)</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch16-42071"
>Example 16.7: pipe5</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# <A
CLASS="indexterm"
NAME="ch16-idx-1000006355-0"
></A
>pipe5 - bidirectional communication using two pipe pairs
#         designed for the socketpair-challenged
use IO::Handle;
pipe(PARENT_RDR, CHILD_WTR);
pipe(CHILD_RDR,  PARENT_WTR);
CHILD_WTR-&gt;autoflush(1);
PARENT_WTR-&gt;autoflush(1);

if ($pid = fork) {
    close PARENT_RDR; close PARENT_WTR;
    print CHILD_WTR &quot;Parent Pid $$ is sending this\n&quot;;
    chomp($line = &lt;CHILD_RDR&gt;);
    print &quot;Parent Pid $$ just read this: `$line'\n&quot;;
    close CHILD_RDR; close CHILD_WTR;
    waitpid($pid,0);
} else {
    die &quot;cannot fork: $!&quot; unless defined $pid;
    close CHILD_RDR; close CHILD_WTR;
    chomp($line = &lt;PARENT_RDR&gt;);
    print &quot;Child Pid $$ just read this: `$line'\n&quot;;
    print PARENT_WTR &quot;Child Pid $$ is sending this\n&quot;;
    close PARENT_RDR; close PARENT_WTR;
    exit;
}</PRE
></DIV
><P
CLASS="para"
>That's getting complicated. It just so happens that there's a special system call, shown in <A
CLASS="xref"
HREF="ch16_11.htm"
TITLE="pipe6"
>Example 16.8</A
>, that makes the last example simpler. It's called <CODE
CLASS="literal"
>socketpair</CODE
>, and it works like <CODE
CLASS="literal"
>pipe</CODE
>, except that both handles can be used for reading and for writing.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch16-38392"
>Example 16.8: pipe6</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# <A
CLASS="indexterm"
NAME="ch16-idx-1000006356-0"
></A
>pipe6 - bidirectional communication using socketpair
#   &quot;the best ones always go both ways&quot;

use Socket;
use IO::Handle;
# We say AF_UNIX because although *_LOCAL is the
# POSIX 1003.1g form of the constant, many machines
# still don't have it.
socketpair(CHILD, PARENT, AF_UNIX, SOCK_STREAM, PF_UNSPEC)
    or  die &quot;socketpair: $!&quot;;

CHILD-&gt;autoflush(1);
PARENT-&gt;autoflush(1);

if ($pid = fork) {
    close PARENT;
    print CHILD &quot;Parent Pid $$ is sending this\n&quot;;
    chomp($line = &lt;CHILD&gt;);
    print &quot;Parent Pid $$ just read this: `$line'\n&quot;;
    close CHILD;
    waitpid($pid,0);
} else {
    die &quot;cannot fork: $!&quot; unless defined $pid;
    close CHILD;
    chomp($line = &lt;PARENT&gt;);
    print &quot;Child Pid $$ just read this: `$line'\n&quot;;
    print PARENT &quot;Child Pid $$ is sending this\n&quot;;
    close PARENT;
    exit;
}</PRE
></DIV
><P
CLASS="para"
>In fact, some systems have historically implemented pipes as two half-closed ends of a socketpair. They essentially define <CODE
CLASS="literal"
>pipe(READER,</CODE
> <CODE
CLASS="literal"
>WRITER)</CODE
> this way:</P
><PRE
CLASS="programlisting"
>socketpair(READER, WRITER, AF_UNIX, SOCK_STREAM, PF_UNSPEC);
shutdown(READER, 1);        # no more writing for reader
shutdown(WRITER, 0);        # no more reading for writer</PRE
><P
CLASS="para"
>On Linux kernels before 2.0.34, the <I
CLASS="filename"
>shutdown (2)</I
> system call was broken. Instead of telling the reader not to write and the writer not to read, you had to tell the reader not to read and the writer not to write.<A
CLASS="indexterm"
NAME="ch16-idx-1000006347-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006347-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006347-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1950"
>See Also</A
></H3
><P
CLASS="para"
><A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> or <I
CLASS="filename"
>perlfunc </I
>(1) for all functions used here; the documentation for the standard IPC::Open2 module; <EM
CLASS="emphasis"
>Advanced Programming in the Unix Environment</EM
>; <A
CLASS="xref"
HREF="ch16_09.htm"
TITLE="Controlling Input and Output of Another Program"
>Recipe 16.8</A
>; <A
CLASS="xref"
HREF="ch19_07.htm"
TITLE="Executing Commands Without Shell Escapes"
>Recipe 19.6</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_10.htm"
TITLE="16.9. Controlling the Input, Output, and Error of Another Program"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.9. Controlling the Input, Output, and Error of Another Program"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_12.htm"
TITLE="16.11. Making a Process Look Like a File with Named Pipes"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.11. Making a Process Look Like a File with Named Pipes"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>16.9. Controlling the Input, Output, and Error of Another Program</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>16.11. Making a Process Look Like a File with Named Pipes</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
