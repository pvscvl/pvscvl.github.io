<HTML
><HEAD
>
<TITLE>Recipe 10.17. Program: Sorting Your Mail (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:10Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. Subroutines"><LINK
REL="prev"
HREF="ch10_17.htm"
TITLE="10.16. Nesting Subroutines"><LINK
REL="next"
HREF="ch11_01.htm"
TITLE="11. References and Records"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_17.htm"
TITLE="10.16. Nesting Subroutines"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.16. Nesting Subroutines"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch10_01.htm"
TITLE="10. Subroutines"
>Chapter 10<BR>Subroutines</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch11_01.htm"
TITLE="11. References and Records"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11. References and Records"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch10-chap10_program_0"
>10.17. Program: Sorting Your Mail</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-1000006301-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000006301-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000006301-2"
></A
>The program in <A
CLASS="xref"
HREF="ch10_18.htm"
TITLE="bysub1"
>Example 10.1</A
> sorts a mailbox by subject by reading input a paragraph at a time, looking for one with a <CODE
CLASS="literal"
>&quot;From&quot;</CODE
> at the start of a line. When it finds one, it searches for the subject, strips it of any <CODE
CLASS="literal"
>&quot;Re:</CODE
> <CODE
CLASS="literal"
>&quot;</CODE
> marks, and stores its lowercased version in the <CODE
CLASS="literal"
>@sub</CODE
> array. Meanwhile, the messages themselves are stored in a corresponding <CODE
CLASS="literal"
>@msgs</CODE
> array. The <CODE
CLASS="literal"
>$msgno</CODE
> variable keeps track of the message number.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch10-24677"
>Example 10.1: bysub1</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl 
# <A
CLASS="indexterm"
NAME="ch10-idx-1000006317-0"
></A
>bysub1 - simple sort by subject
my(@msgs, @sub);
my $msgno = -1;
$/ = '';                    # paragraph reads
while (&lt;&gt;) {
    if (/^From/m) {
        /^Subject:\s*(?:Re:\s*)*(.*)/mi;
        $sub[++$msgno] = lc($1) || '';
    }
    $msgs[$msgno] .= $_;
} 
for my $i (sort { $sub[$a] cmp $sub[$b] || $a &lt;=&gt; $b } (0 .. $#msgs)) {
    print $msgs[$i];
}</PRE
></DIV
><P
CLASS="para"
>That <CODE
CLASS="literal"
>sort</CODE
> is only sorting array indices. If the subjects are the same, <CODE
CLASS="literal"
>cmp</CODE
> returns 0, so the second part of the <CODE
CLASS="literal"
>||</CODE
> is taken, which compares the message numbers in the order they originally appeared.</P
><P
CLASS="para"
>If <CODE
CLASS="literal"
>sort</CODE
> were fed a list like <CODE
CLASS="literal"
>(0,1,2,3)</CODE
>, that list would get sorted into a different permutation, perhaps <CODE
CLASS="literal"
>(2,1,3,0)</CODE
>. We iterate across them with a <CODE
CLASS="literal"
>for</CODE
> loop to print out each message.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch10_18.htm"
TITLE="bysub2"
>Example 10.2</A
> shows how an <I
CLASS="filename"
>awk</I
> programmer might code this program, using the <B
CLASS="emphasis.bold"
>-00</B
> switch to read paragraphs instead of lines.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch10-30783"
>Example 10.2: bysub2</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -n00
# <A
CLASS="indexterm"
NAME="ch10-idx-1000004769-0"
></A
>bysub2 - awkish sort-by-subject
BEGIN { $msgno = -1 }
$sub[++$msgno] = (/^Subject:\s*(?:Re:\s*)*(.*)/mi)[0] if /^From/m;
$msg[$msgno] .= $_;
END { print @msg[ sort { $sub[$a] cmp $sub[$b] || $a &lt;=&gt; $b } (0 .. $#msg) ] }</PRE
></DIV
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-1000004764-0"
></A
>Perl has kept parallel arrays since its early days. Keeping each message in a hash is a more elegant solution. We'll sort on each field in the hash, by making an anonymous hash as described in <A
CLASS="xref"
HREF="ch11_01.htm"
TITLE="References and Records"
>Chapter 11</A
>.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch10_18.htm"
TITLE="bysub3"
>Example 10.3</A
> is a program similar in spirit to <A
CLASS="xref"
HREF="ch10_18.htm"
TITLE="bysub1"
>Example 10.1</A
> and <A
CLASS="xref"
HREF="ch10_18.htm"
TITLE="bysub2"
>Example 10.2</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch10-11145"
>Example 10.3: bysub3</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -00
# bysub3<A
CLASS="indexterm"
NAME="ch10-idx-1000004771-0"
></A
> - sort by subject using hash records
use strict;
my @msgs = ();
while (&lt;&gt;) {
    push @msgs, {
        SUBJECT =&gt; /^Subject:\s*(?:Re:\s*)*(.*)/mi,
        NUMBER  =&gt; scalar @msgs,   # which msgno this is
        TEXT    =&gt; '',
    } if /^From/m;
    $msgs[-1]{TEXT} .= $_;
} 

for my $msg (sort {     
                        $a-&gt;{SUBJECT} cmp $b-&gt;{SUBJECT} 
                                       || 
                        $a-&gt;{NUMBER}  &lt;=&gt; $b-&gt;{NUMBER} 
                  } @msgs
         )
{
    print $msg-&gt;{TEXT};
} </PRE
></DIV
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-1000004763-0"
></A
>Once we have real hashes, adding further sorting criteria is simple. A common way to sort a folder is subject major, date minor order. The hard part is figuring out how to parse and compare dates. Date::Manip does this, returning a string we can compare; however, the <EM
CLASS="emphasis"
>datesort</EM
> program in <A
CLASS="xref"
HREF="ch10_18.htm"
TITLE="datesort (continued)"
>Example 10.4</A
>, which uses Date::Manip, runs more than 10 times slower than the previous one. Parsing dates in unpredictable formats is extremely slow.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch10-26587"
>Example 10.4: datesort (continued)</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -00
# <A
CLASS="indexterm"
NAME="ch10-idx-1000004780-0"
></A
>datesort - sort mbox by subject then date
use strict;
use Date::Manip;
my @msgs = ();
while (&lt;&gt;) {
    next unless /^From/m;
    my $date = '';
    if (/^Date:\s*(.*)/m) {
        ($date = $1) =~ s/\s+\(.*//;  # library hates (MST)
        $date = ParseDate($date);
    } 
    push @msgs, {
        SUBJECT =&gt; /^Subject:\s*(?:Re:\s*)*(.*)/mi,
        DATE    =&gt; $date,
        NUMBER  =&gt; scalar @msgs,
        TEXT    =&gt; '',
    }; 
} continue {
    $msgs[-1]{TEXT} .= $_;
}

for my $msg (sort {     
                        $a-&gt;{SUBJECT} cmp $b-&gt;{SUBJECT} 
                                       || 
                        $a-&gt;{DATE}    cmp $b-&gt;{DATE} 
                                       || 
                        $a-&gt;{NUMBER}  &lt;=&gt; $b-&gt;{NUMBER} 

                  } @msgs
         )
{
    print $msg-&gt;{TEXT};
}</PRE
></DIV
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch10_18.htm"
TITLE="datesort (continued)"
>Example 10.4</A
> is written to draw attention to the <CODE
CLASS="literal"
>continue</CODE
> block. When a loop's end is reached, either because it fell through to that point or got there from a <CODE
CLASS="literal"
>next</CODE
>, the whole <CODE
CLASS="literal"
>continue</CODE
> block is executed. It corresponds to the third portion of a three-part <CODE
CLASS="literal"
>for</CODE
> loop, except that the <CODE
CLASS="literal"
>continue</CODE
> block isn't restricted to an expression. It's a full block, with separate <A
CLASS="indexterm"
NAME="ch10-idx-1000004759-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004759-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004759-2"
></A
>statements.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-1000005909"
>See Also</A
></H3
><P
CLASS="para"
>The <A
CLASS="olink"
HREF="../prog/ch03_153.htm"
><CODE
CLASS="literal"
>sort</CODE
></A
> function in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlfunc </I
>(1); the discussion of the <A
CLASS="olink"
HREF="../prog/ch02_09.htm"
><CODE
CLASS="literal"
>$/</CODE
></A
> variable in <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>, <I
CLASS="filename"
>perlvar </I
>(1), and the Introduction to <A
CLASS="xref"
HREF="ch08_01.htm"
TITLE="File Contents"
>Chapter 8, <CITE
CLASS="chapter"
>File Contents</CITE
></A
>; <A
CLASS="xref"
HREF="ch03_08.htm"
TITLE="Parsing Dates and Times from Strings"
>Recipe 3.7</A
>; <A
CLASS="xref"
HREF="ch04_16.htm"
TITLE="Sorting a List by Computable Field"
>Recipe 4.15</A
>; <A
CLASS="xref"
HREF="ch05_10.htm"
TITLE="Sorting a Hash"
>Recipe 5.9</A
>; <A
CLASS="xref"
HREF="ch11_10.htm"
TITLE="Constructing Records"
>Recipe 11.9</A
> <A
CLASS="indexterm"
NAME="ch10-idx-1000004629-0"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_17.htm"
TITLE="10.16. Nesting Subroutines"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.16. Nesting Subroutines"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch11_01.htm"
TITLE="11. References and Records"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11. References and Records"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.16. Nesting Subroutines</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11. References and Records</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
