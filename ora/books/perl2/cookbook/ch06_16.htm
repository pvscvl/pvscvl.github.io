<HTML
><HEAD
>
<TITLE>Recipe 6.15. Greedy and Non-Greedy Matches (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:34:35Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"><LINK
REL="prev"
HREF="ch06_15.htm"
TITLE="6.14. Matching from Where the Last Pattern Left Off"><LINK
REL="next"
HREF="ch06_17.htm"
TITLE="6.16. Detecting Duplicate Words"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_15.htm"
TITLE="6.14. Matching from Where the Last Pattern Left Off"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.14. Matching from Where the Last Pattern Left Off"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"
>Chapter 6<BR>Pattern Matching</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_17.htm"
TITLE="6.16. Detecting Duplicate Words"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.16. Detecting Duplicate Words"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-32931"
>6.15. Greedy and Non-Greedy Matches</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1695"
>Problem<A
CLASS="indexterm"
NAME="ch06-idx-1000007660-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007660-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007660-2"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007660-3"
></A
></A
></H3
><P
CLASS="para"
>You have a pattern with a greedy quantifier like <CODE
CLASS="literal"
>*</CODE
>, <CODE
CLASS="literal"
>+</CODE
>, <CODE
CLASS="literal"
>?</CODE
>, or <CODE
CLASS="literal"
>{}</CODE
>, and you want to stop it from being greedy.</P
><P
CLASS="para"
>A classic case of this is the naïve substitution to remove tags from HTML. Although it looks appealing, <CODE
CLASS="literal"
>s#&lt;TT&gt;.*&lt;/TT&gt;##gsi</CODE
>, actually deletes everything from the first open <CODE
CLASS="literal"
>TT</CODE
> tag through the last closing one. This would turn <CODE
CLASS="literal"
>&quot;Even</CODE
> <CODE
CLASS="literal"
>&lt;TT&gt;vi&lt;/TT&gt;</CODE
> <CODE
CLASS="literal"
>can</CODE
> <CODE
CLASS="literal"
>edit</CODE
> <CODE
CLASS="literal"
>&lt;TT&gt;troff&lt;/TT&gt;</CODE
> <CODE
CLASS="literal"
>effectively.&quot;</CODE
> into <CODE
CLASS="literal"
>&quot;Even</CODE
> <CODE
CLASS="literal"
>effectively&quot;</CODE
>, completely changing the meaning of the sentence!</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1703"
>Solution</A
></H3
><P
CLASS="para"
>Replace the offending greedy quantifier with the corresponding non-greedy version. That is, change <CODE
CLASS="literal"
>*</CODE
>, <CODE
CLASS="literal"
>+</CODE
>, <CODE
CLASS="literal"
>?</CODE
>, and <CODE
CLASS="literal"
>{}</CODE
> into <CODE
CLASS="literal"
>*?</CODE
>, <CODE
CLASS="literal"
>+?</CODE
>, <CODE
CLASS="literal"
>??</CODE
>, and <CODE
CLASS="literal"
>{}?</CODE
>, respectively.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1709"
>Discussion</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-1000007677-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007677-1"
></A
>Perl has two sets of quantifiers: the <EM
CLASS="emphasis"
>maximal</EM
> ones <CODE
CLASS="literal"
>*</CODE
>, <CODE
CLASS="literal"
>+</CODE
>, <CODE
CLASS="literal"
>?</CODE
>, and <CODE
CLASS="literal"
>{}</CODE
> (sometimes called <EM
CLASS="emphasis"
>greedy</EM
>) and the <EM
CLASS="emphasis"
>minimal</EM
> ones <CODE
CLASS="literal"
>*?</CODE
>, <CODE
CLASS="literal"
>+?</CODE
>, <CODE
CLASS="literal"
>??</CODE
>, <CODE
CLASS="literal"
>and</CODE
> <CODE
CLASS="literal"
>{}?</CODE
> (sometimes called <EM
CLASS="emphasis"
>stingy</EM
>). For instance, given the string <CODE
CLASS="literal"
>&quot;Perl</CODE
> <CODE
CLASS="literal"
>is</CODE
> <CODE
CLASS="literal"
>a</CODE
> <CODE
CLASS="literal"
>Swiss</CODE
> <CODE
CLASS="literal"
>Army</CODE
> <CODE
CLASS="literal"
>Chainsaw!&quot;</CODE
>, the pattern <CODE
CLASS="literal"
>/(r.*s)/</CODE
> matches <CODE
CLASS="literal"
>&quot;rl</CODE
> <CODE
CLASS="literal"
>is</CODE
> <CODE
CLASS="literal"
>a</CODE
> <CODE
CLASS="literal"
>Swiss</CODE
> <CODE
CLASS="literal"
>Army</CODE
> <CODE
CLASS="literal"
>Chains&quot;</CODE
> whereas <CODE
CLASS="literal"
>/(r.*?s)/</CODE
> matches <CODE
CLASS="literal"
>&quot;rl</CODE
> <CODE
CLASS="literal"
>is&quot;</CODE
>.</P
><P
CLASS="para"
>With maximal quantifiers, when you ask to match a variable number of times, such as zero or more times for <CODE
CLASS="literal"
>*</CODE
> or one or more times for <CODE
CLASS="literal"
>+</CODE
>, the matching engine prefers the "or more" portion of that description. Thus <CODE
CLASS="literal"
>/foo.*bar/</CODE
> matches from the first <CODE
CLASS="literal"
>&quot;foo&quot;</CODE
> up to the last <CODE
CLASS="literal"
>&quot;bar&quot;</CODE
> in the string, rather than merely the next <CODE
CLASS="literal"
>&quot;bar&quot;</CODE
>, as some might expect. To make any of the regular expression repetition operators prefer stingy matching over greedy matching, add an extra <CODE
CLASS="literal"
>? </CODE
>. So <CODE
CLASS="literal"
>*?</CODE
> matches zero or more times, but rather than match as much as it possibly can the way <CODE
CLASS="literal"
>*</CODE
> would, it matches as little as possible.</P
><PRE
CLASS="programlisting"
># greedy pattern
s/&lt;.*&gt;//gs;                     # try to remove tags, very badly

# non-greedy pattern
s/&lt;.*?&gt;//gs;                    # try to remove tags, still rather badly</PRE
><P
CLASS="para"
>This approach doesn't remove tags from all possible HTML correctly, because a single regular expression is not an acceptable replacement for a real parser. See <A
CLASS="xref"
HREF="ch20_07.htm"
TITLE="Extracting or Removing HTML Tags"
>Recipe 20.6</A
> for the right way to do this.</P
><P
CLASS="para"
>Minimal matching isn't all it's cracked up to be. Don't fall into the trap of thinking that including the partial pattern <CODE
CLASS="literal"
>BEGIN.*?END</CODE
> in a pattern amidst other elements will always match the shortest amount of text between occurrences of <CODE
CLASS="literal"
>BEGIN</CODE
> and <CODE
CLASS="literal"
>END</CODE
>. Imagine the pattern <CODE
CLASS="literal"
>/BEGIN(.*?)END/</CODE
>. If matched against the string <CODE
CLASS="literal"
>&quot;BEGIN</CODE
> <CODE
CLASS="literal"
>and</CODE
> <CODE
CLASS="literal"
>BEGIN</CODE
> <CODE
CLASS="literal"
>and</CODE
> <CODE
CLASS="literal"
>END&quot;</CODE
>, <CODE
CLASS="literal"
>$1</CODE
> would contain <CODE
CLASS="literal"
>&quot;and</CODE
> <CODE
CLASS="literal"
>BEGIN</CODE
> <CODE
CLASS="literal"
>and&quot;</CODE
>. This is probably not what you want.</P
><P
CLASS="para"
>Imagine if we were trying to pull out everything between bold-italic pairs:</P
><PRE
CLASS="programlisting"
>&lt;b&gt;&lt;i&gt;this&lt;/i&gt; and &lt;i&gt;that&lt;/i&gt; are important&lt;/b&gt; Oh, &lt;b&gt;&lt;i&gt;me too!&lt;/i&gt;&lt;/b&gt;</PRE
><P
CLASS="para"
>A pattern to find only text <EM
CLASS="emphasis"
>between</EM
> bold-italic HTML pairs, that is, text that doesn't include them, might appear to be this one:</P
><PRE
CLASS="programlisting"
>m{ &lt;b&gt;&lt;i&gt;(.*?)&lt;/i&gt;&lt;/b&gt; }sx</PRE
><P
CLASS="para"
>You might be surprised to learn that the pattern doesn't do that. Many people incorrectly understand this as matching a <CODE
CLASS="literal"
>&quot;&lt;b&gt;&lt;i&gt;&quot;</CODE
> sequence, then something that's not <CODE
CLASS="literal"
>&quot;&lt;b&gt;&lt;i&gt;&quot;</CODE
>, and then <CODE
CLASS="literal"
>&quot;&lt;/i&gt;&lt;/b&gt;&quot;</CODE
>, leaving the intervening text in <CODE
CLASS="literal"
>$1</CODE
>. While often it works out that way due to the input data, that's not really what it says. It just matches the shortest leftmost substring that satisfies the <EM
CLASS="emphasis"
>entire pattern</EM
>. In this case, that's the entire string. If the intention were to extract only stuff between <CODE
CLASS="literal"
>&quot;&lt;b&gt;&lt;i&gt;&quot;</CODE
> and its corresponding <CODE
CLASS="literal"
>&quot;&lt;/i&gt;&lt;/b&gt;&quot;</CODE
>, with no other bold-italic tags in between, it would be incorrect.</P
><P
CLASS="para"
>If the string in question is just one character, a negated class is remarkably more efficient than a minimal match, as in <CODE
CLASS="literal"
>/X([^X]*)X/</CODE
>. But the general way to say "match BEGIN, then not BEGIN, then END" for any arbitrary values of BEGIN and END is as follows (this also stores the intervening part in <CODE
CLASS="literal"
>$1</CODE
>):</P
><PRE
CLASS="programlisting"
>/BEGIN((?:(?!BEGIN).)*)END/</PRE
><P
CLASS="para"
>Applying this to the HTML-matching code, we end up with something like:</P
><PRE
CLASS="programlisting"
>m{ &lt;b&gt;&lt;i&gt;(  (?: (?!&lt;/b&gt;|&lt;/i&gt;). )*  ) &lt;/i&gt;&lt;/b&gt; }sx</PRE
><P
CLASS="para"
>or perhaps:</P
><PRE
CLASS="programlisting"
>m{ &lt;b&gt;&lt;i&gt;(  (?: (?!&lt;/[ib]&gt;). )*  ) &lt;/i&gt;&lt;/b&gt; }sx</PRE
><P
CLASS="para"
>Jeffrey Friedl points out that this quick-and-dirty method isn't particularly efficient. He suggests crafting a more elaborate pattern when speed really matters, such as:</P
><PRE
CLASS="programlisting"
>m{
    &lt;b&gt;&lt;i&gt; 
    [^&lt;]*  # stuff not possibly bad, and not possibly the end.
    (?:
 # at this point, we can have '&lt;' if not part of something bad
     (?!  &lt;/?[ib]&gt;  )   # what we can't have
     &lt;                  # okay, so match the '&lt;'
     [^&lt;]*              # and continue with more safe stuff
    ) *
    &lt;/i&gt;&lt;/b&gt;
 }sx</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-1000007679-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007679-1"
></A
>This is a variation on Jeffrey's unrolling-the-loop technique, described in Chapter 5 of <EM
CLASS="emphasis"
>Mastering Regular Expressions</EM
>.<A
CLASS="indexterm"
NAME="ch06-idx-1000007662-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007662-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007662-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1777"
>See Also</A
></H3
><P
CLASS="para"
>The non-greedy quantifiers in the "Regular Expressions" section of <I
CLASS="filename"
>perlre </I
>(1), and in the <A
CLASS="olink"
HREF="../prog/ch02_04.htm"
>"the rules of regular expression matching"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_15.htm"
TITLE="6.14. Matching from Where the Last Pattern Left Off"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.14. Matching from Where the Last Pattern Left Off"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_17.htm"
TITLE="6.16. Detecting Duplicate Words"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.16. Detecting Duplicate Words"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.14. Matching from Where the Last Pattern Left Off</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6.16. Detecting Duplicate Words</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
