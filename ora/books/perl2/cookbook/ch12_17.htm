<HTML
><HEAD
>
<TITLE>Recipe 12.16. Documenting Your Module with Pod (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:01Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"><LINK
REL="prev"
HREF="ch12_16.htm"
TITLE="12.15. Using h2xs to Make a Module with C Code"><LINK
REL="next"
HREF="ch12_18.htm"
TITLE="12.17. Building and Installing a CPAN Module"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_16.htm"
TITLE="12.15. Using h2xs to Make a Module with C Code"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.15. Using h2xs to Make a Module with C Code"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"
>Chapter 12<BR>Packages, Libraries, and Modules</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_18.htm"
TITLE="12.17. Building and Installing a CPAN Module"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.17. Building and Installing a CPAN Module"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-chap12_documenting_0"
>12.16. Documenting Your Module with Pod</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-1724"
>Problem<A
CLASS="indexterm"
NAME="ch12-idx-1000005295-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005295-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005295-2"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005295-3"
></A
></A
></H3
><P
CLASS="para"
>You need to document your module, but don't know what format to use.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-1730"
>Solution</A
></H3
><P
CLASS="para"
>Embed your documentation in the your module file using pod format.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-1736"
>Discussion</A
></H3
><P
CLASS="para"
>Pod stands for <I
CLASS="firstterm"
>plain old documentation</I
>. It's documentation embedded in your program using a very simple markup format. Programmers are notorious for writing the code first and the documentation never, so pod was designed to make writing documentation so easy that anyone can and will do so. Sometimes this even works.</P
><P
CLASS="para"
>When Perl is parsing your source code, a line starting with an equal sign (where a new statement is expected) says to ignore all text until it finds a line beginning with <CODE
CLASS="literal"
>=cut</CODE
>, after which it will start parsing code again. This lets you mix code and documentation throughout your Perl program or module file. Since it's mostly plain text, type in your documentation as literal text, or nearly so. The translators try to be clever and make output-specific decisions so the programmer doesn't have to specifically format variable names, function calls, etc.</P
><P
CLASS="para"
>Along with Perl are shipped several translators that filter generic pod format into specific output styles. These include <EM
CLASS="emphasis"
>pod2man</EM
> to change your pods into <EM
CLASS="emphasis"
>troff</EM
> for use with the <EM
CLASS="emphasis"
>man</EM
> program or for phototypesetting and printing; <EM
CLASS="emphasis"
>pod2html</EM
><A
CLASS="indexterm"
NAME="ch12-idx-1000005308-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005308-1"
></A
> for creating web pages (which works even on non-Unix systems); and <EM
CLASS="emphasis"
>pod2text</EM
> for plain ASCII. Other translators, like <EM
CLASS="emphasis"
>pod2ipf</EM
>, <EM
CLASS="emphasis"
>pod2fm</EM
>, <EM
CLASS="emphasis"
>pod2texi</EM
>, <EM
CLASS="emphasis"
>pod2latex</EM
>, and <EM
CLASS="emphasis"
>pod2ps</EM
>, may also be available or can be found on CPAN.</P
><P
CLASS="para"
>Many books are written using proprietary word processors with limited scripting capabilities. Not this one! It was written in pod format using common text editors (<EM
CLASS="emphasis"
>vi</EM
> for Tom, <EM
CLASS="emphasis"
>emacs</EM
> for Nat) before being translated into <EM
CLASS="emphasis"
>troff</EM
> for printing during technical review using a special translator written by Larry called <EM
CLASS="emphasis"
>pod2ora</EM
>. The final book was produced by converting the pod source files to FrameMaker.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-1000005301-0"
></A
>Although formally documented in <I
CLASS="filename"
>perlpod </I
>(1), pod is probably easiest to learn by reading existing module files. If you started making your module using <EM
CLASS="emphasis"
>h2xs</EM
>, then you already have the sample pods right there. The <EM
CLASS="emphasis"
>Makefile</EM
> knows to convert these into <EM
CLASS="emphasis"
>man</EM
> format and install those manpages so others can read them. Alternatively, the <EM
CLASS="emphasis"
>perldoc</EM
><A
CLASS="indexterm"
NAME="ch12-idx-1000005305-0"
></A
> program can translate pods on the fly using <EM
CLASS="emphasis"
>pod2text</EM
>.</P
><P
CLASS="para"
>Indented <A
CLASS="indexterm"
NAME="ch12-idx-1000005302-0"
></A
>paragraphs will be left verbatim. Other paragraphs will be reformatted to fit the page. Only two kinds of markups are used in pod: paragraphs beginning with an equal sign and one or more words, and interior sequences starting with a single letter followed by text enclosed in angle brackets. Paragraph tags are for headers, list enumeration, and per-translator escapes. Angle bracket sequences are mainly used for font changes, such as selecting bold, italic, or constant-width fonts. Here's an example of an <CODE
CLASS="literal"
>=head2</CODE
><A
CLASS="indexterm"
NAME="ch12-idx-1000005303-0"
></A
> pod directive and various bracket escapes for font changes:</P
><PRE
CLASS="programlisting"
>=head2 Discussion

If we had a I&lt;.h&gt; file with function prototype declarations, we
could include that, but since we're writing this one from scratch,
we'll use the B&lt;-c&gt; flag to omit building code to translate any
C&lt;#define&gt; symbols. The B&lt;-n&gt; flag says to create a module directory
named I&lt;FineTime/&gt;, which will have the following files.</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>=for</CODE
><A
CLASS="indexterm"
NAME="ch12-idx-1000005309-0"
></A
> escape introduces specific code that is only <EM
CLASS="emphasis"
>for</EM
> a particular output filter. This book, for example, written mostly in pod, includes calls to the standard <EM
CLASS="emphasis"
>troff</EM
> tools <EM
CLASS="emphasis"
>eqn</EM
>, <EM
CLASS="emphasis"
>tbl</EM
>, and <EM
CLASS="emphasis"
>pic</EM
>. Here's an example of embedded <EM
CLASS="emphasis"
>eqn</EM
>. Only translators that produce <EM
CLASS="emphasis"
>troff</EM
> will heed this paragraph.</P
><PRE
CLASS="programlisting"
>=for troff
.EQ
log sub n (x) = { {log sub e (x)} over {log sub e (n)} }
.EN</PRE
><P
CLASS="para"
>Pod can also create multiline comments. In C, the sequence <CODE
CLASS="literal"
>/*</CODE
> <CODE
CLASS="literal"
>....</CODE
> <CODE
CLASS="literal"
>*/</CODE
> can comment out many lines of text all at once &nbsp;-  there's no need to put a marker on each line. Since Perl ignores pod directives, use these for block commenting. The trick is to find a directive that the pod filters ignore. You could specify that a block is "for later" or "for nobody":</P
><PRE
CLASS="programlisting"
>=for later
next if 1 .. ?^$?;
s/^(.)/&gt;$1/;
s/(.{73})........*/$1&lt;SNIP&gt;/;

=cut back to perl</PRE
><P
CLASS="para"
>or you could use a <CODE
CLASS="literal"
>=begin</CODE
><A
CLASS="indexterm"
NAME="ch12-idx-1000005310-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005310-1"
></A
> and <CODE
CLASS="literal"
>=end</CODE
> pair:</P
><PRE
CLASS="programlisting"
>=begin comment

if (!open(FILE, $file)) {
    unless ($opt_q) {
        warn &quot;$me: $file: $!\n&quot;;
        $Errors++;
    }
    next FILE;
}

$total = 0;
$matches = 0;

=end comment<A
CLASS="indexterm"
NAME="ch12-idx-1000005297-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005297-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005297-2"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005297-3"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-1820"
>See Also</A
></H3
><P
CLASS="para"
>The section on "PODs: Embedded Documentation" in <I
CLASS="filename"
>perlsyn </I
>(1), as well as <I
CLASS="filename"
>perlpod</I
> (1), <I
CLASS="filename"
>pod2man </I
>(1), <I
CLASS="filename"
>pod2html </I
>(1), and <I
CLASS="filename"
>pod2text </I
>(1)</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_16.htm"
TITLE="12.15. Using h2xs to Make a Module with C Code"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.15. Using h2xs to Make a Module with C Code"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_18.htm"
TITLE="12.17. Building and Installing a CPAN Module"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.17. Building and Installing a CPAN Module"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.15. Using h2xs to Make a Module with C Code</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>12.17. Building and Installing a CPAN Module</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
