<HTML
><HEAD
>
<TITLE>Recipe 4.19. Program: permute (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:17Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"><LINK
REL="prev"
HREF="ch04_19.htm"
TITLE="4.18. Program: words"><LINK
REL="next"
HREF="ch05_01.htm"
TITLE="5. Hashes"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_19.htm"
TITLE="4.18. Program: words"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.18. Program: words"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"
>Chapter 4<BR>Arrays</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch05_01.htm"
TITLE="5. Hashes"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5. Hashes"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-25495"
>4.19. Program: permute</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-1867"
>Problem<A
CLASS="indexterm"
NAME="ch04-idx-1000006794-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006794-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006794-2"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006794-3"
></A
></A
></H3
><P
CLASS="para"
>Have you ever wanted to generate all possible permutations of an array or to execute some code for every possible permutation? For example:</P
><PRE
CLASS="programlisting"
>% echo man bites dog | permute
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>dog bites man</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>bites dog man</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>dog man bites</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>man dog bites</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>bites man dog</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>man bites dog</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>The number of permutations of a set is the factorial of the size of the set. This grows big extremely fast, so you don't want to run it on many permutations:</P
><PRE
CLASS="programlisting"
>Set Size            Permutations
1                   1
2                   2
3                   6
4                   24
5                   120
6                   720
7                   5040
8                   40320
9                   362880
10                  3628800
11                  39916800
12                  479001600
13                  6227020800
14                  87178291200
15                  1307674368000</PRE
><P
CLASS="para"
>Doing something for each alternative takes a correspondingly large amount of time. In fact, factorial algorithms exceed the number of particles in the universe with very small inputs. The factorial of 500 is greater than ten raised to the <EM
CLASS="emphasis"
>thousandth</EM
> power!</P
><PRE
CLASS="programlisting"
>use Math::BigInt;
    sub factorial {
    my $n = shift;
    my $s = 1;
    $s *= $n-- while $n &gt; 0;
    return $s;
}
print factorial(Math::BigInt-&gt;new(&quot;500&quot;));
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>+1220136... (1035 digits total)</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>The two solutions that follow differ in the order of the permutations they return.</P
><P
CLASS="para"
>The solution in <A
CLASS="xref"
HREF="ch04_20.htm"
TITLE="tsc-permute"
>Example 4.3</A
> uses a classic list permutation algorithm used by Lisp hackers. It's relatively straightforward but makes unnecessary copies. It's also hardwired to do nothing but print out its permutations.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch04-20616"
>Example 4.3: tsc-permute</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -n
# <A
CLASS="indexterm"
NAME="ch04-idx-1000006817-0"
></A
>tsc_permute: permute each word of input
permute([split], []);
sub permute {
    my @items = @{ $_[0] };
    my @perms = @{ $_[1] };
    unless (@items) {
        print &quot;@perms\n&quot;;
    } else {
        my(@newitems,@newperms,$i);
        foreach $i (0 .. $#items) {
            @newitems = @items;
            @newperms = @perms;
            unshift(@newperms, splice(@newitems, $i, 1));
            permute([@newitems], [@newperms]);
        }
    }
}</PRE
></DIV
><P
CLASS="para"
>The solution in <A
CLASS="xref"
HREF="ch04_20.htm"
TITLE="mjd-permute"
>Example 4.4</A
>, provided by Mark-Jason <A
CLASS="indexterm"
NAME="ch04-idx-1000006795-0"
></A
>Dominus, is faster (by around 25%) and more elegant. Rather than precalculate all permutations, his code generates the <EM
CLASS="emphasis"
>n </EM
>th particular permutation. It is elegant in two ways. First, it avoids recursion except to calculate the factorial, which the permutation algorithm proper does not use. Second, it generates a permutation of integers rather than permute the actual data set.</P
><P
CLASS="para"
>He also uses a time-saving technique called <EM
CLASS="emphasis"
>memoizing</EM
><A
CLASS="indexterm"
NAME="ch04-idx-1000006796-0"
></A
>. The idea is that a function that always returns a particular answer when called with a particular argument memorizes that answer. That way, the next time it's called with the same argument, no further calculations are required. The <CODE
CLASS="literal"
>factorial</CODE
> function uses a private array <CODE
CLASS="literal"
>@fact</CODE
> to remember previously calculated factorial values as described in <A
CLASS="xref"
HREF="ch10_04.htm"
TITLE="Creating Persistent Private Variables"
>Recipe 10.3</A
>.</P
><P
CLASS="para"
>You call <CODE
CLASS="literal"
>n2perm</CODE
> with two arguments: the permutation number to generate (from <CODE
CLASS="literal"
>0</CODE
> to <CODE
CLASS="literal"
>factorial(N)</CODE
>, where N is the size of your array) and the subscript of the array's last element. The <CODE
CLASS="literal"
>n2perm</CODE
> function calculates directions for the permutation in the <CODE
CLASS="literal"
>n2pat</CODE
> subroutine. Then it converts those directions into a permutation of integers in the <CODE
CLASS="literal"
>pat2perm</CODE
> subroutine. The directions are a list like <CODE
CLASS="literal"
>(0</CODE
> <CODE
CLASS="literal"
>2</CODE
> <CODE
CLASS="literal"
>0</CODE
> <CODE
CLASS="literal"
>1</CODE
> <CODE
CLASS="literal"
>0)</CODE
>, which means: "Splice out the 0th element, then the second element from the remaining list, then the 0th element, then the first, then the 0th."</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch04-38739"
>Example 4.4: mjd-permute</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# <A
CLASS="indexterm"
NAME="ch04-idx-1000006822-0"
></A
>mjd_permute: permute each word of input
use strict;

while (&lt;&gt;) {
    my @data = split;
    my $num_permutations = factorial(scalar @data);
    for (my $i=0; $i &lt; $num_permutations; $i++) {
        my @permutation = @data[n2perm($i, $#data)];
        print &quot;@permutation\n&quot;;
    }
}

# Utility function: factorial with memoizing
BEGIN {
  my @fact = (1);
  sub factorial($) {
      my $n = shift;
      return $fact[$n] if defined $fact[$n];
      $fact[$n] = $n * factorial($n - 1);
  }
}

# n2pat($N, $len) : produce the $N-th pattern of length $len
sub n2pat {
    my $i   = 1;
    my $N   = shift;
    my $len = shift;
    my @pat;
    while ($i &lt;= $len + 1) {   # Should really be just while ($N) { ...
        push @pat, $N % $i;
        $N = int($N/$i);
        $i++;
    }
    return @pat;
}

# pat2perm(@pat) : turn pattern returned by <CODE
CLASS="replaceable"
><I
>n2pat()</I
></CODE
> into
# permutation of integers.  XXX: splice is already O(N)
sub pat2perm {
    my @pat    = @_;
    my @source = (0 .. $#pat);
    my @perm;
    push @perm, splice(@source, (pop @pat), 1) while @pat;
    return @perm;
}

# n2perm($N, $len) : generate the Nth permutation of $len objects
sub n2perm {
    pat2perm(n2pat(@_));
}</PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-2099"
>See Also</A
></H3
><P
CLASS="para"
><CODE
CLASS="literal"
>unshift</CODE
> and <CODE
CLASS="literal"
>splice</CODE
> in <EM
CLASS="emphasis"
>perlfunc </EM
>(1) or <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <A
CLASS="indexterm"
NAME="ch04-idx-1000006798-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006798-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006798-2"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006798-3"
></A
>the sections discussing closures in <EM
CLASS="emphasis"
>perlsub</EM
> (1) and <EM
CLASS="emphasis"
>perlref</EM
> (1) and <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <A
CLASS="xref"
HREF="ch02_08.htm"
TITLE="Generating Random Numbers"
>Recipe 2.7</A
>; <A
CLASS="xref"
HREF="ch10_04.htm"
TITLE="Creating Persistent Private Variables"
>Recipe 10.3</A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006570-0"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_19.htm"
TITLE="4.18. Program: words"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.18. Program: words"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch05_01.htm"
TITLE="5. Hashes"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5. Hashes"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.18. Program: words</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5. Hashes</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
