<HTML
><HEAD
>
<TITLE>Recipe 20.6. Extracting or Removing HTML Tags (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:45:58Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch20_01.htm"
TITLE="20. Web Automation"><LINK
REL="prev"
HREF="ch20_06.htm"
TITLE="20.5. Converting HTML to ASCII"><LINK
REL="next"
HREF="ch20_08.htm"
TITLE="20.7. Finding Stale Links"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_06.htm"
TITLE="20.5. Converting HTML to ASCII"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.5. Converting HTML to ASCII"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch20_01.htm"
TITLE="20. Web Automation"
>Chapter 20<BR>Web Automation</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_08.htm"
TITLE="20.7. Finding Stale Links"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.7. Finding Stale Links"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch20-22334"
>20.6. Extracting or Removing HTML Tags</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-599"
>Problem<A
CLASS="indexterm"
NAME="ch20-idx-1000002635-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002635-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002635-2"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002635-3"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002635-4"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002635-5"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002635-6"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002635-7"
></A
></A
></H3
><P
CLASS="para"
>You want to remove HTML tags from a string, leaving just plain text.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-605"
>Solution</A
></H3
><P
CLASS="para"
>The following oft-cited solution is simple but wrong on all but the most trivial HTML:</P
><PRE
CLASS="programlisting"
>($plain_text = $html_text) =~ s/&lt;[^&gt;]*&gt;//gs;     #WRONG</PRE
><P
CLASS="para"
>A correct but slower and slightly more complicated way is to use the CPAN modules:</P
><PRE
CLASS="programlisting"
>use HTML::Parse;
use HTML::FormatText;
$plain_text = HTML::FormatText-&gt;new-&gt;format(parse_html($html_text));</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-621"
>Discussion</A
></H3
><P
CLASS="para"
>As with almost everything else, there is more than one way to do it. Each solution attempts to strike a balance between speed and flexibility. Occasionally you may find HTML that's simple enough that a trivial command line call will work:</P
><PRE
CLASS="programlisting"
>% perl -pe 's/&lt;[^&gt;]*&gt;//g' file</PRE
><P
CLASS="para"
>However, this will break on with files whose tags cross line boundaries, like this:</P
><PRE
CLASS="programlisting"
>&lt;IMG SRC = &quot;foo.gif&quot;
     ALT = &quot;Flurp!&quot;&gt;</PRE
><P
CLASS="para"
>So, you'll see people doing this instead:</P
><PRE
CLASS="programlisting"
>% perl -0777 -pe 's/&lt;[^&gt;]*&gt;//gs' file</PRE
><P
CLASS="para"
>or its scripted equivalent:</P
><PRE
CLASS="programlisting"
>{
    local $/;               # temporary whole-file input mode
    $html = &lt;FILE&gt;;
    $html =~ s/&lt;[^&gt;]*&gt;//gs;
}</PRE
><P
CLASS="para"
>But even that isn't good enough except for simplistic HTML without any interesting bits in it. This approach fails for the following examples of valid HTML (among many others):</P
><PRE
CLASS="programlisting"
>&lt;IMG SRC = &quot;foo.gif&quot; ALT = &quot;A &gt; B&quot;&gt;

&lt;!-- &lt;A comment&gt; --&gt;

&lt;script&gt;if (a&lt;b &amp;&amp; a&gt;c)&lt;/script&gt;

&lt;# Just data #&gt;

&lt;![INCLUDE CDATA [ &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ]]&gt;</PRE
><P
CLASS="para"
>If HTML comments include other tags, those solutions would also break on text like this:</P
><PRE
CLASS="programlisting"
>&lt;!-- This section commented out.
    &lt;B&gt;You can't see me!&lt;/B&gt;
--&gt;</PRE
><P
CLASS="para"
>The only solution that works well here is to use the HTML parsing routines from CPAN. The second code snippet shown above in the Solution demonstrates this better technique.</P
><P
CLASS="para"
>For more flexible parsing, subclass the HTML::Parser class and only record the text elements you see:</P
><PRE
CLASS="programlisting"
>package MyParser;
use HTML::Parser;
use HTML::Entities qw(decode_entities);

@ISA = qw(HTML::Parser);

sub text {
    my($self, $text) = @_;
    print decode_entities($text);
}

package main;
MyParser-&gt;new-&gt;parse_file(*F);</PRE
><P
CLASS="para"
>If you're only interested in simple tags that don't contain others <A
CLASS="indexterm"
NAME="ch20-idx-1000003776-0"
></A
>nested inside, you can often make do with an approach like the following, which extracts the title from a non-tricky HTML document:</P
><PRE
CLASS="programlisting"
>($title) = ($html =~ m#&lt;TITLE&gt;\s*(.*?)\s*&lt;/TITLE&gt;#is);</PRE
><P
CLASS="para"
>Again, the regex approach has its flaws, so a more complete solution using LWP to process the HTML is shown in <A
CLASS="xref"
HREF="ch20_07.htm"
TITLE="htitle"
>Example 20.4</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch20-11677"
>Example 20.4: htitle</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# htitle - get html title from URL

die &quot;usage: $0 url ...\n&quot; unless @ARGV;
require LWP;

foreach $url (@ARGV) {
    $ua = LWP::UserAgent-&gt;new();
    $res = $ua-&gt;request(HTTP::Request-&gt;new(GET =&gt; $url));
    print &quot;$url: &quot; if @ARGV &gt; 1;
    if ($res-&gt;is_success) {
        print $res-&gt;title, &quot;\n&quot;;
    } else {
        print $res-&gt;status_line, &quot;\n&quot;;
    }
}</PRE
></DIV
><P
CLASS="para"
>Here's an example of the output:</P
><PRE
CLASS="programlisting"
>% htitle http://www.ora.com
www.oreilly.com -- Welcome to O'Reilly &amp; Associates!

% htitle http://www.perl.com/ http://www.perl.com/nullvoid
http://www.perl.com/: The www.perl.com Home Page
http://www.perl.com/nullvoid: 404 File Not Found<A
CLASS="indexterm"
NAME="ch20-idx-1000002637-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002637-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002637-2"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002637-3"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002637-4"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002637-5"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002637-6"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-761"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the CPAN modules HTML::TreeBuilder, HTML::Parser, HTML::Entities, and LWP::UserAgent; <A
CLASS="xref"
HREF="ch20_06.htm"
TITLE="Converting HTML to ASCII"
>Recipe 20.5</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_06.htm"
TITLE="20.5. Converting HTML to ASCII"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.5. Converting HTML to ASCII"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_08.htm"
TITLE="20.7. Finding Stale Links"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.7. Finding Stale Links"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>20.5. Converting HTML to ASCII</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>20.7. Finding Stale Links</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
