<HTML
><HEAD
>
<TITLE>Recipe 18.6. Simulating Telnet from a Program (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:45:05Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch18_01.htm"
TITLE="18. Internet Services"><LINK
REL="prev"
HREF="ch18_06.htm"
TITLE="18.5. Reading Mail with POP3"><LINK
REL="next"
HREF="ch18_08.htm"
TITLE="18.7. Pinging a Machine"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_06.htm"
TITLE="18.5. Reading Mail with POP3"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.5. Reading Mail with POP3"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch18_01.htm"
TITLE="18. Internet Services"
>Chapter 18<BR>Internet Services</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_08.htm"
TITLE="18.7. Pinging a Machine"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.7. Pinging a Machine"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch18-17527"
>18.6. Simulating Telnet from a Program</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-845"
>Problem</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-1000004315-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004315-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004315-2"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004315-3"
></A
>You want to simulate a <EM
CLASS="emphasis"
>telnet</EM
> connection from your program by logging into a remote machine, issuing commands, and reacting to what is sent. This has many applications, from automating tasks on machines you can telnet to but which don't support scripting or <EM
CLASS="emphasis"
>rsh</EM
>, to simply testing whether a machine's telnet daemon is still running.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-851"
>Solution</A
></H3
><P
CLASS="para"
>Use the CPAN module Net::Telnet:</P
><PRE
CLASS="programlisting"
>use Net::Telnet;

$t = Net::Telnet-&gt;new( Timeout =&gt; 10,
                       Prompt  =&gt; '/%/',
                       Host    =&gt; $hostname );

$t-&gt;login($username, $password);
@files = $t-&gt;cmd(&quot;ls&quot;);
$t-&gt;print(&quot;top&quot;);
(undef, $process_string) = $t-&gt;waitfor('/\d+ processes/');
$t-&gt;close;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-879"
>Discussion</A
></H3
><P
CLASS="para"
>Net::Telnet provides an object-oriented interface to the telnet protocol. Create a connection with <CODE
CLASS="literal"
>Net::Telnet-&gt;new</CODE
>, and then interact with the remote machine using method calls on the resulting object.</P
><P
CLASS="para"
>Give the <CODE
CLASS="literal"
>new</CODE
> method named parameters, passed in hash-like form. We'll only cover only a few of many possible parameters. The most important is <CODE
CLASS="literal"
>Host</CODE
>, the machine you're telnetting to. The default host is <CODE
CLASS="literal"
>localhost</CODE
>. If you want to telnet to a port other than one telnet normally uses, specify this in the <CODE
CLASS="literal"
>Port</CODE
> option. Error handling is done through the function whose reference is specified in the <CODE
CLASS="literal"
>Errmode</CODE
> parameter.</P
><P
CLASS="para"
>Another important option is <CODE
CLASS="literal"
>Prompt</CODE
>. When you log in or run a command, Net::Telnet uses the <CODE
CLASS="literal"
>Prompt</CODE
> pattern to determine when the login or command has completed. The default <CODE
CLASS="literal"
>Prompt</CODE
> is:</P
><PRE
CLASS="programlisting"
>/[\$%#&gt;] $/</PRE
><P
CLASS="para"
>which matches the common shell prompts. If the prompt on the remote machine doesn't match the default pattern, you have to specify your own. Remember to include the slashes.</P
><P
CLASS="para"
><CODE
CLASS="literal"
>Timeout</CODE
> lets you control how long (in seconds) network operations wait before they give up. The default is 10 seconds.</P
><P
CLASS="para"
>If an error or timeout occurs in the Net::Telnet module, the default behavior is to raise an exception, which, if uncaught, prints a message to STDERR and exits. To change this, pass a subroutine reference to <CODE
CLASS="literal"
>new</CODE
> in the <CODE
CLASS="literal"
>Errmode</CODE
> argument. If instead of a code subroutine, you specify the string <CODE
CLASS="literal"
>&quot;return&quot;</CODE
> as the <CODE
CLASS="literal"
>Errmode</CODE
>, methods return <CODE
CLASS="literal"
>undef</CODE
> (in scalar context) or an empty list (in list context) on error, with the error message available via the <CODE
CLASS="literal"
>errmsg</CODE
> method:</P
><PRE
CLASS="programlisting"
>$telnet = Net::Telnet-&gt;new( Errmode =&gt; sub { main::log(@_) }, ... );</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>login</CODE
> method is used to send a username and password to the remote machine. It uses the <CODE
CLASS="literal"
>Prompt</CODE
> to decide when the login is complete and times out if the machine doesn't reply with a prompt:</P
><PRE
CLASS="programlisting"
>$telnet-&gt;login($username, $password)
    or die &quot;Login failed: @{[ $telnet-&gt;errmsg() ]}\n&quot;;</PRE
><P
CLASS="para"
>To run a program and gather its output, use the <CODE
CLASS="literal"
>cmd</CODE
> method. Pass it the string to send, and it returns the output of the command. In list context, it returns one line per list element. In scalar context, it returns one long line. It waits for the <CODE
CLASS="literal"
>Prompt</CODE
> before returning.</P
><P
CLASS="para"
>You can separate the sending of the command from the reception of its output with the <CODE
CLASS="literal"
>print</CODE
> and <CODE
CLASS="literal"
>waitfor</CODE
> methods, as we do in the Solution. The <CODE
CLASS="literal"
>waitfor</CODE
> method takes either a single string containing a Perl regular expression match operator:</P
><PRE
CLASS="programlisting"
>$telnet-&gt;waitfor('/--more--/')</PRE
><P
CLASS="para"
>or named arguments. <CODE
CLASS="literal"
>Timeout</CODE
> lets you specify a timeout to override the default, <CODE
CLASS="literal"
>Match</CODE
> is a string containing a match operator as above, and <CODE
CLASS="literal"
>String</CODE
> is a literal string to find:</P
><PRE
CLASS="programlisting"
>$telnet-&gt;waitfor(String =&gt; 'greasy smoke', Timeout =&gt; 30)</PRE
><P
CLASS="para"
>In scalar context, <CODE
CLASS="literal"
>waitfor</CODE
> returns true if the pattern or string was found. If it is not found, the <CODE
CLASS="literal"
>Errmode</CODE
> action is performed. In list context, it returns two strings: all the text before the match, and the text that matched.<A
CLASS="indexterm"
NAME="ch18-idx-1000004317-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004317-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004317-2"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004317-3"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-917"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the Net::Telnet module from CPAN; RFCs 854-856, as amended by later RFCs</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_06.htm"
TITLE="18.5. Reading Mail with POP3"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.5. Reading Mail with POP3"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_08.htm"
TITLE="18.7. Pinging a Machine"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.7. Pinging a Machine"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>18.5. Reading Mail with POP3</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>18.7. Pinging a Machine</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
