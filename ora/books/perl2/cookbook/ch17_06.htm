<HTML
><HEAD
>
<TITLE>Recipe 17.5. Setting Up a UDP Server (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:44:31Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"><LINK
REL="prev"
HREF="ch17_05.htm"
TITLE="17.4. Setting Up a UDP Client"><LINK
REL="next"
HREF="ch17_07.htm"
TITLE="17.6. Using UNIX Domain Sockets"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_05.htm"
TITLE="17.4. Setting Up a UDP Client"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.4. Setting Up a UDP Client"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"
>Chapter 17<BR>Sockets</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_07.htm"
TITLE="17.6. Using UNIX Domain Sockets"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.6. Using UNIX Domain Sockets"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch17-26647"
>17.5. Setting Up a UDP Server</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-678"
>Problem<A
CLASS="indexterm"
NAME="ch17-idx-1000004738-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004738-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004738-2"
></A
></A
></H3
><P
CLASS="para"
>You want to write a UDP server.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-684"
>Solution</A
></H3
><P
CLASS="para"
>First <CODE
CLASS="literal"
>bind</CODE
> to the port the server is to be contacted on. With IO::Socket, this is easily accomplished:</P
><PRE
CLASS="programlisting"
>use IO::Socket;
$server = IO::Socket::INET-&gt;new(LocalPort =&gt; $server_port,
                                Proto     =&gt; &quot;udp&quot;)
    or die &quot;Couldn't be a udp server on port $server_port : $@\n&quot;;</PRE
><P
CLASS="para"
>Then, go into a loop receiving messages:</P
><PRE
CLASS="programlisting"
>while ($him = $server-&gt;recv($datagram, $MAX_TO_READ, $flags)) {
    # do something
} </PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-706"
>Discussion</A
></H3
><P
CLASS="para"
>Life with UDP is much simpler than life with TCP. Instead of accepting client connections one at a time and committing yourself to a long-term relationship, take messages from clients as they come in. The <CODE
CLASS="literal"
>recv</CODE
> function returns the address of the sender, which you must then decode.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch17_06.htm"
TITLE="udpqotd"
>Example 17.2</A
> is a small UDP-based server that just sits around waiting for messages. Every time a message comes in, we find out who sent it and send them a message based on the previous message, and then save the new message.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch17-37044"
>Example 17.2: udpqotd</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# <A
CLASS="indexterm"
NAME="ch17-idx-1000004742-0"
></A
>udpqotd - UDP message server
use strict;
use IO::Socket;
my($sock, $oldmsg, $newmsg, $hisaddr, $hishost, $MAXLEN, $PORTNO);
$MAXLEN = 1024;
$PORTNO = 5151;
$sock = IO::Socket::INET-&gt;new(LocalPort =&gt; $PORTNO, Proto =&gt; 'udp')
    or die &quot;socket: $@&quot;;
print &quot;Awaiting UDP messages on port $PORTNO\n&quot;;
$oldmsg = &quot;This is the starting message.&quot;;
while ($sock-&gt;recv($newmsg, $MAXLEN)) {
    my($port, $ipaddr) = sockaddr_in($sock-&gt;peername);
    $hishost = gethostbyaddr($ipaddr, AF_INET);
    print &quot;Client $hishost said ``$newmsg''\n&quot;;
    $sock-&gt;send($oldmsg);
    $oldmsg = &quot;[$hishost] $newmsg&quot;;
} 
die &quot;recv: $!&quot;;</PRE
></DIV
><P
CLASS="para"
>This program is easier using IO::Socket than the raw Socket module. We don't have to say where to send the message because the library keeps track of who sent the last message and stores that information away on the <CODE
CLASS="literal"
>$sock</CODE
> object. The <CODE
CLASS="literal"
>peername</CODE
> method retrieves it for decoding.</P
><P
CLASS="para"
>You can't use the <EM
CLASS="emphasis"
>telnet</EM
> program to talk to this server. You have to use a dedicated client. One is shown in <A
CLASS="xref"
HREF="ch17_06.htm"
TITLE="udpmsg"
>Example 17.3</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch17-13236"
>Example 17.3: udpmsg</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# <A
CLASS="indexterm"
NAME="ch17-idx-1000004743-0"
></A
>udpmsg - send a message to the udpquotd server

use IO::Socket;
use strict;

my($sock, $server_host, $msg, $port, $ipaddr, $hishost, 
   $MAXLEN, $PORTNO, $TIMEOUT);

$MAXLEN  = 1024;
$PORTNO  = 5151;
$TIMEOUT = 5;

$server_host = shift;
$msg         = &quot;@ARGV&quot;;
$sock = IO::Socket::INET-&gt;new(Proto     =&gt; 'udp',
                              PeerPort  =&gt; $PORTNO,
                              PeerAddr  =&gt; $server_host)
    or die &quot;Creating socket: $!\n&quot;;
$sock-&gt;send($msg) or die &quot;send: $!&quot;;

eval {
    local $SIG{ALRM} = sub { die &quot;alarm time out&quot; };
    alarm $TIMEOUT;
    $sock-&gt;recv($msg, $MAXLEN)      or die &quot;recv: $!&quot;;
    alarm 0;
    1;  # return value from eval on normalcy
} or die &quot;recv from $server_host timed out after $TIMEOUT seconds.\n&quot;;

($port, $ipaddr) = sockaddr_in($sock-&gt;peername);
$hishost = gethostbyaddr($ipaddr, AF_INET);
print &quot;Server $hishost responded ``$msg''\n&quot;;</PRE
></DIV
><P
CLASS="para"
>This time when we create the socket, we supply a peer host and port at the start, allowing us to omit that information in the <CODE
CLASS="literal"
>send</CODE
>.</P
><P
CLASS="para"
>We've added an <CODE
CLASS="literal"
>alarm</CODE
> timeout in case the server isn't responsive, or maybe not even alive. Because <CODE
CLASS="literal"
>recv</CODE
> is a blocking system call that may not return, we wrap it in the standard <CODE
CLASS="literal"
>eval</CODE
> block construct for timing out a blocking operation.<A
CLASS="indexterm"
NAME="ch17-idx-1000004745-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004745-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004745-2"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004745-3"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004745-4"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-824"
>See Also</A
></H3
><P
CLASS="para"
>The 
<A
CLASS="olink"
HREF="../prog/ch03_139.htm"
>&#13;<CODE
CLASS="literal"
>send</CODE
></A
>,

<A
CLASS="olink"
HREF="../prog/ch03_119.htm"
>&#13;<CODE
CLASS="literal"
>recv</CODE
></A
>,


and 
<A
CLASS="olink"
HREF="../prog/ch03_005.htm"
>&#13;<CODE
CLASS="literal"
>alarm</CODE
></A
>
 functions in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlfunc </I
>(1); the documentation for the standard Socket and IO::Socket modules; the section on 
<A
CLASS="olink"
HREF="../prog/ch06_02.htm"
>&#13;"UDP: message passing"</A
> in <A
CLASS="olink"
HREF="../prog/ch06_01.htm"
>Chapter 6</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlipc </I
>(1); <CITE
CLASS="citetitle"
>Unix Network Programming</CITE
>; <A
CLASS="xref"
HREF="ch16_22.htm"
TITLE="Timing Out an Operation"
>Recipe 16.21</A
>; <A
CLASS="xref"
HREF="ch17_05.htm"
TITLE="Setting Up a UDP Client"
>Recipe 17.4</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_05.htm"
TITLE="17.4. Setting Up a UDP Client"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.4. Setting Up a UDP Client"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_07.htm"
TITLE="17.6. Using UNIX Domain Sockets"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.6. Using UNIX Domain Sockets"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>17.4. Setting Up a UDP Client</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>17.6. Using UNIX Domain Sockets</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
