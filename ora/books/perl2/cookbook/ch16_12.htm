<HTML
><HEAD
>
<TITLE>Recipe 16.11. Making a Process Look Like a File with Named Pipes (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:44:00Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"><LINK
REL="prev"
HREF="ch16_11.htm"
TITLE="16.10. Communicating Between Related Processes"><LINK
REL="next"
HREF="ch16_13.htm"
TITLE="16.12. Sharing Variables in Different Processes"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_11.htm"
TITLE="16.10. Communicating Between Related Processes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.10. Communicating Between Related Processes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"
>Chapter 16<BR>Process Management and Communication</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_13.htm"
TITLE="16.12. Sharing Variables in Different Processes"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.12. Sharing Variables in Different Processes"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch16-20777"
>16.11. Making a Process Look Like a File with Named Pipes</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1960"
>Problem</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch16-idx-1000006359-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006359-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006359-2"
></A
>You want a process to intercept all access to a file. For instance, you want to make your <EM
CLASS="emphasis"
>~/.plan</EM
> file a program that returns a random quote.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1966"
>Solution</A
></H3
><P
CLASS="para"
>Use named pipes. First create one, probably from your shell:</P
><PRE
CLASS="programlisting"
>% mkfifo /path/to/named.pipe</PRE
><P
CLASS="para"
>Here's a reader for it:</P
><PRE
CLASS="programlisting"
>open(FIFO, &quot;&lt; /path/to/named.pipe&quot;)         or die $!;
while (&lt;FIFO&gt;) {
    print &quot;Got: $_&quot;;
}
close(FIFO);</PRE
><P
CLASS="para"
>Here's a writer for it:</P
><PRE
CLASS="programlisting"
>open(FIFO, &quot;&gt; /path/to/named.pipe&quot;)         or die $!;
print FIFO &quot;Smoke this.\n&quot;;
close(FIFO);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1994"
>Discussion</A
></H3
><P
CLASS="para"
>A named pipe, or FIFO as they are also known, is a special file that acts as a buffer to connect processes on the same machine. Ordinary pipes also allow processes to communicate, but those processes must have inherited the filehandles from their parents. To use a named pipe, a process need know only the named pipe's filename. In most cases, processes don't even need to be aware that they're reading from a FIFO.</P
><P
CLASS="para"
>Named pipes can be read from and written to just as though they were ordinary files (unlike Unix-domain sockets as discussed in <A
CLASS="xref"
HREF="ch17_01.htm"
TITLE="Sockets"
>Chapter 17, <CITE
CLASS="chapter"
>Sockets</CITE
></A
>). Data written into the FIFO is buffered up by the operating system, then read back in the order it was written in. Because a FIFO acts as a buffer to connect processes, opening one for reading will block until another process opens it for writing, and vice versa. If you <CODE
CLASS="literal"
>open</CODE
> for read and write using the +&lt; mode to <CODE
CLASS="literal"
>open</CODE
>, you won't block (on most systems) because your process could be both reader and writer.</P
><P
CLASS="para"
>Let's examine how to use a named pipe so people will get a different file each time they <EM
CLASS="emphasis"
>finger</EM
> you. To create a named pipe, use <EM
CLASS="emphasis"
>mkfifo</EM
> or <EM
CLASS="emphasis"
>mknod</EM
> to create a named pipe called <EM
CLASS="emphasis"
>.plan</EM
> in your home directory:</P
><PRE
CLASS="programlisting"
>% mkfifo ~/.plan                    # isn't this everywhere yet?
% mknod  ~/.plan p                  # in case you don't have mkfifo</PRE
><P
CLASS="para"
>On some systems, you must use <I
CLASS="filename"
>mknod </I
>(8). The location and names of these programs aren't uniform or necessarily obvious, so consult your system documentation to find out where these programs are.</P
><P
CLASS="para"
>The next step is to create a program to feed data to the programs that read from your ~<EM
CLASS="emphasis"
>/.plan</EM
> file. We'll just print the date and time, as shown in <A
CLASS="xref"
HREF="ch16_12.htm"
TITLE="dateplan"
>Example 16.9</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch16-15443"
>Example 16.9: dateplan</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# dateplan - place current date and time in .plan file
while (1) {
    open(FIFO, &quot;&gt; $ENV{HOME}/.plan&quot;)
        or die &quot;Couldn't open $ENV{HOME}/.plan for writing: $!\n&quot;;
    print FIFO &quot;The current time is &quot;, scalar(localtime), &quot;\n&quot;;
    close FIFO;
    sleep 1;
}</PRE
></DIV
><P
CLASS="para"
>Unfortunately, this won't always work, because some <EM
CLASS="emphasis"
>finger</EM
> programs and their attendant daemons check the size of the <EM
CLASS="emphasis"
>.plan</EM
> file before trying to read it. Because named pipes appear as special files of zero size on the filesystem, such clients and servers will not try to open or read from our named pipe, and the trick will fail.</P
><P
CLASS="para"
>In our <EM
CLASS="emphasis"
>.plan</EM
> example, the writer was a daemon. It's not uncommon for readers to be daemons as well. Take, for instance, the use of a named pipe to centralize logging from many processes. The log server reads log messages from the named pipe and can send them to a database or file. Clients write their messages to the named pipe. This removes the distribution logic from the clients, making changes to message distribution easy to implement.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch16_12.htm"
TITLE="fifolog"
>Example 16.10</A
> is a simple program to read two-line messages where the first line is the name of the service and the second line is the message being logged. All messages from <CODE
CLASS="literal"
>httpd</CODE
> are ignored, while all messages from <CODE
CLASS="literal"
>login</CODE
> are saved to <I
CLASS="filename"
>/var/log/login</I
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch16-41177"
>Example 16.10: fifolog</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# <A
CLASS="indexterm"
NAME="ch16-idx-1000006360-0"
></A
>fifolog - read and record log msgs from fifo

use IO::File;

$SIG{ALRM} = sub { close(FIFO) };   # move on to the next queued process

while (1) {
    alarm(0);                       # turn off alarm for blocking open
    open(FIFO, &quot;&lt; /tmp/log&quot;)        or die &quot;Can't open /tmp/log : $!\n&quot;;
    alarm(1);                       # you have 1 second to log

    $service = &lt;FIFO&gt;;
    next unless defined $service;   # interrupted or nothing logged
    chomp $service;

    $message = &lt;FIFO&gt;;
    next unless defined $message;   # interrupted or nothing logged
    chomp $message;

    alarm(0);                       # turn off alarms for message processing

    if ($service eq &quot;http&quot;) {
        # ignoring
    } elsif ($service eq &quot;login&quot;) {
        # log to /var/log/login
        if ( open(LOG, &quot;&gt;&gt; /tmp/login&quot;) ) {
            print LOG scalar(localtime), &quot; $service $message\n&quot;;
            close(LOG);
        } else {
            warn &quot;Couldn't log $service $message to /var/log/login : $!\n&quot;;
        }
    }
}</PRE
></DIV
><P
CLASS="para"
>This program is more complicated than the <EM
CLASS="emphasis"
>.plan</EM
> program for several reasons. First and foremost, we don't want our logging server to block would-be writers for long. It's easy to imagine a situation where an attacker or misbehaving writer opens the named pipe for writing, but doesn't send a complete message. To prevent this, we use <CODE
CLASS="literal"
>alarm</CODE
> and <CODE
CLASS="literal"
>SIGALRM</CODE
> to signal us if we get stuck reading.</P
><P
CLASS="para"
>Only two exceptional conditions can happen when using named pipes: a writer can have its reader disappear, or vice versa. If a process is reading from a named pipe and the writer closes its end, the reading process will get an end of file (<CODE
CLASS="literal"
>&lt;&gt;</CODE
> returns <CODE
CLASS="literal"
>undef</CODE
>). If the reader closes the connection, though, the writer will get a <CODE
CLASS="literal"
>SIGPIPE</CODE
> when it next tries to write there. If you disregard broken pipe signals with <CODE
CLASS="literal"
>$SIG{PIPE}</CODE
> <CODE
CLASS="literal"
>=</CODE
> <CODE
CLASS="literal"
>'IGNORE'</CODE
>, your <CODE
CLASS="literal"
>print</CODE
> will return a false value and <CODE
CLASS="literal"
>$!</CODE
> will be set to <CODE
CLASS="literal"
>EPIPE</CODE
>:</P
><PRE
CLASS="programlisting"
>use POSIX qw(:errno_h);

$SIG{PIPE} = 'IGNORE';
# ...
$status = print FIFO &quot;Are you there?\n&quot;;
if (!$status &amp;&amp; $! == EPIPE) {
    warn &quot;My reader has forsaken me!\n&quot;;
    next;
}</PRE
><P
CLASS="para"
>You may be asking "If I have 100 processes all trying simultaneously to write to this server, how can I be sure that I'll get 100 separate entries and not a jumbled mishmash with characters or lines from different processes?" That's a good question. The POSIX standard says that writes of less than <CODE
CLASS="literal"
>PIPE_BUF</CODE
> bytes in size will be delivered atomically, i.e. not jumbled. You can get the <CODE
CLASS="literal"
>PIPE_BUF</CODE
> constant from <CODE
CLASS="literal"
>POSIX</CODE
>:</P
><PRE
CLASS="programlisting"
>use POSIX;
print _POSIX_PIPE_BUF, &quot;\n&quot;;</PRE
><P
CLASS="para"
>Fortunately, the POSIX standard also requires <CODE
CLASS="literal"
>PIPE_BUF</CODE
> to be <EM
CLASS="emphasis"
>at least</EM
> 512 bytes. This means that all we have to do is ensure that our clients don't try to log more than 512 bytes at a time.</P
><P
CLASS="para"
>What if you want to log more than 512 bytes at a time? Then you split each large message into several smaller (fewer than 512 bytes) messages, preface each with the unique client identifier (process ID, say) and have the server reassemble them. This is similar to the processing involved in TCP/IP message fragmentation and reassembly.</P
><P
CLASS="para"
>Because a single named pipe doesn't allow bidirectional access between writer and reader, authentication and similar ways of preventing forged messages are hard to do (if not impossible). Rather than struggle to force such things on top of a model that doesn't accommodate them, you are better off using the filesystem's access control to restrict access to the file through the owner and group permissions on the named pipe.<A
CLASS="indexterm"
NAME="ch16-idx-1000006362-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006362-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006362-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-2138"
>See Also</A
></H3
><P
CLASS="para"
><I
CLASS="filename"
>mkfifo (8)</I
> or <I
CLASS="filename"
>mknod (8)</I
> (if you have them); <A
CLASS="xref"
HREF="ch17_07.htm"
TITLE="Using UNIX Domain Sockets"
>Recipe 17.6</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_11.htm"
TITLE="16.10. Communicating Between Related Processes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.10. Communicating Between Related Processes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_13.htm"
TITLE="16.12. Sharing Variables in Different Processes"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.12. Sharing Variables in Different Processes"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>16.10. Communicating Between Related Processes</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>16.12. Sharing Variables in Different Processes</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
