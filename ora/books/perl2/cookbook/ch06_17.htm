<HTML
><HEAD
>
<TITLE>Recipe 6.16. Detecting Duplicate Words (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:34:37Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"><LINK
REL="prev"
HREF="ch06_16.htm"
TITLE="6.15. Greedy and Non-Greedy Matches"><LINK
REL="next"
HREF="ch06_18.htm"
TITLE="6.17. Expressing AND, OR, and NOT in a Single Pattern"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_16.htm"
TITLE="6.15. Greedy and Non-Greedy Matches"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.15. Greedy and Non-Greedy Matches"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"
>Chapter 6<BR>Pattern Matching</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_18.htm"
TITLE="6.17. Expressing AND, OR, and NOT in a Single Pattern"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.17. Expressing AND, OR, and NOT in a Single Pattern"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-22880"
>6.16. Detecting Duplicate Words</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1787"
>Problem<A
CLASS="indexterm"
NAME="ch06-idx-1000007683-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007683-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007683-2"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007683-3"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007683-4"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007683-5"
></A
></A
></H3
><P
CLASS="para"
>You want to check for doubled words in a document.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1793"
>Solution</A
></H3
><P
CLASS="para"
>Use backreferences in your regular expression.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1799"
>Discussion</A
></H3
><P
CLASS="para"
>Parentheses in a pattern make the regular expression engine remember what matched that part of the pattern. Later in your pattern, you can refer to the actual string that matched with <CODE
CLASS="literal"
>\1</CODE
> (indicating the string matched by the first set of parentheses), <CODE
CLASS="literal"
>\2</CODE
> (for the second string matched by the second set of parentheses), and so on. Don't use <CODE
CLASS="literal"
>$1</CODE
>; it would be treated as a variable and interpolated before the match began. If you match <CODE
CLASS="literal"
>/([A-Z])\1/</CODE
>, that says to match a capital letter followed not just by any capital letter, but by whichever one was captured by the first set of parentheses in that pattern.</P
><P
CLASS="para"
>This sample code reads its input files by paragraph, with the definition of <I
CLASS="firstterm"
>paragraph</I
> following Perl's notion of two or more contiguous newlines. Within each paragraph, it finds all duplicate words. It ignores case and can match across newlines.</P
><P
CLASS="para"
>Here we use <CODE
CLASS="literal"
>/x</CODE
> to embed whitespace and comments to make the regular expression readable. <CODE
CLASS="literal"
>/i</CODE
> lets us match both instances of <CODE
CLASS="literal"
>&quot;is&quot;</CODE
> in the sentence <CODE
CLASS="literal"
>&quot;Is</CODE
> <CODE
CLASS="literal"
>is</CODE
> <CODE
CLASS="literal"
>this</CODE
> <CODE
CLASS="literal"
>ok?&quot;</CODE
>. We use <CODE
CLASS="literal"
>/g</CODE
> in a <CODE
CLASS="literal"
>while</CODE
> loop to keep finding duplicate words until we run out of text. Within the pattern, use <CODE
CLASS="literal"
>\b</CODE
> (word boundary) and <CODE
CLASS="literal"
>\s</CODE
> (whitespace) to help pick out whole words and avoid matching <CODE
CLASS="literal"
>&quot;This&quot;</CODE
>.</P
><PRE
CLASS="programlisting"
>$/ = '';                      # paragrep mode
while (&lt;&gt;) {
    while ( m{
                \b            # start at a word boundary (begin letters)
                (\S+)         # find chunk of non-whitespace
                \b            # until another word boundary (end letters)
                (
                    \s+       # separated by some whitespace
                    \1        # and that very same chunk again
                    \b        # until another word boundary
                ) +           # one or more sets of those
             }xig
         )
    {
        print &quot;dup word '$1' at paragraph $.\n&quot;;
    }
}</PRE
><P
CLASS="para"
>That code finds the duplicated <I
CLASS="firstterm"
>test</I
> in the following paragraph:</P
><PRE
CLASS="programlisting"
>This is a test
test of the duplicate word finder.</PRE
><P
CLASS="para"
>The use of a word boundary anchor surrounding <CODE
CLASS="literal"
>\S+</CODE
> is usually a bad idea because word boundaries are defined as transitions between alphanumunders (that's a <CODE
CLASS="literal"
>\w</CODE
>) and either the edge of the string or a non-alphanumunder. Surrounding it by <CODE
CLASS="literal"
>\b</CODE
> changes <CODE
CLASS="literal"
>\S+</CODE
> from its normal meaning of one or more non-whitespace characters to a stretch of non-whitespace whose first and last character must be an alphanumunder.</P
><P
CLASS="para"
>Here's another interesting demonstration of using backreferences. Imagine you had two words in which the end of the first word was the same as the start of the next one, such as <CODE
CLASS="literal"
>&quot;nobody&quot;</CODE
> and <CODE
CLASS="literal"
>&quot;bodysnatcher&quot;</CODE
>. You'd like to find that overlapping part and come up with <CODE
CLASS="literal"
>&quot;nobodysnatcher&quot;</CODE
>. This is just a variant on the duplicate word problem.</P
><P
CLASS="para"
>Conventional byte-by-byte processing the way a C programmer would write it would take a great deal of tricky code to solve this problem. But with a backtracking pattern matcher, it just takes one simple pattern match.</P
><PRE
CLASS="programlisting"
>$a = 'nobody';
$b = 'bodysnatcher';
if (&quot;$a $b&quot; =~ /^(\w+)(\w+) \2(\w+)$/) {
    print &quot;$2 overlaps in $1-$2-$3\n&quot;;
}
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>body overlaps in no-body-snatcher</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>You might think that <CODE
CLASS="literal"
>$1</CODE
> would first grab up all of <CODE
CLASS="literal"
>&quot;nobody&quot;</CODE
> due to greediness. In fact, it does &nbsp;-  for a while. But once it's done so, there aren't any more characters to put in <CODE
CLASS="literal"
>$2</CODE
>. So the engine backs up and <CODE
CLASS="literal"
>$1</CODE
> begrudgingly gives up one character to <CODE
CLASS="literal"
>$2</CODE
>. The space character matches successfully, but then it sees <CODE
CLASS="literal"
>\2</CODE
>, which currently holds merely <CODE
CLASS="literal"
>&quot;y&quot;</CODE
>. The next character in the string is not a <CODE
CLASS="literal"
>&quot;y&quot;</CODE
>, but a <CODE
CLASS="literal"
>&quot;b&quot;</CODE
>. This makes the engine back up all the way, eventually forcing <CODE
CLASS="literal"
>$1</CODE
> to surrender enough to <CODE
CLASS="literal"
>$2</CODE
> that the pattern can match something, a space, then that same thing.</P
><P
CLASS="para"
>Actually, that won't quite work out if the overlap is itself the product of a doubling, as in <CODE
CLASS="literal"
>&quot;rococo&quot;</CODE
> and <CODE
CLASS="literal"
>&quot;cocoon&quot;</CODE
>. The preceding algorithm would have decided that the overlapping string, <CODE
CLASS="literal"
>$2</CODE
>, must be just <CODE
CLASS="literal"
>&quot;co&quot;</CODE
> rather than <CODE
CLASS="literal"
>&quot;coco&quot;</CODE
>. But we don't want a <CODE
CLASS="literal"
>&quot;rocococoon&quot;</CODE
>; we want a <CODE
CLASS="literal"
>&quot;rococoon&quot;</CODE
>. Adding a minimal matching quantifier to the <CODE
CLASS="literal"
>$1</CODE
> part gives the much better pattern:</P
><PRE
CLASS="programlisting"
>/^(\w+?)(\w+) \2(\w+)$/, </PRE
><P
CLASS="para"
>which solves this problem.</P
><P
CLASS="para"
>Backtracking is more powerful than you imagine. <A
CLASS="xref"
HREF="ch06_17.htm"
TITLE="prime-pattern"
>Example 6.11</A
> offers another take on the prime factorization problem from <A
CLASS="xref"
HREF="ch02_01.htm"
TITLE="Numbers"
>Chapter 2, <CITE
CLASS="chapter"
>Numbers</CITE
></A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch06-26688"
>Example 6.11: prime-pattern</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# <A
CLASS="indexterm"
NAME="ch06-idx-1000007808-0"
></A
>prime_pattern -- find prime factors of argument using pattern matching
for ($N = ('o' x shift); $N =~ /^(oo+?)\1+$/; $N =~ s/$1/o/g) {
    print length($1), &quot; &quot;;
}
print length ($N), &quot;\n&quot;;</PRE
></DIV
><P
CLASS="para"
>Although not practical, this approach marvelously demonstrates the power of backtracking and is therefore very instructional.</P
><P
CLASS="para"
>Here's another example. Using a brilliant insight first illustrated by Doug McIlroy (or so says Andrew Hume), you can find solutions to Diophantine equations of order one with regular expressions. Consider the equation <CODE
CLASS="literal"
>12x</CODE
> <CODE
CLASS="literal"
>+</CODE
> <CODE
CLASS="literal"
>15y</CODE
> <CODE
CLASS="literal"
>+</CODE
> <CODE
CLASS="literal"
>16z</CODE
> <CODE
CLASS="literal"
>=</CODE
> <CODE
CLASS="literal"
>281</CODE
>. Can you think of possible values for <EM
CLASS="emphasis"
>x</EM
>, <EM
CLASS="emphasis"
>y</EM
>, and <EM
CLASS="emphasis"
>z  </EM
>? Perl can!</P
><PRE
CLASS="programlisting"
># solve for 12x + 15y + 16z = 281, maximizing x
if (($X, $Y, $Z)  =
   (('o' x 281)  =~ /^(o*)\1{11}(o*)\2{14}(o*)\3{15}$/))
{
    ($x, $y, $z) = (length($X), length($Y), length($Z));
    print &quot;One solution is: x=$x; y=$y; z=$z.\n&quot;;
} else {
    print &quot;No solution.\n&quot;;
}
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>One solution is: x=17; y=3; z=2.</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>Because the first <CODE
CLASS="literal"
>o*</CODE
> was greedy, <EM
CLASS="emphasis"
>x</EM
> was allowed to grow as large as it could. Changing one or more of the <CODE
CLASS="literal"
>*</CODE
> quantifiers to <CODE
CLASS="literal"
>*?</CODE
>, <CODE
CLASS="literal"
>+</CODE
>, or <CODE
CLASS="literal"
>+?</CODE
> can produce different solutions.</P
><PRE
CLASS="programlisting"
>('o' x 281)  =~ /^(o+)\1{11}(o+)\2{14}(o+)\3{15}$/
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>One solution is: x=17; y=3; z=2</I
></CODE
></B
></CODE
>
('o' x 281)  =~ /^(o*?)\1{11}(o*)\2{14}(o*)\3{15}$/
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>One solution is: x=0; y=7; z=11.</I
></CODE
></B
></CODE
>
('o' x 281)  =~ /^(o+?)\1{11}(o*)\2{14}(o*)\3{15}$/
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>One solution is: x=1; y=3; z=14.</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>An important lesson to be learned from these amazing feats of mathematical prowess by a lowly pattern matcher is that a pattern matching engine, particularly a backtracking one, very much wants to give you an answer and will work phenomenally hard to do so. But solving a regular expression with backreferences can take time exponentially proportional to the length of the input to complete. For all but trivial inputs, such algorithms make continental drift seem brisk.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1000007124"
>See Also</A
></H3
><P
CLASS="para"
>The explanation of backreferences in the "Regular Expressions" section of <I
CLASS="filename"
>perlre </I
>(1), and in <A
CLASS="olink"
HREF="../prog/ch02_04.htm"
>"the fine print"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the "The Doubled-Word Thing" section in Chapter 2 of <CITE
CLASS="citetitle"
>Mastering Regular Expressions</CITE
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_16.htm"
TITLE="6.15. Greedy and Non-Greedy Matches"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.15. Greedy and Non-Greedy Matches"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_18.htm"
TITLE="6.17. Expressing AND, OR, and NOT in a Single Pattern"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.17. Expressing AND, OR, and NOT in a Single Pattern"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.15. Greedy and Non-Greedy Matches</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6.17. Expressing AND, OR, and NOT in a Single Pattern</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
