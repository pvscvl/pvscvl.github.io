<HTML
><HEAD
>
<TITLE>Recipe 10.11. Prototyping Functions (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:39:58Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. Subroutines"><LINK
REL="prev"
HREF="ch10_11.htm"
TITLE="10.10. Returning Failure"><LINK
REL="next"
HREF="ch10_13.htm"
TITLE="10.12. Handling Exceptions"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_11.htm"
TITLE="10.10. Returning Failure"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.10. Returning Failure"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch10_01.htm"
TITLE="10. Subroutines"
>Chapter 10<BR>Subroutines</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_13.htm"
TITLE="10.12. Handling Exceptions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.12. Handling Exceptions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch10-24993"
>10.11. Prototyping Functions</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-1000005166"
>Problem<A
CLASS="indexterm"
NAME="ch10-idx-1000005165-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000005165-1"
></A
></A
></H3
><P
CLASS="para"
>You want to use function prototypes so the compiler can check your argument types.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-818"
>Solution</A
></H3
><P
CLASS="para"
>Perl has something of a prototype facility, but it isn't what you're thinking. Perl's function prototypes are more like a context coercion used to write functions that behave like some of Perl's built-ins, such as <CODE
CLASS="literal"
>push</CODE
> and <CODE
CLASS="literal"
>pop</CODE
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-824"
>Discussion</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-1000004719-0"
></A
>Manually checking the validity of a function's arguments can't happen until run-time. If you make sure the function is declared before it is used, you can tickle the compiler into using a very limited form of prototype checking to help you here. Don't confuse Perl's function prototypes with those found in any other language. Perl prototypes serve only to emulate the behavior of built-in functions.</P
><P
CLASS="para"
>A Perl function prototype is zero or more spaces, backslashes, or type characters enclosed in parentheses after the subroutine definition or name. A backslashed type symbol means that the argument is passed by reference, and the argument in that position must start with that type character.</P
><P
CLASS="para"
>A prototype forces context on the arguments to the prototyped function call. This is done when Perl compiles your program, and in most cases this does not necessarily mean that Perl checks the number or type of the arguments to your function. If Perl sees <CODE
CLASS="literal"
>func(3,</CODE
> <CODE
CLASS="literal"
>5)</CODE
> for a function prototyped as <CODE
CLASS="literal"
>sub</CODE
> <CODE
CLASS="literal"
>func</CODE
> <CODE
CLASS="literal"
>($)</CODE
>, it will stop with a compile-time error. But if it sees <CODE
CLASS="literal"
>func(@array)</CODE
> with the same prototype, it will merely put <CODE
CLASS="literal"
>@array</CODE
> into scalar context instead of saying "you can't pass an array&nbsp;- I'm expecting a scalar."</P
><P
CLASS="para"
>This is so important that it bears repeating: don't use Perl prototypes expecting the compiler to check type and number of arguments for you.</P
><P
CLASS="para"
>So what use are they? They have two main uses, although as you experiment with them you may find others. The first use is to tell Perl how many arguments your subroutine has, so you can leave off parentheses when you call the function. The second is to create a subroutine that has the same calling syntax as a built-in.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch10-pgfId-1000005376"
>Omitting parentheses</A
></H4
><P
CLASS="para"
>Ordinarily your subroutines take a list of arguments, and you can omit parentheses on the function call if you like:</P
><PRE
CLASS="programlisting"
>@results = myfunc 3, 5;</PRE
><P
CLASS="para"
>Without prototypes, this is the same as:</P
><PRE
CLASS="programlisting"
>@results = myfunc(3, 5);</PRE
><P
CLASS="para"
>In the absence of parentheses, Perl will put the right hand side of the subroutine call into list context. You can use prototypes to change this behavior:</P
><PRE
CLASS="programlisting"
>sub myfunc($);
@results = myfunc 3, 5;</PRE
><P
CLASS="para"
>Now this is the same as:</P
><PRE
CLASS="programlisting"
>@results = ( myfunc(3), 5 );</PRE
><P
CLASS="para"
>You can also provide an empty prototype to indicate the function takes no arguments, like the built-in function <CODE
CLASS="literal"
>time</CODE
>. This is how Fcntl provides the LOCK_SH, LOCK_EX, and LOCK_UN constants. They are exported functions defined to have an empty prototype:</P
><PRE
CLASS="programlisting"
>sub LOCK_SH () { 1 }
sub LOCK_EX () { 2 }
sub LOCK_UN () { 4 }</PRE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch10-pgfId-1000005427"
>Mimicking built-ins</A
></H4
><P
CLASS="para"
>The other common use of prototypes is to give the convenient pass-without-flattening behavior of built-in functions like <CODE
CLASS="literal"
>push</CODE
> and <CODE
CLASS="literal"
>shift</CODE
>. When you call <CODE
CLASS="literal"
>push</CODE
> as <CODE
CLASS="literal"
>push(@array,</CODE
> <CODE
CLASS="literal"
>1,</CODE
> <CODE
CLASS="literal"
>2,</CODE
> <CODE
CLASS="literal"
>3)</CODE
> the function gets a <EM
CLASS="emphasis"
>reference</EM
> to <CODE
CLASS="literal"
>@array</CODE
> instead of the actual array. This is accomplished by backslashing the <CODE
CLASS="literal"
>@</CODE
> character in the prototype:</P
><PRE
CLASS="programlisting"
>sub mypush (\@@) {
  my $array_ref = shift;
  my @remainder = @_;

  # ...
}</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>\@</CODE
> in the prototype says "require the first argument to begin with an <CODE
CLASS="literal"
>@</CODE
> character, and pass it by reference." The second <CODE
CLASS="literal"
>@</CODE
> says "the rest of the arguments are a (possibly empty) list." A backslash in a prototype requires that the argument actually begin with the literal type character, which can sometimes be annoying. You can't even use the conditional <CODE
CLASS="literal"
>?:</CODE
> construct to pick which array to pass:</P
><PRE
CLASS="programlisting"
> mypush( $x &gt; 10 ? @a : @b , 3, 5 );          # WRONG</PRE
><P
CLASS="para"
>Instead, you must play games with references:</P
><PRE
CLASS="programlisting"
> mypush( @{ $x &gt; 10 ? \@a : \@b }, 3, 5 );    # RIGHT</PRE
><P
CLASS="para"
>Here's an <CODE
CLASS="literal"
>hpush</CODE
> function that works like <CODE
CLASS="literal"
>push</CODE
>, but on <A
CLASS="indexterm"
NAME="ch10-idx-1000006377-0"
></A
>hashes. It appends a list of key/value pairs to an existing hash, overwriting previous contents for those keys.</P
><PRE
CLASS="programlisting"
>sub hpush(\%@) {
    my $href = shift;
    while ( my ($k, $v) = splice(@_, 0, 2) ) {
        $href-&gt;{$k} = $v;
    } 
} 
hpush(%pieces, &quot;queen&quot; =&gt; 9, &quot;rook&quot; =&gt; 5);<A
CLASS="indexterm"
NAME="ch10-idx-1000004715-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004715-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004715-2"
></A
></PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-934"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>prototype</CODE
> function in <I
CLASS="filename"
>perlfunc </I
>(1); the section on <A
CLASS="olink"
HREF="../prog/ch02_07.htm"
>"Prototypes"</A
> in <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlsub </I
>(1); <A
CLASS="xref"
HREF="ch10_06.htm"
TITLE="Passing Arrays and Hashes by Reference"
>Recipe 10.5</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_11.htm"
TITLE="10.10. Returning Failure"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.10. Returning Failure"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_13.htm"
TITLE="10.12. Handling Exceptions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.12. Handling Exceptions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.10. Returning Failure</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>10.12. Handling Exceptions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
