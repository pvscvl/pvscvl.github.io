<HTML
><HEAD
>
<TITLE>Recipe 13.9. Writing an Inheritable Class (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:25Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"><LINK
REL="prev"
HREF="ch13_09.htm"
TITLE="13.8. Determining Subclass Membership"><LINK
REL="next"
HREF="ch13_11.htm"
TITLE="13.10. Accessing Overridden Methods"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_09.htm"
TITLE="13.8. Determining Subclass Membership"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.8. Determining Subclass Membership"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"
>Chapter 13<BR>Classes, Objects, and Ties</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_11.htm"
TITLE="13.10. Accessing Overridden Methods"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.10. Accessing Overridden Methods"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-23209"
>13.9. Writing an Inheritable Class</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1151"
>Problem<A
CLASS="indexterm"
NAME="ch13-idx-1000004562-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004562-1"
></A
></A
></H3
><P
CLASS="para"
>You're not sure whether you've designed your class robustly enough to be inherited.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1157"
>Solution</A
></H3
><P
CLASS="para"
>Use the "empty subclass test" on your class.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1163"
>Discussion</A
></H3
><P
CLASS="para"
>Imagine you've implemented a class called Person that supplies a constructor called <CODE
CLASS="literal"
>new</CODE
>, and methods like <CODE
CLASS="literal"
>age</CODE
> and <CODE
CLASS="literal"
>name</CODE
>. Here's the straightforward implementation:</P
><PRE
CLASS="programlisting"
>package Person;
sub new {
    my $class = shift;
    my $self  = { };
    return bless $self, $class;
} 
sub name {
    my $self = shift;
    $self-&gt;{NAME} = shift if @_;
    return $self-&gt;{NAME};
} 
sub age {
    my $self = shift;
    $self-&gt;{AGE} = shift if @_;
    return $self-&gt;{AGE};
} </PRE
><P
CLASS="para"
>You might use the class in this way:</P
><PRE
CLASS="programlisting"
>use Person;
my $dude = Person-&gt;<CODE
CLASS="literal"
>new()</CODE
>;
$dude-&gt;name(&quot;Jason&quot;);
$dude-&gt;age(23);
printf &quot;%s is age %d.\n&quot;, $dude-&gt;name, $dude-&gt;age;</PRE
><P
CLASS="para"
>Now, consider another class, the one called Employee:</P
><PRE
CLASS="programlisting"
>package Employee;
use Person;
@ISA = (&quot;Person&quot;);
1;</PRE
><P
CLASS="para"
>There's not a lot to that one. All it's doing is loading in class Person and stating that Employee will inherit any needed methods from Person. Since Employee has no methods of its own, it will get all of its methods from Person. We rely upon an Employee to behave just like a Person.</P
><P
CLASS="para"
>Setting up an empty class like this is called the <EM
CLASS="emphasis"
>empty base class test</EM
><A
CLASS="indexterm"
NAME="ch13-idx-1000004570-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004570-1"
></A
> ; that is, it creates a derived class that does nothing but inherit from a base class. If the original base class has been designed properly, then the new derived class can be used as a drop-in replacement for the old one. This means you should be able to change just the class name and everything will still work:</P
><PRE
CLASS="programlisting"
>use Employee;
my $empl = Employee-&gt;<CODE
CLASS="literal"
>new()</CODE
>;
$empl-&gt;name(&quot;Jason&quot;);
$empl-&gt;age(23);
printf &quot;%s is age %d.\n&quot;, $empl-&gt;name, $empl-&gt;age;</PRE
><P
CLASS="para"
>By proper design, we mean using only the two-argument form of <CODE
CLASS="literal"
>bless</CODE
>, avoiding any direct access of class data, and exporting nothing. In the <CODE
CLASS="literal"
>Person::new()</CODE
> function defined above, we were careful to do these things. We use some package data in the constructor, but the reference to this is stored on the object itself. Other methods access package data via that reference, so we should be okay.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-1000005301-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000005301-1"
></A
>Why did we say the <CODE
CLASS="literal"
>Person::new</CODE
> <EM
CLASS="emphasis"
>function </EM
> &nbsp;-   is that not actually a method? A method is just a function that expects as its first argument a class name (package) or object (blessed reference). <CODE
CLASS="literal"
>Person::new</CODE
> is the function that the <CODE
CLASS="literal"
>Person-&gt;new</CODE
> method and the <CODE
CLASS="literal"
>Employee-&gt;new</CODE
> method both end up calling. Although a method call looks a lot like a function call, they aren't the same. If you treat them as the same, very soon you'll be left with nothing but broken programs. First, the actual underlying calling conventions are different: method calls get an extra argument. Second, function calls don't do inheritance, but methods do.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Method Call</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Resulting Function Call</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>Person-&gt;new()</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>Person::new(&quot;Person&quot;)</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>Employee-&gt;new()</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>Person::new(&quot;Employee&quot;)</CODE
></P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>If you got in the habit of calling:</P
><PRE
CLASS="programlisting"
>$him = Person::<CODE
CLASS="literal"
>new()</CODE
>;               # WRONG</PRE
><P
CLASS="para"
>you'd have a subtle problem, because the function wouldn't get an argument of "Person" as it is expecting, and so it couldn't bless into the passed-in class. Still worse, you'd probably want to try to call <CODE
CLASS="literal"
>Employee::new()</CODE
> also. But there is no such function! It's just an inherited method call.</P
><P
CLASS="para"
>So, don't use function calls when you mean to call a method.<A
CLASS="indexterm"
NAME="ch13-idx-1000004572-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004572-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1257"
>See Also</A
></H3
><P
CLASS="para"
><I
CLASS="filename"
>perltoot </I
>(1), <I
CLASS="filename"
>perlobj </I
>(1), and <I
CLASS="filename"
>perlbot </I
>(1); <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <A
CLASS="xref"
HREF="ch13_02.htm"
TITLE="Constructing an Object"
>Recipe 13.1</A
>; <A
CLASS="xref"
HREF="ch13_11.htm"
TITLE="Accessing Overridden Methods"
>Recipe 13.10</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_09.htm"
TITLE="13.8. Determining Subclass Membership"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.8. Determining Subclass Membership"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_11.htm"
TITLE="13.10. Accessing Overridden Methods"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.10. Accessing Overridden Methods"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>13.8. Determining Subclass Membership</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>13.10. Accessing Overridden Methods</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
