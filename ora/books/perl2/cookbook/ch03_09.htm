<HTML
><HEAD
>
<TITLE>Recipe 3.8. Printing a Date (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:30:42Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_01.htm"
TITLE="3. Dates and Times"><LINK
REL="prev"
HREF="ch03_08.htm"
TITLE="3.7. Parsing Dates and Times from Strings"><LINK
REL="next"
HREF="ch03_10.htm"
TITLE="3.9. High-Resolution Timers"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_08.htm"
TITLE="3.7. Parsing Dates and Times from Strings"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.7. Parsing Dates and Times from Strings"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Dates and Times"
>Chapter 3<BR>Dates and Times</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_10.htm"
TITLE="3.9. High-Resolution Timers"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.9. High-Resolution Timers"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch03-19035"
>3.8. Printing a Date</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-646"
>Problem <A
CLASS="indexterm"
NAME="ch03-idx-1000006341-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006341-1"
></A
></A
></H3
><P
CLASS="para"
>You need to print a date and time shown in Epoch seconds format in human-readable form.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-652"
>Solution</A
></H3
><P
CLASS="para"
>Simply call <CODE
CLASS="literal"
>localtime</CODE
><A
CLASS="indexterm"
NAME="ch03-idx-1000006348-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006348-1"
></A
> or <CODE
CLASS="literal"
>gmtime</CODE
> in scalar context, which takes an Epoch second value and returns a string of the form <CODE
CLASS="literal"
>Tue</CODE
> <CODE
CLASS="literal"
>May</CODE
> <CODE
CLASS="literal"
>26</CODE
> <CODE
CLASS="literal"
>05:15:20</CODE
> <CODE
CLASS="literal"
>1998</CODE
>:</P
><PRE
CLASS="programlisting"
>$STRING = localtime($EPOCH_SECONDS);</PRE
><P
CLASS="para"
>Alternatively, the <CODE
CLASS="literal"
>strftime</CODE
><A
CLASS="indexterm"
NAME="ch03-idx-1000006347-0"
></A
> function in the standard POSIX module supports a more customizable output format, and takes individual DMYHMS values:</P
><PRE
CLASS="programlisting"
>use POSIX qw(strftime);
$STRING = strftime($FORMAT, $SECONDS, $MINUTES, $HOUR,
                   $DAY_OF_MONTH, $MONTH, $YEAR, $WEEKDAY,
                   $YEARDAY, $DST);</PRE
><P
CLASS="para"
>The CPAN module Date::Manip has a <CODE
CLASS="literal"
>UnixDate</CODE
> routine that works like a specialized form <CODE
CLASS="literal"
>sprintf</CODE
> designed to handle dates. Pass it a Date::Manip date value. Using Date::Manip in lieu of POSIX::strftime has the advantage of not requiring a POSIX-compliant system.</P
><PRE
CLASS="programlisting"
>use Date::Manip qw(UnixDate);
$STRING = UnixDate($DATE, $FORMAT);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-676"
>Discussion</A
></H3
><P
CLASS="para"
>The simplest solution is built into Perl already: the <CODE
CLASS="literal"
>localtime</CODE
> function. In scalar context, it returns the string formatted in a particular way:</P
><PRE
CLASS="programlisting"
><CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Sun Sep 21 15:33:36 1997</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>This makes for simple code, although it restricts the format of the string:</P
><PRE
CLASS="programlisting"
>use Time::Local;
$time = timelocal(50, 45, 3, 18, 0, 73);
print &quot;Scalar localtime gives: &quot;, scalar(localtime($time)), &quot;\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Scalar localtime gives: Thu Jan 18 03:45:50 1973</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>Of course, <CODE
CLASS="literal"
>localtime</CODE
> requires the date and time in Epoch seconds. The <CODE
CLASS="literal"
>POSIX::strftime</CODE
> function takes a set of individual DMYMHS values and a format and returns a string. The format is similar to a <CODE
CLASS="literal"
>printf</CODE
> format; <CODE
CLASS="literal"
>%</CODE
> directives specify fields in the output string. A full list of these directives is available in your system's documentation for <CODE
CLASS="literal"
>strftime</CODE
>. <CODE
CLASS="literal"
>strftime</CODE
> expects the individual values representing the date and time to be the same range as the values returned by <CODE
CLASS="literal"
>localtime</CODE
>:</P
><PRE
CLASS="programlisting"
>use POSIX qw(strftime);
use Time::Local;
$time = timelocal(50, 45, 3, 18, 0, 73);
print &quot;strftime gives: &quot;, strftime(&quot;%A %D&quot;, localtime($time)), &quot;\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>strftime gives: Thursday 01/18/73</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>All values are shown in their national representation when using POSIX::strftime. So, if you run it in France, your program would print <CODE
CLASS="literal"
>&quot;Sunday&quot;</CODE
> as <CODE
CLASS="literal"
>&quot;Dimanche&quot;</CODE
>. Be warned: Perl's interface to the POSIX function <CODE
CLASS="literal"
>strftime</CODE
> always converts the date, assuming that it falls in the current time zone.</P
><P
CLASS="para"
>If you don't have access to POSIX's <CODE
CLASS="literal"
>strftime</CODE
> function, there's always the trusty <A
CLASS="indexterm"
NAME="ch03-idx-1000006354-0"
></A
>Date::Manip CPAN module, described in <A
CLASS="xref"
HREF="ch03_07.htm"
TITLE="Day in a Week/Month/Year or Week Number"
>Recipe 3.6</A
>.</P
><PRE
CLASS="programlisting"
>use Date::Manip qw(ParseDate UnixDate);
$date = ParseDate(&quot;18 Jan 1973, 3:45:50&quot;);
$datestr = UnixDate($date, &quot;%a %b %e %H:%M:%S %z %Y&quot;);    # as scalar
print &quot;Date::Manip gives: $datestr\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Date::Manip gives: Thu Jan 18 03:45:50 GMT 1973</I
></CODE
></B
></CODE
><CODE
CLASS="literal"
></CODE
><A
CLASS="indexterm"
NAME="ch03-idx-1000006350-0"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-724"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>gmtime</CODE
> and <CODE
CLASS="literal"
>localtime</CODE
> functions in <EM
CLASS="emphasis"
>perlfunc </EM
>(1) and <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <I
CLASS="filename"
>perllocale </I
>(1); your system's <I
CLASS="filename"
>strftime </I
>(3) manpage; the documentation for the POSIX module (also in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>); the documentation for the CPAN module Date::Manip <A
CLASS="indexterm"
NAME="ch03-idx-1000006343-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006343-1"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_08.htm"
TITLE="3.7. Parsing Dates and Times from Strings"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.7. Parsing Dates and Times from Strings"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_10.htm"
TITLE="3.9. High-Resolution Timers"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.9. High-Resolution Timers"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.7. Parsing Dates and Times from Strings</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.9. High-Resolution Timers</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
