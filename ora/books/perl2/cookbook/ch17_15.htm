<HTML
><HEAD
>
<TITLE>Recipe 17.14. Writing a Multi-Homed Server (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:44:43Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"><LINK
REL="prev"
HREF="ch17_14.htm"
TITLE="17.13. Non-Forking Servers"><LINK
REL="next"
HREF="ch17_16.htm"
TITLE="17.15. Making a Daemon Server"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_14.htm"
TITLE="17.13. Non-Forking Servers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.13. Non-Forking Servers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"
>Chapter 17<BR>Sockets</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_16.htm"
TITLE="17.15. Making a Daemon Server"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.15. Making a Daemon Server"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch17-17381"
>17.14. Writing a Multi-Homed Server</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1838"
>Problem<A
CLASS="indexterm"
NAME="ch17-idx-1000004864-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004864-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004864-2"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004864-3"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004864-4"
></A
></A
></H3
><P
CLASS="para"
>You want to write a server that knows that the machine it runs on has multiple IP addresses, and that it should possibly do different things for each address.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1844"
>Solution</A
></H3
><P
CLASS="para"
>Don't bind your server to a particular address. Instead, bind to <CODE
CLASS="literal"
>INADDR_ANY</CODE
>. Then, once you've <CODE
CLASS="literal"
>accept</CODE
>ed a connection, use <CODE
CLASS="literal"
>getsockname</CODE
> on the client socket to find out which address they connected to:</P
><PRE
CLASS="programlisting"
>use Socket;

socket(SERVER, PF_INET, SOCK_STREAM, getprotobyname('tcp'));
setsockopt(SERVER, SOL_SOCKET, SO_REUSEADDR, 1);
bind(SERVER, sockaddr_in($server_port, INADDR_ANY))
    or die &quot;Binding: $!\n&quot;;

# accept loop
while (accept(CLIENT, SERVER)) {
    $my_socket_address = getsockname(CLIENT);
    ($port, $myaddr)   = sockaddr_in($my_socket_address);
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1874"
>Discussion</A
></H3
><P
CLASS="para"
>Whereas <CODE
CLASS="literal"
>getpeername</CODE
><A
CLASS="indexterm"
NAME="ch17-idx-1000004870-0"
></A
> (as discussed in <A
CLASS="xref"
HREF="ch17_08.htm"
TITLE="Identifying the Other End of a Socket"
>Recipe 17.7</A
>) returns the address of the remote end of the socket, <CODE
CLASS="literal"
>getsockname</CODE
> returns the address of the local end. When we've bound to <CODE
CLASS="literal"
>INADDR_ANY</CODE
>, thus accepting connections on any address the machine has, we need to use <CODE
CLASS="literal"
>getsockname</CODE
> to identify which address the client connected to.</P
><P
CLASS="para"
>If you're using IO::Socket::INET, your code will look like this:</P
><PRE
CLASS="programlisting"
>$server = IO::Socket::INET-&gt;new(LocalPort =&gt; $server_port,
                                Type      =&gt; SOCK_STREAM,
                                Proto     =&gt; 'tcp',
                                Listen    =&gt; 10)
    or die &quot;Can't create server socket: $@\n&quot;;

while ($client = $server-&gt;accept()) {
    $my_socket_address = $client-&gt;sockname();
    ($port, $myaddr)   = sockaddr_in($my_socket_address);
    # ...
}</PRE
><P
CLASS="para"
>If you don't specify a local port to <CODE
CLASS="literal"
>IO::Socket::INET-&gt;new</CODE
>, your socket will be bound to <CODE
CLASS="literal"
>INADDR_ANY</CODE
>.</P
><P
CLASS="para"
>If you want your server to listen only for a <EM
CLASS="emphasis"
>particular</EM
> virtual host, don't use <CODE
CLASS="literal"
>INADDR_ANY</CODE
>. Instead, bind to a specific host address:</P
><PRE
CLASS="programlisting"
>use Socket;

$port = 4269;                       # port to bind to
$host = &quot;specific.host.com&quot;;        # virtual host to listen on

socket(Server, PF_INET, SOCK_STREAM, getprotobyname(&quot;tcp&quot;))
    or die &quot;socket: $!&quot;;
bind(Server, sockaddr_in($port, inet_aton($host)))
    or die &quot;bind: $!&quot;;
while ($client_address = accept(Client, Server)) {
    # ...
}<A
CLASS="indexterm"
NAME="ch17-idx-1000004866-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004866-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004866-2"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004866-3"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004866-4"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1932"
>See Also</A
></H3
><P
CLASS="para"
>The 
<A
CLASS="olink"
HREF="../prog/ch03_067.htm"
>&#13;
<CODE
CLASS="literal"
>getsockname</CODE
></A
> function in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlfunc </I
>(1); the documentation for the standard Socket and IO::Socket modules; the section on 
<A
CLASS="olink"
HREF="../prog/ch06_02.htm"
> "Sockets"</A
> in <A
CLASS="olink"
HREF="../prog/ch06_01.htm"
>Chapter 6</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> or <I
CLASS="filename"
>perlipc </I
>(1)</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_14.htm"
TITLE="17.13. Non-Forking Servers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.13. Non-Forking Servers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_16.htm"
TITLE="17.15. Making a Daemon Server"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.15. Making a Daemon Server"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>17.13. Non-Forking Servers</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>17.15. Making a Daemon Server</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
