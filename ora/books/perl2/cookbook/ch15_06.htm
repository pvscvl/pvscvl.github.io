<HTML
><HEAD
>
<TITLE>Recipe 15.5. Changing Text Color (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:43:18Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch15_01.htm"
TITLE="15. User Interfaces"><LINK
REL="prev"
HREF="ch15_05.htm"
TITLE="15.4. Determining Terminal or Window Size"><LINK
REL="next"
HREF="ch15_07.htm"
TITLE="15.6. Reading from the Keyboard"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_05.htm"
TITLE="15.4. Determining Terminal or Window Size"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.4. Determining Terminal or Window Size"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch15_01.htm"
TITLE="15. User Interfaces"
>Chapter 15<BR>User Interfaces</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_07.htm"
TITLE="15.6. Reading from the Keyboard"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.6. Reading from the Keyboard"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch15-chap15_changing_0"
>15.5. Changing Text Color</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-pgfId-453"
>Problem</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch15-idx-1000005079-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005079-1"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005079-2"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005079-3"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005079-4"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005079-5"
></A
>You want text to appear in different colors on the screen. For instance, you want to emphasize a mode line or highlight an error message.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-pgfId-459"
>Solution</A
></H3
><P
CLASS="para"
>Use the CPAN module <A
CLASS="indexterm"
NAME="ch15-idx-1000005080-0"
></A
>Term::ANSIColor to send the ANSI color-change sequences to the user's terminal:</P
><PRE
CLASS="programlisting"
>use Term::ANSIColor;

print color(&quot;red&quot;), &quot;Danger, Will Robinson!\n&quot;, color(&quot;reset&quot;);
print &quot;This is just normal text.\n&quot;;
print colored(&quot;&lt;BLINK&gt;Do you hurt yet?&lt;/BLINK&gt;&quot;, &quot;blink&quot;);</PRE
><P
CLASS="para"
>Or, you can use convenience functions from Term::ANSIColor:</P
><PRE
CLASS="programlisting"
>use Term::ANSIColor qw(:constants);

print RED, &quot;Danger, Will Robinson!\n&quot;, RESET;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-pgfId-483"
>Discussion</A
></H3
><P
CLASS="para"
>Term::ANSIColor prepares escape sequences that some (but far from all) terminals will recognize. For example, if you normally launch a <EM
CLASS="emphasis"
>color-xterm</EM
>, this recipe will work. If you normally use the normal <EM
CLASS="emphasis"
>xterm</EM
> program, or have a vt100 in your kitchen, it won't.</P
><P
CLASS="para"
>There are two ways of using the module: either by calling the exported functions <CODE
CLASS="literal"
>color($attribute)</CODE
><A
CLASS="indexterm"
NAME="ch15-idx-1000005081-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005081-1"
></A
> and <CODE
CLASS="literal"
>colored($text,</CODE
> <CODE
CLASS="literal"
>$attribute)</CODE
>, or by using convenience functions like <CODE
CLASS="literal"
>BOLD</CODE
>, <CODE
CLASS="literal"
>BLUE</CODE
>, and <CODE
CLASS="literal"
>RESET</CODE
>.</P
><P
CLASS="para"
>Attributes can be a combination of colors and controls. The colors are black, red, green, yellow, blue, magenta, on_block, on_red, on_green, on_yellow, on_blue, on_magenta, on_cyan, and on_white. (Apparently orange and purple don't matter.) The controls are clear, reset, bold, underline, underscore, blink, reverse, and concealed. Clear and reset are synonyms, as are underline and underscore. Reset restores the colors to the way they were when the program started, and concealed makes foreground and background colors the same.</P
><P
CLASS="para"
>You can combine attributes:</P
><PRE
CLASS="programlisting"
># rhyme for the deadly coral snake
print color(&quot;red on_black&quot;),  &quot;venom lack\n&quot;;
print color(&quot;red on_yellow&quot;), &quot;kill that fellow\n&quot;;

print color(&quot;green on_cyan blink&quot;), &quot;garish!\n&quot;;
print color(&quot;reset&quot;);</PRE
><P
CLASS="para"
>We could have written this as:</P
><PRE
CLASS="programlisting"
>print colored(&quot;venom lack\n&quot;, &quot;red&quot;, on_black&quot;);
print colored(&quot;kill that fellow\n&quot;, &quot;red&quot;, &quot;on_yellow&quot;);

print colored(&quot;garish!\n&quot;, &quot;green&quot;, &quot;on_cyan&quot;, &quot;blink&quot;);</PRE
><P
CLASS="para"
>or as:</P
><PRE
CLASS="programlisting"
>use Term::ANSIColor qw(:constants);

print BLACK, ON_WHITE, &quot;black on white\n&quot;;
print WHITE, ON_BLACK, &quot;white on black\n&quot;;
print GREEN, ON_CYAN, BLINK, &quot;garish!\n&quot;;
print RESET;</PRE
><P
CLASS="para"
>Here, <CODE
CLASS="literal"
>BLACK</CODE
> is a function exported from Term::ANSIColor.</P
><P
CLASS="para"
>It's important to <CODE
CLASS="literal"
>print</CODE
> <CODE
CLASS="literal"
>RESET</CODE
> or <CODE
CLASS="literal"
>color(&quot;reset&quot;)</CODE
> at the end of your program if you're not calling <CODE
CLASS="literal"
>colored</CODE
> for everything. Failure to reset your terminal will leave it displaying odd colors. You may want to use:</P
><PRE
CLASS="programlisting"
>END { print color(&quot;reset&quot;) }</PRE
><P
CLASS="para"
>to ensure the colors will be reset when your program finishes.</P
><P
CLASS="para"
>Attributes that span lines of text can confuse some programs or devices. If this becomes a problem, either manually set the attributes at the start of each line, or use <CODE
CLASS="literal"
>colored</CODE
> after setting the variable <CODE
CLASS="literal"
>$Term::ANSIColor::EACHLINE</CODE
> to the line terminator:</P
><PRE
CLASS="programlisting"
>$Term::ANSIColor::EACHLINE = $/;
print colored(&lt;&lt;EOF, RED, ON_WHITE, BOLD, BLINK);
This way
each line
has its own
attribute set.
EOF<A
CLASS="indexterm"
NAME="ch15-idx-1000005083-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005083-1"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005083-2"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005083-3"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005083-4"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005083-5"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005083-6"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-pgfId-553"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the Term::AnsiColor module from CPAN</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_05.htm"
TITLE="15.4. Determining Terminal or Window Size"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.4. Determining Terminal or Window Size"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_07.htm"
TITLE="15.6. Reading from the Keyboard"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.6. Reading from the Keyboard"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>15.4. Determining Terminal or Window Size</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>15.6. Reading from the Keyboard</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
