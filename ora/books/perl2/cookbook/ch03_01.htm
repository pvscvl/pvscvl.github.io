<HTML
><HEAD
>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:30:29Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Perl Cookbook"><LINK
REL="prev"
HREF="ch02_20.htm"
TITLE="2.19. Program: Calculating Prime Factors"><LINK
REL="next"
HREF="ch03_02.htm"
TITLE="3.1. Finding Today's Date"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_20.htm"
TITLE="2.19. Program: Calculating Prime Factors"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.19. Program: Calculating Prime Factors"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 3</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_02.htm"
TITLE="3.1. Finding Today's Date"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.1. Finding Today's Date"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch03-16597"
>3. Dates and Times</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch03-15450"
TITLE="3.0. Introduction"
>Introduction</A
><BR><A
CLASS="sect1"
HREF="ch03_02.htm"
TITLE="3.1. Finding Today's Date"
>Finding Today's Date</A
><BR><A
CLASS="sect1"
HREF="ch03_03.htm"
TITLE="3.2. Converting DMYHMS to Epoch Seconds"
>Converting DMYHMS to Epoch Seconds</A
><BR><A
CLASS="sect1"
HREF="ch03_04.htm"
TITLE="3.3. Converting Epoch Seconds to DMYHMS"
>Converting Epoch Seconds to DMYHMS</A
><BR><A
CLASS="sect1"
HREF="ch03_05.htm"
TITLE="3.4. Adding to or Subtracting from a Date"
>Adding to or Subtracting from a Date</A
><BR><A
CLASS="sect1"
HREF="ch03_06.htm"
TITLE="3.5. Difference of Two Dates"
>Difference of Two Dates</A
><BR><A
CLASS="sect1"
HREF="ch03_07.htm"
TITLE="3.6. Day in a Week/Month/Year or Week Number"
>Day in a Week/Month/Year or Week Number</A
><BR><A
CLASS="sect1"
HREF="ch03_08.htm"
TITLE="3.7. Parsing Dates and Times from Strings"
>Parsing Dates and Times from Strings</A
><BR><A
CLASS="sect1"
HREF="ch03_09.htm"
TITLE="3.8. Printing a Date"
>Printing a Date</A
><BR><A
CLASS="sect1"
HREF="ch03_10.htm"
TITLE="3.9. High-Resolution Timers"
>High-Resolution Timers</A
><BR><A
CLASS="sect1"
HREF="ch03_11.htm"
TITLE="3.10. Short Sleeps"
>Short Sleeps</A
><BR><A
CLASS="sect1"
HREF="ch03_12.htm"
TITLE="3.11. Program: hopdelta"
>Program: hopdelta</A
></P
><P
></P
></DIV
><DIV
CLASS="epigraph"
ALIGN="right"
><P
CLASS="para"
ALIGN="right"
><I
>It is inappropriate to require that a time represented as seconds since the Epoch precisely represent the number of seconds between the referenced time and the Epoch.</I
></P
><P
CLASS="attribution"
ALIGN="right"
>-&nbsp;IEEE Std 1003.1b-1993 (POSIX) Section B.2.2.2 </P
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch03-15450"
>3.0. Introduction</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-1000006215-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006215-1"
></A
>Times and dates are important things to be able to manipulate. "How many users logged in last month?", "How many seconds should I sleep, if I want to wake up at midday?", and "Has this user's password expired yet?" are all common questions whose answers involve surprisingly non-obvious manipulations.</P
><P
CLASS="para"
>Perl represents points in time as intervals, measuring seconds past a point in time called <I
CLASS="firstterm"
>the Epoch</I
>. On Unix and many other systems, the Epoch was 00:00 Jan 1, 1970, Greenwich Mean Time (GMT).[<A
CLASS="footnote"
HREF="#ch03-pgfId-1000000809"
>1</A
>] On a Mac, all dates and times are expressed in the local time zone. The <CODE
CLASS="literal"
>gmtime</CODE
> function returns the correct GMT time, based on your Mac's time zone offset. Bear this in mind when considering the recipes in this chapter. The Macintosh's Epoch seconds value ranges from 00:00 Jan 1, 1904 to 06:28:15 Feb 6, 2040.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch03-pgfId-1000000809"
>[1]</A
> These days GMT is increasingly referred to as UTC (Universal Coordinated Time).</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>When we talk about dates and times, we often interchange two different concepts: points in time (dates and times) and intervals between points in time (weeks, months, days, etc.). Epoch <A
CLASS="indexterm"
NAME="ch03-idx-1000006220-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006220-1"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006220-2"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006220-3"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006220-4"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006220-5"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006220-6"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006220-7"
></A
>seconds represent intervals and points in the same units, so you can do basic arithmetic on them.</P
><P
CLASS="para"
>However, people are not used to working with Epoch seconds. We are more used to dealing with individual year, month, day, hour, minute, and second values. Furthermore, the month can be represented by its full name or its abbreviation. The day can precede or follow the month. Because of the difficulty of performing calculations with a variety of formats, we typically convert human-supplied strings or lists to Epoch seconds, calculate, and then convert back to strings or lists for output.</P
><P
CLASS="para"
>For convenience in calculation, Epoch seconds are always calculated in GMT. When converting to or from distinct values, we must always consider whether the time represented is GMT or local. Use different conversion functions depending on whether you need to convert from GMT to local time or vice versa.</P
><P
CLASS="para"
>Perl's <CODE
CLASS="literal"
>time</CODE
><A
CLASS="indexterm"
NAME="ch03-idx-1000006218-0"
></A
> function returns the number of seconds that have passed since the Epoch &nbsp;-  more or less.[<A
CLASS="footnote"
HREF="#ch03-pgfId-1000000823"
>2</A
>] To convert Epoch seconds into distinct values for days, months, years, hours, minutes, and seconds, use the <CODE
CLASS="literal"
>localtime</CODE
><A
CLASS="indexterm"
NAME="ch03-idx-1000006219-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006219-1"
></A
> and <CODE
CLASS="literal"
>gmtime</CODE
> functions. In list context, these functions return a nine-element list with the following elements:</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch03-pgfId-1000000823"
>[2]</A
> Well, less actually. To be precise, 21 seconds less as of this writing. POSIX requires that <CODE
CLASS="literal"
>time</CODE
> not include leap seconds, a peculiar practice of adjusting the world's clock by a second here and there to account for the slowing down of the Earth's rotation due to tidal angular-momentum dissipation. See the <EM
CLASS="emphasis"
>sci.astro</EM
> FAQ, section 3, in<A
CLASS="systemitem.url"
HREF=" http://sciastro.astronomy.net/sci.astro.3.FAQ"
> http://sciastro.astronomy.net/sci.astro.3.FAQ</A
>.</P
></DIV
></BLOCKQUOTE
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Variable</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Values</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Range</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<PRE
CLASS="programlisting"
>$sec</PRE
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>seconds</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>0-60</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<PRE
CLASS="programlisting"
>$min</PRE
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>minutes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>0-59</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<PRE
CLASS="programlisting"
>$hours</PRE
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>hours</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>0-23</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<PRE
CLASS="programlisting"
>$mday</PRE
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>day of month</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>1-31</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<PRE
CLASS="programlisting"
>$month</PRE
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>month of year</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>0-11, 0 == January</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<PRE
CLASS="programlisting"
>$year</PRE
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>years since 1900</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>1-138 (or more)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<PRE
CLASS="programlisting"
>$wday</PRE
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>day of week</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>0-6, 0 == Sunday</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<PRE
CLASS="programlisting"
>$yday</PRE
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>day of year</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>1-366</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<PRE
CLASS="programlisting"
>$isdst</PRE
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>0 or 1</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>true if daylight savings is in effect</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The values for second range from 0-60 to account for leap seconds; you never know when a spare second will leap into existence at the urging of various standards bodies.</P
><P
CLASS="para"
>From now on, we'll refer to a list of day, month, year, hour, minute, and seconds as DMYHMS, for no better reason than that writing and reading "distinct day, month, year, hour, minute, and seconds values" is wearisome. The abbreviation is not meant to suggest an order of return values.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-1000006221-0"
></A
>Perl does <EM
CLASS="emphasis"
>not</EM
> return a two-digit year value. It returns the year minus 1900, which just happens to be a two-digit number through 1999. Perl doesn't intrinsically have a <A
CLASS="indexterm"
NAME="ch03-idx-1000007285-0"
></A
>Year 2000 problem, unless you make one yourself. (Your computer, and Perl, may have a 2038 problem, though, if we're still using 32 bits by that time.) Add 1900 to get the full year value instead of using the construct <CODE
CLASS="literal"
>&quot;19$year&quot;</CODE
>, or soon your programs will refer to the year <CODE
CLASS="literal"
>&quot;19102&quot;</CODE
>. We can't pin down the year value's range because it depends on how big an integer your operating system uses for Epoch seconds. Small integers mean a small range; big (64-bit) integers mean a very big range.</P
><P
CLASS="para"
>In scalar context, <CODE
CLASS="literal"
>localtime</CODE
> and <CODE
CLASS="literal"
>gmtime</CODE
> return the date and time formatted as an ASCII string:</P
><PRE
CLASS="programlisting"
><CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Fri Apr 11 09:27:08 1997</I
></CODE
></B
></CODE
><CODE
CLASS="literal"
></CODE
><A
CLASS="indexterm"
NAME="ch03-idx-1000006223-0"
></A
></PRE
><P
CLASS="para"
>The standard <A
CLASS="indexterm"
NAME="ch03-idx-1000006231-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006231-1"
></A
>Time::tm module provides objects that give you a named interface to these values. The standard <A
CLASS="indexterm"
NAME="ch03-idx-1000006232-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006232-1"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006232-2"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006232-3"
></A
>Time::localtime and Time::gmtime modules override the list-returning <CODE
CLASS="literal"
>localtime</CODE
> and <CODE
CLASS="literal"
>gmtime</CODE
> functions, replacing them with versions that return Time::tm objects. Compare these two pieces of code:</P
><PRE
CLASS="programlisting"
># using arrays
print &quot;Today is day &quot;, (localtime)[7], &quot; of the current year.\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Today is day 117 of the current year.</I
></CODE
></B
></CODE
>

# using Time::tm objects
use Time::localtime;
$tm = localtime;
print &quot;Today is day &quot;, $tm-&gt;yday, &quot; of the current year.\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Today is day 117 of the current year.</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>To go <EM
CLASS="emphasis"
>from</EM
> a list <EM
CLASS="emphasis"
>to</EM
> Epoch seconds, use the standard <A
CLASS="indexterm"
NAME="ch03-idx-1000006233-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006233-1"
></A
>Time::Local module. It provides the functions <CODE
CLASS="literal"
>timelocal</CODE
><A
CLASS="indexterm"
NAME="ch03-idx-1000006234-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006234-1"
></A
> and <CODE
CLASS="literal"
>timegm</CODE
>, both of which take a nine-element list and return an integer. The list's values have the same meaning and ranges as those returned by <CODE
CLASS="literal"
>localtime</CODE
> and <CODE
CLASS="literal"
>gmtime</CODE
>.</P
><P
CLASS="para"
>Epoch seconds values are limited by the size of an integer. If you have a 32-bit signed integer holding your Epoch seconds, you can only represent dates (in GMT) from <CODE
CLASS="literal"
>Fri</CODE
> <CODE
CLASS="literal"
>Dec</CODE
> <CODE
CLASS="literal"
>13</CODE
> <CODE
CLASS="literal"
>20:45:52</CODE
> <CODE
CLASS="literal"
>1901</CODE
> to <CODE
CLASS="literal"
>Tue</CODE
> <CODE
CLASS="literal"
>Jan</CODE
> <CODE
CLASS="literal"
>19</CODE
> <CODE
CLASS="literal"
>03:14:07</CODE
> <CODE
CLASS="literal"
>2038</CODE
> (inclusive). By 2038, it is assumed, computers will change to use larger integers for Epoch seconds. We hope. For operations on dates outside this range, you must use another representation or work from distinct year, month, and day values.</P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch03-idx-1000006235-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-1000006235-1"
></A
>Date::Calc and Date::Manip modules on CPAN both work from these distinct values, but be warned: years don't necessarily have 1900 subtracted from them the way the year value returned by <CODE
CLASS="literal"
>localtime</CODE
> does, nor do months and weeks always start at 0. As always, consult the manpage of the appropriate module to make sure you're giving it what it expects and getting back from it what you expect. There's little more embarrassing than realizing you've calculated your company payroll based on a calendar that's 1,900 years in the past.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_20.htm"
TITLE="2.19. Program: Calculating Prime Factors"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.19. Program: Calculating Prime Factors"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_02.htm"
TITLE="3.1. Finding Today's Date"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.1. Finding Today's Date"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.19. Program: Calculating Prime Factors</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.1. Finding Today's Date</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
