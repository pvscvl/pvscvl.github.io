<HTML
><HEAD
>
<TITLE>Recipe 19.7. Formatting Lists and Tables with HTML Shortcuts (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:45:36Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch19_01.htm"
TITLE="19. CGI Programming"><LINK
REL="prev"
HREF="ch19_07.htm"
TITLE="19.6. Executing Commands Without Shell Escapes"><LINK
REL="next"
HREF="ch19_09.htm"
TITLE="19.8. Redirecting to a Different Location"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_07.htm"
TITLE="19.6. Executing Commands Without Shell Escapes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.6. Executing Commands Without Shell Escapes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch19_01.htm"
TITLE="19. CGI Programming"
>Chapter 19<BR>CGI Programming</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_09.htm"
TITLE="19.8. Redirecting to a Different Location"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.8. Redirecting to a Different Location"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch19-12318"
>19.7. Formatting Lists and Tables with HTML Shortcuts</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch19-pgfId-642"
>Problem<A
CLASS="indexterm"
NAME="ch19-idx-1000005454-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-1000005454-1"
></A
></A
></H3
><P
CLASS="para"
>You have several lists and tables to generate and would like helper functions to make these easier to output.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch19-pgfId-648"
>Solution</A
></H3
><P
CLASS="para"
>The CGI module provides HTML helper functions which, when passed array references, apply themselves to each element of the referenced array:</P
><PRE
CLASS="programlisting"
>print ol( li([ qw(red blue green)]) );
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>&lt;OL&gt;&lt;LI&gt;red&lt;/LI&gt; &lt;LI&gt;blue&lt;/LI&gt; &lt;LI&gt;green&lt;/LI&gt;&lt;/OL&gt;</I
></CODE
></B
></CODE
>
@names = qw(Larry Moe Curly);
print ul( li({ -TYPE =&gt; &quot;disc&quot; }, \@names) );
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>&lt;UL&gt;&lt;LI TYPE=&quot;disc&quot;&gt;Larry&lt;/LI&gt; &lt;LI TYPE=&quot;disc&quot;&gt;Moe&lt;/LI&gt; </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>    &lt;LI TYPE=&quot;disc&quot;&gt;Curly&lt;/LI&gt;&lt;/UL&gt;</I
></CODE
></B
></CODE
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch19-pgfId-664"
>Discussion</A
></H3
><P
CLASS="para"
>The distributive behavior of the HTML generating functions in CGI.pm can significantly simplify generation of lists and tables. Passed a simple string, they just produce HTML for that string. But passed an array reference, they work on all those strings.</P
><PRE
CLASS="programlisting"
>print li(&quot;alpha&quot;);
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>    &lt;LI&gt;alpha&lt;/LI&gt;</I
></CODE
></B
></CODE
>
print li( [ &quot;alpha&quot;, &quot;omega&quot;] );
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>    &lt;LI&gt;alpha&lt;/LI&gt; &lt;LI&gt;omega&lt;/LI&gt;</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>The shortcut functions for lists will be loaded when you use the <CODE
CLASS="literal"
>:standard</CODE
> import tag, but you need to ask for <CODE
CLASS="literal"
>:html3</CODE
> explicitly to get helper functions for working with tables. There's also a conflict between the <CODE
CLASS="literal"
>&lt;TR&gt;</CODE
> tag, which would normally make a <CODE
CLASS="literal"
>tr()</CODE
> function, and Perl's built-in <CODE
CLASS="literal"
>tr///</CODE
> operator. Therefore, to make a table row, use the <CODE
CLASS="literal"
>Tr()</CODE
> function.</P
><P
CLASS="para"
>This example generates an HTML table starting with a hash of arrays. The keys will be the row headers, and the array of values will be the columns.</P
><PRE
CLASS="programlisting"
>use CGI qw(:standard :html3);

%hash = (
    &quot;Wisconsin&quot;  =&gt; [ &quot;Superior&quot;, &quot;Lake Geneva&quot;, &quot;Madison&quot; ],
    &quot;Colorado&quot;   =&gt; [ &quot;Denver&quot;, &quot;Fort Collins&quot;, &quot;Boulder&quot; ],
    &quot;Texas&quot;      =&gt; [ &quot;Plano&quot;, &quot;Austin&quot;, &quot;Fort Stockton&quot; ],
    &quot;California&quot; =&gt; [ &quot;Sebastopol&quot;, &quot;Santa Rosa&quot;, &quot;Berkeley&quot; ],
);

$\ = &quot;\n&quot;;

print &quot;&lt;TABLE&gt; &lt;CAPTION&gt;Cities I Have Known&lt;/CAPTION&gt;&quot;;
print Tr(th [qw(State Cities)]);
for $k (sort keys %hash) {
    print Tr(th($k), td( [ sort @{$hash{$k}} ] ));
}
print &quot;&lt;/TABLE&gt;&quot;;</PRE
><P
CLASS="para"
>That generates text that looks like this:</P
><PRE
CLASS="programlisting"
><CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>&lt;TABLE&gt; &lt;CAPTION&gt;Cities I Have Known&lt;/CAPTION&gt;</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>    &lt;TR&gt;&lt;TH&gt;State&lt;/TH&gt; &lt;TH&gt;Cities&lt;/TH&gt;&lt;/TR&gt;</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>    &lt;TR&gt;&lt;TH&gt;California&lt;/TH&gt; &lt;TD&gt;Berkeley&lt;/TD&gt; &lt;TD&gt;Santa Rosa&lt;/TD&gt; </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>        &lt;TD&gt;Sebastopol&lt;/TD&gt; &lt;/TR&gt;</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>    &lt;TR&gt;&lt;TH&gt;Colorado&lt;/TH&gt; &lt;TD&gt;Boulder&lt;/TD&gt; &lt;TD&gt;Denver&lt;/TD&gt; </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>        &lt;TD&gt;Fort Collins&lt;/TD&gt; &lt;/TR&gt;</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>    &lt;TR&gt;&lt;TH&gt;Texas&lt;/TH&gt; &lt;TD&gt;Austin&lt;/TD&gt; &lt;TD&gt;Fort Stockton&lt;/TD&gt; </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>        &lt;TD&gt;Plano&lt;/TD&gt;&lt;/TR&gt;</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>    &lt;TR&gt;&lt;TH&gt;Wisconsin&lt;/TH&gt; &lt;TD&gt;Lake Geneva&lt;/TD&gt; &lt;TD&gt;Madison&lt;/TD&gt; </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>        &lt;TD&gt;Superior&lt;/TD&gt;&lt;/TR&gt;</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>&lt;/TABLE&gt;</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>You can produce the same output using one print statement, although it is slightly trickier, because you have to use a <CODE
CLASS="literal"
>map</CODE
> to create the implicit loop. This print statement produces output identical to that displayed above:</P
><PRE
CLASS="programlisting"
>print table
        caption('Cities I have Known'),
        Tr(th [qw(State Cities)]),
        map { Tr(th($_), td( [ sort @{$hash{$_}} ] )) } sort keys %hash;</PRE
><P
CLASS="para"
>This is particularly useful for formatting the results of a <A
CLASS="indexterm"
NAME="ch19-idx-1000005592-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-1000005592-1"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-1000005592-2"
></A
>database query, as in <A
CLASS="xref"
HREF="ch19_08.htm"
TITLE="salcheck"
>Example 19.3</A
> (see <A
CLASS="xref"
HREF="ch14_01.htm"
TITLE="Database Access"
>Chapter 14, <CITE
CLASS="chapter"
>Database Access</CITE
></A
>).</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch19-34510"
>Example 19.3: salcheck</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# salcheck - check for salaries
use DBI;
use CGI qw(:standard :html3);

$limit = param(&quot;LIMIT&quot;);

print header(), start_html(&quot;Salary Query&quot;),
      h1(&quot;Search&quot;),
      <CODE
CLASS="literal"
>start_form()</CODE
>,
      p(&quot;Enter minimum salary&quot;, textfield(&quot;LIMIT&quot;)),
      <CODE
CLASS="literal"
>submit(),</CODE
>
<CODE
CLASS="literal"
>      end_form();</CODE
>

if (defined $limit) {
    $dbh = <A
CLASS="indexterm"
NAME="ch19-idx-1000007372-0"
></A
>DBI-&gt;connect(&quot;dbi:mysql:somedb:server.host.dom:3306&quot;, 
        &quot;username&quot;, &quot;password&quot;) 
        or die &quot;Connecting: $DBI::errstr&quot;;
    $sth = $dbh-&gt;prepare(&quot;SELECT name,salary FROM employees 
        WHERE salary &gt; $limit&quot;)
        or die &quot;Preparing: &quot;, $dbh-&gt;errstr;
    $sth-&gt;execute
        or die &quot;Executing: &quot;, $sth-&gt;errstr;

    print h1(&quot;Results&quot;), &quot;&lt;TABLE BORDER=1&gt;&quot;;

    while (@row = $sth-&gt;<CODE
CLASS="literal"
>fetchrow_array())</CODE
> {
           print Tr( td( \@row ) );
    }

    print &quot;&lt;/TABLE&gt;\n&quot;;
    $sth-&gt;finish;
    $dbh-&gt;disconnect;
}

print <CODE
CLASS="literal"
>end_html();</CODE
><A
CLASS="indexterm"
NAME="ch19-idx-1000005812-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-1000005812-1"
></A
></PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch19-pgfId-808"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the standard CGI module; <A
CLASS="xref"
HREF="ch14_11.htm"
TITLE="Executing an SQL Command Using DBI and DBD"
>Recipe 14.10</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_07.htm"
TITLE="19.6. Executing Commands Without Shell Escapes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.6. Executing Commands Without Shell Escapes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_09.htm"
TITLE="19.8. Redirecting to a Different Location"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.8. Redirecting to a Different Location"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>19.6. Executing Commands Without Shell Escapes</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>19.8. Redirecting to a Different Location</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
