<HTML
><HEAD
>
<TITLE>Recipe 9.5. Processing All Files in a Directory (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:39:11Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch09_01.htm"
TITLE="9. Directories"><LINK
REL="prev"
HREF="ch09_05.htm"
TITLE="9.4. Recognizing Two Names for the Same File"><LINK
REL="next"
HREF="ch09_07.htm"
TITLE="9.6. Globbing, or Getting a List of Filenames Matching a Pattern"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_05.htm"
TITLE="9.4. Recognizing Two Names for the Same File"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.4. Recognizing Two Names for the Same File"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch09_01.htm"
TITLE="9. Directories"
>Chapter 9<BR>Directories</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_07.htm"
TITLE="9.6. Globbing, or Getting a List of Filenames Matching a Pattern"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.6. Globbing, or Getting a List of Filenames Matching a Pattern"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch09-chap09_processing_0"
>9.5. Processing All Files in a Directory</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-1000005078"
>Problem<A
CLASS="indexterm"
NAME="ch09-idx-1000005077-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000005077-1"
></A
></A
></H3
><P
CLASS="para"
>You want to do something to each file in a particular directory.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-544"
>Solution</A
></H3
><P
CLASS="para"
>Use <CODE
CLASS="literal"
>opendir</CODE
><A
CLASS="indexterm"
NAME="ch09-idx-1000004383-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004383-1"
></A
> to open the directory and then <CODE
CLASS="literal"
>readdir</CODE
> to retrieve every filename:</P
><PRE
CLASS="programlisting"
>opendir(DIR, $dirname) or die &quot;can't opendir $dirname: $!&quot;;
while (defined($file = readdir(DIR))) {
    # do something with &quot;$dirname/$file&quot;
}
closedir(DIR);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-560"
>Discussion</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>opendir</CODE
>, <CODE
CLASS="literal"
>readdir</CODE
>, and <CODE
CLASS="literal"
>closedir</CODE
> functions operate on directories as <CODE
CLASS="literal"
>open</CODE
>, &lt; &gt;, and <CODE
CLASS="literal"
>close</CODE
> operate on files. Both use handles, but the directory handles used by <CODE
CLASS="literal"
>opendir</CODE
> and friends are different from the file handles used by <CODE
CLASS="literal"
>open</CODE
> and friends. In particular, you can't use &lt; &gt; on a directory handle.</P
><P
CLASS="para"
>In scalar context, <CODE
CLASS="literal"
>readdir</CODE
> returns the next filename in the directory until it reaches the end of the directory when it returns <CODE
CLASS="literal"
>undef</CODE
>. In list context it returns the rest of the filenames in the directory or an empty list if there were no files left. As explained in the Introduction, the filenames returned by <CODE
CLASS="literal"
>readdir</CODE
> do not include the directory name. When you work with the filenames returned by <CODE
CLASS="literal"
>readdir</CODE
>, you must either move to the right directory first or prepend the directory to the filename.</P
><P
CLASS="para"
>This shows one way of prepending:</P
><PRE
CLASS="programlisting"
>$dir = &quot;/usr/local/bin&quot;;
print &quot;Text files in $dir are:\n&quot;;
opendir(BIN, $dir) or die &quot;Can't open $dir: $!&quot;;
while( defined ($file = readdir BIN) ) {
    print &quot;$file\n&quot; if -T &quot;$dir/$file&quot;;
}
closedir(BIN);</PRE
><P
CLASS="para"
>We test <CODE
CLASS="literal"
>$file</CODE
> with <CODE
CLASS="literal"
>defined</CODE
> because simply saying <CODE
CLASS="literal"
>while</CODE
> <CODE
CLASS="literal"
>($file</CODE
> <CODE
CLASS="literal"
>=</CODE
> <CODE
CLASS="literal"
>readdir</CODE
> <CODE
CLASS="literal"
>BIN)</CODE
> would only be testing truth and not definedness. Although the loop would end when <CODE
CLASS="literal"
>readdir</CODE
> ran out of files to return, it would also end prematurely if a file had the name &quot;<CODE
CLASS="literal"
>0&quot;</CODE
>.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>readdir</CODE
> function will return the special directories <CODE
CLASS="literal"
>&quot;.&quot;</CODE
> (the directory itself) and <CODE
CLASS="literal"
>&quot;..&quot;</CODE
> (the parent of the directory). Most people skip the files with code like:</P
><PRE
CLASS="programlisting"
>while ( defined ($file = readdir BIN) ) {
    next if $file =~ /^\.\.?$/;     # skip . and ..
    # ...
}</PRE
><P
CLASS="para"
>Like filehandles, directory handles are per-package constructs. Further, you have two ways of getting a local <A
CLASS="indexterm"
NAME="ch09-idx-1000006155-0"
></A
>directory handle: use <CODE
CLASS="literal"
>local</CODE
> <CODE
CLASS="literal"
>*DIRHANDLE</CODE
> or use an object module (see <A
CLASS="xref"
HREF="ch07_17.htm"
TITLE="Storing Filehandles in Variables"
>Recipe 7.16</A
>). The appropriate module in this case is <CODE
CLASS="literal"
>DirHandle</CODE
>. The following code uses DirHandle and produces a sorted list of plain files that aren't dotfiles (that is, whose names don't begin with a <CODE
CLASS="literal"
>&quot;.&quot;</CODE
>):</P
><PRE
CLASS="programlisting"
>use DirHandle;

sub plainfiles {
   my $dir = shift;
   my $dh = DirHandle-&gt;new($dir)   or die &quot;can't opendir $dir: $!&quot;;
   return sort                     # sort pathnames
          grep {    -f     }       # choose only &quot;plain&quot; files
          map  { &quot;$dir/$_&quot; }       # create full paths
          grep {  !/^\./   }       # filter out dot files
          $dh-&gt;<CODE
CLASS="literal"
>read()</CODE
>;             # read all entries
}</PRE
><P
CLASS="para"
>DirHandle's <CODE
CLASS="literal"
>read</CODE
> method behaves just like <CODE
CLASS="literal"
>readdir</CODE
>, returning the rest of the filenames. The bottom <CODE
CLASS="literal"
>grep</CODE
> only returns those that don't begin with a period. The <CODE
CLASS="literal"
>map</CODE
> turns the filenames returned by <CODE
CLASS="literal"
>read</CODE
> into fully qualified filenames, and the top <CODE
CLASS="literal"
>grep</CODE
> filters out directories, links, etc. The resulting list is then <CODE
CLASS="literal"
>sort</CODE
>ed and returned.</P
><P
CLASS="para"
>In addition to <CODE
CLASS="literal"
>readdir</CODE
>, there's also <CODE
CLASS="literal"
>rewinddir</CODE
><A
CLASS="indexterm"
NAME="ch09-idx-1000004389-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004389-1"
></A
> (to move the directory handle back to the start of the filename list), <CODE
CLASS="literal"
>seekdir</CODE
> (to move to a specific offset in the list), and <CODE
CLASS="literal"
>telldir</CODE
> (to find out how far from the start of the list you are).<A
CLASS="indexterm"
NAME="ch09-idx-1000004385-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004385-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-624"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>closedir</CODE
>, <CODE
CLASS="literal"
>opendir</CODE
>, <CODE
CLASS="literal"
>readdir</CODE
>, <CODE
CLASS="literal"
>rewinddir</CODE
>, <CODE
CLASS="literal"
>seekdir</CODE
>, and <CODE
CLASS="literal"
>telldir</CODE
> functions in <I
CLASS="filename"
>perlfunc </I
>(1) and in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; documentation for the standard DirHandle module (also in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>)</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_05.htm"
TITLE="9.4. Recognizing Two Names for the Same File"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.4. Recognizing Two Names for the Same File"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_07.htm"
TITLE="9.6. Globbing, or Getting a List of Filenames Matching a Pattern"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.6. Globbing, or Getting a List of Filenames Matching a Pattern"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>9.4. Recognizing Two Names for the Same File</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9.6. Globbing, or Getting a List of Filenames Matching a Pattern</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
