<HTML
><HEAD
>
<TITLE>Recipe 16.5. Filtering Your Own Output (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:43:43Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"><LINK
REL="prev"
HREF="ch16_05.htm"
TITLE="16.4. Reading or Writing to Another Program"><LINK
REL="next"
HREF="ch16_07.htm"
TITLE="16.6. Preprocessing Input"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_05.htm"
TITLE="16.4. Reading or Writing to Another Program"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.4. Reading or Writing to Another Program"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"
>Chapter 16<BR>Process Management and Communication</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_07.htm"
TITLE="16.6. Preprocessing Input"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.6. Preprocessing Input"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch16-38102"
>16.5. Filtering Your Own Output</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1074"
>Problem<A
CLASS="indexterm"
NAME="ch16-idx-1000006271-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006271-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006271-2"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006271-3"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006271-4"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006271-5"
></A
></A
></H3
><P
CLASS="para"
>You want to postprocess your program's output without writing a separate program to do so.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1080"
>Solution</A
></H3
><P
CLASS="para"
>Use the forking form of <CODE
CLASS="literal"
>open</CODE
> to attach a filter to yourself. For example, this will restrict your program to a hundred lines of output:</P
><PRE
CLASS="programlisting"
>head(100);
while (&lt;&gt;) {
    print;
} 

sub head {
    my $lines = shift || 20;
    return if $pid = open(STDOUT, &quot;|-&quot;);
    die &quot;cannot fork: $!&quot; unless defined $pid;
    while (&lt;STDIN&gt;) {
        print;
        last unless --$lines ;
    } 
    exit;
} </PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1116"
>Discussion</A
></H3
><P
CLASS="para"
>It's easy to add an output filter. Just use the forking <EM
CLASS="emphasis"
>open</EM
> on your own STDOUT, and let the child filter STDIN to STDOUT, performing whatever alterations you care about. Notice that we install the output filter <EM
CLASS="emphasis"
>before</EM
> we generate the output. This makes sense&nbsp;- you can't filter your output if it has already left your program. Any such filters should be applied in LIFO order&nbsp;- the last one inserted is the first one run.</P
><P
CLASS="para"
>Here's an example that uses two output filters. One numbers lines; the other quotes the lines like a mail reply. When run on <EM
CLASS="emphasis"
>/etc/motd</EM
>, you get something like:</P
><PRE
CLASS="programlisting"
><CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>1: &gt; Welcome to Linux, version 2.0.33 on a i686</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>2: &gt; </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>3: &gt;     &quot;The software required `Windows 95 or better', </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>4: &gt;      so I installed Linux.&quot;  </I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>If you reversed the order of the two filters, you'd get:</P
><PRE
CLASS="programlisting"
><CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>&gt; 1: Welcome to Linux, Kernel version 2.0.33 on a i686</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>&gt; 2: </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>&gt; 3:     &quot;The software required `Windows 95 or better', </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>&gt; 4:      so I installed Linux.&quot;  </I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>The program is in <A
CLASS="xref"
HREF="ch16_06.htm"
TITLE="qnumcat"
>Example 16.1</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch16-29490"
>Example 16.1: qnumcat</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# qnumcat - demo additive output filters

number();                   # push number filter on STDOUT
quote();                    # push quote filter on STDOUT

while (&lt;&gt;) {                # act like /bin/cat
    print;
} 
close STDOUT;               # tell kids we're done--politely
exit;

sub number {
    my $pid;
    return if $pid = open(STDOUT, &quot;|-&quot;);
    die &quot;cannot fork: $!&quot; unless defined $pid;
    while (&lt;STDIN&gt;) { printf &quot;%d: %s&quot;, $., $_ } 
    exit;
} 

sub quote {
    my $pid;
    return if $pid = open(STDOUT, &quot;|-&quot;);
    die &quot;cannot fork: $!&quot; unless defined $pid;
    while (&lt;STDIN&gt;) { print &quot;&gt; $_&quot; } 
    exit;
} </PRE
></DIV
><P
CLASS="para"
>As with all process forks, doing this a zillion times has some cost, but it's fine for a couple of processes, or even a couple dozen. If the system was actually designed to be multitasking right from the start, as Unix was, this is far cheaper than you imagine. Virtual memory and copy-on-write makes this efficient. Forking is an elegant and inexpensive solution to many, if not most, multitasking needs.<A
CLASS="indexterm"
NAME="ch16-idx-1000006276-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006276-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006276-2"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006276-3"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006276-4"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006276-5"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1200"
>See Also</A
></H3
><P
CLASS="para"
>The <A
CLASS="olink"
HREF="../prog/ch03_102.htm"
><CODE
CLASS="literal"
>open</CODE
></A
> function in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlfunc </I
>(1); <A
CLASS="xref"
HREF="ch16_05.htm"
TITLE="Reading or Writing to Another Program"
>Recipe 16.4</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_05.htm"
TITLE="16.4. Reading or Writing to Another Program"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.4. Reading or Writing to Another Program"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_07.htm"
TITLE="16.6. Preprocessing Input"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.6. Preprocessing Input"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>16.4. Reading or Writing to Another Program</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>16.6. Preprocessing Input</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
