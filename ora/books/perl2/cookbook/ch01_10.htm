<HTML
><HEAD
>
<TITLE>Recipe 1.9. Controlling Case (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:29:06Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"><LINK
REL="prev"
HREF="ch01_09.htm"
TITLE="1.8. Expanding Variables in User Input"><LINK
REL="next"
HREF="ch01_11.htm"
TITLE="1.10. Interpolating Functions and Expressions Within Strings"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_09.htm"
TITLE="1.8. Expanding Variables in User Input"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.8. Expanding Variables in User Input"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"
>Chapter 1<BR>Strings</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_11.htm"
TITLE="1.10. Interpolating Functions and Expressions Within Strings"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.10. Interpolating Functions and Expressions Within Strings"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch01-32726"
>1.9. Controlling Case</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-929"
>Problem <A
CLASS="indexterm"
NAME="ch01-idx-1000010257-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010257-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010257-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010257-3"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010257-4"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010257-5"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010257-6"
></A
></A
></H3
><P
CLASS="para"
>A string in uppercase needs converting to lowercase, or vice versa.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-935"
>Solution</A
></H3
><P
CLASS="para"
>Use the <CODE
CLASS="literal"
>lc</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010267-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010267-1"
></A
> and <CODE
CLASS="literal"
>uc</CODE
> functions or the <CODE
CLASS="literal"
>\L</CODE
> and <CODE
CLASS="literal"
>\U</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010272-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010272-1"
></A
> string escapes.</P
><PRE
CLASS="programlisting"
>use locale;                     # needed in 5.004 or above

$big = uc($little);             # &quot;bo peep&quot; -&gt; &quot;BO PEEP&quot;
$little = lc($big);             # &quot;JOHN&quot;    -&gt; &quot;john&quot;
$big = &quot;\U$little&quot;;             # &quot;bo peep&quot; -&gt; &quot;BO PEEP&quot;
$little = &quot;\L$big&quot;;             # &quot;JOHN&quot;    -&gt; &quot;john&quot;</PRE
><P
CLASS="para"
>To alter just one character, use the <CODE
CLASS="literal"
>lcfirst</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010268-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010268-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010268-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010268-3"
></A
> and <CODE
CLASS="literal"
>ucfirst</CODE
> functions or the <CODE
CLASS="literal"
>\l</CODE
> and <CODE
CLASS="literal"
>\u</CODE
> string escapes.</P
><PRE
CLASS="programlisting"
>$big = &quot;\u$little&quot;;             # &quot;bo&quot;      -&gt; &quot;Bo&quot;
$little = &quot;\l$big&quot;;             # &quot;BoPeep&quot;    -&gt; &quot;boPeep&quot; </PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-955"
>Discussion</A
></H3
><P
CLASS="para"
>The functions and string escapes look different, but both do the same thing. You can set the case of either the first character or the whole string. You can even do both at once to force uppercase on initial characters and lowercase on the rest.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>use</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010269-0"
></A
> <CODE
CLASS="literal"
>locale</CODE
> directive tells Perl's case-conversion functions and pattern matching engine to respect your language environment, allowing for characters with diacritical marks, and so on. A common mistake is to use <CODE
CLASS="literal"
>tr///</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010270-0"
></A
> to convert case. (We're aware that the old Camel book recommended <CODE
CLASS="literal"
>tr/A-Z/a-z/</CODE
>. In our defense, that was the only way to do it back then.) This won't work in all situations because when you say <CODE
CLASS="literal"
>tr/A-Z/a-z/</CODE
> you have omitted all characters with umlauts, accent marks, cedillas, and other diacritics used in dozens of languages, including English. The <CODE
CLASS="literal"
>uc</CODE
> and <CODE
CLASS="literal"
>\U</CODE
> case-changing commands understand these characters and convert them properly, at least when you've said <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>locale</CODE
>. (An exception is that in German, the uppercase form of <CODE
CLASS="literal"
>ß</CODE
> is <CODE
CLASS="literal"
>SS</CODE
>, but it's not in Perl.)</P
><PRE
CLASS="programlisting"
>use locale;                     # needed in 5.004 or above

$beast   = &quot;dromedary&quot;;
# capitalize various parts of $beast
$capit   = ucfirst($beast);         # Dromedary
$capit   = &quot;\u\L$beast&quot;;            # (same)
$capall  = uc($beast);              # DROMEDARY
$capall  = &quot;\U$beast&quot;;              # (same)
$caprest = lcfirst(uc($beast));     # dROMEDARY
$caprest = &quot;\l\U$beast&quot;;            # (same)<A
CLASS="indexterm"
NAME="ch01-idx-1000010278-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010278-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010278-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010278-3"
></A
></PRE
><P
CLASS="para"
>These capitalization changing escapes are commonly used to make the case in a string consistent:</P
><PRE
CLASS="programlisting"
># capitalize each word's first character, downcase the rest
$text = &quot;thIS is a loNG liNE&quot;;
$text =~ s/(\w+)/\u\L$1/g;
print $text;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>This Is A Long Line</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>You can also use their functional forms to do case-insensitive comparison:</P
><PRE
CLASS="programlisting"
>if (uc($a) eq uc($b)) {
    print &quot;a and b are the same\n&quot;;
}</PRE
><P
CLASS="para"
>The <EM
CLASS="emphasis"
>randcap</EM
> program, shown in <A
CLASS="xref"
HREF="ch01_10.htm"
TITLE="randcap"
>Example 1.2</A
>, randomly capitalizes 20 percent of the letters of its input. This lets you converse with 14-year-old WaREz d00Dz.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch01-31214"
>Example 1.2: randcap</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -p
# <A
CLASS="indexterm"
NAME="ch01-idx-1000010666-0"
></A
>randcap: filter to randomly capitalize 20% of the letters
# call to srand() is unnecessary in 5.004
BEGIN { srand(time() ^ ($$ + ($$ &lt;&lt; 15))) }
sub randcase { rand(100) &lt; 20 ? &quot;\u$_[0]&quot; : &quot;\l$_[0]&quot; }
s/(\w)/randcase($1)/ge;

% randcap &lt; genesis | head -9
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>boOk 01 genesis</I
></CODE
></B
></CODE
>

<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>001:001 in the BEginning goD created the heaven and tHe earTh.</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>    </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>001:002 and the earth wAS without ForM, aND void; AnD darkneSS was</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>        upon The Face of the dEEp. and the spIrit of GOd movEd upOn</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>        tHe face of the Waters.</I
></CODE
></B
></CODE
>

<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>001:003 and god Said, let there be ligHt: and therE wAs LigHt.</I
></CODE
></B
></CODE
><CODE
CLASS="literal"
></CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010274-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010274-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010274-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010274-3"
></A
></PRE
></DIV
><P
CLASS="para"
>A more interesting approach would have been to take advantage of Perl's ability to use <A
CLASS="indexterm"
NAME="ch01-idx-1000010699-0"
></A
>bitwise operators on strings:</P
><PRE
CLASS="programlisting"
>sub randcase {
    rand(100) &lt; 20 ? (&quot;\040&quot; ^ $1) : $1
}</PRE
><P
CLASS="para"
>That would, in 20 percent of the cases, switch the case of the letter. However, this misbehaves on 8-bit characters. The original <EM
CLASS="emphasis"
>randcase</EM
> program had the same problem, but appying <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>locale</CODE
> would have easily fixed it.</P
><P
CLASS="para"
>This example of bitwise string operations quickly strips off all the high bits on a string:</P
><PRE
CLASS="programlisting"
>$string &amp;= &quot;\177&quot; x length($string);</PRE
><P
CLASS="para"
>Again, they'll be talking about you all over Europe, and not in the most glowing of terms, if you force all strings to seven bits.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1057"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>uc</CODE
>, <CODE
CLASS="literal"
>lc</CODE
>, <CODE
CLASS="literal"
>ucfirst</CODE
>, and <CODE
CLASS="literal"
>lcfirst</CODE
> functions in <EM
CLASS="emphasis"
>perlfunc </EM
>(1) and <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the <CODE
CLASS="literal"
>\L</CODE
>, <CODE
CLASS="literal"
>\U</CODE
>, <CODE
CLASS="literal"
>\l</CODE
>, and <CODE
CLASS="literal"
>\u</CODE
> string escapes in the "Quote and Quote-like Operators" section of <EM
CLASS="emphasis"
>perlop </EM
>(1) and <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010259-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010259-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010259-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010259-3"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010259-4"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010259-5"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010259-6"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_09.htm"
TITLE="1.8. Expanding Variables in User Input"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.8. Expanding Variables in User Input"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_11.htm"
TITLE="1.10. Interpolating Functions and Expressions Within Strings"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.10. Interpolating Functions and Expressions Within Strings"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.8. Expanding Variables in User Input</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.10. Interpolating Functions and Expressions Within Strings</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
