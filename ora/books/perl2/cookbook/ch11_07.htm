<HTML
><HEAD
>
<TITLE>Recipe 11.6. Creating Arrays of Scalar References (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:36Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"><LINK
REL="prev"
HREF="ch11_06.htm"
TITLE="11.5. Taking References to Scalars"><LINK
REL="next"
HREF="ch11_08.htm"
TITLE="11.7. Using Closures Instead of Objects"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_06.htm"
TITLE="11.5. Taking References to Scalars"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.5. Taking References to Scalars"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"
>Chapter 11<BR>References and Records</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_08.htm"
TITLE="11.7. Using Closures Instead of Objects"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.7. Using Closures Instead of Objects"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-chap11_creating_0"
>11.6. Creating Arrays of Scalar References</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-716"
>Problem<A
CLASS="indexterm"
NAME="ch11-idx-1000004825-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004825-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004825-2"
></A
></A
></H3
><P
CLASS="para"
>You want to create and manipulate an array of references to scalars. This arises when you pass variables by reference to a function to let the function change their values.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-722"
>Solution</A
></H3
><P
CLASS="para"
>To create an array, either backslash each scalar in the list to store in the array:</P
><PRE
CLASS="programlisting"
>@array_of_scalar_refs = ( \$a, \$b );</PRE
><P
CLASS="para"
>or simply backslash the entire list, taking advantage of the backslash operator's distributive property:</P
><PRE
CLASS="programlisting"
>@array_of_scalar_refs = \( $a, $b );</PRE
><P
CLASS="para"
>To get or set the value of an element of the list, use <CODE
CLASS="literal"
>${</CODE
> <CODE
CLASS="literal"
>...</CODE
> <CODE
CLASS="literal"
>}</CODE
>:</P
><PRE
CLASS="programlisting"
>${ $array_of_scalar_refs[1] } = 12;         # $b = 12</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-738"
>Discussion</A
></H3
><P
CLASS="para"
>In the following examples, <CODE
CLASS="literal"
>@array</CODE
> is a simple array containing references to scalars (an array of references is not a reference to an array). To access the original data indirectly, braces are critical.</P
><PRE
CLASS="programlisting"
>($a, $b, $c, $d) = (1 .. 4);        # initialize
@array =  (\$a, \$b, \$c, \$d);     # refs to each scalar
@array = \( $a,  $b,  $c,  $d);     # same thing!
@array = map { \my $anon } 0 .. 3;  # allocate 4 anon scalarresf

${ $array[2] } += 9;                # $c now 12

${ $array[ $#array ] } *= 5;        # $d now 20
${ $array[-1] }        *= 5;        # same; $d now 100

$tmp   = $array[-1];                # using temporary
$$tmp *= 5;                         # $d now 500</PRE
><P
CLASS="para"
>The two assignments to <CODE
CLASS="literal"
>@array</CODE
> are equivalent &nbsp;-  the backslash operator is distributive across a list. So preceding a list (not an array) with a backslash is the same as applying a backslash to everything in that list. The ensuing code changes the values of the variables whose references were stored in the array.</P
><P
CLASS="para"
>Here's how to deal with such an array without explicit indexing.</P
><PRE
CLASS="programlisting"
>use Math::Trig qw(pi);              # load the constant pi
foreach $sref (@array) {            # prepare to change $a,$b,$c,$d
    ($$sref **= 3) *= (4/3 * pi);   # replace with spherical volumes
}</PRE
><P
CLASS="para"
>This code uses the formula for deriving the volume of a sphere:</P
><IMG
CLASS="graphic"
SRC="figs/eqn11_01.gif"
ALT="Equation 11.1"><P
CLASS="para"
>The <CODE
CLASS="literal"
>$sref</CODE
> loop index variable is each reference in <CODE
CLASS="literal"
>@array</CODE
>, and <CODE
CLASS="literal"
>$$sref</CODE
> is the number itself, that is, the original variables <CODE
CLASS="literal"
>$a</CODE
>, <CODE
CLASS="literal"
>$b</CODE
>, <CODE
CLASS="literal"
>$c</CODE
>, and <CODE
CLASS="literal"
>$d</CODE
>. Changing <CODE
CLASS="literal"
>$$sref</CODE
> in the loop changes those variables as well. First we replace <CODE
CLASS="literal"
>$$sref</CODE
> with its cube, then multiply the resulting value by 4/3 <IMG
SRC="../chars/pi.gif"
ALT="[pi]">. This takes advantage of the fact that assignment in Perl returns an lvalue, letting you chain assignment operators together as we've done using the <CODE
CLASS="literal"
>**=</CODE
> and <CODE
CLASS="literal"
>*=</CODE
> assignment operators.</P
><P
CLASS="para"
>Actually, anonymous scalars are pretty useless, given that a scalar value fits in the same space as a scalar reference. That's why there's no explicit composer. Scalar references exist only to allow aliasing &nbsp;-  which can be done in other ways.<A
CLASS="indexterm"
NAME="ch11-idx-1000004827-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004827-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004827-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-788"
>See Also</A
></H3
><P
CLASS="para"
>The section on <A
CLASS="olink"
HREF="../prog/ch02_05.htm"
>"Assignment Operators"</A
> in <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlop </I
>(1)</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_06.htm"
TITLE="11.5. Taking References to Scalars"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.5. Taking References to Scalars"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_08.htm"
TITLE="11.7. Using Closures Instead of Objects"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.7. Using Closures Instead of Objects"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.5. Taking References to Scalars</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.7. Using Closures Instead of Objects</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
