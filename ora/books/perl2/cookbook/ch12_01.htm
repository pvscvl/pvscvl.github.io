<HTML
><HEAD
>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:58Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Perl Cookbook"><LINK
REL="prev"
HREF="ch11_16.htm"
TITLE="11.15. Program: Binary Trees"><LINK
REL="next"
HREF="ch12_02.htm"
TITLE="12.1. Defining a Module's Interface"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_16.htm"
TITLE="11.15. Program: Binary Trees"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.15. Program: Binary Trees"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 12</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_02.htm"
TITLE="12.1. Defining a Module's Interface"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.1. Defining a Module's Interface"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch12-17119"
>12. Packages, Libraries, and Modules</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch12-32032"
TITLE="12.0. Introduction"
>Introduction</A
><BR><A
CLASS="sect1"
HREF="ch12_02.htm"
TITLE="12.1. Defining a Module's Interface"
>Defining a Module's Interface</A
><BR><A
CLASS="sect1"
HREF="ch12_03.htm"
TITLE="12.2. Trapping Errors in require or use"
>Trapping Errors in require or use</A
><BR><A
CLASS="sect1"
HREF="ch12_04.htm"
TITLE="12.3. Delaying use Until Run Time"
>Delaying use Until Run Time</A
><BR><A
CLASS="sect1"
HREF="ch12_05.htm"
TITLE="12.4. Making Variables Private to a Module"
>Making Variables Private to a Module</A
><BR><A
CLASS="sect1"
HREF="ch12_06.htm"
TITLE="12.5. Determining the Caller's Package"
>Determining the Caller's Package</A
><BR><A
CLASS="sect1"
HREF="ch12_07.htm"
TITLE="12.6. Automating Module Clean-Up"
>Automating Module Clean-Up</A
><BR><A
CLASS="sect1"
HREF="ch12_08.htm"
TITLE="12.7. Keeping Your Own Module Directory"
>Keeping Your Own Module Directory</A
><BR><A
CLASS="sect1"
HREF="ch12_09.htm"
TITLE="12.8. Preparing a Module for Distribution"
>Preparing a Module for Distribution</A
><BR><A
CLASS="sect1"
HREF="ch12_10.htm"
TITLE="12.9. Speeding Module Loading with SelfLoader"
>Speeding Module Loading with SelfLoader</A
><BR><A
CLASS="sect1"
HREF="ch12_11.htm"
TITLE="12.10. Speeding Up Module Loading with Autoloader"
>Speeding Up Module Loading with Autoloader</A
><BR><A
CLASS="sect1"
HREF="ch12_12.htm"
TITLE="12.11. Overriding Built-In Functions"
>Overriding Built-In Functions</A
><BR><A
CLASS="sect1"
HREF="ch12_13.htm"
TITLE="12.12. Reporting Errors and Warnings Like Built-Ins"
>Reporting Errors and Warnings Like Built-Ins</A
><BR><A
CLASS="sect1"
HREF="ch12_14.htm"
TITLE="12.13. Referring to Packages Indirectly"
>Referring to Packages Indirectly</A
><BR><A
CLASS="sect1"
HREF="ch12_15.htm"
TITLE="12.14. Using h2ph to Translate C #include Files"
>Using h2ph to Translate C #include Files</A
><BR><A
CLASS="sect1"
HREF="ch12_16.htm"
TITLE="12.15. Using h2xs to Make a Module with C Code"
>Using h2xs to Make a Module with C Code</A
><BR><A
CLASS="sect1"
HREF="ch12_17.htm"
TITLE="12.16. Documenting Your Module with Pod"
>Documenting Your Module with Pod</A
><BR><A
CLASS="sect1"
HREF="ch12_18.htm"
TITLE="12.17. Building and Installing a CPAN Module"
>Building and Installing a CPAN Module</A
><BR><A
CLASS="sect1"
HREF="ch12_19.htm"
TITLE="12.18. Example: Module Template"
>Example: Module Template</A
><BR><A
CLASS="sect1"
HREF="ch12_20.htm"
TITLE="12.19. Program: Finding Versions and Descriptions of Installed Modules"
>Program: Finding Versions and Descriptions of Installed Modules</A
></P
><P
></P
></DIV
><DIV
CLASS="epigraph"
ALIGN="right"
><P
CLASS="para"
ALIGN="right"
><I
>Like all those possessing a library, Aurelian was aware that he was guilty of not knowing his in its entirety.</I
></P
><P
CLASS="attribution"
ALIGN="right"
>-&nbsp; Jorge Luis Borges <CITE
CLASS="citetitle"
>The Theologians</CITE
></P
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-32032"
>12.0. Introduction</A
></H2
><P
CLASS="para"
>Imagine that you have two separate programs, both of which work fine by themselves, and you decide to make a third program that combines the best features from the first two. You copy both programs into a new file or cut and paste selected pieces. You find that the two programs had variables and functions with the same names that should remain separate. For example, both might have an <CODE
CLASS="literal"
>init</CODE
> function or a global <CODE
CLASS="literal"
>$count</CODE
> variable. When merged into one program, these separate parts would interfere with each other.</P
><P
CLASS="para"
>The solution to this problem is <EM
CLASS="emphasis"
>packages</EM
><A
CLASS="indexterm"
NAME="ch12-idx-1000005125-0"
></A
>. Perl uses packages to partition the global namespace. The package is the basis for both traditional modules and object-oriented classes. Just as directories contain files, packages contain identifiers. Every global identifier (variables, functions, file and directory handles, and formats) has two parts: its package name and the identifier proper. These two pieces are separated from one another with a double colon. For example, the variable <CODE
CLASS="literal"
>$CGI::needs_binmode</CODE
> is a global variable named <CODE
CLASS="literal"
>$needs_binmode</CODE
>, which resides in package <CODE
CLASS="literal"
>CGI</CODE
>.</P
><P
CLASS="para"
>Where the filesystem uses slashes to separate the directory from the filename, Perl uses a double colon (prior to release 5.000, you could only use a single quote mark, as in <CODE
CLASS="literal"
>$CGI'needs_bin_mode</CODE
>). <CODE
CLASS="literal"
>$Names::startup</CODE
> is the variable named <CODE
CLASS="literal"
>$startup</CODE
> in the package <CODE
CLASS="literal"
>Names</CODE
>, whereas <CODE
CLASS="literal"
>$Dates::startup</CODE
> is the <CODE
CLASS="literal"
>$startup</CODE
> variable in package <CODE
CLASS="literal"
>Dates</CODE
>. Saying <CODE
CLASS="literal"
>$startup</CODE
> by itself without a package name means the global variable <CODE
CLASS="literal"
>$startup</CODE
> in the current package. (This assumes that no lexical <CODE
CLASS="literal"
>$startup</CODE
> variable is currently visible. Lexical variables are explained in <A
CLASS="xref"
HREF="ch10_01.htm"
TITLE="Subroutines"
>Chapter 10, <CITE
CLASS="chapter"
>Subroutines</CITE
></A
>.) When looking at an unqualified variable name, a lexical takes precedence over a global. Lexicals live in scopes; globals live in packages. If you really want the global instead, you need to fully qualify it.</P
><P
CLASS="para"
><CODE
CLASS="literal"
>package</CODE
><A
CLASS="indexterm"
NAME="ch12-idx-1000005126-0"
></A
> is a compile-time declaration that sets the default package prefix for unqualified global identifiers, just as <CODE
CLASS="literal"
>chdir</CODE
> sets the default directory prefix for relative pathnames. This effect lasts until the end of the current scope (a brace-enclosed block, file, or <CODE
CLASS="literal"
>eval</CODE
>). The effect is also terminated by any subsequent package statement in the same scope. (See the following code.) All programs are in package <CODE
CLASS="literal"
>main</CODE
> until they use a <CODE
CLASS="literal"
>package</CODE
> statement to change this.</P
><PRE
CLASS="programlisting"
>package Alpha;
$name = &quot;first&quot;;

package Omega;
$name = &quot;last&quot;;

package main;
print &quot;Alpha is $Alpha::name, Omega is $Omega::name.\n&quot;;
<B
CLASS="emphasis.bold"
>Alpha is first, Omega is last.</B
></PRE
><P
CLASS="para"
>Unlike user-defined identifiers, built-in variables with punctuation names (like <CODE
CLASS="literal"
>$_</CODE
> and <CODE
CLASS="literal"
>$.</CODE
>) and the identifiers STDIN, STDOUT, STDERR, ARGV, ARGVOUT, ENV, INC, and SIG are all forced to be in package <CODE
CLASS="literal"
>main</CODE
> when unqualified. That way things like STDIN, <CODE
CLASS="literal"
>@ARGV</CODE
>, <CODE
CLASS="literal"
>%ENV</CODE
>, and <CODE
CLASS="literal"
>$_</CODE
> are always the same no matter what package you're in; for example, <CODE
CLASS="literal"
>@ARGV</CODE
> always means <CODE
CLASS="literal"
>@main::ARGV</CODE
>, even if you've used <CODE
CLASS="literal"
>package</CODE
> to change the default package. A fully qualified <CODE
CLASS="literal"
>@ElseWhere::ARGV</CODE
> would not (and carries no special built-in meaning). Make sure to localize <CODE
CLASS="literal"
>$_</CODE
> if you use it in your module.<A
CLASS="indexterm"
NAME="ch12-idx-1000005128-0"
></A
></P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-chap12_modules_0"
>Modules</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-1000005533-0"
></A
>The unit of software reuse in Perl is the <EM
CLASS="emphasis"
>module</EM
>, a file that has a collection of related functions designed to be used by other programs and library modules. Every module has a public interface, a set of variables and functions that outsiders are encouraged to use. From inside the module, the interface is defined by initializing certain package variables that the standard Exporter module looks at. From outside the module, the interface is accessed by importing symbols as a side effect of the <CODE
CLASS="literal"
>use</CODE
> statement. The public interface of a Perl module is whatever is documented to be public. In the case of undocumented interfaces, it's whatever is vaguely intended to be public. When we talk about modules in this chapter, and traditional modules in general, we mean those that use the Exporter.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>require</CODE
><A
CLASS="indexterm"
NAME="ch12-idx-1000005538-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005538-1"
></A
> or <CODE
CLASS="literal"
>use</CODE
> statements both pull a module into your program, although their semantics are slightly different. <CODE
CLASS="literal"
>require</CODE
> loads modules at runtime, with a check to avoid the redundant loading of a given module. <CODE
CLASS="literal"
>use</CODE
> is like <CODE
CLASS="literal"
>require</CODE
>, with two added properties: compile-time loading and automatic importing.</P
><P
CLASS="para"
>Modules included with <CODE
CLASS="literal"
>use</CODE
> are processed at compile time, but <CODE
CLASS="literal"
>require</CODE
> processing happens at run time. This is important because if a module that a program needs is missing, the program won't even start because the <CODE
CLASS="literal"
>use</CODE
> fails during compilation of your script. Another advantage of compile-time <CODE
CLASS="literal"
>use</CODE
> over run-time <CODE
CLASS="literal"
>require</CODE
> is that function prototypes in the module's subroutines become visible to the compiler. This matters because only the compiler cares about prototypes, not the interpreter. (Then again, we don't usually recommend prototypes except for replacing built-in commands, which do have them.)</P
><P
CLASS="para"
><CODE
CLASS="literal"
>use</CODE
> is suitable for giving hints to the compiler because of its compile-time behavior. A <EM
CLASS="emphasis"
>pragma</EM
><A
CLASS="indexterm"
NAME="ch12-idx-1000005131-0"
></A
> is a special module that acts as directive to the compiler to alter how Perl compiles your code. A pragma's name is always all lowercase, so when writing a regular module instead of a pragma, choose a name that starts with a capital letter. Pragmas supported by Perl 5.004 include autouse, constant, diagnostics, integer, lib, locale, overload, sigtrap, strict, subs, and vars. Each has its own manpage.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-1000005132-0"
></A
>The other difference between <CODE
CLASS="literal"
>require</CODE
> and <CODE
CLASS="literal"
>use</CODE
> is that <CODE
CLASS="literal"
>use</CODE
> performs an implicit <EM
CLASS="emphasis"
>import</EM
> on the included module's package. Importing a function or variable from one package to another is a form of aliasing; that is, it makes two different names for the same underlying thing. It's like linking in files from another directory to your current one by the command <EM
CLASS="emphasis"
>ln /somedir/somefile.</EM
> Once it's linked in, you no longer have to use the full pathname to access the file. Likewise, an imported symbol no longer needs to be fully qualified by package name (or predeclared with <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>vars</CODE
> or <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>subs</CODE
>). You can use imported variables as though they were part of your package. If you imported <CODE
CLASS="literal"
>$English::OUTPUT_AUTOFLUSH</CODE
> in the current package, you could refer to it as <CODE
CLASS="literal"
>$OUTPUT_AUTOFLUSH</CODE
>.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-1000005133-0"
></A
>The required file extension for a Perl module is <CODE
CLASS="literal"
>&quot;.pm&quot;</CODE
>. The module named FileHandle would be stored in the file <EM
CLASS="emphasis"
>FileHandle.pm</EM
>. The full path to the file depends on your include path, which is stored in the global @INC variable. <A
CLASS="xref"
HREF="ch12_08.htm"
TITLE="Keeping Your Own Module Directory"
>Recipe 12.7</A
> shows how to manipulate this array to your own purposes.</P
><P
CLASS="para"
>If the module name itself contains one or more double colons, these are translated into your system's directory separator. That means that the File::Find module resides in the file <EM
CLASS="emphasis"
>File/Find.pm</EM
> under most filesystems. For example:</P
><PRE
CLASS="programlisting"
>require &quot;FileHandle.pm&quot;;            # run-time load
require FileHandle;                 # &quot;.pm&quot; assumed; same as previous
use FileHandle;                     # compile-time load

require &quot;Cards/Poker.pm&quot;;           # run-time load
require Cards::Poker;               # &quot;.pm&quot; assumed; same as previous
use Cards::Poker;                   # compile-time load<A
CLASS="indexterm"
NAME="ch12-idx-1000005130-0"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-chap12_import_export_0"
>Import/Export Regulations</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-1000005134-0"
></A
>The following is a typical setup for a hypothetical module named Cards::Poker that demonstrates how to manage its exports. The code goes in the file named <EM
CLASS="emphasis"
>Poker.pm</EM
> within the directory <EM
CLASS="emphasis"
>Cards</EM
>: that is, <EM
CLASS="emphasis"
>Cards/Poker.pm</EM
>. (See <A
CLASS="xref"
HREF="ch12_08.htm"
TITLE="Keeping Your Own Module Directory"
>Recipe 12.7</A
> for where the <EM
CLASS="emphasis"
>Cards</EM
> directory should reside.) Here's that file, with line numbers included for reference:</P
><PRE
CLASS="programlisting"
>1    package Cards::Poker;
2    use Exporter;
3    @ISA = ('Exporter');
4    @EXPORT = qw(&amp;shuffle @card_deck);
5    @card_deck = ();                       # initialize package global
6    sub shuffle { }                        # fill-in definition later
7    1;                                     # don't forget this</PRE
><P
CLASS="para"
>Line 1 declares the package that the module will put its global variables and functions in. Typically, a module first switches to a particular package so that it has its own place for global variables and functions, one that won't conflict with that of another program. This <EM
CLASS="emphasis"
>must</EM
> be written exactly as the corresponding <CODE
CLASS="literal"
>use</CODE
> statement will be written when the module is loaded.</P
><P
CLASS="para"
>Don't say <CODE
CLASS="literal"
>package</CODE
> <CODE
CLASS="literal"
>Poker</CODE
> just because the basename of your file is <EM
CLASS="emphasis"
>Poker.pm</EM
>. Rather, say <CODE
CLASS="literal"
>package</CODE
> <CODE
CLASS="literal"
>Cards::Poker</CODE
> because your users will say <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>Cards::Poker</CODE
>. This common problem is hard to debug. If you don't make the <CODE
CLASS="literal"
>package</CODE
> and <CODE
CLASS="literal"
>use</CODE
> statements exactly the same, you won't see a problem until you try to call imported functions or access imported variables, which will be mysteriously missing.</P
><P
CLASS="para"
>Line 2 loads in the <A
CLASS="indexterm"
NAME="ch12-idx-1000005150-0"
></A
>Exporter module, which manages your module's public interface as described below. Line 3 initializes the special, per-package array <CODE
CLASS="literal"
>@ISA</CODE
> to contain the word <CODE
CLASS="literal"
>&quot;Exporter&quot;</CODE
>. When a user says <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>Cards::Poker</CODE
>, Perl implicitly calls a special method, <CODE
CLASS="literal"
>Cards::Poker-&gt;import()</CODE
>. You don't have an <CODE
CLASS="literal"
>import</CODE
> method in your package, but that's OK, because the Exporter package does, and you're <EM
CLASS="emphasis"
>inheriting</EM
> from it because of the assignment to <CODE
CLASS="literal"
>@ISA</CODE
> (<EM
CLASS="emphasis"
>is a</EM
>). Perl looks at the package's <CODE
CLASS="literal"
>@ISA</CODE
> for resolution of undefined methods. Inheritance is a topic of <A
CLASS="xref"
HREF="ch13_01.htm"
TITLE="Classes, Objects, and Ties"
>Chapter 13, <CITE
CLASS="chapter"
>Classes, Objects, and Ties</CITE
></A
>. You may ignore it for now &nbsp;-  so long as you put code as shown in lines 2 and 3 into each module you write.</P
><P
CLASS="para"
>Line 4 assigns the list <CODE
CLASS="literal"
>('&amp;shuffle',</CODE
> <CODE
CLASS="literal"
>'@card_deck')</CODE
> to the special, per-package array <CODE
CLASS="literal"
>@EXPORT</CODE
>. When someone imports this module, variables and functions listed in that array are aliased into the caller's own package. That way they don't have to call the function <CODE
CLASS="literal"
>Poker::Deck::shuffle(23)</CODE
> after the import. They can just write <CODE
CLASS="literal"
>shuffle(23)</CODE
> instead. This won't happen if they load Cards::Poker with <CODE
CLASS="literal"
>require</CODE
> <CODE
CLASS="literal"
>Cards::Poker</CODE
>; only a <CODE
CLASS="literal"
>use</CODE
> imports.</P
><P
CLASS="para"
>Lines 5 and 6 set up the package global variables and functions to be exported. (We presume you'll actually flesh out their initializations and definitions more than in these examples.) You're free to add other variables and functions to your module as well, including ones you don't put in the public interface via <CODE
CLASS="literal"
>@EXPORT</CODE
>. See <A
CLASS="xref"
HREF="ch12_02.htm"
TITLE="Defining a Module's Interface"
>Recipe 12.1</A
> for more about using the Exporter.</P
><P
CLASS="para"
>Finally, line 7 is a simple <CODE
CLASS="literal"
>1</CODE
>, indicating the overall return value of the module. If the last evaluated expression in the module doesn't produce a true value, an exception will be raised. Trapping this is the topic of <A
CLASS="xref"
HREF="ch12_03.htm"
TITLE="Trapping Errors in require or use"
>Recipe 12.2</A
>. Any old true value will do, like 6.02e23 or <CODE
CLASS="literal"
>&quot;Because</CODE
> <CODE
CLASS="literal"
>tchrist</CODE
> <CODE
CLASS="literal"
>and</CODE
> <CODE
CLASS="literal"
>gnat</CODE
> <CODE
CLASS="literal"
>told</CODE
> <CODE
CLASS="literal"
>us</CODE
> <CODE
CLASS="literal"
>to</CODE
> <CODE
CLASS="literal"
>put</CODE
> <CODE
CLASS="literal"
>this</CODE
> <CODE
CLASS="literal"
>here&quot;</CODE
>; however, <CODE
CLASS="literal"
>1</CODE
> is the canonical true value used by almost every module.</P
><P
CLASS="para"
>Packages group and organize global identifiers. They have nothing to do with privacy. Code compiled in package <CODE
CLASS="literal"
>Church</CODE
> can freely examine and alter variables in package <CODE
CLASS="literal"
>State</CODE
>. Package variables are always global and are used for sharing. But that's okay, because a module is more than just a package; it's also a file, and files count as their own scope. So if you want privacy, use lexical variables instead of globals. This is the topic of <A
CLASS="xref"
HREF="ch12_05.htm"
TITLE="Making Variables Private to a Module"
>Recipe 12.4</A
>.<A
CLASS="indexterm"
NAME="ch12-idx-1000005135-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005135-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-chap12_other_0"
>Other Kinds of Library Files</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-1000005136-0"
></A
>A library is a collection of loosely related functions designed to be used by other programs. It lacks the rigorous semantics of a Perl module. The file extension <CODE
CLASS="literal"
>.pl</CODE
> indicates that it's a Perl library file. Examples include <EM
CLASS="emphasis"
>syslog.pl</EM
> and <EM
CLASS="emphasis"
>chat2.pl</EM
>.</P
><P
CLASS="para"
>Perl libraries &nbsp;-  or in fact, any arbitrary file with Perl code in it &nbsp;-  can be loaded in using <CODE
CLASS="literal"
>do</CODE
> <CODE
CLASS="literal"
>'file.pl'</CODE
> or with <CODE
CLASS="literal"
>require</CODE
> <CODE
CLASS="literal"
>'file.pl'</CODE
>. The latter is preferred in most situations, because unlike <CODE
CLASS="literal"
>do</CODE
>, <CODE
CLASS="literal"
>require</CODE
> does implicit error checking. It raises an exception if the file can't be found in your <CODE
CLASS="literal"
>@INC</CODE
> path, doesn't compile, or if it doesn't return a true value when any initialization code is run. (The last part is what the <CODE
CLASS="literal"
>1;</CODE
> was for earlier.) Another advantage of <CODE
CLASS="literal"
>require</CODE
> is that it keeps track of which files have already been loaded in the global hash <CODE
CLASS="literal"
>%INC</CODE
>. It doesn't reload the file if <CODE
CLASS="literal"
>%INC</CODE
> indicates that the file has already been read in.</P
><P
CLASS="para"
>Libraries work well when used by a program, but problems can arise when libraries use one another. Consequently, simple Perl libraries have been rendered mostly obsolete, replaced by the more modern modules. But some programs still use libraries, usually loading them in with <CODE
CLASS="literal"
>require</CODE
> instead of <CODE
CLASS="literal"
>do</CODE
>.</P
><P
CLASS="para"
>Other file extensions are occasionally seen in Perl. A <CODE
CLASS="literal"
>&quot;.ph&quot;</CODE
> is used for C header files that have been translated into Perl libraries using the <EM
CLASS="emphasis"
>h2ph</EM
> tool, as discussed in <A
CLASS="xref"
HREF="ch12_15.htm"
TITLE="Using h2ph to Translate C #include Files"
>Recipe 12.14</A
>. A <CODE
CLASS="literal"
>&quot;.xs&quot;</CODE
> indicates an augmented C source file, possibly created by the <EM
CLASS="emphasis"
>h2xs</EM
> tool, which will be compiled by the <EM
CLASS="emphasis"
>xsubpp</EM
> tool and your C compiler into native machine code. This process of creating mixed-language modules is discussed in <A
CLASS="xref"
HREF="ch12_16.htm"
TITLE="Using h2xs to Make a Module with C Code"
>Recipe 12.15</A
>.</P
><P
CLASS="para"
>So far we've only talked about traditional modules, which export their interface by allowing the caller direct access to particular subroutines and variables. Most modules fall into this category. But some problems &nbsp;-  and some programmers &nbsp;- lend themselves to more intricately designed modules, those involving objects. An object-oriented module seldom uses the import-export mechanism at all. Instead, it provides an object-oriented interface full of constructors, destructors, methods, inheritance, and operator overloading. This is the subject of <A
CLASS="xref"
HREF="ch13_01.htm"
TITLE="Classes, Objects, and Ties"
>Chapter 13</A
>.<A
CLASS="indexterm"
NAME="ch12-idx-1000005137-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-chap12_not_0"
>Not Reinventing the Wheel</A
></H3
><P
CLASS="para"
>CPAN, the <A
CLASS="indexterm"
NAME="ch12-idx-1000005138-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005138-1"
></A
>Comprehensive Perl Archive Network, is a gigantic repository of nearly everything about Perl you could imagine, including source, documentation, alternate ports, and above all, modules. Before you write a new module, check with CPAN to see whether one already exists that does what you need. Even if one doesn't, something close enough might give you ideas.</P
><P
CLASS="para"
>You can access CPAN at <A
CLASS="systemitem.url"
HREF="../../../../../../../www.perl.com/CPAN/CPAN.html"
>http://www.perl.com/CPAN/CPAN.html</A
> (or <A
CLASS="systemitem.url"
HREF="ftp://www.perl.com/pub/perl/CPAN/CPAN.html "
>ftp://www.perl.com/pub/perl/CPAN/CPAN.html </A
>). This file briefly describes each of CPAN's modules, but because it's manually edited, it may not always have the very latest modules' descriptions. You can find out about those in the <EM
CLASS="emphasis"
>CPAN/RECENT</EM
> or <EM
CLASS="emphasis"
>CPAN/RECENT.html</EM
> file.</P
><P
CLASS="para"
>The module directory itself is in <EM
CLASS="emphasis"
>CPAN/modules</EM
>. It contains indices of all registered modules plus three convenient subdirectories: <EM
CLASS="emphasis"
>by-module</EM
>, <EM
CLASS="emphasis"
>by-author</EM
>, and <EM
CLASS="emphasis"
>by-category</EM
>. All modules are available through each of these, but the <EM
CLASS="emphasis"
>by-category</EM
> directory is probably the most useful. There you will find directories covering specific applications areas including operating system interfaces; networking, modems, and interprocess communication; database interfaces; user interfaces; interfaces to other programming languages; authentication, security, and encryption; World Wide Web, HTML, HTTP, CGI, and MIME; images, pixmap and bitmap manipulation, drawing, and graphing &nbsp;-  just to name a few.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-1000005847"
>See Also</A
></H3
><P
CLASS="para"
>The sections on <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>"Packages"</A
> and on <A
CLASS="olink"
HREF="../prog/ch05_02.htm"
>"Modules"</A
> in <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlmod </I
>(1)</P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_16.htm"
TITLE="11.15. Program: Binary Trees"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.15. Program: Binary Trees"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_02.htm"
TITLE="12.1. Defining a Module's Interface"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.1. Defining a Module's Interface"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.15. Program: Binary Trees</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>12.1. Defining a Module's Interface</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
