<HTML
><HEAD
>
<TITLE>Recipe 1.5. Processing a String One Character at a Time (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:28:50Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"><LINK
REL="prev"
HREF="ch01_05.htm"
TITLE="1.4. Converting Between ASCII Characters and Values"><LINK
REL="next"
HREF="ch01_07.htm"
TITLE="1.6. Reversing a String by Word or Character"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_05.htm"
TITLE="1.4. Converting Between ASCII Characters and Values"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.4. Converting Between ASCII Characters and Values"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"
>Chapter 1<BR>Strings</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_07.htm"
TITLE="1.6. Reversing a String by Word or Character"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.6. Reversing a String by Word or Character"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch01-16077"
>1.5. Processing a String One Character at a Time</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-539"
>Problem <A
CLASS="indexterm"
NAME="ch01-idx-1000010209-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010209-1"
></A
></A
></H3
><P
CLASS="para"
>You want to process a string one character at a time.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-545"
>Solution</A
></H3
><P
CLASS="para"
>Use <KBD
CLASS="command"
>split</KBD
><A
CLASS="indexterm"
NAME="ch01-idx-1000010210-0"
></A
> with a null pattern to break up the string into individual characters, or use <KBD
CLASS="command"
>unpack</KBD
> if you just want their ASCII values:</P
><PRE
CLASS="programlisting"
>@array = split(//, $string);

@array = unpack(&quot;C*&quot;, $string);</PRE
><P
CLASS="para"
>Or extract each character in turn with a loop:</P
><PRE
CLASS="programlisting"
>    while (/(.)/g) { # . is never a newline here
        # do something with $1
    }</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-549"
>Discussion</A
></H3
><P
CLASS="para"
>As we said before, Perl's fundamental unit is the string, not the character. Needing to process anything a character at a time is rare. Usually some kind of higher-level Perl operation, like pattern matching, solves the problem more easily. See, for example, <A
CLASS="xref"
HREF="ch07_08.htm"
TITLE="Writing a Filter"
>Recipe 7.7</A
>, where a set of substitutions is used to find command-line arguments.</P
><P
CLASS="para"
>Splitting on a pattern that matches the empty string returns a list of the individual characters in the string. This is a convenient feature when done intentionally, but it's easy to do unintentionally. For instance, <CODE
CLASS="literal"
>/X*/</CODE
> matches the empty string. Odds are you will find others when you don't mean to.</P
><P
CLASS="para"
>Here's an example that prints the characters used in the string &quot;<CODE
CLASS="literal"
>an</CODE
> <CODE
CLASS="literal"
>apple</CODE
> <CODE
CLASS="literal"
>a</CODE
> <CODE
CLASS="literal"
>day</CODE
>&quot;, sorted in ascending ASCII order:</P
><PRE
CLASS="programlisting"
>%seen = ();
$string = &quot;an apple a day&quot;;
foreach $byte (split //, $string) {
    $seen{$byte}++;
}
print &quot;unique chars are: &quot;, sort(keys %seen), &quot;\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>unique chars are:  adelnpy</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>These <CODE
CLASS="literal"
>split</CODE
> and <CODE
CLASS="literal"
>unpack</CODE
> solutions give you an array of characters to work with. If you don't want an array, you can use a pattern match with the <CODE
CLASS="literal"
>/g</CODE
> flag in a <CODE
CLASS="literal"
>while</CODE
> loop, extracting one character at a time:</P
><PRE
CLASS="programlisting"
>%seen = ();
$string = &quot;an apple a day&quot;;
while ($string =~ /(.)/g) {
    $seen{$1}++;
}
print &quot;unique chars are: &quot;, sort(keys %seen), &quot;\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>unique chars are:  adelnpy</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>In general, if you find yourself doing character-by-character processing, there's probably a better way to go about it. Instead of using <CODE
CLASS="literal"
>index</CODE
> and <CODE
CLASS="literal"
>substr</CODE
> or <CODE
CLASS="literal"
>split</CODE
> and <CODE
CLASS="literal"
>unpack</CODE
>, it might be easier to use a pattern. Instead of computing a 32-bit checksum by hand, as in the next example, the <CODE
CLASS="literal"
>unpack</CODE
> function can compute it far more efficiently.</P
><P
CLASS="para"
>The following example calculates the checksum of <CODE
CLASS="literal"
>$string</CODE
> with a <CODE
CLASS="literal"
>foreach</CODE
> loop. There are better checksums; this just happens to be the basis of a traditional and computationally easy checksum. See the MD5 module from CPAN if you want a more sound checksum.</P
><PRE
CLASS="programlisting"
>$sum = 0;
foreach $ascval (unpack(&quot;C*&quot;, $string)) {
    $sum += $ascval;
}
print &quot;sum is $sum\n&quot;;
# prints &quot;1248&quot; if $string was &quot;an apple a day&quot;</PRE
><P
CLASS="para"
>This does the same thing, but much faster:</P
><PRE
CLASS="programlisting"
>$sum = unpack(&quot;%32C*&quot;, $string);</PRE
><P
CLASS="para"
>This lets us emulate the SysV checksum program:</P
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# sum - compute 16-bit checksum of all input files
$checksum = 0;
while (&lt;&gt;) { $checksum += unpack(&quot;%16C*&quot;, $_) }
$checksum %= (2 ** 16) - 1;
print &quot;$checksum\n&quot;;</PRE
><P
CLASS="para"
>Here's an example of its use:</P
><PRE
CLASS="programlisting"
>% perl sum /etc/termcap
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>1510</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>If you have the GNU version of <EM
CLASS="emphasis"
>sum</EM
>, you'll need to call it with the <B
CLASS="emphasis.bold"
>- -sysv</B
> option to get the same answer on the same file.</P
><PRE
CLASS="programlisting"
>% sum --sysv /etc/termcap
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>1510 851 /etc/termcap</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>Another tiny program that processes its input one character at a time is <EM
CLASS="emphasis"
>slowcat</EM
>, shown in <A
CLASS="xref"
HREF="ch01_06.htm"
TITLE="slowcat"
>Example 1.1</A
>. The idea here is to pause after each character is printed so you can scroll text before an audience slowly enough that they can read it.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch01-23073"
>Example 1.1: slowcat</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# <A
CLASS="indexterm"
NAME="ch01-idx-1000011066-0"
></A
>slowcat - emulate a   s l o w   line printer
# usage: slowcat [-DELAY] [files ...]
$DELAY = ($ARGV[0] =~ /^-([.\d]+)/) ? (shift, $1) : 1;
$| = 1;
while (&lt;&gt;) {
    for (split(//)) {
        print;
        select(undef,undef,undef, 0.005 * $DELAY);
    }
}</PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1000011087"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>split</CODE
> and <CODE
CLASS="literal"
>unpack</CODE
> functions in <EM
CLASS="emphasis"
>perlfunc </EM
>(1) and <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the use of <CODE
CLASS="literal"
>select</CODE
> for timing is explained in <A
CLASS="xref"
HREF="ch03_11.htm"
TITLE="Short Sleeps"
>Recipe 3.10</A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010212-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010212-1"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_05.htm"
TITLE="1.4. Converting Between ASCII Characters and Values"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.4. Converting Between ASCII Characters and Values"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_07.htm"
TITLE="1.6. Reversing a String by Word or Character"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.6. Reversing a String by Word or Character"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.4. Converting Between ASCII Characters and Values</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.6. Reversing a String by Word or Character</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
