<HTML
><HEAD
>
<TITLE>Recipe 4.14. Sorting an Array Numerically (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:03Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"><LINK
REL="prev"
HREF="ch04_14.htm"
TITLE="4.13. Finding All Elements in an Array Matching Certain Criteria"><LINK
REL="next"
HREF="ch04_16.htm"
TITLE="4.15. Sorting a List by Computable Field"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_14.htm"
TITLE="4.13. Finding All Elements in an Array Matching Certain Criteria"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.13. Finding All Elements in an Array Matching Certain Criteria"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"
>Chapter 4<BR>Arrays</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_16.htm"
TITLE="4.15. Sorting a List by Computable Field"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.15. Sorting a List by Computable Field"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-36797"
>4.14. Sorting an Array Numerically</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-1197"
>Problem <A
CLASS="indexterm"
NAME="ch04-idx-1000006739-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006739-1"
></A
></A
></H3
><P
CLASS="para"
>You want to sort a list of numbers, but Perl's <CODE
CLASS="literal"
>sort</CODE
> (by default) sorts alphabetically in ASCII order.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-1205"
>Solution</A
></H3
><P
CLASS="para"
>Use Perl's <A
CLASS="indexterm"
NAME="ch04-idx-1000006745-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006745-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006745-2"
></A
><CODE
CLASS="literal"
>sort</CODE
> function and the &lt;=&gt; numerical comparison operator:</P
><PRE
CLASS="programlisting"
>@sorted = sort { $a &lt;=&gt; $b } @unsorted;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-1215"
>Discussion</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>sort</CODE
> function takes an optional code block, which lets you replace the default alphabetic comparison subroutine with your own. This comparison function is called each time <CODE
CLASS="literal"
>sort</CODE
> has to compare two values. The values to compare are loaded into the special package variables <CODE
CLASS="literal"
>$a</CODE
> and <CODE
CLASS="literal"
>$b</CODE
>, which are automatically <CODE
CLASS="literal"
>local</CODE
>ized.</P
><P
CLASS="para"
>The comparison function should return a negative number if <CODE
CLASS="literal"
>$a</CODE
> ought to appear before <CODE
CLASS="literal"
>$b</CODE
> in the output list, <CODE
CLASS="literal"
>0</CODE
> if they're the same and their order doesn't matter, or a positive number if <CODE
CLASS="literal"
>$a</CODE
> ought to appear after <CODE
CLASS="literal"
>$b</CODE
>. Perl has two operators that behave this way: &lt;=&gt; for sorting numbers in ascending numeric order, and <CODE
CLASS="literal"
>cmp</CODE
><A
CLASS="indexterm"
NAME="ch04-idx-1000006753-0"
></A
> for sorting strings in ascending alphabetic order. By default, <CODE
CLASS="literal"
>sort</CODE
> uses <CODE
CLASS="literal"
>cmp</CODE
>-style comparisons.</P
><P
CLASS="para"
>Here's code that sorts the list of PIDs in <CODE
CLASS="literal"
>@pids</CODE
>, lets the user select one, then sends it a TERM signal followed by a KILL signal. We use a code block that compares <CODE
CLASS="literal"
>$a</CODE
> to <CODE
CLASS="literal"
>$b</CODE
> with &lt;=&gt; to sort numerically:</P
><PRE
CLASS="programlisting"
># @pids is an unsorted array of process IDs
foreach my $pid (sort { $a &lt;=&gt; $b } @pids) {
    print &quot;$pid\n&quot;;
}
print &quot;Select a process ID to kill:\n&quot;;
chomp ($pid = &lt;&gt;);
die &quot;Exiting ... \n&quot; unless $pid &amp;&amp; $pid =~ /^\d+$/;
kill('TERM',$pid);
sleep 2;
kill('KILL',$pid);</PRE
><P
CLASS="para"
>If you use <CODE
CLASS="literal"
>$a</CODE
> <CODE
CLASS="literal"
>&lt;=&gt;</CODE
> <CODE
CLASS="literal"
>$b</CODE
> or <CODE
CLASS="literal"
>$a</CODE
> <CODE
CLASS="literal"
>cmp</CODE
> <CODE
CLASS="literal"
>$b</CODE
>, the list will be sorted in ascending order. For a descending sort, all we have to do is swap <CODE
CLASS="literal"
>$a</CODE
> and <CODE
CLASS="literal"
>$b</CODE
> in the sort subroutine:</P
><PRE
CLASS="programlisting"
>@descending = sort { $b &lt;=&gt; $a } @unsorted;</PRE
><P
CLASS="para"
>Comparison routines must be consistent; that is, they should always return the same answer when called with the same values. Inconsistent comparison routines lead to infinite loops or core dumps, especially in older releases of Perl.</P
><P
CLASS="para"
>You can also say <CODE
CLASS="literal"
>sort</CODE
> <CODE
CLASS="literal"
>SUBNAME</CODE
> <CODE
CLASS="literal"
>LIST</CODE
> where <CODE
CLASS="literal"
>SUBNAME</CODE
> is the name of a comparison subroutine returning <CODE
CLASS="literal"
>-1</CODE
>, <CODE
CLASS="literal"
>0</CODE
>, or <CODE
CLASS="literal"
>+1</CODE
>. In the interests of speed, the normal calling conventions are bypassed, and the values to be compared magically appear for the duration of the subroutine in the global package variables <CODE
CLASS="literal"
>$a</CODE
> and <CODE
CLASS="literal"
>$b</CODE
>. Because of the odd way Perl calls this subroutine, it may not be recursive.</P
><P
CLASS="para"
>A word of warning: <CODE
CLASS="literal"
>$a</CODE
> and <CODE
CLASS="literal"
>$b</CODE
> are set in the package active in the call to <CODE
CLASS="literal"
>sort</CODE
>, which may not be the same as the one that the <CODE
CLASS="literal"
>SUBNAME</CODE
> function passed to <CODE
CLASS="literal"
>sort</CODE
> was compiled in! For example:</P
><PRE
CLASS="programlisting"
>package Sort_Subs;
sub revnum { $b &lt;=&gt; $a }

package Other_Pack;
@all = sort Sort_Subs::revnum 4, 19, 8, 3;</PRE
><P
CLASS="para"
>This will silently fail (unless you have <B
CLASS="emphasis.bold"
>-w</B
> in effect, in which case it will vocally fail), because the <CODE
CLASS="literal"
>sort</CODE
> call sets the package variables <CODE
CLASS="literal"
>$a</CODE
> and <CODE
CLASS="literal"
>$b</CODE
> in its own package, Other_Pack, but the <CODE
CLASS="literal"
>revnum</CODE
> function uses its own package's versions. This is another reason why in-lining sort functions is easier, as in:</P
><PRE
CLASS="programlisting"
>@all = sort { $b &lt;=&gt; $a } 4, 19, 8, 3;</PRE
><P
CLASS="para"
>For more on packages, see <A
CLASS="xref"
HREF="ch10_01.htm"
TITLE="Subroutines"
>Chapter 10, <CITE
CLASS="chapter"
>Subroutines</CITE
></A
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-1287"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>cmp</CODE
> and &lt;=&gt; operators in <EM
CLASS="emphasis"
>perlop </EM
>(1) and <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the <CODE
CLASS="literal"
>kill</CODE
>, <CODE
CLASS="literal"
>sort</CODE
>, and <CODE
CLASS="literal"
>sleep</CODE
> functions in <I
CLASS="filename"
>perlfunc </I
>(1) and <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000007479-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000007479-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000007479-2"
></A
>; <A
CLASS="xref"
HREF="ch04_16.htm"
TITLE="Sorting a List by Computable Field"
>Recipe 4.15</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_14.htm"
TITLE="4.13. Finding All Elements in an Array Matching Certain Criteria"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.13. Finding All Elements in an Array Matching Certain Criteria"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_16.htm"
TITLE="4.15. Sorting a List by Computable Field"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.15. Sorting a List by Computable Field"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.13. Finding All Elements in an Array Matching Certain Criteria</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.15. Sorting a List by Computable Field</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
