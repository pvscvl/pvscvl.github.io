<HTML
><HEAD
>
<TITLE>Recipe 5.15. Representing Relationships Between Data (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:57Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. Hashes"><LINK
REL="prev"
HREF="ch05_15.htm"
TITLE="5.14. Finding the Most Common Anything"><LINK
REL="next"
HREF="ch05_17.htm"
TITLE="5.16. Program: dutree"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_15.htm"
TITLE="5.14. Finding the Most Common Anything"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.14. Finding the Most Common Anything"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. Hashes"
>Chapter 5<BR>Hashes</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_17.htm"
TITLE="5.16. Program: dutree"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.16. Program: dutree"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-chap05_representing_0"
>5.15. Representing Relationships Between Data</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-1306"
>Problem<A
CLASS="indexterm"
NAME="ch05-idx-1000006531-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1000006531-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1000006531-2"
></A
></A
></H3
><P
CLASS="para"
>You want to represent relationships between elements of data&nbsp;- for instance, the <EM
CLASS="emphasis"
>mother of</EM
> relationship in a family tree or<EM
CLASS="emphasis"
> parent process</EM
> for a process table. This is closely related to representing tables in relational databases (tables represent relationships between information) and to representing computer science graph structures (edges represent relationships between nodes).</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-1312"
>Solution</A
></H3
><P
CLASS="para"
>Use a hash to represent the relationship.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-1318"
>Discussion</A
></H3
><P
CLASS="para"
>Here's part of the family tree from the Bible:</P
><PRE
CLASS="programlisting"
>%father = ( 'Cain'      =&gt; 'Adam',
            'Abel'      =&gt; 'Adam',
            'Seth'      =&gt; 'Adam',
            'Enoch'     =&gt; 'Cain',
            'Irad'      =&gt; 'Enoch',
            'Mehujael'  =&gt; 'Irad',
            'Methusael' =&gt; 'Mehujael',
            'Lamech'    =&gt; 'Methusael',
            'Jabal'     =&gt; 'Lamech',
            'Jubal'     =&gt; 'Lamech',
            'Tubalcain' =&gt; 'Lamech',
            'Enos'      =&gt; 'Seth' );</PRE
><P
CLASS="para"
>This lets us, for instance, easily trace a person's lineage:</P
><PRE
CLASS="programlisting"
>while (&lt;&gt;) {
    chomp;
    do {
        print &quot;$_ &quot;;        # print the current name
        $_ = $father{$_};   # set $_ to $_'s father
    } while defined;        # until we run out of fathers
    print &quot;\n&quot;;
}</PRE
><P
CLASS="para"
>We can already ask questions like "Who begat Seth?" by checking the <CODE
CLASS="literal"
>%father</CODE
> hash. By inverting this hash, we invert the relationship. This lets us use <A
CLASS="xref"
HREF="ch05_09.htm"
TITLE="Inverting a Hash"
>Recipe 5.8</A
> to answer questions like "Whom did Lamech beget?"</P
><PRE
CLASS="programlisting"
>while ( ($k,$v) = each %father ) {
    push( @{ $children{$v} }, $k );
}

$&quot; = ', ';                  # separate output with commas
while (&lt;&gt;) {
    chomp;
    if ($children{$_}) {
        @children = @{$children{$_}};
    } else {
        @children = &quot;nobody&quot;;
    }
    print &quot;$_ begat @children.\n&quot;;
}</PRE
><P
CLASS="para"
>Hashes can also represent relationships such as the C language <CODE
CLASS="literal"
>#include</CODE
>s. A includes B if A contains <CODE
CLASS="literal"
>#include</CODE
> <CODE
CLASS="literal"
>B</CODE
>. This code builds the hash (it doesn't look for files in <CODE
CLASS="literal"
>/usr/include</CODE
> as it should, but that is a minor change):</P
><PRE
CLASS="programlisting"
>foreach $file (@files) {
    local *F;               # just in case we want a local FH
    unless (open (F, &quot;&lt;$file&quot;)) {
        warn &quot;Couldn't read $file: $!; skipping.\n&quot;;
        next;
    }
    
    while (&lt;F&gt;) {
        next unless /^\s*#\s*include\s*&lt;([^&gt;]+)&gt;/;
        push(@{$includes{$1}}, $file);
    }
    close F;
}</PRE
><P
CLASS="para"
>This shows which files don't include any others:</P
><PRE
CLASS="programlisting"
>@include_free = ();                 # list of files that don't include others
@uniq{map { @$_ } values %includes} = undef;
foreach $file (sort keys %uniq) {
        push( @include_free , $file ) unless $includes{$file};
}</PRE
><P
CLASS="para"
>The values of <CODE
CLASS="literal"
>%includes</CODE
> are anonymous arrays because a single file can (and often does) include more than one other file. We use <CODE
CLASS="literal"
>map</CODE
> to build up a big list of all the included files and remove duplicates by using a hash.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-1438"
>See Also <A
CLASS="indexterm"
NAME="ch05-idx-1000006533-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1000006533-1"
></A
></A
></H3
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch04_07.htm"
TITLE="Extracting Unique Elements from a List"
>Recipe 4.6</A
>; the more complex data structures in <A
CLASS="xref"
HREF="ch11_10.htm"
TITLE="Constructing Records"
>Recipe 11.9</A
> through <A
CLASS="xref"
HREF="ch11_15.htm"
TITLE="Transparently Persistent Data Structures"
>Recipe 11.14</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_15.htm"
TITLE="5.14. Finding the Most Common Anything"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.14. Finding the Most Common Anything"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_17.htm"
TITLE="5.16. Program: dutree"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.16. Program: dutree"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.14. Finding the Most Common Anything</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.16. Program: dutree</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
