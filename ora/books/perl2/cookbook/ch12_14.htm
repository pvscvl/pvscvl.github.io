<HTML
><HEAD
>
<TITLE>Recipe 12.13. Referring to Packages Indirectly (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:41:56Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"><LINK
REL="prev"
HREF="ch12_13.htm"
TITLE="12.12. Reporting Errors and Warnings Like Built-Ins"><LINK
REL="next"
HREF="ch12_15.htm"
TITLE="12.14. Using h2ph to Translate C #include Files"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_13.htm"
TITLE="12.12. Reporting Errors and Warnings Like Built-Ins"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.12. Reporting Errors and Warnings Like Built-Ins"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"
>Chapter 12<BR>Packages, Libraries, and Modules</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_15.htm"
TITLE="12.14. Using h2ph to Translate C #include Files"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.14. Using h2ph to Translate C #include Files"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-chap12_referring_0"
>12.13. Referring to Packages Indirectly</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-1254"
>Problem<A
CLASS="indexterm"
NAME="ch12-idx-1000005271-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005271-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005271-2"
></A
></A
></H3
><P
CLASS="para"
>You want to refer to a variable or function in a package unknown until runtime, but syntax like <CODE
CLASS="literal"
>$packname::$varname</CODE
> is illegal.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-1260"
>Solution</A
></H3
><P
CLASS="para"
>Use <A
CLASS="indexterm"
NAME="ch12-idx-1000006220-0"
></A
>symbolic references:</P
><PRE
CLASS="programlisting"
>{
    no strict 'refs';
    $val  = ${ $packname . &quot;::&quot; . $varname };
    @vals = @{ $packname . &quot;::&quot; . $aryname };
    &amp;{ $packname . &quot;::&quot; . $funcname }(&quot;args&quot;);
    ($packname . &quot;::&quot; . $funcname) -&gt; (&quot;args&quot;);
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-1278"
>Discussion</A
></H3
><P
CLASS="para"
>A package declaration has meaning at compile time. If you don't know the name of the package or variable until run time, you'll have to resort to symbolic references for direct access to the package symbol table. Assuming you normally run with <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>strict</CODE
> in effect, you must disable part of it to use symbolic references. Once you've used the <CODE
CLASS="literal"
>no</CODE
> <CODE
CLASS="literal"
>strict</CODE
> <CODE
CLASS="literal"
>'refs'</CODE
> directive in that block, build up a string with the fully qualified name of the variable or function you're interested in. Then dereference this name as though it were a proper Perl reference.</P
><P
CLASS="para"
>Prior to version 5 of Perl, programmers were forced to use an <CODE
CLASS="literal"
>eval</CODE
> for this kind of thing:</P
><PRE
CLASS="programlisting"
>eval &quot;package $packname; \$'$val = \$$varname&quot;; # set $main'val
die if $@;</PRE
><P
CLASS="para"
>As you see, this approach makes quoting difficult. It's also comparatively slow. Fortunately, you never need to do this just to access variables indirectly by name. Symbolic references are a necessary compromise.</P
><P
CLASS="para"
>Similarly, <CODE
CLASS="literal"
>eval</CODE
> could be used to define functions on the fly. Suppose you wanted to be able to get the base 2 or base 10 logs of numbers:</P
><PRE
CLASS="programlisting"
>printf &quot;log2  of 100 is %.2f\n&quot;, log2(100);
printf &quot;log10 of 100 is %.2f\n&quot;, log10(100);</PRE
><P
CLASS="para"
>Perl has only the natural log function. Here's how one could use <CODE
CLASS="literal"
>eval</CODE
> to create these functions at run time. Here we'll create functions named <CODE
CLASS="literal"
>log2</CODE
> up through <CODE
CLASS="literal"
>log999</CODE
>:</P
><PRE
CLASS="programlisting"
>$packname = 'main';
for ($i = 2; $i &lt; 1000; $i++) {
    $logN = log($i);
    eval &quot;sub ${packname}::log$i { log(shift) / $logN }&quot;;
    die if $@;
}</PRE
><P
CLASS="para"
>Here, at least, you don't need to do that. The following code does the same thing, but instead of compiling a new function 998 times, we compile it only once, as a <A
CLASS="indexterm"
NAME="ch12-idx-1000006217-0"
></A
>closure. Then we use symbolic dereferencing of the symbol table to assign the same subroutine <A
CLASS="indexterm"
NAME="ch12-idx-1000006221-0"
></A
>reference to many function names:</P
><PRE
CLASS="programlisting"
>$packname = 'main';
for ($i = 2; $i &lt; 1000; $i++) {
    my $logN = log($i);
    no strict 'refs';
    *{&quot;${packname}::log$i&quot;} = sub { log(shift) / $logN };
}</PRE
><P
CLASS="para"
>When you assign a reference to a typeglob, you create an alias just for the type of that name. That's how the Exporter does its job. The first line in the next code sample manually imports the function name <CODE
CLASS="literal"
>Colors::blue</CODE
> into the current package. The second makes the <CODE
CLASS="literal"
>main::blue</CODE
> function an alias for the <CODE
CLASS="literal"
>Colors::azure</CODE
> function.</P
><PRE
CLASS="programlisting"
>*blue       = \&amp;Colors::blue;
*main::blue = \&amp;Colors::azure;</PRE
><P
CLASS="para"
>Given the flexibility of typeglob assignments and symbolic references, a full-blown <CODE
CLASS="literal"
>eval</CODE
> <CODE
CLASS="literal"
>&quot;STRING&quot;</CODE
> is nearly always unnecessary, the last resort of the desperate programmer. The only thing worse would be if it weren't available at all.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-1334"
>See Also</A
></H3
><P
CLASS="para"
>The section on <A
CLASS="olink"
HREF="../prog/ch04_04.htm"
>"Symbolic References"</A
> in <A
CLASS="olink"
HREF="../prog/ch04_01.htm"
>Chapter 4</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in the start of <I
CLASS="filename"
>perlsub </I
>(1); <A
CLASS="xref"
HREF="ch11_05.htm"
TITLE="Taking References to Functions"
>Recipe 11.4</A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005273-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005273-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005273-2"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_13.htm"
TITLE="12.12. Reporting Errors and Warnings Like Built-Ins"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.12. Reporting Errors and Warnings Like Built-Ins"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_15.htm"
TITLE="12.14. Using h2ph to Translate C #include Files"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.14. Using h2ph to Translate C #include Files"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.12. Reporting Errors and Warnings Like Built-Ins</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>12.14. Using h2ph to Translate C #include Files</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
