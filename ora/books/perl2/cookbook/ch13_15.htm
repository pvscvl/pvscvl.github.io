<HTML
><HEAD
>
<TITLE>Recipe 13.14. Overloading Operators (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:31Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"><LINK
REL="prev"
HREF="ch13_14.htm"
TITLE="13.13. Coping with Circular Data Structures"><LINK
REL="next"
HREF="ch13_16.htm"
TITLE="13.15. Creating Magic Variables with tie"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_14.htm"
TITLE="13.13. Coping with Circular Data Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.13. Coping with Circular Data Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"
>Chapter 13<BR>Classes, Objects, and Ties</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_16.htm"
TITLE="13.15. Creating Magic Variables with tie"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.15. Creating Magic Variables with tie"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-15937"
>13.14. Overloading Operators</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1795"
>Problem<A
CLASS="indexterm"
NAME="ch13-idx-1000004655-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004655-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004655-2"
></A
></A
></H3
><P
CLASS="para"
>You want to use familiar operators like <CODE
CLASS="literal"
>==</CODE
> or <CODE
CLASS="literal"
>+</CODE
> on objects from a class you've written, or you want to define the print interpolation value for objects.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1801"
>Solution</A
></H3
><P
CLASS="para"
>Use the <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>overload</CODE
> pragma. Here are two of the most common and useful operators to overload:</P
><PRE
CLASS="programlisting"
>use overload ('&lt;=&gt;' =&gt; \&amp;threeway_compare);
sub threeway_compare {
    my ($s1, $s2) = @_;
    uc($s1-&gt;{NAME}) cmp uc($s2-&gt;{NAME});
} 

use overload ( '&quot;&quot;'  =&gt; \&amp;stringify );
sub stringify {
    my $self = shift;
    return sprintf &quot;%s (%05d)&quot;, 
            ucfirst(lc($self-&gt;{NAME})),
            $self-&gt;{IDNUM};
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1833"
>Discussion</A
></H3
><P
CLASS="para"
>When you use built-in types, certain operators apply, like <CODE
CLASS="literal"
>+</CODE
> for addition or <CODE
CLASS="literal"
>.</CODE
> for string catenation. With the <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>overload</CODE
> pragma, you can customize these operators so they do something special on your own objects.</P
><P
CLASS="para"
>This pragma takes a list of operator/function call pairs, such as:</P
><PRE
CLASS="programlisting"
>package TimeNumber;
use overload '+' =&gt; \&amp;my_plus,
             '-' =&gt; \&amp;my_minus,
             '*' =&gt; \&amp;my_star,
             '/' =&gt; \&amp;my_slash;</PRE
><P
CLASS="para"
>Now, those four operators can be used with objects of class TimeNumber, and the listed functions will be called. These functions can do anything you'd like.</P
><P
CLASS="para"
>Here's a simple example of an overload of <CODE
CLASS="literal"
>+</CODE
> for use with an object that holds hours, minutes, and seconds. It assumes that both operands are of a class that has a <CODE
CLASS="literal"
>new</CODE
> method that can be called as an object method, and that the structure names are as shown:</P
><PRE
CLASS="programlisting"
>sub my_plus {
    my($left, $right) = @_;
    my $answer = $left-&gt;<CODE
CLASS="literal"
>new();</CODE
>
    $answer-&gt;{SECONDS} = $left-&gt;{SECONDS} + $right-&gt;{SECONDS};
    $answer-&gt;{MINUTES} = $left-&gt;{MINUTES} + $right-&gt;{MINUTES};
    $answer-&gt;{HOURS}   = $left-&gt;{HOURS}   + $right-&gt;{HOURS};

    if ($answer-&gt;{SECONDS} &gt;= 60) {
        $answer-&gt;{SECONDS} %= 60;
        $answer-&gt;{MINUTES} ++;
    } 

    if ($answer-&gt;{MINUTES} &gt;= 60) {
        $answer-&gt;{MINUTES} %= 60;
        $answer-&gt;{HOURS}   ++;
    } 

    return $answer;

} </PRE
><P
CLASS="para"
>It's a good idea to overload numeric operators only when the objects themselves are mirroring some sort of numeric construct, such as complex or infinite precision numbers, vectors, or matrices. Otherwise the code is too hard to understand, leading users to invalid assumptions. Imagine a class that modelled a country. If you can add one country to another, couldn't you subtract one country from another? As you see, using operator overloading for non-mathematical things rapidly becomes ridiculous.</P
><P
CLASS="para"
>You may compare objects (and, in fact, any reference) using either <CODE
CLASS="literal"
>==</CODE
> or <CODE
CLASS="literal"
>eq</CODE
>, but this only tells you whether the addresses are the same. (Using == is about ten times faster than <CODE
CLASS="literal"
>eq</CODE
> though.) Because an object is a higher-level notion that a raw machine address, you often want to define your own notion of what it takes for two of them to be equal to each other.</P
><P
CLASS="para"
>Two operators frequently overloaded even for a non-numeric class are the comparison and string interpolation operators. Both the &lt;=&gt; and the <CODE
CLASS="literal"
>cmp</CODE
> operators can be overloaded, although the former is more prevalent. Once the spaceship operator &lt;=&gt;, is defined for an object, you can also use <CODE
CLASS="literal"
>==</CODE
>, <CODE
CLASS="literal"
>!=</CODE
>, &lt;, &lt;=, &gt;, and &gt;= as well. This lets objects be compared. If ordering is not desired, only overload <CODE
CLASS="literal"
>==</CODE
>. Similarly, an overloaded <CODE
CLASS="literal"
>cmp</CODE
> is used for <CODE
CLASS="literal"
>lt</CODE
>, <CODE
CLASS="literal"
>gt</CODE
>, and other string comparisons if they aren't explicitly overloaded.</P
><P
CLASS="para"
>The string interpolation operator goes by the unlikely name of <CODE
CLASS="literal"
>&quot;&quot;</CODE
>, that is, two double quotes. This operator is triggered whenever a conversion to a string is called for, such as within double or back quotes or when passed to the <CODE
CLASS="literal"
>print</CODE
> function.</P
><P
CLASS="para"
>Read the documentation on the <CODE
CLASS="literal"
>overload</CODE
> pragma that comes with Perl. Perl's operator overloading has some elaborate features, such as string and numeric conversion methods, autogenerating missing methods, and reversing operands if needed, as in <CODE
CLASS="literal"
>5</CODE
> <CODE
CLASS="literal"
>+</CODE
> <CODE
CLASS="literal"
>$a</CODE
> where <CODE
CLASS="literal"
>$a</CODE
> is an object.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-23490"
>Example: Overloaded StrNum Class</A
></H3
><P
CLASS="para"
>Here's a <A
CLASS="indexterm"
NAME="ch13-idx-1000005059-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000005059-1"
></A
>StrNum class that lets you use strings with numeric operators. Yes, we're about to do something we advised against &nbsp;-  that is, use numeric operators on non-numeric entities &nbsp;-  but programmers from other backgrounds are always expecting <CODE
CLASS="literal"
>+</CODE
> and <CODE
CLASS="literal"
>==</CODE
> to work on strings. This is a simple way to demonstrate operator overloading. We almost certainly wouldn't use this in a time-critical production program due to performance concerns. It's also an interesting illustration of using a constructor of the same name as the class, something that C++ and Python programmers may take comfort in.</P
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# show_strnum - demo operator overloading
use StrNum;           
    
$x = StrNum(&quot;Red&quot;); $y = StrNum(&quot;Black&quot;);
$z = $x + $y; $r = $z * 3;
print &quot;values are $x, $y, $z, and $r\n&quot;;
print &quot;$x is &quot;, $x &lt; $y ? &quot;LT&quot; : &quot;GE&quot;, &quot; $y\n&quot;;

<B
CLASS="emphasis.bold"
>values are Red, Black, RedBlack, and 0</B
>
<B
CLASS="emphasis.bold"
>Red is GE Black</B
></PRE
><P
CLASS="para"
>The class is shown in <A
CLASS="xref"
HREF="ch13_15.htm"
TITLE="StrNum"
>Example 13.1</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch13-32753"
>Example 13.1: StrNum</A
></H4
><PRE
CLASS="programlisting"
>package StrNum;

use Exporter ();
@ISA = 'Exporter';
@EXPORT = qw(StrNum);  # unusual

use overload        (
        '&lt;=&gt;'   =&gt; \&amp;spaceship,
        'cmp'   =&gt; \&amp;spaceship,
        '&quot;&quot;'    =&gt; \&amp;stringify,
        'bool'  =&gt; \&amp;boolify,
        '0+'    =&gt; \&amp;numify,
        '+'     =&gt; \&amp;concat,
        '*'     =&gt; \&amp;repeat,
);

# constructor
sub StrNum { 
    my ($value) = @_; 
    return bless \$value; 
} 

sub stringify { ${ $_[0] } } 
sub numify    { ${ $_[0] } } 
sub boolify   { ${ $_[0] } } 

# providing &lt;=&gt; gives us &lt;, ==, etc. for free.
sub spaceship { 
    my ($s1, $s2, $inverted) = @_;
    return $inverted ? $$s2 cmp $$s1 : $$s1 cmp $$s2;
} 

# this uses stringify
sub concat { 
    my ($s1, $s2, $inverted) = @_;
    return StrNum $inverted ? ($s2 . $s1) : ($s1 . $s2);

} 

# this uses stringify
sub repeat { 
    my ($s1, $s2, $inverted) = @_;
    return StrNum $inverted ? ($s2 x $s1) : ($s1 x $s2);
}

1;<A
CLASS="indexterm"
NAME="ch13-idx-1000005577-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000005577-1"
></A
></PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-16506"
>Example: Overloaded FixNum Class</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-1000006591-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000006591-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000006591-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000006591-3"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000006591-4"
></A
>This class uses operator overloading to control the number of decimal places in output. It still uses full precision for its operations. A <CODE
CLASS="literal"
>places()</CODE
> method can be used on the class or a particular object to set the number of places of output to the right of the decimal point.</P
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# demo_fixnum - show operator overloading
use FixNum;

FixNum-&gt;places(5);

$x = FixNum-&gt;new(40);
$y = FixNum-&gt;new(12);

print &quot;sum of $x and $y is &quot;, $x + $y, &quot;\n&quot;;
print &quot;product of $x and $y is &quot;, $x * $y, &quot;\n&quot;;

$z = $x / $y;
printf &quot;$z has %d places\n&quot;, $z-&gt;places;
$z-&gt;places(2) unless $z-&gt;places;
print &quot;div of $x by $y is $z\n&quot;;
print &quot;square of that is &quot;, $z * $z, &quot;\n&quot;;

<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>sum of STRFixNum: 40 and STRFixNum: 12 is STRFixNum: 52</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>product of STRFixNum: 40 and STRFixNum: 12 is STRFixNum: 480</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>STRFixNum: 3 has 0 places</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>div of STRFixNum: 40 by STRFixNum: 12 is STRFixNum: 3.33</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>square of that is STRFixNum: 11.11</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>The class itself is shown in <A
CLASS="xref"
HREF="ch13_15.htm"
TITLE="FixNum"
>Example 13.2</A
>. It only overloads the addition, multiplication, and division operations for math operators. Other operators are the spaceship operator, which handles all comparisons, the string-interpolation operator, and the numeric conversion operator. The string interpolation operator is given a distinctive look for debugging purposes.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch13-16079"
>Example 13.2: FixNum</A
></H4
><PRE
CLASS="programlisting"
>package FixNum;

use strict;

my $PLACES = 0;

sub new {
    my $proto   = shift;
    my $class   = ref($proto) || $proto;
    my $parent  = ref($proto) &amp;&amp; $proto;

    my $v = shift;
    my $self = {
        VALUE  =&gt; $v,
        PLACES =&gt; undef,
    }; 
    if ($parent &amp;&amp; defined $parent-&gt;{PLACES}) {
        $self-&gt;{PLACES} = $parent-&gt;{PLACES};
    } elsif ($v =~ /(\.\d*)/) {
        $self-&gt;{PLACES} = length($1) - 1;
    }  else {
        $self-&gt;{PLACES} = 0;
    } 
    return bless $self, $class;
} 

sub places {
    my $proto = shift;
    my $self  = ref($proto) &amp;&amp; $proto;
    my $type  = ref($proto) || $proto;

    if (@_) {
        my $places = shift;
        ($self ? $self-&gt;{PLACES} : $PLACES) = $places;
    } 
    return $self ? $self-&gt;{PLACES} : $PLACES;
} 

sub _max { $_[0] &gt; $_[1] ? $_[0] : $_[1] } 

use overload '+'    =&gt; \&amp;add,
             '*'    =&gt; \&amp;multiply,
             '/'    =&gt; \&amp;divide,
             '&lt;=&gt;'  =&gt; \&amp;spaceship,
             '&quot;&quot;'   =&gt; \&amp;as_string,
             '0+'   =&gt; \&amp;as_number;

sub add {
    my ($this, $that, $flipped) = @_;
    my $result = $this-&gt;new( $this-&gt;{VALUE} + $that-&gt;{VALUE} );
    $result-&gt;places( _max($this-&gt;{PLACES}, $that-&gt;{PLACES} ));
    return $result;
} 

sub multiply {
    my ($this, $that, $flipped) = @_;
    my $result = $this-&gt;new( $this-&gt;{VALUE} * $that-&gt;{VALUE} );
    $result-&gt;places( _max($this-&gt;{PLACES}, $that-&gt;{PLACES} ));
    return $result;
} 

sub divide {
    my ($this, $that, $flipped) = @_;
    my $result = $this-&gt;new( $this-&gt;{VALUE} / $that-&gt;{VALUE} );
    $result-&gt;places( _max($this-&gt;{PLACES}, $that-&gt;{PLACES} ));
    return $result;
} 

sub as_string {
    my $self = shift;
    return sprintf(&quot;STR%s: %.*f&quot;, ref($self), 
        defined($self-&gt;{PLACES}) ? $self-&gt;{PLACES} : $PLACES,
            $self-&gt;{VALUE}); 
} 

sub as_number {
    my $self = shift;
    return $self-&gt;{VALUE};
} 
    
sub spaceship {
    my ($this, $that, $flipped) = @_;
    $this-&gt;{VALUE} &lt;=&gt; $that-&gt;{VALUE};
} 
<A
CLASS="indexterm"
NAME="ch13-idx-1000005805-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000005805-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000005805-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000005805-3"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000005805-4"
></A
>

1;<A
CLASS="indexterm"
NAME="ch13-idx-1000005806-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000005806-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000005806-2"
></A
></PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-2247"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the standard <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>overload</CODE
> pragma and the Math::BigInt and Math::Complex modules, also in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_14.htm"
TITLE="13.13. Coping with Circular Data Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.13. Coping with Circular Data Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_16.htm"
TITLE="13.15. Creating Magic Variables with tie"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.15. Creating Magic Variables with tie"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>13.13. Coping with Circular Data Structures</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>13.15. Creating Magic Variables with tie</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
