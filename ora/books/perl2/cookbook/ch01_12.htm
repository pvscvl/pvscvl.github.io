<HTML
><HEAD
>
<TITLE>Recipe 1.11. Indenting Here Documents (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:29:11Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"><LINK
REL="prev"
HREF="ch01_11.htm"
TITLE="1.10. Interpolating Functions and Expressions Within Strings"><LINK
REL="next"
HREF="ch01_13.htm"
TITLE="1.12. Reformatting Paragraphs"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_11.htm"
TITLE="1.10. Interpolating Functions and Expressions Within Strings"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.10. Interpolating Functions and Expressions Within Strings"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"
>Chapter 1<BR>Strings</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_13.htm"
TITLE="1.12. Reformatting Paragraphs"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.12. Reformatting Paragraphs"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch01-32093"
>1.11. Indenting Here Documents</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1153"
>Problem <A
CLASS="indexterm"
NAME="ch01-idx-1000010286-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010286-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010286-2"
></A
></A
></H3
><P
CLASS="para"
>When using the multiline quoting mechanism called a <EM
CLASS="emphasis"
>here document</EM
>, the text must be flush against the margin, which looks out of place in the code. You would like to indent the here document text in the code, but not have the indentation appear in the final string value.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1159"
>Solution</A
></H3
><P
CLASS="para"
>Use a <CODE
CLASS="literal"
>s///</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010292-0"
></A
> operator to strip out leading whitespace.</P
><PRE
CLASS="programlisting"
># all in one
($var = &lt;&lt;HERE_TARGET) =~ s/^\s+//gm;
    your text
    goes here
HERE_TARGET

# or with two steps
$var = &lt;&lt;HERE_TARGET;
    your text
    goes here
HERE_TARGET
$var =~ s/^\s+//gm;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1189"
>Discussion</A
></H3
><P
CLASS="para"
>The substitution is straightforward. It removes leading whitespace from the text of the here document. The <CODE
CLASS="literal"
>/m</CODE
> modifier lets the <CODE
CLASS="literal"
>^</CODE
> character match at the start of each line in the string, and the <CODE
CLASS="literal"
>/g</CODE
> modifier makes the pattern matching engine repeat the substitution as often as it can (i.e., for every line in the here document).</P
><PRE
CLASS="programlisting"
>($definition = &lt;&lt;'FINIS') =~ s/^\s+//gm;
    The five varieties of camelids
    are the familiar camel, his friends
    the llama and the alpaca, and the
    rather less well-known guanaco
    and vicuña.
FINIS</PRE
><P
CLASS="para"
>Be warned: all the patterns in this recipe use <CODE
CLASS="literal"
>\s</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010293-0"
></A
>, which will also match newlines. This means they will remove any blank lines in your here document. If you don't want this, replace <CODE
CLASS="literal"
>\s</CODE
> with <CODE
CLASS="literal"
>[^\S\n]</CODE
> in the patterns.</P
><P
CLASS="para"
>The substitution makes use of the property that the result of an assignment can be used as the left-hand side of <CODE
CLASS="literal"
>=~</CODE
>. This lets us do it all in one line, but it only works when you're assigning to a variable. When you're using the here document directly, it would be considered a constant value and you wouldn't be able to modify it. In fact, you can't change a here document's value <EM
CLASS="emphasis"
>unless</EM
> you first put it into a variable.</P
><P
CLASS="para"
>Not to worry, though, because there's an easy way around this, particularly if you're going to do this a lot in the program. Just write a subroutine to do it:</P
><PRE
CLASS="programlisting"
>sub fix {
    my $string = shift;
    $string =~ s/^\s+//gm;
    return $string;
}

print fix(&lt;&lt;&quot;END&quot;);
    My stuff goes here
END

# With function predeclaration, you can omit the parens:
print fix &lt;&lt;&quot;END&quot;;
    My stuff goes here
END</PRE
><P
CLASS="para"
>As with all here documents, you have to place this here document's target (the token that marks its end, <CODE
CLASS="literal"
>END</CODE
> in this case) flush against the left-hand margin. If you want to have the target indented also, you'll have to put the same amount of whitespace in the quoted string as you use to indent the token.</P
><PRE
CLASS="programlisting"
>($quote = &lt;&lt;'    FINIS') =~ s/^\s+//gm;
        ...we will have peace, when you and all your works have
        perished--and the works of your dark master to whom you would
        deliver us. You are a liar, Saruman, and a corrupter of men's
        hearts.  --Theoden in /usr/src/perl/taint.c
    FINIS
$quote =~ s/\s+--/\n--/;      #move attribution to line of its own</PRE
><P
CLASS="para"
>If you're doing this to strings that contain code you're building up for an <CODE
CLASS="literal"
>eval</CODE
>, or just text to print out, you might not want to blindly strip off all leading whitespace because that would destroy your indentation. Although <CODE
CLASS="literal"
>eval</CODE
> wouldn't care, your reader might.</P
><P
CLASS="para"
>Another embellishment is to use a special leading string for code that stands out. For example, here we'll prepend each line with <CODE
CLASS="literal"
>@@@</CODE
>, properly indented:</P
><PRE
CLASS="programlisting"
>if ($REMEMBER_THE_MAIN) {
    $perl_main_C = dequote&lt;&lt;'    MAIN_INTERPRETER_LOOP';
        @@@ int
        @@@ runops() {
        @@@     SAVEI32(runlevel);
        @@@     runlevel++;
        @@@     while ( op = (*op-&gt;op_ppaddr)() ) ;
        @@@     TAINT_NOT;
        @@@     return 0;
        @@@ }
    MAIN_INTERPRETER_LOOP
    # add more code here if you want
}</PRE
><P
CLASS="para"
>Destroying indentation also gets you in trouble with poets.</P
><PRE
CLASS="programlisting"
>sub dequote;
$poem = dequote&lt;&lt;EVER_ON_AND_ON;
       Now far ahead the Road has gone,
          And I must follow, if I can,
       Pursuing it with eager feet,
          Until it joins some larger way
       Where many paths and errands meet.
          And whither then? I cannot say.
                --Bilbo in /usr/src/perl/pp_ctl.c
EVER_ON_AND_ON
print &quot;Here's your poem:\n\n$poem\n&quot;;</PRE
><P
CLASS="para"
>Here is its sample output:</P
><PRE
CLASS="programlisting"
><CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Here's your poem:  </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Now far ahead the Road has gone,</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>   And I must follow, if I can,</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Pursuing it with eager feet,</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>   Until it joins some larger way</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Where many paths and errands meet.</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>   And whither then? I cannot say.</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>         --Bilbo in /usr/src/perl/pp_ctl.c</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>The following <CODE
CLASS="literal"
>dequote</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010296-0"
></A
> function handles all these cases. It expects to be called with a here document as its argument. It checks whether each line begins with a common substring, and if so, strips that off. Otherwise, it takes the amount of leading whitespace found on the first line and removes that much off each subsequent line.</P
><PRE
CLASS="programlisting"
>sub dequote {
    local $_ = shift;
    my ($white, $leader);  # common whitespace and common leading string
    if (/^\s*(?:([^\w\s]+)(\s*).*\n)(?:\s*\1\2?.*\n)+$/) {
        ($white, $leader) = ($2, quotemeta($1));
    } else {
        ($white, $leader) = (/^(\s+)/, '');
    }
    s/^\s*?$leader(?:$white)?//gm;
    return $_;
}</PRE
><P
CLASS="para"
>If that pattern makes your eyes glaze over, you could always break it up and add comments by adding <CODE
CLASS="literal"
>/x</CODE
>:</P
><PRE
CLASS="programlisting"
>    if (m{
            ^                       # start of line
            \s *                    # 0 or more whitespace chars
            (?:                     # begin first non-remembered grouping
                 (                  #   begin save buffer $1
                    [^\w\s]         #     one byte neither space nor word
                    +               #     1 or more of such
                 )                  #   end save buffer $1
                 ( \s* )            #   put 0 or more white in buffer $2
                 .* \n              #   match through the end of first line
             )                      # end of first grouping
             (?:                    # begin second non-remembered grouping
                \s *                #   0 or more whitespace chars
                \1                  #   whatever string is destined for $1
                \2 ?                #   what'll be in $2, but optionally
                .* \n               #   match through the end of the line
             ) +                    # now repeat that group idea 1 or more
             $                      # until the end of the line
          }x
       )
    {
        ($white, $leader) = ($2, quotemeta($1));
    } else {
        ($white, $leader) = (/^(\s+)/, '');
    }
    s{
         ^                          # start of each line (due to /m)
         \s *                       # any amount of leading whitespace
            ?                       #   but minimally matched
         $leader                    # our quoted, saved per-line leader
         (?:                        # begin unremembered grouping
            $white                  #    the same amount
         ) ?                        # optionalize in case EOL after leader
    }{}xgm;<A
CLASS="indexterm"
NAME="ch01-idx-1000010297-0"
></A
></PRE
><P
CLASS="para"
>There, isn't that much easier to read? Well, maybe not; sometimes it doesn't help to pepper your code with insipid comments that mirror the code. This may be one of those cases.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1407"
>See Also</A
></H3
><P
CLASS="para"
>The "Scalar Value Constructors" section of <EM
CLASS="emphasis"
>perldata</EM
> (1) and the <A
CLASS="olink"
HREF="../prog/ch02_03.htm"
>"Here Documents"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the <CODE
CLASS="literal"
>s///</CODE
> operator in <EM
CLASS="emphasis"
>perlre </EM
>(1) and <I
CLASS="filename"
>perlop</I
> (1), and the  <A
CLASS="olink"
HREF="../prog/ch02_04.htm"
>"Pattern Matching"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010288-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010288-1"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_11.htm"
TITLE="1.10. Interpolating Functions and Expressions Within Strings"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.10. Interpolating Functions and Expressions Within Strings"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_13.htm"
TITLE="1.12. Reformatting Paragraphs"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.12. Reformatting Paragraphs"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.10. Interpolating Functions and Expressions Within Strings</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.12. Reformatting Paragraphs</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
