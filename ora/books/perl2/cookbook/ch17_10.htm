<HTML
><HEAD
>
<TITLE>Recipe 17.9. Closing a Socket After Forking (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:44:34Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"><LINK
REL="prev"
HREF="ch17_09.htm"
TITLE="17.8. Finding Your Own Name and Address"><LINK
REL="next"
HREF="ch17_11.htm"
TITLE="17.10. Writing Bidirectional Clients"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Perl Cookbook"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Perl Cookbook"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_09.htm"
TITLE="17.8. Finding Your Own Name and Address"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.8. Finding Your Own Name and Address"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"
>Chapter 17<BR>Sockets</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_11.htm"
TITLE="17.10. Writing Bidirectional Clients"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.10. Writing Bidirectional Clients"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch17-16980"
>17.9. Closing a Socket After Forking</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1054"
>Problem<A
CLASS="indexterm"
NAME="ch17-idx-1000004787-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004787-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004787-2"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004787-3"
></A
></A
></H3
><P
CLASS="para"
>Your program has forked and you want to tell the other end that you're done sending data. You've tried <CODE
CLASS="literal"
>close</CODE
> on the socket, but the remote end never gets an EOF or SIGPIPE.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1060"
>Solution</A
></H3
><P
CLASS="para"
>Use <CODE
CLASS="literal"
>shutdown</CODE
>:</P
><PRE
CLASS="programlisting"
>shutdown(SOCKET, 0);                # I/we have stopped reading data
shutdown(SOCKET, 1);                # I/we have stopped writing data
shutdown(SOCKET, 2);                # I/we have stopped using this socket</PRE
><P
CLASS="para"
>On an IO::Socket object, you could also write:</P
><PRE
CLASS="programlisting"
>$socket-&gt;shutdown(0);               # I/we have stopped reading data</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1076"
>Discussion</A
></H3
><P
CLASS="para"
>When a process forks, the child has copies of all the parent's open filehandles, including sockets. When you <CODE
CLASS="literal"
>close</CODE
> a file or socket, you close only the current process' copy. If another process (parent or child) still has the socket open, the operating system doesn't consider their file or socket closed.</P
><P
CLASS="para"
>Take the case of a socket that data is being sent to. If two processes have this socket open, one can close it but the socket isn't considered closed by the operating system because the other still has it open. Until the <EM
CLASS="emphasis"
>other</EM
> process closes the socket, the process reading from the socket won't get an end-of-file. This can lead to confusion and deadlock.</P
><P
CLASS="para"
>To avoid this, either <CODE
CLASS="literal"
>close</CODE
> unused filehandles after a <CODE
CLASS="literal"
>fork</CODE
>, or use <CODE
CLASS="literal"
>shutdown</CODE
>. The <CODE
CLASS="literal"
>shutdown</CODE
> function is a more insistent form of <CODE
CLASS="literal"
>close </CODE
>&nbsp;- it tells the operating system that even though other processes have copies of this filehandle, it should be marked as closed and the other end should get an end-of-file if they read from it, or a SIGPIPE if they write to it.</P
><P
CLASS="para"
>The numeric argument to <CODE
CLASS="literal"
>shutdown</CODE
> lets you specify which sides of the connection are closed. An argument of <CODE
CLASS="literal"
>0</CODE
> says that we're done reading data, so the other end of the socket will get a <CODE
CLASS="literal"
>SIGPIPE</CODE
> if they try writing. <CODE
CLASS="literal"
>1</CODE
> says that we're done writing data, so the other end of the socket will get an end-of-file if they try reading. <CODE
CLASS="literal"
>2</CODE
> says we're done reading and writing.</P
><P
CLASS="para"
>Imagine a server that wants to read its client's request until end of file, and send an answer. If the client calls <CODE
CLASS="literal"
>close</CODE
>, that socket is now invalid for I/O, so no answer would ever come back. Instead, the client should use <CODE
CLASS="literal"
>shutdown</CODE
> to half-close the connection.</P
><PRE
CLASS="programlisting"
>print SERVER &quot;my request\n&quot;;        # send some data
shutdown(SERVER, 1);                # send eof; no more writing
$answer = &lt;SERVER&gt;;                 # but you can still read<A
CLASS="indexterm"
NAME="ch17-idx-1000004789-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004789-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004789-2"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004789-3"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1096"
>See Also</A
></H3
><P
CLASS="para"
>The 
<A
CLASS="olink"
HREF="../prog/ch03_018.htm"
>&#13;<CODE
CLASS="literal"
>close</CODE
></A
> and 
<A
CLASS="olink"
HREF="../prog/ch03_148.htm"
>&#13;<CODE
CLASS="literal"
>shutdown</CODE
></A
> 


functions in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlfunc </I
>(1); your system's <I
CLASS="filename"
>shutdown </I
>(2) manpage (if you have it)</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_09.htm"
TITLE="17.8. Finding Your Own Name and Address"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.8. Finding Your Own Name and Address"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_11.htm"
TITLE="17.10. Writing Bidirectional Clients"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.10. Writing Bidirectional Clients"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>17.8. Finding Your Own Name and Address</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>17.10. Writing Bidirectional Clients</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
></P
></DIV
<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm"></map> </BODY
></HTML
>
