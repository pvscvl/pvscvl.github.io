<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 11] Using and Creating GUI Components</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 19:01:01 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch11_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="EXJ-CH-11">11. Using and Creating GUI Components</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
Buttons and Labels<br>
<a href="ch11_02.htm">Text Components</A><br>
<a href="ch11_03.htm">Lists</A><br>
<a href="ch11_04.htm">Menus and Choices</A><br>
<a href="ch11_05.htm">PopupMenus</A><br>
<a href="ch11_06.htm">Checkboxes and CheckboxGroups</A><br>
<a href="ch11_07.htm">ScrollPane and Scrollbars</A><br>
<a href="ch11_08.htm">Dialogs</A><br>
<a href="ch11_09.htm">Creating custom components</A><br>

<p>
</DIV>

<p class=para>
The last chapter discussed a lot of concepts: how Java's user
interface facility is put together, and how the larger pieces work.
You should understand what components and containers are, how you
use them to create a display, what events are, how components use
them to communicate with the rest of your application, and what layout
managers are.  In other
words, we've covered a lot of material that's "good for you."

<p class=para>
Now that we're through with the general concepts and background, we'll
get to the fun stuff: how to do things with AWT. We will cover all the 
components that
the AWT package supplies, how to use these components in applets and
applications, and how to build your own components. We will have lots
of code and lots of pretty examples to look at. Here's a list of the
components we cover:

<p>
<ul class=itemizedlist>
<li class=listitem><tt class=literal>Button</tt> and <tt class=literal>Label</tt>

<p>
<li class=listitem>Text components: <tt class=literal>TextArea</tt> and <tt class=literal>TextField</tt>

<p>
<li class=listitem><tt class=literal>List</tt>

<p>
<li class=listitem><tt class=literal>Menu</tt> and <tt class=literal>Choice</tt>

<p>
<li class=listitem><tt class=literal>PopupMenu</tt>

<p>
<li class=listitem><tt class=literal>Checkbox</tt> and checkbox grouping

<p>
<li class=listitem><tt class=literal>Scrollbar</tt> and <tt class=literal>ScrollPane</tt> 

<p>
<li class=listitem><tt class=literal>Dialog</tt> and <tt class=literal>FileDialog</tt>

<p>
</UL>
<p class=para>
When we discuss how to create your own components, we'll cover these issues:

<p>
<ul class=itemizedlist>
<li class=listitem>Extending canvas

<p>
<li class=listitem>Lightweight components

<p>
<li class=listitem>Making components that fire events

<p>
</UL>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch11-SECT1-AUTOID.1">11.1 Buttons and Labels</A></h2>

<p class=para>
We'll start with the simplest components, buttons, and labels. Frankly,
there isn't much to say about them. If you've seen one button, you've
seen them all; and you've already seen buttons in the applets of
Chapter 2 (<tt class=literal>HelloWeb3</tt> and
<tt class=literal>HelloWeb4</tt>). A button generates an
ActionEvent 
when the user presses it. To receive these events, your program
registers an <tt class=literal>ActionListener</tt>, which must
implement the 
<tt class=literal>actionPerformed()</tt> method. The argument
passed to <tt class=literal>actionPerformed()</tt> is
the event itself. Rather than rehash this material, I'll refer you to
Chapter 2. 

<p class=para>
So much for review. There's one more thing worth saying about buttons,
which applies to any component that generates an action event.
Java lets us specify an "action command" for buttons (and other 
components, like menu items, that can generate action events).  The action
command is less interesting than it sounds.  It is just a String that serves
to identify the component that sent the event.  By default, the action 
command of a Button is the same as the text of its label; it is included in 
action events, so you can use it to figure out which button an event came from. 
To get the action command from an action event, call the event's
<tt class=literal>getActionCommand()</tt> 
method. The following code checks whether the user pressed the "Yes"
button: 

<div class=screen>
<p>
<pre>
public void actionPerformed(ActionEvent e){
    if (e.getActionCommand().equals("Yes") {
        //the user pressed "Yes"; do something
        ...
    }
}
</PRE>
</DIV>

<p class=para>
You can change the action command by calling the button's
<tt class=literal>setActionCommand()</tt> method. 
The code below changes the button <tt class=literal>b</tt>'s
action command to "confirm":

<div class=screen>
<p>
<pre>
myButton.setActionCommand("confirm");
</PRE>
</DIV>

<p class=para>
It's a good idea to get used to setting action commands explicitly,
because they prevent your code from breaking when you or some other
developer "internationalizes" it. If you rely on the button's
label, your code will stop working as soon as that label changes; a
French user might see the label "Oui" rather than "Yes." By
setting the action command, you eliminate one source of bugs; for
example, the button <tt class=literal>myButton</tt> above will always 
generate the action command "confirm," regardless of what its label says.

<p class=para>
There's even less to be said about Label components. They're just text strings,
housed in a component. There aren't any special events associated
with labels; about all you can do is specify the text's alignment,
which controls the position of the text within the area that the
label occupies when displayed. The following code creates some labels
with different alignments:

<div class=screen>
<p>
<pre>
Label l1 = new Label("Lions"); //label with default alignment (CENTER)
Label l2 = new Label("Tigers", LEFT); //left aligned label
Label l3 = new Label (); //label with no text, default alignment
l3.setText("and Bears"); //assigning text to l3
l3.setAlignment(RIGHT); //setting l3's alignment
</PRE>
</DIV>

<p class=para>
Now we've built three labels, using all three constructors and several
of the class's methods. To display the labels, you only have to add
them to a container by calling the container's
<tt class=literal>add()</tt> method. 

<p class=para>
The other characteristics you might like to set on labels, like
changing their font or color, are accomplished using the methods 
of the Component class <a href="ch10_01.htm">Chapter 10, <i>Understand the Abstract Windowing Toolkit</i></A>  For example, you can call 
<tt class=literal>setFont()</tt> and 
<tt class=literal>setColor()</tt> on a label, as with any other component.

<p class=para>
Given that labels are so simple, why do we need them at all?  Why not
just call <tt class=literal>drawString()</tt> whenever we need text? 
Remember that a <tt class=literal>Label</tt> is a
<tt class=literal>Component</tt>.  That's important; it means
that labels have the normal complement of methods for setting fonts and
colors that we mentioned above, as well as the ability to be managed 
sensibly by a layout manager.  Therefore, they're much more flexible.

<p class=para>
Speaking of layouts--if you use the setText() method to change the text of
your label, its size will probably change.  So you should remember to 
call validate() on its container, to lay things out again.[1]

<blockquote class=footnote>
<p class=para>[1] 
At least as of Java 1.1, labels aren't very smart.
Simply validating the container isn't enough.  I had to explicitly
invalidate the label first.
</blockquote>
<div class=screen>
<p>
<pre>
label.setText(...);
label.invalidate();
validate();  // on the container holding the label
</PRE>
</DIV>

<p class=para>
This ought to be considered a bug.

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch11_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Applets</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Text Components</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
