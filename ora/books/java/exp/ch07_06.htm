<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 7] 7.6 The Security Manager</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 18:55:56 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7<br>Basic Utility Classes</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch07_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="EXJ-CH-7-SECT-6">7.6 The Security Manager</A></h2>

<p class=para>
<a name="CH07.SEC1"></A> 
As I described in <a href="ch01_01.htm">Chapter 1, <i>Yet Another Language?</i></A>,
a Java application's access to system resources, such as the
display, the filesystem, threads, external processes, and the network,
can be controlled at a single point with a <i class=emphasis>security
manager</I>. The class that implements this functionality in
the Java API is the
<tt class=literal>java.lang.SecurityManager</tt> class.

<p class=para>
An instance of the <tt class=literal>SecurityManager</tt> class can
be installed once, and only once, in the life of the Java run-time
environment. Thereafter, every access to a fundamental system
resource is filtered through specific methods of the
<tt class=literal>SecurityManager</tt> object by the core Java
packages. By installing a specialized
<tt class=literal>SecurityManager</tt>, we can implement arbitrarily
complex (or simple) security policies for allowing access to
individual resources.

<p class=para>
When the Java run-time system starts executing, it's in a
wide-open state until a <tt class=literal>SecurityManager</tt> is
installed. The "null" security manager grants all
requests, so the Java virtual environment can perform any activity
with the same level of access as other programs running under the
user's authority. If the application that is running needs to
ensure a secure environment, it can install a
<tt class=literal>SecurityManager</tt> with the
<tt class=literal>static System.setSecurityManager()</tt>
method. For example, a Java-enabled Web browser like Netscape
Navigator installs a <tt class=literal>SecurityManager</tt> before it runs
any Java applets.

<p class=para>
<tt class=literal>java.lang.SecurityManager</tt> must be subclassed
to be used. This class does not actually contain any
<tt class=literal>abstract</tt> methods; it's <tt class=literal>abstract</tt>
as an indication that its default implementation is not very
useful. By default, each security method in
<tt class=literal>SecurityManager</tt> is implemented to provide the
strictest level of security. In other words, the default
<tt class=literal>SecurityManager</tt> simply rejects all requests.

<p class=para>
The following example, <tt class=literal>MyApp</tt>, installs a trivial 
subclass of <tt class=literal>SecurityManager</tt> as one of its first 
activities: 

<div class=programlisting>
<p>
<pre>
class FascistSecurityManager extends SecurityManager { } 
 
public class MyApp { 
    public static void main( Strings [] args ) { 
        System.setSecurityManager( new FascistSecurityManager() ); 
        // No access to files, network, windows, etc. 
        ... 
    } 
} 
</PRE>
</DIV>

<p class=para>
In the above scenario, <tt class=literal>MyApp</tt> does little aside from
reading from <tt class=literal>System.in</tt> and writing to
<tt class=literal>System.out</tt>. Any attempts to read or write files,
access the network, or even open an window, results in a
<tt class=literal>SecurityException</tt> being thrown.

<p class=para>
After this draconian <tt class=literal>SecurityManager</tt> is
installed, it's impossible to change the
<tt class=literal>SecurityManager</tt> in any way. The security of this
feature is not dependent on the <tt class=literal>SecurityManager</tt>;
you can't replace or modify the <tt class=literal>SecurityManager</tt>
under any circumstances. The upshot of this is that you have to
install one that handles all your needs up front.

<p class=para>
To do something more useful, we can override
the methods that are consulted for access to various kinds of
resources. <a href="ch07_05.htm">Table 7.7</A> lists some of the more
important access methods. You should not normally have to call these
methods yourself, although you could. They are called by the core Java
classes before granting particular types of access.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="EXJ-CH-7-TAB-9">Table 7.8: SecurityManager Methods</A></CAPTION>
<tr class=row>
<th align="left">Method</TH>
<th align="left">Can I...?</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>checkAccess(Thread g)</tt></TD>
<td align="left">Access this thread?</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>checkExit(int status)</tt></TD>
<td align="left">Execute a <tt class=literal>System.exit()</tt>?</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>checkExec(String cmd)</tt></TD>
<td align="left"><tt class=literal>exec()</tt> this process?</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>checkRead(String file)</tt></TD>
<td align="left">Read a file?</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>checkWrite(String file)</tt></TD>
<td align="left">Write a file?</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>checkDelete(String file)</tt></TD>
<td align="left">Delete a file?</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>checkConnect(String host, int port)</tt></TD>
<td align="left">Connect a socket to a host?</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>checkListen(int port)</tt></TD>
<td align="left">Create a server socket?</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>checkAccept(String host, int port)</tt></TD>
<td align="left">Accept this connection?</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>checkPropertyAccess(String key)</tt></TD>
<td align="left">Access this system property?</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>checkTopLevelWindow(Object window)</tt></TD>
<td align="left">Create this new top-level window?</TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
All these methods, with the exception of
<tt class=literal>checkTopLevelWindow()</tt>, simply return to grant
access. If access is not granted, they throw a
<tt class=literal>SecurityException</tt>.
<tt class=literal>checkTopLevelWindow()</tt> returns a
<tt class=literal>boolean</tt> value. A value of <tt class=literal>true</tt>
indicates the access is granted; a value of <tt class=literal>false</tt>
indicates the access is granted with the restriction that the new
window should provide a warning border that serves to identify it as
an untrusted window.

<p class=para>
Let's implement a silly
<tt class=literal>SecurityManager</tt> that allows only files beginning
with the name <i class=filename>foo</i> to be read:

<div class=programlisting>
<p>
<pre>
class  FooFileSecurityManager extends SecurityManager { 
 
    public void checkRead( String s ) { 
        if ( !s.startsWith("foo") ) 
            throw new SecurityException("Access to non-foo file: " + 
                s + " not allowed." ); 
    } 
} 
</PRE>
</DIV>

<p class=para>
Once the <tt class=literal>FooFileSecurityManager</tt> is installed, any
attempt to read a filename other than <i class=filename>foo*</i> from any
class will fail and cause a <tt class=literal>SecurityException</tt> to be
thrown. All other security methods are inherited from
<tt class=literal>SecurityManager</tt>, so they are left at their default
restrictiveness.

<p class=para>
All restrictions placed on applets by an applet-viewer
application are enforced through a
<tt class=literal>SecurityManager</tt>, which allows untrusted code loaded from
over the network to be executed safely. The restrictions placed on
applets are currently fairly harsh. As time passes and security
considerations related to applets are better understood and accepted,
the applet API will hopefully become more powerful
and allow forms of persistence and access to designated public
information.

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch07_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Properties</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Internationalization</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
