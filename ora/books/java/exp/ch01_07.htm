<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 1] 1.7 Java and the World Wide Web</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 18:47:24 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 1<br>Yet Another Language?</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch01_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="EXJ-CH-1-SECT-7">1.7 Java and the World Wide Web</A></h2>

<p class=blockquote><blockquote><p>
<p class=para>
Alice was beginning to get very tired of sitting by her sister on the
bank, and of having nothing to do: once or twice she had peeped into
the book her sister was reading, but it had no pictures or
conversations in it, "and what is the use of a book,"
thought Alice, "without pictures or conversations?"

<p class=para>
--<i class=emphasis>Alice in Wonderland</I>
</BLOCKQUOTE><p>
<p class=para>
<a name="CH01.WWW"></A>The application-level safety features of Java make it possible
to develop new kinds of applications not necessarily feasible
before now. A Web browser that implements the Java run-time system can
incorporate Java applets as executable content inside of
documents. This means that Web pages can contain not only static
hypertext information but also full-fledged interactive
applications. The added potential for use of the
WWW is enormous.  A user can retrieve and use
software simply by navigating with a Web browser.  Formerly static
information can be paired with portable software for interpreting and
using the information. Instead of just providing some data for a
spreadsheet, for example, a Web document might contain a fully
functional spreadsheet application embedded within it that allows
users to view and manipulate the information.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-1-SECT-7.1">Applets</A></h3>

<p class=para>
<a name="CH01.APPLETS"></A>The term <i class=emphasis>applet</I> is used to mean a small,
subordinate, or embeddable application. By embeddable, I mean it's
designed to be run and used within the context of a larger system. In
that sense, most programs are embedded within a computer's operating
system. An operating system manages its native applications in a
variety of ways: it starts, stops, suspends, and synchronizes
applications; it provides them with certain standard resources; and it
protects them from one another by partitioning their environments.

<p class=para>
In this book, I'll be describing Java applets, which are
Java applications meant to be embedded in and controlled by a
larger application, such as a Java-enabled Web browser or an applet
viewer. To include an applet as executable content in a Web document,
you use a special HTML tag. The
<tt class=literal>&lt;applet&gt;</tt> tag points to an applet and provides
configuration information about the applet.

<p class=para>
As far as the Web browser model is concerned, an applet is just
another type of object to display. Browsers make a distinction between
items presented inline and items anchored via
hypertext links and made available by external means, such as a viewer
or helper application.  If you download an MPEG
video clip, for instance, and your browser doesn't natively
understand MPEG, it will look for a helper
application (an MPEG player) to pass the
information to. Java-enabled Web browsers generally execute applets
inline, in the context of a particular document, as shown in <a href="#EXJ-CH-1-FIG-4">Figure 1.4</A>. However, less capable browsers could
initially provide some support for Java applets through an external
viewer.

<div class=figure>
<h4 class=figure><a class="TITLE" name="EXJ-CH-1-FIG-4">Figure 1.4: Applets in a Web document</A></h4>


<p>
<img align=middle src="figs/je0104.gif" alt="[Graphic: Figure 1-4]" width=503 height=303 border=0>

</DIV>

<p class=para>
A Java applet is a compiled Java program, composed of classes
just like any Java program. While a simple applet may consist of only
a single class, most large applets should be broken into many
classes. Each class is stored in a separate class file. The class
files for an applet are retrieved from the network as they are
needed. A large applet doesn't need to retrieve all its parts or
all its data before beginning to interact with the
user. Well-designed applets can take advantage of multithreading to
wait for certain resources in the background, while performing other
activities.

<p class=para>
An applet has a four-part life cycle. When an applet is
initially loaded by a Web browser, it's asked to initialize
itself. The applet is then informed each time it's displayed and each
time it's no longer visible to the user. Finally, the applet is told
when it's no longer needed, so that it can clean up after
itself. During its lifetime, an applet may start and suspend itself,
do work, communicate with other applications, and interact with the
Web browser.

<p class=para>
Applets are autonomous programs, but they are confined within
the walls of a Web browser or applet viewer, and have to play by its
rules. I'll be discussing the details of what applets can and
can't do as we explore features of the Java language. However, under
the most conservative security policies, an applet can interact only
with the user and can only communicate over the network with the host from
which it originated. Other types of activities, like accessing files
or interacting directly with outside applications, are typically
prevented by the security manager that is part of the Web browser or
applet viewer. But aside from these restrictions, there is no
fundamental difference between a Java applet and a standalone Java
application.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-1-SECT-7.2">New Kinds of Applications</A></h3>

<p class=para>
Sun's HotJava Web browser is written entirely in Java. Because
it's a Java application, HotJava is immediately available on any
platform with the Java run-time system. This goes a long way towards
the goal of a Web browser serving as a universal access point for
resources on the Net. And where one Web browser leads the way, more
will surely follow.

<p class=para>
In addition to displaying Java applets as executable content in
Web pages, the HotJava application dynamically extends itself by
loading Java code from the Net. HotJava uses <i class=emphasis>protocol
handlers</I> and <i class=emphasis>content handlers</I> to
provide this functionality.[7]
Protocol handlers and content handlers
are classes in the Java API that let an application implement new
types of URLs and interpret the objects retrieved from them. A Web
browser that supports this functionality can load handlers from a
remote location and effectively upgrade itself on the fly to use new
protocols and access new kinds of information.

<blockquote class=footnote>
<p class=para>[7] 
Downloadable content and protocol handlers are not supported in
HotJava 1.0, but will be supported in a future release.
</blockquote>
<p class=para>
Like applets, content handlers and protocol handlers can be
served by a Web site, along with the information they
interpret. As an example, consider the new Portable Network Graphics
(PNG) format, a freely distributable alternative to
GIF. By supplying a PNG content
handler along with PNG images on our server, we
give users the ability to use the new image format, just as they would
a built-in format. We don't have to create a new standard
and force every Web browser to support the new format. Instead, the
first time a user loads a document referencing a
PNG image from our site, the Web browser will
realize it doesn't understand the object and will ask the server if
it has a content handler for it. Since we've provided a content
handler, the browser can load it and then use it to interpret and
display the image dynamically.

<p class=para>
In a similar manner, protocol handlers allow a Web browser to
start speaking a new protocol with the server. This is especially
useful for things like security protocols. If we invent a
revolutionary new cryptographic protocol late one night, all we have
to do is implement it in the form of a protocol handler and place it
on our server. We can then start using URLs that
point through our new protocol at objects on our server, and people can
immediately begin using it.

<p class=para>
These scenarios describe just a few things that safe,
transportable code will allow. We will undoubtedly see many other new
breeds of application we can't even begin to anticipate.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch01-SECT2-AUTOID.1">New Kinds of Media</A></h3>

<p class=para>
When it was first released, Java quickly achieved a reputation for
multimedia capabilities. Frankly, this wasn't really deserved. At
that point, Java provided facilities for doing simple animations and
playing audio. You could even animate and play audio simultaneously,
though you couldn't synchronize the two. Still, this was a significant
advance for the Web, and people thought it was pretty impressive. 

<p class=para>
JavaSoft is now working on real media features, which go far beyond
anything that has yet been seen on the Web. This includes CD quality
sound, 3D animation, media players that synchronize
audio and video, speech synthesis
and recognition, and more. These new
features aren't yet in Java 1.1, but 
will make their way into Java over the next eighteen months.
In short, if you were impressed by Java 1.0, you haven't seen anything
yet. Java's multimedia capabilities will be taking shape over the next
two years. 

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch01-SECT2-AUTOID.2">New Software Development Models</A></h3>

<p class=para>
For some time now, people have been using visual development
environments to develop user interfaces. These environments let you
generate applications by moving components around on the screen,
connecting components to each other, and so on. In short, designing a
user interface is a lot more like drawing a picture than like writing
code. 

<p class=para>
For visual development environments to work well, you need to be able
to create reusable software components. That's what Java Beans are all
about. The JavaBeans architecture defines a way to package software as
reusable building blocks. A graphical development tool can figure out
a component's capabilities, customize the component, and connect it to
other components to build applications. JavaBeans takes the idea of
graphical development a step further. Beans aren't limited to visible,
user interface components: you can have Beans that are entirely
invisible, and whose job is purely computational. For example, you
could have a Bean that did database access; you could connect this to
a Bean that let the user request information from the database; and
you could use another Bean to display the result. Or you could 
have a set of Beans that implemented the functions in a mathematical
library; you could then do numerical analysis by connecting different
functions to each other. In either case, you could "write" programs
without writing a single line of code. Granted, someone would have to
write the Beans in the first place; but that's a much smaller task,
and we expect markets to develop for "off the shelf" Bean collections.

<p class=para>
Before it can use a Bean, an application builder must find out the
Bean's capabilities. There are a few ways it can do this; the simplest
is called "reflection". To write a Bean that uses reflection, all you
need to do is follow some simple design patterns. Let's say that
you're writing a Bean that is capable of changing its color. Then you
would write two methods that report the current color and change its
value:

<div class=programlisting>
<p>
<pre>
...
private Color c;
public Color getMyColor() { return c; }
public void setMyColor( Color c) { this.c = c; }
</PRE>
</DIV>

<p class=para>
These methods follow some well defined conventions (design patterns)
that let the graphical interface builder (or any other tool that wants
to do the work) analyze the Bean, and discover that it has a property
called <tt class=literal>MyColor</tt>, that the value of this
property is a <tt class=literal>Color</tt> object,
and that the methods
<tt class=literal>getMyColor()</tt> and
<tt class=literal>setMyColor()</tt> should be used to change its
value. 

<p class=para>
If they
need to, Beans can provide additional information using a process
called "introspection". But even without introspection, you can see
that a graphical development tool can easily analyze a Bean, figure
out what it can do, and let a user change the Bean's properties
without writing any code. 

<p class=para>
Of course, once a development tool has customized a Bean and connected it
to other Beans, it needs a way to save the result. A process called
"serialization" lets a tool save the Bean's current state, along with
any extra code it has written to stitch Beans together in an
application. 

<p class=para>
Visual development tools that support Java Beans include Borland's
JBuilder (<a href="../../../../../../../www.borland.com/">http://www.borland.com</A>), Symantec's Visual Cafe
(<a href="../../../../../../../www.symantec.com/">http://www.symantec.com</A>), and SunSoft's Java Workshop. By
using a "bridge", Java Beans will be able to interact with other
component environments, including ActiveX, OpenDoc, and LiveConnect. A
beta version of the ActiveX bridge is currently available. 

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch01_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Application and User Level Security</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Java as a General Application Language</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
