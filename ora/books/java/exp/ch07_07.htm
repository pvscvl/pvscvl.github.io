<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 7] 7.7 Internationalization</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 18:55:58 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7<br>Basic Utility Classes</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch08_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="EXJ-CH-7-SECT-7">7.7 Internationalization</A></h2>

<p class=para>
In order to deliver on the promise "Write once, run anywhere," the engineers
at Java designed the famous Java Virtual Machine.  True, your program
will run anywhere there is a JVM, but what about users in other countries?  Will
they have to know English to use your application?  Java 1.1 answers that
question with a resounding "no," backed up by various classes that are
designed to make it easy for you to write a "global" application.
In this section we'll talk about the concepts of internationalization and
the classes that support them.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-7-SECT-7.1">java.util.Locale</A></h3>

<p class=para>
Internationalization programming revolves around the
<tt class=literal>Locale</tt> class.  The class itself is very simple;
it encapsulates a country code, a language code, and a rarely used
variant code.  Commonly used
languages and countries are defined as constants in the 
<tt class=literal>Locale</tt> class. (It's ironic that these
names are all in English.) You can retrieve the
codes or readable names, as follows:

<div class=programlisting>
<p>
<pre>
Locale l = Locale.ITALIAN;
System.out.println(l.getCountry()); // IT
System.out.println(l.getDisplayCountry());  // Italy
System.out.println(l.getLanguage());    // it
System.out.println(l.getDisplayLanguage()); // Italian
</PRE>
</DIV>

<p class=para>
The country codes comply with ISO 639.  A complete list of
country codes is at
<a href="../../../../../../../www.ics.uci.edu/pub/ietf/http/related/iso639.txt">http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt</A>.
The language codes comply with ISO 3166.  A complete list of
language codes is at
<a href="../../../../../../../www.chemie.fu-berlin.de/diverse/doc/ISO_3166.html">http://www.chemie.fu-berlin.de/diverse/doc/ISO_3166.html</A>.
There is no official set of variant codes; they are designated
as vendor-specific or platform-specific.

<p class=para>
Various classes throughout the Java API use a
<tt class=literal>Locale</tt> to decide how to represent
themselves.  We have already seen how the
<tt class=literal>DateFormat</tt> class uses
<tt class=literal>Locale</tt>s to determine how to
format and parse strings.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-7-SECT-7.2">Resource Bundles</A></h3>

<p class=para>
If you're writing an internationalized program, you want all the text that
is displayed by your application to be in the correct language.  Given
what you have just learned about <tt class=literal>Locale</tt>,
you could print out different messages by testing the 
<tt class=literal>Locale</tt>.  This gets cumbersome quickly,
however, because the messages for all <tt class=literal>Locale</tt>s
are embedded in your source code.  <tt class=literal>ResourceBundle</tt>
and its subclasses offer a cleaner, more flexible solution.

<p class=para>
A <tt class=literal>ResourceBundle</tt> is a collection of objects that
your application can access by name, much like a
<tt class=literal>Hashtable</tt>
with <tt class=literal>String</tt> keys.
The same <tt class=literal>ResourceBundle</tt> may be defined for many different
<tt class=literal>Locale</tt>s.  To get a particular
<tt class=literal>ResourceBundle</tt>, call the
factory method <tt class=literal>ResourceBundle.getBundle()</tt>,
which accepts the name of a <tt class=literal>ResourceBundle</tt>
and a <tt class=literal>Locale</tt>.  The following example
gets a <tt class=literal>ResourceBundle</tt> for two
<tt class=literal>Locale</tt>s, retrieves a string message from
it, and prints the message.  We'll define the <tt class=literal>ResourceBundle</tt>s
later to make this example work.

<div class=programlisting>
<p>
<pre>
import java.util.*;
public class Hello {
  public static void main(String[] args) {
    ResourceBundle bun;
    bun = ResourceBundle.getBundle("Message", Locale.ITALY);
    System.out.println(bun.getString("HelloMessage"));
    bun = ResourceBundle.getBundle("Message", Locale.US);
    System.out.println(bun.getString("HelloMessage"));
  }
}
</PRE>
</DIV>

<p class=para>
The <tt class=literal>getBundle()</tt> method throws the runtime
exception <tt class=literal>MissingResourceException</tt> if an
appropriate <tt class=literal>ResourceBundle</tt> cannot
be located.

<p class=para>
<tt class=literal>Locale</tt>s are defined in three ways.  They can
be stand-alone classes, in which case they will either be subclasses of
<tt class=literal>ListResourceBundle</tt> or direct subclasses of
<tt class=literal>ResourceBundle</tt>.  They can also be defined
by a property file, in which case they will be represented at run-time by
a  <tt class=literal>PropertyResourceBundle</tt> object.  When
you call <tt class=literal>ResourceBundle.getBundle()</tt>, either
a matching class is returned or an instance of <tt class=literal>PropertyResourceBundle</tt>
corresponding to a matching property file.  The algorithm used by
<tt class=literal>getBundle()</tt> is based on appending the
country and language codes of the requested <tt class=literal>Locale</tt>
to the name of the resource.  Specifically, it searches for resources using
this order:

<div class=simplelist>

<p>
<tt class=literal>name_language_country_variant</tt><br>
<tt class=literal>name_language_country</tt><br>
<tt class=literal>name_language</tt><br>
<tt class=literal>name</tt><br>
<tt class=literal>name_default-language_default-country_default-variant</tt><br>
<tt class=literal>name_default-language_default-country</tt><br>
<tt class=literal>name_default-language</tt><br>
</DIV>

<p class=para>
In the example above, when we try to get the
<tt class=literal>ResourceBundle</tt>
named <tt class=literal>Message</tt>, specific to
<tt class=literal>Locale.ITALY</tt>, it searches for the following
names (note that there are no variant codes in the
<tt class=literal>Locale</tt>s we are using):

<div class=simplelist>

<p>
<tt class=literal>Message_it_IT</tt><br>
<tt class=literal>Message_it</tt><br>
<tt class=literal>Message</tt><br>
<tt class=literal>Message_en_US</tt><br>
<tt class=literal>Message_en</tt><br>
</DIV>

<p class=para>
Let's define the <tt class=literal>Message_it_IT</tt>
<tt class=literal>ResourceBundle</tt> now, using a subclass
of <tt class=literal>ListResourceBundle</tt>.

<div class=programlisting>
<p>
<pre>
import java.util.*;
public class Message_it_IT extends ListResourceBundle {
  public Object[][] getContents() {
    return contents;
  }
  
  static final Object[][] contents = {
    {"HelloMessage", "Buon giorno, world!"},
    {"OtherMessage", "Ciao."},
  };
}
</PRE>
</DIV>

<p class=para>
<tt class=literal>ListResourceBundle</tt> makes it easy to define a
<tt class=literal>ResourceBundle</tt> class; all we have to do is
override the <tt class=literal>getContents()</tt> method.

<p class=para>
Now let's define a <tt class=literal>ResourceBundle</tt> for
<tt class=literal>Locale.US</tt>.  This time, we'll make a
property file.  Save the following data in a file called
<i class=filename>Message_en_US.properties</i>:

<div class=programlisting>
<p>
<pre>
HelloMessage=Hello, world!
OtherMessage=Bye.
</PRE>
</DIV>

<p class=para>
So what happens if somebody runs your program in
<tt class=literal>Locale.FRANCE</tt>, and there is no
<tt class=literal>ResourceBundle</tt> defined for that
<tt class=literal>Locale</tt>?  To avoid a run-time
<tt class=literal>MissingResourceException</tt>,
it's a good idea to define
a default <tt class=literal>ResourceBundle</tt>.  So in
our example, you could change the name of the property file
to <tt class=literal>Message.properties</tt>.  That way, if a
language-specific or country-specific <tt class=literal>ResourceBundle</tt>
cannot be found, your application can still run.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-7-SECT-7.3">java.text</A></h3>

<p class=para>
The <tt class=literal>java.text</tt> package includes,
among other things, a set of classes designed for generating and
parsing string representations of objects.  We have already seen
one of these classes, <tt class=literal>DateFormat</tt>.
In this section we'll talk about the other format classes,
<tt class=literal>NumberFormat</tt>,
<tt class=literal>ChoiceFormat</tt>, and
<tt class=literal>MessageFormat</tt>.

<p class=para>
The <tt class=literal>NumberFormat</tt> class can be
used to format and parse currency, percents, or plain old numbers.  Like
<tt class=literal>DateFormat</tt>,
<tt class=literal>NumberFormat</tt>
is an abstract class.  However, it has several useful factory methods.
For example, to generate currency strings, use
<tt class=literal>getCurrencyInstance()</tt>:

<div class=programlisting>
<p>
<pre>
double salary = 1234.56;
String here = 
    NumberFormat.getCurrencyInstance().format(salary); 
    // $1,234.56
String italy = 
    NumberFormat.getCurrencyInstance(Locale.ITALY).format(salary);
    // L 1.234,56 
</PRE>
</DIV>

<p class=para>
The first statement generates an American salary, with a dollar sign,
a comma to separate thousands, and a period as a decimal point. The
second statement presents the same string in Italian, with a lire
sign, a period to separate thousands, and a comma as a decimal point.
Remember that the <tt class=literal>NumberFormat</tt> worries
about format only; it doesn't attempt to do currency conversion.
(Among other things, that would require access to a dynamically
updated table and exchange rates: a good opportunity for a Java Bean,
but too much to ask of a simple formatter.)

<p class=para>
Likewise, <tt class=literal>getPercentInstance()</tt>
returns a formatter you can use for generating and parsing
percents.  If you do not specify a <tt class=literal>Locale</tt>
when calling a <tt class=literal>getInstance()</tt> method,
the default <tt class=literal>Locale</tt> is used.

<div class=programlisting>
<p>
<pre>
NumberFormat pf = NumberFormat.getPercentInstance();
System.out.println(pf.format(progress)); // 44%
try {
  System.out.println(pf.parse("77.2%")); // 0.772
}
catch (ParseException e) {}
</PRE>
</DIV>

<p class=para>
And if you just want to generate and parse plain old numbers, use
a <tt class=literal>NumberFormat</tt> returned by
<tt class=literal>getInstance()</tt> or its
equivalent, <tt class=literal>getNumberInstance()</tt>.

<div class=programlisting>
<p>
<pre>
NumberFormat guiseppe = NumberFormat.getInstance(Locale.ITALY);
NumberFormat joe = NumberFormat.getInstance();  // defaults to Locale.US
try {
  double theValue = guiseppe.parse("34.663,252").doubleValue();
  System.out.println(joe.format(theValue)); // 34,663.252
}
catch (ParseException e) {}
</PRE>
</DIV>

<p class=para>
We use <tt class=literal>guiseppe</tt> to parse a number in Italian format
(periods separate thousands, comma as the decimal point).  The return
type of <tt class=literal>parse()</tt> is <tt class=literal>Number</tt>, so we
use the <tt class=literal>doubleValue()</tt> method to retrieve the value
of the <tt class=literal>Number</tt> as a <tt class=literal>double</tt>. Then
we use <tt class=literal>joe</tt> to format the number correctly for the
default (US) locale.

<p class=para>
<a href="ch07_06.htm">Table 7.8</A> summarizes 
the factory methods for text formatters in the <tt class=literal>java.text</tt>
package.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="EXJ-CH-7-TAB-10">Table 7.9: Format Factory Methods</A></CAPTION>
<tr class=row>
<th align="left">Factory Method</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>DateFormat.getDateInstance()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>DateFormat.getDateInstance(int style)</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>DateFormat.getDateInstance(int style, Locale aLocale)</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>DateFormat.getDateTimeInstance()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>DateFormat.getDateTimeInstance(int dateStyle, int timeStyle)</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>DateFormat.getDateTimeInstance(int dateStyle, int timeStyle, Locale aLocale)</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>DateFormat.getInstance()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>DateFormat.getTimeInstance()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>DateFormat.getTimeInstance(int style)</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>DateFormat.getTimeInstance(int style, Locale aLocale)</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>NumberFormat.getCurrencyInstance()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>NumberFormat.getCurrencyInstance(Locale inLocale)</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>NumberFormat.getInstance()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>NumberFormat.getInstance(Locale inLocale)</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>NumberFormat.getNumberInstance()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>NumberFormat.getNumberInstance(Locale inLocale)</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>NumberFormat.getPercentInstance()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>NumberFormat.getPercentInstance(Locale inLocale)</tt></TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
Thus far we've seen how to format dates and numbers as text.  Now
we'll take a look at a class, <tt class=literal>ChoiceFormat</tt>,
that maps numerical ranges to text.
<tt class=literal>ChoiceFormat</tt> is constructed by
specifying the numerical ranges and the strings that correspond to them.
One constructor accepts an array of <tt class=literal>double</tt>s
and an array of <tt class=literal>String</tt>s, where each string corresponds to the
range running from the matching number up through the next
number:

<div class=programlisting>
<p>
<pre>
double[] limits = {0, 20, 40};
String[] labels = {"young", "less young", "old"};
ChoiceFormat cf = new ChoiceFormat(limits, labels);
System.out.println(cf.format(12)); // young
System.out.println(cf.format(26)); // less young
</PRE>
</DIV>

<p class=para>
You can specify both the limits and the labels using a special
string in another <tt class=literal>ChoiceFormat</tt>
constructor:

<div class=programlisting>
<p>
<pre>
ChoiceFormat cf = new ChoiceFormat("0#young|20#less young|40#old");
System.out.println(cf.format(40)); // old
System.out.println(cf.format(50)); // old
</PRE>
</DIV>

<p class=para>
The limit and value pairs are separated by pipe characters (|; also
known as "vertical bar"), while the
number sign serves to separate each limit from its corresponding
value.

<p class=para>
To complete our discussion of the formatting classes,
we'll take a look at another class,
<tt class=literal>MessageFormat</tt>, 
that helps you construct human-readable messages.  To construct
a <tt class=literal>MessageFormat</tt>, pass it a
<i class=emphasis>pattern string</I>.  A pattern
string is a lot like the string you feed to
<tt class=literal>printf()</tt> in C, although the
syntax is different.  Arguments are delineated by curly
brackets, and may include information about how they
should be formatted.  Each argument consists of a number,
an optional type, and an optional style.  These are summarized in
table <a href="#EXJ-CH-7-TAB-10">Table 7.9</A>.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="EXJ-CH-7-TAB-11">Table 7.10: <tt class=literal>MessageFormat</tt> arguments</A></CAPTION>
<tr class=row>
<th align="left">Type</TH>
<th align="left">Styles</TH>
</TR>
<tr class=row>
<td align="left">choice</TD>
<td align="left"><i class=emphasis>pattern</I></TD>
</TR>
<tr class=row>
<td align="left">date</TD>
<td align="left">short, medium, long, full, <i class=emphasis>pattern</I></TD>
</TR>
<tr class=row>
<td align="left">number</TD>
<td align="left">integer, percent, currency, <i class=emphasis>pattern</I></TD>
</TR>
<tr class=row>
<td align="left">time</TD>
<td align="left">short, medium, long, full, <i class=emphasis>pattern</I></TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
Let's use an example to clarify all of this.

<div class=programlisting>
<p>
<pre>
MessageFormat mf = new MessageFormat("You have {0} messages.");
Object[] arguments = {"no"};
System.out.println(mf.format(arguments)); // You have no messages.
</PRE>
</DIV>

<p class=para>
We start by constructing a <tt class=literal>MessageFormat</tt>
object; the argument to the constructor is the pattern on which
messages will be based. The special incantation {0} means "in this
position, substitute element 0 from the array passed as an argument to
the <tt class=literal>format()</tt> method." Thus, we construct a
<tt class=literal>MessageFormat</tt> object with a pattern, which
is a template on which messages are based. When we generate a message,
by calling <tt class=literal>format()</tt>, we pass in values to
fill the blank spaces in the template.  In this case, we
pass the array <tt class=literal>arguments[]</tt> to
<tt class=literal>mf.format</tt>; this substitutes
<tt class=literal>arguments[0]</tt>, yielding the result "You
have no messages." 

<p class=para>
Let's try this example again, except we'll show how to
format a number and a date instead of a string argument.

<div class=programlisting>
<p>
<pre>
MessageFormat mf = new MessageFormat(
    "You have {0, number, integer} messages on {1, date, long}.");
Object[] arguments = {new Integer(93), new Date()};
System.out.println(mf.format(arguments));
    // You have 93 messages on April 10, 1997.
</PRE>
</DIV>

<p class=para>
In this example, we need to fill in two spaces in the template, and
therefore need two elements in the
<tt class=literal>arguments[]</tt> array. Element 0 must be a
number, and is formatted as an integer. Element 1 must be a
<tt class=literal>Date</tt>, and will be printed in the long
format. When we call <tt class=literal>format()</tt>, the
<tt class=literal>arguments[]</tt> array supplies these two
values.

<p class=para>
This is still sloppy. What if there is only one message? 
To make this grammatically correct, we can embed a
<tt class=literal>ChoiceFormat</tt>-style pattern string in
our <tt class=literal>MessageFormat</tt> pattern string.

<div class=programlisting>
<p>
<pre>
MessageFormat mf = new MessageFormat(
    "You have {0, number, integer} message{0, choice, 0#s|1#|2#s}.");
Object[] arguments = {new Integer(1)};
System.out.println(mf.format(arguments)); // You have 1 message.
</PRE>
</DIV>

<p class=para>
In this case, we use element 0 of
<tt class=literal>arguments[]</tt> twice: once to supply the
number of messages, and once to provide input to the
<tt class=literal>ChoiceFormat</tt> pattern. The pattern says to
add an "s" if argument 0 has the value zero, or is two or more. 

<p class=para>
Finally, a few words on how to be clever. If you want to write
international programs, you can use resource bundles to supply the
strings for your <tt class=literal>MessageFormat</tt> objects.
This way, you can automatically format messages that are in the
appropriate language with dates and other language-dependent fields
handled appropriately. 

<p class=para>
In this context, it's helpful to realize that
messages don't need to read elements from the array in order. In
English, you would say "Disk C has 123 files"; in some other language,
you might say "123 files are on Disk C." You could implement both
messages with the same set of arguments:

<div class=programlisting>
<p>
<pre>
MessageFormat m1 = new MessageFormat(
    "Disk {0} has {1, number, integer} files.");
MessageFormat m2 = new MessageFormat(
    "{1, number, integer} files are on disk {0}.");
Object[] arguments = {"C", new Integer(123)};
</PRE>
</DIV>

<p class=para>
In real life, you'd only use a single
<tt class=literal>MessageFormat</tt> object, initialized 
with a string taken from a resource bundle.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch08_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>The Security Manager</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Input/Output Facilities</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
