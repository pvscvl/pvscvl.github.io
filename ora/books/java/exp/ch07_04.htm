<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 7] 7.4 Vectors and Hashtables</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 18:55:46 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7<br>Basic Utility Classes</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch07_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="EXJ-CH-7-SECT-4">7.4 Vectors and Hashtables</A></h2>

<p class=para>
<a name="CH07.VECTORS1"></A><a name="CH07.VECTORS2"></A><a name="CH07.VECTORS3"></A><a name="CH07.VECTORS4"></A>Vectors and hashtables are <i class=emphasis>collection classes</I>.
Each stores a group of objects according to a particular retrieval
scheme. Aside from that, they are not particularly closely related
things. A <i class=emphasis>hashtable</I> is a dictionary; it stores
and retrieves objects by a key value. A <i class=emphasis>vector</I>,
on the other hand, holds an ordered collection of elements. It's
essentially a dynamic array. Both of these, however, have more
subtle characteristics in common. First, they are two of the most
useful aspects of the core Java distribution. Second,
they both take full advantage of Java's dynamic nature at the
expense of some of its more static type safety.

<p class=para>
If you work with dictionaries or associative
arrays in other languages, you should understand how useful
these classes are. If you are someone who has worked in C or another
static language, you should find collections to be
truly magical. They are part of what makes Java
powerful and dynamic. Being able to work with lists of objects and
make associations between them is an abstraction from the details of
the types. It lets you think about the problems at a higher level and
saves you from having to reproduce common structures every time you
need them.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-7-SECT-4.1">java.util.Vector</A></h3>

<p class=para>
A <tt class=literal>Vector</tt> is a dynamic array; it can grow to
accommodate new items. You can also insert and remove elements at
arbitrary positions within it. As with other mutable objects in Java,
<tt class=literal>Vector</tt> is thread-safe. The <tt class=literal>Vector</tt>
class works directly with the type <tt class=literal>Object</tt>, so we
can use them with instances of any kind of class.[3]
 We can even put different kinds of <tt class=literal>Object</tt>s in a
<tt class=literal>Vector</tt> together; the <tt class=literal>Vector</tt>
doesn't know the difference.

<blockquote class=footnote>
<p class=para>[3] 
In C++, where classes don't derive from a single
<tt class=literal>Object</tt> class that supplies a base type and common
methods, the elements of a collection would usually be derived from
some common collectable class. This forces the use of multiple
inheritance and brings its associated problems.
</blockquote>
<p class=para>
As you might guess, this is where things get tricky. To do
anything useful with an <tt class=literal>Object</tt> after we take it
back out of a <tt class=literal>Vector</tt>, we have to cast it back
(narrow) it to its original type. This can be done with safety in Java
because the cast is checked at run-time. Java throws a
<tt class=literal>ClassCastException</tt> if we try to cast an object to
the wrong type. However, this need for casting means that your code
must remember types or methodically test them with
<tt class=literal>instanceof</tt>. That is the price we pay for having a
completely dynamic collection class that operates on all
types.

<p class=para>
You might wonder if you can subclass <tt class=literal>Vector</tt> to
produce a class that looks like a <tt class=literal>Vector</tt>, but that
works on just one type of element in a type-safe way. Unfortunately,
the answer is no. We could override <tt class=literal>Vector</tt>'s
methods to make a <tt class=literal>Vector</tt> that rejects the wrong
type of element at run-time, but this does not provide any new
compile-time, static type safety. In C++, templates provide a safe
mechanism for parameterizing types by restricting the types of objects
used at compile-time. The keyword <tt class=literal>generic</tt> is a
reserved word in Java. This means that it's possible that future
versions might support C++-style templates, using
<tt class=literal>generic</tt> to allow statically checked parameterized
types.

<p class=para>
We can construct a <tt class=literal>Vector</tt> with default characteristics 
and add elements to it using <tt class=literal>addElement()</tt> and 
<tt class=literal>insertElement()</tt>: 

<div class=programlisting>
<p>
<pre>
Vector things = new Vector(); 
 
String one = "one"; 
String two = "two"; 
String three = "three"; 
 
things.addElement( one ); 
things.addElement( three ); 
things.insertElementAt( two, 1 ); 
</PRE>
</DIV>

<p class=para>
<tt class=literal>things</tt> now contains three <tt class=literal>String</tt>
objects in the order "one," "two," and "three." We can
retrieve objects by their position with
<tt class=literal>elementAt()</tt>, <tt class=literal>firstElement()</tt>, and
<tt class=literal>lastElement()</tt>:

<div class=programlisting>
<p>
<pre>
String s1 = (String)things.firstElement();       // "one" 
String s3 = (String)things.lastElement();        // "three" 
String s2 = (String)things.elementAt(1);         // "two" 
</PRE>
</DIV>

<p class=para>
We have to cast each <tt class=literal>Object</tt> back to a
<tt class=literal>String</tt> in order to assign it a
<tt class=literal>String</tt> reference.
<tt class=literal>ClassCastException</tt> is a type of
<tt class=literal>RuntimeException</tt>, so we can neglect to guard for
the exception if we are feeling confident about the type we are
retrieving. Often, as in this example, you'll just have one type
of object in the <tt class=literal>Vector</tt>. If we were unsure about
the types of objects we were retrieving, we would want to be prepared
to catch the <tt class=literal>ClassCastException</tt> or test the type
explicitly with the <tt class=literal>instanceof</tt> operator.

<p class=para>
We can search for an item in a <tt class=literal>Vector</tt> with the 
<tt class=literal>indexOf()</tt> method: 

<div class=programlisting>
<p>
<pre>
int i = things.indexOf( three );                 // i = 2 
</PRE>
</DIV>

<p class=para>
<tt class=literal>indexOf()</tt> returns a value of <tt class=literal>-1</tt>
if the object is not found. As a convenience, we can also use
<tt class=literal>contains()</tt> simply to test for the presence of the
object.

<p class=para>
Finally, <tt class=literal>removeElement()</tt> removes a specified 
<tt class=literal>Object</tt> from the <tt class=literal>Vector</tt>: 

<div class=programlisting>
<p>
<pre>
things.removeElement( two ); 
</PRE>
</DIV>

<p class=para>
The element formerly at position three now becomes the second element. 

<p class=para>
The <tt class=literal>size()</tt> method reports the number of objects 
currently in the <tt class=literal>Vector</tt>. You might think of using 
this to loop through all elements of a <tt class=literal>Vector</tt>, 
using <tt class=literal>elementAt()</tt> to get at each element. This 
works just fine, but there is a more general way to operate on a complete 
set of elements like those in a <tt class=literal>Vector</tt>. 

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-7-SECT-4.2">java.util.Enumeration</A></h3>

<p class=para>
<a name="CH07.ENUM"></A>The <tt class=literal>java.util.Enumeration</tt> interface can be used 
by any sort of set to provide serial access to its elements. An object 
that implements the <tt class=literal>Enumeration</tt> interface presents 
two methods: <tt class=literal>nextElement()</tt> and <tt class=literal>hasMoreElements()</tt>. 
<tt class=literal>nextElement()</tt> returns an <tt class=literal>Object</tt> 
type, so it can be used with any kind of collection. As with taking objects 
from a <tt class=literal>Vector</tt>, you need to know or determine 
what the objects are and cast them to the appropriate types before using 
them. 

<p class=para>
<tt class=literal>Enumeration</tt> is useful because any type of
object can implement the interface and then use it to provide access
to its elements. If you have an object that handles a set of values,
you should think about implementing the <tt class=literal>Enumeration</tt>
interface. Simply provide a <tt class=literal>hasMoreElements()</tt> test
and a <tt class=literal>nextElement()</tt> iterator and declare that your
class implements <tt class=literal>java.util.Enumeration</tt>. One
advantage of an <tt class=literal>Enumeration</tt> is that you don't
have to provide all values up front; you can provide each value
as it's requested with <tt class=literal>nextElement()</tt>. And since
<tt class=literal>Enumeration</tt> is an interface, you can write general
routines that operate on all of the elements <tt class=literal>Enumeration</tt>.

<p class=para>
An <tt class=literal>Enumeration</tt> does not guarantee the order
in which elements are returned, however, so if order is important you don't want to use an
<tt class=literal>Enumeration</tt>. You can iterate through the
elements in an <tt class=literal>Enumeration</tt> only once; there is no
way to reset it to the beginning or move backwards through the
elements.

<p class=para>
A <tt class=literal>Vector</tt> returns an
<tt class=literal>Enumeration</tt> of its contents when we call the
<tt class=literal>elements()</tt> method:

<div class=programlisting>
<p>
<pre>
Enumeration e = things.elements(); 
 
while ( e.hasMoreElements() ) { 
    String s = (String)e.nextElement(); 
    System.out.println( s ): 
} 
</PRE>
</DIV>

<p class=para>
The above code loops three times, as call
<tt class=literal>nextElement()</tt>, to fetch our strings. The actual type
of object returned by <tt class=literal>elements()</tt> is a
<tt class=literal>VectorEnumeration</tt>, but we don't have to worry
about that. We can always refer to an <tt class=literal>Enumeration</tt>
simply by its interface.

<p class=para>
Note that <tt class=literal>Vector</tt> does not implement the
<tt class=literal>Enumeration</tt> interface. If it did, that would put a
serious limitation on <tt class=literal>Vector</tt> because we could
cycle through the elements in it only once. That's clearly not the
purpose of a <tt class=literal>Vector</tt>, which is why
<tt class=literal>Vector</tt> instead provides a method that returns an
<tt class=literal>Enumeration</tt>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-7-SECT-4.3">java.util.Hashtable</A></h3>

<p class=para>
As I said earlier, a hashtable is a dictionary, similar to an
associative array. A hashtable stores and retrieves elements with key
values; they are very useful for things like caches and minimalist
databases. When you store a value in a hashtable, you associate a key
with that value. When you need to look up the value, the hashtable
retrieves it efficiently using the key. The name hashtable itself
refers to how the indexing and storage of elements is performed, as
we'll discuss shortly. First I want to talk about how to use a
hashtable.

<p class=para>
The <tt class=literal>java.util.Hashtable</tt> class implements a
hashtable that, like <tt class=literal>Vector</tt>, operates on the type
<tt class=literal>Object</tt>. A <tt class=literal>Hashtable</tt> stores an
element of type <tt class=literal>Object</tt> and associates it with a
key, also of type <tt class=literal>Object</tt>. In this way, we can
index arbitrary types of elements using arbitrary types as keys. As
with <tt class=literal>Vector</tt>, casting is generally required to
narrow objects back to their original type after pulling them out of a
hashtable.

<p class=para>
A <tt class=literal>Hashtable</tt> is quite easy to use. We can use 
the <tt class=literal>put()</tt> method to store items: 

<div class=programlisting>
<p>
<pre>
Hashtable dates = new Hashtable(); 
 
dates.put( "christmas", 
    new GregorianCalendar( 1997, Calendar.DECEMBER, 25 ) ); 
dates.put( "independence", 
    new GregorianCalendar( 1997, Calendar.JULY, 4 ) ); 
dates.put( "groundhog", 
    new GregorianCalendar( 1997, Calendar.FEBRUARY, 2 ) ); 
</PRE>
</DIV>

<p class=para>
First we create a new <tt class=literal>Hashtable</tt>. Then we add three
<tt class=literal>GregorianCalendar</tt> objects to the
hashtable, using <tt class=literal>String</tt>
objects as keys. The key is the first argument to
<tt class=literal>put()</tt>; the value is the second. Only one value can
be stored per key. If we try to store a second object under a key that
already exists in the <tt class=literal>Hashtable</tt>, the old element is
booted out and replaced by the new one. The return value of the
<tt class=literal>put()</tt> method is normally <tt class=literal>null</tt>,
but if the call to <tt class=literal>put()</tt> results in replacing an
element, the method instead returns the old stored
<tt class=literal>Object</tt>.

<p class=para>
We can now use the <tt class=literal>get()</tt> method to retrieve each 
of the above dates by name, using the <tt class=literal>String</tt> 
key by which it was indexed: 

<div class=programlisting>
<p>
<pre>
GregorianCalendar g = (GregorianCalendar)dates.get( "christmas" ); 
</PRE>
</DIV>

<p class=para>
The <tt class=literal>get()</tt> method returns a <tt class=literal>null</tt>
value if no element exists for the given key. The cast is required to
narrow the returned object back to type <tt class=literal>GregorianCalendar</tt>. I
hope you can see the advantage of using a <tt class=literal>Hashtable</tt>
over a regular array. Each value is indexed by a key instead of a
simple number, so unlike a simple array, we don't have to
remember where each <tt class=literal>GregorianCalendar</tt> is stored.

<p class=para>
Once we've put a value in a <tt class=literal>Hashtable</tt>, 
we can take it back out with the <tt class=literal>remove()</tt> method, 
again using the key to access the value: 

<div class=programlisting>
<p>
<pre>
dates.remove("christmas"); 
</PRE>
</DIV>

<p class=para>
We can test for the existence of a key with <tt class=literal>containsKey()</tt>: 

<div class=programlisting>
<p>
<pre>
if ( dates.containsKey( "groundhog" ) ) {    // yes 
</PRE>
</DIV>

<p class=para>
Just like with a <tt class=literal>Vector</tt>, we're dealing 
with a set of items. Actually, we're dealing with two sets: keys 
and values. The <tt class=literal>Hashtable</tt> class has two methods, 
<tt class=literal>keys()</tt> and <tt class=literal>elements()</tt>, 
for getting at these sets. The <tt class=literal>keys()</tt> method 
returns an <tt class=literal>Enumeration</tt> of the keys for all of 
the elements in the <tt class=literal>Hashtable</tt>. We can use this 
<tt class=literal>Enumeration</tt> to loop through all of the keys: 

<div class=programlisting>
<p>
<pre>
for (Enumeration e = dates.keys(); e.hasMoreElements(); ) { 
    String key = (String)e.nextElement(); 
    ... 
} 
</PRE>
</DIV>

<p class=para>
Similarly, <tt class=literal>elements()</tt> provides an
<tt class=literal>Enumeration</tt> of the elements themselves.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="EXJ-CH-7-SECT-4.3.1">Hashcodes and key values</A></h4>

<p class=para>
<a name="CH07.HASH"></A>If you've used a hashtable before, you've probably guessed
that there's more going on behind the scenes than I've let
on so far. An element in a hashtable is not associated with its key by
identity, but by something called a <i class=emphasis>hashcode</I>.
Every object in Java has an identifying hashcode value determined by
its <tt class=literal>hashCode()</tt> method, which is inherited from the
<tt class=literal>Object</tt> class. When you store an element in a
hashtable, the hashcode of the key object registers the element
internally. Later, when you retrieve the item, that same hashcode
looks it up efficiently.

<p class=para>
A hashcode is usually a random-looking integer value based on 
the contents of an object, so it's different for different instances of 
a class. Two objects that have different hashcodes serve as unique 
keys in a hashtable; each object can reference a different stored object. 
Two objects that have the same hashcode value, on the other hand, appear 
to a hashtable as the same key. They can't coexist as keys to different 
objects in the hashtable. 

<p class=para>
Generally, we want our object instances to have unique hash
codes, so we can put arbitrary items in a hashtable and index
them with arbitrary keys. The default <tt class=literal>hashCode()</tt>
method in the <tt class=literal>Object</tt> class simply assigns each
object instance a unique number to be used as a hashcode. If a class
does not override this method, each instance of the class will have a
unique hashcode. This is sufficient for most objects.

<p class=para>
However, it's also useful to allow equivalent objects to serve as equivalent 
keys. <tt class=literal>String</tt> objects provide a good example of 
this case. Although Java does its best to consolidate them, a literal string 
that appears multiple times in Java source code is often represented by 
different <tt class=literal>String</tt> objects at run-time. If each 
of these <tt class=literal>String</tt> objects has a different hash 
code, even though the literal value is the same, we could not use strings 
as keys in a hashtable, like we did the in above examples. 

<p class=para>
The solution is to ensure that equivalent
<tt class=literal>String</tt> objects return the same hashcode value so
that they can act as equivalent keys. The <tt class=literal>String</tt>
class overrides the default <tt class=literal>hashCode()</tt> method so
that equivalent <tt class=literal>String</tt> objects return the same hash
code, while different <tt class=literal>String</tt> objects have unique
hashcodes. This is possible because <tt class=literal>String</tt> objects
are immutable; the contents can't change, so neither can the hashcode.

<p class=para>
A few other classes in the Java API also
override the default <tt class=literal>hashCode()</tt> method in order to
provide equivalent hashcodes for equivalent objects. For example,
each of the primitive wrapper classes provides a
<tt class=literal>hashCode()</tt> method for this purpose. Other objects
likely to be used as hashtable keys, such as <tt class=literal>Color</tt>,
<tt class=literal>Date</tt>, <tt class=literal>File</tt>, and
<tt class=literal>URL</tt>, also implement their own
<tt class=literal>hashCode()</tt>methods.

<p class=para>
So now maybe you're wondering when you need to override
the default <tt class=literal>hashCode()</tt> method in your objects. If
you're creating a class to use for keys in a hashtable, think
about whether the class supports the idea of "equivalent
objects."  If so, you should implement a
<tt class=literal>hashCode()</tt> method that returns the same hashcode
value for equivalent objects.

<p class=para>
To accomplish this, you need to define the hashcode of an
object to be some suitably complex and arbitrary function of the
contents of that object. The only criterion for the function is that
it should be almost certain to provide different values for different
contents of the object. Because the capacity of an integer is limited,
hashcode values are not guaranteed to be unique. This limitation is
not normally a problem though, as there are
2^32 possible hashcodes to choose from. The
more sensitive the hashcode function is to small differences in the
contents the better. A hashtable works most efficiently when the
hashcode values are as randomly and evenly distributed as possible. As
an example, you could produce a hashcode for a
<tt class=literal>String</tt> object by adding the character values at
each position in the string and multiplying the result by some number,
producing a large random-looking integer.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-7-SECT-4.4">java.util.Dictionary</A></h3>

<p class=para>
<tt class=literal>java.util.Dictionary</tt> is the
<tt class=literal>abstract</tt> superclass of
<tt class=literal>Hashtable</tt>. It lays out the basic
<tt class=literal>get()</tt>, <tt class=literal>put()</tt>, and
<tt class=literal>remove()</tt> functionality for dictionary-style
collections. You could derive other types of dictionaries from this
class. For example, you could implement a dictionary with a different
storage format, such as a binary tree.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch07_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Dates</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Properties</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
