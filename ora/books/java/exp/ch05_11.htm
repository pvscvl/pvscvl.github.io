<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 5] 5.11 Reflection</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 18:53:10 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_10.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 5<br>Objects in Java</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch06_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch05-SECT1-AUTOID.2">5.11 Reflection</A></h2>

<p class=para>
In this section we'll take a look at the Java reflection API,
supported by the classes in the
<tt class=literal>java.lang.reflect</tt> package.  As its 
name suggests, reflection is the ability for a programming language to
examine itself.  The Java reflection API lets Java code look at an
object (more precisely, the class of the object) and determine its
structure.  Within the limits imposed by the security manager, you can
find out what constructors, methods, fields a class has, and their
attributes.  You can even change the value of fields, dynamically
invoke methods, and construct new objects, much as if Java had
primitive pointers to variables and methods.

<p class=para>
We don't have room here to cover the full reflection API.  As you
might expect, 
the <tt class=literal>reflect</tt> package is complex and rich in
details. But reflection has been designed so that you can do a lot
with relatively little effort; 20% of the effort will give you 80% of
the fun.

<p class=para>
The reflection API is used by Java Beans to determine the capabilities
of objects at runtime.  It's also used at a lower level by object
serialization (see Chapter 8) to tear apart and build objects for
transport over streams or into persistent storage.  Obviously, the
power to pick apart objects and see their internals must be zealously
watched by the security manager. Your code is not allowed to do
anything with the reflection API that it couldn't do with static Java
code. In short, reflection is a powerful tool, but it isn't a
loophole. An object can't use it to find out about data fields that it
wouldn't normally be able to access (for example, another object's
private fields), and you can't use it to modify any data
inappropriately.

<p class=para>
The three primary features of a class are its fields (variables), 
its methods, and its constructors.  For purposes of describing or accessing an 
object, these three features are represented by the classes in the reflection
API: the <tt class=literal>java.lang.reflect.Field</tt>,
<tt class=literal>java.lang.reflect.Method</tt>, and
<tt class=literal>java.lang.reflect.Constructor</tt> classes
represent the fields, methods, and constructors of a class.
To get one of these objects, we use the class's
<tt class=literal>Class</tt>.

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<td align="left">Field[] getFields()</TD>
<td align="left">

<p class=para>
Get the public variables, including inherited ones.</TD>
</TR>
<tr class=row>
<td align="left">Field getField(String name)</TD>
<td align="left">

<p class=para>
Get the specified public variable, which may be inherited.</TD>
</TR>
<tr class=row>
<td align="left">Field[] getDeclaredFields()</TD>
<td align="left">

<p class=para>
Get all, public and nonpublic,
variables declared in this class (not including those inherited from 
superclasses).</TD>
</TR>
<tr class=row>
<td align="left">Field getDeclaredField(String name)</TD>
<td align="left">

<p class=para>
Get the specified
variable, public or nonpublic, declared in this class (inherited 
variables not considered).</TD>
</TR>
<tr class=row>
<td align="left">Method[] getMethods()</TD>
<td align="left">

<p class=para>
Get the public methods, including inherited ones.</TD>
</TR>
<tr class=row>
<td align="left">Method getMethod(String name, Class [] argumentTypes)</TD>
<td align="left">

<p class=para>
Get the specified public method, who's arguments match the types listed in
<i class=emphasis>argumentTypes</I>.  The method may be inherited.</TD>
</TR>
<tr class=row>
<td align="left">Method[] getDeclaredMethods()</TD>
<td align="left">

<p class=para>
Get all, public and
nonpublic, methods declared in this class (not including those inherited
from superclasses).</TD>
</TR>
<tr class=row>
<td align="left">Method getDeclaredMethod(String name, Class[] argumentTypes)</TD>
<td align="left">

<p class=para>
Get the specified method, public or nonpublic, who's arguments match the 
types listed in <i class=emphasis>argumentTypes</I>, and which is declared in this class 
(inherited methods not considered).</TD>
</TR>
<tr class=row>
<td align="left">Constructor[] getConstructors() </TD>
<td align="left">

<p class=para>
Get the public constructors of this class.</TD>
</TR>
<tr class=row>
<td align="left">Constructor getConstructor(Class[] argumentTypes)</TD>
<td align="left">

<p class=para>
Get the specified public constructor of this class, who's arguments match the
types listed in <i class=emphasis>argumentTypes</I>.</TD>
</TR>
<tr class=row>
<td align="left">Constructor[] getDeclaredConstructors() </TD>
<td align="left">

<p class=para>
Get all, public and nonpublic, constructors of this class.</TD>
</TR>
<tr class=row>
<td align="left">Constructor getDeclaredConstructor(Class[] argumentTypes)</TD>
<td align="left">

<p class=para>
Get the specified constructor, public or nonpublic, who's arguments match
the types listed in <i class=emphasis>argumentTypes</I>.</TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
The table above shows that the <tt class=literal>Class</tt> class provides
two pairs of methods for getting at each type of feature.  One pair
allows access to a class's public features (including those inherited
from its superclases), while the other pair allows access to any
public or nonpublic item declared within the class (but not features
that are inherited), subject to security considerations.  For example,
<tt class=literal>getFields()</tt> returns an array of
<tt class=literal>Field</tt> objects representing all of a class's public
variables, including those it
inherits. <tt class=literal>getDeclaredFields()</tt> returns an array
representing all the variables declared in the class, regardless of
their access modifiers (not including variables the security manager
won't let you see), but not including inherited variables.  (For
constructors, the distinction between "all constructors" and "declared
constructors" is meaningful, so <tt class=literal>getConstructors()</tt>
and <tt class=literal>getDeclaredConstructors()</tt> differ only in that
the former returns public constructors, while the latter returns
all the class's constructors.)  Each pair of methods includes a method
for listing all of the items at once (for example,
<tt class=literal>getFields()</tt>), and a method for looking up a
particular item by name and (for methods and constructors) signature
(for example, <tt class=literal>getField()</tt>, which takes the field
name as an argument).

<p class=para>
As a quick example, we'll show how easy it is to list all of the 
public methods of the <tt class=literal>java.util.Calendar</tt>
class: 

<div class=programlisting>
<p>
<pre>
Method [] methods = Calendar.class.getMethods();
for (int i=0; i &lt; methods.length; i++)
    System.out.println( methods[i] );
</PRE>
</DIV>

<p class=para>
Here we have used the <tt class=literal>.class</tt> notation to
get a reference the <tt class=literal>Class</tt> of
<tt class=literal>Calendar</tt>.  Remember the discussion of the
<tt class=literal>Class</tt> class--the reflection methods don't
belong to the <tt class=literal>Calendar</tt> class itself; they
belong to the <tt class=literal>java.lang.Class</tt> object that
describes the <tt class=literal>Calendar</tt> class.  If we
wanted to start from an instance of
<tt class=literal>Calendar</tt> (or, say, an unknown object) we
could have used the <tt class=literal>getClass()</tt> method of
the object instead:

<div class=programlisting>
<p>
<pre>
Method [] methods = myUnknownObject.getClass().getMethods();
</PRE>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch05-SECT2-AUTOID.5">Security</A></h3>

<p class=para>
Access to the reflection API is governed by a security manager. A
fully trusted application has access to all of the above
functionality--it can gain access to members of classes at the level
of restriction normally granted code within its scope.  There is
currently no "special" access granted by the reflection API.  It is
possible that in the future, the full power of the reflection API will
be available to completely trusted code such as debuggers; right now,
user code can only see what it could have seen at compile-time.
Untrusted code (for example, an unsigned applet) has the normal level
of access to classes loaded from its own origin (classes sharing its
classloader), but can only rely on the ability to access the public
members of public classes coming from the rest of the system.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch05-SECT2-AUTOID.6">Accessing Fields</A></h3>

<p class=para>
The class <tt class=literal>java.lang.reflect.Field</tt> is used
to represent static variables and instance variables.
<tt class=literal>Field</tt> has a full set of accessor methods
for all of the base types (for example,
<tt class=literal>getInt()</tt> and
<tt class=literal>setInt()</tt>,
<tt class=literal>getBoolean()</tt> and
<tt class=literal>setBoolean()</tt>), and
<tt class=literal>get()</tt> and
<tt class=literal>set()</tt> methods for accessing members that
are object references.

<p class=para>
For example, given the following class:

<div class=programlisting>
<p>
<pre>
class BankAccount {
    public int balance;
}
</PRE>
</DIV>

<p class=para>
With the reflection API we can read and modify the value of the public
integer field <tt class=literal>balance</tt>:

<div class=programlisting>
<p>
<pre>
BankAccount myBankAccount = ...;
...
try {
    Field balanceField = BankAccount.class.getField("balance");
    int balance = balanceField.getInt( myBankAccount );  // read it
    balanceField.setInt( myBankAccount, 42 );            // change it
} catch ( NoSuchFieldException e ) { 
    // There is no "balance" field in this class
} catch ( IllegalAccessException e2) {
    // We don't have permission to access the field.
}
</PRE>
</DIV>

<p class=para>
 
The various methods of <tt class=literal>Field</tt> take a
reference to the particular object instance that we want to access.
In the code above, the <tt class=literal>getField()</tt> method returns a
<tt class=literal>Field</tt> object that represents the
<tt class=literal>balance</tt> of the <tt class=literal>BankAccount</tt>
class; this object doesn't refer to any specific
<tt class=literal>BankAccount</tt>. Therefore, to read or modify any
specific <tt class=literal>BankAccount</tt>, we call
<tt class=literal>getInt()</tt> and <tt class=literal>setInt()</tt> with a
reference to <tt class=literal>myBankAccount</tt>, which is the account we
want to work with.  As you can see, an exception occurs if we ask for
access to a field that doesn't exist, or if we don't have the proper
permission to read or write the field.  If we make
<tt class=literal>balance</tt> a <tt class=literal>private</tt> field, we can
still look up the <tt class=literal>Field</tt> object that describes it,
but we won't be able to read or write its value.

<p class=para>
Therefore, we aren't doing anything that we couldn't have done with
static code at compile-time; as long as
<tt class=literal>balance</tt> is a
<tt class=literal>public</tt> member of a class that we can
access, we can write code to read and modify its value. What's
important is that we're accessing <tt class=literal>balance</tt>
at run-time, and could use this technique to examine the
<tt class=literal>balance</tt> field in a class that was
dynamically loaded.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch05-SECT2-AUTOID.7">Accessing Methods</A></h3>

<p class=para>
The class <tt class=literal>java.lang.reflect.Method</tt>
represents a static or instance method.  Subject to the normal
security rules, a <tt class=literal>Method</tt> object's
<tt class=literal>invoke()</tt> method can be used to call the
underlying object's method with specified arguments.  Yes, Java has
something like a method pointer!

<p class=para>
As an example, we'll write a Java application called
<tt class=literal>invoke</tt> that 
takes as command line arguments the name of a Java class and the name of
a method to invoke.  For simplicity, we'll assume that the method is
static and takes no arguments:

<div class=programlisting>
<p>
<pre>
import java.lang.reflect.*;
class invoke {
    public static void main( String [] args ) {
        try {
            Class c = Class.forName( args[0] );
            Method m = c.getMethod( args[1], new Class [] { } );
            Object ret =  m.invoke( null, null );
            System.out.println( "Invoked static method: " + args[1] + 
                " of class: " + args[0] + " with no args\nResults: " + ret );
        } catch ( ClassNotFoundException e ) {
            // Class.forName() can't find the class
        } catch ( NoSuchMethodException e2 ) {
            // that method doesn't exist
        } catch ( IllegalAccessException e3 ) {
            // we don't have permission to invoke that method
        } catch ( InvocationTargetException e4 ) {
            // an exception ocurred while invoking that method
            System.out.println("Method threw an: " + e4.getTargetException() );
        }
    }
}
</PRE>
</DIV>

<p class=para>
We can run <tt class=literal>invoke</tt> to fetch the value of
the system clock: 

<div class=screen>
<p>
<pre>
% java invoke java.lang.System currentTimeMillis
Invoked static method: currentTimeMillis of class: java.lang.System
with no args 
Results: 861129235818
</PRE>
</DIV>

<p class=para>
Cool, eh?  Maybe you'll consider this the first step towards writing a
full blown scripting language for Java, in Java.  If you do, please
let me know.

<p class=para>
Turning to the code, our first task is to look up the specified
<tt class=literal>Class</tt> by name. To do so, we call the
<tt class=literal>forName()</tt> method with the name of the desired class
(the first command line argument).  We then ask for the specified
method by its name. <tt class=literal>getMethod()</tt> has two arguments:
the first is the method name (the second command line argument) and
the second is an array of <tt class=literal>Class</tt> objects that
specifies the method's signature. (Remember that any method may be
overloaded; you must specify the signature to make it clear which
version you want.) Since our simple program only calls methods with no
arguments, we create an anonymous empty array of
<tt class=literal>Class</tt> objects.  Had we wanted to invoke a method
that takes arguments, we would have passed an array of the classes of
their respective types, in the proper order.  (An
<tt class=literal>IllegalArgumentException</tt> can be thrown at run-time
if they are wrong).  The classes of primitive types can be found in
the static <tt class=literal>TYPE</tt> fields of their respective
wrappers; for example, use <tt class=literal>Integer.TYPE</tt> for the
class of a primitive integer.

<p class=para>
Once we have the <tt class=literal>Method</tt> object, we call its
<tt class=literal>invoke()</tt> method. This calls our target method, and
returns the result as an <tt class=literal>Object</tt>. (To do anything
nontrivial with this object, you have to cast it to something more
specific. Presumably, since you're calling the method, you know what
kind of object to expect.)  If the returned value is a primitive type
like <tt class=literal>int</tt> or <tt class=literal>boolean</tt>, it will be
wrapped in the standard wrapper class for its type. (Wrappers for
primitive types are discussed in <a href="ch07_01.htm">Chapter 7, <i>Basic Utility Classes</i></A>.) If the method returns
<tt class=literal>void</tt>, <tt class=literal>invoke()</tt> returns a
<tt class=literal>Void</tt> object.  (This is why a wrapper class is
needed for <tt class=literal>void</tt>; we need a class to represent
<tt class=literal>void</tt> return values.)

<p class=para>
The first argument to <tt class=literal>invoke()</tt> is the
object on which we would like to invoke the method. If the method is
static, there is no object, so we set the first argument to
<tt class=literal>null</tt>. That's the case in our example.  The
second argument is an array of objects to be passed as arguments to
the methods.  The types of these should match the types specified in
the <tt class=literal>getMethod()</tt> call.  Because we're
calling a method with no arguments, we can pass
<tt class=literal>null</tt> for the second argument to
<tt class=literal>invoke()</tt>. As with the return value, the
types of primitive arguments are expected to be wrapped in wrapper
classes.  The reflection API automatically unpacks them for the method
invocation.

<p class=para>
The exceptions shown in the code above occur if we cannot find or
don't have permission to access the method.  Additionally, an
<tt class=literal>InvocationTargetException</tt> occurs if the
method being invoked throws some kind of exception itself.  You can
find out what it threw by calling the
<tt class=literal>getTargetException()</tt> method of
<tt class=literal>InvocationTargetException</tt>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch05-SECT2-AUTOID.8">Accessing Constructors</A></h3>

<p class=para>
 
The <tt class=literal>java.lang.reflect.Constructor</tt> class
represents an object constructor.  Subject to the security manager,
you can use it to create a new instance of an object, with arguments.
Although you can load new classes dynamically and create instances of
them with <tt class=literal>Class.forName()</tt> and
<tt class=literal>Class.newInstance()</tt>, you cannot specify
arguments with those methods.

<p class=para>
Here we'll create an instance of
<tt class=literal>java.util.Date</tt>, passing a string argument
to the constructor:

<div class=programlisting>
<p>
<pre>
try {
    Constructor c = Date.class.getConstructor( new Class [] { String.class } );
    Object o = c.newInstance( new Object [] { "Jan 1, 1997" } );
    Date d = (Date)o;
    System.out.println(d);
} catch ( NoSuchMethodException e ) {
        // getConstructor() couldn't find the constructor we described
} catch ( InstantiationException e2 ) {
    // the class is abstract 
} catch ( IllegalAccessException e3 ) {
    // we don't have permission to create an instance
} catch ( InvocationTargetException e4 ) {
    // the construct threw an exception
}
</PRE>
</DIV>

<p class=para>
The story is much the same as with a method invocation; after all, a
constructor is really no more than a method with some strange
properties.  We look up the appropriate constructor for our
<tt class=literal>Date</tt> class--the one that takes a single
<tt class=literal>String</tt> as its argument--by passing
<tt class=literal>getConstructor()</tt> an array containing the
<tt class=literal>String</tt> class as its only element. (If the
constructor required more arguments, we would put additional objects
in the array, representing the classes of each argument.)  We can then
invoke <tt class=literal>newInstance()</tt>, passing it a
corresponding array of argument objects.  Again, to pass primitive
types we would wrap them in their wrapper types first.  Finally, we
cast the resulting object to a <tt class=literal>Date</tt>, and
print it.

<p class=para>
The same exceptions seen in the previous example apply here, including
the possible <tt class=literal>IllegalArgumentException</tt>. In
addition, <tt class=literal>newInstance()</tt> throws an
<tt class=literal>InstantiationException</tt> if the class is
abstract and cannot be instantiated.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="ch05-SECT3-AUTOID.8">What about arrays?</A></h4>

<p class=para>
The reflection API allows you to create and inspect array of base
types using the <tt class=literal>java.lang.reflect.Array</tt>
class.  The process is much the same as with the other classes.  For
more information, look in a language reference.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="ch05-SECT3-AUTOID.9">What is Reflection good for?</A></h4>

<p class=para>
Well, we've already said that reflection is used by the serialization
process (<a href="ch08_01.htm">Chapter 8, <i>Input/Output Facilities</i></A>), and that it is used by graphical
development environments, like Borland's JBuilder and Symantec's
Visual Cafe.  But these are pretty much behind the scenes
applications. What can reflection do for the average Java programmer?

<p class=para>
First, it's there when you really need a method pointer. However, in
most situations where a method pointer is convenient, there are other
solutions to try; writing an anonymous adapter class is likely to be
clearer and more efficient.  Reflection would let you write a generic
adapter class; that is, an adapter that doesn't know in advance what
method to call.  The adapter's client could pass a method name to the
adapter as a string; the adapter would then use reflection to find the
given Method in its client. 

<p class=para>
Even more generally, you can use reflection in any situation where you
need to call methods that you don't know about in advance. It's hard
to think of good examples--but then, that's the beauty of Java: it
opens possibilities for new kinds of applications. Perhaps you'll need
to write some kind of self-extending program, that loads new modules
dynamically and uses reflection to find out how to use them. In short,
don't relegate reflection to the dusty toolbox of tricks that are only
useful for experts. With some experimentation, you'll find that
reflection greatly adds to Java's capabilities. 

</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_10.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch06_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>The Object and Class Classes</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Threads</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
