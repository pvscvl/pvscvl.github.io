<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 11] 11.4 Menus and Choices</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 19:01:08 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11<br>Using and Creating GUI Components</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch11_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="EXJ-CH-11-SECT-5">11.4 Menus and Choices</A></h2>

<p class=para>
<a name="CH10.MENU1"></A> <a name="CH10.MENU2"></A><a name="CH10.MENU3"></A>
 
A <tt class=literal>Menu</tt> is a standard, pull-down menu with a fixed
name. Menus can hold other menus as submenu items, letting you
implement complex menu structures. Menus come with several
restrictions; they must be attached to a menu bar, and the menu bar
can be attached only to a <tt class=literal>Frame</tt> (or another
menu). You can't stick a <tt class=literal>Menu</tt> at an arbitrary
position within a container. A top-level <tt class=literal>Menu</tt> has a
name that is always visible in the menu bar. (An important exception to
these rules is the <tt class=literal>PopupMenu</tt>, which we'll
describe in the next section.)

<p class=para>
A <tt class=literal>Choice</tt> is an item that lets you choose
from a selection of alternatives. If this sounds like a menu,
you're right. Choices are free-spirited relatives of menus. A
<tt class=literal>Choice</tt> item can be positioned anywhere, in any kind
of container. It looks something like a button, with the current
selection as its label. When you press the mouse button on a choice,
it unfurls to show possible selections.

<p class=para>
Both menus and choices send action events when an item is
selected. We'll create a little example that illustrates choices
and menus and demonstrates how to work with the events they
generate. Since a <tt class=literal>Menu</tt> has to be placed in the menu
bar of a <tt class=literal>Frame</tt>, we'll take this opportunity
to show off a <tt class=literal>Frame</tt> object as
well. <tt class=literal>DinnerMenu</tt> pops up a window containing a
<b>Food</b> choice and a menu of <b>Utensils</b>, as shown in <a href="ch11_02.htm">Figure 11.2</A>. <tt class=literal>DinnerMenu</tt> prints a
message for each selection; choosing <b>Quit</b> from the menu removes the window. Give it a
try.

<div class=figure>
<h4 class=figure><a class="TITLE" name="EXJ-CH-11-FIG-5">Figure 11.5: The DinnerMenu applet</A></h4>


<p>
<img align=middle src="figs/je1105.gif" alt="[Graphic: Figure 11-5]" width=503 height=223 border=0>

</DIV>

<div class=screen>
<p>
<pre>
import java.awt.*;
import java.awt.event.*;
import java.util.EventListener;
public class DinnerMenu extends java.applet.Applet { 
    public void init() {
        new DinnerFrame().show();
    }
}
class DinnerFrame extends Frame implements ActionListener, ItemListener {
    DinnerFrame() {
        setTitle("Dinner Helper");
        setLayout( new FlowLayout() );
        add( new Label("Food") );
        Choice c = new Choice ();
        c.addItem("Chinese");
        c.addItem("Italian");
        c.addItem("American");
        c.addItemListener( this );
        add( c );
        Menu menu = new Menu("Utensils");
        menu.add( makeMenuItem("Fork") );
        menu.add( makeMenuItem("Knife") );
        menu.add( makeMenuItem("Spoon") );
        Menu subMenu = new Menu("Hybrid");
        subMenu.add( makeMenuItem("Spork") );
        subMenu.add( makeMenuItem("Spife") );
        subMenu.add( makeMenuItem("Knork") );
        menu.add( subMenu);
        menu.add( makeMenuItem("Quit") );
        MenuBar menuBar = new MenuBar();
        menuBar.add(menu);
        setMenuBar(menuBar);
        pack();
    }
    public void itemStateChanged(ItemEvent e) {
        System.out.println( "Choice set to: " + e.getItem() );
    }
    public void actionPerformed(ActionEvent e) {
        String command = e.getActionCommand();
        if ( command.equals( "Quit" ) )
            dispose();
        else
            System.out.println( "Menu selected: " + e.getActionCommand() );
    }
    private MenuItem makeMenuItem( String name ) {
        MenuItem m = new MenuItem( name );
        m.addActionListener( this );
        return m;
    }
}
</PRE>
</DIV>

<p class=para>
Yes, I know. <b>Quit</b> doesn't belong
in the <b>Utensils</b> menu. If it's
driving you crazy, you can go back and add a
<b>File</b> menu as an exercise when
we're through.

<p class=para>
So what do we have? Well, we've created a new kind of
component called <tt class=literal>DinnerFrame</tt> that implements our
palette of dinner options. We do our set-up work in the
<tt class=literal>DinnerFrame</tt> constructor.
<tt class=literal>DinnerFrame</tt> sets the name on its titlebar with
<tt class=literal>setTitle()</tt>. 
The constructor also handles a few
other miscellaneous details, such as setting the layout manager that
places things side by side in the display area and later, resizing
itself by calling <tt class=literal>pack()</tt>.

<p class=para>
We make an instance of <tt class=literal>Choice</tt> and add three
options to it with its <tt class=literal>addItem()</tt>
method. <tt class=literal>Choice</tt> options are simple
<tt class=literal>String</tt> objects. When one is picked, we get an
action event with an argument that specifies the selected option
name. We can also examine the currently selected item at any time with
the <tt class=literal>Choice</tt>'s
<tt class=literal>getSelectedItem()</tt> method. A
<tt class=literal>Choice</tt> generates an
<tt class=literal>ItemEvent</tt> when a user makes a selection,
so we register the <tt class=literal>DinnerFrame</tt> as an
<tt class=literal>ItemEvent</tt> listener by calling
<tt class=literal>addItemListener()</tt>. (This means we must
also implement the <tt class=literal>ItemListener</tt> interface
and provide an <tt class=literal>itemStateChanged()</tt> method.)
As with any component, we
display the <tt class=literal>Choice</tt> by adding it to our
applet's layout with <tt class=literal>add()</tt>.

<p class=para>
The <tt class=literal>Menu</tt> has a few more moving parts. A
<tt class=literal>Menu</tt> holds
<tt class=literal>MenuItem</tt> objects. A 
simple <tt class=literal>MenuItem</tt> just has a
<tt class=literal>String</tt> as a label. It sends this as an argument in
an action event when it's selected. We can set its font with
<tt class=literal>setFont()</tt>. We can also turn it on or off with
<tt class=literal>setEnabled()</tt>; this
method controls whether the <tt class=literal>MenuItem</tt> is
available or 
not. A <tt class=literal>Menu</tt> object is itself a kind of
<tt class=literal>MenuItem</tt>, and this allows us to use a menu as a
submenu in another menu.

<p class=para>
We construct the <tt class=literal>Menu</tt> with its name and call
its <tt class=literal>add()</tt> method to give it three new 
<tt class=literal>MenuItem</tt> objects. To create the menu
items, we call our own <tt class=literal>makeMenuItem()</tt>
helper method. Next, we repeat this process to
make a new <tt class=literal>Menu</tt> object, <tt class=literal>subMenu</tt>,
and add it as the fourth option. Its name appears as the menu item
along with a little arrow, indicating it's a submenu. When it's
selected, the <tt class=literal>subMenu</tt> menu pops up to the side and
we can select from it. Finally, we add one last simple menu item, to
serve as a <b>Quit</b> option.

<p class=para>
We use a private method, <tt class=literal>makeMenuItem()</tt>,
to create our menu items for us. This method is convenient because,
with menus, every item generates its own events. Therefore, we must
register an <tt class=literal>ActionListener</tt> for every
selection on the menu. Rather than write lots of code, we use a helper
method to register our
<tt class=literal>DinnerFrame</tt>
(<tt class=literal>this</tt>) as the listener for every item. It
should be no 
surprise then, that <tt class=literal>DinnerFrame</tt> must
implement <tt class=literal>ActionListener</tt> and provide an
<tt class=literal>actionPerformed()</tt> method. 

<p class=para>
Now we have the menu; to use it, we have to insert it in a menu bar. A <tt class=literal>MenuBar</tt> holds
<tt class=literal>Menu</tt> objects. We create a
<tt class=literal>MenuBar</tt> and set it as the menu bar for
<tt class=literal>DinnerFrame</tt> with the
<tt class=literal>Frame.setMenuBar()</tt> method. We can then add our menu
to it with <tt class=literal>menuBar.add()</tt>:

<div class=screen>
<p>
<pre>
MenuBar menuBar = new MenuBar();
menuBar.add(menu);
setMenuBar(menuBar);
</PRE>
</DIV>

<p class=para>
Suppose our applet didn't have its own frame? Where could we put
our menu? Ideally, you'd like the applet to be able
to add a menu to the top-level menu bar of the Web browser or applet
viewer. Unfortunately, as of Java 1.1, there is no
standard for doing so. (There are obvious security considerations in
allowing an applet to modify its viewer.) There has been talk of
adding this ability as part of Java Beans, but so far, it's not
possible. 

<p class=para>
One final note about the <tt class=literal>DinnerMenu</tt>
example. As we said in the previous chapter, any
time you use a <tt class=literal>Frame</tt>, and thus create a new
top-level window, you should add code to destroy your frame whenever
the user closes the window with his native window manager. To do so,
you register your frame as a
<tt class=literal>WindowListener</tt>, implement the
<tt class=literal>WindowListener</tt> interface, and provide a
<tt class=literal>windowClosing()</tt> method that calls
<tt class=literal>dispose()</tt>.  
By calling <tt class=literal>dispose()</tt>, we indicate the window
is no longer needed, so that it can release its window-system resources.

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch11_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Lists</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>PopupMenus</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
