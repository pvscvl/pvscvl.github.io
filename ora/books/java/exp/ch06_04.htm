<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 6] 6.4 Scheduling and Priority</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 18:54:04 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 6<br>Threads</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch07_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="EXJ-CH-6-SECT-4">6.4 Scheduling and Priority</A></h2>

<p class=para>
<a name="CH06.PRIOR1"></A><a name="CH06.PRIOR2"></A><a name="CH06.PRIOR3"></A>Java makes certain guarantees as to how its threads are
scheduled. Every thread has a priority value. If, at any time, a
thread of a higher priority than the current thread becomes runnable,
it preempts the lower priority thread and begins executing. By
default, threads at the same priority are scheduled round robin, which
means once a thread starts to run, it continues until it
does one of the following:

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>Sleeps</I><br>
<dd>

<p class=para>
Calls <tt class=literal> Thread.sleep() </tt> or <tt class=literal> wait()</tt>

<p>
<dt class=varlistentry><i class=emphasis>Waits for lock</I><br>
<dd>

<p class=para>
Waits for a lock in order to run a synchronized method

<p>
<dt class=varlistentry><i class=emphasis>Blocks on I/O</I><br>
<dd>

<p class=para>
Blocks, for example, in a <tt class=literal>xread()</tt> or an
<tt class=literal>accept()</tt> call

<p>
<dt class=varlistentry><i class=emphasis>Explicitly yields control</I><br>
<dd>

<p class=para>
Calls <tt class=literal>yield()</tt>

<p>
<dt class=varlistentry><i class=emphasis>Terminates</I><br>
<dd>

<p class=para>
Completes its target method or is terminated by a
<tt class=literal>stop()</tt> call</DL>
<p class=para>
This situation looks something like what's shown in <a href="#EXJ-CH-6-FIG-4">Figure 6.4</A>.

<div class=figure>
<h4 class=figure><a class="TITLE" name="EXJ-CH-6-FIG-4">Figure 6.4: Priority preemptive, round robin scheduling</A></h4>


<p>
<img align=middle src="figs/je0604.gif" alt="[Graphic: Figure 6-4]" width=503 height=193 border=0>

</DIV>

<p class=para>
Java leaves certain aspects of scheduling up to the
implementation.[2]
The main point here is that some, but not all, implementations 
of Java use time slicing on threads of the same priority.[3]
 In a time-sliced system, thread processing is chopped up, so that each 
thread runs for a short period of time before the context is switched to 
the next thread, as shown in <a href="#EXJ-CH-6-FIG-5">Figure 6.5</A>.

<blockquote class=footnote>
<p class=para>[2] 
This implementation-dependent aspect of Java isn't a big deal,
since it doesn't hurt for an implementation to add time slicing
on top of the default round-robin scheduling. It's actually not
hard to create a time-slicing effect by simply having a high-priority
thread sleeping for a specified time interval. Every time it wakes up,
it interrupts a lower-priority thread and causes processing to shift
round robin to the next thread.

<p class=para>[3] 
As of Java Release 1.0, Sun's Java Interpreter for the Windows 95 and
Windows NT platforms uses time slicing, as does the Netscape Navigator
Java environment. Sun's Java 1.0 for the Solaris
UNIX platforms doesn't.
</blockquote>
<p class=para>
Higher priority threads still preempt lower priority threads 
in this scheme. The addition of time slicing mixes up the processing 
among threads of the same priority; on a multiprocessor machine, threads 
may even be run simultaneously. Unfortunately, this feature can lead to
differences in your application's behavior.

<div class=figure>
<h4 class=figure><a class="TITLE" name="EXJ-CH-6-FIG-5">Figure 6.5: Priority preemptive, time-sliced scheduling</A></h4>


<p>
<img align=middle src="figs/je0605.gif" alt="[Graphic: Figure 6-5]" width=503 height=193 border=0>

</DIV>

<p class=para>
Since Java doesn't guarantee time slicing, you shouldn't write code
that relies on this type of scheduling; any software you write needs
to function under the default round-robin scheduling. But if
you're wondering what your particular flavor of Java does, try
the following experiment:

<div class=programlisting>
<p>
<pre>
class Thready { 
    public static void main( String args [] ) { 
        new MyThread("Foo").start(); 
        new MyThread("Bar").start(); 
    } 
} 
 
class MyThread extends Thread { 
    String message; 
 
    MyThread ( String message ) { 
        this.message = message; 
    } 
 
    public void run() { 
        while ( true )  
            System.out.println( message ); 
    } 
} 
</PRE>
</DIV>

<p class=para>
The <tt class=literal>Thready</tt> class starts up two
<tt class=literal>MyThread</tt> objects. <tt class=literal>Thready</tt> is a
thread that goes into a hard loop (very bad form) and prints its
message. Since we don't specify a priority for either thread,
they both inherit the priority of their creator, so they have the same
priority.  When you run this example, you will see how your Java
implementation does it scheduling. Under a round-robin scheme, only
"Foo" should be printed; "Bar" never
appears. In a time-slicing implementation, you should occasionally see the
"Foo" and "Bar" messages alternate.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-6-SECT-4.1">Priorities</A></h3>

<p class=para>
Now let's change the priority of the second thread:

<div class=programlisting>
<p>
<pre>
class Thready { 
    public static void main( String args [] ) { 
        new MyThread("Foo").start(); 
        Thread bar = new MyThread("Bar"); 
        bar.setPriority( Thread.NORM_PRIORITY + 1 ); 
        bar.start(); 
    } 
} 
</PRE>
</DIV>

<p class=para>
As you might expect, this changes how our example behaves. Now you may
see a few "Foo" messages, but "Bar" should
quickly take over and not relinquish control, regardless of the
scheduling policy.

<p class=para>
Here we have used the <tt class=literal>setPriority()</tt> method of the
<tt class=literal>Thread</tt> class to adjust our thread's
priority. The <tt class=literal>Thread</tt> class defines three standard
priority values, as shown in <a href="#EXJ-CH-6-TAB-1">Table 6.1</A>.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="EXJ-CH-6-TAB-1">Table 6.1: Thread Priority Values</A></CAPTION>
<tr class=row>
<th align="left">Value</TH>
<th align="left">Definition</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>MIN_PRIORITY</tt></TD>
<td align="left">Minimum priority</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>NORM_PRIORITY</tt></TD>
<td align="left">Normal priority</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>MAX_PRIORITY</tt></TD>
<td align="left">Maximum priority</TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
If you need to change the priority of a thread, you should use one of
these values or a close relative value. But let me warn you against
using <tt class=literal>MAX_PRIORITY</tt> or a close relative value; if
you elevate many threads to this priority level, priority will quickly
become meaningless. A slight increase in priority should be enough for
most needs. For example, specifying <tt class=literal>NORM_PRIORITY + 1</tt> in
our example is enough to beat out our other thread.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-6-SECT-4.2">Yielding</A></h3>

<p class=para>
As I said earlier, whenever a thread sleeps, waits, or blocks on I/O,
it gives up its time slot, and another thread is scheduled.  So as
long as you don't write methods that use hard loops, all threads
should get their due. However, a <tt class=literal>Thread</tt> can also
give up its time voluntarily with the <tt class=literal>yield()</tt>
call. We can change our previous example to include a
<tt class=literal>yield()</tt> on each iteration:

<div class=programlisting>
<p>
<pre>
class MyThread extends Thread { 
    ... 
 
    public void run() { 
        while ( true ) { 
            System.out.println( message ); 
            yield(); 
        } 
    } 
} 
</PRE>
</DIV>

<p class=para>
Now you should see "Foo" and "Bar" 
messages alternating one for one. If you have threads that perform very intensive calculations, or
otherwise eat a lot of CPU time, you might want to
find an appropriate place for them to yield control occasionally.
Alternatively, you might want to drop the priority of your intensive
thread, so that more important processing can proceed around it.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch07_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Synchronization</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Basic Utility Classes</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
