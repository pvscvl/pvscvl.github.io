<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 8] Input/Output Facilities</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 18:56:59 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch08_02.htm#EXJ-CH-8-SECT-2.1.2"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="EXJ-CH-8">8. Input/Output Facilities</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
Streams<br>
<a href="ch08_02.htm#EXJ-CH-8-SECT-2.1.2">Files</A><br>
<a href="ch08_03.htm">Serialization</A><br>
<a href="ch08_04.htm">Data compression</A><br>

<p>
</DIV>

<p class=para>
<a name="CH08.IO1"></A><a name="CH08.IO2"></A><a name="CH08.IO3"></A>

<div class=programlisting>
<p>
<pre>
</PRE>
</DIV>

<p class=para>
In this chapter, we'll continue our exploration of the Java
API by looking at many of the classes in the
<tt class=literal>java.io</tt> package. These classes support a number of
forms of input and output; I expect you'll use them often in
your Java applications. <a href="#EXJ-CH-8-FIG-1">Figure 8.1</A> shows the
class hierarchy of the <tt class=literal>java.io</tt> package.

<p class=para>
We'll start by looking at the stream classes in
<tt class=literal>java.io</tt>; these classes are all subclasses of the
basic <tt class=literal>InputStream</tt>, <tt class=literal>OutputStream</tt>, <tt class=literal>Reader</tt>, and
<tt class=literal>Writer</tt> classes. Then we'll examine the
<tt class=literal>File</tt> class and discuss how you can interact with
the filesystem using classes in <tt class=literal>java.io</tt>.  Finally,
we'll take a quick look at the data compression classes provided in
<tt class=literal>java.util.zip</tt>.

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="EXJ-CH-8-SECT-1">8.1 Streams</A></h2>

<p class=para>
<a name="CH08.STREAMS1"></A><a name="CH08.STREAMS2"></A>All fundamental I/O in Java is based on <i class=emphasis>streams</I>.
A stream represents a flow of data, or a channel of communication
with (at least conceptually) a writer at one end and a reader at the
other. When you are working with terminal input and output, reading
or writing files, or communicating through sockets in Java, you are
using a stream of one type or another. So you can see the forest
without being distracted by the trees, I'll start by summarizing
the different types of streams.

<div class=figure>
<h4 class=figure><a class="TITLE" name="EXJ-CH-8-FIG-1">Figure 8.1: The java.io package</A></h4>


<p>
<img align=middle src="figs/je0801.gif" alt="[Graphic: Figure 8-1]" width=502 height=493 border=0>

</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>InputStream</tt>/<tt class=literal>OutputStream</tt><br>
<dd>

<p class=para>
Abstract classes that define the basic functionality 
for reading or writing an unstructured sequence of 
bytes. All other byte streams in Java are built on top of 
the basic <tt class=literal>InputStream</tt> and <tt class=literal>OutputStream</tt>.

<p>
<dt class=varlistentry><tt class=literal>Reader</tt>/<tt class=literal>Writer</tt><br>
<dd>

<p class=para>
Abstract classes that define the basic functionality 
for reading or writing an unstructured sequence of 
characters. All other character streams in Java are built on top of 
<tt class=literal>Reader</tt> and <tt class=literal>Writer</tt>.

<p>
<dt class=varlistentry><tt class=literal>InputStreamReader</tt>/<tt class=literal>OutputStreamWriter</tt><br>
<dd>

<p class=para>
"Bridge" classes that convert bytes to characters and vice versa.

<p>
<dt class=varlistentry><tt class=literal>DataInputStream</tt>/<tt class=literal>DataOutputStream</tt><br>
<dd>

<p class=para>
Specialized stream filters that add the ability to
read and write simple data types like numeric primitives and
<tt class=literal>String</tt> objects.

<p>
<dt class=varlistentry><tt class=literal>BufferedInputStream</tt>/<tt class=literal>BufferedOutputStream</tt>
/<tt class=literal>BufferedReader</tt>/<tt class=literal>BufferedWriter</tt><br>
<dd>

<p class=para>
Specialized streams that 
incorporate buffering for additional efficiency. 

<p>
<dt class=varlistentry><tt class=literal>PrintWriter</tt><br>
<dd>

<p class=para>
A specialized character stream that makes it simple to print text.

<p>
<dt class=varlistentry><tt class=literal>PipedInputStream</tt>/<tt class=literal>PipedOutputStream</tt>
/<tt class=literal>PipedReader</tt>/<tt class=literal>PipedWriter</tt><br>
<dd>

<p class=para>
"Double-ended" streams that always occur in pairs. Data written 
into a <tt class=literal>PipedOutputStream</tt> or <tt class=literal>PipedWriter</tt>
is read from its corresponding <tt class=literal>PipedInputStream</tt> or
<tt class=literal>PipedReader</tt>. 

<p>
<dt class=varlistentry><tt class=literal>FileInputStream</tt>/<tt class=literal>FileOutputStream</tt>
/<tt class=literal>FileReader</tt>/<tt class=literal>FileWriter</tt><br>
<dd>

<p class=para>
Implementations of <tt class=literal>InputStream</tt>, <tt class=literal>OutputStream</tt>, 
<tt class=literal>Reader</tt>, and
<tt class=literal>Writer</tt> that read from and write to files on
the local filesystem.</DL>
<p class=para>
Streams in Java are one-way streets. The
<tt class=literal>java.io</tt> input and
output classes represent the ends of
a simple stream, as shown in <a href="#EXJ-CH-8-FIG-2">Figure 8.2</A>. For
bidirectional conversations, we use one of each type of stream.

<div class=figure>
<h4 class=figure><a class="TITLE" name="EXJ-CH-8-FIG-2">Figure 8.2: Basic input and output stream functionality</A></h4>


<p>
<img align=middle src="figs/je0802.gif" alt="[Graphic: Figure 8-2]" width=503 height=153 border=0>

</DIV>

<p class=para>
<tt class=literal>InputStream</tt> and <tt class=literal>OutputStream</tt> are
<tt class=literal>abstract</tt> classes that define the lowest-level
interface for all byte streams. They contain methods for reading or writing
an unstructured flow of byte-level data. Because these classes are
abstract, you can never create a "pure" input or output stream. Java
implements subclasses of these for activities like reading and writing
files, and communicating with sockets. Because all byte streams inherit the
structure of <tt class=literal>InputStream</tt> or
<tt class=literal>OutputStream</tt>, the various kinds of byte streams can be
used interchangeably. For example, a method often takes an
<tt class=literal>InputStream</tt> as an argument. This means the method
accepts any subclass of <tt class=literal>InputStream</tt>. Specialized
types of streams can also be layered to provide higher-level
functionality, such as buffering or handling larger data types.

<p class=para>
In Java 1.1, new classes based around <tt class=literal>Reader</tt> and 
<tt class=literal>Writer</tt> were added
to the <tt class=literal>java.io</tt> package.  <tt class=literal>Reader</tt> and 
<tt class=literal>Writer</tt> are very much like <tt class=literal>InputStream</tt> and 
<tt class=literal>OutputStream</tt>, except that they deal with characters instead
of bytes.  As true character streams, these classes correctly handle Unicode characters,
which was not always the case with the byte streams.  However, some sort of
bridge is needed between these character streams and the byte streams of
physical devices like
disks and networks.  <tt class=literal>InputStreamReader</tt> and 
<tt class=literal>OutputStreamWriter</tt> are special classes that use 
an <i class=emphasis>encoding scheme</I>
to translate between character and byte streams.

<p class=para>
We'll discuss all of the interesting stream types in this
section, with the exception of <tt class=literal>FileInputStream</tt>, 
<tt class=literal>FileOutputStream</tt>, <tt class=literal>FileReader</tt>, and
<tt class=literal>FileWriter</tt>. We'll postpone the
discussion of file streams until the next section, where we'll
cover issues involved with accessing the filesystem in
Java.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-8-SECT-1.1">Terminal I/O</A></h3>

<p class=para>
<a name="CH08.IO4"></A><a name="CH08.IO5"></A><a name="CH08.IO6"></A>The prototypical example of an <tt class=literal>InputStream</tt> object
is the standard input of a Java application. Like
<tt class=literal>stdin</tt> in C or <tt class=literal>cin</tt> in C++, this
object reads data from the program's environment, which is
usually a terminal window or a command pipe. The
<tt class=literal>java.lang.System</tt> class, a general repository for
system-related resources, provides a reference to standard input in
the <tt class=literal>static</tt> variable <tt class=literal>in</tt>.
<tt class=literal>System</tt> also provides objects for standard output
and standard error in the <tt class=literal>out</tt> and
<tt class=literal>err</tt> variables, respectively. The following example
shows the correspondence:

<div class=programlisting>
<p>
<pre>
InputStream stdin = System.in; 
OutputStream stdout = System.out; 
OutputStream stderr = System.err; 
</PRE>
</DIV>

<p class=para>
This example hides the fact that <tt class=literal>System.out</tt>
and <tt class=literal>System.err</tt> aren't really
<tt class=literal>OutputStream</tt> objects, but more specialized
and useful <tt class=literal>PrintStream</tt> objects. I'll explain
these later, but for now we can reference
<tt class=literal>out</tt> and <tt class=literal>err</tt> as
<tt class=literal>OutputStream</tt> objects, since they are a kind of
<tt class=literal>OutputStream</tt> by inheritance.

<p class=para>
We can read a single byte at a time from standard input with
the <tt class=literal>InputStream</tt>'s <tt class=literal>read()</tt>
method. If you look closely at the API,
you'll see that the <tt class=literal>read()</tt> method of the base
<tt class=literal>InputStream</tt> class is actually an
<tt class=literal>abstract</tt> method. What lies behind
<tt class=literal>System.in</tt> is an implementation of
<tt class=literal>InputStream</tt>, so it's valid to call
<tt class=literal>read()</tt> for this stream:

<div class=programlisting>
<p>
<pre>
try { 
    int val = System.in.read(); 
    ... 
} 
catch ( IOException e ) { 
} 
</PRE>
</DIV>

<p class=para>
As is the convention in C, <tt class=literal>read()</tt> provides a byte
of information, but its return type is <tt class=literal>int</tt>. A
return value of <tt class=literal>-1</tt> indicates a normal end of
stream has been reached; you'll need to test for this condition
when using the simple <tt class=literal>read()</tt> method. If an
error occurs during the read, an <tt class=literal>IOException</tt> is
thrown. 
All basic input and output stream commands can throw an
<tt class=literal>IOException</tt>, so you should arrange to catch
and handle them as appropriate.

<p class=para>
To retrieve the value as a byte, perform the cast: 

<div class=programlisting>
<p>
<pre>
byte b = (byte) val; 
</PRE>
</DIV>

<p class=para>
Of course, you'll need to check for the end-of-stream condition
before you perform the cast. An overloaded form of
<tt class=literal>read()</tt> fills a byte array with as much data as
possible up to the limit of the array size and returns the number of
bytes read:

<div class=programlisting>
<p>
<pre>
byte [] bity = new byte [1024]; 
int got = System.in.read( bity ); 
</PRE>
</DIV>

<p class=para>
We can also check the number of bytes available for reading on an
<tt class=literal>InputStream</tt> with the <tt class=literal>available()</tt>
method. Once we have that information, we can create an array of
exactly the right size:

<div class=programlisting>
<p>
<pre>
int waiting = System.in.available(); 
if ( waiting &gt; 0 ) { 
    byte [] data = new byte [ waiting ]; 
    System.in.read( data ); 
    ... 
} 
</PRE>
</DIV>

<p class=para>
<tt class=literal>InputStream</tt> provides the <tt class=literal>skip()</tt>
method as a way of jumping over a number of bytes. Depending on the
implementation of the stream and if you aren't interested in the
intermediate data, skipping bytes may be more efficient than reading
them. The <tt class=literal>close()</tt> method shuts down the stream and
frees up any associated system resources. It's a good
idea to close a stream when you are done using it.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-8-SECT-1.X">Character Streams</A></h3>

<p class=para>
The <tt class=literal>InputStream</tt> and <tt class=literal>OutputStream</tt> subclasses
of Java 1.0.2 included methods for reading and writing strings, but most of them
operated by assuming that a sixteen-bit Unicode character was equivalent to an
eight-bit byte in the stream.  This only works for Latin-1 (ISO8859-1) characters, so
the character stream classes <tt class=literal>Reader</tt> and <tt class=literal>Writer</tt>
were introduced in Java 1.1.  Two special classes, <tt class=literal>InputStreamReader</tt>
and <tt class=literal>OutputStreamWriter</tt>, bridge the gap between the world of
character streams and the world of byte streams.  These are character streams that are
wrapped around an underlying byte stream.  An encoding scheme is used to convert
between bytes and characters.  An encoding scheme name can be specified in the constructor
of <tt class=literal>InputStreamReader</tt> or <tt class=literal>OutputStreamWriter</tt>.  Another constructor
simply accepts the underlying stream and uses the system's default encoding scheme.
For example, let's parse a human-readable
string from the standard input into an integer.  We'll assume that the bytes coming from
<tt class=literal>System.in</tt> use the system's default encoding scheme.

<div class=programlisting>
<p>
<pre>
try {
    InputStreamReader converter = new InputStreamReader(System.in);
    BufferedReader in = new BufferedReader(converter);
    
    String text = in.readLine();
    int i = NumberFormat.getInstance().parse(text).intValue();
} 
catch ( IOException e ) { }
catch ( ParseException pe ) { } 
</PRE>
</DIV>

<p class=para>
First, we wrap an <tt class=literal>InputStreamReader</tt> around <tt class=literal>System.in</tt>.
This object converts the incoming bytes of <tt class=literal>System.in</tt> to characters
using the default encoding scheme.  Then, we wrap a <tt class=literal>BufferedReader</tt> around
the <tt class=literal>InputStreamReader</tt>.  <tt class=literal>BufferedReader</tt> gives us
the <tt class=literal>readLine()</tt> method, which we can use to retrieve a full
line of text into a <tt class=literal>String</tt>.  The string is then parsed into an 
integer using the techniques described in Chapter 7.

<p class=para>
We could have programmed the previous example using only byte streams, and it
would have worked for users in the United States, at least.  So why
go to the extra trouble of using character streams?  Character streams were introduced
in Java 1.1 to correctly support Unicode strings.  Unicode was designed to support
almost all of the written languages of the world.  If you want to write a program that
works in any part of the world, in any language, you definitely want to use
streams that don't mangle Unicode.

<p class=para>
So how do you decide when you need a byte stream and when you need a character
stream?  If you want to read or write character strings, use some variety of <tt class=literal>Reader</tt>
or <tt class=literal>Writer</tt>.  Otherwise a byte stream should suffice.  Let's say,
for example, that you want to read strings from a file that was written out by
a Java 1.0.2 application.  In this case you could simply create a
<tt class=literal>FileReader</tt>, which will convert the bytes
in the file to characters using the system's default encoding scheme.  If
you have a file in a specific encoding scheme, you can create an
<tt class=literal>InputStreamReader</tt> with that encoding
scheme and read characters from it.  Another example comes from the
Internet.  Web servers serve files as byte streams.  If you want to read
Unicode strings from
a file with a particular encoding scheme, you'll need an appropriate
<tt class=literal>InputStreamReader</tt> wrapped around the
socket's <tt class=literal>InputStream</tt>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-8-SECT-1.2">Stream Wrappers</A></h3>

<p class=para>
<a name="CH08.WRAP1"></A><a name="CH08.WRAP2"></A><a name="CH08.WRAP3"></A><a name="CH08.WRAP4"></A>What if we want to do more than read and write a mess of bytes or characters? Many of the
<tt class=literal>InputStream</tt>,
<tt class=literal>OutputStream</tt>, <tt class=literal>Reader</tt>, and
<tt class=literal>Writer</tt> classes wrap other streams and add new
features. A filtered stream takes another stream in its constructor; it delegates calls
to the underlying stream while doing some additional processing of its
own.

<p class=para>
In Java 1.0.2, all wrapper streams were subclasses of <tt class=literal>FilterInputStream</tt> and
<tt class=literal>FilterOutputStream</tt>.  The character stream classes
introduced in Java 1.1 break this pattern, but they operate in the same way.  For
example, <tt class=literal>BufferedInputStream</tt> extends
<tt class=literal>FilterInputStream</tt> in the byte world, but
<tt class=literal>BufferedReader</tt> extends <tt class=literal>Reader</tt>
in the character world.  It doesn't really matter--both classes accept a stream in
their constructor and perform buffering.  Like the byte stream classes,
the character stream classes include the abstract
<tt class=literal>FilterReader</tt> and <tt class=literal>FilterWriter</tt>
classes, which simply pass all method calls to an underlying stream.

<p class=para>
The <tt class=literal>FilterInputStream</tt>, <tt class=literal>FilterOutputStream</tt>, 
<tt class=literal>FilterReader</tt>, and
<tt class=literal>FilterWriter</tt> classes themselves aren't
useful; they must be subclassed and specialized to create a new type
of filtering operation. For example, specialized wrapper streams like
<tt class=literal>DataInputStream</tt> and
<tt class=literal>DataOutputStream</tt> provide additional methods
for reading and writing primitive data types.

<p class=para>
As we said, when you create an instance of a filtered stream,
you specify another stream in the constructor. The specialized
stream wraps an additional layer of functionality around the other
stream, as shown in <a href="#EXJ-CH-8-FIG-3">Figure 8.3</A>. Because filtered
streams themselves are subclasses of the fundamental
stream
types, filtered streams can be layered on top of each other to provide
different combinations of features.  For example, you could wrap a
<tt class=literal>PushbackReader</tt> around a <tt class=literal>LineNumberReader</tt>
that was wrapped around a <tt class=literal>FileReader</tt>.

<div class=figure>
<h4 class=figure><a class="TITLE" name="EXJ-CH-8-FIG-3">Figure 8.3: Layered streams</A></h4>


<p>
<img align=middle src="figs/je0803.gif" alt="[Graphic: Figure 8-3]" width=503 height=253 border=0>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="EXJ-CH-8-SECT-1.2.1">Data streams</A></h4>

<p class=para>
<a name="CH08.DATA1"></A><a name="CH08.DATA2"></A><tt class=literal>DataInputStream</tt> and
<tt class=literal>DataOutputStream</tt> are filtered streams that let you  read or write strings and
primitive data types that comprise
more than a single byte. <tt class=literal>DataInputStream</tt> and
<tt class=literal>DataOutputStream</tt> implement the
<tt class=literal>DataInput</tt> and
<tt class=literal>DataOutput</tt> interfaces, respectively. These
interfaces define the methods required for streams that read and write
strings and Java primitive types in a machine-independent manner.

<p class=para>
You can construct a <tt class=literal>DataInputStream</tt> from an
<tt class=literal>InputStream</tt> and then use a method like
<tt class=literal>readDouble()</tt> to read a primitive data type:

<div class=programlisting>
<p>
<pre>
DataInputStream dis = new DataInputStream( System.in ); 
double d = dis.readDouble(); 
</PRE>
</DIV>

<p class=para>
The above example wraps the standard input stream in a
<tt class=literal>DataInputStream</tt> and uses it to read a double
value. <tt class=literal>readDouble()</tt> reads bytes from the stream
and constructs a <tt class=literal>double</tt> from them.
All <tt class=literal>DataInputStream</tt> methods 
that read primitive types also read binary information. 

<p class=para>
The <tt class=literal>DataOutputStream</tt> class provides write methods 
that correspond to the read methods in <tt class=literal>DataInputStream</tt>. 
For example, <tt class=literal>writeInt()</tt> writes an integer in 
binary format to the underlying output stream.

<p class=para>
The <tt class=literal>readUTF()</tt> and
<tt class=literal>writeUTF()</tt> methods of
<tt class=literal>DataInputStream</tt> and
<tt class=literal>DataOutputStream</tt> read and write a Java
<tt class=literal>String</tt> of Unicode characters using the
UTF-8 "transformation format."
UTF-8 is an ASCII-compatible
encoding of Unicode characters commonly used for the
transmission and storage of Unicode text.[1]

<blockquote class=footnote>
<p class=para>[1] 
Check out the URL
<a href="../../../../../../../www.stonehand.com/unicode/standard/utf8.html">http://www.stonehand.com/unicode/standard/utf8.html</A>
for more information on UTF-8.  
</blockquote>
<p class=para>
We can use a <tt class=literal>DataInputStream</tt> with any kind
of input stream, whether it be from a file, a socket, or standard
input. The same applies to using a
<tt class=literal>DataOutputStream</tt>, or, for that matter, any other
specialized streams in <tt class=literal>java.io</tt>.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="EXJ-CH-8-SECT-1.2.2">Buffered streams</A></h4>

<p class=para>
<a name="CH08.BUFF1"></A><a name="CH08.BUFF2"></A><a name="CH08.BUFF3"></A><a name="CH08.BUFF4"></A><a name="CH08.BUFF5"></A>The <tt class=literal>BufferedInputStream</tt>,
<tt class=literal>BufferedOutputStream</tt>,
<tt class=literal>BufferedReader</tt>, and
<tt class=literal>BufferedWriter</tt> classes add a data
buffer of a specified size to the stream path. A buffer can increase
efficiency by reducing the number of physical read or write operations
that correspond to <tt class=literal>read()</tt> or
<tt class=literal>write()</tt> method calls. You create a buffered stream
with an appropriate input or output stream and a buffer
size. Furthermore, you can wrap another stream around a buffered
stream so that it benefits from the buffering. Here's a simple
buffered input stream:

<div class=programlisting>
<p>
<pre>
BufferedInputStream bis = new BufferedInputStream(myInputStream, 4096); 
...
bis.read(); 
</PRE>
</DIV>

<p class=para>
In this example, we specify a buffer size of 4096 bytes. If we leave
off the size of the buffer in the constructor, a reasonably sized one
is chosen for us. On our first call to <tt class=literal>read()</tt>,
<tt class=literal>bis</tt> tries to fill the entire 4096-byte buffer with
data. Thereafter, calls to <tt class=literal>read()</tt> retrieve data
from the buffer until it's empty.

<p class=para>
A <tt class=literal>BufferedOutputStream</tt> works in a similar
way. Calls to <tt class=literal>write()</tt> store the data in a buffer;
data is actually written only when the buffer fills up. You can also
use the <tt class=literal>flush()</tt> method to wring out the contents of
a <tt class=literal>BufferedOutputStream</tt> before the buffer is full.

<p class=para>
Some input streams like <tt class=literal>BufferedInputStream</tt>
support the ability to mark a location in the data and later reset the
stream to that position. The <tt class=literal>mark()</tt> method sets the
return point in the stream. It takes an integer value that specifies
the number of bytes that can be read before the stream gives up and
forgets about the mark. The <tt class=literal>reset()</tt> method returns
the stream to the marked point; any data read after the call
to <tt class=literal>mark()</tt> is read again.

<p class=para>
This functionality is especially useful when you are reading
the stream in a parser. You may occasionally fail to parse a structure
and so must try something else. In this situation, you can have your
parser generate an error (a homemade
<tt class=literal>ParseException</tt>) and then reset the stream to the
point before it began parsing the structure:

<div class=programlisting>
<p>
<pre>
BufferedInputStream input; 
... 
try { 
    input.mark( MAX_DATA_STRUCTURE_SIZE ); 
    return( parseDataStructure( input ) ); 
} 
catch ( ParseException e ) { 
    input.reset(); 
    ... 
} 
</PRE>
</DIV>

<p class=para>
The <tt class=literal>BufferedReader</tt> and
<tt class=literal>BufferedWriter</tt> classes work just
like their byte-based counterparts, but operate on characters instead of
bytes.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="EXJ-CH-8-SECT-1.2.3">Print streams</A></h4>

<p class=para>
<a name="CH08.PRINT1"></A><a name="CH08.PRINT2"></A><a name="CH08.PRINT3"></A><a name="CH08.PRINT4"></A>Another useful wrapper stream is
<tt class=literal>java.io.PrintWriter</tt>. This class provides a suite of
overloaded <tt class=literal>print()</tt> methods that turn their
arguments into strings and push them out the stream. A complementary
set of <tt class=literal>println()</tt> methods adds a newline to the end
of the strings. <tt class=literal>PrintWriter</tt> is the more
capable big brother of the <tt class=literal>PrintStream</tt>
byte stream.  <tt class=literal>PrintWriter</tt> is an
unusual character stream because it can wrap either an <tt class=literal>OutputStream</tt>
or another <tt class=literal>Writer</tt>. The <tt class=literal>System.out</tt> and
<tt class=literal>System.err</tt> streams are
<tt class=literal>PrintStream</tt> objects; you have already seen such
streams strewn throughout this book:

<div class=programlisting>
<p>
<pre>
System.out.print("Hello world...\n"); 
System.out.println("Hello world..."); 
System.out.println( "The answer is: " + 17 ); 
System.out.println( 3.14 ); 
</PRE>
</DIV>

<p class=para>
In Java 1.1, the
<tt class=literal>PrintStream</tt> class has been enhanced
to translate characters to bytes using the system's default
encoding scheme. Although <tt class=literal>PrintStream</tt>
is not deprecated in Java 1.1, its constructors are.  For all new
development, use a <tt class=literal>PrintWriter</tt> instead of
a <tt class=literal>PrintStream</tt>.  Because a
<tt class=literal>PrintWriter</tt> can wrap an
<tt class=literal>OutputStream</tt>, the two classes are
interchangeable.

<p class=para>
When you create a <tt class=literal>PrintWriter</tt> object, you
can pass an additional <tt class=literal>boolean</tt> value to the
constructor. If this value is <tt class=literal>true</tt>, the
<tt class=literal>PrintWriter</tt> automatically performs a
<tt class=literal>flush()</tt> on the underlying
<tt class=literal>OutputStream</tt> or <tt class=literal>Writer</tt>
each time it sends a newline:

<div class=programlisting>
<p>
<pre>
boolean autoFlush = true; 
PrintWriter p = new PrintWriter( myOutputStream, autoFlush ); 
</PRE>
</DIV>

<p class=para>
When this technique is used with a buffered output stream, it
corresponds to the behavior of terminals that send data
line by line.

<p class=para>
Unlike methods in other stream classes,
the methods of <tt class=literal>PrintWriter</tt>
and <tt class=literal>PrintStream</tt>
do not throw
<tt class=literal>IOException</tt>s.
Instead, if we are
interested, we can check for errors with the
<tt class=literal>checkError()</tt> method:

<div class=programlisting>
<p>
<pre>
System.out.println( reallyLongString ); 
if ( System.out.checkError() )                // Uh oh 
</PRE>
</DIV>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-8-SECT-1.3">Pipes</A></h3>

<p class=para>
<a name="CH08.PIPE1"></A><a name="CH08.PIPE2"></A>Normally, our applications are directly involved with one side of
a given stream at a time. <tt class=literal>PipedInputStream</tt>
and <tt class=literal>PipedOutputStream</tt> (or
<tt class=literal>PipedReader</tt>
and <tt class=literal>PipedWriter</tt>), however, let us
create two sides of a stream and connect them together, as shown in
<a href="#EXJ-CH-8-FIG-4">Figure 8.4</A>. This provides a stream
of communication between threads, for example.

<p class=para>
To create a pipe, we use both a
<tt class=literal>PipedInputStream</tt> and a
<tt class=literal>PipedOutputStream</tt>. We can simply choose a side and
then construct the other side using the first as an argument:

<div class=figure>
<h4 class=figure><a class="TITLE" name="EXJ-CH-8-FIG-4">Figure 8.4: Piped streams</A></h4>


<p>
<img align=middle src="figs/je0804.gif" alt="[Graphic: Figure 8-4]" width=503 height=163 border=0>

</DIV>

<div class=programlisting>
<p>
<pre>
PipedInputStream pin = new PipedInputStream(); 
PipedOutputStream pout = new PipedOutputStream( pin ); 
</PRE>
</DIV>

<p class=para>
Alternatively&nbsp;: 

<div class=programlisting>
<p>
<pre>
PipedOutputStream pout = new PipedOutputStream( ); 
PipedInputStream pin = new PipedInputStream( pout ); 
</PRE>
</DIV>

<p class=para>
In each of these examples, the effect is to produce an input
stream, <tt class=literal>pin</tt>, and an output stream,
<tt class=literal>pout</tt>, that are connected. Data written to
<tt class=literal>pout</tt> can then be read by <tt class=literal>pin</tt>. It
is also possible to create the <tt class=literal>PipedInputStream</tt> and
the <tt class=literal>PipedOutputStream</tt> separately, and then connect
them with the <tt class=literal>connect()</tt> method.

<p class=para>
We can do exactly the same thing in the character-based world, using
<tt class=literal>PipedReader</tt> and
<tt class=literal>PipedWriter</tt> in place of
<tt class=literal>PipedInputStream</tt> and
<tt class=literal>PipedOutputStream</tt>.

<p class=para>
Once the two ends of the pipe are connected, use the two
streams as you would other input and output
streams. You can use <tt class=literal>read()</tt> to read data from the
<tt class=literal>PipedInputStream</tt> (or <tt class=literal>PipedReader</tt>)
 and <tt class=literal>write()</tt> to
write data to the <tt class=literal>PipedOutputStream</tt> (or
<tt class=literal>PipedWriter</tt>). If the
internal buffer of the pipe fills up, the writer blocks and waits
until more space is available. Conversely, if the pipe is empty, the
reader blocks and waits until some data is available. Internally, the
blocking is implemented with <tt class=literal>wait()</tt> and
<tt class=literal>notifyAll()</tt>, as described in <a href="ch06_01.htm">Chapter 6, <i>Threads</i></A>.

<p class=para>
One advantage to using piped streams is that they provide
stream functionality in our code, without compelling us to build new,
specialized streams. For example, we can use pipes to create a simple
logging facility for our application. We can send messages to the
logging facility through an ordinary <tt class=literal>PrintWriter</tt>,
and then it can do whatever processing or buffering is required before
sending the messages off 
to their ultimate location. Because we are dealing with string
messages, we use the character-based <tt class=literal>PipedReader</tt>
and <tt class=literal>PipedWriter</tt> classes. The following
example shows the skeleton of our logging facility:

<div class=programlisting>
<p>
<pre>
import java.io.*; 
 
class LoggerDaemon extends Thread { 
    PipedReader in = new PipedReader();  
 
    LoggerDaemon() { 
        setDaemon( true ); 
        start(); 
    } 
 
    public void run() { 
        BufferedReader din = new BufferedReader( in ); 
        String s; 
  
        try { 
           while ( (s = din.readLine()) != null ) { 
                // process line of data 
                // ... 
            } 
        }  
        catch (IOException e ) { } 
    } 
 
    PrintWriter getWriter() throws IOException { 
        return new PrintWriter( new PipedWriter( in ) ); 
    } 
} 
 
class myApplication { 
    public static void main ( String [] args ) throws IOException { 
        PrintWriter out = new LoggerDaemon().getWriter(); 
 
        out.println("Application starting..."); 
        // ... 
        out.println("Warning: does not compute!"); 
        // ... 
    } 
} 
</PRE>
</DIV>

<p class=para>
<tt class=literal>LoggerDaemon</tt> is a daemon thread, so it will die
when our application exits. <tt class=literal>LoggerDaemon</tt> reads
strings from its end of the pipe, the
<tt class=literal>PipedReader</tt>
<tt class=literal>in</tt>. <tt class=literal>LoggerDaemon</tt> also
provides a method, <tt class=literal>getWriter()</tt>, that returns a
<tt class=literal>PipedWriter</tt> that is connected to its input
stream. Simply create a new <tt class=literal>LoggerDaemon</tt> and fetch
the output stream to begin sending messages.

<p class=para>
In order to read strings with the <tt class=literal>readLine()</tt>
method, <tt class=literal>LoggerDaemon</tt> wraps a
<tt class=literal>BufferedReader</tt> around its
<tt class=literal>PipedReader</tt>. For convenience, it also presents
its <tt class=literal>PipedWriter</tt> as a
<tt class=literal>PrintWriter</tt>, rather than a simple
<tt class=literal>Writer</tt>.

<p class=para>
One advantage of implementing <tt class=literal>LoggerDaemon</tt>
with pipes is that we can log messages as easily as we write text to a
terminal or any other stream. In other words, we can use all our
normal tools and techniques. Another advantage is that the processing
happens in another thread, so we can go about our business while the
processing takes place.

<p class=para>
There is nothing stopping us from connecting more than two
piped streams. For example, we could chain multiple pipes together to
perform a series of filtering operations.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-8-SECT-1.4">Strings to Streams and Back</A></h3>

<p class=para>
<a name="CH08.SBI1"></A><a name="CH08.SBI2"></A>The <tt class=literal>StringReader</tt> class is another useful
stream class. The stream is created from a <tt class=literal>String</tt>;
<tt class=literal>StringReader</tt> essentially wraps stream
functionality around a <tt class=literal>String</tt>. Here's how to
use a <tt class=literal>StringReader</tt>:

<div class=programlisting>
<p>
<pre>
String data = "There once was a man from Nantucket..."; 
StringReader sr = new StringReader( data ); 
 
char T = (char)sr.read(); 
char h = (char)sr.read(); 
char e = (char)sr.read(); 
</PRE>
</DIV>

<p class=para>
Note that you will still have
to catch <tt class=literal>IOException</tt>s thrown by
some of the <tt class=literal>StringReader</tt>'s methods.

<p class=para>
The <tt class=literal>StringReader</tt> class is useful when
you want to read data in a <tt class=literal>String</tt> as if it were
coming from a stream, such as a file, pipe, or socket. For example,
suppose you create a parser that expects to read tokens from a
stream. But you want to provide a method that also parses a big
string. You can easily add one using
<tt class=literal>StringReader</tt>.

<p class=para>
Turning things around, the <tt class=literal>StringWriter</tt>
class lets us write to a character string through an output
stream. The internal string grows as necessary to accommodate the
data. In the following example, we create a
<tt class=literal>StringWriter</tt> and wrap it in a
<tt class=literal>PrintWriter</tt> for convenience:

<div class=programlisting>
<p>
<pre>
StringWriter buffer = new StringWriter(); 
PrintWriter out = new PrintWriter( buffer ); 
 
out.println("A moose once bit my sister."); 
out.println("No, really!"); 
 
String results = buffer.toString(); 
</PRE>
</DIV>

<p class=para>
First we print a few lines to the output stream, to give it some data,
then retrieve the results as a string with the
<tt class=literal>toString()</tt> method. Alternately, we could get the
results as a <tt class=literal>StringBuffer</tt> with the <tt class=literal>getBuffer()</tt>
method.

<p class=para>
The <tt class=literal>StringWriter</tt> class is useful if
you want to capture the output of something that normally sends output
to a stream, such as a file or the console. A
<tt class=literal>PrintWriter</tt> wrapped around a
<tt class=literal>StringWriter</tt> competes with
<tt class=literal>StringBuffer</tt> as the easiest way to construct
large strings piece by piece. While using a
<tt class=literal>StringBuffer</tt> is more efficient,
<tt class=literal>PrintWriter</tt> provides more functionality than the
normal <tt class=literal>append()</tt> method used by
<tt class=literal>StringBuffer</tt>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-8-SECT-1.5">rot13InputStream</A></h3>

<p class=para>
Before we leave streams, let's try our hand at making one of our
own. I mentioned earlier that specialized stream wrappers are built on
top of the <tt class=literal>FilterInputStream</tt> and
<tt class=literal>FilterOutputStream</tt> classes. It's quite easy
to create our own subclass of <tt class=literal>FilterInputStream</tt>
that can be wrapped around other streams to add new functionality.

<p class=para>
The following example, <tt class=literal>rot13InputStream</tt>,
performs a <i class=emphasis>rot13</I> operation on the bytes that it
reads. <i class=emphasis>rot13</I> is a trivial algorithm that shifts
alphanumeric letters to make them not quite human-readable; it's cute
because it's symmetric. That is, to "un-rot13" some text,
simply <i class=emphasis>rot13</I> it again. We'll use the
<tt class=literal>rot13InputStream</tt> class again in the
<tt class=literal>crypt</tt> protocol handler example in <a href="ch09_01.htm">Chapter 9, <i>Network Programming</i></A>, so we've put the class in the
<tt class=literal>example.io</tt> package to facilitate
reuse. Here's our <tt class=literal>rot13InputStream</tt> class:

<div class=programlisting>
<p>
<pre>
package example.io; 
import java.io.*; 
 
public class rot13InputStream extends FilterInputStream { 
 
    public rot13InputStream ( InputStream i ) { 
        super( i ); 
    } 
 
    public int read() throws IOException { 
        return rot13( in.read() ); 
    } 
 
    private int rot13 ( int c ) { 
        if ( (c &gt;= 'A') &amp;&amp; (c &lt;= 'Z') )            c=(((c-'A')+13)%26)+'A';        if ( (c &gt;= 'a') &amp;&amp; (c &lt;= 'z') ) 
            c=(((c-'a')+13)%26)+'a'; 
        return c; 
    } } 
</PRE>
</DIV>

<p class=para>
The <tt class=literal>FilterInputStream</tt> needs to be initialized with
an <tt class=literal>InputStream</tt>; this is the stream to be
filtered. We provide an appropriate constructor for the
<tt class=literal>rot13InputStream</tt> class and invoke the parent
constructor with a call to <tt class=literal>super()</tt>.
<tt class=literal>FilterInputStream</tt> contains a protected instance
variable, <tt class=literal>in</tt>, where it stores the stream reference
and makes it available to the rest of our class.

<p class=para>
The primary feature of a <tt class=literal>FilterInputStream</tt>
is that it overrides the normal <tt class=literal>InputStream</tt>
methods to delegate calls to the <tt class=literal>InputStream</tt> in the
variable <tt class=literal>in</tt>. So, for instance, a call to
<tt class=literal>read()</tt> simply turns around and calls
<tt class=literal>read()</tt> on <tt class=literal>in</tt> to fetch a byte. An
instance of <tt class=literal>FilterInputStream</tt> itself could be
instantiated from an <tt class=literal>InputStream</tt>; it would
pass its method calls on to that stream and serve as a
pass-through filter. To make things interesting, we can override
methods of the <tt class=literal>FilterInputStream</tt> class and do
extra work on the data as it passes through.

<p class=para>
In our example, we have overridden the
<tt class=literal>read()</tt> method to fetch bytes from the underlying
<tt class=literal>InputStream</tt>, <tt class=literal>in</tt>, and then
perform the <i class=emphasis>rot13</I> shift on the data before
returning it. Note that the <tt class=literal>rot13()</tt> method shifts
alphabetic characters, while simply passing all other values,
including the end of stream value (<tt class=literal>-1</tt>). Our
subclass now acts like a <i class=emphasis>rot13</I> filter. All
other normal functionality of an <tt class=literal>InputStream</tt>, like
<tt class=literal>skip()</tt> and <tt class=literal>available()</tt> is
unmodified, so calls to these methods are answered by the underlying
<tt class=literal>InputStream</tt>.

<p class=para>
Strictly speaking, <tt class=literal>rot13InputStream</tt> only works
on an ASCII byte stream, since the underlying algorithm is based
on the Roman alphabet.  A more generalized character scrambling
algorithm would have to be based on <tt class=literal>FilterReader</tt>
to handle Unicode correctly.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch08_02.htm#EXJ-CH-8-SECT-2.1.2"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Internationalization</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Files</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
