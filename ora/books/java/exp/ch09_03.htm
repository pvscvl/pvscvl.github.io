<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 9] 9.3 Working with URLs</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Thu Jul 24 12:08:39 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch09_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 9<br>Network Programming</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch09_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="EXJ-CH-9-SECT-3">9.3 Working with URLs</A></h2>

<p class=para>
<a name="CH09.URL1"></A>A URL points to an
object on the Internet. It's a collection of information that
identifies an item, tells you where to find it, and specifies a method
for communicating with it or retrieving it from its source. A
URL refers to any kind of information source.
It might point to static data, such as a file on a local filesystem, a
Web server, or an FTP archive; or it can point to a
more dynamic object such as a news article on a news spool or a record
in a WAIS database. URLs can
even refer to less tangible resources such as Telnet sessions and
mailing addresses.

<p class=para>
A URL is usually presented as a string of
text, like an address.[3]
 Since there are many different ways to locate an item on the Net, and
different mediums and transports require different kinds of
information, there are different formats for different kinds of
URLs. The most common form specifies three things:
a network host or server, the name of the item and its location on
that host, and a protocol by which the host should communicate:

<blockquote class=footnote>
<p class=para>[3] 
The term URL was coined by the Uniform Resource
Identifier (URI) working group of the
IETF to distinguish URLs from
the more general notion of Uniform Resource Names or
URNs. URLs are really just
static addresses, whereas URNs would be more
persistent and abstract identifiers used to resolve the
location of an object anywhere on the Net. URLs are
defined in RFC 1738 and RFC
1808.
</blockquote>
<div class=programlisting>
<p>
<pre>
<tt class=replaceable><i>protocol</i></tt>://<tt class=replaceable><i>hostname</i></tt>/<tt class=replaceable><i>location</i></tt>/<tt class=replaceable><i>item</i></tt>
</PRE>
</DIV>

<p class=para>
<tt class=replaceable><i>protocol</i></tt> is an identifier such as
"http," "ftp," or "gopher"; <tt class=replaceable><i>hostname</i></tt>
is an Internet hostname; and the <tt class=replaceable><i>location</i></tt> and
<tt class=replaceable><i>item</i></tt> components form a path that identifies the
object on that host. Variants of this form allow extra information to
be packed into the URL, specifying things like port
numbers for the communications protocol and fragment identifiers that
reference parts inside the object.

<p class=para>
We sometimes speak of a URL that is relative
to a base URL. In that case we are using the base
URL as a starting point and supplying additional
information. For example, the base URL might point
to a directory on a Web server; a relative URL
might name a particular file in that directory.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-9-SECT-3.1">The URL class</A></h3>

<p class=para>
A URL is represented by an instance of the
<tt class=literal>java.net.URL</tt> class. A <tt class=literal>URL</tt>
object manages all information in a URL string
and provides methods for retrieving the object it identifies. We can
construct a <tt class=literal>URL</tt> object from a
URL specification string or from its component
parts:

<div class=programlisting>
<p>
<pre>
try { 
    URL aDoc = new URL( "http://foo.bar.com/documents/homepage.html" ); 
    URL sameDoc = 
        new URL("http","foo.bar.com","documents/homepage.html"); 
}  
catch ( MalformedURLException e ) { } 
</PRE>
</DIV>

<p class=para>
The two <tt class=literal>URL</tt> objects above point to the same network
resource, the <i class=filename>homepage.html</i> document on the
server foo.bar.com. Whether or not the resource
actually exists and is available isn't known until we try to
access it. At this point, the <tt class=literal>URL</tt> object just
contains data about the object's location and how to access
it. No connection to the server has been made. We can examine the
<tt class=literal>URL</tt>'s components with the
<tt class=literal>getProtocol()</tt>, <tt class=literal>getHost()</tt>, and
<tt class=literal>getFile()</tt> methods. We can also compare it to
another <tt class=literal>URL</tt> with the <tt class=literal>sameFile()</tt>
method. <tt class=literal>sameFile()</tt> determines if two
URLs point to the same resource. It can be fooled,
but <tt class=literal>sameFile</tt> does more than compare the
URLs for equality; it takes into account the
possibility that one server may have several names, and other factors.

<p class=para>
When a <tt class=literal>URL</tt> is created, its specification is
parsed to identify the protocol component. If the protocol
doesn't make sense, or if Java can't find a protocol
handler for it, the URL constructor throws a
<tt class=literal>MalformedURLException</tt>. A protocol handler is a Java
class that implements the communications protocol for accessing the
URL resource. For example, given an
"http" URL, Java prepares to use the
HTTP protocol handler to retrieve documents from
the specified server.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-9-SECT-3.2">Stream Data</A></h3>

<p class=para>
The most general way to get data back from
<tt class=literal>URL</tt> is to ask for an <tt class=literal>InputStream</tt>
from the <tt class=literal>URL</tt> by calling
<tt class=literal>openStream()</tt>. If you're writing an applet
that will be running under Netscape, this is about your only
choice. In fact, it's a good choice if you want to receive
continuous updates from a dynamic information source. The drawback is
that you have to parse the contents of an object yourself. Not all
types of URLs support the
<tt class=literal>openStream()</tt> method; you'll get an
<tt class=literal>UnknownServiceException</tt> if yours doesn't.

<p class=para>
The following code reads a single line from an HTML file: 

<div class=programlisting>
<p>
<pre>
try { 
    URL url = new URL("http://server/index.html"); 
    DataInputStream dis = new DataInputStream( url.openStream() ); 
    String line = dis.readLine(); 
</PRE>
</DIV>

<p class=para>
We ask for an <tt class=literal>InputStream</tt> with
<tt class=literal>openStream()</tt>, and wrap it in a
<tt class=literal>DataInputStream</tt> to read a line of text. Here,
because we are specifying the "http" protocol in the
URL, we still require the services of an
HTTP protocol handler. As we'll discuss more in a
bit, that brings up some questions about what handlers we have
available to us and where. This example partially works around those
issues because no content handler is involved; we read the data and
interpret it as a content handler would. However, there are even more
limitations on what applets can do right now. For the time being, if
you construct <tt class=literal>URL</tt>s relative to the applet's
<tt class=literal>codeBase()</tt>, you should be able to use them in
applets as in the above example. This should guarantee that the needed
protocol is available and accessible to the applet. Again, we'll
discuss the more general issues a bit later.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-9-SECT-3.3">Getting the Content as an Object</A></h3>

<p class=para>
<a name="CH09.GET"></A><tt class=literal>openStream()</tt> operates at a lower level than the
more general content-handling mechanism implemented by the
<tt class=literal>URL</tt> class. We showed it first because, until some
things are settled, you'll be limited as to when you can use
URLs in their more powerful role. When a proper
content handler is available to Java (currently, only if you supply
one with your standalone application), you'll be able to retrieve the
object the <tt class=literal>URL</tt> addresses as a complete object, by
calling the <tt class=literal>URL</tt>'s <tt class=literal>getContent()</tt>
method. 
<tt class=literal>getContent()</tt> initiates a connection to the
host, fetches the data for you, determines the data's
MIME type, and invokes a content handler to turn
the data into a Java object.

<p class=para>
For example: given the URL 
<a href="../../../../../../../foo.bar.com/index.html">http://foo.bar.com/index.html</A>, a call to
<tt class=literal>getContent()</tt> uses the HTTP
protocol handler to receive the data and the HTML
content handler to turn the data into some kind of object. A
URL that points to a plain-text file would use a
text-content handler that might return a <tt class=literal>String</tt>
object. 
A GIF file might be turned into an
<tt class=literal>Image</tt> object for display, using a
GIF content handler. If we accessed the
GIF file using an "ftp"
URL, Java would use the same content handler, but
would use the FTP protocol handler to receive the
data.

<p class=para>
<tt class=literal>getContent()</tt> returns the output of the
content handler. Now we're faced with a problem: exactly what
did we get?  Since the content handler can return almost anything, the
return type of <tt class=literal>getContent()</tt> is
<tt class=literal>Object</tt>. Before doing anything meaningful with this
<tt class=literal>Object</tt>, we must cast it into some other data type
that we can work with.
 For example, if we expect a
<tt class=literal>String</tt>, we'll cast the result of
<tt class=literal>getContent()</tt> to a <tt class=literal>String</tt>:

<div class=programlisting>
<p>
<pre>
String content; 
 
try  
    content = (String)myURL.getContent(); 
catch ( Exception e ) { } 
</PRE>
</DIV>

<p class=para>
Of course, we are presuming we will in fact get a
<tt class=literal>String</tt> object back from this
<tt class=literal>URL</tt>. If we're wrong, we'll get a
<tt class=literal>ClassCastException</tt>. Since it's common for servers
to be confused (or even lie) about the MIME types
of the objects they serve, it's wise to catch that exception (it's a
subclass of <tt class=literal>RuntimeException</tt>, so catching it is
optional) or to check the type of the returned object with the
<tt class=literal>instanceof</tt> operator:

<div class=programlisting>
<p>
<pre>
if ( content instanceof String ) { 
    String s = (String)content; 
    ... 
</PRE>
</DIV>

<p class=para>
Various kinds of errors can occur when trying to retrieve the
data. For example, <tt class=literal>getContent()</tt> can throw an
<tt class=literal>IOException</tt> if there is a communications error;
<tt class=literal>IOException</tt> is not a type of
<tt class=literal>RuntimeException</tt>, so we must catch it explicitly,
or declare the method that calls <tt class=literal>getContent()</tt> can
throw it. Other kinds of errors can happen at the application level:
some knowledge of how the handlers deal with errors is necessary.

<p class=para>
For example, consider a <tt class=literal>URL</tt> that refers to a
nonexistent file on an HTTP server. When
requested, the server probably returns a valid HTML
document that consists of the familiar "404 Not Found"
message. An appropriate HTML content handler is
invoked to interpret this and return it as it would any other
HTML object. At this point, there are several
alternatives, depending entirely on the content handler's
implementation. It might return a <tt class=literal>String</tt> containing
the error message; it could also conceivably return some other kind of
object or throw a specialized subclass of
<tt class=literal>IOException</tt>. To find out that an error occurred,
the application may have to look directly at the object returned from
<tt class=literal>getContent()</tt>. After all, what is an error to the
application may not be an error as far as the protocol or content
handlers are concerned. "404 Not Found" isn't an
error at this level; it's a perfectly valid document.

<p class=para>
Another type of error occurs if a content handler that
understands the data's MIME type isn't
available. In this case, <tt class=literal>getContent()</tt> invokes a
minimal content handler used for data with an unknown type and
returns the data as a raw <tt class=literal>InputStream</tt>. A
sophisticated application might specialize this behavior to try to
decide what to do with the data on its own.

<p class=para>
The <tt class=literal>openStream()</tt> and
<tt class=literal>getContent()</tt> methods both implicitly create a
connection to the remote <tt class=literal>URL</tt> object. For some
applications, it may be necessary to use the
<tt class=literal>openConnection()</tt> method of the
<tt class=literal>URL</tt> to interact directly with the protocol
handler. <tt class=literal>openConnection()</tt> returns a
<tt class=literal>URLConnection</tt> object, which represents a single,
active connection to the <tt class=literal>URL</tt> resource. We'll
examine <tt class=literal>URLConnection</tt>s further when we start writing
protocol handlers.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch09_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch09_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Datagram Sockets</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Web Browsers and Handlers</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
