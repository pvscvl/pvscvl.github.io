<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 11] 11.6 Checkboxes and CheckboxGroups</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 19:01:12 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11<br>Using and Creating GUI Components</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch11_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="EXJ-CH-11-SECT-6">11.6 Checkboxes and CheckboxGroups</A></h2>

<p class=para>
<a name="CH10.CHECK1"></A> <a name="CH10.CHECK2"></A>
<p class=para>
A <tt class=literal>Checkbox</tt> is a labeled toggle button. A group of
such toggle buttons can be made mutually exclusive by tethering them
together with a <tt class=literal>CheckboxGroup</tt> object. By now
you're probably well into the swing of things and could easily
master the <tt class=literal>Checkbox</tt> on your own. We'll throw
out an example to illustrate a different way of dealing with the state
of components and to show off a few more things about containers.

<p class=para>

A <tt class=literal>Checkbox</tt> sends item events when it's
pushed, just like a <tt class=literal>List</tt>, a
<tt class=literal>Menu</tt>, or a
<tt class=literal>Choice</tt>. In our last example, we caught the
action events from our choice and menu selections and worked with them
when they happened. For something like a checkbox, we might want to
be lazy and check on the state of the buttons only at some later time,
such as when the user commits an action. It's like filling out a
form; you can change your choices until you submit the form. 

<p class=para>
The following applet, <tt class=literal>DriveThrough</tt>, lets us
check off selections on a fast food menu, as shown in
<a href="ch11_03.htm">Figure 11.4</A>.
<tt class=literal>DriveThrough</tt> prints 
the results when we press the <b>Place
Order</b> button. Therefore, we can ignore all the item
events generated by our checkboxes and listen only for the action
events generated by the button. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="EXJ-CH-11-FIG-7">Figure 11.7: The DriveThrough applet</A></h4>


<p>
<img align=middle src="figs/je1107.gif" alt="[Graphic: Figure 11-7]" width=503 height=182 border=0>

</DIV>

<div class=screen>
<p>
<pre>
import java.awt.*;
import java.awt.event.*;
public class OrderForm extends java.applet.Applet implements ActionListener { 
    Panel condimentsPanel = new Panel();
    CheckboxGroup entreeGroup = new CheckboxGroup();
    public void init() {
        condimentsPanel.add( new Checkbox("Ketchup"));
        condimentsPanel.add( new Checkbox("Mustard"));
        condimentsPanel.add( new Checkbox("Pickles"));
        Checkbox c;
        Panel entreePanel = new Panel();
        entreePanel.add( c = new Checkbox("Beef") );
        c.setCheckboxGroup( entreeGroup );
        entreePanel.add( c = new Checkbox("Chicken") );
        c.setCheckboxGroup( entreeGroup );
        entreePanel.add( c = new Checkbox("Veggie") );
        c.setCheckboxGroup( entreeGroup );
        entreeGroup.setCurrent( c );
        Panel orderPanel = new Panel();
        Button orderButton = new Button("Place Order");
        orderButton.addActionListener( this );
        orderPanel.add( orderButton );
        setLayout( new GridLayout(3, 1) );
        add( entreePanel );
        add( condimentsPanel );
        add( orderPanel );
    }
    public void actionPerformed(ActionEvent e) {
        takeOrder();
    }
    void takeOrder() {
        Checkbox c = entreeGroup.getCurrent();
            System.out.println( c.getLabel() + " sandwich" );
        Component [] components = condimentsPanel.getComponents();
        for (int i=0; i&lt; components.length; i++)
            if ( (c = (Checkbox)components[i]).getState() )
                System.out.println( "With " + c.getLabel() );
        System.out.println("Thank you, drive through...");
    }
}
</PRE>
</DIV>

<p class=para>
<tt class=literal>DriveThrough</tt> lays out two panels, each
containing three checkboxes. The checkboxes in the
<tt class=literal>entreePanel</tt> are tied together through a single
<tt class=literal>CheckboxGroup</tt> object. 
We call their <tt class=literal>setCheckboxGroup()</tt> methods to
put them in a single <tt class=literal>CheckboxGroup</tt> that
makes the checkboxes mutually exclusive. The
<tt class=literal>CheckboxGroup</tt> object is an odd animal. One
expects it to be a container or a component, but it isn't; it's simply
a helper object that coordinates the functionality of the
<tt class=literal>Checkbox</tt> objects. Because a
<tt class=literal>CheckboxGroup</tt> isn't a container, it
doesn't have an <tt class=literal>add()</tt> method. To put a
checkbox into a group, you call the
<tt class=literal>setCheckboxGroup()</tt> method of the
<tt class=literal>Checkbox</tt> class.

<p class=para>
Once a set of checkboxes have been placed in a checkbox group,
only one of the boxes may be checked at a time. In this applet, the
checkbox group forces you to choose a beef, chicken, or veggie entree,
but not more than one. The condiment choices, however, aren't in
a checkbox group, so you can request ketchup, mustard, and pickles on
your chicken sandwich.

<p class=para>
When the <b>Place
Order</b> button is 
pushed, we receive an <tt class=literal>ActionEvent</tt> via
our <tt class=literal>actionPerformed()</tt> method. At this
point, we gather the information in the checkboxes and 
print it. <tt class=literal>actionPerformed()</tt> simply calls
our <tt class=literal>takeOrder()</tt> method, which reads the
checkboxes. We could have saved references to the checkboxes in a number
of ways; 
this example demonstrates two. First, we find out which entree was
selected. 
To do so, we call the <tt class=literal>CheckboxGroup</tt>'s
<tt class=literal>getCurrent()</tt> method.
<tt class=literal>getCurrent()</tt> 
returns the selected <tt class=literal>Checkbox</tt>; we use
<tt class=literal>getLabel()</tt> to extract the entree's name.

<p class=para>
To find out which condiments were selected, we use a more
complicated procedure. The problem is that condiments aren't
mutually exclusive, so we don't have the convenience of a
<tt class=literal>CheckboxGroup</tt>. Instead, we ask the condiments
<tt class=literal>Panel</tt> for a list of its components. The
<tt class=literal>getComponent()</tt> method returns an array of
references to the container's child components. We'll use
this to loop over the components and print the results. We cast each
element of the array back to <tt class=literal>Checkbox</tt> and
call its 
<tt class=literal>getState()</tt> method to see if the checkbox
is on or 
off. Remember that if we were dealing with different types of
components, we could determine what kind of component we had with the
<tt class=literal>instanceof</tt> operator.

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch11_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>PopupMenus</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>ScrollPane and Scrollbars</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
