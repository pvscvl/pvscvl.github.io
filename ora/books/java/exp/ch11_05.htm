<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 11] 11.5 PopupMenus</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 19:01:11 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11<br>Using and Creating GUI Components</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch11_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch11-SECT1-AUTOID.3">11.5 PopupMenus</A></h2>

<p class=para>
One of the new components in Java 1.1 is the
<tt class=literal>PopupMenu</tt>: a menu that automatically
appears when you press the appropriate mouse button inside of a
component. Which button you press depends on the platform you're
using; fortunately you don't have to care.

<p class=para>
The care and feeding of a <tt class=literal>PopupMenu</tt> is
basically the same as any other menu. You use a different constructor
(<tt class=literal>PopupMenu()</tt>) to create it, but otherwise,
you build a menu and add elements to it the same way. The big
difference is that you don't need to attach it to a
<tt class=literal>MenuBar</tt>, and consequently don't need to
worry about putting the <tt class=literal>MenuBar</tt> in a
<tt class=literal>Frame</tt>. Instead, you call
<tt class=literal>add()</tt> to add the
<tt class=literal>PopupMenu</tt> to any component. 

<p class=para>
The <tt class=literal>PopupColorMenu</tt> applet contains three
buttons. You can use a <tt class=literal>PopupMenu</tt> to set the color
of each button or the applet itself, depending on where you press the
mouse. (Setting the color of the applet also sets the buttons'
colors). <a href="ch11_02.htm">Figure 11.3</A> shows the applet in action;
the user is preparing to change the color of the right-most button.

<div class=figure>
<h4 class=figure><a class="TITLE" name="EXJ-CH-11-FIG-6">Figure 11.6: The PopupColorMenu Applet</A></h4>


<p>
<img align=middle src="figs/je1106.gif" alt="[Graphic: Figure 11-6]" width=503 height=223 border=0>

</DIV>

<div class=screen>
<p>
<pre>
import java.awt.*;
import java.awt.event.*;
public class PopUpColorMenu extends java.applet.Applet 
implements ActionListener {
    PopupMenu colorMenu;
    Component selectedComponent;
    public void init() {        
        add( new Button("One") );
        add( new Button("Two") );
        add( new Button("Three") );
        
        colorMenu = new PopupMenu("Color");
        colorMenu.add( makeMenuItem("Red") );
        colorMenu.add( makeMenuItem("Green") );
        colorMenu.add( makeMenuItem("Blue") );
        addMouseListener( new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                if ( e.isPopupTrigger() ) {
                    selectedComponent = getComponentAt( e.getX(), e.getY() );
                    colorMenu.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        } );
        add(colorMenu);
    }
    public void actionPerformed(ActionEvent e) {
        String color = e.getActionCommand();
        if ( color.equals("Red") )
            selectedComponent.setBackground( Color.red );
        else if ( color.equals("Green") )
            selectedComponent.setBackground( Color.green );
        else if ( color.equals("Blue") )
            selectedComponent.setBackground( Color.blue );
    }
    private MenuItem makeMenuItem(String label) {
        MenuItem item = new MenuItem(label);
        item.addActionListener( this );
        return item;
    }
}
</PRE>
</DIV>

<p class=para>
Because the popup menu is triggered by mouse events, we need to
register a <tt class=literal>MouseListener</tt>. In our call to
<tt class=literal>addMouseListener()</tt>, we create an 
anonymous inner class based on the
<tt class=literal>MouseAdapter</tt>. In this class, we override
the <tt class=literal>mousePressed()</tt> method to display the
popup menu when we get an appropriate event. How do we know what an
"appropriate event" is? Fortunately, we don't need to worry about the
specifics of our user's platform; we just need to call the event's
<tt class=literal>isPopupTrigger()</tt> method. If this method
returns <tt class=literal>true</tt>, we know the user has done
whatever normally displays a popup menu on his system.
<p class=para>
Once we know that the user wants to raise a popup menu, we figure out
which component the mouse is over by calling
<tt class=literal>getComponentAt()</tt>, with the coordinates of
the mouse click (given by <tt class=literal>e.getX()</tt> and
<tt class=literal>e.getY()</tt>). Then we display the popup menu
by calling its <tt class=literal>show()</tt> method, again with
the mouse coordinates as arguments.

<p class=para>
If we wanted to provide different menus for
different types of components or the background, we could
add a test within the check for the popup trigger:

<div class=screen>
<p>
<pre>
if ( e.isPopupTrigger() ) {
    selectedComponent = getComponentAt( e.getX(), e.getY() );
          
    if ( selectedComponent instanceof Button )
         colorMenu.show(e.getComponent(), 
                        e.getX(), e.getY());
    else if ( selectedComponent instanceof Applet )
            // show a menu for the background
    else if ( selectedComponent instanceof someOtherComponent )
            // show another menu
}
</PRE>
</DIV>

<p class=para>
The only thing left is to handle the action events from the popup menu
items. As in our earlier example, we use a helper method called
<tt class=literal>makeMenuItem()</tt> to register the applet as
an action listener for every item we add. The applet implements
<tt class=literal>ActionListener</tt> and has the required
<tt class=literal>actionPerformed()</tt> method. This method
reads the action command from the event, which is equal to the
selected menu item's label by default. It then sets the background
color of the selected component appropriately. 
</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch11_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Menus and Choices</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Checkboxes and CheckboxGroups</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
