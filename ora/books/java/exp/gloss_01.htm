<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title> Glossary</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 19:04:52 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch14_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Glossary</FONT></B></TD>
<td width=172 align=right valign=top>&nbsp;</td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=glossary>
<h1 class=glossary><a class="TITLE" name="EXJ-GLOSSARY">Glossary</A></H1>

<p class=para>
<dl>
<dt class=glossentry>abstract<dd class=glossdef>

<p class=para>

The <tt class=literal>abstract</tt> keyword is used to declare abstract
methods and classes. An abstract method has no implementation
defined; it is declared with arguments and a return type as usual, but
the body enclosed in curly braces is replaced with a semicolon. The
implementation of an abstract method is provided by a subclass of the
class in which it is defined. If an abstract method appears in a
class, the class is also abstract.
<p>
<dt class=glossentry>API (Application Programming Interface)<dd class=glossdef>

<p class=para>

An API consists of the functions and variables
programmers are use in their applications.  The Java
API consists of all <tt class=literal>public</tt> and
<tt class=literal>protected</tt> methods of all <tt class=literal>public</tt>
classes in the <tt class=literal>java.applet</tt>,
<tt class=literal>java.awt</tt>, <tt class=literal>java.awt.image</tt>,
<tt class=literal>java.awt.peer</tt>, <tt class=literal>java.io</tt>,
<tt class=literal>java.lang</tt>, <tt class=literal>java.net</tt>, and
<tt class=literal>java.util</tt> packages.

<p>
<dt class=glossentry>applet<dd class=glossdef>

<p class=para>
An embedded Java application that runs in the context of an applet
viewer, such as a Web browser.

<p>
<dt class=glossentry>&lt;applet&gt; tag<dd class=glossdef>

<p class=para>
HTML tag that specifies an applet run within a Web
document.

<p>
<dt class=glossentry>applet viewer<dd class=glossdef>

<p class=para>
An application that implements the additional structure
needed to run and display Java applets. An applet viewer can be a
Web browser like HotJava or Netscape Navigator, or a separate
program like Sun's <i class=emphasis>appletviewer</I>.

<p>
<dt class=glossentry>application<dd class=glossdef>

<p class=para>
A Java program that runs standalone; i.e., it doesn't require an applet viewer.

<p>
<dt class=glossentry>AWT (Abstract Windowing Toolkit)<dd class=glossdef>

<p class=para>

Java's platform-independent windowing, graphics, and user-interface
toolkit.

<p>
<dt class=glossentry>boolean<dd class=glossdef>

<p class=para>

A primitive Java data type that contains a truth value. The two
possible values of a <tt class=literal>boolean</tt> variable are
<tt class=literal>true</tt> and <tt class=literal>false</tt>.
<p>
<dt class=glossentry>byte<dd class=glossdef>

<p class=para>

A primitive Java data type that's an 8-bit two's-complement signed
number (in all implementations).
<p>
<dt class=glossentry>callback<dd class=glossdef>

<p class=para>
A behavior that is defined by one object and then later invoked by
another object when a particular event occurs.

<p>
<dt class=glossentry>cast<dd class=glossdef>

<p class=para>
A technique that explicitly converts one data type to another.

<p>
<dt class=glossentry>catch<dd class=glossdef>

<p class=para>

The <tt class=literal>catch</tt> statement introduces an exception-handling
block of code following a <tt class=literal>try</tt> statement. The
<tt class=literal>catch</tt> keyword is followed by an exception type
and argument name in parentheses, and a block of code within
curly braces.

<p>
<dt class=glossentry>char<dd class=glossdef>

<p class=para>

A primitive Java data type; a variable of type <tt class=literal>char</tt>
holds a single 16-bit Unicode character.
<p>
<dt class=glossentry>class<dd class=glossdef>

<p class=para>

a) An encapsulated collection of data and methods to operate on
the data. A class may be instantiated to produce an
object that's an instance of the class.

<p class=para>

b) The <tt class=literal>class</tt> keyword is used to declare a class,
thereby defining a new object type. Its syntax is similar
to the <tt class=literal>struct</tt> keyword in C.

<p>
<dt class=glossentry>class loader<dd class=glossdef>

<p class=para>
An object in the Java security model that is responsible for loading
Java binary classes from the network into the local interpreter. A
class loader keeps its classes in a separate namespace, so that loaded
classes cannot interact with system classes and breach system
security.

<p>
<dt class=glossentry>class method<dd class=glossdef>

<p class=para>

A method declared <tt class=literal>static</tt>. Methods of this type are
not passed implicit <tt class=literal>this</tt> references and may
refer only to class variables and invoke other class methods of
the current class. A class method may be invoked through
the class name, rather than through an instance of the
class.

<p>
<dt class=glossentry>class path<dd class=glossdef>

<p class=para>
The directory path specifying the location of compiled Java class files
on the local system.

<p>
<dt class=glossentry>class variable<dd class=glossdef>

<p class=para>

A variable declared <tt class=literal>static</tt>. Variables of this type
are associated with the class, rather than with a particular
instance of the class. There is only one copy of a static
variable, regardless of the number of instances of the class
that are created.

<p>
<dt class=glossentry>client<dd class=glossdef>

<p class=para>
The application that initiates a conversation as part of a networked
client/server application. See server.

<p>
<dt class=glossentry>compilation unit<dd class=glossdef>

<p class=para>
The source code for a Java class.  A compilation unit normally
contains a single class definition, and in most current development
environments is just a file with a <i class=emphasis>.java</I>
extension.

<p>
<dt class=glossentry>compiler<dd class=glossdef>

<p class=para>
A program that translates source code into executable code.
<p>
<dt class=glossentry>component<dd class=glossdef>

<p class=para>

Any of the GUI primitives implemented in the
<tt class=literal>java.awt</tt> package as subclasses of <tt class=literal>Component</tt>.
The classes <tt class=literal>Button</tt>, <tt class=literal>Choice</tt>, and
<tt class=literal>TextField</tt> (among many others) are components.

<p>
<dt class=glossentry>composition<dd class=glossdef>

<p class=para>

Using objects as part of another, more complex object. When you
compose a new object, you create complex behavior by delegating tasks
to the internal objects. Composition is different from inheritance,
which defines a new object by changing or refining the behavior of an
old object. See inheritance.
<p>
<dt class=glossentry>constructor<dd class=glossdef>

<p class=para>

A method that is invoked automatically when a new instance
of a class is created. Constructors are used to initialize
the variables of the newly created object. The constructor 
method has the same name as the class.

<p>
<dt class=glossentry>container<dd class=glossdef>

<p class=para>

One of the <tt class=literal>java.awt</tt> classes that "contain"
GUI components. Components in a container appear
within the boundaries of the container. The classes
<tt class=literal>Dialog</tt>, <tt class=literal>Frame</tt>,
<tt class=literal>Panel</tt>, and <tt class=literal>Window</tt> are
containers.
<p>
<dt class=glossentry>content handler<dd class=glossdef>

<p class=para>
A class that recognizes the content type of particular
data, parses it, and converts it to an appropriate object.

<p>
<dt class=glossentry>datagram<dd class=glossdef>

<p class=para>
A packet of data sent to a receiving computer without
warning, error checking, or other control information.

<p>
<dt class=glossentry>data hiding<dd class=glossdef>

<p class=para>

See encapsulation.
<p>
<dt class=glossentry>double<dd class=glossdef>

<p class=para>

A Java primitive data type;a <tt class=literal>double</tt> value is a
64-bit (double-precision) floating-point number.

<p>
<dt class=glossentry>encapsulation<dd class=glossdef>

<p class=para>

An object-oriented programming technique that makes an object's data
<tt class=literal>private</tt> or <tt class=literal>protected</tt> (i.e.,
hidden) and allows programmers to access and manipulate that data only
through method calls. Done well, encapsulation reduces bugs and
promotes reusability and modularity of classes. This technique is also
known as data hiding.
<p>
<dt class=glossentry>event<dd class=glossdef>

<p class=para>
A user's action, such as a mouse click or key press.

<p>
<dt class=glossentry>exception<dd class=glossdef>

<p class=para>

A signal that some unexpected condition has occurred in the
program. In Java, exceptions are objects that are subclasses of
<tt class=literal>Exception</tt> or <tt class=literal>Error</tt> (which
themselves are subclasses of <tt class=literal>Throwable</tt>). Exceptions
in Java are "raised" with the <tt class=literal>throw</tt> keyword and
received with the <tt class=literal>catch</tt> keyword. See
<tt class=literal>throw</tt>, <tt class=literal>throws</tt>, and
<tt class=literal>catch</tt>.

<p>
<dt class=glossentry>extends<dd class=glossdef>

<p class=para>

The <tt class=literal>extends</tt> keyword is used in a
<tt class=literal>class</tt> declaration to specify the superclass of the
class being defined. The class being defined has access to all the
<tt class=literal>public</tt> and <tt class=literal>protected</tt> variables
and methods of the superclass (or, if the class being defined is in
the same package, it has access to all non-<tt class=literal>private</tt>
variables and methods). If a class definition omits the
<tt class=literal>extends</tt> clause, its superclass is taken to be
<tt class=literal>java.lang.Object</tt>.  
<p>
<dt class=glossentry>final<dd class=glossdef>

<p class=para>

The <tt class=literal>final</tt> keyword is a modifier that may be applied
to classes, methods, and variables. It has a similar, but not
identical meaning in each case. When <tt class=literal>final</tt> is
applied to a class, it means that the class may never be
subclassed. <tt class=literal>java.lang.System</tt> is an example of a
<tt class=literal>final</tt> class. When <tt class=literal>final</tt> is
applied to a variable, the variable is a constant; i.e., it can't be
modified.
<p>
<dt class=glossentry>finalize<dd class=glossdef>

<p class=para>

<tt class=literal>finalize</tt> is not actually a Java keyword, but a
reserved method name. The finalizer is called when an object is no
longer being used (i.e., when there are no further references to it),
but before the object's memory is actually reclaimed by the system. A
finalizer should perform cleanup tasks and free system resources not
handled by Java's garbage-collection system.

<p>
<dt class=glossentry>finally<dd class=glossdef>

<p class=para>

This keyword introduces the <tt class=literal>finally</tt> block of a
<tt class=literal>try</tt>/<tt class=literal>catch</tt>/<tt class=literal>finally</tt>
construct.  <tt class=literal>catch</tt> and <tt class=literal>finally</tt>
blocks provide exception handling and routine cleanup for code in
a <tt class=literal>try</tt> block. The <tt class=literal>finally</tt> block
is optional, and appears after the <tt class=literal>try</tt> block, and
after zero or more <tt class=literal>catch</tt> blocks. The code in a
<tt class=literal>finally</tt> block is executed once, regardless of how
the code in the <tt class=literal>try</tt> block executes. In normal
execution, control reaches the end of the <tt class=literal>try</tt> block
and proceeds to the <tt class=literal>finally</tt> block, which
generally performs any necessary cleanup.
<p>
<dt class=glossentry>float<dd class=glossdef>

<p class=para>

A Java primitive data type; a <tt class=literal>float</tt> value is a
32-bit (single-precision) floating-point number represented in
IEEE 754 format.

<p>
<dt class=glossentry>garbage collection<dd class=glossdef>

<p class=para>

The process of reclaiming the memory of objects no
longer in use. An object is no longer in use when there are
no references to it from other objects in the system and
no references in any local variables on the method call
stack.

<p>
<dt class=glossentry>GC<dd class=glossdef>

<p class=para>

An abbreviation for garbage collection or garbage collector (or
occasionally "graphics context").

<p>
<dt class=glossentry>graphics context<dd class=glossdef>

<p class=para>
A drawable surface represented by the <tt class=literal>java.awt.Graphics</tt>
class.  A graphics context contains contextual information about the
drawing area and provides methods for performing drawing operations in
it.

<p>
<dt class=glossentry>GUI (graphical user interface)<dd class=glossdef>

<p class=para>

A GUI is a user interface constructed from
graphical push buttons, text fields, pull-down menus, dialog boxes,
and other standard interface components.  In Java,
GUIs are implemented with the classes in the
<tt class=literal>java.awt</tt> package.

<p>
<dt class=glossentry>hashcode<dd class=glossdef>

<p class=para>
An arbitrary-looking identifying number used as a kind of signature
for an object. A hashcode stores an object in a hashtable.  See
hashtable.

<p>
<dt class=glossentry>hashtable<dd class=glossdef>

<p class=para>
An object that is like a dictionary or an associative array.  A
hashtable stores and retrieves elements using key values called
hashcodes.  See hashcode.

<p>
<dt class=glossentry>hostname<dd class=glossdef>

<p class=para>
The name given to an individual computer attached to the Internet.

<p>
<dt class=glossentry>HotJava<dd class=glossdef>

<p class=para>
A WWW browser written in Java that is capable of
downloading and running Java applets.

<p>
<dt class=glossentry>ImageConsumer<dd class=glossdef>

<p class=para>

An interface for receiving image data from an image source. Image
consumers are usually implemented by the <tt class=literal>awt.peer</tt>
interface, so they are largely invisible to programmers.
<p>
<dt class=glossentry>ImageObserver<dd class=glossdef>

<p class=para>

An interface in the <tt class=literal>java.awt.image</tt> package that
receives information about the status of an image being
constructed by a particular <tt class=literal>ImageConsumer</tt>.
<p>
<dt class=glossentry>ImageProducer<dd class=glossdef>

<p class=para>

An interface in the <tt class=literal>java.awt.image</tt> package that
represents an image source (i.e., a source of pixel data).
<p>
<dt class=glossentry>implements<dd class=glossdef>

<p class=para>

The <tt class=literal>implements</tt> keyword is used in class
declarations to indicate that the class implements the named interface
or interfaces. The <tt class=literal>implements</tt> clause is optional in
class declarations; if it appears, it must follow the
<tt class=literal>extends</tt> clause (if any). If an
<tt class=literal>implements</tt> clause appears in the declaration of a
non-<tt class=literal>abstract</tt> class, every method from each
specified interface must be implemented by the class or by one of its
superclasses.
<p>
<dt class=glossentry>import<dd class=glossdef>

<p class=para>

The <tt class=literal>import</tt> statement makes Java classes available
to the current class under an abbreviated name. (Java classes are
always available by their fully qualified name, assuming the
appropriate class file can be found relative to the
<tt class=literal>CLASSPATH</tt> environment variable and that the class
file is readable. <tt class=literal>import</tt> doesn't make the class
available; it just saves typing and makes your code more legible). Any
number of <tt class=literal>import</tt> statements may appear in a Java
program. They must appear, however, after the optional
<tt class=literal>package</tt> statement at the top of the file, and
before the first class or interface definition in the file.
<p>
<dt class=glossentry>inheritance<dd class=glossdef>

<p class=para>

An important feature of object-oriented programming that involves
defining a new object by changing or refining the behavior of an
existing object. That is, an object implicitly contains all the
non-<tt class=literal>private</tt> variables of its superclass and can
invoke all the non-<tt class=literal>private</tt> methods of its
superclass. Java supports single inheritance of classes and multiple
inheritance of interfaces.
<p>
<dt class=glossentry>instance<dd class=glossdef>

<p class=para>

An object. When a class is instantiated to produce an object, we say
the object is an instance of the class.

<p>
<dt class=glossentry>instance method<dd class=glossdef>

<p class=para>

A non-<tt class=literal>static</tt> method of a class. Such a method is
passed an implicit <tt class=literal>this</tt> reference to the object that
invoked it. See also class method and <tt class=literal>static</tt>.

<p>
<dt class=glossentry>instanceof<dd class=glossdef>

<p class=para>

<tt class=literal>instanceof</tt> is a Java operator that returns
<tt class=literal>true</tt> if the object on its left-hand side is an
instance of the class (or implements the interface)
specified on its right-hand side. <tt class=literal>instanceof</tt>
returns <tt class=literal>false</tt> if the object is not an instance of
the specified class or does not implement the specified
interface. It also returns <tt class=literal>false</tt> if the specified
object is <tt class=literal>null</tt>.
<p>
<dt class=glossentry>instance variable<dd class=glossdef>

<p class=para>

A non-<tt class=literal>static</tt> variable of a class. Copies of such
variables occur in every instance of the created class. See also class
variable and <tt class=literal>static</tt>.

<p>
<dt class=glossentry>int<dd class=glossdef>

<p class=para>

A primitive Java data type that's a 32-bit two's-complement signed
number (in all implementations).
<p>
<dt class=glossentry>interface<dd class=glossdef>

<p class=para>

The <tt class=literal>interface</tt> keyword is used to declare an
interface. More generally, an interface defines a list of methods that enables
a class to implement the interface itself.
<p>
<dt class=glossentry>interpreter<dd class=glossdef>

<p class=para>
The module that decodes and executes Java bytecode.

<p>
<dt class=glossentry>ISO8859-1<dd class=glossdef>

<p class=para>

An 8-bit character encoding standardized by the
ISO. This encoding is also known as Latin-1 and
contains characters from the Latin alphabet suitable for English and
most languages of western Europe.

<p>
<dt class=glossentry>ISO10646<dd class=glossdef>

<p class=para>

A 4-byte character encoding that includes all of the world's national
standard character encodings. Also known as
UCS. The 2-byte Unicode character set maps to the
range 0x00000000 to 0x0000FFFF of ISO 10646.
<p>
<dt class=glossentry>Java WorkShop<dd class=glossdef>

<p class=para>

Sun's Web browser-based tool written in Java for the development
of Java applications.
<p>
<dt class=glossentry>JDK (Java Development Kit)<dd class=glossdef>

<p class=para>

A package of software distributed by Sun Microsystems for Java
developers. It includes the Java interpreter, Java classes, and Java
development tools: compiler, debugger, disassembler, appletviewer,
stub file generator, and documentation generator.
<p>
<dt class=glossentry>JavaScript<dd class=glossdef>

<p class=para>

A language for creating dynamic Web pages developed by Netscape. From
a programmer's point of view, it's unrelated to Java, although some of
its capabilities are similar. Internally, there may be a relationship,
but even that is unclear.
<p>
<dt class=glossentry>layout manager<dd class=glossdef>

<p class=para>
An object that controls the arrangement of components within the
display area of a container.  The <tt class=literal>java.awt</tt> package
contains a number of layout managers that provide different layout
styles.

<p>
<dt class=glossentry>Latin-1<dd class=glossdef>

<p class=para>
A nickname for ISO8859-1.

<p>
<dt class=glossentry>local variable<dd class=glossdef>

<p class=para>
A variable that is declared inside a single method.  A local variable
can be seen only by code within that method.

<p>
<dt class=glossentry>long<dd class=glossdef>

<p class=para>

A primitive Java data type that's a 64-bit
two's-complement signed number (in all implementations).

<p>
<dt class=glossentry>method<dd class=glossdef>

<p class=para>

The object-oriented programming term for a function or
procedure. 

<p>
<dt class=glossentry>method overloading<dd class=glossdef>

<p class=para>
Providing definitions of more than one method with the same name but
with different argument lists or return values. When an overloaded
method is called, the compiler determines which one is intended by
examining the supplied argument types.

<p>
<dt class=glossentry>method overriding<dd class=glossdef>

<p class=para>
Defining a method that exactly matches (i.e., same name,
same argument types, and same return type) a method defined
in a superclass. When an overridden method is invoked, the
interpreter uses "dynamic method lookup" to determine which
method definition is applicable to the current object.

<p>
<dt class=glossentry>modifier<dd class=glossdef>

<p class=para>
A keyword placed before a class, variable, or method that alters
the item's accessibility, behavior, or semantics.  See
<tt class=literal>abstract</tt>, <tt class=literal>final</tt>,
<tt class=literal>native</tt>, <tt class=literal>private</tt>,
<tt class=literal>private protected</tt>, <tt class=literal>protected</tt>,
<tt class=literal>public</tt>, <tt class=literal>static</tt>, and
<tt class=literal>synchronized</tt>.

<p>
<dt class=glossentry>Model/View/Controller (MVC)
framework<dd class=glossdef>

<p class=para>

A user-interface design that originated in Smalltalk.  In
MVC, the data for a display item is called the
"model." A "view" displays a particular representation of the model,
and a "controller" provides user interaction with both. Java
incorporates many MVC concepts.
<p>
<dt class=glossentry>NaN (not-a-number)<dd class=glossdef>

<p class=para>

This is a special value of the <tt class=literal>double</tt> and
<tt class=literal>float</tt> data types that represents an undefined
result of a mathematical operation, such as zero divided by zero.

<p>
<dt class=glossentry>native<dd class=glossdef>

<p class=para>

<tt class=literal>native</tt> is a modifier that may be applied to method
declarations. It indicates that the method is implemented
(elsewhere) in C, or in some other platform-dependent
fashion. A <tt class=literal>native</tt> method should have a semicolon
instead of a body. A <tt class=literal>native</tt> method cannot be
<tt class=literal>abstract</tt>, but all other method modifiers may be used
with <tt class=literal>native</tt> methods.

<p>
<dt class=glossentry>native method<dd class=glossdef>

<p class=para>
A method that is implemented in a native language on a host
platform, rather than being implemented in Java.  Native methods
provide access to such resources as the network, the windowing
system, and the host filesystem.

<p>
<dt class=glossentry>new<dd class=glossdef>

<p class=para>

<tt class=literal>new</tt> is a unary operator that creates a new object or
array (or raises an <tt class=literal>OutOfMemoryException</tt> if there is
not enough memory available).

<p>
<dt class=glossentry>null<dd class=glossdef>

<p class=para>

<tt class=literal>null</tt> is a special value that indicates a variable
doesn't refer to any object. The value <tt class=literal>null</tt> may be
assigned to any class or interface variable. It cannot be cast to any
integral type, and should not be considered equal to zero, as in C.

<p>
<dt class=glossentry>object<dd class=glossdef>

<p class=para>

An instance of a class. A class models a group
of things; an object models a particular member of that
group.

<p>
<dt class=glossentry>package<dd class=glossdef>

<p class=para>

The <tt class=literal>package</tt> statement specifies which package the
code in the file is part of. Java code that is part of a particular
package has access to all classes (<tt class=literal>public</tt> and
non-<tt class=literal>public</tt>) in the package, and all
non-<tt class=literal>private</tt> methods and fields in all those
classes. When Java code is part of a named package, the compiled class
file must be placed at the appropriate position in the
<tt class=literal>CLASSPATH</tt> directory hierarchy before it can be
accessed by the Java interpreter or other utilities.  If the
<tt class=literal>package</tt> statement is omitted from a file, the code
in that file is part of an unnamed default package.  This is
convenient for small test programs, or during development because it
means the code can be interpreted from the current directory.

<p>
<dt class=glossentry>&lt;param&gt; tag<dd class=glossdef>

<p class=para>

HTML tag used within
<tt class=literal>&lt;applet&gt;</tt>
... <tt class=literal>&lt;/applet&gt;</tt> to specify a named parameter
and string value to an applet within a Web page.
<p>
<dt class=glossentry>peer<dd class=glossdef>

<p class=para>
 

The actual implementation of a GUI component on a
specific platform.  Peer components reside within a
<tt class=literal>Toolkit</tt> object. See <tt class=literal>Toolkit</tt>.
<p>
<dt class=glossentry>primitive type<dd class=glossdef>

<p class=para>

One of the Java data types: <tt class=literal>boolean</tt>,
<tt class=literal>char</tt>, <tt class=literal>byte</tt>,
<tt class=literal>short</tt>, <tt class=literal>int</tt>,
<tt class=literal>long</tt>, <tt class=literal>float</tt>,
<tt class=literal>double</tt>. Primitive types are manipulated, assigned,
and passed to methods "by value" (i.e., the actual bytes of the data
are copied).  See also reference type.

<p>
<dt class=glossentry>private<dd class=glossdef>

<p class=para>

The <tt class=literal>private</tt> keyword is a visibility modifier that
can be applied to method and field variables of classes. A
<tt class=literal>private</tt> field is not visible outside its class
definition.
<p>
<dt class=glossentry>private protected<dd class=glossdef>

<p class=para>

When the <tt class=literal>private</tt> and <tt class=literal>protected</tt>
visibility modifiers are both applied to a variable or method in a
class, they indicate the field is visible only within the class
itself and within subclasses of the class. Note that subclasses can
access only <tt class=literal>private protected</tt> fields within
themselves or within other objects that are subclasses; they cannot
access those fields within instances of the superclass.
<p>
<dt class=glossentry>protected<dd class=glossdef>

<p class=para>

The <tt class=literal>protected</tt> keyword is a visibility modifier that
can be applied to method and field variables of classes. A
<tt class=literal>protected</tt> field is visible only within its class,
within subclasses, or within the package of which its class is a
part. Note that subclasses in different packages can access only
<tt class=literal>protected</tt> fields within themselves or within other
objects that are subclasses; they cannot access protected fields
within instances of the superclass.
<p>
<dt class=glossentry>protocol handler<dd class=glossdef>

<p class=para>

Software that describes and enables the use of a new protocol. A
protocol handler consists of two classes: a
<tt class=literal>StreamHandler</tt> and a
<tt class=literal>URLConnection</tt>.
<p>
<dt class=glossentry>public<dd class=glossdef>

<p class=para>

The <tt class=literal>public</tt> keyword is a visibility modifier that
can be applied to classes and interfaces and to the method and field
variables of classes and interfaces. A <tt class=literal>public</tt> class
or interface is visible everywhere. A non-<tt class=literal>public</tt>
class or interface is visible only within its package. A
<tt class=literal>public</tt> method or variable is visible everywhere its
class is visible. When none of the <tt class=literal>private</tt>,
<tt class=literal>protected</tt> or <tt class=literal>public</tt> modifiers is
specified, a field is visible only within the package of which its
class is a part.
<p>
<dt class=glossentry>reference type<dd class=glossdef>

<p class=para>

Any object or array. Reference types are manipulated,
assigned, and passed to methods "by reference." In other words, the
underlying value is not copied; only a reference to it is.
See also primitive type.

<p>
<dt class=glossentry>root<dd class=glossdef>

<p class=para>

The base of a hierarchy, such as a root class, whose descendants are
subclasses. The <tt class=literal>java.lang.Object</tt> class serves as
the root of the Java class hierarchy.
<p>
<dt class=glossentry>SecurityManager<dd class=glossdef>

<p class=para>

The Java class that defines the methods the system calls to check
whether a certain operation is permitted in the current environment.
<p>
<dt class=glossentry>server<dd class=glossdef>

<p class=para>
The application that accepts a request for a conversation as part of a
networked client/server application.  See client.

<p>
<dt class=glossentry>shadow<dd class=glossdef>

<p class=para>

To declare a variable with the same name as a variable defined in a
superclass. We say the variable "shadows" the superclass's
variable. Use the <tt class=literal>super</tt> keyword to refer to the
shadowed variable, or refer to it by casting the object to the type of
the superclass.

<p>
<dt class=glossentry>short<dd class=glossdef>

<p class=para>

A primitive Java data type that's a 16-bit two's-complement signed
number (in all implementations).
<p>
<dt class=glossentry>socket<dd class=glossdef>

<p class=para>

An interface that listens for connections from clients on a data port
and connects the client data stream with the receiving application.
<p>
<dt class=glossentry>static<dd class=glossdef>

<p class=para>

The <tt class=literal>static</tt> keyword is a modifier applied to method
and variable declarations within a class. A <tt class=literal>static</tt>
variable is also known as a class variable as opposed to
non-<tt class=literal>static</tt> instance variables.  While each instance
of a class has a full set of its own instance variables, there is only
one copy of each <tt class=literal>static</tt> class variable, regardless
of the number of instances of the class (perhaps zero) that are
created.  <tt class=literal>static</tt> variables may be accessed by class
name or through an instance. Non-<tt class=literal>static</tt> variables
can be accessed only through an instance.
<p>
<dt class=glossentry>stream<dd class=glossdef>

<p class=para>

A flow of data, or a channel of communication. All fundamental I/O
in Java is based on streams.
<p>
<dt class=glossentry>String<dd class=glossdef>

<p class=para>

A class used to represent textual information. The
<tt class=literal>String</tt> class includes many methods for operating on
string objects. Java overloads the + operator for string
concatenation.
<p>
<dt class=glossentry>subclass<dd class=glossdef>

<p class=para>

A class that extends another. The subclass inherits the
<tt class=literal>public</tt> and <tt class=literal>protected</tt> methods and
variables of its superclass. See <tt class=literal>extends</tt>.
<p>
<dt class=glossentry>super<dd class=glossdef>

<p class=para>

The keyword <tt class=literal>super</tt> refers to the same value as
<tt class=literal>this</tt>: the instance of the class for which the
current method (these keywords are valid only within
non-<tt class=literal>static</tt> methods) was invoked. While the type of
<tt class=literal>this</tt> is the type of the class in which the method
appears, the type of <tt class=literal>super</tt> is the type of the
superclass of the class in which the method appears.
<tt class=literal>super</tt> is usually used to refer to superclass
variables shadowed by variables in the current class. Using
<tt class=literal>super</tt> in this way is equivalent to casting
<tt class=literal>this</tt> to the type of the superclass.
<p>
<dt class=glossentry>superclass<dd class=glossdef>

<p class=para>

A class extended by some other class. The superclass's
<tt class=literal>public</tt> and <tt class=literal>protected</tt> methods and
variables are available to the subclass. See
<tt class=literal>extends</tt>.

<p>
<dt class=glossentry>synchronized<dd class=glossdef>

<p class=para>

The <tt class=literal>synchronized</tt> keyword is used in two related
ways in Java: as a modifier and as a statement. First, it is a
modifier applied to class or instance methods.  It indicates that the
method modifies the internal state of the class or the internal state
of an instance of the class in a way that is not thread-safe. Before
running a <tt class=literal>synchronized</tt> class method, Java obtains a
lock on the class, to ensure that no other threads can modify the
class concurrently. Before running a <tt class=literal>synchronized</tt>
instance method, Java obtains a lock on the instance that invoked the
method, ensuring that no other threads can modify the object at the
same time.

<p class=para>
Java also supports a <tt class=literal>synchronized</tt> statement that 
serves to specify a "critical section" of code. The
<tt class=literal>synchronized</tt> keyword is followed by an expression in
parentheses, and a statement or block of statements. The
expression must evaluate to an object or array. Java
obtains a lock on the specified object or array before
executing the statements.

<p>
<dt class=glossentry>TCP<dd class=glossdef>

<p class=para>

Transmission Control Protocol. A connection-oriented, reliable
protocol. One of the protocols on which the Internet is based.
<p>
<dt class=glossentry>this<dd class=glossdef>

<p class=para>

Within an instance method or constructor of a class,
<tt class=literal>this</tt> refers to "this object"--the instance currently
being operated on. It is useful to refer to an instance
variable of the class that has been shadowed by a local
variable or method argument. It is also useful to pass the
current object as an argument to static methods or
methods of other classes.

<p class=para>
There is one additional use of <tt class=literal>this</tt>: when it
appears as the first statement in a constructor method, it refers to
one of the other constructors of the class.
<p>
<dt class=glossentry>thread<dd class=glossdef>

<p class=para>

A single, independent stream of execution within a program.
Since Java is a "multithreaded" programming language, more
than one thread may be running within the Java interpreter
at a time. Threads in Java are represented and controlled
through the <tt class=literal>Thread</tt> object.

<p>
<dt class=glossentry>throw<dd class=glossdef>

<p class=para>

The <tt class=literal>throw</tt> statement signals that an exceptional
condition has occurred by throwing a specified exception
object. This statement stops program execution and
resumes it at the nearest containing <tt class=literal>catch</tt> statement
that can handle the specified exception object. Note that
the <tt class=literal>throw</tt> keyword must be followed by an exception
object, not an exception class.
<p>
<dt class=glossentry>throws<dd class=glossdef>

<p class=para>

The <tt class=literal>throws</tt> keyword is used in a method declaration
to list the exceptions the method can throw. Any exceptions a method
can raise that are not subclasses of <tt class=literal>Error</tt> or
<tt class=literal>RuntimeException</tt> must either be caught within the
method or declared in the method's <tt class=literal>throws</tt> clause.
<p>
<dt class=glossentry>Toolkit<dd class=glossdef>

<p class=para>

The property of the Java API that defines the look
and feel of the user interface on a specific platform.
<p>
<dt class=glossentry>try<dd class=glossdef>

<p class=para>

The <tt class=literal>try</tt> keyword indicates a block of code to which
subsequent <tt class=literal>catch</tt> and <tt class=literal>finally</tt>
clauses apply. The <tt class=literal>try</tt> statement itself performs no
special action. See the entries for <tt class=literal>catch</tt> and
<tt class=literal>finally</tt> for more information on the
<tt class=literal>try</tt>/<tt class=literal>catch</tt>/<tt class=literal>finally</tt>
construct.
<p>
<dt class=glossentry>UCS (universal character set)<dd class=glossdef>

<p class=para>

A synonym for ISO10646.  
<p>
<dt class=glossentry>UDP<dd class=glossdef>

<p class=para>

User Datagram Protocol. A connectionless unreliable
protocol. UDP describes a network data connection
based on datagrams with little packet control.
<p>
<dt class=glossentry>Unicode<dd class=glossdef>

<p class=para>

A 16-bit character encoding that includes all of the world's commonly
used alphabets and ideographic character sets in a "unified" form
(i.e., a form from which duplications among national standards have
been removed). ASCII and Latin-1 characters may be
trivially mapped to Unicode characters. Java uses Unicode for its
<tt class=literal>char</tt> and <tt class=literal>String</tt> types.
<p>
<dt class=glossentry>UTF-8 (UCS transformation format 8-bit form)<dd class=glossdef>

<p class=para>

An encoding for Unicode characters (and more generally,
UCS characters) commonly used for transmission and
storage. It is a multibyte format in which different characters
require different numbers of bytes to be represented.

<p>
<dt class=glossentry>vector<dd class=glossdef>

<p class=para>
A dynamic array of elements.

<p>
<dt class=glossentry>verifier<dd class=glossdef>

<p class=para>
A theorem prover that steps through the Java byte-code before it
is run and makes sure that it is well-behaved.  The byte-code
verifier is the first line of defense in Java's security model.</DL>
</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch14_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top>&nbsp;</td>
</tr>
<tr>
<td width=172 align=left valign=top>Working with Audio</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>&nbsp;</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</body>
</html>
