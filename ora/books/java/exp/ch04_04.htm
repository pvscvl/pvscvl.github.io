<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 4] 4.4 Statements and Expressions</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 18:50:57 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_03.htm#EXJ-CH-4-SECT-3.3"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 4<br>The Java Language</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch04_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="EXJ-CH-4-SECT-4">4.4 Statements and Expressions</A></h2>

<p class=para>
Although the method declaration syntax of Java is quite different from
that of C++, Java statement and expression syntax is very much like that of
C. Again, the design intention was to make the low-level details of
Java easily accessible to C programmers, so that they can concentrate
on learning the parts of the language that are really different. Java
<i class=emphasis>statements</I> appear inside of methods and 
class and variable initializers; they describe all activities of a Java
program. Variable declarations and initializations like those in the
previous section are statements, as are the basic language structures
like conditionals and loops. <i class=emphasis>Expressions</I> are
statements that produce a result that can be used as part of another
statement. Method calls, object allocations, and, of course,
mathematical expressions are examples of expressions.

<p class=para>
One of the tenets of Java is to keep things simple and consistent. To
that end, when there are no other constraints, evaluations and
initializations in Java always occur in the order in which they appear
in the code--from left to right. We'll see this rule used
in the evaluation of assignment expressions, method calls, and array
indexes, to name a few cases. In some other languages, the order of
evaluation is more complicated or even implementation dependent. Java
removes this element of danger by precisely and simply defining how
the code is evaluated. This doesn't, however, mean you should start
writing obscure and convoluted statements. Relying on the order of
evaluation of expressions is a bad programming habit, even when
it works. It produces code that is hard to read and harder to
modify. Real programmers, however, are not made of stone, and you may
catch me doing this once or twice when I can't resist the urge to
write terse code.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-4-SECT-4.1">Statements</A></h3>

<p class=para>
<a name="CH04.STATE1"></A>As in C or C++, statements and expressions in Java appear within a
<i class=emphasis>code block</I>. A code block is syntactically just a
number of statements surrounded by an open curly brace
(<tt class=literal>{</tt>) and a close curly brace (<tt class=literal>}</tt>). The
statements in a code block can contain variable declarations:

<div class=programlisting>
<p>
<pre>
{ 
    int size = 5; 
    setName("Max"); 
    ... 
} 
</PRE>
</DIV>

<p class=para>
Methods, which look like C functions, are in a sense code blocks that
take parameters and can be called by name.

<div class=programlisting>
<p>
<pre>
setupDog( String name ) { 
    int size = 5; 
    setName( name ); 
    ... 
} 
</PRE>
</DIV>

<p class=para>
Variable declarations are limited in scope to their enclosing code block. 
That is, they can't be seen outside of the nearest set of braces: 

<div class=programlisting>
<p>
<pre>
{ 
    int i = 5; 
} 
 
i = 6;           // compile time error, no such variable i 
</PRE>
</DIV>

<p class=para>
In this way, code blocks can be used to arbitrarily group other
statements and variables. The most common use of code blocks, however,
is to define a group of statements for use in a conditional or
iterative statement.

<p class=para>
Since a code block is itself collectively treated as a
statement, we define a conditional like an
<tt class=literal>if/else</tt> clause as follows:

<div class=programlisting>
<p>
<pre>
if ( <tt class=replaceable><i>condition</i></tt> ) 
    <tt class=replaceable><i>statement</i></tt>; 
[ else 
    <tt class=replaceable><i>statement;</i></tt> ] 
</PRE>
</DIV>

<p class=para>
Thus, <tt class=literal>if/else</tt> in Java has the familiar
functionality of taking either of the forms:

<div class=programlisting>
<p>
<pre>
if ( <tt class=replaceable><i>condition</i></tt> ) 
    <tt class=replaceable><i>statement</i></tt>; 
</PRE>
</DIV>

<p class=para>
or: 

<div class=programlisting>
<p>
<pre>
if ( <tt class=replaceable><i>condition</i></tt> )  { 
    [ <tt class=replaceable><i>statement;</i></tt> ] 
    [ <tt class=replaceable><i>statement;</i></tt> ] 
    [ ... ] 
} 
</PRE>
</DIV>

<p class=para>
Here the <tt class=replaceable><i>condition</i></tt> is a
<tt class=literal>boolean</tt> expression. In the second form, the
statement is a code block, and all of its enclosed statements are
executed if the conditional succeeds. Any variables declared within
that block are visible only to the statements within the successful
branch of the condition. Like the <tt class=literal>if/else</tt>
conditional, most of the remaining Java statements are concerned with
controlling the flow of execution. They act for the most part like
their namesakes in C or C++.

<p class=para>
 The
<tt class=literal>do</tt> and <tt class=literal>while</tt> iterative
statements have the familiar functionality, except that their
conditional test is also a <tt class=literal>boolean</tt> expression.  You
can't use an integer expression or a reference type; in other words
you must explicitly test your value. In other words, while
<tt class=literal>i==0</tt> is legitimate, <tt class=literal>i</tt> is not,
unless <tt class=literal>i</tt> is <tt class=literal>boolean</tt>. Here are
the forms of these two statements:

<div class=programlisting>
<p>
<pre>
while ( <tt class=replaceable><i>conditional</i></tt> ) 
    <tt class=replaceable><i>statement</i></tt>; 
 
do 
    <tt class=replaceable><i>statement</i></tt>; 
while ( <tt class=replaceable><i>conditional</i></tt> ); 
</PRE>
</DIV>

<p class=para>
The <tt class=literal>for</tt> statement also looks like it does in 
C: 

<div class=programlisting>
<p>
<pre>
for ( <tt class=replaceable><i>initialization</i></tt>; <tt class=replaceable><i>conditional</i></tt>; <tt class=replaceable><i>incrementor</i></tt> ) 
    <tt class=replaceable><i>statement</i></tt>; 
</PRE>
</DIV>

<p class=para>
The variable initialization expression can declare a new variable; this 
variable is limited to the scope of the <tt class=literal>for</tt> statement: 

<div class=programlisting>
<p>
<pre>
for (int i = 0; i &lt; 100; i++ ) { 
    System.out.println( i ) 
    int j = i; 
    ... 
} 
</PRE>
</DIV>

<p class=para>
Java doesn't support the C comma operator, which groups multiple
expressions into a single expression. However, you can use multiple,
comma-separated expressions in the initialization and increment
sections of the <tt class=literal>for</tt> loop. For example:

<div class=programlisting>
<p>
<pre>
for (int i = 0, j = 10; i &lt; j; i++, j-- ) { 
   ... } 
</PRE>
</DIV>

<p class=para>
The Java <tt class=literal>switch</tt> statement takes an integer type 
(or an argument that can be promoted to an integer type) and selects among 
a number of alternative <tt class=literal>case</tt> branches[2]
: 

<blockquote class=footnote>
<p class=para>[2] 
An object-based <tt class=literal>switch</tt> statement is desirable
and could find its way into the language someday.
</blockquote>
<div class=programlisting>
<p>
<pre>
switch ( int <tt class=replaceable><i>expression</i></tt> ) { 
    case int <tt class=replaceable><i>expression</i></tt> : 
        <tt class=replaceable><i>statement</i></tt>; 
    [ case int <tt class=replaceable><i>expression</i></tt> 
        <tt class=replaceable><i>statement</i></tt>; 
    ... 
    default : 
        <tt class=replaceable><i>statement</i></tt>;  ] 
} 
</PRE>
</DIV>

<p class=para>
No two of the <tt class=literal>case</tt> expressions can evaluate to the
same value. As in C, an optional <tt class=literal>default</tt> case can
be specified to catch unmatched conditions. Normally, the special
statement <tt class=literal>break</tt> is used to terminate a branch of
the <tt class=literal>switch</tt>:

<div class=programlisting>
<p>
<pre>
switch ( retVal ) { 
    case myClass.GOOD : 
        // something good 
        break; 
    case myClass.BAD : 
        // something bad 
        break; 
    default :
        // neither one 
        break; 
} 
</PRE>
</DIV>

<p class=para>
The Java <tt class=literal>break</tt> statement and its friend
<tt class=literal>continue</tt> perform unconditional jumps out of a
loop or conditional statement. They differ from the corresponding
statements in C by taking an optional label as an argument. Enclosing
statements, like code blocks and iterators, can be labeled with
identifier statements:

<div class=programlisting>
<p>
<pre>
one: 
    while ( <tt class=replaceable><i>condition</i></tt> ) { 
        ... 
        two: 
            while ( <tt class=replaceable><i>condition</i></tt> ) { 
                ... 
                // break or continue point 
            } 
        // after two 
    } 
// after one 
</PRE>
</DIV>

<p class=para>
In the above example, a <tt class=literal>break</tt> or
<tt class=literal>continue</tt> without argument at the indicated position
would have the normal, C-style effect.  A <tt class=literal>break</tt>
would cause processing to resume at the point labeled "after
two"; a <tt class=literal>continue</tt> would immediately cause the
<tt class=literal>two</tt> loop to return to its condition test.

<p class=para>
The statement <tt class=literal>break</tt> <tt class=literal>two</tt>
at the indicated point would have the same effect as an ordinary
<tt class=literal>break</tt>, but <tt class=literal>break</tt>
<tt class=literal>one</tt> would break two levels and resume at the point
labeled "after one." Similarly,
<tt class=literal>continue</tt> <tt class=literal>two</tt> would serve as a
normal <tt class=literal>continue</tt>, but <tt class=literal>continue</tt>
<tt class=literal>one</tt> would return to the test of the
<tt class=literal>one</tt> loop. Multilevel <tt class=literal>break</tt> and
<tt class=literal>continue</tt> statements remove much of the need for the
evil <tt class=literal>goto</tt> statement in C and C++.

<p class=para>
There are a few Java statements we aren't going to discuss right
now. The <tt class=literal>try</tt>, <tt class=literal>catch</tt>, and
<tt class=literal>finally</tt> statements are used in exception handling,
as we'll discuss later in this chapter. The
<tt class=literal>synchronized</tt> statement in Java is used to
coordinate access to statements among multiple threads of execution;
see <a href="ch06_01.htm">Chapter 6, <i>Threads</i></A> for a discussion of thread
synchronization.

<p class=para>
On a final note, I should mention that the Java compiler flags
"unreachable" statements as compile-time errors. Of
course, when I say unreachable, I mean those statements the
compiler determines won't be called by a static look at
compile-time.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-4-SECT-4.3">Expressions</A></h3>

<p class=para>
<a name="CH04.STATE2"></A>As I said earlier, expressions are statements that produce a result
when they are evaluated. The value of an expression can be a numeric
type, as in an arithmetic expression; a reference type, as in an
object allocation; or the special type <tt class=literal>void</tt>, which
results from a call to a method that doesn't return a value. In the
last case, the expression is evaluated only for its side effects
(i.e., the work it does aside from producing a value). The type of an
expression is known at compile-time.  The value produced at run-time
is either of this type or, in the case of a reference type, a
compatible (assignable) type.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="EXJ-CH-4-SECT-4.3.1">Operators</A></h4>

<p class=para>
<a name="CH04.OPERATORS"></A>Java supports almost all standard C operators. These operators
also have the same precedence in Java as they do in C, as you can see
in <a href="#EXJ-CH-4-TAB-3">Table 4.3</A>.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="EXJ-CH-4-TAB-3">Table 4.3: Java Operators</A></CAPTION>
<tr class=row>
<th align="left">Precedence</TH>
<th align="left">Operator</TH>
<th align="left">Operand Type</TH>
<th align="left">Description</TH>
</TR>
<tr class=row>
<td align="left">1</TD>
<td align="left"><tt class=literal>++, --</tt></TD>
<td align="left">Arithmetic</TD>
<td align="left">Increment and decrement</TD>
</TR>
<tr class=row>
<td align="left">1</TD>
<td align="left"><tt class=literal>+, -</tt></TD>
<td align="left">Arithmetic</TD>
<td align="left">Unary plus and minus</TD>
</TR>
<tr class=row>
<td align="left">1</TD>
<td align="left"><tt class=literal>~</tt></TD>
<td align="left">Integral</TD>
<td align="left">Bitwise complement<a name="CH04.BIT"></A></TD>
</TR>
<tr class=row>
<td align="left">1</TD>
<td align="left"><tt class=literal>!</tt></TD>
<td align="left">Boolean<a name="CH04.BOOL"></A></TD>
<td align="left">Logical complement</TD>
</TR>
<tr class=row>
<td align="left">1</TD>
<td align="left">

<p class=para>
<tt class=literal>(</tt> <tt class=replaceable><i>type</i></tt> <tt class=literal>)</tt></TD>
<td align="left">Any</TD>
<td align="left">Cast</TD>
</TR>
<tr class=row>
<td align="left">2</TD>
<td align="left"><tt class=literal>*, /, %</tt></TD>
<td align="left">Arithmetic</TD>
<td align="left">Multiplication, division, remainder</TD>
</TR>
<tr class=row>
<td align="left">3</TD>
<td align="left"><tt class=literal>+, -</tt></TD>
<td align="left">Arithmetic</TD>
<td align="left">Addition and subtraction</TD>
</TR>
<tr class=row>
<td align="left">3</TD>
<td align="left"><tt class=literal>+</tt></TD>
<td align="left">String</TD>
<td align="left">String concatenation</TD>
</TR>
<tr class=row>
<td align="left">4</TD>
<td align="left"><tt class=literal>&lt;&lt;</tt></TD>
<td align="left">Integral</TD>
<td align="left">Left shift</TD>
</TR>
<tr class=row>
<td align="left">4</TD>
<td align="left"><tt class=literal>&gt;&gt;</tt></TD>
<td align="left">Integral</TD>
<td align="left">Right shift with sign extension</TD>
</TR>
<tr class=row>
<td align="left">4</TD>
<td align="left"><tt class=literal>&gt;&gt;&gt;</tt></TD>
<td align="left">Integral</TD>
<td align="left">Right shift with no extension</TD>
</TR>
<tr class=row>
<td align="left">5</TD>
<td align="left">

<p class=para>
<tt class=literal>&lt;, &lt;=, &gt;, &gt;=</tt></TD>
<td align="left">Arithmetic</TD>
<td align="left">Numeric comparison</TD>
</TR>
<tr class=row>
<td align="left">5</TD>
<td align="left"><tt class=literal>instanceof</tt></TD>
<td align="left">Object</TD>
<td align="left">Type comparison</TD>
</TR>
<tr class=row>
<td align="left">6</TD>
<td align="left"><tt class=literal>==, !=</tt></TD>
<td align="left">Primitive</TD>
<td align="left">Equality and inequality of value</TD>
</TR>
<tr class=row>
<td align="left">6</TD>
<td align="left"><tt class=literal>==, !=</tt></TD>
<td align="left">Object</TD>
<td align="left">Equality and inequality of reference</TD>
</TR>
<tr class=row>
<td align="left">7</TD>
<td align="left"><tt class=literal>&amp;</tt></TD>
<td align="left">Integral</TD>
<td align="left">Bitwise AND</TD>
</TR>
<tr class=row>
<td align="left">7</TD>
<td align="left"><tt class=literal>&amp;</tt></TD>
<td align="left">Boolean</TD>
<td align="left">Boolean AND</TD>
</TR>
<tr class=row>
<td align="left">8</TD>
<td align="left"><tt class=literal>^</tt></TD>
<td align="left">Integral</TD>
<td align="left">Bitwise XOR</TD>
</TR>
<tr class=row>
<td align="left">8</TD>
<td align="left"><tt class=literal>^</tt></TD>
<td align="left">Boolean</TD>
<td align="left">Boolean XOR</TD>
</TR>
<tr class=row>
<td align="left">9</TD>
<td align="left"><tt class=literal>|</tt></TD>
<td align="left">Integral</TD>
<td align="left">Bitwise OR</TD>
</TR>
<tr class=row>
<td align="left">9</TD>
<td align="left"><tt class=literal>|</tt></TD>
<td align="left">Boolean</TD>
<td align="left">Boolean OR</TD>
</TR>
<tr class=row>
<td align="left">10</TD>
<td align="left"><tt class=literal>&amp;&amp;</tt></TD>
<td align="left">Boolean</TD>
<td align="left">Conditional AND</TD>
</TR>
<tr class=row>
<td align="left">11</TD>
<td align="left"><tt class=literal>||</tt></TD>
<td align="left">Boolean</TD>
<td align="left">Conditional OR</TD>
</TR>
<tr class=row>
<td align="left">12</TD>
<td align="left"><tt class=literal>?:</tt></TD>
<td align="left">NA</TD>
<td align="left">Conditional ternary operator</TD>
</TR>
<tr class=row>
<td align="left">13</TD>
<td align="left"><tt class=literal>=</tt></TD>
<td align="left">Any</TD>
<td align="left">Assignment</TD>
</TR>
<tr class=row>
<td align="left">13</TD>
<td align="left">

<p class=para>
<tt class=literal>*=, /=, %=, +=, -=, &lt;&lt;=, &gt;&gt;=, 
&gt;&gt;&gt;=, &amp;=, ^=, |=</tt></TD>
<td align="left">Any</TD>
<td align="left">Assignment with operation</TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
There are a few operators missing from the standard C
collection. For example, Java doesn't support the comma operator for
combining expressions, although the <tt class=literal>for</tt> statement
allows you to use it in the initialization and increment
sections. Java doesn't allow direct pointer manipulation, so it does
not support the reference (<tt class=literal>*</tt>), dereference
(<tt class=literal>&amp;</tt>), and <tt class=literal>sizeof</tt> operators.

<p class=para>
Java also adds some new operators. As we've seen,
the <tt class=literal>+</tt> operator can be used with
<tt class=literal>String</tt> values to perform string
concatenation. Because all integral types in Java are signed values,
the <tt class=literal>&gt;&gt;</tt> operator performs a right-shift operation
with sign extension. The <tt class=literal>&gt;&gt;&gt;</tt> operator treats
the operand as an unsigned number and performs a right shift with no
extension. The <tt class=literal>new</tt> operator is used to create objects; we will discuss
it in detail shortly.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="EXJ-CH-4-SECT-4.3.2">Assignment</A></h4>

<p class=para>
While variable initialization (i.e., declaration and assignment together) 
is considered a statement, variable assignment alone is an expression: 

<div class=programlisting>
<p>
<pre>
int i, j; 
i = 5;                           // expression 
</PRE>
</DIV>

<p class=para>
Normally, we rely on assignment for its side effects alone, but, as in 
C, an assignment can be used as a value in another part of an expression: 

<div class=programlisting>
<p>
<pre>
j = ( i = 5 ); 
</PRE>
</DIV>

<p class=para>
Again, relying on order of evaluation extensively (in this case, using
compound assignments in complex expressions) can make code very
obscure and hard to read. Do so at your own peril.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="EXJ-CH-4-SECT-4.3.3">null</A></h4>

<p class=para>
The expression <tt class=literal>null</tt> can be assigned to any
reference type. It has the meaning of "no reference." A
<tt class=literal>null</tt> reference can't be used to select a method or
variable and attempting to do so generates a
<tt class=literal>NullPointerException</tt> at run-time.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="EXJ-CH-4-SECT-4.3.4">Variable access</A></h4>

<p class=para>
Using the dot (<tt class=literal>.</tt>) to access a variable in an object
is a type of expression that results in the value of the variable
accessed. This can be either a numeric type or a reference type:

<div class=programlisting>
<p>
<pre>
int i; 
String s; 
i = myObject.length; 
s = myObject.name; 
</PRE>
</DIV>

<p class=para>
A reference type expression can be used in further evaluations, by
selecting variables or calling methods within it:

<div class=programlisting>
<p>
<pre>
int len = myObject.name.length(); 
int initialLen = myObject.name.substring(5, 10).length(); 
</PRE>
</DIV>

<p class=para>
Here we have found the length of our <tt class=literal>name</tt> variable
by invoking the <tt class=literal>length()</tt> method of the
<tt class=literal>String</tt> object.  In the second case, we took an
intermediate step and asked for a substring of the
<tt class=literal>name</tt> string. The <tt class=literal>substring</tt>
method of the <tt class=literal>String</tt> class also returns a
<tt class=literal>String</tt> reference, for which we ask the
length. (<a href="ch07_01.htm">Chapter 7, <i>Basic Utility Classes</i></A> describes all of these
<tt class=literal>String</tt> methods in detail.)

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="EXJ-CH-4-SECT-4.3.5">Method invocation</A></h4>

<p class=para>
A method invocation is basically a function call, or in other words, an 
expression that results in a value, the type of which is the return type 
of the method. Thus far, we have seen methods invoked via their name in 
simple cases: 

<div class=programlisting>
<p>
<pre>
System.out.println( "Hello World..." ); 
int myLength = myString.length();  
</PRE>
</DIV>

<p class=para>
When we talk about Java's object-oriented features in <a href="ch05_01.htm">Chapter 5, <i>Objects in Java</i></A>, we'll look at some rules that govern the
selection of methods.

<p class=para>
Like the result of any expression, the result of a method
invocation can be used in further evaluations, as we saw
above. Whether to allocate intermediate variables and make it
absolutely clear what your code is doing or to opt for brevity where
it's appropriate is a matter of coding style.

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="EXJ-CH-4-SECT-4.3.6">Object creation</A></h4>

<p class=para>
Objects in Java are allocated with the <tt class=literal>new</tt> operator: 

<div class=programlisting>
<p>
<pre>
Object o = new Object(); 
</PRE>
</DIV>

<p class=para>
The argument to <tt class=literal>new</tt> is a
<i class=emphasis>constructor</I> that specifies the type of object and
any required parameters to create it. The return type of the
expression is a reference type for the created object.

<p class=para>
We'll look at object creation in detail in <a href="ch05_01.htm">Chapter 5, <i>Objects in Java</i></A>.  For now, I just want to point out that object
creation is a type of expression, and that the resulting object
reference can be used in general expressions.  In fact, because the
binding of <tt class=literal>new</tt> is "tighter" than that
of the dot-field selector, you can easily allocate a new object and
invoke a method in it for the resulting expression:

<div class=programlisting>
<p>
<pre>
int hours = new Date().getHours(); 
</PRE>
</DIV>

<p class=para>
The <tt class=literal>Date</tt> class is a utility class that represents
the current time. Here we create a new instance of
<tt class=literal>Date</tt> with the <tt class=literal>new</tt> operator and
call its <tt class=literal>getHours()</tt> method to retrieve the current
hour as an integer value. The <tt class=literal>Date</tt> object reference
lives long enough to service the method call and is then cut loose and
garbage collected at some point in the future.

<p class=para>
Calling methods in object references in this way is, again, a matter of 
style. It would certainly be clearer to allocate an intermediate variable 
of type <tt class=literal>Date</tt> to hold the new object and then 
call its <tt class=literal>getHours()</tt> method. However, some of 
us still find the need to be terse in our code. 

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="EXJ-CH-4-SECT-4.3.7">instanceof</A></h4>

<p class=para>
The <tt class=literal>instanceof</tt> operator can be used to
determine the type of an object at
run-time. <tt class=literal>instanceof</tt> returns a
<tt class=literal>boolean</tt> value that indicates whether an object is
an instance of a particular class or a subclass of that class:

<div class=programlisting>
<p>
<pre>
Boolean b; 
String str = "foo"; 
b = ( str instanceof String );     // true 
b = ( str instanceof Object );     // also true 
b = ( str instanceof Date );       // false--not a Date or subclass 
</PRE>
</DIV>

<p class=para>
<tt class=literal>instanceof</tt> also correctly reports if an object 
is of the type of an arry or a specified interface.

<div class=programlisting>
<p>
<pre>
        if ( foo instanceof byte[] )
            ...
</PRE>
</DIV>

<p class=para>
(See <a href="ch05_01.htm">Chapter 5, <i>Objects in Java</i></A> for a full discussion of interfaces.)

<p class=para>
It is also important to note that the value <i class=emphasis>null</I> is not considered
an instance of any object.  So the following test will return false,
no matter what the declared type of the variable:

<div class=programlisting>
<p>
<pre>
String s = null;
if ( s istanceof String )
    // won't happen
</PRE>
</DIV>

</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_03.htm#EXJ-CH-4-SECT-3.3"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch04_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Types</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Exceptions</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
