<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 5] 5.6 Packages and Compilation Units</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 18:52:54 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 5<br>Objects in Java</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch05_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="EXJ-CH-5-SECT-6">5.6 Packages and Compilation Units</A></h2>

<p class=para>
<a name="CH05.PACK1"></A>A <i class=emphasis>package</I> is a name for a group of related
classes. In <a href="ch03_01.htm">Chapter 3, <i>Tools of the Trade</i></A>, we discussed how Java uses
package names to locate classes during compilation and at run-time. In
this sense, packages are somewhat like libraries; they organize and manage sets of classes. Packages provide more than just
source code-level organization though. They also create an additional
level of scope for their classes and the variables and methods within
them. We'll talk about the visibility of classes in this
section. In the next section, we'll discuss the effect that
packages have on access to variables and methods between classes.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-5-SECT-6.1">Compilation Units</A></h3>

<p class=para>
<a name="CH05.COMP1"></A><a name="CH05.COMP2"></A><a name="CH05.COMP3"></A><a name="CH05.COMP4"></A>The source code for a Java class is called a <i class=emphasis>compilation
unit</I>. A compilation unit normally contains a single class
definition and is named for that class. The definition of a class
named <tt class=literal>MyClass</tt>, for instance, should appear in a
file named <i class=filename>MyClass.java</i>. For most of us, a
compilation unit is just a file with a <i class=filename>.java</i>
extension, but in an integrated development environment, it could be
an arbitrary entity. For brevity here, we'll refer to a
compilation unit simply as a file.

<p class=para>
The division of classes into their own compilation units is
important because, as described in <a href="ch03_01.htm">Chapter 3, <i>Tools of the Trade</i></A>, the Java
compiler assumes much of the responsibility of a
<i class=command>make</i> utility. The compiler relies on the names
of source files to find and compile dependent classes. It's possible
(and common) to put more than one class definition into a single file,
but there are some restrictions we'll discuss shortly.

<p class=para>
A class is declared to belong to a particular package with the
<tt class=literal>package</tt> statement. The <tt class=literal>package</tt>
statement must appear as the first statement in a compilation
unit. There can be only one <tt class=literal>package</tt> statement, and
it applies to the entire file:

<div class=programlisting>
<p>
<pre>
package mytools.text; 
 
class TextComponent { 
     ... 
} 
</PRE>
</DIV>

<p class=para>
In the above example, the class <tt class=literal>TextComponent</tt> is
placed in the package <tt class=literal>mytools.text</tt>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-5-SECT-6.2">A Word About Package Names</A></h3>

<p class=para>
You should recall from <a href="ch03_01.htm">Chapter 3, <i>Tools of the Trade</i></A> that package names
are constructed in a hierarchical way, using a dot-separated naming
convention. Package-name components construct a unique path for the
compiler and run-time systems to locate files; however, they
don't affect the contents directly in any other way. There is no
such thing as a subpackage (the package name space is really flat, not
hierarchical) and packages under a particular part of a package
hierarchy are related only by association. For example, if we create
another package called <tt class=literal>mytools.text.poetry</tt>
(presumably for text classes specialized in some way to work with
poetry), those classes would not be considered part of the
<tt class=literal>mytools.text</tt> package and would have no special
access to its members. In this sense, the package-naming convention
can be misleading.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-5-SECT-6.3">Class Visibility</A></h3>

<p class=para>
By default, a class is accessible only to other classes within its
package. This means that the class <tt class=literal>TextComponent</tt> is
available only to other classes in the
<tt class=literal>mytools.text</tt> package. To be visible elsewhere, a
class must be declared as <tt class=literal>public</tt>:

<div class=programlisting>
<p>
<pre>
package mytools.text; 
 
public class TextEditor { 
     ... 
} 
</PRE>
</DIV>

<p class=para>
The class <tt class=literal>TextEditor</tt> can now be referenced
anywhere. There can be only a single <tt class=literal>public</tt> class
defined in a compilation unit; the file must be named for that class.

<p class=para>
By hiding unimportant or extraneous classes, a package builds a subsystem that has a well-defined interface to the
rest of the world. Public classes provide a facade for the operation
of the system and the details of its inner workings can remain hidden,
as shown in <a href="#EXJ-CH-5-FIG-7">Figure 5.7</A>. In this sense, packages
hide classes in the way classes hide <tt class=literal>private</tt>
members.

<div class=figure>
<h4 class=figure><a class="TITLE" name="EXJ-CH-5-FIG-7">Figure 5.7: Class visibility and packages</A></h4>


<p>
<img align=middle src="figs/je0507.gif" alt="[Graphic: Figure 5-7]" width=503 height=143 border=0>

</DIV>

<p class=para>
<a href="#EXJ-CH-5-FIG-7">Figure 5.7</A> shows part of the the hypothetical
<tt class=literal>mytools.text</tt> package. The classes
<tt class=literal>TextArea</tt> and <tt class=literal>TextEditor</tt> are
declared <tt class=literal>public</tt> and can be used elsewhere in an
application. The class <tt class=literal>TextComponent</tt> is part of the
implementation of <tt class=literal>TextArea</tt> and is not accessible
from outside of the package.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-5-SECT-6.4">Importing Classes</A></h3>

<p class=para>
Classes within a package can refer to each other by their simple
names. However, to locate a class in another package, we have to
supply a qualifier. Continuing with the above example, an application
refers directly to our editor class by its fully qualified name of
<tt class=literal>mytools.text.TextEditor</tt>. But we'd quickly grow
tired of typing such long class names, so Java gives us the
<tt class=literal>import</tt> statement. One or more
<tt class=literal>import</tt> statements can appear at the top of a
compilation unit, beneath the <tt class=literal>package</tt>
statement. The <tt class=literal>import</tt> statements list the full
names of classes to be used within the file. Like a
<tt class=literal>package</tt> statement, <tt class=literal>import</tt>
statements apply to the entire compilation unit. Here's how you
might use an <tt class=literal>import</tt> statement:

<div class=programlisting>
<p>
<pre>
package somewhere.else; 
 
import mytools.text.TextEditor; 
 
class MyClass { 
    TextEditor editBoy; 
    ... 
} 
</PRE>
</DIV>

<p class=para>
As shown in the example above, once a class is imported, it can be 
referenced by its simple name throughout the code. It's also possible 
to import all of the classes in a package using the <tt class=literal>*</tt> 
notation: 

<div class=screen>
<p>
<pre>
import mytools.text.*; 
</PRE>
</DIV>

<p class=para>
Now we can refer to all <tt class=literal>public</tt> classes 
in the <tt class=literal>mytools.text</tt> package by their simple names. 

<p class=para>
Obviously, there can be a problem with importing classes that
have conflicting names. If two different packages contain classes that
use the same name, you just have to fall back to using
fully qualified names to refer to those classes. Other than the
potential for naming conflicts, there's no penalty for importing
classes. Java doesn't carry extra baggage into the compiled class
files. In other words, Java class files don't contain other class
definitions, they only reference them.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-5-SECT-6.5">The Unnamed Package</A></h3>

<p class=para>
A class that is defined in a compilation unit that doesn't specify a
package falls into the large, amorphous unnamed package. Classes in
this nameless package can refer to each other by their simple
names. Their path at compile- and run-time is considered to be the
current directory, so package-less classes are useful for experimentation, testing, and brevity in providing examples for books
about Java.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch05_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Subclassing and Inheritance</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Variable and Method Visibility</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
