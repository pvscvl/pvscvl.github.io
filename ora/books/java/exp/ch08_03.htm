<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 8] 8.3 Serialization</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 18:57:20 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_02.htm#EXJ-CH-8-SECT-2.1.2"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>Input/Output Facilities</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch08_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="EXJ-CH-8-SECT-3">8.3 Serialization</A></h2>

<p class=para>
Using streams and files, you can write an application that saves and
loads its data to a disk drive.  Java 1.1 provides an even more powerful
mechanism called <i class=emphasis>object serialization</I>
that does a lot of the work for you.
In its simplest form, object serialization is an automatic way to
save and load an object.  However, object serialization
has depths that we cannot plumb
within the scope of this book, including complete control over the
serialization process and interesting conundrums like class
versioning.

<p class=para>
Basically, any class that implements the <tt class=literal>Serializable</tt>
interface can be saved and restored from a stream.  Special stream subclasses,
<tt class=literal>ObjectInputStream</tt> and
<tt class=literal>ObjectOutputStream</tt>, are used to serialize
primitive types and objects.  Subclasses of <tt class=literal>Serializable</tt>
classes are also serializable.  The default serialization mechanism saves the
value of an object's non<tt class=literal>static</tt>
and non<tt class=literal>volatile</tt> member variables.

<p class=para>
One of the tricky things about serialization is that when an object is
serialized, any object references it contains should also be serialized.  We'll
see this in an upcoming example.  The implication is that any object we
serialize must only contain references to <tt class=literal>Serializable</tt>
objects.  There are ways around this problem, like marking nonserializable
members as <tt class=literal>volatile</tt> or overriding the
default serialization mechanisms.

<p class=para>
In the following example, we create a <tt class=literal>Hashtable</tt>
and write it to a disk file called <tt class=literal>h.ser</tt>.

<div class=programlisting>
<p>
<pre>
import java.io.*;
import java.util.*;
public class Save {
  public static void main(String[] args) {
    Hashtable h = new Hashtable();
    h.put("string", "Gabriel Garcia Marquez");
    h.put("int", new Integer(26));
    h.put("double", new Double(Math.PI));
    
    try {
      FileOutputStream fileOut = new FileOutputStream("h.ser");
      ObjectOutputStream out = new ObjectOutputStream(fileOut);
      out.writeObject(h);
    }
    catch (Exception e) {
      System.out.println(e);
    }
  }
}
</PRE>
</DIV>

<p class=para>
First we construct a <tt class=literal>Hashtable</tt> with a few
elements in it.  Then, in the three
lines of code inside the <tt class=literal>try</tt> block,
we write the <tt class=literal>Hashtable</tt> to a file called
<tt class=literal>h.ser</tt>, using the
<tt class=literal>writeObject()</tt>
method of <tt class=literal>ObjectOutputStream</tt>.  The
<tt class=literal>ObjectOutputStream</tt> class is a lot like the
<tt class=literal>DataOutputStream</tt> class, except that it includes
the powerful <tt class=literal>writeObject()</tt> method.
The <tt class=literal>Hashtable</tt> object is serializable because
it implements the
<tt class=literal>Serializable</tt> interface.

<p class=para>
The <tt class=literal>Hashtable</tt> we created has internal references
to the items it contains.  Thus, these components are
automatically serialized along with the <tt class=literal>Hashtable</tt>.
We'll see this in the next example when we deserialize the
<tt class=literal>Hashtable</tt>.

<div class=programlisting>
<p>
<pre>
import java.io.*;
import java.util.*;
public class Load {
  public static void main(String[] args) {
    try {
      FileInputStream fileIn = new FileInputStream("h.ser");
      ObjectInputStream in = new ObjectInputStream(fileIn);
      Hashtable h = (Hashtable)in.readObject();
      System.out.println(h.toString());
    }
    catch (Exception e) {
      System.out.println(e);
    }
  }
}
</PRE>
</DIV>

<p class=para>
In this example, we read the <tt class=literal>Hashtable</tt> from
the <tt class=literal>h.ser</tt> file, using the
<tt class=literal>readObject()</tt> method of
<tt class=literal>ObjectInputStream</tt>.  The
<tt class=literal>ObjectInputStream</tt> class is a lot
like <tt class=literal>DataInputStream</tt>,
except it includes the <tt class=literal>readObject()</tt>
method.  The return type of <tt class=literal>readObject()</tt>
is <tt class=literal>Object</tt>, so we need to cast
it to a <tt class=literal>Hashtable</tt>.  Finally, we
print out the contents of the <tt class=literal>Hashtable</tt>
using its <tt class=literal>toString()</tt> method.

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_02.htm#EXJ-CH-8-SECT-2.1.2"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch08_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Files</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Data compression</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
