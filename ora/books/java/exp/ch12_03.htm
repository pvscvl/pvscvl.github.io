<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 12] 12.3 BorderLayout</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 19:02:01 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch12_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 12<br>Layout Managers</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch12_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="EXJ-CH-12-SECT-3">12.3 BorderLayout</A></h2>

<p class=para>
<a name="CH10.BL"></A><tt class=literal>BorderLayout</tt> is a little more interesting. It tries
to arrange objects in one of five geographical locations:
"North," "South," "East," "West," and
"Center," possibly with some padding
between. <tt class=literal>BorderLayout</tt> is the default layout for
<tt class=literal>Window</tt> and <tt class=literal>Frame</tt>
objects. Because each component is associated with a direction,
<tt class=literal>BorderLayout</tt> can manage at most five components; 
it squashes or stretches those components to fit its constraints. As
we'll see in the second example, this means that you often want
to have <tt class=literal>BorderLayout</tt> manage sets of components in
their own panels.

<p class=para>
When we add a component to a border layout, we need to specify
both the component and the position at which to add it. To do so, we
use an overloaded version of the <tt class=literal>add()</tt> method that
takes an additional argument as a constraint. This
additional argument is passed to the layout manager when the new component 
is added. In this case it specifies the name of the position for the 
BorderLayout.  Otherwise the
<tt class=literal>LayoutManager</tt> is not consulted until it's asked to
lay out the components.

<p class=para>
The following applet sets a <tt class=literal>BorderLayout</tt>
layout and adds our five buttons again, named for their locations; the
result is shown in <a href="#EXJ-CH-12-FIG-4">Figure 12.4</A>.

<div class=figure>
<h4 class=figure><a class="TITLE" name="EXJ-CH-12-FIG-4">Figure 12.4: A border layout</A></h4>


<p>
<img align=middle src="figs/je1204.gif" alt="[Graphic: Figure 12-4]" width=503 height=243 border=0>

</DIV>

<div class=programlisting>
<p>
<pre>
import java.awt.*; 
 
public class Border extends java.applet.Applet {  
    public void init() { 
        setLayout( new java.awt.BorderLayout() ); 
        add( new Button("North"), "North" ); 
        add( new Button("East"), "East" ); 
        add( new Button("South"), "South" ); 
        add( new Button("West"), "West" ); 
        add( new Button("Center"), "Center" ); 
    } 
} 
</PRE>
</DIV>

<p class=para>
So, how exactly is the area divided up? Well, the objects at
"North" and "South" get their preferred height
and are expanded to fill the full area
horizontally. "East" and "West" components on the other
hand, get their preferred width, and are expanded to fill the
remaining area between "North" and "South" vertically.
Finally, the "Center" object takes all of the rest of the
space. As you can see in <a href="#EXJ-CH-12-FIG-5">Figure 12.5</A>, our
buttons get distorted into interesting shapes.

<p class=para>
What if we don't want <tt class=literal>BorderLayout</tt>
messing with the sizes of our components? One option would be to put
each button in its own <tt class=literal>Panel</tt>. The default layout
for a <tt class=literal>Panel</tt> is <tt class=literal>FlowLayout</tt>, which
respects the preferred size of components. The preferred sizes of the
panels are effectively the preferred sizes of the buttons, but if the
panels are stretched, they won't pull their buttons with
them. <tt class=literal>Border2</tt> illustrates this approach as shown in
<a href="#EXJ-CH-12-FIG-5">Figure 12.5</A>.

<div class=figure>
<h4 class=figure><a class="TITLE" name="EXJ-CH-12-FIG-5">Figure 12.5: Another border layout</A></h4>


<p>
<img align=middle src="figs/je1205.gif" alt="[Graphic: Figure 12-5]" width=503 height=157 border=0>

</DIV>

<div class=programlisting>
<p>
<pre>
import java.awt.*; 
 
public class Border2 extends java.applet.Applet {  
    public void init() { 
        setLayout( new BorderLayout() ); 
        Panel p = new Panel(); 
        p.add(new Button("East") ); 
        add( p, "East" ); 
        p = new Panel(); 
        p.add(new Button("West") ); 
        add( p, "West" ; 
        p = new Panel(); 
        p.add(new Button("North") ); 
        add( p, "North" ); 
        p = new Panel(); 
        p.add(new Button("South") ); 
        add(p, "South" ); 
        p = new Panel(); 
        p.add(new Button("Center") ); 
        add( p, "Center" ); 
    } 
} 
</PRE>
</DIV>

<p class=para>
In this example, we create a number of panels, put our buttons inside
the panels, and put the panels into the applet, which has the
<tt class=literal>BorderLayout</tt> manager. Now, the
<tt class=literal>Panel</tt> for the "Center" button soaks up
the extra space that comes from the <tt class=literal>BorderLayout</tt>.
Each <tt class=literal>Panel</tt>'s
<tt class=literal>FlowLayout</tt> centers the button in the panel and uses
the button's preferred size. 
In this case, it's all a bit awkward. (This is one of the problems
that <tt class=literal>getMaximumSize()</tt> will eventually
solve.) We'll see how we could accomplish
this more directly using <tt class=literal>GridBagLayout</tt> shortly.

<p class=para>
Finally, this version of the applet has a lot of unused space. If we wanted, 
we could get rid of the extra space by resizing the applet:

<div class=programlisting>
<p>
<pre>
setSize( getPreferredSize() ); 
</PRE>
</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch12_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch12_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>GridLayout</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>CardLayout</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
