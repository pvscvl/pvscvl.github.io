<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 11] 11.3 Lists</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 19:01:06 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11<br>Using and Creating GUI Components</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch11_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="ch11-SECT1-AUTOID.2">11.3 Lists</A></h2>

<p class=para>
A <tt class=literal>List</tt> is a step up on the evolutionary
chain. Lists let the user choose from a group of alternatives. They
can be configured to force the user to choose a single selection or
to allow multiple choices. Usually, only a small group of choices are
displayed at a time; a built-in scrollbar lets you move to the choices
that aren't visible.

<p class=para>
A <tt class=literal>List</tt> generates two kinds of events. If
the user single clicks on a selection, the
<tt class=literal>List</tt> generates an
<tt class=literal>ItemEvent</tt>. If the user double-clicks, a
<tt class=literal>List</tt> generates an
<tt class=literal>ActionEvent</tt>. Therefore, a
<tt class=literal>List</tt> can register both
<tt class=literal>ItemListener</tt>s and
<tt class=literal>ActionListener</tt>s.  In either case, the
listener can use the event to figure out what the user selected. 

<p class=para>
The applet below, <tt class=literal>SearchableListApplet</tt>,
contains a <tt class=literal>List</tt> and a text field. Several
of the items in the list aren't visible, because the list is too long
for the space we've allotted for it (enough to display three items).
When you type the name of an item into the text field, the applet
displays the item you want and selects it. Of course, you could do
this with a scrollbar, but then we wouldn't have the opportunity to
demonstrate how to work with lists. 

<p class=para>
<div class=figure>
<h4 class=figure><a class="TITLE" name="EXJ-CH-11-FIG-4">Figure 11.4: The SearchableList applet</A></h4>


<p>
<img align=middle src="figs/je1104.gif" alt="[Graphic: Figure 11-4]" width=503 height=243 border=0>

</DIV>

<div class=screen>
<p>
<pre>
import java.awt.*;
import java.awt.event.*;
public class SearchableListApplet extends java.applet.Applet {
    public void init() {
        String [] items = { "One", "Two", "Three", "Four", "Five", "Six" };
        add( new SearchableList( items ) );
    }
}
class SearchableList extends Container implements ActionListener {
    List list;
    TextField field;
    SearchableList( String [] items ) {
        list = new List( 3 );  // Let some scroll for this example
        for(int i=0; i&lt; items.length; i++)
            list.addItem( items[i] );
        field = new TextField();
        field.addActionListener( this );
        setLayout( new BorderLayout() );
        add("Center", list);
        add("South", field);
    }
    public void actionPerformed( ActionEvent e ) {
        String search = field.getText();
        for (int i=0; i&lt; list.getItemCount(); i++)
            if ( list.getItem( i ).equals( search ) ) {
                list.select( i );
                list.makeVisible( i );  // Scroll it into view
                break;
            }
        field.setText(""); // clear the text field
    }
}
</PRE>
</DIV>

<p class=para>
We create the <tt class=literal>List</tt> and the
<tt class=literal>TextField</tt> in a new class,
<tt class=literal>SearchableList</tt>; the applet itself only
displays the <tt class=literal>SearchableList</tt>.
<tt class=literal>SearchableList</tt> itself is a new kind of
animal; it is a lightweight component that subclasses
<tt class=literal>Container</tt> directly. We'll talk a little
more about lightweight components later in the chapter. 

<p class=para>
In the constructor for <tt class=literal>SearchableList</tt>, we
create our <tt class=literal>List</tt> by calling its
constructor, setting it to display at most three components. We then
call the <tt class=literal>addItem()</tt> method to add the
possible selections to the list; these are the numbers "One" through
"Six," passed to us in an array. 

<p class=para>
We then create our <tt class=literal>TextField</tt>, and register
ourselves (i.e., the <tt class=literal>SearchableList</tt>) as an
<tt class=literal>ActionListener</tt> for the field's events.
Finally, we set the layout for
<tt class=literal>SearchableList</tt> to a border layout, put the
<tt class=literal>List</tt> in the center of the layout, and the
<tt class=literal>TextField</tt> at the bottom. 

<p class=para>
The <tt class=literal>actionPerformed()</tt> method is called
whenever the user presses RETURN in our
<tt class=literal>TextField</tt>. In this method, we call
<tt class=literal>getText()</tt> to extract the text the user
typed. Then we loop through all the items in the list to see if
there's a match. <tt class=literal>getItemCount()</tt> tells us
the number of items in the list; <tt class=literal>getItem()</tt>
gives us the text associated with any particular item. When we find a
match, we call <tt class=literal>select()</tt> to make the
matching item the selected item, and  we call
<tt class=literal>makeVisible()</tt> to make sure that this item
is displayed. 

<p class=para>
By default, a <tt class=literal>List</tt> only allows a single
selection. We've done nothing in this example to allow multiple
selections, so whenever a user chooses an item, the previous selection
is automatically dropped. If you want a list that supports multiple
selections, call <tt class=literal>setMultipleMode(true)</tt>. In
this case, you must use the <tt class=literal>deselect()</tt>
method to clear the user's selections. 

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch11_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Text Components</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Menus and Choices</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
