<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 11] 11.7 ScrollPane and Scrollbars</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 19:01:14 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11<br>Using and Creating GUI Components</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch11_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="EXJ-CH-11-SECT-8">11.7 ScrollPane and Scrollbars</A></h2>

<p class=para>
<a name="CH10.SCROLL1"></A> <a name="CH10.SCROLL2"></A><a name="CH10.SCROLL3"></A>

<p class=para>
One of the big advantages of Java 1.1 is the addition of a
<tt class=literal>ScrollPane</tt> container. Previously, unless
you were working with a text component, you had to manage scrolling
yourself. It wasn't terribly difficult, but it was a pain: you had to
create <tt class=literal>Scrollbar</tt> objects, attach them to
whatever you were scrolling, 
and redisplay everything with new positions whenever the user made an
adjustment. <tt class=literal>ScrollPane</tt> does it all for
you. About the only time you absolutely need a
<tt class=literal>Scrollbar</tt> is when you want to create a
"volume control-type" object. For example, you might want to create a
paint mixer that blended different amounts of red, blue, and green,
depending on some scrollbar settings. 

<p class=para>
The unifying theme behind both <tt class=literal>ScrollPane</tt>
and <tt class=literal>Scrollbar</tt> is the
<tt class=literal>Adjustable</tt>
interface, which defines the responsibilities of scrollable objects.
An object that implements <tt class=literal>Adjustable</tt> lets
you modify an integer value through some fixed range. When a user
changes the value, the object generates an
<tt class=literal>AdjustmentEvent</tt>; as you might expect, to
get an <tt class=literal>AdjustmentEvent</tt>, you must implement
<tt class=literal>AdjustmentListener</tt> and register by calling
<tt class=literal>addAdjustmentListener()</tt>. Scrollbars
implement <tt class=literal>Adjustable</tt>, and a
<tt class=literal>ScrollPane</tt> can return
<tt class=literal>Adjustable</tt> objects for each of its
scrollbars.[2]

<blockquote class=footnote>
<p class=para>[2] 
There may be a bug in the
<tt class=literal>Adjustable</tt> objects you get from a
<tt class=literal>ScrollPane</tt>. Although you can read their
settings, you can't change them; methods like
<tt class=literal>setMinimum()</tt> and
<tt class=literal>setMaximum()</tt> (which should set the
object's minimum and maximum values) throw an
<tt class=literal>AWTError</tt>.
</blockquote>
<p class=para>
In this section, we'll demonstrate both the
<tt class=literal>ScrollPane</tt> and
<tt class=literal>Scrollbar</tt> classes. We'll start with a
<tt class=literal>ScrollPane</tt>.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch11-SECT2-AUTOID.4">Working With A ScrollPane</A></h3>

<p class=para>
Technically, a <tt class=literal>ScrollPane</tt> is a
<tt class=literal>Container</tt>, but it's a funny one. It has
its own layout manager, which can't be changed. It can only accomodate
one component at a time. This seems like a big limitation, but it
isn't. If you want to put a lot of stuff in a
<tt class=literal>ScrollPane</tt>, just put your components into
a <tt class=literal>Panel</tt>, with whatever layout manager you
like, and put that panel into the
<tt class=literal>ScrollPane</tt>.  

<p class=para>
When you create a <tt class=literal>ScrollPane</tt>, you can
specify the conditions under which its srollbars will be displayed.
This is called the scrollbar display policy; you can specify the
policy by using one of the three constants below as an argument to the
<tt class=literal>ScrollPane</tt> constructor.
<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>SCROLLBARS_AS_NEEDED</tt><br>
<dd>

<p class=para>
Only displays scrollbars if the object in the
<tt class=literal>ScrollPane</tt> doesn't fit.

<p>
<dt class=varlistentry><tt class=literal>SCROLLBARS_ALWAYS</tt><br>
<dd>

<p class=para>
Always displays scrollbars, regardless of the object's size.

<p>
<dt class=varlistentry><tt class=literal>SCROLLBARS_NEVER</tt><br>
<dd>

<p class=para>
Never displays scrollbars, even if the object is too big. If you use
this policy, you should provide some other way for the user to
manipulate the <tt class=literal>ScrollPane</tt>. </DL>
<p class=para>
By default, the policy is
<tt class=literal>SCROLLBARS_AS_NEEDED</tt>. 

<p class=para>
Here's an applet that uses a <tt class=literal>ScrollPane</tt> to
display a large image. As you'll see, the applet itself is very
simple; all we do is get the image, set the applet's layout manager,
create a <tt class=literal>ScrollPane</tt>, put the image in our
pane, and add the <tt class=literal>ScrollPane</tt> to the
applet. To make the program slightly cleaner, we create an
<tt class=literal>ImageComponent</tt> component to hold the image,
rather than placing the image directly into the
<tt class=literal>ScrollPane</tt>. Here's the applet itself:

<div class=screen>
<p>
<pre>
import java.awt.*;
public class ScrollPaneApplet extends java.applet.Applet { 
    public void init() {
        Image image = getImage( getClass().getResource(getParameter("image")) );
        setLayout(  new BorderLayout() );
        ScrollPane scrollPane = new ScrollPane();
        scrollPane.add( new ImageComponent(image) );
        add( "Center", scrollPane );
    }
}
</PRE>
</DIV>

<p class=para>
And here's the <tt class=literal>ImageComponent</tt>. It waits for
the image to load, using a 
<tt class=literal>MediaTracker</tt>, and sets its size
to the size of the image. It also provides a
<tt class=literal>paint()</tt> 
method to draw the image. This takes a single call to
<tt class=literal>drawImage()</tt>. The first argument is the
image itself; the next two are the coordinates of the image relative
to the <tt class=literal>ImageComponent</tt>; and the last is a
reference to the <tt class=literal>ImageComponent</tt> itself
(<tt class=literal>this</tt>), which serves as an image observer.
(We'll discuss image observers in <a href="ch14_01.htm">Chapter 14, <i>Working With Images</i></A>; for the time being, take
<tt class=literal>this</tt> on faith.) 

<p class=para>
We also supply an <tt class=literal>update()</tt>
method that calls <tt class=literal>paint()</tt>.
As we'll see later, the default version of
<tt class=literal>update()</tt> automatically clears the screen,
which wastes time if we already know that our image will cover the
entire screen. Therefore, we override
<tt class=literal>update()</tt> so that it doesn't bother
clearing the screen first.

<p class=para>
Finally, <tt class=literal>ImageComponent</tt> provides a
<tt class=literal>getPreferredSize()</tt> method, overriding the
method it inherits from <tt class=literal>Component</tt>. This
method simply returns the image's size, which is a
<tt class=literal>Dimension</tt> object. When you're using a
<tt class=literal>ScrollPane</tt>, it's important for the object
you're scrolling to provide a reliable indication of its size,
particularly if the object is a lightweight component. 

<div class=screen>
<p>
<pre>
import java.awt.*;
class ImageComponent extends Component {
    Image image;
    Dimension size;
    ImageComponent ( Image image ) {
        this.image = image;
        MediaTracker mt = new MediaTracker(this);
        mt.addImage( image, 0 );
        try { mt.waitForAll(); } catch (InterruptedException e) { /* error */ };
        size = new Dimension ( image.getWidth(null), image.getHeight(null) );
        setSize( size );
    }
    public void update( Graphics g ) {
        paint(g);
    }
    public void paint( Graphics g ) {
        g.drawImage( image, 0, 0, this );
    }
    public Dimension getPreferredSize() {
        return size;
    }
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="ch11-SECT2-AUTOID.5">Using Scrollbars</A></h3>

<div class=screen>
<p>
<pre>
</PRE>
</DIV>

<p class=para>
Our next example is basically the same as the previous, except that it
doesn't use the <tt class=literal>ScrollPane</tt>; it implements
its own scroller using scrollbars. With Java 1.1, you'd
never write code like this, but it does show how much work the
<tt class=literal>ScrollPane</tt> saves, and also demonstrates
how to use scrollbars in other situations. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="EXJ-CH-11-FIG-8">Figure 11.8: The ComponentScrollerApplet</A></h4>


<p>
<img align=middle src="figs/je1108.gif" alt="[Graphic: Figure 11-8]" width=503 height=282 border=0>

</DIV>

<p class=para>
Our applet is called
<tt class=literal>ComponentScrollerApplet</tt>; it uses a
homegrown scroll pane called 
<tt class=literal>ComponentScroller</tt>. The component that we
scroll is the <tt class=literal>ImageComponent</tt> we developed in
the previous example. 

<p class=para>
Now let's dive into the code for
<tt class=literal>ComponentScrollerApplet</tt>:

<div class=screen>
<p>
<pre>
import java.awt.*;
import java.awt.event.*;
public class ComponentScrollerApplet extends java.applet.Applet { 
    public void init() {
        Image image = getImage( getClass().getResource(getParameter("image")) );
        ImageComponent canvas = new ImageComponent( image );
        setLayout(  new BorderLayout() );
        add( "Center", new ComponentScroller(canvas) );
    }
}
class ComponentScroller extends Container {
    Scrollbar horizontal, vertical;
    Panel scrollarea = new Panel();
    Component component;
    int orgX, orgY;
    ComponentScroller( Component comp ) {
        scrollarea.setLayout( null );  // We'll handle the layout
        scrollarea.add( component = comp );
        horizontal = new Scrollbar( Scrollbar.HORIZONTAL );
        horizontal.setMaximum( component.getSize().width );
        horizontal.addAdjustmentListener( new AdjustmentListener() {
            public void adjustmentValueChanged(AdjustmentEvent e) {
                component.setLocation( orgX = -e.getValue(), orgY ); 
            } 
        } );
        vertical = new Scrollbar( Scrollbar.VERTICAL );
        vertical.setMaximum( component.getSize().height);
        vertical.addAdjustmentListener( new AdjustmentListener() {
            public void adjustmentValueChanged(AdjustmentEvent e) {
                component.setLocation( orgX, orgY = -e.getValue() ); 
            } 
        } );
        setLayout( new BorderLayout() );
        add( "Center", scrollarea );
        add( "South", horizontal );
        add( "East", vertical );
    }
    public void doLayout() {
        super.doLayout();
        horizontal.setVisibleAmount( scrollarea.getSize().width );
        vertical.setVisibleAmount( scrollarea.getSize().height );
    }
}
</PRE>
</DIV>

<p class=para>
So, what do our new components do? Let's start at the top
and work our way down. The applet itself
is very simple; it does all of its work in
<tt class=literal>init()</tt>. First it sets its layout manager
to <tt class=literal>BorderLayout</tt>. Then it acquires an
<tt class=literal>Image</tt> object with a call to
<tt class=literal>getImage()</tt>. 
Finally, the applet creates an <tt class=literal>ImageComponent</tt>
to hold our image, creates a
<tt class=literal>ComponentScroller</tt> to hold the
<tt class=literal>ImageComponent</tt>, and adds the scroller to the
"Center" region of the layout. I chose 
<tt class=literal>BorderLayout</tt> because it resizes its
central component to fill the entire area available.

<p class=para>
Next comes the <tt class=literal>ComponentScroller</tt> 
itself. <tt class=literal>ComponentScroller</tt> takes a
reference to our <tt class=literal>ImageComponent</tt> in its
constructor. It adds the component it will be scrolling to a
<tt class=literal>Panel</tt> with no layout manager. It then
creates horizontal and vertical
<tt class=literal>Scrollbar</tt> objects
(<tt class=literal>HORIZONTAL</tt> and
<tt class=literal>VERTICAL</tt> are constants of the
<tt class=literal>Scrollbar</tt> class, used to specify a
scrollbar's direction), sets their maximum
values using the height and width of the
<tt class=literal>Panel</tt>, and registers an
<tt class=literal>AdjustmentListener</tt> for each scrollbar. The
<tt class=literal>AdjustmentListener</tt> is an anonymous inner
class that implements the
<tt class=literal>adjustmentValueChanged()</tt> method. This
method is called whenever the user moves the scrollbar. It extracts
the new scrollbar setting from an
<tt class=literal>AdjustmentEvent</tt> and uses this to move the
component we're scrolling to its new location. We have a separate
listener for each scrollbar, so we don't have to figure out which
scrollbar generated the event. The listener for the horizontal
scrollbar adjusts the component's x coordinate
(<tt class=literal>orgX</tt>) and leaves its y coordinate
unchanged; likewise, the listener for the vertical scrollbar adjusts
the component's y coordinate. By adjusting the location of the
<tt class=literal>ImageComponent</tt>, we control
how much of the image is displayed; anything that falls outside of the
scroller's <tt class=literal>Panel</tt>
(<tt class=literal>scrollarea</tt>) isn't displayed. 
<p class=para>
The <tt class=literal>ComponentScroller</tt> overrides the
<tt class=literal>doLayout()</tt> method of the
<tt class=literal>Container</tt> class. This gives us an
opportunity to change the size of the scrollbar "handles" whenever the
scroller is resized. To do so, we call
<tt class=literal>super.doLayout()</tt> first, to make sure that
the container gets arranged properly; although we're overriding this
method, we need to make sure that it does its work. Then we call the
<tt class=literal>setVisibleAmount()</tt> method of each
scrollbar with the new width and height of the scrolling area. 

<p class=para>
So in review: we call <tt class=literal>setMaximum()</tt> to set
the vertical scrollbar's maximum value to the image's height; we call
<tt class=literal>setVisibleAmount()</tt> to tell the vertical
scrollbar how much area we have available; and it sets the size of its
"handle" accordingly. For example, if the image is 200 pixels high,
and the visible amount is 100 pixels, the scrollbar sets its handle to
be roughly half its length. We do similar things to the horizontal
scrollbar. As a result, the handles grow or shrink as we change the
size of the viewing area and indicate how much of the image is visible.

<p class=para>
The <tt class=literal>setMaximum()</tt> and
<tt class=literal>setVisibleAmount()</tt> are both part of the
<tt class=literal>Adjustable</tt> interface, which scrollbars
implement. Other methods of this interface are: 

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>getOrientation()</tt></TD>
<td align="left">

<p class=para>
Tells you whether the scrollbar is HORIZONTAL or VERTICAL. There is no
<tt class=literal>setOrientation()</tt> method in the interface,
but the <tt class=literal>Scrollbar</tt> class does support
<tt class=literal>setOrientation()</tt>.</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>getVisibleAmount()</tt> and
<tt class=literal>setVisibleAmount()</tt></TD>
<td align="left">

<p class=para>
Lets you control the size of the scrollbar's handle (slider). As we
saw above, this is a convenient way to give the user a feel for the
size of the object you're scrolling.</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>getValue()</tt> and
<tt class=literal>setValue()</tt></TD>
<td align="left">

<p class=para>
Lets you retrieve or change the scrollbar's current setting.</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>getMinimum()</tt> and
<tt class=literal>setMinimum()</tt></TD>
<td align="left">

<p class=para>
Lets you control the scrollbar's minimum value. </TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>getMaximum()</tt> and
<tt class=literal>setMaximum()</tt> </TD>
<td align="left">

<p class=para>
Lets you control the scrollbar's maximum value.</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>getUnitIncrement()</tt> and
<tt class=literal>setUnitIncrement()</tt> </TD>
<td align="left">

<p class=para>
Lets you control the amount the scrollbar will move if the user clicks
on the scrollbar's arrows; in many environments, this means the user
wants to move up or down one line.</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>getBlockIncrement()</tt> and
<tt class=literal>setBlockIncrement()</tt> </TD>
<td align="left">

<p class=para>
Lets you control the amount the scrollbar will move if the user clicks
between an arrow and the slider; in many environments, this means the
user wants to move up or down one page. </TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>addAdjustmentListener()</tt> and
<tt class=literal>removeAdjustmentListener()</tt> </TD>
<td align="left">

<p class=para>
Adds or removes listeners for the scrollbar's events.</TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
It's worth asking why we put our image in a
<tt class=literal>Canvas</tt>, 
which we then put into a <tt class=literal>Panel</tt>, which we
put into another <tt class=literal>Panel</tt>, which we put into
the applet. Surely there's a more efficient way. Yes there is, but we
wanted to make as many reusable components as possible. With this
design, you can use <tt class=literal>ImageComponent</tt> wherever
you need to display an image and check that it is loaded first; you
can use <tt class=literal>ComponentScroller</tt> wherever you
need to scroll any kind of component, not just an image or a
<tt class=literal>Canvas</tt>. Making resuable components is one
of the big advantages of object oriented design; it's something you
should always keep in mind. 

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch11_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Checkboxes and CheckboxGroups</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Dialogs</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
