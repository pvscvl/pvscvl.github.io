<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 5] 5.8 Interfaces</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 18:52:58 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 5<br>Objects in Java</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch05_09.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="EXJ-CH-5-SECT-8">5.8 Interfaces</A></h2>

<p class=para>
<a name="CH05.INTER1"></A>Interfaces are kind of like Boy Scout (or Girl Scout) merit badges. When 
a scout has learned to build a bird house, he can walk around wearing a 
little patch with a picture of one on his sleeve. This says to the world, 
"I know how to build a bird house." Similarly, an <i class=emphasis>interface</I> 
is a list of methods that define some set of behavior for an object. Any 
class that implements each of the methods listed in the interface can declare 
that it implements the interface and wear, as its merit badge, an extra 
type--the interface's type. 

<p class=para>
Interface types act like class types. You can declare variables to 
be of an interface type, you can declare arguments of methods to accept 
interface types, and you can even specify that the return type of a method 
is an interface type. In each of these cases, what is meant is that any 
object that implements the interface (i.e., wears the right merit badge) 
can fill that spot. In this sense, interfaces are orthogonal to the class 
hierarchy. They cut across the boundaries of what kind of object an item 
is and deal with it only in terms of what it can do. A class implements 
as many interfaces as it desires. In this way, interfaces in Java replace 
the need for multiple inheritance (and all of its messy side effects). 

<p class=para>
An interface looks like a purely <tt class=literal>abstract</tt> class 
(i.e., a class with only <tt class=literal>abstract</tt> methods). You 
define an interface with the <tt class=literal>interface</tt> keyword 
and list its methods with no bodies: 

<div class=programlisting>
<p>
<pre>
interface Driveable { 
    boolean startEngine(); 
    void stopEngine(); 
    float accelerate( float acc ); 
    boolean turn( Direction dir ); 
} 
</PRE>
</DIV>

<p class=para>
The example above defines an interface called
<tt class=literal>Driveable</tt> with four methods. It's acceptable, but
not necessary, to declare the methods in an interface with the
<tt class=literal>abstract</tt> modifier, so we haven't used it
here. Interfaces define capabilities, so it's common to name
interfaces after their capabilities in a passive
sense. "Driveable" is a good example; "runnable" and
"updateable" would be two more.

<p class=para>
Any class that implements all the methods can then declare it implements 
the interface by using a special <tt class=literal>implements</tt> clause 
in its class definition: 

<div class=programlisting>
<p>
<pre>
class Automobile implements Driveable { 
    ... 
    boolean startEngine() { 
        if ( notTooCold ) 
            engineRunning = true; 
        ... 
    } 
 
    void stopEngine() { 
        engineRunning = false; 
    } 
 
    float accelerate( float acc ) { 
        ... 
    } 
 
    boolean turn( Direction dir ) { 
        ... 
    } 
    ... 
} 
</PRE>
</DIV>

<p class=para>
The class <tt class=literal>Automobile</tt> implements the methods of the
<tt class=literal>Driveable</tt> interface and declares itself
<tt class=literal>Driveable</tt> using an <tt class=literal>implements</tt>
clause.

<p class=para>
As shown in <a href="#EXJ-CH-5-FIG-10">Figure 5.9</A>, another class,
such as <tt class=literal>LawnMower</tt>, can also implement the
<tt class=literal>Driveable</tt> interface. The figure illustrates the
<tt class=literal>Driveable</tt> interface being implemented by two
different classes. While it's possible that both
<tt class=literal>Automobile</tt> and <tt class=literal>Lawnmower</tt> could
derive from some primitive kind of vehicle, they don't have to
in this scenario. This is a significant advantage of interfaces over
standard multiple inheritance as implemented in C++.

<div class=figure>
<h4 class=figure><a class="TITLE" name="EXJ-CH-5-FIG-10">Figure 5.9: Implementing the Driveable interface</A></h4>


<p>
<img align=middle src="figs/je0510.gif" alt="[Graphic: Figure 5-9]" width=503 height=303 border=0>

</DIV>

<p class=para>
After declaring the interface, we have a new type,
<tt class=literal>Driveable</tt>.  We can declare variables of type
<tt class=literal>Driveable</tt> and assign them any instance of a
<tt class=literal>Driveable</tt> object:

<div class=programlisting>
<p>
<pre>
Automobile auto = new Automobile(); 
Lawnmower mower = new Lawnmower(); 
Driveable vehicle; 
 
vehicle = auto; 
vehicle.startEngine(); 
vehicle.stopEngine(); 
... 
vehicle = mower; 
vehicle.startEngine(); 
vehicle.stopEngine(); 
</PRE>
</DIV>

<p class=para>
Both <tt class=literal>Automobile</tt> and <tt class=literal>Lawnmower</tt> 
implement <tt class=literal>Driveable</tt> and can be considered of 
that type.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-5-SECT-8.1">Interfaces as Callbacks</A></h3>

<p class=para>
<a name="CH05.CALL"></A><a name="CH05.CALL2"></A>Interfaces can be used to implement callbacks in Java. A <i class=emphasis>callback</I> 
is a situation where you'd like to pass a reference to some behavior 
and have another object invoke it later. In C or C++, this is prime territory 
for function pointers; in Java, we'll use interfaces instead. 

<p class=para>
Consider two classes: a <tt class=literal>TickerTape</tt> class that 
displays data and a <tt class=literal>TextSource</tt> class that provides 
an information feed. We'd like our <tt class=literal>TextSource</tt> 
to send any new text data. We could have <tt class=literal>TextSource</tt> 
store a reference to a <tt class=literal>TickerTape</tt> object, but 
then we could never use our <tt class=literal>TextSource</tt> to send 
data to any other kind of object. Instead, we'd have to proliferate 
subclasses of <tt class=literal>TextSource</tt> that dealt with different 
types. A more elegant solution is to have <tt class=literal>TextSource</tt> 
store a reference to an interface type, <tt class=literal>TextUpdateable</tt>: 

<div class=programlisting>
<p>
<pre>
interface TextUpdateable { 
    receiveText( String text ); 
} 
 
class TickerTape implements TextUpdateable { 
    TextSource source; 
 
    init() { 
        source = new TextSource( this ); 
        ... 
    } 
 
    public receiveText( String text ) { 
        scrollText( text ): 
    } 
    ... 
} 
 
class TextSource { 
    TextUpdateable receiver; 
 
    TextSource( TextUpdateable r ) { 
        receiver = r; 
    } 
 
    private sendText( String s ) { 
        receiver.receiveText( s ); 
    } 
    ... 
} 
</PRE>
</DIV>

<p class=para>
The only thing <tt class=literal>TextSource</tt> really cares about 
is finding the right method to invoke to send text. Thus, we can list that 
method in an interface called <tt class=literal>TextUpdateable</tt> 
and have our <tt class=literal>TickerTape</tt> implement the interface. 
A <tt class=literal>TickerTape</tt> object can then be used anywhere we need something of the type <tt class=literal>TextUpdateable</tt>. 
In this case, the <tt class=literal>TextSource</tt> constructor takes 
a <tt class=literal>TextUpdateable</tt> object and stores the reference 
in an instance variable of type <tt class=literal>TextUpdateable</tt>. 
Our <tt class=literal>TickerTape</tt> object simply passes a reference 
to itself as the callback for text updates, and the source can invoke its 
<tt class=literal>receiveText()</tt> method as necessary. 

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-5-SECT-8.2">Interface Variables</A></h3>

<p class=para>
<a name="CH05.VAR"></A>Although interfaces allow us to specify behavior without 
implementation, there's one exception. An interface can contain constant 
variable identifiers; these identifiers appear in any class that implements 
the interface. This functionality allows for predefined parameters that 
can be used with the methods: 

<div class=programlisting>
<p>
<pre>
interface Scaleable { 
    static final int BIG = 0, MEDIUM = 1, SMALL = 2; 
 
    void setScale( int size ); 
} 
</PRE>
</DIV>

<p class=para>
The <tt class=literal>Scaleable</tt> interface defines three integers: 
<tt class=literal>BIG</tt>, <tt class=literal>MEDIUM</tt>, and <tt class=literal>SMALL</tt>. 
All variables defined in interfaces are implicitly <tt class=literal>final</tt> 
and <tt class=literal>static</tt>; we don't have to use the 
modifiers here but, for clarity, we recommend you do so. 

<p class=para>
A class that implements <tt class=literal>Scaleable</tt> sees these 
variables: 

<div class=programlisting>
<p>
<pre>
class Box implements Scaleable { 
 
    void setScale( int size ) { 
        switch( size ) { 
            case BIG: 
                ... 
            case MEDIUM: 
                ... 
            case SMALL: 
                ... 
        } 
    } 
    ... 
} 
</PRE>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="ch05-SECT3-AUTOID.5">Empty Interfaces</A></h4>

<p class=para>
Sometimes, interfaces are created just to hold constants; anyone who 
implements the interfaces can see the constant names, much as if they were
included by a C/C++ include file.  This is a somewhat degenerate, but 
acceptable use of interfaces.

<p class=para>
Sometimes completely empty interfaces will be used to serve as a marker
that a class has some special property.  The java.io.Serializeable interface
is a good example (See Chapter 8).  Classes that implement Serializable don't 
add any methods or variables.  Their additional type simply identifies them 
to Java as classes that want to be able to be serialized.

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-5-SECT-8.3">Interfaces and Packages</A></h3>

<p class=para>
Interfaces behave like classes within packages. An interface can be declared 
<tt class=literal>public</tt> to make it visible outside of its package. 
Under the default visibility, an interface is visible only inside of its 
package. There can be only one <tt class=literal>public</tt> interface 
declared in a compilation unit. 

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-5-SECT-8.4">Subinterfaces</A></h3>

<p class=para>
An interface can extend another interface, just as a class can extend another 
class. Such an interface is called a <i class=emphasis>subinterface</I>: 

<div class=programlisting>
<p>
<pre>
interface DynamicallyScaleable extends Scaleable { 
    void changeScale( int size ); 
} 
</PRE>
</DIV>

<p class=para>
The interface <tt class=literal>DynamicallyScaleable</tt> extends our 
previous <tt class=literal>Scaleable</tt> interface and adds an additional 
method. A class that implements <tt class=literal>DynamicallyScaleable</tt> 
must implement all methods of both interfaces. 

<p class=para>
Interfaces can't specify that they implement other interfaces, instead they
are allowed to extend more than one interface.  (This is multiple inheritence
for interfaces).  More than one superinterface can be specified with the 
comma operator:

<div class=programlisting>
<p>
<pre>
    interface DynamicallyScaleable extends Scaleable, SomethingElseable {
        ...
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-5-SECT-9.4">Inside Arrays</A></h3>

<p class=para>
<a name="CH05.ARRAYS"></A>At the end of <a href="ch04_01.htm">Chapter 4, <i>The Java Language</i></A>, I mentioned that arrays have a 
place in the Java class hierarchy, but I didn't give you any details. 
Now that we've discussed the object-oriented aspects of Java, I can 
give you the whole story. 

<p class=para>
Array classes live in a parallel Java class hierarchy under the <tt class=literal>Object</tt> 
class. If a class is a direct subclass of <tt class=literal>Object</tt>, 
then an array class for that base type also exists as a direct subclass 
of <tt class=literal>Object</tt>. Arrays of more derived classes are 
subclasses of the corresponding array classes. For example, consider the 
following class types: 

<div class=programlisting>
<p>
<pre>
class Animal { ... } 
class Bird extends Animal { ... } 
class Penguin extends Bird { ... } 
</PRE>
</DIV>

<p class=para>
<a href="#EXJ-CH-5-FIG-11">Figure 5.10</A> illustrates the class hierarchy for arrays 
of these classes. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="EXJ-CH-5-FIG-11">Figure 5.10: Arrays in the Java class hierarchy</A></h4>


<p>
<img align=middle src="figs/je0511.gif" alt="[Graphic: Figure 5-10]" width=503 height=238 border=0>

</DIV>

<p class=para>
Arrays of the same dimension are related to one another in the same manner 
as their base type classes. In our example, <tt class=literal>Bird</tt> 
is a subclass of <tt class=literal>Animal</tt>, which means that the 
<tt class=literal>Bird[]</tt> type is a subtype of <tt class=literal>Animal[]</tt>. 
In the same way a <tt class=literal>Bird</tt> object can be used 
in place of an <tt class=literal>Animal</tt> object, a <tt class=literal>Bird[]</tt> 
array can be assigned to an <tt class=literal>Animal[]</tt> array: 

<div class=programlisting>
<p>
<pre>
Animal [][] animals; 
Bird [][] birds = new Bird [10][10]; 
birds[0][0] = new Bird(); 
 
// make animals and birds reference the same array object 
animals = birds;   
System.out.println( animals[0][0] );               // prints Bird 
</PRE>
</DIV>

<p class=para>
Because arrays are part of the class hierarchy, we can use <tt class=literal>instanceof</tt> 
to check the type of an array: 

<div class=programlisting>
<p>
<pre>
if ( birds instanceof Animal[][] )                 // yes 
</PRE>
</DIV>

<p class=para>
An array is a subtype of <tt class=literal>Object</tt> and can therefore 
be assigned to <tt class=literal>Object</tt> type variables: 

<div class=programlisting>
<p>
<pre>
Object something; 
something = animals; 
</PRE>
</DIV>

<p class=para>
Since Java knows the actual type of all objects, you can also cast back 
if appropriate: 

<div class=programlisting>
<p>
<pre>
animals = (Animal [][])something; 
</PRE>
</DIV>

<p class=para>
Under unusual circumstances, Java may not be able to check the types
of objects you place into arrays at compile-time. In those cases, it's
possible to receive an <tt class=literal>ArrayStoreException</tt> if you
try to assign the wrong type of object to an array element. Consider
the following:

<div class=programlisting>
<p>
<pre>
class Dog { ... } 
class Poodle extends Dog { ... } 
class Chihuahua extends Dog { ... } 
 
Dog [] dogs; 
Poodle [] poodles = new Poodle [10]; 
 
dogs = poodles;  
 
dogs[3] = new Chihuahua();     // Run-time error, ArrayStoreException 
</PRE>
</DIV>

<p class=para>
Both <tt class=literal>Poodle</tt> and <tt class=literal>Chihuahua</tt> are
subclasses of <tt class=literal>Dog</tt>, so an array of
<tt class=literal>Poodle</tt> objects can therefore be assigned to an
array of <tt class=literal>Dog</tt> objects, as I described
previously. The problem is that an object assignable to an
element of an array of type <tt class=literal>Dog[]</tt> may not be
assignable to an element of an array of type
<tt class=literal>Poodle</tt>. A <tt class=literal>Chihuahua</tt> object, for
instance, can be assigned to a <tt class=literal>Dog</tt> element because
it's a subtype of <tt class=literal>Dog</tt>, but not to a
<tt class=literal>Poodle</tt> element.[6]

<blockquote class=footnote>
<p class=para>[6] 
In some sense this could be considered a tiny hole in the Java type 
system. It doesn't occur elsewhere in Java, only with arrays. This is 
because array objects exhibit <i class=emphasis>covariance</I> in 
overriding their assignment and extraction methods. Covariance allows array 
subclasses to override methods with arguments or return values that are 
subtypes of the overridden methods, where the methods would normally be 
overloaded or prohibited. This allows array subclasses to operate on their 
base types with type safety, but also means that subclasses have different 
capabilities than their parents, leading to the problem shown above. 
</blockquote>
</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch05_09.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Variable and Method Visibility</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Inner Classes</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
