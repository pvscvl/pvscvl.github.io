<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 7] 7.2 Math Utilities</TITLE>
<meta name="author" content="Pat Niemeyer and Josh Peck">
<meta name="date" content="Tue Jul 22 18:55:34 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Exploring Java">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Exploring Java" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7<br>Basic Utility Classes</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch07_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="EXJ-CH-7-SECT-2">7.2 Math Utilities</A></h2>

<p class=para>
<a name="CH07.MATH1"></A><a name="CH07.MATH2"></A>Java supports integer and floating-point arithmetic
directly. Higher-level math operations are supported through the
<tt class=literal>java.lang.Math</tt> class. Java provides wrapper classes
for all primitive data types, so you can treat them as objects if
necessary. Java also provides the <tt class=literal>java.util.Random</tt>
class for generating random numbers.

<p class=para>
Java handles errors in integer arithmetic by throwing an
<tt class=literal>ArithmeticException</tt>:

<div class=programlisting>
<p>
<pre>
int zero = 0; 
 
try { 
    int i = 72 / zero; 
}  
catch ( ArithmeticException e ) {       // division by zero 
} 
</PRE>
</DIV>

<p class=para>
To generate the error in the above example, we created the
intermediate variable <tt class=literal>zero</tt>. The compiler is
somewhat crafty and would have caught us if we had blatantly tried to
perform a division by zero.

<p class=para>
Floating-point arithmetic expressions, on the other hand,
don't throw exceptions. Instead, they take on the special
out-of-range values shown in <a href="#EXJ-CH-7-TAB-3">Table 7.3</A>.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="EXJ-CH-7-TAB-3">Table 7.3: Special Floating-Point Values</A></CAPTION>
<tr class=row>
<th align="left">Value</TH>
<th align="left">Mathematical representation</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>POSITIVE_INFINITY</tt></TD>
<td align="left">1.0/0.0</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>NEGATIVE_INFINITY</tt></TD>
<td align="left">-1.0/0.0</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>NaN</tt></TD>
<td align="left">0.0/0.0</TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
The following example generates an infinite result: 

<div class=programlisting>
<p>
<pre>
double zero = 0.0; 
double d = 1.0/zero; 
 
if ( d == Double.POSITIVE_INFINITY ) 
    System.out.println( "Division by zero" ); 
</PRE>
</DIV>

<p class=para>
The special value <tt class=literal>NaN</tt> indicates the result is
"not a number." The value <tt class=literal>NaN</tt> has the
special distinction of not being equal to itself (<tt class=literal>NaN !=
NaN</tt>). Use <tt class=literal>Float.isNaN()</tt> or
<tt class=literal>Double.isNaN()</tt> to test for <tt class=literal>NaN</tt>.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-7-SECT-2.1">java.lang.Math</A></h3>

<p class=para>
The <tt class=literal>java.lang.Math</tt> class serves as Java's
math library. All its methods are <tt class=literal>static</tt> and
used directly&nbsp;; you can't instantiate a <tt class=literal>Math</tt>
object. We use this kind of degenerate class when we really want
methods to approximate normal functions in C. While this tactic defies the
principles of object-oriented design, it makes sense in this
case, as it provides a means of grouping some related utility
functions in a single class. <a href="#EXJ-CH-7-TAB-4">Table 7.4</A> summarizes the methods in <tt class=literal>java.lang.Math</tt>. 

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="EXJ-CH-7-TAB-4">Table 7.4: Methods in java.lang.Math</A></CAPTION>
<tr class=row>
<th align="left">Method</TH>
<th align="left">Argument type(s)</TH>
<th align="left">Functionality</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.abs(a)</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>int</tt>, <tt class=literal>long</tt>, <tt class=literal>float</tt>, <tt class=literal>double</tt></TD>
<td align="left">Absolute value</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.acos(a)</tt></TD>
<td align="left"><tt class=literal>double</tt></TD>
<td align="left">Arc cosine</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.asin(a)</tt></TD>
<td align="left"><tt class=literal>double</tt></TD>
<td align="left">Arc sine</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.atan(a)</tt></TD>
<td align="left"><tt class=literal>double</tt></TD>
<td align="left">Arc tangent</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.atan2(a,b)</tt></TD>
<td align="left"><tt class=literal>double</tt></TD>
<td align="left">

<p class=para>
Converts rectangular to polar coordinates</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.ceil(a)</tt></TD>
<td align="left"><tt class=literal>double</tt></TD>
<td align="left">

<p class=para>
Smallest whole number greater than or equal to <tt class=literal>a</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.cos(a)</tt></TD>
<td align="left"><tt class=literal>double</tt></TD>
<td align="left">Cosine</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.exp(a)</tt></TD>
<td align="left"><tt class=literal>double</tt></TD>
<td align="left">

<p class=para>
Exponential number to the power of <tt class=literal>a</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.floor(a)</tt></TD>
<td align="left"><tt class=literal>double</tt></TD>
<td align="left">

<p class=para>
Largest whole number less than or equal to <tt class=literal>a</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.log(a)</tt></TD>
<td align="left"><tt class=literal>double</tt></TD>
<td align="left">Natural logarithm of <tt class=literal>a</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.max(a, b)</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>int</tt>, <tt class=literal>long</tt>, <tt class=literal>float</tt>, <tt class=literal>double</tt></TD>
<td align="left">Maximum</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.min(a, b)</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>int</tt>, <tt class=literal>long</tt>, <tt class=literal>float</tt>, <tt class=literal>double</tt></TD>
<td align="left">Minimum</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.pow(a, b)</tt></TD>
<td align="left"><tt class=literal>double</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>a</tt> to the power of <tt class=literal>b</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.random()</tt></TD>
<td align="left">None</TD>
<td align="left">Random number generator</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.rint(a)</tt></TD>
<td align="left"><tt class=literal>double</tt></TD>
<td align="left">

<p class=para>
Converts double value to integral value in double format</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.round(a)</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>float</tt>, <tt class=literal>double</tt></TD>
<td align="left">Rounds</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.sin(a)</tt></TD>
<td align="left"><tt class=literal>double</tt></TD>
<td align="left">Sine</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.sqrt(a)</tt></TD>
<td align="left"><tt class=literal>double</tt></TD>
<td align="left">Square root</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>Math.tan(a)</tt></TD>
<td align="left"><tt class=literal>double</tt></TD>
<td align="left">Tangent</TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
<tt class=literal>log()</tt>, <tt class=literal>pow()</tt>, and
<tt class=literal>sqrt()</tt> can throw an
<tt class=literal>ArithmeticException</tt>. <tt class=literal>abs()</tt>,
<tt class=literal>max()</tt>, and <tt class=literal>min()</tt> are overloaded
for all the scalar values, <tt class=literal>int</tt>,
<tt class=literal>long</tt>, <tt class=literal>float</tt>, or
<tt class=literal>double</tt>, and return the corresponding type. Versions
of <tt class=literal>Math.round()</tt> accept either
<tt class=literal>float</tt> or <tt class=literal>double</tt> and return
<tt class=literal>int</tt> or <tt class=literal>long</tt> respectively. The
rest of the methods operate on and return <tt class=literal>double</tt>
values:

<div class=programlisting>
<p>
<pre>
double irrational = Math.sqrt( 2.0 ); 
int bigger = Math.max( 3, 4 ); 
long one = Math.round( 1.125798 ); 
</PRE>
</DIV>

<p class=para>
For convenience, <tt class=literal>Math</tt> also contains the
<tt class=literal>static</tt> <tt class=literal>final</tt>
<tt class=literal>double</tt> values <tt class=literal>E</tt> and
<tt class=literal>PI</tt>:

<div class=programlisting>
<p>
<pre>
double circumference = diameter * Math.PI; 
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-7-SECT-2.2">java.math</A></h3>

<p class=para>
If a <tt class=literal>long</tt> or a <tt class=literal>double</tt>
just isn't big enough for you, the <tt class=literal>java.math</tt> package
provides two classes, <tt class=literal>BigInteger</tt> and
<tt class=literal>BigDecimal</tt>, that support arbitrary-precision
numbers.  These are full-featured classes with a bevy of methods for
performing arbitrary-precision math.  In the following example, we
use <tt class=literal>BigInteger</tt> to add two numbers together.

<div class=programlisting>
<p>
<pre>
try {
    BigDecimal twentyone = new BigDecimal("21");
    BigDecimal seven = new BigDecimal("7");
    BigDecimal sum = twentyone.add(seven);
     
    int twentyeight = sum.intValue();
}
catch (NumberFormatException nfe) { }
catch (ArithmeticException ae) { }
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-7-SECT-2.3">Wrappers for Primitive Types</A></h3>

<p class=para>
In languages like Smalltalk, numbers and other simple types are
objects, which makes for an elegant language design, but has
trade-offs in efficiency and complexity. By contrast, there is a
schism in the Java world between class types (i.e., objects) and
primitive types (i.e., numbers, characters, and boolean values). Java
accepts this trade-off simply for efficiency reasons. When
you're crunching numbers you want your computations to be
lightweight; having to use objects for primitive types would seriously
affect performance. For the times you want to treat values as
objects, Java supplies a wrapper class for each of the primitive
types, as shown in <a href="#EXJ-CH-7-TAB-5">Table 7.5</A>.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="EXJ-CH-7-TAB-5">Table 7.5: Primitive Type Wrappers</A></CAPTION>
<tr class=row>
<th align="left">Primitive</TH>
<th align="left">Wrapper</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>void</tt></TD>
<td align="left"><tt class=literal>java.lang.Void</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>boolean</tt></TD>
<td align="left"><tt class=literal>java.lang.Boolean</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>char</tt></TD>
<td align="left"><tt class=literal>java.lang.Character</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>byte</tt></TD>
<td align="left"><tt class=literal>java.lang.Byte</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>short</tt></TD>
<td align="left"><tt class=literal>java.lang.Short</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>int</tt></TD>
<td align="left"><tt class=literal>java.lang.Integer</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>long</tt></TD>
<td align="left"><tt class=literal>java.lang.Long</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>float</tt></TD>
<td align="left"><tt class=literal>java.lang.Float</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>double</tt></TD>
<td align="left"><tt class=literal>java.lang.Double</tt></TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
An instance of a wrapper class encapsulates a single value of
its corresponding type. It's an immutable object that serves as a
container to hold the value and let us retrieve it later. You can
construct a wrapper object from a primitive value or from a
<tt class=literal>String</tt> representation of the value. The following
code is equivalent:

<div class=programlisting>
<p>
<pre>
Float pi = new Float( 3.14 ); 
Float pi = new Float( "3.14" ); 
</PRE>
</DIV>

<p class=para>
Wrapper classes throw a <tt class=literal>NumberFormatException</tt> when
there is an error in parsing from a string:

<div class=programlisting>
<p>
<pre>
try { 
    Double bogus = new Double( "huh?" ); 
} 
catch ( NumberFormatException e ) {     // bad number 
} 
</PRE>
</DIV>

<p class=para>
You should arrange to catch this exception if you want to deal with
it. Otherwise, since it's a subclass of
<tt class=literal>RuntimeException</tt>, it will propagate up the call
stack and eventually cause a run-time error if not caught.

<p class=para>
Sometimes you'll use the wrapper classes simply to parse
the <tt class=literal>String</tt> representation of a number:

<div class=programlisting>
<p>
<pre>
String sheep = getParameter("sheep"); 
int n = new Integer( sheep ).intValue(); 
</PRE>
</DIV>

<p class=para>
Here we are retrieving the value of the <tt class=literal>sheep</tt>
parameter. This value is returned as a <tt class=literal>String</tt>, so
we need to convert it to a numeric value before we can use it. Every
wrapper class provides methods to get primitive values out of the
wrapper; we are using <tt class=literal>intValue()</tt> to retrieve an
<tt class=literal>int</tt> out of <tt class=literal>Integer</tt>. Since
parsing a <tt class=literal>String</tt> representation of a number is such
a common thing to do, the <tt class=literal>Integer</tt> and
<tt class=literal>Long</tt> classes also provide the
<tt class=literal>static</tt> methods
<tt class=literal>Integer.parseInt()</tt> and
<tt class=literal>Long.parseLong()</tt> that read a
<tt class=literal>String</tt> and return the appropriate type. So the
second line above is equivalent to:

<div class=programlisting>
<p>
<pre>
int n = Integer.parseInt( sheep ); 
</PRE>
</DIV>

<p class=para>
All wrappers provide access to their values in various
forms. You can retrieve scalar values with the methods
<tt class=literal>doubleValue()</tt>, <tt class=literal>floatValue()</tt>,
<tt class=literal>longValue()</tt>, and <tt class=literal>intValue()</tt>:

<div class=programlisting>
<p>
<pre>
Double size = new Double ( 32.76 ); 
 
double d = size.doubleValue(); 
float f = size.floatValue(); 
long l = size.longValue(); 
int i = size.intValue(); 
</PRE>
</DIV>

<p class=para>
The code above is equivalent to the primitive
<tt class=literal>double</tt> value cast to the various types. For
convenience, you can cast between the wrapper classes like 
<tt class=literal>Double</tt> class and the primitive data types.

<p class=para>
Another common use of wrappers occurs when we have to treat a
primitive value as an object in order to place it in a list or other
structure that operates on objects. As you'll see shortly, a
<tt class=literal>Vector</tt> is an extensible array of
<tt class=literal>Object</tt>s. We can use wrappers to hold numbers in
a <tt class=literal>Vector</tt>, along with other objects:

<div class=programlisting>
<p>
<pre>
Vector myNumbers = new Vector(); 
 
Integer thirtyThree = new Integer( 33 ); 
myNumbers.addElement( thirtyThree ); 
</PRE>
</DIV>

<p class=para>
Here we have created an <tt class=literal>Integer</tt> wrapper so that we
can insert the number into the <tt class=literal>Vector</tt> using
<tt class=literal>addElement()</tt>. Later, when we are taking elements
back out of the <tt class=literal>Vector</tt>, we can get the number back
out of the <tt class=literal>Integer</tt> as follows:

<div class=programlisting>
<p>
<pre>
Integer theNumber = (Integer)myNumbers.firstElement(); 
int n = theNumber.intValue();           // n = 33 
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="EXJ-CH-7-SECT-2.4">Random Numbers</A></h3>

<p class=para>
You can use the <tt class=literal>java.util.Random</tt> class to generate
random values. It's a pseudo-random number generator that can be
initialized with a 48-bit seed.[1]
 The default constructor uses the current 
time as a seed, but if you want a repeatable sequence, specify your 
own seed with: 

<blockquote class=footnote>
<p class=para>[1] 
The generator uses a linear congruential formula. See <i class=citetitle>The Art of 
Computer Programming</i>, Volume 2 "Semi-numerical Algorithms,"
by Donald Knuth (Addison-Wesley). 
</blockquote>
<div class=programlisting>
<p>
<pre>
long seed = mySeed; 
Random rnums = new Random( seed ); 
</PRE>
</DIV>

<p class=para>
This code creates a random-number generator. Once you have a generator, 
you can ask for random values of various types using the methods listed 
in <a href="#EXJ-CH-7-TAB-6">Table 7.6</A>.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="EXJ-CH-7-TAB-6">Table 7.6: Random Number Methods</A></CAPTION>
<tr class=row>
<th align="left">Method</TH>
<th align="left">Range</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>nextInt()</tt></TD>
<td align="left">-2147483648 to 2147483647</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>nextLong()</tt></TD>
<td align="left">-9223372036854775808 to 9223372036854775807</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>nextFloat()</tt></TD>
<td align="left">-1.0 to 1.0</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>nextDouble()</tt></TD>
<td align="left">-1.0 to 1.0</TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
By default, the values are uniformly distributed. You can use the
<tt class=literal>nextGaussian()</tt> method to create a Gaussian
distribution of <tt class=literal>double</tt> values, with a mean of 0.0
and a standard deviation of 1.0.

<p class=para>
The <tt class=literal>static</tt> method <tt class=literal>Math.random()</tt>
retrieves a random <tt class=literal>double</tt> value. This method
initializes a <tt class=literal>private</tt> random-number generator in
the <tt class=literal>Math</tt> class, using the default
<tt class=literal>Random</tt> constructor.
 So every call to
<tt class=literal>Math.random()</tt> corresponds to a call to
<tt class=literal>nextDouble()</tt> on that random number generator.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch07_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Strings</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Dates</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
