<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 9] 9.2 Declaring Exceptions</TITLE>
<meta name="author" content="Mark Grand">
<meta name="date" content="Thu Jul 31 13:17:34 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="java">
<meta name="title" content="Java Language Reference">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Language Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch09_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 9<br>Exception Handling</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch09_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JLR2-CH-9-SECT-2">9.2 Declaring Exceptions</A></h2>

<p class=para>
<a name="CH09.DEC"></A><a name="CH09.DEC1"></A>If a method is expected to throw any exceptions, the method
declaration must declare that fact in a <tt class=literal>throws</tt>
clause. If a method implementation contains a <tt class=literal>throw</tt>
statement, it is possible that an exception will be thrown
from within the method. In addition, if a method calls another method
declared with a <tt class=literal>throws</tt> clause, there is the possibility
that an exception will be thrown from within the method. If the
exception is not caught inside the method with a <tt class=literal>try</tt>
statement, it will be thrown out of the method to its caller. Any
exception that can be thrown out of a method in this way must be
listed in a <tt class=literal>throws</tt> clause in the method declaration.
The classes listed in a <tt class=literal>throws</tt> clause must be
<tt class=literal>Throwable</tt> or
any of its subclasses; the <tt class=literal>Throwable</tt> class is
the superclass of all objects that can be thrown in Java.

<p class=para>
However, there are certain types of exceptions that do not
have to be listed in a <tt class=literal>throws</tt> clause. Specifically,
if the exception is an instance of <tt class=literal>Error</tt>,
<tt class=literal>RuntimeException</tt>,
or a subclass of one of those classes, it does not have to be listed
in a <tt class=literal>throws</tt> clause. Subclasses
of the <tt class=literal>Error</tt>
class correspond to situations that are not easily predicted,
such as the system running out of memory. Subclasses
of <tt class=literal>RuntimeException</tt>
correspond to many common run-time problems, such as illegal casts
and array index problems. The reason that these types of exceptions
are treated specially is that they can be thrown from such a large
number of places that essentially every method would have to declare
them.

<p class=para>
Consider the following example:

<div class=screen>
<p>
<pre>
import java.io.IOException;
class throwsExample {
    char[] a;
    int position;
    ...
    // Method explicitly throws an exception
    int read() throws IOException {
        if (position &gt;= a.length)
            throw new IOException();
        return a[position++];
    }
    // Method implicitly throws an exception
    String readUpTo(char terminator) throws IOException {
        StringBuffer s = new StringBuffer();
        while (true) {
            int c = read(); // Can throw IOException
            if (c == -1 || c == terminator) {
                return s.toString();
            }
            s.append((char)c);
        }
        return s.toString();
    }
    // Method catches an exception internally
    int getLength() {
        String s;
        try {
            s = readUpTo(':');
        } catch (IOException e) {
            return 0;
        }
        return s.length();
    }
    // Method can throw a RuntimeException
    int getAvgLength() {
        int count = 0;
        int total = 0;
        int len;
        while (true){
            len = getLength();
            if (len == 0)
                break;
            count++;
            total += len;
        }
        return total/count; // Can throw ArithmeticException
    }
}
</PRE>
</DIV>

<p class=para>
The method <tt class=literal>read()</tt> can throw an
<tt class=literal>IOException</tt>,
so it declares that fact in its <tt class=literal>throws</tt> clause.
Without that <tt class=literal>throws</tt> clause, the compiler would
complain that the method must either declare <tt class=literal>IOException</tt>
in its <tt class=literal>throws</tt> clause or catch it. Although the
<tt class=literal>readUpTo()</tt> method does not explicitly throw any
exceptions, it calls the <tt class=literal>read()</tt> method that does
throw an <tt class=literal>IOException</tt>, so it declares that fact
in its <tt class=literal>throws</tt> clause. Whether explicitly or implicitly
thrown, the requirement to catch or declare an exception is the
same. The <tt class=literal>getLength()</tt> method catches the
<tt class=literal>IOException</tt> thrown by <tt class=literal>readUpTo()</tt>,
so it does not have to declare the exception. The final method,
<tt class=literal>getAvgLength()</tt>, can throw an
<tt class=literal>ArithmeticException</tt> if <tt class=literal>count</tt>
is zero. Because <tt class=literal>ArithmeticException</tt> is a subclass
of <tt class=literal>RuntimeException</tt>, the fact that it can be
thrown out of <tt class=literal>getAvgLength()</tt> does not need to be declared in a <tt class=literal>throws</tt> clause.

<p class=para>
<b>References</b>
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Constructors</A>;
<a href="ch09_04.htm">Errors</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Methods</A>;
<a href="ch09_04.htm">Runtime exceptions</A>;
<a href="ch06_11.htm">The throw Statement</A>;
<a href="ch06_12.htm">The try Statement</A>;
<a href="ch10_25.htm">Throwable</A>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch09_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch09_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Handling Exceptions</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Generating Exceptions</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
