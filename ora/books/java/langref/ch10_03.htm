<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 10] Character</TITLE>
<meta name="author" content="Mark Grand">
<meta name="date" content="Fri Aug  8 15:22:42 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="java">
<meta name="title" content="Java Language Reference">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Language Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 10<br>The java.lang Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch10_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=refnamediv>
<h1>Character</H1>

<h2>Name</H2>

Character

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.19">Synopsis</A></h2>

<dl class=variablelist>
<dt class=varlistentry>Class Name:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.Character</tt>

<p>
<dt class=varlistentry>Superclass:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.Object</tt>

<p>
<dt class=varlistentry>Immediate Subclasses:<br>
<dd>

<p class=para>
None

<p>
<dt class=varlistentry>Interfaces Implemented:<br>
<dd>

<p class=para>
<tt class=literal>java.io.Serializable</tt>

<p>
<dt class=varlistentry>Availability:<br>
<dd>

<p class=para>
JDK 1.0 or later</DL>
</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.20">Description</A></h2>

<p class=para>
<a name="MAN.CHARACTER.1"></A>The <tt class=literal>Character</tt> class provides an object
wrapper for a <tt class=literal>char</tt> value. This is useful when
you need to treat a <tt class=literal>char</tt> value as an object.
For example, there are a number of utility methods that take a reference
to an <tt class=literal>Object</tt> as one of their arguments. You cannot
specify a <tt class=literal>char</tt> value for one of these arguments,
but you can provide a reference to a <tt class=literal>Character</tt> object
that encapsulates the <tt class=literal>char</tt> value. Furthermore,
as of JDK 1.1, the <tt class=literal>Character</tt> class is necessary to 
support the Reflection API and class literals.

<p class=para>
In Java, <tt class=literal>Character</tt> objects represent values defined
by the Unicode standard. Unicode is defined
 
by an organization called the Unicode Consortium. The defining document for
Unicode is <i class=emphasis>The Unicode Standard, Version 2.0</I>
(ISBN 0-201-48345-9). More recent information about Unicode is
available at <i class=emphasis>http://unicode.org</I>. 
<a href="appa_01.htm">Appendix a, <i>The Unicode 2.0 Character Set</i></A>, contains a table that lists the characters
defined by the Unicode 2.0 standard.

<p class=para>
The <tt class=literal>Character</tt> class provides some utility
methods, such as methods for determining the type (e.g., uppercase
or lowercase, digit or letter) of a character and for converting
from uppercase to lowercase. The logic for these utility methods
is based on a Unicode attribute table that is part of the Unicode
standard. That table is available at
<i class=emphasis>ftp://unicode.org/pub/2.0-Update/UnicodeData-2.0.14.txt</I>.

<p class=para>
Some of the methods in the <tt class=literal>Character</tt> class
are concerned with characters that are digits; these characters are used by
a number of other classes to convert strings that contain numbers
into actual numeric values. The digit-related methods all use a
radix value to interpret characters.
The <i class=emphasis>radix</I> is the numeric base used to represent numbers
as characters or strings. Octal is a radix 8 representation, while
hexadecimal is a radix 16 representation. The methods that require
a <tt class=literal>radix</tt> parameter use it to determine which characters
should be treated as valid digits. In radix 2, only the characters
`0' and `1' are valid digits. In radix 16, the characters `0' through
`9', `a' through `z', and `A' through `Z' are considerd valid digits.

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.21">Class Summary</A></h2>

<div class=screen>
<p>
<pre>
public final class java.lang.Character extends java.lang.Object 
                                       implements java.io.Serializable {
    // Constants
    public final static byte COMBINING_SPACING_MARK;        // New in 1.1
    public final static byte CONNECTOR_PUNCTUATION;         // New in 1.1
    public final static byte CONTROL;                       // New in 1.1
    public final static byte CURRENCY_SYMBOL;               // New in 1.1
    public final static byte DASH_PUNCTUATION;              // New in 1.1
    public final static byte DECIMAL_DIGIT_NUMBER;          // New in 1.1 
    public final static byte ENCLOSING_MARK;                // New in 1.1
    public final static byte END_PUNCTUATION;               // New in 1.1
    public final static byte FORMAT;                        // New in 1.1 
    public final static byte LETTER_NUMBER;                 // New in 1.1
    public final static byte LINE_SEPARATOR;                // New in 1.1
    public final static byte LOWERCASE_LETTER;              // New in 1.1
    public final static byte MATH_SYMBOL;                   // New in 1.1
    public final static int MAX_RADIX;
    public final static char MAX_VALUE;
    public final static int MIN_RADIX;
    public final static char MIN_VALUE;
    public final static byte MODIFIER_LETTER;               // New in 1.1
    public final static byte MODIFIER_SYMBOL;               // New in 1.1
    public final static byte NON_SPACING_MARK;              // New in 1.1
    public final static byte OTHER_LETTER;                  // New in 1.1
    public final static byte OTHER_NUMBER;                  // New in 1.1
    public final static byte OTHER_PUNCTUATION;             // New in 1.1
    public final static byte OTHER_SYMBOL;                  // New in 1.1
    public final static byte PARAGRAPH_SEPARATOR;           // New in 1.1
    public final static byte PRIVATE_USE;                   // New in 1.1
    public final static byte SPACE_SEPARATOR;               // New in 1.1
    public final static byte START_PUNCTUATION;             // New in 1.1
    public final static byte SURROGATE;                     // New in 1.1
    public final static byte TITLECASE_LETTER;              // New in 1.1
    public final static Class TYPE;                         // New in 1.1
    public final static byte UNASSIGNED;                    // New in 1.1
    public final static byte UPPERCASE_LETTER;              // New in 1.1
    // Constructors
    public Character(char value);
    // Class Methods
    public static int digit(char ch, int radix);
    public static char forDigit(int digit, int radix);
    public static int getNumericValue(char ch);             // New in 1.1
    public static int getType(char ch);                     // New in 1.1
    public static boolean isDefined(char ch);
    public static boolean isDigit(char ch);
    public static boolean isIdentifierIgnorable(char ch);   // New in 1.1
    public static boolean isISOControl(char ch);            // New in 1.1
    public static boolean isJavaIdentifierPart(char ch);    // New in 1.1
    public static boolean isJavaIdentifierStart(char ch);   // New in 1.1
    public static boolean isJavaLetter(char ch);        // Deprecated in 1.1
    public static boolean isJavaLetterOrDigit(char ch); // Deprecated in 1.1
    public static boolean isLetter(char ch);
    public static boolean isLetterOrDigit(char ch);
    public static boolean isLowerCase(char ch);
    public static boolean isSpace(char ch);             // Deprecated in 1.1
    public static boolean isSpaceChar(char ch);             // New in 1.1
    public static boolean isTitleCase(char ch);
    public static boolean isUnicodeIdentifierPart(char ch); // New in 1.1
    public static boolean isUnicodeIdentifierStart(char ch);// New in 1.1
    public static boolean isUpperCase(char ch);
    public static boolean isWhitespace(char ch);            // New in 1.1
    public static char toLowerCase(char ch);
    public static char toTitleCase(char ch);
    public static char toUpperCase(char ch);
    // Instance Methods
    public char charValue();
    public boolean equals(Object obj);
    public int hashCode();
    public String toString();
}
</PRE>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.22">Constants</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.28">COMBINING_SPACING_MARK</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.32"><tt class=literal>public final static byte COMBINING_SPACING_MARK</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.29">CONNECTOR_PUNCTUATION</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.33"><tt class=literal>public final static byte CONNECTOR_PUNCTUATION</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.30">CONTROL</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.34"><tt class=literal>public final static byte CONTROL</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.31">CURRENCY_SYMBOL</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.35"><tt class=literal>public final static byte CURRENCY_SYMBOL</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.32">DASH_PUNCTUATION</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.36"><tt class=literal>public final static byte DASH_PUNCTUATION</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.33">DECIMAL_DIGIT_NUMBER</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.37"><tt class=literal>public final static byte DECIMAL_DIGIT_NUMBER</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.34">ENCLOSING_MARK</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.38"><tt class=literal>public final static byte ENCLOSING_MARK</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.35">END_PUNCTUATION</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.39"><tt class=literal>public final static byte END_PUNCTUATION</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.36">FORMAT</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.40"><tt class=literal>public final static byte FORMAT</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.37">LETTER_NUMBER</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.41"><tt class=literal>public final static byte LETTER_NUMBER</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.38">LINE_SEPARATOR</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.42"><tt class=literal>public final static byte LINE_SEPARATOR</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.39">LOWERCASE_LETTER</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.43"><tt class=literal>public final static byte LOWERCASE_LETTER</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.40">MATH_SYMBOL</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.44"><tt class=literal>public final static byte MATH_SYMBOL</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.41">MAX_RADIX</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.45"><tt class=literal>public static final int MAX_RADIX = 36</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
The maximum value that can be specified for a radix.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.42">MAX_VALUE</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.46"><tt class=literal>public final static char MAX_VALUE = '\ufff'f</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
The largest value that can be represented by a <tt class=literal>char</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.43">MIN_RADIX</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.47"><tt class=literal>public static final int MIN_RADIX = 2</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
The minimum value that can be specified for a radix.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.44">MIN_VALUE</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.48"><tt class=literal>public final static char MIN_VALUE = '\u0000'</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
The smallest value that can be represented by a <tt class=literal>char</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.45">MODIFIER_LETTER</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.49"><tt class=literal>public final static byte MODIFIER_LETTER</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.46">MODIFIER_SYMBOL</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.50"><tt class=literal>public final static byte MODIFIER_SYMBOL</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.47">NON_SPACING_MARK</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.51"><tt class=literal>public final static byte NON_SPACING_MARK</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.48">OTHER_LETTER</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.52"><tt class=literal>public final static byte OTHER_LETTER</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.49">OTHER_NUMBER</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.53"><tt class=literal>public final static byte OTHER_NUMBER</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.50">OTHER_PUNCTUATION</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.54"><tt class=literal>public final static byte OTHER_PUNCTUATION</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.51">OTHER_SYMBOL</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.55"><tt class=literal>public final static byte OTHER_SYMBOL</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.52">PARAGRAPH_SEPARATOR</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.56"><tt class=literal>public final static byte PARAGRAPH_SEPARATOR</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.53">PRIVATE_USE</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.57"><tt class=literal>public final static byte PRIVATE_USE</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.54">SPACE_SEPARATOR</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.58"><tt class=literal>public final static byte SPACE_SEPARATOR</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.55">START_PUNCTUATION</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.59"><tt class=literal>public final static byte START_PUNCTUATION</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.56">SURROGATE</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.60"><tt class=literal>public final static byte SURROGATE</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.57">TITLECASE_LETTER</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.61"><tt class=literal>public final static byte TITLECASE_LETTER</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.58">TYPE</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.62"><tt class=literal>public static final Class TYPE </tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
The <tt class=literal>Class</tt> object that represents the type
<tt class=literal>char</tt>.
It is always true that <tt class=literal>Character.TYPE</tt> 
<tt class=literal>==</tt> <tt class=literal>char.class</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.59">UNASSIGNED</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.63"><tt class=literal>public final static byte UNASSIGNED</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.60">UPPERCASE_LETTER</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.64"><tt class=literal>public final static byte UPPERCASE_LETTER</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constant can be returned by the <tt class=literal>getType()</tt>
method as the general category of a Unicode character.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.23">Constructors</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.61">Character</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.65"><tt class=literal>public Character(char value)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>value</tt><br>
<dd>

<p class=para>
The <tt class=literal>char</tt> value to be encapsulated
by this object.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a <tt class=literal>Character</tt> object with the given
<tt class=literal>char</tt> value.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.24">Class Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.62">digit</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.66"><tt class=literal>public static int digit(char ch, int radix)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value that is a legal
digit in the given radix.

<p>
<dt class=varlistentry><tt class=literal>radix</tt><br>
<dd>

<p class=para>
The radix used in interpreting the specified character
as a digit. If <tt class=literal>radix</tt> is in the range 2 through
10, only characters for which the <tt class=literal>isDigit()</tt> method
returns <tt class=literal>true</tt> are considered to be valid digits.
If <tt class=literal>radix</tt> is in the range 11 through 36, characters
in the ranges `A' through `Z' and `a' through `z' may be considered
valid digits.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The numeric value of the digit. This method returns <tt class=literal>-1</tt> if
the value of <tt class=literal>ch</tt> is not considered a valid digit,
if <tt class=literal>radix</tt> is less than <tt class=literal>MIN_RADIX</tt>,
or if <tt class=literal>radix</tt> is greater than <tt class=literal>MAX_RADIX</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Returns the numeric value represented by a digit character.
For example, <tt class=literal>digit('7',10)</tt> returns 7. If the
value of <tt class=literal>ch</tt> is not a valid digit, the method
returns <tt class=literal>-1</tt>. For example,
<tt class=literal>digit('7',2)</tt> returns
<tt class=literal>-1</tt> because <tt class=literal>'7'</tt> is not a valid digit in radix 2. A number of methods
in other classes use this method to convert strings that contain
numbers to actual numeric values. The <tt class=literal>forDigit()</tt> method
is an approximate inverse of this method.

<p class=para>
If <tt class=literal>radix</tt> is greater than 10, characters
in the range `A' to `A'+<tt class=literal>radix</tt>-11 are treated
as valid digits. Such a character has the numeric value <tt class=literal>ch</tt>-`A'+10.
By the same token, if <tt class=literal>radix</tt> is greater than 10,
characters in the range `a' to `a'+<tt class=literal>radix</tt>-11 are
treated as valid digits. Such a character has the numeric value
<tt class=literal>ch</tt>-`a'+10.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.63">forDigit</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.67"><tt class=literal>public static char forDigit(int digit, int radix)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>digit</tt><br>
<dd>

<p class=para>
The numeric value represented as a digit character.

<p>
<dt class=varlistentry><tt class=literal>radix</tt><br>
<dd>

<p class=para>
The radix used to represent the specified value.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>

The character that represents the digit corresponding to the specified
numeric value. The method returns `\ 0' if <tt class=literal>digit</tt> is
less than 0, if <tt class=literal>digit</tt> is equal to or greater than
<tt class=literal>radix</tt>, if <tt class=literal>radix</tt> is less than
<tt class=literal>MIN_RADIX</tt>, or if <tt class=literal>radix</tt> is
greater than <tt class=literal>MAX_RADIX</tt>.
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the character that represents the digit
corresponding to the specified numeric value. If <tt class=literal>digit</tt>
is in the range 0 through 9, the method returns `0'+<tt class=literal>digit</tt>.
If <tt class=literal>digit</tt> is in the range 10
through <tt class=literal>MAX_RADIX</tt>-1,
the method returns `a'+<tt class=literal>digit</tt>-10. The method
returns `\ 0' if <tt class=literal>digit</tt> is less than 0, if
<tt class=literal>digit</tt>
is equal to or greater than <tt class=literal>radix</tt>,
if <tt class=literal>radix</tt> is less than <tt class=literal>MIN_RADIX</tt>,
or if <tt class=literal>radix</tt> is greater than <tt class=literal>MAX_RADIX</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.64">getNumericValue</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.68"><tt class=literal>public static int getNumericValue(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The Unicode numeric value of the character as a nonnegative
integer. This method returns <tt class=literal>-1</tt> if the character has no numeric
value; it returns <tt class=literal>-2</tt> if the character has a numeric value that is
not a nonnegative integer, such as <tt class=literal>1/2</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the Unicode numeric value of the specified
character as a nonnegative integer. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.65">getType</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.69"><tt class=literal>public static int getType(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
An <tt class=literal>int</tt> value that represents the Unicode general 
category type of the character.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the Unicode general category type of the specified
character. The value corresponds to one of the general category
constants defined by <tt class=literal>Character</tt>. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.66">isDefined</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.70"><tt class=literal>public static boolean isDefined(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character has an
assigned meaning in the Unicode character set; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns <tt class=literal>true</tt> if the specified
character value has an assigned meaning in the Unicode character
set. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.67">isDigit</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.71"><tt class=literal>public static boolean isDigit(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character is defined
as a digit in the Unicode character set; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not the specified character
is a digit, based on the definition of the character in Unicode.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.68">isIdentifierIgnorable</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.72"><tt class=literal>public static boolean isIdentifierIgnorable(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character is ignorable
in a Java or Unicode identifier; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not the specified character is 
ignorable in a Java or Unicode identifier. The following characters
are ignorable in a Java or Unicode identifier:

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u0000
- \u0008 \u000E - \u001B \u007F - \u009F </tt></TD>
<td align="left">

<p class=para>
ISO control characters that aren't whitespace</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u200C
- \u200F</tt></TD>
<td align="left">

<p class=para>
Join controls</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u200A
- \u200E</tt></TD>
<td align="left">

<p class=para>
Bidirectional controls</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u206A
- \u206F</tt></TD>
<td align="left">

<p class=para>
Format controls</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\uFEFF</tt></TD>
<td align="left">

<p class=para>
Zero-width no-break space</TD>
</TR>
</TABLE>
<p>
</DIV>

</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.69">isISOControl</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.73"><tt class=literal>public static boolean isISOControl(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character is an ISO
control character; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not the specified character is an
ISO control character. A character is an ISO control character if
it falls in the range <tt class=literal>\u0000</tt>
through <tt class=literal>\u001F</tt> or <tt class=literal>\u007F</tt>
through <tt class=literal>\u009F</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.70">isJavaIdentifierPart</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.74"><tt class=literal>public static boolean isJavaIdentifierPart(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character can appear after the
first character in a Java identifier; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>

This method returns <tt class=literal>true</tt> if the specified character
can appear in a Java identifier after the first character. A character
is considered part of a Java identifier if and only if it is a letter,
a digit, a currency symbol (e.g., $), a connecting punctuation
character (e.g., <tt class=literal>_</tt>), a numeric letter (e.g., a
Roman numeral), a combining mark, a nonspacing mark, or an ignorable
control character.
</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.71">isJavaIdentifierStart</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.75"><tt class=literal>public static boolean isJavaIdentifierStart(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character can appear as the
first character in a Java identifier; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns <tt class=literal>true</tt> if the specified character
can appear in a Java identifier as the first character. A character
is considered a start of a Java identifier if and only if it is a letter,
a currency symbol (e.g., $), or a connecting punctuation character 
(e.g., <tt class=literal>_</tt>).</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.72">isJavaLetter</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.76"><tt class=literal>public static boolean isJavaLetter(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
Deprecated as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character can appear
as the first character in a Java identifier;
otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns <tt class=literal>true</tt> if the specified
character can appear as the first character in a Java identifier.
A character is considered a Java letter if and only if it is a letter,
the character $, or the character <tt class=literal>_</tt> .
This method returns <tt class=literal>false</tt> for digits because digits are not
allowed as the first character of an identifier.

<p class=para>
This method is deprecated as of JDK 1.1. You should use 
<tt class=literal>isJavaIdentifierStart()</tt> instead.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.73">isJavaLetterOrDigit</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.77"><tt class=literal>public static boolean isJavaLetterOrDigit(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
Deprecated as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character can appear
after the first character in a Java identifier;
otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns <tt class=literal>true</tt> if the specified
character can appear in a Java identifier after the
first character. A character is considered a Java letter or digit
if and only if it is a letter, a digit, the character $,
or the character <tt class=literal>_</tt>.

<p class=para>
This method is deprecated as of JDK 1.1. You should use 
<tt class=literal>isJavaIdentifierPart()</tt> instead.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.74">isLetter</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.78"><tt class=literal>public static boolean isLetter(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character is defined
as a letter in the Unicode character set; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not the specified character
is a letter, based on the definition of the character in Unicode.
This method does not consider character values in ranges that
have not been assigned meanings by Unicode to be letters.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.75">isLetterOrDigit</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.79"><tt class=literal>public static boolean isLetterOrDigit(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character is defined
as a letter in the Unicode character set; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not the specified character
is a letter or a digit, based on the definition of the character
in Unicode. 
There are some ranges that have not been assigned meanings by
Unicode. If a character value is in one of these ranges, this method
does not consider the character to be a letter.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.76">isLowerCase</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.80"><tt class=literal>public static boolean isLowerCase (char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character is defined
as lowercase in the Unicode character set; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not the specified character
is lowercase. Unicode defines a number of characters that do not
have case mappings; if the specified character is one of these characters,
the method returns <tt class=literal>false</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.77">isSpace</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.81"><tt class=literal>public static boolean isSpace(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
Deprecated as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character is defined
as whitespace in the ISO-Latin-1 character set; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not the specified character
is whitespace. This method recognizes the whitespace
characters shown in the following table.

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u0009</tt></TD>
<td align="left">

<p class=para>
Horizontal tab</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u000A</tt></TD>
<td align="left">

<p class=para>
Newline</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u000C</tt></TD>
<td align="left">

<p class=para>
Formfeed</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u000D</tt></TD>
<td align="left">

<p class=para>
Carriage return</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u0020 ` `</tt></TD>
<td align="left">

<p class=para>
Space</TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
This method is deprecated as of JDK 1.1. You should use 
<tt class=literal>isWhitespace()</tt> instead.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.78">isSpaceChar</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.82"><tt class=literal>public static boolean isSpaceChar(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character is a Unicode 2.0 space
characters; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines if the specified character
is a space character according to the Unicode 2.0 specification.
A character is considered to be a Unicode space character if and only
if it has the general category "Zs", "Zl", or "Zp" in the 
Unicode specification.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.79">isTitleCase</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.83"><tt class=literal>public static boolean isTitleCase(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character is defined
as titlecase in the Unicode character set; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not the specified character
is a titlecase character. Unicode defines a number of characters that do not
have case mappings; if the specified character is one of these characters,
the method returns <tt class=literal>false</tt>.

<p class=para>
Many characters are defined by the Unicode standard as having
upper- and lowercase forms. There are some characters defined
by the Unicode standard that also have a titlecase form. The glyphs
for these characters look like a combination of two Latin letters.
The titlecase form of these characters has a glyph that looks like
a combination of an uppercase Latin character and a lowercase
Latin character; this case should be used when the character appears
as the first character of a word in a title. For example, one of
the Unicode characters that has a titlecase form looks like the
letter `D' followed by the letter `Z'. Here is what the three forms
of this letter look like:

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<td align="left">

<p class=para>
Uppercase</TD>
<td align="left">

<p class=para>
`DZ'</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
Titlecase</TD>
<td align="left">

<p class=para>
`Dz'</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
Lowercase</TD>
<td align="left">

<p class=para>
`dz'</TD>
</TR>
</TABLE>
<p>
</DIV>

</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.80">isUnicodeIdentifierPart</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.84"><tt class=literal>public static boolean isUnicodeIdentifierPart(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character can appear after the
first character in a Unicode identifier; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns <tt class=literal>true</tt> if the specified character
can appear in a Unicode identifier after the first character. A character
is considered part of a Unicode identifier if and only if it is a letter,
a digit, a connecting punctuation character 
(e.g., <tt class=literal>_</tt>), a numeric letter (e.g., a Roman numeral), a combining mark,
a nonspacing mark, or an ignorable control character.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.81">isUnicodeIdentifierStart</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.85"><tt class=literal>public static boolean isUnicodeIdentifierStart(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character can appear as the
first character in a Unicode identifier; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns <tt class=literal>true</tt> if the specified character
can appear in a Unicode identifier as the first character. A character
is considered a start of a Unicode identifier if and only if it is a letter.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.82">isUpperCase</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.86"><tt class=literal>public static boolean isUpperCase(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character is defined
as uppercase in the Unicode character set; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not the specified character
is uppercase. Unicode defines a number of characters that do not
have case mappings; if the specified character is one of these characters,
the method returns <tt class=literal>false</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.83">isWhitespace</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.87"><tt class=literal>public static boolean isWhitespace(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified character is defined as
whitespace according to Java; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not the specified character is
whitespace. This method recognizes the following as whitespace:

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<td align="left">

<p class=para>
Unicode category "Zs" except
<tt class=literal>\u00A0</tt> and <tt class=literal>\uFEFF</tt></TD>
<td align="left">

<p class=para>
Unicode space separators except no-break spaces</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
Unicode category "Zl"</TD>
<td align="left">

<p class=para>
Unicode line separators</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
Unicode category "Zp"</TD>
<td align="left">

<p class=para>
Unicode paragraph separators</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u0009</tt></TD>
<td align="left">

<p class=para>
Horizontal tab</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u000A</tt></TD>
<td align="left">

<p class=para>
Linefeed</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u000B</tt></TD>
<td align="left">

<p class=para>
Vertical tab</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u000C</tt></TD>
<td align="left">

<p class=para>
Formfeed</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u000D</tt></TD>
<td align="left">

<p class=para>
Carriage return</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u001C</tt></TD>
<td align="left">

<p class=para>
File separator</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u001D</tt></TD>
<td align="left">

<p class=para>
Group separator</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u001E</tt></TD>
<td align="left">

<p class=para>
Record separator</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\u001F</tt></TD>
<td align="left">

<p class=para>
Unit separator</TD>
</TR>
</TABLE>
<p>
</DIV>

</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.84">toLowerCase</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.88"><tt class=literal>public static char toLowerCase(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be converted
to lowercase.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The lowercase equivalent of the specified character, or the
character itself if it cannot be converted to lowercase.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the lowercase equivalent of the specified
character value. If the specified character is not uppercase or
if it has no lowercase equivalent, the character is returned unmodified.
The Unicode attribute table determines if a character has a mapping
to a lowercase equivalent.

<p class=para>
Some Unicode characters in the range <tt class=literal>\u2000</tt>
through <tt class=literal>\u2FFF</tt> have lowercase mappings. For
example, <tt class=literal>\u2160</tt> (Roman numeral one) has a lowercase
mapping to <tt class=literal>\u2170</tt> (small Roman numeral one).
The <tt class=literal>toLowerCase()</tt> method maps such characters
to their lowercase equivalents even though the method <tt class=literal>isUpperCase()</tt>
does not return <tt class=literal>true</tt> for such characters.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.85">toTitleCase</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.89"><tt class=literal>public static char toTitleCase(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be converted
to titlecase.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The titlecase equivalent of the specified character, or the
character itself if it cannot be converted to titlecase.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the titlecase equivalent of the specified
character value. If the specified character has no titlecase equivalent,
the character is returned unmodified. The Unicode attribute table
is used to determine the character's titlecase equivalent.

<p class=para>
Many characters are defined by the Unicode standard as having
upper- and lowercase forms. There are some characters defined
by the Unicode standard that also have a titlecase form. The glyphs
for these characters look like a combination of two Latin letters.
The titlecase form of these characters has a glyph that looks like
a combination of an uppercase Latin character and a lowercase
Latin character; this case should be used when the character appears
as the first character of a word in a title. For example, one of
the Unicode characters that has a titlecase form looks like the
letter `D' followed by the letter `Z'. Here is what the three forms
of this letter look like:

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<td align="left">

<p class=para>
Uppercase</TD>
<td align="left">

<p class=para>
`DZ'</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
Titlecase</TD>
<td align="left">

<p class=para>
`Dz'</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
Lowercase</TD>
<td align="left">

<p class=para>
`dz'</TD>
</TR>
</TABLE>
<p>
</DIV>

</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.86">toUpperCase</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.90"><tt class=literal>public static char toUpperCase(char ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value to be converted
to lowercase.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The uppercase equivalent of the specified character, or the
character itself if it cannot be converted to uppercase.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the uppercase equivalent of the specified
character value. If the specified character is not lowercase or
if it has no uppercase equivalent, the character is returned unmodified.
The Unicode attribute table determines if a character has a mapping
to an uppercase equivalent.

<p class=para>
Some Unicode characters in the range <tt class=literal>\u2000</tt>
through <tt class=literal>\u2FFF</tt> have uppercase mappings. For
example, <tt class=literal>\u2170</tt> (small Roman numeral one) has
a lowercase mapping to <tt class=literal>\u2160</tt> (Roman numeral
one). The <tt class=literal>toUpperCase()</tt> method maps such characters
to their uppercase equivalents even though the method <tt class=literal>isLowerCase()</tt>
does not return <tt class=literal>true</tt> for such characters.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.25">Instance Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.87">charValue</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.91"><tt class=literal>public char charValue()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>char</tt> value contained by the object.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.88">equals</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.92"><tt class=literal>public boolean equals(Object obj)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p class=para>
The object to be compared with this object.

<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the objects are equal; <tt class=literal>false</tt>
if they are not.

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Object.equals()</tt>

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns <tt class=literal>true</tt> if <tt class=literal>obj</tt>
is an instance of <tt class=literal>Character</tt>, and it contains the
same value as the object this method is associated with.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.89">hashCode</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.93"><tt class=literal>public int hashCode()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A hashcode based on the <tt class=literal>char</tt> value of
the object.

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Object.hashCode()</tt></DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.90">toString</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.94"><tt class=literal>public String toString()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A <tt class=literal>String</tt> of length one that contains the
character value of the object.

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Object.toString()</tt>

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a string representation of the <tt class=literal>Character</tt>
object.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.26">Inherited Methods</A></h2>

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<th align="left">

<p class=para>
Method</TH>
<th align="left">

<p class=para>
Inherited From</TH>
<th align="left">

<p class=para>
Method</TH>
<th align="left">

<p class=para>
Inherited From</TH>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>clone()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>finalize()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>getClass()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>notify()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>notifyAll()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>wait()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>wait(long)</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>wait(long, int)</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
</TABLE>
<p>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.27">See Also</A></h2>

<p class=para>
<a href="ch02_02.htm#JLR2-CH-2-SECT-2.3.4">Character literals</A>;
<a href="ch10_04.htm">Class</A>;
<a href="ch03_01.htm">Integer types</A>;
<a href="ch10_14.htm">Object</A>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch10_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Byte</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Class</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
