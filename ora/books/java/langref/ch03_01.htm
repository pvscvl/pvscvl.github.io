<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 3] Data Types</TITLE>
<meta name="author" content="Mark Grand">
<meta name="date" content="Thu Jul 31 13:07:20 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="java">
<meta name="title" content="Java Language Reference">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Language Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_02.htm#JLR2-CH-2-SECT-2.3.4"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 3</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch03_02.htm#JLR2-CH-3-SECT-2.3"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="JLR2-CH-3">3. Data Types</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
Primitive Types<br>
<a href="ch03_02.htm#JLR2-CH-3-SECT-2.3">Reference Types</A><br>

<p>
</DIV>

<p class=para>
A <i class=emphasis>data type</I> defines the set of values that
an expression can<a name="CH03.TYPE1"></A>
produce or a variable can contain. The data type of a variable or
expression also defines the operations that can be performed on
the variable or expression. The type of a variable is established
by the variable's declaration, while the type of an expression is
determined by the definitions of its operators and the types of their operands.

<p class=para>
Conceptually, there are two types of data in Java programs:
primitive types and reference types. The primitive types are self-contained
values that can be contained in a variable. The primitive types
are comprised of integer types, floating-point types, and the <tt class=literal>boolean</tt>
type. Of these, the integer types and floating-point types are considered
arithmetic types, since arithmetic can be performed on them. Reference
types contain values that point to or identify arrays or objects.
The syntax for specifying a type is:


<p>
<img align=middle src="figs/jlr0301.gif" alt="[Graphic: Figure from the text]" width=424 height=50 border=0>

<p class=para>
<b>References</b>
<a href="#JLR2-CH-3-SECT-1.1">Arithmetic Types</A>;
<a href="#JLR2-CH-3-SECT-1.2">Boolean Type</A>;
<a href="#JLR2-CH-3-SECT-1.1.2">Floating-point types</A>;
<a href="#JLR2-CH-3-SECT-1.1.1">Integer types</A>;
<a href="ch05_05.htm#JLR2-CH-5-SECT-5.4.2.2">Interface method return type</A>;
<a href="ch05_05.htm#JLR2-CH-5-SECT-5.4.2.2">Interface Variables</A>;
<a href="ch06_01.htm">Local Variables</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Method return type</A>;
<a href="#JLR2-CH-3-SECT-1">Primitive Types</A>;
<a href="ch03_02.htm#JLR2-CH-3-SECT-2.3">Reference Types</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Variables</A>

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JLR2-CH-3-SECT-1">3.1 Primitive Types</A></h2>

<p class=para>
<a name="CH03.PRIM"></A>A primitive data type represents a single value, such as a
number, a character, or a Boolean value.
Java has primitive types for arithmetic and Boolean data:


<p>
<img align=middle src="figs/jlr0302.gif" alt="[Graphic: Figure from the text]" width=424 height=48 border=0>

<p class=para>
<b>References</b>
<a href="#JLR2-CH-3-SECT-1.1">Arithmetic Types</A>;
<a href="#JLR2-CH-3-SECT-1.2">Boolean Type</A>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-3-SECT-1.1">Arithmetic Types</A></h3>

<p class=para>
<a name="CH03.ARITH"></A>Unlike in C/C++, all of the arithmetic data types in Java
are specified to have representations that are independent of
the particular computer running a Java program. This guarantees
that numeric computations made by Java programs produce the same
results on all platforms.

<p class=para>
There are two kinds of arithmetic types: integer and floating-point.

<p class=para>
The integer types are: <tt class=literal>byte</tt>,
<tt class=literal>short</tt>, <tt class=literal>int</tt>, <tt class=literal>long</tt>,
and <tt class=literal>char</tt>.
Like C/C++, character data is considered an integer type because
of its representation and because arithmetic operations can be performed
on <tt class=literal>char</tt> data. Unlike C/C++, however, <tt class=literal>short</tt>
<tt class=literal>int</tt> and <tt class=literal>long int</tt>
are not valid data types in Java. In addition, <tt class=literal>signed</tt>
and <tt class=literal>unsigned</tt> do not have any special meaning
in Java.

<p class=para>
The floating-point data types are <tt class=literal>float</tt> and
<tt class=literal>double</tt>.

<p class=para>
The formal definition of an arithmetic type is:


<p>
<img align=middle src="figs/jlr0303.gif" alt="[Graphic: Figure from the text]" width=425 height=52 border=0>

<p class=para>
<b>References</b>
<a href="#JLR2-CH-3-SECT-1.1.1">Integer types</A>;
<a href="#JLR2-CH-3-SECT-1.1.2">Floating-point types</A>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-3-SECT-1.1.1">Integer types</A></h4>

<p class=para>
<a name="CH03.INT"></A>Java provides integer data types in a variety of sizes. Unlike
C/C++, however, the sizes of these types are part of the language
specification; they are not platform-dependent. Formally:


<p>
<img align=middle src="figs/jlr0304.gif" alt="[Graphic: Figure from the text]" width=424 height=121 border=0>

<p class=para>
The values represented
by these types are specified in Table 3-1. The representation shown
is used on all platforms and is independent of the native platform
architecture.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="ch03-TABLE-AUTOID.1">Table 3.1: Integer Types and Their Representations</A></CAPTION>
<tr class=row>
<th align="left">

<p class=para>
Type</TH>
<th align="left">

<p class=para>
Representation</TH>
<th align="left">

<p class=para>
Range</TH>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>byte</tt></TD>
<td align="left">

<p class=para>
8-bit, signed, two's complement</TD>
<td align="left">

<p class=para>
-128 to 127</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>short</tt></TD>
<td align="left">

<p class=para>
16-bit, signed, two's complement</TD>
<td align="left">

<p class=para>
-32768 to 32767</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>int</tt></TD>
<td align="left">

<p class=para>
32-bit, signed, two's complement</TD>
<td align="left">

<p class=para>
-2147483648 to 2147483647</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>long</tt></TD>
<td align="left">

<p class=para>
64-bit, signed, two's complement</TD>
<td align="left">

<p class=para>
-9223372036854775808 to 9223372036854775807</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>char</tt></TD>
<td align="left">

<p class=para>
16-bit, unsigned, Unicode</TD>
<td align="left">

<p class=para>
<tt class=literal>'\u0000'</tt> to <tt class=literal>'\uffff'</tt></TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
All of the signed integer types in Java use a two's complement
representation. Two's complement is a binary encoding for integers, which has the following properties:
<p>
<ul class=itemizedlist>
<li class=listitem>The leftmost bit is the sign bit. If the sign bit is 1, the
number is negative.

<p>
<li class=listitem>Positive numbers have the usual binary representation.

<p>
<li class=listitem>Negating a number involves complementing all of the bits in
the number and then adding 1 to the result.

<p>
<li class=listitem>The most negative value does not have a positive equivalent.

<p>
</UL>
<p class=para>
The <tt class=literal>java.lang</tt> package includes the <tt class=literal>Byte</tt>,
<tt class=literal>Short</tt>, <tt class=literal>Integer</tt>,
<tt class=literal>Long</tt>, and <tt class=literal>Character</tt> classes. 
These classes provide object wrappers for <tt class=literal>byte</tt>,
<tt class=literal>short</tt>, <tt class=literal>int</tt>, <tt class=literal>long</tt>,
and <tt class=literal>char</tt> values, respectively. Each of 
these classes defines <tt class=literal>static</tt>
<tt class=literal>MIN_VALUE</tt> and <tt class=literal>MAX_VALUE</tt>
variables for its minimum and maximum values.

<p class=para>
Java performs all integer arithmetic using <tt class=literal>int</tt>
or <tt class=literal>long</tt> operations. A value that is of type <tt class=literal>byte</tt>,
<tt class=literal>short</tt>, or <tt class=literal>char</tt> is widened to
an <tt class=literal>int</tt> or a <tt class=literal>long</tt> before the
arithmetic operation is performed.

<p class=para>
A value of any integer type can be cast (i.e., converted)
to a value of any other integer type. Integer types, however, cannot
be cast to a <tt class=literal>boolean</tt> value, nor can the <tt class=literal>boolean</tt>
type be cast to an integer-type value. A value of a signed integer
type can be assigned to a value of the same or wider type without
a cast. In this case, the value is automatically widened to the
appropriate type. Table 3-2 shows whether an assignment from a particular
integer type to another integer type can be done directly or if
it requires a type cast.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="ch03-TABLE-AUTOID.2">Table 3.2: Assignment Compatibility Between Integer Types</A></CAPTION>
<tr class=row>
<th align="left">

<p class=para>
To/From</TH>
<th align="left">

<p class=para>
<tt class=literal>byte</tt></TH>
<th align="left">

<p class=para>
<tt class=literal>char</tt></TH>
<th align="left">

<p class=para>
<tt class=literal>short</tt></TH>
<th align="left">

<p class=para>
<tt class=literal>int</tt></TH>
<th align="left">

<p class=para>
<tt class=literal>long</tt></TH>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>byte</tt></TD>
<td align="left">

<p class=para>
Assignable</TD>
<td align="left">

<p class=para>
Cast needed</TD>
<td align="left">

<p class=para>
Cast needed</TD>
<td align="left">

<p class=para>
Cast needed</TD>
<td align="left">

<p class=para>
Cast needed</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>char</tt></TD>
<td align="left">

<p class=para>
Cast needed</TD>
<td align="left">

<p class=para>
Assignable</TD>
<td align="left">

<p class=para>
Cast needed</TD>
<td align="left">

<p class=para>
Cast needed</TD>
<td align="left">

<p class=para>
Cast needed</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>short</tt></TD>
<td align="left">

<p class=para>
Assignable</TD>
<td align="left">

<p class=para>
Cast needed</TD>
<td align="left">

<p class=para>
Assignable</TD>
<td align="left">

<p class=para>
Cast needed</TD>
<td align="left">

<p class=para>
Cast needed</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>int</tt></TD>
<td align="left">

<p class=para>
Assignable</TD>
<td align="left">

<p class=para>
Assignable</TD>
<td align="left">

<p class=para>
Assignable</TD>
<td align="left">

<p class=para>
Assignable</TD>
<td align="left">

<p class=para>
Cast needed</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>long</tt></TD>
<td align="left">

<p class=para>
Assignable</TD>
<td align="left">

<p class=para>
Assignable</TD>
<td align="left">

<p class=para>
Assignable</TD>
<td align="left">

<p class=para>
Assignable</TD>
<td align="left">

<p class=para>
Assignable</TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
The principle underlying the above table is that assignments
that do not lose information do not require a type cast. Assigning
a <tt class=literal>short</tt> value to an <tt class=literal>int</tt> without
a cast is allowed because all of the values that can be represented
by a <tt class=literal>short</tt> can also be represented by <tt class=literal>int</tt>.
However, assigning an <tt class=literal>int</tt> value to a <tt class=literal>short</tt>
is not allowed without a cast because it involves going from a 32-bit
signed quantity to a 16-bit signed quantity. Similarly, a <tt class=literal>byte</tt>
value cannot be assigned to <tt class=literal>char</tt> without a cast.
<tt class=literal>byte</tt> is an 8-bit signed quantity, so it can represent
negative numbers. However, <tt class=literal>char</tt> is a 16-bit unsigned
quantity, so it cannot represent negative numbers.

<p class=para>
Java provides the following kinds of operators for integer
values:
<p>
<ul class=itemizedlist>
<li class=listitem>Comparison operators

<p>
<li class=listitem>Arithmetic operators

<p>
<li class=listitem>Increment and decrement operators

<p>
<li class=listitem>Bitwise logical operators

<p>
</UL>
<p class=para>
If all of the operands of an operator are of an integer type,
the operation is performed as an integer operation. Normally, integer
operations are performed with a precision of 32 bits. If at least
one of the operands of an integer operation is a <tt class=literal>long</tt>,
however, the operation is performed with a precision of 64 bits.

<p class=para>
When an integer operation overflows or underflows, there is
no indication given that the overflow or underflow occurred.

<p class=para>
If the right-hand operand (the divisor) of a division or remainder
operation is 0, Java throws an <tt class=literal>ArithmeticException</tt>.
Division by zero is the only circumstance that can cause an integer
operation to throw an exception.

<p class=para>
<b>References</b>
<a href="ch04_06.htm#JLR2-CH-4-SECT-6.2">Additive Operators</A>;
<a href="ch04_13.htm#JLR2-CH-4-SECT-13">Assignment Operators</A>;
<a href="ch04_10.htm#JLR2-CH-4-SECT-10.1">Bitwise/Logical Operators</A>;
<a href="ch10_02.htm">Byte</A>;
<a href="ch10_03.htm">Character</A>;
<a href="ch04_12.htm#JLR2-CH-4-SECT-12">Conditional Operator</A>;
<a href="ch04_09.htm#JLR2-CH-4-SECT-9.2">Equality Comparison Operators</A>;
<a href="ch04_03.htm#JLR2-CH-4-SECT-3">Increment/Decrement Operators</A>;
<a href="ch10_10.htm">Integer</A>;
<a href="ch02_02.htm#JLR2-CH-2-SECT-2.3.4">Integer literals</A>;
<a href="ch10_11.htm">Long</A>;
<a href="ch04_05.htm#JLR2-CH-4-SECT-5.1">Multiplicative Operators</A>;
<a href="ch04_08.htm#JLR2-CH-4-SECT-8.1">Relational Comparison Operators</A>;
<a href="ch09_04.htm">Runtime exceptions</A>;
<a href="ch04_07.htm#JLR2-CH-4-SECT-7.1">Shift Operators</A>;
<a href="ch10_19.htm">Short</A>;
<a href="ch04_04.htm#JLR2-CH-4-SECT-4.3">Unary Operators</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-3-SECT-1.1.2">Floating-point types</A></h4>

<p class=para>
<a name="CH03.FLOAT1"></A><a name="CH03.FLOAT2"></A>Like C/C++, Java provides two sizes of floating-point numbers:
single precision and double precision.

<p class=para>
Formally:


<p>
<img align=middle src="figs/jlr0305.gif" alt="[Graphic: Figure from the text]" width=424 height=48 border=0>

<p class=para>
Java uses the single
precision 32-bit IEEE 754 format to represent <tt class=literal>float</tt>
data and the double precision 64-bit IEEE 754
format to represent <tt class=literal>double</tt> data.[1]
These representations
are used on all platforms, whether or not there is native support
for the formats.  The values represented by these types are shown
in Table 3-3.

<blockquote class=footnote>
<p class=para>[1] 
The IEEE
754 floating-point data representation and operations on it are
defined in <i class=emphasis>IEEE Standard for Binary Floating-Point
Arithmetic</I>, ANSI/IEEE Std. 754-1985 (IEEE, New York).
The standard can be ordered by calling (908) 981-0060 or writing to
IEEE, 445 Hoes Lane, PO Box 1331, Piscataway, NJ 08855-1331, USA.
</blockquote>
<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="ch03-TABLE-AUTOID.3">Table 3.3: Floating-Point Types and Their Representations</A></CAPTION>
<tr class=row>
<th align="left">

<p class=para>
Type</TH>
<th align="left">

<p class=para>
Representation</TH>
<th align="left">

<p class=para>
Range</TH>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>float</tt></TD>
<td align="left">

<p class=para>
32-bit, IEEE 754</TD>
<td align="left">

<p class=para>
1.40239846e-45 to 3.40282347e+38</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>double</tt></TD>
<td align="left">

<p class=para>
64-bit, IEEE 754</TD>
<td align="left">

<p class=para>
4.94065645841246544e-324 to 1.79769313486231570e+308</TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
Normally, non-zero <tt class=literal>float</tt> values are represented
as:

<div class=screen>
<p>
<pre>
sign*mantissa*2^exponent
</PRE>
</DIV>

<p class=para>
where <tt class=literal>sign</tt> is +1 or -1, <tt class=literal>mantissa</tt>
is a positive integer less than 2^24,
and <tt class=literal>exponent</tt> is an integer in the inclusive range
-149 to 104.

<p class=para>
Non-zero <tt class=literal>double</tt> values are represented as:

<div class=screen>
<p>
<pre>
sign*mantissa*2^exponent
</PRE>
</DIV>

<p class=para>
where <tt class=literal>sign</tt> is +1 or -1, <tt class=literal>mantissa</tt>
is a positive integer less than 2^53,
and <tt class=literal>exponent</tt> is an integer in the inclusive range
-1045 to 1000.

<p class=para>
In addition, the IEEE 754 standard defines three special values:

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>Positive infinity</I><br>
<dd>

<p class=para>
This value
is produced when a <tt class=literal>float</tt> or <tt class=literal>double</tt>
operation overflows, or a positive value is divided by zero. Positive
infinity is by definition greater than any other <tt class=literal>float</tt>
or <tt class=literal>double</tt> value.

<p>
<dt class=varlistentry><i class=emphasis>Negative infinity</I><br>
<dd>

<p class=para>
This value
is produced when a <tt class=literal>float</tt> or <tt class=literal>double</tt>
operation overflows, or a negative value is divided by zero. Negative
infinity is by definition less than any other <tt class=literal>float</tt>
or <tt class=literal>double</tt> value.

<p>
<dt class=varlistentry><i class=emphasis>Not-a-number (NaN)</I><br>
<dd>

<p class=para>
This value is produced by the <tt class=literal>float</tt> and
<tt class=literal>double</tt>
operations such as the division of zero by zero. When NaN is one of
the operands for an operation, most arithmetic operations return
NaN as the result. Since NaN
is unordered, most comparison operators (e.g., <tt class=literal>&lt;</tt>,
<tt class=literal>&lt;=</tt>, <tt class=literal>==</tt>, <tt class=literal>&gt;=</tt>,
<tt class=literal>&gt;</tt>) return <tt class=literal>false</tt> when one of
their arguments is NaN. The exception is <tt class=literal>!=</tt>,
which returns <tt class=literal>true</tt> when one of its arguments
is NaN.</DL>
<p class=para>
The <tt class=literal>java.lang</tt> package includes 
<tt class=literal>Float</tt> and <tt class=literal>Double</tt> classes that
provide object wrappers for <tt class=literal>float</tt> and <tt class=literal>double</tt>
values. Each class defines the three special values as symbolic
constants: <tt class=literal>POSITIVE_INFINITY</tt>, 
<tt class=literal>NEGATIVE_INFINITY</tt>, and <tt class=literal>NaN</tt>.
Each class also defines <tt class=literal>MIN_VALUE</tt> and
<tt class=literal>MAX_VALUE</tt> constants
for its minimum and maximum values.

<p class=para>
Floating-point operations never throw exceptions. Operations
that overflow produce positive or negative infinity. Operations
that underflow produce positive or negative zero. Operations that
have no defined result produce not-a-number.

<p class=para>
Both <tt class=literal>float</tt> and <tt class=literal>double</tt>
data types have distinct representations for positive and negative
zero. These values compare as equal <tt class=literal>(0.0 ==</tt>
<tt class=literal>-0.0)</tt>. Positive and negative zero do produce
different results for some arithmetic operations, however: <tt class=literal>1.0/0.0</tt>
produces positive infinity, while <tt class=literal>1.0/-0.0</tt> produces
negative infinity.

<p class=para>
A <tt class=literal>float</tt> value can be assigned to a <tt class=literal>double</tt>
variable without using a type cast, but assigning a <tt class=literal>double</tt>
value to a <tt class=literal>float</tt> variable does require a cast.
Conversion from a <tt class=literal>float</tt> or <tt class=literal>double</tt>
value to any other data type also requires a cast. Either of the
floating-point data types can be cast to any other arithmetic type,
but they cannot be cast to <tt class=literal>boolean</tt>. When a floating-point
number is cast to an integer type, it is truncated (i.e., rounded
toward zero).

<p class=para>
Java provides the following kinds of operators for floating-point
values:
<p>
<ul class=itemizedlist>
<li class=listitem>Comparison operators

<p>
<li class=listitem>Arithmetic operators

<p>
<li class=listitem>Increment and decrement operators

<p>
</UL>
<p class=para>
If any of the arguments of an operation are of a floating-point
type, the operation is performed as a floating-point operation. In
other words, any of the integer operands are converted to floating
point before the operation takes place. Floating-point operations
are normally performed with a precision of 32 bits. However, if
at least one of the operands of the operation is a <tt class=literal>double</tt>,
the operation is performed with a precision of 64 bits.

<p class=para>
<b>References</b>
<a href="ch04_06.htm#JLR2-CH-4-SECT-6.2">Additive Operators</A>;
<a href="ch04_13.htm#JLR2-CH-4-SECT-13">Assignment Operators</A>;
<a href="ch04_12.htm#JLR2-CH-4-SECT-12">Conditional Operator</A>;
<a href="ch04_09.htm#JLR2-CH-4-SECT-9.2">Equality Comparison Operators</A>;
<a href="ch10_08.htm">Double</A>;
<a href="ch10_09.htm">Float</A>;
<a href="ch02_02.htm#JLR2-CH-2-SECT-2.3.4">Floating-point literals</A>;
<a href="ch04_03.htm#JLR2-CH-4-SECT-3">Increment/Decrement Operators</A>;
<a href="ch04_05.htm#JLR2-CH-4-SECT-5.1">Multiplicative Operators</A>;
<a href="ch04_08.htm#JLR2-CH-4-SECT-8.1">Relational Comparison Operators</A>;
<a href="ch04_04.htm#JLR2-CH-4-SECT-4.3">Unary Operators</A>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-3-SECT-1.2">Boolean Type</A></h3>

<p class=para>
<a name="CH03.BOOL"></A>The <tt class=literal>boolean</tt> data type represents two values:
<tt class=literal>true</tt> and <tt class=literal>false</tt>.
These values are keywords in Java. The <tt class=literal>java.lang</tt>
package includes a <tt class=literal>Boolean</tt> class that provides
an object wrapper for <tt class=literal>boolean</tt> values. This
<tt class=literal>Boolean</tt> class
defines the constant objects <tt class=literal>Boolean.TRUE</tt> and
<tt class=literal>Boolean.FALSE</tt>.

<p class=para>
Java provides the following kinds of operators for <tt class=literal>boolean</tt>
values:
<p>
<ul class=itemizedlist>
<li class=listitem>Equality and inequality operators

<p>
<li class=listitem>Boolean logical operators

<p>
</UL>
<p class=para>
The following Java constructs require a <tt class=literal>boolean</tt>
value to specify a condition:
<p>
<ul class=itemizedlist>
<li class=listitem><tt class=literal>if</tt>

<p>
<li class=listitem><tt class=literal>while</tt>

<p>
<li class=listitem><tt class=literal>for</tt>

<p>
<li class=listitem><tt class=literal>do</tt>

<p>
<li class=listitem>The conditional operator <tt class=literal>? :</tt>

<p>
</UL>
<p class=para>
Unlike C/C++, any attempt to substitute a different type for
<tt class=literal>boolean</tt> in these constructs is treated as an
error by Java.

<p class=para>
No other data type can be cast to or from <tt class=literal>boolean</tt>.
In particular, using the integer 1 to represent <tt class=literal>true</tt>
and 0 to represent <tt class=literal>false</tt> does not work in Java.
Though Java does not provide
conversions between <tt class=literal>boolean</tt>
and other types, it is possible to provide explicit logic to accomplish
the same thing:

<div class=screen>
<p>
<pre>
int i;
i != 0             // This is true if i is not equal to zero
boolean b;
b ? 1 : 0          // If b is true produce 1; otherwise 0
</PRE>
</DIV>

<p class=para>
<b>References</b>
<a href="ch10_01.htm">Boolean</A>;
<a href="ch04_10.htm#JLR2-CH-4-SECT-10.1">Bitwise/Logical Operators</A>;
<a href="ch02_02.htm#JLR2-CH-2-SECT-2.3.4">Boolean literals</A>;
<a href="ch04_04.htm#JLR2-CH-4-SECT-4.3">Boolean Negation Operator !</A>;
<a href="ch04_11.htm#JLR2-CH-4-SECT-11.1">Boolean Operators</A>;
<a href="ch04_12.htm#JLR2-CH-4-SECT-12">Conditional Operator</A>;
<a href="ch04_09.htm#JLR2-CH-4-SECT-9.2">Equality Comparison Operators</A>;
<a href="ch06_07.htm#JLR2-CH-6-SECT-7.3">The do Statement</A>;
<a href="ch06_07.htm#JLR2-CH-6-SECT-7.3">The for Statement</A>;
<a href="ch06_05.htm">The if Statement</A>;
<a href="ch06_07.htm#JLR2-CH-6-SECT-7.3">The while Statement</A>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_02.htm#JLR2-CH-2-SECT-2.3.4"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch03_02.htm#JLR2-CH-3-SECT-2.3"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Tokenization</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Reference Types</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
