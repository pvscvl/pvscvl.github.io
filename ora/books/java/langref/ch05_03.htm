<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 5] 5.3 Object-Orientation Java Style</TITLE>
<meta name="author" content="Mark Grand">
<meta name="date" content="Thu Jul 31 13:12:33 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="java">
<meta name="title" content="Java Language Reference">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Language Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 5<br>Declarations</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JLR2-CH-5-SECT-3">5.3 Object-Orientation Java Style</A></h2>

<p class=para>
<a name="CH05.STYLE"></A>Before considering class and interface declarations in Java, it is
essential that you understand the object-oriented model used by the
language. No useful programs can be written in Java without using
objects.  Java deliberately omits certain C++ features that promote a
less object-oriented style of programming. Thus, all executable code
in a Java program must be part of an object (or a class to be more precise).

<p class=para>
The two main characteristics of objects in Java are:

<p>
<ul class=itemizedlist>
<li class=listitem>Objects are always dynamically allocated. The
lifetime of the storage occupied by an object is determined by the
program's logic, not by the lifetime of a procedure call or the
boundaries of a block. The lifetime of the storage occupied by an
object refers to the span of time that begins when the object is
created and ends at the earliest time it can be freed by the garbage
collector.

<p>
<li class=listitem>Objects are not contained by variables. Instead,
a variable contains a reference to an object. A reference is similar
to what is called a pointer in some other languages.  If there are two
variables of the same reference type and one of the variables is
assigned to the other, both variables refer to the same object. If the
information in that object is changed, the change is visible through
both variables.

<p>
</UL>
<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-5-SECT-3.1">Classes</A></h3>

<p class=para>
An object is a collection of
variables, associated methods, and other associated 
classes. Objects in Java are described
by <i class=emphasis>classes</I>; a particular object is an <i class=emphasis>instance</I>
of a particular class. A class describes the data an object can
contain by defining variables to contain the data in each instance
of the class. A class describes the behavior of an object by defining
methods for the class and possibly other auxiliary classes. 
Methods are named pieces of executable code;
they are similar to what other programming languages call functions
or procedures. Collectively, the variables, methods, and auxiliary
classes of a class are called its members.

<p class=para>
A class can define multiple methods with the same name if the number
or type of parameters for each method is different. Multiple methods
with the same name are called <i class=emphasis>overloaded
methods</I>. Like C++, Java supports overloaded methods, but
unlike C++, Java does not support overloaded operators. Overloaded
methods are useful when you want to describe similar operations on
different types of data. For example, Java provides a class called
<tt class=literal>java.io.OutputStream</tt> that is used to write
data. The <tt class=literal>OutputStream</tt> class defines three
different <tt class=literal>write()</tt> methods: one to write a single
byte of data, another to write some of the bytes in an array, and
another to write all of the bytes in an array.

<p class=para>
<b>References</b>
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Class Declarations</A>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-5-SECT-3.2">Encapsulation</A></h3>

<p class=para>
<i class=emphasis>Encapsulation</I> is the technique of hiding the
details of the implementation of an object, while making its
functionality available to other objects. When encapsulation is used
properly, you can change an object's implementation without worrying
that any other object can see, and therefore depend on, the
implementation details.

<p class=para>
The portion of an object that is accessible to other types of objects
is called the object's
<i class=emphasis>interface</I>.[1]
For example, consider a class called <tt class=literal>Square</tt>.
The interface for this class might consist of:

<blockquote class=footnote>
<p class=para>[1] 
The notion
of an object's interface is a commonly accepted concept
in the object-oriented community. Later in this chapter, a Java
construct called an interface is described. A Java interface is
not the same thing as the interface of an object, so there is some
potential for confusion. Outside of this section, the term "interface" is only used to mean the Java interface construct.
</blockquote>
<p>
<ul class=itemizedlist>
<li class=listitem>Methods to get and set the size of a square.

<p>
<li class=listitem>A method to tell a square to draw itself at a particular location on
the screen.

<p>
</UL>
<p class=para>
The implementation of this <tt class=literal>Square</tt> class
would include executable code that implements the various methods,
as well as an internal variable that an object would use to remember
its size. Variables that an object uses to remember things about
itself are called <i class=emphasis>state variables</I>.

<p class=para>
The point of the distinction between the interface and the
implementation of a class is that it makes programs easier to
maintain. The implementation of a class may change, but as long as the
interface remains the same, these changes do not require changes to
any other classes that may use the class.

<p class=para>
In Java, encapsulation is implemented using the
<tt class=literal>public</tt>, <tt class=literal>protected</tt>, and
<tt class=literal>private</tt> access modifiers. If a field of a class is
part of the interface for the class, the field should be declared with
the <tt class=literal>public</tt> modifier or with no access modifier. The
<tt class=literal>private</tt> and <tt class=literal>protected</tt> modifiers
limit the accessibility of a field, so these modifiers should be used
for state variables and other implementation-specific functionality.

<p class=para>
Here's a partial definition of a <tt class=literal>Square</tt>
class that has the interface just described:

<div class=screen>
<p>
<pre>
class Square {
    private int sideLength;
    public void setSideLength(int len) {
        sideLength = len;
    }
    public int getSideLength() {
        return sideLength;
    }
    public void draw(int x, int y) {
        // code to draw the square
        ...
    }
}
</PRE>
</DIV>

<p class=para>
<b>References</b>
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Method modifiers</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Inner class modifiers</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Variable modifiers</A>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-5-SECT-3.3">Object Creation</A></h3>

<p class=para>
An object is typically created using an allocation expression. The
<tt class=literal>newInstance()</tt> methods of the
<tt class=literal>Class</tt> or <tt class=literal>java.lang.reflect.Contructor</tt> class can also be used to create an instance of a
class. In either case, the storage needed for the object is allocated
by the system.

<p class=para>
When a class is instantiated, a special kind of method called a
<i class=emphasis>constructor</I> is invoked. A constructor for a class
does not have its own name; instead it has the same name as the class
of which it is a part.  Constructors can have parameters, just like
regular methods, and they can be overloaded, so a class can have
multiple constructors.  A constructor does not have a return type. The main purpose of
a constructor is to do any initialization that is necessary for an
object.

<p class=para>
If a class declaration does not define any constructors, Java supplies
a default <tt class=literal>public</tt> constructor that takes no parameters.
You can prevent a class from being instantiated by methods in other
classes by defining at least
one <tt class=literal>private</tt> constructor for the class without
defining any <tt class=literal>public</tt> constructors.

<p class=para>
<b>References</b>
<a href="ch10_04.htm">Class</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Constructors</A>;
<a href="ch04_02.htm#JLR2-CH-4-SECT-2.2">Object Allocation Expressions</A>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-5-SECT-3.4">Object Destruction</A></h3>

<p class=para>
<a name="CH05.GARB"></A>Java does not provide
any way to explicitly destroy an object. Instead, an object is automatically
destroyed when the garbage collector detects that it is safe to
do so. The idea behind <i class=emphasis>garbage collection</I>
<i class=emphasis></I>is that if it is possible to prove that a piece of storage
will never be accessed again, that piece of storage can be freed
for reuse. This is a more reliable way of managing storage than
having a program explicitly deallocate its own storage. Explicit
memory allocation and deallocation is the single largest source
of programming errors in C/C++. Java eliminates this source of errors
by handling the deallocation of memory for you.

<p class=para>
Java's garbage collector runs continuously in a low priority
thread. You can cause the garbage collector to take a single pass
through allocated storage by calling <tt class=literal>System.gc()</tt>.

<p class=para>
Garbage collection will never free storage before it is safe
to do so. However, garbage collection usually does not free storage
as soon as it would be freed using explicit deallocation. The logic
of a program can sometimes help the garbage collector recognize
that it is safe to free some storage sooner rather than later. Consider
the following code:

<div class=screen>
<p>
<pre>
class G {
    byte[] buf;
    String readIt(FileInputStream f) throws IOException {
        buf = new byte[20000];
        int length = f.read(buf);
        return new String(buf, 0, 0, length);
    }
}
</PRE>
</DIV>

<p class=para>
The first time <tt class=literal>readIt()</tt> is called, it allocates an
array that is referenced by the instance variable
<tt class=literal>buf</tt>.  The variable <tt class=literal>buf</tt> continues
to refer to the array until the next time that
<tt class=literal>readIt()</tt> is called, when <tt class=literal>buf</tt> is
set to a new array. Since there is no longer any reference to the old
array, the garbage collector will free the storage on its next
pass. This situation is less than optimal. It would be better if the
garbage collector could recognize that the array is no longer needed
once  a call to <tt class=literal>readIt()</tt> returns. Defining the
variable <tt class=literal>buf</tt> as a local variable in
<tt class=literal>readIt()</tt> solves this problem:

<div class=screen>
<p>
<pre>
class G {
    String readIt(FileInputStream f) throws IOException {
        byte[] buf;
        buf = new byte[20000];
        int length = f.read(buf);
        return new String(buf, 0, 0, length);
    }
}
</PRE>
</DIV>

<p class=para>
Now the reference to the array is in a local variable that disappears
when <tt class=literal>readIt()</tt> returns. After
<tt class=literal>readIt()</tt> returns, there is no longer any reference
to the array, so the garbage collector will free the storage on its
next pass.

<p class=para>
Just as a constructor is called when an object is created, there is a
special method that is called before an object is destroyed by the
garbage collector. This method is called a
<i class=emphasis>finalizer</I> ; it has the name
<tt class=literal>finalize()</tt>. A <tt class=literal>finalize()</tt> method
is similar to a destructor in C++. The <tt class=literal>finalize()</tt>
method for a class must be declared with no parameters, the
<tt class=literal>void</tt> return type, and no modifiers. A finalizer can
be used to clean up after a class, by doing such things as closing
files and terminating network connections.

<p class=para>
If an object has a <tt class=literal>finalize()</tt> method, it is
normally called by the garbage collector before the object is
destroyed. A program can also explicitly call an object's
<tt class=literal>finalize()</tt> method, but in this case, the garbage
collector does not call the method during the object destruction
process. If the garbage collector does call an object's
<tt class=literal>finalize()</tt> method, the garbage collector does not
immediately destroy the object because the
<tt class=literal>finalize()</tt> method might do something that causes a variable
to refer to the object again.[2]
Thus the garbage collector waits to destroy the object until it
can again prove it is safe to do so. The next time the garbage collector
decides it is safe to destroy the object, it does so without calling
the finalizer again. In any case, a <tt class=literal>finalize()</tt>
method is never called more than once for a particular object.

<blockquote class=footnote>
<p class=para>[2] 
A <tt class=literal>finalize()</tt>
method should not normally
do something that results in a reference to the object being destroyed,
but Java does not do anything to prevent this situation from happening.
</blockquote>
<p class=para>
The garbage collector guarantees that the thread it uses to call a
<tt class=literal>finalize()</tt> method will not be holding any
programmer-visible synchronization locks when the method is
called. This means that a <tt class=literal>finalize()</tt> method never
has to wait for the garbage collector to release a lock. If the
garbage collector calls a <tt class=literal>finalize()</tt> method and the
<tt class=literal>finalize()</tt> method throws any kind of exception, the
garbage collector catches and ignores the exception.

<p class=para>
<b>References</b>
<a href="ch10_22.htm">System</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">The finalize method</A>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-5-SECT-3.5">Inheritance</A></h3>

<p class=para>
<a name="CH05.IN"></A>One of the most important benefits of object-oriented programming is
that it promotes the reuse of code, particularly by means of
inheritance. <i class=emphasis>Inheritance</I> is a way of organizing
related classes so that they can share common code and state
information.  Given an existing class declaration, you can create a
similar class by having it inherit all of the fields in the existing
definition.  Then you can add any fields that are needed in the new
class. In addition, you can replace any methods that need to behave
differently in the new class.

<p class=para>
To illustrate the way that inheritance
works, let's start with the following class definition:

<div class=screen>
<p>
<pre>
class RegularPolygon {
    private int numberOfSides;
    private int sideLength;
    RegularPolygon(int n, int len) {
        numberOfSides = n;
        sideLength = len;
    }
    public void setSideLength(int len) {
        sideLength = len;
    }
    public int getSideLength() {
        return sideLength;
    }
    public void draw(int x, int y) {
        // code to draw the regular polygon
        ...
    }
}
</PRE>
</DIV>

<p class=para>
The <tt class=literal>RegularPolygon</tt> class defines a constructor,
methods to set and get the side length of the regular polygon, and a
method to draw the regular polygon.  Suppose that after writing this
class you realize that you have been using it to draw a lot of
squares. You can use inheritance to build a more specific
<tt class=literal>Square</tt> class from the existing
<tt class=literal>RegularPolygon</tt> class as follows:

<div class=screen>
<p>
<pre>
class Square extends   RegularPolygon {
    Square(int len) {
        super(4,len);
    }
}
</PRE>
</DIV>

<p class=para>
The <tt class=literal>extends</tt> clause indicates that the
<tt class=literal>Square</tt> class is a <i class=emphasis>subclass</I> of
the <tt class=literal>RegularPolygon</tt> class, or looked at another way,
<tt class=literal>RegularPolygon</tt> is a <i class=emphasis>superclass</I>
of <tt class=literal>Square</tt>.  When one class is a subclass of another
class, the subclass inherits all of the
fields of its superclass that are not <tt class=literal>private</tt>. Thus <tt class=literal>Square</tt> inherits
<tt class=literal>setSideLength()</tt>,
<tt class=literal>getSideLength()</tt>, and <tt class=literal>draw()</tt>
methods from <tt class=literal>RegularPolygon</tt>. These methods work
fine without any modification, which is why the definition of
<tt class=literal>Square</tt> is so short. All the
<tt class=literal>Square</tt> class needs to do is define a constructor,
since constructors are not inherited.

<p class=para>
There is no limit to the depth to which you can carry subclassing.
For example, you could choose to write a class called
<tt class=literal>ColoredSquare</tt> that is a subclass of the
<tt class=literal>Square</tt> class. The <tt class=literal>ColoredSquare</tt>
class would inherit the public methods from both
<tt class=literal>Square</tt> and
<tt class=literal>RegularPolygon</tt>. However,
<tt class=literal>ColoredSquare</tt> would need to override the
<tt class=literal>draw()</tt> method with an implementation that handles
drawing in color.

<p class=para>
Having defined the three classes <tt class=literal>RegularPolygon</tt>,
<tt class=literal>Square</tt>, and <tt class=literal>ColoredSquare</tt>, it is
correct to say that <tt class=literal>RegularPolygon</tt> and
<tt class=literal>Square</tt> are superclasses of
<tt class=literal>ColoredSquare</tt> and <tt class=literal>ColoredSquare</tt>
and <tt class=literal>Square</tt> are subclasses of
<tt class=literal>RegularPolygon</tt>.  To describe a relationship between
classes that extends through exactly one level of inheritance, you can
use the terms <i class=emphasis>immediate superclass</I> and
<i class=emphasis>immediate subclass</I>. For example,
<tt class=literal>Square</tt> is an immediate subclass of
<tt class=literal>RegularPolygon</tt>, while
<tt class=literal>ColoredSquare</tt> is an immediate subclass of
<tt class=literal>Square</tt>.  By the same token,
<tt class=literal>RegularPolygon</tt> is the immediate superclass of
<tt class=literal>Square</tt>, while <tt class=literal>Square</tt> is the
immediate superclass of <tt class=literal>ColoredSquare</tt>.

<p class=para>
A class can have any number of subclasses or superclasses.
However, a class can only have one immediate superclass. This constraint
is enforced by the syntax of the <tt class=literal>extends</tt> clause;
it can only specify the name of one superclass. This style of inheritance
is called <i class=emphasis>single inheritance</I> ; it is different
from the multiple inheritance scheme that is used in C++.

<p class=para>
Every class in Java (except <tt class=literal>Object</tt>) has the class
<tt class=literal>Object</tt> as its ultimate superclass. The class
<tt class=literal>Object</tt> has no superclass. The subclass
relationships between all of the Java classes can be drawn as a tree
that has the <tt class=literal>Object</tt> class as its root. Another
important difference between Java and C++ is that C++ does not have a
class that is the ultimate superclass of all of its classes.

<p class=para>
<b>References</b>
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Class Inheritance</A>;
<a href="#JLR2-CH-5-SECT-3.6">Interfaces</A>;
<a href="ch10_14.htm">Object</A>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-5-SECT-3.5.1">Abstract classes</A></h4>

<p class=para>
If a class is declared with the <tt class=literal>abstract</tt> modifier,
the class cannot be instantiated. This is different than C++, which
has no way of explicitly specifying that a class cannot be instantiated.  An
<tt class=literal>abstract</tt> class is typically used to declare a
common set of methods for a group of classes when there are no
reasonable or useful implementations of the methods at that level of
abstraction.

<p class=para>
For example, the <tt class=literal>java.lang</tt> package includes classes
called <tt class=literal>Byte</tt>, <tt class=literal>Short</tt>,
<tt class=literal>Integer</tt>, <tt class=literal>Long</tt>,
<tt class=literal>Float</tt>, and <tt class=literal>Double</tt>. These classes
are subclasses of the <tt class=literal>abstract</tt> class
<tt class=literal>Number</tt>, which declares the following methods:
<tt class=literal>byteValue()</tt>, <tt class=literal>shortValue()</tt>,
<tt class=literal>intValue()</tt>, <tt class=literal>longValue()</tt>,
<tt class=literal>floatValue()</tt>, and
<tt class=literal>doubleValue()</tt>. The purpose of these methods is to
return the value of an object converted to the type implied by the
method's name. Every subclass of <tt class=literal>Number</tt> implements
all of these methods. The advantage of the abstraction is that it
allows you to write code to extract whatever type of value you need
from a <tt class=literal>Number</tt> object, without knowing the actual
type of the underlying object.

<p class=para>
Methods defined in an <tt class=literal>abstract</tt> class can be
declared <tt class=literal>abstract</tt>. An <tt class=literal>abstract</tt>
method is declared without any implementation; it must be overridden
in a subclass to provide an implementation.

<p class=para>
<b>References</b>
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Class Modifiers</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Inner class modifiers</A>;
<a href="ch06_01.htm">Local class modifiers</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Method modifiers</A>;
<a href="ch10_13.htm">Number</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-5-SECT-3.5.2">Final classes</A></h4>

<p class=para>
If a class is declared with the <tt class=literal>final</tt> modifier, the
class cannot be subclassed. Declaring a class <tt class=literal>final</tt>
is useful if you need to ensure the exact properties and behavior of
that class. Many of the classes in the <tt class=literal>java.lang</tt>
package are declared <tt class=literal>final</tt> for that reason.

<p class=para>
Methods defined in a non-<tt class=literal>abstract</tt> class can be
declared <tt class=literal>final</tt>. A <tt class=literal>final</tt> method
cannot be overridden by any subclasses of the class in which it
appears.

<p class=para>
<b>References</b>
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Class Modifiers</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Inner class modifiers</A>;
<a href="ch06_01.htm">Local class modifiers</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Method modifiers</A>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-5-SECT-3.6">Interfaces</A></h3>

<p class=para>
<a name="CH05.INT"></A>Java provides a construct called an interface to support certain
multiple inheritance features that are desirable in an object-oriented
language. An interface is similar to a class, in that an interface
declaration can define both variables and methods. But unlike a class, an
interface cannot provide implementations for its methods.

<p class=para>
A class declaration can include an <tt class=literal>implements</tt>
clause that specifies the name of an interface. When a class
declaration specifies that it implements an interface, the class
inherits all of the variables and methods declared in that
interface. The class declaration must then provide implementations for
all of the methods declared in the interface, unless the class is
declared as an <tt class=literal>abstract</tt> class. Unlike the
<tt class=literal>extends</tt> clause, which can only specify one class,
the <tt class=literal>implements</tt> clause can specify any number of
interfaces. Thus a class can implement an unlimited number of
interfaces.

<p class=para>
Interfaces are most
useful for declaring that an otherwise unrelated set of classes
have a common set of methods, without needing to provide a common
implementation. For example, if you want to store a variety of objects
in a database, you might want all of the those objects to have a
common set of methods for storing and fetching. Since the fetch
and store methods for each object need to be different, it is appropriate
to declare these methods in an interface. Then any class that needs
fetch and store methods can implement the interface.

<p class=para>
Here is a simplistic example that illustrates such an interface:

<div class=screen>
<p>
<pre>
public interface Db {
    void dbStore(Database d, Object key);
    Object dbFetch(Database d, Object key);
}
</PRE>
</DIV>

<p class=para>
The <tt class=literal>Db</tt> interface declaration contains two methods,
<tt class=literal>dbStore()</tt> and <tt class=literal>dbFetch()</tt>.
Here is a partial class definition for a class that implements the
<tt class=literal>Db</tt> interface:

<div class=screen>
<p>
<pre>
class DbSquare extends Square implements Db {
    public void dbStore(Database d, Object key) {
        // Perform database operation to store Square
        ...
    }
    public Square dbFetch(Database d, Object key) {
        // Perform database operation to fetch Square
        ...
    }
    ...
}
</PRE>
</DIV>

<p class=para>
The <tt class=literal>DbSquare</tt> class defines implementations
for both of the methods declared in the <tt class=literal>Db</tt> interface.
The point of this interface is that it provides a uniform way for
unrelated objects to arrange to be stored in a database. The following
code shows part of a class that encapsulates database operations:

<div class=screen>
<p>
<pre>
class Database {
    ...
    public void store(Object o, Object key) {
        if (o instanceof Db)
          ((Db)o).dbStore(this, key);
    }
    ...
}
</PRE>
</DIV>

<p class=para>
When the database is asked to store an object, it does so only if the
object implements the <tt class=literal>Db</tt> interface, in which case
it can call the <tt class=literal>dbStore()</tt> of the object.

<p class=para>
<b>References</b>
<a href="ch05_05.htm#JLR2-CH-5-SECT-5.4.2.2">Interface Declarations</A>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-5-SECT-3.7">Inner Classes</A></h3>

<p class=para>
<a name="CH05.INNER1"></A><a name="CH05.INNER2"></A>Java 1.1 provides a new feature that allows programmers to encapsulate
even more functionality within objects. With the addition of inner
classes to the Java language, classes can be defined as members of
other classes, just like variables and methods. Classes can also be
defined within blocks of Java code, just like local variables.  The
ability to declare a class inside of another class allows you to
encapsulate auxiliary classes inside of a class, thereby limiting
access to the auxiliary classes. A class that is declared inside of
another class may have access to the instance variables of the
enclosing class; a class declared within a block may have access to
the local variable and/or formal parameters of that block.

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-5-SECT-3.7.1">Nested top-level classes and interfaces</A></h4>

<p class=para>
A <i class=emphasis>nested top-level class</I> or
<i class=emphasis>interface</I> is declared
as a <tt class=literal>static</tt> member of an enclosing top-level class
or interface. The declaration of a nested top-level class uses the
<tt class=literal>static</tt> modifier, so you may also see these classes
called <i class=emphasis>static classes</I>. A nested interface is
implicitly <tt class=literal>static</tt>, but you can declare it to be
<tt class=literal>static</tt> to make it explicit. 
Nested top-level classes and interfaces are typically used to 
group related classes in a convenient way.

<p class=para>
A nested top-level class or
interface functions like a normal top-level class or interface,
except that the name of the nested entity includes the name of the
class in which it is defined. For example, consider the
following declaration:

<div class=screen>
<p>
<pre>
public class Queue {
    ...
    public static class EmptyQueueException extends Exception {
    } 
    ...
}
</PRE>
</DIV>

<p class=para>
Code that calls a method in <tt class=literal>Queue</tt> 
that throws an <tt class=literal>EmptyQueueException</tt> can catch 
that exception with a <tt class=literal>try</tt> statement like this:

<div class=screen>
<p>
<pre>
try {
    ...
} catch (Queue.EmptyQueueException e) {
    ...
}
</PRE>
</DIV>

<p class=para>
A nested top-level class cannot access the instance variables of its
enclosing class. It also cannot call any non-<tt class=literal>static</tt>
methods of the enclosing class without an explicit reference to an
instance of that class. However, a nested top-level class can
use any of the <tt class=literal>static</tt> variables and methods of
its enclosing class without qualification.

<p class=para>
Only top-level classes in Java can contain nested top-level classes.
In other words, a <tt class=literal>static</tt> class can only be
declared as a direct member of a class that is declared at the
top level, directly as a member of a package. In addition, 
a nested top-level class cannot declare any <tt class=literal>static</tt>
variables, <tt class=literal>static</tt> methods, or static initializers.

<p class=para>
<b>References</b>
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Class Declarations</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Methods</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Nested Top-Level and Member Classes</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Variables</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-5-SECT-3.7.2">Member classes</A></h4>

<p class=para>
A <i class=emphasis>member class</I> is an inner class that is declared
within an enclosing class without the <tt class=literal>static</tt>
modifier. Member classes are analogous to the other members of a
class, namely the instance variables and methods. The code within a
member class can refer to any of the variables and methods of its
enclosing class, including <tt class=literal>private</tt> variables and
methods.

<p class=para>
Here is a partial definition of a <tt class=literal>Queue</tt>
class that uses a member class:

<div class=screen>
<p>
<pre>
public class Queue {
    private QueueNode queue;
    ...
    public Enumeration elements() {
        return new QueueEnumerator();
    } 
    ...
    private class QueueEnumerator implements Enumeration {
        private QueueNode start, end;
        QueueEnumerator() {
            synchronized (Queue.this) {
                if (queue != null) {
                    start = queue.next;
                    end = queue;
                } 
            } 
        } 
        public boolean hasMoreElements() {
            return start != null;
        } 
        public synchronized Object nextElement() {
            ...
        } 
    } 
    private static class QueueNode {
        private Object obj;
        QueueNode next;
        QueueNode(Object obj) {
            this.obj = obj;
        }
        Object getObject() {
            return obj;
        }
    } 
}
</PRE>
</DIV>

<p class=para>
The <tt class=literal>QueueEnumerator</tt> class is a
<tt class=literal>private</tt> member class that implements the
<tt class=literal>java.util.Enumeration</tt> interface. The advantage of
this approach is that the <tt class=literal>QueueEnumerator</tt> class can
access the <tt class=literal>private</tt> instance variable
<tt class=literal>queue</tt> of the enclosing <tt class=literal>Queue</tt>
class. If <tt class=literal>QueueEnumerator</tt> were declared outside of
the <tt class=literal>Queue</tt> class, this <tt class=literal>queue</tt>
variable would need to be <tt class=literal>public</tt>, which would
compromise the encapsulation of the <tt class=literal>Queue</tt> class.
Using a member class that implements the
<tt class=literal>Enumeration</tt> interface provides a means to offer
controlled access to the data in a <tt class=literal>Queue</tt> without
exposing the internal data structure of the class.

<p class=para>
An instance of a member class has access to the instance variables of
exactly one instance of its enclosing class. That instance of the
enclosing class is called the <i class=emphasis>enclosing instance</I>.
Thus, every <tt class=literal>QueueEnumerator</tt> object has exactly one
<tt class=literal>Queue</tt> object that is its enclosing instance.  To
access an enclosing instance, you use the construct
<i class=emphasis>ClassName</I><tt class=literal>.this</tt>. The
<tt class=literal>QueueEnumerator</tt> class uses this construct in the
<tt class=literal>synchronized</tt> statement in its constructor to
synchronize on its enclosing instance. This synchronization is
necessary to ensure that the newly created
<tt class=literal>QueueEnumerator</tt> object
has exclusive access to the internal data of the
<tt class=literal>Queue</tt> object.

<p class=para>
The <tt class=literal>Queue</tt> class also contains a nested top-level,
or <tt class=literal>static</tt>, class,
<tt class=literal>QueueNode</tt>. However, this class is also declared
<tt class=literal>private</tt>, so it is not accessible outside of
<tt class=literal>Queue</tt>. The main difference between
<tt class=literal>QueueEnumerator</tt> and <tt class=literal>QueueNode</tt> is
that <tt class=literal>QueueNode</tt> does not need access to any instance
data of <tt class=literal>Queue</tt>.

<p class=para>
A member class cannot declare any <tt class=literal>static</tt>
variables, <tt class=literal>static</tt> methods, 
<tt class=literal>static</tt> classes, or static initializers.

<p class=para>
Although member classes are often declared <tt class=literal>private</tt>,
they can also be <tt class=literal>public</tt> or
<tt class=literal>protected</tt> or have the default accessibility. To
refer to a class declared inside of another class from outside of that
class, you prefix the class name with the names of the enclosing
classes, separated by dots. For example, consider the following
declaration:

<div class=screen>
<p>
<pre>
public class A {
    public class B {
        public class C {
            ...
        } 
        ...
    } 
    ...
} 
</PRE>
</DIV>

<p class=para>
Outside of the class named <tt class=literal>A</tt>, you can refer to the 
class named <tt class=literal>C</tt> as <tt class=literal>A.B.C</tt>. 

<p class=para>
<b>References</b>
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Class Declarations</A>;
<a href="ch04_01.htm">Field Expressions</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Methods</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Nested Top-Level and Member Classes</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Variables</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-5-SECT-3.7.3">Local classes</A></h4>

<p class=para>
A <i class=emphasis>local class</I> is an inner class that is declared
inside of a block of Java code. A local class is only visible within
the block in which it is declared, so it is analogous to a local
variable. However, a local class can access the variables and methods
of any enclosing classes. In addition, a local class can access any
<tt class=literal>final</tt> local variables or method parameters that are
in the scope of the block that declares the class.

<p class=para>
Local classes are most often used for <i class=emphasis>adapter
classes</I>.  An adapter class is a class that implements a
particular interface, so that another class can call a particular
method in the adapter class when a certain event occurs. In other
words, an adapter class is Java's way of implementing a "callback"
mechanism. Adapter classes are commonly used with the new
event-handling model required by the Java 1.1 AWT and by the JavaBeans
API.

<p class=para>
Here is an example of a local class functioning as an adapter class:

<div class=screen>
<p>
<pre>
public class Z extends Applet {
    public void init() {
        final Button b = new Button("Press Me");
        add(b);
        class ButtonNotifier implements ActionListener {
            public void actionPerformed(ActionEvent e) {
                b.setLabel("Press Me Again");
                doIt();
            } 
        } 
        b.addActionListener(new ButtonNotifier());
    } 
    ...
} 
</PRE>
</DIV>

<p class=para>
The above example is from an applet that has a
<tt class=literal>Button</tt> in its user interface. To tell a
<tt class=literal>Button</tt> object that you want to be notified when it
is pressed, you pass an instance of an adapter class that implements
the <tt class=literal>ActionListener</tt> interface to its
<tt class=literal>addActionListener()</tt> method.  A class that
implements the <tt class=literal>ActionListener</tt> interface is required
to implement the <tt class=literal>actionPerformed()</tt> method. When the
<tt class=literal>Button</tt> is pressed, it calls the adapter object's
<tt class=literal>actionPerformed()</tt> method. The main advantage of
declaring the <tt class=literal>ButtonNotifier</tt> class in the method
that creates the <tt class=literal>Button</tt> is that it puts all of the
code related to creating and setting up the <tt class=literal>Button</tt>
in one place.

<p class=para>
As the preceding example shows, a local class can access local variables of the
block in which it is declared. However, any local variables that are
accessed by a local class must be declared <tt class=literal>final</tt>.
A local class can also access method parameters and the exception
parameter of a <tt class=literal>catch</tt> statement that are accessible
within the scope of its block, as long as the parameter is declared
<tt class=literal>final</tt>.
The Java compiler complains if a local class uses a 
non-<tt class=literal>final</tt> local variable or parameter. The lifetime of a parameter or local variable is extended indefinitely, as long as there is an instance of a local class that refers to it.

<p class=para>
<b>References</b>
<a href="ch06_01.htm">Blocks</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Class Declarations</A>;
<a href="ch06_01.htm">Local Classes</A>;
<a href="ch06_01.htm">Local Variables</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Method formal parameters</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Methods</A>;
<a href="ch06_12.htm">The try Statement</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Variables</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-5-SECT-3.7.4">Anonymous classes</A></h4>

<p class=para>
An <i class=emphasis>anonymous class</I> is a kind of local class
that does not have a name and is declared inside of an allocation
expression. As such, an anonymous class is a more 
concise declaration of a local class that combines the declaration
of the class with its instantiation.

<p class=para>
Here is how you can rewrite the previous adapter class example to 
use an anonymous class instead of a local class:

<div class=screen>
<p>
<pre>
public class Z extends Applet {
    public void init() {
        final Button b = new Button("Press Me");
        add(b);
        b.addActionListener(new ActionListener () {
            public void actionPerformed(ActionEvent e) {
                b.setLabel("Press Me Again");
            } 
        } );
    } 
    ...
} 
</PRE>
</DIV>

<p class=para>
As you can see, an anonymous class is declared as part of an
allocation expression.
If the name after <tt class=literal>new</tt> is the name of an interface,
as is the case in the preceding example, the anonymous class is an
immediate subclass of <tt class=literal>Object</tt> that implements the
given interface. If the name after <tt class=literal>new</tt> is the name
of a class, the anonymous class is an immediate subclass of the named
class. 

<p class=para>
Obviously, an anonymous class doesn't have a name. The other
restriction on an anonymous class is it can't have any
constructors other than the default constructor. Any constructor-like
initialization must be done using an instance initializer.  Other than
these differences, anonymous classes function just like local classes.

<p class=para>
<b>References</b>
<a href="ch04_02.htm#JLR2-CH-4-SECT-2.2">Allocation Expressions</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Class Declarations</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Instance Initializers</A>;
<a href="ch10_14.htm">Object</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-5-SECT-3.7.5">Implementation of inner classes</A></h4>

<p class=para>
It is possible to use inner classes without knowing anything about how
they are implemented. However, a high-level understanding can help you
comprehend the filenames that the compiler produces, and also some of
the restrictions associated with inner classes.  The implementation of
inner classes is less than transparent in a number of ways, primarily
because the Java virtual machine does not know about inner
classes. Instead, the Java compiler implements inner classes by
rewriting them in a form that does not use inner classes. The
advantage of this approach is that the Java virtual machine does not
require any new features to be able to run programs that use inner
classes.

<p class=para>
Since a class declared inside another class is rewritten by the
compiler as an external class, the compiler must give it a name
unique outside of the class in which it is declared.
The unique name is formed by prefixing the name
of the inner class with the name of the class in which it is declared 
and a dollar sign (<tt class=literal>$</tt>). Thus, when the 
<tt class=literal>Queue</tt> class is compiled, the Java compiler produces 
four <i class=emphasis>.class</I> files:

<p>
<ul class=itemizedlist>
<li class=listitem><i class=emphasis>Queue.class</I>

<p>
<li class=listitem><i class=emphasis>Queue$EmptyQueueException.class</I>

<p>
<li class=listitem><i class=emphasis>Queue$QueueEnumerator.class</I>

<p>
<li class=listitem><i class=emphasis>Queue$QueueNode.class</I>

<p>
</UL>
<p class=para>
Because anonymous classes do not have names, the Java compiler 
gives each anonymous class a number for a name; the numbers start at 1. 
When the version of the <tt class=literal>Z</tt> applet that uses 
an anonymous class is compiled, the Java compiler produces 
two <i class=emphasis>.class</I> files:

<p>
<ul class=itemizedlist>
<li class=listitem><i class=emphasis>Z.class</I>

<p>
<li class=listitem><i class=emphasis>Z$1.class</I>

<p>
</UL>
<p class=para>
In order to give an inner class access to the variables of its
enclosing instance, the compiler adds a <tt class=literal>private</tt>
variable to the inner class that references the enclosing
instance. The compiler also inserts a formal parameter into each
constructor of the inner class and passes the reference to
the enclosing instance using this parameter.
Therefore, the <tt class=literal>QueueEnumerator</tt> class is rewritten
as follows:

<div class=screen>
<p>
<pre>
class Queue$QueueEnumerator implements Enumeration {
    private Queue this$0;
    private QueueNode start, end;
    QueueEnumerator(Queue this$0) {
        this.this$0 = this$0;
        synchronized (this$0) {
            if (queue != null) {
                start = queue.next;
                end = queue;
            } 
        } 
    }
    ...
}
</PRE>
</DIV>

<p class=para>
As you can see, the compiler rewrites all references to the enclosing
instance as <tt class=literal>this$0</tt>. One implication of this
implementation is that you cannot pass the enclosing instance as an
argument to its superclass's constructor because
<tt class=literal>this$0</tt> is not available until after the superclass's
constructor returns.

</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Lexical Scope of Declarations</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Class Declarations</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
