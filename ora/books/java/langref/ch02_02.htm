<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 2] 2.2 Tokenization</TITLE>
<meta name="author" content="Mark Grand">
<meta name="date" content="Thu Jul 31 13:06:20 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="java">
<meta name="title" content="Java Language Reference">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Language Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 2<br>Lexical Analysis</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch03_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JLR2-CH-2-SECT-2">2.2 Tokenization</A></h2>

<p class=para>
<a name="CH02.TOKEN"></A>The tokenization phase of lexical analysis in Java handles breaking
down the lines of Unicode source code into comments, white space,
and tokens. The rule that defines the overall lexical organization
of Java programs is <i class=emphasis>TokenStream:</I>


<p>
<img align=middle src="figs/jlr0203.gif" alt="[Graphic: Figure from the text]" width=424 height=193 border=0>

<p class=para>
<b>References</b>
<a href="#JLR2-CH-2-SECT-2.6">Comments</A>;
<a href="#JLR2-CH-2-SECT-2.1">Identifiers</A>;
<a href="#JLR2-CH-2-SECT-2.2">Keywords</A>;
<a href="#JLR2-CH-2-SECT-2.3">Literals</A>;
<a href="#JLR2-CH-2-SECT-2.5">Operators</A>;
<a href="#JLR2-CH-2-SECT-2.4">Separators</A>;
<a href="#JLR2-CH-2-SECT-2.7">White Space</A>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-2-SECT-2.1">Identifiers</A></h3>

<p class=para>
<a name="CH02.IDENT"></A>An <i class=emphasis>identifier</I>
is generally used as the name for a thing in a program. A few identifiers
are reserved by Java for special uses; these are called <i class=emphasis>keywords</I>.

<p class=para>
From the viewpoint of lexical analysis, an identifier
is a sequence of one or more Unicode characters. The first character
must be a letter, underscore, or dollar sign. The other characters
must be letters, numbers, underscores, or dollar signs. An identifier
can't have the same Unicode character sequence as a keyword:


<p>
<img align=middle src="figs/jlr0204.gif" alt="[Graphic: Figure from the text]" width=424 height=136 border=0>

<p class=para>
For example, <tt class=literal>foo21</tt>, <tt class=literal>_foo</tt>,
and <tt class=literal>$foo</tt>
are all valid identifiers; <tt class=literal>3foo</tt> is not a valid
identifier. There is no limit to the length of an identifier in
Java. Although <tt class=literal>$</tt> is a legal character in an identifier, you should avoid using it to eliminate confusion with compiler-generated identifiers.

<p class=para>
A <i class=emphasis>UnicodeDigit</I>
is a Unicode character that is classified as a digit by
<tt class=literal>Character.isDigit()</tt>.

<p class=para>
A <i class=emphasis>UnicodeLetter</I>
is a Unicode character code that is classified as a letter
by <tt class=literal>Character.isLetter()</tt>.

<p class=para>
Two identifiers are the same if they have
the same length and if corresponding characters in each identifier
have the same Unicode character code. It is possible, however, to
have identifiers that are distinct to a Java compiler, but not to
the human eye. For example, the Java compiler recognizes lowercase
Latin `a' (<tt class=literal>\u0061</tt>) and lowercase Cyrillic `a'
(<tt class=literal>\u0430</tt>) as different characters, although they
may well be visually indistinguishable.

<p class=para>
<b>References</b>
<a href="ch10_03.htm">Character</A>;
<a href="#JLR2-CH-2-SECT-2.2">Keywords</A>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-2-SECT-2.2">Keywords</A></h3>

<p class=para>
<a name="CH02.KEY"></A>Keywords are identifiers that
have a special meaning to Java. Because of their special meanings,
keywords are not available for use as names of things defined in
programs. A <i class=emphasis>Keyword</I> is one of the following:

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<td align="left"><tt class=literal>abstract</tt></TD>
<td align="left"><tt class=literal>default</tt></TD>
<td align="left"><tt class=literal>goto</tt></TD>
<td align="left"><tt class=literal>null</tt></TD>
<td align="left"><tt class=literal>synchronized</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>boolean</tt></TD>
<td align="left"><tt class=literal>do</tt></TD>
<td align="left"><tt class=literal>if</tt></TD>
<td align="left"><tt class=literal>package</tt></TD>
<td align="left"><tt class=literal>this</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>break</tt></TD>
<td align="left"><tt class=literal>double</tt></TD>
<td align="left"><tt class=literal>implements</tt></TD>
<td align="left"><tt class=literal>private</tt></TD>
<td align="left"><tt class=literal>throw</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>byte</tt></TD>
<td align="left"><tt class=literal>else</tt></TD>
<td align="left"><tt class=literal>import</tt></TD>
<td align="left"><tt class=literal>protected</tt></TD>
<td align="left"><tt class=literal>throws</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>case</tt></TD>
<td align="left"><tt class=literal>extends</tt></TD>
<td align="left"><tt class=literal>instanceof</tt></TD>
<td align="left"><tt class=literal>public</tt></TD>
<td align="left"><tt class=literal>transient</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>catch</tt></TD>
<td align="left"><tt class=literal>false</tt></TD>
<td align="left"><tt class=literal>int</tt></TD>
<td align="left"><tt class=literal>return</tt></TD>
<td align="left"><tt class=literal>true</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>char</tt></TD>
<td align="left"><tt class=literal>final</tt></TD>
<td align="left"><tt class=literal>interface</tt></TD>
<td align="left"><tt class=literal>short</tt></TD>
<td align="left"><tt class=literal>try</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>class</tt></TD>
<td align="left"><tt class=literal>finally</tt></TD>
<td align="left"><tt class=literal>long</tt></TD>
<td align="left"><tt class=literal>static</tt></TD>
<td align="left"><tt class=literal>void</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>const</tt></TD>
<td align="left"><tt class=literal>float</tt></TD>
<td align="left"><tt class=literal>native</tt></TD>
<td align="left"><tt class=literal>super</tt></TD>
<td align="left"><tt class=literal>volatile</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>continue</tt></TD>
<td align="left"><tt class=literal>for</tt></TD>
<td align="left"><tt class=literal>new</tt></TD>
<td align="left"><tt class=literal>switch</tt></TD>
<td align="left"><tt class=literal>while</tt></TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
The keywords <tt class=literal>const</tt> and
<tt class=literal>goto</tt> are not currently used for any purpose in
Java, although they may be assigned meaning in future versions of
the Java language.

<p class=para>
<b>References</b>
<a href="#JLR2-CH-2-SECT-2.1">Identifiers</A>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-2-SECT-2.3">Literals</A></h3>

<p class=para>
<a name="CH02.LIT"></A>A <i class=emphasis>literal</I>
is a token that represents a constant value of a primitive data
type or a <tt class=literal>String</tt> object:


<p>
<img align=middle src="figs/jlr0205.gif" alt="[Graphic: Figure from the text]" width=424 height=123 border=0>

<p class=para>
<b>References</b>
<a href="#JLR2-CH-2-SECT-2.3.3">Boolean literals</A>;
<a href="#JLR2-CH-2-SECT-2.3.4">Character literals</A>;
<a href="#JLR2-CH-2-SECT-2.3.2">Floating-point literals</A>;
<a href="#JLR2-CH-2-SECT-2.3.1">Integer literals</A>;
<a href="#JLR2-CH-2-SECT-2.3.5">String literals</A>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-2-SECT-2.3.1">Integer literals</A></h4>

<p class=para>
<a name="CH02.INTLIT"></A><a name="CH02.INTLIT2"></A>An integer literal represents
an integer constant:


<p>
<img align=middle src="figs/jlr0206.gif" alt="[Graphic: Figure from the text]" width=450 height=199 border=0>

<p class=para>
<i class=emphasis>NonZeroDigit</I>
is defined as one of the following characters: <tt class=literal>1</tt>,
<tt class=literal>2</tt>, <tt class=literal>3</tt>, <tt class=literal>4</tt>,
<tt class=literal>5</tt>, <tt class=literal>6</tt>, <tt class=literal>7</tt>,
<tt class=literal>8</tt>, or <tt class=literal>9</tt>.

<p class=para>
<i class=emphasis>OctalDigit</I>
is defined as one of the following characters: <tt class=literal>0</tt>,
<tt class=literal>1</tt>, <tt class=literal>2</tt>, <tt class=literal>3</tt>,
<tt class=literal>4</tt>, <tt class=literal>5</tt>, <tt class=literal>6</tt>,
or <tt class=literal>7</tt>.

<p class=para>
Integer literals that begin
with a non-zero digit are in base 10 and are called <i class=emphasis>decimal
literals</I>. Integer
literals that begin with <tt class=literal>0x</tt> are in base 16 and
are called <i class=emphasis>hexadecimal literals</I>.
Integer literals that begin with <tt class=literal>0</tt> followed by
<tt class=literal>0-7</tt> are in base 8 and are called <i class=emphasis>octal
literals</I>.

<p class=para>
If an integer literal ends with <tt class=literal>L</tt> or <tt class=literal>l</tt>,
its type is <tt class=literal>long</tt>; otherwise its type is
<tt class=literal>int</tt>.

<p class=para>
Integer literals cannot begin with a <tt class=literal>+</tt>
or a <tt class=literal>-</tt>. If either of these characters precedes
an integer literal, it is treated as a unary operator, a separate
token in its own right.

<p class=para>
Here are some examples of <tt class=literal>int</tt>
literals:

<div class=screen>
<p>
<pre>
0
92
0642
0xDeadBeef
</PRE>
</DIV>

<p class=para>
Here are some examples of <tt class=literal>long</tt> literals:

<div class=screen>
<p>
<pre>
0L
1414213562373l
0x2000000000L
075204l
</PRE>
</DIV>

<p class=para>
Note that the preceding examples end with either an uppercase
or lowercase "L". They do not end with the digit 1 (one).

<p class=para>
Decimal literals of type <tt class=literal>int</tt> may not be greater than
2147483647, which represents 2^31-1.
Decimal literals of type <tt class=literal>long</tt>
may not be greater than 9223372036854775807L, which represents
2^63-1.
Decimal literals cannot be used directly to represent negative values.
To represent negative values using a decimal literal, you must use
the decimal literal in conjunction with the unary minus operator.
For example, representing -321 requires the use of a unary minus
and a decimal literal. To represent the <tt class=literal>int</tt> -2147483648,
use <tt class=literal>0x80000000</tt>. To represent the <tt class=literal>long</tt>
-9223372036854775808L, use <tt class=literal>0x8000000000000000L</tt>.

<p class=para>
Hexadecimal and octal literals may be positive or negative
because they represent either a 32-bit (<tt class=literal>int</tt>)
or 64-bit (<tt class=literal>long</tt>) two's-complement quantity. Two's
complement is a binary encoding technique that represents both positive
and negative values. The range of values that can be represented
by <tt class=literal>int</tt> hexadecimal and octal literals is shown
in Table 2-1.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="ch02-TABLE-AUTOID.1">Table 2.1: Minimum and Maximum int Literals</A></CAPTION>
<tr class=row>
<th align="left">

<p class=para>
Representation</TH>
<th align="left">

<p class=para>
Minimum Value</TH>
<th align="left">

<p class=para>
Maximum Value</TH>
</TR>
<tr class=row>
<td align="left">

<p class=para>
Hexadecimal</TD>
<td align="left">

<p class=para>
<tt class=literal>0x80000000</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>0x7fffffff</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
Octal</TD>
<td align="left">

<p class=para>
<tt class=literal>020000000000</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>017777777777</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
Base 10 equivalent</TD>
<td align="left">

<p class=para>
<tt class=literal>-2147483648</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>2147483647</tt></TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
The range of values that can be represented
by <tt class=literal>long</tt> hexadecimal and octal literals is shown
in Table 2-2.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="ch02-TABLE-AUTOID.2">Table 2.2: Minimum and Maximum long Literals</A></CAPTION>
<tr class=row>
<th align="left">

<p class=para>
Representation</TH>
<th align="left">

<p class=para>
Minimum Value</TH>
<th align="left">

<p class=para>
Maximum Value</TH>
</TR>
<tr class=row>
<td align="left">

<p class=para>
Hexadecimal</TD>
<td align="left">

<p class=para>
<tt class=literal>0x8000000000000000L</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>0x7fffffffffffffffL</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
Octal</TD>
<td align="left">

<p class=para>
<tt class=literal>01000000000000000000000L</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>0777777777777777777777L</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
Base 10 equivalent</TD>
<td align="left">

<p class=para>
<tt class=literal>-9223372036854775808</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>9223372036854775807</tt></TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
<b>References</b>
<a href="ch02_01.htm">**UNKNOWN XREF**</A>;
<a href="ch02_01.htm">**UNKNOWN XREF**</A>;
<a href="ch03_01.htm">Integer types</A>;
<a href="ch02_01.htm">Conversion to Unicode</A>;
<a href="ch04_04.htm#JLR2-CH-4-SECT-4.3">Unary Operators</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-2-SECT-2.3.2">Floating-point literals</A></h4>

<p class=para>
A floating-point
literal represents a constant value of type <tt class=literal>float</tt>
or <tt class=literal>double</tt> :


<p>
<img align=middle src="figs/jlr0207.gif" alt="[Graphic: Figure from the text]" width=424 height=299 border=0>

<p class=para>
A floating-point literal must minimally contain at least one digit
and either a decimal point or an exponent.

<p class=para>
The data
type of a floating-point literal is <tt class=literal>float</tt> if
and only if the suffix <tt class=literal>f</tt> or <tt class=literal>F</tt>
appears at the end of the literal. If there is no suffix or the
suffix is <tt class=literal>d</tt> or <tt class=literal>D</tt>, the data
type is <tt class=literal>double</tt>.

<p class=para>
Floating-point literals
cannot begin with a <tt class=literal>+</tt> or a <tt class=literal>-</tt>.
If either of these precedes a floating-point literal, it is treated
as a separate token, a unary operator.

<p class=para>
Here are some
examples of <tt class=literal>float</tt> literals:

<div class=screen>
<p>
<pre>
23e4f
1.E2f
.31416e1F
2.717f
7.63e+9f
</PRE>
</DIV>

<p class=para>
Here are some examples of <tt class=literal>double</tt> literals:

<div class=screen>
<p>
<pre>
23e4
1.E2
.31415e1D
2.717
7.53e+9d
</PRE>
</DIV>

<p class=para>
The ranges of values that can be represented by <tt class=literal>float</tt> and
<tt class=literal>double</tt> literals are shown in Table 2-3.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="ch02-TABLE-AUTOID.3">Table 2.3: Minimum and Maximum Floating-Point Literals</A></CAPTION>
<tr class=row>
<th align="left">

<p class=para>
Representation</TH>
<th align="left">

<p class=para>
Minimum Value</TH>
<th align="left">

<p class=para>
Maximum Value</TH>
</TR>
<tr class=row>
<td align="left">

<p class=para>
float</TD>
<td align="left">

<p class=para>
<tt class=literal>1.40239846e-45f</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>3.40282347e38f</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
double</TD>
<td align="left">

<p class=para>
<tt class=literal>4.94065645841246544e-324</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>1.79769313486231570e308</tt></TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
Floating-point literals that exceed these
limits are treated as errors by the Java compiler. The special floating-point
values positive infinity, negative infinity, and not-a-number are
available as predefined constants in Java, as part of the
<tt class=literal>Float</tt> and <tt class=literal>Double</tt> classes.

<p class=para>
<b>References</b>
<a href="ch02_01.htm">**UNKNOWN XREF**</A>;
<a href="ch03_01.htm">Floating-point types</A>;
<a href="ch04_04.htm#JLR2-CH-4-SECT-4.3">Unary Operators</A>;
<a href="ch10_08.htm">Double</A>;
<a href="ch10_09.htm">Float</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-2-SECT-2.3.3">Boolean literals</A></h4>

<p class=para>
There are two <tt class=literal>boolean</tt>
literal values, represented by the keywords <tt class=literal>true</tt>
and <tt class=literal>false:</tt>


<p>
<img align=middle src="figs/jlr0208.gif" alt="[Graphic: Figure from the text]" width=424 height=48 border=0>

<p class=para>
<b>References</b>
<a href="ch03_01.htm">Boolean Type</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-2-SECT-2.3.4">Character literals</A></h4>

<p class=para>
<a name="CH02.CHAR1"></A>A character literal
represents a constant value of type <tt class=literal>char</tt>
(an unsigned 16-bit quantity). A character
literal consists of either the character being represented, or an
equivalent escape sequence, enclosed in single quotes:


<p>
<img align=middle src="figs/jlr0209.gif" alt="[Graphic: Figure from the text]" width=424 height=52 border=0>


<p>
<img align=middle src="figs/jlr0210.gif" alt="[Graphic: Figure from the text]" width=450 height=230 border=0>

<p class=para>
Here are some examples of character literals:

<div class=screen>
<p>
<pre>
'c'
'n'
'\\'
'\u0138'
</PRE>
</DIV>

<p class=para>
The character sequence <tt class=literal>\u</tt><i class=emphasis>xxxx</I>
is not defined above as a valid <i class=emphasis>Escape</I>, even though it can
be used as a legal character literal. This sequence of characters
is defined as an <i class=emphasis>EscapedSourceCharacter</I>, which
is handled during the pre-processing phase, before tokenization
takes place. As a result, the tokenization phase never sees an <i class=emphasis>EscapedSourceCharacter</I>.
Tokenization sees only the single Unicode character that replaces
the <i class=emphasis>EscapedSourceCharacter</I> during pre-processing.

<p class=para>
The translations of the different types of escape sequences
supported in Java are shown in Table 2-4.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="ch02-TABLE-AUTOID.4">Table 2.4: Java Escape Sequences</A></CAPTION>
<tr class=row>
<th align="left">

<p class=para>
Escape Sequence</TH>
<th align="left">

<p class=para>
Unicode Equivalent</TH>
<th align="left">

<p class=para>
Meaning</TH>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\b</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>\u0008</tt></TD>
<td align="left">

<p class=para>
Backspace</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\t</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>\u0009</tt></TD>
<td align="left">

<p class=para>
Horizontal tab</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\n</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>\u000a</tt></TD>
<td align="left">

<p class=para>
Linefeed</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\f</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>\u000c</tt></TD>
<td align="left">

<p class=para>
Form feed</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\r</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>\u000d</tt></TD>
<td align="left">

<p class=para>
Carriage return</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\"</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>\u0022</tt></TD>
<td align="left">

<p class=para>
Double quote</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\'</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>\u0027</tt></TD>
<td align="left">

<p class=para>
Single quote</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\\</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>\u005c</tt></TD>
<td align="left">

<p class=para>
Backslash</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>\</tt><i class=emphasis>xxx</I></TD>
<td align="left">

<p class=para>
<tt class=literal>\u0000</tt> to <tt class=literal>\u00ff</tt></TD>
<td align="left">

<p class=para>
The character corresponding to the octal value <i class=emphasis>xxx</I></TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
A character literal representing a carriage
return character can be written only as <tt class=literal>'\r'</tt>;
a character literal representing a linefeed character can be written
only as <tt class=literal>'\n'</tt>. During the pre-processing that
precedes token recognition, these characters are classified as line
terminators, so neither carriage return (<tt class=literal>\u000d</tt>)
nor linefeed (<tt class=literal>\u000a</tt>) characters in Java source
code can ever be seen by the Java compiler as being part of a character
literal.

<p class=para>
If a backslash that is not part of a legal
<i class=emphasis>Escape</I> appears in a character literal, it is
flagged as an error. This is different from languages like C++ that
ignore backslashes in character literals that are not part of an
escape.

<p class=para>
<b>References</b>
<a href="ch02_01.htm">Conversion to Unicode</A>;
<a href="ch03_01.htm">Integer types</A>;
<a href="#OCTALDIGIT">**UNKNOWN XREF**</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-2-SECT-2.3.5">String literals</A></h4>

<p class=para>
A string literal represents
a constant string value and consists of the characters in the string
or the equivalent escapes:


<p>
<img align=middle src="figs/jlr0211.gif" alt="[Graphic: Figure from the text]" width=424 height=74 border=0>

<p class=para>
Here are some examples of string literals:

<div class=screen>
<p>
<pre>
""                         // the empty string
"Hello World"
"This has \"escapes\"\n"   // a string literal with escapes
</PRE>
</DIV>

<p class=para>
There is no primitive type for
representing strings in Java. Instead, each string literal becomes
a reference to a <tt class=literal>String</tt> object. If two or more
string literals consist of the same sequence of characters, they
refer to the same <tt class=literal>String</tt> object. Using one <tt class=literal>String</tt>
object to represent multiple string literals works because, once
created, the contents of a <tt class=literal>String</tt> object cannot
be changed.

<p class=para>
For a string literal to contain a carriage
return or linefeed character, the carriage return or linefeed must
be written as <tt class=literal>\r</tt> or <tt class=literal>\n</tt>. Neither
carriage return (<tt class=literal>\u000d</tt>) nor linefeed (<tt class=literal>\u000a</tt>)
characters in Java source code can ever be seen by the Java compiler
as part of a string literal. These characters are classified as
line terminators during the pre-processing phase that precedes token
recognition. For the same reason, <tt class=literal>\u</tt> Unicode
escapes for carriage return and linefeed characters cannot be directly
used in string literals.

<p class=para>
If a backslash that is not
part of a legal <i class=emphasis>Escape</I> appears in a string
literal it is flagged as an error. This is different from languages
like C++ that ignore backslashes in string literals that are not
part of an escape.

<p class=para>
Because operations on strings are
generally based on the length of the string, Java does not automatically
supply a NUL character (<tt class=literal>\u0000</tt>) at the end of
a string literal. For the same reason, it is not customary for Java
programs to put a NUL character at the end of a string.

<p class=para>
<b>References</b>
<i class=emphasis>Escape</I> 2.2.3.4;
<a href="ch03_02.htm#JLR2-CH-3-SECT-2.3">Specially supported classes</A>;
<a href="ch10_20.htm">String</A>;
<a href="ch10_21.htm">StringBuffer</A>;
<a href="ch04_06.htm#JLR2-CH-4-SECT-6.2">String Concatenation Operator +</A>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-2-SECT-2.4">Separators</A></h3>

<p class=para>
A <i class=emphasis>separator</I>
is any one of the punctuation tokens in the following railroad diagram:


<p>
<img align=middle src="figs/jlr0212.gif" alt="[Graphic: Figure from the text]" width=424 height=220 border=0>

<p class=para>
Separator tokens are used to separate other types of tokens. Thus,
separators are a part
of a higher-level syntactic construct. Although separators have
syntactic significance, they do not imply any operation on data.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-2-SECT-2.5">Operators</A></h3>

<p class=para>
An operator is a token that
implies an operation on data. Java has both assignment and non-assignment
operators:


<p>
<img align=middle src="figs/jlr0213.gif" alt="[Graphic: Figure from the text]" width=424 height=48 border=0>

<p class=para>
A <i class=emphasis>NonAssignmentOperator</I> is one of the following:

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>+</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>-</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>&lt;=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>^</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>++</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>&lt;</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>*</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>&gt;=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>%</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>--</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
</TD>
<td align="left">

<p class=para>
<tt class=literal>/</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>!=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>?</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>&gt;&gt;</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>!</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>&amp;</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>==</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>:</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>&gt;&gt;</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>~</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>|</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>&amp;&amp;</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>&gt;&gt;&gt;</tt></TD>
<td align="left">

<p class=para>
<tt class=literal></tt></TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
An <i class=emphasis>AssignmentOperator</I> is one of the following:

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>-=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>*=</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>/=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>|=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>&amp;=</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>^=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>+=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>%=</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>&lt;&lt;=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>&gt;&gt;=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>&gt;&gt;&gt;=</tt></TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
Unlike C/C++, Java does not have a comma
operator. Java does allow a comma to be used as a separator in the
header portion of <tt class=literal>for</tt> statements, however. Java
also omits a number of other operators found in C and C++. Most
notably, Java does not include operators for accessing physical
memory as an array of bytes, such as <tt class=literal>sizeof</tt>,
<tt class=literal>unary &amp; (address of)</tt>,
<tt class=literal>unary * (contents of)</tt>,
or <tt class=literal>-&gt; (contents of field)</tt>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-2-SECT-2.6">Comments</A></h3>

<p class=para>
Java supports three styles of
comments:<a name="CH02.COM"></A>

<p>
<ul class=itemizedlist>
<li class=listitem>A standard C-style comment, where all of the
characters between <tt class=literal>/*</tt> and <tt class=literal>*/</tt>
are ignored.

<p>
<li class=listitem>A single-line comment, where all of the
characters from <tt class=literal>//</tt> to the end of the line are
ignored.

<p>
<li class=listitem>A documentation comment that begins with <tt class=literal>/**</tt>
and ends with <tt class=literal>*/</tt>. These comments are similar
to standard C-style comments, but the contents of a documentation
comment can be extracted to produce automatically generated documentation.

<p>
</UL>
<p class=para>
The formal definition of a comment is:


<p>
<img align=middle src="figs/jlr0214.gif" alt="[Graphic: Figure from the text]" width=424 height=149 border=0>

<p class=para>
C-style comments and documentation
comments do not nest. For example, consider the following arrangement
of comments:

<div class=screen>
<p>
<pre>
/*   ...   /*   ...   */   ...   */
</PRE>
</DIV>

<p class=para>
The Java compiler interprets the first <tt class=literal>*/</tt>
to be the end of the comment, so that what follows is a syntax error.

<p class=para>
However, in a single-line comment (i.e., one that starts with
<tt class=literal>//</tt> ), the sequences <tt class=literal>/*</tt>,
<tt class=literal>/**</tt>,
and <tt class=literal>*/</tt> have no special meaning. Similarly, in
a C-style comment or a documentation comment (i.e., comments that
begin with <tt class=literal>/*</tt> or <tt class=literal>/**</tt>), the
sequence <tt class=literal>//</tt> has no special meaning.

<p class=para>
In
order to comment out large chunks of code, you need to adopt a commenting
style. The C/C++ practice of using <tt class=literal>#if</tt> to comment
out multiple lines of code is not available for Java programs because
Java does not have a conditional compilation mechanism. If you use C-style comments in your code, you'll need to use
the <tt class=literal>//</tt> style of comment to comment out multiple
lines of code:

<div class=screen>
<p>
<pre>
///*
// * Prevent instantiation of RomanNumeral objects without
// * parameters.
// */
//    private RomanNumeral() {
//        super();
//    }
</PRE>
</DIV>

<p class=para>
The
<tt class=literal>/* */</tt> style of comment cannot
be used to comment out the lines in the above example because the
example already contains that style of comment, and these comments
do not nest.

<p class=para>
If, however, you stick to using the <tt class=literal>//</tt>
style of comment in your code, you can use C-style comments to comment
out large blocks of code:

<div class=screen>
<p>
<pre>
/*
 *// Prevent instantiation of RomanNumeral objects without
 *// parameters.
 *    private RomanNumeral() {
 *        super();
 *     }
 */
</PRE>
</DIV>

<p class=para>
Which style you
choose is less important than using it consistently, so that you
avoid inadvertently nesting comments in illegal ways.

<p class=para>
<b>References</b>
<a href="ch07_04.htm#JLR2-CH-7-SECT-4">Documentation Comments</A>;
<a href="ch02_01.htm">Division of the Input Stream into Lines</A>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-2-SECT-2.7">White Space</A></h3>

<p class=para>
White space denotes characters such
as space, tab, and form feed that do not have corresponding glyphs,
but alter the position of following glyphs. White space and
comments are discarded. The purpose of white space is to separate
tokens from each other:


<p>
<img align=middle src="figs/jlr0215.gif" alt="[Graphic: Figure from the text]" width=424 height=121 border=0>

<p class=para>
<i class=emphasis>SpaceCharacter</I>
is equivalent to <tt class=literal>\u0020</tt>.

<p class=para>
<i class=emphasis>HorizontalTabCharacter</I>
is equivalent to <tt class=literal>\u0009</tt> or <tt class=literal>\t</tt>.

<p class=para>
<i class=emphasis>FormFeedCharacter</I>
is equivalent to <tt class=literal>\u000C</tt> or <tt class=literal>\f</tt>.

<p class=para>
<i class=emphasis>EndOf&nbsp;FileMarker</I> is defined as
<tt class=literal>\u001A</tt>. Also known
as Control-Z, this is the last character in a pre-processed compilation
unit. It is treated as white space if it is the last character in a file,
to enhance compatibility with
older MS-DOS programs and other operating environments that recognize
<tt class=literal>\u001A</tt> as an end-of-file marker.

<p class=para>
<b>References</b>
<a href="ch02_01.htm">Division of the Input Stream into Lines</A>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch03_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Pre-Processing</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Data Types</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
