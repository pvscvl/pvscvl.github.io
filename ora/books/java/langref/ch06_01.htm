<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 6] Statements and Control Structures</TITLE>
<meta name="author" content="Mark Grand">
<meta name="date" content="Thu Jul 31 13:14:18 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="java">
<meta name="title" content="Java Language Reference">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">
<script language='JavaScript'>
<!--
if (location.replace) {
 location.replace ('../../../WebStripper/protected.html#link=http://rtfm.vn.ua/prog/perl/orb/books/java/langref/ch06_js.htm');
}
// --></script>

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Language Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_05.htm#JLR2-CH-5-SECT-5.4.2.2"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 6</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch06_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="JLR2-CH-6">6. Statements and Control Structures</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
<a href='ch06_02.htm'>Labeled Statements</a><br>
<a href='ch06_03.htm'>The Empty Statement</a><br>
<a href='ch06_04.htm'>Expression Statements</a><br>
<a href='ch06_05.htm'>The if Statement</a><br>
<a href='ch06_06.htm'>The switch Statement</a><br>
<a href='ch06_07.htm#JLR2-CH-6-SECT-7.3'>Iteration Statements</a><br>
<a href='ch06_08.htm'>The break Statement</a><br>
<a href='ch06_09.htm'>The continue Statement</a><br>
<a href='ch06_10.htm'>The return Statement</a><br>
<a href='ch06_11.htm'>The throw Statement</a><br>
<a href='ch06_12.htm'>The try Statement</a><br>
<a href='ch06_13.htm'>The synchronized Statement</a><br>
<p>
<p>
</DIV>

<p class=para>
A statement is the construct used to control the flow of program
execution in Java:


<p>
<img align=middle src="figs/jlr0601.gif" alt="[Graphic: Figure from the text]" width=424 height=321 border=0>

<p class=para>
Statements are executed in sequence, unless a statement alters the flow of
control. Statements usually correspond to executable code.

<p class=para>
<b>References</b>
<a href="#JLR2-CH-6-SECT-1">Blocks</A>;
<a href="ch06_08.htm">The break Statement</A>;
<a href="ch06_09.htm">The continue Statement</A>;
<a href="ch06_03.htm">The Empty Statement</A>;
<a href="ch06_04.htm">Expression Statements</A>;
<a href="ch06_05.htm">The if Statement</A>;
<a href="ch06_07.htm#JLR2-CH-6-SECT-7.3">Iteration Statements</A>;
<a href="ch06_02.htm">Labeled Statements</A>;
<a href="ch06_10.htm">The return Statement</A>;
<a href="ch06_06.htm">The switch Statement</A>;
<a href="ch06_13.htm">The synchronized Statement</A>;
<a href="ch06_11.htm">The throw Statement</A>;
<a href="ch06_12.htm">The try Statement</A>

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JLR2-CH-6-SECT-1">6.1 Blocks</A></h2>

<p class=para>
A block is a sequence of zero or more statements,
local variable declarations, or local class declarations 
enclosed in curly braces:<a name="CH06.BLOCK1"></A><a name="CH06.BLOCK2"></A>


<p>
<img align=middle src="figs/jlr0602.gif" alt="[Graphic: Figure from the text]" width=424 height=100 border=0>

<p class=para>
The bodies of methods, constructors, static initializers,
and instance initializers are blocks.
A variable declaration in a block causes a local variable to be
defined, while a class declaration in a block causes a local
class to be defined. 
A block is itself a kind of statement, so a block can contain
other blocks. Here is an example of a block:

<div class=screen>
<p>
<pre>
{
    int tmp = x;
    x = y;
    y = tmp;
}
</PRE>
</DIV>

<p class=para>
The statements in a block are executed in the sequence in
which they occur, unless a statement that alters the
sequence of execution is executed. If, as a result of such a statement, the
Java compiler can determine that a statement will never be executed,
the compiler is required to produce an error message about the unreachable
statement.

<p class=para>
The one exception to this rule allows <tt class=literal>if</tt>
statements that have constant Boolean expressions. The compiler
recognizes <tt class=literal>if</tt> statements that have constant Boolean
expressions and does not generate code for the portion of the statement
that can never be executed. This mechanism can be used for conditional
compilation; it is similar to the C/C++ preprocessor features that
are used for this purpose.

<p class=para>
<b>References</b>
<a href="ch04_16.htm">Constant Expressions</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Constructors</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Instance Initializers</A>;
<a href="#JLR2-CH-6-SECT-1.2">Local Classes</A>;
<a href="#JLR2-CH-6-SECT-1.1">Local Variables</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Methods</A>;
<i class=emphasis>Statement</I> 6;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Static Initializers</A>;
<a href="ch06_06.htm">The switch Statement</A>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-6-SECT-1.1">Local Variables</A></h3>

<p class=para>
<a name="CH06.LOCAL1"></A><a name="CH06.LOCAL2"></A>Local variables declared in a block exist only from their declaration
to the end
of the block. A local variable declaration cannot include any modifiers
except the <tt class=literal>final</tt> modifier.
In other words, a variable declaration in a block cannot include
any of the following keywords: <tt class=literal>public</tt>,
<tt class=literal>protected</tt>, <tt class=literal>private</tt>,
<tt class=literal>static</tt>, 
<tt class=literal>transient</tt>, or <tt class=literal>volatile</tt>. 
The syntax that permits the use of the <tt class=literal>final</tt>
modifier with local variables is new as of Java 1.1; the usage is not
permitted with earlier versions of the language.

<p class=para>
The syntax of a local variable
declaration is:


<p>
<img align=middle src="figs/jlr0603.gif" alt="[Graphic: Figure from the text]" width=450 height=103 border=0>

<p class=para>
A local variable declaration is really made up of two distinct things:

<p>
<ul class=itemizedlist>
<li class=listitem>A type, which can be either a primitive type or a reference type.

<p>
<li class=listitem>Any number of identifiers that name variables.
Each name can be followed by pairs of square brackets to indicate
an array variable, as well as an optional initializer for the variable.

<p>
</UL>
<p class=para>
A local variable declared within a block that has an initializer
is initialized when its declaration is executed. Within the body
of a method or constructor, its formal parameters are treated as
local variables. Formal parameters
are initialized when a method is called. A local variable can also
be declared in the header of a <tt class=literal>for</tt> statement.

<p class=para>
The following are some examples of local variable declarations:

<div class=screen>
<p>
<pre>
int x;
double[] k, m[];
</PRE>
</DIV>

<p class=para>
<b>References</b>
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Variable initializers</A>;
<i class=emphasis>Expression</I> 4;
<a href="ch02_02.htm#JLR2-CH-2-SECT-2.3.4">Identifiers</A>;
<a href="ch05_05.htm#JLR2-CH-5-SECT-5.4.2.2">Interface Variables</A>;
<i class=emphasis>Type</I> 3;
<a href="ch06_07.htm#JLR2-CH-6-SECT-7.3">The for Statement</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Variables</A>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-6-SECT-1.1.1">Final local variables</A></h4>

<p class=para>
If a local variable is declared with the <tt class=literal>final</tt>
modifier, the variable is a named constant value. As such, it must be
assigned an initial value. Any assignment to a
<tt class=literal>final</tt> local variable, other than the one that
provides its initial value, is a compile-time error. The initial value
for a <tt class=literal>final</tt> local variable is typically 
provided by an initializer that is part of the variable's declaration.
For example:

<div class=screen>
<p>
<pre>
final int X = 4;
</PRE>
</DIV>

<p class=para>
A <tt class=literal>final</tt> local variable that is not initialized 
in its declaration is called a <i class=emphasis>blank final</I>. 
A blank final must be assigned a value exactly once. The compiler
uses flow analysis that takes <tt class=literal>if</tt> statements
and iteration statements
into account to ensure that a blank final is assigned a value
exactly once. Thus, it is possible to have multiple assignments to a blank
final, so long as exactly one of them can be executed. For example,
here is an instance initializer that sets the value of a blank final:

<div class=screen>
<p>
<pre>
{
    final int DAYS_IN_YEAR;
    if (isLeapYear(new Date()))
        DAYS_IN_YEAR = 366;
    else
        DAYS_IN_YEAR = 365;
    ...
}
</PRE>
</DIV>

<p class=para>
Local variables that are declared <tt class=literal>final</tt> 
are not supported prior to Java 1.1.

<p class=para>
<b>References</b>
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Instance Initializers</A>;
<a href="ch06_07.htm#JLR2-CH-6-SECT-7.3">The do Statement</A>;
<a href="ch06_07.htm#JLR2-CH-6-SECT-7.3">The for Statement</A>;
<a href="ch06_05.htm">The if Statement</A>;
<a href="ch06_07.htm#JLR2-CH-6-SECT-7.3">The while Statement</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Variable modifiers</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-6-SECT-1.1.2">Local variable type</A></h4>

<p class=para>
A local variable
declaration must always specify the type of the variable. If the
declaration of a local variable uses a primitive type, the variable
contains a value of the specified primitive type.
If the declaration
uses a reference type, the variable contains a reference to the
specified type of object.

<p class=para>
The presence of square brackets
in a variable declaration, after either the type or the variable
name, indicates that the variable contains a reference to an array.
For example:

<div class=screen>
<p>
<pre>
int a[];        // a is an array of int
int[] b;        // b is also an array of int
</PRE>
</DIV>

<p class=para>
It is also possible to declare a variable to contain an array of arrays,
or more generally, arrays nested to any level. Each pair of square
brackets in the declaration corresponds to a dimension of the array;
it makes no difference whether the brackets appear after the type
or the variable name. For example:

<div class=screen>
<p>
<pre>
int[][][] d3;      // Each of these is an array of
int[][] f3[];      // arrays of arrays of integers
int[] g3[][];
int h3[][][];
int[] j3, k3[];    // An array and an array of arrays
</PRE>
</DIV>

<p class=para>
<b>References</b>
<a href="ch03_02.htm#JLR2-CH-3-SECT-2.3">Array Types</A>;
<a href="ch03_01.htm">Primitive Types</A>;
<a href="ch03_02.htm#JLR2-CH-3-SECT-2.3">Reference Types</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-6-SECT-1.1.3">Local variable name</A></h4>

<p class=para>
The identifier that
follows the variable type is the name of the local variable. When
a local variable definition is in effect, all occurrences of that
name are taken to mean the local variable. If a local variable is
declared with the same name as a class, an interface, or a field
of the class in which the local variable is declared, the definition
of the class, interface, or field is hidden. Fields that are hidden by 
a local variable can be referenced using the keyword <tt class=literal>this</tt>.
For example:

<div class=screen>
<p>
<pre>
class myClass {
    int value;
    void doit(int x) {
        int value;
        value = x*4;               // Set local variable
        this.value = value + 1;    // Set field variable
}
</PRE>
</DIV>

<p class=para>
A block cannot have multiple local variables with the same name. This
means that a local variable
cannot be declared at a point in a block where a local variable
with the same name is already defined. For example, consider the
following code:

<div class=screen>
<p>
<pre>
myMethod(char c){
    int j;        // Okay
    char c;       // Error
    int j;        // Error
    {
        int j;    // Error
    }
    {
        int x;    // Okay
    }
    {
        int x;    // Okay
    }
    int x;        // Okay
}
</PRE>
</DIV>

<p class=para>
In the above
example, the declaration of <tt class=literal>c</tt> as a local variable
is an error because it occurs in a method that has a formal parameter
with that name. The second declaration of <tt class=literal>j</tt> is
an error because there is already a local variable defined with
that name. The third declaration of <tt class=literal>j</tt> as a local
variable is also an error for the same reason; the nested block
sees all of the declarations that are visible in the enclosing block,
including the declaration of <tt class=literal>j</tt> in the outer block.

<p class=para>
The first declaration of <tt class=literal>x</tt> is fine
because there is no previous declaration of <tt class=literal>x</tt>
for it to conflict with. The second declaration of <tt class=literal>x</tt>
is also fine because there is no previous declaration of <tt class=literal>x</tt>
in the enclosing block for it to conflict with. The first declaration
of <tt class=literal>x</tt> occurs in a nested block, so it is not visible
in the enclosing block. The third declaration of <tt class=literal>x</tt>
is also fine because the preceding declarations occurred in nested
blocks; they are not visible in the enclosing block.

<p class=para>
<b>References</b>
<a href="ch02_02.htm#JLR2-CH-2-SECT-2.3.4">Identifiers</A>;
<a href="ch04_01.htm">this</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-6-SECT-1.1.4">Local variable initializers</A></h4>

<p class=para>
A local variable
declaration can contain an initializer. If the variable is of a
non-array type, the expression in the initializer is evaluated and
the variable is set to the result of the expression, as long as
the result is assignment-compatible with the variable. If the variable
is of an array type, the initializer must be an array initializer,
as described in <a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Variable initializers</A>.
If the variable is declared <tt class=literal>final</tt>, the initializer
sets the value of the named constant.

<p class=para>
A local variable
declaration with an initializer is similar in effect to a local
variable declaration without an initializer immediately followed
by an assignment statement that sets the declared variable. Take
the following example:

<div class=screen>
<p>
<pre>
int a = 4;
</PRE>
</DIV>

<p class=para>
This is equivalent to:

<div class=screen>
<p>
<pre>
int a;
a = 4;
</PRE>
</DIV>

<p class=para>
If a local variable has an initializer, the value of the variable is
set to the value of the initializer when the declaration is executed.

<p class=para>
Any attempt to access the value of a local variable before
its value is set by an assignment statement or an initializer is
treated as an error by the Java compiler. For example:

<div class=screen>
<p>
<pre>
int foo(int x) {
    int a = x + 1;
    int b, c;
    if (a &gt; 4)
        b = 3;
    a = a * c;        // Error: c not initialized
    a = b * 8 + a;    // Error: b might not be initialized
</PRE>
</DIV>

<p class=para>
This example contains two errors. First, the compiler complains about
the expression <tt class=literal>a*c</tt>
because <tt class=literal>c</tt> is not initialized. The compiler also
complains about the expression <tt class=literal>b*</tt>
<tt class=literal>8+a</tt> because
the preceding assignment to <tt class=literal>b</tt> may not executed,
depending on the value of <tt class=literal>a</tt>. If the compiler
cannot guarantee that a local variable will be initialized, it generates
an error message when the variable is used.

<p class=para>
<b>References</b>
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Variable initializers</A>;
<a href="ch04_13.htm#JLR2-CH-4-SECT-13">Assignment Operators</A>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-6-SECT-1.2">Local Classes</A></h3>

<p class=para>
Local classes declared in a block exist only in the scope of that
block. Local classes are not supported prior to Java 1.1
Here's the syntax of a local class declaration:


<p>
<img align=middle src="figs/jlr0604.gif" alt="[Graphic: Figure from the text]" width=424 height=50 border=0>

<p class=para>
A local class can access local variables in the enclosing block that
are declared <tt class=literal>final</tt>.  A local class can also access
instance variables of the enclosing class if they are not declared
inside of a <tt class=literal>static</tt> method or static initializer.

<p class=para>
There is an alternate syntax for a local class that allows an
anonymous local class to be defined. This syntax is available as part
of an allocation expression.

<p class=para>
<b>References</b>
<a href="ch04_02.htm#JLR2-CH-4-SECT-2.2">Allocation Expressions</A>;
<a href="ch05_03.htm">Anonymous classes</A>;
<a href="ch05_03.htm">Local classes</A>;
<a href="#JLR2-CH-6-SECT-1.1">Local Variables</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Class Declarations</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Variables</A>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-6-SECT-1.2.1">Local class modifiers</A></h4>

<p class=para>
The keywords <tt class=literal>abstract</tt> and <tt class=literal>final</tt>
can be used in the declaration of a local class.  These modifiers
have the following meanings:

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>abstract</tt><br>
<dd>

<p class=para>
If a local class is declared
<tt class=literal>abstract</tt>, no instances of the class may be
created. A local class declared <tt class=literal>abstract</tt> may
contain <tt class=literal>abstract</tt> methods. Classes not declared
<tt class=literal>abstract</tt> may not contain
<tt class=literal>abstract</tt> methods and must override any
<tt class=literal>abstract</tt> methods they inherit with methods that are
not <tt class=literal>abstract</tt>. Classes that implement
an interface and are not declared <tt class=literal>abstract</tt> must
contain or inherit methods that are not <tt class=literal>abstract</tt>
that have the same name, have the same number of parameters,
and have corresponding
parameter types as the methods declared in the interfaces that the
class implements.

<p>
<dt class=varlistentry><tt class=literal>final</tt><br>
<dd>

<p class=para>
If a local class is declared
<tt class=literal>final</tt>, it cannot be subclassed. In other words, it
cannot appear in the <tt class=literal>extends</tt> clause of another
class.</DL>
<p class=para>
<b>References</b>
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Class Modifiers</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Inner class modifiers</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-6-SECT-1.2.2">Local class members</A></h4>

<p class=para>
The body of a local class cannot declare any 
<tt class=literal>static</tt> variables, 
<tt class=literal>static</tt> methods, <tt class=literal>static</tt> classes,
or static initializers. Beyond those restrictions, 
the remainder of the declaration is the same as that for a top-level 
class declaration, which is described 
in <a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Class Declarations</A>.

<p class=para>
<b>References</b>
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Class Declarations</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Constructors</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Instance Initializers</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Methods</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Nested Top-Level and Member Classes</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Static Initializers</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Variables</A>

</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_05.htm#JLR2-CH-5-SECT-5.4.2.2"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch06_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Interface Declarations</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Labeled Statements</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
