<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 4] 4.13 Assignment Operators</TITLE>
<meta name="author" content="Mark Grand">
<meta name="date" content="Thu Jul 31 13:10:41 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="java">
<meta name="title" content="Java Language Reference">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Language Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_12.htm#JLR2-CH-4-SECT-12"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 4<br>Expressions</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch04_14.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JLR2-CH-4-SECT-13">4.13 Assignment Operators</A></h2>

<p class=para>
<a name="CH04.ASSIGN1"></A><a name="CH04.ASSIGN2"></A>Assignment operators
set the values of variables and array elements. An assignment operator
may appear in an assignment expression:


<p>
<img align=middle src="figs/jlr0426.gif" alt="[Graphic: Figure from the text]" width=450 height=56 border=0>

<p class=para>
The actual assignment
operator in an assignment expression can be the simple assignment
operator <tt class=literal>=</tt> or one of the compound assignment
operators shown below. All of the assignment operators are equal
in precedence. Assignment operators are evaluated from right to
left, so <tt class=literal>a=b=c</tt> is equivalent to <tt class=literal>a=(b=c)</tt>.

<p class=para>
The left operand of an assignment operator must be an expression
that produces a variable or an array element. The left operand of
an assignment operator cannot be an expression that evaluates to
a pure value, or a compile-time error occurs. So, for example, the
left operand cannot be a <tt class=literal>final</tt> variable, since
a <tt class=literal>final</tt> variable evaluates to a pure value, not
a variable.

<p class=para>
The assignment operator itself produces
a pure value, not a variable or an array element. The pure value
produced by an assignment operator is the value of the variable
or array element after it has been set by the assignment operation.
The type of this pure value is the type of the variable or array
element.

<p class=para>
The simple assignment operator <tt class=literal>=</tt>
just sets the value of a variable or array element. It does not
imply any other computation. The right operand of the simple assignment
operator can be of any type, as long as that type is assignment-compatible
with the type of the left operand, as described in the
next section. If the right operand is not assignment-compatible,
a compile-time error occurs.

<p class=para>
The compound assignment operators are:

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>+=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>-=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>*=</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>/=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>|=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>&amp;=</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>^=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>%=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>&lt;&lt;=</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>&gt;&gt;=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>&gt;&gt;&gt;=</tt></TD>
<td align="left">

<p class=para>
<tt class=literal></tt></TD>
</TR>
</TABLE>
<p>
</DIV>

<p class=para>
Both of the operands of a compound assignment
operator must be of primitive types, or a compile-time error occurs.
The one exception is if the left operand of the <tt class=literal>+=</tt>
operator is of type <tt class=literal>String</tt>; in this case the
right operand can be of any type.

<p class=para>
A compound assignment
operator combines a binary operator with the simple assignment operator
<tt class=literal>=</tt>. Thus, to be assignment-compatible, the right
operand of a compound assignment operator must be of a type that
complies with the rules for the indicated binary operation. Otherwise,
a compile-time error occurs. An assignment expression of the form:

<div class=screen>
<p>
<pre>
e1 op = e2
</PRE>
</DIV>

<p class=para>
is approximately equivalent to:

<div class=screen>
<p>
<pre>
e1 = (type) ((e1) op (e2))
</PRE>
</DIV>

<p class=para>
where <i class=emphasis>type</I> is the type of the expression
<tt class=literal>e1</tt>. The only
difference is that <tt class=literal>e1</tt> is only evaluated once
in the expression that uses the compound assignment operator.

<p class=para>
For example, consider the following code fragment:

<div class=screen>
<p>
<pre>
j = 0;
a[0] = 3;
a[1]=6;
a[j++] += 2;
</PRE>
</DIV>

<p class=para>
After this code is executed, <tt class=literal>j</tt>
equals 1 and <tt class=literal>a[0]</tt> is 5. Contrast this with the
following code:

<div class=screen>
<p>
<pre>
j = 0;
a[0] = 3;
a[1]=6;
a[j++] = a[j++] + 2;
</PRE>
</DIV>

<p class=para>
After this code is executed,
<tt class=literal>j</tt> equals 2 and <tt class=literal>a[0]</tt> is 8 because
<tt class=literal>j++</tt> is evaluated twice.

<p class=para>
<b>References</b>
<a href="ch03_02.htm#JLR2-CH-3-SECT-2.3">Array Types</A>;
<a href="ch02_02.htm#JLR2-CH-2-SECT-2.3.4">**UNKNOWN XREF**</A>;
<a href="ch04_12.htm#JLR2-CH-4-SECT-12">Conditional Operator</A>;
<a href="ch05_05.htm#JLR2-CH-5-SECT-5.4.2.2">Interface Variables</A>;
<a href="ch06_01.htm">Local Variables</A>;
<a href="ch04_14.htm">Order of Operations</A>;
<a href="ch03_01.htm">Primitive Types</A>;
<a href="ch03_02.htm#JLR2-CH-3-SECT-2.3">Reference Types</A>;
<a href="ch10_20.htm">String</A>;
<a href="ch04_04.htm#JLR2-CH-4-SECT-4.3">Unary Operators</A>;
<a href="ch05_04.htm#JLR2-CH-5-SECT-4.4.2.6">Variables</A>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-4-SECT-13.1">Assignment Compatibility</A></h3>

<p class=para>
<a name="CH04.COMPAT20"></A><a name="CH04.COMPAT21"></A><a name="CH04.COMPAT22"></A>Saying that
one type of value is <i class=emphasis>assignment-compatible</I>
<i class=emphasis></I>with another type of value means that a value of the
first type can be assigned to a variable of the second type. Here
are the rules for assignment compatibility in Java:
<p>
<ul class=itemizedlist>
<li class=listitem>Every
type is assignment-compatible with itself.

<p>
<li class=listitem>The <tt class=literal>boolean</tt>
type is not assignment-compatible with any other type.

<p>
<li class=listitem>A
value of any integer type can be assigned to a variable of any other
integer type if the variable is of a type that allows it to contain
the value without any loss of information.

<p>
<li class=listitem>A value of
any integer type can be assigned to a variable of any floating-point
type, but a value of any floating-point type cannot be assigned
to a variable of any integer type.

<p>
<li class=listitem>A <tt class=literal>float</tt>
value can be assigned to a <tt class=literal>double</tt> variable, but
a <tt class=literal>double</tt> value cannot be assigned to a <tt class=literal>float</tt>
variable.

<p>
<li class=listitem>With a type cast, a value of any arithmetic
type can be assigned to a variable of any other arithmetic type.

<p>
<li class=listitem>Any reference can be assigned to a variable that is declared
of type <tt class=literal>Object</tt>.

<p>
<li class=listitem>A reference to an
object can be assigned to a class-type reference variable if the
class of the variable is the same class or a superclass of the class
of the object.

<p>
<li class=listitem>A reference to an object can be assigned
to an interface-type reference variable if the class of the object
implements the interface.

<p>
<li class=listitem>A reference to an array can
be assigned to an array variable if either of the following conditions
is true:
<p>
<ul class=itemizedlist>
<li class=listitem>Both array types contain elements of the same
type.

<p>
<li class=listitem>Both array types contain object references and
the type of reference contained in the elements of the array reference
can be assigned to the type of reference contained in the elements
of the variable.

<p>
</UL>
<p>
</UL>
<p class=para>
Here's an example that illustrates
the rules about assignment compatibility of arrays:

<div class=screen>
<p>
<pre>
class Triangle extends Shape {...}
...
int[] i = new int[8];
int j[];
long l[];
short s[];
Triangle[] t;
Shape[] sh;
j = i;    // Okay
s = i;    // Error
l = i;    // Error
sh = t;   // Okay
t = sh;   // Error
</PRE>
</DIV>

<p class=para>
Assigning <tt class=literal>i</tt>
to <tt class=literal>j</tt> is fine because both variables are declared
as references to arrays that contain <tt class=literal>int</tt> values.
On the other hand, assigning <tt class=literal>i</tt> to <tt class=literal>s</tt>
is an error because the variables are declared as references to
arrays that contain different kinds of elements and these elements
are not object references. Assigning <tt class=literal>i</tt> to
<tt class=literal>l</tt>
is an error for the same reason. Assigning <tt class=literal>t</tt>
to <tt class=literal>sh</tt> is fine because the variables are declared
as references to arrays that contain object references, and
<tt class=literal>sh[0]=t[0]</tt>
is legal. However, assigning <tt class=literal>sh</tt> to <tt class=literal>t</tt>
is an error because <tt class=literal>t[0]=sh[0]</tt> is not legal.

<p class=para>
It is not always possible for the compiler to determine if
an assignment to an array element is legal; in these cases the assignment
compatibility is checked at runtime. This situation can occur when
a variable contains a reference to an array whose type of elements
is specified by a class or interface name. In this case, it may
not be possible to determine the actual type of the array elements
until runtime. Consider the following example:

<div class=screen>
<p>
<pre>
void foo (InputStream a[]) {
    a[0] = new FileInputStream("/dev/null");
}
</PRE>
</DIV>

<p class=para>
<a href="#JLR2-CH-4-FIG-1">Figure 4.1</A> shows
the <tt class=literal>InputStream</tt> class
and some of its subclasses in the <tt class=literal>java.io</tt> package.

<div class=figure>
<h4 class=figure><a class="TITLE" name="JLR2-CH-4-FIG-1">Figure 4.1: InputStream and some of its classes</A></h4>


<p>
<img align=middle src="figs/jlrf0401.gif" alt="[Graphic: Figure 4-1]" width=503 height=153 border=0>

</DIV>

<p class=para>
Any array with elements that contain references
to objects of class <tt class=literal>InputStream</tt> or any of its
subclasses can be passed to the method <tt class=literal>foo()</tt>
shown in the above example. For example:

<div class=screen>
<p>
<pre>
FileInputStream f[] = new FileInputStream[3];
foo(f);
</PRE>
</DIV>

<p class=para>
Since <tt class=literal>FileInputStream</tt> is a subclass of
<tt class=literal>InputStream</tt>, the call to <tt class=literal>foo()</tt>
does not cause any problems at runtime.

<p class=para>
However, the
following call to <tt class=literal>foo()</tt> is problematic:

<div class=screen>
<p>
<pre>
DataInputStream f[] = new DataInputStream[3];
foo(f);
</PRE>
</DIV>

<p class=para>
This call causes an <tt class=literal>ArrayStoreException</tt>
to be thrown at runtime. Although <tt class=literal>DataInputStream</tt>
is a subclass of <tt class=literal>InputStream</tt>, it is not a superclass
of <tt class=literal>FileInputStream</tt>, so the array element assignment
in <tt class=literal>foo()</tt> is not assignment-compatible.

<p class=para>
<b>References</b>
<a href="ch03_01.htm">Arithmetic Types</A>;
<a href="ch03_02.htm#JLR2-CH-3-SECT-2.3">Array Types</A>;
<a href="ch03_01.htm">Boolean Type</A>;
<a href="ch03_02.htm#JLR2-CH-3-SECT-2.3">Class Types</A>;
<a href="ch03_02.htm#JLR2-CH-3-SECT-2.3">Interface Types</A>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_12.htm#JLR2-CH-4-SECT-12"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch04_14.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Conditional Operator</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Order of Operations</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
