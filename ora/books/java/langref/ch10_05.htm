<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 10] ClassLoader</TITLE>
<meta name="author" content="Mark Grand">
<meta name="date" content="Fri Aug  8 15:23:53 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="java">
<meta name="title" content="Java Language Reference">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Language Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 10<br>The java.lang Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch10_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=refnamediv>
<h1>ClassLoader</H1>

<h2>Name</H2>

ClassLoader

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.35">Synopsis</A></h2>

<dl class=variablelist>
<dt class=varlistentry>Class Name:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.ClassLoader</tt>

<p>
<dt class=varlistentry>Superclass:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.Object</tt>

<p>
<dt class=varlistentry>Immediate Subclasses:<br>
<dd>

<p class=para>
None

<p>
<dt class=varlistentry>Interfaces Implemented:<br>
<dd>

<p class=para>
None

<p>
<dt class=varlistentry>Availability:<br>
<dd>

<p class=para>
JDK 1.0 or later</DL>
</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.36">Description</A></h2>

<p class=para>
<a name="MAN.CLASSLOADER.1"></A>The <tt class=literal>ClassLoader</tt> class provides a mechanism
for Java to load classes over a network or from any source other
than the local filesystem. The default class-loading mechanism
loads classes from files found relative to directories specified
by the <tt class=literal>CLASSPATH</tt>
environment variable. This default mechanism does not use an instance
of the <tt class=literal>ClassLoader</tt> class.

<p class=para>
An application can implement another mechanism for loading
classes by declaring a subclass of the <tt class=literal>abstract</tt>
<tt class=literal>ClassLoader</tt> class. A subclass of <tt class=literal>ClassLoader</tt>
must override the <tt class=literal>loadClass()</tt> to define a class-loading
policy. This method implements any sort of security that
is necessary for the class-loading mechanism. The other methods
of <tt class=literal>ClassLoader</tt> are <tt class=literal>final</tt>,
so they cannot be overridden.

<p class=para>
A <tt class=literal>ClassLoader</tt> object is typically used
by calling its <tt class=literal>loadClass()</tt> method to explicitly
load a top-level class, such as a subclass of <tt class=literal>Applet</tt>.
The <tt class=literal>ClassLoader</tt> that loads the class becomes
associated with the class; it can be obtained by calling the <tt class=literal>getClassLoader()</tt> method of the <tt class=literal>Class</tt> object that represents
the class.

<p class=para>
Once a class is loaded, it must be resolved before it can
be used. Resolving a class
means ensuring that all of the other classes it references
are loaded. In addition, all of the classes that they reference
must be loaded, and so on, until all of the needed classes have been
loaded. Classes are resolved using the <tt class=literal>resolveClass()</tt> method
of the <tt class=literal>ClassLoader</tt> object that loaded the initial
class. This means that when a <tt class=literal>ClassLoader</tt> object
is explicitly used to load a class, the same <tt class=literal>ClassLoader</tt>
is used to load all of the classes that it references, directly
or indirectly.

<p class=para>
Classes loaded using a <tt class=literal>ClassLoader</tt> object may
attempt to load additional classes without explicitly using a
<tt class=literal>ClassLoader</tt> object. They can do this by calling the
<tt class=literal>Class</tt> class' <tt class=literal>forName() </tt>
method. However, in such a situation, a <tt class=literal>ClassLoader</tt>
object is implicitly used. See the description of
<tt class=literal>Class.forName()</tt> for more information.

<p class=para>

Java identifies a class by a combination of its fully
qualified name and the class loader that was used to load the
class. If you write a subclass of <tt class=literal>ClassLoader</tt>,
it should not attempt to directly load local classes. Instead,
it should call <tt class=literal>findSystemClass()</tt>. A local class
that is loaded directly by a <tt class=literal>ClassLoader</tt> is 
considered to be a different class than the same class loaded by
<tt class=literal>findSystemClass()</tt>. This can lead to having two
copies of the same class loaded, which can cause a number 
of inconsistencies. For example, the class' <tt class=literal>equals()</tt> 
method may decide that the same object is not equal to itself.

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.37">Class Summary</A></h2>

<div class=screen>
<p>
<pre>
public abstract class java.lang.ClassLoader extends java.lang.Object {
    // Constructors
    protected ClassLoader();
    // Class Methods
    public static final URL 
           getSystemResource(String name);                  // New in 1.1
    public static final InputStream 
           getSystemResourceAsStream(String name);          // New in 1.1
    // Public Instance Methods
    public URL getResource(String name);                    // New in 1.1
    public InputStream getResourceAsStream(String name);    // New in 1.1
    public Class loadClass(String name);                    // New in 1.1
    
    // Protected Instance Methods
    protected final Class defineClass(byte data[], 
              int offset, int length);               // Deprecated in 1.1
    protected final Class defineClass(String name, 
              byte[] data, int offset, int length);         // New in 1.1
    protected final Class findLoadedClass(String name);     // New in 1.1
    protected final Class findSystemClass(String name);
    protected abstract Class loadClass(String name, boolean resolve);
    protected final void resolveClass(Class c);
    protected final void setSigners(Class cl, 
              Object[] signers);                            // New in 1.1
}
</PRE>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.38">Constructors</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.123">ClassLoader</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.127"><tt class=literal>protected ClassLoader()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If there is a <tt class=literal>SecurityManager</tt>
object installed and its <tt class=literal>checkCreateClassLoader()</tt>
method throws a <tt class=literal>SecurityException</tt> when called
by this constructor.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Initializes a <tt class=literal>ClassLoader</tt> object. Because
<tt class=literal>ClassLoader</tt> is an <tt class=literal>abstract</tt> class,
only subclasses of the class can access this constructor.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.39">Class Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.124">getSystemResource</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.128"><tt class=literal>public static final URL getSystemResource(String name)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>name</tt><br>
<dd>

<p class=para>
A system resource name.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A <tt class=literal>URL</tt> object that is connected to the specified
system resource or <tt class=literal>null</tt> if the resource cannot be found.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method finds a system resource with the given name and returns a
<tt class=literal>URL</tt> object that is connected to the resource.
The resource name can be any system resource.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.125">getSystemResourceAsStream</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.129"><tt class=literal>public static final InputStream getSystemResourceAsStream(String name)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>name</tt><br>
<dd>

<p class=para>
A system resource name.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
An <tt class=literal>InputStream</tt> object that is connected to the specified
system resource or <tt class=literal>null</tt> if the resource cannot be found.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method finds a system resource with the given name and returns an
<tt class=literal>InputStream</tt> object that is connected to the resource.
The resource name can be any system resource.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.40">Public Instance Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.126">getResource</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.130"><tt class=literal>public URL getResource(String name)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>name</tt><br>
<dd>

<p class=para>
A resource name.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A <tt class=literal>URL</tt> object that is connected to the specified
resource or <tt class=literal>null</tt> if the resource cannot be found.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method finds a resource with the given name and returns a
<tt class=literal>URL</tt> object that is connected to the resource.

<p class=para>
A resource is a file that contains data (e.g., sound, images, text) 
and it can be part of a package. The name of a resource is
a sequence of identifiers separated by "<tt class=literal>/</tt>". For example, a
resource might have the name <i class=emphasis>help/american/logon.html</I> .
System resources are found on the host machine using the
conventions of the host implementation.  For example, 
the "<tt class=literal>/</tt>" in the resource name may be treated as a 
path separator, with the entire resource name treated as a relative path 
to be found under a directory in <tt class=literal>CLASSPATH</tt>.

<p class=para>
The implementation of <tt class=literal>getResource()</tt> in 
<tt class=literal>ClassLoader</tt> simply returns <tt class=literal>null</tt>.
A subclass can override this method to provide more useful
functionality.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.127">getResourceAsStream</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.131"><tt class=literal>public InputStream getResourceAsStream(String name)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>name</tt><br>
<dd>

<p class=para>
A resource name.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
An <tt class=literal>InputStream</tt> object that is connected to the specified
resource or <tt class=literal>null</tt> if the resource cannot be found.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method finds a resource with the given name and returns an
<tt class=literal>InputStream</tt> object that is connected to the resource.

<p class=para>
A resource is a file that contains data (e.g., sound, images, text) 
and it can be part of a package. The name of a resource is
a sequence of identifiers separated by `<tt class=literal>/</tt>'. For example, a
resource might have the name <i class=emphasis>help/american/logon.html</I>.
System resources are found on the host machine using the
conventions of the host implementation.  For example, 
the `<tt class=literal>/</tt>' in the resource name may be treated as a 
path separator, with the entire resource name treated as a relative path 
to be found under a directory in <tt class=literal>CLASSPATH</tt>.

<p class=para>
The implementation of <tt class=literal>getResourceAsStream()</tt> in 
<tt class=literal>ClassLoader</tt> simply returns <tt class=literal>null</tt>.
A subclass can override this method to provide more useful
functionality.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.128">loadClass</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.132">public Class loadClass(String name) throws ClassNotFoundException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>name</tt><br>
<dd>

<p class=para>
The name of the class to be returned. The class
name should be qualified by its package name. The lack of an explicit
package name specifies that the class is part of the default package.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>Class</tt> object for the specified class.

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ClassNotFoundException</tt><br>
<dd>

<p class=para>
If it cannot find a definition for the named class.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method loads the named class by calling 
<tt class=literal>loadClass(name,</tt> <tt class=literal>true)</tt>.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.41">Protected Instance Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.129">defineClass</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.133"><div class=screen> <p> <pre> protected final Class defineClass(byte data[], int offset, int length) </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
Deprecated as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>data</tt><br>
<dd>

<p class=para>
An array that contains the byte codes that define
a class.

<p>
<dt class=varlistentry><tt class=literal>offset</tt><br>
<dd>

<p class=para>
The offset in the array of byte codes.

<p>
<dt class=varlistentry><tt class=literal>length</tt><br>
<dd>

<p class=para>
The number of byte codes in the array.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The newly created <tt class=literal>Class</tt> object.

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ClassFormatError</tt><br>
<dd>

<p class=para>
If the <tt class=literal>data</tt> array does not constitute
a valid class definition.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method creates a <tt class=literal>Class</tt> object from the byte codes that
define the class. Before the class can be used, it must be resolved.
The method is intended to be called from an implementation
of the <tt class=literal>loadClass()</tt> method.  

<p class=para>
Note that this method is deprecated as of Java 1.1.  You should use
the version of <tt class=literal>defineClass()</tt> that takes a 
<tt class=literal>name</tt> parameter and is therefore more secure.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.134"><div class=screen> <p> <pre> protected final Class defineClass(String name, byte data[], int offset, int length) </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>name</tt><br>
<dd>

<p class=para>
The expected name of the class to be defined or <tt class=literal>null</tt> if
it is not known.  The class name
should be qualified by its package name.  The lack of an explicit package
name specifies that the class is part of the default package.

<p>
<dt class=varlistentry><tt class=literal>data</tt><br>
<dd>

<p class=para>
An array that contains the byte codes that define
a class.

<p>
<dt class=varlistentry><tt class=literal>offset</tt><br>
<dd>

<p class=para>
The offset in the array of byte codes.

<p>
<dt class=varlistentry><tt class=literal>length</tt><br>
<dd>

<p class=para>
The number of byte codes in the array.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The newly created <tt class=literal>Class</tt> object.

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ClassFormatError</tt><br>
<dd>

<p class=para>
If the <tt class=literal>data</tt> array does not constitute
a valid class definition.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method creates a <tt class=literal>Class</tt> object from the byte codes that
define the class. Before the class can be used, it must be resolved.
The method is intended to be called from an implementation
of the <tt class=literal>loadClass()</tt> method.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.130">findLoadedClass</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.135"><div class=screen> <p> <pre> protected final Class findLoadedClass(String name) </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>name</tt><br>
<dd>

<p class=para>
The name of the class to be returned. The class
name should be qualified by its package name. The lack of an explicit
package name specifies that the class is part of the default package.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>Class</tt> object for the specified loaded class or
<tt class=literal>null</tt> if the class cannot be found.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method finds the specified class that has already been loaded.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.131">findSystemClass</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.136"><div class=screen> <p> <pre> protected final Class findSystemClass(String name) throws ClassNotFoundException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>name</tt><br>
<dd>

<p class=para>
The name of the class to be returned. The class
name should be qualified by its package name. The lack of an explicit
package name specifies that the class is part of the default package.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>Class</tt> object for the specified system
class.

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ClassNotFoundException</tt><br>
<dd>

<p class=para>
If the default class-loading mechanism cannot find
a definition for the class.

<p>
<dt class=varlistentry><tt class=literal>NoClassDefFoundError</tt><br>
<dd>

<p class=para>
If the
default class-loading mechanism cannot find the class.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method finds and loads a system class if it has not already
been loaded. A <i class=emphasis>system class</I>
is a class that is loaded by the default
class-loading mechanism from the local filesystem. An implementation
of the <tt class=literal>loadClass()</tt> method typically calls this
method to attempt to load a class from the locations specified by
the <tt class=literal>CLASSPATH</tt> environment variable.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.132">loadClass</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.137"><div class=screen> <p> <pre> protected abstract Class loadClass(String name, boolean resolve) throws ClassNotFoundException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>name</tt><br>
<dd>

<p class=para>
The name of the class to be returned. The class
name should be qualified by its package name. The lack of an explicit
package name specifies that the class is part of the default package.

<p>
<dt class=varlistentry><tt class=literal>resolve</tt><br>
<dd>

<p class=para>
Specifies whether or not the class should be resolved
by calling the <tt class=literal>resolveClass()</tt> method.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>Class</tt> object for the specified class.

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ClassNotFoundException</tt><br>
<dd>

<p class=para>
If it cannot find a definition for the named class.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
An implementation of this <tt class=literal>abstract</tt> method
loads the named class and returns its <tt class=literal>Class</tt> object.
It is permitted and encouraged for an implementation to cache the
classes it loads, rather than load one each time the method is called.
An implementation of this method should do at least the following:

<p>
<ol class=orderedlist>
<li class=listitem>Load the byte codes that comprise
the class definition into a <tt class=literal>byte[]</tt>.

<p>
<li class=listitem>Call the <tt class=literal>defineClass()</tt> method
to create a <tt class=literal>Class</tt> object to represent the class
definition.

<p>
<li class=listitem>If the <tt class=literal>resolve</tt> parameter is <tt class=literal>true</tt>,
call the <tt class=literal>resolveClass()</tt> method to resolve the
class.

<p>
</OL>
<p class=para>
If an implementation of this method caches the classes that
it loads, it is recommended that it use an instance of the <tt class=literal>java.util.Hashtable</tt>
to implement the cache.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.133">resolveClass</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.138"><tt class=literal>protected final void resolveClass(Class c)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>c</tt><br>
<dd>

<p class=para>
The <tt class=literal>Class</tt> object for the class to be resolved.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method resolves the given <tt class=literal>Class</tt> object.
Resolving a class means ensuring
that all of the other classes that the <tt class=literal>Class</tt>
object references are loaded. In
addition, all of the classes that they reference must be loaded,
and so on, until all of the needed classes have been loaded.

<p class=para>
The <tt class=literal>resolveClass()</tt> method should be called
by an implementation of the <tt class=literal>loadClass()</tt> method
when the value of the <tt class=literal>loadClass()</tt> method's
<tt class=literal>resolve</tt> parameter is <tt class=literal>true</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.134">setSigners</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.139"><div class=screen> <p> <pre> protected final void setSigners(Class cl, Object[] signers) </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>cl</tt><br>
<dd>

<p class=para>
The <tt class=literal>Class</tt> object for the class to be signed.

<p>
<dt class=varlistentry><tt class=literal>signers</tt><br>
<dd>

<p class=para>
An array of <tt class=literal>Object</tt>s that represents the signers
of this class.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method specifies the objects that represent the digital
signatures for this class.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.42">Inherited Methods</A></h2>

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<th align="left">

<p class=para>
Method</TH>
<th align="left">

<p class=para>
Inherited From</TH>
<th align="left">

<p class=para>
Method</TH>
<th align="left">

<p class=para>
Inherited From</TH>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>clone()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>equals(Object)</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>finalize()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>getClass()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>hashCode()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>notify()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>notifyAll()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>toString()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>wait()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>wait(long)</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>wait(long, int)</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
</TR>
</TABLE>
<p>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.43">See Also</A></h2>

<p class=para>
<a href="ch10_04.htm">Class</A>;
<a href="ch09_04.htm">Errors</A>;
<a href="ch09_04.htm">Exceptions</A>;
<a href="ch10_14.htm">Object</A>;
<a href="ch10_18.htm">SecurityManager</A>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch10_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Class</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Cloneable</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
