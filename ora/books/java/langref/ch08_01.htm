<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 8] Threads</TITLE>
<meta name="author" content="Mark Grand">
<meta name="date" content="Thu Jul 31 13:16:36 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="java">
<meta name="title" content="Java Language Reference">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Language Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch08_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="JLR2-CH-8">8. Threads</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
Using Thread Objects<br>
<a href="ch08_02.htm">Synchronizing Multiple Threads</A><br>

<p>
</DIV>

<p class=para>
Threads provide a way for a Java program to do multiple tasks
concurrently. A thread is essentially a flow of control in a program
and is similar to the more familiar concept of a process. An operating
system that can run more than one program at the same time uses
processes to keep track of the various programs that it is
running. However, processes generally do not share any state, while
multiple threads within the same application share much of the same
state. In particular, all of the threads in an application run in the
same address space, sharing all resources except the stack. In
concrete terms, this means that threads share field variables, but not
local variables.<a name="CH08.THREAD"></A>

<p class=para>
When multiple processes share a single processor, there are
times when the operating system must stop the processor from running
one process and start it running another process. The operating
system must execute a sequence of events called a <i class=emphasis>context
switch</I> to transfer control from one process to another.
When a context switch occurs, the operating system has to save a
lot of information for the process that is being paused and load
the comparable information for the process being resumed. A context
switch between two processes can require the execution of thousands
of machine instructions. The Java virtual machine is responsible
for handling context switches between threads in a Java program.
Because threads share much of the same state, a context switch between
two threads typically requires the execution of less than 100
machine instructions.

<p class=para>
There are a number of situations where it makes sense to
use threads in a Java program. Some programs must be able to engage
in multiple activities and still be able to respond to additional
input from the user. For example, a web browser should be able to
respond to user input while fetching an image or playing a sound.
Because threads can be suspended and resumed, they can make it easier
to control multiple activities, even if the activities do not need
to be concurrent. If a program models real world objects that display
independent, autonomous behavior, it makes sense to use a separate
thread for each object. Threads can also implement asynchronous
methods, so that a calling method does not have to wait for the
method it calls to complete before continuing with its own activity.

<p class=para>
Java applets make considerable use of threads. For example,
an animation is generally implemented with a separate thread. If
an applet has to download extensive information, such as an image or
a sound, to initialize itself, the initialization can take a long
time. This initialization can be done in a separate thread to prevent
the initialization from interfering with the display of the applet.
If an applet needs to process messages from the network, that work generally
is done in a separate thread so that the applet can continue
painting itself on the screen and responding to mouse and keyboard
events. In addition, if each message is processed separately,
the applet uses a separate thread for each message.

<p class=para>
For all of the reasons there are to use threads, there are
also some compelling reasons not to use them. If a program uses
inherently sequential logic, where one operation starts another
operation and then must wait for the other operation to complete
before continuing, one thread can implement the entire
sequence. Using multiple threads in such a case results in a more
complex program with no accompanying benefits. There is considerable
overhead in creating and starting a thread, so if an operation involves
only a few primitive statements, it is faster to handle it with
a single thread. This can even be true when the operation is conceptually
asynchronous. When multiple threads share objects, the objects must
use synchronization mechanisms to coordinate thread access and maintain
consistent state. Synchronization mechanisms add complexity to a
program, can be difficult to tune for optimal performance, and can
be a source of bugs.

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JLR2-CH-8-SECT-1">8.1 Using Thread Objects</A></h2>

<p class=para>
The <tt class=literal>Thread</tt>
class in the <tt class=literal>java.lang</tt> package creates
and controls threads in Java programs. The execution of Java code
is always under the control of a <tt class=literal>Thread</tt> object.
The <tt class=literal>Thread</tt> class provides a <tt class=literal>static</tt>
method called <tt class=literal>currentThread()</tt> that provides a reference
to the <tt class=literal>Thread</tt> object that controls the current
thread of execution.

<p class=para>
<b>References</b>
<a href="ch10_23.htm">Thread</A>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-8-SECT-1.1">Associating a Method with a Thread</A></h3>

<p class=para>
<a name="CH08.METH1"></A>The first thing you need to do to make a <tt class=literal>Thread</tt> object
useful is to associate it with a method you want it to run.
Java provides two ways of associating a method with a
<tt class=literal>Thread</tt>:

<p>
<ul class=itemizedlist>
<li class=listitem>Declare a subclass of <tt class=literal>Thread</tt> that defines
a <tt class=literal>run()</tt> method.

<p>
<li class=listitem>Pass a reference to an object that implements the <tt class=literal>Runnable</tt>
interface to a <tt class=literal>Thread</tt> constructor.

<p>
</UL>
<p class=para>
For example, if you need to load the contents of a URL as part of an
applet's initialization, but the applet can provide other functionality
before the content is loaded, you might want to load the content in a
separate thread. Here is a class that does just that:

<div class=screen>
<p>
<pre>
import java.net.URL;
class UrlData extends Thread   {
    private Object data;
    private URL url
    public UrlData(String urlName) throws MalformedURLException {
        url = new URL(urlName);
        start();
    }
    public void run(){
        try {
            data = url.getContent();
        } catch (java.io.IOException  e) {
        }
    }
    public Object getUrlData(){
        return data;
    }
}
</PRE>
</DIV>

<p class=para>
The <tt class=literal>UrlData</tt> class is declared as a subclass
of <tt class=literal>Thread</tt> so that it can get the contents of
the URL in a separate thread. The constructor creates a
<tt class=literal>java.net.URL</tt> object to fetch the
contents of the URL, and then calls
the <tt class=literal>start()</tt> method to start the thread. Once
the thread is started, the constructor returns; it does not wait
for the contents of the URL to be fetched. The <tt class=literal>run()</tt>
method is executed after the thread is started; it does the real
work of fetching the data. The <tt class=literal>getUrlData()</tt> method
is an access method that returns the value of the <tt class=literal>data</tt>
variable. The value of this variable is <tt class=literal>null</tt>
until the contents of the URL have been fetched, at which
time it contains a reference to the actual data.

<p class=para>
Subclassing the <tt class=literal>Thread</tt>
class is convenient when the method you want to run in a separate
thread does not need to belong to a particular class. Sometimes,
however, you need the method to be part of a particular class that
is a subclass of a class other than <tt class=literal>Thread</tt>. Say,
for example, you want a graphical object that is displayed
in a window to alternate its background color between red and blue
once a second. The object that implements this behavior needs to
be a subclass of the <tt class=literal>java.awt.Canvas</tt> class. However,
at the same time, you need a separate thread to alternate the color of
the object once a second.

<p class=para>
In this situation, you want to tell a <tt class=literal>Thread</tt>
object to run code in another object that is not a subclass of the
<tt class=literal>Thread</tt> class.
You can accomplish this by passing a reference to an object that implements
the <tt class=literal>Runnable</tt> interface to the constructor of
the <tt class=literal>Thread</tt> class. The <tt class=literal>Runnable</tt>
interface requires that an object has a <tt class=literal>public</tt> method
called <tt class=literal>run()</tt> that takes no arguments. When a
<tt class=literal>Runnable</tt> object is passed to the constructor
of the <tt class=literal>Thread</tt> class, it creates a <tt class=literal>Thread</tt>
object that calls the <tt class=literal>Runnable</tt> object's
<tt class=literal>run()</tt> method when the thread is started.
The following example
shows part of the code that implements an object that alternates
its background color between red and blue once a second:

<div class=screen>
<p>
<pre>
class AutoColorChange extends java.awt.Canvas implements Runnable {
    private Thread myThread;
    AutoColorChange () {
        myThread = new Thread(this);
        myThread.start();
        ...
    }
    public void run() {
        while (true) {
            setBackground(java.awt.Color.red);
            repaint();
            try {
                myThread.sleep(1000);
            } catch (InterruptedException e) {}
            setBackground(java.awt.Color.blue);
            repaint();
            try {
                myThread.sleep(1000);
            } catch (InterruptedException e) {}
        }
    }
}
</PRE>
</DIV>

<p class=para>
The <tt class=literal>AutoChangeColor</tt> class extends
<tt class=literal>java.awt.Canvas</tt>,
alternating the background color between red and blue once a second.
The constructor creates a new <tt class=literal>Thread</tt> by passing
the current object to the <tt class=literal>Thread</tt> constructor,
which tells the <tt class=literal>Thread</tt> to call the <tt class=literal>run()</tt>
method in the <tt class=literal>AutoChangeColor</tt> class. The constructor
then starts the new thread by calling its <tt class=literal>start()</tt>
method, so that the color change happens asynchronously of whatever
else is going on. The class has an instance variable called
<tt class=literal>myThread</tt>
that contains a reference to the <tt class=literal>Thread</tt> object,
so that can control the thread. The <tt class=literal>run()</tt> method
takes care of changing the background color, using the
<tt class=literal>sleep()</tt>
method of the <tt class=literal>Thread</tt> class to temporarily suspend
the thread and calling <tt class=literal>repaint()</tt> to redisplay
the object after each color change.

<p class=para>
<b>References</b>
<a href="ch10_16.htm">Runnable</A>;
<a href="ch10_23.htm">Thread</A>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JLR2-CH-8-SECT-1.2">Controlling a Thread</A></h3>

<p class=para>
As shown in the previous section, you start a <tt class=literal>Thread</tt>
by calling its <tt class=literal>start()</tt>
method. Before the <tt class=literal>start()</tt> method is called,
the <tt class=literal>isAlive()</tt> method of the <tt class=literal>Thread</tt>
object always returns <tt class=literal>false</tt>.
When the <tt class=literal>start()</tt>
method is called, the <tt class=literal>Thread</tt> object becomes associated
with a scheduled thread in the underlying environment. After the
<tt class=literal>start()</tt> method has returned,
the <tt class=literal>isAlive()</tt>
method always returns <tt class=literal>true</tt>. The <tt class=literal>Thread</tt> is now scheduled to run until it dies, unless it is suspended
or in another unrunnable state.

<p class=para>
It is actually possible for <tt class=literal>isAlive()</tt> to
return <tt class=literal>true</tt> before <tt class=literal>start()</tt>
returns, but not before <tt class=literal>start()</tt> is called. This
can happen because the <tt class=literal>start()</tt> method can return
either before the started <tt class=literal>Thread</tt> begins to run
or after it begins to run. In other words, the method that called
<tt class=literal>start()</tt> and the new thread are now running concurrently.
On a multiprocessor system, the <tt class=literal>start()</tt> method
can even return at the same time the started <tt class=literal>Thread</tt>
begins to run.

<p class=para>
<tt class=literal>Thread</tt> objects have a parent-child relationship.
The first thread created in a Java environment does not have
a parent <tt class=literal>Thread</tt>. However, after the first
<tt class=literal>Thread</tt>
object is created, the <tt class=literal>Thread</tt> object that controls
the thread used to create another <tt class=literal>Thread</tt> object
is considered to be the parent of the newly created <tt class=literal>Thread</tt>.
This parent-child relationship is used to supply some default values
when a <tt class=literal>Thread</tt> object is created, but it has no
further significance after a <tt class=literal>Thread</tt> has been created.

<p class=para>
<b>References</b>
<a href="ch10_23.htm">Thread</A>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-8-SECT-1.2.1">Stopping a thread</A></h4>

<p class=para>
A thread dies when one of the following things happens:

<p>
<ul class=itemizedlist>
<li class=listitem>The <tt class=literal>run()</tt> method
called by the <tt class=literal>Thread</tt> returns.

<p>
<li class=listitem>An exception is thrown that causes the <tt class=literal>run()</tt>
method to be exited.

<p>
<li class=listitem>The <tt class=literal>stop()</tt> method of the <tt class=literal>Thread</tt> is called.

<p>
</UL>
<p class=para>
The <tt class=literal>stop()</tt> method of the <tt class=literal>Thread</tt> class works by throwing a <tt class=literal>ThreadDeath</tt>
object in the <tt class=literal>run()</tt> method of the thread. Normally,
you should not catch <tt class=literal>ThreadDeath</tt> objects in a
<tt class=literal>try</tt> statement. If you need to catch
<tt class=literal>ThreadDeath</tt> objects to detect that a
<tt class=literal>Thread</tt> is about to die, the <tt class=literal>try</tt>
statement that catches <tt class=literal>ThreadDeath</tt>
objects should rethrow them.

<p class=para>

When an object (<tt class=literal>ThreadDeath</tt> or otherwise) is thrown
out of the <tt class=literal>run()</tt> method for the
<tt class=literal>Thread</tt>, the <tt class=literal>uncaughtException()</tt>
method of the <tt class=literal>ThreadGroup</tt> for that
<tt class=literal>Thread</tt> is called. If the thrown object is an
instance of the <tt class=literal>ThreadDeath</tt> class, the thread dies,
and the thrown object is ignored. Otherwise, if the thrown object is
of any other class, <tt class=literal>uncaughtException()</tt> calls the
thrown object's <tt class=literal>printStackTrace()</tt> method, the
thread dies, and the thrown object is ignored. In either case, if there
are other nondaemon threads running in the system, the current program
continues to run.

<p class=para>
<b>References</b>
<a href="ch09_04.htm">Errors</A>;
<a href="ch06_12.htm">The try Statement</A>;
<a href="ch10_23.htm">Thread</A>;
<a href="ch10_24.htm">ThreadGroup</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-8-SECT-1.2.2">Interrupting a thread</A></h4>

<p class=para>

In some situations, you need to kill a thread in a way that
allows it to complete what it is currently doing before dying. For
example, if a thread is in the middle of processing a transaction,
you might want the transaction to complete before the thread dies.
The <tt class=literal>Thread</tt> class provides support for this in
the form of the <tt class=literal>interrupt()</tt> method.

<p class=para>
There are a number of methods
in the Java API, such as <tt class=literal>wait()</tt> and
<tt class=literal>join()</tt>, that are declared as throwing an
<tt class=literal>InterruptedException</tt>.
 
Both of these methods temporarily suspend the execution of a thread. In Java
1.1, if a thread is waiting for one of these methods to return
and another thread calls <tt class=literal>interrupt()</tt> on the
waiting thread, the method that is waiting throws 
an <tt class=literal>InterruptedException</tt>. 

<p class=para>
The <tt class=literal>interrupt()</tt> method sets an internal flag in a
<tt class=literal>Thread</tt> object. Before the
<tt class=literal>interrupt()</tt> method is called, the
<tt class=literal>isInterrupted()</tt> method of the
<tt class=literal>Thread</tt> object always returns
<tt class=literal>false</tt>.  After the <tt class=literal>interrupt()</tt>
method is called, <tt class=literal>isInterrupted()</tt> returns
<tt class=literal>true</tt>.  

<p class=para>
Prior to version 1.1, the methods in the Java API that are declared
as throwing an <tt class=literal>InterruptedException</tt> do not actually
do so. However, the <tt class=literal>isInterrupted()</tt> method
does return <tt class=literal>True</tt> if the thread has been interrupted.
Thus, if the code in the
<tt class=literal>run()</tt> method for a thread periodically calls
<tt class=literal>isInterrupted()</tt>, the thread can respond to a call to
<tt class=literal>interrupt()</tt> by shutting down in an orderly fashion.

<p class=para>
<b>References</b>
<a href="ch09_04.htm">Other exceptions</A>;
<a href="ch10_23.htm">Thread</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-8-SECT-1.2.3">Thread priority</A></h4>

<p class=para>
One of the attributes that controls the behavior of a thread
is its priority. Although Java does not guarantee much about how
threads are scheduled, it does guarantee that a thread with a priority
that is higher than that of another thread will be scheduled to
run at least as often, and possibly more often, than the thread
with the lower priority. The priority of a thread is set when
the <tt class=literal>Thread</tt> object
is created, by passing an argument to the constructor that creates
the <tt class=literal>Thread</tt> object. If an explicit priority is
not specified, the <tt class=literal>Thread</tt> inherits the priority
of its parent <tt class=literal>Thread</tt> object.

<p class=para>
You can query the priority of a <tt class=literal>Thread</tt>
object by calling its <tt class=literal>getPriority()</tt>
method. Similarly, you can set the priority of a <tt class=literal>Thread</tt>
using its <tt class=literal>setPriority()</tt>
method. The priority you specify must be greater than or equal to
<tt class=literal>Thread.MIN_PRIORITY</tt> and less than or equal to
<tt class=literal>Thread.MAX_PRIORITY</tt>.

<p class=para>
Before actually setting the priority of a <tt class=literal>Thread</tt>
object, the <tt class=literal>setPriority()</tt>
method checks the maximum allowable priority
for the <tt class=literal>ThreadGroup</tt>
that contains the <tt class=literal>Thread</tt> by calling
<tt class=literal>getMaxPriority()</tt>
on the <tt class=literal>ThreadGroup</tt>. If the call to
<tt class=literal>setPriority()</tt>
tries to set the priority to a value that is higher than the maximum
allowable priority for the <tt class=literal>ThreadGroup</tt>, the priority
is instead set to the maximum priority. It is possible for the current
priority of a <tt class=literal>Thread</tt> to be greater than the maximum
allowable priority for the <tt class=literal>ThreadGroup</tt>. In this
case, an attempt to raise the priority of the <tt class=literal>Thread</tt>
results in its priority being lowered to the maximum priority.

<p class=para>
<b>References</b>
<a href="ch10_23.htm">Thread</A>;
<a href="ch10_24.htm">ThreadGroup</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-8-SECT-1.2.4">Daemon threads</A></h4>

<p class=para>
A daemon thread is a thread that runs continuously to perform
a service, without having any connection with the overall state
of the program. For example, the thread that runs the garbage collector
in Java is a daemon thread. The thread that processes mouse events
for a Java program is also a daemon thread. In general, threads
that run application code are not daemon threads, and threads that
run system code are daemon threads. If a thread dies and there are
no other threads except daemon threads alive, the Java virtual machine
stops.

<p class=para>
A <tt class=literal>Thread</tt>
object has a <tt class=literal>boolean</tt> attribute that specifies whether or not a thread is a daemon thread. The daemon attribute
of a thread is set when the <tt class=literal>Thread</tt> object
is created, by passing an argument to the constructor that creates
the <tt class=literal>Thread</tt> object. If the daemon attribute is
not explicitly specified, the <tt class=literal>Thread</tt> inherits
the daemon attribute of its parent <tt class=literal>Thread</tt> object.

<p class=para>
The daemon attribute is queried using the <tt class=literal>isDaemon()</tt>
method; it is set using the <tt class=literal>setDaemon()</tt> method.

<p class=para>
<b>References</b>
<a href="ch10_23.htm">Thread</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-8-SECT-1.2.5">Yielding</A></h4>

<p class=para>

When a thread has nothing to do, it can call the
<tt class=literal>yield()</tt> method of its <tt class=literal>Thread</tt>
object. This method tells the scheduler to run a different thread. The
value of calling <tt class=literal>yield()</tt> depends largely on whether
the scheduling mechanism for the platform on which the program is running is preemptive or nonpreemptive.

<p class=para>

By choosing a maximum length of time a thread can continuously, a
<i class=emphasis>preemptive</I> scheduling mechanism guarantees that
no single thread uses more than its fair share of the processor. If a
thread runs for that amount of time without yielding control to
another thread, the scheduler preempts the thread and causes it to
stop running so that another thread can run.

<p class=para>

A <i class=emphasis>nonpreemptive</I> scheduling
mechanism cannot preempt threads. A nonpreemptive scheduler relies
on the individual threads to yield control of the processor frequently,
so that it can provide reasonable performance. A thread explicitly
yields control by calling the <tt class=literal>Thread</tt> object's
<tt class=literal>yield()</tt> method. More often, however, a thread
implicitly yields control when it is forced to wait for something
to happen elsewhere.

<p class=para>
Calling a <tt class=literal>Thread</tt> object's <tt class=literal>yield()</tt>
method during a lengthy computation can be quite valuable on a platform
that uses a nonpreemptive scheduling
mechanism, as it allows other threads to run. Otherwise, the lengthy
computation can prevent other threads from running. On a platform
that uses a preemptive scheduling
mechanism, calling <tt class=literal>yield()</tt> does not usually make
any noticeable difference in the responsiveness of threads.

<p class=para>
Regardless of the scheduling algorithm that is being used,
you should not make any assumptions about when a thread will be
scheduled to run again after it has called <tt class=literal>yield()</tt>.
If you want to prevent a thread from being scheduled to run until
a specified amount of time has elapsed, you should call
the <tt class=literal>sleep()</tt>
method of the <tt class=literal>Thread</tt> object. The <tt class=literal>sleep()</tt>
method takes an argument that specifies a
minimum number of milliseconds
that must elapse before the thread can be scheduled to run again.

<p class=para>
<b>References</b>
<a href="ch10_23.htm">Thread</A>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JLR2-CH-8-SECT-1.2.6">Controlling groups of threads</A></h4>

<p class=para>

Sometimes it is necessary to control multiple threads at the same
time. Java provides the <tt class=literal>ThreadGroup</tt> class for this
purpose. Every <tt class=literal>Thread</tt> object belongs to a
<tt class=literal>ThreadGroup</tt> object.  By passing an argument to the
constructor that creates the <tt class=literal>Thread</tt> object, the
<tt class=literal>ThreadGroup</tt> of a thread can be set when the
<tt class=literal>Thread</tt> object is created. If an explicit
<tt class=literal>ThreadGroup</tt> is not specified, the
<tt class=literal>Thread</tt> belongs to the same
<tt class=literal>ThreadGroup</tt> as its parent <tt class=literal>Thread</tt>
object.

<p class=para>
<b>References</b>
<a href="ch10_23.htm">Thread</A>;
<a href="ch10_24.htm">ThreadGroup</A>

</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch08_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Applets</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Synchronizing Multiple Threads</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
