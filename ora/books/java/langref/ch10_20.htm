<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 10] String</TITLE>
<meta name="author" content="Mark Grand">
<meta name="date" content="Fri Aug  8 15:27:19 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="java">
<meta name="title" content="Java Language Reference">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Language Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_19.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 10<br>The java.lang Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch10_21.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=refnamediv>
<h1>String</H1>

<h2>Name</H2>

String

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.147">Synopsis</A></h2>

<dl class=variablelist>
<dt class=varlistentry>Class Name:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.String</tt>

<p>
<dt class=varlistentry>Superclass:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.Object</tt>

<p>
<dt class=varlistentry>Immediate Subclasses:<br>
<dd>

<p class=para>
None

<p>
<dt class=varlistentry>Interfaces Implemented:<br>
<dd>

<p class=para>
<tt class=literal>java.io.Serializable</tt>

<p>
<dt class=varlistentry>Availability:<br>
<dd>

<p class=para>
JDK 1.0 or later</DL>
</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.148">Description</A></h2>

<p class=para>
<a name="MAN.STRING.1"></A>The <tt class=literal>String</tt> class represents sequences
of characters. Once a <tt class=literal>String</tt> object is created,
it is immutable. In other words, the sequence of characters that
a <tt class=literal>String</tt> represents cannot be changed after it
is created. The <tt class=literal>StringBuffer</tt> class, on the other
hand, represents a sequence of characters that can be changed. <tt class=literal>StringBuffer</tt>
objects are used to perform computations on <tt class=literal>String</tt> objects.

<p class=para>
The <tt class=literal>String</tt> class includes a number of utility
methods, such as methods for fetching individual characters or ranges
of contiguous characters, for translating characters to upper- or
lowercase, for searching strings, and for parsing numeric values
in strings.

<p class=para>
<tt class=literal>String</tt> literals are compiled into <tt class=literal>String</tt>
objects. Where a <tt class=literal>String</tt> literal appears in an
expression, the compiled code contains a <tt class=literal>String</tt> object.
If <tt class=literal>s</tt> is declared as <tt class=literal>String</tt>,
the following two expressions are identical:

<div class=screen>
<p>
<pre>
s.equals("ABC")
"ABC".equals(s)
</PRE>
</DIV>

<p class=para>
The string concatenation operator implicitly creates
<tt class=literal>String</tt> objects.

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.149">Class Summary</A></h2>

<div class=screen>
<p>
<pre>
public final class java.lang.String extends java.lang.Object {
    // Constructors
    public String();
    public String(byte[] bytes);                          // New in 1.1
    public String(byte[] bytes, String enc);              // New in 1.1
    public String(byte[] bytes, int offset, int length);  // New in 1.1
    public String(byte[] bytes, int offset, 
                  int length, String enc);                // New in 1.1
    public String(byte[] lowbytes, int hibyte);        // Deprecated in 1.1
    public String(byte[] lowbytes, int hibyte, 
                  int offset, int count);              // Deprecated in 1.1
    public String(char[] value);
    public String(char[] value, int offset, int;
    public String(String value);
    public String(StringBuffer buffer);
    // Class Methods
    public static String copyValueOf(char data[]);
    public static String copyValueOf(char data[], int offset, int count);
    public static String valueOf(boolean b);
    public static String valueOf(char c);
    public static String valueOf(char[] data);
    public static String valueOf(char[] data, int offset, int count);
    public static String valueOf(double d);
    public static String valueOf(float f);
    public static String valueOf(int i);
    public static String valueOf(long l);
    public static String valueOf(Object obj);
    // Instance Methods
    public char charAt(int index);
    public int compareTo(String anotherString);
    public String concat(String str);
    public boolean endsWith(String suffix);
    public boolean equals(Object anObject);
    public boolean equalsIgnoreCase(String anotherString);
    public byte[] getBytes();                             // New in 1.1
    public byte[] getBytes(String enc);                   // New in 1.1
    public void getBytes(int srcBegin, int srcEnd, 
                         byte[] dst, int dstBegin);     // Deprecated in 1.1
    public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin);
    public int hashCode();
    public int indexOf(int ch);
    public int indexOf(int ch, int fromIndex);
    public int indexOf(String str);
    public int indexOf(String str, int fromIndex);
    public native String intern();
    public int lastIndexOf(int ch);
    public int lastIndexOf(int ch, int fromIndex);
    public int lastIndexOf(String str);
    public int lastIndexOf(String str, int fromIndex;
    public int length();
    public boolean regionMatches(boolean ignoreCase, int toffset,
                                 String other, int ooffset, int len);
    public boolean regionMatches(int toffset, String other,
                                 int ooffset, int len);
    public String replace(char oldChar, char newChar);
    public boolean startsWith(String prefix);
    public boolean startsWith(String prefix, int toffset);
    public String substring(int beginIndex);
    public String substring(int beginIndex, int endIndex);
    public char[] toCharArray();
    public String toLowerCase();
    public String toLowerCase(Locale locale);             // New in 1.1
    public String toString();
    public String toUpperCase();
    public String toUpperCase(Locale locale);             // New in 1.1
    public String trim();
}
</PRE>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.150">Constructors</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.341">String</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.385"><tt class=literal>public String()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a new <tt class=literal>String</tt> object that represents
the empty string (i.e., a string with zero characters).<a name="STRING.3"></A></DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.386"><tt class=literal>public String(byte[] bytes)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>bytes</tt><br>
<dd>

<p class=para>
An array of <tt class=literal>byte</tt> values.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a new <tt class=literal>String</tt> object that represents
the sequence of characters stored 
in the given <tt class=literal>bytes</tt>
array. The bytes in the array are converted to characters 
using the system's default character encoding scheme.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.387"><tt class=literal>public String(byte[] bytes, String enc)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>bytes</tt><br>
<dd>

<p class=para>
An array of <tt class=literal>byte</tt> values.

<p>
<dt class=varlistentry><tt class=literal>enc</tt><br>
<dd>

<p class=para>
The name of an encoding scheme.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>UnsupportedEncodingException</tt><br>
<dd>

<p class=para>
If <tt class=literal>enc</tt> is not a supported encoding scheme.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a new <tt class=literal>String</tt> object that represents
the sequence of characters stored 
in the given <tt class=literal>bytes</tt>
array. The bytes in the array are converted to characters 
using the specified character encoding scheme.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.388"><tt class=literal>public String(byte[] bytes, int offset, int length)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>bytes</tt><br>
<dd>

<p class=para>
An array of <tt class=literal>byte</tt> values.

<p>
<dt class=varlistentry><tt class=literal>offset</tt><br>
<dd>

<p class=para>
An offset into the array.

<p>
<dt class=varlistentry><tt class=literal>length</tt><br>
<dd>

<p class=para>
The number of bytes to be included.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>StringIndexOutOfBoundsException</tt><br>
<dd>

<p class=para>
If <tt class=literal>offset</tt> or <tt class=literal>length</tt>
indexes an element that is outside the bounds of the <tt class=literal>bytes</tt>
array.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a new <tt class=literal>String</tt> object that represents
the sequence of characters stored in the specified portion
of the given <tt class=literal>bytes</tt>
array. The bytes in the array are converted to characters 
using the system's default character encoding scheme.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.389"><div class=screen> <p> <pre> public String(byte[] bytes, int offset, int length, String enc) </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>bytes</tt><br>
<dd>

<p class=para>
An array of <tt class=literal>byte</tt> values.

<p>
<dt class=varlistentry><tt class=literal>offset</tt><br>
<dd>

<p class=para>
An offset into the array.

<p>
<dt class=varlistentry><tt class=literal>length</tt><br>
<dd>

<p class=para>
The number of bytes to be included.

<p>
<dt class=varlistentry><tt class=literal>enc</tt><br>
<dd>

<p class=para>
The name of an encoding scheme.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>StringIndexOutOfBoundsException</tt><br>
<dd>

<p class=para>
If <tt class=literal>offset</tt> or <tt class=literal>length</tt>
indexes an element that is outside the bounds of the <tt class=literal>bytes</tt>
array.

<p>
<dt class=varlistentry><tt class=literal>UnsupportedEncodingException</tt><br>
<dd>

<p class=para>
If <tt class=literal>enc</tt> is not a supported encoding scheme.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a new <tt class=literal>String</tt> object that represents
the sequence of characters stored in the specified portion
of the given <tt class=literal>bytes</tt>
array. The bytes in the array are converted to characters 
using the specified character encoding scheme.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.390"><tt class=literal>public String(byte[] lowbytes, int hibyte)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
Deprecated as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>lowbytes</tt><br>
<dd>

<p class=para>
An array of <tt class=literal>byte</tt> values.

<p>
<dt class=varlistentry><tt class=literal>hibyte</tt><br>
<dd>

<p class=para>
The value to be put in the high-order byte of each
16-bit character.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a new <tt class=literal>String</tt> object that represents
the sequence of characters stored in the given <tt class=literal>lowbytes</tt>
array. The type of the array elements is <tt class=literal>byte</tt>,
which is an 8-bit data type, so each element must be converted
to a <tt class=literal>char</tt>, which is a 16-bit data type. The value
of the <tt class=literal>hibyte</tt> argument is used to provide the
value of the high-order byte when the <tt class=literal>byte</tt> values
in the array are converted to <tt class=literal>char</tt> values.

<p class=para>
More specifically, for each element <tt class=literal>i</tt> in
the array <tt class=literal>lowbytes</tt>, the character at position <tt class=literal>i</tt>
in the created <tt class=literal>String</tt> object is:

<div class=screen>
<p>
<pre>
((hibyte &amp; 0xff)&lt;&lt;8) | lowbytes[i]
</PRE>
</DIV>

<p class=para>
This method is deprecated as of JDK 1.1 because it does not 
convert bytes into characters properly.  You should instead use 
one of the constructors that takes a specific character encoding
argument or that uses the default encoding.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.391"><div class=screen> <p> <pre> public String(byte[] lowbytes, int hibyte, int offset, int count) </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
Deprecated as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>lowbytes</tt><br>
<dd>

<p class=para>
An array of <tt class=literal>byte</tt> values.

<p>
<dt class=varlistentry><tt class=literal>hibyte</tt><br>
<dd>

<p class=para>
The value to be put in the high-order byte of each
16-bit character.

<p>
<dt class=varlistentry><tt class=literal>offset</tt><br>
<dd>

<p class=para>
An offset into the array.

<p>
<dt class=varlistentry><tt class=literal>count</tt><br>
<dd>

<p class=para>
The number of bytes from the array to be included
in the string.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>StringIndexOutOfBoundsException</tt><br>
<dd>

<p class=para>
If <tt class=literal>offset</tt> or <tt class=literal>count</tt>
indexes an element that is outside the bounds of the <tt class=literal>lowbytes</tt>
array.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a new <tt class=literal>String</tt> object that represents
the sequence of characters stored in the specified portion of the
<tt class=literal>lowbytes</tt> array. That is, the portion of the array
that starts at <tt class=literal>offset</tt> elements from the beginning
of the array and is <tt class=literal>count</tt> elements long.

<p class=para>
The type of the array elements is <tt class=literal>byte</tt>,
which is an 8-bit data type, so each element must be converted
to a <tt class=literal>char</tt>, which is a 16-bit data type. The value
of the <tt class=literal>hibyte</tt> argument is used to provide the
value of the high-order byte when the <tt class=literal>byte</tt> values
in the array are converted to <tt class=literal>char</tt> values.

<p class=para>
More specifically, for each element <tt class=literal>i</tt> in
the array <tt class=literal>lowbytes</tt> that is included in the <tt class=literal>String</tt>
object, the character at position <tt class=literal>i</tt> in the created
<tt class=literal>String</tt> is:

<div class=screen>
<p>
<pre>
 ((hibyte &amp; 0xff)&lt;&lt;8) | lowbytes[I]
</PRE>
</DIV>

<p class=para>
This method is deprecated as of JDK 1.1 because it does not 
convert bytes into characters properly.  You should instead use 
one of the constructors that takes a specific character encoding
argument or that uses the default encoding.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.392"><tt class=literal>public String(char[] value)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>value</tt><br>
<dd>

<p class=para>
An array of <tt class=literal>char</tt> values.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a new <tt class=literal>String</tt> object that represents
the sequence of characters stored in the given array.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.393"><tt class=literal>public String(char[] value, int offset, int count)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>value</tt><br>
<dd>

<p class=para>
An array of <tt class=literal>char</tt> values.

<p>
<dt class=varlistentry><tt class=literal>offset</tt><br>
<dd>

<p class=para>
An offset into the array.

<p>
<dt class=varlistentry><tt class=literal>count</tt><br>
<dd>

<p class=para>
The number of characters from the array to be included
in the string.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>StringIndexOutOfBoundsException</tt><br>
<dd>

<p class=para>
If <tt class=literal>offset</tt> or <tt class=literal>count</tt>
indexes an element that is outside the bounds of the <tt class=literal>value</tt>
array.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a new <tt class=literal>String</tt> object that represents
the sequence of characters stored in the specified portion of the
given array. That is, the portion of the given array that starts
at <tt class=literal>offset</tt> elements from the beginning of the
array and is <tt class=literal>count</tt> elements long.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.394"><tt class=literal>public String(String value)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>value</tt><br>
<dd>

<p class=para>
A <tt class=literal>String</tt> object.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a new <tt class=literal>String</tt> object that represents
the same sequence of characters as the given <tt class=literal>String</tt>
object.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.395"><tt class=literal>public String(StringBuffer value)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>value</tt><br>
<dd>

<p class=para>
A <tt class=literal>StringBuffer</tt> object.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a new <tt class=literal>String</tt> object that represents
the same sequence of characters as the given object.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.151">Class Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.342">copyValueOf</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.396"><tt class=literal>public static String copyValueOf(char data[])</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>data</tt><br>
<dd>

<p class=para>
An array of <tt class=literal>char</tt> values.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that represents the
sequence of characters stored in the given array.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a new <tt class=literal>String</tt> object
that represents the character sequence contained in the given array.
The <tt class=literal>String</tt> object produced by this method is
guaranteed not to refer to the given array, but instead to use a
copy. Because the <tt class=literal>String</tt> object uses a copy of
the array, subsequent changes to the array do not change the contents
of this <tt class=literal>String</tt> object.

<p class=para>
This method is now obsolete. The same result can be obtained
using the <tt class=literal>valueOf()</tt> method that takes an array
of <tt class=literal>char</tt> values.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.397"><div class=screen> <p> <pre> public static String copyValueOf(char data[], int offset, int count) </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>data</tt><br>
<dd>

<p class=para>
An array of <tt class=literal>char</tt> values.

<p>
<dt class=varlistentry><tt class=literal>offset</tt><br>
<dd>

<p class=para>
An offset into the array.

<p>
<dt class=varlistentry><tt class=literal>count</tt><br>
<dd>

<p class=para>
The number of characters from the array to be included
in the string.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that represents the
sequence of characters stored in the specified portion of the given
array.

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>StringIndexOutOfBoundsException</tt><br>
<dd>

<p class=para>
If <tt class=literal>offset</tt> or <tt class=literal>count</tt>
indexes an element that is outside the bounds of the <tt class=literal>data</tt>
array.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a new <tt class=literal>String</tt> object
that represents the character sequence contained in the specified
portion of the given array. That is, the portion of the given array
that starts at <tt class=literal>offset</tt> elements from the beginning
of the array and is <tt class=literal>count</tt> elements long. The
<tt class=literal>String</tt> object produced by this method is guaranteed
not to refer to the given array, but instead to use a copy. Because
the <tt class=literal>String</tt> object uses a copy of the array, subsequent
changes to the array do not change the contents of this <tt class=literal>String</tt>
object.

<p class=para>
This method is obsolete. The same result can be obtained by
using the <tt class=literal>valueOf()</tt> method that takes an array
of <tt class=literal>char</tt> values, an offset, and a count.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.343">valueOf</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.398"><tt class=literal>public static String valueOf(boolean b)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
A <tt class=literal>boolean</tt> value.<a name="STRING.4"></A></DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>

A new <tt class=literal>String</tt> object that contains
<tt class=literal>'true'</tt> if <tt class=literal>b</tt> is
<tt class=literal>true</tt> or <tt class=literal>'false'</tt> if
<tt class=literal>b</tt> is <tt class=literal>false</tt>.
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>

This method returns a string representation of a
<tt class=literal>boolean</tt> value. In other words, it returns
<tt class=literal>'true'</tt> if <tt class=literal>b</tt> is
<tt class=literal>true</tt> or <tt class=literal>'false'</tt> if
<tt class=literal>b</tt> is <tt class=literal>false</tt>.
</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.399"><tt class=literal>public static String valueOf(char c)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>c</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that contains just
the given character.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a string representation of a <tt class=literal>char</tt>
value. In other words, it returns a <tt class=literal>String</tt> object
that contains just the given character.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.400"><tt class=literal>public static String valueOf(char[] data)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>data</tt><br>
<dd>

<p class=para>
An array of <tt class=literal>char</tt> values.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that contains the sequence
of characters stored in the given array.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a string representation of an array of
<tt class=literal>char</tt> values. In other words, it returns a <tt class=literal>String</tt> object that contains the sequence of characters stored
in the given array.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.401"><div class=screen> <p> <pre> public static String valueOf(char[] data, int offset, int count) </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>data</tt><br>
<dd>

<p class=para>
An array of <tt class=literal>char</tt> values.

<p>
<dt class=varlistentry><tt class=literal>offset</tt><br>
<dd>

<p class=para>
An offset into the array.

<p>
<dt class=varlistentry><tt class=literal>count</tt><br>
<dd>

<p class=para>
The number of characters from the array to be included
in the string.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that contains the sequence
of characters stored in the specified portion of the given array.

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>StringIndexOutOfBoundsException</tt><br>
<dd>

<p class=para>
If <tt class=literal>offset</tt> or <tt class=literal>count</tt>
indexes an element that is outside the bounds of the <tt class=literal>data</tt>
array.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a string representation of the specified
portion of an array of char values. In other words, it returns a
<tt class=literal>String</tt> object that contains the sequence of characters
in the given array that starts <tt class=literal>offset</tt> elements
from the beginning of the array and is <tt class=literal>count</tt>
elements long.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.402"><tt class=literal>public static String valueOf(double d)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>d</tt><br>
<dd>

<p class=para>
A <tt class=literal>double</tt> value.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that contains a string
representation of the given <tt class=literal>double</tt> value.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a string representation of a <tt class=literal>double</tt>
value. In other words, it returns the <tt class=literal>String</tt>
object returned by <tt class=literal>Double.toString(d)</tt>.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.403"><tt class=literal>public static String valueOf(float f)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>f</tt><br>
<dd>

<p class=para>
A <tt class=literal>float</tt> value.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that contains a string
representation of the given <tt class=literal>float</tt> value.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a string representation of a <tt class=literal>float</tt>
value. In other words, it returns the <tt class=literal>String</tt>
object returned by <tt class=literal>Float.toString(f)</tt>.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.404"><tt class=literal>public static String valueOf(int i)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>i</tt><br>
<dd>

<p class=para>
An <tt class=literal>int</tt> value.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that contains a string
representation of the given <tt class=literal>int</tt> value.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a string representation of an <tt class=literal>int</tt>
value. In other words, it returns the <tt class=literal>String</tt>
object returned by <tt class=literal>Integer.toString(i)</tt>.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.405"><tt class=literal>public static String valueOf(long l)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>l</tt><br>
<dd>

<p class=para>
A <tt class=literal>long</tt> value.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that contains a string
representation of the given <tt class=literal>long</tt> value.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a string representation of a <tt class=literal>long</tt>
value. In other words, it returns the <tt class=literal>String</tt>
object returned by <tt class=literal>Long.toString(l)</tt>.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.406"><tt class=literal>public static String valueOf (Object obj)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
A reference to an object.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> that contains a string representation
of the given object.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a string representation of the given object.
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>, the method
returns<tt class=literal>'null'</tt>. Otherwise, the method returns the <tt class=literal>String</tt>
object returned by the <tt class=literal>toString()</tt> method
of the object.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.152">Instance Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.344">charAt</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.407"><tt class=literal>public char charAt(int index)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>index</tt><br>
<dd>

<p class=para>
An index into the string.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The character at the specified position in this string.

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>StringIndexOutOfBoundsException</tt><br>
<dd>

<p class=para>
If <tt class=literal>index</tt> is less than zero or
greater than or equal to the length of the string.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the character at the specified position
in the <tt class=literal>String</tt> object; the first character in
the string is at position <tt class=literal>0</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.345">compareTo</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.408"><tt class=literal>public int compareTo(String anotherString)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>anotherString</tt><br>
<dd>

<p class=para>
The <tt class=literal>String</tt> object to be compared.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A positive value if this string is greater than <tt class=literal>anotherString</tt>,
<tt class=literal>0</tt> if the two strings are the same, or a negative
value if this string is less than <tt class=literal>anotherString</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method lexicographically compares this <tt class=literal>String</tt>
object to <tt class=literal>anotherString</tt>.

<p class=para>
Here is how the comparison works: the two <tt class=literal>String</tt>
objects are compared character-by-character, starting at index <tt class=literal>0</tt>
and continuing until a position is found in which the two strings
contain different characters or until all of the characters in the
shorter string have been compared. If the characters at <tt class=literal>k</tt>
are different, the method returns:

<div class=screen>
<p>
<pre>
this.charAt(k)-anotherString.charAt(k)
</PRE>
</DIV>

<p class=para>
Otherwise, the comparison is based on the lengths of the strings
and the method returns:

<div class=screen>
<p>
<pre>
this.length()-anotherString.length()
</PRE>
</DIV>

</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.346">concat</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.409"><tt class=literal>public String concat(String str)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>str</tt><br>
<dd>

<p class=para>
The <tt class=literal>String</tt> object to be concatenated.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that contains the character
sequences of this string and <tt class=literal>str</tt> concatenated
together.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a new <tt class=literal>String</tt> object
that concatenates the characters from the argument string
<tt class=literal>str</tt> onto
the characters from this <tt class=literal>String</tt> object. Although
this is a good way to concatenate two strings, concatenating more
than two strings can be done more efficiently using a <tt class=literal>StringBuffer</tt>
object.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.347">endsWith</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.410"><tt class=literal>public boolean endsWith(String suffix)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>suffix</tt><br>
<dd>

<p class=para>
The <tt class=literal>String</tt> object suffix to be
tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if this string ends with the sequence
of characters specified by <tt class=literal>suffix</tt>; otherwise
<tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not this <tt class=literal>String</tt>
object ends with the specified <tt class=literal>suffix</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.348">equals</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.411"><tt class=literal>public boolean equals(Object anObject)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>anObject</tt><br>
<dd>

<p class=para>
The <tt class=literal>Object</tt> to be compared.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the objects are equal; <tt class=literal>false</tt>
if they are not.

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Object.equals()</tt>

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns <tt class=literal>true</tt> if <tt class=literal>anObject</tt>
is an instance of <tt class=literal>String</tt> and it contains the
same sequence of characters as this <tt class=literal>String</tt> object.

<p class=para>
Note the difference between this method and the <tt class=literal>==</tt>
operator, which only returns <tt class=literal>true</tt> if both of
its arguments are references to the same object.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.349">equalsIgnoreCase</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.412"><tt class=literal>public boolean equalsIgnoreCase(String anotherString)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>anotherString</tt><br>
<dd>

<p class=para>
The <tt class=literal>String</tt> object to be compared.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the strings are equal, ignoring
case; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not this <tt class=literal>String</tt>
object contains the same sequence of characters, ignoring case,
as <tt class=literal>anotherString</tt>. More specifically, corresponding
characters in the two strings are considered equal if any of the
following conditions are true:

<p>
<ul class=itemizedlist>
<li class=listitem>The two characters compare as equal
using the <tt class=literal>==</tt> operator.

<p>
<li class=listitem>The <tt class=literal>Character.toUppercase()</tt> method
returns the same result for both characters.

<p>
<li class=listitem>The <tt class=literal>Character.toLowercase()</tt> method
returns the same result for both characters.

<p>
</UL>
</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.350">getBytes</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.413"><div class=screen> <p> <pre> public byte[] getBytes() </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A <tt class=literal>byte</tt> array that contains the characters of this
<tt class=literal>String</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method converts the characters in this <tt class=literal>String</tt>
object to an array of <tt class=literal>byte</tt> values.  The characters
in the string are converted to bytes using the system's default character
encoding scheme.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.414"><div class=screen> <p> <pre> public byte[] getBytes(String enc) </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>enc</tt><br>
<dd>

<p class=para>
The name of an encoding scheme.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A <tt class=literal>byte</tt> array that contains the characters of this
<tt class=literal>String</tt>.

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>UnsupportedEncodingException</tt><br>
<dd>

<p class=para>
If <tt class=literal>enc</tt> is not a supported encoding scheme.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method converts the characters in this <tt class=literal>String</tt>
object to an array of <tt class=literal>byte</tt> values.  The characters
in the string are converted to bytes using the specified character 
encoding scheme.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.415"><div class=screen> <p> <pre> public void getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin) </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
Deprecated as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>srcBegin</tt><br>
<dd>

<p class=para>
The index of the first character to be copied.

<p>
<dt class=varlistentry><tt class=literal>srcEnd</tt><br>
<dd>

<p class=para>
The index after the last character to be copied.

<p>
<dt class=varlistentry><tt class=literal>dst</tt><br>
<dd>

<p class=para>
The destination <tt class=literal>byte</tt> array.

<p>
<dt class=varlistentry><tt class=literal>dstBegin</tt><br>
<dd>

<p class=para>
An offset into the destination array.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>StringIndexOutOfBoundsException</tt><br>
<dd>

<p class=para>
If <tt class=literal>srcBegin</tt>, <tt class=literal>srcEnd</tt>,
or <tt class=literal>dstBegin</tt> is out of range.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method copies the low-order byte of each character in
the specified range of this <tt class=literal>String</tt> object to
the given array of <tt class=literal>byte</tt> values. More specifically,
the first character to be copied is at index <tt class=literal>srcBegin</tt>;
the last character to be copied is at index <tt class=literal>srcEnd-1</tt>.
The low-order bytes of these characters are copied into <tt class=literal>dst</tt>,
starting at index <tt class=literal>dstBegin</tt> and ending at index:

<div class=screen>
<p>
<pre>
dstBegin + (srcEnd-srcBegin) - 1
</PRE>
</DIV>

<p class=para>
This method is deprecated as of JDK 1.1 because it does not 
convert characters into bytes properly.  You should instead use 
the <tt class=literal>getBytes()</tt> method
that takes a specific character encoding
argument or the one that uses the default encoding.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.351">getChars</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.416"><div class=screen> <p> <pre> public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>srcBegin</tt><br>
<dd>

<p class=para>
The index of the first character to be copied.

<p>
<dt class=varlistentry><tt class=literal>srcEnd</tt><br>
<dd>

<p class=para>
The index after the last character to be copied.

<p>
<dt class=varlistentry><tt class=literal>dst</tt><br>
<dd>

<p class=para>
The destination <tt class=literal>char</tt> array.

<p>
<dt class=varlistentry><tt class=literal>dstBegin</tt><br>
<dd>

<p class=para>
An offset into the destination array.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>StringIndexOutOfBoundsException</tt><br>
<dd>

<p class=para>
If <tt class=literal>srcBegin</tt>, <tt class=literal>srcEnd</tt>,
or <tt class=literal>dstBegin</tt> is out of range.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method copies each character in the specified range of
this <tt class=literal>String</tt> object to the given array of <tt class=literal>char</tt>
values. More specifically, the first character to be copied is at
index <tt class=literal>srcBegin</tt>; the last character to be copied
is at index <tt class=literal>srcEnd-1</tt>. These characters are copied
into <tt class=literal>dst</tt>, starting at index <tt class=literal>dstBegin</tt>
and ending at index:

<div class=screen>
<p>
<pre>
dstBegin + (srcEnd-srcBegin) - 1
</PRE>
</DIV>

</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.352">hashCode</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.417"><tt class=literal>public int hashCode()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A hashcode based on the sequence of characters in this string.

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Object.hashCode()</tt>

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a hashcode based on the sequence of characters
this <tt class=literal>String</tt> object represents.

<p class=para>
More specifically, one of two algorithms is used to compute a hash
code for the string, depending on its length. If
<i class=emphasis>n</I> is the length of the string and
<i class=emphasis>S_i</I> is the character at position
<i class=emphasis>i</I> in the string, then if
<i class=emphasis>n</I> = 15 the method returns:

<p class=blockquote><blockquote><p>
<p class=para>
<img src='figs/eq10_1.gif' border=0>
</BLOCKQUOTE><p>
<p class=para>
If <i class=emphasis>n</I> &gt; 15, the method returns:

<p class=blockquote><blockquote><p>
<p class=para>
<img src='figs/eq10_2.gif' border=0>
</BLOCKQUOTE><p>
</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.353">indexOf</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.418"><tt class=literal>public int indexOf(int ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The index of the first occurrence of the given character in
this string or <tt class=literal>-1</tt> if the character does not
occur.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the index of the first occurrence of the
given character in this <tt class=literal>String</tt> object. If there
is no such occurrence, the method returns the value <tt class=literal>-1</tt>.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.419"><tt class=literal>public int indexOf(int ch, int fromIndex)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value.

<p>
<dt class=varlistentry><tt class=literal>fromIndex</tt><br>
<dd>

<p class=para>
The index where the search is to begin.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The index of the first occurrence of the given character in
this string after <tt class=literal>fromIndex</tt> or <tt class=literal>-1</tt>
if the character does not occur.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the index of the first occurrence of the
given character in this <tt class=literal>String</tt> object after ignoring
the first <tt class=literal>fromIndex</tt> characters. If there is no
such occurrence, the method returns the value <tt class=literal>-1</tt>.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.420"><tt class=literal>public int indexOf(String str)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>str</tt><br>
<dd>

<p class=para>
A <tt class=literal>String</tt> object.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The index of the first occurrence of <tt class=literal>str</tt>
in this string or <tt class=literal>-1</tt> if the substring does not
occur.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the index of the first character of the
first occurrence of the substring <tt class=literal>str</tt> in this
<tt class=literal>String</tt> object. If there is no such occurrence,
the method returns the value <tt class=literal>-1</tt>.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.421"><tt class=literal>public int indexOf(String str, int fromIndex)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>str</tt><br>
<dd>

<p class=para>
A <tt class=literal>String</tt> object.

<p>
<dt class=varlistentry><tt class=literal>fromIndex</tt><br>
<dd>

<p class=para>
The index where the search is to begin.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The index of the first occurrence of <tt class=literal>str</tt>
in this string after <tt class=literal>fromIndex</tt> or <tt class=literal>-1</tt>
if the substring does not occur.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the index of the first character of the
first occurrence of the substring <tt class=literal>str</tt> in this
<tt class=literal>String</tt> object after ignoring the first <tt class=literal>fromIndex</tt>
characters. If there is no such occurrence, the method returns the
value <tt class=literal>-1</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.354">intern</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.422"><tt class=literal>public native String intern()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A <tt class=literal>String</tt> object that is guaranteed to be
the same object for every <tt class=literal>String</tt> that contains
the same character sequence.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a canonical representation for this
<tt class=literal>String</tt>
object. The returned <tt class=literal>String</tt> object is guaranteed
to be the same <tt class=literal>String</tt> object for every
<tt class=literal>String</tt> object that contains the same character
sequence. In other words, if:

<div class=screen>
<p>
<pre>
s1.equals(s2)
</PRE>
</DIV>

<p class=para>
then:

<div class=screen>
<p>
<pre>
s1.intern() == s2.intern()
</PRE>
</DIV>

<p class=para>
The <tt class=literal>intern</tt>() method is used by the Java
environment to ensure that <tt class=literal>String</tt> literals and
constant-value <tt class=literal>String</tt> expressions that contain
the same sequence of characters are all represented by a single
<tt class=literal>String</tt> object.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.355">lastIndexOf</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.423"><tt class=literal>public int lastIndexOf(int ch)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The index of the last occurrence of the given character in
this string or <tt class=literal>-1</tt> if the character does not
occur.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the index of the last occurrence of the
given character in this <tt class=literal>String</tt> object. If there
is no such occurrence, the method returns the value <tt class=literal>-1</tt>.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.424"><tt class=literal>public int lastIndexOf(int ch, int fromIndex)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ch</tt><br>
<dd>

<p class=para>
A <tt class=literal>char</tt> value.

<p>
<dt class=varlistentry><tt class=literal>fromIndex</tt><br>
<dd>

<p class=para>
The index where the search is to begin.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The index of the last occurrence of the given character in
this string after <tt class=literal>fromIndex</tt> or <tt class=literal>-1</tt>
if the character does not occur.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the index of the last occurrence of the
given character in this <tt class=literal>String</tt> object after ignoring
the first <tt class=literal>fromIndex</tt> characters. If there is no
such occurrence, the method returns the value <tt class=literal>-1</tt>.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.425"><tt class=literal>public int lastIndexOf(String str)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>str</tt><br>
<dd>

<p class=para>
A <tt class=literal>String</tt> object.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The index of the last occurrence of <tt class=literal>str</tt>
in this string or <tt class=literal>-1</tt> if the substring does not
occur.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the index of the first character of the
last occurrence of the substring <tt class=literal>str</tt> in this
<tt class=literal>String</tt> object. If there is no such occurrence,
the method returns the value <tt class=literal>-1</tt>.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.426"><tt class=literal>public int lastIndexOf(String str, int fromIndex)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>str</tt><br>
<dd>

<p class=para>
A <tt class=literal>String</tt> object.

<p>
<dt class=varlistentry><tt class=literal>fromIndex</tt><br>
<dd>

<p class=para>
The index where the search is to begin.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The index of the last occurrence of <tt class=literal>str</tt>
in this string after <tt class=literal>fromIndex</tt> or <tt class=literal>-1</tt>
if the substring does not occur.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the index of the first character of the
last occurrence of the substring <tt class=literal>str</tt> in this
<tt class=literal>String</tt> object after ignoring the first <tt class=literal>fromIndex</tt>
characters. If there is no such occurrence, the method returns the
value <tt class=literal>-1</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.356">length</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.427"><tt class=literal>public int length()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The length of the character sequence represented by this string.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the number of characters in the character
sequence represented by this <tt class=literal>String</tt> object.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.357">regionMatches</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.428"><div class=screen> <p> <pre> public boolean regionMatches(int toffset, String other, int ooffset, int len) </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>toffset</tt><br>
<dd>

<p class=para>
The index of the first character in this string.

<p>
<dt class=varlistentry><tt class=literal>other</tt><br>
<dd>

<p class=para>
The <tt class=literal>String</tt> object to be used
in the comparison.

<p>
<dt class=varlistentry><tt class=literal>ooffset</tt><br>
<dd>

<p class=para>
The index of the first character in <tt class=literal>other</tt>.

<p>
<dt class=varlistentry><tt class=literal>len</tt><br>
<dd>

<p class=para>
The length of the sub-sequences to be compared.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the sub-sequences are identical;
otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not the specified sub-sequences
in this <tt class=literal>String</tt> object and <tt class=literal>other</tt> are
identical. The method returns false if <tt class=literal>toffset</tt>
is negative, if <tt class=literal>ooffset</tt> is negative, if <tt class=literal>toffset+len</tt>
is greater than the length of this string, or if <tt class=literal>ooffset+len</tt>
is greater than the length of <tt class=literal>other</tt>.
Otherwise, the method returns
<tt class=literal>true</tt> if for all nonnegative integers <tt class=literal>k</tt>
less than <tt class=literal>len</tt> it is true that:

<div class=screen>
<p>
<pre>
this.charAt(toffset+k) == other.charAt(ooffset+k)
</PRE>
</DIV>

</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.429"><div class=screen> <p> <pre> public boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len) </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ignoreCase</tt><br>
<dd>

<p class=para>
A <tt class=literal>boolean</tt> value that indicates whether case should
be ignored.

<p>
<dt class=varlistentry><tt class=literal>toffset</tt><br>
<dd>

<p class=para>
The index of the first character in this string.

<p>
<dt class=varlistentry><tt class=literal>other</tt><br>
<dd>

<p class=para>
The <tt class=literal>String</tt> object to be used
in the comparison.

<p>
<dt class=varlistentry><tt class=literal>ooffset</tt><br>
<dd>

<p class=para>
The index of the first character in <tt class=literal>other</tt>.

<p>
<dt class=varlistentry><tt class=literal>len</tt><br>
<dd>

<p class=para>
The length of the sub-sequences to be compared.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the sub-sequences are identical;
otherwise <tt class=literal>false</tt>. The <tt class=literal>ignoreCase</tt>
argument controls whether or not case is ignored in the comparison.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not the specified sub-sequences
in this <tt class=literal>String</tt> object and <tt class=literal>other</tt> are
identical. The method returns false if <tt class=literal>toffset</tt>
is negative, if <tt class=literal>ooffset</tt> is negative,
if <tt class=literal>toffset+len</tt>
is greater than the length of this string, or if <tt class=literal>ooffset+len</tt>
is greater than the length of <tt class=literal>other</tt>.
Otherwise, if <tt class=literal>ignoreCase</tt>
is <tt class=literal>false</tt>, the method returns <tt class=literal>true</tt>
if for all nonnegative integers <tt class=literal>k</tt> less than
<tt class=literal>len</tt> it is true that:

<div class=screen>
<p>
<pre>
this.charAt(toffset+k) == other.charAt(ooffset+k)
</PRE>
</DIV>

<p class=para>
If <tt class=literal>ignoreCase</tt> is <tt class=literal>true</tt>,
the method returns <tt class=literal>true</tt> if for all nonnegative
integers <tt class=literal>k</tt> less than <tt class=literal>len</tt> it
is true that:

<div class=screen>
<p>
<pre>
Character.toLowerCase(this.charAt(toffset+k))
== Character.toLowerCase(other.charAt(ooffset+k))
</PRE>
</DIV>

<p class=para>
or:

<div class=screen>
<p>
<pre>
Character.toUpperCase(this.charAt(toffset+k))
== Character.toUpperCase(other.charAt(ooffset+k))
</PRE>
</DIV>

</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.358">replace</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.430"><tt class=literal>public String replace(char oldChar, char newChar)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>oldChar</tt><br>
<dd>

<p class=para>
The character to be replaced.

<p>
<dt class=varlistentry><tt class=literal>newChar</tt><br>
<dd>

<p class=para>
The replacement character.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that results from replacing
every occurrence of <tt class=literal>oldChar</tt> in the string with
<tt class=literal>newChar</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a new <tt class=literal>String</tt> object
that results from replacing every occurrence of <tt class=literal>oldChar</tt>
in this <tt class=literal>String</tt> object with <tt class=literal>newChar</tt>.
If there are no occurrences of <tt class=literal>oldChar</tt>, the method
simply returns this <tt class=literal>String</tt> object.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.359">startsWith</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.431"><tt class=literal>public boolean startsWith(String prefix)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>prefix</tt><br>
<dd>

<p class=para>
The <tt class=literal>String</tt> object prefix to be
tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if this string begins with the sequence
of characters specified by <tt class=literal>prefix</tt>; otherwise
<tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not this <tt class=literal>String</tt>
object begins with the specified <tt class=literal>prefix</tt>.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.432"><tt class=literal>public boolean startsWith(String prefix, int toffset)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>prefix</tt><br>
<dd>

<p class=para>
The <tt class=literal>String</tt> object prefix to be
tested.

<p>
<dt class=varlistentry><tt class=literal>toffset</tt><br>
<dd>

<p class=para>
The index where the search is to begin.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if this string contains the sequence
of characters specified by <tt class=literal>prefix</tt> starting at
the index <tt class=literal>toffset</tt>; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not this <tt class=literal>String</tt>
object contains the specified <tt class=literal>prefix</tt> at the index
specified by <tt class=literal>toffset</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.360">substring</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.433"><tt class=literal>public String substring(int beginIndex)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>beginIndex</tt><br>
<dd>

<p class=para>
The index of the first character in the substring.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that contains the sub-sequence
of this string that starts at <tt class=literal>beginIndex</tt> and
extends to the end of the string.

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>StringIndexOutOfBoundsException</tt><br>
<dd>

<p class=para>
If <tt class=literal>beginIndex</tt> is less than zero
or greater than or equal to the length of the string.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a new <tt class=literal>String</tt> object
that represents a sub-sequence of this <tt class=literal>String</tt>
object. The sub-sequence consists of the characters starting at
<tt class=literal>beginIndex</tt> and extending through the end of this
<tt class=literal>String</tt> object.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.434"><tt class=literal>public String substring(int beginIndex, int endIndex)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>beginIndex</tt><br>
<dd>

<p class=para>
The index of the first character in the substring.

<p>
<dt class=varlistentry><tt class=literal>endIndex</tt><br>
<dd>

<p class=para>
The index after the last character in the substring.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that contains the sub-sequence
of this string that starts at <tt class=literal>beginIndex</tt> and
extends to the character at <tt class=literal>endindex-1</tt>.

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>StringIndexOutOfBoundsException</tt><br>
<dd>

<p class=para>
If <tt class=literal>beginIndex</tt> or <tt class=literal>endIndex</tt>
is less than zero or greater than or equal to the length of the
string.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a new <tt class=literal>String</tt> object
that represents a sub-sequence of this <tt class=literal>String</tt>
object. The sub-sequence consists of the characters starting at
<tt class=literal>beginIndex</tt> and extending through <tt class=literal>endIndex-1</tt>
of this <tt class=literal>String</tt> object.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.361">toCharArray</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.435"><tt class=literal>public char[] toCharArray()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>char</tt> array that contains the same
sequence of characters as this string.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a new <tt class=literal>char</tt> array that
contains the same sequence of characters as this <tt class=literal>String</tt>object. The length of the array is the same as the length
of this <tt class=literal>String</tt> object.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.362">toLowerCase</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.436"><tt class=literal>public String toLowerCase()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that contains the characters
of this string converted to lowercase.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a new <tt class=literal>String</tt> that represents
a character sequence of the same length as this <tt class=literal>String</tt>
object, but with each character replaced by its lowercase equivalent
if it has one. If no character in the string has a lowercase equivalent,
the method returns this <tt class=literal>String</tt> object.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.437"><tt class=literal>public String toLowerCase(Locale locale)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>locale</tt><br>
<dd>

<p class=para>
The <tt class=literal>Locale</tt> to use.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that contains the characters
of this string converted to lowercase using the rules of the
specified locale.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a new <tt class=literal>String</tt> that represents
a character sequence of the same length as this <tt class=literal>String</tt>
object, but with each character replaced by its lowercase equivalent
if it has one according to the rules of the specified locale.
If no character in the string has a lowercase equivalent,
the method returns this <tt class=literal>String</tt> object.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.363">toString</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.438"><tt class=literal>public String toString()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
This <tt class=literal>String</tt> object.

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Object.toString()</tt>

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns this <tt class=literal>String</tt> object.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.364">toUpperCase</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.439"><tt class=literal>public String toUpperCase()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that contains the characters
of this string converted to uppercase.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a new <tt class=literal>String</tt> that represents
a character sequence of the same length as this <tt class=literal>String</tt>
object, but with each character replaced by its uppercase equivalent
if it has one. If no character in the string has an uppercase equivalent,
the method returns this <tt class=literal>String</tt> object.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.440"><tt class=literal>public String toUpperCase(Locale locale)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>locale</tt><br>
<dd>

<p class=para>
The <tt class=literal>Locale</tt> to use.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that contains the characters
of this string converted to uppercase using the rules of the
specified locale.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a new <tt class=literal>String</tt> that represents
a character sequence of the same length as this <tt class=literal>String</tt>
object, but with each character replaced by its uppercase equivalent
if it has one according to the rules of the specified locale. 
If no character in the string has an uppercase equivalent,
the method returns this <tt class=literal>String</tt> object.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.365">trim</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.441"><tt class=literal>public String trim()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A new <tt class=literal>String</tt> object that represents the
same character sequence as this string, but with leading and trailing
whitespace and control characters removed.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
If the first and last character in this <tt class=literal>String</tt>
object are greater than <tt class=literal>'\u0020'</tt> (the space character),
the method returns this <tt class=literal>String</tt> object. Otherwise,
the method returns a new <tt class=literal>String</tt> object that contains
the same character sequence as this <tt class=literal>String</tt> object,
but with leading and trailing characters that are less than <tt class=literal>'\u0020'</tt>'
removed.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.153">Inherited Methods</A></h2>

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<th align="left">

<p class=para>
Method</TH>
<th align="left">

<p class=para>
Inherited From</TH>
<th align="left">

<p class=para>
Method</TH>
<th align="left">

<p class=para>
Inherited From</TH>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>clone()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>finalize()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>getClass()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>notify()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>notifyAll()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>wait()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>wait(long)</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>wait(long, int)</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
</TABLE>
<p>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.154">See Also</A></h2>

<p class=para>
<a href="ch10_03.htm">Character</A>;
<a href="ch10_04.htm">Class</A>;
<a href="ch10_08.htm">Double</A>;
<a href="ch09_04.htm">Exceptions</A>;
<a href="ch10_09.htm">Float</A>;
<a href="ch10_10.htm">Integer</A>;
<a href="ch10_11.htm">Long</A>;
<a href="ch10_14.htm">Object</A>;
<a href="ch10_21.htm">StringBuffer</A>;
<a href="ch04_06.htm#JLR2-CH-4-SECT-6.2">String Concatenation Operator +</A>;
<a href="ch02_02.htm#JLR2-CH-2-SECT-2.3.4">String literals</A>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_19.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch10_21.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Short</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>StringBuffer</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
