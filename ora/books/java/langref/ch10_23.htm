<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 10] Thread</TITLE>
<meta name="author" content="Mark Grand">
<meta name="date" content="Fri Aug  8 15:28:58 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="java">
<meta name="title" content="Java Language Reference">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Language Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_22.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 10<br>The java.lang Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch10_24.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=refnamediv>
<h1>Thread</H1>

<h2>Name</H2>

Thread

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.169">Synopsis</A></h2>

<dl class=variablelist>
<dt class=varlistentry>Class Name:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.Thread</tt>

<p>
<dt class=varlistentry>Superclass:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.Object</tt>

<p>
<dt class=varlistentry>Immediate Subclasses:<br>
<dd>

<p class=para>
None

<p>
<dt class=varlistentry>Interfaces Implemented:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.Runnable</tt>

<p>
<dt class=varlistentry>Availability:<br>
<dd>

<p class=para>
JDK 1.0 or later</DL>
</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.170">Description</A></h2>

<p class=para>
<a name="MAN.THREAD.1"></A>The <tt class=literal>Thread</tt> class encapsulates all of the
information about a single thread of control running in a Java environment.
<tt class=literal>Thread</tt> objects are used to control threads in
a multithreaded program.

<p class=para>
The execution of Java code is always under the control of
a <tt class=literal>Thread</tt> object. The <tt class=literal>Thread</tt>
class provides a <tt class=literal>static</tt> method called <tt class=literal>currentThread()</tt>
that can be used to get a reference to the <tt class=literal>Thread</tt>
object that controls the current thread of execution.

<p class=para>
In order for a <tt class=literal>Thread</tt> object to be useful,
it must be associated with a method that it is supposed to run.
Java provides two ways of associating a <tt class=literal>Thread</tt>
object with a method:

<p>
<ul class=itemizedlist>
<li class=listitem>Declare a subclass of <tt class=literal>Thread</tt>
that defines a <tt class=literal>run()</tt> method. When such a class
is instantiated and the object's <tt class=literal>start()</tt> method
is called, the thread invokes this <tt class=literal>run()</tt> method.

<p>
<li class=listitem>Pass a reference to an object that implements the
<tt class=literal>Runnable</tt> interface to a <tt class=literal>Thread </tt>constructor.
When the <tt class=literal>start()</tt> method of such a
<tt class=literal>Thread</tt> object is called, the thread
invokes the <tt class=literal>run()</tt>
method of the <tt class=literal>Runnable </tt>object.

<p>
</UL>
<p class=para>
After a thread is started, it dies when one of the following
things happens:

<p>
<ul class=itemizedlist>
<li class=listitem>The <tt class=literal>run()</tt>
method called by the <tt class=literal>Thread</tt> returns.

<p>
<li class=listitem>An exception is thrown that causes the <tt class=literal>run()</tt>
method to be exited.

<p>
<li class=listitem>The <tt class=literal>stop()</tt> method of the
<tt class=literal>Thread</tt> is called.

<p>
</UL>
</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.171">Class Summary</A></h2>

<div class=screen>
<p>
<pre>
public class java.lang.Thread extends java.lang.Object
                              implements java.lang.Runnable {
    // Constants
    public final static int MAX_PRIORITY;
    public final static int MIN_PRIORITY;
    public final static int NORM_PRIORITY;
    // Constructors
    public Thread();
    public Thread(Runnable target);
    public Thread(Runnable target, String name);
    public Thread(String name);
    public Thread(ThreadGroup group, Runnable target);
    public Thread(ThreadGroup group, Runnable target, String name);
    public Thread(ThreadGroup group, String name);
    // Class Methods
    public static int activeCount();
    public static native Thread currentThread();
    public static void dumpStack();
    public static int enumerate(Thread tarray[]);
    public static boolean interrupted();
    public static native void sleep(long millis);
    public static void sleep(long millis, int nanos);
    public static native void yield();
    // Instance Methods
    public void checkAccess();
    public native int countStackFrames();
    public void destroy();
    public final String getName();
    public final int getPriority();
    public final ThreadGroup getThreadGroup();
    public void interrupt();
    public final native boolean isAlive();
    public final boolean isDaemon();
    public boolean isInterrupted();
    public final void join();
    public final synchronized void join(long millis);
    public final synchronized void join(long millis, int nanos);
    public final void resume();
    public void run();
    public final void setDaemon(boolean on);
    public final void setName(String name);
    public final void setPriority(int newPriority);
    public synchronized native void start();
    public final void stop();
    public final synchronized void stop(Throwable o);
    public final void suspend();
    public String toString();
}
</PRE>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.172">Constants</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.399">MAX_PRIORITY</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.495"><tt class=literal>public final static int MAX_PRIORITY = 10</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
The highest priority a thread can have.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.400">MIN_PRIORITY</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.496"><tt class=literal>public final static int MIN_PRIORITY = 1</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
The lowest priority a thread can have.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.401">NORM_PRIORITY</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.497"><tt class=literal>public final static int NORM_PRIORITY = 5</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
The default priority assigned to a thread.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.173">Constructors</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.402">Thread</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.498"><tt class=literal>public Thread()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the <tt class=literal>checkAccess()</tt> method of
the <tt class=literal>SecurityManager</tt> throws a <tt class=literal>SecurityException</tt>.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a <tt class=literal>Thread </tt>object that belongs to
the same <tt class=literal>ThreadGroup </tt>object as the current thread,
has the same daemon attribute as the current thread, has the same
priority as the current thread, and has a default name.

<p class=para>
A <tt class=literal>Thread</tt> object created with this constructor
invokes its own <tt class=literal>run()</tt> method when the <tt class=literal>Thread</tt>
object's <tt class=literal>start()</tt> method is called. This is not
useful unless the object belongs to a subclass of the <tt class=literal>Thread</tt>
class that overrides the <tt class=literal>run()</tt> method.

<p class=para>
Calling this constructor is equivalent to:

<div class=screen>
<p>
<pre>
Thread(null, null, genName)
</PRE>
</DIV>

<p class=para>
<tt class=literal>genName </tt>is an automatically generated name
of the form <tt class=literal>"Thread-"+n</tt>, where <tt class=literal>n</tt>
is an integer incremented each time a <tt class=literal>Thread</tt>
object is created.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.499"><tt class=literal>public Thread(String name)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>name</tt><br>
<dd>

<p class=para>
The name of this <tt class=literal>Thread</tt> object.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the <tt class=literal>checkAccess()</tt> method of
the <tt class=literal>SecurityManager</tt> throws a <tt class=literal>SecurityException</tt>.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a <tt class=literal>Thread </tt>object that belongs to
the same <tt class=literal>ThreadGroup </tt>object as the current thread,
has the same daemon attribute as the current thread, has the same
priority as the current thread, and has the specified name.

<p class=para>
A <tt class=literal>Thread</tt> object created with this constructor
invokes its own <tt class=literal>run()</tt> method when the <tt class=literal>Thread</tt>
object's <tt class=literal>start()</tt> method is called. This is not
useful unless the object belongs to a subclass of the <tt class=literal>Thread</tt>
class that overrides the <tt class=literal>run()</tt> method.

<p class=para>
Calling this constructor is equivalent to:

<div class=screen>
<p>
<pre>
Thread(null, null, name)
</PRE>
</DIV>

<p class=para>
The uniqueness of the specified <tt class=literal>Thread</tt>
object's name is not checked, which may be a problem for programs
that attempt to identify <tt class=literal>Thread</tt> objects by their
name.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.500"><tt class=literal>public Thread(ThreadGroup group, Runnable target)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>group</tt><br>
<dd>

<p class=para>
The <tt class=literal>ThreadGroup</tt> object that this
<tt class=literal>Thread</tt> object is to be added to.

<p>
<dt class=varlistentry><tt class=literal>target</tt><br>
<dd>

<p class=para>
A reference to an object that implements the <tt class=literal>Runnable</tt>
interface.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry>SecurityException<br>
<dd>

<p class=para>
If the <tt class=literal>checkAccess()</tt> method of
the <tt class=literal>SecurityManager</tt> throws a <tt class=literal>SecurityException</tt>.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a <tt class=literal>Thread </tt>object that belongs to
the specified <tt class=literal>ThreadGroup</tt> object, has the same
daemon attribute as the current thread, has the same priority as
the current thread, and has a default name.

<p class=para>
A <tt class=literal>Thread</tt> object created with this constructor
invokes the <tt class=literal>run()</tt> method of the specified <tt class=literal>Runnable</tt>
object when the <tt class=literal>Thread</tt> object's <tt class=literal>start()</tt>
method is called.

<p class=para>
Calling this constructor is equivalent to:

<div class=screen>
<p>
<pre>
Thread(group, target, genName)
</PRE>
</DIV>

<p class=para>
<tt class=literal>genName </tt>is an automatically generated name
of the form <tt class=literal>"Thread-"+n</tt>, where <tt class=literal>n</tt>
is an integer that is incremented each time a <tt class=literal>Thread</tt>
object is created.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.501"><tt class=literal>public Thread(ThreadGroup group, Runnable target, String name)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>group</tt><br>
<dd>

<p class=para>
The <tt class=literal>ThreadGroup</tt> object that this
<tt class=literal>Thread</tt> object is to be added to.

<p>
<dt class=varlistentry><tt class=literal>target</tt><br>
<dd>

<p class=para>
A reference to an object that implements the <tt class=literal>Runnable</tt>
interface.

<p>
<dt class=varlistentry><tt class=literal>name</tt><br>
<dd>

<p class=para>
The name of this <tt class=literal>Thread</tt> object.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the <tt class=literal>checkAccess()</tt> method of
the <tt class=literal>SecurityManager</tt> throws a <tt class=literal>SecurityException</tt>.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a <tt class=literal>Thread</tt> object that belongs to
the specified <tt class=literal>ThreadGroup</tt> object, has the same
daemon attribute as the current thread, has the same priority as
the current thread, and has the specified name.

<p class=para>
A <tt class=literal>Thread</tt> object created with this constructor
invokes the <tt class=literal>run()</tt> method of the specified <tt class=literal>Runnable</tt>
object when the <tt class=literal>Thread</tt> object's <tt class=literal>start()</tt>
method is called.

<p class=para>
The uniqueness of the specified <tt class=literal>Thread</tt>
object's name is not checked, which may be a problem for programs
that attempt to identify <tt class=literal>Thread</tt> objects by their
names.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.502"><tt class=literal>public Thread(ThreadGroup group, String name)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>group</tt><br>
<dd>

<p class=para>
The <tt class=literal>ThreadGroup</tt> object that this
<tt class=literal>Thread</tt> object is to be added to.

<p>
<dt class=varlistentry><tt class=literal>name</tt><br>
<dd>

<p class=para>
The name of this <tt class=literal>Thread</tt> object.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the <tt class=literal>checkAccess()</tt> method of
the <tt class=literal>SecurityManager</tt> throws a <tt class=literal>SecurityException</tt>.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a <tt class=literal>Thread </tt>object that belongs to
the specified <tt class=literal>ThreadGroup </tt>object, has the same
daemon attribute as the current thread, has the same priority as
the current thread, and has the specified name.

<p class=para>
A <tt class=literal>Thread</tt> object created with this constructor
invokes its own <tt class=literal>run()</tt> method when the <tt class=literal>Thread</tt>
object's <tt class=literal>start() </tt>method is called. This is not
useful unless the object belongs to a subclass of the <tt class=literal>Thread</tt>
class that overrides the <tt class=literal>run()</tt> method.
Calling this constructor is equivalent to:

<div class=screen>
<p>
<pre>
Thread(group, null, name)
</PRE>
</DIV>

<p class=para>
The uniqueness of the specified <tt class=literal>Thread</tt>
object's name is not checked, which may be a problem for programs
that attempt to identify <tt class=literal>Thread</tt> objects by their
name.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.174">Class Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.403">activeCount</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.503"><tt class=literal>public static int activeCount()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The current number of threads in the <tt class=literal>ThreadGroup</tt>
of the currently running thread.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the number of threads in the <tt class=literal>ThreadGroup</tt>
of the currently running thread for which the <tt class=literal>isAlive()</tt>
method returns <tt class=literal>true</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.404">currentThread</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.504"><tt class=literal>public static native Thread currentThread()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A reference to the <tt class=literal>Thread </tt>object that controls
the currently executing thread.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a reference to the <tt class=literal>Thread</tt>
object that controls the currently executing thread.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.405">dumpStack</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.505"><tt class=literal>public static void dumpStack()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method outputs a stack trace of the currently running
thread.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.406">enumerate</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.506"><tt class=literal>public static int enumerate(Thread tarray[])</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>tarray</tt><br>
<dd>

<p class=para>
A reference to an array of <tt class=literal>Thread</tt>
objects.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The number of <tt class=literal>Thread</tt> objects stored in
the array.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method stores a reference in the array for each of the
<tt class=literal>Thread</tt> objects in the <tt class=literal>ThreadGroup</tt>
of the currently running thread for which the <tt class=literal>isAlive()</tt>
method returns <tt class=literal>true</tt>.

<p class=para>
Calling this method is equivalent to:

<div class=screen>
<p>
<pre>
currentThread().getThreadGroup().enumerate(tarray)
</PRE>
</DIV>

<p class=para>
If the array is not big enough to contain references to all
the <tt class=literal>Thread</tt> objects, only as many references as
will fit are put into the array. No indication is given that some
<tt class=literal>Thread</tt> objects were left out, so it is a good
idea to call <tt class=literal>activeCount()</tt> before calling this
method, to get an idea of how large to make the array.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.407">interrupted</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.507"><tt class=literal>public static boolean interrupted()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true </tt>if the currently running thread has
been interrupted; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not the currently running
thread has been interrupted.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.408">sleep</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.508"><tt class=literal>public static native void sleep(long millis)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>millis</tt><br>
<dd>

<p class=para>
The number of milliseconds that the currently running
thread should sleep.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>InterruptedException</tt><br>
<dd>

<p class=para>
If another thread interrupts the currently running
thread.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method causes the currently running thread to sleep.
The method does not return until at least the specified number of
milliseconds have elapsed.

<p class=para>
While a thread is sleeping, it retains ownership of all locks.
The <tt class=literal>Object</tt> class defines a method called <tt class=literal>wait()</tt>
that is similar to <tt class=literal>sleep()</tt> but causes the currently
running thread to temporarily relinquish its locks.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.509"><tt class=literal>public static void sleep(long millis, int nanos)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>millis</tt><br>
<dd>

<p class=para>
The number of milliseconds that the currently running
thread should sleep.

<p>
<dt class=varlistentry><tt class=literal>nanos</tt><br>
<dd>

<p class=para>
An additional number of nanoseconds to sleep.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>InterruptedException</tt><br>
<dd>

<p class=para>
If another thread interrupts the currently running
thread.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method causes the currently running thread to sleep.
The method does not return until at least the specified number of
milliseconds have elapsed.

<p class=para>
While a thread is sleeping, it retains ownership of all locks.
The <tt class=literal>Object</tt> class defines a method called <tt class=literal>wait()</tt>
that is similar to <tt class=literal>sleep()</tt> but causes the currently
running thread to temporarily relinquish its locks.

<p class=para>
Note that Sun's reference implementation
of Java does not attempt to implement the precision implied by this
method. Instead, it rounds to the nearest millisecond (unless <tt class=literal>millis</tt>
is <tt class=literal>0</tt>, in which case it rounds up to 1 millisecond)
and calls <tt class=literal>sleep(long)</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.409">yield</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.510"><tt class=literal>public static native void yield()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method causes the currently running thread to yield control
of the processor so that another thread can be scheduled.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.175">Instance Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.410">checkAccess</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.511"><tt class=literal>public void checkAccess()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the <tt class=literal>checkAccess()</tt> method of
the <tt class=literal>SecurityManager</tt> throws a <tt class=literal>SecurityException</tt>.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines if the currently running thread has
permission to modify this <tt class=literal>Thread</tt> object.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.411">countStackFrames</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.512"><tt class=literal>public native int countStackFrames()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The number of pending method invocations on this thread's
stack.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the number of pending method invocations
on this thread's stack.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.412">destroy</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.513"><tt class=literal>public void destroy()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method is meant to terminate this thread without any
of the usual cleanup (i.e., any locks held by the thread are not
released). This method provides a last-resort way to terminate
a thread. While a thread can defeat its <tt class=literal>stop()</tt>
method by catching objects thrown from it, there is nothing that
a thread can do to stop itself from being destroyed.

<p class=para>
Note that Sun's reference implementation
of Java does not implement the documented functionality of this
method. Instead, the implementation of this method just throws a
<tt class=literal>NoSuchMethodError</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.413">getName</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.514"><tt class=literal>public final String getName()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The name of this thread.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the name of this <tt class=literal>Thread</tt>
object.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.414">getPriority</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.515"><tt class=literal>public final int getPriority()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The priority of this thread.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the priority of this <tt class=literal>Thread</tt>
object.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.415">getThreadGroup</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.516"><tt class=literal>public final ThreadGroup getThreadGroup()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>ThreadGroup</tt> of this thread.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a reference to the <tt class=literal>ThreadGroup</tt>
that this <tt class=literal>Thread</tt> object belongs to.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.416">interrupt</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.517"><tt class=literal>public void interrupt()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method interrupts this <tt class=literal>Thread</tt> object.

<p class=para>
Note that prior to version 1.1, Sun's reference implementation
of Java does not implement the documented functionality of this method.
Instead, the method just sets a <tt class=literal>private</tt> flag
that indicates that an interrupt has been requested. None of the
methods that should throw an <tt class=literal>InterruptedException</tt>
currently do. However, the <tt class=literal>interrupted()</tt> and
<tt class=literal>isInterrupted()</tt> methods do return <tt class=literal>true</tt>
after this method has been called.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.417">isAlive</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.518"><tt class=literal>public final native boolean isAlive()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true </tt>if this thread is alive; otherwise
<tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not this <tt class=literal>Thread</tt>
object is alive. A <tt class=literal>Thread</tt> object is alive if
it has been started and has not yet died. In other words, it has
been scheduled to run before and can still be scheduled to run again.
A thread is generally alive after its <tt class=literal>start()</tt> method
is called and until its <tt class=literal>stop()</tt> method is called.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.418">isDaemon</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.519"><tt class=literal>public final boolean isDaemon()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the thread is a daemon thread;
otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not this thread is a daemon
thread, based on the value of the daemon
attribute of this <tt class=literal>Thread</tt> object.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.419">isInterrupted</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.520"><tt class=literal>public boolean isInterrupted()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true </tt>if this thread has been interrupted;
otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not this <tt class=literal>Thread</tt>
object has been interrupted.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.420">join</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.521"><tt class=literal>public final void join()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>InterruptedException</tt><br>
<dd>

<p class=para>
If another thread interrupts this thread.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method allows the thread that calls it to wait for the
<tt class=literal>Thread</tt> associated with this method to die. The
method returns when the <tt class=literal>Thread</tt> dies. If this thread
is already dead, then this method returns immediately.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.522"><tt class=literal>public final synchronized void join(long millis)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>millis</tt><br>
<dd>

<p class=para>
The maximum number of milliseconds to wait for this
thread to die.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>InterruptedException</tt><br>
<dd>

<p class=para>
If another thread interrupts this thread.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method causes a thread to wait to die. The method returns
when this <tt class=literal>Thread</tt> object dies or after the specified
number of milliseconds has elapsed, whichever comes first. However,
if the specified number of milliseconds is zero, the method will
wait forever for this thread to die. If this thread is already dead,
the method returns immediately.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.523"><tt class=literal>public final synchronized void join(long millis, int nanos)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>millis</tt><br>
<dd>

<p class=para>
The maximum number of milliseconds to wait for this
thread to die.

<p>
<dt class=varlistentry><tt class=literal>nanos</tt><br>
<dd>

<p class=para>
An additional number of nanoseconds to wait.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>InterruptedException</tt><br>
<dd>

<p class=para>
If another thread interrupts this thread.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method causes a thread to wait to die. The method returns
when this <tt class=literal>Thread</tt> object dies or after the specified
amount of time has elapsed, whichever comes first. However, if <tt class=literal>millis</tt>
and <tt class=literal>nanos</tt> are zero, the method will wait forever
for this thread to die. If this thread is already dead, the method
returns immediately.

<p class=para>
Note that Sun's reference implementation
of Java does not attempt to implement the precision implied by this
method. Instead, it rounds to the nearest millisecond (unless <tt class=literal>millis</tt>
is <tt class=literal>0</tt>, in which case it rounds up to 1 millisecond)
and calls <tt class=literal>join(long)</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.421">resume</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.524"><tt class=literal>public final void resume()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the <tt class=literal>checkAccess()</tt> method of
the <tt class=literal>SecurityManager</tt> throws a <tt class=literal>SecurityException</tt>.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method resumes a suspended thread. The method causes
this <tt class=literal>Thread</tt> object to once again be eligible
to be run. Calling this method for a thread that is not suspended
has no effect.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.422">run</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.525"><tt class=literal>public void run()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>Runnable.run()</tt>

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
A <tt class=literal>Thread</tt> object's <tt class=literal>start()</tt>
method causes the thread to invoke a <tt class=literal>run()</tt> method.
If this <tt class=literal>Thread</tt> object was created without a specified
<tt class=literal>Runnable</tt> object, the <tt class=literal>Thread </tt>object's
own <tt class=literal>run()</tt> method is executed. This behavior is
only useful in a subclass of <tt class=literal>Thread</tt> that overrides
this <tt class=literal>run()</tt> method, since the <tt class=literal>run()</tt>
method of the <tt class=literal>Thread</tt> class does not do anything.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.423">setDaemon</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.526"><tt class=literal>public final void setDaemon(boolean on)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>on</tt><br>
<dd>

<p class=para>
The new value for this thread's daemon attribute.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalThreadStateException</tt><br>
<dd>

<p class=para>
If this method is called after this thread has been
started and while it is still alive.

<p>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the <tt class=literal>checkAccess()</tt> method of
the <tt class=literal>SecurityManager</tt> throws a <tt class=literal>SecurityException</tt>.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sets the daemon attribute
of this <tt class=literal>Thread</tt> object to the given value. This
method must be called before the thread is started. If a thread
dies and there are no other threads except daemon threads alive,
the Java virtual machine stops.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.424">setName</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.527"><tt class=literal>public final void setName(String name)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>name</tt><br>
<dd>

<p class=para>
The new name for this thread.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the <tt class=literal>checkAccess()</tt> method of
the <tt class=literal>SecurityManager</tt> throws a <tt class=literal>SecurityException</tt>.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sets the name of this <tt class=literal>Thread</tt>
object to the given value. The uniqueness of the specified <tt class=literal>Thread</tt>
object's name is not checked, which may be a problem for programs
that attempt to identify <tt class=literal>Thread</tt> objects by their
name.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.425">setPriority</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.528"><tt class=literal>public final void setPriority(int newPriority)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>newPriority</tt><br>
<dd>

<p class=para>
The new priority for this thread.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If the given priority is less than <tt class=literal>MIN_PRIORITY</tt>
or greater than <tt class=literal>MAX_PRIORITY</tt>.

<p>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the <tt class=literal>checkAccess()</tt> method of
the <tt class=literal>SecurityManager</tt> throws a <tt class=literal>SecurityException</tt>.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sets the priority
of this <tt class=literal>Thread </tt>to the given value.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.426">start</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.529"><tt class=literal>public synchronized native void start()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalThreadStateException</tt><br>
<dd>

<p class=para>
If this <tt class=literal>Thread</tt> object's <tt class=literal>start()</tt>
method has been called before.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method starts this <tt class=literal>Thread</tt> object,
allowing it to be scheduled for execution. The top-level code that
is executed by the thread is the <tt class=literal>run()</tt> method
of the <tt class=literal>Runnable</tt> object specified in the constructor
that was used to create this object. If no such object was specified,
the top-level code executed by the thread is this object's <tt class=literal>run()</tt>
method.

<p class=para>
It is not permitted to start a thread more than once.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.427">stop</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.530"><tt class=literal>public final void stop()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the <tt class=literal>checkAccess()</tt> method of
the <tt class=literal>SecurityManager</tt> throws a <tt class=literal>SecurityException</tt>.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method causes this <tt class=literal>Thread</tt> object to
stop executing by throwing a <tt class=literal>ThreadDeath</tt> object.
The object is thrown in this thread, even if the method is called
from a different thread. This thread is forced to stop whatever
it is doing and throw a newly created <tt class=literal>ThreadDeath</tt>
object. If this thread was suspended, it is resumed; if it was sleeping,
it is awakened.
Normally, you should not catch <tt class=literal>ThreadDeath</tt>
objects in a <tt class=literal>try</tt> statement. If you need to catch
<tt class=literal>ThreadDeath</tt> objects to detect a <tt class=literal>Thread</tt>
is about to die, the <tt class=literal>try </tt>statement that
catches <tt class=literal>ThreadDeath</tt> objects should rethrow them.

<p class=para>
When an object is thrown out of the <tt class=literal>run()</tt>
method associated with a <tt class=literal>Thread</tt>, the <tt class=literal>uncaughtException()</tt>
method of the <tt class=literal>ThreadGroup </tt>for that <tt class=literal>Thread</tt>
is called.
The <tt class=literal>uncaughtException()</tt> method normally outputs a
stack trace. However, <tt class=literal>uncaughtException()</tt> treats a
<tt class=literal>ThreadDeath</tt> object as a special case by not
outputting a stack trace. When the
<tt class=literal>uncaughtException()</tt> method returns, the thread is dead.
The thread is never scheduled to run again.

<p class=para>
If this <tt class=literal>Thread</tt> object's <tt class=literal>stop()</tt>
method is called before this thread is started, the <tt class=literal>ThreadDeath</tt>
object is thrown as soon as the thread is started.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.531"><tt class=literal>public final synchronized void stop(Throwable o)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>o</tt><br>
<dd>

<p class=para>
The object to be thrown.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the <tt class=literal>checkAccess()</tt> method of
the <tt class=literal>SecurityManager</tt> throws a <tt class=literal>SecurityException</tt>.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method causes this <tt class=literal>Thread</tt> object to
stop executing by throwing the given object.
Normally, the <tt class=literal>stop()</tt>
method that takes no arguments and throws a
<tt class=literal>ThreadDeath</tt>
object should be called instead of this method. However, if it is
necessary to stop a thread by throwing some other type of object,
this method can be used.

<p class=para>
The object is thrown in this thread, even if the method is
called from a different thread. This thread is forced to stop whatever
it is doing and throw the <tt class=literal>Throwable</tt> object <tt class=literal>o</tt>.
If this thread was suspended, it is resumed; if it was sleeping,
it is awakened.

<p class=para>
When an object is thrown out of the <tt class=literal>run()</tt>
method associated with a <tt class=literal>Thread</tt>, the <tt class=literal>uncaughtException()</tt>
method of the <tt class=literal>ThreadGroup </tt>for that <tt class=literal>Thread</tt>
is called. If the thrown object is not an instance of
the <tt class=literal>ThreadDeath</tt> class, <tt class=literal>uncaughtException()</tt>
calls the thrown object's <tt class=literal>printStackTrace()</tt> method
and then the thread dies. The thread
is never scheduled to run again.

<p class=para>
If this <tt class=literal>Thread</tt> object's <tt class=literal>stop()</tt>
method is called before this thread is started, the <tt class=literal>ThreadDeath</tt>
object is thrown as soon as the thread is started.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.428">suspend</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.532"><tt class=literal>public final void suspend()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the <tt class=literal>checkAccess()</tt> method of
the <tt class=literal>SecurityManager</tt> throws a <tt class=literal>SecurityException</tt>.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method suspends a thread. The method causes this <tt class=literal>Thread</tt>
object to temporarily be ineligible to be run. The thread becomes
eligible to be run again after its <tt class=literal>resume() </tt>method
is called. Calling this method for a thread that is already suspended
has no effect.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch10-REFSECT2-AUTOID.429">toString</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch10-REFSECT3-AUTOID.533"><tt class=literal>public String toString()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A string representation of this <tt class=literal>Thread</tt> object.

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Object.toString()</tt>

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a string representation of this <tt class=literal>Thread</tt>
object.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.176">Inherited Methods</A></h2>

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<th align="left">

<p class=para>
Method</TH>
<th align="left">

<p class=para>
Inherited From</TH>
<th align="left">

<p class=para>
Method</TH>
<th align="left">

<p class=para>
Inherited From</TH>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>clone()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>equals(Object)</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>finalize()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>getClass()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>hashCode()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>notify()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>notifyAll()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>wait()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>wait(long)</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>wait(long, int)</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
</TABLE>
<p>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch10-REFSECT1-AUTOID.177">See Also</A></h2>

<p class=para>
<a href="ch09_04.htm">Exceptions</A>;
<a href="ch10_14.htm">Object</A>;
<a href="ch10_16.htm">Runnable</A>;
<a href="ch10_18.htm">SecurityManager</A>;
<a href="ch10_24.htm">ThreadGroup</A>;
Threads 8

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_22.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch10_24.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>System</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>ThreadGroup</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
