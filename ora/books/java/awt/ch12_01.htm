<html>
<head>
<title>[Chapter 12] Image Processing</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:50:24 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 12</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch12_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="JAWT-CH-12">12. Image Processing</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
ImageObserver<br>
<a href="ch12_02.htm">ColorModel</A><br>
<a href="ch12_03.htm">ImageProducer</A><br>
<a href="ch12_04.htm">ImageConsumer</A><br>
<a href="ch12_05.htm">ImageFilter</A><br>

<p>
</DIV>

<p class=para>
The image processing parts of Java are buried within the <tt class=literal>java.awt.image</tt> 
package. The package consists of three interfaces and eleven classes, two 
of which are abstract. They are as follows: <a name="CH12.IMAGES"></A>

<p>
<ul class=itemizedlist>
<li class=listitem> The <tt class=literal>ImageObserver</tt> interface
provides the single method necessary to support the asynchronous
loading of images. The interface implementers watch the production of
an image and can react when certain conditions arise. We briefly
touched on <tt class=literal>ImageObserver</tt> when we discussed the
<tt class=literal>Component</tt> class (in <a href="ch05_01.htm">Chapter 5, <i>Components</i></A>),
because <tt class=literal>Component</tt> implements the interface.

<p>
<li class=listitem>The <tt class=literal>ImageConsumer</tt> and <tt class=literal>ImageProducer</tt> 
interfaces provide the means for low level image creation. The <tt class=literal>ImageProducer</tt> 
provides the source of the pixel data that is used by the <tt class=literal>ImageConsumer</tt> 
to create an <tt class=literal>Image</tt>. 

<p>
<li class=listitem>The <tt class=literal>PixelGrabber</tt> and <tt class=literal>ImageFilter</tt> 
classes, along with the <tt class=literal>AreaAveragingScaleFilter</tt>, 
<tt class=literal>CropImageFilter</tt>, <tt class=literal>RGBImageFilter</tt>, 
and <tt class=literal>ReplicateScaleFilter</tt> subclasses, 
provide the tools for working with images. <tt class=literal>PixelGrabber</tt> 
consumes pixels from an <tt class=literal>Image</tt> 
into an array. The <tt class=literal>ImageFilter</tt> 
classes modify an existing image to produce another <tt class=literal>Image</tt> 
instance. <tt class=literal>CropImageFilter</tt> makes 
smaller images; <tt class=literal>RGBImageFilter</tt> 
alters pixel colors, while <tt class=literal>AreaAveragingScaleFilter</tt> 
and <tt class=literal>ReplicateScaleFilter</tt> scale 
images up and down using different algorithms. All of these classes implement 
<tt class=literal>ImageConsumer</tt> because they 
take pixel data as input. 

<p>
<li class=listitem><tt class=literal>MemoryImageSource</tt> and <tt class=literal>FilteredImageSource</tt> 
produce new images. <tt class=literal>MemoryImageSource</tt> 
takes an array and creates an image from it. <tt class=literal>FilteredImageSource</tt> 
uses an <tt class=literal>ImageFilter</tt> to read 
and modify data from another image and produces the new image based on 
the original. Both <tt class=literal>MemoryImageSource</tt> 
and <tt class=literal>FilteredImageSource</tt> implement 
<tt class=literal>ImageProducer</tt> because they 
produce new pixel data. 

<p>
<li class=listitem><tt class=literal>ColorModel</tt> and its subclasses, 
<tt class=literal>DirectColorModel</tt> and <tt class=literal>IndexColorModel</tt>, 
provide the palette of colors available when creating an image or tell 
you the palette used when using <tt class=literal>PixelGrabber</tt>. 

<p>
</UL>
<p class=para>
The classes in the <tt class=literal>java.awt.image</tt> 
package let you create <tt class=literal>Image</tt> 
objects at run-time. These classes can be used to rotate images, make images 
transparent, create image viewers for unsupported graphics formats, and 
more. 

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-12-SECT-1">12.1 ImageObserver</A></h2>

<p class=para>
<a name="CH12.IMAGES3"></A>As you may recall from <a href="ch02_01.htm">Chapter 2, <i>Simple Graphics</i></A>, the last parameter to the <tt class=literal>drawImage()</tt> 
method is the image's <tt class=literal>ImageObserver</tt>. 
However, in <a href="ch02_01.htm">Chapter 2, <i>Simple Graphics</i></A> I also said that you can use <tt class=literal>this</tt> 
as the image observer and forget about it. Now it's time to ask the 
obvious questions: what is an image observer, and what is it for? 

<p class=para>
Because <tt class=literal>getImage()</tt> acquires 
an image asynchronously, the entire <tt class=literal>Image</tt> 
object might not be fully loaded when <tt class=literal>drawImage()</tt> 
is called. The <tt class=literal>ImageObserver</tt> 
interface provides the means for a component to be told asynchronously 
when additional information about the image is available. The <tt class=literal>Component</tt> 
class implements the <tt class=literal>imageUpdate()</tt> 
method (the sole method of the <tt class=literal>ImageObserver</tt> 
interface), so that method is inherited by any component that renders an 
image. Therefore, when you call <tt class=literal>drawImage()</tt>, 
you can pass <tt class=literal>this</tt> as the final 
argument; the component on which you are drawing serves as the <tt class=literal>ImageObserver</tt> 
for the drawing process. The communication between the image observer and 
the image consumer happens behind the scenes; you never have to worry about 
it, unless you want to write your own <tt class=literal>imageUpdate()</tt> 
method that does something special as the image is being loaded. 

<p class=para>
If you call <tt class=literal>drawImage()</tt> to 
display an image created in local memory (either for double buffering or 
from a <tt class=literal>MemoryImageSource</tt>), 
you can set the <tt class=literal>ImageObserver</tt> 
parameter of <tt class=literal>drawImage()</tt> to 
<tt class=literal>null</tt> because no asynchrony is involved; the entire image is available 
immediately, so an <tt class=literal>ImageObserver</tt> 
isn't needed. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-12-SECT-1.1">ImageObserver Interface</A></h3>Constants

<p class=para>
The various flags associated with the <tt class=literal>ImageObserver</tt> 
are used for the <tt class=literal>infoflags</tt> 
argument to <tt class=literal>imageUpdate()</tt>. 
The flags indicate what kind of information is available and how to interpret 
the other arguments to <tt class=literal>imageUpdate()</tt>. 
Two or more flags are often combined (by an OR operation) to show that several kinds of information are available. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static final int WIDTH </I><br>
<dd>

<p class=para>
When the <tt class=literal>WIDTH</tt> flag is set, 
the <tt class=literal>width</tt> argument to <tt class=literal>imageUpdate()</tt> 
correctly indicates the image's width. Subsequent calls to <tt class=literal>getWidth()</tt> 
for the <tt class=literal>Image</tt> return the valid 
image width. If you call <tt class=literal>getWidth()</tt> 
before this flag is set, expect it to return -1. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int HEIGHT </I><br>
<dd>

<p class=para>
When the <tt class=literal>HEIGHT</tt> flag is set, 
the <tt class=literal>height</tt> argument to <tt class=literal>imageUpdate()</tt> 
correctly indicates the image's height. Subsequent calls to <tt class=literal>getHeight()</tt> 
for the <tt class=literal>Image</tt> return the valid 
image height. If you call <tt class=literal>getHeight()</tt> 
before this flag is set, expect it to return -1. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int PROPERTIES </I><br>
<dd>

<p class=para>
When the <tt class=literal>PROPERTIES</tt> flag is 
set, the image's properties are available. Subsequent calls to 
<tt class=literal>getProperty()</tt> return valid 
image properties. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int SOMEBITS </I><br>
<dd>

<p class=para>
When the <tt class=literal>SOMEBITS</tt> flag of <tt class=literal>infoflags</tt> 
(from <tt class=literal>imageUpdate()</tt>) is set, 
the image has started loading and at least some of its content are available 
for display. When this flag is set, the <tt class=literal>x</tt>, <tt class=literal>y</tt>, <tt class=literal>width</tt>, and <tt class=literal>height</tt> arguments 
to <tt class=literal>imageUpdate()</tt> indicate the 
bounding rectangle for the portion of the image that has been delivered 
so far. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int FRAMEBITS </I><br>
<dd>

<p class=para>
When the <tt class=literal>FRAMEBITS</tt> flag of 
<tt class=literal>infoflags</tt> is set, a complete 
frame of a multiframe image has been loaded and can be drawn. The remaining 
parameters to <tt class=literal>imageUpdate()</tt> 
should be ignored (<tt class=literal>x</tt>, <tt class=literal>y</tt>, 
<tt class=literal>width</tt>, <tt class=literal>height</tt>). 

<p>
<dt class=varlistentry><i class=emphasis>public static final int ALLBITS </I><br>
<dd>

<p class=para>
When the <tt class=literal>ALLBITS</tt> flag of infoflags 
is set, the image has been completely loaded and can be drawn. The remaining 
parameters to <tt class=literal>imageUpdate()</tt> 
should be ignored (<tt class=literal>x</tt>, <tt class=literal>y</tt>, 
<tt class=literal>width</tt>, <tt class=literal>height</tt>). 

<p>
<dt class=varlistentry><i class=emphasis>public static final int ERROR </I><br>
<dd>

<p class=para>
When the <tt class=literal>ERROR</tt> flag is set, 
the production of the image has stopped prior to completion because of 
a severe problem. <tt class=literal>ABORT</tt> may 
or may not be set when <tt class=literal>ERROR</tt> 
is set. Attempts to reload the image will fail. You might get an <tt class=literal>ERROR</tt> because the URL 
of the <tt class=literal>Image</tt> is invalid (file 
not found) or the image file itself is invalid (invalid size/content). 

<p>
<dt class=varlistentry><i class=emphasis>public static final int ABORT </I><br>
<dd>

<p class=para>
When the <tt class=literal>ABORT</tt> flag is set, 
the production of the image has aborted prior to completion. If <tt class=literal>ERROR</tt> 
is not set, a subsequent attempt to draw the image may succeed. For example, 
an image would abort without an error if a network error occurred (e.g., 
a timeout on the HTTP connection). </DL>
Method

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public boolean imageUpdate (Image image, int infoflags, int x, int y, int 
width, int height) </I><br>
<dd>

<p class=para>
<a name="CH12.UPDATE"></A>The <tt class=literal>imageUpdate()</tt> method is 
the sole method in the <tt class=literal>ImageObserver</tt> 
interface. It is called whenever information about an image becomes available. 
To register an image observer for an image, pass an object that implements 
the <tt class=literal>ImageObserver</tt> interface 
to <tt class=literal>getWidth()</tt>, <tt class=literal>getHeight()</tt>, 
<tt class=literal>getProperty()</tt>, <tt class=literal>prepareImage()</tt>, 
or <tt class=literal>drawImage()</tt>. 

<p class=para>
The <tt class=literal>image</tt> parameter to <tt class=literal>imageUpdate()</tt> 
is the image being rendered on the observer. The <tt class=literal>infoflags</tt> 
parameter is a set of <tt class=literal>ImageObserver</tt> 
flags ORed together to signify the current information available 
about <tt class=literal>image</tt>. The meaning of 
the <tt class=literal>x</tt>, <tt class=literal>y</tt>, 
<tt class=literal>width</tt>, and <tt class=literal>height</tt> 
parameters depends on the current <tt class=literal>infoflags</tt> 
settings. 

<p class=para>
Implementations of <tt class=literal>imageUpdate()</tt> 
should return <tt class=literal>true</tt> if additional information about the image is desired; 
returning <tt class=literal>false</tt> means that you don't want any additional information, 
and consequently, <tt class=literal>imageUpdate()</tt> 
should not be called in the future for this image. The default <tt class=literal>imageUpdate()</tt> 
method returns <tt class=literal>true</tt> if neither <tt class=literal>ABORT</tt> 
nor <tt class=literal>ALLBITS</tt> are set in the 
<tt class=literal>infoflags</tt>--that is, the method <tt class=literal>imageUpdate()</tt> 
is interested in further information if no errors have occurred and the 
image is not complete. If either flag is set, <tt class=literal>imageUpdate()</tt> 
returns <tt class=literal>false</tt>. 

<p class=para>
You should not call <tt class=literal>imageUpdate()</tt> 
directly--unless you are developing an <tt class=literal>ImageConsumer</tt>, 
in which case you may find it worthwhile to override the default <tt class=literal>imageUpdate()</tt> 
method, which all components inherit from the <tt class=literal>Component</tt> 
class. </DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-12-SECT-1.2">Overriding imageUpdate</A></h3>

<p class=para>
Instead of bothering with the <tt class=literal>MediaTracker</tt> 
class, you can override the <tt class=literal>imageUpdate()</tt> 
method and use it to notify you when an image is completely loaded. 
<a href="#JAWT-CH-12-EX-1">Example 12.1</A> demonstrates the use of <tt class=literal>imageUpdate()</tt>, 
along with a way to force your images to load immediately. Here's 
how it works: the <tt class=literal>init()</tt> method 
calls <tt class=literal>getImage()</tt> to request 
image loading at some time in the future. Instead of waiting for <tt class=literal>drawImage()</tt> 
to trigger the loading process, <tt class=literal>init()</tt> 
forces loading to start by calling <tt class=literal>prepareImage()</tt>, 
which also registers an image observer. <tt class=literal>prepareImage()</tt> 
is a method of the <tt class=literal>Component</tt> 
class discussed in <a href="ch05_01.htm">Chapter 5, <i>Components</i></A>. 

<p class=para>
The <tt class=literal>paint()</tt> method doesn't 
attempt to draw the image until the variable <tt class=literal>loaded</tt> 
is set to <tt class=literal>true</tt>. The <tt class=literal>imageUpdate()</tt> 
method checks the <tt class=literal>infoflags</tt> 
argument to see whether <tt class=literal>ALLBITS</tt> 
is set; when it is set, <tt class=literal>imageUpdate()</tt> 
sets <tt class=literal>loaded</tt> to <tt class=literal>true</tt>, and schedules 
a call to <tt class=literal>paint()</tt>. Thus, <tt class=literal>paint()</tt> 
doesn't call <tt class=literal>drawImage()</tt> 
until the method <tt class=literal>imageUpdate()</tt> has discovered 
that the image is fully loaded. 

<div class=example>
<h4 class=example><a class="TITLE" name="JAWT-CH-12-EX-1">Example 12.1: imageUpdate Override.</A></h4>

<div class=screen>
<p>
<pre>
import java.applet.*;
import java.awt.*;
import java.awt.image.ImageObserver;
public class imageUpdateOver extends Applet {
    Image image;
    boolean loaded = false;
    public void init () {
        image = getImage (getDocumentBase(), "rosey.jpg");
        prepareImage (image, -1, -1, this);
    }
    public void paint (Graphics g) {
        if (loaded)
            g.drawImage (image, 0, 0, this);
    }
    public void update (Graphics g) {
        paint (g);
    }
    public synchronized boolean imageUpdate (Image image, int infoFlags,
                        int x, int y, int width, int height) {
        if ((infoFlags &amp; ImageObserver.ALLBITS) != 0) {
            loaded = true;
            repaint();
            return false;
        } else {
            return true;
        }
    }
}
</PRE>
</DIV>

</DIV>

<p class=para>
Note that the call to <tt class=literal>prepareImage()</tt> 
is absolutely crucial. It is needed both to start image loading and to 
register the image observer. If <tt class=literal>prepareImage()</tt> 
were omitted, <tt class=literal>imageUpdate()</tt> 
would never be called, <tt class=literal>loaded</tt> 
would not be set, and <tt class=literal>paint()</tt> 
would never attempt to draw the image. As an alternative, you could use 
the <tt class=literal>MediaTracker</tt> class to force 
loading to start and monitor the loading process; that approach might give 
you some additional flexibility. 

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch12_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>ScrollPane</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>ColorModel</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
