<html>
<head>
<title>[Chapter 6] 6.6 Dialogs</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:37:02 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 6<br>Containers</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch06_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-6-SECT-6">6.6 Dialogs</A></h2>

<p class=para>
<a name="CH06.DIALOG1"></A><a name="CH06.DIALOG2"></A>The <tt class=literal>Dialog</tt> class provides a 
special type of display window that is normally used for pop-up messages 
or input from the user. It should be associated with a <tt class=literal>Frame</tt> 
(a required parameter for the constructor), and whenever anything happens 
to this <tt class=literal>Frame</tt>, the same thing 
will happen to the <tt class=literal>Dialog</tt>. 
For instance, if the parent <tt class=literal>Frame</tt> 
is iconified, the <tt class=literal>Dialog</tt> disappears 
until the <tt class=literal>Frame</tt> is de-iconified. 
If the <tt class=literal>Frame</tt> is destroyed, 
so are all the associated dialogs. <a href="#JAWT-CH-6-FIG-5">Figure 6.5</A> and <a href="#JAWT-CH-6-FIG-6">Figure 6.6</A> show typical dialog boxes.

<p class=para>
In addition to being associated with a <tt class=literal>Frame</tt>, 
<tt class=literal>Dialog</tt> is either modeless 
or modal. A modeless <tt class=literal>Dialog</tt> 
means a user can interact with both the <tt class=literal>Frame</tt> 
and the <tt class=literal>Dialog</tt> at the same 
time. A modal <tt class=literal>Dialog</tt> is one 
that blocks input to the remainder of the application, including the <tt class=literal>Frame</tt>, 
until the <tt class=literal>Dialog</tt> box is acted 
upon. Note that the parent <tt class=literal>Frame</tt> 
is still executing; unlike some windowing systems, Java does not suspend 
the entire application for a modal <tt class=literal>Dialog</tt>. 
Normally, blocking access would be done to get input from the user or to 
show a warning message. <a href="#JAWT-CH-6-EX-2">Example 6.2</A> shows how to create and use a modal <tt class=literal>Dialog</tt> box, as we will see later in the chapter. 

<p class=para>
Since <tt class=literal>Dialog</tt> subclasses <tt class=literal>Window</tt>, 
its default <tt class=literal>LayoutManager</tt> is 
<tt class=literal>BorderLayout</tt>. 

<p class=para>
In applets, when you create a <tt class=literal>Dialog</tt>, 
you need to provide a reference to the browser's <tt class=literal>Frame</tt>, 
not the applet. In order to get this, you can try to go up the container 
hierarchy of the <tt class=literal>Applet</tt> with 
<tt class=literal>getParent()</tt> until it returns 
<tt class=literal>null</tt>. (You cannot specify a 
null parent as you can with a <tt class=literal>Window</tt>.) 
See <a href="ch06_04.htm">Example 6.1</A> for a utility method to do this. Simple include a line like the following in your applet: 

<div class=screen>
<p>
<pre>
Frame top = ComponentUtilities.getTopLevelParent (this);
</PRE>
</DIV>

<p class=para>
Then pass <tt class=literal>top</tt> to the <tt class=literal>Dialog</tt> 
constructor. Another alternative is to create a new <tt class=literal>Frame</tt> 
to associate with your dialog. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-6-SECT-6.1">Dialog Constructors and Methods</A></h3>Constructors

<p class=para>
If any constructor is passed a <tt class=literal>null</tt> 
parent, the constructor throws the run-time exception <tt class=literal>IllegalArgumentException</tt>. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Dialog (Frame parent) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor creates an instance of <tt class=literal>Dialog</tt> 
with no title and with <tt class=literal>parent</tt> 
as the <tt class=literal>Frame</tt> owning it. It 
is not modal and is initially resizable. 

<p>
<dt class=varlistentry><i class=emphasis>public Dialog (Frame parent, boolean modal) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
This constructor creates an instance of <tt class=literal>Dialog</tt> 
with no title and with <tt class=literal>parent</tt> 
as the <tt class=literal>Frame</tt> owning it. If 
<tt class=literal>modal</tt> is <tt class=literal>true</tt>, 
the <tt class=literal>Dialog</tt> grabs all the user 
input of the program until it is closed. If <tt class=literal>modal</tt> 
is <tt class=literal>false</tt>, there is no special 
behavior associated with the <tt class=literal>Dialog</tt>. 
Initially, the <tt class=literal>Dialog</tt> will 
be resizable. This constructor is comment-flagged as deprecated.

<p>
<dt class=varlistentry><i class=emphasis>public Dialog (Frame parent, String title) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This version of the constructor creates an instance of <tt class=literal>Dialog</tt> 
with <tt class=literal>parent</tt> as the <tt class=literal>Frame</tt> 
owning it and a window title of <tt class=literal>title</tt>. 
It is not modal and is initially resizable. 

<p>
<dt class=varlistentry><i class=emphasis>public Dialog (Frame parent, String title, boolean modal) </I><br>
<dd>

<p class=para>
This version of the constructor creates an instance of <tt class=literal>Dialog</tt> 
with <tt class=literal>parent</tt> as the <tt class=literal>Frame</tt> 
owning it and a window title of <tt class=literal>title</tt>. 
If <tt class=literal>mode</tt> is <tt class=literal>true</tt>, 
the <tt class=literal>Dialog</tt> grabs all the user 
input of the program until it is closed. If <tt class=literal>modal</tt> 
is <tt class=literal>false</tt>, there is no special 
behavior associated with the <tt class=literal>Dialog</tt>. 
Initially, the <tt class=literal>Dialog</tt> will 
be resizable. </DL>
<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
In some 1.0 versions of Java, modal dialogs were not supported properly. 
You needed to create some multithreaded contraption that simulated modality. 
Modal dialogs work properly in 1.1. 
</blockquote><p>
</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-6-FIG-5">Figure 6.5: A Dialog in an application or local applet</A></h4>


<p>
<img align=middle src="figs/jawt0606.gif" alt="[Graphic: Figure 6-5]" width=185 height=214 border=0>

</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-6-FIG-6">Figure 6.6: The same Dialog in an applet that came across the network</A></h4>


<p>
<img align=middle src="figs/jawt0607.gif" alt="[Graphic: Figure 6-6]" width=261 height=120 border=0>

</DIV>

Appearance methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public String getTitle () </I><br>
<dd>

<p class=para>
The <tt class=literal>getTitle()</tt> method returns 
the current title for the <tt class=literal>Dialog</tt>. 
If there is no title for the <tt class=literal>Dialog</tt>, 
<tt class=literal>getTitle()</tt> returns <tt class=literal>null</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void setTitle (String title) </I><br>
<dd>

<p class=para>
The <tt class=literal>setTitle()</tt> method changes 
the current title of the <tt class=literal>Dialog</tt> 
to <tt class=literal>title</tt>. To turn off any title 
for the <tt class=literal>Dialog</tt>, use <tt class=literal>null</tt> 
for <tt class=literal>title</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean isResizable () </I><br>
<dd>

<p class=para>
The <tt class=literal>isResizable()</tt> method tells 
you if the current <tt class=literal>Dialog</tt> is 
resizable. 

<p>
<dt class=varlistentry><i class=emphasis>public void setResizable (boolean resizable) </I><br>
<dd>

<p class=para>
The <tt class=literal>setResizable()</tt> method changes 
the resize state of the <tt class=literal>Dialog</tt>. 
A <tt class=literal>resizable</tt> value of <tt class=literal>true</tt> 
means the user can resize the <tt class=literal>Dialog</tt>, 
while <tt class=literal>false</tt> means the user 
cannot. This must be set before the <tt class=literal>Dialog</tt> 
is shown or the peer created. </DL>
Modal methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public boolean isModal () </I><br>
<dd>

<p class=para>
The <tt class=literal>isModal()</tt> method returns 
the current mode of the <tt class=literal>Dialog</tt>. 
<tt class=literal>true</tt> indicates the dialog traps 
all user input. 

<p>
<dt class=varlistentry><i class=emphasis>public void setModal (boolean mode) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setModal()</tt> method changes 
the current mode of the <tt class=literal>Dialog</tt> 
to <tt class=literal>mode</tt>. The next time the 
dialog is displayed via <tt class=literal>show()</tt>, 
it will be modal. If the dialog is currently displayed, <tt class=literal>setModal()</tt> 
has no immediate effect. The change will take place the next time <tt class=literal>show()</tt> 
is called. 

<p>
<dt class=varlistentry><i class=emphasis>public void show () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>show()</tt> method brings the 
<tt class=literal>Dialog</tt> to the front and displays 
it. If the dialog is modal, <tt class=literal>show()</tt> 
takes care of blocking events so that they don't reach the parent 
<tt class=literal>Frame</tt>. </DL>
Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public synchronized void addNotify () </I><br>
<dd>

<p class=para>
The <tt class=literal>addNotify()</tt> method creates 
the <tt class=literal>Dialog</tt> peer. The 
peer is created automatically when you call the dialog's <tt class=literal>show()</tt> 
method. If you override the method <tt class=literal>addNotify()</tt>, 
first call <tt class=literal>super.addNotify()</tt>, 
then add your customizations for the new class. You will then be able to 
do everything you need with the information about the newly created peer. 

<p>
<dt class=varlistentry><i class=emphasis>protected String paramString () </I><br>
<dd>

<p class=para>
When you call the <tt class=literal>toString()</tt> 
method of <tt class=literal>Dialog</tt>, the default 
<tt class=literal>toString()</tt> method of <tt class=literal>Component</tt> 
is called. This in turn calls <tt class=literal>paramString()</tt> 
which builds up the string to display. At the <tt class=literal>Dialog</tt> 
level, <tt class=literal>paramString()</tt> appends 
the current mode (modal/modeless) and title (if present). Using 
the constructor <tt class=literal>Dialog (top, `Help`, true)</tt>, 
the results would be as follows: </DL>
<div class=screen>
<p>
<pre>
java.awt.Dialog[0,0,0x0,invalid,hidden,layout=java.awt.BorderLayout,
    modal,title=Help]
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-6-SECT-6.2">Dialog Events</A></h3>

<p class=para>
In Java 1.0, a <tt class=literal>Dialog</tt> peer generates all the events 
that are generated by the <tt class=literal>Component</tt> 
class; it does not generate events that are specific to a particular type 
of component. That is, it generates key events, mouse events, and focus 
events; it doesn't generate action events or list events. If an event 
happens within a child component of a <tt class=literal>Dialog</tt>, 
the target of the event is the child component, not the <tt class=literal>Dialog</tt>.Window

<p class=para>
In addition to the <tt class=literal>Component</tt> 
events, <tt class=literal>Dialog</tt> generates the 
<tt class=literal>WINDOW</tt> events. These events are <tt class=literal>WINDOW_DESTROY</tt>, 
<tt class=literal>WINDOW_EXPOSE</tt>, <tt class=literal>WINDOW_ICONIFY</tt>, 
<tt class=literal>WINDOW_DEICONIFY</tt>, and <tt class=literal>WINDOW_MOVED</tt>. Listeners and 1.1 event handling

<p class=para>
With the 1.1 event model, you register listeners for different event types; 
the listeners are told when the event happens. The <tt class=literal>Dialog</tt> class inherits all its listener handling from <tt class=literal>Window</tt>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-6-SECT-6.3">Dialog Example</A></h3>

<p class=para>
<a href="#JAWT-CH-6-EX-2">Example 6.2</A> demonstrates how a modal <tt class=literal>Dialog</tt> 
tries to work in Java 1.0. In some windowing systems, "modal" 
means that the calling application, and sometimes the entire system stops, 
and input to anything other than the <tt class=literal>Dialog</tt> 
is blocked. With Java 1.0, a modal <tt class=literal>Dialog</tt> 
acts only on the parent frame and simply prevents it from getting screen-oriented 
input by disabling all components within the frame. The Java program as 
a whole continues to execute. 

<p class=para>
<a href="#JAWT-CH-6-EX-2">Example 6.2</A> displays a <tt class=literal>Dialog</tt> 
window with username and password fields, and an Okay button. 
When the user selects the Okay button, a realistic application 
would validate the username and password; in this case, they are just displayed 
on a <tt class=literal>Frame</tt>. Since the <tt class=literal>Frame</tt> 
must wait for the <tt class=literal>Dialog</tt> to 
finish before looking at the values of the two fields, the <tt class=literal>Dialog</tt> 
must tell the <tt class=literal>Frame</tt> when it 
can look. This is done through a custom interface implemented by the parent 
<tt class=literal>Frame</tt> and invoked by the <tt class=literal>Dialog</tt> 
in its action method. 

<p class=para>
<a href="#JAWT-CH-6-FIG-7">Figure 6.7</A> is the initial <tt class=literal>Dialog</tt>; 
<a href="#JAWT-CH-6-FIG-8">Figure 6.8</A> shows the result after you click Okay. <a href="#JAWT-CH-6-EX-2">Example 6.2</A> contains the source code. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-6-FIG-7">Figure 6.7: Username and password Dialog</A></h4>


<p>
<img align=middle src="figs/jawt0608.gif" alt="[Graphic: Figure 6-7]" width=117 height=105 border=0>

</DIV>

<p class=para>
Notice the use of the newly created <tt class=literal>DialogHandler</tt> 
interface when the user selects the Okay button. Also, see 
how the pre- and post-event-handling methods are separated. All the pre-event 
processing takes place before the <tt class=literal>Dialog</tt> 
is shown. The post-event processing is called by the <tt class=literal>Dialog</tt> 
through the new <tt class=literal>DialogHandler</tt> 
interface method, <tt class=literal>dialogDoer()</tt>. 
The interface provides a common method name for all your <tt class=literal>Dialog</tt> 
boxes to call. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-6-FIG-8">Figure 6.8: Resulting Frame</A></h4>


<p>
<img align=middle src="figs/jawt0609.gif" alt="[Graphic: Figure 6-8]" width=503 height=282 border=0>

</DIV>

<div class=example>
<h4 class=example><a class="TITLE" name="JAWT-CH-6-EX-2">Example 6.2: Modal Dialog Usage</A></h4>

<div class=screen>
<p>
<pre>
import java.awt.*;
interface DialogHandler {
    void dialogDoer (Object o);
}
class modeTest extends Dialog {
    TextField user;
    TextField pass;
    modeTest (DialogHandler parent) {
        super ((Frame)parent, "Mode Test", true);
        add ("North", new Label ("Please enter username/password"));
        Panel left = new Panel ();
        left.setLayout (new BorderLayout ());
        left.add ("North", new Label ("Username"));
        left.add ("South", new Label ("Password"));
        add ("West", left);
        Panel right = new Panel ();
        right.setLayout (new BorderLayout ());
        user = new TextField (15);
        pass = new TextField (15);
        pass.setEchoCharacter ('*');
        right.add ("North", user);
        right.add ("South", pass);
        add ("East", right);
        add ("South", new Button ("Okay"));
        resize (250, 125);
    }
    public boolean handleEvent (Event e) {
        if (e.id == Event.WINDOW_DESTROY) {
            dispose();
            return true;
        } else if ((e.target instanceof Button) &amp;&amp;
             (e.id == Event.ACTION_EVENT)) {
            ((DialogHandler)getParent ()).dialogDoer(e.arg);
        }
        return super.handleEvent (e);
    }
}
public class modeFrame extends Frame implements DialogHandler {
    modeTest d;
    modeFrame (String s) {
        super (s);
        resize (100, 100);
        d = new modeTest (this);
        d.show ();
    }
    public static void main (String []args) {
        Frame f = new modeFrame ("Frame");
    }
    public boolean handleEvent (Event e) {
        if (e.id == Event.WINDOW_DESTROY) {
            hide();
            dispose();
            System.exit (0);
        }
        return super.handleEvent (e);
    }
    public void dialogDoer(Object o) {
        d.dispose();
        add ("North", new Label (d.user.getText()));
        add ("South", new Label (d.pass.getText()));
        show ();
    }
}
</PRE>
</DIV>

</DIV>

<p class=para>
Since the Java 1.1 modal <tt class=literal>Dialog</tt> 
blocks the calling <tt class=literal>Frame</tt> appropriately, 
the overhead of the <tt class=literal>DialogHandler</tt> 
interface is not necessary and all the work can be combined into the <tt class=literal>main()</tt> 
method, as shown in the following: 

<div class=screen>
<p>
<pre>
// only reliable in Java 1.1
import java.awt.*;
class modeTest11 extends Dialog {
    TextField user;
    TextField pass;
    modeTest11 (Frame parent) {
        super (parent, "Mode Test", true);
        add ("North", new Label ("Please enter username/password"));
        Panel left = new Panel ();
        left.setLayout (new BorderLayout ());
        left.add ("North", new Label ("Username"));
        left.add ("South", new Label ("Password"));
        add ("West", left);
        Panel right = new Panel ();
        right.setLayout (new BorderLayout ());
        user = new TextField (15);
        pass = new TextField (15);
        pass.setEchoCharacter ('*');
        right.add ("North", user);
        right.add ("South", pass);
        add ("East", right);
        add ("South", new Button ("Okay"));
        resize (250, 125);
    }
    public boolean handleEvent (Event e) {
        if (e.id == Event.WINDOW_DESTROY) {
            dispose();
            return true;
        } else if ((e.target instanceof Button) &amp;&amp;
             (e.id == Event.ACTION_EVENT)) {
            hide();
        }
        return super.handleEvent (e);
    }
}
public class modeFrame11 extends Frame {
    modeFrame11 (String s) {
        super (s);
        resize (100, 100);
    }
    public static void main (String []args) {
        Frame f = new modeFrame11 ("Frame");
        modeTest11 d;
        d = new modeTest11 (f);
        d.show ();
        d.dispose();
        f.add ("North", new Label (d.user.getText()));
        f.add ("South", new Label (d.pass.getText()));
        f.show ();
    }
    public boolean handleEvent (Event e) {
        if (e.id == Event.WINDOW_DESTROY) {
            hide();
            dispose();
            System.exit (0);
        }
        return super.handleEvent (e);
    }
}
</PRE>
</DIV>

<p class=para>
The remainder of the code is virtually identical. The most significant 
difference is that the dialog's <tt class=literal>handleEvent()</tt>method 
just hides the dialog, rather than calling <tt class=literal>DialogHandler.dialogDoer()</tt>. 

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch06_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Frames</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>FileDialog</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
