<html>
<head>
<title>[Chapter 1] 1.3 Layouts</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:21:32 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 1<br>Abstract Window Toolkit Overview</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch01_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-1-SECT-3">1.3 Layouts</A></h2>

<p class=para>
<a name="CH01.LAY"></A><a name="CH01.LAY2"></A>Layouts allow you to format components on the screen in a platform-independent 
way. Without layouts, you would be forced to place components at explicit 
locations on the screen, creating obvious problems for programs that need 
to run on multiple platforms. There's no guarantee that a <tt class=literal>TextArea</tt> 
or a <tt class=literal>Scrollbar</tt> or any other 
component will be the same size on each platform; in fact, you can bet 
they won't be. In an effort to make your Java creations portable 
across multiple platforms, Sun created a <tt class=literal>LayoutManager</tt> 
interface that defines methods to reformat the screen based on the current 
layout and component sizes. Layout managers try to give programs a consistent 
and reasonable appearance, regardless of the platform, the screen size, 
or actions the user might take. 

<p class=para>
The standard JDK provides five classes that implement 
the <tt class=literal>LayoutManager</tt> interface. 
They are <tt class=literal>FlowLayout</tt>, <tt class=literal>GridLayout</tt>, 
<tt class=literal>BorderLayout</tt>, <tt class=literal>CardLayout</tt>, 
and <tt class=literal>GridBagLayout</tt>. All of these 
layouts are covered in much greater detail in <a href="ch07_01.htm">Chapter 7, <i>Layouts</i></A>. This chapter 
also discusses how to create complex layouts by combining layout managers 
and how to write your own <tt class=literal>LayoutManager</tt>. 
The Java 1.1 JDK includes the <tt class=literal>LayoutManager2</tt> 
interface. This interface extends the <tt class=literal>LayoutManager</tt> 
interface for managers that provide constraint-based layouts. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-1-SECT-3.1">FlowLayout</A></h3>

<p class=para>
The <tt class=literal>FlowLayout</tt> is the default 
layout for the <tt class=literal>Panel</tt> class, 
which includes its most famous subclass, <tt class=literal>Applet</tt>. 
When you add components to the screen, they flow left to right (centered 
within the applet) based upon the order added and the width of the applet. 
When there are too many components to fit, they "wrap" to a 
new row, similar to a word processor with word wrap enabled. If you resize 
an applet, the components' flow will change based upon the new width 
and height. <a href="#JAWT-CH-1-FIG-11">Figure 1.11</A> shows an example both before 
and after resizing. <a href="ch07_02.htm">FlowLayout</A>
contains all the <tt class=literal>FlowLayout</tt> 
details. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-1-FIG-11">Figure 1.11: A FlowLayout before and after resizing</A></h4>


<p>
<img align=middle src="figs/jawt0111.gif" alt="[Graphic: Figure 1-11]" width=453 height=178 border=0>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-1-SECT-3.2">GridLayout</A></h3>

<p class=para>
The <tt class=literal>GridLayout</tt> is widely used 
for arranging components in rows and columns. As with <tt class=literal>FlowLayout</tt>, 
the order in which you add components is relevant. You start at row one, 
column one, move across the row until it's full, then continue on 
to the next row. However, unlike <tt class=literal>FlowLayout</tt>, 
the underlying components are resized to fill the row-column area, if possible. 
<tt class=literal>GridLayout</tt> can reposition or 
resize objects after adding or removing components. Whenever the area is 
resized, the components within it are resized. <a href="#JAWT-CH-1-FIG-12">Figure 1.12</A> 
shows an example before and after resizing. <a href="ch07_04.htm">GridLayout</A>
contains all the details about <tt class=literal>GridLayout</tt>. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-1-FIG-12">Figure 1.12: A GridLayout before and after resizing</A></h4>


<p>
<img align=middle src="figs/jawt0112.gif" alt="[Graphic: Figure 1-12]" width=453 height=178 border=0>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-1-SECT-3.3">BorderLayout</A></h3>

<p class=para>
<tt class=literal>BorderLayout</tt> is one of the 
more unusual layouts provided. It is the default layout for <tt class=literal>Window</tt>, 
along with its children, <tt class=literal>Frame</tt> 
and <tt class=literal>Dialog</tt>. <tt class=literal>BorderLayout</tt> 
provides five areas to hold components. These areas are named after the 
four different borders of the screen, <tt class=literal>North</tt>, 
<tt class=literal>South</tt>, <tt class=literal>East</tt>, 
and <tt class=literal>West</tt>, with 
any remaining space going into the <tt class=literal>Center</tt> 
area. When you add a component to the layout, you must specify which area 
to place it in. The order in which components are added to the screen is 
not important, although you can have only one component in each area. 
<a href="#JAWT-CH-1-FIG-13">Figure 1.13</A> shows a <tt class=literal>BorderLayout</tt> that has one button 
in each area, before and after resizing. <a href="ch07_03.htm">BorderLayout</A>
covers the details of the <tt class=literal>BorderLayout</tt>. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-1-FIG-13">Figure 1.13: A BorderLayout</A></h4>


<p>
<img align=middle src="figs/jawt0113.gif" alt="[Graphic: Figure 1-13]" width=503 height=178 border=0>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-1-SECT-3.4">CardLayout</A></h3>

<p class=para>
The <tt class=literal>CardLayout</tt> is a bit on 
the strange side. A <tt class=literal>CardLayout</tt> 
usually manages several components, displaying one of them at a time and 
hiding the rest. All the components are given the same size. Usually, the 
<tt class=literal>CardLayout</tt> manages a group 
of <tt class=literal>Panels</tt> (or some other container), 
and each <tt class=literal>Panel</tt> contains several 
components of its own. With a little work, you can use the <tt class=literal>CardLayout</tt> 
to create tabbed dialog boxes or property sheets, which are not currently 
part of AWT. <tt class=literal>CardLayout</tt> lets 
you assign names to the components it is managing and lets you jump to 
a component by name. You can also cycle through components in order. <a href="#JAWT-CH-1-FIG-11">Figure 1.11</A>, <a href="#JAWT-CH-1-FIG-12">Figure 1.12</A>, and <a href="#JAWT-CH-1-FIG-13">Figure 1.13</A> show multiple cards controlled by a single <tt class=literal>CardLayout</tt>. 
Selecting the <tt class=literal>Choice</tt> button 
displays a different card. <a href="ch07_05.htm">CardLayout</A> 
discusses the details of <tt class=literal>CardLayout</tt>. 

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-1-SECT-3.5">GridBagLayout</A></h3>

<p class=para>
<tt class=literal>GridBagLayout</tt> is the most sophisticated 
and complex of the layouts provided in the development kit. With the <tt class=literal>GridBagLayout</tt>, 
you can organize components in multiple rows and columns, stretch specific 
rows or columns when space is available, and anchor objects in different 
corners. You provide all the details of each component through instances 
of the <tt class=literal>GridBagConstraints</tt> class. 
<a href="#JAWT-CH-1-FIG-14">Figure 1.14</A> shows an example of a <tt class=literal>GridBagLayout</tt>. 
<tt class=literal>GridBagLayout</tt> and <tt class=literal>GridBagConstraints</tt> 
are discussed in <a href="ch07_06.htm">GridBagLayout</A> and <a href="ch07_07.htm">GridBagConstraints</A>. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-1-FIG-14">Figure 1.14: A GridBagLayout</A></h4>


<p>
<img align=middle src="figs/jawt0114.gif" alt="[Graphic: Figure 1-14]" width=117 height=105 border=0>

</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch01_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Peers</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Containers</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
