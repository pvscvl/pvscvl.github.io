<html>
<head>
<title>[Chapter 2] 2.7 Image</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:25:08 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 2<br>Simple Graphics</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch02_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-2-SECT-7">2.7 Image</A></h2>

<p class=para>
<a name="CH02.IMAGE2"></A>An <tt class=literal>Image</tt> is a displayable object 
maintained in memory. AWT has built-in support for reading files in GIF 
and JPEG format, including GIF89a animation. Netscape 
Navigator, Internet Explorer, HotJava, and Sun's 
JDK also understand the XBM image format. Images are loaded 
from the filesystem or network by the <tt class=literal>getImage()</tt> 
method of either <tt class=literal>Component</tt> 
or <tt class=literal>Toolkit</tt>, drawn onto the 
screen with <tt class=literal>drawImage()</tt> from 
<tt class=literal>Graphics</tt>, and manipulated by 
several objects within the <tt class=literal>java.awt.image</tt> 
package. <a href="#JAWT-CH-2-FIG-15">Figure 2.15</A> shows an <tt class=literal>Image</tt>. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-2-FIG-15">Figure 2.15: An Image</A></h4>


<p>
<img align=middle src="figs/jawt0215.gif" alt="[Graphic: Figure 2-15]" width=202 height=202 border=0>

</DIV>

<p class=para>
<tt class=literal>Image</tt> is an abstract class 
implemented by many different platform-specific classes. The system that 
runs your program will provide an appropriate implementation; you do not 
need to know anything about the platform-specific classes, because the 
<tt class=literal>Image</tt> class completely defines 
the API for working with images. If you're curious, the platform-specific packages used by the JDK are: 

<p>
<ul class=itemizedlist>
<li class=listitem><tt class=literal>sun.awt.win32.Win32Image</tt> 
on Java 1.0 Windows NT/95 platforms

<p>
<li class=listitem><tt class=literal>sun.awt.windows.WImage</tt> 
on Java 1.1 Windows NT/95 platforms

<p>
<li class=listitem><tt class=literal>sun.awt.motif.X11Image</tt> 
on UNIX/Motif platforms

<p>
<li class=listitem><tt class=literal>sun.awt.macos.MacImage</tt> 
on the Macintosh

<p>
</UL>
<p class=para>
This section covers only the <tt class=literal>Image</tt> 
object itself. AWT also includes a package named <tt class=literal>java.awt.image</tt> 
that includes more advanced image processing utilities. The classes in 
<tt class=literal>java.awt.image</tt> are covered 
in <a href="ch12_01.htm">Chapter 12, <i>Image Processing</i></A>. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-2-SECT-7.1">Image Methods</A></h3>Constants

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static final Object UndefinedProperty </I><br>
<dd>

<p class=para>
In Java 1.0, the sole constant of <tt class=literal>Image</tt> 
is <tt class=literal>UndefinedProperty</tt>. It is 
used as a return value from the <tt class=literal>getProperty()</tt> 
method to indicate that the requested property is unavailable. </DL>
<p class=para>
Java 1.1 introduces the <tt class=literal>getScaledInstance()</tt> 
method. The final parameter to the method is a set of hints to tell the 
method how best to scale the image. The following constants provide possible 
values for this parameter. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static final int SCALE_DEFAULT <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>SCALE_DEFAULT</tt> hint should 
be used alone to tell <tt class=literal>getScaledInstance()</tt> 
to use the default scaling algorithm. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int SCALE_FAST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>SCALE_FAST</tt> hint tells <tt class=literal>getScaledInstance()</tt> 
that speed takes priority over smoothness. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int SCALE_SMOOTH <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>SCALE_SMOOTH</tt> hint tells 
<tt class=literal>getScaledInstance()</tt> that smoothness 
takes priority over speed. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int SCALE_REPLICATE <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>SCALE_REPLICATE</tt> hint tells 
<tt class=literal>getScaledInstance()</tt> to use 
<tt class=literal>ReplicateScaleFilter</tt> or a reasonable 
alternative provided by the toolkit. <tt class=literal>ReplicateScaleFilter</tt> 
is discussed in <a href="ch12_01.htm">Chapter 12, <i>Image Processing</i></A>. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int SCALE_AREA_AVERAGING <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>SCALE_AREA_AVERAGING</tt> hint tells 
<tt class=literal>getScaledInstance()</tt> to use 
<tt class=literal>AreaAveragingScaleFilter</tt> or a reasonable 
alternative provided by the toolkit. <tt class=literal>AreaAveragingScaleFilter</tt> 
is discussed in <a href="ch12_01.htm">Chapter 12, <i>Image Processing</i></A>. </DL>
Constructors

<p class=para>
There are no constructors for <tt class=literal>Image</tt>. 
You get an <tt class=literal>Image</tt> object to 
work with by using the <tt class=literal>getImage()</tt> 
method of <tt class=literal>Applet</tt> (in an applet), 
<tt class=literal>Toolkit</tt> (in an application), 
or the <tt class=literal>createImage()</tt> method 
of <tt class=literal>Component</tt> or <tt class=literal>Toolkit</tt>. 
<tt class=literal>getImage()</tt> uses a separate 
thread to fetch the image. The thread starts when you call <tt class=literal>drawImage()</tt>, 
<tt class=literal>prepareImage()</tt>, or any other 
method that requires image information. <tt class=literal>getImage()</tt> 
returns immediately. You can also use the <tt class=literal>MediaTracker</tt> 
class to force an image to load before it is needed. <tt class=literal>MediaTracker</tt> 
is discussed in the next section. Characteristics

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public abstract int getWidth (ImageObserver observer) </I><br>
<dd>

<p class=para>
The <tt class=literal>getWidth()</tt> method returns 
the width of the image object. The width may not be available if the image 
has not started loading; in this case, <tt class=literal>getWidth()</tt> 
returns -1. An image's size is available long before loading is complete, 
so it is often useful to call <tt class=literal>getWidth()</tt> 
while the image is loading. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract int getHeight (ImageObserver observer) </I><br>
<dd>

<p class=para>
The <tt class=literal>getHeight()</tt> method returns 
the height of the image object. The height may not be available if the 
image has not started loading; in this case, the <tt class=literal>getHeight()</tt> method 
returns -1. An image's size is available long before loading is complete, 
so it is often useful to call <tt class=literal>getHeight()</tt> 
while the image is loading. </DL>
Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Image getScaledInstance (int width, int height, int hints) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getScaledInstance()</tt> method 
enables you to generate scaled versions of images before they are needed. 
Prior to Java 1.1, it was necessary to tell the <tt class=literal>drawImage()</tt> 
method to do the scaling. However, this meant that scaling didn't take place 
until you actually tried to draw the image. Since scaling takes time, drawing 
the image required more time; the net result was degraded appearance. With 
Java 1.1, you can generate scaled copies of images before drawing them; 
then you can use a version of <tt class=literal>drawImage()</tt> 
that does not do scaling, and therefore is much quicker. 

<p class=para>
The <tt class=literal>width</tt> parameter of <tt class=literal>getScaledInstance()</tt> 
is the new width of the image. The <tt class=literal>height</tt> 
parameter is the new height of the image. If either is -1, the scaling 
retains the aspect ratio of the original image. For instance, if the original 
image size was 241 by 72 pixels, and <tt class=literal>width</tt> 
and <tt class=literal>height</tt> were 100 and -1, 
the new image size would be 100 by 29 pixels. If both width and height 
are -1, the <tt class=literal>getScaledInstance()</tt> 
method retains the image's original size. The <tt class=literal>hints</tt> 
parameter is one of the <tt class=literal>Image</tt> 
class constants. </DL>
<p class=para>
<div class=screen>
<p>
<pre>
Image i = getImage (getDocumentBase(), "rosey.jpg");
Image j = i.getScaledInstance (100, -1, Image.SCALE_FAST);
</PRE>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public abstract ImageProducer getSource () </I><br>
<dd>

<p class=para>
The <tt class=literal>getSource()</tt> method returns 
the image's producer, which is an object of type <tt class=literal>ImageProducer</tt>. 
This object represents the image's source. Once you have the <tt class=literal>ImageProducer</tt>, 
you can use it to do additional image processing; for example, you could 
create a modified version of the original image by using a <tt class=literal>FilteredImageSource</tt>. 
Image producers and image filters are covered in <a href="ch12_01.htm">Chapter 12, <i>Image Processing</i></A>. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract Graphics getGraphics () </I><br>
<dd>

<p class=para>
The <tt class=literal>getGraphics()</tt> method returns 
the image's graphics context. The method <tt class=literal>getGraphics()</tt> 
works only for <tt class=literal>Image</tt> objects 
created in memory with <tt class=literal>Component.createImage (int, int)</tt>. 
If the image came from a URL or a file (i.e., from <tt class=literal>getImage()</tt>), 
<tt class=literal>getGraphics()</tt> throws the run-time exception 
<tt class=literal>ClassCastException</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract Object getProperty (String name, ImageObserver observer) </I><br>
<dd>

<p class=para>
The <tt class=literal>getProperty()</tt> method interacts 
with the image's property list. An object representing the requested 
property <tt class=literal>name</tt> will be returned 
for <tt class=literal>observer</tt>. <tt class=literal>observer</tt> 
represents the <tt class=literal>Component</tt> on 
which the image is rendered. If the property <tt class=literal>name</tt> 
exists but is not available yet, <tt class=literal>getProperty()</tt> 
returns <tt class=literal>null</tt>. If the property name does not exist, the <tt class=literal>getProperty()</tt> 
method returns the <tt class=literal>Image.UndefinedProperty</tt> 
object. 

<p class=para>
Each image type has its own property list. A property named <tt class=literal>comment</tt> 
stores a comment <tt class=literal>String</tt> from 
the image's creator. The <tt class=literal>CropImageFilter</tt> 
adds a property named <tt class=literal>croprect</tt>. 
If you ask <tt class=literal>getProperty()</tt> for 
an image's <tt class=literal>croprect</tt> 
property, you get a <tt class=literal>Rectangle</tt> 
that shows how the original image was cropped. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void flush() </I><br>
<dd>

<p class=para>
The <tt class=literal>flush()</tt> method resets an 
image to its initial state. Assume you acquire an image over the network 
with <tt class=literal>getImage()</tt>. The first 
time you display the image, it will be loaded over the network. If you 
redisplay the image, AWT normally reuses the original image. However, if 
you call <tt class=literal>flush()</tt> before redisplaying 
the image, AWT fetches the image again from its source. (Images created 
with <tt class=literal>createImage()</tt> aren't 
affected.) The <tt class=literal>flush()</tt> method 
is useful if you expect images to change while your program is running. 
The following program demonstrates <tt class=literal>flush()</tt>. 
It reloads and displays the file <i class=emphasis>flush.gif</I> 
every time you click the mouse. If you change the file <i class=emphasis>flush.gif</I> 
and click on the mouse, you will see the new file. </DL>
<p class=para>
<div class=screen>
<p>
<pre>
import java.awt.*;
public class flushMe extends Frame {
    Image im;
    flushMe () {
        super ("Flushing");
        im = Toolkit.getDefaultToolkit().getImage ("flush.gif");
        resize (175, 225);
    }
    public void paint (Graphics g) {
        g.drawImage (im, 0, 0, 175, 225, this);
    }
    public boolean mouseDown (Event e, int x, int y) {
        im.flush();
        repaint();
        return true;
    }
    public static void main (String [] args) {
        Frame f = new flushMe ();
        f.show();
    }
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-2-SECT-7.2">Simple Animation</A></h3>

<p class=para>
<a name="CH02.ANIM1"></A><a name="CH02.ANIM2"></A>Creating simple animation sequences in Java is easy. Load a series of images, 
then display the images one at a time. <a href="#JAWT-CH-2-EX-1">Example 2.1</A> is 
an application that displays a simple animation sequence. <a href="#JAWT-CH-2-EX-2">Example 2.2</A> 
is an applet that uses a thread to run the application. These programs 
are far from ideal. If you try them, you'll probably notice some 
flickering or missing images. We discuss how to fix these problems shortly. 

<div class=example>
<h4 class=example><a class="TITLE" name="JAWT-CH-2-EX-1">Example 2.1: Animation Application</A></h4>

<div class=screen>
<p>
<pre>
import java.awt.*;
public class Animate extends Frame {
    static Image im[];
    static int numImages = 12;
    static int counter=0;
    Animate () {
        super ("Animate");
    }
    public static void main (String[] args) {
        Frame f = new Animate();
        f.resize (225, 225);
        f.show();
        im = new Image[numImages];
        for (int i=0;i&lt;numImages;i++) {
            im[i] = Toolkit.getDefaultToolkit().getImage ("clock"+i+".jpg");
        }
    }
    public synchronized void paint (Graphics g) {
        g.translate (insets().left, insets().top);
        g.drawImage (im[counter], 0, 0, this);
        counter++;
        if (counter == numImages)
            counter = 0;
        repaint (200);
    }
}
</PRE>
</DIV>

</DIV>

<p class=para>
This application displays images with the name <i class=emphasis>clock</I>n<i class=emphasis>.jpg</I>, 
where <i class=emphasis>n</I> is a number between 
0 and 11. It fetches the images using the <tt class=literal>getImage()</tt> 
method of the <tt class=literal>Toolkit</tt> class--hence, 
the call to <tt class=literal>Toolkit.getDefaultToolkit()</tt>, 
which gets a <tt class=literal>Toolkit</tt> object 
to work with. The <tt class=literal>paint()</tt> method 
displays the images in sequence, using <tt class=literal>drawImage()</tt>. 
<tt class=literal>paint()</tt> ends with a call to 
<tt class=literal>repaint(200)</tt>, which schedules 
another call to <tt class=literal>paint()</tt> in 
200 milliseconds. 

<p class=para>
The <tt class=literal>AnimateApplet</tt>, whose code 
is shown in <a href="#JAWT-CH-2-EX-2">Example 2.2</A>, does more or less the same thing. It is able to use the 
<tt class=literal>Applet.getImage()</tt> method. A 
more significant difference is that the applet creates a new thread to 
control the animation. This thread calls <tt class=literal>sleep(200)</tt>, 
followed by <tt class=literal>repaint()</tt>, to display 
a new image every 200 milliseconds. 

<div class=example>
<h4 class=example><a class="TITLE" name="JAWT-CH-2-EX-2">Example 2.2: Multithreaded Animation Applet</A></h4>

<div class=screen>
<p>
<pre>
import java.awt.*;
import java.applet.*;
public class AnimateApplet extends Applet implements Runnable {
    static Image im[];
    static int numImages = 12;
    static int counter=0;
    Thread animator;
    public void init () {
        im = new Image[numImages];
        for (int i=0;i&lt;numImages;i++)
            im[i] = getImage (getDocumentBase(), "clock"+i+".jpg");
    }
    public void start() {
        if (animator == null) {
            animator = new Thread (this);
            animator.start ();
        }
    }
    public void stop() {
        if ((animator != null) &amp;&amp; (animator.isAlive())) {
            animator.stop();
            animator = null;
        }
    }
    public void run () {
        while (animator != null) {
            try {
                animator.sleep(200);
                repaint ();
                counter++;
                if (counter==numImages)
                    counter=0;
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
    }
    public void paint (Graphics g) {
        g.drawImage (im[counter], 0, 0, this);
    }
}
</PRE>
</DIV>

</DIV>

<p class=para>
One quick fix will help the flicker problem in both of these examples. 
The <tt class=literal>update()</tt> method (which 
is inherited from the <tt class=literal>Component</tt> 
class) normally clears the drawing area and calls <tt class=literal>paint()</tt>. 
In our examples, clearing the drawing area is unnecessary and, worse, results 
in endless flickering; on slow machines, you'll see <tt class=literal>update()</tt> 
restore the background color between each image. It's a simple matter 
to override <tt class=literal>update()</tt> so that 
it doesn't clear the drawing area first. Add the following method to 
both of the previous examples: 

<p class=para>
<div class=screen>
<p>
<pre>
public void update (Graphics g) {
    paint (g);
}
</PRE>
</DIV>

<p class=para>
Overriding <tt class=literal>update()</tt> helps, 
but the real solution to our problem is double buffering, which we'll 
turn to next. 

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-2-SECT-7.3">Double Buffering</A></h3>

<p class=para>
<a name="CH02.DOUBLE1"></A><a name="CH02.DOUBLE2"></A><a name="CH02.DOUBLE3"></A>Double buffering means drawing to an offscreen graphics context and then 
displaying this graphics context to the screen in a single operation. So 
far, we have done all our drawing directly on the screen--that is, to 
the graphics context provided by the <tt class=literal>paint()</tt> 
method. As your programs grow more complex, <tt class=literal>paint()</tt> 
gets bigger and bigger, and it takes more time and resources to update 
the entire drawing area. On a slow machine, the user will see the individual 
drawing operations take place, which will make your program look slow and 
clunky. By using the double buffering technique, you can take your time 
drawing to another graphics context that isn't displayed. When you 
are ready, you tell the system to display the completely new image at once. 
Doing so eliminates the possibility of seeing partial screen updates and 
flickering. 

<p class=para>
The first thing you need to do is create an image as your drawing canvas. 
To get an image object, call the <tt class=literal>createImage()</tt> 
method. <tt class=literal>createImage()</tt> is a 
method of the <tt class=literal>Component</tt> class, 
which we will discuss in <a href="ch05_01.htm">Chapter 5, <i>Components</i></A>. Since <tt class=literal>Applet</tt> 
extends <tt class=literal>Component</tt>, you can 
call <tt class=literal>createImage()</tt> within an 
applet. When creating an application and extending <tt class=literal>Frame</tt>, 
<tt class=literal>createImage()</tt> returns <tt class=literal>null</tt> 
until the <tt class=literal>Frame</tt>'s peer 
exists. To make sure that the peer exists, call <tt class=literal>addNotify()</tt> 
in the constructor, or make sure you call <tt class=literal>show()</tt> 
before calling <tt class=literal>createImage()</tt>. 
Here's the call to the <tt class=literal>createImage()</tt> 
method that we'll use to get an <tt class=literal>Image</tt> 
object: 

<p class=para>
<div class=screen>
<p>
<pre>
Image im = createImage (300, 300); // width and height
</PRE>
</DIV>

<p class=para>
Once you have an <tt class=literal>Image</tt> object, 
you have an area you can draw on. But how do you draw on it? There are 
no drawing methods associated with <tt class=literal>Image</tt>; 
they're all in the <tt class=literal>Graphics</tt> 
class. So we need to get a <tt class=literal>Graphics</tt> 
context from the <tt class=literal>Image</tt>. To 
do so, call the <tt class=literal>getGraphics()</tt> 
method of the <tt class=literal>Image</tt> class, 
and use that <tt class=literal>Graphics</tt> context 
for your drawing: 

<p class=para>
<div class=screen>
<p>
<pre>
Graphics buf = im.getGraphics();
</PRE>
</DIV>

<p class=para>
Now you can do all your drawings with <tt class=literal>buf</tt>. To display the drawing, the 
<tt class=literal>paint()</tt> method only needs to 
call <tt class=literal>drawImage(im, . . .)</tt>. 
Note the hidden connection between the <tt class=literal>Graphics</tt> 
object, <tt class=literal>buf</tt>, and the <tt class=literal>Image</tt> 
you are creating, <tt class=literal>im</tt>. You draw 
onto <tt class=literal>buf</tt>; then you use <tt class=literal>drawImage()</tt> 
to render the image on the on-screen <tt class=literal>Graphics</tt> 
context within <tt class=literal>paint()</tt>. 

<p class=para>
Another feature of buffering is that you do not have redraw the entire 
image with each call to <tt class=literal>paint()</tt>. 
The buffered image you're working on remains in memory, and you can 
add to it at will. If you are drawing directly to the screen, you would 
have to recreate the entire drawing each time <tt class=literal>paint()</tt> 
is called; remember, <tt class=literal>paint()</tt> 
always hands you a completely new <tt class=literal>Graphics</tt> 
object. <a href="#JAWT-CH-2-FIG-16">Figure 2.16</A> shows how double buffering 
works. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-2-FIG-16">Figure 2.16: Double buffering</A></h4>


<p>
<img align=middle src="figs/jawt0216.gif" alt="[Graphic: Figure 2-16]" width=202 height=202 border=0>

</DIV>

<p class=para>
<a href="#JAWT-CH-2-EX-3">Example 2.3</A> puts it all together for you. It plays a 
game, with one move drawn to the screen each cycle. We still do the drawing 
within <tt class=literal>paint()</tt>, but we draw 
into an offscreen buffer; that buffer is copied onto the screen by <tt class=literal>g.drawImage(im, 
0, 0, this)</tt>. If we were doing a lot of drawing, 
it would be a good idea to move the drawing operations into a different 
thread, but that would be overkill for this simple applet. 

<div class=example>
<h4 class=example><a class="TITLE" name="JAWT-CH-2-EX-3">Example 2.3: Double Buffering--Who Won?</A></h4>

<div class=screen>
<p>
<pre>
import java.awt.*;
import java.applet.*;
public class buffering extends Applet {
    Image im;
    Graphics buf;
    int pass=0;
    public void init () {
        // Create buffer
        im = createImage (size().width, size().height);
        // Get its graphics context
        buf = im.getGraphics();
        // Draw Board Once
        buf.setColor (Color.red);
        buf.drawLine (  0,  50, 150,  50);
        buf.drawLine (  0, 100, 150, 100);
        buf.drawLine ( 50,   0,  50, 150);
        buf.drawLine (100,   0, 100, 150);
        buf.setColor (Color.black);
    }
    public void paint (Graphics g) {
        // Draw image - changes are written onto buf
        g.drawImage (im, 0, 0, this);
        // Make a move
        switch (pass) {
            case 0:
                buf.drawLine (50, 50, 100, 100);
                buf.drawLine (50, 100, 100, 50);
                break;
            case 1:
                buf.drawOval (0, 0, 50, 50);
                break;
            case 2:
                buf.drawLine (100, 0, 150, 50);
                buf.drawLine (150, 0, 100, 50);
                break;
            case 3:
                buf.drawOval (0, 100, 50, 50);
                break;
            case 4:
                buf.drawLine (0, 50, 50, 100);
                buf.drawLine (0, 100, 50, 50);
                break;
            case 5:
                buf.drawOval (100, 50, 50, 50);
                break;
            case 6:
                buf.drawLine (50,  0, 100, 50);
                buf.drawLine (50, 50, 100,  0);
                break;
            case 7:
                buf.drawOval (50, 100, 50, 50);
                break;
            case 8:
                buf.drawLine (100, 100, 150, 150);
                buf.drawLine (150, 100, 100, 150);
                break;
        }
        pass++;
        if (pass &lt;= 9)
            repaint (500);
    }
}
</PRE>
</DIV>

</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch02_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Polygon</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>MediaTracker</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
