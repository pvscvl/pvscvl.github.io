<html>
<head>
<title>[Chapter 10] 10.7 MenuBar</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:46:34 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 10<br>Would You Like to Choose from the Menu?</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch10_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-10-SECT-7">10.7 MenuBar</A></h2>

<p class=para>
<a name="CH10.MENU3"></A><a name="CH10.MENU4"></A>The <tt class=literal>MenuBar</tt> is the component 
you add to the <tt class=literal>Frame</tt> that is 
displayed on the top line of the <tt class=literal>Frame</tt>; 
the <tt class=literal>MenuBar</tt> contains menus. 
A <tt class=literal>Frame</tt> can display only one 
<tt class=literal>MenuBar</tt> at a time. However, 
you can change the <tt class=literal>MenuBar</tt> 
based on the state of the program so that different menus can appear at 
different points. The <tt class=literal>MenuBar</tt> 
class extends <tt class=literal>MenuComponent</tt> 
and implements the <tt class=literal>MenuContainer</tt> 
interface. 

<p class=para>
A <tt class=literal>MenuBar</tt> can be used only 
as a child component of a <tt class=literal>Frame</tt>. 
An applet cannot have a <tt class=literal>MenuBar</tt> 
attached to it, unless you implement the whole thing yourself. Normally, 
you cannot modify the <tt class=literal>MenuBar</tt> 
of the applet holder (the browser), unless it is Java based. In other 
words, you cannot affect the menus of Netscape Navigator, but you can customize 
<i class=emphasis>appletviewer</I> and HotJava, as shown in the following code with the result 
shown in <a href="#JAWT-CH-10-FIG-4">Figure 10.4</A>. The <tt class=literal>getTopLevelParent()</tt> 
method was introduced in <a href="ch06_04.htm">Window</A> with <tt class=literal>Window</tt>. 

<div class=screen>
<p>
<pre>
import java.awt.*;
public class ChangeMenu extends java.applet.Applet {
    public void init ()  {
        Frame f = ComponentUtilities.getTopLevelParent(this);
        if (f != null) {
            MenuBar mb = f.getMenuBar();
            Menu m = new Menu ("Cool");
            mb.add (m);
        }
    }
}
</PRE>
</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-10-FIG-4">Figure 10.4: Customizing appletviewer's MenuBar</A></h4>


<p>
<img align=middle src="figs/jawt1004.gif" alt="[Graphic: Figure 10-4]" width=503 height=136 border=0>

</DIV>

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
When you add a <tt class=literal>MenuBar</tt> 
to a <tt class=literal>Frame</tt>, it takes up space 
that is part of the drawing area. You need to get the top insets to find 
out how much space is occupied by the <tt class=literal>MenuBar</tt> 
and be careful not to draw under it. If you do, the <tt class=literal>MenuBar</tt> 
will cover what you draw. 
</blockquote><p>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-10-SECT-7.1">MenuBar Methods</A></h3>Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public MenuBar() </I><br>
<dd>

<p class=para>
The <tt class=literal>MenuBar</tt> constructor creates 
an empty <tt class=literal>MenuBar</tt>. To add menus 
to the <tt class=literal>MenuBar</tt>, use the <tt class=literal>add()</tt>method. </DL>
Menus

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int getMenuCount () <img src="gifs/bstar.gif" alt="(New)" border=0></I><br><i class=emphasis>public int countMenus () <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>getMenuCount()</tt> method returns 
the number of top-level menus within the <tt class=literal>MenuBar</tt>. 

<p class=para>
<tt class=literal>countMenus()</tt> is the Java 1.0 
name for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public Menu getMenu (int index) </I><br>
<dd>

<p class=para>
The <tt class=literal>getMenu()</tt> method returns 
the <tt class=literal>Menu</tt> at position <tt class=literal>index</tt>. 
If <tt class=literal>index</tt> is invalid, <tt class=literal>getMenu()</tt> 
throws the run-time exception <tt class=literal>ArrayIndexOutOfBoundsException</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized Menu add (Menu m) </I><br>
<dd>

<p class=para>
The <tt class=literal>add()</tt> method puts choice 
<tt class=literal>m</tt> on the <tt class=literal>MenuBar</tt>. 
The label used to create <tt class=literal>m</tt> 
is displayed on the <tt class=literal>MenuBar</tt>. 
If <tt class=literal>m</tt> is already in another 
<tt class=literal>MenuBar</tt>, it is removed from 
it. The order of items added determines the order displayed on the <tt class=literal>MenuBar</tt>, 
with one exception: if a menu is designated as a help menu by <tt class=literal>setHelpMenu()</tt>, 
it is placed at the right end of the menu bar. Only a <tt class=literal>Menu</tt> 
can be added to a <tt class=literal>MenuBar</tt>; 
you can't add a <tt class=literal>MenuItem</tt>. 
In other words, a <tt class=literal>MenuItem</tt> has 
to lie under at least one menu. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void remove (int index) </I><br>
<dd>

<p class=para>
The <tt class=literal>remove()</tt> method removes 
the <tt class=literal>Menu</tt> at position <tt class=literal>index</tt> 
from the <tt class=literal>MenuBar</tt>. If <tt class=literal>index</tt> 
is invalid, <tt class=literal>remove()</tt> throws 
the <tt class=literal>ArrayIndexOutOfBoundsException</tt> run-time exception. 
<tt class=literal>index</tt> is zero based. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void remove (MenuComponent component) </I><br>
<dd>

<p class=para>
This version of <tt class=literal>remove()</tt> removes 
the menu <tt class=literal>component</tt> from the 
<tt class=literal>MenuBar</tt>. If <tt class=literal>component</tt> 
is not in <tt class=literal>MenuBar</tt>, nothing 
happens. The system calls this method when you add a new <tt class=literal>Menu</tt> 
to make sure it does not exist on another <tt class=literal>MenuBar</tt>. </DL>
Shortcuts

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public MenuItem getShortcutMenuItem (MenuShortcut shortcut) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getShortcutMenuItem()</tt> method 
retrieves the <tt class=literal>MenuItem</tt> associated 
with the <tt class=literal>MenuShortcut</tt> <tt class=literal>shortcut</tt>. 
If <tt class=literal>MenuShortcut</tt> does not exist 
for this <tt class=literal>Menu</tt>, the method returns 
<tt class=literal>null</tt>. <tt class=literal>getShortcutMenuItem()</tt> 
walks through the all submenus recursively to try to find <tt class=literal>shortcut</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized Enumeration shortcuts() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>shortcuts()</tt> method retrieves 
an <tt class=literal>Enumeration</tt> of all the <tt class=literal>MenuShortcut</tt> 
objects associated with this <tt class=literal>MenuBar</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void deleteShortcut (MenuShortcut shortcut) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>deleteShortcut()</tt> method 
removes <tt class=literal>MenuShortcut</tt> from the 
associated <tt class=literal>MenuItem</tt> in the 
<tt class=literal>MenuBar</tt>. If the shortcut is 
not associated with any menu item, nothing happens. </DL>
Help menus

<p class=para>
It is the convention on many platforms to display help menus as the last 
menu on the <tt class=literal>MenuBar</tt>. The <tt class=literal>MenuBar</tt> 
class lets you designate one of the menus as this special menu. The physical 
position of a help menu depends on the platform, but those giving special treatment to help menus place them on the right. A <tt class=literal>Menu</tt> 
designated as a help menu doesn't have to bear the label "Help"; 
the label is up to you. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Menu getHelpMenu () </I><br>
<dd>

<p class=para>
The <tt class=literal>getHelpMenu()</tt> method returns 
the <tt class=literal>Menu</tt> that has been designated 
as the help menu with <tt class=literal>setHelpMenu()</tt>. 
If the menu bar doesn't have a help menu, <tt class=literal>getHelpMenu()</tt> 
returns <tt class=literal>null</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void setHelpMenu (Menu m) </I><br>
<dd>

<p class=para>
The <tt class=literal>setHelpMenu()</tt> method sets 
the menu bar's help menu to <tt class=literal>m</tt>. 
This makes <tt class=literal>m</tt> the rightmost 
menu on the <tt class=literal>MenuBar</tt>, possibly 
right justified. If <tt class=literal>m</tt> is not 
already on the <tt class=literal>MenuBar</tt>, nothing 
happens. </DL>
Peers

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public synchronized void addNotify ()  </I><br>
<dd>

<p class=para>
The <tt class=literal>addNotify()</tt> method creates 
the <tt class=literal>MenuBar</tt> peer with 
all the menus on it, and in 
turn their menu items. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void removeNotify ()  </I><br>
<dd>

<p class=para>
The <tt class=literal>removeNotify()</tt> method destroys 
the peer of the <tt class=literal>MenuBar</tt> and 
removes it from the screen. The peers of the items on the <tt class=literal>MenuBar</tt> 
are also destroyed. </DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-10-SECT-7.2">MenuBar Events</A></h3>

<p class=para>
A <tt class=literal>MenuBar</tt> does not generate any events. 

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch10_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>CheckboxMenuItem</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Putting It All Together</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
