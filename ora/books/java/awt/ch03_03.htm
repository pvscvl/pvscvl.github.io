<html>
<head>
<title>[Chapter 3] 3.3 Color</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:27:27 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 3<br>Fonts and Colors</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch03_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-3-SECT-3">3.3 Color</A></h2>

<p class=para>
<a name="CH03.COLOR"></A>Not so long ago, color was a luxury; these days, color is a requirement. 
A program that uses only black and white seems hopelessly old fashioned. 
AWT's <tt class=literal>Color</tt> class lets 
you define and work with <tt class=literal>Color</tt> 
objects. When we discuss the <tt class=literal>Component</tt> 
class (see <a href="ch05_01.htm">Chapter 5, <i>Components</i></A>), you will see how to use these color objects, 
and our discussion of the <tt class=literal>SystemColor</tt> 
subclass (new to Java 1.1; discussed later in this chapter) shows you how to control 
the colors that are painted on the screen. 

<p class=para>
A few words of warning: while colors give you the opportunity to make visually 
pleasing applications, they also let you do things that are incredibly 
ugly. Resist the urge to go overboard with your use of color; it's 
easy to make something hideous when you are trying to use every color 
in the palette. Also, realize that colors are fundamentally platform dependent, 
and in a very messy way. Java lets you use the same <tt class=literal>Color</tt> 
objects on any platform, but it can't guarantee that every display 
will treat the color the same way; the result depends on everything from 
your software to the age of your monitor. What looks pink on 
one monitor may be red on another. Furthermore, when running in an environment 
with a limited palette, AWT picks the available color that is closest to 
what you requested. If you really care about appearance, there is no substitute 
for testing. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-3-SECT-3.1">Color Methods</A></h3><a name="CH03.COLORCLASS"></A>Constants

<p class=para>
The <tt class=literal>Color</tt> class has predefined constants 
(all of type <tt class=literal>public static final Color</tt>) for frequently 
used colors. These constants, their RGB values, and their HSB values 
(hue, saturation, brightness) are given in <a href="#JAWT-CH-3-TAB-1">Table 3.1</A>. 

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="JAWT-CH-3-TAB-1">Table 3.1: Comparison of RGB and HSB Colors</A></CAPTION>
<tr class=row>
<th align="left">Color</TH>
<th align="left">Red</TH>
<th align="left">Green</TH>
<th align="left">Blue</TH>
<th align="left">Hue</TH>
<th align="left">Saturation</TH>
<th align="left">Brightness</TH>
</TR>
<tr class=row>
<td align="left">black</TD>
<td align="left">0</TD>
<td align="left">0</TD>
<td align="left">0</TD>
<td align="left">0</TD>
<td align="left">0</TD>
<td align="left">0</TD>
</TR>
<tr class=row>
<td align="left">blue</TD>
<td align="left">0</TD>
<td align="left">0</TD>
<td align="left">255</TD>
<td align="left">.666667</TD>
<td align="left">1</TD>
<td align="left">1</TD>
</TR>
<tr class=row>
<td align="left">cyan</TD>
<td align="left">0</TD>
<td align="left">255</TD>
<td align="left">255</TD>
<td align="left">.5</TD>
<td align="left">1</TD>
<td align="left">1</TD>
</TR>
<tr class=row>
<td align="left">darkGray</TD>
<td align="left">64</TD>
<td align="left">64</TD>
<td align="left">64</TD>
<td align="left">0</TD>
<td align="left">0</TD>
<td align="left">.25098</TD>
</TR>
<tr class=row>
<td align="left">gray</TD>
<td align="left">128</TD>
<td align="left">128</TD>
<td align="left">128</TD>
<td align="left">0</TD>
<td align="left">0</TD>
<td align="left">.501961</TD>
</TR>
<tr class=row>
<td align="left">green</TD>
<td align="left">0</TD>
<td align="left">255</TD>
<td align="left">0</TD>
<td align="left">.333333</TD>
<td align="left">1</TD>
<td align="left">1</TD>
</TR>
<tr class=row>
<td align="left">lightGray</TD>
<td align="left">192</TD>
<td align="left">192</TD>
<td align="left">192</TD>
<td align="left">0</TD>
<td align="left">0</TD>
<td align="left">.752941</TD>
</TR>
<tr class=row>
<td align="left">magenta</TD>
<td align="left">255</TD>
<td align="left">0</TD>
<td align="left">255</TD>
<td align="left">.833333</TD>
<td align="left">1</TD>
<td align="left">1</TD>
</TR>
<tr class=row>
<td align="left">orange</TD>
<td align="left">255</TD>
<td align="left">200</TD>
<td align="left">0</TD>
<td align="left">.130719</TD>
<td align="left">1</TD>
<td align="left">1</TD>
</TR>
<tr class=row>
<td align="left">pink</TD>
<td align="left">255</TD>
<td align="left">175</TD>
<td align="left">175</TD>
<td align="left">0</TD>
<td align="left">.313726</TD>
<td align="left">1</TD>
</TR>
<tr class=row>
<td align="left">red</TD>
<td align="left">255</TD>
<td align="left">0</TD>
<td align="left">0</TD>
<td align="left">0</TD>
<td align="left">1</TD>
<td align="left">1</TD>
</TR>
<tr class=row>
<td align="left">white</TD>
<td align="left">255</TD>
<td align="left">255</TD>
<td align="left">255</TD>
<td align="left">0</TD>
<td align="left">0</TD>
<td align="left">1</TD>
</TR>
<tr class=row>
<td align="left">yellow</TD>
<td align="left">255</TD>
<td align="left">255</TD>
<td align="left">0</TD>
<td align="left">.166667</TD>
<td align="left">1</TD>
<td align="left">1</TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
These constants are used like any other class variable: for example, <tt class=literal>Color.red</tt> 
is a constant <tt class=literal>Color</tt> object 
representing the color red. Many other color constants are defined 
in the <tt class=literal>SystemColor</tt> class. Constructors

<p class=para>
When you're not using a predefined constant, you create <tt class=literal>Color</tt> 
objects by specifying the color's red, green, and blue components. 
Depending on which constructor you use, you can specify the components 
as integers between 0 and 255 (most intense) or as floating point intensities 
between 0.0 and 1.0 (most intense). The result is a 24-bit quantity that 
represents a color. The remaining 8 bits are used to represent transparency: 
that is, if the color is painted on top of something, does whatever was 
underneath show through? The <tt class=literal>Color</tt> 
class doesn't let you work with the transparency bits; all <tt class=literal>Color</tt> 
objects are opaque. However, you can use transparency when working with 
images; this topic is covered in <a href="ch12_01.htm">Chapter 12, <i>Image Processing</i></A>. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Color (int red, int green, int blue) </I><br>
<dd>

<p class=para>
This constructor is the most commonly used. You provide the specific <tt class=literal>red</tt>, 
<tt class=literal>green</tt>, and <tt class=literal>blue</tt> 
values for the color. Valid 
values for <tt class=literal>red</tt>, <tt class=literal>green</tt>, 
and <tt class=literal>blue</tt> are between 0 and 
255. The constructor examines only the low-order byte of the integer and 
ignores anything outside the range, including the sign bit. 

<p>
<dt class=varlistentry><i class=emphasis>public Color (int rgb) </I><br>
<dd>

<p class=para>
This constructor allows you to combine all three variables in one
parameter, <tt class=literal>rgb</tt>. Bits 16-23 represent the red
component, and bits 8-15 represent the green component. Bits
0-7 represent the blue component. Bits 24-31 are
ignored. Going from three bytes to one integer is fairly easy:</DL>
<p class=para>
<div class=screen>
<p>
<pre>
(((red &amp; 0xFF) &lt;&lt; 16 ) | ((green &amp; 0xFF) &lt;&lt; 8) | ((blue &amp; 0xFF) &lt;&lt; 0))
</PRE>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Color (float red, float green, float blue) </I><br>
<dd>

<p class=para>
This final constructor allows you to provide floating point values between 
0.0 and 1.0 for each of <tt class=literal>red</tt>, 
<tt class=literal>green</tt>, and <tt class=literal>blue</tt>. 
Values outside of this range yield unpredictable results. </DL>
Settings

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int getRed () </I><br>
<dd>

<p class=para>
The <tt class=literal>getRed()</tt> method retrieves 
the current setting for the red component of the color. 

<p>
<dt class=varlistentry><i class=emphasis>public int getGreen () </I><br>
<dd>

<p class=para>
The <tt class=literal>getGreen()</tt> method retrieves 
the current setting for the green component of the color. 

<p>
<dt class=varlistentry><i class=emphasis>public int getBlue () </I><br>
<dd>

<p class=para>
The <tt class=literal>getBlue()</tt> method retrieves 
the current setting for the blue component of the color. 

<p>
<dt class=varlistentry><i class=emphasis>public int getRGB () </I><br>
<dd>

<p class=para>
The <tt class=literal>getRGB()</tt> method retrieves 
the current settings for red, green, and blue in one combined value. Bits 
16-23 represent the red component. Bits 8-15 represent the green component. 
Bits 0-7 represent the blue component. Bits 24-31 are the transparency 
bits; they are always <tt class=literal>0xff</tt> (opaque) when using the default RGB <tt class=literal>ColorModel</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public Color brighter () </I><br>
<dd>

<p class=para>
The <tt class=literal>brighter()</tt> method creates 
a new <tt class=literal>Color</tt> that is somewhat 
brighter than the current color. This method is useful if you want to highlight 
something on the screen. </DL>
<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
Black does not get any brighter. 
</blockquote><p>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Color darker () </I><br>
<dd>

<p class=para>
The <tt class=literal>darker()</tt> method returns 
a new <tt class=literal>Color</tt> that is somewhat 
darker than the current color. This method is useful if you are trying 
to de-emphasize an object on the screen. If you are creating your own <tt class=literal>Component</tt>, 
you can use a <tt class=literal>darker()</tt> <tt class=literal>Color</tt> 
to mark it inactive. </DL>
Color properties<a name="CH03.PROP2"></A>

<p class=para>
<tt class=literal>Color</tt> properties are very similar 
to <tt class=literal>Font</tt> properties. You can 
use system properties (or resource files) to allow users to select colors 
for your programs. The settings have the form <tt class=literal>0xRRGGBB</tt>, 
where <tt class=literal>RR</tt> is the red component 
of the color, <tt class=literal>GG</tt> represents 
the green component, and <tt class=literal>BB</tt> 
represents the blue component. <tt class=literal>0x</tt> 
indicates that the number is in hexadecimal. If you (or your user) are 
comfortable using decimal values for colors (0x112233 is 1122867 in decimal), 
you can, but then it is harder to see the values of the different components. 

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
The location of the system properties file depends on the run-time 
environment and version you are using. Ordinarily, the file will go into 
a subdirectory of the installation directory or, for environment's 
where users have home directories, in a subdirectory for the user. Sun's 
HotJava, JDK, and <i class=emphasis>appletviewer</I> tools use the <i class=emphasis>properties</I> 
file in the <i class=emphasis>.hotjava</I> 
directory. 

<p class=para>
Most browsers do not permit modifying properties, so there is no 
file. 

<p class=para>
Java 1.1 adds the idea of "resource files," which are 
syntactically similar to properties files. Resource files are then placed 
on the server or within a directory found in the <tt class=literal>CLASSPATH</tt>. 
Updating the properties file is no longer recommended. 
</blockquote><p>
</DIV>

<p class=para>
For example, consider a screen that uses four colors: one each for the 
foreground, the background, inactive components, and highlighted text. 
In the system properties file, you allow users to select colors by setting 
the following properties:

<div class=simplelist>

<p>
<tt class=literal>myPackage.myClass.foreground</tt><br>
<tt class=literal>myPackage.myClass.background</tt><br>
<tt class=literal>myPackage.myClass.inactive</tt><br>
<tt class=literal>myPackage.myClass.highlight</tt><br>
</DIV>

<p class=para>
One particular user set two: 

<p class=para>
<div class=screen>
<p>
<pre>
myPackage.myClass.foreground=0xff00ff        #magenta
myPackage.myClass.background=0xe0e0e0        #light gray
</PRE>
</DIV>

<p class=para>
These lines tell the program to use magenta as the foreground color and 
light gray for the background. The program will use its default colors 
for inactive components and highlighted text. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static Color getColor (String name) </I><br>
<dd>

<p class=para>
The <tt class=literal>getColor()</tt> method gets 
the color specified by the system property <tt class=literal>name</tt>. 
If <tt class=literal>name</tt> is not a valid system 
property, <tt class=literal>getColor()</tt> returns 
<tt class=literal>null</tt>. If the property value 
does not convert to an integer, <tt class=literal>getColor()</tt> 
returns <tt class=literal>null</tt>. 

<p class=para>
For the properties listed above, if you call <tt class=literal>getColor()</tt> 
with <tt class=literal>name</tt> set to the property <tt class=literal>myPackage.myClass.foreground</tt>, 
it returns a magenta <tt class=literal>Color</tt> 
object. If called with <tt class=literal>name</tt> 
set to <tt class=literal>myPackage.myClass.inactive</tt>, 
<tt class=literal>getColor()</tt> returns <tt class=literal>null</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public static Color getColor (String name, Color defaultColor) </I><br>
<dd>

<p class=para>
The <tt class=literal>getColor()</tt> method gets 
the color specified by the system property <tt class=literal>name</tt>. 
This version of the <tt class=literal>getColor()</tt> 
method returns <tt class=literal>defaultColor</tt> 
if <tt class=literal>name</tt> is not a valid system 
property or the property's value does not convert to an integer. 

<p class=para>
For the previous example, if <tt class=literal>getColor()</tt> is called with 
<tt class=literal>name</tt> set to <tt class=literal>myPackage.myClass.inactive</tt>, 
the <tt class=literal>getColor()</tt> method returns the value 
of <tt class=literal>defaultColor</tt>. This allows 
you to provide defaults for properties the user doesn't wish to set 
explicitly. 

<p>
<dt class=varlistentry><i class=emphasis>public static Color getColor (String name, int defaultColor) </I><br>
<dd>

<p class=para>
This <tt class=literal>getColor()</tt> method gets 
the color specified by the system property <tt class=literal>name</tt>. 
This version of the <tt class=literal>getColor()</tt> 
method returns <tt class=literal>defaultColor</tt> 
if <tt class=literal>name</tt> is not a valid system 
property or the property's value does not convert to an integer. 
The default color is specified as an integer in which bits 16-23 represent 
the red component, 8-15 represent the green component, and 0-7 represent 
the blue component. Bits 24-31 are ignored. If the property value does 
not convert to an integer, <tt class=literal>defaultColor</tt> 
is returned. 

<p>
<dt class=varlistentry><i class=emphasis>public static Color decode (String name) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>decode()</tt> method provides 
an explicit means to decipher color property settings, regardless of where 
the setting comes from. (The <tt class=literal>getColor()</tt> 
method can decipher settings but only if they're in the system properties 
file.) In particular, you can use <tt class=literal>decode()</tt> 
to look up color settings in a resource file. The format of <tt class=literal>name</tt> 
is the same as that used by <tt class=literal>getColor()</tt>. 
If the contents of <tt class=literal>name</tt> do 
not translate to a 24-bit integer, the <tt class=literal>NumberFormatException</tt> run-time exception is thrown. 
To perform the equivalent of <tt class=literal>getColor(`myPackage.myClass.foreground`)</tt>, 
without using system properties, see the following example. For a more extensive 
example using resource files, see Appendix A. </DL>
<p class=para>
<div class=screen>
<p>
<pre>
// Java 1.1 only
InputStream is = instance.getClass().getResourceAsStream("propfile");
Properties p = new Properties();
try {
    p.load (is);
    Color c = Color.decode(p.getProperty("myPackage.myClass.foreground"));
} catch (IOException e) {
    System.out.println ("error loading props...");
}
</PRE>
</DIV>

Hue, saturation, and brightness

<p class=para>
<a name="CH03.HSB"></A>So far, the methods we have seen work with a color's red, green, and 
blue components. There are many other ways to represent colors. This group 
of methods allows you to work in terms of the HSB (hue, saturation, brightness) 
model. Hue represents the base color to work with: working through the 
colors of the rainbow, red is represented by numbers immediately above 
0; magenta is represented by numbers below 1; white is 0; and black is 1. Saturation 
represents the color's purity, ranging from completely unsaturated 
(either white or black depending upon brightness) to totally saturated 
(&nbsp;just the base color present). Brightness is the desired level of luminance, 
ranging from black (0) to the maximum amount determined by the saturation 
level. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static float[] RGBtoHSB (int red, int green, int blue, float[] hsbvalues) </I><br>
<dd>

<p class=para>
The <tt class=literal>RGBtoHSB()</tt> method allows 
you to convert a specific <tt class=literal>red</tt>, 
<tt class=literal>green</tt>, <tt class=literal>blue</tt> 
value to the hue, saturation, and brightness equivalent. <tt class=literal>RGBtoHSB()</tt> 
returns the results in two different ways: the parameter <tt class=literal>hsbvalues</tt> 
and the method's return value. The values of these are the same. 
If you do not want to pass an <tt class=literal>hsbvalues</tt> 
array parameter, pass <tt class=literal>null</tt>. In both the parameter and the return value, 
the three components are placed in the array as follows: 

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<td align="left"><tt class=literal>hsbvalues[0]</tt></TD>
<td align="left"><i class=emphasis>contains hue</I></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>hsbvalues[1]</tt></TD>
<td align="left"><i class=emphasis>contains saturation</I></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>hsbvalues[2]</tt></TD>
<td align="left"><i class=emphasis>contains brightness</I></TD>
</TR>
</TABLE>
<p>
</DIV>

</DL>
<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static Color getHSBColor (float hue, float saturation, float brightness) </I><br>
<dd>

<p class=para>
The <tt class=literal>getHSBColor()</tt> method creates 
a <tt class=literal>Color</tt> object by using <tt class=literal>hue</tt>, 
<tt class=literal>saturation</tt>, and <tt class=literal>brightness</tt> 
instead of <tt class=literal>red</tt>, <tt class=literal>green</tt>, and <tt class=literal>blue </tt>values. 

<p>
<dt class=varlistentry><i class=emphasis>public static int HSBtoRGB (float hue, float saturation, float brightness) </I><br>
<dd>

<p class=para>
The <tt class=literal>HSBtoRGB()</tt> method converts 
a specific <tt class=literal>hue</tt>, <tt class=literal>saturation</tt>, 
and <tt class=literal>brightness</tt> to a <tt class=literal>Color</tt> 
and returns the <tt class=literal>red</tt>, <tt class=literal>green</tt>, and <tt class=literal>blue</tt> values as an integer. As with the 
constructor, bits 16-23 represent the red component, 8-15 represent the 
green component, and 0-7 represent the blue component. Bits 24-31 are ignored. </DL>
Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int hashCode ()  </I><br>
<dd>

<p class=para>
The <tt class=literal>hashCode()</tt> method returns 
a hash code for the color. The hash code is used whenever a color is used 
as a key in a <tt class=literal>Hashtable</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean equals (Object o) </I><br>
<dd>

<p class=para>
The <tt class=literal>equals()</tt> method overrides 
the <tt class=literal>equals()</tt> 
method of the <tt class=literal>Object</tt> to define equality for <tt class=literal>Color</tt> 
objects. Two <tt class=literal>Color</tt> objects 
are equivalent if their <tt class=literal>red</tt>, <tt class=literal>green</tt>, and <tt class=literal>blue</tt> values are equal. 

<p>
<dt class=varlistentry><i class=emphasis>public String toString () </I><br>
<dd>

<p class=para>
The <tt class=literal>toString()</tt> method of <tt class=literal>Color</tt> 
returns a string showing the color's red, green, and blue settings. 
For example <tt class=literal>System.out.println (Color.orange)</tt> 
would result in the following: </DL>
<p class=para>
<div class=screen>
<p>
<pre>
java.awt.Color[r=255,g=200,b=0]
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch03_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>FontMetrics</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>SystemColor</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
