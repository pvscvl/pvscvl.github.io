<html>
<head>
<title>[Chapter 8] 8.2 TextField</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:41:44 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>Input Fields</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch08_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-8-SECT-2">8.2 TextField</A></h2>

<p class=para>
<a name="CH08.FIELD1"></A><tt class=literal>TextField</tt> is the <tt class=literal>TextComponent</tt> 
for single-line input. Some constructors permit you to set the width of 
the <tt class=literal>TextField</tt> on the screen, 
but the current <tt class=literal>LayoutManager</tt> 
may change it. The text in the <tt class=literal>TextField</tt> 
is left justified, and the justification is not customizable. To change the font and size of text within the <tt class=literal>TextField</tt>, 
call <tt class=literal>setFont()</tt> as shown in <a href="ch03_01.htm">Chapter 3, <i>Fonts and Colors</i></A>. 

<p class=para>
The width of the field does not limit the number of characters that the 
user can type into the field. It merely suggests how wide the field should 
be. To limit the number of characters, it is necessary to override the 
<tt class=literal>keyDown()</tt> method for the <tt class=literal>Component</tt>. 
<a href="ch08_04.htm">Extending TextField</A> contains an example showing how to do 
this. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-8-SECT-2.1">TextField Methods</A></h3>Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public TextField () </I><br>
<dd>

<p class=para>
This constructor creates an empty <tt class=literal>TextField</tt>. 
The width of the <tt class=literal>TextField</tt> 
is zero columns, but it will be made wide enough to display just about 
one character, depending on the current font and size. 

<p>
<dt class=varlistentry><i class=emphasis>public TextField (int columns)</I><br>
<dd>

<p class=para>
This constructor creates an empty <tt class=literal>TextField</tt>. 
The <tt class=literal>TextField</tt> width is <tt class=literal>columns</tt>. 
The <tt class=literal>TextField</tt> will try to be 
wide enough to display <tt class=literal>columns</tt> 
characters in the current font and size. As I mentioned previously, the layout 
manager may change the size. 

<p>
<dt class=varlistentry><i class=emphasis>public TextField (String text) </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>TextField</tt> 
with <tt class=literal>text</tt> as its content. In 
Java 1.0 systems, the <tt class=literal>TextField</tt> 
is 0 columns wide (the <tt class=literal>getColumns()</tt> 
result), but the system will size it to fit the length of text. With Java 
1.1, <tt class=literal>getColumns()</tt> actually 
returns <tt class=literal>text.length</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public TextField (String text, int columns) </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>TextField</tt> 
with <tt class=literal>text</tt> as its content and 
a width of <tt class=literal>columns</tt>. </DL>
<p class=para>
The following example uses all four constructors; the results are shown 
in <a href="#JAWT-CH-8-FIG-2">Figure 8.2</A>. With the third constructor, you see 
that the <tt class=literal>TextField</tt> is not quite wide enough for our text. The system uses 
an average width per character to try to determine how wide the field should 
be. If you want to be on the safe side, specify the field's length 
explicitly, and add a few extra characters to ensure that there is enough 
room on the screen for the entire text. 

<div class=screen>
<p>
<pre>
import java.awt.TextField;
public class texts extends java.applet.Applet {
   public void init () {
        add (new TextField ());                   // A
        add (new TextField (15));                 // B
        add (new TextField ("Empty String"));     // C
        add (new TextField ("Empty String", 20)); // D
   }
}
</PRE>
</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-8-FIG-2">Figure 8.2: Using the TextField constructors</A></h4>


<p>
<img align=middle src="figs/jawt0802.gif" alt="[Graphic: Figure 8-2]" width=193 height=205 border=0>

</DIV>

Sizing<a name="CH08.SIZE1"></A>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int getColumns () </I><br>
<dd>

<p class=para>
The <tt class=literal>getColumns()</tt> method returns 
the number of columns set with the constructor or a later call to <tt class=literal>setColumns()</tt>. 
This could be different from the displayed width of the <tt class=literal>TextField</tt>, 
depending upon the current <tt class=literal>LayoutManager</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void setColumns (int columns) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setColumns()</tt> method changes 
the preferred number of columns for the <tt class=literal>TextField</tt> 
to display to <tt class=literal>columns</tt>. Because 
the current <tt class=literal>LayoutManager</tt> will 
do what it wants, the new setting may be completely ignored. If <tt class=literal>columns</tt> 
&lt; 0, <tt class=literal>setColumns()</tt> throws 
the run-time exception <tt class=literal>IllegalArgumentException</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension getPreferredSize (int columns) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public Dimension preferredSize (int columns) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>getPreferredSize()</tt> method 
returns the <tt class=literal>Dimension</tt> (width 
and height) for the preferred size of a <tt class=literal>TextField</tt> 
with a width of <tt class=literal>columns</tt>. The 
<tt class=literal>columns</tt> specified may be different 
from the number of columns designated in the constructor. 

<p class=para>
<tt class=literal>preferredSize()</tt> is the Java 
1.0 name for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension getPreferredSize () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public Dimension preferredSize () <img src="gifs/wstar.gif" alt="(Deprecated)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getPreferredSize()</tt> method 
returns the <tt class=literal>Dimension</tt> (width 
and height) for the preferred size of the <tt class=literal>TextField</tt>. 
Without the <tt class=literal>columns</tt> parameter, 
this <tt class=literal>getPreferredSize()</tt> uses 
the constructor's number of columns (or the value from a subsequent 
call to <tt class=literal>setColumns()</tt>) to calculate 
the <tt class=literal>TextField</tt>'s preferred 
size. 

<p class=para>
<tt class=literal>preferredSize()</tt> is the Java 
1.0 name for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension getMinimumSize (int columns) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public Dimension minimumSize (int columns) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0>  </I><br>
<dd>

<p class=para>
The <tt class=literal>getMinimumSize</tt>() method 
returns the minimum <tt class=literal>Dimension</tt> 
(width and height) for the size of a <tt class=literal>TextField</tt> 
with a width of <tt class=literal>columns</tt>. The 
<tt class=literal>columns</tt> specified may be different 
from the columns designated in the constructor. 

<p class=para>
<tt class=literal>minimumSize()</tt> is the Java 1.0 
name for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension getMinimumSize () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public Dimension minimumSize () </I><br>
<dd>

<p class=para>
The <tt class=literal>getMinimumSize()</tt> method 
returns the minimum <tt class=literal>Dimension</tt> 
(width and height) for the size of the <tt class=literal>TextField</tt>. 
Without the columns parameter, this <tt class=literal>getMinimumSize()</tt> 
uses the constructor's number of columns (or the value from a subsequent 
call to <tt class=literal>setColumns()</tt>) to calculate 
the <tt class=literal>TextField</tt>'s minimum 
size. 

<p class=para>
<tt class=literal>minimumSize()</tt> is the Java 1.0 
name for this method. </DL>
Echoing character

<p class=para>
It is possible to change the character echoed back to the user when he 
or she types. This is extremely useful for implementing password entry 
fields. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public char getEchoChar () </I><br>
<dd>

<p class=para>
The <tt class=literal>getEchoChar()</tt> method returns 
the currently echoed character. If the <tt class=literal>TextField</tt> 
is echoing normally, <tt class=literal>getEchoChar()</tt> 
returns zero. 

<p>
<dt class=varlistentry><i class=emphasis>public void setEchoChar (char c) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public void setEchoCharacter (char c) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>setEchoChar()</tt> method changes 
the character that is displayed to the user to <tt class=literal>c</tt> 
for every character in the <tt class=literal>TextField</tt>. 
It is possible to change the echo character on the fly so that existing 
characters will be replaced. A <tt class=literal>c</tt> 
of zero, <tt class=literal>(char)0</tt>, effectively 
turns off any change and makes the <tt class=literal>TextField</tt> 
behave normally. 

<p class=para>
<tt class=literal>setEchoCharacter()</tt> is the Java 
1.0 name for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean echoCharIsSet () </I><br>
<dd>

<p class=para>
The <tt class=literal>echoCharIsSet()</tt> method 
returns <tt class=literal>true</tt> if the echo character 
is set to a nonzero value. If the <tt class=literal>TextField</tt> 
is displaying input normally, this method returns <tt class=literal>false</tt>. </DL>
Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public synchronized void addNotify ()  </I><br>
<dd>

<p class=para>
The <tt class=literal>addNotify()</tt> method creates 
the <tt class=literal>TextField</tt> peer. 
If you override this method, first call <tt class=literal>super.addNotify()</tt>, 
then add your customizations for the new class. Then you will be able to 
do everything you need with the information about the newly created peer. 

<p>
<dt class=varlistentry><i class=emphasis>protected String paramString ()  </I><br>
<dd>

<p class=para>
When you call the <tt class=literal>toString()</tt> 
method of <tt class=literal>TextField</tt>, the default 
<tt class=literal>toString()</tt> method of <tt class=literal>Component</tt> 
is called. This in turn calls <tt class=literal>paramString()</tt>, 
which builds up the string to display. The <tt class=literal>TextField</tt> 
level can add only one item. If the echo character is nonzero, the current 
echo character is added (the method <tt class=literal>getEchoChar()</tt>). 
Using <tt class=literal>new TextField (`Empty String`, 20)</tt>, 
the results displayed could be: </DL>
<div class=screen>
<p>
<pre>
java.awt.TextField[0,0,0x0,invalid,text="Empty String",editable,selection=0-0]
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-8-SECT-2.2">TextField Events</A></h3>

<p class=para>
<a name="CH08.EVENT3"></A>With the 1.0 event model, <tt class=literal>TextField</tt> 
components can generate <tt class=literal>KEY_PRESS</tt> 
and <tt class=literal>KEY_ACTION</tt> (which calls 
<tt class=literal>keyDown()</tt>), <tt class=literal>KEY_RELEASE</tt> 
and <tt class=literal>KEY_ACTION_RELEASE</tt> (which 
calls <tt class=literal>keyUp()</tt>), and <tt class=literal>ACTION_EVENT</tt> 
(which calls <tt class=literal>action()</tt>). 

<p class=para>
With the 1.1 event model, you register an <tt class=literal>ActionListener</tt> 
with the method <tt class=literal>addActionListener()</tt>. Then when the user presses 
Return within the <tt class=literal>TextField</tt> 
the <tt class=literal>ActionListener.actionPerformed()</tt> 
method is called through the protected <tt class=literal>TextField.processActionEvent()</tt> 
method. Key, mouse, and focus listeners are registered through the three <tt class=literal>Component</tt> 
methods of <tt class=literal>addKeyListener()</tt>, 
<tt class=literal>addMouseListener()</tt>, and <tt class=literal>addFocusListener()</tt>, 
respectively. Action

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public boolean action (Event e, Object o)</I><br>
<dd>

<p class=para>
The <tt class=literal>action()</tt> method for a <tt class=literal>TextField</tt> 
is called when the input focus is in the <tt class=literal>TextField</tt> 
and the user presses the Return key. <tt class=literal>e</tt> 
is the <tt class=literal>Event</tt> instance for the 
specific event, while <tt class=literal>o</tt> is 
a <tt class=literal>String</tt> representing the current contents (the <tt class=literal>getText()</tt> method). </DL>
Keyboard

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public boolean keyDown (Event e, int key)   </I><br>
<dd>

<p class=para>
<a name="CH08.KEY1"></A>The <tt class=literal>keyDown()</tt> method is called 
whenever the user presses a key. <tt class=literal>keyDown()</tt> 
may be called many times in succession if the key remains 
pressed. <tt class=literal>e</tt> is the <tt class=literal>Event</tt> 
instance for the specific event, while <tt class=literal>key</tt> 
is the integer representation of the character pressed. The identifier 
for the event (<tt class=literal>e.id</tt>) for <tt class=literal>keyDown()</tt> 
could be either <tt class=literal>Event.KEY_PRESS</tt> 
for a regular key or <tt class=literal>Event.KEY_ACTION</tt> 
for an action-oriented key (i.e., an arrow or function key). Some of the 
things you can do through this method are validate input, convert each 
character to uppercase, and limit the number or type of characters entered. 
The technique is simple: you just need to remember that the user's 
keystroke is actually displayed by the <tt class=literal>TextField</tt> 
peer, which receives the event after the <tt class=literal>TextField</tt> 
itself. Therefore, a <tt class=literal>TextField</tt> 
subclass can modify the character displayed by modifying the <tt class=literal>key</tt> 
field (<tt class=literal>e.key</tt>) of the <tt class=literal>Event</tt> 
and returning <tt class=literal>false</tt>, which 
passes the <tt class=literal>Event</tt> on down the 
chain; remember that returning <tt class=literal>false</tt> 
indicates that the <tt class=literal>Event</tt> has 
not been completely processed. The following method uses this technique 
to convert all input to uppercase. 

<div class=screen>
<p>
<pre>
public boolean keyDown (Event e, int key) {
    e.key = Character.toUppercase (char(key));
    return false;
}
</PRE>
</DIV>

<p class=para>
If <tt class=literal>keyDown()</tt> returns <tt class=literal>true</tt>, 
it indicates that the <tt class=literal>Event</tt> 
has been completely processed. In this case, the <tt class=literal>Event</tt> 
never propagates to the peer, and the keystroke is never displayed. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean keyUp (Event e, int key) </I><br>
<dd>

<p class=para>
The <tt class=literal>keyUp()</tt> method is called 
whenever the user releases a key. <tt class=literal>e</tt> 
is the <tt class=literal>Event</tt> instance for the 
specific event, while <tt class=literal>key</tt> 
is the integer representation of the character pressed. The identifier 
for the event (<tt class=literal>e.id</tt>) for <tt class=literal>keyUp()</tt> 
could be either <tt class=literal>Event.KEY_RELEASE</tt> 
for a regular key or <tt class=literal>Event.KEY_ACTION_RELEASE</tt> 
for an action-oriented key (i.e., an arrow or function key). Among other 
things, <tt class=literal>keyUp()</tt> may be used 
to determine how long the key has been pressed. </DL>
Mouse

<p class=para>
Ordinarily, the <tt class=literal>TextField</tt> component 
does not trigger any mouse events. 

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
Mouse events are not generated for <tt class=literal>TextField</tt> 
with JDK 1.0.2. Your run-time environment may behave differently. See Appendix 
C for more information about platform dependencies. 
</blockquote><p>
</DIV>

Focus

<p class=para>
The <tt class=literal>TextField</tt> component does 
not reliably generate focus events. 

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
The <tt class=literal>GOT_FOCUS</tt> and <tt class=literal>LOST_FOCUS</tt> 
events can be generated by <tt class=literal>TextField</tt>s, 
but these events are not reliable across platforms. With Java 1.0, they 
are generated on most UNIX platforms but not on Windows NT/95 platforms. They 
are generated on all platforms under Java 1.1. See Appendix C for more 
information about platform dependencies. 
</blockquote><p>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public boolean gotFocus (Event e, Object o)   </I><br>
<dd>

<p class=para>
The <tt class=literal>gotFocus()</tt> method is triggered 
when the <tt class=literal>TextField</tt> gets the 
input focus. <tt class=literal>e</tt> is the <tt class=literal>Event</tt> 
instance for the specific event, while <tt class=literal>o</tt> 
is a <tt class=literal>String</tt> representation 
of the current contents (<tt class=literal>getText()</tt>). 

<p>
<dt class=varlistentry><i class=emphasis>public boolean lostFocus (Event e, Object o)   </I><br>
<dd>

<p class=para>
The <tt class=literal>lostFocus()</tt> method is 
triggered when the input focus leaves the <tt class=literal>TextField</tt>. <tt class=literal>e</tt> 
is the <tt class=literal>Event</tt> instance for the 
specific event, while <tt class=literal>o</tt> 
is a <tt class=literal>String</tt> representation 
of the current contents (<tt class=literal>getText()</tt>). </DL>
Listeners and 1.1 event handling

<p class=para>
<a name="CH08.EVENT4"></A>With the 1.1 event model, you register event listeners that are told when 
an event occurs. You can register text event listeners by calling the method <tt class=literal>TextComponent.addTextListener()</tt>. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void addActionListener(ActionListener listener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>addActionListener()</tt> method 
registers <tt class=literal>listener</tt> as an object 
interested in receiving notifications when an <tt class=literal>ActionEvent</tt> 
passes through the <tt class=literal>EventQueue</tt> 
with this <tt class=literal>TextField</tt> as its 
target. The <tt class=literal>listener.actionPerformed()</tt> 
method is called when these events occur. Multiple listeners can be registered. 
The following code demonstrates how to use an <tt class=literal>ActionListener</tt> 
to reverse the text in the <tt class=literal>TextField</tt>. </DL>
<div class=screen>
<p>
<pre>
// Java 1.1 only 
import java.applet.*;
import java.awt.*;
import java.awt.event.*;
class MyAL implements ActionListener {
    public void actionPerformed(ActionEvent e) {
        System.out.println ("The current text is: " +
            e.getActionCommand());
        if (e.getSource() instanceof TextField) {
            TextField tf = (TextField)e.getSource();
            StringBuffer sb = new StringBuffer (e.getActionCommand());
            tf.setText (sb.reverse().toString());
        }
    }
}
public class text11 extends Applet {
    public void init () {
        TextField tf = new TextField ("Help Text", 20);
        add (tf);
        tf.addActionListener (new MyAL());
   }
}
</PRE>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void removeActionListener(ActionListener listener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>removeActionListener()</tt> 
method removes <tt class=literal>listener</tt> as 
a interested listener. If <tt class=literal>listener</tt> 
is not registered, nothing happens. 

<p>
<dt class=varlistentry><i class=emphasis>protected void processEvent(AWTEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>processEvent()</tt> method receives 
all <tt class=literal>AWTEvent</tt>s with this <tt class=literal>TextField</tt> 
as its target. <tt class=literal>processEvent()</tt> 
then passes them along to any listeners for processing. When you subclass 
<tt class=literal>TextField</tt>, overriding <tt class=literal>processEvent()</tt> 
allows you to process all events yourself, before sending them to any listeners. 
In a way, overriding <tt class=literal>processEvent()</tt> 
is like overriding <tt class=literal>handleEvent()</tt> 
using the 1.0 event model. 

<p class=para>
If you override <tt class=literal>processEvent()</tt>, 
remember to call <tt class=literal>super.processEvent(e)</tt> 
last to ensure that regular event processing can occur. If you want to 
process your own events, it's a good idea to call <tt class=literal>enableEvents()</tt> 
(inherited from <tt class=literal>Component</tt>) 
to ensure that events are delivered even in the absence of registered listeners. 

<p>
<dt class=varlistentry><i class=emphasis>protected void processActionEvent(ActionEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>processActionEvent()</tt> method 
receives all <tt class=literal>ActionEvent</tt>s with 
this <tt class=literal>TextField</tt> as its target. 
<tt class=literal>processActionEvent()</tt> then passes 
them along to any listeners for processing. When you subclass <tt class=literal>TextField</tt>, 
overriding the method <tt class=literal>processActionEvent()</tt> 
allows you to process all action events yourself, before sending them to 
any listeners. In a way, overriding <tt class=literal>processActionEvent()</tt> 
is like overriding <tt class=literal>action() </tt>using 
the 1.0 event model. 

<p class=para>
If you override the <tt class=literal>processActionEvent()</tt> method, 
remember to call <tt class=literal>super.processActionEvent(e)</tt> 
last to ensure that regular event processing can occur. If you want to 
process your own events, it's a good idea to call <tt class=literal>enableEvents()</tt> 
(inherited from <tt class=literal>Component</tt>) 
to ensure that events are delivered even in the absence of registered listeners. </DL>
<p class=para>
The following applet is equivalent to the previous example, except that it 
overrides <tt class=literal>processActionEvent()</tt> 
to receive events, eliminating the need for an <tt class=literal>ActionListener</tt>. 
The constructor calls <tt class=literal>enableEvents()</tt> 
to make sure that events are delivered, even if no listeners are registered. 

<div class=screen>
<p>
<pre>
// Java 1.1 only
import java.applet.*;
import java.awt.*;
import java.awt.event.*;
class MyTextField extends TextField {
    public MyTextField (String s, int len) {
        super (s, len);
        enableEvents (AWTEvent.ACTION_EVENT_MASK);
    }
    protected void processActionEvent(ActionEvent e) {
        System.out.println ("The current text is: " +
            e.getActionCommand());
        TextField tf = (TextField)e.getSource();
        StringBuffer sb = new StringBuffer (e.getActionCommand());
        tf.setText (sb.reverse().toString());
        super.processActionEvent(e)
    }
}
public class text12 extends Applet {
   public void init () {
        TextField tf = new MyTextField ("Help Text", 20);
        add (tf);
   }
}
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch08_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Text Component</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>TextArea</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
