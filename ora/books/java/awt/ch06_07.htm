<html>
<head>
<title>[Chapter 6] 6.7 FileDialog</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:37:10 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 6<br>Containers</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch07_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-6-SECT-7">6.7 FileDialog</A></h2>

<p class=para>
<a name="CH06.FILE1"></A><tt class=literal>FileDialog</tt> is a subclass of 
<tt class=literal>Dialog</tt> that lets the user select 
files for opening or saving. You must load or save any files yourself. 
If used in an application or <i class=emphasis>appletviewer</I>, the <tt class=literal>FileDialog</tt> 
always looks like the local system's file dialog. The <tt class=literal>FileDialog</tt> 
is always a modal <tt class=literal>Dialog</tt>, meaning 
that the calling program is blocked from continuing (and cannot accept 
input) until the user responds to the <tt class=literal>FileDialog</tt>. <a href="#JAWT-CH-6-FIG-9">Figure 6.9</A> shows the <tt class=literal>FileDialog</tt> component in Motif, Windows NT/95, and the Macintosh.

<p class=para>
Unlike the other <tt class=literal>Window</tt> subclasses, 
there is no <tt class=literal>LayoutManager</tt> for 
<tt class=literal>FileDialog</tt>, since you are creating 
the environment's actual file dialog. This means you cannot subclass 
<tt class=literal>FileDialog</tt> to alter its behavior 
or appearance. However, the class is not "final." 

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
Netscape Navigator throws an <tt class=literal>AWTError</tt> 
when you try to create a <tt class=literal>FileDialog</tt> 
because Navigator does not permit local file system access. 
</blockquote><p>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-6-SECT-7.1">FileDialog Methods</A></h3>Constants

<p class=para>
A <tt class=literal>FileDialog</tt> has two modes: 
one for loading a file (input) and one for saving (output). The following 
variables provide the mode to the constructor. The <tt class=literal>FileDialog</tt> 
functions the same way in both modes. The only visible difference is whether 
a button on the screen is labeled Load or Save. 
You must load or save the requested file yourself. On certain platforms 
there may be functional differences: in <tt class=literal>SAVE</tt> 
mode, the <tt class=literal>FileDialog</tt> may ask 
if you want to replace a file if it already exists; in <tt class=literal>LOAD</tt> 
mode, the <tt class=literal>FileDialog</tt> may not 
accept a filename that does not exist. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public final static int LOAD </I><br>
<dd>

<p class=para>
<tt class=literal>LOAD</tt> is the constant for load 
mode. It is the default mode. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int SAVE </I><br>
<dd>

<p class=para>
<tt class=literal>SAVE</tt> is the constant for save 
mode. </DL>
Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public FileDialog (Frame parent) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The first constructor creates a <tt class=literal>FileDialog</tt> 
for loading with a parent <tt class=literal>Frame</tt> 
of <tt class=literal>parent</tt>. The window title 
is initially empty. 

<p>
<dt class=varlistentry><i class=emphasis>public FileDialog (Frame parent, String title) </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>FileDialog</tt> 
for loading with a parent <tt class=literal>Frame</tt> 
of <tt class=literal>parent</tt>. The window title 
is <tt class=literal>title</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public FileDialog (Frame parent, String title, int mode) </I><br>
<dd>

<p class=para>
The final constructor creates a <tt class=literal>FileDialog</tt> 
with an initial mode of <tt class=literal>mode</tt>. 
If <tt class=literal>mode</tt> is neither <tt class=literal>LOAD</tt> 
nor <tt class=literal>SAVE</tt>, the <tt class=literal>FileDialog</tt> 
is in <tt class=literal>SAVE</tt> mode. </DL>
<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-6-FIG-9">Figure 6.9: FileDialogs for Motif, Windows NT/95, and the Macintosh</A></h4>


<p>
<img align=middle src="figs/jawt0610.gif" alt="[Graphic: Figure 6-9]" width=249 height=246 border=0>

</DIV>

Appearance methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public String getDirectory () </I><br>
<dd>

<p class=para>
<tt class=literal>getDirectory()</tt> returns 
the current directory for the <tt class=literal>FileDialog</tt>. 
Normally, you check this when <tt class=literal>FileDialog</tt> 
returns after a <tt class=literal>show()</tt> and 
a call to <tt class=literal>getFile()</tt> returns 
something other than <tt class=literal>null</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void setDirectory (String directory) </I><br>
<dd>

<p class=para>
The <tt class=literal>setDirectory()</tt> method changes 
the initial directory displayed in the <tt class=literal>FileDialog</tt> 
to <tt class=literal>directory</tt>. You must call 
<tt class=literal>setDirectory()</tt> prior to displaying 
the <tt class=literal>FileDialog</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public String getFile () </I><br>
<dd>

<p class=para>
The <tt class=literal>getFile()</tt> method returns 
the current file selection from the <tt class=literal>FileDialog</tt>. 
If the user pressed the Cancel button on the <tt class=literal>FileDialog</tt>, 
<tt class=literal>getFile()</tt> returns <tt class=literal>null</tt>. 
This is the only way to determine if the user pressed Cancel. </DL>
<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
On some platforms in Java 1.0 <tt class=literal>getFile()</tt> 
returns a string that ends in <tt class=literal>.*.*</tt> 
(two periods and two asterisks) if the file does not exist. You need to 
remove the extra characters before you can create the file. 
</blockquote><p>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void setFile (String file) </I><br>
<dd>

<p class=para>
The <tt class=literal>setFile()</tt> method changes 
the default file for the <tt class=literal>FileDialog</tt> 
to <tt class=literal>file</tt>. Because the <tt class=literal>FileDialog</tt> 
is modal, this must be done before you call <tt class=literal>show()</tt>. 
The string may contain a filename filter like <i class=emphasis>*.java</I> 
to show a preliminary list of files to select. This has nothing to do with 
the use of the <tt class=literal>FilenameFilter</tt> 
class. 

<p>
<dt class=varlistentry><i class=emphasis>public FilenameFilter getFilenameFilter () </I><br>
<dd>

<p class=para>
The <tt class=literal>getFilenameFilter()</tt> method 
returns the current <tt class=literal>FilenameFilter</tt>. 
The <tt class=literal>FilenameFilter</tt> class is 
part of the <tt class=literal>java.io</tt> package. 
<tt class=literal>FilenameFilter</tt> is an interface 
that allows you to restrict choices to certain directory and filename combinations. 
For example, it can be used to limit the user to selecting <i class=emphasis>.jpg</I>, 
<i class=emphasis>.gif</I>, and <i class=emphasis>.xbm</I> 
files. The class implementing <tt class=literal>FilenameFilter</tt> 
would not return other possibilities as choices. 

<p>
<dt class=varlistentry><i class=emphasis>public void setFilenameFilter (FilenameFilter filter) </I><br>
<dd>

<p class=para>
The <tt class=literal>setFilenameFilter()</tt> method 
changes the current filename filter to <tt class=literal>filter</tt>. 
This needs to be done before you <tt class=literal>show()</tt> 
the <tt class=literal>FileDialog</tt>. </DL>
<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
The JDK does not support the <tt class=literal>FilenameFilter</tt> 
with <tt class=literal>FileDialog</tt> boxes. <tt class=literal>FilenameFilter</tt> 
works but can't be used with <tt class=literal>FileDialog</tt>. 
</blockquote><p>
</DIV>

Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int getMode () </I><br>
<dd>

<p class=para>
The <tt class=literal>getMode()</tt> method returns 
the current mode of the <tt class=literal>FileDialog</tt>. 
If an invalid mode was used in the constructor, this method returns an 
invalid mode here. No error checking is performed. 

<p>
<dt class=varlistentry><i class=emphasis>public void setMode (int mode) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setMode()</tt> method changes 
the current mode of the <tt class=literal>FileDialog</tt> 
to <tt class=literal>mode</tt>. If <tt class=literal>mode</tt> 
is not one of the class constants <tt class=literal>LOAD</tt> or <tt class=literal>SAVE</tt>, <tt class=literal>setMode()</tt> 
throws the run-time exception <tt class=literal>IllegalArgumentException</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void addNotify () </I><br>
<dd>

<p class=para>
The <tt class=literal>addNotify()</tt> method creates 
the <tt class=literal>FileDialog</tt> peer. 
This is automatically done when you call the <tt class=literal>show()</tt> 
method of the <tt class=literal>FileDialog</tt>. If 
you override this method, first call <tt class=literal>super.addNotify()</tt>, 
then add your customizations for the new class. Then you can do everything 
you need with the information about the newly created peer. 

<dt class=varlistentry><i class=emphasis>protected String paramString () </I><br>
<dd>

<p class=para>
When you call the <tt class=literal>toString()</tt> method of
<tt class=literal>FileDialog</tt>, the default
<tt class=literal>toString()</tt> method of <tt class=literal>Component</tt>
is called. This in turn calls <tt class=literal>paramString()</tt>, which
builds up the string to display. At the <tt class=literal>FileDialog</tt>
level, <tt class=literal>paramString()</tt> appends the directory (if not
<tt class=literal>null</tt>) and current mode to the return value. Using
the constructor <tt class=literal>FileDialog(top, `Load
Me`)</tt>, the results would be as follows:</DL>
<div class=screen>
<p>
<pre>
java.awt.FileDialog[0,0,0x0,invalid,hidden,modal,title=Load Me,load]
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-6-SECT-7.2">A FileDialog Example</A></h3>

<p class=para>
To get a better grasp of how the <tt class=literal>FileDialog</tt> 
works, the following application uses a <tt class=literal>FileDialog</tt> 
to select a file for display in a <tt class=literal>TextArea</tt>. 
You can also use <tt class=literal>FileDialog</tt> 
to save the file back to disk. <a href="#JAWT-CH-6-FIG-10">Figure 6.10</A> shows 
the application, with a file displayed in the text area; the <tt class=literal>FileDialog</tt> 
itself looks like any other file dialog on the run-time system. <a href="#JAWT-CH-6-EX-3">Example 6.3</A> 
shows the code. 

<div class=caution>
<p class=caution><blockquote><p><b>CAUTION:</B>
</blockquote><p>
</DIV>

<p class=para>
This example can overwrite an existing file. 
</blockquote><p>
</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-6-FIG-10">Figure 6.10: FileDialog test program</A></h4>


<p>
<img align=middle src="figs/jawt0611.gif" alt="[Graphic: Figure 6-10]" width=249 height=246 border=0>

</DIV>

<div class=example>
<h4 class=example><a class="TITLE" name="JAWT-CH-6-EX-3">Example 6.3: Complete FileDialog</A></h4>

<div class=screen>
<p>
<pre>
import java.awt.*;
import java.io.*;
public class FdTest extends Frame {
    TextArea myTextArea;
    Label myLabel;
    Button loadButton;
    Button saveButton;
    FdTest () {
        super ("File Dialog Tester");
        Panel p = new Panel ();
        p.add (loadButton = new Button ("Load"));
        p.add (saveButton = new Button ("Save"));
        add ("North", myLabel = new Label ());
        add ("South", p);
        add ("Center", myTextArea = new TextArea (10, 40));
        Menu m = new Menu ("File");
        m.add (new MenuItem ("Quit"));
        MenuBar mb = new MenuBar();
        mb.add (m);
        setMenuBar (mb);
        pack();
    }
    public static void main (String args[]) {
        FdTest f = new FdTest();
            f.show();
    }
    public boolean handleEvent (Event e) {
        if (e.id == Event.WINDOW_DESTROY) {
            hide();
            dispose ();
            System.exit(0);
            return true;  // never gets here
        }
        return super.handleEvent (e);
    }
    public boolean action (Event e, Object o) {
        if (e.target instanceof MenuItem) {
            hide();
            dispose ();
            System.exit(0);
            return true;  // never gets here
        } else if (e.target instanceof Button) {
            int state;
            String msg;
            if (e.target == loadButton) {
                state = FileDialog.LOAD;
                msg = "Load File";
            } else {// if (e.target == saveButton)
                state = FileDialog.SAVE;
                msg = "Save File";
            }
            FileDialog file = new FileDialog (this, msg, state);
            file.setFile ("*.java");  // set initial filename filter
            file.show(); // Blocks
            String curFile;
            if ((curFile = file.getFile()) != null) {
                String filename = file.getDirectory() + curFile;
                // curFile ends in .*.* if file does not exist
                byte[] data;
                setCursor (Frame.WAIT_CURSOR);
                if (state == FileDialog.LOAD) {
                    File f = new File (filename);
                    try {
                        FileInputStream fin = new FileInputStream (f);
                        int filesize = (int)f.length();
                        data = new byte[filesize];
                        fin.read (data, 0, filesize);
                    } catch (FileNotFoundException exc) {
                        String errorString = "File Not Found: " + filename;
                        data = new byte[errorString.length()];
                        errorString.getBytes (0, errorString.length(), data, 0);
                    } catch (IOException exc) {
                        String errorString = "IOException: " + filename;
                        data = new byte[errorString.length()];
                        errorString.getBytes (0, errorString.length(), data, 0);
                    }
                    myLabel.setText ("Load: " + filename);
                } else {
// Remove trailing ".*.*" if present - signifies file does not exist
                    if (filename.indexOf (".*.*") != -1) {
                        filename = filename.substring (0, filename.length()-4);
                    }
                    File f = new File (filename);
                    try {
                        FileOutputStream fon = new FileOutputStream (f);
                        String text = myTextArea.getText();
                        int textsize = text.length();
                        data = new byte[textsize];
                        text.getBytes (0, textsize, data, 0);
                        fon.write (data);
                        fon.close ();
                    } catch (IOException exc) {
                        String errorString = "IOException: " + filename;
                        data = new byte[errorString.length()];
                        errorString.getBytes (0, errorString.length(), data, 0);
                    }
                    myLabel.setText ("Save: " + filename);
                }
                // Note - on successful save, text is redisplayed
                myTextArea.setText (new String (data, 0));
                setCursor (Frame.DEFAULT_CURSOR);
            }
            return true;
        }
        return false;
    }
}
</PRE>
</DIV>

</DIV>

<p class=para>
Most of this application is one long <tt class=literal>action()</tt> 
method that handles all the action events that take place within the <tt class=literal>Frame</tt>. 
The constructor doesn't do much besides arrange the display; it includes 
code to create a File menu with one item, Quit. 
This menu is visible in the upper left corner of the <tt class=literal>Frame</tt>; we'll 
see more about working with menus in <a href="ch10_01.htm">Chapter 10, <i>Would You Like to Choose from the Menu?</i></A> We provide 
a <tt class=literal>main()</tt> method to display 
the <tt class=literal>Frame</tt> and a <tt class=literal>handleEvent()</tt> 
method to shut the application down if the event <tt class=literal>WINDOW_DESTROY</tt> 
occurs. 

<p class=para>
But the heart of this program is clearly its <tt class=literal>action()</tt> 
method. <tt class=literal>action()</tt> starts by 
checking whether the user selected a menu item; if so, it shuts down the application because the only item on our menu is Quit. It then 
checks whether the user clicked on one of the buttons and sets the <tt class=literal>FileDialog</tt> mode to <tt class=literal>LOAD</tt> or <tt class=literal>SAVE</tt> 
accordingly. It then sets a default filename, <i class=emphasis>*.java</I>, which 
limits the display to filenames ending in <i class=emphasis>.java</I>. 
Next, <tt class=literal>action()</tt> shows the dialog. 
Because file dialogs are modal, <tt class=literal>show()</tt> 
blocks until the user selects a file or clicks Cancel. 

<p class=para>
The next line detects whether or not <tt class=literal>getFile()</tt> 
returns <tt class=literal>null</tt>. A <tt class=literal>null</tt> 
return indicates that the user selected Cancel; in this case, 
the dialog disappears, but nothing else happens. We then build a complete 
filename from the directory name and the name the user selected. If the 
dialog's state is <tt class=literal>LOAD</tt>, 
we read the file and display it in the text area. Otherwise, the dialog's 
state must be <tt class=literal>SAVE</tt>, so we save 
the contents of the text area under the given filename. Note that we first 
check for the string <tt class=literal>*.*</tt> and remove it if it is present. 
In Java 1.1, these two lines are unnecessary, but they don't hurt, 
either. 

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch07_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Dialogs</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Layouts</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
