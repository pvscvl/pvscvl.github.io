<html>
<head>
<title>[Chapter 7] 7.7 GridBagConstraints</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:39:46 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7<br>Layouts</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch07_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-7-SECT-7">7.7 GridBagConstraints</A></h2>

<p class=para>
<a name="CH07.BAG10"></A><a name="CH07.BAG11"></A><tt class=literal>GridBagConstraints</tt> are the 
meat behind the <tt class=literal>GridBagLayout</tt>; 
they specify how to display components. Unlike other layout managers, which 
have a built-in idea about what to do with their display, the <tt class=literal>GridBagLayout</tt> 
is a blank slate. The constraints attached to each component tell the layout 
manager how to build its display. 

<p class=para>
Every <tt class=literal>Component</tt> added to a 
<tt class=literal>GridBagLayout</tt> has a <tt class=literal>GridBagConstraints</tt> 
object associated with it. When an object is first added to the layout, 
it is given a default set of constraints (described later in this section). Calling <tt class=literal>setConstraints()</tt> 
(or <tt class=literal>add(Component, GridBagConstraints)</tt>) 
applies a new set of constraints to the object. Most people create a helper 
method to make the <tt class=literal>setConstraints()</tt> 
calls, passing constraint information as parameters. The helper method 
used in <a href="ch07_06.htm">Example 7.2</A> follows: 

<div class=screen>
<p>
<pre>
public static void addComponent (Container container, Component component,
    int gridx, int gridy, int gridwidth, int gridheight, int fill,
    int anchor) throws AWTException {
    LayoutManager lm = container.getLayout();
    if (!(lm instanceof GridBagLayout)) {
        throw new AWTException ("Invalid layout" + lm);
    } else {
        GridBagConstraints gbc = new GridBagConstraints ();
        gbc.gridx = gridx;
        gbc.gridy = gridy;
        gbc.gridwidth = gridwidth;
        gbc.gridheight = gridheight;
        gbc.fill = fill;
        gbc.anchor = anchor;
        ((GridBagLayout)lm).setConstraints(component, gbc);
        container.add (component);
    }
}
</PRE>
</DIV>

<p class=para>
In Java 1.1, you can make this method slightly cleaner by adding the component 
and applying the constraints in the same call to <tt class=literal>add()</tt>. 
To do so, replace the lines calling <tt class=literal>setConstraints()</tt> 
and <tt class=literal>add()</tt> with this line: 

<div class=screen>
<p>
<pre>
        // Java 1.1 only
        container.add(component, gbc);
</PRE>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-7-SECT-7.1">GridBagConstraints Methods</A></h3>Constants and variables

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int anchor </I><br>
<dd>

<p class=para>
The <tt class=literal>anchor</tt> specifies the direction 
in which the component will drift in the event that it is smaller than 
the space available for it. <tt class=literal>CENTER</tt> 
is the default. Others available are <tt class=literal>NORTH</tt>, 
<tt class=literal>SOUTH</tt>, <tt class=literal>EAST</tt>, 
<tt class=literal>WEST</tt>, <tt class=literal>NORTHEAST</tt>, 
<tt class=literal>NORTHWEST</tt>, <tt class=literal>SOUTHEAST</tt>, 
and <tt class=literal>SOUTHWEST</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int CENTER </I><br><i class=emphasis>public final static int EAST </I><br><i class=emphasis>public final static int NORTH </I><br><i class=emphasis>public final static int NORTHEAST </I><br><i class=emphasis>public final static int NORTHWEST </I><br><i class=emphasis>public final static int SOUTH </I><br><i class=emphasis>public final static int SOUTHEAST </I><br><i class=emphasis>public final static int SOUTHWEST </I><br><i class=emphasis>public final static int WEST </I><br>
<dd>

<p class=para>
Constants used to set the <tt class=literal>anchor</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public int fill </I><br>
<dd>

<p class=para>
The value of <tt class=literal>fill</tt> controls 
the component's resize policy. If <tt class=literal>fill</tt> 
is <tt class=literal>NONE</tt> (the default), the 
layout manager tries to give the component its preferred size. If <tt class=literal>fill</tt> 
is <tt class=literal>VERTICAL</tt>, it resizes in 
height if additional space is available. If fill is <tt class=literal>HORIZONTAL</tt>, 
it resizes in width. If fill is <tt class=literal>BOTH</tt>, 
the layout manager takes advantage of all the space available in either 
direction. <a href="#JAWT-CH-7-FIG-11">Figure 7.11</A> demonstrates <tt class=literal>VERTICAL</tt> (A), 
<tt class=literal>HORIZONTAL</tt> (B), and <tt class=literal>NONE</tt> 
(C) values; <a href="ch07_06.htm">Figure 7.8</A> demonstrated the use of <tt class=literal>BOTH</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int NONE</I><br><i class=emphasis>public final static int BOTH</I><br><i class=emphasis>public final static int HORIZONTAL</I><br><i class=emphasis>public final static int VERTICAL</I><br>
<dd>

<p class=para>
Constants used to set <tt class=literal>fill</tt>.</DL>
<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-7-FIG-11">Figure 7.11: GridBagLayout with fill values of VERTICAL, HORIZONTAL, and NONE</A></h4>


<p>
<img align=middle src="figs/jawt0711.gif" alt="[Graphic: Figure 7-11]" width=503 height=145 border=0>

</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int gridx </I><br><i class=emphasis>public int gridy </I><br>
<dd>

<p class=para>
The <tt class=literal>gridx</tt> and <tt class=literal>gridy</tt> 
variables specify the grid position where this component will be placed. 
(<tt class=literal>0,0</tt>) specifies the cell at the origin of the screen. <a href="#JAWT-CH-7-TAB-2">Table 7.2</A> 
shows the <tt class=literal>gridx</tt> and <tt class=literal>gridy</tt> 
values for the screen in <a href="ch07_06.htm">Figure 7.8</A>. 

<p class=para>
It isn't necessary to set <tt class=literal>gridx</tt> 
and <tt class=literal>gridy</tt> to a specific location; 
if you set these fields to <tt class=literal>RELATIVE</tt> 
(the default), the system calculates the location for you. According to 
the comments in the source code, if <tt class=literal>gridx</tt> 
is <tt class=literal>RELATIVE</tt>, the component 
appears to the right of the last component added to the layout. If <tt class=literal>gridy</tt> 
is <tt class=literal>RELATIVE</tt>, the component 
appears below the last component added to the layout. However, this is 
misleadingly simple. <tt class=literal>RELATIVE</tt> 
placement works best if you are adding components along a row or a column. 
In this case, there are four possibilities to consider: </DL>
<p>
<ul class=itemizedlist>
<li class=listitem><tt class=literal>gridx</tt> and <tt class=literal>gridy</tt> 
<tt class=literal>RELATIVE</tt>: components are placed 
in one row. 

<p>
<li class=listitem><tt class=literal>gridx</tt> <tt class=literal>RELATIVE</tt>, 
<tt class=literal>gridy</tt> constant: components 
are placed in one row, each to the right of the previous component. 

<p>
<li class=listitem><tt class=literal>gridx</tt> constant, <tt class=literal>gridy</tt> 
<tt class=literal>RELATIVE</tt>: components are placed 
in one column, each below the previous component.

<p>
<li class=listitem>Varying <tt class=literal>gridx</tt> or <tt class=literal>gridy</tt> 
while setting the other field to <tt class=literal>RELATIVE</tt> 
appears to start a new row, placing the component as the first element 
in the row. 

<p>
</UL>
<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int gridwidth </I><br><i class=emphasis>public int gridheight </I><br>
<dd>

<p class=para>
<tt class=literal>gridwidth</tt> and <tt class=literal>gridheight</tt> 
set the number of rows (<tt class=literal>gridwidth</tt>) 
and columns (<tt class=literal>gridheight</tt>) a 
particular component occupies. If <tt class=literal>gridwidth</tt> 
or <tt class=literal>gridheight</tt> is set to <tt class=literal>REMAINDER</tt>, 
the component will be the last element of the row or column occupying 
any space that's remaining. <a href="#JAWT-CH-7-TAB-2">Table 7.2</A> shows 
the <tt class=literal>gridwidth</tt> and <tt class=literal>gridheight</tt> 
values for the screen in <a href="ch07_06.htm">Figure 7.8</A>. For the components 
in the last column, the <tt class=literal>gridwidth</tt> 
values could be <tt class=literal>REMAINDER</tt>. 
Likewise, <tt class=literal>gridheight</tt> could 
be set to <tt class=literal>REMAINDER</tt> for the 
components in the last row. 

<p class=para>
<tt class=literal>gridwidth</tt> and <tt class=literal>gridheight</tt> 
may also have the value <tt class=literal>RELATIVE</tt>, 
which forces the component to be the next to last component in the row 
or column. Looking back to <a href="ch07_06.htm">Figure 7.8</A>: if button 
six has a <tt class=literal>gridwidth</tt> of <tt class=literal>RELATIVE</tt>, 
button seven won't appear because button five is the last item in 
the row, and six is already next to last. If button five has a <tt class=literal>gridheight</tt> 
of <tt class=literal>RELATIVE</tt>, the layout manager 
will reserve space below it, so the button can be the next to last item 
in the column. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int RELATIVE </I><br>
<dd>

<p class=para>
Constant used for <tt class=literal>gridx</tt> and 
<tt class=literal>gridy</tt> to request relative placement, 
and by <tt class=literal>gridheight</tt> and <tt class=literal>gridwidth</tt> 
to specify the next to last component in a column or row. The behavior 
of <tt class=literal>RELATIVE</tt> placement can be 
very counter intuitive; in most cases, you will be better off specifying 
<tt class=literal>gridx</tt>, <tt class=literal>gridy</tt>, 
<tt class=literal>gridheight</tt>, and <tt class=literal>gridwidth</tt> 
explicitly. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int REMAINDER </I><br>
<dd>

<p class=para>
Constant used for <tt class=literal>gridwidth</tt> 
and <tt class=literal>gridheight</tt>, to specify 
that a component should fill the rest of the row or column. </DL>
<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="JAWT-CH-7-TAB-2">Table 7.2: Demonstrating gridx/gridy/gridwidth/gridheight</A></CAPTION>
<tr class=row>
<th align="LEFT">Component</TH>
<th align="LEFT">gridx</TH>
<th align="LEFT">gridy</TH>
<th align="LEFT">gridwidth</TH>
<th align="LEFT">gridheight</TH>
</TR>
<tr class=row>
<td align="LEFT">One</TD>
<td align="LEFT">0</TD>
<td align="LEFT">0</TD>
<td align="LEFT">1</TD>
<td align="LEFT">1</TD>
</TR>
<tr class=row>
<td align="LEFT">Two</TD>
<td align="LEFT">1</TD>
<td align="LEFT">0</TD>
<td align="LEFT">1</TD>
<td align="LEFT">1</TD>
</TR>
<tr class=row>
<td align="LEFT">Three</TD>
<td align="LEFT">2</TD>
<td align="LEFT">0</TD>
<td align="LEFT">1</TD>
<td align="LEFT">1</TD>
</TR>
<tr class=row>
<td align="LEFT">Four</TD>
<td align="LEFT">0</TD>
<td align="LEFT">1</TD>
<td align="LEFT">2</TD>
<td align="LEFT">1</TD>
</TR>
<tr class=row>
<td align="LEFT">Five</TD>
<td align="LEFT">2</TD>
<td align="LEFT">1</TD>
<td align="LEFT">1</TD>
<td align="LEFT">2</TD>
</TR>
<tr class=row>
<td align="LEFT">Six</TD>
<td align="LEFT">0</TD>
<td align="LEFT">2</TD>
<td align="LEFT">1</TD>
<td align="LEFT">1</TD>
</TR>
<tr class=row>
<td align="LEFT">Seven</TD>
<td align="LEFT">1</TD>
<td align="LEFT">2</TD>
<td align="LEFT">1</TD>
<td align="LEFT">3</TD>
</TR>
</TABLE>
<p>
</DIV>
<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Insets insets </I><br>
<dd>

<p class=para>
The <tt class=literal>insets</tt> field specifies 
the external padding in pixels around the component (i.e., between the component 
and the edge of the cell, or cells, allotted to it). An <tt class=literal>Insets</tt> 
object can specify different padding for the top, bottom, left, and right 
sides of the component. 

<p>
<dt class=varlistentry><i class=emphasis>public int ipadx </I><br><i class=emphasis>public int ipady </I><br>
<dd>

<p class=para>
<tt class=literal>ipadx</tt> and <tt class=literal>ipady</tt> 
specify the internal padding within the component. <tt class=literal>ipadx</tt> 
specifies the extra space to the right and left of the component (so the 
minimum width increases by <tt class=literal>2*ipadx</tt> 
pixels). <tt class=literal>ipady</tt> specifies the 
extra space above and below the component (so the minimum height increases 
by <tt class=literal>2*ipady</tt> pixels). 

<p class=para>
The difference between insets (external padding) and the <tt class=literal>ipadx</tt>, 
<tt class=literal>ipady</tt> variables (internal padding) 
is confusing. The insets don't add space to the component itself; 
they are external to the component. <tt class=literal>ipadx</tt> 
and <tt class=literal>ipady</tt> change the component's 
minimum size, so they do add space to the component itself. 

<p>
<dt class=varlistentry><i class=emphasis>public double weightx </I><br><i class=emphasis>public double weighty </I><br>
<dd>

<p class=para>
The <tt class=literal>weightx</tt> and <tt class=literal>weighty</tt> 
variables describe how to distribute any additional space within the container. 
They allow you to control how components grow (or shrink) when the user 
resizes the container. If <tt class=literal>weightx</tt> 
is 0, the component won't get any additional space available in its 
row. If one or more components in a row have <tt class=literal>weightx</tt> 
values greater than 0, any extra space is distributed proportionally between 
them. For example, if one component has a <tt class=literal>weightx</tt> 
value of 1 and the others are all 0, that one component will get all the 
additional space. If four components in a row each have <tt class=literal>weightx</tt> 
values of 1 and the other components have <tt class=literal>weightx</tt> 
values of 0, the four components each get one quarter of the additional 
space. <tt class=literal>weighty</tt> behaves similarly. 
Because <tt class=literal>weightx</tt> and <tt class=literal>weighty</tt> 
control the distribution of extra space in any row or column, setting either 
for one component may affect the position of other components. </DL>
Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public GridBagConstraints () </I><br>
<dd>

<p class=para>
The constructor creates a <tt class=literal>GridBagConstraints</tt> 
object in which all the fields have their default values. These defaults 
are shown in the <a href="#JAWT-CH-7-TAB-3">Table 7.3</A>. </DL>
<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="JAWT-CH-7-TAB-3">Table 7.3: GridBagConstraints Defaults.</A></CAPTION>
<tr class=row>
<th align="LEFT">Variable</TH>
<th align="LEFT">Value</TH>
<th align="LEFT">Description</TH>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>anchor</tt></TD>
<td align="LEFT"><tt class=literal>CENTER</tt></TD>
<td align="LEFT">

<p class=para>
If the component is smaller than the space available, it will be centered 
within its region.</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>fill</tt></TD>
<td align="LEFT"><tt class=literal>NONE</tt></TD>
<td align="LEFT">

<p class=para>
The component should not resize itself if extra space is available 
within its region.</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>gridx</tt></TD>
<td align="LEFT"><tt class=literal>RELATIVE</tt></TD>
<td align="LEFT">

<p class=para>
The component associated with this constraint will be positioned relative 
to the last item added. If all components have <tt class=literal>gridx</tt> and <tt class=literal>gridy</tt> <tt class=literal>RELATIVE</tt>, 
they will be placed in a single row.</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>gridy</tt></TD>
<td align="LEFT"><tt class=literal>RELATIVE</tt></TD>
<td align="LEFT">

<p class=para>
The component associated with this constraint will be positioned relative 
to the last item added.</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>gridwidth</tt></TD>
<td align="LEFT"><tt class=literal>1</tt></TD>
<td align="LEFT">

<p class=para>
The component will occupy a single cell within the layout.</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>gridheight</tt></TD>
<td align="LEFT"><tt class=literal>1</tt></TD>
<td align="LEFT">

<p class=para>
The component will occupy a single cell within the layout.</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>insets</tt></TD>
<td align="LEFT"><tt class=literal>0x0x0x0</tt></TD>
<td align="LEFT">

<p class=para>
No extra space is added around the edges of the component.</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>ipadx</tt></TD>
<td align="LEFT"><tt class=literal>0</tt></TD>
<td align="LEFT">

<p class=para>
There is no internal padding for the component.</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>ipady</tt></TD>
<td align="LEFT"><tt class=literal>0</tt></TD>
<td align="LEFT">

<p class=para>
There is no internal padding for the component.</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>weightx</tt></TD>
<td align="LEFT"><tt class=literal>0</tt></TD>
<td align="LEFT">

<p class=para>
The component will not get any extra space, if it is available.</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>weighty</tt></TD>
<td align="LEFT"><tt class=literal>0</tt></TD>
<td align="LEFT">

<p class=para>
The component will not get any extra space, if it is available.</TD>
</TR>
</TABLE>
<p>
</DIV>
Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Object clone ()  </I><br>
<dd>

<p class=para>
The <tt class=literal>clone()</tt> method creates 
a clone of the <tt class=literal>GridBagConstraints</tt> 
so the same <tt class=literal>GridBagConstraints</tt> 
object can be associated with multiple components. </DL>
</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch07_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>GridBagLayout</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Combining Layouts</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
