<html>
<head>
<title>[Chapter 7] Layouts</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:39:11 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">
<script language='JavaScript'>
<!--
if (location.replace) {
 location.replace ('../../../WebStripper/protected.html#link=http://rtfm.vn.ua/prog/perl/orb/books/java/awt/ch07_js.htm');
}
// --></script>

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch07_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="JAWT-CH-7">7. Layouts</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
<a href='ch07_02.htm'>FlowLayout</a><br>
<a href='ch07_03.htm'>BorderLayout</a><br>
<a href='ch07_04.htm'>GridLayout</a><br>
<a href='ch07_05.htm'>CardLayout</a><br>
<a href='ch07_06.htm'>GridBagLayout</a><br>
<a href='ch07_07.htm'>GridBagConstraints</a><br>
<a href='ch07_08.htm'>Combining Layouts</a><br>
<a href='ch07_09.htm'>Disabling the LayoutManager</a><br>
<a href='ch07_10.htm'>Designing Your Own LayoutManager</a><br>
<a href='ch07_11.htm'>The sun.awt Layout Collection</a><br>
<a href='ch07_12.htm'>Other Layouts Available on the Net</a><br>
<p>
<p>
</DIV>

<p class=para>
This chapter expands upon the idea of a layout manager, which was mentioned 
briefly in the previous chapter. Every container has a <tt class=literal>LayoutManager</tt> 
that is responsible for positioning the component objects within it, regardless 
of the platform or the screen size. Layout managers eliminate the need 
to compute component placement on your own, which would be a losing 
proposition since the size required for any component depends on the platform 
on which it is displayed. Even for a simple layout, the code required to 
discover component sizes and compute absolute positions could be hundreds 
of lines, particularly if you concern yourself with what happens when the 
user resizes a window. A layout manager takes care of this for you. It 
asks each component in the layout how much space it requires, then arranges 
the components on the screen as best it can, based on the component sizes 
on the platform in use and the space available, resizing the components 
as needed.<a name="CH07.LAYOUT1"></A>

<p class=para>
To find out how much space a component needs, a layout manager 
calls the component's <tt class=literal>getMinimumSize()</tt> 
and <tt class=literal>getPreferredSize()</tt> methods. 
(&nbsp;&nbsp;Java 1.1 also has a <tt class=literal>getMaximumSize()</tt> method; the existing layout managers don't take advantage of it.) These methods report the minimum space that a component requires to be displayed 
correctly and the optimal size at which it looks best. Thus, 
each component must know its space requirements; the layout manager uses 
these to arrange the screen; and your Java program never has to worry 
about platform-dependent positioning. 

<p class=para>
The <tt class=literal>java.awt</tt> package provides 
five layout managers: <tt class=literal>FlowLayout</tt>, 
<tt class=literal>BorderLayout</tt>, <tt class=literal>GridLayout</tt>, 
<tt class=literal>CardLayout</tt>, and <tt class=literal>GridBagLayout</tt>. 
Four additional layouts are provided in the <tt class=literal>sun.awt</tt> 
package: <tt class=literal>HorizBagLayout</tt>, <tt class=literal>VerticalBagLayout</tt>, 
<tt class=literal>OrientableFlowLayout</tt>, and <tt class=literal>VariableGridLayout</tt>. 
<tt class=literal>OrientableFlowLayout</tt> is new 
to Java 1.1. Of the 1.0 layouts, all are available in the JDK and Internet 
Explorer. The <tt class=literal>VariableGridLayout</tt> 
is also available with Netscape Navigator. This chapter discusses all of 
them, along with the <tt class=literal>LayoutManager</tt> 
and <tt class=literal>LayoutManager2</tt> interfaces; 
we'll pay particular attention to how each layout manager computes 
positions for its components. We will also discuss how to combine layouts 
to generate more complex screens and how to create your own <tt class=literal>LayoutManager</tt> 
for special situations. 

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-7-SECT-1">7.1 The LayoutManager Interface</A></h2>

<p class=para>
<a name="CH07.LAYOUT2"></A>The <tt class=literal>LayoutManager</tt> interface 
defines the responsibilities of something that wants to lay out <tt class=literal>Component</tt>s 
within a <tt class=literal>Container</tt>. It is the 
<tt class=literal>LayoutManager</tt>'s duty 
to determine the position and size of each component within the <tt class=literal>Container</tt>. 
You will never directly call the methods of the <tt class=literal>LayoutManager</tt> 
interface; for the most part, layout managers do their work behind 
the scenes. Once you have created a <tt class=literal>LayoutManager</tt> 
object and told the container to use it (by calling <tt class=literal>setLayout()</tt>), 
you're finished with it. The system calls the appropriate methods 
in the layout manager when necessary. 

<p class=para>
Therefore, the <tt class=literal>LayoutManager</tt> 
interface is most important when you are writing a new layout manager; 
we'll discuss it here because it's the scaffolding on which 
all layout managers are based. Like any interface, <tt class=literal>LayoutManager</tt> 
specifies the methods a layout manager must implement but says nothing 
about how the <tt class=literal>LayoutManager</tt> 
does its job. Therefore, we'll make a few observations before proceeding. 
First, a layout manager is free to ignore some of its components; there 
is no requirement that a layout manager display everything. For example, 
a <tt class=literal>Container</tt> using a <tt class=literal>BorderLayout</tt> 
might include thirty or forty components. However, the <tt class=literal>BorderLayout</tt> 
will display at most five of them (the last component placed in each of 
its five named areas). Likewise, a <tt class=literal>CardLayout</tt> 
may manage many components but displays only one at a time. 

<p class=para>
Second, a layout manager can do anything it wants with the components' 
minimum and preferred sizes. It is free to ignore either. It makes sense 
that a layout manager can ignore a preferred size; after all, "preferred" 
means "give me this if it's available." However, a layout 
manager can also ignore a minimum size. At times, there is no reasonable 
alternative: the container may not have enough room to display a 
component at its minimum size. How to handle this situation is left to 
the layout manager's discretion. All layout managers currently ignore a component's maximum size, though this may change in the future. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-7-SECT-1.1">Methods of the LayoutManager Interface</A></h3>

<p class=para>
Five methods make up the <tt class=literal>LayoutManager</tt> 
interface. If you create your own class that implements <tt class=literal>LayoutManager</tt>, 
you must define all five. As you will see, many of the methods do not have 
to do anything, but there must still be a stub with the appropriate method 
signature. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public abstract void addLayoutComponent (String name, Component component) 
  </I><br>
<dd>

<p class=para>
The <tt class=literal>addLayoutComponent()</tt> method 
is called only when the program assigns a <tt class=literal>name</tt> 
to the <tt class=literal>component</tt> when adding 
it to the layout (i.e., the program calls <tt class=literal>add(String, 
Component)</tt> rather than simply calling <tt class=literal>add(Component)</tt> 
or the Java 1.1 <tt class=literal>add(Component, Object)</tt>). 
It is up to the layout manager to decide what, if anything, to do with 
the name. For example, <tt class=literal>BorderLayout</tt> 
uses <tt class=literal>name</tt> to specify an area 
on the screen in which to display the component. Most layout managers don't 
require a name and will only implement a stub. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void removeLayoutComponent (Component component)  </I><br>
<dd>

<p class=para>
The <tt class=literal>removeLayoutComponent()</tt> 
method's responsibility is to remove <tt class=literal>component</tt> 
from any internal storage used by the layout manager. This method will 
probably be stubbed out for your own layouts and do nothing. However, it may need to do something if your layout manager associates components 
with names. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract Dimension preferredLayoutSize (Container parent)  </I><br>
<dd>

<p class=para>
The <tt class=literal>preferredLayoutSize()</tt> method 
is called to determine the preferred size of the components within the 
<tt class=literal>Container</tt>. It returns a <tt class=literal>Dimension</tt> 
object that contains the required height and width. <tt class=literal>parent</tt> 
is the object whose components need to be laid out. Usually, the <tt class=literal>LayoutManager</tt> 
determines how to size <tt class=literal>parent</tt> 
by calculating the sizes of the components within it and calculating the 
dimensions required to display them. On other occasions, it may just return 
<tt class=literal>parent.setSize()</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract Dimension minimumLayoutSize (Container parent)  </I><br>
<dd>

<p class=para>
The <tt class=literal>minimumLayoutSize()</tt> method 
is called to determine the minimum size of the components within the <tt class=literal>Container</tt>. 
It returns a <tt class=literal>Dimension</tt> object 
that contains the required height and width. <tt class=literal>parent</tt> 
is the object whose components need to be laid out. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void layoutContainer (Container parent)  </I><br>
<dd>

<p class=para>
The <tt class=literal>layoutContainer()</tt> method 
is where a <tt class=literal>LayoutManager</tt> does 
most of its work. The <tt class=literal>layoutContainer()</tt> 
method is responsible for the positioning of all the <tt class=literal>Components</tt> 
of <tt class=literal>parent</tt>. Each specific layout 
positions the enclosed components based upon its own rules. </DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-7-SECT-1.2">The LayoutManager2 Interface</A></h3>

<p class=para>
<a name="CH07.LAYOUT3"></A>Numerous changes were introduced in Java 1.1 to make it conform to various 
design patterns. These patterns provide consistency in usage and make Java 
programming easier. The <tt class=literal>LayoutManager2</tt> 
interface was introduced for this reason. This new interface solves a problem 
that occurs when working with the <tt class=literal>GridBagLayout</tt>. 
While the <tt class=literal>addLayoutComponent(String, Component)</tt> 
method of <tt class=literal>LayoutManager</tt> works 
great for <tt class=literal>BorderLayout</tt> and 
<tt class=literal>CardLayout</tt>, you can't 
use it for a <tt class=literal>GridBagLayout</tt>. 
The position of a component in a <tt class=literal>GridBagLayout</tt> 
is controlled by a number of constraints, which are encapsulated in a <tt class=literal>GridBagConstraints</tt> 
object. To associate constraints with a component, you needed to call a 
<tt class=literal>setConstraints()</tt> method. Although 
this works, it is not consistent with the way you add components to other 
layouts. Furthermore, as more and more people create their own layout managers, 
the number of ways to associate positioning information with a component 
could grow endlessly. <tt class=literal>LayoutManager2</tt> 
defines a version of <tt class=literal>addLayoutComponent()</tt> 
that can be used by all constraint-based layout managers, including older 
managers like <tt class=literal>BorderLayout</tt> 
and <tt class=literal>CardLayout</tt>. This method 
lets you pass an arbitrary object to the layout manager to provide positioning 
information. Layout managers that need additional information (like the 
<tt class=literal>GridBagConstraints</tt> object) 
now implement <tt class=literal>LayoutManager2</tt> 
instead of <tt class=literal>LayoutManager</tt>. 

<p class=para>
In addition to swapping the parameters to the <tt class=literal>addLayoutComponent(Component, 
Object)</tt>, the new <tt class=literal>LayoutManager2</tt> 
interface also defines several methods that aren't really needed 
now but will facilitate the introduction of "peerless components" 
in a later release. Methods of the LayoutManager2 interface

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public abstract void addLayoutComponent(Component comp, Object constraints) 
 <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>addLayoutComponent()</tt> method 
is called when a program assigns <tt class=literal>constraints</tt> 
to the component <tt class=literal>comp</tt> when 
adding it to the layout. In practice, this means that the program added 
the component by calling the new method <tt class=literal>add(Component 
component, Object constraints)</tt> rather than the 
older methods <tt class=literal>add(Component component)</tt> 
or <tt class=literal>add(String name, Component component)</tt>). 
It is up to the layout manager to decide what, if anything, to do with 
the <tt class=literal>constraints</tt>. For example, 
<tt class=literal>GridBagLayout</tt> uses <tt class=literal>constraints</tt> 
to associate a <tt class=literal>GridBagConstraints</tt> 
object to the component <tt class=literal>comp</tt>. 
<tt class=literal>BorderLayout</tt> uses <tt class=literal>constraints</tt> 
to associate a location string (like "Center") with the component. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract Dimension maximumLayoutSize(Container target) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>maximumLayoutSize()</tt> method 
must return the maximum size of the <tt class=literal>target</tt> 
container under this layout manager. Previously, only minimum and preferred 
sizes were available. Now a container can have a maximum size. Once layout 
managers support the concept of maximum sizes, containers will not grow 
without bounds when additional space is available. If there is no actual 
maximum, the <tt class=literal>Dimension</tt> should 
have a width and height of the constant <tt class=literal>Integer.MAX_VALUE</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract float getLayoutAlignmentX(Container target) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getLayoutAlignmentX()</tt> method 
must return the alignment of <tt class=literal>target</tt> 
along the x axis. The return value should be between 0.0 and 1.0. Values 
nearer 0 mean that the container will be positioned closer to the left 
edge of the area available. Values nearer 1 mean that the container will 
be positioned closer to the right. The value 0.5 means the container should be centered. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract float getLayoutAlignmentY(Container target) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getLayoutAlignmentY()</tt> method 
must return the alignment of <tt class=literal>target</tt> 
along the y axis. The return value should be between 0.0 and 1.0. Values 
nearer 0 mean that the container will be positioned closer to the top of 
the area available. Values nearer 1 mean that the container will be positioned 
closer to the bottom. The value 0.5 means the container should be centered. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void invalidateLayout(Container target) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>invalidateLayout()</tt> method 
tells the layout manager that any layout information it has for <tt class=literal>target</tt> 
is invalid. This method will usually be implemented as a stub (i.e., <tt class=literal>{}</tt>). 
However, if the layout manager caches any information about <tt class=literal>target</tt> 
when this method is called, the manager should consider that information 
invalid and discard it. </DL>
</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch06_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch07_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>FileDialog</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>FlowLayout</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
