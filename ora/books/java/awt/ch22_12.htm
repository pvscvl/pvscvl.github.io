<html>
<head>
<title>[Chapter 22] PixelGrabber</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 15:25:45 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch22_11.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 22<br>java.awt.image Reference</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch22_13.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=refnamediv>
<h1>PixelGrabber</H1>

<h2>Name</H2>

PixelGrabber

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch22-REFSECT1-AUTOID.69"></A></h2>
</DIV>


<p>
<img align=middle src="figs/pixelgr.gif" alt="[Graphic: Figure from the text]" width=503 height=53 border=0>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch22-REFSECT1-AUTOID.70">Description</A></h2>

<p class=para>
The <tt class=literal>PixelGrabber</tt> class is an 
<tt class=literal>ImageConsumer</tt> that captures 
the pixels from an image and saves them in an array. 

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch22-REFSECT1-AUTOID.71">Class Definition</A></h2>

<div class=screen>
<p>
<pre>
public class java.awt.image.PixelGrabber
    extends java.lang.Object 
    implements java.awt.image.ImageConsumer {
  // Constructors
  public PixelGrabber (Image img, int x, int y, int w, int h, 
      boolean forceRGB); <img src="gifs/bstar.gif" alt="(New)" border=0>
  public PixelGrabber (Image image, int x, int y, int width, 
      int height, int[] pixels, int offset, int scansize);
  public PixelGrabber (ImageProducer ip, int x, int y, int width, 
      int height, int[] pixels, int offset, int scansize);
  // Instance Methods
  public synchronized void abortGrabbing(); <img src="gifs/bstar.gif" alt="(New)" border=0>
  public synchronized ColorModel getColorModel(); <img src="gifs/bstar.gif" alt="(New)" border=0>
  public synchronized int getHeight(); <img src="gifs/bstar.gif" alt="(New)" border=0>
  public synchronized Object getPixels(); <img src="gifs/bstar.gif" alt="(New)" border=0>
  public synchronized int getStatus(); <img src="gifs/bstar.gif" alt="(New)" border=0>
  public synchronized int getWidth(); <img src="gifs/bstar.gif" alt="(New)" border=0>
  public boolean grabPixels() throws InterruptedException;
  public synchronized boolean grabPixels (long ms) 
      throws InterruptedException;
  public synchronized void imageComplete (int status);
  public void setColorModel (ColorModel model);
  public void setDimensions (int width, int height);
  public void setHints (int hints);
  public void setPixels (int x, int y, int width, int height, 
      ColorModel model, byte[] pixels, int offset, int scansize);
  public void setPixels (int x, int y, int width, int height, 
      ColorModel model, int[] pixels, int offset, int scansize);
  public void setProperties (Hashtable properties);
  public synchronized void startGrabbing(); <img src="gifs/bstar.gif" alt="(New)" border=0>
  public synchronized int status(); <img src="gifs/wstar.gif" alt="(Deprecated)" border=0>
}
</PRE>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch22-REFSECT1-AUTOID.72">Constructors</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch22-REFSECT2-AUTOID.95">PixelGrabber</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.113">public PixelGrabber (Image img, int x, int y, int w, int h, boolean forceRGB) <img src="gifs/bstar.gif" alt="(New)" border=0></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>img</I><br>
<dd>

<p class=para>
<tt class=literal>Image</tt> to 
use as source of pixel data.

<p>
<dt class=varlistentry><i class=emphasis>x</I><br>
<dd>

<p class=para>
x-coordinate of top-left corner of pixel data.

<p>
<dt class=varlistentry><i class=emphasis>y</I><br>
<dd>

<p class=para>
y-coordinate of top-left corner of pixel data.

<p>
<dt class=varlistentry><i class=emphasis>w</I><br>
<dd>

<p class=para>
Width of pixel data.

<p>
<dt class=varlistentry><i class=emphasis>h</I><br>
<dd>

<p class=para>
Height of pixel data.

<p>
<dt class=varlistentry><i class=emphasis>forceRGB</I><br>
<dd>

<p class=para>
<tt class=literal>true</tt> to 
force the use of the RGB color model; <tt class=literal>false</tt> 
otherwise. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Constructs a <tt class=literal>PixelGrabber</tt> instance 
to grab the specified area of the image. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.114">public PixelGrabber (Image image, int x, int y, int width, int height, int[] pixels, int offset, int scansize)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>image</I><br>
<dd>

<p class=para>
<tt class=literal>Image</tt> to 
use as source of pixel data.

<p>
<dt class=varlistentry><i class=emphasis>x</I><br>
<dd>

<p class=para>
x-coordinate of top-left corner of pixel data.

<p>
<dt class=varlistentry><i class=emphasis>y</I><br>
<dd>

<p class=para>
y-coordinate of top-left corner of pixel data.

<p>
<dt class=varlistentry><i class=emphasis>width</I><br>
<dd>

<p class=para>
Width of pixel data.

<p>
<dt class=varlistentry><i class=emphasis>height</I><br>
<dd>

<p class=para>
Height of pixel data.

<p>
<dt class=varlistentry><i class=emphasis>pixels</I><br>
<dd>

<p class=para>
Where to store pixel data when <tt class=literal>grabPixels()</tt> 
called.

<p>
<dt class=varlistentry><i class=emphasis>offset</I><br>
<dd>

<p class=para>
Offset from beginning of each line in pixels array.

<p>
<dt class=varlistentry><i class=emphasis>scansize</I><br>
<dd>

<p class=para>
Size of each line of data in pixels array. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Constructs a <tt class=literal>PixelGrabber</tt> instance 
to grab the specified area of the image and store the pixel data from this 
area in the array <tt class=literal>pixels[]</tt>. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.115">public PixelGrabber (ImageProducer ip, int x, int y, int width, int height, int[] pixels, int offset, int scansize)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>ip</I><br>
<dd>

<p class=para>
<tt class=literal>ImageProducer</tt> 
to use as source of pixel data.

<p>
<dt class=varlistentry><i class=emphasis>x</I><br>
<dd>

<p class=para>
x-coordinate of top-left corner of pixel data.

<p>
<dt class=varlistentry><i class=emphasis>y</I><br>
<dd>

<p class=para>
y-coordinate of top-left corner of pixel data.

<p>
<dt class=varlistentry><i class=emphasis>width</I><br>
<dd>

<p class=para>
Width of pixel data.

<p>
<dt class=varlistentry><i class=emphasis>height</I><br>
<dd>

<p class=para>
Height of pixel data.

<p>
<dt class=varlistentry><i class=emphasis>pixels</I><br>
<dd>

<p class=para>
Where to store pixel data when <tt class=literal>grabPixels()</tt> 
called.

<p>
<dt class=varlistentry><i class=emphasis>offset</I><br>
<dd>

<p class=para>
Offset from beginning of each line in pixels array.

<p>
<dt class=varlistentry><i class=emphasis>scansize</I><br>
<dd>

<p class=para>
Size of each line of data in pixels array. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Constructs a <tt class=literal>PixelGrabber</tt> instance 
to grab data from the specified area of the image generated by an <tt class=literal>ImageProducer</tt> 
and store the pixel data from this area in the array <tt class=literal>pixels[]</tt>. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch22-REFSECT1-AUTOID.73">Instance Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch22-REFSECT2-AUTOID.96">abortGrabbing</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.116">public synchronized void abortGrabbing() <img src="gifs/bstar.gif" alt="(New)" border=0></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Stops the <tt class=literal>PixelGrabber</tt>'s 
image-grabbing process. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch22-REFSECT2-AUTOID.97">getColorModel</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.117">public synchronized ColorModel getColorModel() <img src="gifs/bstar.gif" alt="(New)" border=0></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The color model the <tt class=literal>PixelGrabber</tt> 
is using for its array. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch22-REFSECT2-AUTOID.98">getHeight</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.118">public synchronized int getHeight() <img src="gifs/bstar.gif" alt="(New)" border=0></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The height of the grabbed image, or -1 if the height is not known. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch22-REFSECT2-AUTOID.99">getPixels</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.119">public synchronized Object getPixels() <img src="gifs/bstar.gif" alt="(New)" border=0></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The array of pixels. 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Either a byte array or an integer array is returned, or <tt class=literal>null</tt> 
if the size and format of the image are not yet known. Because the <tt class=literal>PixelGrabber</tt> 
may change its mind about what <tt class=literal>ColorModel</tt> 
it's using, different calls to this method may return different arrays 
until the image acquisition is complete. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch22-REFSECT2-AUTOID.100">getStatus</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.120">public synchronized int getStatus() <img src="gifs/bstar.gif" alt="(New)" border=0></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A combination of <tt class=literal>ImageObserver</tt> 
flags indicating what data is available. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch22-REFSECT2-AUTOID.101">getWidth</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.121">public synchronized int getWidth() <img src="gifs/bstar.gif" alt="(New)" border=0></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The width of the grabbed image, or -1 if the width is not known. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch22-REFSECT2-AUTOID.102">grabPixels</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.122">public boolean grabPixels() throws InterruptedException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>InterruptedException</tt><br>
<dd>

<p class=para>
If 
image grabbing is interrupted before completion. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the image has completed 
loading, <tt class=literal>false</tt> if the loading 
process aborted or an error occurred. 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Starts the process of grabbing the pixel data from the source and storing 
it in the array <tt class=literal>pixels[]</tt> from 
constructor. Returns when the image is complete, loading aborts, or an 
error occurs. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.123">public synchronized boolean grabPixels (long ms) throws InterruptedException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>ms</I><br>
<dd>

<p class=para>
Milliseconds to wait for completion. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if image has completed 
loading, <tt class=literal>false</tt> if the loading 
process aborted, or an error or a timeout occurred. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>InterruptedException</tt><br>
<dd>

<p class=para>
If image grabbing is interrupted before completion. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Starts the process of grabbing the pixel data from the source and storing 
it in the array <tt class=literal>pixels[]</tt> from 
constructor. Returns when the image is complete, loading aborts, an error 
occurs, or a timeout occurs. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch22-REFSECT2-AUTOID.103">imageComplete</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.124">public synchronized void imageComplete (int status)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>status</I><br>
<dd>

<p class=para>
Image loading completion status flags. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>ImageConsumer.imageComplete(</tt><tt class=literal>int</tt><tt class=literal>)</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Called by the <tt class=literal>ImageProducer</tt> 
to indicate that the image has been delivered. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch22-REFSECT2-AUTOID.104">setColorModel</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.125">void setColorModel (ColorModel model)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>model</I><br>
<dd>

<p class=para>
The color model for the image. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>ImageConsumer.setColorModel(</tt><tt class=literal>ColorModel</tt><tt class=literal>)</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Does nothing. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch22-REFSECT2-AUTOID.105">setDimensions</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.126">void setDimensions (int width, int height)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>width</I><br>
<dd>

<p class=para>
Width for image.

<p>
<dt class=varlistentry><i class=emphasis>height</I><br>
<dd>

<p class=para>
Height for image. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>ImageConsumer.setDimensions(</tt><tt class=literal>int, 
int</tt><tt class=literal>)</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Does nothing. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch22-REFSECT2-AUTOID.106">setHints</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.127">void setHints (int hints)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>hints</I><br>
<dd>

<p class=para>
Image consumption hints. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>ImageConsumer.setHints(</tt><tt class=literal>int</tt><tt class=literal>)</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Does nothing. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch22-REFSECT2-AUTOID.107">setPixels</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.128">void setPixels (int x, int y, int width, int height, ColorModel model, byte[] pixels, int offset, int scansize)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>x</I><br>
<dd>

<p class=para>
x-coordinate of top-left corner of pixel data delivered 
with this method call.

<p>
<dt class=varlistentry><i class=emphasis>y</I><br>
<dd>

<p class=para>
y-coordinate of top-left corner of pixel data delivered 
with this method call.

<p>
<dt class=varlistentry><i class=emphasis>width</I><br>
<dd>

<p class=para>
Width of the rectangle of pixel data delivered with 
this method call.

<p>
<dt class=varlistentry><i class=emphasis>height</I><br>
<dd>

<p class=para>
Height of the rectangle of pixel data delivered with 
this method call.

<p>
<dt class=varlistentry><i class=emphasis>model</I><br>
<dd>

<p class=para>
Color model of image data.

<p>
<dt class=varlistentry><i class=emphasis>pixels</I><br>
<dd>

<p class=para>
Image data.

<p>
<dt class=varlistentry><i class=emphasis>offset</I><br>
<dd>

<p class=para>
Offset from beginning of the pixels array.

<p>
<dt class=varlistentry><i class=emphasis>scansize</I><br>
<dd>

<p class=para>
Size of each line of data in pixels array. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>ImageConsumer.setPixels(</tt><tt class=literal>int, 
int, int, int, ColorModel, byte[], int, int</tt><tt class=literal>)</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Called by the <tt class=literal>ImageProducer</tt> 
to deliver pixel data from the image. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.129">void setPixels (int x, int y, int width, int height, ColorModel model, int[] pixels, int offset, int scansize)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>x</I><br>
<dd>

<p class=para>
x-coordinate of top-left corner of pixel data delivered 
with this method call.

<p>
<dt class=varlistentry><i class=emphasis>y</I><br>
<dd>

<p class=para>
y-coordinate of top-left corner of pixel data delivered 
with this method call.

<p>
<dt class=varlistentry><i class=emphasis>width</I><br>
<dd>

<p class=para>
Width of the rectangle of pixel data delivered with 
this method call.

<p>
<dt class=varlistentry><i class=emphasis>height</I><br>
<dd>

<p class=para>
Height of the rectangle of pixel data delivered with 
this method call.

<p>
<dt class=varlistentry><i class=emphasis>model</I><br>
<dd>

<p class=para>
Color model of image data.

<p>
<dt class=varlistentry><i class=emphasis>pixels</I><br>
<dd>

<p class=para>
Image data.

<p>
<dt class=varlistentry><i class=emphasis>offset</I><br>
<dd>

<p class=para>
Offset from beginning of the pixels array.

<p>
<dt class=varlistentry><i class=emphasis>scansize</I><br>
<dd>

<p class=para>
Size of each line of data in pixels array. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>ImageConsumer.setPixels(</tt><tt class=literal>int, 
int, int, int, ColorModel, int[], int, int</tt><tt class=literal>)</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Called by the <tt class=literal>ImageProducer</tt> 
to deliver pixel data from the image. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch22-REFSECT2-AUTOID.108">setProperties</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.130">void setProperties (Hashtable properties)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>properties</I><br>
<dd>

<p class=para>
The properties for the image. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>ImageConsumer.setProperties(</tt><tt class=literal>Hashtable</tt><tt class=literal>)</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Does nothing. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch22-REFSECT2-AUTOID.109">startGrabbing</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.131">public synchronized void startGrabbing() <img src="gifs/bstar.gif" alt="(New)" border=0></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Starts the <tt class=literal>PixelGrabber</tt>'s 
image-grabbing process. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch22-REFSECT2-AUTOID.110">status</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch22-REFSECT3-AUTOID.132">public synchronized int status () <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>ImageObserver</tt> flags OR'ed 
together representing the available information about the image. Replaced 
by <tt class=literal>getStatus()</tt>. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch22-REFSECT1-AUTOID.74">See Also</A></h2>

<p class=para>
<tt class=literal>ColorModel</tt>, <tt class=literal>Hashtable</tt>, 
<tt class=literal>Image</tt>, <tt class=literal>ImageConsumer</tt>, 
<tt class=literal>ImageProducer</tt>, <tt class=literal>I</tt><tt class=literal>nterruptedException</tt>, <tt class=literal>MemoryImageSource</tt>, <tt class=literal>Object</tt> 

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch22_11.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch22_13.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>MemoryImageSource</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>ReplicateScaleFilter <img src="gifs/bstar.gif" alt="(New)" border=0></td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
