<html>
<head>
<title>[Chapter 2] 2.5 Rectangle</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:24:54 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 2<br>Simple Graphics</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch02_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-2-SECT-5">2.5 Rectangle</A></h2>

<p class=para>
<a name="CH02.RECT1"></A>The <tt class=literal>Rectangle</tt> class encapsulates 
x and y coordinates and width and height (<tt class=literal>Point</tt> 
and <tt class=literal>Dimension</tt> information) 
within a single object. It is often used by methods that return a rectangular 
boundary as a single object: for example, <tt class=literal>Polygon.getBounds()</tt>, 
<tt class=literal>Component.getBounds()</tt>, and 
<tt class=literal>Graphics.getClipBounds()</tt>. Like 
<tt class=literal>Point</tt>, the <tt class=literal>Rectangle</tt> 
class is not a visual object and does not represent a rectangle on the 
screen; ironically, <tt class=literal>drawRect()</tt> 
and <tt class=literal>fillRect()</tt> don't 
take <tt class=literal>Rectangle</tt> as an argument. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-2-SECT-5.1">Rectangle Methods</A></h3>Variables

<p class=para>
The four public variables available for <tt class=literal>Rectangle</tt> 
have the same names as the public instance variables of <tt class=literal>Point</tt> 
and <tt class=literal>Dimension</tt>. They are all 
accessible directly or through use of the <tt class=literal>getBounds()</tt> 
method. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int x </I><br>
<dd>

<p class=para>
The x coordinate of the upper left corner. 

<p>
<dt class=varlistentry><i class=emphasis>public int y </I><br>
<dd>

<p class=para>
The y coordinate of the upper left corner. 

<p>
<dt class=varlistentry><i class=emphasis>public int width </I><br>
<dd>

<p class=para>
The width variable represents the size of the <tt class=literal>Rectangle</tt> 
along the horizontal axis (left to right). Width should not be negative; 
however, there is nothing within the class to prevent this from happening. 

<p>
<dt class=varlistentry><i class=emphasis>public int height </I><br>
<dd>

<p class=para>
The height variable represents the size of the <tt class=literal>Rectangle</tt> 
along the vertical axis (top to bottom). Height should not be negative; however, 
there is nothing within the class to prevent this from happening. </DL>
Constructors

<p class=para>
The following seven constructors create <tt class=literal>Rectangle</tt> 
objects. When you create a <tt class=literal>Rectangle</tt>, 
you provide the location of the top left corner, along with the <tt class=literal>Rectangle</tt>'s 
width and height. A <tt class=literal>Rectangle</tt> 
located at (0,0) with a width and height of 100 has its bottom right corner 
at (99, 99). The <tt class=literal>Point</tt> (100, 
100) lies outside the <tt class=literal>Rectangle</tt>, 
since that would require a width and height of 101. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Rectangle () </I><br>
<dd>

<p class=para>
This <tt class=literal>Rectangle</tt> constructor 
creates a <tt class=literal>Rectangle</tt> object 
in which x, y, width, and height are all 0. 

<p>
<dt class=varlistentry><i class=emphasis>public Rectangle (int width, int height) </I><br>
<dd>

<p class=para>
This <tt class=literal>Rectangle</tt> constructor 
creates a <tt class=literal>Rectangle</tt> with (<tt class=literal>x</tt>, 
<tt class=literal>y</tt>) coordinates of (0,0) and the specified <tt class=literal>width</tt> 
and <tt class=literal>height</tt>. Notice that there 
is no <tt class=literal>Rectangle(int x, int y)</tt> 
constructor because that would have the same method signature as this one, 
and the compiler would have no means to differentiate them. 

<p>
<dt class=varlistentry><i class=emphasis>public Rectangle (int x, int y, int width, int height) </I><br>
<dd>

<p class=para>
The <tt class=literal>Rectangle</tt> constructor creates 
a <tt class=literal>Rectangle</tt> object with an 
initial x coordinate of <tt class=literal>x</tt>, 
y coordinate of <tt class=literal>y</tt>, width of 
<tt class=literal>width</tt>, and height of <tt class=literal>height</tt>. 
Height and width should be positive, but the constructor does not check 
for this. 

<p>
<dt class=varlistentry><i class=emphasis>public Rectangle (Rectangle r) </I><br>
<dd>

<p class=para>
This <tt class=literal>Rectangle</tt> constructor 
creates a <tt class=literal>Rectangle</tt> matching 
the original. The (<tt class=literal>x</tt>, <tt class=literal>y</tt>) coordinates are (<tt class=literal>r.x</tt>, 
<tt class=literal>r.y</tt>), with a width of <tt class=literal>r.width</tt> 
and a height of <tt class=literal>r.height</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public Rectangle (Point p, Dimension d) </I><br>
<dd>

<p class=para>
This <tt class=literal>Rectangle</tt> constructor 
creates a <tt class=literal>Rectangle</tt> with (<tt class=literal>x</tt>, 
<tt class=literal>y</tt>) coordinates of (<tt class=literal>p.x</tt>, <tt class=literal>p.y</tt>), 
a width of <tt class=literal>d.width</tt>, and a height 
of <tt class=literal>d.height</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public Rectangle (Point p) </I><br>
<dd>

<p class=para>
This <tt class=literal>Rectangle</tt> constructor 
creates a <tt class=literal>Rectangle</tt> with (<tt class=literal>x</tt>, 
<tt class=literal>y</tt>) coordinates of (<tt class=literal>p.x</tt>, <tt class=literal>p.y</tt>). 
The width and height are both zero. 

<p>
<dt class=varlistentry><i class=emphasis>public Rectangle (Dimension d) </I><br>
<dd>

<p class=para>
The last <tt class=literal>Rectangle</tt> constructor 
creates a <tt class=literal>Rectangle</tt> with (<tt class=literal>x</tt>, 
<tt class=literal>y</tt>) coordinates of (0, 0). The initial <tt class=literal>Rectangle</tt> 
width is <tt class=literal>d.width</tt> and height 
is <tt class=literal>d.height</tt>. </DL>
Shaping and sizing

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Rectangle getBounds() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
<a name="CH02.SIZE1"></A><a name="CH02.SIZE2"></A>The <tt class=literal>getBounds()</tt> method returns 
a copy of the original <tt class=literal>Rectangle</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void setBounds (int x, int y, int width, int height) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public void reshape (int x, int y, int width, int height) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>setBounds()</tt> method changes 
the origin of the <tt class=literal>Rectangle</tt> 
to (<tt class=literal>x</tt>, <tt class=literal>y</tt>) 
and changes the dimensions to <tt class=literal>width</tt> 
by <tt class=literal>height</tt>. 

<p class=para>
<tt class=literal>reshape()</tt> is the 
Java 1.0 name for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public void setBounds (Rectangle r) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setBounds()</tt> method changes 
the origin of the <tt class=literal>Rectangle</tt> to (<tt class=literal>r.x</tt>, <tt class=literal>r.y</tt>) 
and changes the dimensions to <tt class=literal>r.width</tt> 
by <tt class=literal>r.height</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public Point getLocation() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getLocation()</tt>retrieves 
the current origin of this rectangle as a <tt class=literal>Point</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void setLocation (int x, int y)  <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public void move (int x, int y) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>setLocation()</tt> method changes 
the origin of the <tt class=literal>Rectangle</tt>  
to (<tt class=literal>x</tt>, <tt class=literal>y</tt>). 

<p class=para>
<tt class=literal>move()</tt> is the Java 
1.0 name for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public void setLocation (Point p)  <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setLocation()</tt> method changes 
the <tt class=literal>Rectangle</tt>'s origin 
to (<tt class=literal>p.x</tt>, <tt class=literal>p.y</tt>). 

<p>
<dt class=varlistentry><i class=emphasis>public void translate (int x, int y) </I><br>
<dd>

<p class=para>
The <tt class=literal>translate()</tt> method moves 
the <tt class=literal>Rectangle</tt>'s origin 
by the amount (<tt class=literal>x</tt>, <tt class=literal>y</tt>). 
If the original <tt class=literal>Rectangle</tt>'s 
location (r) is (3, 4) and you call <tt class=literal>r.translate (4, 5)</tt>, 
then r's location becomes (7, 9). x and y may be negative. <tt class=literal>translate()</tt> 
has no effect on the <tt class=literal>Rectangle</tt>'s 
width and height. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension getSize () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getSize()</tt> method retrieves 
the current size of the rectangle as a <tt class=literal>Dimension</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void setSize() (int width, int height) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public void resize (int width, int height) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>setSize()</tt> method changes 
the <tt class=literal>Rectangle</tt>'s dimensions 
to <tt class=literal>width</tt> x <tt class=literal>height</tt>.

<p class=para>
<tt class=literal>resize()</tt> is the 
Java 1.0 name for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public void setSize() (Dimension d)  <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setSize()</tt> method changes 
the <tt class=literal>Rectangle</tt>'s dimensions 
to <tt class=literal>d.width</tt> x <tt class=literal>d.height</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void grow (int horizontal, int vertical) </I><br>
<dd>

<p class=para>
The <tt class=literal>grow()</tt> method increases 
the <tt class=literal>Rectangle</tt>'s dimensions 
by adding the amount <tt class=literal>horizontal</tt> 
on the left and the right and adding the amount <tt class=literal>vertical</tt> 
on the top and bottom. Therefore, all four of the rectangle's variables 
change. If the original location is (<tt class=literal>x</tt>, <tt class=literal>y</tt>), the new location will be (x-<tt class=literal>horizontal</tt>, 
y-<tt class=literal>vertical</tt>) (moving left and 
up if both values are positive); if the original size is (<tt class=literal>width,</tt> 
<tt class=literal>height</tt>), the new size will 
be (<tt class=literal>width+2*horizontal,</tt> <tt class=literal>height+2*vertical</tt>). 
Either horizontal or vertical can be negative to decrease the size of the 
<tt class=literal>Rectangle</tt>. The following code 
demonstrates the changes: </DL>
<p class=para>
<div class=screen>
<p>
<pre>
import java.awt.Rectangle;
public class rect {
    public static void main (String[] args) {
        Rectangle r = new Rectangle (100, 100, 200, 200);
        System.out.println (r);
        r.grow (50, 75);
        System.out.println (r);
        r.grow (-25, -50);
        System.out.println (r);
    }
}
</PRE>
</DIV>

<p class=para>
This program produces the following output: 

<p class=para>
<div class=screen>
<p>
<pre>
java.awt.Rectangle[x=100,y=100,width=200,height=200]
java.awt.Rectangle[x=50,y=25,width=300,height=350]
java.awt.Rectangle[x=75,y=75,width=250,height=250]
</PRE>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void add (int newX, int newY) </I><br>
<dd>

<p class=para>
The <tt class=literal>add()</tt> method incorporates 
the point (<tt class=literal>newX</tt>, <tt class=literal>newY</tt>) 
into the <tt class=literal>Rectangle</tt>. If this 
point is already in the <tt class=literal>Rectangle</tt>, 
there is no change. Otherwise, the size of the <tt class=literal>Rectangle</tt> 
increases to include (<tt class=literal>newX</tt>, 
<tt class=literal>newY</tt>) within itself. 

<p>
<dt class=varlistentry><i class=emphasis>public void add (Point p) </I><br>
<dd>

<p class=para>
This <tt class=literal>add()</tt> method incorporates 
the point (<tt class=literal>p.x</tt>, <tt class=literal>p.y</tt>) 
into the <tt class=literal>Rectangle</tt>. If this 
point is already in the <tt class=literal>Rectangle</tt>, 
there is no change. Otherwise, the size of the <tt class=literal>Rectangle</tt> 
increases to include (<tt class=literal>p.x</tt>, 
<tt class=literal>p.y</tt>) within itself. 

<p>
<dt class=varlistentry><i class=emphasis>public void add (Rectangle r) </I><br>
<dd>

<p class=para>
This <tt class=literal>add()</tt> method incorporates 
another <tt class=literal>Rectangle</tt> <tt class=literal>r</tt> 
into this <tt class=literal>Rectangle</tt>. This transforms 
the current rectangle into the union of the two <tt class=literal>Rectangle</tt>s. 
This method might be useful in a drawing program that lets you select multiple 
objects on the screen and create a rectangular area from them. 

<p class=para>
We will soon encounter a method called <tt class=literal>union()</tt> 
that is almost identical. <tt class=literal>add()</tt> 
and <tt class=literal>union()</tt> differ in that 
<tt class=literal>add()</tt> modifies the current 
<tt class=literal>Rectangle</tt>, while <tt class=literal>union()</tt> returns 
a new <tt class=literal>Rectangle</tt>. The resulting 
rectangles are identical. </DL>
Intersections

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public boolean contains (int x, int y) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public boolean inside (int x, int y) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
<a name="CH02.INTER1"></A><a name="CH02.INTER2"></A>The <tt class=literal>contains()</tt> method determines 
if the point (<tt class=literal>x</tt>, <tt class=literal>y</tt>) 
is within this <tt class=literal>Rectangle</tt>. If 
so, <tt class=literal>true</tt> is returned. If not, 
<tt class=literal>false</tt> is returned. 

<p class=para>
<tt class=literal>inside()</tt> is the 
Java 1.0 name for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean contains (Point p) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>contains()</tt> method determines 
if the point (<tt class=literal>p.x</tt>, <tt class=literal>p.y</tt>) 
is within this <tt class=literal>Rectangle</tt>. If 
so, <tt class=literal>true</tt> is returned. If not, 
<tt class=literal>false</tt> is returned. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean intersects (Rectangle r) </I><br>
<dd>

<p class=para>
The <tt class=literal>intersects()</tt> method checks 
whether <tt class=literal>Rectangle</tt> <tt class=literal>r</tt> 
crosses this <tt class=literal>Rectangle</tt> at any 
point. If it does, <tt class=literal>true</tt> is 
returned. If not, <tt class=literal>false</tt> is 
returned. 

<p>
<dt class=varlistentry><i class=emphasis>public Rectangle intersection (Rectangle r) </I><br>
<dd>

<p class=para>
The <tt class=literal>intersection()</tt> method returns 
a new <tt class=literal>Rectangle</tt> consisting 
of all points that are in both the current <tt class=literal>Rectangle</tt> 
and <tt class=literal>Rectangle</tt> <tt class=literal>r</tt>. 
For example, if <tt class=literal>r = new Rectangle (50, 50, 100, 100)</tt> 
and <tt class=literal>r1 = new Rectangle (100, 100, 75, 75)</tt>, 
then <tt class=literal>r.intersection (r1)</tt> is 
the <tt class=literal>Rectangle (100, 100, 50, 50)</tt>, 
as shown in <a href="#JAWT-CH-2-FIG-13">Figure 2.13</A>. </DL>
<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Rectangle union (Rectangle r) </I><br>
<dd>

<p class=para>
The <tt class=literal>union()</tt> method combines 
the current <tt class=literal>Rectangle</tt> and <tt class=literal>Rectangle</tt> 
<tt class=literal>r</tt> to form a new <tt class=literal>Rectangle</tt>. 
For example, if <tt class=literal>r = new Rectangle (50, 50, 100, 100)</tt> 
and <tt class=literal>r1 = new Rectangle (100, 100, 75, 75)</tt>, 
then <tt class=literal>r.union (r1)</tt> is the <tt class=literal>Rectangle 
(50, 50, 125, 125)</tt>. The original rectangle is 
unchanged. <a href="#JAWT-CH-2-FIG-14">Figure 2.14</A> demonstrates the effect of 
<tt class=literal>union()</tt>. Because <tt class=literal>fillRect()</tt> 
fills to <tt class=literal>width-1</tt> and <tt class=literal>height-1</tt>, 
the rectangle drawn appears slightly smaller than you would
expect. However, 
that's an artifact of how rectangles are drawn; the returned rectangle 
contains all the points within both. </DL>
<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-2-FIG-13">Figure 2.13: Rectangle intersection</A></h4>


<p>
<img align=middle src="figs/jawt0213.gif" alt="[Graphic: Figure 2-13]" width=202 height=202 border=0>

</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-2-FIG-14">Figure 2.14: Rectangle union</A></h4>


<p>
<img align=middle src="figs/jawt0214.gif" alt="[Graphic: Figure 2-14]" width=202 height=202 border=0>

</DIV>

Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public boolean isEmpty () </I><br>
<dd>

<p class=para>
The <tt class=literal>isEmpty()</tt> method checks 
whether there are any points within the <tt class=literal>Rectangle</tt>. 
If the width and height of the <tt class=literal>Rectangle</tt> 
are both 0 (or less), the <tt class=literal>Rectangle</tt> 
is empty, and this method returns <tt class=literal>true</tt>. 
If either width or height is greater than zero, <tt class=literal>isEmpty()</tt> 
returns <tt class=literal>false</tt>. This method 
could be used to check the results of a call to any method that returns 
a <tt class=literal>Rectangle</tt> object. 

<p>
<dt class=varlistentry><i class=emphasis>public int hashCode () </I><br>
<dd>

<p class=para>
The <tt class=literal>hashCode()</tt> method returns 
a hash code for the rectangle. The system calls this method when a <tt class=literal>Rectangle</tt> 
is used as the key for a hash table. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean equals (Object object) </I><br>
<dd>

<p class=para>
The <tt class=literal>equals()</tt> method overrides 
the <tt class=literal>Object</tt>'s <tt class=literal>equals()</tt> 
method to define what equality means for <tt class=literal>Rectangle</tt> 
objects. Two <tt class=literal>Rectangle</tt> objects 
are equal if their <tt class=literal>x</tt>, <tt class=literal>y</tt>, width, and height values are equal. 

<p>
<dt class=varlistentry><i class=emphasis>public String toString () </I><br>
<dd>

<p class=para>
The <tt class=literal>toString()</tt> method of <tt class=literal>Rectangle</tt> 
displays the current values of the <tt class=literal>x</tt>, <tt class=literal>y</tt>, width, and height variables. 
For example: </DL>
<p class=para>
<div class=screen>
<p>
<pre>
java.awt.Rectangle[x=100,y=200,width=300,height=400]
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch02_06.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Shape</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Polygon</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
