<html>
<head>
<title>[Chapter 5] 5.3 Buttons</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:34:28 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 5<br>Components</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch05_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-5-SECT-3">5.3 Buttons</A></h2>

<p class=para>
<a name="CH05.BUTTON"></A>The <tt class=literal>Button</tt> component provides 
one of the most frequently used objects in graphical applications. When 
the user selects a button, it signals the program that something needs 
to be done by sending an action event. The program responds in its <tt class=literal>handleEvent()</tt> 
method (for Java 1.0) or its <tt class=literal>actionPerformed()</tt> 
method (defined by Java 1.1's <tt class=literal>ActionListener</tt> 
interface). Next to <tt class=literal>Label</tt>, 
which does nothing, <tt class=literal>Button</tt> 
is the simplest component to understand. Because it is so simple, we will 
use a lot of buttons in our examples for the next few chapters. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-5-SECT-3.1">Button Methods</A></h3>Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Button () </I><br>
<dd>

<p class=para>
This constructor creates an empty <tt class=literal>Button</tt>. 
You can set the label later with <tt class=literal>setLabel()</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public Button (String label) </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>Button</tt> 
whose initial text is <tt class=literal>label</tt>. </DL>
Button Labels

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public String getLabel () </I><br>
<dd>

<p class=para>
The <tt class=literal>getLabel()</tt> method retrieves 
the current text of the label on the <tt class=literal>Button</tt> 
and returns it as a <tt class=literal>String</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void setLabel (String label) </I><br>
<dd>

<p class=para>
The <tt class=literal>setLabel()</tt> method changes 
the text of the label on the <tt class=literal>Button</tt> 
to <tt class=literal>label</tt>. If the new text is 
a different size from the old, it is necessary to revalidate the screen 
to ensure that the button size is correct. </DL>
Action Commands

<p class=para>
With Java 1.1, every button can have two names. One is what the user sees 
(the button's label); the other is what the programmer sees and 
is called the button's <i class=emphasis>action command</I>. 
Distinguishing between the label and the action command is a major help to 
internationalization. The label can be localized for the user's environment. 
However, this means that labels can vary at run-time and are therefore 
useless for comparisons within the program. For example, you can't 
test whether the user pushed the Yes button if that button 
might read Oui or Ja, depending on some run-time 
environment setting. To give the programmer something reliable for comparisons, 
Java 1.1 introduces the action command. The action command for our button 
might be Yes, regardless of the button's actual label. 

<p class=para>
By default, the action command is equivalent to the button's label. 
Java 1.0 code, which only relies on the label, will continue to work. Furthermore, 
you can continue to write in the Java 1.0 style as long as you're 
sure that your program will never have to account for other languages. 
These days, that's a bad bet. Even if you aren't implementing 
multiple locales now, get in the habit of testing a button's action 
command rather than its label; you will have less work to do when internationalization 
does become an issue. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public String getActionCommand () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getActionCommand()</tt> method 
returns the button's current action command. If no action command 
was explicitly set, this method returns the label. 

<p>
<dt class=varlistentry><i class=emphasis>public void setActionCommand (String command) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setActionCommand()</tt> method 
changes the button's action command to <tt class=literal>command</tt>. </DL>
Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public synchronized void addNotify () </I><br>
<dd>

<p class=para>
The <tt class=literal>addNotify()</tt> method creates 
the <tt class=literal>Button</tt> peer. If 
you override this method, first call <tt class=literal>super.addNotify()</tt>, 
then add your customizations. Then you can do everything you need with 
the information about the newly created peer. 

<p>
<dt class=varlistentry><i class=emphasis>protected String paramString () </I><br>
<dd>

<p class=para>
The <tt class=literal>paramString()</tt> method overrides 
the component's <tt class=literal>paramString()</tt> 
method. It is a protected method that calls the overridden <tt class=literal>paramString()</tt> 
to build a <tt class=literal>String</tt> from the 
different parameters of the <tt class=literal>Component</tt>. 
When the method <tt class=literal>paramString()</tt> is called for a <tt class=literal>Button</tt>, the 
button's label is added. Thus, for the <tt class=literal>Button</tt> 
created by the constructor <tt class=literal>new Button ("ZapfDingbats")</tt>, 
the results displayed from a call to <tt class=literal>toString()</tt> 
could be: </DL>
<div class=screen>
<p>
<pre>
java.awt.Button[77,5,91x21,label=ZapfDingbats]
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-5-SECT-3.2">Button Events</A></h3>

<p class=para>
<a name="CH05.BUTTON2"></A>With the 1.0 event model, <tt class=literal>Button</tt> 
components generate an <tt class=literal>ACTION_EVENT</tt> 
when the user selects the button. 

<p class=para>
With the version 1.1 event model, you register an <tt class=literal>ActionListener</tt> 
with the method <tt class=literal>addActionListener()</tt>. When the user selects the <tt class=literal>Button</tt>, 
the method <tt class=literal>ActionListener.actionPerformed()</tt> 
is called through the protected <tt class=literal>Button.processActionEvent()</tt> 
method. Key, mouse, and focus listeners are registered through the <tt class=literal>Component</tt> 
methods of <tt class=literal>addKeyListener()</tt>, 
<tt class=literal>addMouseListener()</tt>, or <tt class=literal>addMouseMotionListener()</tt>, 
and <tt class=literal>addFocusListener()</tt>, respectively. Action

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public boolean action (Event e, Object o)  </I><br>
<dd>

<p class=para>
The <tt class=literal>action()</tt> method for a <tt class=literal>Button</tt> 
is called when the user presses and releases the button. <tt class=literal>e</tt> 
is the <tt class=literal>Event</tt> instance for the 
specific event, while <tt class=literal>o</tt> is 
the button's label. The default implementation of <tt class=literal>action()</tt> 
does nothing and returns <tt class=literal>false</tt>, 
passing the event to the button's container for processing. For a 
button to do something useful, you should override either this method or the container's <tt class=literal>action()</tt> 
method. <a href="#JAWT-CH-5-EX-1">Example 5.1</A> is a simple applet called <tt class=literal>ButtonTest</tt> 
that demonstrates the first approach; it creates a <tt class=literal>Button</tt> 
subclass called <tt class=literal>TheButton</tt>, 
which overrides <tt class=literal>action()</tt>. This 
simple subclass doesn't do much; it just labels the button and prints 
a message when the button is pressed. <a href="#JAWT-CH-5-FIG-3">Figure 5.3</A> 
shows what <tt class=literal>ButtonTest</tt> looks 
like. </DL>
<div class=example>
<h4 class=example><a class="TITLE" name="JAWT-CH-5-EX-1">Example 5.1: Button Event Handling</A></h4>

<div class=screen>
<p>
<pre>
import java.awt.*;
import java.applet.*;
class TheButton extends Button {
    TheButton (String s) {
        super (s);
    }
    public boolean action (Event e, Object o) {
        if ("One".equals(o)) {
            System.out.println ("Do something for One");
        } else if ("Two".equals(o)) {
            System.out.println ("Ignore Two");
        } else if ("Three".equals(o)) {
            System.out.println ("Reverse Three");
        } else if ("Four".equals(o)) {
            System.out.println ("Four is the one");
        } else {
            return false;
        }
        return true;
    }
}
public class ButtonTest extends Applet {
   public void init () {
        add (new TheButton ("One"));
        add (new TheButton ("Two"));
        add (new TheButton ("Three"));
        add (new TheButton ("Four"));
   }
}
</PRE>
</DIV>

</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-5-FIG-3">Figure 5.3: The ButtonTest applet</A></h4>


<p>
<img align=middle src="figs/jawt0503.gif" alt="[Graphic: Figure 5-3]" width=285 height=155 border=0>

</DIV>

Keyboard

<p class=para>
Buttons are able to capture keyboard-related events once the button has 
the input focus. In order to give a <tt class=literal>Button</tt> 
the input focus without triggering the action event, call <tt class=literal>requestFocus()</tt>. 
The button also gets the focus if the user selects it and drags the mouse 
off of it without releasing the mouse. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public boolean keyDown (Event e, int key) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>keyDown()</tt> method is called 
whenever the user presses a key while the <tt class=literal>Button</tt> 
has the input focus. <tt class=literal>e</tt> is the 
<tt class=literal>Event</tt> instance for the specific 
event, while <tt class=literal>key</tt> 
is the integer representation of the character pressed. The identifier 
for the event (<tt class=literal>e.id</tt>) could 
be either <tt class=literal>Event.KEY_PRESS</tt> for 
a regular key or <tt class=literal>Event.KEY_ACTION</tt> 
for an action-oriented key (i.e., an arrow or a function key). There is 
no visible indication that the user has pressed a key over the button. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean keyUp (Event e, int key) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>keyUp()</tt> method is called 
whenever the user releases a key while the <tt class=literal>Button</tt> 
has the input focus. <tt class=literal>e</tt> is the 
<tt class=literal>Event</tt> instance for the specific 
event, while <tt class=literal>key</tt> 
is the integer representation of the character pressed. The identifier 
for the event (<tt class=literal>e.id</tt>) could 
be either <tt class=literal>Event.KEY_RELEASE</tt> 
for a regular key or <tt class=literal>Event.KEY_ACTION_RELEASE</tt> 
for an action-oriented key (i.e., an arrow or a function key). <tt class=literal>keyUp()</tt> 
may be used to determine how long <tt class=literal>key</tt> 
has been pressed. </DL>
Listeners and 1.1 event handling

<p class=para>
With the 1.1 event model, you register listeners, which are told when the 
event happens. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void addActionListener(ActionListener listener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>addActionListener()</tt> method 
registers <tt class=literal>listener</tt> as an object 
interested in receiving notifications when an <tt class=literal>ActionEvent</tt> 
passes through the <tt class=literal>EventQueue</tt> 
with this <tt class=literal>Button</tt> as its target. 
The <tt class=literal>listener.actionPerformed()</tt> 
method is called when these events occur. Multiple listeners can be registered. 
The following code demonstrates how to use an <tt class=literal>ActionListener</tt> 
to handle the events that occur when the user selects a button. This applet 
has the same display as the previous one, shown in <a href="#JAWT-CH-5-FIG-3">Figure 5.3</A>. </DL>
<div class=screen>
<p>
<pre>
// Java 1.1 only 
import java.awt.*;
import java.applet.*;
import java.awt.event.*;
public class ButtonTest11 extends Applet implements ActionListener {
    Button b;
    public void init () {
        add (b = new Button ("One"));
        b.addActionListener (this);
        add (b = new Button ("Two"));
        b.addActionListener (this);
        add (b = new Button ("Three"));
        b.addActionListener (this);
        add (b = new Button ("Four"));
        b.addActionListener (this);
    }
    public void actionPerformed (ActionEvent e) {
        String s = e.getActionCommand();
        if ("One".equals(s)) {
            System.out.println ("Do something for One");
        } else if ("Two".equals(s)) {
            System.out.println ("Ignore Two");
        } else if ("Three".equals(s)) {
            System.out.println ("Reverse Three");
        } else if ("Four".equals(s)) {
            System.out.println ("Four is the one");
        }
    }
}
</PRE>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void removeActionListener(ActionListener listener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>removeActionListener()</tt> 
method removes <tt class=literal>listener</tt> as 
an interested listener. If <tt class=literal>listener</tt> 
is not registered, nothing happens. 

<p>
<dt class=varlistentry><i class=emphasis>protected void processEvent(AWTEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>processEvent()</tt> method receives 
<tt class=literal>AWTEvent</tt> with this <tt class=literal>Button</tt> 
as its target. <tt class=literal>processEvent()</tt> 
then passes them along to any listeners for processing. When you subclass 
<tt class=literal>Button</tt>, overriding <tt class=literal>processEvent()</tt> 
allows you to process all events yourself, before sending them to any listeners. 
In a way, overriding <tt class=literal>processEvent()</tt> 
is like overriding <tt class=literal>handleEvent()</tt> 
using the 1.0 event model. 

<p class=para>
If you override <tt class=literal>processEvent()</tt>, 
remember to call <tt class=literal>super.processEvent(e)</tt> 
last to ensure that regular event processing can occur. If you want to 
process your own events, it's a good idea to call <tt class=literal>enableEvents()</tt> 
(inherited from <tt class=literal>Component</tt>) 
to ensure that events are delivered even in the absence of registered listeners. 

<p>
<dt class=varlistentry><i class=emphasis>protected void processActionEvent(ActionEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>processActionEvent()</tt> method 
receives <tt class=literal>ActionEvent</tt> with 
this <tt class=literal>Button</tt> as its target. 
<tt class=literal>processActionEvent()</tt> then passes 
them along to any listeners for processing. When you subclass <tt class=literal>Button</tt>, 
overriding <tt class=literal>processActionEvent()</tt> 
allows you to process all action events yourself, before sending them to 
any listeners. In a way, overriding <tt class=literal>processActionEvent()</tt> 
is like overriding <tt class=literal>action() </tt>using 
the 1.0 event model. 

<p class=para>
If you override the <tt class=literal>processActionEvent()</tt> method, 
you must remember to call <tt class=literal>super.processActionEvent(e)</tt> 
last to ensure that regular event processing can occur. If you want to 
process your own events, it's a good idea to call <tt class=literal>enableEvents()</tt> 
(inherited from <tt class=literal>Component</tt>) 
to ensure that events are delivered even in the absence of registered listeners. </DL>
</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch05_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Labels</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>A Simple Calculator</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
