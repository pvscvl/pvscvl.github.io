<html>
<head>
<title>[Chapter 8] 8.3 TextArea</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:41:53 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>Input Fields</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch08_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-8-SECT-3">8.3 TextArea</A></h2>

<p class=para>
<a name="CH08.AREA1"></A><tt class=literal>TextArea</tt> is the <tt class=literal>TextComponent</tt> 
for multiline input. Some constructors permit you to set the rows and 
columns of the <tt class=literal>TextArea</tt> on 
the screen. However, the <tt class=literal>LayoutManager</tt> 
may change your settings. As with <tt class=literal>TextField</tt>, 
the only way to limit the number of characters that a user can enter is 
to override the <tt class=literal>keyDown()</tt> method. 
The text in a <tt class=literal>TextArea</tt> appears 
left justified, and the justification is not customizable. 

<p class=para>
In Java 1.1, you can control the appearance of a <tt class=literal>TextArea</tt> scrollbar; earlier versions gave you no control over the scrollbars. When 
visible, the vertical scrollbar is on the right of the <tt class=literal>TextArea</tt>, 
and the horizontal scrollbar is on the bottom. You can remove either scrollbar 
with the help of several new <tt class=literal>TextArea</tt> 
constants; you can't move them to another side. When the horizontal 
scrollbar is not present, the text wraps automatically when the user reaches 
the right side of the <tt class=literal>TextArea</tt>. 
Prior to Java 1.1, there was no way to enable word wrap. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-8-SECT-3.1">TextArea Variables</A></h3>Constants

<p class=para>
The constants for <tt class=literal>TextArea</tt> 
are new to Java 1.1; they allow you to control the visibility and word wrap policy of a <tt class=literal>TextArea</tt> 
scrollbar. There is no way to listen for 
the events when a user scrolls a <tt class=literal>TextArea</tt>. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static final int SCROLLBARS_BOTH <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>SCROLLBARS_BOTH</tt> mode is 
the default for <tt class=literal>TextArea</tt>. It 
shows both scrollbars all the time and does no word wrap. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int SCROLLBARS_HORIZONTAL_ONLY <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>SCROLLBARS_HORIZONTAL_ONLY</tt> 
mode displays a scrollbar along the bottom of the <tt class=literal>TextArea</tt>. 
When this scrollbar is present, word wrap is disabled. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int SCROLLBARS_NONE <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>SCROLLBARS_NONE</tt> mode displays 
no scrollbars around the <tt class=literal>TextArea</tt> 
and enables word wrap. If the text is too long, the <tt class=literal>TextArea</tt> 
displays the lines surrounding the cursor. You can use the cursor to move 
up and down within the <tt class=literal>TextArea</tt>, 
but you cannot use a scrollbar to navigate. Because this mode has no horizontal 
scrollbar, word wrap is enabled. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int SCROLLBARS_VERTICAL_ONLY <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>SCROLLBARS_VERTICAL_ONLY</tt> 
mode displays a scrollbar along the right edge of the <tt class=literal>TextArea</tt>. 
If the text is too long to display, you can scroll within the area. Because 
this mode has no horizontal scrollbar, word wrap is enabled. </DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-8-SECT-3.2">TextArea Methods</A></h3>Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public TextArea () </I><br>
<dd>

<p class=para>
This constructor creates an empty <tt class=literal>TextArea</tt> 
with both scrollbars. The <tt class=literal>TextArea</tt> 
is 0 rows high and 0 columns wide. Depending upon the platform, the <tt class=literal>TextArea</tt> 
could be really small (and useless) or rather large. It is a good idea 
to use one of the other constructors to control the size of the <tt class=literal>TextArea</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public TextArea (int rows, int columns) </I><br>
<dd>

<p class=para>
This constructor creates an empty <tt class=literal>TextArea</tt> 
with both scrollbars. The <tt class=literal>TextArea</tt> 
is <tt class=literal>rows</tt> high and <tt class=literal>columns</tt> 
wide. 

<p>
<dt class=varlistentry><i class=emphasis>public TextArea (String text) </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>TextArea</tt> 
with an initial content of <tt class=literal>text</tt> 
and both scrollbars. The <tt class=literal>TextArea</tt> 
is 0 rows high and 0 columns wide. Depending upon the platform, the <tt class=literal>TextArea</tt> 
could be really small (and useless) or rather large. It is a good idea 
to use one of the other constructors to control the size of the <tt class=literal>TextArea</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public TextArea (String text, int rows, int columns) </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>TextArea</tt> 
with an initial content of <tt class=literal>text</tt>. 
The <tt class=literal>TextArea</tt> is <tt class=literal>rows</tt> 
high and <tt class=literal>columns</tt> wide and has 
both scrollbars. </DL>
<p class=para>
The following example uses the first four constructors. 
The results are shown in <a href="#JAWT-CH-8-FIG-3">Figure 8.3</A>. With the size-less 
constructors, notice that Windows 95 creates a rather large <tt class=literal>TextArea</tt>. 
UNIX systems create a much smaller area. Depending upon the <tt class=literal>LayoutManager</tt>, 
the <tt class=literal>TextArea</tt>s could be resized 
automatically. 

<div class=screen>
<p>
<pre>
import java.awt.TextArea;
public class textas extends java.applet.Applet {
    public void init () {
        add (new TextArea ());                     // A
        add (new TextArea (3, 10));                // B
        add (new TextArea ("Empty Area"));         // C
        add (new TextArea ("Empty Area", 3, 10));  // D
    }
}
</PRE>
</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-8-FIG-3">Figure 8.3: TextArea constructor</A></h4>


<p>
<img align=middle src="figs/jawt0803.gif" alt="[Graphic: Figure 8-3]" width=428 height=361 border=0>

</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public TextArea (String text, int rows, int columns, int scrollbarPolicy) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The final constructor creates a <tt class=literal>TextArea</tt> 
with an initial content of <tt class=literal>text</tt>. 
The <tt class=literal>TextArea</tt> is <tt class=literal>rows</tt> 
high and <tt class=literal>columns</tt> wide. The 
initial scrollbar display policy is designated by the <tt class=literal>scrollbarPolicy</tt> 
parameter and is one of the <tt class=literal>TextArea</tt> 
constants in the previous example. This constructor is the only way provided to change the 
scrollbar visibility; there is no <tt class=literal>setScrollbarVisibility()</tt> 
method. <a href="#JAWT-CH-8-FIG-4">Figure 8.4</A> displays the different settings. </DL>
<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-8-FIG-4">Figure 8.4: TextArea policies</A></h4>


<p>
<img align=middle src="figs/jawt0804.gif" alt="[Graphic: Figure 8-4]" width=184 height=196 border=0>

</DIV>

Setting text

<p class=para>
The text-setting methods are usually called in response to an external 
event. When you handle the insertion position, you must translate it from 
the visual row and column to a one-dimensional position. It is easier to 
position the insertion point based upon the beginning, end, or current selection 
(<tt class=literal>getSelectionStart()</tt> and <tt class=literal>getSelectionEnd()</tt>). 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void insert (String string, int position) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public void insertText (String string, int position) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>insert()</tt> method inserts 
<tt class=literal>string</tt> at <tt class=literal>position</tt> 
into the <tt class=literal>TextArea</tt>. If <tt class=literal>position</tt> 
is beyond the end of the <tt class=literal>TextArea</tt>, 
<tt class=literal>string</tt> is appended to the end 
of the <tt class=literal>TextArea</tt>. 

<p class=para>
<tt class=literal>insertText()</tt> is the Java 1.0 name for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public void append (String string) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public void appendText (String string) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>append()</tt> method inserts 
<tt class=literal>string</tt> at the end of the <tt class=literal>TextArea</tt>. 

<p class=para>
<tt class=literal>appendText()</tt> is 
the Java 1.0 name for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public void replaceRange (String string, int startPosition, int endPosition) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public void replaceText (String string, int startPosition, int endPosition) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>replaceRange()</tt> method replaces 
the text in the current <tt class=literal>TextArea</tt> 
from <tt class=literal>startPosition</tt> to <tt class=literal>endPosition</tt> 
with <tt class=literal>string</tt>. If <tt class=literal>endPosition</tt> 
is before <tt class=literal>startPosition</tt>, it 
may or may not work as expected. (For instance, on a Windows 95 platform, 
it works fine when the <tt class=literal>TextArea</tt> 
is displayed on the screen. However, when the <tt class=literal>TextArea</tt> 
is not showing, unexpected results happen. Other platforms may vary.) If 
<tt class=literal>startPosition</tt> is 0 and <tt class=literal>endPosition</tt> 
is the length of the contents, this method functions the same as <tt class=literal>TextComponent.setText()</tt>. 

<p class=para>
<tt class=literal>replaceText()</tt> is 
the Java 1.0 name for this method. </DL>
Sizing

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int getRows () </I><br>
<dd>

<p class=para>
The <tt class=literal>getRows()</tt> method returns 
the number of rows set by the constructor or a subsequent call to <tt class=literal>setRows()</tt>. 
This could be different from the displayed height of the <tt class=literal>TextArea</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void setRows (int rows) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setRows()</tt> method changes 
the preferred number of rows to display for the <tt class=literal>TextField</tt> 
to <tt class=literal>rows</tt>. Because the current 
<tt class=literal>LayoutManager</tt> will do what 
it wants, the new setting may be ignored. If rows &lt; 0, <tt class=literal>setRows()</tt> 
throws the run-time exception <tt class=literal>IllegalArgumentException</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public int getColumns () </I><br>
<dd>

<p class=para>
The <tt class=literal>getColumns()</tt> method returns 
the number of columns set by the constructor or a subsequent call to <tt class=literal>setColumns()</tt>. 
This could be different from the displayed width of the <tt class=literal>TextArea</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void setColumns (int columns) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setColumns()</tt> method changes 
the preferred number of columns to display for the <tt class=literal>TextArea</tt> 
to <tt class=literal>columns</tt>. Because the current 
<tt class=literal>LayoutManager</tt> will do what 
it wants, the new setting may be ignored. If <tt class=literal>columns</tt> 
&lt; 0, <tt class=literal>setColumns()</tt> throws 
the run-time exception <tt class=literal>IllegalArgumentException</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension getPreferredSize (int rows, int columns) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public Dimension preferredSize (int rows, int columns) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getPreferredSize()</tt> method 
returns the <tt class=literal>Dimension</tt> (width 
and height) for the preferred size of the <tt class=literal>TextArea</tt> 
with a preferred height of <tt class=literal>rows</tt> 
and width of <tt class=literal>columns</tt>. The <tt class=literal>rows</tt> 
and <tt class=literal>columns</tt> specified may be 
different from the current settings. 

<p class=para>
<tt class=literal>preferredSize()</tt> is the Java 
1.0 name for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension getPreferredSize (int rows, int columns) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public Dimension preferredSize () <img src="gifs/wstar.gif" alt="(Deprecated)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getPreferredSize()</tt> method 
returns the <tt class=literal>Dimension</tt> (width 
and height) for the preferred size of the <tt class=literal>TextArea</tt>. 
Without the rows and columns parameters, this <tt class=literal>getPreferredSize()</tt> 
uses the constructor's number of rows and columns to calculate the 
<tt class=literal>TextArea</tt>'s preferred 
size. 

<p class=para>
<tt class=literal>preferredSize()</tt> is the Java 
1.0 name for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension getMinimumSize (int rows, int columns) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public Dimension minimumSize (int rows, int columns) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0>  </I><br>
<dd>

<p class=para>
The <tt class=literal>getMinimumSize()</tt> method 
returns the minimum <tt class=literal>Dimension</tt> 
(width and height) for the size of the <tt class=literal>TextArea</tt> 
with a height of <tt class=literal>rows</tt> and width 
of <tt class=literal>columns</tt>. The <tt class=literal>rows</tt> 
and <tt class=literal>columns</tt> specified may be 
different from the current settings. 

<p class=para>
<tt class=literal>minimumSize()</tt> is the Java 1.0 
name for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension getMinimumSize () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public Dimension minimumSize () <img src="gifs/wstar.gif" alt="(Deprecated)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getMinimumSize()</tt> method 
returns the minimum <tt class=literal>Dimension</tt> 
(width and height) for the size of the <tt class=literal>TextArea</tt>. 
Without the rows and columns parameters, this <tt class=literal>getMinimumSize()</tt> 
uses the current settings for rows and columns to calculate the <tt class=literal>TextArea</tt>'s 
minimum size. 

<p class=para>
<tt class=literal>minimumSize()</tt> is the Java 1.0 
name for this method. </DL>
Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public synchronized void addNotify ()  </I><br>
<dd>

<p class=para>
The <tt class=literal>addNotify()</tt> method creates 
the <tt class=literal>TextArea</tt> peer. 
If you override this method, call <tt class=literal>super.addNotify()</tt> 
first, then add your customizations for the new class. You will then be 
able to do everything you need with the information about the newly created 
peer. 

<p>
<dt class=varlistentry><i class=emphasis>public int getScrollbarVisibility() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getScrollbarVisibility()</tt> 
method retrieves the scrollbar visibility setting, which is set by the 
constructor. There is no <tt class=literal>setScollbarVisibility()</tt> 
method to change the setting. The return value is one of the <tt class=literal>TextArea</tt> 
constants: <tt class=literal>SCROLLBARS_BOTH</tt>, 
<tt class=literal>SCROLLBARS_HORIZONTAL_ONLY</tt>, 
<tt class=literal>SCROLLBARS_NONE</tt>, or <tt class=literal>SCROLLBARS_VERTICAL_ONLY</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>protected String paramString ()  </I><br>
<dd>

<p class=para>
When you call the <tt class=literal>toString()</tt> 
method of <tt class=literal>TextArea</tt>, the default 
<tt class=literal>toString()</tt> method of <tt class=literal>Component</tt> 
is called. This in turn calls <tt class=literal>paramString()</tt>, 
which builds up the string to display. The <tt class=literal>TextArea</tt> 
level adds the number of rows and columns for the <tt class=literal>TextArea</tt>, 
and Java 1.1 adds the scrollbar visibility policy. Using <tt class=literal>new 
TextArea(`Empty Area`, 3, 10)</tt>, the results displayed 
could be: </DL>
<div class=screen>
<p>
<pre>
java.awt.TextArea[text0,0,0,0x0,invalid,text="Empty Area",
editable,selection=0-0, rows=3,columns=10, scrollbarVisibility=both]
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-8-SECT-3.3">TextArea Events</A></h3>

<p class=para>
<a name="CH08.EVENTAREA"></A>With the 1.0 event model, the <tt class=literal>TextArea</tt> 
component can generate <tt class=literal>KEY_PRESS</tt> 
and <tt class=literal>KEY_ACTION</tt> (which calls 
<tt class=literal>keyDown()</tt>) along with <tt class=literal>KEY_RELEASE</tt> 
and <tt class=literal>KEY_ACTION_RELEASE</tt> (which 
called <tt class=literal>keyUp()</tt>). There is no 
<tt class=literal>ACTION_EVENT</tt> generated for 
<tt class=literal>TextArea</tt>. 

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
The <tt class=literal>GOT_FOCUS</tt> and <tt class=literal>LOST_FOCUS</tt> 
events can be generated by this component but not reliably across platforms. 
Currently, they are generated on most UNIX platforms but not on Microsoft 
Windows NT/95 under Java 1.0. These events are generated under Java 1.1. 

<p class=para>
Similarly, the mouse events are not generated with JDK 1.0.2. See 
Appendix C for more information about platform dependencies. 
</blockquote><p>
</DIV>

<p class=para>
With the Java 1.1 event model, there are no listeners specific to <tt class=literal>TextArea</tt>. 
You can register key, mouse, and focus listeners through the <tt class=literal>Component</tt> 
methods of <tt class=literal>addKeyListener()</tt>, 
<tt class=literal>addMouseListener()</tt>, and <tt class=literal>addFocusListener()</tt>, 
respectively. To register listeners for text events, call <tt class=literal>TextComponent.addTextListener()</tt>. Action

<p class=para>
The <tt class=literal>TextArea</tt> component has 
no way to trigger the action event, since carriage return is a valid character. 
You would need to put something like a <tt class=literal>Button</tt> 
on the screen to cause an action for a <tt class=literal>TextArea</tt>. 
The following <tt class=literal>Rot13</tt> program 
demonstrates this technique. The user enters text in the <tt class=literal>TextArea</tt> 
and selects the Rotate Me button to rotate the text. If the 
user selects Rotate Me again, it rotates again, back to the 
original position. Without the button, there would be no way to trigger the event. 
<a href="#JAWT-CH-8-FIG-5">Figure 8.5</A> shows this example in action. 

<div class=screen>
<p>
<pre>
import java.awt.*;
public class Rot13 extends Frame {
    TextArea ta;
    Component rotate, done;
    public Rot13 () {
        super ("Rot-13 Example");
        add ("North", new Label ("Enter Text to Rotate:"));
        ta = (TextArea)(add ("Center", new TextArea (5, 40)));
        Panel p = new Panel ();
        rotate = p.add (new Button ("Rotate Me"));
        done = p.add (new Button ("Done"));
        add ("South", p);
    }
    public static void main (String args[]) {
        Rot13 rot = new Rot13();
        rot.pack();
        rot.show();
    }
    public boolean handleEvent (Event e) {
        if (e.id == Event.WINDOW_DESTROY) {
            hide();
            dispose();
            System.exit (0);
            return true;
        }
        return super.handleEvent (e);
    }
    public boolean action (Event e, Object o) {
        if (e.target == rotate) {
            ta.setText (rot13Text (ta.getText()));
            return true;
        } else if (e.target == done) {
            hide();
            dispose();
            System.exit (0);
        }
        return false;
    }
    String rot13Text (String s) {
        int len = s.length();
        StringBuffer returnString = new StringBuffer (len);
        char c;
        for (int i=0;i&lt;len;i++) {
            c = s.charAt (i);
            if (((c &gt;= 'A') &amp;&amp; (c &lt;= 'M')) ||
                ((c &gt;= 'a') &amp;&amp; (c &lt;= 'm')))
                c += 13;
            else if (((c &gt;= 'N') &amp;&amp; (c &lt;= 'Z')) ||
                ((c &gt;= 'n') &amp;&amp; (c &lt;= 'z')))
                c -= 13;
            returnString.append (c);
        }
        return returnString.toString();
    }
}
</PRE>
</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-8-FIG-5">Figure 8.5: TextArea with activator button</A></h4>


<p>
<img align=middle src="figs/jawt0805.gif" alt="[Graphic: Figure 8-5]" width=284 height=136 border=0>

</DIV>

Keyboard

<p class=para>
Ordinarily, the <tt class=literal>TextArea</tt> component 
generates all the key events. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public boolean keyDown (Event e, int key) </I><br>
<dd>

<p class=para>
The <tt class=literal>keyDown()</tt> method is called 
whenever the user presses a key. <tt class=literal>keyDown()</tt> 
may be called many times in succession if the key remains 
pressed. <tt class=literal>e</tt> is the <tt class=literal>Event</tt> 
instance for the specific event, while <tt class=literal>key</tt> 
is the integer representation of the character pressed. The identifier 
for the event (<tt class=literal>e.id</tt>) for <tt class=literal>keyDown()</tt> 
could be either <tt class=literal>Event.KEY_PRESS</tt> 
for a regular key or <tt class=literal>Event.KEY_ACTION</tt> 
for an action-oriented key (i.e., an arrow or function key). Some of the 
things you can do through this method are validate input, convert each 
character to
uppercase, and limit
the number or type of characters entered. 
The technique is simple: you just need to remember that the user's 
keystroke is actually displayed by the <tt class=literal>TextArea</tt> 
peer, which receives the event after the <tt class=literal>TextArea</tt> 
itself. Therefore, a <tt class=literal>TextArea</tt> 
subclass can modify the character displayed by modifying the <tt class=literal>key</tt> 
field (<tt class=literal>e.key</tt>) of the <tt class=literal>Event</tt> 
and returning <tt class=literal>false</tt>, which 
passes the <tt class=literal>Event</tt> on down the 
chain; remember that returning <tt class=literal>false</tt> 
indicates that the <tt class=literal>Event</tt> has 
not been completely processed. The following method uses this technique 
to convert all alphabetic characters to the opposite case: 

<div class=screen>
<p>
<pre>
public boolean keyDown (Event e, int key) {
    if (Character.isUpperCase ((char)key)) {
        e.key = Character.toLowerCase ((char)key);
    } else if (Character.isLowerCase ((char)key)) {
        e.key = Character.toUpperCase ((char)key);
    }
    return false;
}
</PRE>
</DIV>

<p class=para>
If <tt class=literal>keyDown()</tt> returns <tt class=literal>true</tt>, 
it indicates that the <tt class=literal>Event</tt> 
has been completely processed. In this case, the <tt class=literal>Event</tt> 
never propagates to the peer, and the keystroke is never displayed. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean keyUp (Event e, int key) </I><br>
<dd>

<p class=para>
The <tt class=literal>keyUp()</tt> method is called 
whenever the user releases a key. <tt class=literal>e</tt> 
is the <tt class=literal>Event</tt> instance for the 
specific event, while <tt class=literal>key</tt> is 
the integer representation of the character pressed. The identifier for 
the event (<tt class=literal>e.id</tt>) for <tt class=literal>keyUp()</tt> 
could be either <tt class=literal>Event.KEY_RELEASE</tt> 
for a regular key, or <tt class=literal>Event.KEY_ACTION_RELEASE</tt> 
for an action-oriented key (i.e., an arrow or function key). </DL>
Mouse

<p class=para>
Ordinarily, the <tt class=literal>TextArea</tt> component 
does not trigger any mouse events. 

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
Mouse events are not generated for <tt class=literal>TextArea</tt> 
with JDK 1.0.2. See Appendix C for more information about platform dependencies. 
</blockquote><p>
</DIV>

Focus

<p class=para>
The <tt class=literal>TextArea</tt> component does 
not reliably generate focus events. 

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
The <tt class=literal>GOT_FOCUS</tt> and <tt class=literal>LOST_FOCUS</tt> 
events can be generated by this component but not reliably across platforms. 
With the JDK, they are generated on most UNIX platforms but not on Microsoft 
Windows NT/95 under JDK 1.0. These events are generated with JDK 1.1. See Appendix 
C for more information about platform dependencies. 
</blockquote><p>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public boolean gotFocus (Event e, Object o)   </I><br>
<dd>

<p class=para>
The <tt class=literal>gotFocus()</tt> method is triggered 
when the <tt class=literal>TextArea</tt> gets the 
input focus. <tt class=literal>e</tt> is the <tt class=literal>Event</tt> 
instance for the specific event, while <tt class=literal>o</tt> 
is a <tt class=literal>String</tt> representation 
of the current contents (<tt class=literal>getText()</tt>). 

<p>
<dt class=varlistentry><i class=emphasis>public boolean lostFocus (Event e, Object o)   </I><br>
<dd>

<p class=para>
The <tt class=literal>lostFocus()</tt> method is 
triggered when the input focus leaves the <tt class=literal>TextArea</tt>. <tt class=literal>e</tt> 
is the <tt class=literal>Event</tt> instance for the 
specific event, while <tt class=literal>o</tt> is 
a <tt class=literal>String</tt> representation of 
the current contents (<tt class=literal>getText()</tt>). </DL>
Listeners and 1.1 event handling

<p class=para>
There are no listeners specific to the <tt class=literal>TextArea</tt> 
class. You can register Key, mouse, and focus listeners through the <tt class=literal>Component</tt> 
methods of <tt class=literal>addKeyListener()</tt>, 
<tt class=literal>addMouseListener()</tt>, and <tt class=literal>addFocusListener()</tt>, 
respectively. Also, you register listeners for text events by calling <tt class=literal>TextComponent.addTextListener()</tt>. 

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch08_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>TextField</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Extending TextField</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
