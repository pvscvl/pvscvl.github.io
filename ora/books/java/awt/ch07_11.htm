<html>
<head>
<title>[Chapter 7] 7.11 The sun.awt Layout Collection</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:40:03 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_10.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7<br>Layouts</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch07_12.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-7-SECT-11">7.11 The sun.awt Layout Collection</A></h2>

<p class=para>
<a name="CH07.SUN1"></A><a name="CH07.SUN2"></A>The <tt class=literal>sun.awt</tt> package defines 
four additional layouts. The first two, <tt class=literal>HorizBagLayout</tt> 
and <tt class=literal>VerticalBagLayout</tt>, are 
available only when used with Sun's JDK or Internet Explorer, since 
they are not provided with Netscape Navigator and may not be available 
from other vendors. Therefore, these layout managers should be used
selectively within applets. The third layout manager, 
<tt class=literal>VariableGridLayout</tt>, is available 
with Netscape Navigator 2.0 or 3.0 and Internet Explorer. Usage of 
this layout manager is safer 
within applets but is still at your own risk. The final layout manager 
is introduced in Java 1.1, <tt class=literal>OrientableFlowLayout</tt>. 
Only time will tell where that one will be available. Any of these layout 
managers could be moved into a future version of <tt class=literal>java.awt</tt> 
if there is enough interest. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-7-SECT-11.1">HorizBagLayout</A></h3>

<p class=para>
In a <tt class=literal>HorizBagLayout</tt>, the components 
are all arranged in a single row, from left to right. The height of each 
component is the height of the container; the width of each component is 
its preferred width. <a href="#JAWT-CH-7-FIG-16">Figure 7.16</A> shows <tt class=literal>HorizBagLayout</tt> 
in use. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-7-FIG-16">Figure 7.16: HorizBagLayout</A></h4>


<p>
<img align=middle src="figs/jawt0716.gif" alt="[Graphic: Figure 7-16]" width=450 height=102 border=0>

</DIV>

Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public HorizBagLayout () </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>HorizBagLayout</tt> 
with a horizontal gap of zero pixels. The gap is the space between the 
different components in the horizontal direction. 

<p>
<dt class=varlistentry><i class=emphasis>public HorizBagLayout (int hgap) </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>HorizBagLayout</tt> 
using a horizontal gap of <tt class=literal>hgap</tt> 
pixels. </DL>
LayoutManager methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void addLayoutComponent (String name, Component component) </I><br>
<dd>

<p class=para>
The <tt class=literal>addLayoutComponent()</tt> method 
of <tt class=literal>HorizBagLayout</tt> does nothing. 

<p>
<dt class=varlistentry><i class=emphasis>public void removeLayoutComponent (Component component) </I><br>
<dd>

<p class=para>
The <tt class=literal>removeLayoutComponent()</tt> 
method of <tt class=literal>HorizBagLayout</tt> does 
nothing. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension preferredLayoutSize (Container target) </I><br>
<dd>

<p class=para>
The <tt class=literal>preferredLayoutSize()</tt> method 
of <tt class=literal>HorizBagLayout</tt> sums up the 
preferred widths of all the components in <tt class=literal>target</tt>, 
along with the <tt class=literal>hgap</tt> and right and left insets to get the width of the <tt class=literal>target</tt>. 
The height returned will be the preferred height of the tallest component. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension minimumLayoutSize (Container target) </I><br>
<dd>

<p class=para>
The <tt class=literal>minimumLayoutSize()</tt> method 
of <tt class=literal>HorizBagLayout</tt> sums up the 
minimum widths of all the components in <tt class=literal>target</tt>, 
along with the <tt class=literal>hgap</tt> and right and left insets to get the width of the <tt class=literal>target</tt>. 
The height returned will be the minimum height of the tallest component. 

<p>
<dt class=varlistentry><i class=emphasis>public void layoutContainer (Container target) </I><br>
<dd>

<p class=para>
The <tt class=literal>layoutContainer()</tt> method 
draws <tt class=literal>target</tt>'s components 
on the screen in one row. The height of each component is the height of 
the container. Each component's width is its preferred width, if 
enough space is available. </DL>
Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public String toString () </I><br>
<dd>

<p class=para>
The <tt class=literal>toString()</tt> method of <tt class=literal>HorizBagLayout</tt> 
returns a string with the current horizontal gap setting--for example: </DL>
<div class=screen>
<p>
<pre>
sun.awt.HorizBagLayout[hgap=0]
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-7-SECT-11.2">VerticalBagLayout</A></h3>

<p class=para>
The <tt class=literal>VerticalBagLayout</tt> places 
all the components in a single column. The width of each component is the 
width of the container; each component is given its preferred height. <a href="#JAWT-CH-7-FIG-17">Figure 7.17</A> shows <tt class=literal>VerticalBagLayout</tt> 
in use. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-7-FIG-17">Figure 7.17: VerticalBagLayout</A></h4>


<p>
<img align=middle src="figs/jawt0717.gif" alt="[Graphic: Figure 7-17]" width=450 height=149 border=0>

</DIV>

Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public VerticalBagLayout () </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>VerticalBagLayout</tt> 
with a vertical gap of zero pixels. The gap is the space between components 
in the vertical direction. With a gap of 0, adjacent components will touch 
each other. 

<p>
<dt class=varlistentry><i class=emphasis>public VerticalBagLayout (int vgap) </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>VerticalBagLayout</tt> 
with a vertical gap of <tt class=literal>vgap</tt> 
pixels. </DL>
LayoutManager methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void addLayoutComponent (String name, Component component) </I><br>
<dd>

<p class=para>
The <tt class=literal>addLayoutComponent()</tt> method 
of <tt class=literal>VerticalBagLayout</tt> does nothing. 

<p>
<dt class=varlistentry><i class=emphasis>public void removeLayoutComponent (Component component) </I><br>
<dd>

<p class=para>
The <tt class=literal>removeLayoutComponent()</tt> 
method of <tt class=literal>VerticalBagLayout</tt> 
does nothing. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension preferredLayoutSize (Container target) </I><br>
<dd>

<p class=para>
To get the preferred height of the layout, the <tt class=literal>preferredLayoutSize()</tt> 
method sums up the preferred height of all the components in <tt class=literal>target</tt> 
along with the <tt class=literal>vgap</tt> and top and bottom insets. For the preferred width, 
<tt class=literal>preferredLayoutSize()</tt> returns 
the preferred width of the widest component. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension minimumLayoutSize (Container target) </I><br>
<dd>

<p class=para>
To get the minimum height of the layout, the <tt class=literal>minimumLayoutSize()</tt> 
method sums up the minimum height of all the components in <tt class=literal>target</tt> 
along with the <tt class=literal>vgap</tt> and top and bottom insets. For the minimum width, <tt class=literal>minimumLayoutSize()</tt> 
returns the minimum width of the widest component. 

<p>
<dt class=varlistentry><i class=emphasis>public void layoutContainer (Container target) </I><br>
<dd>

<p class=para>
The <tt class=literal>layoutContainer()</tt> method 
draws <tt class=literal>target</tt>'s components 
on the screen in one column. The width of each component is the width of 
the container. Each component's height is its <tt class=literal>preferredSize()</tt> 
height, if available. </DL>
Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public String toString () </I><br>
<dd>

<p class=para>
The <tt class=literal>toString()</tt> method of <tt class=literal>VerticalBagLayout</tt> 
returns a string with the current vertical gap setting. For example: </DL>
<div class=screen>
<p>
<pre>
sun.awt.VerticalBagLayout[vgap=0]
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-7-SECT-11.3">VariableGridLayout</A></h3>

<p class=para>
<a name="CH07.VAR1"></A><a name="CH07.VAR2"></A><a name="CH07.VAR3"></A>The <tt class=literal>VariableGridLayout</tt> builds 
upon the <tt class=literal>GridLayout</tt>. It arranges 
components on a grid of rows and columns. However, instead of giving all 
components the same size, the <tt class=literal>VariableGridLayout</tt> 
allows you to size rows and columns fractionally. Another difference between 
<tt class=literal>VariableGridLayout</tt> and <tt class=literal>GridBagLayout</tt> 
is that a <tt class=literal>VariableGridLayout</tt> 
has a fixed size. If you ask for a 3x3 grid, you will get exactly that. 
The layout manager throws the <tt class=literal>ArrayIndexOutOfBoundsException</tt> 
run-time exception if you try to add too many components. 

<p class=para>
<a href="#JAWT-CH-7-FIG-18">Figure 7.18</A> shows a <tt class=literal>VariableGridLayout</tt> 
in which row one takes up 50 percent of the screen, and rows two and three take 
up 25 percent of the screen each. Column one takes up 50 percent of the screen; columns 
two and three take 25 percent each. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-7-FIG-18">Figure 7.18: VariableGridLayout in Netscape Navigator</A></h4>


<p>
<img align=middle src="figs/jawt0718.gif" alt="[Graphic: Figure 7-18]" width=236 height=242 border=0>

</DIV>

<p class=para>
Here is the code that creates <a href="#JAWT-CH-7-FIG-18">Figure 7.18</A>: 

<div class=screen>
<p>
<pre>
import java.awt.*;
java.applet.Applet;
import sun.awt.VariableGridLayout;
public class vargrid extends Applet {
    public void init () {
        VariableGridLayout vgl;
        setLayout (vgl = new VariableGridLayout (3,3));
        vgl.setRowFraction (0, 1.0/2.0);
        vgl.setRowFraction (1, 1.0/4.0);
        vgl.setRowFraction (2, 1.0/4.0);
        vgl.setColFraction (0, 1.0/2.0);
        vgl.setColFraction (1, 1.0/4.0);
        vgl.setColFraction (2, 1.0/4.0);
        add (new Button ("One"));
        add (new Button ("Two"));
        add (new Button ("Three"));
        add (new Button ("Four"));
        add (new Button ("Five"));
        add (new Button ("Six"));
        add (new Button ("Seven"));
        add (new Button ("Eight"));
        add (new Button ("Nine"));
    }
}
</PRE>
</DIV>

Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public VariableGridLayout (int rows, int columns) </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>VariableGridLayout</tt> 
with the specified number of <tt class=literal>rows</tt> 
and <tt class=literal>columns</tt>. You cannot specify 
zero for one dimension. If either <tt class=literal>rows</tt> 
or <tt class=literal>columns</tt> is zero, the constructor 
throws the <tt class=literal>NullPointerException</tt> run-time exception. 
This constructor uses the default values for horizontal and vertical gaps 
(zero pixels), which means that components in adjacent cells will touch 
each other. 

<p>
<dt class=varlistentry><i class=emphasis>public VariableGridLayout (int rows, int columns, int hgap, int vgap) </I><br>
<dd>

<p class=para>
This version of the constructor is called by the previous one. It creates 
a <tt class=literal>VariableGridLayout</tt> with the 
specified number of <tt class=literal>rows</tt> and 
<tt class=literal>columns</tt>, a horizontal gap of 
<tt class=literal>hgap</tt>, and a vertical gap of 
<tt class=literal>vgap</tt>. The gaps specify in pixels the 
space between adjacent components in the horizontal and vertical directions. It is possible to have negative gaps if you want components 
to overlap. You cannot specify zero for the number of rows or columns. 
If either <tt class=literal>rows</tt> or <tt class=literal>columns</tt> 
is zero, the constructor throws the run-time exception <tt class=literal>NullPointerException</tt>. </DL>
Support methods

<p class=para>
The distinguishing feature of a <tt class=literal>VariableGridLayout</tt> 
is that you can tell a particular row or column to take up a certain fraction 
of the display. By default, the horizontal space available is split evenly 
among the grid's columns; vertical space is split evenly among the 
rows. This group of methods lets you find out how much space is allotted 
to each row or column and lets you change that allocation. The sum of 
the fractional amounts for each direction should add up to one. If greater 
than one, part of the display will be drawn offscreen. If less than one, 
additional screen real estate will be unused. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void setRowFraction (int rowNumber, double fraction) </I><br>
<dd>

<p class=para>
This method sets the percentage of space available for row <tt class=literal>rowNumber</tt> 
to <tt class=literal>fraction</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void setColFraction (int colNumber, double fraction) </I><br>
<dd>

<p class=para>
This method sets the percentage of space available for column <tt class=literal>colNumber</tt> 
to <tt class=literal>fraction</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public double getRowFraction (int rowNumber) </I><br>
<dd>

<p class=para>
This method returns the current fractional setting for row <tt class=literal>rowNumber</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public double getColFraction (int colNumber) </I><br>
<dd>

<p class=para>
This method returns the current fractional setting for column <tt class=literal>colNumber</tt>. </DL>
LayoutManager methods

<p class=para>
The only method from <tt class=literal>GridLayout</tt> that is overridden is the <tt class=literal>layoutContainer()</tt> 
method. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void layoutContainer (Container target) </I><br>
<dd>

<p class=para>
The <tt class=literal>layoutContainer()</tt> method 
draws <tt class=literal>target</tt>'s components 
on the screen in a series of rows and columns. The size of each component 
within a <tt class=literal>VariableGridLayout</tt> 
is determined by the <tt class=literal>RowFraction</tt> 
and <tt class=literal>ColFraction</tt> settings for 
its row and column. </DL>
Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public String toString () </I><br>
<dd>

<p class=para>
The <tt class=literal>toString()</tt> method of <tt class=literal>VariableGridLayout</tt> 
returns a string with the current horizontal and vertical gap settings, 
the number of rows and columns, and the row and column fractional amounts. 
For example, the string produced by <a href="#JAWT-CH-7-FIG-19">Figure 7.19</A> would 
be: </DL>
<div class=screen>
<p>
<pre>
sun.awt.VariableGridLayout[hgap=0,vgap=0,rows=3,cols=3,
    rowFracs=[3]&lt;0.50&gt;&lt;0.25&gt;&lt;0.25&gt;,colFracs=[3]&lt;0.50&gt;&lt;0.25&gt;&lt;0.25&gt;]
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-7-SECT-11.4">OrientableFlowLayout</A></h3>

<p class=para>
<a name="CH07.OR1"></A><a name="CH07.OR2"></A><a name="CH07.OR3"></A>The <tt class=literal>OrientableFlowLayout</tt> is 
available for those who want something like a <tt class=literal>FlowLayout</tt> 
that lets you arrange components from top to bottom. <a href="#JAWT-CH-7-FIG-19">Figure 7.19</A> 
shows <tt class=literal>OrientableFlowLayout</tt> 
in use. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-7-FIG-19">Figure 7.19: OrientableFlowLayout</A></h4>


<p>
<img align=middle src="figs/jawt0719.gif" alt="[Graphic: Figure 7-19]" width=424 height=286 border=0>

</DIV>

Constants

<p class=para>
Since <tt class=literal>OrientableFlowLayout</tt> 
subclasses <tt class=literal>FlowLayout</tt>, the 
<tt class=literal>FlowLayout</tt> constants of <tt class=literal>LEFT</tt>, 
<tt class=literal>RIGHT</tt>, and <tt class=literal>CENTER</tt> 
are still available. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static final int HORIZONTAL <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>HORIZONTAL</tt> constant tells 
the layout manager to arrange components from left to right, like the <tt class=literal>FlowLayout</tt> 
manager. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int VERTICAL <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>VERTICAL</tt> constant tells 
the layout manager to arrange components from top to bottom. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int TOP <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>TOP</tt> constant tells the 
layout manager to align the first component at the top of the screen (top 
justification). 

<p>
<dt class=varlistentry><i class=emphasis>public static final int BOTTOM <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>BOTTOM</tt> constant tells the 
layout manager to align the first component at the bottom of the screen 
(bottom justification). </DL>
Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public OrientableFlowLayout () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>OrientableFlowLayout</tt> 
that acts like the default <tt class=literal>FlowLayout</tt>. 
The objects flow from left to right and have an <tt class=literal>hgap</tt> 
and <tt class=literal>vgap</tt> of 5. 

<p>
<dt class=varlistentry><i class=emphasis>public OrientableFlowLayout (int direction) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>OrientableFlowLayout</tt> 
in the given <tt class=literal>direction</tt>. Valid 
values are <tt class=literal>OrientableFlowLayout.HORIZONTAL</tt> 
or <tt class=literal>OrientableFlowLayout.VERTICAL</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public OrientableFlowLayout (int direction, int horizAlignment, int vertAlignment) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>OrientableFlowLayout</tt> 
in the given direction. Valid values are <tt class=literal>OrientableFlowLayout.HORIZONTAL</tt> 
or <tt class=literal>OrientableFlowLayout.VERTICAL</tt>. 
<tt class=literal>horizAlignment</tt> provides 
the horizontal alignment setting. <tt class=literal>vertAlignment</tt> 
provides a vertical alignment setting; it may be <tt class=literal>OrientableFlowLayout.TOP</tt>, 
<tt class=literal>FlowLayout.CENTER</tt>, or <tt class=literal>OrientableFlowLayout.BOTTOM</tt>. 
If <tt class=literal>direction</tt> is <tt class=literal>HORIZONTAL</tt>, 
the vertical alignment is ignored. If <tt class=literal>direction</tt> 
is <tt class=literal>VERTICAL</tt>, the horizontal 
alignment is ignored. 

<p>
<dt class=varlistentry><i class=emphasis>public OrientableFlowLayout (int direction, int horizAlignment, int 
vertAlignment, int horizHgap, int horizVgap, int vertHgap, 
int vertVgap) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The final constructor adds separate horizontal and vertical gaps to the 
settings of <tt class=literal>OrientableFlowLayout</tt>. 
The <tt class=literal>horizHgap</tt> and <tt class=literal>horizVgap</tt> 
parameters are the gaps when horizontally aligned. The <tt class=literal>vertHgap</tt> 
and <tt class=literal>vertVgap</tt> parameters 
are the gaps when vertically aligned. </DL>
LayoutManager methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Dimension preferredLayoutSize (Container target) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>preferredLayoutSize()</tt> method 
of <tt class=literal>OrientableFlowLayout</tt> calculates 
the preferred dimensions for the <tt class=literal>target</tt> 
container. The <tt class=literal>OrientableFlowLayout</tt> 
computes the preferred size by placing all the components in one row or 
column, depending upon the current orientation, and adding their individual 
preferred sizes along with gaps and insets. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension minimumLayoutSize (Container target) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>minimumLayoutSize()</tt> method 
of <tt class=literal>OrientableFlowLayout</tt> calculates 
the minimum dimensions for the container by adding up the sizes of the 
components. The <tt class=literal>OrientableFlowLayout</tt> 
computes the minimum size by placing all the components in one row or column, 
depending upon the current orientation, and adding their individual minimum 
sizes along with gaps and insets. 

<p>
<dt class=varlistentry><i class=emphasis>public void layoutContainer (Container target) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>layoutContainer()</tt> method 
draws <tt class=literal>target</tt>'s <tt class=literal>Component</tt>s 
on the screen, starting with the first row or column of the display, and 
going from left to right across the screen, or from top to bottom, based 
on the current orientation. When it reaches the margin of the container, 
it skips to the next row or column and continues drawing additional components. </DL>
Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void orientHorizontally () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>orientHorizontally()</tt> method 
allows you to change the orientation of the <tt class=literal>LayoutManager</tt> 
to horizontal. The container must be validated before you see the effect 
of the change. 

<p>
<dt class=varlistentry><i class=emphasis>public void orientVertically () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>orientVertically()</tt> method 
allows you to change the orientation of the <tt class=literal>LayoutManager</tt> 
to vertical. The container must be validated before you see the effect 
of the change. 

<p>
<dt class=varlistentry><i class=emphasis>public String toString () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>toString()</tt> method of <tt class=literal>OrientableFlowLayout</tt> 
returns a string with the current orientation setting, along with the entire 
<tt class=literal>FlowLayout.toString()</tt> results. 
For example: </DL>
<div class=screen>
<p>
<pre>
sun.awt.OrientableFlowLayout[orientation=vertical, 
sun.awt.OrientableFlowLayout[hgap=5,vgap=5,align=center]]
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_10.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch07_12.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Designing Your Own LayoutManager</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Other Layouts Available on the Net</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
