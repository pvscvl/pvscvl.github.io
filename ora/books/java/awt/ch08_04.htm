<html>
<head>
<title>[Chapter 8] 8.4 Extending TextField</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:42:04 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>Input Fields</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch09_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-8-SECT-4">8.4 Extending TextField</A></h2>

<p class=para>
<a name="CH08.FIELD6"></A><a name="CH08.FIELD7"></A>To extend what you learned so far, <a href="#JAWT-CH-8-EX-1">Example 8.1</A> creates 
a sub-class of <tt class=literal>TextField</tt> that 
limits the number of characters a user can type into it. Other than the 
six constructors, all the work is in the <tt class=literal>keyDown()</tt> 
method. The entire class follows. 

<div class=example>
<h4 class=example><a class="TITLE" name="JAWT-CH-8-EX-1">Example 8.1: The SizedTextField Class Limits the Number of Characters a User can Type</A></h4>

<div class=screen>
<p>
<pre>
import java.awt.*;
public class SizedTextField extends TextField {
    private int size;  // size = 0 is unlimited
    public SizedTextField () {
        super ("");
        this.size = 0;
    }
    public SizedTextField (int columns) {
        super (columns);
        this.size = 0;
    }
    public SizedTextField (int columns, int size) {
        super (columns);
        this.size = Math.max (0, size);
    }
    public SizedTextField (String text) {
        super (text);
        this.size = 0;
    }
    public SizedTextField (String text, int columns) {
        super (text, columns);
        this.size = 0;
    }
    public SizedTextField (String text, int columns, int size) {
        super (text, columns);
        this.size = Math.max (0, size);
    }
    public boolean keyDown (Event e, int key) {
        if ((e.id == Event.KEY_PRESS) &amp;&amp; (this.size &gt; 0) &amp;&amp;
            (((TextField)(e.target)).getText ().length () &gt;= this.size)) {
            // Check for backspace / delete / tab--let these pass through
            if ((key == 127) || (key == 8) || (key == 9)) {
                return false;
            }
            return true;
        }
        return false;
    }
    protected String paramString () {
        String str = super.paramString ();
        if (size != 0) {
            str += ",size=" + size;
        }
        return str;
    }
}
</PRE>
</DIV>

</DIV>

<p class=para>
Most of the <tt class=literal>SizedTextField</tt> 
class consists of constructors; you really don't need to provide 
an equivalent to all the superclass's constructors, but it's 
not a bad idea. The <tt class=literal>keyDown()</tt> 
method looks at what the user types before it reaches the screen and acts 
accordingly. It checks the length of the <tt class=literal>TextField</tt> 
and compares it to the maximum length. It then does another check to see 
if the user typed a Backspace, Delete, or Tab, all of which we want to allow: 
if the field has gotten too long, we want to allow the user to shorten 
it. We also want to allow tab under all circumstances, so that focus traversal 
works properly. The rest of the logic is simple: 

<p>
<ul class=itemizedlist>
<li class=listitem>If the user typed Backspace, Delete, or Tab, return <tt class=literal>false</tt> 
to propagate the event. 

<p>
<li class=listitem>If the field is too long, return <tt class=literal>true</tt> 
to prevent the event from reaching the peer. This effectively ignores the 
character. 

<p>
</UL>
</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch09_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>TextArea</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Pick Me</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
