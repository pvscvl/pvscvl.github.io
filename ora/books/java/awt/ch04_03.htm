<html>
<head>
<title>[Chapter 4] 4.3 The Java 1.1 Event Model</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:30:48 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 4<br>Events</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch05_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-4-SECT-3">4.3 The Java 1.1 Event Model</A></h2>

<p class=para>
<a name="CH04.JAVA2"></A><a name="CH04.JAVA5"></A><a name="CH04.JAVA3"></A>Now it's time to discuss the new event model that is implemented 
by the 1.1 release of the JDK. Although this model can seem much more complex 
(it does have many more pieces), it is really much simpler and more efficient. 
The new event model does away with the process of searching for components 
that are interested in an event--<tt class=literal>deliverEvent()</tt>, 
<tt class=literal>postEvent()</tt>, <tt class=literal>handleEvent()</tt>--and all that. The new model requires objects be registered to receive events. 
Then, only those objects that are registered are told when the event actually 
happens. 

<p class=para>
This new model is called "delegation"; it implements the 
<tt class=literal>Observer</tt>-<tt class=literal>Observable</tt> 
design pattern with events. It is important in many respects. In addition 
to being much more efficient, it allows for a much cleaner separation between 
GUI components and event handling. It is important that any object, not 
just a <tt class=literal>Component</tt>, can receive 
events. Therefore, you can separate your event-handling code from your 
GUI code. One set of classes can implement the user interface; another 
set of classes can respond to the events generated by the interface. This 
means that if you have designed a good interface, you can reuse it in different 
applications by changing the event processing. The delegation model is 
essential to JavaBeans, which allows interaction between Java and other 
platforms, like OpenDoc or ActiveX. To allow such interaction, it was essential 
to separate the source of an event from the recipient.[1] 

<blockquote class=footnote>
<p class=para>[1] 
 
For more information about JavaBeans, see <a href="../../../../../../../splash.javasoft.com/beans/">http://splash.javasoft.com/beans/</A>.
</blockquote>
<p class=para>
The delegation model has several other important ramifications. First, 
event handlers no longer need to worry about whether or not they have completely 
dealt with an event; they do what they need to, and return. Second, events 
can be broadcast to multiple recipients; any number of classes can be registered 
to receive an event. In the old model, broadcasting was possible only in 
a very limited sense, if at all. An event handler could declare that it 
hadn't completely processed an event, thus letting its container 
receive the event when it was done, or an event handler could generate 
a new event and deliver it to some other component. In any case, developers 
had to plan how to deliver events to other recipients. 
In Java 1.1, that's no longer necessary. An event will be delivered 
to every object that is registered as a listener for that event, regardless 
of what other objects do with the event. Any listener can mark an event 
"consumed," so it will be ignored by the peer or (if they care) 
other listeners. 

<p class=para>
Finally, the 1.1 event model includes the idea of an event queue. Instead 
of having to override <tt class=literal>handleEvent()</tt> 
to see all events, you can peek into the system's event queue by 
using the <tt class=literal>EventQueue</tt> class. 
The details of this class are discussed at the end of this chapter.

<p class=para>
In Java 1.1, each component is an event <i class=emphasis>source</I> 
that can generate certain types of events, which are all subclasses of 
<tt class=literal>AWTEvent</tt>. Objects that are 
interested in an event are called <i class=emphasis>listeners</I>. 
Each event type corresponds to a listener interface that specifies the 
methods that are called when the event occurs. To receive an event, an 
object must implement the appropriate listener interface and must be registered 
with the event's source, by a call to an "add listener" 
method of the component that generates the event. Who calls the "add 
listener" method can vary; it is probably the best design for the 
component to register any listeners for the events that it generates, but 
it is also possible for the event handler to register itself, or for some 
third object to handle registration (for example, one object could call 
the constructor for a component, then call the constructor for an event 
handler, then register the event handler as a listener for the component's 
events). 

<p class=para>
This sounds complicated, but it really isn't that bad. It will help 
to think in concrete terms. A <tt class=literal>TextField</tt> 
object can generate action events, which in Java 1.1 are of the class <tt class=literal>ActionEvent</tt>. 
Let's say we have an object of class <tt class=literal>TextActionHandler</tt> 
that is called <tt class=literal>myHandler</tt> that 
is interested in receiving action events from a text field named <tt class=literal>inputBuffer</tt>. 
This means that our object must implement the <tt class=literal>ActionListener</tt> 
interface, and this in turn, means that it must include an <tt class=literal>actionPerformed()</tt> 
method, which is called when an action event occurs. Now, we have to register 
our object's interest in action events generated by <tt class=literal>inputBuffer</tt>; 
to do so, we need a call to <tt class=literal>inputBuffer.addActionListener(myHandler)</tt>. 
This call would probably be made by the object that is creating the <tt class=literal>TextField</tt> 
but could also be made by our event handler itself. The code might be as 
simple as this: 

<div class=screen>
<p>
<pre>
...
public void init(){
    ...
    inputBuffer = new TextField();
    myHandler = new TextActionHandler();
    inputBuffer.addActionListener(myHandler); // register the handler for the
                                              // buffer's events
    add (inputBuffer);  // add the input buffer to the display
    ...
}
</PRE>
</DIV>

<p class=para>
Once our object has been registered, <tt class=literal>myHandler.actionPerformed()</tt> 
will be called whenever a user does anything in the text field that generates 
an action event, like typing a carriage return. In a way, <tt class=literal>actionPerformed()</tt> 
is very similar to the <tt class=literal>action()</tt> 
method of the old event model--except that it is not tied to the <tt class=literal>Component</tt> 
hierarchy; it is part of an interface that can be implemented by any object 
that cares about events. 

<p class=para>
Of course, there are many other kinds of events. <a href="#JAWT-CH-4-FIG-4">Figure 4.4</A> 
shows the event hierarchy for Java 1.1. <a href="#JAWT-CH-4-FIG-5">Figure 4.5</A> 
shows the different listener interfaces, which are all subinterfaces of 
<tt class=literal>EventListener</tt>, along with the related adapter classes. <a name="CH04.AWT1"></A><a name="CH04.AWT2"></A>

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-4-FIG-4">Figure 4.4: AWTEvent class hierarchy</A></h4>


<p>
<img align=middle src="figs/jawt0405.gif" alt="[Graphic: Figure 4-4]" width=318 height=256 border=0>

</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-4-FIG-5">Figure 4.5: AWT EventListener and Adapter class hierarchies</A></h4>


<p>
<img align=middle src="figs/jawt0406.gif" alt="[Graphic: Figure 4-5]" width=502 height=749 border=0>

</DIV>

<p class=para>
Some of the listener interfaces are constructed to deal with multiple events. 
For instance, the <tt class=literal>MouseListener</tt> 
interface declares five methods to handle different kinds of mouse events: 
mouse down, mouse up, click (both down and up), mouse enter, and mouse 
exit. Strictly speaking, this means that an object interested in mouse 
events must implement <tt class=literal>MouseListener</tt> 
and must therefore implement five methods to deal with all possible mouse 
actions. This sounds like a waste of the programmer's effort; most 
of the time, you're only interested in one or two of these events. 
Why should you have to implement all five methods? Fortunately, you don't. 
The <tt class=literal>java.awt.event</tt> package 
also includes a set of <i class=emphasis>adapter</I> 
<i class=emphasis>classes</I>, which 
are shorthands that make it easier to write event handlers. The adapter 
class for any listener interface provides a <tt class=literal>null</tt> 
implementation of all the methods in that interface. For example, the <tt class=literal>MouseAdapter</tt> 
class provides <tt class=literal>stub</tt> implementations 
of the methods <tt class=literal>mouseEntered()</tt>, 
<tt class=literal>mouseExited()</tt>, <tt class=literal>mousePressed()</tt>, 
<tt class=literal>mouseReleased()</tt>, and <tt class=literal>mouseClicked()</tt>. 
If you want to write an event-handling class that deals with mouse clicks 
only, you can declare that your class extends <tt class=literal>MouseAdapter</tt>. 
It then inherits all five of these methods, and your only programming task 
is to override the single method you care about: <tt class=literal>mouseClicked()</tt>. 

<p class=para>
A particularly convenient way to use the adapters is to write an anonymous inner class. For example, the following code deals with the <tt class=literal>MOUSE_PRESSED</tt> event without creating a separate listener class:

<div class=screen>
<p>
<pre>
addMouseListener (new MouseAdapter()   {
  public void mousePressed (MouseEvent e)  {
    // do what's needed to handle the event
    System.out.println ("Clicked at: " + e.getPoint());
  }
});
</PRE>
</DIV>

<p class=para>
This code creates a <tt class=literal>MouseAdapter</tt>, overrides its <tt class=literal>mousePressed()</tt> method, and registers the resulting unnamed object as a listener for mouse events. Its <tt class=literal>mousePressed()</tt> method is called when <tt class=literal>MOUSE_PRESSED</tt> events occur. You can also use the adapter classes to implement something similar to a callback. For example, you could override <tt class=literal>mousePressed()</tt> to call one of your own methods, which would then be called whenever a <tt class=literal>MOUSE_PRESSED</tt> event occurs.

<p class=para>
There are adapter classes for most of the listener interfaces; the only 
exceptions are the listener interfaces that contain only one method (for 
example, there's no <tt class=literal>ActionAdapter</tt> 
to go with <tt class=literal>ActionListener</tt>). 
When the listener interface contains only one method, an adapter class 
is superfluous. Event handlers may as well implement the listener interface 
directly, because they will have to override the only method in the interface; 
creating a dummy class with the interface method stubbed out doesn't 
accomplish anything. The different adapter classes are discussed with their related <tt class=literal>EventListener</tt> 
interfaces. 

<p class=para>
With all these adapter classes, listener interfaces, and event classes, 
it's easy to get confused. Here's a quick summary of the different 
pieces involved and the roles they play: 

<p>
<ul class=itemizedlist>
<li class=listitem>Components generate <tt class=literal>AWTEvent</tt>s 
when something happens. Different subclasses of <tt class=literal>AWTEvent</tt> 
represent different kinds of events. For example, mouse events are represented 
by the <tt class=literal>MouseEvent</tt> class. Each 
component can generate certain subclasses of <tt class=literal>AWTEvent</tt>. 

<p>
<li class=listitem>Event handlers are registered to receive events by calls to an "add 
listener" method in the component that generates the event. There 
is a different "add listener" method for every kind of <tt class=literal>AWTEvent</tt> 
the component can generate; for example, to declare your interest in a 
mouse event, you call the component's <tt class=literal>addMouseListener()</tt> 
method. 

<p>
<li class=listitem>Every event type has a corresponding listener interface that defines the 
methods that are called when that event occurs. To be able to receive events, 
an event handler must therefore implement the appropriate listener interface. 
For example, <tt class=literal>MouseListener</tt> 
defines the methods that are called when mouse events occur. If you create 
a class that calls <tt class=literal>addMouseListener()</tt>, 
that class had better implement the <tt class=literal>MouseListener</tt> 
interface. 

<p>
<li class=listitem>Most event types also have an adapter class. For example, <tt class=literal>MouseEvent</tt>s 
have a <tt class=literal>MouseAdapter</tt> class. 
The adapter class implements the corresponding listener interface but 
provides a <tt class=literal>stub</tt> implementation 
of each method (i.e., the method just returns without taking any action). 
Adapter classes are shorthand for programs that only need a few of the 
methods in the listener interface. For example, instead of implementing 
all five methods of the <tt class=literal>MouseListener</tt> 
interface, a class can extend the <tt class=literal>MouseAdapter</tt> 
class and override the one or two methods that it is interested in. 

<p>
</UL>
<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-4-SECT-3.1">Using the 1.1 Event Model</A></h3>

<p class=para>
Before jumping in and describing all the different pieces in detail, we 
will look at a simple applet that uses the Java 1.1 event model. <a href="#JAWT-CH-4-EX-3">Example 4.3</A> is equivalent to <a href="ch04_02.htm">Example 4.2</A>, 
except that it uses the new event model; when you press a mouse button, 
it just tells you what button you pressed. Notice how the new class, 
<tt class=literal>mouseEvent11</tt>, separates the 
user interface from the actual work. The class <tt class=literal>mouseEvent11</tt> 
implements a very simple user interface. The class <tt class=literal>UpDownCatcher</tt> 
handles the events, figures out what to do, and calls some methods in <tt class=literal>mouseEvent11</tt> 
to communicate the results. I added a simple interface that is called <tt class=literal>GetSetString</tt> 
to define the communications between the user interface and the event handler; 
strictly speaking, this isn't necessary, but it's a good programming 
practice. 

<div class=example>
<h4 class=example><a class="TITLE" name="JAWT-CH-4-EX-3">Example 4.3: Handling Mouse Events in Java 1.1</A></h4>

<div class=screen>
<p>
<pre>
// Java 1.1 only
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
interface GetSetString {
    public void setString (String s);
    public String getString ();
}
</PRE>
</DIV>

</DIV>

<p class=para>
The <tt class=literal>UpDownCatcher</tt> class is 
responsible for handling events generated by the user interface. It extends 
<tt class=literal>MouseAdapter</tt> so that it 
needs to implement only the <tt class=literal>MouseListener</tt> 
methods that we care about (such as <tt class=literal>mousePressed()</tt> 
and <tt class=literal>mouseReleased()</tt>). 

<div class=screen>
<p>
<pre>
class UpDownCatcher extends MouseAdapter {
    GetSetString gss;
    public UpDownCatcher (GetSetString s) {
        gss = s;
    }
</PRE>
</DIV>

<p class=para>
The constructor simply saves a reference to the class that is using this 
handler. 

<div class=screen>
<p>
<pre>
    public void mousePressed (MouseEvent e) {
        int mods = e.getModifiers();
        if ((mods &amp; MouseEvent.BUTTON3_MASK) != 0) {
            gss.setString ("Right Button Pressed");
        } else if ((mods &amp; MouseEvent.BUTTON2_MASK) != 0) {
            gss.setString ("Middle Button Pressed");
        } else {
            gss.setString ("Left Button Pressed");
        }
        e.getComponent().repaint();
    }
</PRE>
</DIV>

<p class=para>
The <tt class=literal>mousePressed</tt> method overrides one of the methods of the <tt class=literal>MouseAdapter</tt> 
class. The method <tt class=literal>mousePressed()</tt> is called 
whenever a user presses any mouse button. This method figures out which 
button on a three-button mouse was pressed and calls the <tt class=literal>setString()</tt> 
method in the user interface to inform the user of the result. 

<div class=screen>
<p>
<pre>
    public void mouseReleased (MouseEvent e) {
        gss.setString ("Press a Mouse Key");
        e.getComponent().repaint();
    }
}
</PRE>
</DIV>

<p class=para>
The <tt class=literal>mouseReleased</tt> method overrides another of the methods of the <tt class=literal>MouseAdapter</tt> 
class. When the user releases the mouse button, it calls <tt class=literal>setString()</tt> 
to restore the user interface to the original message. 

<div class=screen>
<p>
<pre>
public class mouseEvent11 extends Applet implements GetSetString {
    private String theString = "Press a Mouse Key";
    public synchronized void setString (String s) {
        theString = s;
    }
    public synchronized String getString () {
        return theString;
    }
    public synchronized void paint (Graphics g) {
        g.drawString (theString, 20, 20);
    }
    public void init () {
        addMouseListener (new UpDownCatcher(this));
    }
}
</PRE>
</DIV>

<p class=para>
<tt class=literal>mouseEvent11</tt> is a very simple 
applet that implements our user interface. All it does is draw the desired 
string on the screen; the event handler tells it what string to draw. The 
<tt class=literal>init()</tt> method creates an instance 
of the event handler, which is <tt class=literal>UpDownCatcher</tt>, 
and registers it as interested in mouse events. 

<p class=para>
Because the user interface and the event processing are in separate classes, 
it would be easy to use this user interface for another purpose. You would 
have to replace only the <tt class=literal>UpDownCatcher</tt> 
class with something else--perhaps a more complex class that reported 
when the mouse entered and exited the area. 

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-4-SECT-3.2">AWTEvent and Its Children</A></h3>

<p class=para>
Under the 1.1 delegation event model, all system events are instances of 
<tt class=literal>AWTEvent</tt> or its subclasses. 
The model provides two sets of event types. The first set are fairly raw 
events, such as those indicating when a component gets focus, a key is 
pressed, or the mouse is moved. These events exist in <tt class=literal>ComponentEvent</tt> 
and its subclasses, along with some new events previously available only 
by overriding non-event-related methods. In addition, higher-level event 
types (for example, selecting a button) are encapsulated in other subclasses of <tt class=literal>AWTEvent</tt> 
that are not children of <tt class=literal>ComponentEvent</tt>. 

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.2.1">AWTEvent</A></h4>Variables

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>protected int id <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>id</tt> field of <tt class=literal>AWTEvent</tt> 
is protected and is accessible through the <tt class=literal>getID()</tt> 
method. It serves as the identifier of the event type, such as the <tt class=literal>ACTION_PERFORMED</tt> 
type of <tt class=literal>ActionEvent</tt> or the 
<tt class=literal>MOUSE_MOVE</tt> type of <tt class=literal>Event</tt>. 
With the delegation event model, it is usually not necessary to look at 
the event <tt class=literal>id</tt> unless you are looking in the event queue; just register the 
appropriate event listener. </DL>
Constants

<p class=para>
The constants of <tt class=literal>AWTEvent</tt> are 
used in conjunction with the internal method <tt class=literal>Component.eventEnabled()</tt>. They are used to help the program determine what style of event 
handling (true/false--containment or listening--delegation) 
the program uses and which events a component processes. If you want to 
process 1.1 events without providing a listener, you need to set the mask 
for the type of event you want to receive. Look in <a href="ch05_01.htm">Chapter 5, <i>Components</i></A>, 
for more information on the use of these constants: 

<div class=simplelist>

<p>
<i class=emphasis>public final static long ACTION_EVENT_MASK</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br>
<i class=emphasis>public final static long ADJUSTMENT_EVENT_MASK</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br>
<i class=emphasis>public final static long COMPONENT_EVENT_MASK</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br>
<i class=emphasis>public final static long CONTAINER_EVENT_MASK</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br>
<i class=emphasis>public final static long FOCUS_EVENT_MASK</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br>
<i class=emphasis>public final static long ITEM_EVENT_MASK</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br>
<i class=emphasis>public final static long KEY_EVENT_MASK</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br>
<i class=emphasis>public final static long MOUSE_EVENT_MASK</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br>
<i class=emphasis>public final static long MOUSE_MOTION_EVENT_MASK</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br>
<i class=emphasis>public final static long TEXT_EVENT_MASK</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br>
<i class=emphasis>public final static long WINDOW_EVENT_MASK</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br>
</DIV>

<p class=para>
In addition to the mask constants, the constant <tt class=literal>RESERVED_ID_MAX</tt> is the largest event ID reserved for "official" events. You may use ID numbers greater than this value to create your own events, without risk of conflicting with standard events.

<div class=simplelist>

<p>
<i class=emphasis>public final static long RESERVED_ID_MAX <img src="gifs/bstar.gif" alt="(New)" border=0></I><br>
</DIV>

Constructors

<p class=para>
Since <tt class=literal>AWTEvent</tt> is an abstract 
class, you cannot call the constructors directly. They are automatically 
called when an instance of a child class is created. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public AWTEvent(Event event) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The first constructor creates an <tt class=literal>AWTEvent</tt> 
from the parameters of a 1.0 <tt class=literal>Event</tt>. 
The <tt class=literal>event.target</tt> and <tt class=literal>event.id</tt> 
are passed along to the second constructor. 

<p>
<dt class=varlistentry><i class=emphasis>public AWTEvent(Object source, int id) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor creates an <tt class=literal>AWTEvent</tt> 
with the given <tt class=literal>source</tt>; the 
source is the object generating the event. The <tt class=literal>id</tt> 
field serves as the identifier of the event type. It is protected and is 
accessible through the <tt class=literal>getID()</tt> 
method. With the delegation event model, it is usually not necessary to 
look at the event <tt class=literal>id</tt> unless 
you are looking in the event queue or in the <tt class=literal>processEvent()</tt> 
method of a component; just register the appropriate event listener. </DL>
Methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int getID() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getID()</tt> method returns 
the <tt class=literal>id</tt> from the constructor, 
thus identifying the event type. 

<p>
<dt class=varlistentry><i class=emphasis>protected void consume() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>consume()</tt> method is called 
to tell an event that it has been handled. An event that has been marked 
"consumed" is still delivered to the source component's 
peer and to all other registered listeners. However, the peer will ignore 
the event; other listeners may also choose to ignore it, but that's 
up to them. It isn't possible for a listener to "unconsume" 
an event that has already been marked "consumed." 

<p class=para>
Noncomponent events cannot be consumed. Only keyboard and mouse event 
types can be flagged as consumed. Marking an event "consumed" 
is useful if you are capturing keyboard input and need to reject a character; 
if you call <tt class=literal>consume()</tt>, the 
key event never makes it to the peer, and the keystroke isn't displayed. 
In Java 1.0, you would achieve the same effect by writing an event handler 
(e.g., <tt class=literal>keyDown()</tt>) that returns 
<tt class=literal>true</tt>. 

<p class=para>
You can assume that an event won't be delivered to the peer until 
all listeners have had a chance to consume it. However, you should not 
make any other assumptions about the order in which listeners are called. 

<p>
<dt class=varlistentry><i class=emphasis>protected boolean isConsumed() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>isConsumed()</tt> method returns 
whether the event has been consumed. If the event has been consumed, either 
by default or through <tt class=literal>consume()</tt>, 
this method returns <tt class=literal>true</tt>; otherwise, 
it returns <tt class=literal>false</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public String paramString() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
When you call the <tt class=literal>toString()</tt> 
method of an <tt class=literal>AWTEvent</tt>, the 
<tt class=literal>paramString()</tt> method is called 
in turn to build the string to display. Since you are most frequently dealing 
with children of <tt class=literal>AWTEvent</tt>, 
the children need only to override <tt class=literal>paramString()</tt> 
to add their specific information. 

<p>
<dt class=varlistentry><i class=emphasis>public String toString() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>toString()</tt> method of <tt class=literal>AWTEvent</tt> 
returns a string with the name of the event, specific information about 
the event, and the source. In the method <tt class=literal>MouseAdapter.mouseReleased()</tt>, printing the parameter would result in something like the following: </DL>
<div class=screen>
<p>
<pre>
java.awt.event.MouseEvent[MOUSE_RELEASED,(69,107),mods=0,clickCount=1] on panel1
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.2.2">ComponentEvent</A></h4>Constants

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public final static int COMPONENT_FIRST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public final static int COMPONENT_LAST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>COMPONENT_FIRST</tt> and <tt class=literal>COMPONENT_LAST</tt> 
constants hold the endpoints of the range of identifiers for <tt class=literal>ComponentEvent</tt> 
types. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int COMPONENT_HIDDEN <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>COMPONENT_HIDDEN</tt> constant 
identifies component events that occur because a component was hidden. 
The interface method <tt class=literal>ComponentListener.componentHidden()</tt> 
 handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int COMPONENT_MOVED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>COMPONENT_MOVED</tt> constant 
identifies component events that occur because a component has moved. The 
<tt class=literal>ComponentListener.componentMoved()</tt> 
interface method handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int COMPONENT_RESIZED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>COMPONENT_RESIZED</tt> constant 
identifies component events that occur because a component has changed 
size. The interface method <tt class=literal>ComponentListener.componentResized()</tt> 
handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int COMPONENT_SHOWN <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>COMPONENT_SHOWN</tt> constant 
identifies component events that occur because a component has been shown 
(i.e., made visible). The interface method <tt class=literal>ComponentListener.componentShown()</tt> 
handles this event. </DL>
Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public ComponentEvent(Component source, int id) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>ComponentEvent</tt> 
with the given <tt class=literal>source</tt>; the 
source is the object generating the event. The <tt class=literal>id</tt> 
field identifies the event type. If system generated, the <tt class=literal>id</tt> 
will be one of the last four constants above. However, nothing stops you from 
creating your own <tt class=literal>id</tt> for your 
event types. </DL>
Methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Component getComponent() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getComponent()</tt> method returns 
the <tt class=literal>source</tt> of the event--that 
is, the component initiating the event. 

<p>
<dt class=varlistentry><i class=emphasis>public String paramString() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
When you call the <tt class=literal>toString()</tt> 
method of an <tt class=literal>AWTEvent</tt>, the 
<tt class=literal>paramString()</tt> method is called 
in turn to build the string to display. At the <tt class=literal>ComponentEvent</tt> 
level, <tt class=literal>paramString()</tt> adds a 
string containing the event <tt class=literal>id</tt> 
(if available) and the bounding rectangle for the <tt class=literal>source</tt> 
(if appropriate). For example: </DL>
<div class=screen>
<p>
<pre>
java.awt.event.ComponentEvent[COMPONENT_RESIZED (0, 0, 100x100)] on button0
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.2.3">ContainerEvent</A></h4>

<p class=para>
The <tt class=literal>ContainerEvent</tt> class includes 
events that result from specific container operations. Constants

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public final static int CONTAINER_FIRST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public final static int CONTAINER_LAST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>CONTAINER_FIRST</tt> and <tt class=literal>CONTAINER_LAST</tt> 
constants hold the endpoints of the range of identifiers for <tt class=literal>ContainerEvent</tt> 
types. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int COMPONENT_ADDED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>COMPONENT_ADDED</tt> constant 
identifies container events that occur because a component has been added 
to the container. The interface method <tt class=literal>ContainerListener.componentAdded()</tt> 
handles this event. Listening for this event is useful 
if a common listener should be attached to all components added to a container. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int COMPONENT_REMOVED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>COMPONENT_REMOVED</tt> constant 
identifies container events that occur because a component has been removed 
from the container. The interface method <tt class=literal>ContainerListener.componentRemoved()</tt> 
handles this event. </DL>
Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public ContainerEvent(Container source, int id, Component child) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The constructor creates a <tt class=literal>ContainerEvent</tt> 
with the given <tt class=literal>source</tt> (the 
container generating the event), to which the given <tt class=literal>child</tt> 
has been added or removed. The 
<tt class=literal>id</tt> field serves as the identifier 
of the event type. If system generated, the <tt class=literal>id</tt> 
will be one of the constants described previously. However, nothing stops you from 
creating your own <tt class=literal>id</tt> for your 
event types. </DL>
Methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Container getContainer() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getContainer()</tt> method returns 
the container that generated the event. 

<p>
<dt class=varlistentry><i class=emphasis>public Component getComponent() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getComponent()</tt> method returns 
the component that was added to or removed from the container. 

<p>
<dt class=varlistentry><i class=emphasis>public String paramString() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
When you call the <tt class=literal>toString()</tt> 
method of an <tt class=literal>AWTEvent</tt>, the 
<tt class=literal>paramString()</tt> method is in 
turn called to build the string to display. At the <tt class=literal>ContainerEvent</tt> 
level, <tt class=literal>paramString()</tt> adds a 
string containing the event <tt class=literal>id</tt> 
(if available) along with the name of the child. </DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.2.4">FocusEvent</A></h4>

<p class=para>
The <tt class=literal>FocusEvent</tt> class contains 
the events that are generated when a component gets or loses focus. These 
may be either temporary or permanent focus changes. A temporary focus change 
is the result of something else happening, like a window appearing in front 
of you. Once the window is removed, focus is restored. A permanent focus 
change is usually the result of focus traversal, using the keyboard or 
the mouse: for example, you clicked in a text field to type in it, or used 
Tab to move to the next component. More programmatically, permanent focus 
changes are the result of calls to <tt class=literal>Component.requestFocus()</tt>. Constants

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public final static int FOCUS_FIRST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public final static int FOCUS_LAST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>FOCUS_FIRST</tt> and <tt class=literal>FOCUS_LAST</tt> 
constants hold the endpoints of the range of identifiers for <tt class=literal>FocusEvent</tt> 
types. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int FOCUS_GAINED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>FOCUS_GAINED</tt> constant identifies 
focus events that occur because a component gains input focus. The <tt class=literal>FocusListener.focusGained()</tt> 
interface method handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int FOCUS_LOST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>FOCUS_LOST</tt> constant identifies 
focus events that occur because a component loses input focus. The <tt class=literal>FocusListener.focusLost()</tt> 
interface method handles this event. </DL>
Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public FocusEvent(Component source, int id, boolean temporary) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>FocusEvent</tt> 
with the given <tt class=literal>source</tt>; the 
source is the object generating the event. The <tt class=literal>id</tt> 
field serves as the identifier of the event type. If system generated, 
the <tt class=literal>id</tt> will be one of the two 
constants described previously. However, nothing stops you from creating your own <tt class=literal>id</tt> 
for your event types. The <tt class=literal>temporary</tt> 
parameter is <tt class=literal>true</tt> if this event 
represents a temporary focus change. 

<p>
<dt class=varlistentry><i class=emphasis>public FocusEvent(Component source, int id) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>FocusEvent</tt> 
by calling the first constructor with the <tt class=literal>temporary</tt> 
parameter set to <tt class=literal>false</tt>; that 
is, it creates an event for a permanent focus change. </DL>
Methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public boolean isTemporary() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>isTemporary()</tt> method returns 
<tt class=literal>true</tt> if the focus event describes 
a temporary focus change, <tt class=literal>false</tt> 
if the event describes a permanent focus change. Once set by the constructor, 
the setting is permanent. 

<p>
<dt class=varlistentry><i class=emphasis>public String paramString() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
When you call the <tt class=literal>toString()</tt> 
method of an <tt class=literal>AWTEvent</tt>, the 
<tt class=literal>paramString()</tt> method is in 
turn called to build the string to display. At the <tt class=literal>FocusEvent</tt> 
level, <tt class=literal>paramString()</tt> adds a 
string showing the event <tt class=literal>id</tt> 
(if available) and whether or not it is temporary. </DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.2.5">WindowEvent</A></h4>

<p class=para>
<a name="CH04.WINDOW"></A>The <tt class=literal>WindowEvent</tt> class encapsulates 
the window-oriented events. Constants

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public final static int WINDOW_FIRST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public final static int WINDOW_LAST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>WINDOW_FIRST</tt> and <tt class=literal>WINDOW_LAST</tt> 
constants hold the endpoints of the range of identifiers for <tt class=literal>WindowEvent</tt> 
types. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int WINDOW_ICONIFIED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>WINDOW_ICONIFIED</tt> constant 
identifies window events that occur because the user iconifies a window. 
The <tt class=literal>WindowListener.windowIconified()</tt> 
interface method handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int WINDOW_DEICONIFIED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>WINDOW_DEICONIFIED</tt> constant 
identifies window events that occur because the user de-iconifies a window. 
The interface method <tt class=literal>WindowListener.windowDeiconified()</tt> 
handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int WINDOW_OPENED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>WINDOW_OPENED</tt> constant 
identifies window events that occur the first time a <tt class=literal>Frame</tt> 
or <tt class=literal>Dialog</tt> is made visible with 
<tt class=literal>show()</tt>. The interface method <tt class=literal>WindowListener.windowOpened()</tt> 
handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int WINDOW_CLOSING <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>WINDOW_CLOSING</tt> constant 
identifies window events that occur because the user wants to close a window. 
This is similar to the familiar event <tt class=literal>Event.WINDOW_DESTROY</tt> 
 dealt with under 1.0 with frames. The <tt class=literal>WindowListener.windowClosing()</tt> 
interface method handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int WINDOW_CLOSED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>WINDOW_CLOSED</tt> constant 
identifies window events that occur because a <tt class=literal>Frame</tt> 
or <tt class=literal>Dialog</tt> has finally closed, 
after <tt class=literal>hide()</tt> or <tt class=literal>destroy()</tt>. 
This comes after <tt class=literal>WINDOW_CLOSING</tt>, 
which happens when the user wants the window to close. The <tt class=literal>WindowListener.windowClosed()</tt> 
interface method handles this event. </DL>
<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
If there is a call to <tt class=literal>System.exit()</tt> 
in the <tt class=literal>windowClosing()</tt> listener, 
the window will not be around to call <tt class=literal>windowClosed()</tt>, 
nor will other listeners know. 
</blockquote><p>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public final static int WINDOW_ACTIVATED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>WINDOW_ACTIVATED</tt> constant 
identifies window events that occur because the user brings the window 
to the front, either after showing the window, de-iconifying, or removing 
whatever was in front. The interface method <tt class=literal>WindowListener.windowActivated()</tt> 
handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int WINDOW_DEACTIVATED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>WINDOW_DEACTIVATED</tt> constant 
identifies window events that occur because the user makes another window 
the active window. The interface method <tt class=literal>WindowListener.windowDeactivated()</tt> 
handles this event. </DL>
Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public WindowEvent(Window source, int id) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>WindowEvent</tt> 
with the given <tt class=literal>source</tt>; the 
source is the object generating the event. The <tt class=literal>id</tt> 
field serves as the identifier of the event type. If system generated, 
the <tt class=literal>id</tt> will be one of the seven 
constants described previously. However, nothing stops you from creating your own <tt class=literal>id</tt> 
for your event types. </DL>
Methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Window getWindow() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getWindow()</tt> method returns 
the <tt class=literal>Window</tt> that generated the 
event. 

<p>
<dt class=varlistentry><i class=emphasis>public String paramString() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
When you call the <tt class=literal>toString()</tt> 
method of an <tt class=literal>AWTEvent</tt>, the 
<tt class=literal>paramString()</tt> method is in 
turn called to build the string to display. At the <tt class=literal>WindowEvent</tt> 
level, <tt class=literal>paramString()</tt> adds a 
string containing the event <tt class=literal>id</tt> 
(if available). In a call to <tt class=literal>windowClosing()</tt>, 
printing the parameter would yield: </DL>
<div class=screen>
<p>
<pre>
java.awt.event.WindowEvent[WINDOW_CLOSING] on frame0
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.2.6">PaintEvent</A></h4>

<p class=para>
The <tt class=literal>PaintEvent</tt> class encapsulates 
the paint-oriented events. There is no corresponding <tt class=literal>PaintListener</tt> 
class, so you cannot listen for these events. To process them, override 
the <tt class=literal>paint()</tt> and <tt class=literal>update()</tt> 
routines of <tt class=literal>Component</tt>. The 
<tt class=literal>PaintEvent</tt> class exists to 
ensure that events are serialized properly through the event queue. Constants

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public final static int PAINT_FIRST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public final static int PAINT_LAST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>PAINT_FIRST</tt> and <tt class=literal>PAINT_LAST</tt> 
constants hold the endpoints of the range of identifiers for <tt class=literal>PaintEvent</tt> 
types. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int PAINT <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>PAINT</tt> constant identifies 
paint events that occur because a component needs to be repainted. Override 
the <tt class=literal>Component.paint()</tt> method 
to handle this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int UPDATE <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>UPDATE</tt> constant identifies 
paint events that occur because a component needs to be updated before 
painting. This usually refreshes the display. Override the <tt class=literal>Component.update()</tt> 
method to handle this event. </DL>
Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public PaintEvent(Component source, int id, Rectangle updateRect) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>PaintEvent</tt> 
with the given <tt class=literal>source</tt>. The 
source is the object whose display needs to be updated. The <tt class=literal>id</tt> 
field identifies the event type. If system generated, the <tt class=literal>id</tt> 
will be one of the two constants described previously. However, nothing stops you from 
creating your own <tt class=literal>id</tt> for your 
event types. <tt class=literal>updateRect</tt> represents the rectangular area of <tt class=literal>source</tt> that needs to be updated.</DL>
Methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Rectangle getUpdateRect()</I><br>
<dd>

<p class=para>
The <tt class=literal>getUpdateRect()</tt> method returns the rectangular area within the <tt class=literal>PaintEvent</tt>'s source component that needs repainting. This area is set by either the constructor or the <tt class=literal>setUpdateRect()</tt> method.

<p>
<dt class=varlistentry><i class=emphasis>public void setUpdateRect(Rectangle updateRect)</I><br>
<dd>

<p class=para>
The <tt class=literal>setUpdateRect()</tt> method changes the area of the <tt class=literal>PaintEvent</tt>'s source component that needs repainting.

<p>
<dt class=varlistentry><i class=emphasis>public String paramString() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
When you call the <tt class=literal>toString()</tt> 
method of an <tt class=literal>AWTEvent</tt>, the 
<tt class=literal>paramString()</tt> method is called 
in turn to build the string to display. At the <tt class=literal>PaintEvent</tt> 
level, <tt class=literal>paramString()</tt> adds a 
string containing the event <tt class=literal>id</tt> 
(if available) along with the area requiring repainting (a clipping rectangle). 
If you peek in the event queue, one possible result may yield: </DL>
<div class=screen>
<p>
<pre>
java.awt.event.PaintEvent[PAINT,updateRect=java.awt.Rectangle[x=0,y=0,
width=192,height=173]] on frame0
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.2.7">InputEvent</A></h4>

<p class=para>
<a name="CH04.INPUT2"></A>The <tt class=literal>InputEvent</tt> class provides 
the basis for the key and mouse input and movement routines. <tt class=literal>KeyEvent</tt> 
and <tt class=literal>MouseEvent</tt> provide the 
specifics of each. Constants

<p class=para>
The constants of <tt class=literal>InputEvent</tt> 
help identify which modifiers are present when an input event occurs, as 
shown in <a href="#JAWT-CH-4-EX-3">Example 4.3</A>. To examine the event modifiers 
and test for the presence of these masks, call <tt class=literal>getModifiers()</tt> 
to get the current set of modifiers. <a name="CH04.MODIF2"></A><a name="CH04.MODIF3"></A>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public final static int ALT_MASK <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public final static int CTRL_MASK <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public final static int META_MASK <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public final static int SHIFT_MASK <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The first set of <tt class=literal>InputEvent</tt> 
masks are for the different modifier keys on the keyboard. They are often 
set to indicate which button on a multibutton mouse has been pressed. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int BUTTON1_MASK <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public final static int BUTTON2_MASK <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public final static int BUTTON3_MASK <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The button mask constants are equivalents for the modifier masks, allowing you to write more intelligible code for dealing with button events. <tt class=literal>BUTTON2_MASK</tt> is the same as <tt class=literal>ALT_MASK</tt>, and <tt class=literal>BUTTON3_MASK</tt> is the same as <tt class=literal>META_MASK</tt>; <tt class=literal>BUTTON1_MASK</tt> currently isn't usable and is never set. For example, if you want to check whether the user pressed the second (middle) mouse button, you can test against <tt class=literal>BUTTON2_MASK</tt> rather than <tt class=literal>ALT_MASK</tt>. <a href="#JAWT-CH-4-EX-3">Example 4.3</A> demonstrates how to use these constants.</DL>
Constructors

<p class=para>
<tt class=literal>InputEvent</tt> is an abstract class 
with no public constructors. Methods

<p class=para>
Unlike the <tt class=literal>Event</tt> class, <tt class=literal>InputEvent</tt> 
has an <tt class=literal>isAltDown()</tt> method to 
check the <tt class=literal>ALT_MASK</tt> setting. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public boolean isAltDown() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>isAltDown()</tt> method checks 
to see if <tt class=literal>ALT_MASK</tt> is set. 
If so, <tt class=literal>isAltDown()</tt> returns 
<tt class=literal>true</tt>; otherwise, it returns 
<tt class=literal>false</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean isControlDown() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>isControlDown()</tt> method 
checks to see if <tt class=literal>CONTROL_MASK</tt> 
is set. If so, <tt class=literal>isControlDown()</tt> 
returns <tt class=literal>true</tt>; otherwise, it 
returns <tt class=literal>false</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean isMetaDown() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>isMetaDown()</tt> method checks 
to see if <tt class=literal>META_MASK</tt> is set. 
If so, the method <tt class=literal>isMetaDown()</tt> returns 
<tt class=literal>true</tt>; otherwise, it returns 
<tt class=literal>false</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean isShiftDown() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>isShiftDown()</tt> method checks 
to see if <tt class=literal>SHIFT_MASK</tt> is set. 
If so, the method <tt class=literal>isShiftDown()</tt> returns 
<tt class=literal>true</tt>; otherwise, it returns 
<tt class=literal>false</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public int getModifiers() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getModifiers()</tt> method returns 
the current state of the modifier keys. For each modifier key pressed, 
a different flag is raised in the return argument. To check if a modifier 
is set, AND the 
return value with a flag and check for a nonzero value. </DL>
<div class=screen>
<p>
<pre>
if ((ie.getModifiers() &amp; MouseEvent.META_MASK) != 0) {
    System.out.println ("Meta is set");
}
</PRE>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public long getWhen() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getWhen()</tt> method returns 
the time at which the event occurred. The return value is in milliseconds. 
Convert the <tt class=literal>long</tt> value to a <tt class=literal>Date</tt> 
to examine the contents. For example:</DL>
<div class=screen>
<p>
<pre>
Date d = new Date (ie.getWhen());
</PRE>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void consume() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This class overrides the <tt class=literal>AWTEvent.consume()</tt> 
method to make it public. Anyone, not just a subclass, can mark an <tt class=literal>InputEvent</tt> 
as consumed. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean isConsumed() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This class overrides the <tt class=literal>AWTEvent.isconsumed()</tt> 
method to make it public. Anyone can find out if an <tt class=literal>InputEvent</tt> 
has been consumed. </DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.2.8">KeyEvent</A></h4>

<p class=para>
<a name="CH04.KEY2"></A>The <tt class=literal>KeyEvent</tt> class is a subclass 
of <tt class=literal>InputEvent</tt> for dealing with 
keyboard events. There are two fundamental key actions: key presses and 
key releases. These are represented by <tt class=literal>KEY_PRESSED</tt> 
and <tt class=literal>KEY_RELEASED</tt> events. Of 
course, it's inconvenient to think in terms of all these individual 
actions, so Java also keeps track of the "logical" keys you 
type. These are represented by <tt class=literal>KEY_TYPED</tt> 
events. For every keyboard key pressed, a <tt class=literal>KeyEvent.KEY_PRESSED</tt> 
event occurs; the key that was pressed is identified by one of the virtual 
keycodes from <a href="#JAWT-CH-4-TAB-4">Table 4.4</A> and is available through 
the <tt class=literal>getKeyCode()</tt> method. For 
example, if you type an uppercase A, you will get two <tt class=literal>KEY_PRESSED</tt> 
events, one for shift (<tt class=literal>VK_SHIFT</tt>) 
and one for the "a" (<tt class=literal>VK_A</tt>). 
You will also get two <tt class=literal>KeyEvent.KEY_RELEASED</tt> 
events. However, there will only be one <tt class=literal>KeyEvent.KEY_TYPED</tt> 
event; if you call <tt class=literal>getKeyChar()</tt> 
for the <tt class=literal>KEY_TYPED</tt> event, the 
result will be the Unicode character "A" (type <tt class=literal>char</tt>). 
<tt class=literal>KEY_TYPED</tt> events do not happen 
for action-oriented keys like function keys. Constants

<p class=para>
Like the <tt class=literal>Event</tt> class, numerous 
constants help you identify all the keyboard keys. <a href="#JAWT-CH-4-TAB-4">Table 4.4</A> 
shows the constants that refer to these keyboard keys. The values are all 
declared <tt class=literal>public static final int</tt>. 
A few keys represent ASCII characters that have string equivalents like 
<tt class=literal>\n</tt>. 

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="JAWT-CH-4-TAB-4">Table 4.4: Key Constants in Java 1.1</A></CAPTION>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_ENTER</tt></TD>
<td align="LEFT"><tt class=literal>VK_0</tt></TD>
<td align="LEFT"><tt class=literal>VK_A</tt></TD>
<td align="LEFT"><tt class=literal>VK_F1</tt></TD>
<td align="LEFT"><tt class=literal>VK_ACCEPT</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_BACK_SPACE</tt></TD>
<td align="LEFT"><tt class=literal>VK_1</tt></TD>
<td align="LEFT"><tt class=literal>VK_B</tt></TD>
<td align="LEFT"><tt class=literal>VK_F2</tt></TD>
<td align="LEFT"><tt class=literal>VK_CONVERT</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_TAB</tt></TD>
<td align="LEFT"><tt class=literal>VK_2</tt></TD>
<td align="LEFT"><tt class=literal>VK_C</tt></TD>
<td align="LEFT"><tt class=literal>VK_F3</tt></TD>
<td align="LEFT"><tt class=literal>VK_FINAL</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_CANCEL</tt></TD>
<td align="LEFT"><tt class=literal>VK_3</tt></TD>
<td align="LEFT"><tt class=literal>VK_D</tt></TD>
<td align="LEFT"><tt class=literal>VK_F4</tt></TD>
<td align="LEFT"><tt class=literal>VK_KANA</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_CLEAR</tt></TD>
<td align="LEFT"><tt class=literal>VK_4</tt></TD>
<td align="LEFT"><tt class=literal>VK_E</tt></TD>
<td align="LEFT"><tt class=literal>VK_F5</tt></TD>
<td align="LEFT"><tt class=literal>VK_KANJI</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_SHIFT</tt></TD>
<td align="LEFT"><tt class=literal>VK_5</tt></TD>
<td align="LEFT"><tt class=literal>VK_F</tt></TD>
<td align="LEFT"><tt class=literal>VK_F6</tt></TD>
<td align="LEFT"><tt class=literal>VK_MODECHANGE</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_CONTROL</tt></TD>
<td align="LEFT"><tt class=literal>VK_6</tt></TD>
<td align="LEFT"><tt class=literal>VK_G</tt></TD>
<td align="LEFT"><tt class=literal>VK_F7</tt></TD>
<td align="LEFT"><tt class=literal>VK_NONCONVERT</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_ALT</tt></TD>
<td align="LEFT"><tt class=literal>VK_7</tt></TD>
<td align="LEFT"><tt class=literal>VK_H</tt></TD>
<td align="LEFT"><tt class=literal>VK_F8</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_PAUSE</tt></TD>
<td align="LEFT"><tt class=literal>VK_8</tt></TD>
<td align="LEFT"><tt class=literal>VK_I</tt></TD>
<td align="LEFT"><tt class=literal>VK_F9</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_CAPS_LOCK</tt></TD>
<td align="LEFT"><tt class=literal>VK_9</tt></TD>
<td align="LEFT"><tt class=literal>VK_J</tt></TD>
<td align="LEFT"><tt class=literal>VK_F10</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_ESCAPE</tt></TD>
<td align="LEFT"><tt class=literal>VK_NUMPAD0</tt></TD>
<td align="LEFT"><tt class=literal>VK_K</tt></TD>
<td align="LEFT"><tt class=literal>VK_F11</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_SPACE</tt></TD>
<td align="LEFT"><tt class=literal>VK_NUMPAD1</tt></TD>
<td align="LEFT"><tt class=literal>VK_L</tt></TD>
<td align="LEFT"><tt class=literal>VK_F12</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_PAGE_UP</tt></TD>
<td align="LEFT"><tt class=literal>VK_NUMPAD2</tt></TD>
<td align="LEFT"><tt class=literal>VK_M</tt></TD>
<td align="LEFT"><tt class=literal>VK_DELETE</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_PAGE_DOWN</tt></TD>
<td align="LEFT"><tt class=literal>VK_NUMPAD3</tt></TD>
<td align="LEFT"><tt class=literal>VK_N</tt></TD>
<td align="LEFT"><tt class=literal>VK_NUM_LOCK</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_END</tt></TD>
<td align="LEFT"><tt class=literal>VK_NUMPAD4</tt></TD>
<td align="LEFT"><tt class=literal>VK_O</tt></TD>
<td align="LEFT"><tt class=literal>VK_SCROLL_LOCK</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_HOME</tt></TD>
<td align="LEFT"><tt class=literal>VK_NUMPAD5</tt></TD>
<td align="LEFT"><tt class=literal>VK_P</tt></TD>
<td align="LEFT"><tt class=literal>VK_PRINTSCREEN</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_LEFT</tt></TD>
<td align="LEFT"><tt class=literal>VK_NUMPAD6</tt></TD>
<td align="LEFT"><tt class=literal>VK_Q</tt></TD>
<td align="LEFT"><tt class=literal>VK_INSERT</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_UP</tt></TD>
<td align="LEFT"><tt class=literal>VK_NUMPAD7</tt></TD>
<td align="LEFT"><tt class=literal>VK_R</tt></TD>
<td align="LEFT"><tt class=literal>VK_HELP</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_RIGHT</tt></TD>
<td align="LEFT"><tt class=literal>VK_NUMPAD8</tt></TD>
<td align="LEFT"><tt class=literal>VK_S</tt></TD>
<td align="LEFT"><tt class=literal>VK_META</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_DOWN</tt></TD>
<td align="LEFT"><tt class=literal>VK_NUMPAD9</tt></TD>
<td align="LEFT"><tt class=literal>VK_T</tt></TD>
<td align="LEFT"><tt class=literal>VK_BACK_QUOTE</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_COMMA</tt></TD>
<td align="LEFT"><tt class=literal>VK_MULTIPLY</tt></TD>
<td align="LEFT"><tt class=literal>VK_U</tt></TD>
<td align="LEFT"><tt class=literal>VK_QUOTE</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_PERIOD</tt></TD>
<td align="LEFT"><tt class=literal>VK_ADD</tt></TD>
<td align="LEFT"><tt class=literal>VK_V</tt></TD>
<td align="LEFT"><tt class=literal>VK_OPEN_BRACKET</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_SLASH</tt></TD>
<td align="LEFT"><tt class=literal>VK_SEPARATER</tt>[1]</TD>
<td align="LEFT"><tt class=literal>VK_W</tt></TD>
<td align="LEFT"><tt class=literal>VK_CLOSE_BRACKET</tt></TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_SEMICOLON</tt></TD>
<td align="LEFT"><tt class=literal>VK_SUBTRACT</tt></TD>
<td align="LEFT"><tt class=literal>VK_X</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_EQUALS</tt></TD>
<td align="LEFT"><tt class=literal>VK_DECIMAL</tt></TD>
<td align="LEFT"><tt class=literal>VK_Y</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>VK_BACK_SLASH</tt></TD>
<td align="LEFT"><tt class=literal>VK_DIVIDE</tt></TD>
<td align="LEFT"><tt class=literal>VK_Z</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="LEFT">&nbsp;</TD>
</TR>
<tr>
<td colspan=5>
<p>
<b>Footnotes:</b>
<p>
<blockquote>
<p class=para>
[1] 
Expect <tt class=literal>VK_SEPARATOR</tt> to be added at some future point. This constant represents the numeric separator key on your keyboard.
</blockquote></td></tr>
</TABLE>
<p>
</DIV>
<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public final static int VK_UNDEFINED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
When a <tt class=literal>KEY_TYPED</tt> event happens, 
there is no keycode. If you ask for it, the <tt class=literal>getKeyCode()</tt> 
method returns <tt class=literal>VK_UNDEFINED</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public final static char CHAR_UNDEFINED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
For <tt class=literal>KEY_PRESSED</tt> and <tt class=literal>KEY_RELEASED</tt> 
events that do not have a corresponding Unicode character to display (like 
Shift), the <tt class=literal>getKeyChar()</tt> method returns 
<tt class=literal>CHAR_UNDEFINED</tt>. </DL>
<p class=para>
Other constants identify what the user did with a key. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public final static int KEY_FIRST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public final static int KEY_LAST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>KEY_FIRST</tt> and <tt class=literal>KEY_LAST</tt> 
constants hold the endpoints of the range of identifiers for <tt class=literal>KeyEvent</tt> 
types. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int KEY_PRESSED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>KEY_PRESSED</tt> constant identifies 
key events that occur because a keyboard key has been pressed. To differentiate 
between action and non-action keys, call the <tt class=literal>isActionKey()</tt> 
method described later. The <tt class=literal>KeyListener.keyPressed()</tt> 
interface method handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int KEY_RELEASED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>KEY_RELEASED</tt> constant identifies 
key events that occur because a keyboard key has been released. The <tt class=literal>KeyListener.keyReleased()</tt> 
interface method handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int KEY_TYPED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>KEY_TYPED</tt> constant identifies 
a combination of a key press followed by a key release for a non-action 
oriented key. The <tt class=literal>KeyListener.keyTyped()</tt> 
interface method handles this event. </DL>
Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public KeyEvent(Component source, int id, long when, int modifiers, int keyCode, char keyChar) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor[2] creates a <tt class=literal>KeyEvent</tt> 
with the given <tt class=literal>source</tt>; the 
source is the object generating the event. The <tt class=literal>id</tt> 
field identifies the event type. If system-generated, the <tt class=literal>id</tt> 
will be one of the constants above. However, nothing stops you from 
creating your own <tt class=literal>id</tt> for your 
event types. The <tt class=literal>when</tt> parameter 
represents the time the event happened. The <tt class=literal>modifiers</tt> 
parameter holds the state of the various modifier keys; masks to represent 
these keys are defined in the <tt class=literal>InputEvent</tt> 
class. Finally, <tt class=literal>keyCode</tt> is 
the virtual key that triggered the event, and <tt class=literal>keyChar</tt> 
is the character that triggered it. 

<blockquote class=footnote>
<p class=para>[2] 
 Beta 
releases of Java 1.1 have an additional constructor that lacks the <tt class=literal>keyChar</tt> 
parameter. Comments in the code indicate that this constructor will be 
deleted prior to the 1.1.1 release.
</blockquote>
<p class=para>
The <tt class=literal>KeyEvent</tt> constructor throws 
the <tt class=literal>IllegalArgumentException</tt> 
run-time exception in two situations. First, if the <tt class=literal>id</tt> 
is <tt class=literal>KEY_TYPED</tt> and <tt class=literal>keyChar</tt> 
is <tt class=literal>CHAR_UNDEFINED</tt>, it throws 
an exception because if a key has been typed, it must be associated with 
a character. Second, if the <tt class=literal>id</tt> 
is <tt class=literal>KEY_TYPED</tt> and <tt class=literal>keyCode</tt> 
is not <tt class=literal>VK_UNDEFINED</tt>, it throws 
an exception because typed keys frequently represent combinations of key 
codes (for example, Shift struck with "a"). It is legal for 
a <tt class=literal>KEY_PRESSED</tt> or <tt class=literal>KEY_RELEASED</tt> 
event to contain both a <tt class=literal>keyCode</tt> 
and a <tt class=literal>keyChar</tt>, though it's 
not clear what such an event would represent. </DL>
Methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public char getKeyChar() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getKeyChar()</tt> method retrieves 
the Unicode character associated with the key in this <tt class=literal>KeyEvent</tt>. 
If there is no character, <tt class=literal>CHAR_UNDEFINED</tt> 
is returned. 

<p>
<dt class=varlistentry><i class=emphasis>public void setKeyChar(char KeyChar) <img src="gifs/bstar.gif" alt="(New)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>setKeyChar()</tt> method allows you to change the character for the <tt class=literal>KeyEvent</tt>. You could use this method to convert characters to uppercase.

<p>
<dt class=varlistentry><i class=emphasis>public int getKeyCode() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getKeyCode()</tt> method retrieves 
the virtual keycode (i.e., one of the constants in <a href="#JAWT-CH-4-TAB-4">Table 4.4</A>) 
of this <tt class=literal>KeyEvent</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void setKeyCode(int keyCode) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setKeyCode()</tt> method allows 
you to change the keycode for the <tt class=literal>KeyEvent</tt>. 
Changes you make to the <tt class=literal>KeyEvent</tt> are seen by subsequent listeners and the component's peer.

<p>
<dt class=varlistentry><i class=emphasis>public void setModifiers(int modifiers) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setModifiers()</tt> method allows 
you to change the modifier keys associated with a <tt class=literal>KeyEvent</tt> 
to <tt class=literal>modifiers</tt>. The parent class 
<tt class=literal>InputEvent</tt> already has a <tt class=literal>getModifiers()</tt> 
method that is inherited. Since this is your own personal copy of the <tt class=literal>KeyEvent</tt>, 
no other listener can find out about the change. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean isActionKey() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>isActionKey()</tt> method allows 
you to check whether the key associated with the <tt class=literal>KeyEvent</tt> 
is an action key (e.g., function, arrow, keypad) or not (e.g., an alphanumeric 
key). For action keys, this method returns <tt class=literal>true</tt>; 
otherwise, it returns <tt class=literal>false</tt>. 
For action keys, the <tt class=literal>keyChar</tt> 
field usually has the value <tt class=literal>CHAR_UNDEFINED</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public static String getKeyText (int keyCode) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The static <tt class=literal>getKeyText()</tt> method 
returns the localized textual string for <tt class=literal>keyCode</tt>. 
For each nonalphanumeric virtual key, there is a key name (the "key 
text"); these names can be changed using the AWT properties. <a href="#JAWT-CH-4-TAB-5">Table 4.5</A> shows the properties used to redefine the key 
names and the default name for each key. </DL>
<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="JAWT-CH-4-TAB-5">Table 4.5: Key Text Properties</A></CAPTION>
<tr class=row>
<th align="LEFT">Property</TH>
<th align="LEFT">Default</TH>
<th align="LEFT">Property</TH>
<th align="LEFT">Default</TH>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.accept</tt></TD>
<td align="LEFT">Accept</TD>
<td align="LEFT"><tt class=literal>AWT.f8</tt></TD>
<td align="LEFT">F8</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.add</tt></TD>
<td align="LEFT">NumPad +</TD>
<td align="LEFT"><tt class=literal>AWT.f9</tt></TD>
<td align="LEFT">F9</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.alt</tt></TD>
<td align="LEFT">Alt</TD>
<td align="LEFT"><tt class=literal>AWT.help</tt></TD>
<td align="LEFT">Help</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.backQuote</tt></TD>
<td align="LEFT">Back Quote</TD>
<td align="LEFT"><tt class=literal>AWT.home</tt></TD>
<td align="LEFT">Home</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.backSpace</tt></TD>
<td align="LEFT">Backspace</TD>
<td align="LEFT"><tt class=literal>AWT.insert</tt></TD>
<td align="LEFT">Insert</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.cancel</tt></TD>
<td align="LEFT">Cancel</TD>
<td align="LEFT"><tt class=literal>AWT.kana</tt></TD>
<td align="LEFT">Kana</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.capsLock</tt></TD>
<td align="LEFT">Caps Lock</TD>
<td align="LEFT"><tt class=literal>AWT.kanji</tt></TD>
<td align="LEFT">Kanji</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.clear</tt></TD>
<td align="LEFT">Clear</TD>
<td align="LEFT"><tt class=literal>AWT.left</tt></TD>
<td align="LEFT">Left</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.control</tt></TD>
<td align="LEFT">Control</TD>
<td align="LEFT"><tt class=literal>AWT.meta</tt></TD>
<td align="LEFT">Meta</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.decimal</tt></TD>
<td align="LEFT">NumPad .</TD>
<td align="LEFT"><tt class=literal>AWT.modechange</tt></TD>
<td align="LEFT">Mode Change</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.delete</tt></TD>
<td align="LEFT">Delete</TD>
<td align="LEFT"><tt class=literal>AWT.multiply</tt></TD>
<td align="LEFT">NumPad *</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.divide</tt></TD>
<td align="LEFT">NumPad /</TD>
<td align="LEFT"><tt class=literal>AWT.noconvert</tt></TD>
<td align="LEFT">No Convert</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.down</tt></TD>
<td align="LEFT">Down</TD>
<td align="LEFT"><tt class=literal>AWT.numLock</tt></TD>
<td align="LEFT">Num Lock</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.end</tt></TD>
<td align="LEFT">End</TD>
<td align="LEFT"><tt class=literal>AWT.numpad</tt></TD>
<td align="LEFT">NumPad</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.enter</tt></TD>
<td align="LEFT">Enter</TD>
<td align="LEFT"><tt class=literal>AWT.pause</tt></TD>
<td align="LEFT">Pause</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.escape</tt></TD>
<td align="LEFT">Escape</TD>
<td align="LEFT"><tt class=literal>AWT.pgdn</tt></TD>
<td align="LEFT">Page Down</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.final</tt></TD>
<td align="LEFT">Final</TD>
<td align="LEFT"><tt class=literal>AWT.pgup</tt></TD>
<td align="LEFT">Page Up</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.f1</tt></TD>
<td align="LEFT">F1</TD>
<td align="LEFT"><tt class=literal>AWT.printScreen</tt></TD>
<td align="LEFT">Print Screen</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.f10</tt></TD>
<td align="LEFT">F10</TD>
<td align="LEFT"><tt class=literal>AWT.quote</tt></TD>
<td align="LEFT">Quote</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.f11</tt></TD>
<td align="LEFT">F11</TD>
<td align="LEFT"><tt class=literal>AWT.right</tt></TD>
<td align="LEFT">Right</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.f12</tt></TD>
<td align="LEFT">F12</TD>
<td align="LEFT"><tt class=literal>AWT.scrollLock</tt></TD>
<td align="LEFT">Scroll Lock</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.f2</tt></TD>
<td align="LEFT">F2</TD>
<td align="LEFT"><tt class=literal>AWT.separator</tt></TD>
<td align="LEFT">NumPad ,</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.f3</tt></TD>
<td align="LEFT">F3</TD>
<td align="LEFT"><tt class=literal>AWT.shift</tt></TD>
<td align="LEFT">Shift</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.f4</tt></TD>
<td align="LEFT">F4</TD>
<td align="LEFT"><tt class=literal>AWT.space</tt></TD>
<td align="LEFT">Space</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.f5</tt></TD>
<td align="LEFT">F5</TD>
<td align="LEFT"><tt class=literal>AWT.subtract</tt></TD>
<td align="LEFT">NumPad -</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.f6</tt></TD>
<td align="LEFT">F6</TD>
<td align="LEFT"><tt class=literal>AWT.tab</tt></TD>
<td align="LEFT">Tab</TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.f7</tt></TD>
<td align="LEFT">F7</TD>
<td align="LEFT"><tt class=literal>AWT.unknown</tt></TD>
<td align="LEFT">Unknown <tt class=literal>keyCode</tt></TD>
</TR>
<tr class=row>
<td align="LEFT"><tt class=literal>AWT.up</tt></TD>
<td align="LEFT">Up</TD>
<td align="LEFT">&nbsp;</TD>
<td align="LEFT">&nbsp;</TD>
</TR>
</TABLE>
<p>
</DIV>
<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static String getKeyModifiersText (int modifiers) <img src="gifs/bstar.gif" alt="(New)" border=0></I><br>
<dd>

<p class=para>
The static <tt class=literal>getKeyModifiersText()</tt> 
method returns the localized textual string for <tt class=literal>modifiers</tt>. 
The parameter <tt class=literal>modifiers</tt> is 
a combination of the key masks defined by the <tt class=literal>InputEvent</tt> 
class. As with the keys themselves, each modifier is associated with a 
textual name. If multiple modifiers are set, they are concatenated with 
a plus sign (+) separating them. Similar to <tt class=literal>getKeyText()</tt>, 
the strings are localized because for each modifier, an awt property is 
available to redefine the string. <a href="#JAWT-CH-4-TAB-6">Table 4.6</A> lists 
the properties and the default modifier names. </DL>
<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="JAWT-CH-4-TAB-6">Table 4.6: Key Modifiers Text Properties</A></CAPTION>
<tr class=row>
<th align="left">Property</TH>
<th align="left">Default</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>AWT.alt</tt></TD>
<td align="left">Alt</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>AWT.control</tt></TD>
<td align="left">Ctrl</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>AWT.meta</tt></TD>
<td align="left">Meta</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>AWT.shift</tt></TD>
<td align="left">Shift</TD>
</TR>
</TABLE>
<p>
</DIV>
<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public String paramString() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
When you call the <tt class=literal>toString()</tt> 
method of an <tt class=literal>AWTEvent</tt>, the 
<tt class=literal>paramString()</tt> method is called 
in turn to build the string to display. At the <tt class=literal>KeyEvent</tt> 
level, <tt class=literal>paramString()</tt> adds a 
textual string for the <tt class=literal>id</tt> (if 
available), the text for the key (if available from <tt class=literal>getKeyText()</tt>), 
and modifiers (from <tt class=literal>getKeyModifiersText()</tt>). 
A key press event would result in something like the following: </DL>
<div class=screen>
<p>
<pre>
java.awt.event.KeyEvent[KEY_PRESSED,keyCode=118,
F7,modifiers=Ctrl+Shift] on textfield0
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.2.9">MouseEvent</A></h4>

<p class=para>
<a name="CH04.MOUSE2"></A>The <tt class=literal>MouseEvent</tt> class is a subclass 
of <tt class=literal>InputEvent</tt> for dealing with 
mouse events. Constants

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public final static int MOUSE_FIRST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public final static int MOUSE_LAST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>MOUSE_FIRST</tt> and <tt class=literal>MOUSE_LAST</tt> 
constants hold the endpoints of the range of identifiers for <tt class=literal>MouseEvent</tt> 
types. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int MOUSE_CLICKED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>MOUSE_CLICKED</tt> constant 
identifies mouse events that occur when a mouse button is clicked. A mouse 
click consists of a mouse press and a mouse release. The <tt class=literal>MouseListener.mouseClicked()</tt> 
interface method handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int MOUSE_DRAGGED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>MOUSE_DRAGGED</tt> constant 
identifies mouse events that occur because the mouse is moved over a component 
with a mouse button pressed. The interface method <tt class=literal>MouseMotionListener.mouseDragged()</tt> 
 handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int MOUSE_ENTERED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>MOUSE_ENTERED</tt> constant 
identifies mouse events that occur when the mouse first enters a component. 
The <tt class=literal>MouseListener.mouseEntered()</tt> 
interface method handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int MOUSE_EXITED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>MOUSE_EXISTED</tt> constant 
identifies mouse events that occur because the mouse leaves a component's 
space. The <tt class=literal>MouseListener.mouseExited()</tt> 
interface method handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int MOUSE_MOVED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>MOUSE_MOVED</tt> constant identifies 
mouse events that occur because the mouse is moved without a mouse button 
down. The interface method <tt class=literal>MouseMotionListener.mouseMoved()</tt> 
handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int MOUSE_PRESSED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>MOUSE_PRESSED</tt> constant 
identifies mouse events that occur because a mouse button has been pressed. 
The <tt class=literal>MouseListener.mousePressed()</tt> 
interface method handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int MOUSE_RELEASED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>MOUSE_RELEASED</tt> constant 
identifies mouse events that occur because a mouse button has been released. 
The <tt class=literal>MouseListener.mouseReleased()</tt> 
interface method handles this event. </DL>
Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public MouseEvent(Component source, int id, long when, int modifiers, int 
x, int y,</I>  <i class=emphasis>int clickCount, boolean popupTrigger) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>MouseEvent</tt> 
with the given <tt class=literal>source</tt>; the 
source is the object generating the event. The <tt class=literal>id</tt> 
field serves as the identifier of the event type. If system-generated, 
the <tt class=literal>id</tt> will be one of the constants described in the previous section. However, nothing stops you from creating your own <tt class=literal>id</tt> 
for your event types. The <tt class=literal>when</tt> 
parameter represents the time the event happened. The <tt class=literal>modifiers</tt> 
parameter holds the state of the various modifier keys, using the masks 
defined for the <tt class=literal>InputEvent</tt> 
class, and lets you determine which button was pressed. (<tt class=literal>x</tt>, 
<tt class=literal>y</tt>) represents the coordinates 
of the event relative to the origin of <tt class=literal>source</tt>, 
while <tt class=literal>clickCount</tt> designates 
the number of consecutive times the mouse button was pressed within an 
indeterminate time period. Finally, the <tt class=literal>popupTrigger</tt> 
parameter signifies whether this mouse event should trigger the display 
of a <tt class=literal>PopupMenu</tt>, if one is available. 
(The <tt class=literal>PopupMenu</tt> class is discussed 
in <a href="ch10_01.htm">Chapter 10, <i>Would You Like to Choose from the Menu?</i></A>) </DL>
Methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int getX() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getX()</tt> method returns the 
current x coordinate of the event relative to the source. 

<p>
<dt class=varlistentry><i class=emphasis>public int getY() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getY()</tt> method returns the 
current y coordinate of the event relative to the source. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized Point getPoint() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getPoint()</tt> method returns 
the current x and y coordinates of the event relative to the event source. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void translatePoint(int x, int y) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>translatePoint()</tt> method 
translates the x and y coordinates of the <tt class=literal>MouseEvent</tt> 
instance by <tt class=literal>x</tt> and <tt class=literal>y</tt>. 
This method functions similarly to the <tt class=literal>Event.translate()</tt> 
method. 

<p>
<dt class=varlistentry><i class=emphasis>public int getClickCount() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getClickCount()</tt> method 
retrieves the current <tt class=literal>clickCount</tt> 
setting for the event. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean isPopupTrigger() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>isPopupTrigger()</tt> method 
retrieves the state of the <tt class=literal>popupTrigger</tt> 
setting for the event. If this method returns <tt class=literal>true</tt> 
and the source of the event has an associated <tt class=literal>PopupMenu</tt>, 
the event should be used to display the menu, as shown in the following code. 
Since the action the user performs to raise a pop-up menu is platform specific, 
this method lets you raise a pop-up menu without worrying about what kind 
of event took place. You only need to call <tt class=literal>isPopupTrigger()</tt> 
and show the menu if it returns <tt class=literal>true</tt>. </DL>
<div class=screen>
<p>
<pre>
public void processMouseEvent(MouseEvent e) {
    if (e.isPopupTrigger())
        aPopup.show(e.getComponent(), e.getX(), e.getY());
    super.processMouseEvent(e);
}
</PRE>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public String paramString() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
When you call the <tt class=literal>toString()</tt> 
method of an <tt class=literal>AWTEvent</tt>, the 
<tt class=literal>paramString()</tt> method is called 
in turn to build the string to display. At the <tt class=literal>MouseEvent</tt> 
level, a textual string for the <tt class=literal>id</tt> 
(if available) is tacked on to the coordinates, modifiers, and click count. 
A mouse down event would result in something like the following: </DL>
<div class=screen>
<p>
<pre>
java.awt.event.MouseEvent[MOUSE_PRESSED,(5,7),mods=0,clickCount=2] on textfield0
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.2.10">ActionEvent</A></h4>

<p class=para>
The <tt class=literal>ActionEvent</tt> class is the 
first higher-level event class. It encapsulates events that signify that 
the user is doing something with a component. When the user selects a button, 
list item, or menu item, or presses the Return key in a text field, an 
<tt class=literal>ActionEvent</tt> passes through 
the event queue looking for listeners. Constants

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public final static int ACTION_FIRST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public final static int ACTION_LAST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>ACTION_FIRST</tt> and <tt class=literal>ACTION_LAST</tt> 
constants hold the endpoints of the range of identifiers for <tt class=literal>ActionEvent</tt> 
types. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int ACTION_PERFORMED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>ACTION_PERFORMED</tt> constant 
represents when a user activates a component. The <tt class=literal>ActionListener.actionPerformed()</tt> 
interface method handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int ALT_MASK <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public static final int CTRL_MASK <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public static final int META_MASK <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public static final int SHIFT_MASK <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
Similar to the mouse events, action events have <tt class=literal>modifiers</tt>. 
However, they are not automatically set by the system, so they don't 
help you see what modifiers were pressed when the event occurred. You may be able to use these constants if you are generating your own action 
events. To see the value of an action event's modifiers, call <tt class=literal>getModifiers()</tt>. </DL>
Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public ActionEvent(Object source, int id, String command) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor creates an <tt class=literal>ActionEvent</tt> 
with the given <tt class=literal>source</tt>; the 
source is the object generating the event. The <tt class=literal>id</tt> 
field serves as the identifier of the event type. If system-generated, 
the <tt class=literal>id</tt> will be <tt class=literal>ACTION_PERFORMED</tt>. 
However, nothing stops you from creating your own <tt class=literal>id</tt> 
for your event types. The <tt class=literal>command</tt> 
parameter is the event's action command. Ideally, the action command 
should be some locale-independent string identifying the user's action. 
Most components that generate action events set this field to the selected 
item's label by default. 

<p>
<dt class=varlistentry><i class=emphasis>public ActionEvent(Object source, int id, String command, int modifiers) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor adds <tt class=literal>modifiers</tt> 
to the settings for an <tt class=literal>ActionEvent</tt>. 
This allows you to define action-oriented events that occur only if certain 
modifier keys are pressed. </DL>
Methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public String getActionCommand() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getActionCommand()</tt> method 
retrieves the <tt class=literal>command</tt> field 
from the event. It represents the command associated with the object that 
triggered the event. The idea behind the action command is to differentiate 
the command associated with some event from the displayed content of the 
event source. For example, the action command for a button may be Help. 
However, what the user sees on the label of the button could be a string 
localized for the environment of the user. Instead of having your event 
handler look for 20 or 30 possible labels, you can test whether 
an event has the action command Help. 

<p>
<dt class=varlistentry><i class=emphasis>public int getModifiers() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getModifiers()</tt> method returns 
the state of the modifier keys. For each one set, a different flag is raised 
in the method's return value. To check if a modifier is set, AND 
the return value with a flag, and check for a nonzero value. 

<p>
<dt class=varlistentry><i class=emphasis>public String paramString() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
When you call the <tt class=literal>toString()</tt> 
method of an <tt class=literal>AWTEvent</tt>, the 
<tt class=literal>paramString()</tt> method is called 
in turn to build the string to display. At the <tt class=literal>ActionEvent</tt> 
level, <tt class=literal>paramString()</tt> adds a 
textual string for the event <tt class=literal>id</tt> 
(if available), along with the <tt class=literal>command</tt> 
from the constructor. When the user selects a <tt class=literal>Button</tt> 
with the action command Help, printing the resulting event 
yields: </DL>
<div class=screen>
<p>
<pre>
java.awt.event.ActionEvent[ACTION_PERFORMED,cmd=Help] on button0
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.2.11">AdjustmentEvent</A></h4>

<p class=para>
The <tt class=literal>AdjustmentEvent</tt> class is 
another higher-level event class. It encapsulates events that represent 
scrollbar motions. When the user moves the slider of a scrollbar or scroll 
pane, an <tt class=literal>AdjustmentEvent</tt> passes 
through the event queue looking for listeners. Although there is only one 
type of adjustment event, there are five subtypes represented by constants 
<tt class=literal>UNIT_DECREMENT</tt>, <tt class=literal>UNIT_INCREMENT</tt>, 
and so on. Constants

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public final static int ADJUSTMENT_FIRST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public final static int ADJUSTMENT_LAST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>ADJUSTMENT_FIRST</tt> and <tt class=literal>ADJUSTMENT_LAST</tt> 
constants hold the endpoints of the range of identifiers for <tt class=literal>AdjustmentEvent</tt> 
types. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int ADJUSTMENT_VALUE_CHANGED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>ADJUSTMENT_VALUE_CHANGED</tt> 
constant identifies adjustment events that occur because a user moves the 
slider of a <tt class=literal>Scrollbar</tt> or <tt class=literal>ScrollPane</tt>. 
The <tt class=literal>AdjustmentListener.adjustmentValueChanged()</tt> 
interface method handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int UNIT_DECREMENT <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
<tt class=literal>UNIT_DECREMENT</tt> identifies adjustment 
events that occur because the user selects the increment arrow. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int UNIT_INCREMENT <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
<tt class=literal>UNIT_INCREMENT</tt> identifies adjustment 
events that occur because the user selects the decrement arrow. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int BLOCK_DECREMENT <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
<tt class=literal>BLOCK_DECREMENT</tt> identifies 
adjustment events that occur because the user selects the block decrement 
area, between the decrement arrow and the slider. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int BLOCK_INCREMENT <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
<tt class=literal>BLOCK_INCREMENT</tt> identifies 
adjustment events that occur because the user selects the block increment 
area, between the increment arrow and the slider. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int TRACK <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
<tt class=literal>TRACK</tt> identifies adjustment 
events that occur because the user selects the slider and drags it. Multiple adjustment events of this subtype usually occur consecutively. </DL>
Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public AdjustmentEvent(Adjustable source, int id, int type, int value) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor creates an <tt class=literal>AdjustmentEvent</tt> 
with the given <tt class=literal>source</tt>; the 
source is the object generating the event. The <tt class=literal>id</tt> 
field serves as the identifier of the event type. If system-generated, 
the <tt class=literal>id</tt> of the <tt class=literal>AdjustmentEvent</tt> will be <tt class=literal>ADJUSTMENT_VALUE_CHANGED</tt>. 
However, nothing stops you from creating your own <tt class=literal>id</tt> 
for your event types. The <tt class=literal>type</tt> 
parameter is normally one of the five subtypes, with <tt class=literal>value</tt> being the 
current setting of the slider, but is not restricted 
to that. </DL>
Methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Adjustable getAdjustable() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getAdjustable()</tt> method 
retrieves the <tt class=literal>Adjustable</tt> object 
associated with this event--that is, the event's <tt class=literal>source</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public int getAdjustmentType() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getAdjustmentType()</tt> method 
retrieves the <tt class=literal>type</tt> parameter 
from the constructor. It represents the subtype of the current event and, 
if system-generated, is one of the following constants: <tt class=literal>UNIT_DECREMENT</tt>, 
<tt class=literal>UNIT_INCREMENT</tt>, <tt class=literal>BLOCK_DECREMENT</tt>, 
<tt class=literal>BLOCK_INCREMENT</tt>, or <tt class=literal>TRACK</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public int getValue() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getValue()</tt> method retrieves 
the <tt class=literal>value</tt> parameter from the 
constructor. It represents the current setting of the adjustable object. 

<p>
<dt class=varlistentry><i class=emphasis>public String paramString() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
When you call the <tt class=literal>toString()</tt> 
method of an <tt class=literal>AWTEvent</tt>, the 
<tt class=literal>paramString()</tt> method is called 
to help build the string to display. At the <tt class=literal>AdjustableEvent</tt> 
level, <tt class=literal>paramString()</tt> adds a 
textual string for the event <tt class=literal>id</tt> 
(if available), along with a textual string of the <tt class=literal>type</tt> 
(if available), and <tt class=literal>value</tt>. 
For example: </DL>
<div class=screen>
<p>
<pre>
java.awt.event.AdjustableEvent[ADJUSTMENT_VALUE_CHANGED,
adjType=TRACK,value=27] on scrollbar0
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.2.12">ItemEvent</A></h4>

<p class=para>
The <tt class=literal>ItemEvent</tt> class is another 
higher-level event class. It encapsulates events that occur when the user 
selects a component, like <tt class=literal>ActionEvent</tt>. 
When the user selects a checkbox, choice, list item, or checkbox menu item, 
an <tt class=literal>ItemEvent</tt> passes through 
the event queue looking for listeners. Although there is only one type 
of <tt class=literal>ItemEvent</tt>, there are two 
subtypes represented by the constants <tt class=literal>SELECTED</tt> 
and <tt class=literal>DESELECTED</tt>. Constants

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public final static int ITEM_FIRST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public final static int ITEM_LAST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>ITEM_FIRST</tt> and <tt class=literal>ITEM_LAST</tt> 
constants hold the endpoints of the range of identifiers for <tt class=literal>ItemEvent</tt> 
types. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int ITEM_STATE_CHANGED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>ITEM_STATE_CHANGED</tt> constant 
identifies item events that occur because a user selects a component, thus 
changing its state. The interface method <tt class=literal>ItemListener.itemStateChanged()</tt> 
handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int SELECTED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
<tt class=literal>SELECTED</tt> indicates that the 
user selected the item. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int DESELECTED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
<tt class=literal>DESELECTED</tt> indicates that the 
user deselected the item. </DL>
Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public ItemEvent(ItemSelectable source, int id, Object item, int stateChange) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>ItemEvent</tt> 
with the given <tt class=literal>source</tt>; the 
source is the object generating the event. The <tt class=literal>id</tt> 
field serves as the identifier of the event type. If system-generated, 
the <tt class=literal>id</tt> will be <tt class=literal>ITEM_STATE_CHANGE</tt>. 
However, nothing stops you from creating your own <tt class=literal>id</tt> 
for your event types. The <tt class=literal>item</tt> 
parameter represents the text of the item selected: for a <tt class=literal>Checkbox</tt>, 
this would be its label, for a <tt class=literal>Choice</tt> 
the current selection. For your own events, this parameter could be virtually 
anything, since its type is <tt class=literal>Object</tt>. </DL>
Methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public ItemSelectable getItemSelectable() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getItemSelectable()</tt> method 
retrieves the <tt class=literal>ItemSelectable</tt> 
object associated with this event--that is, the event's source. 

<p>
<dt class=varlistentry><i class=emphasis>public Object getItem() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getItem()</tt> method returns 
the <tt class=literal>item</tt> that was selected. 
This usually represents some text to help identify the source but could 
be nearly anything for user-generated events. 

<p>
<dt class=varlistentry><i class=emphasis>public int getStateChange() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getStateChange()</tt> method 
returns the <tt class=literal>stateChange</tt> parameter 
from the constructor and, if system generated, is either <tt class=literal>SELECTED</tt> 
or <tt class=literal>DESELECTED</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public String paramString() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
When you call the <tt class=literal>toString()</tt> 
method of an <tt class=literal>AWTEvent</tt>, the 
<tt class=literal>paramString()</tt> method is called 
in turn to build the string to display. At the <tt class=literal>ItemEvent</tt> 
level, <tt class=literal>paramString()</tt> adds a 
textual string for the event <tt class=literal>id</tt> 
(if available), along with a textual string indicating the value of <tt class=literal>stateChange</tt> 
(if available) and <tt class=literal>item</tt>. For 
example: </DL>
<div class=screen>
<p>
<pre>
java.awt.event.ItemEvent[ITEM_STATE_CHANGED,item=Help,
stateChange=SELECTED] on checkbox1
</PRE>
</DIV>

</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.2.13">TextEvent</A></h4>

<p class=para>
The <tt class=literal>TextEvent</tt> class is yet 
another higher-level event class. It encapsulates events that occur when 
the contents of a <tt class=literal>TextComponent</tt> 
have changed, although is not required to have a <tt class=literal>TextComponent</tt> 
source. When the contents change, either programmatically by a call to 
<tt class=literal>setText()</tt> or because the user 
typed something, a <tt class=literal>TextEvent</tt> 
passes through the event queue looking for listeners. Constants

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public final static int TEXT_FIRST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public final static int TEXT_LAST <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>TEXT_FIRST</tt> and <tt class=literal>TEXT_LAST</tt> 
constants hold the endpoints of the range of identifiers for <tt class=literal>TextEvent</tt> 
types. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int TEXT_VALUE_CHANGED <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>TEXT_VALUE_CHANGED</tt> constant 
identifies text events that occur because a user changes the contents of 
a text component. The interface method <tt class=literal>TextListener.textValueChanged()</tt> 
handles this event. </DL>
Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public TextEvent(Object source, int id) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>TextEvent</tt> 
with the given <tt class=literal>source</tt>; the 
source is the object generating the event. The <tt class=literal>id</tt> 
field identifies the event type. If system-generated, the <tt class=literal>id</tt> 
will be <tt class=literal>TEXT_VALUE_CHANGE</tt>. 
However, nothing stops you from creating your own <tt class=literal>id</tt> 
for your event types. </DL>
Method

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public String paramString() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
When you call the <tt class=literal>toString()</tt> 
method of an <tt class=literal>AWTEvent</tt>, the 
<tt class=literal>paramString()</tt> method is called 
in turn to build the string to display. At the <tt class=literal>TextEvent</tt> 
level, <tt class=literal>paramString()</tt> adds a 
textual string for the event <tt class=literal>id</tt> 
(if available). </DL>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-4-SECT-3.3">Event Listener Interfaces and Adapters</A></h3>

<p class=para>
<a name="CH04.LISTEN2"></A>Java 1.1 has 11 event listener interfaces, which specify the methods 
a class must implement to receive different kinds of events. For example, 
the <tt class=literal>ActionListener</tt> interface 
defines the single method that is called when an <tt class=literal>ActionEvent</tt> 
occurs. These interfaces replace the various event-handling methods of 
Java 1.0: <tt class=literal>action()</tt> is now the 
<tt class=literal>actionPerformed()</tt> method of 
the <tt class=literal>ActionListener</tt> interface, 
<tt class=literal>mouseUp()</tt> is now the <tt class=literal>mouseReleased()</tt> 
method of the <tt class=literal>MouseListener</tt> 
interface, and so on. Most of the listener interfaces have a corresponding 
adapter class, which is an abstract class that provides a null implementation 
of all the methods in the interface. (Although an adapter class has no abstract methods, 
it is declared <tt class=literal>abstract</tt> to remind you that it must be subclassed.) 
Rather than implementing a listener 
interface directly, you have the option of extending an adapter class 
and overriding only the methods you care about. (Much more complex adapters 
are possible, but the adapters supplied with AWT are very simple.) The 
adapters are available for the listener interfaces with multiple methods. 
(If there is only one method in the listener interface, there is no need 
for an adapter.) 

<p class=para>
This section describes Java 1.1's listener interfaces and adapter 
classes. It's worth noting here that Java 1.1 does not allow you 
to modify the original event when you're writing an event handler. 

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.3.1">ActionListener</A></h4>

<p class=para>
The <tt class=literal>ActionListener</tt> interface 
contains the one method that is called when an <tt class=literal>ActionEvent</tt> 
occurs. It has no adapter class. For an object to listen for action events, 
it is necessary to call the <tt class=literal>addActionListener()</tt> 
method with the class that implements the <tt class=literal>ActionListener</tt> 
interface as the parameter. The method <tt class=literal>addActionListener()</tt> 
is implemented by <tt class=literal>Button</tt>, 
<tt class=literal>List</tt>, <tt class=literal>MenuItem</tt>, 
and <tt class=literal>TextField</tt> components. Other 
components don't generate action events. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public abstract void actionPerformed(ActionEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>actionPerformed()</tt> method 
is called when a component is selected or activated. Every component is 
activated differently; for a <tt class=literal>List</tt>, 
activation means that the user has double-clicked on an entry. See the 
appropriate section for a description of each component. 

<p class=para>
<tt class=literal>actionPerformed()</tt> is the Java 
1.1 equivalent of the <tt class=literal>action()</tt> 
method in the 1.0 event model. </DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.3.2">AdjustmentListener</A></h4>

<p class=para>
The <tt class=literal>AdjustmentListener</tt> interface 
contains the one method that is called when an <tt class=literal>AdjustmentEvent</tt> 
occurs. It has no adapter class. For an object to listen for adjustment 
events, it is necessary to call <tt class=literal>addAdjustmentListener()</tt> 
with the class that implements the <tt class=literal>AdjustmentListener</tt> 
interface as the parameter. The <tt class=literal>addAdjustmentListener()</tt> 
method is implemented by the <tt class=literal>Scrollbar</tt> 
component and the <tt class=literal>Adjustable</tt> 
interface. Other components don't generate adjustment events. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public abstract void adjustmentValueChanged(AdjustmentEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>adjustmentValueChanged()</tt> 
method is called when a slider is moved. The <tt class=literal>Scrollbar</tt> 
and <tt class=literal>ScrollPane</tt> components have 
sliders, and generate adjustment events when the sliders are moved. (The 
<tt class=literal>TextArea</tt> and <tt class=literal>List</tt> 
components also have sliders, but do not generate adjustment events.) See 
the appropriate section for a description of each component.

<p class=para>
There is no real equivalent to <tt class=literal>adjustmentValueChanged()</tt> 
in Java 1.0; to work with scrolling events, you had to override the <tt class=literal>handleEvent()</tt> 
method. </DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.3.3">ComponentListener and ComponentAdapter</A></h4>

<p class=para>
The <tt class=literal>ComponentListener</tt> interface 
contains four methods that are called when a <tt class=literal>ComponentEvent</tt> 
occurs; component events are used for general actions on components, like 
moving or resizing a component. The adapter class corresponding to <tt class=literal>ComponentListener</tt> 
is <tt class=literal>ComponentAdapter</tt>. If you 
care only about one or two of the methods in <tt class=literal>ComponentListener</tt>, 
you can subclass the adapter and override only the methods that you are 
interested in. For an object to listen for component events, it is necessary 
to call <tt class=literal>Component.addComponentListener()</tt> 
with the class that implements the interface as the parameter. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public abstract void componentResized(ComponentEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>componentResized()</tt> method 
is called when a component is resized (for example, by a call to <tt class=literal>Component.setSize()</tt>). 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void componentMoved(ComponentEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>componentMoved()</tt> method 
is called when a component is moved (for example, by a call to <tt class=literal>Component.setLocation()</tt>). 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void componentShown(ComponentEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>componentShown()</tt> method 
is called when a component is shown (for example, by a call to <tt class=literal>Component.show()</tt>). 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void componentHidden(ComponentEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>componentHidden()</tt> method 
is called when a component is hidden (for example, by a call to <tt class=literal>Component.hide()</tt>). </DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.3.4">ContainerListener and ContainerAdapter</A></h4>

<p class=para>
The <tt class=literal>ContainerListener</tt> interface 
contains two methods that are called when a <tt class=literal>ContainerEvent</tt> 
occurs; container events are generated when components are added to or 
removed from a container. The adapter class for <tt class=literal>ContainerListener</tt> 
is <tt class=literal>ContainerAdapter</tt>. If you 
care only about one of the two methods in <tt class=literal>ContainerListener</tt>, 
you can subclass the adapter and override only the method that you are 
interested in. For a container to listen for container events, it is necessary 
to call <tt class=literal>Container.addContainerListener()</tt> 
with the class that implements the interface as the parameter. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public abstract void componentAdded(ContainerEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>componentAdded()</tt> method 
is called when a component is added to a container (for example, by a call 
to <tt class=literal>Container.add()</tt>). 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void componentRemoved(ContainerEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>componentRemoved()</tt> method 
is called when a component is removed from a container (for example, by 
a call to <tt class=literal>Container.remove()</tt>). </DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.3.5">FocusListener and FocusAdapter</A></h4>

<p class=para>
The <tt class=literal>FocusListener</tt> interface 
has two methods, which are called when a <tt class=literal>FocusEvent</tt> 
occurs. Its adapter class is <tt class=literal>FocusAdapter</tt>. 
If you care only about one of the methods, you can subclass the adapter 
and override the method you are interested in. For an object to listen 
for a <tt class=literal>FocusEvent</tt>, it is necessary 
to call the <tt class=literal>Component.addFocusListener()</tt> 
method with the class that implements the <tt class=literal>FocusListener</tt> 
interface as the parameter. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public abstract void focusGained(FocusEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>focusGained()</tt> method is 
called when a component receives input focus, usually by the user clicking 
the mouse in the area of the component. 

<p class=para>
This method is the Java 1.1 equivalent of <tt class=literal>Component.gotFocus()</tt> in the Java 1.0 event model. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void focusLost(FocusEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>focusLost()</tt> method is called 
when a component loses the input focus. 

<p class=para>
This method is the Java 1.1 equivalent of <tt class=literal>Component.lostFocus()</tt> in the Java 1.0 event model. </DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.3.6">ItemListener</A></h4>

<p class=para>
The <tt class=literal>ItemListener</tt> interface 
contains the one method that is called when an <tt class=literal>ItemEvent</tt> 
occurs. It has no adapter class. For an object to listen for an <tt class=literal>ItemEvent</tt>, 
it is necessary to call <tt class=literal>addItemListener()</tt> 
with the class that implements the <tt class=literal>ItemListener</tt> 
interface as the parameter. The <tt class=literal>addItemListener()</tt> 
method is implemented by the <tt class=literal>Checkbox</tt>, 
<tt class=literal>CheckboxMenuItem</tt>, <tt class=literal>Choice</tt>, 
and <tt class=literal>List</tt> components. Other 
components don't generate item events. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public abstract void itemStateChanged(ItemEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>itemStateChanged()</tt> method 
is called when a component's state is modified. Every component is 
modified differently; for a <tt class=literal>List</tt>, 
modifying the component means single-clicking on an entry. See the appropriate 
section for a description of each component. </DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.3.7">KeyListener and KeyAdapter</A></h4>

<p class=para>
The <tt class=literal>KeyListener</tt> interface contains 
three methods that are called when a <tt class=literal>KeyEvent</tt> 
occurs; key events are generated when the user presses or releases keys. 
The adapter class for <tt class=literal>KeyListener</tt> 
is <tt class=literal>KeyAdapter</tt>. If you only 
care about one or two of the methods in <tt class=literal>KeyListener</tt>, 
you can subclass the adapter and only override the methods that you are 
interested in. For an object to listen for key events, it is necessary 
to call <tt class=literal>Component.addKeyListener()</tt> 
with the class that implements the interface as the parameter. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public abstract void keyPressed(KeyEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>keyPressed()</tt> method is 
called when a user presses a key. A key press is, literally, just 
what it says. A key press event is called for every key that is pressed, 
including keys like Shift and Control. Therefore, a <tt class=literal>KEY_PRESSED</tt> event has 
a virtual key code identifying the physical key that was pressed; but that's 
not the same as a typed character, which usually consists of several key 
presses (for example, Shift+A to type an uppercase A). The 
<tt class=literal>keyTyped()</tt> method reports actual 
characters. 

<p class=para>
This method is the Java 1.1 equivalent of <tt class=literal>Component.keyDown()</tt> 
 in the Java 1.0 event model. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void keyReleased(KeyEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>keyReleased()</tt> method is 
called when a user releases a key. Like the <tt class=literal>keyPressed()</tt> method, 
when dealing with <tt class=literal>keyReleased()</tt>, 
you must think of virtual key codes, not characters. 

<p class=para>
This method is the Java 1.1 equivalent of <tt class=literal>Component.keyUp()</tt> 
 in the Java 1.0 event model. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void keyTyped(KeyEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>keyTyped()</tt> method is called 
when a user types a key. The method <tt class=literal>keyTyped()</tt> 
method reports the actual character typed. Action-oriented keys, like function 
keys, do not trigger this method being called. </DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.3.8">MouseListener and MouseAdapter</A></h4>

<p class=para>
The <tt class=literal>MouseListener</tt> interface 
contains five methods
that are called when a nonmotion oriented <tt class=literal>MouseEvent</tt> 
occurs; mouse events are generated when the user presses or releases a 
mouse button. (Separate classes, <tt class=literal>MouseMotionListener</tt> 
and <tt class=literal>MouseMotionAdapter</tt>, are 
used to handle mouse motion events; this means that you can listen for 
mouse clicks only, without being bothered by thousands of mouse motion 
events.) The adapter class for <tt class=literal>MouseListener</tt> 
is <tt class=literal>MouseAdapter</tt>. If you care about only one or two of the methods in <tt class=literal>MouseListener</tt>, 
you can subclass the adapter and override only the methods that you are 
interested in. For an object to listen for mouse events, it is necessary 
to call the method <tt class=literal>Window.addWindowListener()</tt> 
with the class that implements the interface as the parameter. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public abstract void mouseEntered(MouseEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>mouseEntered()</tt> method is 
called when the mouse first enters the bounding area of the component. 

<p class=para>
This method is the Java 1.1 equivalent of <tt class=literal>Component.mouseEnter()</tt> 
 in the Java 1.0 event model. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void mouseExited(MouseEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>mouseExited()</tt> method is 
called when the mouse leaves the bounding area of the component. 

<p class=para>
This method is the Java 1.1 equivalent of <tt class=literal>Component.mouseExit()</tt> 
 in the Java 1.0 event model. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void mousePressed(MouseEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>mousePressed()</tt> method is 
called each time the user presses a mouse button within the component's 
space. 

<p class=para>
This method is the Java 1.1 equivalent of <tt class=literal>Component.mouseDown()</tt> in the Java 1.0 event model. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void mouseReleased(MouseEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>mouseReleased()</tt> method 
is called when the user releases the mouse button after a mouse press. 
The user does not have to be over the original component any more; the 
original component (i.e., the component in which the mouse was pressed) 
is the source of the event. 

<p class=para>
This method is the Java 1.1 equivalent of <tt class=literal>Component.mouseUp()</tt> 
 in the Java 1.0 event model. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void mouseClicked(MouseEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>mouseClicked()</tt> method is 
called once each time the user clicks a mouse button; that is, once for 
each mouse press/mouse release combination. </DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.3.9">MouseMotionListener and MouseMotionAdapter</A></h4>

<p class=para>
The <tt class=literal>MouseMotionListener</tt> interface 
contains two methods that are called when a motion-oriented <tt class=literal>MouseEvent</tt> 
occurs; mouse motion events are generated when the user moves the mouse, 
whether or not a button is pressed. (Separate classes, <tt class=literal>MouseListener</tt> 
and <tt class=literal>MouseAdapter</tt>, are used 
to handle mouse clicks and entering/exiting components. This makes 
it easy to ignore mouse motion events, which are very frequent and can 
hurt performance. You should listen only for mouse motion events if you 
specifically need them.) <tt class=literal>MouseMotionAdapter</tt> is the adapter class for <tt class=literal>MouseMotionListener</tt>. If you 
care about only one of the methods in <tt class=literal>MouseMotionListener</tt>, 
you can subclass the adapter and override only the method that you are 
interested in. For an object to listen for mouse motion events, it is necessary 
to call <tt class=literal>Component.addMouseMotionListener()</tt> 
with the class that implements the interface as the parameter. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public abstract void mouseMoved(MouseEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>mouseMoved()</tt> method is 
called every time the mouse moves within the bounding area of the component, 
and no mouse button is pressed. 

<p class=para>
This method is the Java 1.1 equivalent of <tt class=literal>Component.mouseMove()</tt> in the Java 1.0 event model. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void mouseDragged(MouseEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>mouseDragged()</tt> method is 
called every time the mouse moves while a mouse button is pressed. The 
source of the <tt class=literal>MouseEvent</tt> is 
the component that was under the mouse when it was first pressed. 

<p class=para>
This method is the Java 1.1 equivalent of <tt class=literal>Component.mouseDrag()</tt> 
 in the Java 1.0 event model. </DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.3.10">TextListener</A></h4>

<p class=para>
The <tt class=literal>TextListener</tt> interface 
contains the one method that is called when a <tt class=literal>TextEvent</tt> 
occurs. It has no adapter class. For an object to listen for a <tt class=literal>TextEvent</tt>, 
it is necessary to call <tt class=literal>addTextListener()</tt> 
with the class that implements the <tt class=literal>TextListener</tt> 
interface as the parameter. The <tt class=literal>addTextListener()</tt> 
method is implemented by the <tt class=literal>TextComponent</tt> 
class, and thus the <tt class=literal>TextField</tt> 
and <tt class=literal>TextArea</tt> components. Other 
components don't generate text events. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public abstract void textValueChanged(TextEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>textValueChanged()</tt> method 
is called when a text component's contents are modified, either by 
the user (by a keystroke) or programmatically (by the <tt class=literal>setText()</tt> 
method). </DL>
</DIV>

<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.3.11">WindowListener and WindowAdapter</A></h4>

<p class=para>
The <tt class=literal>WindowListener</tt> interface 
contains seven methods that are called when a <tt class=literal>WindowEvent</tt> 
occurs; window events are generated when something changes the visibility 
or status of a window. The adapter class for <tt class=literal>WindowListener</tt> 
is <tt class=literal>WindowAdapter</tt>. If you 
care about only one or two of the methods in <tt class=literal>WindowListener</tt>, 
you can subclass the adapter and override only the methods that you are 
interested in. For an object to listen for window events, it is necessary 
to call the method <tt class=literal>Window.addWindowListener()</tt> 
or <tt class=literal>Dialog.addWindowListener()</tt> 
with the class that implements the interface as the parameter. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public abstract void windowOpened(WindowEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>windowOpened()</tt> method is 
called when a <tt class=literal>Window</tt> 
is first opened. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void windowClosing(WindowEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>windowClosing()</tt> method 
is triggered whenever the user tries to close the <tt class=literal>Window</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void windowClosed(WindowEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>windowClosed()</tt> method is 
called after the <tt class=literal>Window</tt> 
has been closed. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void windowIconified(WindowEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>windowIconified()</tt> method 
is called whenever a user iconifies a <tt class=literal>Window</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void windowDeiconified(WindowEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>windowDeiconified()</tt> method 
is called when the user deiconifies the <tt class=literal>Window</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void windowActivated(WindowEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>windowActivated()</tt> method 
is called whenever a <tt class=literal>Window</tt> 
is brought to the 
front. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void windowDeactivated(WindowEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>windowDeactivated()</tt> method 
is called when the <tt class=literal>Window</tt> 
is sent away from the 
front, either through iconification, closing, or another window becoming 
active. </DL>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-4-SECT-3.4">AWTEventMulticaster</A></h3>

<p class=para>
<a name="CH04.AWT4"></A><a name="CH04.AWT5"></A><a name="CH04.AWT6"></A>The <tt class=literal>AWTEventMulticaster</tt> class 
is used by AWT to manage the listener queues for the different events, 
and for sending events to all interested listeners when they occur (multicasting). 
Ordinarily, you have no need to work with this class or know about its existence. 
However, if you wish to create your own components that have their own 
set of listeners, you can use the class instead of implementing your own 
event-delivery system. See "Constructor methods" in this section for more on how to use the <tt class=literal>AWTEventMulticaster</tt>. 

<p class=para>
<tt class=literal>AWTEventMulticaster</tt> looks like 
a strange beast, and to some extent, it is. It contains methods to add 
and remove every possible kind of listener and implements all of the listener 
interfaces (11 as of Java 1.1). Because it implements all the listener 
interfaces, you can pass an event multicaster as an argument wherever you 
expect any kind of listener. However, unlike a class you might implement 
to listen for a specific kind of event, the multicaster includes machinery 
for maintaining chains of listeners. This explains the rather odd signatures 
for the <tt class=literal>add()</tt> and <tt class=literal>remove()</tt> 
methods. Let's look at one in particular: 

<div class=screen>
<p>
<pre>
public static ActionListener add(ActionListener first, ActionListener second)
</PRE>
</DIV>

<p class=para>
This method takes two <tt class=literal>ActionListener</tt>s 
and returns another <tt class=literal>ActionListener</tt>. 
The returned listener is actually an event multicaster that contains the 
two listeners given as arguments in a linked list. However, because it 
implements the <tt class=literal>ActionListener</tt> 
interface, it is just as much an <tt class=literal>ActionListener</tt> 
as any class you might write; the fact that it contains two (or more) listeners 
inside it is irrelevant. Furthermore, both arguments can also be event 
multicasters, containing arbitrarily long chains of action listeners; in 
this case, the returned listener combines the two chains. Most often, you 
will use add to add a single listener to a chain that you're building, 
like this: 

<div class=screen>
<p>
<pre>
actionListenerChain=AWTEventMulticaster.add(actionListenerChain,
                                            newActionListener);
</PRE>
</DIV>

<p class=para>
<tt class=literal>actionListenerChain</tt> is an <tt class=literal>ActionListener</tt>--but 
it is also a multicaster holding a chain of action listeners. To start 
a chain, use <tt class=literal>null</tt> for the first 
argument. You rarely need to call the <tt class=literal>AWTEventMulticaster</tt> 
constructor. <tt class=literal>add()</tt> is a static 
method, so you can use it with either argument set to <tt class=literal>null</tt> 
to start the chain. 

<p class=para>
Now that you can maintain chains of listeners, how do you use them? Simple; 
just deliver your event to the appropriate method in the chain. The multicaster 
takes care of sending the event to all the listeners it contains: 

<div class=screen>
<p>
<pre>
actionListenerChain.actionPerformed(new ActionEvent(...));
</PRE>
</DIV>

Variables

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>protected EventListener a; <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>protected EventListener b; <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>a</tt> and <tt class=literal>b</tt> 
event listeners each consist of a chain of <tt class=literal>EventListeners</tt>. </DL>
Constructor methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>protected AWTEventMulticaster(EventListener a, EventListener b) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The constructor is protected. It creates an <tt class=literal>AWTEventMulticaster</tt> 
instance from the two chains of listeners. An instance is automatically 
created for you when you add your second listener by calling an <tt class=literal>add()</tt> 
method. </DL>
Listener methods

<p class=para>
These methods implement all of the listener interfaces. Rather than repeating 
all the descriptions, the methods are just listed. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void actionPerformed(ActionEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void adjustmentValueChanged(AdjustmentEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void componentAdded(ContainerEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void componentHidden(ComponentEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void componentMoved(ComponentEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void componentRemoved(ContainerEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void componentResized(ComponentEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void componentShown(ComponentEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void focusGained(FocusEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void focusLost(FocusEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void itemStateChanged(ItemEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void keyPressed(KeyEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void keyReleased(KeyEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void keyTyped(KeyEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void mouseClicked(MouseEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void mouseDragged(MouseEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void mouseEntered(MouseEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void mouseExited(MouseEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void mouseMoved(MouseEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void mousePressed(MouseEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void mouseReleased(MouseEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void textValueChanged(TextEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void windowActivated(WindowEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void windowClosed(WindowEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void windowClosing(WindowEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void windowDeactivated(WindowEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void windowDeiconified(WindowEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void windowIconified(WindowEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public void windowOpened(WindowEvent e)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br>
<dd>

<p class=para>
These methods broadcast the event given as an argument to all the listeners. </DL>
Support methods

<p class=para>
There is an <tt class=literal>add()</tt> method for every listener interface. Again, I've 
listed them with a single description. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static ActionListener add(ActionListener first, ActionListener second)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public static AdjustmentListener add(AdjustmentListener first,</I>  <i class=emphasis>AdjustmentListener second)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public static ComponentListener add(ComponentListener first, ComponentListener second)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public static ContainerListener add(ContainerListener first, ContainerListener second)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public static FocusListener add(FocusListener first, 
FocusListener second)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public static ItemListener add(ItemListener first, ItemListener second)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public static KeyListener add(KeyListener first, KeyListener second)</I><br><i class=emphasis>public static MouseListener add(MouseListener first, MouseListener second)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public static MouseMotionListener add(MouseMotionListener first,</I>  <i class=emphasis>MouseMotionListener second)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public static TextListener add(TextListener first, TextListener second)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br><i class=emphasis>public static WindowListener add(WindowListener first, WindowListener second)</I> <img src="gifs/bstar.gif" alt="(New)" border=0> <br>
<dd>

<p class=para>
These methods combine the listener sets together; they are called by the 
"add listener" methods of the various components. Usually, 
the <tt class=literal>first</tt> parameter is the 
initial listener chain, and the <tt class=literal>second</tt> 
parameter is the listener to add. However, nothing forces 
that. The combined set of listeners is returned. 

<p>
<dt class=varlistentry><i class=emphasis>protected static EventListener addInternal(EventListener first, EventListener 
second) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>addInternal()</tt> method is 
a support routine for the various <tt class=literal>add()</tt> 
methods. The combined set of listeners is returned. </DL>
<p class=para>
Again, there are <tt class=literal>remove()</tt> methods 
for every listener type, and I've economized on the descriptions. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static ComponentListener remove(ComponentListener list,</I>  <i class=emphasis>ComponentListener oldListener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public static ContainerListener remove(ContainerListener list,</I>  <i class=emphasis>ContainerListener oldListener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public static FocusListener remove(FocusListener list, FocusListener oldListener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public static KeyListener remove(KeyListener list, KeyListener oldListener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public static MouseMotionListener remove(MouseMotionListener list,</I>  <i class=emphasis>MouseMotionListener oldListener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public static MouseListener remove(MouseListener list, MouseListener oldListener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public static WindowListener remove(WindowListener list, WindowListener 
oldListener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public static ActionListener remove(ActionListener list, ActionListener 
oldListener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public static ItemListener remove(ItemListener list, ItemListener oldListener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public static AdjustmentListener remove(AdjustmentListener list,</I>  <i class=emphasis>AdjustmentListener oldListener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public static TextListener remove(TextListener list, TextListener oldListener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
These methods remove <tt class=literal>oldListener</tt> 
from the list of listeners, <tt class=literal>list</tt>. They are called by the "remove listener" methods of the different 
components. If <tt class=literal>oldListener</tt> 
is not found in the <tt class=literal>list</tt>, nothing happens. All these methods return the new list of listeners. 

<p>
<dt class=varlistentry><i class=emphasis>protected static EventListener removeInternal(EventListener list, EventListener oldListener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>removeInternal()</tt> method 
is a support routine for the various <tt class=literal>remove()</tt> 
methods. It removes <tt class=literal>oldListener</tt> 
from the list of listeners, <tt class=literal>list</tt>. 
Nothing happens if <tt class=literal>oldListener</tt> is not found 
in the <tt class=literal>list</tt>. The new set of listeners is returned. 

<p>
<dt class=varlistentry><i class=emphasis>protected EventListener remove(EventListener oldListener) <img src="gifs/bstar.gif" alt="(New)" border=0></I><br>
<dd>

<p class=para>
This <tt class=literal>remove()</tt> method removes 
<tt class=literal>oldListener</tt> from the <tt class=literal>AWTEventMulticaster</tt>. It is a support routine for <tt class=literal>removeInternal()</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>protected void saveInternal(ObjectOutputStream s, String k) throws IOException</I> <img src="gifs/bstar.gif" alt="(New)" border=0><br>
<dd>

<p class=para>
The <tt class=literal>saveInternal()</tt> method is a support method for serialization.</DL>
<div class=sect3>
<h4 class=sect3><a class="TITLE" name="JAWT-CH-4-SECT-3.4.5">Using an event multicaster</A></h4>

<p class=para>
<a href="#JAWT-CH-4-EX-4">Example 4.4</A> shows how to use <tt class=literal>AWTEventMulticaster</tt> 
to create a component that 
generates <tt class=literal>ItemEvents</tt>. The <tt class=literal>AWTEventMulticaster</tt> 
is used in the <tt class=literal>addItemListener()</tt> 
and <tt class=literal>removeItemListener()</tt> methods. 
When it comes time to generate the event in <tt class=literal>processEvent()</tt>, 
the <tt class=literal>itemStateChanged()</tt> method 
is called to notify anyone who might be interested. The item event is generated 
when a mouse button is clicked; we just count the number of clicks to determine 
whether an item was selected or deselected. Since we do not have any mouse 
listeners, we need to enable mouse events with <tt class=literal>enableEvents()</tt> 
in the constructor, as shown in the following example. 

<div class=example>
<h4 class=example><a class="TITLE" name="JAWT-CH-4-EX-4">Example 4.4: Using an AWTEventMulticaster</A></h4>

<div class=screen>
<p>
<pre>
// Java 1.1 only
import java.awt.*;
import java.awt.event.*;
class ItemEventComponent extends Component implements ItemSelectable {
    boolean selected;
    int i = 0;
    ItemListener itemListener = null;
    ItemEventComponent () {
        enableEvents (AWTEvent.MOUSE_EVENT_MASK);
    }
    public Object[] getSelectedObjects() {
        Object o[] = new Object[1];
        o[0] = new Integer (i);
        return o;
    }
    public void addItemListener (ItemListener l) {
        itemListener = AWTEventMulticaster.add (itemListener, l);
    }
    public void removeItemListener (ItemListener l) {
        itemListener = AWTEventMulticaster.remove (itemListener, l);
    }
    public void processEvent (AWTEvent e) {
        if (e.getID() == MouseEvent.MOUSE_PRESSED) {
            if (itemListener != null) {
                selected = !selected;
                i++;
                itemListener.itemStateChanged (
                    new ItemEvent (this, ItemEvent.ITEM_STATE_CHANGED,
                        getSelectedObjects(),
                        (selected?ItemEvent.SELECTED:ItemEvent.DESELECTED)));
            }
        }
    }
}
public class ItemFrame extends Frame implements ItemListener {
    ItemFrame () {
        super ("Listening In");
        ItemEventComponent c = new ItemEventComponent ();
        add (c, "Center");
        c.addItemListener (this);
        c.setBackground (SystemColor.control);
        setSize (200, 200);
    }
    public void itemStateChanged (ItemEvent e) {
        Object[] o = e.getItemSelectable().getSelectedObjects();
        Integer i = (Integer)o[0];
        System.out.println (i);
    }
    public static void main (String args[]) {
        ItemFrame f = new ItemFrame();
        f.show();
    }
}
</PRE>
</DIV>

</DIV>

<p class=para>
The <tt class=literal>ItemFrame</tt> displays 
just an <tt class=literal>ItemEventComponent</tt> and listens 
for its item events. 

<p class=para>
The <tt class=literal>EventQueue</tt> class lets you manage Java 1.1 events directly. 
You don't usually need to manage events yourself; the system takes care of event delivery 
behind the scene. However, should you need to, you can acquire the system's event queue by 
calling <tt class=literal>Toolkit.getSystemEventQueue()</tt>, peek into the event queue by 
calling <tt class=literal>peekEvent()</tt>, or post new events by calling <tt class=literal>postEvent()</tt>. 
All of these operations may be restricted by the <tt class=literal>SecurityManager</tt>. 
You should not remove the events from the queue (i.e., don't call <tt class=literal>getNextEvent()</tt>) 
unless you really mean to.Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public EventQueue()</I> <img src="gifs/bstar.gif" alt="(New)" border=0><br>
<dd>

<p class=para>
This constructor creates an <tt class=literal>EventQueue</tt> for those rare times when you need to manage your own queue of events. More frequently, you just work with the system event queue acquired through the <tt class=literal>Toolkit</tt>.</DL>
Methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public synchronized AWTEvent peekEvent() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>peekEvent()</tt> method looks 
into the event queue and returns the first event, without removing that 
event. If you modify the event, your modifications are reflected in the 
event still on the queue. The returned object is an instance of <tt class=literal>AWTEvent</tt>. 
If the queue is empty, <tt class=literal>peekEvent()</tt> 
returns <tt class=literal>null</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized AWTEvent peekEvent(int id) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This <tt class=literal>peekEvent()</tt> method looks 
into the event queue for the first event of the specified type. <tt class=literal>id</tt> 
is one of the integer constants from an <tt class=literal>AWTEvent</tt> 
subclass or an integer constant of your own. If there are no events 
of the appropriate type on the queue, <tt class=literal>peekEvent()</tt> 
returns <tt class=literal>null</tt>. 

<p class=para>
Note that a few of the <tt class=literal>AWTEvent</tt> 
classes have both event types and subtypes; <tt class=literal>peekEvent()</tt> 
checks event types only and ignores the subtype. For example, to find 
an <tt class=literal>ItemEvent</tt>, you would call 
<tt class=literal>peekEvent(ITEM_STATE_CHANGED)</tt>. 
However, a call to <tt class=literal>peekEvent(SELECTED)</tt> 
would return <tt class=literal>null</tt>, since <tt class=literal>SELECTED</tt> 
identifies an <tt class=literal>ItemEvent</tt> subtype. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void postEvent(AWTEvent theEvent) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This version of <tt class=literal>postEvent()</tt> 
puts a new style (&nbsp;&nbsp;Java1.1) event on the event queue. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized AWTEvent getNextEvent() throws InterruptedException <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getNextEvent()</tt> method removes 
an event from the queue. If the queue is empty, the call waits. The object 
returned is the item taken from the queue; it is either an <tt class=literal>Event</tt> 
or an <tt class=literal>AWTEvent</tt>. If the method 
call is interrupted, the method <tt class=literal>getNextEvent()</tt> 
throws an <tt class=literal>InterruptedException</tt>. </DL>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch05_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>The Event Class</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Components</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
