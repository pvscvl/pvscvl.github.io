<html>
<head>
<title>[Chapter 15] 15.2 The Peer Interfaces</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:55:43 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch15_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 15<br>Toolkit and Peers</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch16_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-15-SECT-2">15.2 The Peer Interfaces</A></h2>

<p class=para>
<a name="CH15.PEER"></A>Each GUI component that AWT provides has a <i class=emphasis>peer</I>. 
The peer is the implementation of that component in the native environment. 
For example, the <tt class=literal>Choice</tt> component 
in AWT corresponds to some native object that lets the user select one 
or more items from a list. As a Java developer, you need to worry 
only about the interface of the <tt class=literal>Choice</tt> 
object; when someone runs your program, the <tt class=literal>Choice</tt> 
object is mapped to an appropriate native object, which is the <tt class=literal>Choice</tt> 
peer, that "does the right thing." You don't really care 
what the peer is or how it's implemented; in fact, the peer may look 
(and to some extent, behave) differently on each platform. 

<p class=para>
The glue that allows an AWT component and its peer to work together is 
called a <i class=emphasis>peer interface</I>. A peer interface is simply an interface 
that defines the methods that the peer is required to support. These interfaces 
are collected in the package <tt class=literal>java.awt.peer</tt>. For example, this package contains the <tt class=literal>ButtonPeer</tt> 
interface, which contains the single method <tt class=literal>setLabel()</tt>. 
This means that the native object used to implement a <tt class=literal>Button</tt> 
must contain a method called <tt class=literal>setLabel()</tt> 
in order for AWT to use it as a button peer. (It's not quite that 
simple; since a button is also a <tt class=literal>Component</tt>, 
the button's peer must also implement the <tt class=literal>ComponentPeer</tt> 
interface, which is much more complicated.) 

<p class=para>
With one exception, there is a one-to-one correspondence between <tt class=literal>Component</tt> 
classes and peer interfaces: a <tt class=literal>Window</tt> 
has a <tt class=literal>WindowPeer</tt>, a <tt class=literal>Checkbox</tt> 
has a <tt class=literal>CheckboxPeer</tt>, and so 
on. The one exception is a new peer interface that appears in Java 1.1: 
the <tt class=literal>LightweightPeer</tt>, which 
doesn't have a corresponding component. The <tt class=literal>LightweightPeer</tt> 
is used by components that exist purely in Java, don't have a native 
peer, and are displayed and managed by another container. <tt class=literal>LightweightPeer</tt> 
makes it easier to create new components or containers that can behave 
like other components, but don't subclass <tt class=literal>Canvas</tt> 
or <tt class=literal>Panel</tt> and don't correspond 
to anything in the native environment. The best usage I can think of is 
to subclass <tt class=literal>Container</tt> to create 
a lightweight <tt class=literal>Panel</tt>. If you 
are only using a <tt class=literal>Panel</tt> to manage 
layout, there is no need for a peer to be created to process events. This 
should result in substantial resource savings where multiple panels need 
to be created just to help with layout. The following code is all you need to create a <tt class=literal>LightWeightPanel</tt>:

<div class=screen>
<p>
<pre>
import java.awt.*;
public class LightWeightPanel extends Container {
}
</PRE>
</DIV>

<p class=para>
There also tends to be a one-to-one relationship between the peer methods 
and the methods of the Java component. That is, each method in the peer 
interface corresponds to a method of the component. However, although a 
peer must implement each method in its peer interface, it doesn't 
necessarily have to do anything in that method. It's entirely possible 
for a platform to have a native button object that doesn't let you 
set the label. In this case, the button peer would implement the <tt class=literal>setLabel()</tt> 
method required by the <tt class=literal>ButtonPeer</tt> 
interface, but it wouldn't do anything. Of course, the component 
may also have many methods that don't correspond to the peer methods. 
Methods that don't correspond to anything in the peer are handled 
entirely within Java. 

<p class=para>
The <tt class=literal>ComponentPeer</tt> interface 
is the parent of all non-menu objects in the peer package. The <tt class=literal>MenuComponentPeer</tt> 
is the parent of all menu objects. The trees mirror the regular object 
hierarchies. <a href="#JAWT-CH-15-FIG-1">Figure 15.1</A> shows the object hierarchy 
diagram. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-15-FIG-1">Figure 15.1: java.awt.peer object hierarchy</A></h4>


<p>
<img align=middle src="figs/jawt1502.gif" alt="[Graphic: Figure 15-1]" width=332 height=155 border=0>

</DIV>

<p class=para>
Creating a Java component (e.g., <tt class=literal>Button b = new Button 
(`Foo`)</tt>) does not create the peer. An object's 
peer is created when the object's <tt class=literal>addNotify()</tt> 
method is called. This is usually when the component's container 
is added to the screen. The call to a component's <tt class=literal>addNotify()</tt> 
method in turn calls the appropriate <tt class=literal>createxxxx()</tt> 
method of the <tt class=literal>Toolkit</tt> (for 
a Button, <tt class=literal>createButton()</tt>). 
<a href="#JAWT-CH-15-FIG-2">Figure 15.2</A> shows the process. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-15-FIG-2">Figure 15.2: Creating a Button peer</A></h4>


<p>
<img align=middle src="figs/jawt1503.gif" alt="[Graphic: Figure 15-2]" width=464 height=457 border=0>

</DIV>

<p class=para>
When you remove a component from a container by calling <tt class=literal>remove()</tt>, 
the container calls the component's <tt class=literal>removeNotify()</tt> 
method. This usually results in a call to the peer's <tt class=literal>dispose()</tt> 
method. Depending on the particular component, <tt class=literal>removeNotify()</tt> 
may be overridden to perform additional work. Removing a <tt class=literal>Component</tt> 
from a <tt class=literal>Container</tt> does not destroy 
the <tt class=literal>Component</tt>. The next time 
the method <tt class=literal>addNotify()</tt> is called, the 
component must be recreated by the peer, with its previous characteristics. 
For instance, when a <tt class=literal>TextField</tt> 
is removed, the current text, plus the start and stop points for the current 
selection, are saved. These will be restored if you add the text field to 
its container again. For some components, like a <tt class=literal>Label</tt>, 
there is no need to retain any additional information. 

<p class=para>
A component's peer needs to exist only when the user is interacting 
with it. If you are developing resource-intensive programs, you might want 
to consider drawing the components manually when they do not have the focus 
and using the peer only when they actually have input focus. This technique 
can save a considerable amount of memory resources but requires extra 
work on your part as a developer and goes beyond the scope of this book. 
The <tt class=literal>LightweightPeer</tt> interface 
appears to be designed to make this process easier: you could create a 
dummy button that doesn't do anything and uses the <tt class=literal>LightweightPeer</tt>. 
Whenever the mouse enters the button's space, you could quickly remove 
the dummy button and add a real button. 

<p class=para>
The peer interfaces are listed in their entirety in the reference section. 
We won't list them here, primarily because you don't need to 
worry about them unless you're porting Java to a new platform. Each 
method in a peer interface corresponds exactly to the similarly named method 
in the matching component. <tt class=literal>LightweightPeer</tt> 
is the only exception, because it doesn't have a matching component, 
but that's easy to take care of: as you'd expect, <tt class=literal>LightweightPeer</tt> 
doesn't define any methods. (Of course, a peer that implements <tt class=literal>LightweightPeer</tt> 
would still need to implement the methods inherited from <tt class=literal>ComponentPeer</tt>, 
but those are inherited when you subclass <tt class=literal>Component</tt>.) 

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch15_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch16_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Toolkit</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Data Transfer</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
