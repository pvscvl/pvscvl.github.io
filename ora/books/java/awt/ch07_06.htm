<html>
<head>
<title>[Chapter 7] 7.6 GridBagLayout</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:39:39 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7<br>Layouts</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch07_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-7-SECT-6">7.6 GridBagLayout</A></h2>

<p class=para>
<a name="CH07.BAG1"></A><a name="CH07.BAG2"></A><a name="CH07.BAG3"></A>The <tt class=literal>GridBagLayout</tt> is the most 
complex and flexible of the standard layout managers. Although it sounds 
like it should be a subclass of <tt class=literal>GridLayout</tt>, 
it's a different animal entirely. With <tt class=literal>GridLayout</tt>, 
elements are arranged in a rectangular grid, and each element in the container 
is sized identically (where possible). With <tt class=literal>GridBagLayout</tt>, 
elements can have different sizes and can occupy multiple rows or columns. 
The position and behavior of each element is specified by an instance of 
the <tt class=literal>GridBagConstraints</tt> class. 
By properly constraining the elements, you can specify the number of rows 
and columns an element occupies, which element grows when additional screen 
real estate is available, and various other restrictions. The actual grid 
size is based upon the number of components within the <tt class=literal>GridBagLayout</tt> 
and the <tt class=literal>GridBagConstraints</tt> 
of those objects. For example, <a href="#JAWT-CH-7-FIG-8">Figure 7.8</A> shows a 
<tt class=literal>GridBagLayout</tt> with seven components, 
arranged on a 3x3 grid. The maximum capacity of a screen using 
<tt class=literal>GridBagLayout</tt> in Java 1.0 is 
128 x 128 cells; in Java 1.1, the maximum size is 512 x 512 cells. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-7-FIG-8">Figure 7.8: GridBagLayout with seven components on a 3x3 grid</A></h4>


<p>
<img align=middle src="figs/jawt0708.gif" alt="[Graphic: Figure 7-8]" width=135 height=121 border=0>

</DIV>

<p class=para>
With the other layout managers, adding a component to the container 
requires only a call to <tt class=literal>add()</tt>. In 
Java 1.0, the <tt class=literal>GridBagLayout</tt> 
also requires you to call <tt class=literal>setConstraints()</tt> 
to tell the layout manager how to position the component. With Java 1.1, 
you use the new <tt class=literal>add()</tt> method 
that permits you to pass the component and its constraints in a single 
method call (<tt class=literal>add(Component, Object)</tt>). 
If no components are added with constraints (thus all using the defaults), 
the <tt class=literal>GridBagLayout</tt> places the 
components in a single row at the center of the screen and sizes them 
to their <tt class=literal>getPreferredSize()</tt>. 
This is a nice way to place a single object in the center of the screen 
without stretching it to take up the available space, as <tt class=literal>BorderLayout</tt> 
does. <a href="#JAWT-CH-7-FIG-9">Figure 7.9</A> compares the default <tt class=literal>GridBagLayout</tt> 
with a <tt class=literal>BorderLayout</tt> displaying 
the same object in the center region. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-7-FIG-9">Figure 7.9: Centering a component: GridBagLayout vs. BorderLayout</A></h4>


<p>
<img align=middle src="figs/jawt0709.gif" alt="[Graphic: Figure 7-9]" width=503 height=142 border=0>

</DIV>

<p class=para>
When designing a container that will use <tt class=literal>GridBagLayout</tt>, 
it is easiest to plan what you want on graph paper, and then determine 
how the constraints should be set. The alternative, adding the components 
to the layout and then tweaking the constraints until you have something 
you like, could lead to premature baldness. Seriously, a trial-and-error approach to getting the constraints right will certainly be 
frustrating and will probably fail. <a href="#JAWT-CH-7-FIG-10">Figure 7.10</A>, 
using the same <tt class=literal>GridBagLayout</tt> used in <a href="#JAWT-CH-7-FIG-8">Figure 7.8</A>, indicates 
how the layout manager counts cells. The partial code used to create the 
screen follows in <a href="#JAWT-CH-7-EX-2">Example 7.2</A>. 

<div class=example>
<h4 class=example><a class="TITLE" name="JAWT-CH-7-EX-2">Example 7.2: Creating a GridBagLayout</A></h4>

<div class=screen>
<p>
<pre>
public void init() {
    Button b;
    GridBagLayout gb = new GridBagLayout();
    GridBagConstraints gbc = new GridBagConstraints();
    setLayout(gb);
    try {
/* Row One - Three button */
        b = new Button ("One");
        addComponent (this, b, 0, 0, 1, 1, 
                GridBagConstraints.NONE, GridBagConstraints.CENTER);
        b = new Button ("Two");
        addComponent (this, b, 1, 0, 1, 1, 
                GridBagConstraints.NONE, GridBagConstraints.CENTER);
        b = new Button ("Three");
        addComponent (this, b, 2, 0, 1, 1, 
                GridBagConstraints.NONE, GridBagConstraints.CENTER);
/* Row Two - Two buttons */
        b = new Button ("Four");
        addComponent (this, b, 0, 1, 2, 1, 
                GridBagConstraints.NONE, GridBagConstraints.CENTER);
        b = new Button ("Five");
        addComponent (this, b, 2, 1, 1, 2,
                GridBagConstraints.NONE, GridBagConstraints.CENTER);
/* Row Three - Two buttons */
        b = new Button ("Six");
        addComponent (this, b, 0, 2, 1, 1, 
                GridBagConstraints.NONE, GridBagConstraints.CENTER);
        b = new Button ("Seven");
        addComponent (this, b, 1, 2, 1, 1, 
                GridBagConstraints.NONE, GridBagConstraints.CENTER);
    } catch (Exception e) {
        e.printStackTrace();
    }
}
</PRE>
</DIV>

</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-7-FIG-10">Figure 7.10: How GridBagLayout counts rows and columns</A></h4>


<p>
<img align=middle src="figs/jawt0710.gif" alt="[Graphic: Figure 7-10]" width=503 height=167 border=0>

</DIV>

<p class=para>
Most of the work in <a href="#JAWT-CH-7-EX-2">Example 7.2</A> is done by the helper method <tt class=literal>addComponent()</tt>, 
which creates a set of constraints, applies them to a component, and adds 
the component to a container. The code for <tt class=literal>addComponent()</tt> 
appears in <a href="ch07_07.htm">GridBagConstraints</A>; its signature is: 

<div class=screen>
<p>
<pre>
public static void addComponent (Container container, Component component,
        int gridx, int gridy, int gridwidth, int gridheight, int fill,
        int anchor) throws AWTException ;
</PRE>
</DIV>

<p class=para>
The top left cell in the layout has location (<tt class=literal>0,0</tt>). There's nothing 
very surprising about buttons one, two, three, six, and seven. They occupy 
a 1x1 area on the layout's 3x3 grid. Button four occupies a 2x1 area; 
it is placed at location (0,1), and thus occupies this cell plus the cell 
at (<tt class=literal>1,1</tt>). Likewise, button five occupies a 1x2 area, and takes up the cells 
at (<tt class=literal>2,1</tt>) and (<tt class=literal>2,2</tt>). The total size of the layout is determined entirely 
by the components that are placed in it and their constraints. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-7-SECT-6.1">GridBagLayout Methods</A></h3>Variables

<p class=para>
There are a handful of instance variables for <tt class=literal>GridBagLayout</tt>. 
They are not initialized until the container whose layout is <tt class=literal>GridBagLayout</tt> 
has been validated. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int columnWidths[] </I><br>
<dd>

<p class=para>
The <tt class=literal>columnWidths[]</tt> array contains 
the widths of the components in the row with the most elements. The values 
of this array are returned by the <tt class=literal>getLayoutDimensions()</tt> 
method. You can access the array directly, but it is not recommended. 

<p>
<dt class=varlistentry><i class=emphasis>public int rowHeights[] </I><br>
<dd>

<p class=para>
The <tt class=literal>rowHeights[]</tt> array contains 
the heights of the components in the column with the most elements. The 
values of this array are returned by the <tt class=literal>getLayoutDimensions()</tt> 
method. You can access the array directly, but it is not recommended. 

<p>
<dt class=varlistentry><i class=emphasis>public double columnWeights[] </I><br>
<dd>

<p class=para>
The <tt class=literal>columnWeights[]</tt> array contains 
the <tt class=literal>weightx</tt> values of the components 
in the row with the most elements. The values of this array are returned 
by the <tt class=literal>getLayoutWeights()</tt> method. 
You can access the array directly, but it is not recommended. 

<p>
<dt class=varlistentry><i class=emphasis>public double rowWeights[] </I><br>
<dd>

<p class=para>
The <tt class=literal>row&nbsp;Weights[]</tt> array contains 
the <tt class=literal>weighty</tt> values of the components 
in the column with the most elements. The values of this array are returned 
by the <tt class=literal>getLayoutWeights()</tt> method. 
You can access the array directly, but it is not recommended. </DL>
Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public GridBagLayout () </I><br>
<dd>

<p class=para>
The constructor for <tt class=literal>GridBagLayout</tt> 
creates an instance of <tt class=literal>GridBagLayout</tt> 
with default <tt class=literal>GridBagConstraints</tt> 
behavior. An internal table is used to keep track of the components added 
to the layout. </DL>
LayoutManager methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void addLayoutComponent (String name, Component component)  </I><br>
<dd>

<p class=para>
The <tt class=literal>addLayoutComponent()</tt> method 
of <tt class=literal>GridBagLayout</tt> does nothing. 
This method is not deprecated, unlike the similarly named methods in the 
other layout managers that implement <tt class=literal>LayoutManager2</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void removeLayoutComponent (Component component)  </I><br>
<dd>

<p class=para>
The <tt class=literal>removeLayoutComponent()</tt> 
method of <tt class=literal>GridBagLayout</tt> does 
nothing. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension preferredLayoutSize (Container target)  </I><br>
<dd>

<p class=para>
The <tt class=literal>preferredLayoutSize()</tt> method 
calculates the preferred dimensions of the components of <tt class=literal>target</tt>. 
Sizing is based on the constraints of the various components. This task 
is definitely better off left to the computer. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension minimumLayoutSize (Container target)  </I><br>
<dd>

<p class=para>
The <tt class=literal>minimumLayoutSize()</tt> method 
calculates the minimum dimensions required to position the components of 
<tt class=literal>target</tt>. Sizing is based on 
the constraints of the various components. 

<p>
<dt class=varlistentry><i class=emphasis>public void layoutContainer (Container target)  </I><br>
<dd>

<p class=para>
The <tt class=literal>layoutContainer()</tt> method 
positions the components within <tt class=literal>target</tt> 
based upon the constraints of each component. If a component's anchor 
constraints are invalid, <tt class=literal>layoutContainer()</tt> 
throws the run-time exception <tt class=literal>IllegalArgumentException</tt>. 
The process of arranging the components is very complicated and beyond 
the scope of this book. </DL>
LayoutManager2 methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void addLayoutComponent (Component component, Object constraints) 
 <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This <tt class=literal>addLayoutComponent()</tt> method 
of <tt class=literal>GridBagLayout</tt> associates 
the <tt class=literal>component</tt> with the given 
<tt class=literal>constraints</tt> object. It calls 
the <tt class=literal>setConstaints()</tt> method. 

<p class=para>
If <tt class=literal>name</tt> is not a <tt class=literal>GridBagConstraints</tt>, 
<tt class=literal>addLayoutComponent()</tt> throws 
the run-time exception <tt class=literal>IllegalArgumentException</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract Dimension maximumLayoutSize(Container target) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>maximumLayoutSize()</tt> method 
returns a <tt class=literal>Dimension</tt> object 
with a width and height of <tt class=literal>Integer.MAX_VALUE</tt>. 
In practice, this means that <tt class=literal>GridBagLayout</tt> 
doesn't support the concept of maximum size. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract float getLayoutAlignmentX(Container target) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getLayoutAlignmentX()</tt> method 
says that <tt class=literal>GridBagLayout</tt> containers 
should be centered horizontally within the area available. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract float getLayoutAlignmentY(Container target) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getLayoutAlignmentY()</tt> method 
says that <tt class=literal>GridBagLayout</tt> containers 
should be centered vertically within the area available. 

<p>
<dt class=varlistentry><i class=emphasis>public abstract void invalidateLayout(Container target) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>invalidateLayout()</tt> method 
of <tt class=literal>GridBagLayout</tt> does nothing. </DL>
Constraints

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public GridBagConstraints getConstraints (Component component) </I><br>
<dd>

<p class=para>
The <tt class=literal>getConstraints()</tt> method 
returns a clone of the current constraints for <tt class=literal>component</tt>. 
This makes it easier to generate constraints for a component based on another 
component. 

<p>
<dt class=varlistentry><i class=emphasis>public void setConstraints (Component component, GridBagConstraints constraints) </I><br>
<dd>

<p class=para>
The <tt class=literal>setConstraints()</tt> method 
changes the <tt class=literal>constraints</tt> on 
<tt class=literal>component</tt> to a clone of <tt class=literal>constraints</tt>. 
The system creates a <tt class=literal>clone()</tt> 
of <tt class=literal>constraints</tt> so you can change 
the original constraints without affecting <tt class=literal>component</tt>. </DL>
Layout

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Point getLayoutOrigin () </I><br>
<dd>

<p class=para>
The <tt class=literal>getLayoutOrigin()</tt> method 
returns the origin for the <tt class=literal>GridBagLayout</tt>. 
The origin is the top left point within the container at which the components 
are drawn. Before the container is validated, <tt class=literal>getLayoutOrigin()</tt> 
returns the <tt class=literal>Point</tt> (<tt class=literal>0,0</tt>). After 
validation, <tt class=literal>getLayoutOrigin()</tt> 
returns the actual origin of the layout. The space used by the components 
within a <tt class=literal>GridBagLayout</tt> may 
not fill the entire container. You can use the results of <tt class=literal>getLayoutOrigin()</tt> 
and <tt class=literal>getLayoutDimensions()</tt> to 
find the layout's actual size and draw a <tt class=literal>Rectangle</tt> 
around the objects. 

<p>
<dt class=varlistentry><i class=emphasis>public int[][] getLayoutDimensions () </I><br>
<dd>

<p class=para>
The <tt class=literal>getLayoutDimensions()</tt> method 
returns two one-dimensional arrays as a single two-dimensional array. Index 
0 is an array of widths (<tt class=literal>columnWidths</tt> 
instance variable), while index 1 is an array of heights (<tt class=literal>rowHeights</tt> 
instance variable). Until the layout is validated, these will be empty. 
After validation, the first array contains the widths of the components 
in the row with the most elements. The second contains the heights of the 
components in the column with the most elements. For <a href="#JAWT-CH-7-FIG-10">Figure 7.10</A>, the results would be (38, 51, 48) for widths since the first row 
has three elements and (21, 21, 21) for the heights since the first (and 
second) column has three elements in it. 

<p>
<dt class=varlistentry><i class=emphasis>public double[][] getLayoutWeights () </I><br>
<dd>

<p class=para>
The <tt class=literal>getLayoutWeights()</tt> method 
returns two one-dimensional arrays as a single two-dimensional array. Index 
0 is an array of column weights (<tt class=literal>columnWeights</tt> 
instance variable), while index 1 is an array of row weights (<tt class=literal>rowWeights</tt> 
instance variable). Until the layout is validated, these will be empty. 
After validation, the first dimension contains all the <tt class=literal>weightx</tt> values of 
the components in the row with the most elements. The second dimension 
contains all the <tt class=literal>weighty</tt> values 
of the components in the column with the most elements. For <a href="#JAWT-CH-7-FIG-10">Figure 7.10</A>, the results would be (0, 0, 0) for <tt class=literal>weightx</tt> 
since the first row has three elements and (0, 0, 0) for <tt class=literal>weighty</tt> 
since the first column has three elements in it. </DL>
Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Point location (int x, int y) </I><br>
<dd>

<p class=para>
The <tt class=literal>location()</tt> method returns 
the <tt class=literal>Point</tt> (<tt class=literal>0,0</tt>) until the container 
is validated. After validation, this method returns the grid element under 
the location (<tt class=literal>x</tt>, <tt class=literal>y</tt>), 
where <tt class=literal>x</tt> and <tt class=literal>y</tt> 
are in pixels. The results could be used as the <tt class=literal>gridx</tt> 
and <tt class=literal>gridy</tt> constraints when 
adding another component. 

<p>
<dt class=varlistentry><i class=emphasis>public String toString () </I><br>
<dd>

<p class=para>
The <tt class=literal>toString()</tt> method of <tt class=literal>GridBagLayout</tt> 
returns the name of the class: </DL>
<div class=screen>
<p>
<pre>
java.awt.GridBagLayout
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch07_07.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>CardLayout</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>GridBagConstraints</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
