<html>
<head>
<title>[Chapter 7] 7.10 Designing Your Own LayoutManager</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:39:56 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_09.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7<br>Layouts</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch07_11.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-7-SECT-10">7.10 Designing Your Own LayoutManager</A></h2>

<p class=para>
<a name="CH07.DESIGN"></A>What if you can't find a <tt class=literal>LayoutManager</tt> 
that fits your requirements, or you find yourself repeatedly building the same multipanel 
display? In cases like these, you can build your own layout 
manager. It's really not that difficult; you only need to implement 
the five methods of the <tt class=literal>LayoutManager</tt> 
interface, plus a constructor and any additional methods your design requires. 
In this section, we'll review the <tt class=literal>LayoutManager</tt> 
interface and then construct a custom <tt class=literal>LayoutManager</tt> 
called <tt class=literal>CornerLayout</tt>. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-7-SECT-10.1">LayoutManager Methods</A></h3>

<p class=para>
A custom <tt class=literal>LayoutManager</tt> must 
implement the following five methods (ten methods if you implement <tt class=literal>LayoutManager2</tt>). 
For many layout managers, several of these methods can be stubs that don't 
do anything. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void addLayoutComponent (String name, Component component) </I><br>
<dd>

<p class=para>
The <tt class=literal>addLayoutComponent()</tt> method 
is called by the <tt class=literal>add(name, component)</tt> 
method of <tt class=literal>Container</tt>. If your 
new <tt class=literal>LayoutManager</tt> does not 
have named component areas or does not pass generic positioning information 
via <tt class=literal>name</tt>, this method will 
be a stub with no code; you can let the container keep track of the components 
for you. Otherwise, this method must keep track of the component added, 
along with the information in name. 

<p class=para>
How would you implement this method? For layouts that have named component 
areas (like <tt class=literal>BorderLayout</tt>), 
you could use a private instance variable to hold the component for each 
area. For layouts like <tt class=literal>CardLayout</tt>, 
which lets you refer to individual components by name, you might want to 
store the components and their names in an internal <tt class=literal>Hashtable</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void removeLayoutComponent (Component component) </I><br>
<dd>

<p class=para>
This method is called by the <tt class=literal>remove()</tt> 
and <tt class=literal>removeAll()</tt> methods of 
<tt class=literal>Container</tt>. If you are storing 
information in internal instance variables or tables, you can remove the 
information about the given <tt class=literal>Component</tt> 
from the tables at this point. If you're not keeping track of the 
components yourself, this method can be a stub that does nothing. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension preferredLayoutSize (Container target) </I><br>
<dd>

<p class=para>
This method is called by <tt class=literal>preferredSize()</tt> 
to calculate the desired size of <tt class=literal>target</tt>.[1] 
Obviously, the preferred size of the container depends on the layout strategy 
that you implement. To compute the preferred size, you usually need to 
call the <tt class=literal>preferredSize()</tt> method 
of every component in the container. 

<blockquote class=footnote>
<p class=para>[1] 
 
This is still true in Java 1.1; the new method, <tt class=literal>getPreferredSize()</tt>, 
just calls the deprecated method, <tt class=literal>preferredSize()</tt>.
</blockquote>
<p class=para>
Computing the preferred size can be messy. However, some layout strategies 
let you take a shortcut. If your layout policy is "I'm going 
to cram all the components into the space given to me, whether they fit 
or not," you can compute the preferred size of your layout simply 
by calling <tt class=literal>target.size()</tt> or 
(in Java 1.1) <tt class=literal>target.getSize()</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension minimumLayoutSize (Container target) </I><br>
<dd>

<p class=para>
This method is called by <tt class=literal>minimumSize()</tt> 
to calculate the minimum size of <tt class=literal>target</tt>. 
The minimum size of the container depends on the layout strategy that you 
implement. To compute the minimum size, you usually need to call the <tt class=literal>minimumSize()</tt> 
method of every component in the container. 

<p class=para>
As with <tt class=literal>preferredLayoutSize()</tt>, 
you can sometimes save a lot of work by returning <tt class=literal>target.size()</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void layoutContainer (Container target) </I><br>
<dd>

<p class=para>
This method is called when target is first displayed and whenever it is 
resized. It is responsible for arranging the components within the container. 
Depending upon the type of <tt class=literal>LayoutManager</tt> 
you are creating, you will either loop through all the components in the 
container with the <tt class=literal>getComponent()</tt> 
method or use the named components that you saved in the <tt class=literal>addLayoutComponent()</tt> 
method. To position and size the components, call their <tt class=literal>reshape()</tt> 
or <tt class=literal>setBounds()</tt> methods. </DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-7-SECT-10.2">A New LayoutManager: CornerLayout</A></h3>

<p class=para>
<a name="CH07.CORNER1"></A><a name="CH07.CORNER2"></A><tt class=literal>CornerLayout</tt> is a simple but 
useful layout manager that is similar in many respects to <tt class=literal>BorderLayout</tt>. 
Like <tt class=literal>BorderLayout</tt>, it positions 
components in five named regions: "Northeast", "Northwest", 
"Southeast", "Southwest", and "Center". 
These regions correspond to the four corners of the container, plus the 
center. The "Center" region has three modes. <tt class=literal>NORMAL</tt>, 
the default mode, places the "Center" component in the center 
of the container, with its corners at the inner corner of the other four 
regions. <tt class=literal>FULL_WIDTH</tt> lets the 
center region occupy the full width of the container. <tt class=literal>FULL_HEIGHT</tt> 
lets the center region occupy the full height of the container. You cannot 
specify both <tt class=literal>FULL_HEIGHT</tt> and 
<tt class=literal>FULL_WIDTH</tt>; if you did, the 
"Center" component would overlap the corner components and 
take over the container. <a href="#JAWT-CH-7-FIG-14">Figure 7.14</A> shows a <tt class=literal>CornerLayout</tt> 
in each of these modes. 

<p class=para>
Not all regions are required. If a complete side is missing, the required 
space for the container decreases. Ordinarily, the other components would 
grow to fill this vacated space. However, if the container is sized to 
its preferred size, so are the components. <a href="#JAWT-CH-7-FIG-15">Figure 7.15</A> 
shows this behavior. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-7-FIG-14">Figure 7.14: CornerLayout</A></h4>


<p>
<img align=middle src="figs/jawt0714.gif" alt="[Graphic: Figure 7-14]" width=193 height=250 border=0>

</DIV>

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-7-FIG-15">Figure 7.15: CornerLayout with missing regions</A></h4>


<p>
<img align=middle src="figs/jawt0715.gif" alt="[Graphic: Figure 7-15]" width=381 height=113 border=0>

</DIV>

<p class=para>
<a href="#JAWT-CH-7-EX-3">Example 7.3</A> is the code for the <tt class=literal>CornerLayout</tt>. 
It shows the Java 1.0 version of the layout 
manager. At the end of this section, I show the simple change needed to adapt this manager 
to Java 1.1. 

<div class=example>
<h4 class=example><a class="TITLE" name="JAWT-CH-7-EX-3">Example 7.3: The CornerLayout LayoutManager</A></h4>

<div class=screen>
<p>
<pre>
import java.awt.*;
/**
 * An 'educational' layout. CornerLayout will layout a container
 * using members named "Northeast", "Northwest", "Southeast",
 * "Southwest", and "Center".
 *
 * The "Northeast", "Northwest", "Southeast" and "Southwest" components
 * get sized relative to the adjacent corner's components and
 * the constraints of the container's size. The "Center" component will
 * get any space left over. 
 */
public class CornerLayout implements LayoutManager {
    int hgap;
    int vgap;
    int mode;
    public final static int NORMAL = 0;
    public final static int FULL_WIDTH = 1;
    public final static int FULL_HEIGHT = 2;
    Component northwest;
    Component southwest;
    Component northeast;
    Component southeast;
    Component center;
</PRE>
</DIV>

</DIV>

<p class=para>
The <tt class=literal>CornerLayout</tt> class starts 
by defining instance variables to hold the gaps and mode and the components 
for each corner of the screen. It also defines three constants that control 
the behavior of the center region: <tt class=literal>NORMAL</tt>, 
<tt class=literal>FULL_WIDTH</tt>, and <tt class=literal>FULL_HEIGHT</tt>. 

<div class=screen>
<p>
<pre>
    /**
     * Constructs a new CornerLayout.
     */
    public CornerLayout() {
        this (0, 0, CornerLayout.NORMAL);
    }
    public CornerLayout(int mode) {
        this (0, 0, mode);
    }
    public CornerLayout(int hgap, int vgap) {
        this (hgap, vgap, CornerLayout.NORMAL);
    }
    public CornerLayout(int hgap, int vgap, int mode) {
        this.hgap = hgap;
        this.vgap = vgap;
        this.mode = mode;
    }
</PRE>
</DIV>

<p class=para>
The constructors for <tt class=literal>CornerLayout</tt> 
are simple. The default (no arguments) constructor creates a <tt class=literal>CornerLayout</tt> 
with no gaps; the "Center" region is <tt class=literal>NORMAL</tt> 
mode. The last constructor, which is called by the other three, stores 
the gaps and the mode in instance variables. 

<div class=screen>
<p>
<pre>
    public void addLayoutComponent (String name, Component comp) {
        if ("Center".equals(name)) {
            center = comp;
        } else if ("Northwest".equals(name)) {
            northwest = comp;
        } else if ("Southeast".equals(name)) {
            southeast = comp;
        } else if ("Northeast".equals(name)) {
            northeast = comp;
        } else if ("Southwest".equals(name)) {
            southwest = comp;
        }
    }
</PRE>
</DIV>

<p class=para>
<tt class=literal>addLayoutComponent()</tt> figures 
out which region a component has been assigned to, and saves the component 
in the corresponding instance variable. If the name of the component isn't 
"Northeast", "Northwest", Southeast", "Southwest", 
or "Center", the component is ignored. 

<div class=screen>
<p>
<pre>
    public void removeLayoutComponent (Component comp) {
        if (comp == center) {
            center = null;
        } else if (comp == northwest) {
            northwest = null;
        } else if (comp == southeast) {
            southeast = null;
        } else if (comp == northeast) {
            northeast = null;
        } else if (comp == southwest) {
            southwest = null;
        }
    }
</PRE>
</DIV>

<p class=para>
<tt class=literal>removeLayoutComponent()</tt> searches 
for a given component in each region; if it finds the component, <tt class=literal>removeLayoutComponent()</tt> 
discards it by setting the instance variable to null. 

<div class=screen>
<p>
<pre>
    public Dimension minimumLayoutSize (Container target) {
        Dimension dim = new Dimension(0, 0);
        Dimension northeastDim = new Dimension (0,0);
        Dimension northwestDim = new Dimension (0,0);
        Dimension southeastDim = new Dimension (0,0);
        Dimension southwestDim = new Dimension (0,0);
        Dimension centerDim    = new Dimension (0,0);
        if ((northeast != null) &amp;&amp; northeast.isVisible ()) {
            northeastDim = northeast.minimumSize ();
        }
        if ((southwest != null) &amp;&amp; southwest.isVisible ()) {
            southwestDim = southwest.minimumSize ();
        }
        if ((center != null) &amp;&amp; center.isVisible ()) {
            centerDim = center.minimumSize ();
        }
        if ((northwest != null) &amp;&amp; northwest.isVisible ()) {
            northwestDim = northwest.minimumSize ();
        }
        if ((southeast != null) &amp;&amp; southeast.isVisible ()) {
            southeastDim = southeast.minimumSize ();
        }
        dim.width = Math.max (northwestDim.width, southwestDim.width) +
                        hgap + centerDim.width + hgap +
                        Math.max (northeastDim.width, southeastDim.width);
        dim.height = Math.max (northwestDim.height, northeastDim.height) +
                        + vgap + centerDim.height + vgap +
                        Math.max (southeastDim.height, southwestDim.height);
        Insets insets = target.insets();
        dim.width += insets.left + insets.right;
        dim.height += insets.top + insets.bottom;
        return dim;
    }
</PRE>
</DIV>

<p class=para>
<tt class=literal>minimumLayoutSize()</tt> computes 
the minimum size of the layout by finding the minimum sizes of all components. 
To compute the minimum width, <tt class=literal>minimumLayoutSize()</tt> 
adds the width of the center, plus the greater of the widths of the western 
regions (northwest and southwest), plus the greater of the widths of the 
eastern regions (northeast and southeast), then adds the appropriate gaps 
and insets. The minimum height is computed similarly; the method takes 
the greater of the minimum heights of the northern regions, the greater 
of the minimum heights of the southern regions, and adds them to the minimum 
height of the center region, together with the appropriate gaps and insets. 

<div class=screen>
<p>
<pre>
    public Dimension preferredLayoutSize (Container target) {
        Dimension dim = new Dimension(0, 0);
        Dimension northeastDim = new Dimension (0,0);
        Dimension northwestDim = new Dimension (0,0);
        Dimension southeastDim = new Dimension (0,0);
        Dimension southwestDim = new Dimension (0,0);
        Dimension centerDim    = new Dimension (0,0);
        if ((northeast != null) &amp;&amp; northeast.isVisible ()) {
            northeastDim = northeast.preferredSize ();
        }
        if ((southwest != null) &amp;&amp; southwest.isVisible ()) {
            southwestDim = southwest.preferredSize ();
        }
        if ((center != null) &amp;&amp; center.isVisible ()) {
            centerDim = center.preferredSize ();
        }
        if ((northwest != null) &amp;&amp; northwest.isVisible ()) {
            northwestDim = northwest.preferredSize ();
        }
        if ((southeast != null) &amp;&amp; southeast.isVisible ()) {
            southeastDim = southeast.preferredSize ();
        }
        dim.width = Math.max (northwestDim.width, southwestDim.width) +
                        hgap + centerDim.width + hgap +
                        Math.max (northeastDim.width, southeastDim.width);
        dim.height = Math.max (northwestDim.height, northeastDim.height) +
                        + vgap + centerDim.height + vgap +
                        Math.max (southeastDim.height, southwestDim.height);
        Insets insets = target.insets();
        dim.width += insets.left + insets.right;
        dim.height += insets.top + insets.bottom;
        return dim;
    }
</PRE>
</DIV>

<p class=para>
<tt class=literal>preferredLayoutSize()</tt> computes 
the preferred size of the layout. The method is almost identical to <tt class=literal>minimumLayoutSize()</tt>, 
except that it uses the preferred dimensions of each component. 

<div class=screen>
<p>
<pre>
    public void layoutContainer (Container target) {
        Insets insets = target.insets();
        int top = insets.top;
        int bottom = target.size ().height - insets.bottom;
        int left = insets.left;
        int right = target.size ().width - insets.right;
        Dimension northeastDim = new Dimension (0,0);
        Dimension northwestDim = new Dimension (0,0);
        Dimension southeastDim = new Dimension (0,0);
        Dimension southwestDim = new Dimension (0,0);
        Dimension centerDim    = new Dimension (0,0);
        Point topLeftCorner, topRightCorner, bottomLeftCorner,
                        bottomRightCorner;
        if ((northeast != null) &amp;&amp; northeast.isVisible ()) {
            northeastDim = northeast.preferredSize ();
        }
        if ((southwest != null) &amp;&amp; southwest.isVisible ()) {
            southwestDim = southwest.preferredSize ();
        }
        if ((center != null) &amp;&amp; center.isVisible ()) {
            centerDim = center.preferredSize ();
        }
        if ((northwest != null) &amp;&amp; northwest.isVisible ()) {
            northwestDim = northwest.preferredSize ();
        }
        if ((southeast != null) &amp;&amp; southeast.isVisible ()) {
            southeastDim = southeast.preferredSize ();
        }
        topLeftCorner = new Point (left +
                          Math.max (northwestDim.width, southwestDim.width),
                          top + 
                          Math.max (northwestDim.height, northeastDim.height));
        topRightCorner = new Point (right -
                          Math.max (northeastDim.width, southeastDim.width), 
                          top +
                          Math.max (northwestDim.height, northeastDim.height));
        bottomLeftCorner = new Point (left + 
                          Math.max (northwestDim.width, southwestDim.width),
                          bottom - 
                          Math.max (southwestDim.height, southeastDim.height));
        bottomRightCorner = new Point (right  -
                          Math.max (northeastDim.width, southeastDim.width),
                          bottom - 
                          Math.max (southwestDim.height, southeastDim.height));
        if ((northwest != null) &amp;&amp; northwest.isVisible ()) {
            northwest.reshape (left, top,
                                left + topLeftCorner.x,
                                top + topLeftCorner.y);
        }
        if ((southwest != null) &amp;&amp; southwest.isVisible ()) {
            southwest.reshape (left, bottomLeftCorner.y,
                                bottomLeftCorner.x - left,
                                bottom - bottomLeftCorner.y);
       }
        if ((southeast != null) &amp;&amp; southeast.isVisible ()) {
            southeast.reshape (bottomRightCorner.x,
                        bottomRightCorner.y,
                        right - bottomRightCorner.x,
                        bottom - bottomRightCorner.y);
        }
        if ((northeast != null) &amp;&amp; northeast.isVisible ()) {
            northeast.reshape (topRightCorner.x, top,
                                right - topRightCorner.x,
                                topRightCorner.y);
        }
        if ((center != null) &amp;&amp; center.isVisible ()) {
            int x = topLeftCorner.x + hgap;
            int y = topLeftCorner.y + vgap;
            int width = bottomRightCorner.x - topLeftCorner.x - hgap * 2;
            int height = bottomRightCorner.y - topLeftCorner.y - vgap * 2;
            if (mode == CornerLayout.FULL_WIDTH) {
                x = left;
                width = right - left;
            } else if (mode == CornerLayout.FULL_HEIGHT) {
                y = top;
                height = bottom - top;
            }
            center.reshape (x, y, width, height);
        }
    }
</PRE>
</DIV>

<p class=para>
<tt class=literal>layoutContainer()</tt> does the 
real work: it positions and sizes the components in our layout. It starts 
by computing the region of the target container that we have to work with, 
which is essentially the size of the container minus the insets. The boundaries 
of the working area are stored in the variables <tt class=literal>top</tt>, <tt class=literal>bottom</tt>, <tt class=literal>left</tt>, and 
<tt class=literal>right</tt>. Next, we get the preferred sizes of all visible components and use 
them to compute the corners of the "Center" region; these are 
stored in the variables <tt class=literal>topLeftCorner</tt>, 
<tt class=literal>topRightCorner</tt>, <tt class=literal>bottomLeftCorner</tt>, 
and <tt class=literal>bottomRightCorner</tt>. 

<p class=para>
Once we've computed the location of the "Center" region, 
we can start placing the components in their respective corners. To do 
so, we simply check whether the component is visible; if it is, we call 
its <tt class=literal>reshape()</tt> method. After 
dealing with the corner components, we place the "Center" component, 
taking into account any gaps (<tt class=literal>hgap</tt> 
and <tt class=literal>vgap</tt>) and the layout's 
mode. If the mode is <tt class=literal>NORMAL</tt>, 
the center component occupies the region between the inner corners of the 
other components. If the mode is <tt class=literal>FULL_HEIGHT</tt>, 
it occupies the full height of the screen. If it is <tt class=literal>FULL_WIDTH</tt>, 
it occupies the full width of the screen. 

<div class=screen>
<p>
<pre>
    public String toString() {
        Sting str;
        switch (mode) {
            case FULL_HEIGHT: str = "tall"; break;
            case FULL_WIDTH: str = "wide"; break;
            default: str = "normal"; break;
        }
        return getClass().getName () + "[hgap=" + hgap + ",vgap=" + vgap + 
            ",mode="+str+"]";
    }
}
</PRE>
</DIV>

<p class=para>
<tt class=literal>toString()</tt> simply returns a 
string describing the layout. 

<p class=para>
Strictly speaking, there's no reason to update the <tt class=literal>CornerLayout</tt> 
for Java 1.1. Nothing about Java 1.1 says that new layout managers have 
to implement the <tt class=literal>LayoutManager2</tt> 
interface. However, implementing <tt class=literal>LayoutManager2</tt> 
isn't a bad idea, particularly since <tt class=literal>CornerLayout</tt> 
works with constraints; like <tt class=literal>BorderLayout</tt>, 
it has named regions. To extend <tt class=literal>CornerLayout</tt> 
so that it implements <tt class=literal>LayoutManager2</tt>, 
add the following code; we'll create a new <tt class=literal>CornerLayout2</tt>: 

<div class=screen>
<p>
<pre>
// Java 1.1 only
import java.awt.*;
public class CornerLayout2 extends CornerLayout implements LayoutManager2 {
    public void addLayoutComponent(Component comp, Object constraints) {
        if ((constraints == null) || (constraints instanceof String)) {
            addLayoutComponent((String)constraints, comp);
        } else {
            throw new IllegalArgumentException(
                  "cannot add to layout: constraint must be a string (or null)");
        }
    }
    public Dimension maximumLayoutSize(Container target) {
        return new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE);
    }
    public float getLayoutAlignmentX(Container parent) {
        return Component.CENTER_ALIGNMENT;
    }
    public float getLayoutAlignmentY(Container parent) {
        return Component.CENTER_ALIGNMENT;
    }
    public void invalidateLayout(Container target) {
    }
}
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_09.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch07_11.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Disabling the LayoutManager</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>The sun.awt Layout Collection</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
