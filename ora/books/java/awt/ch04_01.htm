<html>
<head>
<title>[Chapter 4] Events</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:30:23 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 4</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch04_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="JAWT-CH-4">4. Events</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
Java 1.0 Event Model<br>
<a href="ch04_02.htm">The Event Class</A><br>
<a href="ch04_03.htm">The Java 1.1 Event Model</A><br>

<p>
</DIV>

<p class=para>
This chapter covers Java's event-driven programming model. Unlike 
procedural programs, windows-based programs require an event-driven model 
in which the underlying environment tells your program when something happens. 
For example, when the user clicks on the mouse, the environment generates 
an event that it sends to the program. The program must then figure out 
what the mouse click means and act accordingly. 

<p class=para>
<a name="CH04.EVENTS"></A>This chapter covers two different event models, or ways of handling events. 
In Java 1.0.2 and earlier, events were passed to all components that could 
possibly have an interest in them. Events themselves were encapsulated 
in a single <tt class=literal>Event</tt> class. Java 
1.1 implements a "delegation" model, in which events are 
distributed only to objects that have been registered to receive the event. 
While this is somewhat more complex, it is much more efficient and also 
more flexible, because it allows any object to receive the events generated 
by a component. In turn, this means that you can separate the user interface 
itself from the event-handling code. 

<p class=para>
In the Java 1.1 event model, all event functionality is contained in a 
new package, <tt class=literal>java.awt.event</tt>. 
Within this package, subclasses of the abstract class <tt class=literal>AWTEvent</tt> 
represent different kinds of events. The package also includes a number 
of <tt class=literal>EventListener</tt> interfaces 
that are implemented by classes that want to receive different kinds of 
events; they define the methods that are called when events of the appropriate 
type occur. A number of adapter classes are also included; they correspond 
to the <tt class=literal>EventListener</tt> interfaces 
and provide null implementations 
of the methods in the corresponding listener. The adapter classes aren't 
essential but provide a convenient shortcut for developers; rather than 
declaring that your class implements a particular <tt class=literal>EventListener</tt> 
interface, you can declare that your class extends the appropriate adapter. 

<p class=para>
The old and new event models are incompatible. Although Java 1.1 supports 
both, you should not use both models in the same program. 

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-4-SECT-1">4.1 Java 1.0 Event Model</A></h2>

<p class=para>
<a name="CH04.JAVA1"></A><a name="CH04.JAVA4"></A>The event model used in versions 1.0 through 1.0.2 of Java is fairly simple. 
Upon receiving a user-initiated event, like a mouse click, the system generates 
an instance of the <tt class=literal>Event</tt> class 
and passes it along to the program. The program identifies the event's 
target (i.e., the component in which the event occurred) and asks that 
component to handle the event. If the target can't handle this event, 
an attempt is made to find a component that can, and the process repeats. 
That is all there is to it. Most of the work takes place behind the scenes; 
you don't have to worry about identifying potential targets or delivering 
events, except in a few special circumstances. Most Java programs only 
need to provide methods that deal with the specific events they care about. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-4-SECT-1.1">Identifying the Target</A></h3>

<p class=para>
All events occur within a Java <tt class=literal>Component</tt>. 
The program decides which component gets the event by starting at the outermost 
level and working in. In <a href="#JAWT-CH-4-FIG-1">Figure 4.1</A>, assume that 
the user clicks at the location (156, 70) within the enclosing <tt class=literal>Frame</tt>'s 
coordinate space. This action results in a call to the <tt class=literal>Frame</tt>'s 
<tt class=literal>deliverEvent()</tt> method, which 
determines which component within the frame should receive the event and 
calls that component's <tt class=literal>deliverEvent()</tt> 
method. In this case, the process continues until it reaches the <tt class=literal>Button</tt> 
labeled Blood, which occupies 
the rectangular space from (135, 60) to (181, 80). Blood doesn't 
contain any internal components, so it must be the component for which 
the event is intended. Therefore, an action event is delivered to Blood, 
with its coordinates translated to fit within the button's coordinate 
space--that is, the button receives an action event with the coordinates 
(21, 10). If the user clicked at the location (47, 96) within the Frame's 
coordinate space, the <tt class=literal>Frame</tt> 
itself would be the target of the event because there is no other component 
at this location. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-4-FIG-1">Figure 4.1: deliverEvent</A></h4>


<p>
<img align=middle src="figs/jawt0401.gif" alt="[Graphic: Figure 4-1]" width=185 height=185 border=0>

</DIV>

<p class=para>
To reach Blood, 
the event follows the component/container hierarchy shown 
in <a href="#JAWT-CH-4-FIG-2">Figure 4.2</A>. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-4-FIG-2">Figure 4.2: deliverEvent screen model</A></h4>


<p>
<img align=middle src="figs/jawt0402.gif" alt="[Graphic: Figure 4-2]" width=502 height=271 border=0>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-4-SECT-1.2">Dealing With Events</A></h3>

<p class=para>
<a name="CH04.HANDLE"></A>Once <tt class=literal>deliverEvent()</tt> identifies 
a target, it calls that target's <tt class=literal>handleEvent()</tt> 
method (in this case, the <tt class=literal>handleEvent()</tt> 
method of Blood) to deliver 
the event for processing. If Blood 
has not overridden <tt class=literal>handleEvent()</tt>, 
its default implementation would call Blood's 
<tt class=literal>action()</tt> method. If Blood 
has not overridden <tt class=literal>action()</tt>, 
its default implementation (which is inherited from <tt class=literal>Component</tt>) 
is executed and does nothing. For your program to respond to the event, 
you would have to provide your own implementation of <tt class=literal>action()</tt> 
or<tt class=literal> handleEvent()</tt>. 

<p class=para>
<tt class=literal>handleEvent() </tt>plays a particularly 
important role in the overall scheme. It is really a dispatcher, which 
looks at the type of event and calls an appropriate method to do the actual 
work: <tt class=literal>action()</tt> for action events, 
<tt class=literal>mouseUp()</tt> for mouse up events, 
and so on. <a href="#JAWT-CH-4-TAB-1">Table 4.1</A> shows the event-handler methods 
you would have to override when using the default <tt class=literal>handleEvent()</tt> 
implementation. If you create your own <tt class=literal>handleEvent()</tt>, 
either to handle an event without a default handler or to process events 
differently, it is best to leave these naming conventions in place. Whenever 
you override an event-handler method, it is a good idea to call the overridden 
method to ensure that you don't lose any functionality. All of the 
event handler methods return a boolean, which determines whether there is any further event processing; this is described in the next section, 
"Passing the Buck." 

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="JAWT-CH-4-TAB-1">Table 4.1: Event Types and Event Handlers</A></CAPTION>
<tr class=row>
<th align="left">Event Type</TH>
<th align="left">Event Handler</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>MOUSE_ENTER</tt></TD>
<td align="left"><tt class=literal>mouseEnter()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>MOUSE_EXIT</tt></TD>
<td align="left"><tt class=literal>mouseExit()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>MOUSE_MOVE</tt></TD>
<td align="left"><tt class=literal>mouseMove()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>MOUSE_DRAG</tt></TD>
<td align="left"><tt class=literal>mouseDrag()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>MOUSE_DOWN</tt></TD>
<td align="left"><tt class=literal>mouseDown()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>MOUSE_UP</tt></TD>
<td align="left"><tt class=literal>mouseUp()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>KEY_PRESS</tt></TD>
<td align="left"><tt class=literal>keyDown()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>KEY_ACTION</tt></TD>
<td align="left"><tt class=literal>keyDown()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>KEY_RELEASE</tt></TD>
<td align="left"><tt class=literal>keyUp()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>KEY_ACTION_RELEASE</tt></TD>
<td align="left"><tt class=literal>keyUp()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>GOT_FOCUS</tt></TD>
<td align="left"><tt class=literal>gotFocus()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>LOST_FOCUS</tt></TD>
<td align="left"><tt class=literal>lostFocus()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ACTION_EVENT</tt></TD>
<td align="left"><tt class=literal>action()</tt></TD>
</TR>
</TABLE>
<p>
</DIV>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-4-SECT-1.3">Passing the Buck</A></h3>

<p class=para>
In actuality, <tt class=literal>deliverEvent()</tt> 
does not call <tt class=literal>handleEvent()</tt> 
directly. It calls the <tt class=literal>postEvent()</tt> 
method of the target component. In turn, <tt class=literal>postEvent()</tt> 
manages the calls to <tt class=literal>handleEvent()</tt>. <tt class=literal>postEvent()</tt> provides this additional 
level of indirection to monitor the return value of <tt class=literal>handleEvent()</tt>. 
If the event handler returns <tt class=literal>true</tt>, 
the handler has dealt with the event completely. All processing has been 
completed, and the system can move on to the next event. If the event handler 
returns <tt class=literal>false</tt>, the handler 
has not completely processed the event, and <tt class=literal>postEvent()</tt> 
will contact the component's <tt class=literal>Container</tt> 
to finish processing the event. Using the screen in <a href="#JAWT-CH-4-FIG-1">Figure 4.1</A> 
as the basis, <a href="#JAWT-CH-4-EX-1">Example 4.1</A> traces the calls through 
<tt class=literal>deliverEvent()</tt>, <tt class=literal>postEvent()</tt>, 
and <tt class=literal>handleEvent()</tt>. The action 
starts when the user clicks on the Blood 
button at coordinates (156, 70). In short, Java dives into the depths of 
the screen's component hierarchy to find the target of the event 
(by way of the method <tt class=literal>deliverEvent()</tt>). 
Once it locates the target, it tries to find something to deal with the 
event by working its way back out (by way of <tt class=literal>postEvent()</tt>, 
<tt class=literal>handleEvent()</tt>, and the convenience 
methods). As you can see, there's a lot of overhead, even in this 
relatively simple example. When we discuss the Java 1.1 event model, 
you will see that it has much less overhead, primarily because it doesn't 
need to go looking for a component to process each event. 

<div class=example>
<h4 class=example><a class="TITLE" name="JAWT-CH-4-EX-1">Example 4.1: The deliverEvent, postEvent, and handleEvent Methods</A></h4>

<div class=screen>
<p>
<pre>
DeliverEvent.deliverEvent (Event e) called
    DeliverEvent.locate (e.x, e.y)
    Finds Panel1
    Translate Event Coordinates for Panel1
    Panel1.deliverEvent (Event e)
        Panel1.locate (e.x, e.y)
        Finds Panel3
        Translate Event Coordinates for Panel3
        Panel3.deliverEvent (Event e)
            Panel3.locate (e.x, e.y)
            Finds Blood
            Translate Event Coordinates for Blood
            Blood.deliverEvent (Event e)
                Blood.postEvent (Event e)
                    Blood.handleEvent (Event e)
                        Blood.mouseDown   (Event e, e.x, e.y)
                            returns false
                        return false
                    Get parent Container Panel3
                    Translate Event Coordinates for Panel3
                    Panel3.postEvent (Event e)
                        Panel3.handleEvent (Event e)
                            Component.mouseDown (Event e, e.x, e.y)
                                returns false
                            return false
                        Get parent Container Panel1
                        Translate Event Coordinates for Panel1
                        Panel1.postEvent (Event e)
                            Panel1.handleEvent (Event e)
                                Component.action (Event e, e.x, e.y)
                                    return false
                                return false
                            Get parent Container DeliverEvent
                            Translate Event Coordinates for DeliverEvent
                            DeliverEvent.postEvent (Event e)
                                DeliverEvent.handleEvent
                                    DeliverEvent.action (Event e, e.x, e.y)
                                        return true
                                    return true
                                return true
                            return true
                        return true
                    return true
                return true
            return true
        return true
    return true
</PRE>
</DIV>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-4-SECT-1.4">Overriding handleEvent()</A></h3>

<p class=para>
In many programs, you only need to override convenience methods like <tt class=literal>action()</tt> 
and <tt class=literal>mouseUp()</tt>; you usually 
don't need to override <tt class=literal>handleEvent()</tt>, 
which is the high level event handler that calls the convenience methods. 
However, convenience methods don't exist for all event types. To 
act upon an event that doesn't have a convenience method (for example, 
<tt class=literal>LIST_SELECT</tt>), you need to override 
<tt class=literal>handleEvent()</tt> itself. Unfortunately, 
this presents a problem. Unlike the convenience methods, for which the 
default versions don't take any action, <tt class=literal>handleEvent()</tt> 
does quite a lot: as we've seen, it's the dispatcher that calls 
the convenience methods. Therefore, when you override <tt class=literal>handleEvent()</tt>, 
either you should reimplement all the features of the method you are overriding 
(a very bad idea), or you must make sure that the original <tt class=literal>handleEvent()</tt>is 
still executed to ensure that the remaining events get handled properly. 
The simplest way for you to do this is for your new <tt class=literal>handleEvent()</tt> 
method to act on any events that it is interested in and return <tt class=literal>true</tt> 
if it has handled those events completely. If the incoming event is not 
an event that your <tt class=literal>handleEvent()</tt> 
is interested in, you should call <tt class=literal>super.handleEvent()</tt> 
and return its return value. The following code shows how you might override 
<tt class=literal>handleEvent()</tt> to deal with 
a <tt class=literal>LIST_SELECT</tt> event: 

<div class=screen>
<p>
<pre>
public boolean handleEvent (Event e) {
    if (e.id == Event.LIST_SELECT) {   // take care of LIST_SELECT
        System.out.println ("Selected item: " + e.arg);
        return true;    // LIST_SELECT handled completely; no further action
    } else {   // make sure we call the overridden method to ensure
                // that other events are handled correctly
        return super.handleEvent (e);
    }
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-4-SECT-1.5">Basic Event Handlers</A></h3>

<p class=para>
The convenience event handlers like <tt class=literal>mouseDown()</tt>, 
<tt class=literal>keyUp()</tt>, and <tt class=literal>lostFocus()</tt> 
are all implemented by the <tt class=literal>Component</tt> 
class. The default versions of these methods do nothing and return <tt class=literal>false</tt>. 
Because these methods do nothing by default, when overriding them you do 
not have to ensure that the overridden method gets called. This simplifies 
the programming task, since your method only needs to return <tt class=literal>false</tt> 
if it has not completely processed the event. However, if you start to 
subclass nonstandard components (for example, if someone has created a 
fancy <tt class=literal>AudioButton</tt>, and you're 
subclassing that, rather than the standard <tt class=literal>Button</tt>), 
you probably should explicitly call the overridden method. For example, 
if you are overriding <tt class=literal>mouseDown()</tt>, 
you should include a call to <tt class=literal>super.mouseDown()</tt>, 
just as we called <tt class=literal>super.handleEvent()</tt> 
in the previous example. This call is "good housekeeping"; 
most of the time, your program will work without it. However, your program 
will break as soon as someone changes the behavior of the <tt class=literal>AudioButton</tt> 
and adds some feature to its <tt class=literal>mouseDown()</tt> 
method. Calling the super class's event handler helps you write "bulletproof&nbsp;" 
code. 

<p class=para>
The code below overrides the <tt class=literal>mouseDown()</tt> 
method. I'm assuming that we're extending a standard component, 
rather than extending some custom component, and can therefore dispense 
with the call to <tt class=literal>super.mouseDown()</tt>. 

<div class=screen>
<p>
<pre>
public boolean mouseDown (Event e, int x, int y) {
    System.out.println ("Coordinates: " + x + "-" + y);
    if ((x &gt; 100) || (y &lt; 100))
        return false;    // we're not interested in this event; pass it on
    else                 // we're interested;
        ...              // this is where event-specific processing goes
        return true;     // no further event processing
}
</PRE>
</DIV>

<p class=para>
Here's a debugging hint: when overriding an event handler, make sure 
that the parameter types are correct--remember that each convenience method 
has different parameters. If your overriding method has parameters that 
don't match the original method, the program will still compile correctly. 
However, it won't work. Because the parameters don't match, 
your new method simply overloads the original, rather than overriding it. 
As a result, your method will never be called. 

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch04_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Using Desktop Colors</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>The Event Class</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
