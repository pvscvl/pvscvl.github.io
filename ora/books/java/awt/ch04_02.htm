<html>
<head>
<title>[Chapter 4] 4.2 The Event Class</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:30:30 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 4<br>Events</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch04_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-4-SECT-2">4.2 The Event Class</A></h2>

<p class=para>
<a name="CH04.EVENT2"></A>An instance of the <tt class=literal>Event</tt> class 
is a platform-independent representation that encapsulates the specifics 
of an event that happens within the Java 1.0 model. It contains everything 
you need to know about an event: who, what, when, where, and why the event 
happened. Note that the <tt class=literal>Event</tt> 
class is not used in the Java 1.1 event model; instead, Java 1.1 has an 
<tt class=literal>AWTEvent</tt> class, with subclasses 
for different event types. 

<p class=para>
When an event occurs, you decide whether or not to process the event. If 
you decide against reacting, the event passes through your program quickly 
without anything happening. If you decide to handle the event, you must 
deal with it quickly so the system can process the next event. If handling 
the event requires a lot of work, you should move the event-handling code 
into its own thread. That way, the system can process the next event while 
you go off and process the first. If you do not multithread your event 
processing, the system becomes slow and unresponsive and could lose events. 
A slow and unresponsive program frustrates users and may convince them 
to find another solution for their problems. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-4-SECT-2.1">Variables</A></h3>

<p class=para>
<tt class=literal>Event</tt> contains ten instance 
variables that offer all the specific information for a particular event. Instance variables

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Object arg </I><br>
<dd>

<p class=para>
The <tt class=literal>arg</tt> field contains some 
data regarding the event, to be interpreted by the recipient. For example, 
if the user presses Return 
within a <tt class=literal>TextField</tt>, an <tt class=literal>Event</tt> 
with an <tt class=literal>id</tt> of <tt class=literal>ACTION_EVENT</tt> 
is generated with the <tt class=literal>TextField</tt> 
as the <tt class=literal>target</tt> and the string 
within it as the <tt class=literal>arg</tt>. See a 
description of each specific event to find out what its <tt class=literal>arg</tt> 
means. 

<p>
<dt class=varlistentry><i class=emphasis>public int clickCount </I><br>
<dd>

<p class=para>
The <tt class=literal>clickCount</tt> field allows 
you to check for double clicking of the mouse. This field is relevant only 
for <tt class=literal>MOUSE_DOWN</tt> events. There 
is no way to specify the time delta used to determine how quick a double-click 
needs to be, nor is there a maximum value for <tt class=literal>clickCount</tt>. 
If a user quickly clicks the mouse four times, <tt class=literal>clickCount</tt> 
is four. Only the passage of a system-specific time delta will reset the 
value so that the next <tt class=literal>MOUSE_DOWN</tt> 
is the first click. The incrementing of <tt class=literal>clickCount</tt> 
does not care which mouse button is pressed. 

<p>
<dt class=varlistentry><i class=emphasis>public Event evt </I><br>
<dd>

<p class=para>
The <tt class=literal>evt</tt> field does not appear 
to be used anywhere but is available if you wish to pass around a linked 
list of events. Then your program can handle this event and tell the system 
to deal with the next one (as demonstrated in the following code), or you can 
process the entire chain yourself. </DL>
<div class=screen>
<p>
<pre>
public boolean mouseDown (Event e, int x, int y) {
    System.out.println ("Coordinates: " + x + "-" + y);
    if (e.evt != null)
        postEvent (e.evt);
    return true;
}
</PRE>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int id </I><br>
<dd>

<p class=para>
The <tt class=literal>id</tt> field of <tt class=literal>Event</tt> 
contains the identifier of the event. The system-generated events are the 
following <tt class=literal>Event</tt> constants:

<div class=simplelist>

<p>
<table border=0>
<tr>
<td><tt class=literal>WINDOW_DESTROY</tt></TD>
<td><tt class=literal>MOUSE_ENTER</tt></TD>
</TR>
<tr>
<td><tt class=literal>WINDOW_EXPOSE</tt></TD>
<td><tt class=literal>MOUSE_EXIT</tt></TD>
</TR>
<tr>
<td><tt class=literal>WINDOW_ICONIFY</tt></TD>
<td><tt class=literal>MOUSE_DRAG</tt></TD>
</TR>
<tr>
<td><tt class=literal>WINDOW_DEICONIFY</tt></TD>
<td><tt class=literal>SCROLL_LINE_UP</tt></TD>
</TR>
<tr>
<td><tt class=literal>KEY_PRESS</tt></TD>
<td><tt class=literal>SCROLL_LINE_DOWN</tt></TD>
</TR>
<tr>
<td><tt class=literal>KEY_RELEASE</tt></TD>
<td><tt class=literal>SCROLL_PAGE_UP</tt></TD>
</TR>
<tr>
<td><tt class=literal>KEY_ACTION</tt></TD>
<td><tt class=literal>SCROLL_PAGE_DOWN</tt></TD>
</TR>
<tr>
<td><tt class=literal>KEY_ACTION_RELEASE</tt></TD>
<td><tt class=literal>SCROLL_ABSOLUTE</tt></TD>
</TR>
<tr>
<td><tt class=literal>MOUSE_DOWN</tt></TD>
<td><tt class=literal>LIST_SELECT</tt></TD>
</TR>
<tr>
<td><tt class=literal>MOUSE_UP</tt></TD>
<td><tt class=literal>LIST_DESELECT</tt></TD>
</TR>
<tr>
<td><tt class=literal>MOUSE_MOVE</tt></TD>
<td><tt class=literal>ACTION_EVENT</tt></TD>
</TR>
</TABLE>

</DIV>

<p class=para>
As a user, 
you can create your own event types and store your own unique event ID 
here. In Java 1.0, there is no formal way to prevent conflicts between your events and system events, but using a negative IO is a good ad-hoc method. It is up to you to check all the user events generated 
in your program in order to avoid conflicts among user events. 

<p>
<dt class=varlistentry><i class=emphasis>public int key </I><br>
<dd>

<p class=para>
For keyboard-related events, the <tt class=literal>key</tt> 
field contains the integer representation of the keyboard element that 
caused the event. Constants are available for the keypad keys. To 
examine <tt class=literal>key</tt> as a character, 
just cast it to a <tt class=literal>char</tt>. For 
nonkeyboard-related events, the value is zero. 

<p>
<dt class=varlistentry><i class=emphasis>pubic int modifiers </I><br>
<dd>

<p class=para>
The <tt class=literal>modifiers</tt> field shows the 
state of the modifier keys when the event happened. A flag is set for each 
modifier key pressed by the user when the event happened. Modifier keys 
are Shift, Control, Alt, and Meta. Since the middle and right mouse key 
are indicated in a Java event by a modifier key, one reason to use the 
<tt class=literal>modifiers</tt> field is to determine 
which mouse button triggered an event. See <a href="#JAWT-CH-4-SECT-2.4">Working With Mouse Buttons in Java 1.0</A> 
for an example. 

<p>
<dt class=varlistentry><i class=emphasis>public Object target </I><br>
<dd>

<p class=para>
The <tt class=literal>target</tt> field contains a 
reference to the object that is the cause of the event. For example, if 
the user selects a button, the button is the target of the event. If the 
user moves the mouse into a <tt class=literal>Frame</tt>, 
the <tt class=literal>Frame</tt> is the target. The 
<tt class=literal>target</tt> indicates where the 
event happened, not the component that is dealing with it. 

<p>
<dt class=varlistentry><i class=emphasis>public long when </I><br>
<dd>

<p class=para>
The <tt class=literal>when</tt> field contains the 
time of the event in milliseconds. The following code converts this
<tt class=literal>long</tt> value to a <tt class=literal>Date</tt> 
to examine its contents: </DL>
<div class=screen>
<p>
<pre>
Date d = new Date (e.when);
</PRE>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int x </I><br><i class=emphasis>public int y </I><br>
<dd>

<p class=para>
The <tt class=literal>x</tt> and <tt class=literal>y</tt> 
fields show the coordinates where the event happened. The coordinates are 
always relative to the top left corner of the target of the event and get 
translated based on the top left corner of the container as the event gets 
passed through the containing components. (See the previous <a href="ch04_01.htm">Identifying the Target</A> for an example 
of this translation.) It is possible for either or both of these to be 
outside the coordinate space of the applet (e.g., if user quickly moves 
the mouse outside the applet). </DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-4-SECT-2.2">Constants</A></h3>

<p class=para>
<a name="CH04.CONST"></A>Numerous constants are provided with the <tt class=literal>Event</tt> 
class. Several designate which event happened (the why). Others are available 
to help in determining the function key a user pressed (the what). And 
yet more are available to make your life easier. 

<p class=para>
When the system generates an event, it calls a handler method for it. To 
deal with the event, you have to override the appropriate method. The different 
event type sections describe which methods you override. Key constants

<p class=para>
These constants are set when a user presses a key. Most of them correspond 
to function and keypad keys; since such keys are generally used to invoke 
an action from the program or the system, Java calls them <i class=emphasis>action 
keys</I> and causes them to generate a 
different <tt class=literal>Event</tt> type (<tt class=literal>KEY_ACTION</tt>) 
from regular alphanumeric keys (<tt class=literal>KEY_PRESS</tt>). 

<p class=para>
<a href="#JAWT-CH-4-TAB-2">Table 4.2</A> shows the constants used to represent 
keys and the event type that uses each constant. The values, which are 
all declared <tt class=literal>public static final int</tt>, 
appear in the <tt class=literal>key </tt>variable 
of the event instance. A few keys represent ASCII characters that have 
string equivalents such as <tt class=literal>\n</tt>. 
Black stars (<img src="gifs/bstar.gif" alt="(New)" border=0>) mark the constants that are new in Java 1.1; they can be used 
with the 1.0 event model, provided that you are running Java 1.1. Java 
1.1 events use a different set of key constants defined in the <tt class=literal>KeyEvent</tt> 
class. 

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="JAWT-CH-4-TAB-2">Table 4.2: Constants for Keys in Java 1.0</A></CAPTION>
<tr class=row>
<th align="left">Constant</TH>
<th align="LEFT">Event Type</TH>
<th align="LEFT">&nbsp;</TH>
<th align="left">Constant</TH>
<th align="left">Event Type</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>HOME</tt></TD>
<td align="LEFT"><tt class=literal>KEY_ACTION</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="left"><tt class=literal>F9</tt></TD>
<td align="left"><tt class=literal>KEY_ACTION</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>END</tt></TD>
<td align="LEFT"><tt class=literal>KEY_ACTION</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="left"><tt class=literal>F10</tt></TD>
<td align="left"><tt class=literal>KEY_ACTION</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>PGUP</tt></TD>
<td align="LEFT"><tt class=literal>KEY_ACTION</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="left"><tt class=literal>F11</tt></TD>
<td align="left"><tt class=literal>KEY_ACTION</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>PGDN</tt></TD>
<td align="LEFT"><tt class=literal>KEY_ACTION</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="left"><tt class=literal>F12</tt></TD>
<td align="left"><tt class=literal>KEY_ACTION</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>UP</tt></TD>
<td align="LEFT"><tt class=literal>KEY_ACTION</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="left"><tt class=literal>PRINT_SCREEN<img src="gifs/bstar.gif" alt="(New)" border=0></tt></TD>
<td align="left"><tt class=literal>KEY_ACTION</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>DOWN</tt></TD>
<td align="LEFT"><tt class=literal>KEY_ACTION</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="left"><tt class=literal>SCROLL_LOCK<img src="gifs/bstar.gif" alt="(New)" border=0></tt></TD>
<td align="left"><tt class=literal>KEY_ACTION</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>LEFT</tt></TD>
<td align="LEFT"><tt class=literal>KEY_ACTION</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="left"><tt class=literal>CAPS_LOCK<img src="gifs/bstar.gif" alt="(New)" border=0></tt></TD>
<td align="left"><tt class=literal>KEY_ACTION</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>RIGHT</tt></TD>
<td align="LEFT"><tt class=literal>KEY_ACTION</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="left"><tt class=literal>NUM_LOCK<img src="gifs/bstar.gif" alt="(New)" border=0></tt></TD>
<td align="left"><tt class=literal>KEY_ACTION</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>F1</tt></TD>
<td align="LEFT"><tt class=literal>KEY_ACTION</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="left"><tt class=literal>PAUSE<img src="gifs/bstar.gif" alt="(New)" border=0></tt></TD>
<td align="left"><tt class=literal>KEY_ACTION</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>F2</tt></TD>
<td align="LEFT"><tt class=literal>KEY_ACTION</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="left"><tt class=literal>INSERT<img src="gifs/bstar.gif" alt="(New)" border=0></tt></TD>
<td align="left"><tt class=literal>KEY_ACTION</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>F3</tt></TD>
<td align="LEFT"><tt class=literal>KEY_ACTION</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="left"><tt class=literal>ENTER</tt> (<tt class=literal>\n</tt>)<img src="gifs/bstar.gif" alt="(New)" border=0></TD>
<td align="left"><tt class=literal>KEY_PRESS</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>F4</tt></TD>
<td align="LEFT"><tt class=literal>KEY_ACTION</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="left"><tt class=literal>BACK_SPACE</tt> (<tt class=literal>\b</tt>)<img src="gifs/bstar.gif" alt="(New)" border=0></TD>
<td align="left"><tt class=literal>KEY_PRESS</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>F5</tt></TD>
<td align="LEFT"><tt class=literal>KEY_ACTION</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="left"><tt class=literal>TAB</tt> (<tt class=literal>\t</tt>)<img src="gifs/bstar.gif" alt="(New)" border=0></TD>
<td align="left"><tt class=literal>KEY_PRESS</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>F6</tt></TD>
<td align="LEFT"><tt class=literal>KEY_ACTION</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="left"><tt class=literal>ESCAPE<img src="gifs/bstar.gif" alt="(New)" border=0></tt></TD>
<td align="left"><tt class=literal>KEY_PRESS</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>F7</tt></TD>
<td align="LEFT"><tt class=literal>KEY_ACTION</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="left"><tt class=literal>DELETE<img src="gifs/bstar.gif" alt="(New)" border=0></tt></TD>
<td align="left"><tt class=literal>KEY_PRESS</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>F8</tt></TD>
<td align="LEFT"><tt class=literal>KEY_ACTION</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
</TR>
</TABLE>
<p>
</DIV>
Modifiers

<p class=para>
Modifiers are keys like Shift, Control, Alt, or Meta. When a user presses 
any key or mouse button that generates an <tt class=literal>Event</tt>, 
the <tt class=literal>modifiers</tt> field of the 
<tt class=literal>Event</tt> instance is set. You 
can check whether any modifier key was pressed by ANDing its constant with 
the <tt class=literal>modifiers</tt> field. If multiple 
modifier keys were down at the time the event occurred, the constants for 
the different modifiers are ORed together in the field. 

<div class=simplelist>

<p>
<tt class=literal>public static final int ALT_MASK</tt><br>
<tt class=literal>public static final int CTRL_MASK</tt><br>
<tt class=literal>public static final int META_MASK</tt><br>
<tt class=literal>public static final int SHIFT_MASK</tt><br>
</DIV>

<p class=para>
When reporting a mouse event, the system automatically sets the <tt class=literal>modifiers</tt> 
field. Since Java is advertised as supporting the single-button mouse model, 
all buttons generate the same mouse events, and the system uses the <tt class=literal>modifiers</tt> 
field to differentiate between mouse buttons. That way, a user with a one- 
or two-button mouse can simulate a three-button mouse by clicking on his 
mouse while holding down a modifier key. <a href="#JAWT-CH-4-TAB-3">Table 4.3</A> 
lists the mouse modifier keys; an applet in <a href="#JAWT-CH-4-SECT-2.4">Working With Mouse Buttons in Java 1.0</A>
demonstrates how to differentiate between mouse buttons. 

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="JAWT-CH-4-TAB-3">Table 4.3: Mouse Button Modifier Keys</A></CAPTION>
<tr class=row>
<th align="left">Mouse Button</TH>
<th align="left">Modifier Key</TH>
</TR>
<tr class=row>
<td align="left">Left mouse button</TD>
<td align="left">None</TD>
</TR>
<tr class=row>
<td align="left">Middle mouse button</TD>
<td align="left"><tt class=literal>ALT_MASK</tt></TD>
</TR>
<tr class=row>
<td align="left">Right mouse button</TD>
<td align="left"><tt class=literal>META_MASK</tt></TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
For example, if you have a three-button mouse, and click the right button, 
Java generates some kind of mouse event with the <tt class=literal>META_MASK</tt> 
set in the <tt class=literal>modifiers</tt> 
field. If you have a one-button mouse, you can generate the same event 
by clicking the mouse while depressing the Meta key. 

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
If you have a multibutton mouse and do an Alt+right 
mouse or Meta+left mouse, the results are platform specific. You should get a mouse event with two masks set.
</blockquote><p>
</DIV>

Key events

<p class=para>
The component peers deliver separate key events when a user presses and 
releases nearly any key. <tt class=literal>KEY_ACTION</tt> 
and <tt class=literal>KEY_ACTION_RELEASE</tt> are 
for the function and arrow keys, while <tt class=literal>KEY_PRESS</tt> 
and <tt class=literal>KEY_RELEASE</tt> are for the 
remaining control and alphanumeric keys. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static final int KEY_ACTION </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>KEY_ACTION</tt> 
event when the user presses a function or keypad key. The default <tt class=literal>Component.handleEvent()</tt> 
method calls the <tt class=literal>keyDown()</tt> 
method for this event. If the user holds down the key, this event is generated 
multiple times. If you are using the 1.1 event model, the interface method <tt class=literal>KeyListener.keyPressed()</tt> 
handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int KEY_ACTION_RELEASE </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>KEY_ACTION_RELEASE</tt> 
event when the user releases a function or keypad key. The default <tt class=literal>handleEvent()</tt> 
method for <tt class=literal>Component</tt> calls 
the <tt class=literal>keyUp()</tt> method for this 
event. If you are using the 1.1 event model, the <tt class=literal>KeyListener.keyReleased()</tt> 
interface method handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int KEY_PRESS </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>KEY_PRESS</tt> 
event when the user presses an ordinary key. The default <tt class=literal>Component.handleEvent()</tt> 
method calls the <tt class=literal>keyDown()</tt> 
method for this event. Holding down the key causes multiple <tt class=literal>KEY_PRESS</tt> 
events to be generated. If you are using the 1.1 event model, the interface method <tt class=literal>KeyListener.keyPressed()</tt> 
handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int KEY_RELEASE </I><br>
<dd>

<p class=para>
The peers deliver <tt class=literal>KEY_RELEASE</tt> 
events when the user releases an ordinary key. The default <tt class=literal>handleEvent()</tt> 
method for <tt class=literal>Component</tt> calls 
the <tt class=literal>keyUp()</tt> method for this 
event. If you are using the 1.1 event model, the interface method <tt class=literal>KeyListener.keyReleased()</tt> 
 handles this event. </DL>
<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
If you want to capture arrow and keypad keys under the X Window System, 
make sure the key codes are set up properly, using the <i class=emphasis>xmodmap</I> 
command. 
</blockquote><p>
</DIV>

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
Some platforms generate events for the modifier keys by themselves, 
whereas other platforms require modifier keys to be pressed with another 
key. For example, on a Windows 95 platform, if Ctrl+A is pressed, 
you would expect one <tt class=literal>KEY_PRESS</tt> 
and one <tt class=literal>KEY_RELEASE</tt>. However, 
there is a second <tt class=literal>KEY_RELEASE</tt> 
for the Control key. Under Motif, you get only a single <tt class=literal>KEY_RELEASE</tt>. 
</blockquote><p>
</DIV>

Window events

<p class=para>
Window events happen only for components that are children of <tt class=literal>Window</tt>. 
Several of these events are available only on certain platforms. Like other 
event types, the <tt class=literal>id</tt> variable 
holds the value of the specific event instance. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static final int WINDOW_DESTROY </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>WINDOW_DESTROY</tt> 
event whenever the system tells a window to destroy itself. This is usually 
done when the user selects the window manager's Close or Quit window 
menu option. By default, <tt class=literal>Frame </tt>instances 
do not deal with this event, and you must remember to catch it yourself. 
If you are using the 1.1 event model, the <tt class=literal>WindowListener.windowClosing()</tt> 
interface method handles this event.

<p>
<dt class=varlistentry><i class=emphasis>public static final int WINDOW_EXPOSE </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>WINDOW_EXPOSE</tt> 
event whenever all or part of a window becomes visible. To find out what 
part of the window has become uncovered, use the <tt class=literal>getClipRect()</tt> method 
(or <tt class=literal>getClipBounds()</tt> in Java version 
1.1) of the <tt class=literal>Graphics</tt> parameter 
to the <tt class=literal>paint()</tt> method. If you 
are using the 1.1 event model, the <tt class=literal>WindowListener.windowOpening()</tt> 
interface method most closely corresponds to the handling of this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int WINDOW_ICONIFY </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>WINDOW_ICONIFY</tt> 
event when the user iconifies the window. If you are using the 1.1 event 
model, the interface method <tt class=literal>WindowListener.windowIconified()</tt> 
 handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int WINDOW_DEICONIFY </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>WINDOW_DEICONIFY</tt> 
event when the user de-iconifies the window. If you are using the 1.1 event 
model, the interface method <tt class=literal>WindowListener.windowDeiconified()</tt> 
handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int WINDOW_MOVED </I><br>
<dd>

<p class=para>
The <tt class=literal>WINDOW_MOVED</tt> event signifies 
that the user has moved the window. If you are using the 1.1 event model, 
the <tt class=literal>ComponentListener.componentMoved()</tt> 
interface method handles this event. </DL>
Mouse events

<p class=para>
The component peers deliver mouse events when a user presses or releases 
a mouse button. Events are also delivered whenever the mouse moves. In 
order to be platform independent, Java pretends that all mice have a single 
button. If you press the second or third button, Java generates a regular 
mouse event but sets the event's <tt class=literal>modifers</tt> 
field with a flag that indicates which button was pressed. If you press 
the left button, no <tt class=literal>modifiers</tt> 
flags are set. Pressing the center button sets the <tt class=literal>ALT_MASK</tt> 
flag; pressing the right button sets the <tt class=literal>META_MASK</tt> 
flag. Therefore, you can determine which mouse button was pressed by looking 
at the <tt class=literal>Event.modifiers</tt> attribute. 
Furthermore, users with a one-button or two-button mouse can generate the 
same events by pressing a mouse button while holding down the Alt or Meta 
keys. 

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
Early releases of Java (1.0.2 and earlier) only propagated mouse events 
from <tt class=literal>Canvas</tt> and <tt class=literal>Container</tt> 
objects. With the 1.1 event model, the events that different components 
process are better defined. 
</blockquote><p>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static final int MOUSE_DOWN </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>MOUSE_DOWN</tt> 
event when the user presses any mouse button. This action must occur over 
a component that passes along the <tt class=literal>MOUSE_DOWN</tt> 
event. The default <tt class=literal>Component.handleEvent()</tt> 
method calls the <tt class=literal>mouseDown()</tt> 
method for this event. If you are using the 1.1 event model, the <tt class=literal>MouseListener.mousePressed()</tt> 
interface method handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int MOUSE_UP </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>MOUSE_UP</tt> 
event when the user releases the mouse button. This action must occur over 
a component that passes along the <tt class=literal>MOUSE_UP</tt> 
event. The default <tt class=literal>handleEvent()</tt> 
method for <tt class=literal>Component</tt> calls 
the <tt class=literal>mouseUp()</tt> method for this 
event. If you are using the 1.1 event model, the interface method <tt class=literal>MouseListener.mouseReleased()</tt> 
 handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int MOUSE_MOVE </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>MOUSE_MOVE</tt> 
event whenever the user moves the mouse over any part of the applet. This 
can happen many, many times more than you want to track, so make sure you 
really want to do something with this event before trying to capture it. 
(You can also capture <tt class=literal>MOUSE_MOVE</tt> 
events and without losing much, choose to deal with only every third or fourth movement.) The default <tt class=literal>handleEvent()</tt> 
method calls the <tt class=literal>mouseMove()</tt> 
method for the event. If you are using the 1.1 event model, the interface method <tt class=literal>MouseMotionListener.mouseMoved()</tt> 
handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int MOUSE_DRAG </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>MOUSE_DRAG</tt> 
event whenever the user moves the mouse over any part of the applet with 
a mouse button depressed. The default method <tt class=literal>handleEvent()</tt> 
 calls the <tt class=literal>mouseDrag()</tt> 
method for the event. If you are using the 1.1 event model, the interface method <tt class=literal>MouseMotionListener.mouseDragged()</tt> 
 handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int MOUSE_ENTER </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>MOUSE_ENTER</tt> 
event whenever the cursor enters a component. The default <tt class=literal>handleEvent()</tt> 
method calls the <tt class=literal>mouseEnter()</tt> 
method for the event. If you are using the 1.1 event model, the interface method <tt class=literal>MouseListener.mouseEntered()</tt> 
 handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int MOUSE_EXIT </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>MOUSE_EXIT</tt> 
event whenever the cursor leaves a component. The default <tt class=literal>handleEvent()</tt> 
method calls the <tt class=literal>mouseExit()</tt> 
method for the event. If you are using the 1.1 event model, the interface method <tt class=literal>MouseListener.mouseExited()</tt> 
 handles this event. </DL>
Scrolling events

<p class=para>
The peers deliver scrolling events for the <tt class=literal>Scrollbar</tt> 
component. The objects that have a built-in scrollbar (like <tt class=literal>List</tt>, 
<tt class=literal>ScrollPane</tt>, and <tt class=literal>TextArea</tt>) 
do not generate these events. No default methods are called for any of 
the scrolling events. They must be dealt with in the <tt class=literal>handleEvent()</tt> 
method of the <tt class=literal>Container</tt> or a subclass of the <tt class=literal>Scrollbar</tt>. You can determine 
which particular event occurred by checking the <tt class=literal>id</tt> 
variable of the event, and find out the new position of the thumb by looking 
at the <tt class=literal>arg</tt> variable or calling 
<tt class=literal>getValue()</tt> on the scrollbar. 
See also the description of the <tt class=literal>AdjustmentListener</tt> 
interface later in this chapter. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static final int SCROLL_LINE_UP </I><br>
<dd>

<p class=para>
The scrollbar peers deliver the <tt class=literal>SCROLL_LINE_UP</tt> 
event when the user presses the arrow pointing up for the vertical scrollbar 
or the arrow pointing left for the horizontal scrollbar. This decreases 
the scrollbar setting by one back toward the minimum value. If you are 
using the 1.1 event model, the interface method <tt class=literal>AdjustmentListener.adjustmentValueChanged()</tt>
 handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int SCROLL_LINE_DOWN </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>SCROLL_LINE_DOWN</tt> 
event when the user presses the arrow pointing down for the vertical scrollbar 
or the arrow pointing right for the horizontal scrollbar. This increases 
the scrollbar setting by one toward the maximum value. If you are using 
the 1.1 event model, the interface method <tt class=literal>AdjustmentListener.adjustmentValueChanged()</tt> 
 handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int SCROLL_PAGE_UP </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>SCROLL_PAGE_UP</tt> 
event when the user presses the mouse with the cursor in the area between the slider and 
the decrease arrow. This decreases the scrollbar setting by the paging 
increment, which defaults to 10, back toward the minimum value. If you 
are using the 1.1 event model, the interface method <tt class=literal>AdjustmentListener.adjustmentValueChanged()</tt> 
handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int SCROLL_PAGE_DOWN </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>SCROLL_PAGE_DOWN</tt> 
event when the user presses the mouse with the cursor in the area between the slider and 
the increase arrow. This increases the scrollbar setting by the paging 
increment, which defaults to 10, toward the maximum value. If you are 
using the 1.1 event model, the interface method <tt class=literal>AdjustmentListener.adjustmentValueChanged()</tt> 
 handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int SCROLL_ABSOLUTE </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>SCROLL_ABSOLUTE</tt> 
event when the user drags the slider part of the scrollbar. 
There is no set time period or distance between multiple <tt class=literal>SCROLL_ABSOLUTE</tt> 
events. If you are using the Java version 1.1 event model, the <tt class=literal>AdjustmentListener.adjustmentValueChanged()</tt> 
interface method handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int SCROLL_BEGIN <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>SCROLL_BEGIN</tt> event is not 
delivered by peers, but you may wish to use it to signify when a user drags 
the slider at the beginning of a series of <tt class=literal>SCROLL_ABSOLUTE</tt> 
events. <tt class=literal>SCROLL_END</tt>, described next, would 
then be used to signify the end of the series. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int SCROLL_END <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>SCROLL_END</tt> event is not 
delivered by peers, but you may wish to use it to signify when a user drags 
the slider at the end of a series of <tt class=literal>SCROLL_ABSOLUTE</tt> 
events. <tt class=literal>SCROLL_BEGIN</tt>, described previously,
would have been used to signify the beginning of the series. </DL>
List events

<p class=para>
Two events specific to the <tt class=literal>List</tt> 
class are passed along by the peers. They signify when the user has selected 
or deselected a specific choice in the <tt class=literal>List</tt>. 
It is not ordinarily necessary to capture these events, because the peers 
deliver the <tt class=literal>ACTION_EVENT</tt> when 
the user double-clicks on a specific item in the <tt class=literal>List</tt> 
and it is this <tt class=literal>ACTION_EVENT</tt> 
that triggers something to happen. However, if there is reason to do something 
when the user has just single-clicked on a choice, these events may be 
useful. An example of how they would prove useful is if you are displaying 
a list of filenames with the ability to preview files before loading. Single 
selection would preview, double-click would load, and deselect would stop 
previewing. 

<p class=para>
No default methods are called for any of the list events. They must be 
dealt with in the <tt class=literal>handleEvent()</tt> 
method of the <tt class=literal>Container</tt> of 
the <tt class=literal>List</tt> or a subclass of the 
<tt class=literal>List</tt>. You can determine which 
particular event occurred by checking the <tt class=literal>id</tt> 
variable of the event. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static final int LIST_SELECT </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>LIST_SELECT</tt> 
event when the user selects an item in a <tt class=literal>List</tt>. 
If you are using the 1.1 event model, the interface method <tt class=literal>ItemListener.itemStateChanged()</tt> 
handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int LIST_DESELECT </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>LIST_DESELECT</tt> 
event when an item in a <tt class=literal>List</tt> 
has been deselected. This is generated only if the <tt class=literal>List</tt> 
permits multiple selections. If you are using the 1.1 event model, the 
<tt class=literal>ItemListener.itemStateChanged()</tt> 
interface method handles this event. </DL>
Focus events

<p class=para>
The peers deliver focus events when a component gains (<tt class=literal>GOT_FOCUS</tt>) 
or loses (<tt class=literal>LOST_FOCUS</tt>) the input 
focus. No default methods are called for the focus events. They must be 
dealt with in the <tt class=literal>handleEvent()</tt> 
method of the <tt class=literal>Container</tt> of 
the component or a subclass of the component. You can determine which particular 
event occurred by checking the <tt class=literal>id</tt> 
variable of the event. 

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
Early releases of Java (1.0.2 and before) did not propagate focus 
events on all platforms. This is fixed in release 1.1 of Java. Still, 
you should avoid capturing focus events if you want to write portable 1.0 
code. 
</blockquote><p>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static final int GOT_FOCUS </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>GOT_FOCUS</tt> 
event when a component gets the input focus. If you are using the 1.1 event 
model, the <tt class=literal>FocusListener.focusGained()</tt> 
interface method handles this event. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int LOST_FOCUS </I><br>
<dd>

<p class=para>
The peers deliver the <tt class=literal>LOST_FOCUS</tt> 
event when a component loses the input focus. If you are using the 1.1 
event model, the <tt class=literal>FocusListener.focusLost()</tt> 
interface method handles this event. </DL>
FileDialog events

<p class=para>
The <tt class=literal>FileDialog</tt> events are another 
set of nonportable events. Ordinarily, the <tt class=literal>FileDialog</tt> 
events are completely dealt with by the system, and you never see them. 
Refer to <a href="ch06_01.htm">Chapter 6, <i>Containers</i></A> for exactly how to work with the <tt class=literal>FileDialog</tt> 
object. If you decide to create a generic <tt class=literal>FileDialog</tt> 
object, you can use these events to indicate file loading and saving. These 
constants would be used in the <tt class=literal>id</tt> 
variable of the specific event instance: 

<div class=simplelist>

<p>
<i class=emphasis>public static final int LOAD_FILE</I><br>
<i class=emphasis>public static final int SAVE_FILE</I><br>
</DIV>

Miscellaneous events

<p class=para>
<tt class=literal>ACTION_EVENT</tt> is probably the 
event you deal with most frequently. It is generated when the user performs 
the desired action for a specific component type (e.g., when a user selects 
a button or toggles a checkbox). This constant would be found in the <tt class=literal>id</tt> 
variable of the specific event instance.

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static final int ACTION_EVENT </I><br>
<dd>

<p class=para>
The circumstances that lead to the peers delivering the <tt class=literal>ACTION_EVENT</tt> 
event depend upon the component that is the target of the event and the 
user's platform. Although the event can be passed along differently 
on different platforms, users will be accustomed to how the peers work 
on their specific platforms and will not care that it is different on the 
other platforms. For example, a Java 1.0 <tt class=literal>List</tt> 
component on a Microsoft Windows platform allows the user to select an 
item by pressing the first letter of the choice, whereupon the <tt class=literal>List</tt> 
tries to find an item that starts with the letter. The X Window System 
<tt class=literal>List</tt> component does not provide 
this capability. It works like a normal X <tt class=literal>List</tt>, 
where the user must scroll to locate the item and then select it. 

<p class=para>
When the <tt class=literal>ACTION_EVENT</tt> is generated, 
the <tt class=literal>arg</tt> variable of the specific 
<tt class=literal>Event</tt> instance is set based 
upon the component type. In Chapters 5-11, which describe Java's GUI components, the description of each component contains an "Events" subsection that describes the value of the event's <tt class=literal>arg</tt> field. If you are using the 
1.1 event model, the <tt class=literal>ActionListener.actionPerformed()</tt> 
and <tt class=literal>ItemListener.itemStateChanged()</tt> 
interface methods handle this event, depending upon the component type. </DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-4-SECT-2.3">Event Methods</A></h3><a name="CH04.METH"></A>Constructors

<p class=para>
Ordinarily, the peers deliver all your events for you. However, if you are 
creating your own components or want to communicate across threads, it 
may be necessary to create your own events. You can also create your own 
events to notify your component's container of application-specific occurrences. 
For example, if you were implementing your own tab sequencing for text 
fields, you could create a "next text field" event to tell your container 
to move to the next text field. Once you create the event, you send it 
through the system using the <tt class=literal>Component.postEvent()</tt> 
method. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Event (Object target, long when, int id, int x, int y, int key, 
int modifiers, Object arg) </I><br>
<dd>

<p class=para>
The first version of the constructor is the most complete and is what the 
other two call. It initializes all the fields of the <tt class=literal>Event</tt> 
to the parameters passed and sets <tt class=literal>clickCount</tt> 
to 0. See the descriptions of the instance variables <a href="#JAWT-CH-4-SECT-2.1">Variables</A> 
for the meanings of the arguments. 

<p>
<dt class=varlistentry><i class=emphasis>public Event (Object target, long when, int id, int x, int y, int key, 
int modifiers) </I><br>
<dd>

<p class=para>
The second constructor version calls the first with <tt class=literal>arg</tt> 
set to null. 

<p>
<dt class=varlistentry><i class=emphasis>public Event (Object target, int id, Object arg) </I><br>
<dd>

<p class=para>
The final version calls the first constructor with the <tt class=literal>when</tt>, 
<tt class=literal>x</tt>, <tt class=literal>y</tt>, 
<tt class=literal>key</tt>, and <tt class=literal>modifiers</tt> 
parameters set to 0. </DL>
Modifier methods

<p class=para>
The modifier methods check to see if the different modifier mask values 
are set. They report the state of each modifier key at the moment an event 
occurred. It is possible for multiple masks to be set if multiple modifiers 
are pressed when the event occurs. 

<p class=para>
There is no <tt class=literal>altDown()</tt> method; 
to check whether the Alt key is pressed you must directly compare the event's 
<tt class=literal>modifiers</tt> against the <tt class=literal>Event.ALT_MASK</tt> 
constant. The <tt class=literal>metaDown()</tt> method 
is helpful when dealing with mouse events to see if the user pressed the 
right mouse button. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public boolean shiftDown () </I><br>
<dd>

<p class=para>
The <tt class=literal>shiftDown()</tt> method returns 
<tt class=literal>true</tt> if the Shift key was pressed and <tt class=literal>false</tt> otherwise. There is no way 
to differentiate left and right shift keys. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean controlDown () </I><br>
<dd>

<p class=para>
The <tt class=literal>controlDown()</tt> method returns 
<tt class=literal>true</tt> if the Control key was pressed and <tt class=literal>false</tt> otherwise. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean metaDown () </I><br>
<dd>

<p class=para>
The <tt class=literal>metaDown()</tt> method returns 
<tt class=literal>true</tt> if the Meta key was pressed and <tt class=literal>false</tt> otherwise. </DL>
Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void translate (int x, int y)</I><br>
<dd>

<p class=para>
The <tt class=literal>translate()</tt> method translates 
the x and y coordinates of the <tt class=literal>Event</tt> 
instance by <tt class=literal>x</tt> and <tt class=literal>y</tt>. 
The system does this so that the coordinates of the event are relative 
to the component receiving the event, rather than the container of the 
component. The system takes care of all this for you when passing the event 
through the containment hierarchy (not the object hierarchy), so you do 
not have to bother with translating them yourself. <a href="#JAWT-CH-4-FIG-3">Figure 4.3</A> 
shows how this method would change the location of an event from a container 
down to an internal component. </DL>
<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-4-FIG-3">Figure 4.3: Translating an event's location relative to a component</A></h4>


<p>
<img align=middle src="figs/jawt0404.gif" alt="[Graphic: Figure 4-3]" width=450 height=278 border=0>

</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>protected String paramString () </I><br>
<dd>

<p class=para>
When you call the <tt class=literal>toString()</tt> 
method of <tt class=literal>Event</tt>, the <tt class=literal>paramString()</tt> 
method is called in turn to build the string to display. In the event you 
subclass <tt class=literal>Event</tt> to add additional 
information, instead of having to provide a whole new <tt class=literal>toString()</tt> 
method, you need only add the new information to the string already generated 
by <tt class=literal>paramString()</tt>. Assuming 
the new information is <tt class=literal>foo</tt>, this would result in the following 
method declaration: </DL>
<div class=screen>
<p>
<pre>
protected String paramString() {
    return super.paramString() + ",foo=" + foo;
}
</PRE>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public String toString () </I><br>
<dd>

<p class=para>
The <tt class=literal>toString()</tt> method of <tt class=literal>Event</tt> 
returns a string with numerous components. The only variables that will 
always be in the output will be the event ID and the x and y coordinates. 
The others will be present if necessary (i.e., non-null): key (as the integer 
corresponding to a keyboard event), shift when <tt class=literal>shiftDown()</tt> 
is true; control, when <tt class=literal>controlDown()</tt> 
is true; meta, when <tt class=literal>metaDown()</tt> 
is true; target (if it was a <tt class=literal>Component</tt>); 
and arg (the value depends on the target and ID). <tt class=literal>toString()</tt> 
does not display all pieces of the <tt class=literal>Event</tt> 
information. An event when moving a <tt class=literal>Scrollbar</tt> 
might result in the following: </DL>
<div class=screen>
<p>
<pre>
java.awt.Event[id=602,x=374,y=110,target=java.awt.Scrollbar[374,
110,15x50,val=1,vis=true,min=0,max=255,vert],arg=1]
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-4-SECT-2.4">Working With Mouse Buttons in Java 1.0</A></h3>

<p class=para>
As stated earlier, the <tt class=literal>modifiers</tt> 
component of <tt class=literal>Event</tt> can be used 
to differentiate the different mouse buttons. If the user has a multibutton 
mouse, the <tt class=literal>modifiers</tt> field 
is set automatically to indicate which button was pressed. If the user 
does not own a multibutton mouse, he or she can press the mouse button 
in combination with the Alt or Meta keys to simulate a three-button mouse. 
<a href="#JAWT-CH-4-EX-2">Example 4.2</A> is a sample program called <tt class=literal>mouseEvent</tt> 
that displays the mouse button selected. 

<div class=example>
<h4 class=example><a class="TITLE" name="JAWT-CH-4-EX-2">Example 4.2: Differentiating Mouse Buttons in Java 1.0</A></h4>

<div class=screen>
<p>
<pre>
import java.awt.*;
import java.applet.*;
public class mouseEvent extends Applet {
    String theString = "Press a Mouse Key";
    public synchronized void setString (String s) {
        theString = s;
    }
    public synchronized String getString () {
        return theString;
    }
    public synchronized void paint (Graphics g) {
        g.drawString (theString, 20, 20);
    }
    public boolean mouseDown (Event e, int x, int y) {
        if (e.modifiers == Event.META_MASK) {
            setString ("Right Button Pressed");
        } else if (e.modifiers == Event.ALT_MASK) {
            setString ("Middle Button Pressed");
        } else {
            setString ("Left Button Pressed");
        }
        repaint ();
        return true;
    }
    public boolean mouseUp (Event e, int x, int y) {
        setString ("Press a Mouse Key");
        repaint ();
        return true;
    }
}
</PRE>
</DIV>

</DIV>

<p class=para>
Unfortunately, this technique does not always work. With certain components 
on some platforms, the peer captures the mouse event and does not pass 
it along; for example, on Windows, the display-edit menu of a <tt class=literal>TextField </tt>appears when you select the right mouse button. 
Be cautious about relying on multiple mouse buttons; better yet, if you 
want to ensure absolute portability, stick to a single button. 

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-4-SECT-2.5">Comprehensive Event List</A></h3>

<p class=para>
Unfortunately, there are many platform-specific differences in the way 
event handling works. It's not clear whether these differences are 
bugs or whether vendors think they are somehow improving their product by introducing 
portability problems. We hope that as Java matures, different platforms 
will gradually come into synch. Until that happens, you might want your 
programs to assume the lowest common denominator. If you are willing to 
take the risk, you can program for a specific browser or platform, but 
should be aware of the possibility of changes. 

<p class=para>
<a href="appc_01.htm">Appendix C, <i>Platform-Specific Event Handling</i></A>, includes a table that shows which components pass along which 
events by default in the most popular environments. This table was developed 
using an interactive program called <tt class=literal>compList</tt>, 
which generates a list of supported events for each component. You can 
find <tt class=literal>compList</tt> on this book's 
Web site, <a href="../../../../../../../www.ora.com/catalog/javawt">http://www.ora.com/catalog/javawt</A>. 
If you want to check the behavior of some new platform, or a newer version 
of one of the platforms in <a href="appc_01.htm">Appendix C, <i>Platform-Specific Event Handling</i></A>, feel free to use <tt class=literal>compList</tt>. 
It does require a little bit of work on your part. You have to click, toggle, 
type, and mouse over every object. Hopefully, as Java matures, this program 
will become unnecessary. 

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch04_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Java 1.0 Event Model</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>The Java 1.1 Event Model</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
