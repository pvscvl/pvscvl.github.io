<html>
<head>
<title>[Appendix C] C.2 Test Program</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:17:58 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="appc_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Appendix C<br>Platform-Specific Event Handling</FONT></B></TD>
<td width=172 align=right valign=top><a href="appd_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-APP-C-SECT-2">C.2 Test Program</A></h2>

<p class=para>
<a name="C.COMP"></A>The test program, <tt class=literal>compList</tt>, listed in <a href="#JAWT-APP-C-SECT-2.2">Source Code</A> 
shows the events peers pass along to the Java run-time system. You can 
then examine the output to see how the run-time system reacts to the different 
events. When you run <tt class=literal>compList</tt>, 
the screen looks something like the one in <a href="#JAWT-APP-C-FIG-1">Figure C.1</A>. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-APP-C-FIG-1">Figure C.1: Test program</A></h4>


<p>
<img align=middle src="figs/jawtc01.gif" alt="[Graphic: Figure C-1]" width=214 height=256 border=0>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-APP-C-SECT-2.1">How to Use the Program</A></h3>

<p class=para>
Java does not have an automated record and playback feature, so the work 
is left for you to do. The program displays 10 components: <tt class=literal>Label</tt>, 
<tt class=literal>Button</tt>, <tt class=literal>Scrollbar</tt>, 
<tt class=literal>List</tt>, multiselection <tt class=literal>List</tt>, 
<tt class=literal>Choice</tt>, <tt class=literal>Checkbox</tt>, 
<tt class=literal>TextField</tt>, <tt class=literal>TextArea</tt>, 
and <tt class=literal>Canvas</tt> (the black box in <a href="#JAWT-APP-C-FIG-1">Figure C.1</A>). 
Basically, you must manually trigger every event for every component. 

<p class=para>
For <i class=emphasis>every</I> component on the screen (except Done), do the following:

<p>
<dl class=variablelist>
<dt class=varlistentry>With the mouse<br>
<dd>

<p class=para>
Move the cursor over the object, press the mouse button 
and release, and drag the cursor over the object. 

<p>
<dt class=varlistentry>With the keyboard<br>
<dd>

<p class=para>
Press and release an alphabetic key, press and release 
the Home and End keys, arrow keys, and function keys. Do this for every 
component, even for components like <tt class=literal>Button</tt> 
and <tt class=literal>Label</tt> that have no logical 
reason for using keyboard events. 

<p>
<dt class=varlistentry>For items with choices<br>
<dd>

<p class=para>
Select and deselect a few choices; double-click and single-click selections. 

<p>
<dt class=varlistentry>For the scrollbar<br>
<dd>

<p class=para>
Click on each arrow, drag the slider, and click in the paging area (the 
space between each arrow and the slider). 

<p>
<dt class=varlistentry>For the text field<br>
<dd>

<p class=para>
Press Enter. 

<p>
<dt class=varlistentry>When finished<br>
<dd>

<p class=para>
Press the Done button, and analyze the results. Run the program 
again (without exiting), and check the results again. Try to trigger any 
specific events that you expect but didn't appear in the output 
from the first pass. Generating some events requires a little work. For 
example, on a Macintosh, in order to get the <tt class=literal>MOUSE_UP</tt> 
and <tt class=literal>MOUSE_DRAG</tt> events, you 
must do a <tt class=literal>MOUSE_DOWN</tt> off the 
component; otherwise, the <tt class=literal>MOUSE_DOWN</tt>/<tt class=literal>MOUSE_UP</tt> 
combination turns into an <tt class=literal>ACTION_EVENT</tt>, 
if that component can generate it. </DL>
<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
The SunTest business unit of Sun Microsystems has an early version 
of a record and playback Java GUI testing tool called JavaSTAR. Information 
about it is available at 
<a href="../../../../../../../www.suntest.com/JavaSTAR/JavaSTAR.html">http://www.suntest.com/JavaSTAR/JavaSTAR.html</A>. 
In the future, it may be possible to use JavaSTAR to help automate this 
process. 
</blockquote><p>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-APP-C-SECT-2.2">Source Code</A></h3>

<p class=para>
The following is the source code for the test program:

<div class=programlisting>
<p>
<pre>
import java.awt.*;
import java.util.*;
import java.applet.*;
public class compList extends Applet {
    Button done = new Button ("Done");
    Hashtable values = new Hashtable();
    public void init () {
        add (new Label ("Label"));
        add (new Button ("Button"));
        add (new Scrollbar (Scrollbar.HORIZONTAL, 50, 25, 0, 255));
        List l1 = new List (3, false);
        l1.addItem ("List 1");
        l1.addItem ("List 2");
        l1.addItem ("List 3");
        l1.addItem ("List 4");
        l1.addItem ("List 5");
        add (l1);
        List l2 = new List (3, true);
        l2.addItem ("Multi 1");
        l2.addItem ("Multi 2");
        l2.addItem ("Multi 3");
        l2.addItem ("Multi 4");
        l2.addItem ("Multi 5");
        add (l2);
        Choice c = new Choice ();
        c.addItem ("Choice 1");
        c.addItem ("Choice 2");
        c.addItem ("Choice 3");
        c.addItem ("Choice 4");
        c.addItem ("Choice 5");
        add (c);
        add (new Checkbox ("Checkbox"));
        add (new TextField ("TextField", 10));
        add (new TextArea ("TextArea", 3, 20));
        Canvas c1 = new Canvas ();
        c1.resize (50, 50);
        c1.setBackground (Color.blue);
        add (c1);
        add (done);
    }
    public boolean handleEvent (Event e) {
        if (e.target == done) {
            if (e.id == Event.ACTION_EVENT) {
                System.out.println (System.getProperty ("java.vendor"));
                System.out.println (System.getProperty ("java.version"));
                System.out.println (System.getProperty ("java.class.version"));
                System.out.println (System.getProperty ("os.name"));
                System.out.println (values);
            }
        }else {
            Vector v;
            Class c = e.target.getClass();
            v = (Vector)values.get(c);
            if (v == null)
                v = new Vector();
            Integer i = new Integer (e.id);
            if (!v.contains (i)) {
                v.addElement (i);
                values.put (c, v);
            }
        }
        return super.handleEvent (e);
    }
}
</PRE>
</DIV>

<p class=para>
An HTML document to display the applet in a browser should look something 
like the following: 

<div class=programlisting>
<p>
<pre>
&lt;APPLET code="compList.class" height=300 width=300&gt;
&lt;/APPLET&gt;
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-APP-C-SECT-2.3">Examining Results</A></h3>

<p class=para>
The results of the program are sent to standard output when you click on 
the Done button. What happens to the output depends on the 
platform. It may be sent to a log file (Internet Explorer), the Java Console 
(Netscape Navigator), or the command line (appletviewer). The following 
is sample output from Internet Explorer 3.0 on a Windows 95 platform. 

<div class=programlisting>
<p>
<pre>
Microsoft Corp.
1.0.2
45.3
Windows 95
{class java.awt.Canvas=[504, 503, 1004, 501, 506, 502, 505, 1005,
401, 402, 403, 404], class java.awt.Choice=[1001, 401, 402, 403,
404], class java.awt.Checkbox=[1001, 402, 401, 403, 404], class 
compList=[504, 503, 501, 506, 502, 505, 1004, 1005], class java.
awt.TextField=[401, 402, 403, 404], class java.awt.List=[701, 
1001, 401, 402, 403, 404, 702], class java.awt.Scrollbar=[602, 
605, 604, 603, 601], class java.awt.TextArea=[401, 402, 403, 404],
class java.awt.Button=[1001, 401, 402, 403, 404]}
</PRE>
</DIV>

<p class=para>
In addition to some identifying information about the run-time environment, 
the program displays a list of classes and the events they passed. The 
integers represent the event constants of the <tt class=literal>Event</tt> 
class; for example, <tt class=literal>Canvas</tt> 
received events with identifiers 504, 503, etc. The events are not sorted, 
so you can see the order in which they were sent. Unfortunately, you have 
to look up these constants in the source code yourself. The class listed as <tt class=literal>compList</tt> 
is the applet itself and shows you the events that the <tt class=literal>Applet</tt> 
class receives. 

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="appc_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="appd_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>The Results</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Image Loading</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
