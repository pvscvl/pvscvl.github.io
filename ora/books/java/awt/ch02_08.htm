<html>
<head>
<title>[Chapter 2] 2.8 MediaTracker</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:25:21 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 2<br>Simple Graphics</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch03_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-2-SECT-8">2.8 MediaTracker</A></h2>

<p class=para>
<a name="CH02.MEDIA2"></A><a name="CH02.MEDIA3"></A><a name="CH02.MEDIA4"></A><a name="CH02.MEDIA5"></A>The <tt class=literal>MediaTracker</tt> class assists 
in the loading of multimedia objects across the network. Tracking is necessary 
because Java loads images in separate threads. Calls to <tt class=literal>getImage()</tt> 
return immediately; image loading starts only when you call the method <tt class=literal>drawImage()</tt>. 
<tt class=literal>MediaTracker</tt> lets you force 
images to start loading before you try to display them; it also gives you 
information about the loading process, so you can wait until an image is 
fully loaded before displaying it. 

<p class=para>
Currently, <tt class=literal>MediaTracker</tt> can 
monitor the loading of images, but not audio, movies, or anything 
else. Future versions are rumored to be able to monitor other media types. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-2-SECT-8.1">MediaTracker Methods</A></h3><a name="CH02.MEDIA1"></A><a name="CH02.MEDIA1A"></A>Constants

<p class=para>
The <tt class=literal>MediaTracker</tt> class defines 
four constants that are used as return values from the class's methods. 
These values serve as status indicators. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public static final int LOADING </I><br>
<dd>

<p class=para>
The <tt class=literal>LOADING</tt> variable indicates 
that the particular image being checked is still loading. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int ABORTED </I><br>
<dd>

<p class=para>
The <tt class=literal>ABORTED</tt> variable indicates 
that the loading process for the image being checked aborted. For example, 
a timeout could have happened during the download. If something <tt class=literal>ABORTED</tt> 
during loading, it is possible to <tt class=literal>flush()</tt> the image to force a retry. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int ERRORED </I><br>
<dd>

<p class=para>
The <tt class=literal>ERRORED</tt> variable indicates 
that an error occurred during the loading process for the image being checked. 
For instance, the image file might not be available from the server (invalid 
URL) or the file format could be invalid. If an image has <tt class=literal>ERRORED</tt>, 
retrying it will fail. 

<p>
<dt class=varlistentry><i class=emphasis>public static final int COMPLETE </I><br>
<dd>

<p class=para>
The <tt class=literal>COMPLETE</tt> flag means that 
the image being checked successfully loaded. </DL>
<p class=para>
If <tt class=literal>COMPLETE</tt>, <tt class=literal>ABORTED</tt>, 
or <tt class=literal>ERRORED</tt> is set, the image 
has stopped loading. If you are checking multiple images, you can OR 
several of these values together to form a composite. For example, if you 
are loading several images and want to find out about any malfunctions, 
call <tt class=literal>statusAll()</tt> and check 
for a return value of <tt class=literal>ABORTED | ERRORED</tt>. Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public MediaTracker (Component component) </I><br>
<dd>

<p class=para>
The <tt class=literal>MediaTracker</tt> constructor 
creates a new <tt class=literal>MediaTracker</tt> 
object to track images to be rendered onto <tt class=literal>component</tt>. </DL>
Adding images

<p class=para>
The <tt class=literal>addImage()</tt> methods add 
objects for the <tt class=literal>MediaTracker</tt> 
to track. When placing an object under a <tt class=literal>MediaTracker</tt>'s 
control, you must provide an identifier for grouping purposes. When multiple 
images are grouped together, you can perform operations on the entire group 
with a single request. For example, you might want to wait until all the 
images in an animation sequence are loaded before starting the animation; 
in this case, assigning the same ID to all the images makes good sense. 
However, when multiple images are grouped together, you cannot check on 
the status of a single image. The moral is: if you care about the status 
of individual images, put each into a group by itself. 

<p class=para>
Folklore has it that the identifier also serves as a loading priority, 
with a lower ID meaning a higher priority. This is not completely true. 
Current implementations start loading lower IDs first, but at 
most, this is implementation-specific functionality for the JDK. Furthermore, 
although an object with a lower identifier might be told to start loading 
first, the <tt class=literal>MediaTracker</tt> does 
nothing to ensure that it finishes first. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public synchronized void addImage (Image image, int id, int width, int 
height) </I><br>
<dd>

<p class=para>
The <tt class=literal>addImage()</tt> method tells 
the <tt class=literal>MediaTracker</tt> instance that 
it needs to track the loading of <tt class=literal>image</tt>. 
The <tt class=literal>id</tt> is used as a grouping. 
Someone will eventually render the <tt class=literal>image</tt> 
at a scaled size of <tt class=literal>width</tt> x <tt class=literal>height</tt>. If <tt class=literal>width</tt> 
and <tt class=literal>height</tt> are both -1, the image will be rendered unscaled. If you forget to notify 
the <tt class=literal>MediaTracker</tt> that the <tt class=literal>image</tt> 
will be scaled and ask the <tt class=literal>MediaTracker</tt> 
to <tt class=literal>waitForID (id)</tt>, it is possible 
that the image may not be fully ready when you try to draw it. 

<p>
<dt class=varlistentry><i class=emphasis>public void addImage (Image image, int id) </I><br>
<dd>

<p class=para>
The <tt class=literal>addImage()</tt> method tells 
the <tt class=literal>MediaTracker</tt> instance that 
it needs to track the loading of <tt class=literal>image</tt>. 
The <tt class=literal>id</tt> is used as a grouping. 
The <tt class=literal>image</tt> will be rendered 
at its actual size, without scaling. </DL>
Removing images

<p class=para>
Images that have finished loading are still watched by the <tt class=literal>MediaTracker</tt>. 
The <tt class=literal>removeImage()</tt> methods, 
added in Java 1.1, allow you to remove objects from the <tt class=literal>MediaTracker</tt>. 
Once you no longer care about an image (usually after waiting for it to 
load), you can remove it from the tracker. Getting rid of loaded images results in better 
performance because the tracker has fewer objects to check. In Java 1.0, you can't remove an 
image from <tt class=literal>MediaTracker</tt>.

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void removeImage (Image image)  <img src="gifs/bstar.gif" alt="(New)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>removeImage()</tt> method tells 
the <tt class=literal>MediaTracker</tt> to remove 
all instances of <tt class=literal>image</tt> from 
its tracking list. 

<p>
<dt class=varlistentry><i class=emphasis>public void removeImage (Image image, int id)  <img src="gifs/bstar.gif" alt="(New)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>removeImage()</tt> method tells 
the <tt class=literal>MediaTracker</tt> to remove 
all instances of <tt class=literal>image</tt> from 
group <tt class=literal>id</tt> of its tracking list. 

<p>
<dt class=varlistentry><i class=emphasis>public void removeImage (Image image, int id, int width, int height)  <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This <tt class=literal>removeImage()</tt> method tells 
the <tt class=literal>MediaTracker</tt> to remove 
all instances of <tt class=literal>image</tt> from 
group <tt class=literal>id</tt> and scale <tt class=literal>width </tt>x <tt class=literal>height </tt>of 
its tracking list. </DL>
Waiting

<p class=para>
A handful of methods let you wait for a particular image, image group, 
all images, or a particular time period. They enable you to be sure that 
an image has finished trying to load prior to continuing. The fact that 
an image has finished loading does not imply it has successfully loaded. 
It is possible that an error condition arose, which caused loading to stop. 
You should check the status of the image (or group) for actual success. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void waitForID (int id) throws InterruptedException </I><br>
<dd>

<p class=para>
The <tt class=literal>waitForID()</tt> method blocks 
the current thread from running until the images added with <tt class=literal>id</tt> 
finish loading. If the wait is interrupted, <tt class=literal>waitForID()</tt> 
throws an <tt class=literal>InterruptedException</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized boolean waitForID (int id, long ms) throws InterruptedException </I><br>
<dd>

<p class=para>
The <tt class=literal>waitForID()</tt> method blocks 
the current thread from running until the images added with <tt class=literal>id</tt> 
finish loading or until <tt class=literal>ms</tt> 
milliseconds have passed. If all the images have loaded, <tt class=literal>waitForID()</tt> 
returns <tt class=literal>true</tt>; if the timer 
has expired, it returns <tt class=literal>false</tt>, 
and one or more images in the <tt class=literal>id</tt> 
set have not finished loading. If <tt class=literal>ms</tt> 
is 0, it waits until all images added with <tt class=literal>id</tt> 
have loaded, with no timeout. If the wait is interrupted, <tt class=literal>waitForID()</tt> 
throws an <tt class=literal>InterruptedException</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void waitForAll () throws InterruptedException </I><br>
<dd>

<p class=para>
The <tt class=literal>waitForAll()</tt> method blocks 
the current thread from running until all images controlled by this <tt class=literal>MediaTracker</tt> 
finish loading. If the wait is interrupted, <tt class=literal>waitForAll()</tt> 
throws an <tt class=literal>InterruptedException</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized boolean waitForAll (long ms) throws InterruptedException </I><br>
<dd>

<p class=para>
The <tt class=literal>waitForAll()</tt> method blocks 
the current thread from running until all images controlled by this <tt class=literal>MediaTracker</tt> 
finish loading or until <tt class=literal>ms</tt> 
milliseconds have passed. If all the images have loaded, <tt class=literal>waitForAll()</tt> 
returns <tt class=literal>true</tt>; if the timer 
has expired, it returns <tt class=literal>false</tt>, 
and one or more images have not finished loading. If <tt class=literal>ms</tt> 
is 0, it waits until all images have loaded, with no timeout. When you 
interrupt the waiting, <tt class=literal>waitForAll()</tt> 
throws an <tt class=literal>InterruptedException</tt>. </DL>
Checking status

<p class=para>
<a name="CH02.STAT1"></A>Several methods are available to check on the status of images loading. 
None of these methods block, so you can continue working while images 
are loading. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public boolean checkID (int id) </I><br>
<dd>

<p class=para>
The <tt class=literal>checkID()</tt> method determines 
if all the images added with the <tt class=literal>id</tt> 
tag have finished loading. The method returns <tt class=literal>true</tt> 
if all images have completed loading (successfully or unsuccessfully). 
Since this can return <tt class=literal>true</tt> 
on error, you should also use <tt class=literal>isErrorID()</tt> 
to check for errors. If loading has not completed, <tt class=literal>checkID()</tt> 
returns <tt class=literal>false</tt>. This method 
does not force images to start loading. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized boolean checkID (int id, boolean load) </I><br>
<dd>

<p class=para>
The <tt class=literal>checkID()</tt> method determines 
if all the images added with the <tt class=literal>id</tt> 
tag have finished loading. If the <tt class=literal>load</tt> 
flag is <tt class=literal>true</tt>, any images in 
the <tt class=literal>id</tt> group that have not 
started loading yet will start. The method returns <tt class=literal>true</tt> 
if all images have completed loading (successfully or unsuccessfully). 
Since this can return <tt class=literal>true</tt> 
on error, you should also use <tt class=literal>isErrorID()</tt> 
to check for errors. If loading has not completed, <tt class=literal>checkID()</tt> 
returns <tt class=literal>false</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public boolean checkAll () </I><br>
<dd>

<p class=para>
The <tt class=literal>checkAll()</tt> method determines 
if all images associated with the <tt class=literal>MediaTracker</tt> 
have finished loading. The method returns <tt class=literal>true</tt> 
if all images have completed loading (successfully or unsuccessfully). 
Since this can return <tt class=literal>true</tt> 
on error, you should also use <tt class=literal>isErrorAny()</tt> 
to check for errors. If loading has not completed, <tt class=literal>checkAll()</tt> 
returns <tt class=literal>false</tt>. This method 
does not force images to start loading. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized boolean checkAll (boolean load) </I><br>
<dd>

<p class=para>
The <tt class=literal>checkAll()</tt> method determines 
if all images associated with the <tt class=literal>MediaTracker</tt> 
have finished loading. If the <tt class=literal>load</tt> 
flag is <tt class=literal>true</tt>, any image that 
has not started loading yet will start. The method returns <tt class=literal>true</tt> 
if all images have completed loading (successfully or unsuccessfully). 
Since this can return <tt class=literal>true</tt> 
on error, you should also use <tt class=literal>isErrorAny()</tt> 
to check for errors. If loading has not completed, <tt class=literal>checkAll()</tt> 
returns <tt class=literal>false</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public int statusID (int id, boolean load) </I><br>
<dd>

<p class=para>
The <tt class=literal>statusID()</tt> method checks 
on the load status of the images in the <tt class=literal>id</tt> 
group. If there are multiple images in the group, the results are ORed 
together. If the <tt class=literal>load</tt> flag 
is <tt class=literal>true</tt>, any image in the <tt class=literal>id</tt> 
group that has not started loading yet will start. The return value is 
some combination of the class constants <tt class=literal>LOADING</tt>, 
<tt class=literal>ABORTED</tt>, <tt class=literal>ERRORED</tt>, 
and <tt class=literal>COMPLETE</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public int statusAll (boolean load) </I><br>
<dd>

<p class=para>
The <tt class=literal>statusAll()</tt> method determines 
the load status of all the images associated with the <tt class=literal>MediaTracker</tt>. 
If this <tt class=literal>MediaTracker</tt> is watching 
multiple images, the results are ORed 
together. If the <tt class=literal>load</tt> flag 
is <tt class=literal>true</tt>, any image that has 
not started loading yet will start. The return value is some combination 
of the class constants <tt class=literal>LOADING</tt>, 
<tt class=literal>ABORTED</tt>, <tt class=literal>ERRORED</tt>, 
and <tt class=literal>COMPLETE</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized boolean isErrorID (int id) </I><br>
<dd>

<p class=para>
The <tt class=literal>isErrorId()</tt> method checks 
whether any media in the <tt class=literal>id</tt> 
group encountered an error while loading. If any image resulted in an error, 
<tt class=literal>isErrorId()</tt> returns <tt class=literal>true</tt>; 
if there were no errors, it returns <tt class=literal>false</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized boolean isErrorAny () </I><br>
<dd>

<p class=para>
The <tt class=literal>isErrorAny()</tt> method checks 
to see if any image associated with the <tt class=literal>MediaTracker</tt> 
encountered an error. If there was an error, the method returns <tt class=literal>true</tt>; 
if none, <tt class=literal>false</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized Object[] getErrorsID (int id) </I><br>
<dd>

<p class=para>
The <tt class=literal>getErrorsID()</tt> method returns 
an array of the objects that encountered errors in the group ID during 
loading. If loading caused no errors, the method returns <tt class=literal>null</tt>. The return 
type is an <tt class=literal>Object</tt> array instead 
of an <tt class=literal>Image</tt> array because <tt class=literal>MediaTracker</tt> 
will eventually support additional media types. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized Object[] getErrorsAny () </I><br>
<dd>

<p class=para>
The <tt class=literal>getErrorsAny()</tt> method returns 
an array of all the objects that encountered an error during loading. If 
there were no errors, the method returns <tt class=literal>null</tt>. The return type is an <tt class=literal>Object</tt> 
array instead of an <tt class=literal>Image</tt> array 
because <tt class=literal>MediaTracker</tt> will eventually 
support additional media types. </DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-2-SECT-8.2">Using a MediaTracker</A></h3>

<p class=para>
The <tt class=literal>init()</tt> method improves the <tt class=literal>AnimateApplet</tt> 
from <a href="ch02_07.htm">Example 2.2</A> to ensure that images load before the 
animation sequence starts. Waiting for images to load is particularly important 
if there is a slow link between the computer on which the applet is running 
and the server for the image files. Note that in a few cases, like 
interlaced GIF files, you might be willing to display an image before 
it has completely loaded. However, judicious use of <tt class=literal>MediaTracker</tt> 
will give you much more control over your program's behavior. 

<p class=para>
The new <tt class=literal>init()</tt> method 
creates a <tt class=literal>MediaTracker</tt>, puts 
all the images in the animation sequence under the tracker's control, 
and then calls <tt class=literal>waitForAll()</tt> 
to wait until the images are loaded. Once the images are loaded, it calls 
<tt class=literal>isErrorsAny()</tt> to make sure 
that the images loaded successfully. 

<p class=para>
<div class=screen>
<p>
<pre>
public void init () {
    MediaTracker mt = new MediaTracker (this);
    im = new Image[numImages];
    for (int i=0;i&lt;numImages;i++) {
        im[i] = getImage (getDocumentBase(), "clock"+i+".jpg");
        mt.addImage (im[i], i);
    }
    try {
        mt.waitForAll();
        if (mt.isErrorAny())
            System.out.println ("Error loading images");
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch03_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Image</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Fonts and Colors</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
