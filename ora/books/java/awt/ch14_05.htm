<html>
<head>
<title>[Chapter 14] 14.5 Audio in Applications</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:54:08 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch14_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 14<br>And Then There Were Applets</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch15_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-14-SECT-5">14.5 Audio in Applications</A></h2>

<p class=para>
<a name="CH14.AUDIO2"></A>The rest of this chapter describes how to use audio in your applications. 
Because the audio support discussed so far has been provided by the browser, 
applications that don't run in the context of a browser must use 
a different set of classes to work with audio. These classes are within 
the <tt class=literal>sun.audio</tt> package. Although 
the <tt class=literal>sun.*</tt> package hierarchy 
is not necessarily included by other vendors, the <tt class=literal>sun.audio</tt> 
classes discussed here are provided with Netscape Navigator 2.0/3.0 
and Internet Explorer 3.0. Therefore, you can use these classes within 
applets, too. This section ends by developing a <tt class=literal>SunAudioClip</tt> 
class that has an interface similar to the applet's audio interface; 
you can use it to minimize coding differences between applets and applications. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-14-SECT-5.1">AudioData</A></h3>

<p class=para>
The <tt class=literal>AudioData</tt> class holds a 
clip of 8000 Hz &micro;Law audio data. This data can be used to construct 
an <tt class=literal>AudioDataStream</tt> or <tt class=literal>ContinuousAudioDataStream</tt>, 
which can then be played with the <tt class=literal>AudioPlayer</tt>. Constructor

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public AudioData (byte buffer[]) </I><br>
<dd>

<p class=para>
The <tt class=literal>AudioData</tt> constructor accepts 
a byte array <tt class=literal>buffer</tt> and creates 
an instance of <tt class=literal>AudioData</tt>. The 
buffer should contain 8000 Hz &micro;Law audio data. </DL>
Methods

<p class=para>
There are no methods for <tt class=literal>AudioData</tt>. 

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-14-SECT-5.2">AudioStream</A></h3>

<p class=para>
<tt class=literal>AudioStream</tt> subclasses <tt class=literal>FilterInputStream</tt>, 
which extends <tt class=literal>InputStream</tt>. 
Using an <tt class=literal>InputStream</tt> lets you 
move back and forth (rewind and fast forward) within an audio file, in 
addition to playing the audio data from start to finish. Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public AudioStream (InputStream in) throws IOException </I><br>
<dd>

<p class=para>
The <tt class=literal>AudioStream</tt> constructor 
has <tt class=literal>InputStream</tt> <tt class=literal>in</tt> 
as its parameter and can throw <tt class=literal>IOException</tt> 
on error. In the following code, we get an input stream by opening a <i class=emphasis>.au</I> 
file. Another common way to construct an <tt class=literal>AudioStream</tt> 
is to use the stream associated with a URL through the URL's <tt class=literal>openStream()</tt> 
method. 

<div class=screen>
<p>
<pre>
FileInputStream fis = new FileInputStream ("/usr/openwin/demo/sounds/1.au");
AudioStream audiostream = new AudioStream (fis);
</PRE>
</DIV>

<p class=para>
or:

<div class=screen>
<p>
<pre>
AudioStream audiostream = new AudioStream (savedUrl.openStream());
</PRE>
</DIV>

<p class=para>
If you are constructing the audio data yourself, you would use a <tt class=literal>ByteArrayInputStream</tt>. 
Whatever the source of the data, the input stream should provide data in 
Sun's <i class=emphasis>.au</I> 
format. </DL>
Methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int read (byte buffer[], int offset, int length) throws IOException</I><br>
<dd>

<p class=para>
The <tt class=literal>read()</tt> method for <tt class=literal>AudioStream</tt> 
reads an array of bytes into <tt class=literal>buffer</tt>. 
<tt class=literal>offset</tt> is the first element 
of <tt class=literal>buffer</tt> that is used. <tt class=literal>length</tt> 
is the maximum number of bytes to read. This method blocks until some input 
is available. <tt class=literal>read()</tt> returns 
the actual number of bytes read. If the end of stream is encountered and 
no bytes were read, <tt class=literal>read()</tt> 
returns -1. Ordinarily, you <tt class=literal>read()</tt> 
an <tt class=literal>AudioStream</tt> only if you want 
to modify the audio data in some way. 

<p>
<dt class=varlistentry><i class=emphasis>public int getLength() </I><br>
<dd>

<p class=para>
The <tt class=literal>getLength()</tt> method returns 
the length of the audio data contained within the <tt class=literal>AudioStream</tt>, 
excluding any header information in the file. 

<p>
<dt class=varlistentry><i class=emphasis>public AudioData getData () throws IOException </I><br>
<dd>

<p class=para>
The <tt class=literal>getData()</tt> method of <tt class=literal>AudioStream</tt> 
is the most important and most frequently used. It reads the data from 
the input stream and creates an <tt class=literal>AudioData</tt> 
instance. As the following code shows, you can create an <tt class=literal>AudioStream</tt> 
and get the <tt class=literal>AudioData</tt> with 
one statement. </DL>
<div class=screen>
<p>
<pre>
AudioData audiodata = new AudioStream (aUrl.openStream()).getData();
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-14-SECT-5.3">AudioDataStream</A></h3>Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public AudioDataStream (AudioData data) </I><br>
<dd>

<p class=para>
This constructor creates an <tt class=literal>AudioDataStream</tt> 
from an <tt class=literal>AudioData</tt> object <tt class=literal>data</tt>. 
The resulting <tt class=literal>AudioDataStream</tt> 
is a subclass of <tt class=literal>ByteArrayInputStream</tt> 
and can be played by the <tt class=literal>AudioPlayer.start()</tt> 
method. </DL>
Methods

<p class=para>
There are no methods for <tt class=literal>AudioDataStream</tt>. 

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-14-SECT-5.4">ContinuousAudioDataStream</A></h3>Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public ContinuousAudioDataStream (AudioData data) </I><br>
<dd>

<p class=para>
This constructor creates a continuous stream of audio from <tt class=literal>data</tt>. 
The resulting <tt class=literal>ContinuousAudioDataStream</tt> 
is a subclass of <tt class=literal>AudioDataStream</tt> 
and, therefore, of <tt class=literal>ByteArrayInputStream</tt>. 
It can be played by <tt class=literal>AudioPlayer.start()</tt>; 
whenever the player reaches the end of the continuous audio data stream, 
it restarts from the beginning. </DL>
Methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int read ()  </I><br>
<dd>

<p class=para>
This <tt class=literal>read()</tt> method of <tt class=literal>ContinuousAudioDataStream</tt> 
overrides the <tt class=literal>read()</tt> method 
in <tt class=literal>ByteArrayInputStream</tt> to 
rewind back to the beginning of the stream when end-of-file is reached. 
This method is used by the system when it reads the <tt class=literal>InputStream</tt>; 
it is rarely called directly. <tt class=literal>read()</tt> 
never returns -1 since it loops back to the beginning on end-of-file. 

<p>
<dt class=varlistentry><i class=emphasis>public int read (byte buffer[], int offset, int length)  </I><br>
<dd>

<p class=para>
This <tt class=literal>read()</tt> method of <tt class=literal>ContinuousAudioDataStream</tt> 
overrides the <tt class=literal>read()</tt> method 
in <tt class=literal>ByteArrayInputStream</tt> to 
rewind back to the beginning of the stream when end-of-file is reached. 
This method is used by the system when it reads the <tt class=literal>InputStream</tt>; 
it is rarely called directly. <tt class=literal>read()</tt> 
returns the actual number of bytes read. <tt class=literal>read()</tt> 
never returns -1 since it loops back to the beginning on end-of-file. </DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-14-SECT-5.5">AudioStreamSequence</A></h3>Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public AudioStreamSequence (Enumeration e) </I><br>
<dd>

<p class=para>
The constructor for <tt class=literal>AudioStreamSequence</tt> 
accepts an <tt class=literal>Enumeration</tt> <tt class=literal>e</tt><i class=emphasis></I>(normally the elements of a <tt class=literal>Vector</tt> 
of <tt class=literal>AudioStream</tt>s) as its sole 
parameter. The constructor converts the sequence of audio streams into 
a single stream to be played in order. An example follows: </DL>
<div class=screen>
<p>
<pre>
Vector v = new Vector ();
v.addElement (new AudioStream (url1.openStream ());
v.addElement (new AudioStream (url2.openStream ());
AudioStreamSequence audiostream = new AudioStreamSequence (v.elements ());
</PRE>
</DIV>

Methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int read ()  </I><br>
<dd>

<p class=para>
This <tt class=literal>read()</tt> method of <tt class=literal>AudioStreamSequence</tt> 
overrides the <tt class=literal>read()</tt> method 
in <tt class=literal>InputStream</tt> to start the 
next stream when end-of-file is reached. This method is used by the system 
when it reads the <tt class=literal>InputStream</tt> 
and is rarely called directly. If the end of all streams is encountered 
and no bytes were read, <tt class=literal>read()</tt> 
returns -1. Otherwise, <tt class=literal>read()</tt> 
returns the character read. 

<p>
<dt class=varlistentry><i class=emphasis>public int read (byte buffer[], int offset, int length)   </I><br>
<dd>

<p class=para>
This <tt class=literal>read()</tt> method of <tt class=literal>AudioStreamSequence</tt> 
overrides the <tt class=literal>read()</tt> method 
in <tt class=literal>InputStream</tt> to start the 
next stream when end-of-file is reached. This method is used by the system 
when it reads the <tt class=literal>InputStream</tt> 
and is rarely called directly. <tt class=literal>read()</tt> 
returns the actual number of bytes read. If the end of all streams is encountered 
and no bytes were read, <tt class=literal>read()</tt> 
returns -1. </DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-14-SECT-5.6">AudioPlayer</A></h3>

<p class=para>
The <tt class=literal>AudioPlayer</tt> class is the 
workhorse of the <tt class=literal>sun.audio</tt> 
package. It is used to play all the streams that were created with the 
other classes. There is no constructor for <tt class=literal>AudioPlayer</tt>; 
it just extends <tt class=literal>Thread</tt> and 
provides <tt class=literal>start()</tt> and <tt class=literal>stop()</tt> 
methods. Variable

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public final static AudioPlayer player </I><br>
<dd>

<p class=para>
<tt class=literal>player</tt> is the default audio 
player. This audio player is initialized automatically when the class is 
loaded; you do not have to initialize it (in fact, you can't because 
it is final) or call the constructor yourself. </DL>
Methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public synchronized void start (InputStream in) </I><br>
<dd>

<p class=para>
The <tt class=literal>start()</tt> method starts a 
thread that plays the <tt class=literal>InputStream</tt> 
<tt class=literal>in</tt>. Stream <tt class=literal>in</tt> 
continues to play until there is no more data or it is stopped. If <tt class=literal>in</tt> is 
a <tt class=literal>ContinuousAudioDataStream</tt>, 
the playing continues until <tt class=literal>stop()</tt> 
(described next) is called. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void stop (InputStream in) </I><br>
<dd>

<p class=para>
The <tt class=literal>stop()</tt> method stops the 
player from playing <tt class=literal>InputStream</tt> 
<tt class=literal>in</tt>. Nothing happens if the 
stream <tt class=literal>in</tt> is no longer playing 
or was never started. </DL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-14-SECT-5.7">SunAudioClip Class Definition</A></h3>

<p class=para>
The class in <a href="#JAWT-CH-14-EX-3">Example 14.3</A> is all you need to play audio files in applications. 
It implements the <tt class=literal>java.applet.AudioClip</tt> 
interface, so the methods and functionality will be familiar. The test 
program in <tt class=literal>main()</tt> demonstrates 
how to use the class. Although the class itself can be used in applets, 
provided your users have the <tt class=literal>sun.audio</tt> 
package available, it is geared towards application users. 

<div class=example>
<h4 class=example><a class="TITLE" name="JAWT-CH-14-EX-3">Example 14.3: The SunAudioClip Class</A></h4>

<div class=screen>
<p>
<pre>
import java.net.URL;
import java.io.FileInputStream;
import sun.audio.*;
public class SunAudioClip implements java.applet.AudioClip {
    private AudioData audiodata;
    private AudioDataStream audiostream;
    private ContinuousAudioDataStream continuousaudiostream;
    static int length;
    public SunAudioClip (URL url) throws java.io.IOException {
        audiodata = new AudioStream (url.openStream()).getData();
        audiostream = null;
        continuousaudiostream = null;
    }
    public SunAudioClip (String filename) throws java.io.IOException {
        FileInputStream fis = new FileInputStream (filename);
        AudioStream audioStream = new AudioStream (fis);
        audiodata = audioStream.getData();
        audiostream = null;
        continuousaudiostream = null;
    }
    public void play () {
        audiostream = new AudioDataStream (audiodata);
        AudioPlayer.player.start (audiostream);
    }
    public void loop () {
        continuousaudiostream = new ContinuousAudioDataStream (audiodata);
        AudioPlayer.player.start (continuousaudiostream);
    }
    public void stop () {
        if (audiostream != null)
            AudioPlayer.player.stop (audiostream);
        if (continuousaudiostream != null)
            AudioPlayer.player.stop (continuousaudiostream);
    }
    public static void main (String args[]) throws Exception {
        URL url1 = new URL ("http://localhost:8080/audio/1.au");
        URL url2 = new URL ("http://localhost:8080/audio/2.au");
        SunAudioClip sac1 = new SunAudioClip (url1);
        SunAudioClip sac2 = new SunAudioClip (url2);
        SunAudioClip sac3 = new SunAudioClip ("1.au");
        sac1.play ();
        sac2.loop ();
        sac3.play ();
        try {// Delay for loop
            Thread.sleep (2000);
        } catch (InterruptedException ie) {}
        sac2.stop();
    }
}
</PRE>
</DIV>

</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch14_04.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch15_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>AppletStub Interface</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Toolkit and Peers</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
