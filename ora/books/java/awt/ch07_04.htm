<html>
<head>
<title>[Chapter 7] 7.4 GridLayout</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:39:28 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7<br>Layouts</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch07_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-7-SECT-4">7.4 GridLayout</A></h2>

<p class=para>
<a name="CH07.GRID1"></A><a name="CH07.GRID2"></A><a name="CH07.GRID3"></A>The <tt class=literal>GridLayout</tt> layout manager 
is ideal for laying out objects in rows and columns, where each cell in 
the layout has the same size. Components are added to the layout from left 
to right, top to bottom. <tt class=literal>setLayout(new GridLayout(2,3)</tt>) changes the <tt class=literal>LayoutManager</tt> 
of the current container to a 2 row by 3 column <tt class=literal>GridLayout</tt>. <a href="#JAWT-CH-7-FIG-6">Figure 7.6</A> 
shows an applet using this layout.

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-7-FIG-6">Figure 7.6: Applet using GridLayout</A></h4>


<p>
<img align=middle src="figs/jawt0706.gif" alt="[Graphic: Figure 7-6]" width=260 height=166 border=0>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-7-SECT-4.1">GridLayout Methods</A></h3>Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public GridLayout () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>GridLayout</tt> 
initially configured to have one row, an infinite number of columns, and 
no gaps. A gap is the space between adjacent components in the horizontal 
or vertical direction. With a gap of zero, components in adjacent cells 
will have no space between them. 

<p>
<dt class=varlistentry><i class=emphasis>public GridLayout (int rows, int columns) </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>GridLayout</tt> 
initially configured to be <tt class=literal>rows</tt> 
x <tt class=literal>columns</tt> in size. The default 
setting for horizontal and vertical gaps is zero pixels. The gap is the 
space between adjacent components in the horizontal and vertical directions. 
With a gap of zero, components in adjacent cells will have no space between 
them. 

<p class=para>
You can set the number of rows or columns to zero; this means that the 
layout will grow without bounds in that direction. If both <tt class=literal>rows</tt> 
and <tt class=literal>columns</tt> are zero, the run-time 
exception <tt class=literal>IllegalArgumentException</tt> 
will be thrown. </DL>
<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
The rows and columns passed to the <tt class=literal>GridLayout</tt> 
constructor are only recommended values. It is possible that the system 
will pick other values if the number of objects you add to the layout is 
sufficiently different from the size you requested; for example, you placed 
nine objects in a six-element grid. 
</blockquote><p>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public GridLayout (int rows, int columns, int hgap, int vgap) </I><br>
<dd>

<p class=para>
This version of the constructor is called by the previous one. It creates 
a <tt class=literal>GridLayout</tt> with an initial 
configuration of <tt class=literal>rows</tt> x <tt class=literal>columns</tt>, 
with a horizontal gap of <tt class=literal>hgap</tt> 
and vertical gap of <tt class=literal>vgap</tt>. 
The gap is the space between the different components in the different 
directions, measured in pixels. It is possible to have negative gaps if 
you want components to overlap. 

<p class=para>
You can set the number of rows or columns to zero; this means that the 
layout will grow without bounds in that direction. If both <tt class=literal>rows</tt> 
and <tt class=literal>columns</tt> are zero, the run-time 
exception <tt class=literal>IllegalArgumentException</tt> 
will be thrown. </DL>
Informational methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int getColumns () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getColumns()</tt> method retrieves 
the current column setting, which may differ from the number of columns 
displayed. 

<p>
<dt class=varlistentry><i class=emphasis>public void setColumns (int columns) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setColumns()</tt> method changes 
the current column setting to <tt class=literal>columns</tt>. 
After changing the setting, you must <tt class=literal>validate()</tt> 
the <tt class=literal>Container</tt>. If you try to 
set the number of rows and the number of columns to zero, this method throws 
the run-time exception <tt class=literal>IllegalArgumentException</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public int getRows () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getRows()</tt> method retrieves 
the current row setting; this may differ from the number of rows displayed. 

<p>
<dt class=varlistentry><i class=emphasis>public void setRows (int rows) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setRows()</tt> method changes 
the current row setting to <tt class=literal>rows</tt>. 
After changing the setting, you must <tt class=literal>validate()</tt> 
the <tt class=literal>Container</tt>. If you try to 
set the number of rows and the number of columns to zero, this method throws 
the run-time exception <tt class=literal>IllegalArgumentException</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public int getHgap () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getHgap()</tt> method retrieves 
the current horizontal gap setting. 

<p>
<dt class=varlistentry><i class=emphasis>public void setHgap (int hgap) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setHgap()</tt> method changes 
the current horizontal gap setting to <tt class=literal>hgap</tt>. 
After changing the gaps, you must <tt class=literal>validate()</tt> 
the <tt class=literal>Container</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public int getVgap () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getVgap()</tt> method retrieves 
the current vertical gap setting. 

<p>
<dt class=varlistentry><i class=emphasis>public void setVgap (int hgap) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setVgap()</tt> method changes 
the current vertical gap setting to <tt class=literal>vgap</tt>. 
After changing the gaps, you must <tt class=literal>validate()</tt> 
the <tt class=literal>Container</tt>. </DL>
LayoutManager methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void addLayoutComponent (String name, Component component)  </I><br>
<dd>

<p class=para>
The <tt class=literal>addLayoutComponent()</tt> method 
of <tt class=literal>GridLayout</tt> does nothing. 

<p>
<dt class=varlistentry><i class=emphasis>public void removeLayoutComponent (Component component)  </I><br>
<dd>

<p class=para>
The <tt class=literal>removeLayoutComponent()</tt> 
method of <tt class=literal>GridLayout</tt> does nothing. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension preferredLayoutSize (Container target) </I><br>
<dd>

<p class=para>
The <tt class=literal>preferredLayoutSize()</tt> method 
of <tt class=literal>GridLayout</tt> calculates the 
preferred dimensions for the components in <tt class=literal>target</tt>. 
The preferred size depends on the size of the grid, which may not be the 
size requested by the constructor; the <tt class=literal>GridLayout</tt> 
treats the constructor's arguments as recommendations and may ignore 
them if appropriate. 

<p class=para>
The actual number of rows and columns is based upon the number of components 
within the <tt class=literal>Container</tt>. The <tt class=literal>GridLayout</tt> 
tries to observe the number of rows requested first, calculating the number 
of columns. If the requested number of rows is nonzero, the number of 
columns is determined by (# components + rows - 1) / rows. If request 
is for zero rows, the number of rows to use is determined by a similar 
formula: (# components + columns - 1) / columns. <a href="#JAWT-CH-7-TAB-1">Table 7.1</A> 
demonstrates this calculation. The last entry in this table is of special 
interest: if you request a 3x3 grid but only place four components in the 
layout, you get a 2x2 layout as a result. If you do not want to be surprised, 
size the <tt class=literal>GridLayout</tt> based on 
the number of objects you plan to put into the display. 

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="JAWT-CH-7-TAB-1">Table 7.1: GridLayout Row/Column Calculation</A></CAPTION>
<tr class=row>
<th align="LEFT">Rows</TH>
<th align="LEFT">Columns</TH>
<th align="LEFT"># Components</TH>
<th align="LEFT">Display Rows</TH>
<th align="LEFT">Display Columns</TH>
</TR>
<tr class=row>
<td align="LEFT">0</TD>
<td align="LEFT">1</TD>
<td align="LEFT">10</TD>
<td align="LEFT">10</TD>
<td align="LEFT">1</TD>
</TR>
<tr class=row>
<td align="LEFT">0</TD>
<td align="LEFT">2</TD>
<td align="LEFT">10</TD>
<td align="LEFT">5</TD>
<td align="LEFT">2</TD>
</TR>
<tr class=row>
<td align="LEFT">1</TD>
<td align="LEFT">0</TD>
<td align="LEFT">10</TD>
<td align="LEFT">1</TD>
<td align="LEFT">10</TD>
</TR>
<tr class=row>
<td align="LEFT">2</TD>
<td align="LEFT">0</TD>
<td align="LEFT">10</TD>
<td align="LEFT">2</TD>
<td align="LEFT">5</TD>
</TR>
<tr class=row>
<td align="LEFT">2</TD>
<td align="LEFT">3</TD>
<td align="LEFT">10</TD>
<td align="LEFT">2</TD>
<td align="LEFT">5</TD>
</TR>
<tr class=row>
<td align="LEFT">2</TD>
<td align="LEFT">3</TD>
<td align="LEFT">20</TD>
<td align="LEFT">2</TD>
<td align="LEFT">10</TD>
</TR>
<tr class=row>
<td align="LEFT">3</TD>
<td align="LEFT">2</TD>
<td align="LEFT">10</TD>
<td align="LEFT">3</TD>
<td align="LEFT">4</TD>
</TR>
<tr class=row>
<td align="LEFT">3</TD>
<td align="LEFT">3</TD>
<td align="LEFT">3</TD>
<td align="LEFT">3</TD>
<td align="LEFT">1</TD>
</TR>
<tr class=row>
<td align="LEFT">3</TD>
<td align="LEFT">3</TD>
<td align="LEFT">4</TD>
<td align="LEFT">2</TD>
<td align="LEFT">2</TD>
</TR>
</TABLE>
<p>
</DIV>
<p>
<dt class=varlistentry><i class=emphasis></I><br>
<dd>

<p class=para>
Once we know the dimensions of the grid, it's easy to compute the 
preferred size for the layout. The <tt class=literal>GridLayout</tt> 
takes the maximum height and maximum width of the preferred sizes for all 
the components in the layout. (Note that the maximum width and maximum 
height aren't necessarily from the same component.) This becomes 
the preferred size of each cell within the layout. The preferred size of 
the layout as a whole is computed using the preferred size of a cell and 
adding gaps and insets as appropriate. 

<p>
<dt class=varlistentry><i class=emphasis>public Dimension minimumLayoutSize (Container target)  </I><br>
<dd>

<p class=para>
The <tt class=literal>minimumLayoutSize()</tt> method 
of <tt class=literal>GridLayout</tt> calculates the 
minimum dimensions for the components in <tt class=literal>target</tt>. 
First it determines the actual number of rows and columns in the final 
layout, using the method described previously. The <tt class=literal>minimumLayoutSize()</tt> 
method then determines the widest and tallest <tt class=literal>getMinimumSize()</tt> 
of a component, and this becomes the minimum size of a cell within the layout. 
The minimum size of the layout as a whole is computed using the minimum 
size of a cell and adding gaps and insets as appropriate. 

<p>
<dt class=varlistentry><i class=emphasis>public void layoutContainer (Container target)  </I><br>
<dd>

<p class=para>
The <tt class=literal>layoutContainer()</tt> method 
draws <tt class=literal>target</tt>'s components 
on the screen in a series of rows and columns. Each component within a 
<tt class=literal>GridLayout</tt> will be the same 
size, if it is possible. If there is insufficient space for all the components, 
the size of each is reduced proportionally. </DL>
Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public String toString () </I><br>
<dd>

<p class=para>
The <tt class=literal>toString()</tt> method of <tt class=literal>GridLayout</tt> 
returns a string including the current horizontal and vertical gap settings, 
along with the rows and columns settings. For a <tt class=literal>GridLayout</tt> 
created with 2 rows and 3 columns, the result would be: </DL>
<div class=screen>
<p>
<pre>
java.awt.GridLayout[hgap=0,vgap=0,rows=2,cols=3]
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch07_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>BorderLayout</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>CardLayout</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
