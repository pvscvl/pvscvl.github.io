<html>
<head>
<title>[Chapter 10] 10.4 MenuItem</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:46:18 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 10<br>Would You Like to Choose from the Menu?</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch10_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-10-SECT-4">10.4 MenuItem</A></h2>

<p class=para>
<a name="CH10.ITEM1"></A>A <tt class=literal>MenuItem</tt> is the basic item 
that goes on a <tt class=literal>Menu</tt>. Menus 
themselves are menu items, allowing submenus to be nested inside of menus. 
<tt class=literal>MenuItem</tt> is a subclass of <tt class=literal>MenuComponent</tt>. 

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-10-SECT-4.1">MenuItem Methods</A></h3>Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public MenuItem () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The first <tt class=literal>MenuItem</tt> constructor 
creates a <tt class=literal>MenuItem</tt> with an 
empty label and no keyboard shortcut. To set the label at later time, use 
<tt class=literal>setLabel()</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public MenuItem (String label) </I><br>
<dd>

<p class=para>
This <tt class=literal>MenuItem</tt> constructor creates 
a <tt class=literal>MenuItem</tt> with a label of 
<tt class=literal>label</tt> and no keyboard shortcut. 
A label of "-" represents a separator. 

<p>
<dt class=varlistentry><i class=emphasis>public MenuItem (String label, MenuShortcut shortcut) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The final <tt class=literal>MenuItem</tt> constructor 
creates a <tt class=literal>MenuItem</tt> with a label 
of <tt class=literal>label</tt> and a <tt class=literal>MenuShortcut</tt> 
of <tt class=literal>shortcut</tt>. Pressing the shortcut 
key is the same as selecting the menu item. </DL>
Menu labels

<p class=para>
Each <tt class=literal>MenuItem</tt> has a label. 
This is the text that is displayed on the menu. 

<div class=note>
<p class=note><blockquote><p><b>NOTE:</B> 
</blockquote><p>
</DIV>

<p class=para>
Prior to Java 1.1, there was no portable way to associate a hot key 
with a <tt class=literal>MenuItem</tt>. However, in Java 1.0, if 
you precede a character with an &amp; on a Windows platform, it will appear 
underlined, and that key will act as the menu's mnemonic key (a different type of 
shortcut from <tt class=literal>MenuShortcut</tt>). 
Unfortunately, on a Motif platform, the user will see the &amp;. Because 
the &amp; is part of the label, even if it is not displayed, you must include 
it explicitly whenever you compare the label to a string. 
</blockquote><p>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public String getLabel () </I><br>
<dd>

<p class=para>
The <tt class=literal>getLabel()</tt> method retrieves 
the label associated with the <tt class=literal>MenuItem</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void setLabel (String label) </I><br>
<dd>

<p class=para>
The <tt class=literal>setLabel()</tt> method changes 
the label of the <tt class=literal>MenuItem</tt> to 
<tt class=literal>label</tt>. </DL>
Shortcuts

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public MenuShortcut getMenuShortcut () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getMenuShortcut()</tt> method 
retrieves the shortcut associated with this <tt class=literal>MenuItem</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public void setShortcut (MenuShortcut shortcut) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setShortcut()</tt> method allows 
you to change the shortcut associated with a <tt class=literal>MenuItem</tt> 
to <tt class=literal>shortcut</tt> after the <tt class=literal>MenuItem</tt> 
has been created. 

<p>
<dt class=varlistentry><i class=emphasis>public void deleteMenuShortcut () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>deleteMenuShortcut()</tt> method 
removes any associated <tt class=literal>MenuShortcut</tt> 
from the <tt class=literal>MenuItem</tt>. If there 
was no shortcut, nothing happens. </DL>
Enabling

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public boolean isEnabled () </I><br>
<dd>

<p class=para>
The <tt class=literal>isEnabled()</tt> method checks 
to see if the <tt class=literal>MenuItem</tt> is currently 
enabled. An enabled <tt class=literal>MenuItem</tt> 
can be selected by the user. A disabled <tt class=literal>MenuItem</tt>, 
by convention, appears grayed out on the <tt class=literal>Menu</tt>. 
Initially, each <tt class=literal>MenuItem</tt> is 
enabled. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void setEnabled(boolean b) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public void enable (boolean condition) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>setEnabled()</tt> method either 
enables or disables the <tt class=literal>MenuItem</tt> 
based on the value of <tt class=literal>condition</tt>. 
If <tt class=literal>condition</tt> is <tt class=literal>true</tt>, 
the <tt class=literal>MenuItem</tt> is enabled. If 
<tt class=literal>condition</tt> is <tt class=literal>false</tt>, 
it is disabled. When enabled, the user can select it, generating <tt class=literal>ACTION_EVENT</tt> 
or notifying the <tt class=literal>ActionListener</tt>. 
When disabled, the peer does not generate an <tt class=literal>ACTION_EVENT</tt> 
if the user tries to select the <tt class=literal>MenuItem</tt>. 
A disabled <tt class=literal>MenuItem</tt> is usually 
grayed out to signify its state. The way that disabling is signified is platform 
specific. 

<p class=para>
<tt class=literal>enable()</tt> is the Java 1.0 name 
for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void enable () <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>enable()</tt> method enables 
the <tt class=literal>MenuItem</tt>. In Java 1.1, 
it is better to use <tt class=literal>setEnabled()</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void disable () <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>disable()</tt> method disables 
the component so that the user cannot select it. In Java 1.1, it is better 
to use <tt class=literal>setEnabled()</tt>. </DL>
Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public synchronized void addNotify ()  </I><br>
<dd>

<p class=para>
The <tt class=literal>addNotify()</tt> method creates 
the <tt class=literal>MenuItem</tt> peer. 

<p>
<dt class=varlistentry><i class=emphasis>public String paramString ()</I><br>
<dd>

<p class=para>
The <tt class=literal>paramString()</tt> method of 
<tt class=literal>MenuItem</tt> should be protected 
like other <tt class=literal>paramString()</tt> methods. 
However, it is public so you have access to it. When you call the <tt class=literal>toString()</tt> 
method of a <tt class=literal>MenuItem</tt>, the default 
<tt class=literal>toString()</tt> method of <tt class=literal>MenuComponent</tt> 
is called. This in turn calls <tt class=literal>paramString()</tt> 
which builds up the string to display. At the <tt class=literal>MenuItem</tt> 
level, the current label of the object and the shortcut (if present) is 
appended to the output. If the constructor for the <tt class=literal>MenuItem</tt> 
was <tt class=literal>new MenuItem(`File`)</tt>, 
the results of <tt class=literal>toString()</tt> would 
be: </DL>
<div class=screen>
<p>
<pre>
java.awt.MenuItem[label=File]
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-10-SECT-4.2">MenuItem Events</A></h3><a name="CH10.EVENT1"></A><a name="CH10.EVENT1A"></A> Event handling

<p class=para>
With 1.0 event handing, a <tt class=literal>MenuItem</tt> 
generates an <tt class=literal>ACTION_EVENT</tt> when 
it is selected. The argument to <tt class=literal>action()</tt> 
will be the label of the <tt class=literal>MenuItem</tt>. 
But the target of the <tt class=literal>ACTION_EVENT</tt> 
is the <tt class=literal>Frame</tt> containing the 
menu. You cannot subclass <tt class=literal>MenuItem</tt> 
and catch the <tt class=literal>Event</tt> within 
it with <tt class=literal>action()</tt>, but you can 
with <tt class=literal>postEvent()</tt>. No other 
events are generated for <tt class=literal>MenuItem</tt> 
instances. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public boolean action (Event e, Object o)--overridden by user, called by 
system </I><br>
<dd>

<p class=para>
The <tt class=literal>action()</tt> method for a <tt class=literal>MenuItem</tt> 
signifies that the user selected it. <tt class=literal>e</tt> 
is the <tt class=literal>Event</tt> instance for the 
specific event, while <tt class=literal>o</tt> is 
the label of the <tt class=literal>MenuItem</tt>. </DL>
Listeners and 1.1 event handling

<p class=para>
With the 1.1 event model, you register listeners, and they are told when 
the event happens. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public String getActionCommand() <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>getActionCommand()</tt> method 
retrieves the command associated with this <tt class=literal>MenuItem</tt>. 
By default, it is the label. However, the default can be changed by using 
the <tt class=literal>setActionCommand()</tt> method (described next). The command acts like the second parameter to the <tt class=literal>action()</tt> 
method in the 1.0 event model. 

<p>
<dt class=varlistentry><i class=emphasis>public void setActionCommand(String command) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setActionCommand()</tt> method 
changes the command associated with a <tt class=literal>MenuItem</tt>. 
When an <tt class=literal>ActionEvent</tt> happens, 
the <tt class=literal>command</tt> is part of the 
event. By default, this would be the label of the <tt class=literal>MenuItem</tt>. 
However, you can change the action command by calling this method. Using 
action commands is a good idea, particularly if you expect your code to 
run in a multilingual environment. 

<p>
<dt class=varlistentry><i class=emphasis>public void addActionListener(ItemListener listener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>addActionListener()</tt> method 
registers <tt class=literal>listener</tt> as an object 
interested in being notified when an <tt class=literal>ActionEvent</tt> 
passes through the <tt class=literal>EventQueue</tt> 
with this <tt class=literal>MenuItem</tt> as its target. 
The <tt class=literal>listener.actionPerformed()</tt> 
method is called whenever these events occur. Multiple listeners can be 
registered. 

<p>
<dt class=varlistentry><i class=emphasis>public void removeActionListener(ItemListener listener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>removeActionListener()</tt> 
method removes <tt class=literal>listener</tt> as 
an interested listener. If <tt class=literal>listener</tt> 
is not registered, nothing happens. 

<p>
<dt class=varlistentry><i class=emphasis>protected final void enableEvents(long eventsToEnable) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
Using the <tt class=literal>enableEvents()</tt> method 
is usually not necessary. When you register an action listener, the <tt class=literal>MenuItem</tt> 
listens for action events. However, if you wish to listen for events when 
listeners are not registered, you must enable the events explicitly by 
calling this method. The settings for the <tt class=literal>eventsToEnable</tt> 
parameter are found in the <tt class=literal>AWTEvent</tt> 
class; you can use any of the <tt class=literal>EVENT_MASK</tt> 
constants like <tt class=literal>COMPONENT_EVENT_MASK</tt>, 
<tt class=literal>MOUSE_EVENT_MASK</tt>, and <tt class=literal>WINDOW_EVENT_MASK</tt> 
ORed together for the events you care about. For instance, to listen for 
action events, call: </DL>
<div class=screen>
<p>
<pre>
enableEvents (AWTEvent.ACTION_EVENT_MASK);
</PRE>
</DIV>

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>protected final void disableEvents(long eventsToDisable) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
Using the <tt class=literal>disableEvents()</tt> method 
is usually not necessary. When you remove an action listener, the <tt class=literal>MenuItem</tt> 
stops listening for action events if there are no more listeners. However, 
if you need to, you can disable events explicitly by calling <tt class=literal>disableEvents()</tt>. 
The settings for the <tt class=literal>eventsToDisable</tt> 
parameter are found in the <tt class=literal>AWTEvent</tt> 
class; you can use any of the <tt class=literal>EVENT_MASK</tt> 
constants such as <tt class=literal>FOCUS_EVENT_MASK</tt>, 
<tt class=literal>MOUSE_MOTION_EVENT_MASK</tt>, and 
<tt class=literal>ACTION_EVENT_MASK</tt> ORed together 
for the events you no longer care about. 

<p>
<dt class=varlistentry><i class=emphasis>protected void processEvent(AWTEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>processEvent()</tt> method receives 
all <tt class=literal>AWTEvent</tt>s with this <tt class=literal>MenuItem</tt> 
as its target. <tt class=literal>processEvent()</tt> 
then passes them along to any listeners for processing. When you subclass 
<tt class=literal>MenuItem</tt>, overriding <tt class=literal>processEvent()</tt> 
allows you to process all events yourself, before sending them to any listeners. 
In a way, overriding <tt class=literal>processEvent()</tt> 
is like overriding <tt class=literal>postEvent()</tt> 
using the 1.0 event model. 

<p class=para>
If you override <tt class=literal>processEvent()</tt>, 
remember to call <tt class=literal>super.processEvent(e)</tt> 
last to ensure that regular event processing can occur. If you want to 
process your own events, it's a good idea to call <tt class=literal>enableEvents()</tt> 
to ensure that events are delivered even in the absence of registered listeners. 

<p>
<dt class=varlistentry><i class=emphasis>protected void processActionEvent(ItemEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>processActionEvent()</tt> method 
receives all <tt class=literal>ActionEvent</tt>s with 
this <tt class=literal>MenuItem</tt> as its target. 
<tt class=literal>processActionEvent()</tt> then passes 
them along to any listeners for processing. When you subclass <tt class=literal>MenuItem</tt>, 
overriding <tt class=literal>processActionEvent()</tt> 
allows you to process all action events yourself, before sending them to 
any listeners. In a way, overriding <tt class=literal>processActionEvent()</tt> 
is like overriding <tt class=literal>action() </tt>using 
the 1.0 event model. 

<p class=para>
If you override <tt class=literal>processActionEvent()</tt>, 
remember to call the method <tt class=literal>super.processActionEvent(e)</tt> 
last to ensure that regular event processing can occur. If you want to 
process your own events, it's a good idea to call <tt class=literal>enableEvents()</tt> 
to ensure that events are delivered even in the absence of registered listeners. </DL>
</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch10_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>MenuShortcut</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Menu</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
