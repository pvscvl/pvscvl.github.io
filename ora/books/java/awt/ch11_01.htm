<html>
<head>
<title>[Chapter 11] Scrolling</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:47:56 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_09.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch11_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="JAWT-CH-11">11. Scrolling</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
Scrollbar<br>
<a href="ch11_02.htm">Scrolling An Image</A><br>
<a href="ch11_03.htm">The Adjustable Interface</A><br>
<a href="ch11_04.htm">ScrollPane</A><br>

<p>
</DIV>

<p class=para>
This chapter describes how Java deals with scrolling. AWT provides two 
means for scrolling. The first is the fairly primitive <tt class=literal>Scrollbar</tt> 
object. It really provides only the means to read a value from a slider 
setting. Anything else is your responsibility: if you want to display the 
value of the setting (for example, if you're using the scrollbar 
as a volume control) or want to change the display (if you're using 
scrollbars to control an area that's too large to display), you have 
to do it yourself. The <tt class=literal>Scrollbar</tt> 
reports scrolling actions through the standard event mechanisms; it is 
up to the programmer to handle those events and perform the scrolling. <a name="CH11.SCROLL"></A>

<p class=para>
Unlike other components, which generate an <tt class=literal>ACTION_EVENT</tt> 
when something exciting happens, the <tt class=literal>Scrollbar</tt> 
generates five events: <tt class=literal>SCROLL_LINE_UP</tt>, 
<tt class=literal>SCROLL_LINE_DOWN</tt>, <tt class=literal>SCROLL_PAGE_UP</tt>, 
<tt class=literal>SCROLL_PAGE_DOWN</tt>, and <tt class=literal>SCROLL_ABSOLUTE</tt>. 
In Java 1.0, none of these events trigger a default event handler like 
the <tt class=literal>action()</tt> method. To work 
with them, you must override the <tt class=literal>handleEvent()</tt> 
method. With Java 1.1, you handle scrolling events by registering an <tt class=literal>AdjustmentListener</tt> 
with the <tt class=literal>Scrollbar.addAdjustmentListener()</tt> 
method; when adjustment events occur, the listener's <tt class=literal>adjustmentValueChanged()</tt> 
method is called. 

<p class=para>
Release 1.1 of AWT also includes a <tt class=literal>ScrollPane</tt> 
container object; it is a response to one of the limitations of AWT 1.0. 
A <tt class=literal>ScrollPane</tt> is like a <tt class=literal>Panel</tt>, 
but it has scrollbars and scrolling built in. In this sense, it's 
like <tt class=literal>TextArea</tt>, which contains 
its own scrollbars. You could use a <tt class=literal>ScrollPane</tt> 
to implement a drawing pad that could cover an arbitrarily large area. 
This saves you the burden of implementing scrolling yourself: generating 
scrollbars, handling their events, and figuring out how to redisplay the 
screen accordingly. 

<p class=para>
Both <tt class=literal>Scrollbar</tt> and <tt class=literal>ScrollPane</tt> 
take advantage of the <tt class=literal>Adjustable</tt> 
interface. <tt class=literal>Adjustable</tt> defines 
the common scrolling activities of the two classes. The <tt class=literal>Scrollbar</tt> 
class implements <tt class=literal>Adjustable</tt>; 
a <tt class=literal>ScrollPane</tt> has two methods 
that return an <tt class=literal>Adjustable</tt> object, 
one for each scrollbar. Currently, you can use the <tt class=literal>ScrollPane</tt>'s 
"adjustables" to find out the scrollbar settings in each direction. 
You can't change the settings or register <tt class=literal>AdjustmentListener</tt>s; 
the appropriate methods exist, but they don't do anything. It's 
not clear whether this is appropriate behavior or a bug (remember, an interface 
only lists methods that must be present but doesn't require them 
to do anything); it may change in a later release. 

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-11-SECT-1">11.1 Scrollbar</A></h2>

<p class=para>
<a name="CH11.SCR1"></A>Scrollbars come in two flavors: horizontal and vertical. Although there 
are several methods for setting the page size, scrollbar range (minimum 
and maximum values), and so on, basically all you can do is get and set 
the scrollbar's value. Scrollbars don't contain any area to 
display their value, though if you want one, you could easily attach a 
label. 

<p class=para>
To work with a <tt class=literal>Scrollbar</tt>, you 
need to understand the pieces from which it is built. <a href="#JAWT-CH-11-FIG-1">Figure 11.1</A> 
identifies each of the pieces. At both ends are arrows, which are 
used to change the <tt class=literal>Scrollbar</tt> 
value the default amount (one unit) in the direction selected. The paging 
areas are used to change the <tt class=literal>Scrollbar</tt> 
value one page (ten units by default) at a time in the direction selected. 
The slider can be moved to set the scrollbar to an arbitrary value within 
the available range. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-11-FIG-1">Figure 11.1: Scrollbar elements</A></h4>


<p>
<img align=middle src="figs/jawt1101.gif" alt="[Graphic: Figure 11-1]" width=193 height=155 border=0>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-11-SECT-1.1">Scrollbar Methods</A></h3>Constants

<p class=para>
There are two direction specifiers for <tt class=literal>Scrollbar</tt>. 
The direction tells the <tt class=literal>Scrollbar</tt> 
which way to orient itself. They are used in the constructors, as a parameter 
to <tt class=literal>setOrientation()</tt>, and as 
the return value for the <tt class=literal>getOrientation()</tt> 
method. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public final static int HORIZONTAL </I><br>
<dd>

<p class=para>
<tt class=literal>HORIZONTAL</tt> is the constant 
for horizontal orientation. 

<p>
<dt class=varlistentry><i class=emphasis>public final static int VERTICAL </I><br>
<dd>

<p class=para>
<tt class=literal>VERTICAL</tt> is the constant for 
vertical orientation. </DL>
Constructors

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public Scrollbar (int orientation, int value, int visible, int minimum, 
int maximum) </I><br>
<dd>

<p class=para>
The <tt class=literal>Scrollbar</tt> constructor creates 
a <tt class=literal>Scrollbar</tt> with a direction 
of <tt class=literal>orientation</tt> and initial 
value of <tt class=literal>value</tt>. <tt class=literal>visible</tt> 
is the size of the slider. <tt class=literal>minimum</tt> 
and <tt class=literal>maximum</tt> are the range of 
values that the <tt class=literal>Scrollbar</tt> can 
be. If <tt class=literal>orientation</tt> is not <tt class=literal>HORIZONTAL</tt> 
or <tt class=literal>VERTICAL</tt>, the constructor 
throws the run-time exception 
<tt class=literal>IllegalArgumentException</tt>. If 
<tt class=literal>maximum</tt> is below the value 
of <tt class=literal>minimum</tt>, the scrollbar's 
minimum and maximum values are both set to <tt class=literal>minimum</tt>. 
If <tt class=literal>value</tt> is outside the range 
of the scrollbar, it is set to the limit it exceeded. The default line 
scrolling amount is one. The default paging amount is ten. 

<p class=para>
If you are using the scrollbar to control a visual object, <tt class=literal>visible</tt> 
should be set to the amount of a displayed object that is on the screen 
at one time, relative to the entire size of the object (i.e., relative 
to the scrollbar's range: <tt class=literal>maximum</tt> 
- <tt class=literal>minimum</tt>). Some platforms 
ignore this parameter and set the scrollbar to a fixed size. 

<p>
<dt class=varlistentry><i class=emphasis>public Scrollbar (int orientation) </I><br>
<dd>

<p class=para>
This constructor for <tt class=literal>Scrollbar</tt> 
creates a <tt class=literal>Scrollbar</tt> with the 
direction of <tt class=literal>orientation</tt>. In 
Java 1.0, the initial settings for <tt class=literal>value</tt>, 
<tt class=literal>visible</tt>, <tt class=literal>minimum</tt>, 
and <tt class=literal>maximum</tt> are 0. In Java 
1.1, the default value for <tt class=literal>visible</tt> 
is 10, and the default for <tt class=literal>maximum</tt> 
is 100; the other values default to 0. If <tt class=literal>orientation</tt> 
is not <tt class=literal>HORIZONTAL</tt> or <tt class=literal>VERTICAL</tt>, 
the constructor throws the run-time 
exception <tt class=literal>IllegalArgumentException</tt>. 
This constructor is helpful if you want to reserve space for the <tt class=literal>Scrollbar</tt> 
on the screen, to be configured later. You would then use the <tt class=literal>setValues()</tt> 
method to configure the scrollbar. 

<p>
<dt class=varlistentry><i class=emphasis>public Scrollbar () </I><br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>VERTICAL</tt> 
<tt class=literal>Scrollbar</tt>. In Java 1.0, the 
initial settings for <tt class=literal>value</tt>, 
<tt class=literal>visible</tt>, <tt class=literal>minimum</tt>, 
and <tt class=literal>maximum</tt> are 0. In Java 
1.1, the default value for <tt class=literal>visible</tt> 
is 10, and the default for <tt class=literal>maximum</tt> 
is 100; the other values default to 0. You would then use the <tt class=literal>setValues()</tt> 
method to configure the scrollbar. </DL>
<p class=para>
<a href="#JAWT-CH-11-FIG-2">Figure 11.2</A> shows both vertical and horizontal 
scrollbars. It also demonstrates a problem you'll run into if you're not careful. If not constrained by the <tt class=literal>LayoutManager</tt>, 
scrollbars can get very fat. The result is rarely pleasing. The solution 
is to place scrollbars in layout managers that restrict width for vertical 
scrollbars or height for horizontal ones. The side regions (i.e., everything 
except the center) of a border layout are ideal. In the long term, the solution will be scrollbars that give you their maximum size and layout managers that observe the maximum size.

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-11-FIG-2">Figure 11.2: Vertical and horizontal scrollbars</A></h4>


<p>
<img align=middle src="figs/jawt1102.gif" alt="[Graphic: Figure 11-2]" width=164 height=155 border=0>

</DIV>

Adjustable Methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public int getOrientation () </I><br>
<dd>

<p class=para>
The <tt class=literal>getOrientation()</tt> method 
returns the current orientation of the scrollbar: either <tt class=literal>Scrollbar.HORIZONTAL</tt> 
or <tt class=literal>Scrollbar.VERTICAL</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void setOrientation (int orientation) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setOrientation()</tt> method changes the orientation
of the scrollbar to <tt class=literal>orientation</tt>, which must be
either <tt class=literal>Scrollbar.HORIZONTAL</tt> or
<tt class=literal>Scrollbar.VERTICAL</tt>. If
<tt class=literal>orientation</tt> is not <tt class=literal>HORIZONTAL</tt> or
<tt class=literal>VERTICAL</tt>, this method throws the run-time exception
<tt class=literal>IllegalArgumentException</tt>. It was not possible to
change the orientation of a scrollbar prior to Java 1.1.

<p>
<dt class=varlistentry><i class=emphasis>public int getVisibleAmount () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public int getVisible () </I> <img src="gifs/wstar.gif" alt="(Deprecated)" border=0><br>
<dd>

<p class=para>
The <tt class=literal>getVisibleAmount()</tt> method gets the
<tt class=literal>visible</tt> setting of the
<tt class=literal>Scrollbar</tt>. If the scrollbar's
<tt class=literal>Container</tt> is resized, the
<tt class=literal>visible</tt> setting is not automatically changed. <tt class=literal>getVisible()</tt> is the Java 1.0 
name for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void setVisibleAmount (int amount) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setVisibleAmount()</tt> method 
changes the current <tt class=literal>visible</tt> 
setting of the <tt class=literal>Scrollbar</tt> to 
<tt class=literal>amount</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public int getValue () </I><br>
<dd>

<p class=para>
The <tt class=literal>getValue()</tt> method is probably 
the most frequently called method of <tt class=literal>Scrollbar</tt>. 
It returns the current value of the scrollbar queried. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void setValue (int value) </I><br>
<dd>

<p class=para>
The <tt class=literal>setValue()</tt> method changes 
the value of the scrollbar to <tt class=literal>value</tt>. 
If <tt class=literal>value</tt> exceeds a scrollbar 
limit, the scrollbar's new value is set to that limit. In Java 1.1, 
this method is synchronized; it was not in earlier versions. 

<p>
<dt class=varlistentry><i class=emphasis>public int getMinimum () </I><br>
<dd>

<p class=para>
The <tt class=literal>getMinimum()</tt> method returns 
the current minimum setting for the scrollbar. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void setMinimum (int minimum) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setMinimum()</tt> method changes 
the <tt class=literal>Scrollbar</tt>'s minimum 
value to <tt class=literal>minimum</tt>. The current 
setting for the <tt class=literal>Scrollbar</tt> may 
change to <tt class=literal>minimum</tt> if <tt class=literal>minimum</tt> 
increases above <tt class=literal>getValue()</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public int getMaximum () </I><br>
<dd>

<p class=para>
The <tt class=literal>getMaximum()</tt> method returns 
the current maximum setting for the scrollbar. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void setMaximum (int maximum) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>setMaximum()</tt> method changes 
the maximum 
value of the <tt class=literal>Scrollbar</tt> to <tt class=literal>maximum</tt>. The current 
setting for the <tt class=literal>Scrollbar</tt> may 
change to <tt class=literal>maximum</tt> if <tt class=literal>maximum</tt> 
decreases below <tt class=literal>getValue()</tt>. 

<p>
<dt class=varlistentry><i class=emphasis>public synchronized void setValues (int value, int visible, int minimum, 
int maximum) </I><br>
<dd>

<p class=para>
The <tt class=literal>setValues()</tt> method changes 
the <tt class=literal>value</tt>, <tt class=literal>visible</tt>, 
<tt class=literal>minimum</tt>, and <tt class=literal>maximum</tt> 
settings all at once. In Java 1.0.2, separate methods do not exist for 
changing <tt class=literal>visible</tt>, <tt class=literal>minimum</tt>, 
or <tt class=literal>maximum</tt>. The scrollbar's 
value is set to <tt class=literal>value</tt>, visible 
to <tt class=literal>visible</tt>, minimum to <tt class=literal>minimum</tt>, 
and maximum to <tt class=literal>maximum</tt>. If 
<tt class=literal>maximum</tt> is below the value 
of <tt class=literal>minimum</tt>, it is set to <tt class=literal>minimum</tt>. 
If <tt class=literal>value</tt> is outside the range 
of the scrollbar, it is set to the limit it exceeded. In Java 1.1, this 
method is synchronized; it was not in earlier versions. 

<p>
<dt class=varlistentry><i class=emphasis>public int getUnitIncrement () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public int getLineIncrement () <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>getUnitIncrement()</tt> method 
returns the current line increment. This is the amount the scrollbar will 
scroll if the user clicks on one of the scrollbar's arrows. 

<p class=para>
<tt class=literal>getLineIncrement()</tt> is the Java 
1.0 name for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public void setUnitIncrement (int amount) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public void setLineIncrement (int amount) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>setUnitIncrement()</tt> method 
changes the line increment amount to <tt class=literal>amount</tt>. 

<p class=para>
<tt class=literal>setLineIncrement()</tt> is the Java 
1.0 name for this method. 

<p class=para>
Changing the line increment amount was not possible in Java 1.0.2. This 
method acted like it returned successfully, and <tt class=literal>getLineIncrement()</tt> 
returned the new value, but the <tt class=literal>Scrollbar</tt> 
changed its value by only one (the default) when you clicked on one of 
the arrows. However, you could work around this defect by explicitly handling the 
<tt class=literal>SCROLL_LINE_UP</tt> and <tt class=literal>SCROLL_LINE_DOWN</tt> 
events: get the correct line increment, adjust the display appropriately, 
and then set call <tt class=literal>setValue()</tt> 
to correct the scrollbar's value. This workaround is not needed in 
Java 1.1. 

<p>
<dt class=varlistentry><i class=emphasis>public int getBlockIncrement () <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public int getPageIncrement () <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>getBlockIncrement()</tt> method 
returns the current paging increment. This is the amount the scrollbar will 
scroll if the user clicks between the slider and one of the scrollbar's 
arrows. 

<p class=para>
<tt class=literal>getPageIncrement()</tt> is the Java 
1.0 name for this method. 

<p>
<dt class=varlistentry><i class=emphasis>public void setBlockIncrement (int amount) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br><i class=emphasis>public void setPageIncrement (int amount) <img src="gifs/wstar.gif" alt="(Deprecated)" border=0></I><br>
<dd>

<p class=para>
The <tt class=literal>setBlockIncrement()</tt> method 
changes the paging increment amount to <tt class=literal>amount</tt>. 

<p class=para>
<tt class=literal>setPageIncrement()</tt> is the Java 
1.0 name for this method. 

<p class=para>
Changing the paging increment amount was not possible in Java 1.0.2. This method 
acts like it returns successfully, and <tt class=literal>getPageIncrement()</tt> 
returns the new value, but the <tt class=literal>Scrollbar</tt> 
changes its value only by 10 (the default) when you click on one of the 
paging areas. However, you can work around this defect by explicitly handling the 
<tt class=literal>SCROLL_PAGE_UP</tt> and <tt class=literal>SCROLL_PAGE_DOWN</tt> 
events: get the correct page increment, adjust the display appropriately, 
and then set call <tt class=literal>setValue()</tt> 
to correct the scrollbar's value. This workaround is not necessary 
in Java 1.1. </DL>
Miscellaneous methods

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public synchronized void addNotify ()  </I><br>
<dd>

<p class=para>
The <tt class=literal>addNotify()</tt> method creates 
the <tt class=literal>Scrollbar</tt>'s peer. 
If you override this method, call <tt class=literal>super.addNotify()</tt> 
first. You will then be able to do everything you need with the information 
about the newly created peer. 

<p>
<dt class=varlistentry><i class=emphasis>protected String paramString ()  </I><br>
<dd>

<p class=para>
<tt class=literal>Scrollbar</tt> doesn't have 
its own <tt class=literal>toString()</tt> method; 
when you call the <tt class=literal>toString()</tt> 
method of a <tt class=literal>Scrollbar</tt>, you 
are actually calling the method <tt class=literal>Component.toString()</tt>. This in turn calls <tt class=literal>paramString()</tt>, 
which builds the string to display. For a <tt class=literal>Scrollbar</tt>, 
<tt class=literal>paramString()</tt> puts the scrollbar's 
value, visibility, minimum, maximum, and direction into the string. In 
Java 1.0, there is a minor bug in the output. Instead of displaying the 
scrollbar's <tt class=literal>visible</tt> setting 
(an integer), <tt class=literal>paramString()</tt> 
displays the component's 
<tt class=literal>visible</tt> setting (a boolean). 
(This is corrected in Java 1.1.) The following <tt class=literal>String</tt> 
is the result of calling <tt class=literal>toString()</tt> 
for a horizontal <tt class=literal>Scrollbar</tt> 
that hasn't been configured yet: </DL>
<div class=screen>
<p>
<pre>
java.awt.Scrollbar[0,0,0x0,invalid,val=0,vis=true,min=0,max=0,horz]
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JAWT-CH-11-SECT-1.2">Scrollbar Events</A></h3>

<p class=para>
<a name="CH11.EVENT2"></A><a name="CH11.EVENT3"></A>With the 1.0 event model, scrollbars generate five kinds of events 
in response to user interaction: <tt class=literal>SCROLL_LINE_UP</tt>, 
<tt class=literal>SCROLL_LINE_DOWN</tt>, <tt class=literal>SCROLL_PAGE_UP</tt>, 
<tt class=literal>SCROLL_PAGE_DOWN</tt>, and <tt class=literal>SCROLL_ABSOLUTE</tt>. 
The event that occurs depends on what the user did, as shown in <a href="#JAWT-CH-11-TAB-1">Table 11.1</A>; 
the event type is specified in the <tt class=literal>id</tt> 
field of the <tt class=literal>Event</tt> object passed 
to <tt class=literal>handleEvent()</tt>. However, 
as a programmer, you often do not care which of these five events happened. 
You care only about the scrollbar's 
new value, which is always passed as the <tt class=literal>arg</tt> 
field of the <tt class=literal>Event</tt> object. 

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="JAWT-CH-11-TAB-1">Table 11.1: Scrollbar Events</A></CAPTION>
<tr class=row>
<th align="left">Event Type (Event.id)</TH>
<th align="left">Event Meaning</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>SCROLL_ABSOLUTE</tt></TD>
<td align="left">User drags slider.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>SCROLL_LINE_DOWN</tt></TD>
<td align="left">User presses down arrow.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>SCROLL_LINE_UP</tt></TD>
<td align="left">User presses up arrow.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>SCROLL_PAGE_DOWN</tt></TD>
<td align="left">User selects down paging area.</TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>SCROLL_PAGE_UP</tt></TD>
<td align="left">User selects up paging area.</TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
Because scrollbar events do not trigger any default event handlers (like 
<tt class=literal>action()</tt>), it is necessary 
to override the <tt class=literal>handleEvent()</tt> 
method to deal with them. Unless your version of <tt class=literal>handleEvent()</tt> 
deals with all conceivable events, you must ensure that the original <tt class=literal>handleEvent()</tt> 
method is called. The simplest way is to have the return statement call 
<tt class=literal>super.handleEvent()</tt>. 

<p class=para>
Most <tt class=literal>handleEvent()</tt> 
methods first identify the type of event that occurred. The following two 
code blocks demonstrate different ways of checking for the <tt class=literal>Scrollbar</tt> 
events. 

<div class=screen>
<p>
<pre>
if ((e.id == Event.SCROLL_LINE_UP) ||
    (e.id == Event.SCROLL_LINE_DOWN) ||
    (e.id == Event.SCROLL_PAGE_UP) ||
    (e.id == Event.SCROLL_PAGE_DOWN) ||
    (e.id == Event.SCROLL_ABSOLUTE)) {
    // Then determine which Scrollbar was selected and act upon it
}
</PRE>
</DIV>

<p class=para>
Or more simply: 

<div class=screen>
<p>
<pre>
if (e.target instanceof Scrollbar) {
    // Then determine which Scrollbar was selected and act upon it.
}
</PRE>
</DIV>

<p class=para>
Although the second code block is simpler, the first is the better choice 
because it is more precise. For example, what would happen if mouse events 
are passed to scrollbars? Different Java platforms differ most in the types 
of events passed to different objects; Netscape Navigator 
3.0 for Windows 95 sends <tt class=literal>MOUSE_ENTER</tt>, <tt class=literal>MOUSE_EXIT</tt>, 
and <tt class=literal>MOUSE_MOVE</tt> events to the 
<tt class=literal>Scrollbar</tt>.[1] The second code block executes for 
all the mouse events--in fact, any event coming from a <tt class=literal>Scrollbar</tt>. 
Therefore, it executes much more frequently (there can be many <tt class=literal>MOUSE_MOVE</tt> 
events), leading to poor interactive performance. 

<blockquote class=footnote>
<p class=para>[1] 
<tt class=literal>MOUSE_UP</tt>, <tt class=literal>MOUSE_DOWN</tt>, and <tt class=literal>MOUSE_DRAG</tt> are not generated since these operations 
generate <tt class=literal>SCROLL</tt> events.
</blockquote>
<p class=para>
Another platform-specific issue is the way the system generates <tt class=literal>SCROLL_ABSOLUTE</tt> 
events. Some platforms generate many events while the user drags the scrollbar. 
Others don't generate the event until the user stops dragging the 
scrollbar. Some implementations wait until the user stops dragging the 
scrollbar and then generate a flood of <tt class=literal>SCROLL_ABSOLUTE</tt> 
events for you to handle. In theory, it does not matter which is happening, 
as long as your event-processing code is tight. If your event-processing 
code is time consuming, you may wish to start another thread to perform 
the work. If the thread is still alive when the next event comes along, 
flag it down, and restart the operation. Listeners and 1.1 event handling

<p class=para>
With the 1.1 event model, you register an <tt class=literal>AdjustmentListener</tt> 
by calling the <tt class=literal>addAdjustmentListener()</tt> 
method. Then when the user moves the <tt class=literal>Scrollbar</tt> 
slider, the <tt class=literal>AdjustmentListener.adjustmentValueChanged()</tt> 
method is called through the protected <tt class=literal>Scrollbar.processAdjustmentEvent()</tt> 
method. Key, mouse, and focus listeners are registered through the three <tt class=literal>Component</tt> 
methods of <tt class=literal>addKeyListener()</tt>, 
<tt class=literal>addMouseListener()</tt>, and <tt class=literal>addFocusListener()</tt>, 
respectively. Because you need to register a separate listener for mouse 
events, you no longer have the problem of distinguishing between mouse 
events and slider events. An adjustment listener will never receive mouse 
events. 

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>public void addAdjustmentListener(AdjustmentListener listener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>addAdjustmentListener()</tt> 
method registers <tt class=literal>listener</tt> as 
an object interested in being notified when an <tt class=literal>AdjustmentEvent</tt> 
passes through the <tt class=literal>EventQueue</tt> 
with this <tt class=literal>Scrollbar</tt> as its 
target. The method <tt class=literal>listener.adjustmentValueChanged()</tt> 
is called when an event occurs. Multiple listeners can be registered. 

<p>
<dt class=varlistentry><i class=emphasis>public void removeAdjustmentListener(ItemListener listener) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>removeAdjustmentListener()</tt> 
method removes <tt class=literal>listener</tt> as 
a interested listener. If <tt class=literal>listener</tt> 
is not registered, nothing happens. 

<p>
<dt class=varlistentry><i class=emphasis>protected void processEvent(AWTEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>processEvent()</tt> method receives 
every <tt class=literal>AWTEvent</tt> with this <tt class=literal>Scrollbar</tt> 
as its target. <tt class=literal>processEvent()</tt> 
then passes it along to any listeners for processing. When you subclass 
<tt class=literal>Scrollbar</tt>, overriding <tt class=literal>processEvent()</tt> 
allows you to process all events yourself, before sending them to any listeners. 
In a way, overriding <tt class=literal>processEvent()</tt> 
is like overriding <tt class=literal>handleEvent()</tt> 
using the 1.0 event model. 

<p class=para>
If you override the <tt class=literal>processEvent()</tt> method, 
remember to call the <tt class=literal>super.processEvent(e)</tt> method last to ensure that regular event processing can occur. If you want to 
process your own events, it's a good idea to call <tt class=literal>enableEvents()</tt> 
(inherited from <tt class=literal>Component</tt>) 
to ensure that events are delivered even in the absence of registered listeners. 

<p>
<dt class=varlistentry><i class=emphasis>protected void processAdjustmentEvent(ItemEvent e) <img src="gifs/bstar.gif" alt="(New)" border=0> </I><br>
<dd>

<p class=para>
The <tt class=literal>processAdjustmentEvent()</tt> 
method receives all <tt class=literal>AdjustmentEvent</tt>s 
with this <tt class=literal>Scrollbar</tt> as its 
target. <tt class=literal>processAdjustmentEvent()</tt> 
then passes them along to any listeners for processing. When you subclass 
<tt class=literal>Scrollbar</tt>, overriding <tt class=literal>processAdjustmentEvent()</tt> 
allows you to process all events yourself, before sending them to any listeners. 

<p class=para>
If you override <tt class=literal>processAdjustmentEvent()</tt>, 
you must remember to call <tt class=literal>super.processAdjustmentEvent(e)</tt> 
last to ensure that regular event processing can occur. If you want to 
process your own events, it's a good idea to call <tt class=literal>enableEvents()</tt> 
(inherited from <tt class=literal>Component</tt>) 
to ensure that events are delivered even in the absence of registered listeners. </DL>
</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_09.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch11_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>PopupMenu</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Scrolling An Image</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
