<html>
<head>
<title>[Chapter 11] 11.2 Scrolling An Image</TITLE>
<meta name="author" content="John Zukowski">
<meta name="date" content="Thu Jul 31 14:48:07 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java AWT">
<meta name="title" content="Java AWT">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java AWT" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11<br>Scrolling</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch11_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JAWT-CH-11-SECT-2">11.2 Scrolling An Image</A></h2>

<p class=para>
<a name="CH11.IMAGE1"></A><a name="CH11.IMAGE2"></A><a href="#JAWT-CH-11-EX-1">Example 11.1</A> is a Java application that displays any image in 
the current directory in a viewing area. The viewing area scrolls to accommodate 
larger images; the user can use the scrollbars or keypad keys to scroll 
the image. In Java 1.1, it is trivial to implement this example with a <tt class=literal>ScrollPane</tt>; 
however, if you're using 1.0, you don't have this luxury. Even 
if you're using 1.1, this example shows a lot about how to use scrollbars. 

<p class=para>
Our application uses a <tt class=literal>Dialog</tt> 
to select which file to display; a <tt class=literal>FilenameFilter</tt> 
limits the list to image files. We use a menu to let the user request a 
file list or exit the program. After the user picks a file, the application 
loads it into the display area. <a href="#JAWT-CH-11-FIG-3">Figure 11.3</A> 
shows the main scrolling window. 

<div class=figure>
<h4 class=figure><a class="TITLE" name="JAWT-CH-11-FIG-3">Figure 11.3: Scrolling an image</A></h4>


<p>
<img align=middle src="figs/jawt1104.gif" alt="[Graphic: Figure 11-3]" width=184 height=255 border=0>

</DIV>

<p class=para>
The code for the scrolling image consists of a <tt class=literal>ScrollingImage</tt> 
class, plus several helper classes. It places everything into the file <i class=emphasis>ScrollingImage.java</I> 
for compilation. 

<div class=example>
<h4 class=example><a class="TITLE" name="JAWT-CH-11-EX-1">Example 11.1: Source Code for Scrolling an Image</A></h4>

<div class=screen>
<p>
<pre>
import java.awt.*;
import java.io.FilenameFilter;
import java.io.File;
</PRE>
</DIV>

</DIV>

<p class=para>
The first class contains the <tt class=literal>FilenameFilter</tt> 
used to select relevant filenames: that is, files that are likely to contain 
GIF, JPEG, or XBM images. If the filename has an appropriate ending, the 
<tt class=literal>accept()</tt> method returns <tt class=literal>true</tt>; 
otherwise, it returns <tt class=literal>false</tt>. 

<div class=screen>
<p>
<pre>
// True for files ending in jpeg/jpg/gif/xbm
class ImageFileFilter implements FilenameFilter {
    public boolean accept (File dir, String name) {
        String tempname = name.toLowerCase();
        return (tempname.endsWith ("jpg") || tempname.endsWith ("jpeg") ||
                tempname.endsWith ("gif") || tempname.endsWith ("xbm"));
    }
}
</PRE>
</DIV>

<p class=para>
The <tt class=literal>ImageListDialog</tt> class displays 
a list of files from which the user can select. Instead of using <tt class=literal>FileDialog</tt>, 
we created a customized <tt class=literal>List</tt> 
to prevent the user from roaming around the entire hard drive; choices 
are limited to appropriate files in the current directory. When the user 
selects an entry (by double-clicking), the image is then displayed in the scrolling 
area. 

<div class=screen>
<p>
<pre>
class ImageListDialog extends Dialog {
    private String name = null;
    private String entries[];
    private List list;
    ImageListDialog (Frame f) {
        super (f, "Image List", true);
        File dir = new File (System.getProperty("user.dir"));
        entries = dir.list (new ImageFileFilter());
        list = new List (10, false);
        for (int i=0;i&lt;entries.length;i++) {
            list.addItem (entries[i]);
        }
        add ("Center", list);
        pack();
    }
    public String getName () {
        return name;
    }
    public boolean action (Event e, Object o) {
        name = (String)e.arg;
        ((ScrollingImage)getParent()).processImage();
        dispose();
        return true;
    }
}
</PRE>
</DIV>

<p class=para>
The code in this class is straightforward. The constructor reads the current 
directory from the system property list, uses the <tt class=literal>list()</tt> 
method of the <tt class=literal>File</tt> class to 
create a list of files that match our filename filter, and then creates 
a <tt class=literal>List</tt> object that lists these 
files. <tt class=literal>getName()</tt> returns the 
name of the selected file. <tt class=literal>action()</tt> 
is called when the user selects a file; it sets the name of the selected 
file from the <tt class=literal>arg</tt> field of 
the <tt class=literal>Event</tt> and then calls the 
<tt class=literal>processImage()</tt> method of its 
parent container. The parent container of our <tt class=literal>ImageListDialog</tt> 
is the <tt class=literal>ScrollingImage</tt> class 
we are defining; its <tt class=literal>processImage()</tt> 
method displays a scrollable image. 

<p class=para>
The next class, <tt class=literal>ImageCanvas</tt>, 
is the <tt class=literal>Canvas</tt> that the image 
is drawn onto. We use a separate <tt class=literal>Canvas</tt> 
rather than drawing directly onto the <tt class=literal>Frame</tt> 
so that the scrollbars do not overlap the edges of the image. You will 
notice that the <tt class=literal>paint()</tt> method 
uses negative <tt class=literal>x</tt> and <tt class=literal>y</tt> 
values. This starts the drawing outside the <tt class=literal>Canvas</tt> 
area; as a result, the <tt class=literal>Canvas</tt> 
displays only part of the image. This is how we do the actual scrolling. 
(<tt class=literal>xPos</tt>, <tt class=literal>yPos</tt>) 
are the values given to us from the scrollbars; by positioning the image 
at (<tt class=literal>-xPos</tt>, -<tt class=literal>yPos</tt>), 
we ensure that the point (<tt class=literal>xPos</tt>, 
<tt class=literal>yPos</tt>) appears in the upper 
left corner of the canvas. 

<div class=screen>
<p>
<pre>
class ImageCanvas extends Canvas {
    Image image;
    int xPos, yPos;
    public void redraw (int xPos, int yPos, Image image) {
        this.xPos = xPos;
        this.yPos = yPos;
        this.image = image;
        repaint();
    }
    public void paint (Graphics g) {
        if (image != null)
            g.drawImage (image, -xPos, -yPos, this);
    }
}
</PRE>
</DIV>

<p class=para>
<tt class=literal>ScrollingImage</tt> provides the 
framework for the rest of the program. It provides a menu to bring up the 
<tt class=literal>Dialog</tt> to choose the file, 
the scrollbars to scroll the scrolling canvas, and the image canvas area. 
This class also implements event handling methods to capture the scrollbar 
events, paging keys, and menu events. 

<div class=screen>
<p>
<pre>
public class ScrollingImage extends Frame {
    static Scrollbar horizontal, vertical;
    ImageCanvas center;
    int xPos, yPos;
    Image image;
    ImageListDialog ild;
    ScrollingImage () {
        super ("Image Viewer");
        add ("Center", center = new ImageCanvas ());
        add ("South",  horizontal = new Scrollbar (Scrollbar.HORIZONTAL));
        add ("East", vertical = new Scrollbar (Scrollbar.VERTICAL));
        Menu m = new Menu ("File", true);
        m.add ("Open");
        m.add ("Close");
        m.add ("-");
        m.add ("Quit");
        MenuBar mb = new MenuBar();
        mb.add (m);
        setMenuBar (mb);
        resize (400, 300);
    }
    public static void main (String args[]) {
        ScrollingImage si = new ScrollingImage ();
        si.show();
    }
    public boolean handleEvent (Event e) {
         if (e.id == Event.WINDOW_DESTROY) {
            System.exit(0);
        } else if (e.target instanceof Scrollbar) {
            if (e.target == horizontal) {
                xPos = ((Integer)e.arg).intValue();
            } else if (e.target == vertical) {
                yPos = ((Integer)e.arg).intValue();
            }
            center.redraw (xPos, yPos, image);
        }
        return super.handleEvent (e);
    }
</PRE>
</DIV>

<p class=para>
This <tt class=literal>handleEvent()</tt> method kills 
the program if the user used the windowing system to exit from it (<tt class=literal>WINDOW_DESTROY</tt>). 
More to the point, if a <tt class=literal>Scrollbar</tt> 
generated the event, <tt class=literal>handleEvent()</tt> 
figures out if it was the horizontal or vertical scrollbar, saves its value 
as the <tt class=literal>x</tt> or <tt class=literal>y</tt> position, and redraws the image in the new location. Finally, 
it calls <tt class=literal>super.handleEvent()</tt>; 
as we will see in the following code, other events that we care about (key events 
and menu events) we don't want to handle here--we would 
rather handle them normally, in <tt class=literal>action()</tt> 
and <tt class=literal>keyDown()</tt> methods. 

<div class=screen>
<p>
<pre>
    public void processImage () {
        image = getToolkit().getImage (ild.getName());
        MediaTracker tracker = new MediaTracker (this);
        tracker.addImage (image, 0);
        try {
            tracker.waitForAll();
        } catch (InterruptedException ie) {
        }
        xPos = 0;
        yPos = 0;
        int imageHeight = image.getHeight (this);
        int imageWidth = image.getWidth (this);
        vertical.setValues (0, 5, 0, imageHeight);
        horizontal.setValues (0, 5, 0, imageWidth);
        center.redraw (xPos, yPos, image);
    }
</PRE>
</DIV>

<p class=para>
<tt class=literal>processImage()</tt> reads the image's 
filename, calls <tt class=literal>getImage()</tt>, 
and sets up a <tt class=literal>MediaTracker</tt> 
to wait for the image to load. Once the image has loaded, it reads the 
height and width, and uses these to set the maximum values for the vertical 
and horizontal scrollbars by calling <tt class=literal>setValues()</tt>. 
The scrollbars' minimum and initial values are both 0. The size of 
the scrollbar "handle" is set to 5, rather than trying to indicate 
the visible portion of the image. 

<div class=screen>
<p>
<pre>
    public boolean action (Event e, Object o) {
        if (e.target instanceof MenuItem) {
            if ("Open".equals (o)) {
                // If showing already, do not show again
                if ((ild == null) || (!ild.isShowing())) {
                    ild = new ImageListDialog (this);
                    ild.show();
                }
            } else if ("Close".equals(o)) {
                image = null;
                center.redraw (xPos, yPos, image);
            } else if ("Quit".equals(o)) {
                System.exit(0);
            }
            return true;
        }
        return false;
    }
</PRE>
</DIV>

<p class=para>
<tt class=literal>action()</tt> handles menu events. 
If the user selected Open, it displays the dialog box that 
selects a file. Close redraws the canvas with a null image; 
Quit exits the program. If any of these events occurred, 
<tt class=literal>action()</tt> returns <tt class=literal>true</tt>, 
indicating that the event was fully handled. If any other event occurred, 
<tt class=literal>action()</tt> returns <tt class=literal>false</tt>, 
so that the system will deliver the event to any other methods that might 
be interested in it. 

<div class=screen>
<p>
<pre>
    public boolean keyDown (Event e, int key) {
        if (e.id == Event.KEY_ACTION) {
            Scrollbar target = null;
            switch (key) {
                case Event.HOME:
                    target = vertical;
                    vertical.setValue(vertical.getMinimum());
                    break;
                case Event.END:
                    target = vertical;
                    vertical.setValue(vertical.getMaximum());
                    break;
                case Event.PGUP:
                    target = vertical;
                    vertical.setValue(vertical.getValue()
                             - vertical.getPageIncrement());
                    break;
                case Event.PGDN:
                    target = vertical;
                    vertical.setValue(vertical.getValue()
                             + vertical.getPageIncrement());
                    break;
                case Event.UP:
                    target = vertical;
                    vertical.setValue(vertical.getValue()
                             - vertical.getLineIncrement());
                    break;
                case Event.DOWN:
                    target = vertical;
                    vertical.setValue(vertical.getValue()
                             + vertical.getLineIncrement());
                    break;
                case Event.LEFT:
                    target = horizontal;
                    if (e.controlDown())
                        horizontal.setValue(horizontal.getValue() -
                            horizontal.getPageIncrement());
                    else
                        horizontal.setValue(horizontal.getValue() -
                            horizontal.getLineIncrement());
                    break;
                case Event.RIGHT:
                    target = horizontal;
                    if (e.controlDown())
                        horizontal.setValue(horizontal.getValue() +
                            horizontal.getPageIncrement());
                    else
                        horizontal.setValue(horizontal.getValue() +
                            horizontal.getLineIncrement());
                    break;
                default:
                    return false;
            }
            Integer value = new Integer (target.getValue());
            postEvent (new Event ((Object)target,
                       Event.SCROLL_ABSOLUTE, (Object)value));
            return true;
        }
        return false;
    }
}
</PRE>
</DIV>

<p class=para>
<tt class=literal>keyDown()</tt> isn't really 
necessary, but it adds a nice extension to our scrollbars: in addition 
to using the mouse, the user can scroll with the arrow keys. Pressing an 
arrow key generates a <tt class=literal>KEY_ACTION</tt> 
event. If we have one of these events, we check what kind of key it was, 
then compute a new scrollbar value, then call <tt class=literal>setValue()</tt> 
to set the appropriate scrollbar to this value. For example, if the user 
presses the page up key, we read the page increment, add it to the current 
value of the vertical scrollbar, and then set the vertical scrollbar accordingly. 
(Note that this works even though nondefault page and line increments 
aren't implemented correctly.) The one trick here is that we have 
to get the rest of the program to realize that the scrollbar values have 
changed. To do so, we create a new <tt class=literal>SCROLL_ABSOLUTE</tt> 
event, and call <tt class=literal>postEvent()</tt> 
to deliver it. 

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch11_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Scrollbar</td>
<td width=171 align=center valign=top><a href="index/idx_a.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>The Adjustable Interface</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
