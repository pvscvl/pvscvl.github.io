<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 18] Deflater</TITLE>
<meta name="author" content="Mark Grand and Jonathan Knudsen">
<meta name="date" content="Fri Aug  8 17:49:03 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java Fundamental Classes Reference">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Fundamental Classes Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch18_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 18<br>The java.util.zip Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch18_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=refnamediv>
<h1>Deflater</H1>

<h2>Name</H2>

Deflater

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch18-REFSECT1-AUTOID.40">Synopsis</A></h2>

<dl class=variablelist>
<dt class=varlistentry>Class Name:<br>
<dd>

<p class=para>
<tt class=literal>java.util.zip.Deflater</tt>

<p>
<dt class=varlistentry>Superclass:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.Object</tt>

<p>
<dt class=varlistentry>Immediate Subclasses:<br>
<dd>

<p class=para>
None

<p>
<dt class=varlistentry>Interfaces Implemented:<br>
<dd>

<p class=para>
None

<p>
<dt class=varlistentry>Availability:<br>
<dd>

<p class=para>
New as of JDK 1.1 </DL>
</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch18-REFSECT1-AUTOID.41">Description</A></h2>

<p class=para>
The <tt class=literal>Deflater</tt> class provides 
support for general-purpose data compression. The class uses the ZLIB compression 
algorithms described in RFC 1950, RFC 1951, and RFC 1952. These documents 
can be found at: 
<p>
<ul class=itemizedlist>
<li class=listitem><i class=emphasis>ftp://ds.internic.net/rfc/rfc1950.txt</I>

<p>
<li class=listitem><i class=emphasis>ftp://ds.internic.net/rfc/rfc1951.txt</I>

<p>
<li class=listitem><i class=emphasis>ftp://ds.internic.net/rfc/rfc1952.txt</I>

<p>
</UL>
<p class=para>
The <tt class=literal>Inflater</tt> class uncompresses 
data that has been compressed using <tt class=literal>Deflater</tt>. 

<p class=para>
The <tt class=literal>DeflaterOutputStream</tt> uses 
an internal <tt class=literal>Deflater</tt> to compress 
data. Typically, you do not need to create a <tt class=literal>Deflater</tt>; 
instead, you can just use an instance of one of the subclasses of <tt class=literal>DeflaterOutputStream</tt> : 
<tt class=literal>GZIPOutputStream</tt> or <tt class=literal>ZipOutputStream</tt>. 

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch18-REFSECT1-AUTOID.42">Class Summary</A></h2>

<div class=screen>
<p>
<pre>
public class java.util.zip.Deflater extends java.lang.Object {
  // Constants
  public static final int BEST_COMPRESSION;
  public static final int BEST_SPEED;
  public static final int DEFAULT_COMPRESSION;
  public static final int DEFAULT_STRATEGY;
  public static final int DEFLATED;
  public static final int FILTERED;
  public static final int HUFFMAN_ONLY;
  public static final int NO_COMPRESSION;
  // Constructors
  public Deflater();
  public Deflater(int level);
  public Deflater(int level, boolean nowrap);
  // Public Instance Methods
  public int deflate(byte[] b);
  public synchronized native int deflate(byte[] b, int off, int len);
  public synchronized native void end();
  public synchronized void finish();
  public synchronized boolean finished();
  public synchronized native int getAdler();
  public synchronized native int getTotalIn();
  public synchronized native int getTotalOut();
  public boolean needsInput();
  public synchronized native void reset();
  public void setDictionary(byte[] b);
  public synchronized native void setDictionary(byte[] b, int off, int len);
  public void setInput(byte[] b);
  public synchronized void setInput(byte[] b, int off, int len);
  public synchronized void setLevel(int level);
  public synchronized void setStrategy(int strategy);
  // Protected Instance Methods
  protected void finalize();
}
</PRE>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch18-REFSECT1-AUTOID.43">Constants</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.20">BEST_COMPRESSION</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.28">public static final int BEST_COMPRESSION = 9</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
A constant that represents a compression level that sacrifices speed for 
the smallest compressed data size. The compression level for a <tt class=literal>Deflater</tt> 
object can be set with <tt class=literal>setLevel()</tt>, 
where the level ranges from 0 to 9. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.21">BEST_SPEED</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.29">public static final int BEST_SPEED = 1</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
A constant that represents a compression level that sacrifices compressed 
data size for speed. The compression level for a <tt class=literal>Deflater</tt> 
object can be set with <tt class=literal>setLevel()</tt>, 
where the level ranges from 0 to 9. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.22">DEFAULT_COMPRESSION</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.30">public static final int DEFAULT_COMPRESSION = -1</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
A constant that represents the default compression level. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.23">DEFAULT_STRATEGY</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.31">public static final int DEFAULT_STRATEGY</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
A constant that represents the default compression strategy. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.24">DEFLATED</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.32">public static final int DEFLATED</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
A constant that represents a compression method that uses the deflate algorithm. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.25">FILTERED</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.33">public static final int FILTERED</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
A constant that represents a compression strategy that works well for small 
values with a random distribution. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.26">HUFFMAN_ONLY</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.34">public static final int HUFFMAN_ONLY</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
A constant that represents a compression strategy that uses only Huffman 
coding. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.27">NO_COMPRESSION</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.35">public static final int NO_COMPRESSION = 0</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
A constant that represents a compression level that does not compress data 
at all. The compression level for a <tt class=literal>Deflater</tt> 
object can be set with <tt class=literal>setLevel()</tt>, 
where the level ranges from 0 to 9. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch18-REFSECT1-AUTOID.44">Constructors</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.28">Deflater</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.36">public Deflater()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>Deflater</tt> 
that generates compressed data in the ZLIB format using the <tt class=literal>DEFAULT_COMPRESSION</tt> 
level. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.37">public Deflater(int level)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>level</tt><br>
<dd>

<p class=para>
The compression level, 
from 0 (<tt class=literal>NO_COMPRESSION</tt>) to 
9 (<tt class=literal>BEST_COMPRESSION</tt>). </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>Deflater</tt> 
that generates compressed data in the ZLIB format using the given compression 
level. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.38">public Deflater(int level, boolean nowrap)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>level</tt><br>
<dd>

<p class=para>
The compression level, 
from 0 (<tt class=literal>NO_COMPRESSION</tt>) to 
9 (<tt class=literal>BEST_COMPRESSION</tt>).

<p>
<dt class=varlistentry><tt class=literal>nowrap</tt><br>
<dd>

<p class=para>
A <tt class=literal>boolean</tt> 
value that specifies whether or not the ZLIB header and checksum data are 
omitted from the compressed data. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>Deflater</tt> 
that generates compressed data using the given compression level. If <tt class=literal>nowrap</tt> 
is <tt class=literal>true</tt>, the ZLIB header and 
checksum fields are not used, which means that the compressed data is in 
the format used by GZIP and PKZIP. If the parameter is <tt class=literal>false</tt>, 
the data is compressed into ZLIB format. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch18-REFSECT1-AUTOID.45">Public Instance Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.29">deflate</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.39">public int deflate(byte[] b)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
A byte array to be filled. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The number of compressed bytes actually written to the array or 0 if more 
data may be required. 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method compresses the data passed to <tt class=literal>setInput()</tt> 
and fills the given array with the compressed data. If this method returns 
zero, <tt class=literal>needsInput()</tt> should be called 
to determine whether the <tt class=literal>Deflater</tt> 
needs more data in its input buffer. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.40">public synchronized native int deflate(byte[] b, int off, int len)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
A byte array to be filled.

<p>
<dt class=varlistentry><tt class=literal>off</tt><br>
<dd>

<p class=para>
An offset into the byte array.

<p>
<dt class=varlistentry><tt class=literal>len</tt><br>
<dd>

<p class=para>
The number of bytes to fill. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The number of compressed bytes actually written to the array or 0 if more 
data may be required. 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method compresses the data passed to <tt class=literal>setInput()</tt> 
and writes <tt class=literal>len</tt> bytes of the 
compressed data into the given array, starting at <tt class=literal>off</tt>. 
If this method returns 0, <tt class=literal>needsInput()</tt> 
should be called to determine whether the <tt class=literal>Deflater</tt> 
needs more data in its input buffer. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.30">end</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.41">public synchronized native void end()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method discards any uncompressed input data and frees up internal 
buffers. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.31">finish</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.42">public synchronized void finish()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method tells the <tt class=literal>Deflater</tt> 
that the compression should end with the data that currently occupies the 
input buffer. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.32">finished</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.43">public synchronized boolean finished()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A <tt class=literal>boolean</tt> value that indicates 
whether or not the end of the compressed data has been reached. 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns <tt class=literal>true</tt> if 
the last of the compressed data has been read using <tt class=literal>deflate()</tt>. 
Otherwise it returns <tt class=literal>false</tt>. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.33">getAdler</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.44">public synchronized native int getAdler()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The Adler-32 checksum value of the uncompressed data. 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns an Adler32 checksum value that is calculated on the 
uncompressed data passed to <tt class=literal>setInput()</tt>. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.34">getTotalIn</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.45">public synchronized native int getTotalIn()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The total number of bytes that have been input so far. 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the number of bytes that have been passed to <tt class=literal>setInput()</tt> 
since this <tt class=literal>Deflater</tt> was created 
or since <tt class=literal>reset()</tt>was last called. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.35">getTotalOut</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.46">public synchronized native int getTotalOut()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The total number of bytes that have been output so far. 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the number of bytes that have been read from <tt class=literal>deflate()</tt> 
since this <tt class=literal>Deflater</tt> was created, 
or since <tt class=literal>reset()</tt> was last called. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.36">needsInput</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.47">public boolean needsInput()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A <tt class=literal>boolean</tt> value that indicates 
whether or not the input buffer is empty. 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns <tt class=literal>true</tt> if 
the input buffer is empty. Otherwise it returns <tt class=literal>false</tt>. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.37">reset</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.48">public synchronized native void reset()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method resets the <tt class=literal>Deflater</tt> 
to the state it was in when it was created, which means that a new set 
of data can be compressed. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.38">setDictionary</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.49">public void setDictionary(byte[] b)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
An array of byte values. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sets the preset dictionary for compression using the data in 
the given array. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.50"><div class=screen> <p> <pre> public synchronized native void setDictionary(byte[] b, int off, int len) </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
An array of byte values.

<p>
<dt class=varlistentry><tt class=literal>off</tt><br>
<dd>

<p class=para>
An offset into the byte array.

<p>
<dt class=varlistentry><tt class=literal>len</tt><br>
<dd>

<p class=para>
The number of bytes to use. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sets the preset dictionary for compression using <tt class=literal>len</tt> 
bytes from the given array, starting from <tt class=literal>off</tt>. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.39">setInput</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.51">public void setInput(byte[] b)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
An array of byte values. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method places the contents of the given array into the input buffer 
of this <tt class=literal>Deflater</tt>. Use the <tt class=literal>deflate()</tt> 
method to compress the data and retrieve it in compressed form. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.52">public synchronized void setInput(byte[] b, int off, int len)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
An array of byte values.

<p>
<dt class=varlistentry><tt class=literal>off</tt><br>
<dd>

<p class=para>
An offset into the byte array.

<p>
<dt class=varlistentry><tt class=literal>len</tt><br>
<dd>

<p class=para>
The number of bytes to use. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method places <tt class=literal>len</tt> bytes 
from the given array, starting at <tt class=literal>off</tt>, 
into the input buffer of this <tt class=literal>Deflater</tt>. 
Use the <tt class=literal>deflate()</tt> method to 
compress the data and retrieve it in compressed form. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.40">setLevel</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.53">public synchronized void setLevel(int level)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>level</tt><br>
<dd>

<p class=para>
The compression level, 
from 0 (<tt class=literal>NO_COMPRESSION</tt>) to 
9 (<tt class=literal>BEST_COMPRESSION</tt>). </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>level</tt> is not valid. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sets the compression level of this <tt class=literal>Deflater</tt>. 
A value of 0 corresponds to <tt class=literal>NO_COMPRESSION</tt>. 
A value of 1 indicates the fastest, least space-efficient compression level 
(<tt class=literal>BEST_SPEED</tt>). A value of 9 
indicates the slowest, most space-efficient compression level (<tt class=literal>BEST_COMPRESSION</tt>). </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.41">setStrategy</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.54">public synchronized void setStrategy(int strategy)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>strategy</tt><br>
<dd>

<p class=para>
The compression strategy. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>strategy</tt> is not valid. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sets the compression strategy of this <tt class=literal>Deflater</tt>, 
which should be one of <tt class=literal>FILTERED</tt>, 
<tt class=literal>HUFFMAN_ONLY</tt>, or <tt class=literal>DEFAULT_STRATEGY</tt>. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch18-REFSECT1-AUTOID.46">Protected Instance Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch18-REFSECT2-AUTOID.42">finalize</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch18-REFSECT3-AUTOID.55">protected void finalize()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Object.finalize()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method calls <tt class=literal>end()</tt> when 
this <tt class=literal>Deflater</tt> is garbage collected. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch18-REFSECT1-AUTOID.47">Inherited Methods</A></h2>

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<th align="LEFT">

<p class=para>
Method</TH>
<th align="LEFT">

<p class=para>
Inherited From</TH>
<th align="LEFT">

<p class=para>
Method</TH>
<th align="LEFT">

<p class=para>
Inherited From</TH>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>clone()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>equals(Object)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>getClass()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>hashCode()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>notify()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>notifyAll()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>toString()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>wait()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>wait(long)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>wait(long, 
int)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
</TABLE>
<p>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch18-REFSECT1-AUTOID.48">See Also</A></h2>

<p class=para>
<tt class=literal>DeflaterOutputStream</tt>, 
<tt class=literal>Inflater</tt>, 
<tt class=literal>GZIPOutputStream</tt>, 
<tt class=literal>ZipOutputStream</tt> 
</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch18_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch18_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>DataFormatException</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>DeflaterOutputStream</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
