<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 11] RandomAccessFile</TITLE>
<meta name="author" content="Mark Grand and Jonathan Knudsen">
<meta name="date" content="Fri Aug  8 16:41:07 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java Fundamental Classes Reference">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Fundamental Classes Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_55.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11<br>The java.io Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch11_57.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=refnamediv>
<h1>RandomAccessFile</H1>

<h2>Name</H2>

RandomAccessFile

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.384">Synopsis</A></h2>

<dl class=variablelist>
<dt class=varlistentry>Class Name:<br>
<dd>

<p class=para>
<tt class=literal>java.io.RandomAccessFile</tt>

<p>
<dt class=varlistentry>Superclass:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.Object</tt>

<p>
<dt class=varlistentry>Immediate Subclasses:<br>
<dd>

<p class=para>
None

<p>
<dt class=varlistentry>Interfaces Implemented:<br>
<dd>

<p class=para>
<tt class=literal>java.io.DataInput</tt>, 
<tt class=literal>java.io.DataOutput</tt>

<p>
<dt class=varlistentry>Availability:<br>
<dd>

<p class=para>
JDK 1.0 or later</DL>
</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.385">Description</A></h2>

<p class=para>
The <tt class=literal>RandomAccessFile</tt> class reads data from and writes data to a file. The file is specified 
using a <tt class=literal>File</tt> object or a <tt class=literal>String</tt> 
that represents a pathname. Both constructors take a mode parameter 
that specifies whether the file is being opened solely for reading, or 
for reading and writing. Each of the constructors can throw a <tt class=literal>SecurityException</tt> 
if the application does not have permission to access the specified file 
using the given mode. 

<p class=para>
Unlike <tt class=literal>FileInputStream</tt> and 
<tt class=literal>FileOutputStream</tt>, <tt class=literal>RandomAccessFile</tt> 
supports random access to the data in the file; the <tt class=literal>seek()</tt> 
method allows you to alter the current position of the file pointer to 
any location in the file. <tt class=literal>RandomAccessFile</tt> 
implements both the <tt class=literal>DataInput</tt> 
and <tt class=literal>DataOutput</tt> interfaces, 
so it supports reading and writing of all the primitive data types. 

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.386">Class Summary</A></h2>

<div class=screen>
<p>
<pre>
public class java.io.RandomAccessFile extends java.lang.Object
             implements java.io.DataInput, java.io.DataOutput {
  // Constructors
  public RandomAccessFile(File file, String mode);
  public RandomAccessFile(String name, String mode); 
  // Instance Methods
  public native void close();
  public final FileDescriptor getFD();
  public native long getFilePointer();
  public native long length();
  public native int read();
  public int read(byte[] b);
  public int read(byte[] b, int off, int len);
  public final boolean readBoolean();
  public final byte readByte();
  public final char readChar();
  public final double readDouble();
  public final float readFloat();
  public final void readFully(byte[] b);
  public final void readFully(byte[] b, int off, int len);
  public final int readInt();
  public final String readLine();
  public final long readLong();
  public final short readShort();
  public final String readUTF();
  public final int readUnsignedByte();
  public final int readUnsignedShort();
  public native void seek(long pos);
  public int skipBytes(int n);
  public native void write(int b);
  public void write(byte[] b);
  public void write(byte[] b, int off, int len);
  public final void writeBoolean(boolean v);
  public final void writeByte(int v);
  public final void writeBytes(String s);
  public final void writeChar(int v);
  public final void writeChars(String s);
  public final void writeDouble(double v);
  public final void writeFloat(float v);
  public final void writeInt(int v);
  public final void writeLong(long v);
  public final void writeShort(int v);
  public final void writeUTF(String str);
}
</PRE>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.387">Constructors</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.374">RandomAccessFile</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.510">public RandomAccessFile(File file, String mode) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>file</tt><br>
<dd>

<p class=para>
The file to be accessed.

<p>
<dt class=varlistentry><tt class=literal>mode</tt><br>
<dd>

<p class=para>
The mode of access to the file: either <tt class=literal>"r"</tt> for read
access or <tt class=literal>"rw"</tt> for read/write access.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind of I/O error occurs.

<p>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>mode</tt> is not <tt class=literal>"r"</tt> 
or <tt class=literal>"rw"</tt>.

<p>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the application does not have permission to read the named file, or 
if <tt class=literal>mode</tt> is <tt class=literal>"rw"</tt> 
and the application does not have permission to write to the named file. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>RandomAccessFile</tt> 
to access the specified <tt class=literal>File</tt> 
in the specified mode. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.511">public RandomAccessFile(String name, String mode) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>name</tt><br>
<dd>

<p class=para>
A <tt class=literal>String</tt> 
that contains the pathname of the file to be accessed. The path must conform 
to the requirements of the native operating system.

<p>
<dt class=varlistentry><tt class=literal>mode</tt><br>
<dd>

<p class=para>
The mode of access to the file: either <tt class=literal>"r"</tt> for read
access or <tt class=literal>"rw"</tt> for read/write access.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind of I/O error occurs.

<p>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>mode</tt> is not <tt class=literal>"r"</tt> 
or <tt class=literal>"rw"</tt>.

<p>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the application does not have permission to read the named file, or 
if <tt class=literal>mode </tt>is <tt class=literal>"rw"</tt> 
and the application does not have permission to write to the named file. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>RandomAccessFile</tt> 
to access the file with the specified <tt class=literal>name</tt> 
in the specified mode. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.388">Instance Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.375">close</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.512">public native void close() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt> <br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method closes the file and releases the system resources that are 
associated with it. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.376">getFD</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.513">public final FileDescriptor getFD() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The file descriptor for the file that supplies data for this object. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
there is no <tt class=literal>FileDescriptor</tt> 
associated with this object. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the file descriptor associated with this <tt class=literal>RandomAccessFile</tt>. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.377">getFilePointer</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.514">public native long getFilePointer() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The current position in the file. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt> <br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the current position in the file. The position is the 
offset, in bytes, from the beginning of the file where the next read or 
write operation occurs. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.378">length</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.515">public native long length() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The length of the file. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt> <br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the length of the file in bytes. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.379">read</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.516">public native int read() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The next byte or <tt class=literal>-1</tt> if the end of file is encountered. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads the next byte from the file. The method blocks until 
the byte is read, the end of the file is encountered, or an exception is 
thrown. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.517">public int read(byte b[]) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
An array of bytes to 
be filled from the stream. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The number of bytes read or <tt class=literal>-1</tt> if the end of file is encountered immediately. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads bytes from the file into the given array. The method 
reads up to <tt class=literal>b.length</tt> bytes 
of data from the stream. The method blocks until there is some data available. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.518">public int read(byte b[], int off, int len) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
An array of bytes to be filled.

<p>
<dt class=varlistentry><tt class=literal>off</tt><br>
<dd>

<p class=para>
An offset into the array.

<p>
<dt class=varlistentry><tt class=literal>len</tt><br>
<dd>

<p class=para>
The number of bytes to read. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The number of bytes read or <tt class=literal>-1</tt> if the end of file is encountered immediately. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads up to <tt class=literal>len</tt> 
bytes from the file into the given array, starting at index <tt class=literal>off</tt>. 
The method blocks until there is some input available. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.380">readBoolean</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.519">public final boolean readBoolean() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>boolean</tt> value read from 
the file. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readBoolean()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a byte as a <tt class=literal>boolean</tt> 
value from the file. A byte that contains a zero is read as <tt class=literal>false</tt>. 
A byte that contains any other value is read as <tt class=literal>true</tt>. 
The method blocks until the byte is read, the end of the file is encountered, 
or an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.381">readByte</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.520">public final byte readByte() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>byte</tt> value read from the 
file. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readByte()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a signed 8-bit value, a <tt class=literal>byte</tt>, 
from the file. The method blocks until the byte is read, the end of the 
file is encountered, or an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.382">readChar</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.521">public final char readChar() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>char</tt> value read from the 
file. 

<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readChar()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a 16-bit Unicode character from the file. The method 
reads two bytes from the file and then creates a <tt class=literal>char</tt> 
value using the first byte read as the most significant byte. The method 
blocks until the two bytes are read, the end of the file is encountered, 
or an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.383">readDouble</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.522">public final double readDouble() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>double</tt> value read from 
the file. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readDouble()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a 64-bit <tt class=literal>double</tt> 
quantity from the file. The method reads a <tt class=literal>long</tt> 
value from the file as if using the <tt class=literal>readLong()</tt> 
method. The <tt class=literal>long</tt> value is then 
converted to a <tt class=literal>double</tt> using 
the <tt class=literal>longBitsToDouble()</tt> method 
in <tt class=literal>Double</tt>. The method blocks 
until the necessary eight bytes are read, the end of the file is encountered, 
or an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.384">readFloat</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.523">public final float readFloat() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>float</tt> value read from the 
file. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readFloat()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a 32-bit <tt class=literal>float</tt> 
quantity from the file. The method reads an <tt class=literal>int</tt> 
value from the file as if using the <tt class=literal>readInt()</tt> 
method. The <tt class=literal>int</tt> value is then 
converted to a <tt class=literal>float</tt> using 
the <tt class=literal>intBitsToFloat()</tt> method 
in <tt class=literal>Float</tt>. The method blocks 
until the necessary four bytes are read, the end of the file is encountered, 
or an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.385">readFully</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.524">public final void readFully(byte b[]) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
The array to fill. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readFully(byte[])</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads bytes into the given array <tt class=literal>b</tt> 
until the array is full. The method reads repeatedly from the file to fill 
the array. The method blocks until all of the bytes are read, the end of 
the file is encountered, or an exception is thrown. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.525">public final void readFully(byte b[], int off, int len) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
The array to fill.

<p>
<dt class=varlistentry><tt class=literal>off</tt><br>
<dd>

<p class=para>
An offset into the array.

<p>
<dt class=varlistentry><tt class=literal>len</tt><br>
<dd>

<p class=para>
The number of bytes to read. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readFully(byte[], int, int)</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads <tt class=literal>len</tt> bytes into the given array, starting 
at offset <tt class=literal>off</tt>. The method reads repeatedly from the file 
to fill the array. The method blocks until all of the bytes are read, the 
end of the file is encountered, or an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.386">readInt</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.526">public final int readInt() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>int</tt> value read from the 
stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readInt()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a signed 32-bit <tt class=literal>int</tt> 
quantity from the file. The method reads four bytes from the file and then 
creates an <tt class=literal>int</tt> quantity, using 
the first byte read as the most significant byte. The method blocks until 
the four bytes are read, the end of the file is encountered, or an exception 
is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.387">readLine</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.527">public final String readLine() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A <tt class=literal>String</tt> that contains the 
line read from the stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readLine()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads the next line of text from the file. The method reads 
bytes of data from the file until it encounters a line terminator. A line 
terminator is a carriage return (<tt class=literal>'\r'</tt>), 
a newline character (<tt class=literal>'\n'</tt>), 
a carriage return immediately followed by a newline character, or the end 
of the file. The method blocks until a line terminator is read, the end 
of the file is encountered, or an exception is thrown.

<p class=para>
The method does not convert bytes to characters correctly. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.388">readLong</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.528">public final long readLong() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>long</tt> value read from the 
stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readLong()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a signed 64-bit <tt class=literal>long</tt> 
quantity from the file. The method reads eight bytes from the file and 
then creates a <tt class=literal>long</tt> quantity, 
using the first byte read as the most significant byte. The method blocks 
until the eight bytes are read, the end of the file is encountered, or 
an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.389">readShort</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.529">public final short readShort() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>short</tt> value read from the 
stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readShort()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a signed 16-bit <tt class=literal>short</tt> 
quantity from the file. The method reads two bytes from the file and then 
creates a <tt class=literal>short</tt> quantity, using 
the first byte read as the most significant byte. The method blocks until 
the two bytes are read, the end of the file is encountered, or an exception 
is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.390">readUnsignedByte</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.530">public final int readUnsignedByte() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The unsigned <tt class=literal>byte</tt> value read 
from the stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readUnsignedByte()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads an unsigned 8-bit quantity from the file. The method 
reads a byte from the file and returns that byte. The method blocks until 
the byte is read, the end of the file is encountered, or an exception is 
thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.391">readUnsignedShort</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.531">public final int readUnsignedShort() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The unsigned <tt class=literal>short</tt> value read 
from the stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readUnsignedShort()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads an unsigned 16-bit quantity from the file. The method 
reads two bytes from the file and creates an unsigned <tt class=literal>short</tt> 
quantity using the first byte read as the most significant byte. The method 
blocks until the two bytes are read, the end of the file is encountered, 
or an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.392">readUTF</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.532">public final String readUTF() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>String</tt> 
read from the stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs.

<p>
<dt class=varlistentry><tt class=literal>UTFDataFormatException</tt><br>
<dd>

<p class=para>
If the bytes do not represent a valid UTF-8 encoding. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readUTF()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a UTF-8 encoded string from the file. The method reads 
the first two bytes from the file as unsigned <tt class=literal>short</tt> 
values, to get the number of bytes in the encoded string. Then the following 
bytes are read and interpreted UTF-8 encoded bytes; these bytes are converted 
into characters for the resulting <tt class=literal>String</tt>. 
This method blocks until all of the bytes in the encoded string have been 
read, the end of the file is encountered, or an exception is thrown. 
See <a href="appb_01.htm">Appendix B, <i>The UTF-8 Encoding</i></A> for information about the UTF-8 encoding.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.393">seek</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.533">public native void seek(long pos) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>pos</tt><br>
<dd>

<p class=para>
The new position in 
the file. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sets the current file position to the specified position. The 
position is the offset, in bytes, from the beginning of the file where 
the next read or write operation occurs. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.394">skipBytes</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.534">public int skipBytes(int n) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>n</tt><br>
<dd>

<p class=para>
The number of bytes to 
skip. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The actual number of skipped bytes. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If EOF is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.skipBytes()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method skips over <tt class=literal>n</tt> bytes. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.395">write</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.535">public native void write(int b) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
The value to write. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataOutput.write(int)</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes the low-order eight bits of <tt class=literal>b</tt> 
to the file as a <tt class=literal>byte</tt>. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.536">public void write(byte b[]) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
An array of bytes to 
write. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataOutput.write(byte[])</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes the bytes in the given array to the file. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.537">public void write(byte b[], int off, int len) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
An array of bytes to write.

<p>
<dt class=varlistentry><tt class=literal>off</tt><br>
<dd>

<p class=para>
An offset into the byte array.

<p>
<dt class=varlistentry><tt class=literal>len</tt><br>
<dd>

<p class=para>
The number of bytes to write. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataOutput.write(byte[], int, int)</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes <tt class=literal>len</tt> bytes from the given array, starting <tt class=literal>off</tt> elements from the beginning of the array, to the 
file. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.396">writeBoolean</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.538">public final void writeBoolean(boolean v) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>v</tt><br>
<dd>

<p class=para>
The <tt class=literal>boolean</tt> 
value to write. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataOutput.writeBoolean()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
If <tt class=literal>v</tt> is <tt class=literal>true</tt>, 
this method writes a byte that contains the value <tt class=literal>1</tt> 
to the file. If <tt class=literal>v</tt> is <tt class=literal>false</tt>, 
the method writes a byte that contains the value 0. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.397">writeByte</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.539">public final void writeByte(int v) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>v</tt><br>
<dd>

<p class=para>
The value to write. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataOutput.writeByte()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes an 8-bit <tt class=literal>byte</tt> 
to the file, using the low-order eight bits of the given integer <tt class=literal>v</tt>. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.398">writeBytes</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.540">public final void writeBytes(String s) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>s</tt><br>
<dd>

<p class=para>
The <tt class=literal>String </tt>to write. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataOutput.writeBytes()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes the characters in the given <tt class=literal>String</tt> 
to the file as a sequence of 8-bit bytes. The high-order bytes of the 
characters in the string are ignored. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.399">writeChar</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.541">public final void writeChar(int v) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>v</tt><br>
<dd>

<p class=para>
The value to write. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataOutput.writeChar()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes a 16-bit <tt class=literal>char</tt> 
to the file, using the low-order 16 bits of the given integer <tt class=literal>v</tt>. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.400">writeChars</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.542">public final void writeChars(String s) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>s</tt><br>
<dd>

<p class=para>
The <tt class=literal>String </tt>to write. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataOutput.writeChars()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes the characters in the given <tt class=literal>String</tt> 
object to the file as a sequence of 16-bit characters. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.401">writeDouble</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.543">public final void writeDouble(double v) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>v</tt><br>
<dd>

<p class=para>
The <tt class=literal>double</tt> 
value to write. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataOutput.writeDouble()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes a 64-bit <tt class=literal>double</tt> 
to the file. The <tt class=literal>double</tt> value 
is converted to a <tt class=literal>long</tt> using 
<tt class=literal>doubleToLongBits()</tt> of <tt class=literal>Double</tt>; 
the <tt class=literal>long</tt> value is then written 
to the file as eight bytes with the high-order byte first. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.402">writeFloat</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.544">public final void writeFloat(float v) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>v</tt><br>
<dd>

<p class=para>
The <tt class=literal>float</tt> 
value to write. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataOutput.writeFloat()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes a 32-bit <tt class=literal>float</tt> 
to the file. The <tt class=literal>float</tt> value 
is converted to a <tt class=literal>int</tt> using 
<tt class=literal>floatToIntBits()</tt> of <tt class=literal>Float</tt>; 
the <tt class=literal>int</tt> value is then written 
to the file as four bytes with the high-order byte first. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.403">writeInt</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.545">public final void writeInt(int v) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>v</tt><br>
<dd>

<p class=para>
The <tt class=literal>int</tt> 
value to write. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataOutput.writeInt()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes a 32-bit <tt class=literal>int</tt> 
to the file. The value is written as four bytes with the high-order byte first. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.404">writeLong</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.546">public final void writeLong(long v) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>v</tt><br>
<dd>

<p class=para>
The <tt class=literal>long</tt> 
value to write. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataOutput.writeLong()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes a 64-bit <tt class=literal>long</tt> 
to the file. The value is written as eight bytes with the high-order byte 
first. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.405">writeShort</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.547">public final void writeShort(int v) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>v</tt><br>
<dd>

<p class=para>
The value to write. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataOutput.writeShort()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes a 16-bit <tt class=literal>short</tt> 
to the file, using the low-order 16 bits of the given integer <tt class=literal>v</tt>. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.406">writeUTF</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.548">public final void writeUTF(String str) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>str</tt><br>
<dd>

<p class=para>
The <tt class=literal>String</tt> 
to write. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataOutput.writeUTF()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes the given <tt class=literal>String</tt> 
to the file using the UTF-8 encoding.
See <a href="appb_01.htm">Appendix B, <i>The UTF-8 Encoding</i></A> for information about the UTF-8 encoding.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.389">Inherited Methods</A></h2>

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<th align="LEFT">

<p class=para>
Method</TH>
<th align="LEFT">

<p class=para>
Inherited From</TH>
<th align="LEFT">

<p class=para>
Method</TH>
<th align="LEFT">

<p class=para>
Inherited From</TH>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>clone()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>equals(Object)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>finalize()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>getClass()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>hashCode()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>notify()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>notifyAll()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>toString()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>wait()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>wait(long)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>wait(long, int)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="LEFT">&nbsp;</TD>
</TR>
</TABLE>
<p>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.390">See Also</A></h2>

<p class=para>
<tt class=literal>DataInput</tt>, 
<tt class=literal>DataOutput</tt>, 
<tt class=literal>File</tt>, 
<tt class=literal>FileInputStream</tt>, 
<tt class=literal>FileOutputStream</tt>, 
<tt class=literal>Double</tt>, 
<tt class=literal>Float</tt>, 
<tt class=literal>Integer</tt>, 
<tt class=literal>IllegalArgumentException</tt>, 
<tt class=literal>IOException</tt>, 
<tt class=literal>Long</tt> 
</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_55.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch11_57.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>PushbackReader</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Reader</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
