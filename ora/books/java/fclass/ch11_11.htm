<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 11] DataInputStream</TITLE>
<meta name="author" content="Mark Grand and Jonathan Knudsen">
<meta name="date" content="Fri Aug  8 16:34:49 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java Fundamental Classes Reference">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Fundamental Classes Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_10.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11<br>The java.io Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch11_12.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=refnamediv>
<h1>DataInputStream</H1>

<h2>Name</H2>

DataInputStream

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.74">Synopsis</A></h2>

<dl class=variablelist>
<dt class=varlistentry>Class Name:<br>
<dd>

<p class=para>
<tt class=literal>java.io.DataInputStream</tt>

<p>
<dt class=varlistentry>Superclass:<br>
<dd>

<p class=para>
<tt class=literal>java.io.FilterInputStream </tt>

<p>
<dt class=varlistentry>Immediate Subclasses:<br>
<dd>

<p class=para>
None

<p>
<dt class=varlistentry>Interfaces Implemented:<br>
<dd>

<p class=para>
<tt class=literal>java.io.DataInput</tt>

<p>
<dt class=varlistentry>Availability:<br>
<dd>

<p class=para>
JDK 1.0 or later</DL>
</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.75">Description</A></h2>

<p class=para>
The <tt class=literal>DataInputStream</tt> class provides 
methods for reading primitive data types and lines of text from an underlying 
input stream in a machine-independent manner. Many of the methods of <tt class=literal>DataInputStream</tt> 
read a single primitive data type, in binary format, from an underlying 
input stream. All multibyte quantities are assumed to be in a format that 
stores the most significant byte as the first byte and the least significant 
byte as the last byte. 

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.76">Class Summary</A></h2>

<div class=screen>
<p>
<pre>
public class java.io.DataInputStream extends java.io.FilterInputStream
                                     implements java.io.DataInput {
  // Constructors
  public DataInputStream(InputStream in);
  // Class Methods
  public final static String readUTF(DataInput in);
  // Instance Methods
  public final int read(byte[] b);
  public final int read(byte[] b, int off, int len);
  public final boolean readBoolean();
  public final byte readByte();
  public final char readChar();
  public final double readDouble();
  public final float readFloat();
  public final void readFully(byte[] b);
  public final void readFully(byte[] b, int off, int len);
  public final int readInt();
  public final String readLine();                // Deprecated in 1.1
  public final long readLong();
  public final short readShort();
  public final int readUnsignedByte();
  public final int readUnsignedShort();
  public final String readUTF() throws IOException;
  public final int skipBytes(int n) throws IOException;
}
</PRE>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.77">Constructors</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.87">DataInputStream</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.109">public DataInputStream(InputStream in)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>in</tt><br>
<dd>

<p class=para>
The input stream to 
use. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>DataInputStream</tt> 
object that reads from, or wraps, the given input stream. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.78">Class Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.88">readUTF</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.110"><div class=screen> <p> <pre> public final static String readUTF(DataInput in) throws IOException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>in</tt><br>
<dd>

<p class=para>
The data input stream 
to use. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>String</tt> 
read from the stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt> <br>
<dd>

<p class=para>
If any other kind of I/O error occurs.

<p>
<dt class=varlistentry><tt class=literal>UTFDataFormatException</tt><br>
<dd>

<p class=para>
If the bytes do not represent a valid UTF-8 encoding. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a UTF-8 encoded string from the
given <tt class=literal>DataInput</tt> object. To get the number of bytes
in the encoded string, the first two bytes are read as an unsigned
<tt class=literal>short</tt> value. Then the following bytes are read and
interpreted as UTF-8 encoded bytes; these bytes are converted into
characters for the resulting <tt class=literal>String</tt>.  This method
blocks until all of the bytes in the encoded string have been read,
the end of the stream is encountered, or an exception is thrown.

<p class=para>
For details on the UTF-8 encoding, see <a href="appb_01.htm">Appendix B, <i>The UTF-8 Encoding</i></A>.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.79">Instance Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.89">read</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.111">public final int read(byte b[]) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
An array of bytes to 
be filled from the stream. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The number of bytes read, or <tt class=literal>-1</tt> if the end of file is encountered immediately. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>FilterInputStream.read(byte[])</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads bytes of input into the given array by calling the <tt class=literal>read()</tt> 
method of the underlying stream. The method reads up to <tt class=literal>b.length</tt> 
bytes of data from the stream. The method blocks until there is some input 
available. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.112"><div class=screen> <p> <pre> public final int read(byte b[], int off, int len) throws IOException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
An array of bytes to be filled from the stream.

<dt class=varlistentry><tt class=literal>off</tt><br>
<dd>

<p class=para>
An offset into the byte array.

<p>
<dt class=varlistentry><tt class=literal>len</tt><br>
<dd>

<p class=para>
The number of bytes to read. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The number of bytes read, or <tt class=literal>-1</tt> if the end of file is encountered immediately. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>FilterInputStream.read(byte[], int, int)</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads up to <tt class=literal>len</tt> 
bytes of input into the given array starting at index <tt class=literal>off</tt>. 
The method reads the bytes by calling the <tt class=literal>read()</tt> 
method of the underlying stream and blocks until there is some 
input available. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.90">readBoolean</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.113">public final boolean readBoolean() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>boolean</tt> value read from 
the stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readBoolean()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a byte as a <tt class=literal>boolean</tt> 
value from the underlying input stream. A byte that contains a zero is 
read as <tt class=literal>false</tt>; that which 
contains any other value is read as <tt class=literal>true</tt>. 
The method blocks until the byte is read, the end of the stream is encountered, 
or an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.91">readByte</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.114">public final byte readByte() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>byte</tt> value read from the 
stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readByte()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a signed 8-bit value--a <tt class=literal>byte</tt>--from the underlying input stream. The method blocks until the byte is read, 
the end of the stream is encountered, or an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.92">readChar</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.115">public final char readChar() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>char</tt> value read from the 
stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readChar()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a 16-bit Unicode character from the stream. The method 
reads two bytes from the underlying input stream and then creates a <tt class=literal>char</tt> 
value, using the first byte read as the most significant byte. The method 
blocks until the two bytes are read, the end of the stream is encountered, 
or an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.93">readDouble</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.116">public final double readDouble() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>double</tt> value read from 
the stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readDouble()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a 64-bit <tt class=literal>double</tt> 
quantity from the stream. The method reads a <tt class=literal>long</tt> 
value from the underlying input stream as if using the <tt class=literal>readLong()</tt> 
method. The <tt class=literal>long</tt> value is then 
converted to a <tt class=literal>double</tt> using 
the <tt class=literal>longBitsToDouble()</tt> method 
in <tt class=literal>Double</tt>. The method blocks 
until the necessary eight bytes are read, the end of the stream is encountered, 
or an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.94">readFloat</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.117">public final float readFloat() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>float</tt> value read from the 
stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readFloat()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a 32-bit <tt class=literal>float</tt> 
quantity from the stream. The method reads an <tt class=literal>int</tt> 
value from the underlying input stream as if using the <tt class=literal>readInt()</tt> 
method. The <tt class=literal>int</tt> value is then 
converted to a <tt class=literal>float</tt> using 
the <tt class=literal>intBitsToFloat()</tt> method 
in <tt class=literal>Float</tt>. The method blocks 
until the necessary four bytes are read, the end of the stream is encountered, 
or an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.95">readFully</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.118">public final void readFully(byte b[]) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
The array to fill. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readFully(byte[])</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads bytes into the given array <tt class=literal>b</tt> 
until the array is full. The method reads repeatedly from the underlying 
stream to fill the array. The method blocks until all of the bytes are 
read, the end of the stream is encountered, or an exception is thrown. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.119"><div class=screen> <p> <pre> public final void readFully(byte b[], int off, int len) throws IOException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
The array to fill.

<p>
<dt class=varlistentry><tt class=literal>off</tt><br>
<dd>

<p class=para>
An offset into the array.

<p>
<dt class=varlistentry><tt class=literal>len</tt><br>
<dd>

<p class=para>
The number of bytes to read. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readFully(byte[], int, int)</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads <tt class=literal>len</tt> bytes into the given array, starting 
at offset <tt class=literal>off</tt>. The method reads repeatedly from the underlying 
stream to fill the array. The method blocks until all the bytes are 
read, the end of the stream is encountered, or an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.96">readInt</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.120">public final int readInt() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>int</tt> value read from the 
stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readInt()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a signed 32-bit <tt class=literal>int</tt> 
quantity from the stream. The method reads four bytes from the underlying 
input stream and then creates an <tt class=literal>int</tt> 
quantity, using the first byte read as the most significant byte. The method 
blocks until the four bytes are read, the end of the stream is encountered, 
or an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.97">readLine</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.121">public final String readLine() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
Deprecated as of JDK 1.1 

<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A <tt class=literal>String</tt> that contains the 
line read from the stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readLine()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads the next line of text from the stream. The method reads 
bytes of data from the underlying input stream until it encounters a line 
terminator. A line terminator is a carriage return (<tt class=literal>"\r"</tt>), 
a newline character (<tt class=literal>"\n"</tt>), 
a carriage return immediately followed by a newline character, or the end 
of the stream. The method blocks until a line terminator is read, the end 
of the stream is encountered, or an exception is thrown.

<p class=para>
This method is deprecated as of JDK 1.1 because it does not convert bytes 
to characters correctly. It's replaced by <tt class=literal>BufferedReader.readLine()</tt>. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.98">readLong</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.122">public final long readLong() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>long</tt> value read from the 
stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readLong()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a signed 64-bit <tt class=literal>long</tt> 
quantity from the stream. The method reads eight bytes from the underlying 
input stream and then creates a <tt class=literal>long</tt> 
quantity, using the first byte read as the most significant byte. The method 
blocks until the eight bytes are read, the end of the stream is encountered, 
or an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.99">readShort</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.123">public final short readShort() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>short</tt> value read from the 
stream. 

<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readShort()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a signed 16-bit <tt class=literal>short</tt> 
quantity from the stream. The method reads two bytes from the underlying 
input stream and then creates a <tt class=literal>short</tt> 
quantity, using the first byte read as the most significant byte. The method 
blocks until the two bytes are read, the end of the stream is encountered, 
or an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.100">readUnsignedByte</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.124">public final int readUnsignedByte() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The unsigned <tt class=literal>byte</tt> value read 
from the stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readUnsignedByte()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads an unsigned 8-bit quantity from the stream. The method 
reads a byte from the underlying input stream and returns that byte, and blocks until the byte is read, the end of the stream is encountered, 
or an exception is thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.101">readUnsignedShort</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.125">public final int readUnsignedShort() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The unsigned <tt class=literal>short</tt> value read 
from the stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readUnsignedShort()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads an unsigned 16-bit quantity from the stream. The method 
reads two bytes from the underlying input stream and creates an unsigned 
<tt class=literal>short</tt> quantity, using the first 
byte read as the most significant byte. The method blocks until the two 
bytes are read, the end of the stream is encountered, or an exception is 
thrown. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.102">readUTF</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.126">public final String readUTF() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>String</tt> 
read from the stream. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind of I/O error occurs.

<p>
<dt class=varlistentry><tt class=literal>UTFDataFormatException</tt><br>
<dd>

<p class=para>
If the bytes do not represent a valid UTF-8 encoding. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.readUTF()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads a UTF-8 encoded string from the stream. 
See the description 
of the <tt class=literal>readUTF(DataInput)</tt> class method for more 
information. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.103">skipBytes</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.127">public final int skipBytes(int n) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>n</tt><br>
<dd>

<p class=para>
The number of bytes to 
skip. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The actual number of skipped bytes. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>EOFException</tt><br>
<dd>

<p class=para>
If the end of the file is encountered.

<p>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any other kind I/O error occurs. </DL>
<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>DataInput.skipBytes()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method skips over <tt class=literal>n</tt> bytes 
in the underlying input stream. The method blocks until all of the bytes 
are skipped, the end of the stream is encountered, or an exception is thrown. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.80">Inherited Methods</A></h2>

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<th align="LEFT">

<p class=para>
Method</TH>
<th align="LEFT">

<p class=para>
Inherited From</TH>
<th align="LEFT">

<p class=para>
Method</TH>
<th align="LEFT">

<p class=para>
Inherited From</TH>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>available ()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>FilterInputStream</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>clone()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>close()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>FilterInputStream</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>equals(Object)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>finalize()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>getClass()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>hashCode()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>mark(int)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>FilterInputStream</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>markSupported()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>FilterInputStream</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>notify()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>notifyAll()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>read()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>FilterInputStream</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>reset()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>FilterInputStream</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>skip(long)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>FilterInputStream</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>toString()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>wait()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>wait(long)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>wait(long, int)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
</TABLE>
<p>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.81">See Also</A></h2>

<p class=para>
<tt class=literal>DataOutputStream</tt>, 
<tt class=literal>Double</tt>, 
<tt class=literal>EOFException</tt>, 
<tt class=literal>FilterInputStream</tt>, 
<tt class=literal>Float</tt>, 
<tt class=literal>InputStream</tt>, 
<tt class=literal>IOException</tt>, 
<tt class=literal>String</tt>, 
<tt class=literal>UTFDataFormatException</tt> 
</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_10.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch11_12.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>DataInput</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>DataOutput</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
