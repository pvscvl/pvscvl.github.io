<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 11] Writer</TITLE>
<meta name="author" content="Mark Grand and Jonathan Knudsen">
<meta name="date" content="Fri Aug  8 16:42:59 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java Fundamental Classes Reference">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Fundamental Classes Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_68.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11<br>The java.io Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch12_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=refnamediv>
<h1>Writer</H1>

<h2>Name</H2>

Writer

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.472">Synopsis</A></h2>

<dl class=variablelist>
<dt class=varlistentry>Class Name:<br>
<dd>

<p class=para>
<tt class=literal>java.io.Writer</tt>

<p>
<dt class=varlistentry>Superclass:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.Object</tt>

<p>
<dt class=varlistentry>Immediate Subclasses:<br>
<dd>

<p class=para>
<tt class=literal>java.io.BufferedWriter</tt>, 
<tt class=literal>java.io.CharArrayWriter</tt>,

<p class=para>
<tt class=literal>java.io.FilterWriter</tt>, 
<tt class=literal>java.io.OutputStreamWriter</tt>,

<p class=para>
<tt class=literal>java.io.PipedWriter</tt>, 
<tt class=literal>java.io.PrintWriter</tt>,

<p class=para>
<tt class=literal>java.io.StringWriter</tt>

<p>
<dt class=varlistentry>Interfaces Implemented:<br>
<dd>

<p class=para>
None

<p>
<dt class=varlistentry>Availability:<br>
<dd>

<p class=para>
New as of JDK 1.1</DL>
</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.473">Description</A></h2>

<p class=para>
The <tt class=literal>Writer</tt> class is an <tt class=literal>abstract</tt> 
class that is the superclass of all classes that represent output character 
streams. <tt class=literal>Writer</tt> defines the 
basic output methods that all character streams provide. A similar hierarchy 
of classes, based around <tt class=literal>OutputStream</tt>, 
deals with byte streams instead of character streams. 

<p class=para>
<tt class=literal>Writer</tt> is designed so that 
<tt class=literal>write(int</tt> 
<tt class=literal>b)</tt> 
and <tt class=literal>write(char[])</tt> 
both call <tt class=literal>write(char[],</tt> 
<tt class=literal>int,</tt> <tt class=literal>int)</tt>. 
Thus, a subclass can simply override <tt class=literal>write(char[],</tt> 
<tt class=literal>int,</tt> <tt class=literal>int)</tt> 
and all of the <tt class=literal>write</tt> methods 
will work. Note that this is different from the design of <tt class=literal>OutputStream</tt>, 
where the <tt class=literal>write(int</tt> <tt class=literal>b)</tt> 
method is the catch-all method. The design of <tt class=literal>Writer</tt> 
is cleaner and more efficient. 

<p class=para>
Some <tt class=literal>Writer</tt> subclasses may 
implement buffering to increase efficiency. <tt class=literal>Writer</tt> 
provides a method--<tt class=literal>flush()</tt>--that tells the <tt class=literal>Writer</tt> to write 
any buffered output to the underlying device, which may be a disk drive 
or a network. 

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.474">Class Summary</A></h2>

<div class=screen>
<p>
<pre>
public abstract class java.io.Writer extends java.lang.Object {
  // Variables
  protected Object lock;
  // Constructors
  protected Writer();
  protected Writer(Object lock);
  // Instance Methods
  public abstract void close();
  public abstract void flush();
  public void write(int c);
  public void write(char[] cbuf);
  public abstract void write(char[] cbuf, int off, int len);
  public void write(String str);
  public void write(String str, int off, int len);
}
</PRE>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.475">Variables</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.473">lock</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.630">protected Object lock</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
The object used to synchronize operations on this <tt class=literal>Writer</tt> 
object. For efficiency's sake, a particular implementation of a character 
stream can choose to synchronize its operations on something other than 
instances of itself. Thus, any subclass should synchronize on the <tt class=literal>lock</tt> 
object, instead of using a <tt class=literal>synchronized</tt> 
method or the <tt class=literal>this</tt> object. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.476">Constructors</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.474">Writer</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.631">protected Writer()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>Writer</tt> 
that synchronizes on the <tt class=literal>Writer</tt> 
itself, or in other words, on the <tt class=literal>this</tt> 
object. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.632">protected Writer(Object lock)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>lock</tt><br>
<dd>

<p class=para>
The object to use 
for synchronization. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>Writer</tt> 
that synchronizes on the given object. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.477">Instance Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.475">close</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.633">public abstract void close() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt> <br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method flushes the writer and then closes it, releasing any system 
resources associated with it.

<p class=para>
A subclass of <tt class=literal>Writer</tt> must implement 
this method. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.476">flush</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.634">public void flush() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt> <br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method forces any characters that may be buffered by this <tt class=literal>Writer</tt> 
to be written to the underlying device.

<p class=para>
A subclass of <tt class=literal>Writer</tt> must implement 
this method. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.477">write</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.635">public void write(int c) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>c</tt><br>
<dd>

<p class=para>
The value to write. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes a character containing the lowest sixteen bits of the 
given integer value.

<p class=para>
The implementation of this method in <tt class=literal>Writer</tt> 
writes the character by calling <tt class=literal>write(cb,</tt> 
<tt class=literal>1)</tt> 
where <tt class=literal>cb</tt> is a character array 
that contains the given value in <tt class=literal>cb[0]</tt>. 
Although it is not strictly necessary, a subclass that wants to provide 
efficient single-character writes should override this method. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.636">public void write(char[] cbuf) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>cbuf</tt><br>
<dd>

<p class=para>
An array of characters 
to write to the stream. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes the given array of characters to the stream by calling 
<tt class=literal>write(cbuf,</tt> <tt class=literal>0,</tt> 
<tt class=literal>cbuf.length)</tt>.

<p class=para>
A subclass does not usually need to override this method, as it can override 
<tt class=literal>write(char[],</tt> 
<tt class=literal>int,</tt> <tt class=literal>int)</tt> 
and have <tt class=literal>write(char[])</tt> 
work automatically. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.637"><div class=screen> <p> <pre> public abstract void write(char[] cbuf, int off, int len) throws IOException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>cbuf</tt><br>
<dd>

<p class=para>
An array of characters to write to the stream.

<p>
<dt class=varlistentry><tt class=literal>off</tt><br>
<dd>

<p class=para>
An offset into the array.

<p>
<dt class=varlistentry><tt class=literal>len</tt><br>
<dd>

<p class=para>
The number of characters to write. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes <tt class=literal>len</tt> characters 
contained in the given array starting at index <tt class=literal>off</tt>.

<p class=para>
A subclass of <tt class=literal>Writer</tt> must implement 
this method. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.638">public void write(String str) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>str</tt><br>
<dd>

<p class=para>
A string to write to 
the stream. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If 
any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes the given string to the stream by calling
<tt class=literal>write(str,str.length)</tt>.

<p class=para>
A subclass does not usually need to override this method, as it can override 
<tt class=literal>write(char[],</tt> 
<tt class=literal>int,</tt> <tt class=literal>int)</tt> 
and have it work automatically. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.639">public void write(String str, int off, int len) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>str</tt><br>
<dd>

<p class=para>
A string to write to the stream.

<p>
<dt class=varlistentry><tt class=literal>off</tt><br>
<dd>

<p class=para>
An offset into the string.

<p>
<dt class=varlistentry><tt class=literal>len</tt><br>
<dd>

<p class=para>
The number of characters to write. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method writes <tt class=literal>len</tt> characters contained in the
given string starting at index <tt class=literal>off</tt>. The method
does this by creating an array of characters for the specified portion
of the string and then calling <tt class=literal>write(cb, 0,
cb.length)</tt> on the character array <tt class=literal>cb</tt>.

<p class=para>
A subclass does not usually need to override this method, as it can override 
<tt class=literal>write(char[],</tt> 
<tt class=literal>int,</tt> <tt class=literal>int)</tt> 
and have it work automatically. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.478">Inherited Methods</A></h2>

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<th align="LEFT">

<p class=para>
Method</TH>
<th align="LEFT">

<p class=para>
Inherited From</TH>
<th align="LEFT">

<p class=para>
Method</TH>
<th align="LEFT">

<p class=para>
Inherited From</TH>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>clone()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>equals(Object)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>finalize()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>getClass()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>hashCode()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>notify()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>notifyAll()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>toString()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>wait()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>wait(long)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>wait(long, int)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="LEFT">&nbsp;</TD>
</TR>
</TABLE>
<p>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.479">See Also</A></h2>

<p class=para>
<tt class=literal>BufferedWriter</tt>, 
<tt class=literal>CharArrayWriter</tt>, 
<tt class=literal>FilterWriter</tt>, 
<tt class=literal>IOException</tt>, 
<tt class=literal>OutputStreamWriter</tt>, 
<tt class=literal>PipedWriter</tt>, 
<tt class=literal>PrintWriter</tt>, 
<tt class=literal>StringWriter</tt> 
</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_68.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch12_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>WriteAbortedException</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>AbstractMethodError</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
