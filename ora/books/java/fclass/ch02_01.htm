<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 2] Strings and Related Classes</TITLE>
<meta name="author" content="Mark Grand and Jonathan Knudsen">
<meta name="date" content="Fri Aug  8 16:07:50 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java Fundamental Classes Reference">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Fundamental Classes Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_08.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 2</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch02_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="JFC-CH-2">2. Strings and Related Classes</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
String<br>
<a href="ch02_02.htm">StringBuffer</A><br>
<a href="ch02_03.htm#JFC-CH-2-SECT-3">String Concatenation</A><br>
<a href="ch02_04.htm">StringTokenizer</A><br>

<p>
</DIV>

<p class=para>
As with most programming languages, strings are used extensively throughout 
Java, so the Java API has quite a bit of functionality to help you manipulate 
strings. This chapter describes the following classes: 

<p>
<ul class=itemizedlist>
<li class=listitem>The <tt class=literal>java.lang.String</tt> class represents all textual strings in Java. A <tt class=literal>String</tt> 
object is immutable; once you create a <tt class=literal>String</tt> 
object, there is no way to change the sequence of characters it represents 
or the length of the string. 

<p>
<li class=listitem>The <tt class=literal>java.lang.StringBuffer</tt> 
class represents a variable-length, mutable sequence of characters. 
With a <tt class=literal>StringBuffer</tt> object, 
you can insert characters anywhere in the sequence and add characters to 
the end of the sequence. 

<p>
<li class=listitem>The <tt class=literal>java.util.StringTokenizer</tt> 
class provides support for parsing a string into a sequence of words, 
or tokens. 

<p>
</UL>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JFC-CH-2-SECT-1">2.1 String</A></h2>

<p class=para>
<a name="CH02.STRING2"></A>You can create a <tt class=literal>String</tt> object 
in Java simply by assigning a string literal to a <tt class=literal>String</tt> 
variable: 

<div class=screen>
<p>
<pre>
String quote = "To be or not to be";
</PRE>
</DIV>

<p class=para>
All string literals are compiled into <tt class=literal>String</tt>
objects. Although the Java compiler does not generally treat
expressions involving object references as compile-time constants,
references to <tt class=literal>String</tt> objects created from string
literals are treated as compile-time constants.

<p class=para>
Of course, there are many other ways to create a <tt class=literal>String</tt> 
object. The <tt class=literal>String</tt> class has 
a number of constructors that let you create a <tt class=literal>String</tt> 
from an array of bytes, an array of characters, another <tt class=literal>String</tt> 
object, or a <tt class=literal>StringBuffer</tt> object. 

<p class=para>
If you are a C or C++ programmer, you may be wondering if <tt class=literal>String</tt> 
objects are null-terminated. The answer is no, and, in fact, the question 
is irrelevant. The <tt class=literal>String</tt> class 
actually uses a character array internally. Since arrays in Java are actual 
objects that know their own length, a <tt class=literal>String</tt> 
object also knows its length and does not require a special terminator. 
Use the <tt class=literal>length()</tt> method to 
get the length of a <tt class=literal>String</tt> 
object. 

<p class=para>
Although <tt class=literal>String</tt> objects are 
immutable, the <tt class=literal>String</tt> class 
does provide a number of useful methods for working with strings. Any operation 
that would otherwise change the characters or the length of the string 
returns a new <tt class=literal>String</tt> object 
that copies the necessary portions of the original <tt class=literal>String</tt>. 

<p class=para>
The following methods access the contents of a <tt class=literal>String</tt> 
object: 

<p>
<ul class=itemizedlist>
<li class=listitem><tt class=literal>substring()</tt> creates 
a new <tt class=literal>String</tt> object that contains 
a sub-sequence of the sequence of characters represented by a <tt class=literal>String</tt> 
object. 

<p>
<li class=listitem><tt class=literal>charAt()</tt> returns 
the character at a given position in a <tt class=literal>String</tt> 
object. 

<p>
<li class=listitem><tt class=literal>getChars()</tt> and <tt class=literal>getBytes()</tt> 
return a range of characters in a <tt class=literal>char</tt> 
array or a <tt class=literal>byte</tt> array. 

<p>
<li class=listitem><tt class=literal>toCharArray()</tt> returns 
the entire contents of a <tt class=literal>String</tt> 
object as a <tt class=literal>char</tt> array. 

<p>
</UL>
<p class=para>
You can compare the contents of <tt class=literal>String</tt> 
objects with the following methods: 

<p>
<ul class=itemizedlist>
<li class=listitem><tt class=literal>equals()</tt> returns 
<tt class=literal>true</tt> if two <tt class=literal>String</tt> 
objects have the exact same contents, while <tt class=literal>equalsIgnoreCase()</tt> 
returns <tt class=literal>true</tt> if two objects 
have the same contents ignoring differences between upper- and lowercase 
versions of the same character. 

<p>
<li class=listitem><tt class=literal>regionMatches()</tt> 
determines if two sub-strings contain the same sequence of characters. 

<p>
<li class=listitem><tt class=literal>startsWith()</tt> and 
<tt class=literal>endsWith()</tt> determine if a <tt class=literal>String</tt> 
object begins or ends with a particular sequence of characters. 

<p>
<li class=listitem><tt class=literal>compareTo()</tt> determines 
if the contents of one <tt class=literal>String</tt> 
object are less than, equal to, or greater than the contents of another 
<tt class=literal>String</tt> object. 

<p>
</UL>
<p class=para>
Use the following methods to search for characters in a string: 

<p>
<ul class=itemizedlist>
<li class=listitem><tt class=literal>indexOf()</tt> searches 
forward through a string for a given character or string. 

<p>
<li class=listitem><tt class=literal>lastIndexOf()</tt> 
searches backwards through a string for a given character or string. 

<p>
</UL>
<p class=para>
The following methods manipulate the contents of a string and return a 
new, related string: 

<p>
<ul class=itemizedlist>
<li class=listitem><tt class=literal>concat()</tt> returns 
a new <tt class=literal>String</tt> object that is 
the concatenation of two <tt class=literal>String</tt> 
objects. 

<p>
<li class=listitem><tt class=literal>replace()</tt> returns 
a new <tt class=literal>String</tt> object that contains 
the same sequence of characters as the original string, but with a given 
character replaced by another given character. 

<p>
<li class=listitem><tt class=literal>toLowerCase()</tt> and <tt class=literal>toUpperCase()</tt> 
return new <tt class=literal>String</tt> objects that 
contain the same sequence of characters as the original string, but converted 
to lower- or uppercase. 

<p>
<li class=listitem><tt class=literal>trim()</tt> returns a new <tt class=literal>String</tt> 
object that contains the same character sequence as the original string, 
but with leading and trailing white space and control characters removed. 

<p>
</UL>
<p class=para>
The <tt class=literal>String</tt> class also defines 
a number of <tt class=literal>static</tt> methods 
named <tt class=literal>valueOf()</tt> that return 
string representations of primitive Java data types and objects. The <tt class=literal>Object</tt> 
class defines a <tt class=literal>toString()</tt> 
method, and, since <tt class=literal>Object</tt> is 
the ultimate superclass of every other class, every class inherits a basic 
<tt class=literal>toString()</tt> method. Any class 
that has a string representation should override the <tt class=literal>toString()</tt> 
method to produce the appropriate string. 

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_08.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch02_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>The java.util.zip Package</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>StringBuffer</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
