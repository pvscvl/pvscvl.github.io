<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 4] Exception Handling</TITLE>
<meta name="author" content="Mark Grand and Jonathan Knudsen">
<meta name="date" content="Fri Aug  8 16:10:28 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java Fundamental Classes Reference">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Fundamental Classes Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 4</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch04_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="JFC-CH-4">4. Exception Handling</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
Handling Exceptions<br>
<a href="ch04_02.htm">Declaring Exceptions</A><br>
<a href="ch04_03.htm">Generating Exceptions</A><br>

<p>
</DIV>

<p class=para>
Exception handling is a mechanism that allows Java programs to handle
various exceptional conditions, such as semantic violations of the
language and program-defined errors, in a robust way. When an
exceptional condition occurs, an <i class=emphasis>exception</I> is
thrown. If the Java virtual machine or run-time environment detects a
semantic violation, the virtual machine or run-time environment
implicitly throws an exception.  Alternately, a program can throw an
exception explicitly using the <tt class=literal>throw</tt>
statement. After an exception is thrown, control is transferred from
the current point of execution to an appropriate
<tt class=literal>catch</tt> clause of an enclosing <tt class=literal>try</tt>
statement. The <tt class=literal>catch</tt> clause is called an exception
handler because it handles the exception by taking whatever actions
are necessary to recover from it.
<a name="CH09.EXC"></A>

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JFC-CH-4-SECT-1">4.1 Handling Exceptions</A></h2>

<p class=para>
<a name="CH09.TRY"></A>The <tt class=literal>try</tt> statement provides Java's exception-handling mechanism.
A <tt class=literal>try</tt> statement contains a block of code to be
executed. Putting a block in a <tt class=literal>try</tt> 
statement indicates that any
exceptions or other abnormal exits in the block are going to be
handled appropriately. A <tt class=literal>try</tt> statement can have
any number of optional <tt class=literal>catch</tt> clauses that act
as exception handlers for the <tt class=literal>try</tt> block.
A <tt class=literal>try</tt>
statement can also have a <tt class=literal>finally</tt> clause.
The <tt class=literal>finally</tt> block is always executed before control
leaves the <tt class=literal>try</tt> statement; it cleans
up after the <tt class=literal>try</tt> block. Note that a <tt class=literal>try</tt>
statement must have either a <tt class=literal>catch</tt>
clause or a <tt class=literal>finally</tt> clause.

<p class=para>
Here is an example of a <tt class=literal>try</tt> statement that
includes a <tt class=literal>catch</tt> clause and a <tt class=literal>finally</tt>
clause:

<div class=screen>
<p>
<pre>
try {
    out.write(b);
} catch (IOException e) {
    System.out.println("Output Error");
} finally {
    out.close();
}
</PRE>
</DIV>

<p class=para>
If <tt class=literal>out.write()</tt> throws an <tt class=literal>IOException</tt>,
the exception is caught by the <tt class=literal>catch</tt> clause.
Regardless of whether <tt class=literal>out.write()</tt> returns normally
or throws an exception, the <tt class=literal>finally</tt> block is
executed, which ensures that <tt class=literal>out.close()</tt> is always
called.

<p class=para>
A <tt class=literal>try</tt> statement
executes the block that follows the keyword <tt class=literal>try</tt>.
If an exception is thrown from within the <tt class=literal>try</tt>
block and the <tt class=literal>try</tt> statement has any
<tt class=literal>catch</tt>
clauses, those clauses are searched, in order, for one that
can handle the exception. If a <tt class=literal>catch</tt> clause handles
an exception, that <tt class=literal>catch</tt> block is executed.

<p class=para>
However, if the <tt class=literal>try</tt> statement does not
have any <tt class=literal>catch</tt> clauses that can handle the exception
(or does not have any <tt class=literal>catch</tt> clauses at all),
the exception propagates up through enclosing statements in the current
method. If the current method does not contain a <tt class=literal>try</tt>
statement that can handle the exception, the exception
propagates up to the invoking method. If this method does not contain
an appropriate <tt class=literal>try</tt> statement, the exception propagates
up again, and so on. Finally, if no <tt class=literal>try</tt> statement
is found to handle the exception, the currently running thread terminates.

<p class=para>
A <tt class=literal>catch</tt> clause is declared with a parameter
that specifies the type of exception it can handle. The parameter
in a <tt class=literal>catch</tt> clause must be of type
<tt class=literal>Throwable</tt>
or one of its subclasses. When an exception occurs, the
<tt class=literal>catch</tt> clauses are searched for the first one with a parameter that matches the type of the exception thrown or is a superclass of the thrown exception. When the
appropriate <tt class=literal>catch</tt> block is executed, the actual
exception object is passed as an argument to the <tt class=literal>catch</tt>
block. The code within a <tt class=literal>catch</tt> block
should do whatever is necessary to handle the exceptional condition.

<p class=para>
The <tt class=literal>finally</tt> clause of a <tt class=literal>try</tt> statement
is always executed, no matter how control leaves the <tt class=literal>try</tt>
statement. Thus it is a good place to handle clean-up
operations, such as closing files, freeing resources, and closing
network connections.

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch04_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Synchronizing Multiple Threads</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Declaring Exceptions</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
