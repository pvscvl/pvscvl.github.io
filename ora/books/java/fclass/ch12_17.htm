<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 12] Double</TITLE>
<meta name="author" content="Mark Grand and Jonathan Knudsen">
<meta name="date" content="Fri Aug  8 17:00:34 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java Fundamental Classes Reference">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Fundamental Classes Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch12_16.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 12<br>The java.lang Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch12_18.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=refnamediv>
<h1>Double</H1>

<h2>Name</H2>

Double

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch12-REFSECT1-AUTOID.108">Synopsis</A></h2>

<dl class=variablelist>
<dt class=varlistentry>Class Name:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.Double</tt>

<p>
<dt class=varlistentry>Superclass:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.Number</tt>

<p>
<dt class=varlistentry>Immediate Subclasses:<br>
<dd>

<p class=para>
None

<p>
<dt class=varlistentry>Interfaces Implemented:<br>
<dd>

<p class=para>
None

<p>
<dt class=varlistentry>Availability:<br>
<dd>

<p class=para>
JDK 1.0 or later</DL>
</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch12-REFSECT1-AUTOID.109">Description</A></h2>

<p class=para>
<a name="MAN.DOUBLE.1"></A>The <tt class=literal>Double</tt> class provides an object wrapper
for a <tt class=literal>double</tt> value. This is useful when you need
to treat a <tt class=literal>double</tt> value as an object. For example,
there are a number of utility methods that take a reference to an
<tt class=literal>Object</tt> as one of their arguments. You cannot
specify a <tt class=literal>double</tt> value for one of these arguments,
but you can provide a reference to a <tt class=literal>Double</tt> object
that encapsulates the <tt class=literal>double</tt> value.  Furthermore,
as of JDK 1.1, the <tt class=literal>Double</tt> class is necessary to 
support the Reflection API and class literals.

<p class=para>
In Java, <tt class=literal>double</tt> values are represented
using the IEEE 754 format. The <tt class=literal>Double</tt> class provides
constants for the three special values that are mandated by this format:
<tt class=literal>POSITIVE_INFINITY</tt>, <tt class=literal>NEGATIVE_INFINITY</tt>,
and <tt class=literal>NaN</tt> (not-a-number).

<p class=para>
The <tt class=literal>Double</tt> class also provides some utility
methods, such as methods for determining whether a <tt class=literal>double</tt>
value is an infinity value or NaN, for converting <tt class=literal>double</tt>
values to other primitive types, and for converting a <tt class=literal>double</tt>
to a <tt class=literal>String</tt> and vice versa.

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch12-REFSECT1-AUTOID.110">Class Summary</A></h2>

<div class=screen>
<p>
<pre>
public final class java.lang.Double extends java.lang.Number {
    // Constants
    public final static double MAX_VALUE;
    public final static double MIN_VALUE;
    public final static double NaN;
    public final static double NEGATIVE_INFINITY;
    public final static double POSITIVE_INFINITY;
    public final static Class TYPE;                    // New in 1.1
    // Constructors
    public Double(double value);
    public Double(String s);
    // Class Methods
    public static native long doubleToLongBits(double value);
    public static boolean isInfinite(double v);
    public static boolean isNaN(double v);
    public static native double longBitsToDouble(long bits);
    public static String toString(double d);
    public static Double valueOf(String s);
    // Instance Methods
    public byte byteValue();                           // New in 1.1
    public double doubleValue();
    public boolean equals(Object obj);
    public float floatValue();
    public int hashCode();
    public int intValue();
    public boolean isInfinite();
    public boolean isNaN();
    public long longValue();
    public short shortValue();                         // New in 1.1
    public String toString();
}
</PRE>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch12-REFSECT1-AUTOID.111">Constants</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.149">MAX_VALUE</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.164"><div class=screen> <p> <pre> public static final double MAX_VALUE = 1.79769313486231570e+308 </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
The largest value that can be represented by a <tt class=literal>double</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.150">MIN_VALUE</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.165"><div class=screen> <p> <pre> public static final double MIN_VALUE = 4.94065645841246544e-324 </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
The smallest value that can be represented by a <tt class=literal>double</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.151">NaN</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.166"><tt class=literal>public static final double NaN = 0.0 / 0.0</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This variable represents the value not-a-number (NaN), which is a
special value produced by <tt class=literal>double</tt> operations such as
division of zero by zero. When NaN is one of the operands, most
arithmetic operations return NaN as the result.

<p class=para>
Most comparison operators (<tt class=literal>&lt;</tt>,
<tt class=literal>&lt;=</tt>, <tt class=literal>==</tt>,
<tt class=literal>&gt;=</tt>, <tt class=literal>&gt;</tt>) return
<tt class=literal>false</tt> when one of their arguments is NaN.  The
exception is <tt class=literal>!=</tt>, which returns
<tt class=literal>true</tt> when one of its arguments is NaN.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.152">NEGATIVE_INFINITY</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.167"><tt class=literal>public static final double NEGATIVE_INFINITY = -1.0 / 0.0</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This variable represents the value negative infinity, which
is produced when a <tt class=literal>double</tt> operation underflows
or a negative <tt class=literal>double</tt> value is divided by zero.
Negative infinity is by definition less than any other <tt class=literal>double</tt>
value.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.153">POSITIVE_INFINITY</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.168"><tt class=literal>public static final double POSITIVE_INFINITY = 1.0 / 0.0</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This variable represents the value positive infinity, which
is produced when a <tt class=literal>double</tt> operation overflows
or a positive <tt class=literal>double</tt> value is divided by zero.
Positive infinity is by definition greater than any other <tt class=literal>double</tt>
value.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.154">TYPE</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.169"><tt class=literal>public static final Class TYPE </tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
The <tt class=literal>Class</tt> object that represents the type
<tt class=literal>double</tt>.
It is always true that <tt class=literal>Double.TYPE</tt> 
<tt class=literal>==</tt> <tt class=literal>double.class</tt>.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch12-REFSECT1-AUTOID.112">Constructors</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.155">Double</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.170"><tt class=literal>public Double(double value)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>value</tt><br>
<dd>

<p class=para>
The <tt class=literal>double</tt> value to be encapsulated
by this object.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Creates a <tt class=literal>Double</tt> object with the specified
<tt class=literal>double</tt> value.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.171">public Double(String s) throws NumberFormatException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>s</tt><br>
<dd>

<p class=para>
The string to be made into a <tt class=literal>Double</tt>
object.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>NumberFormatException</tt><br>
<dd>

<p class=para>
If the sequence of characters in the given <tt class=literal>String</tt>
does not form a valid <tt class=literal>double</tt> literal.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Constructs a <tt class=literal>Double</tt> object with the value
specified by the given string. The string must contain a sequence
of characters that forms a legal <tt class=literal>double</tt> literal.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch12-REFSECT1-AUTOID.113">Class Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.156">doubleToLongBits</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.172"><tt class=literal>public static native long doubleToLongBits(double value)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>value</tt><br>
<dd>

<p class=para>
The <tt class=literal>double</tt> value to be converted.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>long</tt> value that contains the same sequence
of bits as the representation of the given <tt class=literal>double</tt> value.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the <tt class=literal>long</tt> value that
contains the same sequence of bits as the representation of the
given <tt class=literal>double</tt> value. The meaning of the bits in
the result is defined by the IEEE 754 floating-point format: bit
63 is the sign bit, bits 62-52 are the exponent, and bits 51-0 are
the mantissa.

<p class=para>
An argument of <tt class=literal>POSITIVE_INFINITY</tt>
produces the result <tt class=literal>0x7ff0000000000000L</tt>, an argument
of <tt class=literal>NEGATIVE_INFINITY</tt> produces the result <tt class=literal>0xfff0000000000000L</tt>,
and an argument of <tt class=literal>NaN</tt> produces the result <tt class=literal>0x7ff8000000000000L</tt>.

<p class=para>
The value returned by this method can be converted back to
the original <tt class=literal>double</tt> value by the <tt class=literal>longBitsToDouble()</tt> method.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.157">isInfinite</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.173"><tt class=literal>static public boolean isInfinite(double v)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>v</tt><br>
<dd>

<p class=para>
The <tt class=literal>double</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified value is equal to
<tt class=literal>POSITIVE_INFINITY</tt> or <tt class=literal>NEGATIVE_INFINITY</tt>;
otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not the specified value
is an infinity value.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.158">isNaN</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.174"><tt class=literal>public static boolean isNaN(double v)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>v</tt><br>
<dd>

<p class=para>
The <tt class=literal>double</tt> value to be tested.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the specified value is equal to
<tt class=literal>NaN</tt>; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not the specified value
is NaN.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.159">longBitsToDouble</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.175"><tt class=literal>public static native double longBitsToDouble(long bits)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>bits</tt><br>
<dd>

<p class=para>
The <tt class=literal>long</tt> value to be converted.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>double</tt> value whose representation is
the same as the bits in the given <tt class=literal>long</tt> value.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the <tt class=literal>double</tt> value whose
representation is the same as the bits in the given <tt class=literal>double</tt>
value. The meaning of the bits in the <tt class=literal>long</tt>
value is defined by the IEEE 754 floating-point format: bit 63 is
the sign bit, bits 62-52 are the exponent, and bits 51-0 are the
mantissa. The argument <tt class=literal>0x7f80000000000000L</tt> produces
the result <tt class=literal>POSITIVE_INFINITY</tt> and the argument
<tt class=literal>0xff80000000000000L</tt> produces the result <tt class=literal>NEGATIVE_INFINITY</tt>.
Arguments in the ranges <tt class=literal>0x7ff0000000000001L</tt> through
<tt class=literal>0x7fffffffffffffffL</tt> and <tt class=literal>0xfff0000000000001L</tt>
through <tt class=literal>0xffffffffffffffffL</tt> all produce the result
<tt class=literal>NaN</tt>.

<p class=para>
Except for NaN values not normally used by Java, this method
is the inverse of the <tt class=literal>doubleToLongBits()</tt> method.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.160">toString</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.176"><tt class=literal>public static String toString(double d)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>d</tt><br>
<dd>

<p class=para>
The <tt class=literal>double</tt> value to be converted.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A string representation of the given value.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a <tt class=literal>String</tt> object that
contains a representation of the given <tt class=literal>double</tt> value.

<p class=para>
The values <tt class=literal>NaN</tt>,<tt class=literal> NEGATIVE_INFINITY</tt>,
<tt class=literal>POSITIVE_INFINITY</tt>, <tt class=literal>-0.0</tt>, and
<tt class=literal>+0.0</tt> are represented by 
the strings <tt class=literal>"NaN"</tt>, <tt class=literal>"--Infinity"</tt>, 
<tt class=literal>"Infinity"</tt>, <tt class=literal>"--0.0"</tt>, 
and <tt class=literal>"0.0"</tt>, respectively.

<p class=para>
For other values, the exact string representation depends
on the value being converted. If the absolute value of <tt class=literal>d</tt>
is greater than or equal to 10^-3 
or less than or equal to 10^7, it
is converted to a string with an optional minus sign (if the
value is negative) followed by up to eight digits
before the decimal point, a decimal point, and the necessary number
of digits after the decimal point (but no trailing zero if there is 
more than one significant digit).  There is always a minimum of
one digit after the decimal point.

<p class=para>
Otherwise, the value is converted to a string with an optional
minus sign (if the value is negative), followed by a single digit,
a decimal point, the necessary number of digits after the decimal
point (but no trailing zero if there is more than one significant digit),
and the letter <tt class=literal>E</tt> followed by a plus or a minus 
sign and a base 10 exponent of at least one digit.  Again, there is always 
a minimum of one digit after the decimal point.

<p class=para>
Note that the definition of this method has changed as of JDK 1.1.  
Prior to that release, the method provided a string representation
that was equivalent to the <tt class=literal>%g</tt> format of 
the <tt class=literal>printf</tt> function in C.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.161">valueOf</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.177"><div class=screen> <p> <pre> public static Double valueOf(String s) throws NumberFormatException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>s</tt><br>
<dd>

<p class=para>
The string to be made into a <tt class=literal>Double</tt>
object.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>Double</tt> object constructed from the
string.

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>NumberFormatException</tt><br>
<dd>

<p class=para>
If the sequence of characters in the given <tt class=literal>String</tt>
does not form a valid <tt class=literal>double</tt> literal.</DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
Constructs a <tt class=literal>Double</tt> object with the value
specified by the given string. The string must contain a sequence
of characters that forms a legal <tt class=literal>double</tt> literal.
This method ignores leading and trailing white space in the string.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch12-REFSECT1-AUTOID.114">Instance Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.162">byteValue</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.178"><tt class=literal>public byte byteValue()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The value of this object as a <tt class=literal>byte</tt>.

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Number.byteValue()</tt>

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the truncated value of this object as a
<tt class=literal>byte</tt>. More specifically, if the value of the object
is <tt class=literal>NaN</tt>, the method returns 0. If the value is
<tt class=literal>POSITIVE_INFINITY</tt>, or any other value that is too
large to be represented by an <tt class=literal>byte</tt>, the method
returns <tt class=literal>Byte.MAX_VALUE</tt>. If the value is
<tt class=literal>NEGATIVE_INFINITY</tt>, or any other value that is too
small to be represented by an <tt class=literal>byte</tt>, the method
returns <tt class=literal>Byte.MIN_VALUE</tt>. Otherwise, the value is
rounded toward zero and returned.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.163">doubleValue</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.179"><tt class=literal>public double doubleValue()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The value of this object as a <tt class=literal>double</tt>.

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Number.doubleValue()</tt>

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the value of this object as a <tt class=literal>double</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.164">equals</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.180"><tt class=literal>public boolean equals(Object obj)</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The object to be compared with this object.</DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the objects are equal; <tt class=literal>false</tt>
if they are not.

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Object.equals()</tt>

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns <tt class=literal>true</tt> if <tt class=literal>obj</tt>
is an instance of <tt class=literal>Double</tt> and it contains the same
value as the object this method is associated with. More specifically,
the method returns <tt class=literal>true</tt> if the
<tt class=literal>doubleToLongBits()</tt> method returns the same result
for the values of both objects.

<p class=para>
This method produces a different result than the <tt class=literal>==</tt>
operator when both values are <tt class=literal>NaN</tt>. In this case,
the <tt class=literal>==</tt> operator produces <tt class=literal>false</tt>,
while this method returns <tt class=literal>true</tt>. By the same token,
the method also produces a different result when the two values
are <tt class=literal>+0.0</tt> and <tt class=literal>-0.0</tt>. In this
case, the <tt class=literal>==</tt> operator produces <tt class=literal>true</tt>,
while this method returns <tt class=literal>false</tt>.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.165">floatValue</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.181"><tt class=literal>public float floatValue()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The value of this object as a <tt class=literal>float</tt>.

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Number.floatValue()</tt>

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns this object value as a <tt class=literal>float</tt>.
Rounding may occur.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.166">hashCode</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.182"><tt class=literal>public int hashCode()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A hashcode based on the <tt class=literal>double</tt> value of
the object.

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Object.hashCode()</tt>

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a hashcode computed from the value of
this object. More specifically, if <tt class=literal>d</tt> is the value
of the object, and <tt class=literal>bitValue</tt> is defined as:

<div class=screen>
<p>
<pre>
long bitValue = Double.doubleToLongBits(d)
</PRE>
</DIV>

<p class=para>
then the hashcode returned by this method is computed as
follows:

<div class=screen>
<p>
<pre>
(int)(bitValue ^ (bitValue&gt;&gt;&gt;32))
</PRE>
</DIV>

</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.167">intValue</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.183"><tt class=literal>public int intValue()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The value of this object as an <tt class=literal>int</tt>.

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Number.intValue()</tt>

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the truncated value of this object as an
<tt class=literal>int</tt>. More specifically, if the value of the object
is <tt class=literal>NaN</tt>, the method returns 0. If the value is
<tt class=literal>POSITIVE_INFINITY</tt>, or any other value that is too
large to be represented by an <tt class=literal>int</tt>, the method
returns <tt class=literal>Integer.MAX_VALUE</tt>. If the value is
<tt class=literal>NEGATIVE_INFINITY</tt>, or any other value that is too
small to be represented by an <tt class=literal>int</tt>, the method
returns <tt class=literal>Integer.MIN_VALUE</tt>. Otherwise, the value is
rounded toward zero and returned.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.168">isInfinite</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.184"><tt class=literal>public boolean isInfinite()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the value of this object is equal
to <tt class=literal>POSITIVE_INFINITY</tt> or <tt class=literal>NEGATIVE_INFINITY</tt>;
otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not the value of this object
is an infinity value.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.169">isNaN</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.185"><tt class=literal>public boolean isNaN()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the value of this object is equal
to <tt class=literal>NaN</tt>; otherwise <tt class=literal>false</tt>.

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method determines whether or not the value of this object
is NaN.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.170">longValue</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.186"><tt class=literal>public long longValue()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The value of this object as a <tt class=literal>long</tt>.

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Number.longValue()</tt>

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the truncated value of this object as
a <tt class=literal>long</tt>. More specifically, if the value of the
object is <tt class=literal>NaN</tt>, the method returns 0. If the value
is <tt class=literal>POSITIVE_INFINITY</tt>, or any other value too
large to be represented by a <tt class=literal>long</tt>, the method
returns <tt class=literal>Long.MAX_VALUE</tt>. If the
value is <tt class=literal>NEGATIVE_INFINITY</tt>,
or any other value too small to be represented by a <tt class=literal>long</tt>,
the method returns <tt class=literal>Long.MIN_VALUE</tt>. Otherwise,
the value is rounded toward zero and returned.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.171">shortValue</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.187"><tt class=literal>public short shortValue()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Availability<br>
<dd>

<p class=para>
New as of JDK 1.1

<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The value of this object as a <tt class=literal>short</tt>.

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Number.shortValue()</tt>

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the truncated value of this object as a
<tt class=literal>short</tt>. More specifically, if the value of the object
is <tt class=literal>NaN</tt>, the method returns 0. If the value is
<tt class=literal>POSITIVE_INFINITY</tt>, or any other value that is too
large to be represented by an <tt class=literal>short</tt>, the method
returns <tt class=literal>Short.MAX_VALUE</tt>. If the value is
<tt class=literal>NEGATIVE_INFINITY</tt>, or any other value that is too
small to be represented by an <tt class=literal>short</tt>, the method
returns <tt class=literal>Short.MIN_VALUE</tt>. Otherwise, the value is
rounded toward zero and returned.</DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch12-REFSECT2-AUTOID.172">toString</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch12-REFSECT3-AUTOID.188"><tt class=literal>public String toString()</tt></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A string representation of the value of this object.

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Object.toString()</tt>

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a <tt class=literal>String</tt> object that
contains a representation of the value of this object.

<p class=para>
The values <tt class=literal>NaN</tt>,<tt class=literal> NEGATIVE_INFINITY</tt>,
<tt class=literal>POSITIVE_INFINITY</tt>, <tt class=literal>-0.0</tt>, and
<tt class=literal>+0.0</tt> are represented by 
the strings <tt class=literal>"NaN"</tt>, <tt class=literal>"--Infinity"</tt>, 
<tt class=literal>"Infinity"</tt>, <tt class=literal>"--0.0"</tt>, 
and <tt class=literal>"0.0"</tt>, respectively.

<p class=para>
For other values, the exact string representation depends
on the value being converted. If the absolute value of this object
is greater than or equal to 10^-3 
or less than or equal to 10^7, it
is converted to a string with an optional minus sign (if the
value is negative) followed by up to eight digits
before the decimal point, a decimal point, and the necessary number
of digits after the decimal point (but no trailing zero if there is 
more than one significant digit).  There is always a minimum of
one digit after the decimal point.

<p class=para>
Otherwise, the value is converted to a string with an optional
minus sign (if the value is negative), followed by a single digit,
a decimal point, the necessary number of digits after the decimal
point (but no trailing zero if there is more than one significant digit),
and the letter <tt class=literal>E</tt> followed by a plus or a minus 
sign and a base 10 exponent of at least one digit. Again, there is always 
a minimum of one digit after the decimal point.

<p class=para>
Note that the definition of this method has changed as of JDK 1.1.  
Prior to that release, the method provided a string representation
that was equivalent to the <tt class=literal>%g</tt> format of 
the <tt class=literal>printf</tt> function in C.</DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch12-REFSECT1-AUTOID.115">Inherited Methods</A></h2>

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<th align="left">

<p class=para>
Method</TH>
<th align="left">

<p class=para>
Inherited From</TH>
<th align="left">

<p class=para>
Method</TH>
<th align="left">

<p class=para>
Inherited From</TH>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>clone()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>finalize()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>getClass()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>notify()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>notifyAll()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>wait()</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
<tt class=literal>wait(long)</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>wait(long, int)</tt></TD>
<td align="left">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
</TABLE>
<p>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch12-REFSECT1-AUTOID.116">See Also</A></h2>

<p class=para>
<tt class=literal>Class</tt>, 
<tt class=literal>Float</tt>, 
<tt class=literal>Number</tt>, 
<tt class=literal>NumberFormatException</tt>, 
<tt class=literal>String</tt>
</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch12_16.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch12_18.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Compiler</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Error</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
