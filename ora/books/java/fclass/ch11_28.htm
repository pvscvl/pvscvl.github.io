<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 11] InputStream</TITLE>
<meta name="author" content="Mark Grand and Jonathan Knudsen">
<meta name="date" content="Fri Aug  8 16:37:34 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java Fundamental Classes Reference">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Fundamental Classes Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_27.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11<br>The java.io Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch11_29.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=refnamediv>
<h1>InputStream</H1>

<h2>Name</H2>

InputStream

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.192">Synopsis</A></h2>

<dl class=variablelist>
<dt class=varlistentry>Class Name:<br>
<dd>

<p class=para>
<tt class=literal>java.io.InputStream</tt>

<p>
<dt class=varlistentry>Superclass:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.Object</tt>

<p>
<dt class=varlistentry>Immediate Subclasses:<br>
<dd>

<p class=para>
<tt class=literal>java.io.ByteArrayInputStream</tt>,

<p class=para>
<tt class=literal>java.io.FileInputStream</tt>,

<p class=para>
<tt class=literal>java.io.FilterInputStream</tt>,

<p class=para>
<tt class=literal>java.io.ObjectInputStream</tt>,

<p class=para>
<tt class=literal>java.io.PipedInputStream</tt>,

<p class=para>
<tt class=literal>java.io.SequenceInputStream</tt>,

<p class=para>
<tt class=literal>java.io.StringBufferInputStream</tt>

<p>
<dt class=varlistentry>Interfaces Implemented:<br>
<dd>

<p class=para>
None

<p>
<dt class=varlistentry>Availability:<br>
<dd>

<p class=para>
JDK 1.0 or later</DL>
</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.193">Description</A></h2>

<p class=para>
The <tt class=literal>InputStream</tt> class is an 
<tt class=literal>abstract</tt> class that is the 
superclass of all classes that represent input byte streams. <tt class=literal>InputStream</tt> 
defines the basic input methods that all input streams provide. A similar 
hierarchy of classes, based around <tt class=literal>Reader</tt>, 
deals with character streams instead of byte streams. 

<p class=para>
<tt class=literal>InputStream</tt> is designed so 
that <tt class=literal>read(byte[])</tt> and <tt class=literal>read(byte[],</tt> 
<tt class=literal>int,</tt> <tt class=literal>int)</tt> 
both call <tt class=literal>read()</tt>. Thus, a subclass 
can simply override <tt class=literal>read()</tt>, 
and all the <tt class=literal>read</tt> methods 
will work. However, for efficiency sake, <tt class=literal>read(byte[],</tt> 
<tt class=literal>int,</tt> <tt class=literal>int)</tt> 
should also be overridden with a method that can read a block of data more 
efficiently than reading each byte separately. 

<p class=para>
<tt class=literal>InputStream</tt> also defines a 
mechanism for marking a position in the stream and returning to it later, 
via the <tt class=literal>mark()</tt> and <tt class=literal>reset()</tt> 
methods. Another method, <tt class=literal>markSupported()</tt>, 
indicates whether or not this mark-and-reset functionality is available 
in a particular subclass. 

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.194">Class Summary</A></h2>

<div class=screen>
<p>
<pre>
public abstract class java.io.InputStream extends java.lang.Object {
  // Instance Methods
  public abstract int available();
  public void close();
  public synchronized void mark(int readlimit);
  public boolean markSupported();
  public abstract int read();
  public int read(byte[] b);
  public int read(byte[] b, int off, int len);
  public synchronized void reset();
  public long skip(long n);
}
</PRE>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.195">Instance Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.210">available</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.263">public abstract int available() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The number of bytes that can be read without blocking. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt> <br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the number of bytes that can be read without having 
to wait for more data to become available, or in other words,
blocking.

<p class=para>
A subclass of <tt class=literal>InputStream</tt> must 
implement this method. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.211">close</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.264">public void close() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt> <br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method closes the input stream and releases any resources associated 
with it.

<p class=para>
The implementation of the <tt class=literal>close()</tt> 
method in <tt class=literal>InputStream</tt> does 
nothing; a subclass should override this method to handle cleanup for 
the stream. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.212">mark</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.265">public synchronized void mark(int readlimit)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>readlimit</tt><br>
<dd>

<p class=para>
The 
maximum number of bytes that can be read before the saved position can 
become invalid. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method tells this <tt class=literal>InputStream</tt> 
object to remember its current position, so that the position can be restored 
by a call to the <tt class=literal>reset()</tt> method. 
The <tt class=literal>InputStream</tt> can read <tt class=literal>readlimit</tt> 
bytes beyond the marked position before the mark becomes invalid.

<p class=para>
The implementation of the <tt class=literal>mark()</tt> 
method in <tt class=literal>InputStream</tt> does 
nothing; a subclass must override the method to provide the mark-and-reset 
functionality. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.213">markSupported</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.266">public boolean markSupported()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if this input stream supports 
<tt class=literal>mark()</tt> and <tt class=literal>reset()</tt>; 
<tt class=literal>false</tt> otherwise. 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a <tt class=literal>boolean</tt> 
value that indicates whether or not this object supports mark-and-reset 
functionality.

<p class=para>
The <tt class=literal>markSupported()</tt> method 
in <tt class=literal>InputStream</tt> always returns 
<tt class=literal>false</tt>. A subclass that implements 
the mark-and-reset functionality should override the method to return <tt class=literal>true</tt>. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.214">read</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.267">public abstract int read() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The next byte of data or <tt class=literal>-1</tt> if the end of the stream is encountered. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads the next byte of input. The byte is returned as an integer 
in the range 0 to 255. The method blocks until the byte is read, the end 
of stream is encountered, or an exception is thrown.

<p class=para>
A subclass of <tt class=literal>InputStream</tt> must 
implement this method. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.268">public int read(byte[] b) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
An array of bytes to 
be filled from the stream. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The actual number of bytes read or <tt class=literal>-1</tt> if the end of the stream is encountered 
immediately. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads bytes of input to fill the given array by calling
<tt class=literal>read(b,</tt> <tt class=literal>0,</tt> 
<tt class=literal>b.length)</tt>.  The method blocks until some
data is available.

<p class=para>
A subclass does not usually need to override this method as it can override 
<tt class=literal>read(byte[],</tt> 
<tt class=literal>int,</tt> <tt class=literal>int)</tt> 
and have <tt class=literal>read(byte[])</tt> 
work automatically. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.269">public int read(byte[] b, int off, int len) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
An array of bytes to be filled from the stream.

<p>
<dt class=varlistentry><tt class=literal>off</tt><br>
<dd>

<p class=para>
An offset into the array.

<p>
<dt class=varlistentry><tt class=literal>len</tt><br>
<dd>

<p class=para>
The number of bytes to read. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The actual number of bytes read or <tt class=literal>-1</tt> if the end of the stream is encountered 
immediately. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads up to <tt class=literal>len</tt> 
bytes of input into the given array starting at index <tt class=literal>off</tt>. 
The method blocks until some data is available.

<p class=para>
The implementation of this method in <tt class=literal>InputStream</tt> 
uses <tt class=literal>read()</tt> repeatedly to fill 
the array. Although it is not strictly necessary, a subclass should override 
this method to read a block of data more efficiently. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.215">reset</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.270">public synchronized void reset() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If there was 
no previous call to the <tt class=literal>mark()</tt> 
method or the saved position has been invalidated. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method restores the position of the stream to the position that was 
saved by a previous call to <tt class=literal>mark()</tt>.

<p class=para>
The implementation of the <tt class=literal>reset()</tt> 
method in <tt class=literal>InputStream</tt> throws 
an exception to indicate that mark-and-reset functionality is not supported 
by default. A subclass must override the method to provide the functionality. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.216">skip</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.271">public long skip(long n) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>n</tt><br>
<dd>

<p class=para>
The number of bytes to 
skip. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The actual number of bytes skipped. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method skips <tt class=literal>n</tt> bytes of 
input. In other words, it moves the position of the stream forward by <tt class=literal>n</tt> 
bytes.

<p class=para>
The implementation of the <tt class=literal>skip()</tt> 
method in <tt class=literal>InputStream</tt> simply 
calls <tt class=literal>read(b)</tt> where <tt class=literal>b</tt> 
is a byte array <tt class=literal>n</tt> bytes 
long. A subclass may want to override this method to implement a more efficient 
skipping algorithm. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.196">Inherited Methods</A></h2>

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<th align="LEFT">

<p class=para>
Method</TH>
<th align="LEFT">

<p class=para>
Inherited From</TH>
<th align="LEFT">

<p class=para>
Method</TH>
<th align="LEFT">

<p class=para>
Inherited From</TH>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>clone()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>equals(Object)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>finalize()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>getClass()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>hashCode()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>notify()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>notifyAll()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>toString()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>wait()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>wait(long)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>wait(long, int)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="LEFT">&nbsp;</TD>
</TR>
</TABLE>
<p>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.197">See Also</A></h2>

<p class=para>
<tt class=literal>ByteArrayInputStream</tt>, 
<tt class=literal>FileInputStream</tt>, 
<tt class=literal>FilterInputStream</tt>, 
<tt class=literal>IOException</tt>, 
<tt class=literal>ObjectInputStream</tt>, 
<tt class=literal>PipedInputStream</tt>, 
<tt class=literal>SequenceInputStream</tt>, 
<tt class=literal>StringBufferInputStream</tt> 
</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_27.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch11_29.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>FilterWriter</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>InputStreamReader</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
