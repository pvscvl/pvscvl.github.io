<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 15] MulticastSocket</TITLE>
<meta name="author" content="Mark Grand and Jonathan Knudsen">
<meta name="date" content="Fri Aug  8 17:22:21 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java Fundamental Classes Reference">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Fundamental Classes Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch15_11.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 15<br>The java.net Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch15_13.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=refnamediv>
<h1>MulticastSocket</H1>

<h2>Name</H2>

MulticastSocket

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch15-REFSECT1-AUTOID.74">Synopsis</A></h2>

<dl class=variablelist>
<dt class=varlistentry>Class Name:<br>
<dd>

<p class=para>
<tt class=literal>java.net.MulticastSocket</tt>

<p>
<dt class=varlistentry>Superclass:<br>
<dd>

<p class=para>
<tt class=literal>java.net.DatagramSocket</tt>

<p>
<dt class=varlistentry>Immediate Subclasses:<br>
<dd>

<p class=para>
None

<p>
<dt class=varlistentry>Interfaces Implemented:<br>
<dd>

<p class=para>
None

<p>
<dt class=varlistentry>Availability:<br>
<dd>

<p class=para>
New as of JDK 1.1 </DL>
</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch15-REFSECT1-AUTOID.75">Description</A></h2>

<p class=para>
The <tt class=literal>MulticastSocket</tt> class implements 
packet-oriented, connectionless, multicast data communication. In Internet 
parlance, this is the User Datagram Protocol (UDP) 
with additional functionality 
for joining and leaving groups of other multicast hosts on the Internet. 
A multicast group is specified by a Class D address, which means that the 
four highest-order bits are set to 1110. In other words, multicast addresses 
are in the range 224.0.0.1 through 239.255.255.255 inclusive. 

<p class=para>
<tt class=literal>MulticastSocket</tt> inherits most 
of its functionality from <tt class=literal>DatagramSocket</tt>; 
it adds the ability to join and leave multicast groups. When a <tt class=literal>MulticastSocket</tt> 
joins a group, it receives all of the packets destined for the group. Any 
<tt class=literal>DatagramSocket</tt> or <tt class=literal>MulticastSocket</tt> 
can send packets to a multicast group. 

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch15-REFSECT1-AUTOID.76">Class Summary</A></h2>

<div class=screen>
<p>
<pre>
public final class java.net.MulticastSocket 
                   extends java.net.DatagramSocket {
  // Constructors
  public MulticastSocket();
  public MulticastSocket(int port);
  // Instance Methods
  public InetAddress getInterface();
  public byte getTTL();
  public void joinGroup(InetAddress mcastaddr);
  public void leaveGroup(InetAddress mcastaddr) 
  public synchronized void send(DatagramPacket p, byte ttl);
  public void setInterface(InetAddress inf);
  public void setTTL(byte ttl);
}
</PRE>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch15-REFSECT1-AUTOID.77">Constructors</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch15-REFSECT2-AUTOID.95">MulticastSocket</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch15-REFSECT3-AUTOID.101">public MulticastSocket() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind of I/O error occurs.

<p>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the application is not allowed to listen on the port. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>MulticastSocket</tt> 
that is bound to any available port on the local host machine. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch15-REFSECT3-AUTOID.102">public MulticastSocket(int port) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>port</tt><br>
<dd>

<p class=para>
A port number.</DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind of I/O error occurs.

<p>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the application is not allowed to listen on the given port. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>MulticastSocket</tt> 
that is bound to the given port on the local host machine. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch15-REFSECT1-AUTOID.78">Instance Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch15-REFSECT2-AUTOID.96">getInterface</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch15-REFSECT3-AUTOID.103">public InetAddress getInterface() throws SocketException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The address of the network interface used for 
outgoing multicast packets. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>SocketException</tt><br>
<dd>

<p class=para>
If any kind of socket error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the IP address that this <tt class=literal>MulticastSocket</tt> 
uses to send out packets to multicast destinations. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch15-REFSECT2-AUTOID.97">getTTL</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch15-REFSECT3-AUTOID.104">public byte getTTL() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The time-to-live (TTL) value for this socket. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the TTL value for this socket. This value is the number 
of hops an outgoing packet can traverse before it is discarded. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch15-REFSECT2-AUTOID.98">joinGroup</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch15-REFSECT3-AUTOID.105">public void joinGroup(InetAddress mcastaddr) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>mcastaddr</tt><br>
<dd>

<p class=para>
The IP address of the group to join. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind of I/O error occurs.

<p>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the application is not allowed to access the given multicast address. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method is used to join a multicast group. An exception is thrown if 
the given address is not a multicast address. While the socket is part 
of a group, it receives all the packets that are sent to the group. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch15-REFSECT2-AUTOID.99">leaveGroup</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch15-REFSECT3-AUTOID.106">public void leaveGroup(InetAddress mcastaddr) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>mcastaddr</tt><br>
<dd>

<p class=para>
The IP address of the group to leave. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind of I/O error occurs.

<p>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the application is not allowed to access the given multicast address. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method is used to leave a multicast group. An exception is thrown 
if the given address is not a multicast address. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch15-REFSECT2-AUTOID.100">send</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch15-REFSECT3-AUTOID.107"><div class=screen> <p> <pre> public synchronized void send(DatagramPacket p, byte ttl) throws IOException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>p</tt><br>
<dd>

<p class=para>
The <tt class=literal>DatagramPacket</tt> to be sent.

<p>
<dt class=varlistentry><tt class=literal>ttl</tt><br>
<dd>

<p class=para>
The time-to-live (TTL) value for this packet. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind of I/O error occurs.

<p>
<dt class=varlistentry><tt class=literal>SecurityException</tt><br>
<dd>

<p class=para>
If the application is not allowed to send data to the packet's destination. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sends a packet from this socket using the given TTL value. 
The packet data, packet length, destination address, and destination port 
number are specified by the given <tt class=literal>DatagramPacket</tt>.

<p class=para>
Generally, it is easier to use <tt class=literal>setTTL()</tt> 
to set the TTL value for the socket, then use <tt class=literal>send(DatagramPacket)</tt> 
to send data. This method is provided for special cases. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch15-REFSECT2-AUTOID.101">setInterface</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch15-REFSECT3-AUTOID.108">public void setInterface(InetAddress inf) throws SocketException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>inf</tt><br>
<dd>

<p class=para>
The new address of the network interface for multicast packets. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>SocketException</tt><br>
<dd>

<p class=para>
If any kind of socket error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method is used to set the address that is used for outgoing multicast 
packets. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch15-REFSECT2-AUTOID.102">setTTL</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch15-REFSECT3-AUTOID.109">public void setTTL(byte ttl) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>ttl</tt><br>
<dd>

<p class=para>
The new time-to-live (TTL) value for this socket. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method is used to set the TTL value of the socket. The TTL value is 
the number of hops an outgoing packet can traverse before it is discarded. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch15-REFSECT1-AUTOID.79">Inherited Methods</A></h2>

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<th align="LEFT">

<p class=para>
Method</TH>
<th align="LEFT">

<p class=para>
Inherited From</TH>
<th align="LEFT">

<p class=para>
Method</TH>
<th align="LEFT">

<p class=para>
Inherited From</TH>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>clone()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>close()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>DatagramSocket</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>equals(Object)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>finalize()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>getClass()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>getLocalAddress()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>DatagramSocket</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>getLocalPort()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>DatagramSocket</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>getSoTimeout()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>DatagramSocket</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>hashCode()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>notify()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>notifyAll()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>receive(DatagramPacket)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>DatagramSocket</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>send(DatagramPacket)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>DatagramSocket</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>setSoTimeout(int)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>DatagramSocket</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>toString()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>wait()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>wait(long)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>wait(long, int)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
</TABLE>
<p>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch15-REFSECT1-AUTOID.80">See Also</A></h2>

<p class=para>
<tt class=literal>DatagramPacket</tt>, 
<tt class=literal>DatagramSocket</tt>, 
<tt class=literal>DatagramSocketImpl</tt>, 
<tt class=literal>InetAddress</tt>, 
<tt class=literal>IOException</tt>, 
<tt class=literal>SecurityException</tt>, 
<tt class=literal>SocketException</tt> 
</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch15_11.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch15_13.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>MalformedURLException</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>NoRouteToHostException</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
