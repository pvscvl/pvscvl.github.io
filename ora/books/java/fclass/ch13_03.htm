<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 13] Field</TITLE>
<meta name="author" content="Mark Grand and Jonathan Knudsen">
<meta name="date" content="Fri Aug  8 17:12:54 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java Fundamental Classes Reference">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Fundamental Classes Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch13_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 13<br>The java.lang.reflect Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch13_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=refnamediv>
<h1>Field</H1>

<h2>Name</H2>

Field

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch13-REFSECT1-AUTOID.13">Synopsis</A></h2>

<dl class=variablelist>
<dt class=varlistentry>Class Name:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.reflect.Field</tt>

<p>
<dt class=varlistentry>Superclass:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.Object</tt>

<p>
<dt class=varlistentry>Immediate Subclasses:<br>
<dd>

<p class=para>
None

<p>
<dt class=varlistentry>Interfaces Implemented:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.reflect.Member</tt>

<p>
<dt class=varlistentry>Availability:<br>
<dd>

<p class=para>
New as of JDK 1.1 </DL>
</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch13-REFSECT1-AUTOID.14">Description</A></h2>

<p class=para>
The <tt class=literal>Field</tt> 
class represents a variable or constant in a class. A <tt class=literal>Field</tt> object can 
be obtained by calling the <tt class=literal>getField()</tt> method of a <tt class=literal>Class</tt> object. <tt class=literal>Field</tt> 
includes methods for getting the name, modifiers, type, and declaring class 
of a field. The class also provides methods that can set and 
retrieve the value of a field for a particular object. 

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch13-REFSECT1-AUTOID.15">Class Summary</A></h2>

<div class=screen>
<p>
<pre>
public final class java.lang.reflect.Field extends java.lang.Object
                   implements java.lang.reflect.Member {
  // Instance Methods
  public boolean equals(Object obj); 
  public native Object get(Object obj);
  public native boolean getBoolean(Object obj);
  public native byte getByte(Object obj);
  public native char getChar(Object obj);
  public Class getDeclaringClass();
  public native double getDouble(Object obj);
  public native float getFloat(Object obj);
  public native int getInt(Object obj);
  public native long getLong(Object obj);
  public native int getModifiers();
  public String getName();
  public native short getShort(Object obj);
  public Class getType();
  public int hashCode();
  public native void set(Object obj, Object value);
  public native void setBoolean(Object obj, boolean z);
  public native void setByte(Object obj, byte b);
  public native void setChar(Object obj, char c);
  public native void setDouble(Object obj, double d);
  public native void setFloat(Object obj, float f);
  public native void setInt(Object obj, int i);
  public native void setLong(Object obj, long l);
  public native void setShort(Object obj, short s);
  public String toString();
}
</PRE>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch13-REFSECT1-AUTOID.16">Instance Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.30">equals</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.31">public boolean equals(Object obj)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The object to be compared with this object. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if the objects are equal; 
<tt class=literal>false</tt> if they are not. 

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Object.equals()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns <tt class=literal>true</tt> if 
<tt class=literal>obj</tt> is an instance of <tt class=literal>Field</tt>, 
and it is equivalent to this <tt class=literal>Field</tt>. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.31">get</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.32"><div class=screen> <p> <pre> public native Object get(Object obj) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be retrieved. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The value of this field in the given object. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not the correct type.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the value of this field in the given object. If the 
field is declared <tt class=literal>static</tt>, the 
<tt class=literal>obj</tt> parameter is ignored. Otherwise, 
the object supplied must be an instance of the class that declares this 
field. If the field contains a value of a primitive type, the value is 
wrapped in an appropriate object, and the object is returned. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.32">getBoolean</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.33"><div class=screen> <p> <pre> public native boolean getBoolean(Object obj) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be retrieved. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>boolean</tt> value of this field 
in the given object. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not the correct type, 
or the field cannot be converted to a <tt class=literal>boolean</tt>.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the value of this field in the given object as a <tt class=literal>boolean</tt>. 
If the field is declared <tt class=literal>static</tt>, 
the <tt class=literal>obj</tt> parameter is ignored. 
Otherwise, the object supplied must be an instance of the class that declares 
this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.33">getByte</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.34"><div class=screen> <p> <pre> public native byte getByte(Object obj) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be retrieved. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>byte</tt> value of this field 
in the given object. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not the correct type, 
or the field cannot be converted to a <tt class=literal>byte</tt>.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the value of this field in the given object as a <tt class=literal>byte</tt>. 
If the field is declared <tt class=literal>static</tt>, 
the <tt class=literal>obj</tt> parameter is ignored. 
Otherwise, the object supplied must be an instance of the class that declares 
this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.34">getChar</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.35"><div class=screen> <p> <pre> public native char getChar(Object obj) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be retrieved. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>char</tt> value of this field 
in the given object. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not the correct type, 
or the field cannot be converted to a <tt class=literal>char</tt>.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the value of this field in the given object as a <tt class=literal>char</tt>. 
If the field is declared <tt class=literal>static</tt>, 
the <tt class=literal>obj</tt> parameter is ignored. 
Otherwise, the object supplied must be an instance of the class that declares 
this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.35">getDeclaringClass</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.36">public Class getDeclaringClass()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>The Class</tt> 
object that represents the class that declared this field. 

<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>Member.getDeclaringClass()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the <tt class=literal>Class</tt> 
object for the class in which this field is declared. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.36">getDouble</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.37"><div class=screen> <p> <pre> public native double getDouble(Object obj) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be retrieved. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>double</tt> value of this field 
in the given object. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not the correct type, 
or the field cannot be converted to a <tt class=literal>double</tt>.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the value of this field in the given object as a <tt class=literal>double</tt>. 
If the field is declared <tt class=literal>static</tt>, 
the <tt class=literal>obj</tt> parameter is ignored. 
Otherwise, the object supplied must be an instance of the class that declares 
this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.37">getFloat</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.38"><div class=screen> <p> <pre> public native float getFloat(Object obj) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be retrieved. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>float</tt> value of this field 
in the given object. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not the correct type, 
or the field cannot be converted to a <tt class=literal>float</tt>.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the value of this field in the given object as a <tt class=literal>float</tt>. 
If the field is declared <tt class=literal>static</tt>, 
the <tt class=literal>obj</tt> parameter is ignored. 
Otherwise, the object supplied must be an instance of the class that declares 
this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.38">getInt</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.39"><div class=screen> <p> <pre> public native int getInt(Object obj) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be retrieved. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>int</tt> value of this field 
in the given object. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not the correct type, 
or the field cannot be converted to a <tt class=literal>int</tt>.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the value of this field in the given object as an <tt class=literal>int</tt>. 
If the field is declared <tt class=literal>static</tt>, 
the <tt class=literal>obj</tt> parameter is ignored. 
Otherwise, the object supplied must be an instance of the class that declares 
this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.39">getLong</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.40"><div class=screen> <p> <pre> public native long getLong(Object obj) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be retrieved. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>long</tt> value of this field 
in the given object. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not the correct type, 
or the field cannot be converted to a <tt class=literal>long</tt>.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the value of this field in the given object as a <tt class=literal>long</tt>. 
If the field is declared <tt class=literal>static</tt>, 
the <tt class=literal>obj</tt> parameter is ignored. 
Otherwise, the object supplied must be an instance of the class that declares 
this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.40">getModifiers</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.41">public native int getModifiers()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
An integer that represents the modifier keywords used 
to declare this field. 

<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>Member.getModifiers()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns an integer value that represents the modifiers of this 
field. The <tt class=literal>Modifier</tt> class should decode the returned value. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.41">getName</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.42">public String getName()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The name of this field as a <tt class=literal>String</tt>. 

<p>
<dt class=varlistentry>Implements<br>
<dd>

<p class=para>
<tt class=literal>Member.getName()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the name of this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.42">getShort</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.43"><div class=screen> <p> <pre> public native short getShort(Object obj) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be retrieved. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The <tt class=literal>short</tt> value of this field 
in the given object. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not the correct type, 
or the field cannot be converted to a <tt class=literal>short</tt>.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the value of this field in the given object as a <tt class=literal>short</tt>. 
If the field is declared <tt class=literal>static</tt>, 
the <tt class=literal>obj</tt> parameter is ignored. 
Otherwise, the object supplied must be an instance of the class that declares 
this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.43">getType</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.44">public Class getType()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>The Class</tt> 
object that represents the type of this field. 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns the <tt class=literal>Class</tt> 
object for the type of this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.44">hashCode</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.45">public int hashCode()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A hashcode for this object. 

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Object.hashCode()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a hashcode for this <tt class=literal>Field</tt>. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.45">set</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.46"><div class=screen> <p> <pre> public native void set(Object obj, Object value) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be set.

<p>
<dt class=varlistentry><tt class=literal>value</tt><br>
<dd>

<p class=para>
The new value. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not an instance of 
the correct class, or <tt class=literal>value</tt> 
cannot be converted to the correct type.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible or declared <tt class=literal>final</tt>.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sets the value of this field in the given object to the given 
value. If the field is declared <tt class=literal>static</tt>, 
the <tt class=literal>obj</tt> parameter is ignored. 
Otherwise, the object supplied must be an instance of the class that declares 
this field. If the field contains a value of a primitive type, the given 
value is automatically unwrapped before it is used to set the value of 
the field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.46">setBoolean</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.47"><div class=screen> <p> <pre> public native void setBoolean(Object obj, boolean z) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be set.

<p>
<dt class=varlistentry><tt class=literal>z</tt><br>
<dd>

<p class=para>
The new value. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not an instance of 
the correct class, or <tt class=literal>z</tt> cannot 
be converted to the correct type.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible or declared <tt class=literal>final</tt>.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sets the value of this field in the given object to the given 
<tt class=literal>boolean</tt> value. If the field 
is declared <tt class=literal>static</tt>, the <tt class=literal>obj</tt> 
parameter is ignored. Otherwise, the object supplied must be an instance 
of the class that declares this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.47">setByte</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.48"><div class=screen> <p> <pre> public native void setByte(Object obj, byte b) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be set.

<p>
<dt class=varlistentry><tt class=literal>b</tt><br>
<dd>

<p class=para>
The new value. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not an instance of 
the correct class, or <tt class=literal>b</tt> cannot 
be converted to the correct type.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible or declared <tt class=literal>final</tt>.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sets the value of this field in the given object to the given 
<tt class=literal>byte</tt> value. If the field is 
declared <tt class=literal>static</tt>, the <tt class=literal>obj</tt> 
parameter is ignored. Otherwise, the object supplied must be an instance 
of the class that declares this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.48">setChar</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.49"><div class=screen> <p> <pre> public native void setChar(Object obj, char c) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be set.

<p>
<dt class=varlistentry><tt class=literal>c</tt><br>
<dd>

<p class=para>
The new value. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not an instance of 
the correct class, or <tt class=literal>c</tt> cannot 
be converted to the correct type.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible or declared <tt class=literal>final</tt>.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sets the value of this field in the given object to the given 
<tt class=literal>char</tt> value. If the field is 
declared <tt class=literal>static</tt>, the <tt class=literal>obj</tt> 
parameter is ignored. Otherwise, the object supplied must be an instance 
of the class that declares this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.49">setDouble</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.50"><div class=screen> <p> <pre> public native void setDouble(Object obj, double d) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be set.

<p>
<dt class=varlistentry><tt class=literal>d</tt><br>
<dd>

<p class=para>
The new value. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not an instance of 
the correct class, or <tt class=literal>d</tt> cannot 
be converted to the correct type.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible or declared <tt class=literal>final</tt>.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sets the value of this field in the given object to the given 
<tt class=literal>double</tt> value. If the field 
is declared <tt class=literal>static</tt>, the <tt class=literal>obj</tt> 
parameter is ignored. Otherwise, the object supplied must be an instance 
of the class that declares this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.50">setFloat</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.51"><div class=screen> <p> <pre> public native void setFloat(Object obj, float f) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be set.

<p>
<dt class=varlistentry><tt class=literal>f</tt><br>
<dd>

<p class=para>
The new value. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not an instance of 
the correct class, or <tt class=literal>f</tt> cannot 
be converted to the correct type.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible or declared <tt class=literal>final</tt>.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sets the value of this field in the given object to the given 
<tt class=literal>float</tt> value. If the field is 
declared <tt class=literal>static</tt>, the <tt class=literal>obj</tt> 
parameter is ignored. Otherwise, the object supplied must be an instance 
of the class that declares this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.51">setInt</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.52"><div class=screen> <p> <pre> public native void setInt(Object obj, int i) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be set.

<p>
<dt class=varlistentry><tt class=literal>i</tt><br>
<dd>

<p class=para>
The new value. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not an instance of 
the correct class, or <tt class=literal>i</tt> cannot 
be converted to the correct type.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible or declared <tt class=literal>final</tt>.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sets the value of this field in the given object to the given 
<tt class=literal>int</tt> value. If the field is 
declared <tt class=literal>static</tt>, the <tt class=literal>obj</tt> 
parameter is ignored. Otherwise, the object supplied must be an instance 
of the class that declares this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.52">setLong</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.53"><div class=screen> <p> <pre> public native void setLong(Object obj, long l) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be set.

<p>
<dt class=varlistentry><tt class=literal>l</tt><br>
<dd>

<p class=para>
The new value. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not an instance of 
the correct class, or <tt class=literal>l</tt> cannot 
be converted to the correct type.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible or declared <tt class=literal>final</tt>.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sets the value of this field in the given object to the given 
<tt class=literal>long</tt> value. If the field is 
declared <tt class=literal>static</tt>, the <tt class=literal>obj</tt> 
parameter is ignored. Otherwise, the object supplied must be an instance 
of the class that declares this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.53">setShort</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.54"><div class=screen> <p> <pre> public native void setShort(Object obj, short s) throws IllegalArgumentException, IllegalAccessException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>obj</tt><br>
<dd>

<p class=para>
The instance whose field value is to be set.

<p>
<dt class=varlistentry><tt class=literal>s</tt><br>
<dd>

<p class=para>
The new value. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IllegalArgumentException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is not an instance of 
the correct class, or <tt class=literal>s</tt> cannot 
be converted to the correct type.

<p>
<dt class=varlistentry><tt class=literal>IllegalAccessException</tt><br>
<dd>

<p class=para>
If the field is not accessible or declared <tt class=literal>final</tt>.

<p>
<dt class=varlistentry><tt class=literal>NullPointerException</tt><br>
<dd>

<p class=para>
If <tt class=literal>obj</tt> is <tt class=literal>null</tt>. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method sets the value of this field in the given object to the given 
<tt class=literal>short</tt> value. If the field is 
declared <tt class=literal>static</tt>, the <tt class=literal>obj</tt> 
parameter is ignored. Otherwise, the object supplied must be an instance 
of the class that declares this field. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch13-REFSECT2-AUTOID.54">toString</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch13-REFSECT3-AUTOID.55">public String toString()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A string representation of this object. 

<p>
<dt class=varlistentry>Overrides<br>
<dd>

<p class=para>
<tt class=literal>Object.toString()</tt> 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a string representation of this <tt class=literal>Field</tt>. 
This string contains the access modifiers of the field, if any, followed 
by the type, the fully qualified name of the declaring class, a period, 
and the name of the field. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch13-REFSECT1-AUTOID.17">Inherited Methods</A></h2>

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<th align="LEFT">

<p class=para>
Method</TH>
<th align="LEFT">

<p class=para>
Inherited From</TH>
<th align="LEFT">

<p class=para>
Method</TH>
<th align="LEFT">

<p class=para>
Inherited From</TH>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>clone()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>finalize()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>getClass()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>notify()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>notifyAll()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>wait()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>wait(long)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>wait(long, int)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
</TABLE>
<p>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch13-REFSECT1-AUTOID.18">See Also</A></h2>

<p class=para>
<tt class=literal>Class</tt>, 
<tt class=literal>Constructor</tt>, 
<tt class=literal>IllegalAccessException</tt>, 
<tt class=literal>IllegalArgumentException</tt>, 
<tt class=literal>Member</tt>, 
<tt class=literal>Method</tt>, 
<tt class=literal>Modifier</tt>, 
<tt class=literal>NullPointerException</tt>, 
<tt class=literal>Object</tt> 
</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch13_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch13_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Constructor</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>InvocationTargetException</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
