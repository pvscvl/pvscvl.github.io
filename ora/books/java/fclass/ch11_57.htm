<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 11] Reader</TITLE>
<meta name="author" content="Mark Grand and Jonathan Knudsen">
<meta name="date" content="Fri Aug  8 16:41:31 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java Fundamental Classes Reference">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Fundamental Classes Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_56.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11<br>The java.io Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch11_58.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=refnamediv>
<h1>Reader</H1>

<h2>Name</H2>

Reader

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.391">Synopsis</A></h2>

<dl class=variablelist>
<dt class=varlistentry>Class Name:<br>
<dd>

<p class=para>
<tt class=literal>java.io.Reader</tt>

<p>
<dt class=varlistentry>Superclass:<br>
<dd>

<p class=para>
<tt class=literal>java.lang.Object</tt>

<p>
<dt class=varlistentry>Immediate Subclasses:<br>
<dd>

<p class=para>
<tt class=literal>java.io.BufferedReader</tt>, 
<tt class=literal>java.io.CharArrayReader</tt>,

<p class=para>
<tt class=literal>java.io.FilterReader</tt>, 
<tt class=literal>java.io.InputStreamReader</tt>,

<p class=para>
<tt class=literal>java.io.PipedReader</tt>, 
<tt class=literal>java.io.StringReader</tt>

<p>
<dt class=varlistentry>Interfaces Implemented:<br>
<dd>

<p class=para>
None

<p>
<dt class=varlistentry>Availability:<br>
<dd>

<p class=para>
New as of JDK 1.1</DL>
</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.392">Description</A></h2>

<p class=para>
The <tt class=literal>Reader</tt> class is an <tt class=literal>abstract</tt>
class that is the superclass of all classes that represent input
character streams. <tt class=literal>Reader</tt> defines the basic input
methods that all character streams provide. A similar hierarchy of
classes, based around <tt class=literal>InputStream</tt>, deals with byte
streams instead of character streams.

<p class=para>
<tt class=literal>Reader</tt> is designed so that
<tt class=literal>read()</tt> and <tt class=literal>read(char[])</tt> both
call <tt class=literal>read(char[],</tt> <tt class=literal>int,</tt>
<tt class=literal>int)</tt>. Thus, a subclass can simply override
<tt class=literal>read(char[],</tt> <tt class=literal>int,</tt>
<tt class=literal>int)</tt>, and all of the <tt class=literal>read</tt>
methods will work. Note that this is different from the design of
<tt class=literal>InputStream</tt>, where the <tt class=literal>read()</tt>
method is the catch-all method. The design of
<tt class=literal>Reader</tt> is cleaner and more efficient.

<p class=para>
<tt class=literal>Reader</tt> also defines a mechanism for marking a
position in the stream and returning to it later, via the
<tt class=literal>mark()</tt> and <tt class=literal>reset()</tt>
methods. Another method, <tt class=literal>markSupported()</tt>, tells
whether or not this mark-and-reset functionality is available in a
particular subclass.

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.393">Class Summary</A></h2>

<div class=screen>
<p>
<pre>
public abstract class java.io.Reader extends java.lang.Object {
  // Variables
  protected Object lock;
  // Constructors
  protected Reader();
  protected Reader(Object lock);
  // Instance Methods
  public abstract void close();
  public void mark(int readAheadLimit);
  public boolean markSupported();
  public int read();
  public int read(char[] cbuf);
  public abstract int read(char[] cbuf, int off, int len);
  public boolean ready();
  public void reset();
  public long skip(long n) throws IOException;
}
</PRE>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.394">Variables</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.407">lock</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.549">protected Object lock</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
The object used to synchronize operations on this <tt class=literal>Reader</tt> 
object. For efficiency's sake, a particular implementation of a character 
stream can choose to synchronize its operations on something other than 
instances of itself. Thus, any subclass should synchronize on the <tt class=literal>lock</tt> 
object, instead of using a <tt class=literal>synchronized</tt> 
method or the <tt class=literal>this</tt> object. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.395">Constructors</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.408">Reader</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.550">protected Reader()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>Reader</tt> that synchronizes on the <tt class=literal>Reader</tt> itself, or in other
words, on the <tt class=literal>this</tt> object.</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.551">protected Reader(Object lock)</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>lock</tt><br>
<dd>

<p class=para>
The object to use 
for synchronization. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This constructor creates a <tt class=literal>Reader </tt>that 
synchronizes on the given object. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.396">Instance Methods</A></h2>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.409">close</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.552">public abstract void close() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt> <br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method closes the reader and releases any system resources associated 
with it.

<p class=para>
A subclass of <tt class=literal>Reader</tt> must implement this method. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.410">mark</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.553">public void mark(int readheadLimit) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>readAheadLimit</tt><br>
<dd>

<p class=para>
The maximum 
number of characters that can be read before the saved position becomes 
invalid. </DL>
<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt> <br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method tells this <tt class=literal>Reader</tt> 
object to remember its current position, so that the position can be restored 
by a call to the <tt class=literal>reset()</tt> method. 
The <tt class=literal>Reader</tt> can read <tt class=literal>readAheadLimit</tt> 
characters beyond the marked position before the mark becomes invalid.

<p class=para>
The implementation of the <tt class=literal>mark()</tt> 
method in <tt class=literal>Reader</tt> simply throws 
an exception to indicate that the mark-and-reset functionality is not implemented. 
A subclass must override the method to provide the functionality. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.411">markSupported</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.554">public boolean markSupported()</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
<tt class=literal>true</tt> if this reader supports 
<tt class=literal>mark()</tt> and <tt class=literal>reset()</tt>; 
<tt class=literal>false</tt> otherwise. 

<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns a <tt class=literal>boolean</tt> 
value that indicates whether or not this object supports mark-and-reset 
functionality.

<p class=para>
The <tt class=literal>markSupported()</tt> method 
in <tt class=literal>Reader</tt> always returns <tt class=literal>false</tt>. 
A subclass that implements the mark-and-reset functionality should override 
the method to return <tt class=literal>true</tt>. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.412">read</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.555">public int read() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The next character of data or <tt class=literal>-1</tt> if the end of the stream is encountered. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads the next character of input. The character is returned 
as an integer in the range <tt class=literal>0x0000</tt> 
to <tt class=literal>0xFFFF</tt>. The method blocks 
until the character is read, the end of stream is encountered, or an exception 
is thrown.

<p class=para>

The implementation of this method in <tt class=literal>Reader</tt> reads
the character by calling <tt class=literal>read(cb,</tt> 
<tt class=literal>0,</tt> <tt class=literal>1)</tt>, where
<tt class=literal>cb</tt> is a character array, and returning
<tt class=literal>cb[0]</tt>. Although it is not strictly necessary, a
subclass that wants to provide efficient single-character reads should
override this method.
</DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.556">public int read(char[] cbuf) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>cbuf</tt><br>
<dd>

<p class=para>
An array of characters 
to be filled from the stream. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The actual number of characters read or <tt class=literal>-1</tt> if the end of the stream is 
encountered immediately. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>

This method reads characters of input to fill the given array by
calling <tt class=literal>read(cbuf,</tt> <tt class=literal>0,</tt> 
<tt class=literal>cbuf.length)</tt>. The method
blocks until some data is available.
<p class=para>
A subclass does not usually need to override this method, as it can override 
<tt class=literal>read(char[],</tt> 
<tt class=literal>int,</tt> <tt class=literal>int)</tt> 
and have <tt class=literal>read(char[])</tt> 
work automatically. </DL>
</DIV>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.557"><div class=screen> <p> <pre> public abstract int read(char[] cbuf, int off, int len) throws IOException </PRE> </DIV></A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>cbuf</tt><br>
<dd>

<p class=para>
An array of characters to be filled from the stream.

<p>
<dt class=varlistentry><tt class=literal>off</tt><br>
<dd>

<p class=para>
An offset into the array.

<p>
<dt class=varlistentry><tt class=literal>len</tt><br>
<dd>

<p class=para>
The number of characters to read. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The actual number of characters read or <tt class=literal>-1</tt> if the end of the stream is 
encountered immediately. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method reads up to <tt class=literal>len</tt> 
characters of input into the given array starting at index <tt class=literal>off</tt>. 
The method blocks until some data is available.

<p class=para>
A subclass of <tt class=literal>Reader</tt> must implement 
this method. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.413">ready</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.558">public boolean ready() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
A <tt class=literal>boolean</tt> value that indicates 
whether the reader is ready to be read. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method returns <tt class=literal>true</tt> if 
the next <tt class=literal>read()</tt> is guaranteed 
to not block.

<p class=para>
The implementation of the <tt class=literal>ready()</tt> 
method in <tt class=literal>Reader</tt> always returns 
<tt class=literal>false</tt>. A subclass should override 
this method as appropriate. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.414">reset</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.559">public void reset() throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If there was 
no previous call to the <tt class=literal>mark()</tt> 
method or the saved position has been invalidated. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method restores the position of the stream to the position that was 
saved by a previous call to <tt class=literal>mark()</tt>.

<p class=para>
The implementation of the <tt class=literal>reset()</tt> 
method in <tt class=literal>Reader</tt> throws an 
exception to indicate that mark-and-reset functionality is not supported 
by default. A subclass must override the method to provide the functionality. </DL>
</DIV>

</DIV>

<div class=refsect2>
<h3 class=refsect2><a class="TITLE" name="ch11-REFSECT2-AUTOID.415">skip</A></h3>

<div class=refsect3>
<h4 class=refsect3><a class="TITLE" name="ch11-REFSECT3-AUTOID.560">public long skip(long n) throws IOException</A></h4>

<dl class=variablelist>
<dt class=varlistentry>Parameters<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>n</tt><br>
<dd>

<p class=para>
The number of characters 
to skip. </DL>
<p>
<dt class=varlistentry>Returns<br>
<dd>

<p class=para>
The actual number of characters skipped. 

<p>
<dt class=varlistentry>Throws<br>
<dd>

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>IOException</tt><br>
<dd>

<p class=para>
If any kind 
of I/O error occurs. </DL>
<p>
<dt class=varlistentry>Description<br>
<dd>

<p class=para>
This method skips <tt class=literal>n</tt> characters 
of input. In other words, it moves the position of the stream forward by 
<tt class=literal>n</tt> characters.

<p class=para>
The implementation of the <tt class=literal>skip()</tt> 
method in <tt class=literal>Reader</tt> simply calls 
<tt class=literal>read(cb,</tt> 
<tt class=literal>0,</tt> <tt class=literal>n)</tt> 
where <tt class=literal>cb</tt> is a character array 
that is at least <tt class=literal>n</tt> bytes long. 
A subclass may want to override this method to implement a more efficient 
skipping algorithm. </DL>
</DIV>

</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.397">Inherited Methods</A></h2>

<div class=informaltable>
<p>
<table class=INFORMALTABLE>
<tr class=row>
<th align="LEFT">

<p class=para>
Method</TH>
<th align="LEFT">

<p class=para>
Inherited From</TH>
<th align="LEFT">

<p class=para>
Method</TH>
<th align="LEFT">

<p class=para>
Inherited From</TH>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>clone()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>equals(Object)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>finalize()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>getClass()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>hashCode()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>notify()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>notifyAll()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>toString()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>wait()</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>wait(long)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
</TR>
<tr class=row>
<td align="LEFT">

<p class=para>
<tt class=literal>wait(long, int)</tt></TD>
<td align="LEFT">

<p class=para>
<tt class=literal>Object</tt></TD>
<td align="LEFT">&nbsp;</TD>
<td align="LEFT">&nbsp;</TD>
</TR>
</TABLE>
<p>
</DIV>

</DIV>

<div class=refsect1>
<h2 class=refsect1><a class="TITLE" name="ch11-REFSECT1-AUTOID.398">See Also</A></h2>

<p class=para>
<tt class=literal>BufferedReader</tt>, 
<tt class=literal>CharArrayReader</tt>, 
<tt class=literal>FilterReader</tt>, 
<tt class=literal>InputStreamReader</tt>, 
<tt class=literal>IOException</tt>, 
<tt class=literal>PipedReader</tt>, 
<tt class=literal>StringReader</tt> 
</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch11_56.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch11_58.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>RandomAccessFile</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>SequenceInputStream</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
