<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 4] 4.3 Generating Exceptions</TITLE>
<meta name="author" content="Mark Grand and Jonathan Knudsen">
<meta name="date" content="Fri Aug  8 16:10:33 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java Fundamental Classes Reference">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Fundamental Classes Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 4<br>Exception Handling</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch05_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JFC-CH-4-SECT-3">4.3 Generating Exceptions</A></h2>

<p class=para>
<a name="CH09.DEC2"></A>A Java program can use the exception-handling mechanism to
deal with program-specific errors in a clean manner. A program simply
uses the <tt class=literal>throw</tt> statement to signal an exception.
The <tt class=literal>throw</tt> statement must be followed by an object
that is of type <tt class=literal>Throwable</tt> or one of its subclasses.
For program-defined exceptions, you typically want an exception object
to be an instance of a subclass of the <tt class=literal>Exception</tt>
class. In most cases, it makes sense to define a new subclass of
<tt class=literal>Exception</tt> that is specific to your program.

<p class=para>
Consider the following example:

<div class=screen>
<p>
<pre>
class WrongDayException extends Exception {
    public WrongDayException () {}
    public WrongDayException(String msg) {
        super(msg);
    }
}
public class ThrowExample {
    void doIt() throws WrongDayException{
        int dayOfWeek =(new java.util.Date()).getDay();
        if (dayOfWeek != 2  &amp;&amp; dayOfWeek != 4)
            throw new WrongDayException("Tue. or Thur.");
        // The rest of doIt's logic goes here
        System.out.println("Did it");
    }
    public static void main (String [] argv) {
        try {
            (new ThrowExample()).doIt();
        } catch (WrongDayException e) {
            System.out.println("Sorry, can do it only on "
                                + e.getMessage());
        }
    }
}
</PRE>
</DIV>

<p class=para>
The code in this example defines a class called
<tt class=literal>WrongDayException</tt>
to represent the specific type of exception thrown by the example.
The <tt class=literal>Throwable</tt> class, and most subclasses of
<tt class=literal>Throwable</tt>,
have at least two constructors. One constructor takes a string argument
that is used as a textual message that explains the exception,
while the other constructor takes no arguments. Thus, the
<tt class=literal>WrongDayException</tt> class defines two constructors.

<p class=para>
In the class <tt class=literal>ThrowExample</tt>, if the current
day of the week is neither Tuesday nor Thursday,
the <tt class=literal>doIt()</tt>
method throws a <tt class=literal>WrongDayException</tt>. Note that
the <tt class=literal>WrongDayException</tt> object is created at the
same time it is thrown. It is common practice to provide some
information about an exception when it is thrown, so a string argument
is used in the allocation statement for the
<tt class=literal>WrongDayException</tt>.
The method declaration for the <tt class=literal>doIt()</tt> method
contains a <tt class=literal>throws</tt> clause, to indicate the fact
that it can throw a <tt class=literal>WrongDayException</tt>.

<p class=para>
The <tt class=literal>main()</tt> method in <tt class=literal>ThrowExample</tt>
encloses its call to the <tt class=literal>doIt()</tt> method in a
<tt class=literal>try</tt>
statement, so that it can catch any <tt class=literal>WrongDayException</tt>
thrown by <tt class=literal>doIt()</tt>. The <tt class=literal>catch</tt>
block prints an error message, using the <tt class=literal>getMessage()</tt>
method of the exception object. This method retrieves the string
that was passed to the constructor when the exception object was
created.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JFC-CH-4-SECT-2.1">Printing Stack Traces</A></h3>

<p class=para>
When an exception is caught, it can be useful to print a stack
trace to figure out where the exception came from. A stack trace
looks like the following:

<div class=screen>
<p>
<pre>
java.lang.ArithmeticException: / by zero
        at t.cap(t.java:16)
        at t.doit(t.java:8)
        at t.main(t.java:3)
</PRE>
</DIV>

<p class=para>
You can print a stack trace by calling the
<tt class=literal>printStackTrace()</tt>
method that all <tt class=literal>Throwable</tt> objects inherit from
the <tt class=literal>Throwable</tt> class. For example:

<div class=screen>
<p>
<pre>
int cap (x) {return 100/x}
try {
    cap(0);
} catch(ArithmeticException e) {
    e.printStackTrace();
}
</PRE>
</DIV>

<p class=para>
You can also print a stack trace anywhere in an application,
without actually throwing an exception. For example:

<div class=screen>
<p>
<pre>
new Throwable().printStackTrace();
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JFC-CH-4-SECT-2.2">Rethrowing Exceptions</A></h3>

<p class=para>
After an exception is caught, it can be rethrown if
is appropriate. The one choice that you have to make when rethrowing
an exception concerns the location from where the stack trace says the
object was thrown. You can make the rethrown exception appear
to have been thrown from the location of the original exception
throw, or from the location of the current rethrow.

<p class=para>
To rethrow an exception and have the stack trace indicate
the original location, all you have to do is rethrow the exception:

<div class=screen>
<p>
<pre>
try {
    cap(0);
} catch(ArithmeticException e) {
    throw e;
}
</PRE>
</DIV>

<p class=para>
To arrange for the stack trace to show the actual location
from which the exception is being rethrown, you have to call the
exception's <tt class=literal>fillInStackTrace()</tt> method. This method
sets the stack trace information in the exception based on the current
execution context. Here's an example using the
<tt class=literal>fillInStackTrace()</tt> method:

<div class=screen>
<p>
<pre>
try {
    cap(0);
} catch(ArithmeticException e) {
    throw (ArithmeticException)e.fillInStackTrace();
}
</PRE>
</DIV>

<p class=para>
It is important to call <tt class=literal>fillInStackTrace()</tt> on
the same line as the <tt class=literal>throw</tt> statement, so that
the line number specified in the stack trace matches the line on
which the <tt class=literal>throw</tt> statement appears. The
<tt class=literal>fillInStackTrace()</tt>
method returns a reference to the <tt class=literal>Throwable</tt> class,
so you need to cast the reference to the actual type of the exception.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch05_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Declaring Exceptions</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Collections</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
