<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 1] Introduction</TITLE>
<meta name="author" content="Mark Grand and Jonathan Knudsen">
<meta name="date" content="Fri Aug  8 16:06:32 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java Fundamental Classes Reference">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java Fundamental Classes Reference" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch00_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 1</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch01_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="JFC-CH-1">1. Introduction</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
The java.lang Package<br>
<a href="ch01_02.htm">The java.lang.reflect Package</A><br>
<a href="ch01_03.htm">The java.io Package</A><br>
<a href="ch01_04.htm">The java.net Package</A><br>
<a href="ch01_05.htm">The java.util Package</A><br>
<a href="ch01_06.htm">The java.text Package</A><br>
<a href="ch01_07.htm">The java.math Package</A><br>
<a href="ch01_08.htm">The java.util.zip Package</A><br>

<p>
</DIV>

<p class=para>
The phenomenon that is Java continues to capture new supporters
every day. What began as a programming environment for
writing fancy animation applets that could be embedded in 
web browsers is growing up to be a sophisticated platform
for delivering all kinds of portable, distributed applications.
If you are already an experienced Java programmer, you know
just how powerful the portability of Java is. If you are just
now discovering Java, you'll be happy to know that the days
of porting applications are over. Once you write a Java
application, it can run on UNIX workstations, PCs, and Macintosh
computers, as well as on many other supported platforms.

<p class=para>
This book is a complete programmer's reference to the 
"fundamental classes" in the Java programming environment.
The fundamental classes in the Java Development Kit (JDK)
provide a powerful set of
tools for creating portable applications; they are 
an important component of the toolbox used by every Java 
programmer. This reference covers the classes in the
<tt class=literal>java.lang</tt>, <tt class=literal>java.io</tt>,
<tt class=literal>java.net</tt>, <tt class=literal>java.util</tt>,
<tt class=literal>java.lang.reflect</tt>, <tt class=literal>java.math</tt>,
<tt class=literal>java.text</tt>, and <tt class=literal>java.util.zip</tt>
packages. This chapter offers an overview of the 
fundamental classes in each of these packages.

<p class=para>
This reference assumes you are already familiar with the Java language
and class libraries. If you aren't, <i class=emphasis>Exploring
Java</I>, by Pat Niemeyer and Josh Peck, provides a general
introduction, and other books in the O'Reilly Java series provide
detailed references and tutorials on specific topics.  Note that the
material herein does not cover the classes that comprise the Abstract
Window Toolkit (AWT): the AWT is covered by a companion volume, the
<i class=emphasis>Java AWT Reference</I>, by John Zukowski. In
addition, this book does not cover any of the new "enterprise" APIs in
the core 1.1 JDK, such as the classes in the
<tt class=literal>java.rmi</tt>, <tt class=literal>java.sql</tt>, and
<tt class=literal>java.security</tt> packages. These packages will be
covered by forthcoming books on distributed computing and database
programming.  See the Preface for a complete list of titles in the
O'Reilly Java series.

<p class=para>
 
You should be aware that this book covers two versions of Java: 1.0.2
and 1.1. Version 1.1 of the Java Development Kit (JDK) was released in
February 1997. This release includes many improvements and additions
to the fundamental Java classes; it represents a major step forward in
the evolution of Java.  Although Java 1.1 has a number of great new
features, you may not want to switch to the new version right away,
especially if you are writing mostly Java applets. You'll need to keep
an eye on the state of Java support in browsers to help you decide
when to switch to Java 1.1. Of course, if you are writing Java
applications, you can take the plunge today.

<p class=para>
This chapter points out new features of Java 1.1 as they 
come up. However, there is one "feature" that deserves mention 
that doesn't fit naturally into an overview. As of Java 1.1, 
classes, methods, and constructors available in Java 1.0.2 
can be deprecated in favor of new classes, methods, and constructors
in Java 1.1. The Java 1.1 compiler issues a warning whenever 
you use a deprecated entity.

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JFC-CH-1-SECT-1">1.1 The java.lang Package</A></h2>

<p class=para>
The <tt class=literal>java.lang</tt> package contains classes and
interfaces essential to the Java language. For example,
the <tt class=literal>Object</tt> class is the ultimate superclass of
all other classes in Java. <tt class=literal>Object</tt> defines
some basic methods for thread synchronization that are inherited
by all Java classes. In addition, <tt class=literal>Object</tt>
defines basic methods for equality testing, hashcode
generation, and string conversion that can be overridden by
subclasses when appropriate.

<p class=para>
The <tt class=literal>java.lang</tt> package also contains the
<tt class=literal>Thread</tt> class, which controls the operation
of each thread in a multithreaded application. A
<tt class=literal>Thread</tt> object can be used to 
start, stop, and suspend a thread. A <tt class=literal>Thread</tt>
must be associated with an object that implements the
<tt class=literal>Runnable</tt> interface; the <tt class=literal>run()</tt>
method of this interface specifies what the thread actually does.
See <a href="ch03_01.htm">Chapter 3, <i>Threads</i></A>, for a more detailed explanation of how threads
work in Java.

<p class=para>
The <tt class=literal>Throwable</tt> class is the superclass of all
error and exception classes in Java, so it defines the basic
functionality of all such classes. The <tt class=literal>java.lang</tt>
package also defines the standard error and exception classes
in Java. The error and exception hierarchies are rooted
at the <tt class=literal>Error</tt> and <tt class=literal>Exception</tt>
subclasses of <tt class=literal>Throwable</tt>. See <a href="ch04_01.htm">Chapter 4, <i>Exception Handling</i></A>,
for more information about the exception-handling mechanism.

<p class=para>

The <tt class=literal>Boolean</tt>, <tt class=literal>Character</tt>,
<tt class=literal>Byte</tt>, <tt class=literal>Double</tt>,
<tt class=literal>Float</tt>, <tt class=literal>Integer</tt>,
<tt class=literal>Long</tt>, and <tt class=literal>Short</tt> classes
encapsulate the Java primitive data types. <tt class=literal>Byte</tt> and
<tt class=literal>Short</tt> are new in Java 1.1, as is the
<tt class=literal>Void</tt> class. All of these classes are necessary to
support the new Reflection API and class literals in Java 1.1 The
<tt class=literal>Class</tt> class also has a number of new methods in
Java 1.1 to support reflection.  

<p class=para>
All strings in Java are represented by <tt class=literal>String</tt>
objects. These objects are immutable. The <tt class=literal>StringBuffer</tt>
class in <tt class=literal>java.lang</tt> can be used to work
with mutable text strings. <a href="ch02_01.htm">Chapter 2, <i>Strings and Related Classes</i></A>, offers a more detailed
description of working with strings in Java.

<p class=para>
See <a href="ch12_01.htm">Chapter 12, <i>The java.lang Package</i></A>, for complete reference material on all of the
classes in the <tt class=literal>java.lang</tt> package.

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch00_07.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch01_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Acknowledgments</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>The java.lang.reflect Package</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="../javanut/index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
