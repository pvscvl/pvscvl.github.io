<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 7] 7.3 The Java 1.1 Event Model</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 15:55:06 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7<br>Events</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch07_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-7-SECT-3">7.3 The Java 1.1 Event Model</A></h2>

<p class=para>
<a name="CH7.EVENTS-JAVA.2"></A>The Java 1.1 event model is used by both the AWT and by Java
Beans.  In this model, different classes of events are
represented by different Java classes.  Every event is a
subclass of <tt class=literal>java.util.EventObject</tt>.  AWT events,
which is what we are concerned with here, are subclasses of
<tt class=literal>java.awt.AWTEvent</tt>.  For convenience, the various
types of AWT events, such as <tt class=literal>MouseEvent</tt> and
<tt class=literal>ActionEvent</tt>, are placed in the new
<tt class=literal>java.awt.event</tt> package.

<p class=para>
Every event has a source object, which can be obtained with
<tt class=literal>getSource()</tt>, and every AWT event has a type value,
which can be obtained with <tt class=literal>getID()</tt>.  This value is
used to distinguish the various types of events that are
represented by the same event class.  For example, the
<tt class=literal>FocusEvent</tt> has two possible types:
<tt class=literal>FocusEvent.FOCUS_GAINED</tt> and
<tt class=literal>FocusEvent.FOCUS_LOST</tt>.  Event subclasses contain
whatever data values are pertinent to the particular
event type.  For example, <tt class=literal>MouseEvent</tt> has
<tt class=literal>getX()</tt>, <tt class=literal>getY()</tt>, and <tt class=literal>getClickCount()</tt>
methods; it also inherits the <tt class=literal>getModifiers()</tt> and
<tt class=literal>getWhen()</tt> methods, among others.

<p class=para>
<a name="CH7.LISTENER.INT1"></A>The 1.1 event handling model is based on the concept of an
"event listener."  An object interested in receiving events
is an <i class=emphasis>event listener</I>.  An object that generates events (an <i class=emphasis>event
source</I>) maintains a list of listeners that are interested
in being notified when events occur, and provides methods
that allow listeners to add themselves and remove themselves
from this list of interested objects.  When the event source
object generates an event (or when a user input event occurs
on the event source object), the event source notifies
all the listener objects that the event has occurred.

<p class=para>
An event source notifies an event listener object by
invoking a method on it and passing it an event object (an
instance of a subclass of <tt class=literal>EventObject</tt>).  In
order for a source to invoke a method on a listener, all
listeners must implement the required method.  This is
ensured by requiring that all event listeners for a particular
type of event implement a corresponding interface.  For
example, event listener objects for <tt class=literal>ActionEvent</tt>
events must implement the <tt class=literal>ActionListener</tt> interface.
The <tt class=literal>java.awt.event</tt> package defines an event
listener interface for each of the event types it defines.
(Actually, for <tt class=literal>MouseEvent</tt> events, it defines two
listener interfaces: <tt class=literal>MouseListener</tt> and
<tt class=literal>MouseMotionListener</tt>.)  All event listener interfaces
themselves extend <tt class=literal>java.util.EventListener</tt>.  This
interface does not define any methods, but instead acts as a marker
interface, clearly identifying all event listeners as such.

<p class=para>
An event listener interface may define more than one method.
For example, an event class like <tt class=literal>MouseEvent</tt> represents several
different types of mouse events, such as a button press
event and a button release event, and these different event
types cause different methods in the corresponding event
listener to be invoked.  By convention, the methods of an
event listener are passed a single argument, which is an
event object of the type that corresponds to the listener.
This event object should contain all the information a
program needs to respond to the event.
<a href="#JNUT2-CH-7-TAB-6">Table 7.6</A>
lists the event types defined in <tt class=literal>java.awt.event</tt>, the
corresponding listener (or listeners), and the methods
defined by each listener interface.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="JNUT2-CH-7-TAB-6">Table 7.6: Java 1.1 Event Types, Listeners, and Listener Methods</A></CAPTION>
<tr class=row>
<th align="left">Event Class</TH>
<th align="left">Listener Interface</TH>
<th align="left">Listener Methods</TH>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ActionEvent</tt></TD>
<td align="left"><tt class=literal>ActionListener</tt></TD>
<td align="left"><tt class=literal>actionPerformed()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>AdjustmentEvent</tt></TD>
<td align="left"><tt class=literal>AdjustmentListener</tt></TD>
<td align="left"><tt class=literal>adjustmentValueChanged()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ComponentEvent</tt></TD>
<td align="left"><tt class=literal>ComponentListener</tt></TD>
<td align="left"><tt class=literal>componentHidden()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>componentMoved()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>componentResized()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>componentShown()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ContainerEvent</tt></TD>
<td align="left"><tt class=literal>ContainerListener</tt></TD>
<td align="left"><tt class=literal>componentAdded()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>componentRemoved()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>FocusEvent</tt></TD>
<td align="left"><tt class=literal>FocusListener</tt></TD>
<td align="left"><tt class=literal>focusGained()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>focusLost()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>ItemEvent</tt></TD>
<td align="left"><tt class=literal>ItemListener</tt></TD>
<td align="left"><tt class=literal>itemStateChanged()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>KeyEvent</tt></TD>
<td align="left"><tt class=literal>KeyListener</tt></TD>
<td align="left"><tt class=literal>keyPressed()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>keyReleased()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>keyTyped()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>MouseEvent</tt></TD>
<td align="left"><tt class=literal>MouseListener</tt></TD>
<td align="left"><tt class=literal>mouseClicked()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>mouseEntered()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>mouseExited()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>mousePressed()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>mouseReleased()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">_</TD>
<td align="left">_</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>MouseMotionListener</tt></TD>
<td align="left"><tt class=literal>mouseDragged()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>mouseMoved()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>TextEvent</tt></TD>
<td align="left"><tt class=literal>TextListener</tt></TD>
<td align="left"><tt class=literal>textValueChanged()</tt></TD>
</TR>
<tr class=row>
<td align="left"><tt class=literal>WindowEvent</tt></TD>
<td align="left"><tt class=literal>WindowListener</tt></TD>
<td align="left"><tt class=literal>windowActivated()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>windowClosed()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>windowClosing()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>windowDeactivated()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>windowDeiconified()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>windowIconified()</tt></TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left"><tt class=literal>windowOpened()</tt></TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
For each of the event listener interfaces that contains more
than one method, <tt class=literal>java.awt.event</tt> defines a simple
"adapter" class that provides an empty body for each of the
methods in the interface.  When you are only interested in
one or two of the defined methods, it is sometimes easier to
subclass the adapter class than it is to implement the
interface.  If you subclass the adapter, you only have to override
the methods of interest, but if you implement the interface
directly you have to define all of the methods, which means
you must provide empty bodies for all the methods
that are not of interest.  These pre-defined no-op
adapter classes bear the same name as the interfaces they
implement, with "Listener" changed to "Adapter":
<tt class=literal>MouseAdapter</tt>, <tt class=literal>WindowAdapter</tt>, etc.

<p class=para>
Once you have implemented a listener interface, or
subclassed a adapter class, you must instantiate your new
class to define an individual event listener object.
You then register that listener with the appropriate event source.
In AWT programs, an event
source is always some sort of AWT component.  Event listener
registration methods follow a standard naming convention: if
an event source generates events of type <tt class=literal>X</tt>, it
has a method named <tt class=literal>addXListener()</tt>
to add an event listener, and a method
<tt class=literal>removeXListener()</tt>
to remove a listener. One of the nice features of the 1.1
event model is that it
is easy to determine the types of events a component can
generate--just look for the event listener registration
methods.  For example, by inspecting the API of the
<tt class=literal>Button</tt> object, you can determine that it generates
<tt class=literal>ActionEvent</tt> events.
<a href="#JNUT2-CH-7-TAB-7">Table 7.7</A>
lists AWT components and the events they generate.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="JNUT2-CH-7-TAB-7">Table 7.7: AWT Components and the Java 1.1 Events They Generate</A></CAPTION>
<tr class=row>
<th align="left">Component</TH>
<th align="left">Events Generated</TH>
<th align="left">Meaning</TH>
</TR>
<tr class=row>
<td align="left">Button</TD>
<td align="left">ActionEvent</TD>
<td align="left">

<p class=para>
User clicked on the button</TD>
</TR>
<tr class=row>
<td align="left">Checkbox</TD>
<td align="left">ItemEvent</TD>
<td align="left">

<p class=para>
User selected or deselected an item</TD>
</TR>
<tr class=row>
<td align="left">CheckboxMenuItem</TD>
<td align="left">ItemEvent</TD>
<td align="left">

<p class=para>
User selected or deselected an item</TD>
</TR>
<tr class=row>
<td align="left">Choice</TD>
<td align="left">ItemEvent</TD>
<td align="left">

<p class=para>
User selected or deselected an item</TD>
</TR>
<tr class=row>
<td align="left">Component</TD>
<td align="left">ComponentEvent</TD>
<td align="left">

<p class=para>
Component moved, resized, hidden, or shown</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">FocusEvent</TD>
<td align="left">

<p class=para>
Component gained or lost focus</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">KeyEvent</TD>
<td align="left">

<p class=para>
User pressed or released a key</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">MouseEvent</TD>
<td align="left">

<p class=para>
User pressed or released mouse button, mouse entered or exited component,
or user moved or dragged mouse.
Note: <tt class=literal>MouseEvent</tt> has two corresponding listeners,
<tt class=literal>MouseListener</tt> and <tt class=literal>MouseMotionListener</tt>.</TD>
</TR>
<tr class=row>
<td align="left">Container</TD>
<td align="left">ContainerEvent</TD>
<td align="left">

<p class=para>
Component added to or removed from container</TD>
</TR>
<tr class=row>
<td align="left">List</TD>
<td align="left">ActionEvent</TD>
<td align="left">

<p class=para>
User double-clicked on list item</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">ItemEvent</TD>
<td align="left">

<p class=para>
User selected or deselected an item</TD>
</TR>
<tr class=row>
<td align="left">MenuItem</TD>
<td align="left">ActionEvent</TD>
<td align="left">

<p class=para>
User selected a menu item</TD>
</TR>
<tr class=row>
<td align="left">Scrollbar</TD>
<td align="left">AdjustmentEvent</TD>
<td align="left">User moved the scrollbar</TD>
</TR>
<tr class=row>
<td align="left">TextComponent</TD>
<td align="left">TextEvent</TD>
<td align="left">

<p class=para>
User changed text</TD>
</TR>
<tr class=row>
<td align="left">TextField</TD>
<td align="left">ActionEvent</TD>
<td align="left">

<p class=para>
User finished editing text</TD>
</TR>
<tr class=row>
<td align="left">Window</TD>
<td align="left">WindowEvent</TD>
<td align="left">

<p class=para>
Window opened, closed, iconified, deiconified, or
close requested</TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch07_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch07_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Scribbling in Java 1.0</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Scribbling in Java 1.1</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
