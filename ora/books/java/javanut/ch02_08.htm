<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 2] 2.8 Objects</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 15:47:55 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_07.htm#JNUT2-CH-2-SECT-7"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 2<br>How Java Differs from C</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch02_09.htm#JNUT2-CH-2-SECT-9.1"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-2-SECT-8">2.8 Objects</A></h2>

<p class=para>
<a name="OBJECTS"></A>Now that you know objects are passed by reference, 
we should discuss how they are created, used, and
destroyed.  The following subsections provide a very brief
overview of objects.  <a href="ch03_01.htm">Chapter 3, <i>Classes and Objects in Java</i></A> explains
classes and objects in much greater detail.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-2-SECT-8.1">Creating Objects</A></h3>

<p class=para>
Declaring a variable to hold
an object does not create the object itself; the 
variable only holds the reference to the object. 
To actually create an object, you must use the
<tt class=literal>new</tt> keyword.  This is followed by the object's class
(i.e., its type) and an optional argument list in
parentheses.  These arguments are passed to the constructor
method for the class, which serves to initialize internal
fields in the new object.  For example:

<p class=para>
<div class=screen>
<p>
<pre>
java.awt.Button b = new java.awt.Button();
ComplexNumber c = new ComplexNumber(1.0, 1.414);
</PRE>
</DIV>

<p class=para>
There are actually two other ways to create an object.
First, you can create a <tt class=literal>String</tt> object simply by
enclosing characters in double quotes:

<p class=para>
<div class=screen>
<p>
<pre>
String s = "This is a test";
</PRE>
</DIV>

<p class=para>
Because strings are used so frequently, the Java compiler
provides this technique as a shortcut.
Another way to create objects is by calling the
<tt class=literal>newInstance()</tt> method of a <tt class=literal>Class</tt> object.
This technique is generally used only when dynamically
loading classes, so we won't discuss it here.  In Java 1.1,
objects can also be created by "de-serializing"
them--i.e., recreating an object that had its state saved
through "serialization."

<p class=para>
The memory for newly created objects is dynamically
allocated.  Creating an object with <tt class=literal>new</tt> in Java is
like calling <tt class=literal>malloc()</tt> in C to allocate memory for an
instance of a <tt class=literal>struct</tt>.  It is also, of course, a lot
like using the <tt class=literal>new</tt> operator in C++.  (Below,
we'll see where this analogy to <tt class=literal>malloc()</tt> in C and
<tt class=literal>new</tt> in C++ breaks down.)

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-2-SECT-8.2">Accessing Objects</A></h3>

<p class=para>
As you've probably noticed in various example code fragments
by now, the way you access the fields of an object is with a
dot:

<p class=para>
<div class=screen>
<p>
<pre>
ComplexNumber c = new ComplexNumber();
c.x = 1.0;
c.y = -1.414;
</PRE>
</DIV>

<p class=para>
This syntax is reminiscent of accessing the fields of a
<tt class=literal>struct</tt> in C.  Recall, though, that Java
objects are always accessed by reference, and that Java
performs any necessary dereferencing for you.  Thus, the dot
in Java is more like <tt class=literal>-&gt;</tt> in C.  Java hides the fact
that there is a reference here in an attempt to make your
programming easier.
The other difference between C and Java when accessing
objects is that in Java you refer to an object's methods 
with the same syntax used for fields:

<p class=para>
<div class=screen>
<p>
<pre>
ComplexNumber c = new ComplexNumber(1.0, -1.414);
double magnitude = c.magnitude();
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-2-SECT-8.3">Garbage Collection</A></h3>

<p class=para>
Objects in Java are created with the <tt class=literal>new</tt> keyword,
but there is no corresponding <tt class=literal>old</tt> or <tt class=literal>delete</tt>
keyword or <tt class=literal>free()</tt> method to get rid of them when
they are no longer needed.  If creating an object with
<tt class=literal>new</tt> is like calling <tt class=literal>malloc()</tt> in C or using
<tt class=literal>new</tt> in C++, then it would seem that Java is full of
memory leaks, because we never call <tt class=literal>free()</tt> or use
the <tt class=literal>delete</tt> operator.

<p class=para>
In fact, this isn't the case.  Java uses a technique called
<i class=emphasis>garbage collection</I> to automatically detect objects that are
no longer being used (an object is no longer in use when
there are no more references to it) and to free them.  This
means that in our programs, we never need to worry about
freeing memory or destroying objects--the garbage collector
takes care of that.

<p class=para>
If you are a C or C++ programmer, it may take some getting
used to to just let allocated objects go without
worrying about reclaiming their memory.  Once you get used
to it, however, you'll begin to appreciate what a nice
feature this is.  We'll discuss garbage collection in more
detail in the next chapter.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_07.htm#JNUT2-CH-2-SECT-7"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch02_09.htm#JNUT2-CH-2-SECT-9.1"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Reference Data Types</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Arrays</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
