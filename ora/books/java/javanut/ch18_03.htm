<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 18] 18.3 java.awt.AWTEventMulticaster (JDK 1.1)</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 16:09:17 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch18_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 18<br>The java.awt Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch18_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-18-SECT-3">18.3 java.awt.AWTEventMulticaster (JDK 1.1)</A></h2>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-18-SECT-3.1"></A></h3>
</DIV>

<p class=para>
<tt class=literal>AWTEventMulticaster</tt> is a convenience class used when
writing a custom AWT component.  It provides an easy way
to maintain a list of AWT <tt class=literal>EventListener</tt> objects, and to
notify the listeners on that list when an event occurs.

<p class=para>
<tt class=literal>AWTEventMulticaster</tt> implements each of the event
listener interfaces defined in the <tt class=literal>java.awt.event</tt>
package, which means that an <tt class=literal>AWTEventMulticaster</tt>
object can serve as any desired type of event listener.  (It
also means, as you can see below, that the class defines 
quite a few methods.)  <tt class=literal>AWTEventMulticaster</tt>
implements what amounts to a linked list of
<tt class=literal>EventListener</tt> objects.  When you invoke one of the
<tt class=literal>EventListener</tt> methods of an
<tt class=literal>AWTEventMulticaster</tt>, it invokes the same method on
all of the <tt class=literal>EventListener</tt> objects in the linked list.

<p class=para>
Rather than instantiate an <tt class=literal>AWTEventMulticaster</tt>
object directly, you use the static <tt class=literal>add()</tt> and
<tt class=literal>remove()</tt> methods of the class to add and remove
<tt class=literal>EventListener</tt> objects from the linked list.  Doing
so returns an <tt class=literal>AWTEventMulticaster</tt> with the
appropriate <tt class=literal>EventListener</tt> object registered.
The API for using an <tt class=literal>AWTEventMulticaster</tt> is somewhat
non-intuitive.  Here is some example code that shows its use:

<div class=screen>
<p>
<pre>
public class MyList extends Component {   // a class that sends ItemEvents
  // this will be the head of a linked list of AWTEventMulticaster objects
  protected ItemListener listener = null;
  public void addItemListener(ItemListener l) {      // add a listener
    listener = AWTEventMulticaster.add(listener, l);
  }
  public void removeItemListener(ItemListener l) {   // remove a listener
    listener = AWTEventMulticaster.remove(listener, l);
  }
  protected void fireItemEvent(ItemEvent e) {        // notify all listeners
    if (listener != null) listener.itemStateChanged(e);
  }
  // The rest of the class goes here
}
</PRE>
</DIV>

<div class=screen>
<p>
<pre>
public class AWTEvent Multicaster  extends Object 
                                   implements ComponentListener, ContainerListener, FocusListener, KeyListener, MouseListener, MouseMotionListener, WindowListener, ActionListener,ItemListener, AdjustmentListener, TextListener {
    // <tt class=literal>Protected Constructor</tt>
            protected <tt class=literal>AWTEventMulticaster</tt>(EventListener <tt class=literal>a</tt>, EventListener <tt class=literal>b</tt>);
    // <tt class=literal>Protected Instance Variables</tt>
            protected EventListener <tt class=literal>a</tt>;
            protected EventListener <tt class=literal>b</tt>;
    // <tt class=literal>Class Methods</tt>
            public static ComponentListener <tt class=literal>add</tt>(ComponentListener <tt class=literal>a</tt>, ComponentListener <tt class=literal>b</tt>);
            public static ContainerListener <tt class=literal>add</tt>(ContainerListener <tt class=literal>a</tt>, ContainerListener <tt class=literal>b</tt>);
            public static FocusListener <tt class=literal>add</tt>(FocusListener <tt class=literal>a</tt>, FocusListener <tt class=literal>b</tt>);
            public static KeyListener <tt class=literal>add</tt>(KeyListener <tt class=literal>a</tt>, KeyListener <tt class=literal>b</tt>);
            public static MouseListener <tt class=literal>add</tt>(MouseListener <tt class=literal>a</tt>, MouseListener <tt class=literal>b</tt>);
            public static MouseMotionListener <tt class=literal>add</tt>(MouseMotionListener <tt class=literal>a</tt>, MouseMotionListener <tt class=literal>b</tt>);
            public static WindowListener <tt class=literal>add</tt>(WindowListener <tt class=literal>a</tt>, WindowListener <tt class=literal>b</tt>);
            public static ActionListener <tt class=literal>add</tt>(ActionListener <tt class=literal>a</tt>, ActionListener <tt class=literal>b</tt>);
            public static ItemListener <tt class=literal>add</tt>(ItemListener <tt class=literal>a</tt>, ItemListener <tt class=literal>b</tt>);
            public static AdjustmentListener <tt class=literal>add</tt>(AdjustmentListener <tt class=literal>a</tt>, AdjustmentListener <tt class=literal>b</tt>);
            public static TextListener <tt class=literal>add</tt>(TextListener <tt class=literal>a</tt>, TextListener <tt class=literal>b</tt>);
            protected static EventListener <tt class=literal>addInternal</tt>(EventListener <tt class=literal>a</tt>, EventListener <tt class=literal>b</tt>);
            public static ComponentListener <tt class=literal>remove</tt>(ComponentListener <tt class=literal>l</tt>, ComponentListener <tt class=literal>oldl</tt>);
            public static ContainerListener <tt class=literal>remove</tt>(ContainerListener <tt class=literal>l</tt>, ContainerListener <tt class=literal>oldl</tt>);
            public static FocusListener <tt class=literal>remove</tt>(FocusListener <tt class=literal>l</tt>, FocusListener <tt class=literal>oldl</tt>);
            public static KeyListener <tt class=literal>remove</tt>(KeyListener <tt class=literal>l</tt>, KeyListener <tt class=literal>oldl</tt>);
            public static MouseListener <tt class=literal>remove</tt>(MouseListener <tt class=literal>l</tt>, MouseListener <tt class=literal>oldl</tt>);
            public static MouseMotionListener <tt class=literal>remove</tt>(MouseMotionListener <tt class=literal>l</tt>, MouseMotionListener <tt class=literal>oldl</tt>);
            public static WindowListener <tt class=literal>remove</tt>(WindowListener <tt class=literal>l</tt>, WindowListener <tt class=literal>oldl</tt>);
            public static ActionListener <tt class=literal>remove</tt>(ActionListener <tt class=literal>l</tt>, ActionListener <tt class=literal>oldl</tt>);
            public static ItemListener <tt class=literal>remove</tt>(ItemListener <tt class=literal>l</tt>, ItemListener <tt class=literal>oldl</tt>);
            public static AdjustmentListener <tt class=literal>remove</tt>(AdjustmentListener <tt class=literal>l</tt>, AdjustmentListener <tt class=literal>oldl</tt>);
            public static TextListener <tt class=literal>remove</tt>(TextListener <tt class=literal>l</tt>, TextListener <tt class=literal>oldl</tt>);
            protected static EventListener <tt class=literal>removeInternal</tt>(EventListener <tt class=literal>l</tt>, EventListener <tt class=literal>oldl</tt>);
            protected static void <tt class=literal>save</tt>(ObjectOutputStream <tt class=literal>s</tt>, String <tt class=literal>k</tt>, EventListener <tt class=literal>l</tt>) throws IOException;
    // <tt class=literal>Public Instance Methods</tt>
            public void <tt class=literal>actionPerformed</tt>(ActionEvent <tt class=literal>e</tt>);  //<tt class=literal> From ActionListener</tt>
            public void <tt class=literal>adjustmentValueChanged</tt>(AdjustmentEvent <tt class=literal>e</tt>);  //<tt class=literal> From AdjustmentListener</tt>
            public void <tt class=literal>componentAdded</tt>(ContainerEvent <tt class=literal>e</tt>);  //<tt class=literal> From ContainerListener</tt>
            public void <tt class=literal>componentHidden</tt>(ComponentEvent <tt class=literal>e</tt>);  //<tt class=literal> From ComponentListener</tt>
            public void <tt class=literal>componentMoved</tt>(ComponentEvent <tt class=literal>e</tt>);  //<tt class=literal> From ComponentListener</tt>
            public void <tt class=literal>componentRemoved</tt>(ContainerEvent <tt class=literal>e</tt>);  //<tt class=literal> From ContainerListener</tt>
            public void <tt class=literal>componentResized</tt>(ComponentEvent <tt class=literal>e</tt>);  //<tt class=literal> From ComponentListener</tt>
            public void <tt class=literal>componentShown</tt>(ComponentEvent <tt class=literal>e</tt>);  //<tt class=literal> From ComponentListener</tt>
            public void <tt class=literal>focusGained</tt>(FocusEvent <tt class=literal>e</tt>);  //<tt class=literal> From FocusListener</tt>
            public void <tt class=literal>focusLost</tt>(FocusEvent <tt class=literal>e</tt>);  //<tt class=literal> From FocusListener</tt>
            public void <tt class=literal>itemStateChanged</tt>(ItemEvent <tt class=literal>e</tt>);  //<tt class=literal> From ItemListener</tt>
            public void <tt class=literal>keyPressed</tt>(KeyEvent <tt class=literal>e</tt>);  //<tt class=literal> From KeyListener</tt>
            public void <tt class=literal>keyReleased</tt>(KeyEvent <tt class=literal>e</tt>);  //<tt class=literal> From KeyListener</tt>
            public void <tt class=literal>keyTyped</tt>(KeyEvent <tt class=literal>e</tt>);  //<tt class=literal> From KeyListener</tt>
            public void <tt class=literal>mouseClicked</tt>(MouseEvent <tt class=literal>e</tt>);  //<tt class=literal> From MouseListener</tt>
            public void <tt class=literal>mouseDragged</tt>(MouseEvent <tt class=literal>e</tt>);  //<tt class=literal> From MouseMotionListener</tt>
            public void <tt class=literal>mouseEntered</tt>(MouseEvent <tt class=literal>e</tt>);  //<tt class=literal> From MouseListener</tt>
            public void <tt class=literal>mouseExited</tt>(MouseEvent <tt class=literal>e</tt>);  //<tt class=literal> From MouseListener</tt>
            public void <tt class=literal>mouseMoved</tt>(MouseEvent <tt class=literal>e</tt>);  //<tt class=literal> From MouseMotionListener</tt>
            public void <tt class=literal>mousePressed</tt>(MouseEvent <tt class=literal>e</tt>);  //<tt class=literal> From MouseListener</tt>
            public void <tt class=literal>mouseReleased</tt>(MouseEvent <tt class=literal>e</tt>);  //<tt class=literal> From MouseListener</tt>
            public void <tt class=literal>textValueChanged</tt>(TextEvent <tt class=literal>e</tt>);  //<tt class=literal> From TextListener</tt>
            public void <tt class=literal>windowActivated</tt>(WindowEvent <tt class=literal>e</tt>);  //<tt class=literal> From WindowListener</tt>
            public void <tt class=literal>windowClosed</tt>(WindowEvent <tt class=literal>e</tt>);  //<tt class=literal> From WindowListener</tt>
            public void <tt class=literal>windowClosing</tt>(WindowEvent <tt class=literal>e</tt>);  //<tt class=literal> From WindowListener</tt>
            public void <tt class=literal>windowDeactivated</tt>(WindowEvent <tt class=literal>e</tt>);  //<tt class=literal> From WindowListener</tt>
            public void <tt class=literal>windowDeiconified</tt>(WindowEvent <tt class=literal>e</tt>);  //<tt class=literal> From WindowListener</tt>
            public void <tt class=literal>windowIconified</tt>(WindowEvent <tt class=literal>e</tt>);  //<tt class=literal> From WindowListener</tt>
            public void <tt class=literal>windowOpened</tt>(WindowEvent <tt class=literal>e</tt>);  //<tt class=literal> From WindowListener</tt>
    // <tt class=literal>Protected Instance Methods</tt>
            protected EventListener <tt class=literal>remove</tt>(EventListener <tt class=literal>oldl</tt>);
            protected void <tt class=literal>saveInternal</tt>(ObjectOutputStream <tt class=literal>s</tt>, String <tt class=literal>k</tt>) throws IOException;
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-18-SECT-3.2">Hierarchy:</A></h3>

<p class=para>
<tt class=literal>Object->AWTEventMulticaster(ComponentListener(EventListener), ContainerListener(EventListener), FocusListener(EventListener), KeyListener(EventListener), MouseListener(EventListener), MouseMotionListener(EventListener), WindowListener(EventListener), ActionListener(EventListener), ItemListener(EventListener), AdjustmentListener(EventListener), TextListener(EventListener))</tt>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch18_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch18_04.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>java.awt.AWTEvent (JDK 1.1)</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>java.awt.AWTException (JDK 1.0)</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
