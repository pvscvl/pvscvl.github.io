<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 26] The java.lang.reflect Package</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 16:28:49 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch25_69.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 26</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch26_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="JNUT2-CH-26">26. The java.lang.reflect Package</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
java.lang.reflect.Array (JDK 1.1)<br>
<a href="ch26_02.htm">java.lang.reflect.Constructor (JDK 1.1)</A><br>
<a href="ch26_03.htm">java.lang.reflect.Field (JDK 1.1)</A><br>
<a href="ch26_04.htm">java.lang.reflect.InvocationTargetException (JDK 1.1)</A><br>
<a href="ch26_05.htm">java.lang.reflect.Member (JDK 1.1)</A><br>
<a href="ch26_06.htm">java.lang.reflect.Method (JDK 1.1)</A><br>
<a href="ch26_07.htm">java.lang.reflect.Modifier (JDK 1.1)</A><br>

<p>
</DIV>

<p class=para>
The <tt class=literal>java.lang.reflect</tt> package contains the classes
and interfaces that, along with <tt class=literal>java.lang.Class</tt>,
comprise the Java Reflection API.  This package is new in
Java 1.1.  <a name="CH26.JAVA.LANG.RE2"></A><a name="CH26.REFLECTION-1"></A>
<a href="#JNUT2-CH-26-FIG-1">Figure 26.1</A>
shows the class hierarchy.

<p class=para>
The <tt class=literal>Constructor</tt>, <tt class=literal>Field</tt>, and <tt class=literal>Method</tt>
classes represent constructors, fields, and methods of a
class.  Because these types all represent members of a
class, they each implement the <tt class=literal>Member</tt> interface,
which defines a simple set of methods that can be invoked
for any class member.  These classes allow information about
the class members to be obtained, and allow methods and
constructors to be invoked and fields to be queried and set.

<p class=para>
Class member modifiers are represented as integers
that specify a number of bit flags.  The <tt class=literal>Modifier</tt> class
defines static methods that are useful in interpreting the meanings of
these flags.  The <tt class=literal>Array</tt> class defines static methods
for creating arrays and reading and writing array elements.

<p class=para>
See <a href="ch12_01.htm">Chapter 12, <i>Reflection</i></A> for examples of using
these classes.

<div class=figure>
<h4 class=figure><a class="TITLE" name="JNUT2-CH-26-FIG-1">Figure 26.1: The java.lang.reflect package</A></h4>


<p>
<img align=middle src="figs/jn2_2601.gif" alt="[Graphic: Figure 26-1]" width=464 height=242 border=0>

</DIV>

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-26-SECT-1">26.1 java.lang.reflect.Array (JDK 1.1)</A></h2>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-26-SECT-1.1"></A></h3>
</DIV>

<p class=para>
This class contains methods that allow you to set and query
the values of array elements, to determine the length of an
array, and to create new instances of arrays.  Note that the
<tt class=literal>Array</tt> class is used for manipulating array values,
not array types; Java data types, including array types, are
represented by <tt class=literal>java.lang.Class</tt>.  Since the
<tt class=literal>Array</tt> class represents a Java value, unlike the
<tt class=literal>Field</tt>, <tt class=literal>Method</tt>, and <tt class=literal>Constructor</tt>
classes which represent class members, the <tt class=literal>Array</tt> class
is significantly different (despite some surface
similarities) from those other classes in this package.
Most notably, all the methods of <tt class=literal>Array</tt> are static
and apply to all array values, rather than applying only to
a specific field, method, or constructor.

<p class=para>
The <tt class=literal>get()</tt> method returns the value of the specified
element of the specified array as an <tt class=literal>Object</tt>.  If the
array elements are of a primitive type, the value is
converted to a wrapper object before being returned.  You
can also use <tt class=literal>getInteger()</tt> and related methods to
query array elements and return them as specific primitive
types.  The <tt class=literal>set()</tt> method and its primitive type
variants perform the opposite operation.  Also, the
<tt class=literal>getLength()</tt> method returns the length of the array.

<p class=para>
The <tt class=literal>newInstance()</tt> methods create new arrays.  One
version of this method is passed the number of elements in
the array and the type of those elements.  The other version
of this method creates multidimensional arrays.  Besides just
specifying the component type of the array, it is passed an
array of numbers.  The length of this array specifies the
number of dimensions for the array to be created, and the
values of each array element specify the size of each
dimension of the created array.

<div class=screen>
<p>
<pre>
public final class <tt class=literal>Array</tt> extends Object {
    // <tt class=literal>No Constructor</tt>
    // <tt class=literal>Class Methods</tt>
            public static native Object <tt class=literal>get</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>) throws IllegalArgumentException, ArrayIndexOutOfBoundsException;
            public static native boolean <tt class=literal>getBoolean</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>) throws IllegalArgumentException, ArrayIndexOutOfBoundsException;
            public static native byte <tt class=literal>getByte</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>) throws IllegalArgumentException, ArrayIndexOutOfBoundsException;
            public static native char <tt class=literal>getChar</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>) throws IllegalArgumentException, ArrayIndexOutOfBoundsException;
            public static native double <tt class=literal>getDouble</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>) throws IllegalArgumentException, ArrayIndexOutOfBoundsException;
            public static native float <tt class=literal>getFloat</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>) throws IllegalArgumentException, ArrayIndexOutOfBoundsException;
            public static native int <tt class=literal>getInt</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>) throws IllegalArgumentException, ArrayIndexOutOfBoundsException;
            public static native int <tt class=literal>getLength</tt>(Object <tt class=literal>array</tt>) throws IllegalArgumentException;
            public static native long <tt class=literal>getLong</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>) throws IllegalArgumentException, ArrayIndexOutOfBoundsException;
            public static native short <tt class=literal>getShort</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>) throws IllegalArgumentException, ArrayIndexOutOfBoundsException;
            public static Object <tt class=literal>newInstance</tt>(Class <tt class=literal>componentType</tt>, int <tt class=literal>length</tt>) throws NegativeArraySizeException;
            public static Object <tt class=literal>newInstance</tt>(Class <tt class=literal>componentType</tt>, int[] <tt class=literal>dimensions</tt>) throws IllegalArgumentException, NegativeArraySizeException;
            public static native void <tt class=literal>set</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>, Object <tt class=literal>value</tt>) throws IllegalArgumentException, ArrayIndexOutOfBoundsException;
            public static native void <tt class=literal>setBoolean</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>, boolean <tt class=literal>z</tt>) throws IllegalArgumentException, ArrayIndexOutOfBoundsException;
            public static native void <tt class=literal>setByte</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>, byte <tt class=literal>b</tt>) Xsthrows IllegalArgumentException, ArrayIndexOutOfBoundsException;
            public static native void <tt class=literal>setChar</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>, char <tt class=literal>c</tt>) throws IllegalArgumentException, ArrayIndexOutOfBoundsException;
            public static native void <tt class=literal>setDouble</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>, double <tt class=literal>d</tt>) throws IllegalArgumentException, ArrayIndexOutOfBoundsException;
            public static native void <tt class=literal>setFloat</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>, float <tt class=literal>f</tt>) throws IllegalArgumentException, ArrayIndexOutOfBoundsException;
            public static native void <tt class=literal>setInt</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>, int <tt class=literal>i</tt>) throws IllegalArgumentException, ArrayIndexOutOfBoundsException;
            public static native void <tt class=literal>setLong</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>, long <tt class=literal>l</tt>) throws IllegalArgumentException, ArrayIndexOutOfBoundsException;
            public static native void <tt class=literal>setShort</tt>(Object <tt class=literal>array</tt>, int <tt class=literal>index</tt>, short <tt class=literal>s</tt>) throws IllegalArgumentException, ArrayIndexOutOfBoundsException;
}
</PRE>
</DIV>

<p class=para>
</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch25_69.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch26_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>java.lang.Void (JDK 1.1)</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>java.lang.reflect.Constructor (JDK 1.1)</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
