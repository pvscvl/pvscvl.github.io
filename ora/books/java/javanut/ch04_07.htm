<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 4] 4.7 Object Serialization</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 15:51:12 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 4<br>What's New in Java 1.1</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch04_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-4-SECT-7">4.7 Object Serialization</A></h2>

<p class=para>
Object serialization is one of the major new features of Java 1.1.
It refers to the ability to write the complete state of an
object (including any objects it refers to) to an output
stream, and then recreate that object at some later time by
reading its serialized state from an input stream.  You can
serialize an object simply by passing it to the
<tt class=literal>writeObject()</tt> method of an
<tt class=literal>ObjectOutputStream</tt>.  Similarly, you can create an object
from a serialized object stream by calling the
<tt class=literal>readObject()</tt> method of an <tt class=literal>ObjectInputStream</tt>.
Both of these new object stream types are part of the
<tt class=literal>java.io</tt> package.

<p class=para>
Typically, object serialization is as simple as calling
<tt class=literal>writeObject()</tt> and <tt class=literal>readObject()</tt>.  There are a
few additional twists, however, that are worth mentioning
here.  First, only objects that subclass the
<tt class=literal>Serializable</tt> (or <tt class=literal>Externalizable</tt>)
interface can be serialized.  The <tt class=literal>Serializable</tt>
interface does not define
any methods, but merely acts as a marker that indicates whether
serialization is allowed on a given object.  Second, fields
of a class declared <tt class=literal>transient</tt> are not serialized as
part of an object's state.  The <tt class=literal>transient</tt> modifier
was legal in Java 1.0, but had no defined behavior.  Third, some
objects may need to implement custom serialization or
de-serialization behavior.  They can do this by implementing
special <tt class=literal>readObject()</tt> and <tt class=literal>writeObject()</tt>
methods. <a href="ch09_01.htm">Chapter 9, <i>Object Serialization</i></A> describes all
of these aspects of object serialization in more detail.

<p class=para>
Despite the fact that only a few classes and interfaces are
part of the Object Serialization API, serialization is a very important
technology and is used in several places in Java 1.1.  It
is used as the basis for transferring objects via
cut-and-paste.  It is used to transfer objects between
a client and a server for remote method invocation.
It is used by the JavaBeans API--beans are
often provided as pre-initialized, serialized objects, rather than
merely as class files.  Java 1.1 also adds the capability
for applets to be loaded into an applet viewer or browser as
serialized objects.  One common use we are likely to see for
object serialization is as a way to save user preferences
and other application states--a serialized object is an
instant file format that works for any application.  Another
use that should be popular with GUI builder tools is
saving the complete <tt class=literal>Component</tt> hierarchy of an
application's GUI as a serialized object, and then later loading
in that object in order to automatically recreate the GUI.

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch04_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Internationalization</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Reflection</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
