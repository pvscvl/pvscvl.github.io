<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 3] Classes and Objects in Java</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 15:49:34 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_14.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 3</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch03_02.htm#JNUT2-CH-3-SECT-2"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="JNUT2-CH-3">3. Classes and Objects in Java</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
Introduction to Classes and Objects<br>
<a href="ch03_02.htm#JNUT2-CH-3-SECT-2">Object Creation</A><br>
<a href="ch03_03.htm">Class Variables</A><br>
<a href="ch03_04.htm">Class Methods</A><br>
<a href="ch03_05.htm">Object Destruction</A><br>
<a href="ch03_06.htm">Subclasses and Inheritance</A><br>
<a href="ch03_07.htm">Overriding Methods</A><br>
<a href="ch03_08.htm">Data Hiding and Encapsulation</A><br>
<a href="ch03_09.htm">Abstract Classes and Interfaces</A><br>
<a href="ch03_10.htm">C++ Features Not Found in Java</A><br>
<a href="ch03_11.htm">Summary</A><br>

<p>
</DIV>

<p class=para>
Java is an <i class=emphasis>object-oriented</I> language.  "Object-oriented" is a
term that has become so commonly used as to have practically
no concrete meaning.  This chapter explains just what "object-oriented"
means for Java.  It covers:

<p>
<ul class=itemizedlist>
<li class=listitem>Classes and objects in Java

<p>
<li class=listitem>Creating objects

<p>
<li class=listitem>Garbage collection to free up unused objects

<p>
<li class=listitem>The difference between class (or static) variables and
instance variables, and the difference between class (or
static) methods and instance methods

<p>
<li class=listitem>Extending a class to create a subclass

<p>
<li class=listitem>Overriding class methods and dynamic method lookup

<p>
<li class=listitem>Abstract classes

<p>
<li class=listitem>Interface types and their implementation by classes

<p>
</UL>
<p class=para>
If you are a C++ programmer, or have other object-oriented
programming experience, many of the concepts in this
list should be familiar to you.  If you do not have
object-oriented experience, don't fear: This chapter assumes
no knowledge of object-oriented concepts.

<p class=para>
We saw in the last chapter that close
analogies can be drawn between Java and C.  Unfortunately for C++
programmers, the same is not true for Java and C++.  Java
uses object-oriented programming concepts that are familiar
to C++ programmers, and it even borrows from C++ syntax in a
number of places, but the analogies between Java and C++ are
not nearly as strong as those between Java and C.
[1]
C++ programmers may have an easier time with this chapter
than C programmers will, but they should still read it
carefully and try not to form preconceptions about Java
based on their knowledge of C++.

<blockquote class=footnote>
<p class=para>[1] 
As we'll see, Java supports garbage collection and dynamic
method lookup. This actually makes it a closer relative,
beneath its layer of C-like syntax, to languages like
Smalltalk than to C++.
</blockquote>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-3-SECT-1">3.1 Introduction to Classes and Objects</A></h2>

<p class=para>
<a name="CH3.CLASSES1"></A><a name="CH3.OBJECTS1"></A>A <i class=emphasis>class</I> is a collection of data and methods that operate 
on that data.
[2]
The data and methods, taken
together, usually serve to define the contents and
capabilities of some kind of <i class=emphasis>object</I>.

<blockquote class=footnote>
<p class=para>[2] 
A <i class=emphasis>method</I> is the object-oriented term for a procedure
or a function.  You'll see it used a lot in this book.
Treat it as a synonym for "procedure."
</blockquote>
<p class=para>
For example, a circle can be described by the x, y
position of its center and by its radius.  There are a
number of things we can do with circles: compute their
circumference, compute their area, check whether points are
inside them, and so on.  Each circle is different (i.e., has
a different center or radius), but as a <i class=emphasis>class</I>, circles
have certain intrinsic properties that we can capture in a
definition.
<a href="#JNUT2-CH-3-EX-1">Example 3.1</A>
shows how we could partially define the class of circles
in Java.  Notice that the class definition contains
data and methods (procedures) within the same pair of
curly brackets.
[3]

<blockquote class=footnote>
<p class=para>[3] 
C++ programmers should note that methods go inside the class
definition in Java, not outside with the <tt class=literal>::</tt>
operator as they usually do in C++.
</blockquote>
<div class=example>
<h4 class=example><a class="TITLE" name="JNUT2-CH-3-EX-1">Example 3.1: The Class of Circles, Partially Captured in Java Code</A></h4>

<div class=screen>
<p>
<pre>
public class Circle {
    public double x, y;   // The coordinates of the center
    public double r;      // The radius
    // Methods that return the circumference and area of the circle
    public double circumference() { return 2 * 3.14159 * r; }
    public double area() { return 3.14159 * r*r; }
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-3-SECT-1.1">Objects Are Instances of a Class</A></h3>

<p class=para>
<a name="CH3.INSTANCES1"></A><a name="CH3.CLASS.INSTAN1"></A>Now that we've defined (at least partially) the class
<tt class=literal>Circle</tt>, we want to do something with it.
We can't do anything with the class of circles itself--we
need a particular circle to work with.  We need an
<i class=emphasis>instance</I> of the class, a single circle object.

<p class=para>
By defining the <tt class=literal>Circle</tt> class in Java, we have
created a new data type.  We can declare variables of that
type:

<div class=screen>
<p>
<pre>
Circle c;
</PRE>
</DIV>

<p class=para>
But this variable <tt class=literal>c</tt> is simply a name that <i class=emphasis>refers
to</I> a circle object; it is not an object itself.
In Java, all objects must be created dynamically.  This is
almost always done with the <tt class=literal>new</tt> keyword:

<div class=screen>
<p>
<pre>
Circle c;
c = new Circle();
</PRE>
</DIV>

<p class=para>
Now we have created an instance of our <tt class=literal>Circle</tt>
class--a circle object--and have assigned it to the variable
<tt class=literal>c</tt>, which is of type <tt class=literal>Circle</tt>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-3-SECT-1.2">Accessing Object Data</A></h3>

<p class=para>
Now that we've created an object, we can use its data
fields.  The syntax should be familiar to C programmers:

<div class=screen>
<p>
<pre>
Circle c = new Circle();
c.x = 2.0;  // Initialize our circle to have center (2, 2) and radius 1.0.
c.y = 2.0;
c.r = 1.0;
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-3-SECT-1.3">Using Object Methods</A></h3>

<p class=para>
<a name="CH3.METHODS1"></A>This is where things get interesting!  To access the
methods of an object, we use the same syntax as
accessing the data of an object:

<div class=screen>
<p>
<pre>
Circle c = new Circle();
double a;
c.r = 2.5;
a = c.area();
</PRE>
</DIV>

<p class=para>
Take a look at that last line.  We did not say:

<div class=screen>
<p>
<pre>
a = area(c);
</PRE>
</DIV>

<p class=para>
We said:

<div class=screen>
<p>
<pre>
a = c.area();
</PRE>
</DIV>

<p class=para>
This is why it is called "object-oriented" programming; the
object is the focus here, not the function call.  This is
probably the single most important feature of the
object-oriented paradigm.

<p class=para>
Note that we don't have to pass an argument to
<tt class=literal>c.area()</tt>.  The object we are operating on,
<tt class=literal>c</tt>, is implicit in the syntax.  Take a look at
<a href="#JNUT2-CH-3-EX-1">Example 3.1</A>
again: you'll notice the same thing in the definition of the
<tt class=literal>area()</tt> method--it doesn't take an argument.  It is
implicit in the language that a method operates on an
instance of the class within which it is defined.  Thus our
<tt class=literal>area()</tt> method can use the <tt class=literal>r</tt> field of the
class freely--it is understood that it is referring to the
radius of whatever <tt class=literal>Circle</tt> instance invokes the
method.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-3-SECT-1.4">How It Works</A></h3>

<p class=para>
What's going on here?  How can a method that takes no
arguments know what data to operate on?  In fact, the
<tt class=literal>area()</tt> method does have an argument!  <tt class=literal>area()</tt>
is implemented with an implicit argument that is not shown
in the method declaration.  The implicit argument is named
<tt class=literal>this</tt>, and refers to "this object"--the
<tt class=literal>Circle</tt> object through which the method is invoked.
<tt class=literal>this</tt> is often called the "this pointer."
[4]

<blockquote class=footnote>
<p class=para>[4] 
"this pointer" is C++ terminology.  Since Java does not
support pointers, I prefer the term "this reference."
</blockquote>
<p class=para>
The implicit <tt class=literal>this</tt> argument is not shown in method
signatures because it is usually not needed--whenever a Java
method accesses the fields in its class, it is implied that
it is accessing fields in the object referred to by the
<tt class=literal>this</tt> argument.  The same is true, as we'll see, when
a method in a class invokes other methods in the class--it
is implicit that the methods are being invoked for the
<tt class=literal>this</tt> object.

<p class=para>
We can use the <tt class=literal>this</tt> keyword explicitly when we want
to make explicit that a method is accessing its own
variables and/or methods.  For example, we could rewrite the
<tt class=literal>area()</tt> method like this:

<div class=screen>
<p>
<pre>
public double area() { return 3.14159 * this.r * this.r; }
</PRE>
</DIV>

<p class=para>
In a method this simple, it is not necessary to be explicit.
In more complicated cases, however, you may find that it
increases the clarity of your code to use an explicit
<tt class=literal>this</tt> where it is not strictly required.

<p class=para>
An instance where the <tt class=literal>this</tt> keyword <i class=emphasis>is</I> required
is when a method argument or a local variable in a method
has the same name as one of the fields of the class.  In
this case, you must use <tt class=literal>this</tt> to access the field.
If you used the field name alone, you would end up accessing
the argument or local variable with the same name.  We'll
see examples of this in the next section.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_14.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch03_02.htm#JNUT2-CH-3-SECT-2"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Miscellaneous Differences</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Object Creation</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
