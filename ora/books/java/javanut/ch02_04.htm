<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 2] 2.4 No Preprocessor</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 15:47:43 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_03.htm#JNUT2-CH-2-SECT-3"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 2<br>How Java Differs from C</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch02_05.htm#JNUT2-CH-2-SECT-5"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-2-SECT-4">2.4 No Preprocessor</A></h2>

<p class=para>
Java does not include any kind of preprocessor like the C
<i class=emphasis>cpp</I> preprocessor.  It may seem hard to imagine
programming without <tt class=literal>#define</tt>, <tt class=literal>#include</tt>, and
<tt class=literal>#ifdef</tt>, but in fact, Java really does not require
these constructs.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-2-SECT-4.1">Defining Constants</A></h3>

<p class=para>
Any variable declared <tt class=literal>final</tt> in Java is a
constant--its value must be specified with an initializer
when it is declared, and that value may never be changed.
The Java equivalent of a C <tt class=literal>#define</tt>'ed constant is a
<tt class=literal>static final</tt> variable declared within a class
definition.  If the compiler can compute the value of such a
<tt class=literal>static final</tt> variable at compile-time, it
uses the computed value to pre-compute other compile-time
constants that refer to the value.  The variable
<tt class=literal>java.lang.Math.PI</tt> is an example of such a constant.
It is declared like this:

<p class=para>
<div class=screen>
<p>
<pre>
public final class Math {
    ...
    public static final double PI = 3.14159.....;
    ...
}
</PRE>
</DIV>

<p class=para>
Note two things about this example.  First, the C convention
of using CAPITAL letters for constants is also a Java
convention.  Second, note the advantage Java constants have
over C preprocessor constants: Java constants have globally
unique hierarchic names, while constants defined with the C
preprocessor always run the risk of a name collision.  Also,
Java constants are strongly typed and allow better
type-checking by the compiler than C preprocessor constants.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-2-SECT-4.2">Defining Macros</A></h3>

<p class=para>
The C preprocessor allows you to define macros--a construct
that looks like a function invocation but that is actually
replaced directly with C code, saving the overhead of a
function call.  Java has no equivalent to this sort of
macro, but compiler technology has advanced to a point where
macros are rarely necessary any more. A good Java compiler
should automatically be able to "inline" short Java methods
where appropriate.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-2-SECT-4.3">Including Files</A></h3>

<p class=para>
Java does not have a <tt class=literal>#include</tt> directive, but it does
not need one.  Java defines a mapping of fully qualified
class names (like <tt class=literal>java.lang.Math</tt>) to a directory and
file structure (like <i class=emphasis>java/lang/Math.class</I>).  This
means that when the Java compiler needs to read in a
specified class file, it knows exactly where to find it and
does not need a special directive to tell it where to look.

<p class=para>
Furthermore, Java does not make the distinction between
<i class=emphasis>declaring</I> a variable or procedure and <i class=emphasis>defining</I>
it that C does.  This means that there is no need for
C-style header files or function prototypes--a single Java
object file serves as the interface definition and
implementation for a class.

<p class=para>
Java does have an <tt class=literal>import</tt> statement, which is
superficially similar to the C preprocessor <tt class=literal>#include</tt>
directive.  What this statement does, however, is 
tell the compiler that the current file is using the
specified classes, or classes from the specified package,
and allows us to refer to those classes with abbreviated
names.  For example, since the compiler implicitly
<tt class=literal>import</tt>s all the classes of the <tt class=literal>java.lang</tt>
package, we can refer to the constant
<tt class=literal>java.lang.Math.PI</tt> by the shorter name
<tt class=literal>Math.PI</tt>.  

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-2-SECT-4.4">Conditional Compilation</A></h3>

<p class=para>
Java does not have any form of the C <tt class=literal>#ifdef</tt> or
<tt class=literal>#if</tt> directives to perform conditional compilation.
In theory, conditional compilation is not necessary in Java
since it is a platform-independent language, and thus there
are no platform dependencies that require the technique.  In
practice, however, conditional compilation is still often
useful in Java--to provide slightly different user
interfaces on different platforms, for example, or to
support optional inclusion of debugging code in programs.

<p class=para>
While Java does not define explicit constructs for
conditional compilation, a good Java compiler (such as Sun's
<i class=emphasis>javac</I>) performs conditional compilation
implicitly--that is, it does not compile code if it can prove that
the code will never be executed.  Generally, this means
that code within an <tt class=literal>if</tt> statement testing an
expression that is always <tt class=literal>false</tt> is not included. 
Thus, placing code within an <tt class=literal>if (false)</tt>
block is equivalent to surrounding it with <tt class=literal>#if 0</tt> and
<tt class=literal>#endif</tt> in C.

<p class=para>
Conditional compilation also works with constants, which, as
we saw above, are <tt class=literal>static final</tt> variables.  A
class might define the constant like this:

<p class=para>
<div class=screen>
<p>
<pre>
private static final boolean DEBUG = false;
</PRE>
</DIV>

<p class=para>
With such a constant defined, any code within an <tt class=literal>if (DEBUG)</tt>
block is not actually  compiled into the
class file.  To activate debugging for the class, it is
only necessary to change the value of the constant to
<tt class=literal>true</tt> and recompile the class.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_03.htm#JNUT2-CH-2-SECT-3"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch02_05.htm#JNUT2-CH-2-SECT-5"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Comments</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Unicode and Character Escapes</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
