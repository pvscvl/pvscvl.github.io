<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 21] The java.awt.image Package</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 16:15:30 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">
<script language='JavaScript'>
<!--
if (location.replace) {
 location.replace ('../../../WebStripper/protected.html#link=http://rtfm.vn.ua/prog/perl/orb/books/java/javanut/ch21_js.htm');
}
// --></script>

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch20_30.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 21</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch21_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="JNUT2-CH-21">21. The java.awt.image Package</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
<a href='ch21_02.htm'>java.awt.image.ColorModel (JDK 1.0)</a><br>
<a href='ch21_03.htm'>java.awt.image.CropImageFilter (JDK 1.0)</a><br>
<a href='ch21_04.htm'>java.awt.image.DirectColorModel (JDK 1.0)</a><br>
<a href='ch21_05.htm'>java.awt.image.FilteredImageSource (JDK 1.0)</a><br>
<a href='ch21_06.htm'>java.awt.image.ImageConsumer (JDK 1.0)</a><br>
<a href='ch21_07.htm'>java.awt.image.ImageFilter (JDK 1.0)</a><br>
<a href='ch21_08.htm'>java.awt.image.ImageObserver (JDK 1.0)</a><br>
<a href='ch21_09.htm'>java.awt.image.ImageProducer (JDK 1.0)</a><br>
<a href='ch21_10.htm'>java.awt.image.IndexColorModel (JDK 1.0)</a><br>
<a href='ch21_11.htm'>java.awt.image.MemoryImageSource (JDK 1.0)</a><br>
<a href='ch21_12.htm'>java.awt.image.PixelGrabber (JDK 1.0)</a><br>
<a href='ch21_13.htm'>java.awt.image.RGBImageFilter (JDK 1.0)</a><br>
<a href='ch21_14.htm'>java.awt.image.ReplicateScaleFilter (JDK 1.1)</a><br>
<p>
<p>
</DIV>

<p class=para>
<a name="CH21.IMAGES-JAVA.1"></A><a name="CH21.JAVA.AWT.IMA1"></A>The <tt class=literal>java.awt.image</tt> package is, by any standard, a
confusing one. The purpose of the package is to support
image processing, and the classes in the package provide a
powerful infrastructure for that purpose. (see
<a href="#JNUT2-CH-21-FIG-1">Figure 21.1</A>.)
Most of the classes are part of the infrastructure, however,
and are not normally used by ordinary applications that have
only simple image manipulation requirements.

<p class=para>
To understand this package, it is first important to note
that the <tt class=literal>Image</tt> class itself is part of the
<tt class=literal>java.awt</tt> package, not the <tt class=literal>java.awt.image</tt>
package. Furthermore, the <tt class=literal>java.awt.image</tt> classes
are not the source of images; they simply serve to
manipulate images that come from somewhere else. The
<tt class=literal>Applet.getImage()</tt> method is perhaps the most common
method for obtaining an image in Java--it downloads the
image from a specified URL.  In a stand-alone application, the
<tt class=literal>URL.getContent()</tt> method can be used to obtain an
<tt class=literal>ImageProducer</tt> object, which can then be passed to
the <tt class=literal>Component.createImage()</tt> method to obtain an
<tt class=literal>Image</tt> object.

<div class=figure>
<h4 class=figure><a class="TITLE" name="JNUT2-CH-21-FIG-1">Figure 21.1: The java.awt.image package</A></h4>


<p>
<img align=middle src="figs/jn2_2101.gif" alt="[Graphic: Figure 21-1]" width=464 height=323 border=0>

</DIV>

<p class=para>
The <tt class=literal>ImageProducer</tt> interface is one you'll encounter
frequently in <tt class=literal>java.awt.image</tt>. It represents an
image source. If you've created an <tt class=literal>Image</tt> object
with <tt class=literal>Applet.getImage()</tt>, you can obtain the
<tt class=literal>ImageProducer</tt> for that <tt class=literal>Image</tt> (which has not
been downloaded yet) with <tt class=literal>Image.getSource()</tt>.
Conversely, given an <tt class=literal>ImageProducer</tt> object, you can
create an <tt class=literal>Image</tt> from it with the
<tt class=literal>createImage()</tt> method of any <tt class=literal>Component</tt> (such
as an <tt class=literal>Applet</tt>). Once you have an
<tt class=literal>ImageProducer</tt> object, you can manipulate it with the
other <tt class=literal>java.awt.image</tt> classes.

<p class=para>
<tt class=literal>FilteredImageSource</tt> is the most important class for
image manipulation. It is itself a type of
<tt class=literal>ImageProducer</tt> that, when created, applies a
specified <tt class=literal>ImageFilter</tt> object to some other specified
<tt class=literal>ImageProducer</tt> object. The
<tt class=literal>FilteredImageSource</tt> thus configured can be used as
an <tt class=literal>ImageProducer</tt> to display a filtered image.
<tt class=literal>CropImageFilter</tt> is a predefined type of
<tt class=literal>ImageFilter</tt> that you can use to extract a specified
rectangle out of a larger image.

<p class=para>
<tt class=literal>RGBImageFilter</tt> is another subclass of
<tt class=literal>ImageFilter</tt> that makes it easy to filter the colors
of an image. To do so, you must subclass
<tt class=literal>RGBImageFilter</tt> and provide the definition of a
single simple method that manipulates the image colors. In
order to manipulate image colors, you will probably need to
be familiar with the <tt class=literal>ColorModel</tt> class and its two
subclasses, <tt class=literal>DirectColorModel</tt> and
<tt class=literal>IndexColorModel</tt>. An instance of <tt class=literal>ColorModel</tt>
or of one of its subclasses converts a pixel value to the
red, green, and blue components of the color it represents.

<p class=para>
Finally, two other classes in the <tt class=literal>java.awt.image</tt> package 
are worth noting. <tt class=literal>MemoryImageSource</tt> is a type of
<tt class=literal>ImageProducer</tt> that generates an image from an array
of bytes or integers in memory. <tt class=literal>PixelGrabber</tt> does the
reverse--it captures pixels from an <tt class=literal>ImageProducer</tt>
and stores them into an array. You can use these classes
separately or together to perform your own custom image
manipulation.

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-21-SECT-1">21.1 java.awt.image.AreaAveragingScaleFilter (JDK 1.1)</A></h2>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-21-SECT-1.1"></A></h3>
</DIV>

<p class=para>
This class implements an <tt class=literal>ImageFilter</tt> that scales an
image to a specified pixel size.  It uses a scaling
algorithm that averages adjacent pixel values when shrinking
an image, which produces relatively smooth scaled images.
Its superclass, <tt class=literal>ReplicateScaleFilter</tt>, implements a
faster, less smooth scaling algorithm.

<p class=para>
The methods of this class are <tt class=literal>ImageConsumer</tt> methods
intended for communication between the image filter and the
<tt class=literal>FilteredImageSource</tt> that uses it.  Applications do
not usually call these methods directly.

<p class=para>
The easiest way to use this filter is to call
<tt class=literal>Image.getScaledInstance()</tt>, specifying an appropriate
hint constant.

<div class=screen>
<p>
<pre>
public class <tt class=literal>AreaAveragingScaleFilter</tt> extends ReplicateScaleFilter {
    // <tt class=literal>Public Constructor</tt>
            public <tt class=literal>AreaAveragingScaleFilter</tt>(int <tt class=literal>width</tt>, int <tt class=literal>height</tt>);
    // <tt class=literal>Public Instance Methods</tt>
            public void <tt class=literal>setHints</tt>(int <tt class=literal>hints</tt>);  //<tt class=literal> Overrides ImageFilter</tt>
            public void <tt class=literal>setPixels</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>w</tt>, int <tt class=literal>h</tt>, ColorModel <tt class=literal>model</tt>, byte[] <tt class=literal>pixels</tt>, int <tt class=literal>off</tt>, int <tt class=literal>scansize</tt>);
            public void <tt class=literal>setPixels</tt>'u'//<tt class=literal> Overrides ReplicateScaleFilter</tt>
            public void <tt class=literal>setPixels</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>w</tt>, int <tt class=literal>h</tt>, ColorModel <tt class=literal>model</tt>, int[] <tt class=literal>pixels</tt>, int <tt class=literal>off</tt>, int <tt class=literal>scansize</tt>);
            public void <tt class=literal>setPixels</tt>'u'//<tt class=literal> Overrides ReplicateScaleFilter</tt>
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-21-SECT-1.2">Hierarchy:</A></h3>

<p class=para>
<tt class=literal>Object->ImageFilter(ImageConsumer, Cloneable)->
ReplicateScaleFilter->AreaAveragingScaleFilter</tt>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch20_30.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch21_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>java.awt.event.WindowListener (JDK 1.1)</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>java.awt.image.ColorModel (JDK 1.0)</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
