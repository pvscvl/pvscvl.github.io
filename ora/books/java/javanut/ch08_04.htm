<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 8] 8.4 Data Transfer with Cut-and-Paste</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 15:56:03 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>New AWT Features</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch08_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-8-SECT-4">8.4 Data Transfer with Cut-and-Paste</A></h2>

<p class=para>
<a name="CH8.CUT.AND.PAST1"></A><a name="CH8.DATAFLAVOR.C1"></A>Java 1.1 adds cut-and-paste capabilities to Java
applications through the classes and interfaces of the
<tt class=literal>java.awt.datatransfer</tt> package.  The
<tt class=literal>DataFlavor</tt> class is perhaps the most central of
these classes.  It represents the type of data to be
transferred.  Every data flavor consists of a human-readable
name and a data type specification.  The data type can be
specified in one of two ways: with a Java <tt class=literal>Class</tt>
object or with a MIME type string.  These two different
ways of specifying the data type reflect two different ways
of transferring the data.  When the data type is specified
as a class object, objects of that type are transferred
using the object serialization mechanism (which is
discussed in <a href="ch09_01.htm">Chapter 9, <i>Object Serialization</i></A>).  In
<a href="ch08_05.htm">Example 8.1</A>,
for example, the <tt class=literal>DataFlavor</tt> is specified using the
<tt class=literal>Class</tt> object for <tt class=literal>java.util.Vector</tt>.  This means that
data is transferred as a serialized <tt class=literal>Vector</tt> object.  It
also means that the <tt class=literal>DataFlavor</tt> object has an implicit
MIME type of:

<p class=para>
<div class=screen>
<p>
<pre>
application/x-java-serialized-object; class=java.util.Vector
</PRE>
</DIV>

<p class=para>
The data type of a <tt class=literal>DataFlavor</tt> can also be specified
as a MIME type.  In this case, data is transferred through a
stream--the recipient of the data receives a <tt class=literal>Reader</tt>
stream from which it can read textual data.  In this case,
the recipient usually has to parse the data according
to the rules of the specified MIME type.

<p class=para>
The <tt class=literal>Transferable</tt> interface is another important
piece of the AWT data transfer picture.  This interface specifies
methods that must be implemented by any object that wants to
make data available for transfer.  One of its methods
returns an array of all the <tt class=literal>DataFlavor</tt> types it can
use to transfer its data.  Another method checks whether the
<tt class=literal>Transferable</tt> object supports a given method.
The most important method,
<tt class=literal>getTransferData()</tt>, actually returns the data in a
format appropriate for the requested <tt class=literal>DataFlavor</tt>.

<p class=para>
While <tt class=literal>DataFlavor</tt> and <tt class=literal>Transferable</tt> provide
the underlying infrastructure for data transfer, it is the
<tt class=literal>Clipboard</tt> class and <tt class=literal>ClipboardOwner</tt> interface
that support the cut-and-paste style of data transfer.  A
typical cut-and-paste scenario works like this:

<p>
<ul class=itemizedlist>
<li class=listitem>When the user issues a command to "copy" or "cut" something,
the initiating application first obtains the system
<tt class=literal>Clipboard</tt> object by calling the
<tt class=literal>getSystemClipboard()</tt> method of the <tt class=literal>Toolkit</tt>
object.  Next, it creates a <tt class=literal>Transferable</tt> object that
represents the data to be transferred.  Finally, it passes
this transferable object to the clipboard by calling the
<tt class=literal>setContents()</tt> method of the clipboard.  The
initiating application must also pass an object that
implements the <tt class=literal>ClipboardOwner</tt> interface to
<tt class=literal>setContents()</tt>.  By doing so, it becomes the
"clipboard owner" and must maintain its
<tt class=literal>Transferable</tt> object until it ceases to be the
clipboard owner.

<p>
<li class=listitem>When the user issues a command to "paste," the receiving
application first obtains the system <tt class=literal>Clipboard</tt>
object in the same way that the initiating application did.
Then, it calls the <tt class=literal>getContents()</tt> method of the system
clipboard to receive the <tt class=literal>Transferable</tt> object stored
there.  Now it can use the methods defined by the
<tt class=literal>Transferable</tt> interface to choose a <tt class=literal>DataFlavor</tt>
for the data transfer and actually transfer the data.

<p>
<li class=listitem>When the user copies or cuts some other piece of data, a new
data transfer is initiated, and the new initiating
application (it may be the same one) becomes the new
clipboard owner.  The previous owner is notified that it is
no longer the clipboard owner when the system invokes the
<tt class=literal>lostOwnership()</tt> method of the <tt class=literal>ClipboardOwner</tt>
object specified in the initiating call to
<tt class=literal>setContents()</tt>.

<p>
</UL>
<p class=para>
Note that untrusted applets are not allowed to work with the
system clipboard because there might be sensitive data on it
from other applications.  This means that applets cannot
participate in inter-application cut-and-paste.  Instead,
an applet must create a private clipboard object that it can
use for intra-applet data transfer.

<p class=para>
The <tt class=literal>cut()</tt>, <tt class=literal>copy()</tt>, and <tt class=literal>paste()</tt>
methods of <a href="ch08_05.htm">Example 8.1</A>
implement cut-and-paste functionality for scribbled lines.  They rely on
the nested <tt class=literal>SimpleSelection</tt> class that implements
the <tt class=literal>Transferable</tt> and <tt class=literal>ClipboardOwner</tt>
interfaces.  Note the definition of a <tt class=literal>DataFlavor</tt> object that
serves to specify the type of data transfer.
[1]

<blockquote class=footnote>
<p class=para>[1] 
Although the example application uses the system clipboard,
scribbles can only be pasted between windows of the same
application, not between separate instances of the
application running in separate Java interpreters.  In Java
1.1.1, inter-application cut-and-paste only works with
the pre-defined <tt class=literal>DataFlavor.stringFlavor</tt> and
<tt class=literal>DataFlavor.textFlavor</tt> data flavors.  Custom types
like the one used in the example do not correctly interface
with the system clipboard.
</blockquote>
</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch08_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch08_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Printing</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>New Feature Demo</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
