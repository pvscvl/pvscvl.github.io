<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 2] How Java Differs from C</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 15:47:33 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">
<script language='JavaScript'>
<!--
if (location.replace) {
 location.replace ('../../../WebStripper/protected.html#link=http://rtfm.vn.ua/prog/perl/orb/books/java/javanut/ch02_js.htm');
}
// --></script>

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 2</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch02_02.htm#JNUT2-CH-2-SECT-2.2"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="JNUT2-CH-2">2. How Java Differs from C</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
<a href='ch02_02.htm#JNUT2-CH-2-SECT-2.2'>The Name Space: Packages, Classes, and Members</a><br>
<a href='ch02_03.htm#JNUT2-CH-2-SECT-3'>Comments</a><br>
<a href='ch02_04.htm'>No Preprocessor</a><br>
<a href='ch02_05.htm#JNUT2-CH-2-SECT-5'>Unicode and Character Escapes</a><br>
<a href='ch02_06.htm'>Primitive Data Types</a><br>
<a href='ch02_07.htm#JNUT2-CH-2-SECT-7'>Reference Data Types</a><br>
<a href='ch02_08.htm#JNUT2-CH-2-SECT-8.2'>Objects</a><br>
<a href='ch02_09.htm#JNUT2-CH-2-SECT-9.1'>Arrays</a><br>
<a href='ch02_10.htm'>Strings</a><br>
<a href='ch02_11.htm#JNUT2-CH-2-SECT-11'>Operators</a><br>
<a href='ch02_12.htm#JNUT2-CH-2-SECT-12.3'>Statements</a><br>
<a href='ch02_13.htm'>Exceptions and Exception Handling</a><br>
<a href='ch02_14.htm'>Miscellaneous Differences</a><br>
<p>
<p>
</DIV>

<p class=para>
Java is a lot like C, which makes it relatively easy for C
programmers to learn. But there are a number of important
differences between C and Java, such as the lack of a
preprocessor, the use of 16-bit Unicode characters, and
the exception handling mechanism. This chapter explains those
differences, so that programmers who already know C can
start programming in Java right away!<a name="C-PROGRAMMING-LANGUAGE"></A><a name="JAVA"></A>

<p class=para>
This chapter also points out similarities and differences
between Java and C++. C++ programmers should beware,
though: While Java borrows a lot of terminology and even
syntax from C++, the analogies between Java and C++ are not
nearly as strong as those between Java and C. C++
programmers should be careful not to be lulled into a
false sense of familiarity with Java just because the
languages share a number of keywords.

<p class=para>
One of the main areas in which Java differs from C, of course,
is that Java is an object-oriented language and has
mechanisms to define classes and create objects that are
instances of those classes.  Java's object-oriented features
are a topic for a chapter of their own, and they'll be
explained in detail in <a href="ch03_01.htm">Chapter 3, <i>Classes and Objects in Java</i></A>.

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-2-SECT-1">2.1 Program Structure and Environment</A></h2>

<p class=para>
<a name="PROGRAMMING-IN-JAVA"></A>A program in Java consists of one or more class definitions,
each of which has been compiled into its own <i class=emphasis>.class</I>
file of Java Virtual Machine object code.  One of these
classes must define a method <tt class=literal>main()</tt>, which is where the 
program starts running.
[1]<a name="MAIN-MAIN"></A>

<blockquote class=footnote>
<p class=para>[1] 
<i class=emphasis>Method</I> is an object-oriented term for a procedure or
function.  You'll see it used throughout this book.
</blockquote>
<p class=para>
To invoke a Java program, you run the Java interpreter,
<i class=emphasis>java</I>, and specify the name of the class that contains
the <tt class=literal>main()</tt> method.  You should omit the <i class=emphasis>.class</I> 
extension when doing this.  
Note that a Java
applet is not an application--it is a Java class that is
loaded and run by an already running Java application such as
a Web browser or applet viewer.

<p class=para>
The <tt class=literal>main()</tt> method that the Java interpreter invokes
to start a Java program must have the following prototype:

<p class=para>
<div class=screen>
<p>
<pre>
public static void main(String args[])
</PRE>
</DIV>

<p class=para>
The Java interpreter runs until the <tt class=literal>main()</tt> method
returns, or until the interpreter reaches the end of <tt class=literal>main()</tt>.  If
no threads have been created by the program, the
interpreter exits.  Otherwise, the interpreter continues
running until the last thread terminates.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-2-SECT-1.1">Command-Line Arguments</A></h3>

<p class=para>
The single argument to <tt class=literal>main()</tt> is an array of
strings, conventionally named <tt class=literal>args</tt> or <tt class=literal>argv</tt>.  The length of
this array (which would be passed as the <tt class=literal>argc</tt>
argument in C) is available as <tt class=literal>argv.length</tt>, as is
the case with any Java array.  The elements of the array are
the arguments, if any, that appeared on the interpreter
command line after the class name.  Note that the first
element of the array is <i class=emphasis>not</I> the name of the class, as
a C programmer might expect it to be.
<a href="#JNUT2-CH-2-EX-1">Example 2.1</A>
shows how you could write a UNIX-style <i class=emphasis>echo</I> command (a
program that simply prints out its arguments) in Java.

<div class=example>
<h4 class=example><a class="TITLE" name="JNUT2-CH-2-EX-1">Example 2.1: An Echo Program in Java</A></h4>

<div class=screen>
<p>
<pre>
public class echo {
    public static void main(String argv[]) {
        for(int i=0; i &lt; argv.length; i++) 
            System.out.print(argv[i] + " ");
        System.out.print("\n");
        System.exit(0);
    }
}
</PRE>
</DIV>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-2-SECT-1.2">Program Exit Value</A></h3>

<p class=para>
Note that <tt class=literal>main()</tt> must be declared to return
<tt class=literal>void</tt>.  Thus you cannot return a value from your Java
program with a <tt class=literal>return</tt> statement in <tt class=literal>main()</tt>.
If you need to return a value, call <tt class=literal>System.exit()</tt>
with the desired integer value, as we've done in
<a href="#JNUT2-CH-2-EX-1">Example 2.1</A>.
Note that the handling and interpretation of this exit value
are, of course, operating-system dependent.
<tt class=literal>System.exit()</tt> causes the Java interpreter to exit
immediately, whether or not other threads are running.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-2-SECT-1.3">Environment</A></h3>

<p class=para>
The Java API does not allow a Java program to read operating
system environment variables because they are platform-dependent.
However, Java defines a similar, platform-independent mechanism, 
known as the system properties list, for
associating textual values with names.

<p class=para>
A Java program can look up the
value of a named property with the <tt class=literal>System.getProperty()</tt> method:

<p class=para>
<div class=screen>
<p>
<pre>
String homedir = System.getProperty("user.home");
String debug = System.getProperty("myapp.debug");
</PRE>
</DIV>

<p class=para>
The Java interpreter automatically defines a number of
standard system properties when it starts up.  You can
insert additional property definitions into the list by
specifying the <tt class=literal>-D</tt> option to the interpreter:

<p class=para>
<div class=screen>
<p>
<pre>
% java -Dmyapp.debug=true myapp
</PRE>
</DIV>

<p class=para>
See <a href="ch14_01.htm">Chapter 14, <i>System Properties</i></A> for more information on system
properties. 

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch01_02.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch02_02.htm#JNUT2-CH-2-SECT-2.2"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>A Simple Example</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>The Name Space: Packages, Classes, and Members</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
