<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 10] 10.7 Defining a Complex Property Editor</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 15:57:53 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 10<br>Java Beans</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch10_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-10-SECT-7">10.7 Defining a Complex Property Editor</A></h2>

<p class=para>
There is another <tt class=literal>YesNoDialog</tt> property value that
requires a property editor.
The <tt class=literal>message</tt> property of <tt class=literal>YesNoDialog</tt>
can specify a multi-line message to be displayed in the
dialog.  This property requires a property editor because
the <i class=emphasis>beanbox</I> program does not distinguish
between single-line and multi-line string types and
the <tt class=literal>TextField</tt> objects it uses for text input do
not allow the user to enter multiple lines of text.  For
this reason, we define the <tt class=literal>YesNoDialogMessageEditor</tt>
class and register it with the <tt class=literal>PropertyDescriptor</tt>
for the message property, as shown in
<a href="ch10_05.htm">Example 10.5</A>.

<p class=para>
<a href="#JNUT2-CH-10-EX-7">Example 10.7</A>
shows the definition of this property editor.  This is a
more complex editor that supports the creation of a custom
editor component and graphical display of the value.
Note that this example implements <tt class=literal>PropertyEditor</tt>
directly.
<tt class=literal>getCustomEditor()</tt> returns an editor component for
multi-line strings.
<a href="#JNUT2-CH-10-FIG-2">Figure 10.2</A>
shows this custom editor placed within a dialog box created
by the <i class=emphasis>beanbox</I> program.  Note that the <b>Done</b>
button in this figure is part of the <i class=emphasis>beanbox</I> dialog,
not part of the property editor itself.

<div class=figure>
<h4 class=figure><a class="TITLE" name="JNUT2-CH-10-FIG-2">Figure 10.2: A custom property editor dialog</A></h4>


<p>
<img align=middle src="figs/jn2_1002.gif" alt="[Graphic: Figure 10-2]" width=464 height=203 border=0>

</DIV>

<p class=para>
The <tt class=literal>paintValue()</tt> method is responsible for
displaying the value of the <tt class=literal>message</tt> property.
This multi-line value does not typically fit in the
small rectangle of screen space allowed for the property,
so <tt class=literal>paintValue()</tt> displays instructions for
popping up the custom editor, which allows the user to
inspect and edit the property value.  (This example relies
on the click-to-edit behavior of the <i class=emphasis>beanbox</I> program;
this <tt class=literal>paintValue()</tt> method may not make sense when the
bean is used in other beanbox tools.)

<div class=example>
<h4 class=example><a class="TITLE" name="JNUT2-CH-10-EX-7">Example 10.7: The YesNoDialogMessageEditor Class</A></h4>

<div class=screen>
<p>
<pre>
package oreilly.beans.yesno;
import java.beans.*;
import java.awt.*;
import java.awt.event.*;
/**
 * This class is a custom editor for the message property of the
 * YesNoDialog bean.  It is necessary because the default editor for
 * properties of type String does not allow multi-line strings to be entered.
 */
public class YesNoDialogMessageEditor implements PropertyEditor {
  protected String value;  // The value we will be editing.
  public void setValue(Object o) {  value = (String) o; }
  public Object getValue() { return value; }
  public void setAsText(String s) { value = s; }
  public String getAsText() { return value; }
  public String[] getTags() { return null; }  // not enumerated; no tags
  // Say that we allow custom editing.
  public boolean supportsCustomEditor() { return true; }
  // Return the custom editor.  This just creates and returns a TextArea
  // to edit the multi-line text.  But it also registers a listener on the
  // text area to update the value as the user types and to fire the
  // property change events that property editors are required to fire.
  public Component getCustomEditor() {
    final TextArea t = new TextArea(value);
    t.setSize(300, 150); // TextArea doesn't have a preferred size, so set one.
    t.addTextListener(new TextListener() {
      public void textValueChanged(TextEvent e) {
        value = t.getText();
        listeners.firePropertyChange(null, null, null);
      }
    });
    return t;
  }
  // Visual display of the value, for use with the custom editor.
  // Just print some instructions and hope they fit in the box.
  // This could be more sophisticated.
  public boolean isPaintable() { return true; }
  public void paintValue(Graphics g, Rectangle r) {
    g.setClip(r);
    g.drawString("Click to edit...", r.x+5, r.y+15);
  }
  // Important method for code generators.  Note that it
  // ought to add any necessary escape sequences.
  public String getJavaInitializationString() { return "\"" + value + "\""; }
  // This code uses the PropertyChangeSupport class to maintain a list of
  // listeners interested in the edits we make to the value.
  protected PropertyChangeSupport listeners = new PropertyChangeSupport(this);
  public void addPropertyChangeListener(PropertyChangeListener l) {
    listeners.addPropertyChangeListener(l);
  }
  public void removePropertyChangeListener(PropertyChangeListener l) {
    listeners.removePropertyChangeListener(l);
  }
}
</PRE>
</DIV>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch10_06.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch10_08.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Defining a Simple Property Editor</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Defining a Bean Customizer</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
