<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 5] 5.2 Nested Top-Level Classes and Interfaces</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 15:52:18 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 5<br>Inner Classes and Other New Language Features</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch05_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-5-SECT-2">5.2 Nested Top-Level Classes and Interfaces</A></h2>

<p class=para>
<a name="CH5.INNER.CLASSE2"></A><a name="CH5.TOP-LEVEL.CL1"></A><a name="CH5.INTERFACES-N1"></A><a name="CH5.CLASSES-NEST1"></A>As explained above, a nested top-level class or interface is
just like a regular package-member class or interface,
except that, for convenience, it has been nested within
another class or interface.  Note that nested top-level
classes and interfaces must be declared <tt class=literal>static</tt>.
They can only be nested within other top-level classes and
interfaces (i.e., they cannot be declared within inner
classes), but they can be nested to any depth.

<p class=para>
<a href="#JNUT2-CH-5-EX-1">Example 5.1</A> 
shows how you might define a nested top-level "helper" interface.
Note the use of the <tt class=literal>static</tt>
keyword in the declaration of the interface.  The example
also shows how this interface is used both within the class
that contains it and by external classes.  Note the use of
its hierarchical name in the external class.

<div class=example>
<h4 class=example><a class="TITLE" name="JNUT2-CH-5-EX-1">Example 5.1: Defining and Using a Nested Top-Level Interface</A></h4>

<div class=screen>
<p>
<pre>
public class LinkedList {
  // This nested top-level helper interface is defined as a static member.
  public interface Linkable {
    public Linkable getNext();
    public void setNext(Linkable node);
  }
  // The head of the list is a Linkable object.
  Linkable head;  
  // Method bodies omitted.
  public void insert(Linkable node) { ... } 
  public remove(Linkable node) { ... } 
}
// This class defines a type of node that we'd like to use in
// a linked list.  Note the nested interface name in the implements clause.
class LinkableInteger implements LinkedList.Linkable
{
  // Here's the node's data and constructor.
  int i;
  public LinkableInteger(int i) { this.i = i; }
  // Here are the data and methods required to implement the interface.
  LinkedList.Linkable next;
  public LinkedList.Linkable getNext() { return next; }
  public void setNext(LinkedList.Linkable node) { next = node; }
}
</PRE>
</DIV>

</DIV>

<p class=para>
The <tt class=literal>import</tt> statement can be used to import nested
top-level classes and interfaces from the class that defines
them, just as it can be used to import package member
top-level classes and interfaces from the package that
defines them.
<a href="#JNUT2-CH-5-EX-2">Example 5.2</A>
shows a new definition of the <tt class=literal>LinkableInteger</tt> class
from
<a href="#JNUT2-CH-5-EX-1">Example 5.1</A>
that uses an <tt class=literal>import</tt> statement to allow it to refer
to the <tt class=literal>Linkable</tt> interface by its simple, unqualified
name (i.e., the name of the enclosing class is no longer needed).

<div class=example>
<h4 class=example><a class="TITLE" name="JNUT2-CH-5-EX-2">Example 5.2: Importing a Static Member Class</A></h4>

<div class=screen>
<p>
<pre>
import LinkedList.*;     // Or use import LinkedList.Linkable;
// Since we use an import statement, we can just type
// "Linkable" instead of "LinkedList.Linkable".
class LinkableInteger2 implements Linkable
{
  int i;
  public LinkableInteger2(int i) { this.i = i; }
  Linkable next;
  public Linkable getNext() { return next; }
  public void setNext(Linkable node) { next = node; }
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-5-SECT-2.1">Nested Top-Level Classes and .class Files</A></h3>

<p class=para>
When you compile the <i class=emphasis>LinkedList.java</I> file shown in
<a href="#JNUT2-CH-5-EX-1">Example 5.1</A>, 
you'll find that two class files are generated.  The first
is named <i class=emphasis>LinkedList.class</I>, as expected.  The second,
however, is named <i class=emphasis>LinkedList$Linkable.class</I>.  The
<tt class=literal>$</tt> in this name is automatically inserted by the Java
1.1 compiler.  

<p class=para>
The Java Virtual Machine knows nothing about
nested top-level classes and interfaces or the various
types of inner classes. 
Therefore, the Java compiler must convert these new types
into standard, non-nested class files that the Java
interpreter can understand.  This is done through
source-code transformations that insert <tt class=literal>$</tt> characters
into nested class names. These source-code transformations
may also insert hidden fields,
methods, and constructor arguments into the affected
classes.  Unless you are writing a Java 1.1 compiler,
however, you do not need to know the details 
of these source-code transformations, and you will typically
not even notice them, except in the names of class files.
[2]

<blockquote class=footnote>
<p class=para>[2] 
See the <i class=emphasis>Java Language Specification</I> if you want
complete details on the source-code transformations
performed by the Java 1.1 compiler to support inner classes.
</blockquote>
</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_01.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch05_03.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>An Overview of Inner Classes</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Member Classes</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
