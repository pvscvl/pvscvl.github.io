<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 18] 18.15 java.awt.Component (JDK 1.0)</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 16:09:38 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch18_14.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 18<br>The java.awt Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch18_16.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-18-SECT-15">18.15 java.awt.Component (JDK 1.0)</A></h2>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-18-SECT-15.1"></A></h3>
</DIV>

<p class=para>
<tt class=literal>Component</tt> is the superclass of all GUI components
(except menu components) in the <tt class=literal>java.awt</tt> package.  You may
not instantiate a <tt class=literal>Component</tt> directly; you must use
a subclass.

<p class=para>
<tt class=literal>Component</tt> defines many methods.  Some of these are
intended to be implemented by subclasses.  Some are used
internally by the AWT.  Some are to be implemented to handle events.
And many are useful utility methods for working with GUI
components.  <tt class=literal>getParent()</tt> returns the
<tt class=literal>Container</tt> that a <tt class=literal>Component</tt> is contained in.
<tt class=literal>setBackground()</tt>, <tt class=literal>setForeground()</tt>, and
<tt class=literal>setFont()</tt> set the specified display attributes of a
component.  <tt class=literal>hide()</tt>, <tt class=literal>show()</tt>,
<tt class=literal>enable()</tt>, and <tt class=literal>disable()</tt> perform the
specified actions for a component.  <tt class=literal>createImage()</tt>
creates an <tt class=literal>Image</tt> object from a specified
<tt class=literal>ImageProducer</tt>, or creates an offscreen image that
can be draw into and used for double-buffering during
animation.  <tt class=literal>Component</tt> also has quite a few deprecated
methods as a result of the Java 1.1 event model and the
introduction of the JavaBeans method naming
conventions. The class defines quite a few methods for
handling many types of events using the 1.0 model and the
1.1 model in both its high-level and low-level forms.

<div class=screen>
<p>
<pre>
public abstract class <tt class=literal>Component</tt> extends Object implements ImageObserver, MenuContainer, Serializable {
    // <tt class=literal>Protected Constructor</tt>
        <b>1.1</b>  protected <tt class=literal>Component</tt>();
    // <tt class=literal>Constants</tt>
        <b>1.1</b>  public static final float <tt class=literal>BOTTOM_ALIGNMENT</tt>;
        <b>1.1</b>  public static final float <tt class=literal>CENTER_ALIGNMENT</tt>;
        <b>1.1</b>  public static final float <tt class=literal>LEFT_ALIGNMENT</tt>;
        <b>1.1</b>  public static final float <tt class=literal>RIGHT_ALIGNMENT</tt>;
        <b>1.1</b>  public static final float <tt class=literal>TOP_ALIGNMENT</tt>;
    // <tt class=literal>Public Instance Methods</tt>
         #  public boolean <tt class=literal>action</tt>(Event <tt class=literal>evt</tt>, Object <tt class=literal>what</tt>);
        <b>1.1</b>  public synchronized void <tt class=literal>add</tt>(PopupMenu <tt class=literal>popup</tt>);
        <b>1.1</b>  public synchronized void <tt class=literal>addComponentListener</tt>(ComponentListener <tt class=literal>l</tt>);
        <b>1.1</b>  public synchronized void <tt class=literal>addFocusListener</tt>(FocusListener <tt class=literal>l</tt>);
        <b>1.1</b>  public synchronized void <tt class=literal>addKeyListener</tt>(KeyListener <tt class=literal>l</tt>);
        <b>1.1</b>  public synchronized void <tt class=literal>addMouseListener</tt>(MouseListener <tt class=literal>l</tt>);
        <b>1.1</b>  public synchronized void <tt class=literal>addMouseMotionListener</tt>(MouseMotionListener <tt class=literal>l</tt>);
             public void <tt class=literal>addNotify</tt>();
         #  public Rectangle <tt class=literal>bounds</tt>();
             public int <tt class=literal>checkImage</tt>(Image <tt class=literal>image</tt>, ImageObserver <tt class=literal>observer</tt>);
             public int <tt class=literal>checkImage</tt>(Image <tt class=literal>image</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>, ImageObserver <tt class=literal>observer</tt>);
        <b>1.1</b>  public boolean <tt class=literal>contains</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>);
        <b>1.1</b>  public boolean <tt class=literal>contains</tt>(Point <tt class=literal>p</tt>);
             public Image <tt class=literal>createImage</tt>(ImageProducer <tt class=literal>producer</tt>);
             public Image <tt class=literal>createImage</tt>(int <tt class=literal>width</tt>, int <tt class=literal>height</tt>);
         #  public void <tt class=literal>deliverEvent</tt>(Event <tt class=literal>e</tt>);
         #  public void <tt class=literal>disable</tt>();
        <b>1.1</b>  public final void <tt class=literal>dispatchEvent</tt>(AWTEvent <tt class=literal>e</tt>);
        <b>1.1</b>  public void <tt class=literal>doLayout</tt>();
         #  public void <tt class=literal>enable</tt>();
         #  public void <tt class=literal>enable</tt>(boolean <tt class=literal>b</tt>);
        <b>1.1</b>  public float <tt class=literal>getAlignmentX</tt>();
        <b>1.1</b>  public float <tt class=literal>getAlignmentY</tt>();
             public Color <tt class=literal>getBackground</tt>();
        <b>1.1</b>  public Rectangle <tt class=literal>getBounds</tt>();
             public ColorModel <tt class=literal>getColorModel</tt>();
        <b>1.1</b>  public Component <tt class=literal>getComponentAt</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>);
        <b>1.1</b>  public Component <tt class=literal>getComponentAt</tt>(Point <tt class=literal>p</tt>);
        <b>1.1</b>  public Cursor <tt class=literal>getCursor</tt>();
             public Font <tt class=literal>getFont</tt>();  //<tt class=literal> From MenuContainer</tt>
             public FontMetrics <tt class=literal>getFontMetrics</tt>(Font <tt class=literal>font</tt>);
             public Color <tt class=literal>getForeground</tt>();
             public Graphics <tt class=literal>getGraphics</tt>();
        <b>1.1</b>  public Locale <tt class=literal>getLocale</tt>();
        <b>1.1</b>  public Point <tt class=literal>getLocation</tt>();
        <b>1.1</b>  public Point <tt class=literal>getLocationOnScreen</tt>();
        <b>1.1</b>  public Dimension <tt class=literal>getMaximumSize</tt>();
        <b>1.1</b>  public Dimension <tt class=literal>getMinimumSize</tt>();
        <b>1.1</b>  public String <tt class=literal>getName</tt>();
             public Container <tt class=literal>getParent</tt>();
         #  public ComponentPeer <tt class=literal>getPeer</tt>();
        <b>1.1</b>  public Dimension <tt class=literal>getPreferredSize</tt>();
        <b>1.1</b>  public Dimension <tt class=literal>getSize</tt>();
             public Toolkit <tt class=literal>getToolkit</tt>();
        <b>1.1</b>  public final Object <tt class=literal>getTreeLock</tt>();
         #  public boolean <tt class=literal>gotFocus</tt>(Event <tt class=literal>evt</tt>, Object <tt class=literal>what</tt>);
         #  public boolean <tt class=literal>handleEvent</tt>(Event <tt class=literal>evt</tt>);
         #  public void <tt class=literal>hide</tt>();
            public boolean <tt class=literal>imageUpdate</tt>(Image <tt class=literal>img</tt>, int <tt class=literal>flags</tt>, int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>w</tt>, int <tt class=literal>h</tt>);  //<tt class=literal> From ImageObserver</tt>
         #  public boolean <tt class=literal>inside</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>);
            public void <tt class=literal>invalidate</tt>();
            public boolean <tt class=literal>isEnabled</tt>();
        <b>1.1</b>  public boolean <tt class=literal>isFocusTraversable</tt>();
            public boolean <tt class=literal>isShowing</tt>();
            public boolean <tt class=literal>isValid</tt>();
            public boolean <tt class=literal>isVisible</tt>();
         #  public boolean <tt class=literal>keyDown</tt>(Event <tt class=literal>evt</tt>, int <tt class=literal>key</tt>);
         #  public boolean <tt class=literal>keyUp</tt>(Event <tt class=literal>evt</tt>, int <tt class=literal>key</tt>);
         #  public void <tt class=literal>layout</tt>();
            public void <tt class=literal>list</tt>();
            public void <tt class=literal>list</tt>(PrintStream <tt class=literal>out</tt>);
            public void <tt class=literal>list</tt>(PrintStream <tt class=literal>out</tt>, int <tt class=literal>indent</tt>);
        <b>1.1</b>  public void <tt class=literal>list</tt>(PrintWriter <tt class=literal>out</tt>);
        <b>1.1</b>  public void <tt class=literal>list</tt>(PrintWriter <tt class=literal>out</tt>, int <tt class=literal>indent</tt>);
         #  public Component <tt class=literal>locate</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>);
         #  public Point <tt class=literal>location</tt>();
         #  public boolean <tt class=literal>lostFocus</tt>(Event <tt class=literal>evt</tt>, Object <tt class=literal>what</tt>);
         #  public Dimension <tt class=literal>minimumSize</tt>();
         #  public boolean <tt class=literal>mouseDown</tt>(Event <tt class=literal>evt</tt>, int <tt class=literal>x</tt>, int <tt class=literal>y</tt>);
         #  public boolean <tt class=literal>mouseDrag</tt>(Event <tt class=literal>evt</tt>, int <tt class=literal>x</tt>, int <tt class=literal>y</tt>);
         #  public boolean <tt class=literal>mouseEnter</tt>(Event <tt class=literal>evt</tt>, int <tt class=literal>x</tt>, int <tt class=literal>y</tt>);
         #  public boolean <tt class=literal>mouseExit</tt>(Event <tt class=literal>evt</tt>, int <tt class=literal>x</tt>, int <tt class=literal>y</tt>);
         #  public boolean <tt class=literal>mouseMove</tt>(Event <tt class=literal>evt</tt>, int <tt class=literal>x</tt>, int <tt class=literal>y</tt>);
         #  public boolean <tt class=literal>mouseUp</tt>(Event <tt class=literal>evt</tt>, int <tt class=literal>x</tt>, int <tt class=literal>y</tt>);
         #  public void <tt class=literal>move</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>);
         #  public void <tt class=literal>nextFocus</tt>();
            public void <tt class=literal>paint</tt>(Graphics <tt class=literal>g</tt>);
            public void <tt class=literal>paintAll</tt>(Graphics <tt class=literal>g</tt>);
         #  public boolean <tt class=literal>postEvent</tt>(Event <tt class=literal>e</tt>);  //<tt class=literal> From MenuContainer</tt>
         #  public Dimension <tt class=literal>preferredSize</tt>();
            public boolean <tt class=literal>prepareImage</tt>(Image <tt class=literal>image</tt>, ImageObserver <tt class=literal>observer</tt>);
            public boolean <tt class=literal>prepareImage</tt>(Image <tt class=literal>image</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>, ImageObserver <tt class=literal>observer</tt>);
            public void <tt class=literal>print</tt>(Graphics <tt class=literal>g</tt>);
            public void <tt class=literal>printAll</tt>(Graphics <tt class=literal>g</tt>);
        <b>1.1</b>  public synchronized void <tt class=literal>remove</tt>(MenuComponent <tt class=literal>popup</tt>);  //<tt class=literal> From MenuContainer</tt>
        <b>1.1</b>  public synchronized void <tt class=literal>removeComponentListener</tt>(ComponentListener <tt class=literal>l</tt>);
        <b>1.1</b>  public synchronized void <tt class=literal>removeFocusListener</tt>(FocusListener <tt class=literal>l</tt>);
        <b>1.1</b>  public synchronized void <tt class=literal>removeKeyListener</tt>(KeyListener <tt class=literal>l</tt>);
        <b>1.1</b>  public synchronized void <tt class=literal>removeMouseListener</tt>(MouseListener <tt class=literal>l</tt>);
        <b>1.1</b>  public synchronized void <tt class=literal>removeMouseMotionListener</tt>(MouseMotionListener <tt class=literal>l</tt>);
            public void <tt class=literal>removeNotify</tt>();
            public void <tt class=literal>repaint</tt>();
            public void <tt class=literal>repaint</tt>(long <tt class=literal>tm</tt>);
            public void <tt class=literal>repaint</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>);
            public void <tt class=literal>repaint</tt>(long <tt class=literal>tm</tt>, int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>);
            public void <tt class=literal>requestFocus</tt>();
         #  public void <tt class=literal>reshape</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>);
         #  public void <tt class=literal>resize</tt>(int <tt class=literal>width</tt>, int <tt class=literal>height</tt>);
         #  public void <tt class=literal>resize</tt>(Dimension <tt class=literal>d</tt>);
            public void <tt class=literal>setBackground</tt>(Color <tt class=literal>c</tt>);
        <b>1.1</b>  public void <tt class=literal>setBounds</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>);
        <b>1.1</b>  public void <tt class=literal>setBounds</tt>(Rectangle <tt class=literal>r</tt>);
        <b>1.1</b>  public synchronized void <tt class=literal>setCursor</tt>(Cursor <tt class=literal>cursor</tt>);
        <b>1.1</b>  public void <tt class=literal>setEnabled</tt>(boolean <tt class=literal>b</tt>);
            public synchronized void <tt class=literal>setFont</tt>(Font <tt class=literal>f</tt>);
            public void <tt class=literal>setForeground</tt>(Color <tt class=literal>c</tt>);
        <b>1.1</b>  public void <tt class=literal>setLocale</tt>(Locale <tt class=literal>l</tt>);
        <b>1.1</b>  public void <tt class=literal>setLocation</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>);
        <b>1.1</b>  public void <tt class=literal>setLocation</tt>(Point <tt class=literal>p</tt>);
        <b>1.1</b>  public void <tt class=literal>setName</tt>(String <tt class=literal>name</tt>);
        <b>1.1</b>  public void <tt class=literal>setSize</tt>(int <tt class=literal>width</tt>, int <tt class=literal>height</tt>);
        <b>1.1</b>  public void <tt class=literal>setSize</tt>(Dimension <tt class=literal>d</tt>);
        <b>1.1</b>  public void <tt class=literal>setVisible</tt>(boolean <tt class=literal>b</tt>);
        #   public void <tt class=literal>show</tt>();
        #   public void <tt class=literal>show</tt>(boolean <tt class=literal>b</tt>);
        #   public Dimension <tt class=literal>size</tt>();
            public String <tt class=literal>toString</tt>();  //<tt class=literal> Overrides Object</tt>
        <b>1.1</b>  public void <tt class=literal>transferFocus</tt>();
            public void <tt class=literal>update</tt>(Graphics <tt class=literal>g</tt>);
            public void <tt class=literal>validate</tt>();
    // <tt class=literal>Protected Instance Methods</tt>
        <b>1.1</b>  protected final void <tt class=literal>disableEvents</tt>(long <tt class=literal>eventsToDisable</tt>);
        <b>1.1</b>  protected final void <tt class=literal>enableEvents</tt>(long <tt class=literal>eventsToEnable</tt>);
            protected String <tt class=literal>paramString</tt>();
        <b>1.1</b>  protected void <tt class=literal>processComponentEvent</tt>(ComponentEvent <tt class=literal>e</tt>);
        <b>1.1</b>  protected void <tt class=literal>processEvent</tt>(AWTEvent <tt class=literal>e</tt>);
        <b>1.1</b>  protected void <tt class=literal>processFocusEvent</tt>(FocusEvent <tt class=literal>e</tt>);
        <b>1.1</b>  protected void <tt class=literal>processKeyEvent</tt>(KeyEvent <tt class=literal>e</tt>);
        <b>1.1</b>  protected void <tt class=literal>processMouseEvent</tt>(MouseEvent <tt class=literal>e</tt>);
        <b>1.1</b>  protected void <tt class=literal>processMouseMotionEvent</tt>(MouseEvent <tt class=literal>e</tt>);
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-18-SECT-15.2">Extended By:</A></h3>

<p class=para>
<tt class=literal>Button, 
Canvas, 
Checkbox, 
Choice, 
Container, 
Label, 
List, 
Scrollbar, 
TextComponent</tt>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-18-SECT-15.3">Passed To:</A></h3>

<p class=para>
<tt class=literal>BorderLayout.addLayoutComponent(), 
BorderLayout.removeLayoutComponent(), 
CardLayout.addLayoutComponent(), 
CardLayout.removeLayoutComponent(), 
ComponentEvent(), 
Container.add(), 
Container.addImpl(), 
Container.isAncestorOf(), 
Container.remove(), 
ContainerEvent(), 
FlowLayout.addLayoutComponent(), 
FlowLayout.removeLayoutComponent(), 
FocusEvent(), 
GridBagLayout.addLayoutComponent(), 
GridBagLayout.getConstraints(), 
GridBagLayout.lookupConstraints(), 
GridBagLayout.removeLayoutComponent(), 
GridBagLayout.setConstraints(), 
GridLayout.addLayoutComponent(), 
GridLayout.removeLayoutComponent(), 
KeyEvent(), 
LayoutManager.addLayoutComponent(), 
LayoutManager.removeLayoutComponent(), 
LayoutManager2.addLayoutComponent(), 
MediaTracker(), 
MouseEvent(), 
PaintEvent(), 
PopupMenu.show(), 
ScrollPane.addImpl(), 
Toolkit.createComponent(), 
Toolkit.getNativeContainer()</tt>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-18-SECT-15.4">Returned By:</A></h3>

<p class=para>
<tt class=literal>Component.getComponentAt(), 
Component.locate(), 
ComponentEvent.getComponent(), 
Container.add(), 
Container.getComponent(), 
Container.getComponentAt(), 
Container.getComponents(), 
Container.locate(), 
ContainerEvent.getChild(), 
PropertyEditor.getCustomEditor(), 
PropertyEditorSupport.getCustomEditor(), 
Window.getFocusOwner()</tt>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch18_14.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch18_16.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>java.awt.Color (JDK 1.0)</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>java.awt.Container (JDK 1.0)</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
