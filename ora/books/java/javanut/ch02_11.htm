<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 2] 2.11 Operators</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 15:48:01 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_10.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 2<br>How Java Differs from C</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch02_12.htm#JNUT2-CH-2-SECT-12.3"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-2-SECT-11">2.11 Operators</A></h2>

<p class=para>
<a name="OPERATORS"></A><a name="PROGRAMMING-IN-JAVA2"></A>Java supports almost all of the standard C operators.  These
standard operators have the same precedence and
associativity in Java as they do in C.  They are listed in
<a href="#JNUT2-CH-2-TAB-3">Table 2.3</A>
and also in quick reference form in <a href="ch13_01.htm">Chapter 13, <i>Java Syntax</i></A>.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="JNUT2-CH-2-TAB-3">Table 2.3: Java Operators</A></CAPTION>
<tr class=row>
<th align="left">Prec.</TH>
<th align="left">Operator</TH>
<th align="left">Operand Type(s)</TH>
<th align="left">Assoc.</TH>
<th align="left">Operation Performed</TH>
</TR>
<tr class=row>
<td align="left">1</TD>
<td align="left">++</TD>
<td align="left">arithmetic</TD>
<td align="left">R</TD>
<td align="left">pre-or-post increment </TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left">(unary)</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">--</TD>
<td align="left">arithmetic</TD>
<td align="left">R</TD>
<td align="left">pre-or-post decrement (unary)</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">+, -</TD>
<td align="left">arithmetic</TD>
<td align="left">R</TD>
<td align="left">unary plus, unary minus</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">~</TD>
<td align="left">integral</TD>
<td align="left">R</TD>
<td align="left">bitwise complement (unary)</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">!</TD>
<td align="left">boolean</TD>
<td align="left">R</TD>
<td align="left">logical complement (unary)</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">(<i class=emphasis>type</I>)</TD>
<td align="left">any</TD>
<td align="left">R</TD>
<td align="left">cast</TD>
</TR>
<tr class=row>
<td align="left">2</TD>
<td align="left">*, /, %</TD>
<td align="left">arithmetic</TD>
<td align="left">L</TD>
<td align="left">multiplication, division, remainder</TD>
</TR>
<tr class=row>
<td align="left">3</TD>
<td align="left">+, -</TD>
<td align="left">arithmetic</TD>
<td align="left">L</TD>
<td align="left">addition, subtraction</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">+</TD>
<td align="left">string</TD>
<td align="left">L</TD>
<td align="left">string concatenation</TD>
</TR>
<tr class=row>
<td align="left">4</TD>
<td align="left">&lt;&lt;</TD>
<td align="left">integral</TD>
<td align="left">L</TD>
<td align="left">left shift</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&gt;&gt;</TD>
<td align="left">integral</TD>
<td align="left">L</TD>
<td align="left">right shift with sign extension</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&gt;&gt;&gt;</TD>
<td align="left">integral</TD>
<td align="left">L</TD>
<td align="left">right shift with zero extension</TD>
</TR>
<tr class=row>
<td align="left">5</TD>
<td align="left">&lt;, &lt;=</TD>
<td align="left">arithmetic</TD>
<td align="left">L</TD>
<td align="left">less than, less than or equal</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&gt;, &gt;=</TD>
<td align="left">arithmetic</TD>
<td align="left">L</TD>
<td align="left">greater than, greater than or equal</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">instanceof</TD>
<td align="left">object, type</TD>
<td align="left">L</TD>
<td align="left">type comparison</TD>
</TR>
<tr class=row>
<td align="left">6</TD>
<td align="left">==</TD>
<td align="left">primitive</TD>
<td align="left">L</TD>
<td align="left">equal (have identical </TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left">&nbsp;</TD>
<td align="left">values)</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">!=</TD>
<td align="left">primitive</TD>
<td align="left">L</TD>
<td align="left">not equal (have different values)</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">==</TD>
<td align="left">object</TD>
<td align="left">L</TD>
<td align="left">equal (refer to same object)</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">!=</TD>
<td align="left">object</TD>
<td align="left">L</TD>
<td align="left">not equal (refer to different objects)</TD>
</TR>
<tr class=row>
<td align="left">7</TD>
<td align="left">&amp;</TD>
<td align="left">integral</TD>
<td align="left">L</TD>
<td align="left">bitwise AND</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">&amp;</TD>
<td align="left">boolean</TD>
<td align="left">L</TD>
<td align="left">boolean AND</TD>
</TR>
<tr class=row>
<td align="left">8</TD>
<td align="left">^</TD>
<td align="left">integral</TD>
<td align="left">L</TD>
<td align="left">bitwise XOR</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">^</TD>
<td align="left">boolean</TD>
<td align="left">L</TD>
<td align="left">boolean XOR</TD>
</TR>
<tr class=row>
<td align="left">9</TD>
<td align="left">|</TD>
<td align="left">integral</TD>
<td align="left">L</TD>
<td align="left">bitwise OR</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">|</TD>
<td align="left">boolean</TD>
<td align="left">L</TD>
<td align="left">boolean OR</TD>
</TR>
<tr class=row>
<td align="left">10</TD>
<td align="left">&amp;&amp;</TD>
<td align="left">boolean</TD>
<td align="left">L</TD>
<td align="left">conditional AND</TD>
</TR>
<tr class=row>
<td align="left">11</TD>
<td align="left">||</TD>
<td align="left">boolean</TD>
<td align="left">L</TD>
<td align="left">conditional OR</TD>
</TR>
<tr class=row>
<td align="left">12</TD>
<td align="left">?:</TD>
<td align="left">boolean, any, any</TD>
<td align="left">R</TD>
<td align="left">conditional (ternary) operator</TD>
</TR>
<tr class=row>
<td align="left">13</TD>
<td align="left">

<p class=para>
=</TD>
<td align="left">variable, any</TD>
<td align="left">R</TD>
<td align="left">assignment</TD>
</TR>
<tr class=row>
<td align="left">&nbsp;</TD>
<td align="left">

<p class=para>
*=, /=, %=, +=, -=, &lt;&lt;=, &gt;&gt;=, &gt;&gt;&gt;=, &amp;=, ^=, |=</TD>
<td align="left">variable, any</TD>
<td align="left">R</TD>
<td align="left">assignment with operation</TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
Note the following Java operator differences from C. Java
does not support the comma operator for combining two
expressions into one (although the <tt class=literal>for</tt> statement
simulates this operator in a useful way).  
Since Java does not allow you to
manipulate pointers directly, it does not support the
reference and dereference operators <tt class=literal>*</tt>, <tt class=literal>-&gt;</tt>, and <tt class=literal>&amp;</tt>,
nor the <tt class=literal>sizeof</tt> operator.  Further, Java doesn't
consider <tt class=literal>[]</tt> (array access) and <tt class=literal>.</tt> (field
access) to be operators, as C does.

<p class=para>
Java also adds some new operators:

<p class=para>
The <tt class=literal>+</tt> operator applied to <tt class=literal>String</tt> values
concatenates them.
[5]
If only one operand of <tt class=literal>+</tt> is a
<tt class=literal>String</tt>, the other one is converted to a string.
The conversion is done automatically for primitive types,
and by calling the <tt class=literal>toString()</tt> method of non-primitive
types.  This <tt class=literal>String</tt> <tt class=literal>+</tt> operator has the same
precedence as the arithmetic <tt class=literal>+</tt> operator.  The
<tt class=literal>+=</tt> operator works as you would expect for
<tt class=literal>String</tt> values.

<blockquote class=footnote>
<p class=para>[5] 
To C++ programmers, this looks like operator
overloading.  In fact, Java does not support operator
overloading--the language designers decided (after much
debate) that overloaded operators were a neat idea, but that
code that relied on them became hard to read and understand.
</blockquote>
<p class=para>
The <tt class=literal>instanceof</tt> operator returns <tt class=literal>true</tt> if the
object <tt class=literal>o</tt> on its left-hand side is an instance of the
class <tt class=literal>C</tt> or implements the interface <tt class=literal>I</tt>
specified on its right-hand side.  It also returns
<tt class=literal>true</tt> if <tt class=literal>o</tt> is an instance of a subclass of
<tt class=literal>C</tt> or is an instance of a subclass of some class that
implements <tt class=literal>I</tt>.  <tt class=literal>instanceof</tt> returns
<tt class=literal>false</tt> if <tt class=literal>o</tt> is not an instance of <tt class=literal>C</tt>
or does not implement <tt class=literal>I</tt>.  It also returns
<tt class=literal>false</tt> if the value on its left is <tt class=literal>null</tt>.  If
<tt class=literal>instanceof</tt> returns <tt class=literal>true</tt>, it means that
<tt class=literal>o</tt> is <i class=emphasis>assignable to</I> variables of type <tt class=literal>C</tt>
or <tt class=literal>I</tt>.  The <tt class=literal>instanceof</tt> operator has the same
precedence as the <tt class=literal>&lt;</tt>, <tt class=literal>&lt;=</tt>, <tt class=literal>&gt;</tt>, and
<tt class=literal>&gt;=</tt> operators.

<p class=para>
Because all integral types in Java are signed values, the
Java <tt class=literal>&gt;&gt;</tt> operator is defined to do a right shift with
sign extension.  The <tt class=literal>&gt;&gt;&gt;</tt> operator treats the value
to be shifted as an unsigned number and shifts the bits
right with zero extension.  The <tt class=literal>&gt;&gt;&gt;=</tt> operator works
as you would expect.

<p>
<dl class=variablelist>
<dt class=varlistentry><tt class=literal>&amp;</tt> and <tt class=literal>|</tt><br>
<dd>

<p class=para>
When <tt class=literal>&amp;</tt> and <tt class=literal>|</tt> are applied to integral types
in Java, they perform the expected bitwise AND and OR
operations.  Java makes a strong distinction between
integral types and the <tt class=literal>boolean</tt> type, however.  Thus,
if these operators are applied to <tt class=literal>boolean</tt> types,
they perform logical AND and logical OR operations.  These
logical AND and logical OR operators always evaluate both of
their operands, even when the result of the operation is
determined after evaluating only the left operand.  This is
useful when the operands are expressions with side effects
(such as method calls) and you always want the side effects
to occur.  However, when you do not want the right operand
evaluated if it is not necessary, you can use the <tt class=literal>&amp;&amp;</tt>
and <tt class=literal>||</tt> operators, which perform "short-circuited" logical AND and
logical OR operations just as in C.  The <tt class=literal>&amp;=</tt> and
<tt class=literal>|=</tt> operators perform a bitwise or logical operation
depending on the type of the operands, as you would
expect.</DL>
</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_10.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch02_12.htm#JNUT2-CH-2-SECT-12.3"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Strings</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Statements</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
