<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 5] 5.6 Other New Features of Java 1.1</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 15:52:30 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 5<br>Inner Classes and Other New Language Features</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch06_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-5-SECT-6">5.6 Other New Features of Java 1.1</A></h2>

<p class=para>
While the addition of inner classes is by far the most
important and far-reaching change to the Java language in
Java 1.1, there have been several other changes to the language as
well.  They are:

<p>
<ul class=itemizedlist>
<li class=listitem><tt class=literal>final</tt> local variables, method parameters and
<tt class=literal>catch</tt> statement parameters

<p>
<li class=listitem>Instance initializers

<p>
<li class=listitem>"Blank finals"--<tt class=literal>final</tt> variable and field
declarations without initializer expressions

<p>
<li class=listitem>Anonymous arrays

<p>
<li class=listitem>Class literals

<p>
</UL>
<p class=para>
As you can see, the first two items in this list are
language changes that are related to, though not exclusively
used by, the inner class changes.  We covered <tt class=literal>final</tt>
local variables and parameters in our discussion of local classes
above.  And we covered instance initializers in the
discussion of anonymous classes.  The following subsections
discuss the remaining three changes.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-5-SECT-6.1">Blank Finals</A></h3>

<p class=para>
We've already seen that local variables, method parameters,
and exception parameters of <tt class=literal>catch</tt> statements may
be declared <tt class=literal>final</tt>.  A related change is that <tt class=literal>final</tt>
fields do not require initializers.  In Java 1.0, any
<tt class=literal>final</tt> field had to be initialized as part of the
field declaration.  In Java 1.1, this restriction has been
relaxed.  A field or local variable can be declared
<tt class=literal>final</tt> without specifying an intial value as part of
the declaration.  These "blank finals," as they are called,
must have a value assigned to them before they are ever
used, of course.  And, once a value has been assigned to a
blank final, that value can never be changed.  This allows
you, for example, to use an instance initializer or a
constructor to compute a value for a <tt class=literal>final</tt> field.

<p class=para>
Blank finals are particularly useful in defining immutable
data types.  They allow a class to have immutable fields
that are initialized based on run-time arguments to a
constructor.  Once assigned, these fields cannot be
accidentally or maliciously changed.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-5-SECT-6.2">Anonymous Arrays</A></h3>

<p class=para>
In Java 1.0, you can create and initialize an array with
code like the following:

<p class=para>
<div class=screen>
<p>
<pre>
int[] a = {1, 2, 3, 4, 5};
</PRE>
</DIV>

<p class=para>
Unfortunately, this syntax is only allowed in initializer
expressions that follow the declaration of a field or
variable of array type.  That is, you <i class=emphasis>cannot</I> write
code like this:

<p class=para>
<div class=screen>
<p>
<pre>
int[] a;
a = {1, 2, 3, 4, 5};           // Error
int total = sum({1,2,3,4,5});  // Error
</PRE>
</DIV>

<p class=para>
You cannot write code like that in Java 1.1 either, but
you can write code using a similar array initializer syntax.
When you use the 
<tt class=literal>new</tt> operator to create an array, you may omit the
dimension that specifies the number of array elements to
create and instead follow the empty square bracket pair
(<tt class=literal>[]</tt>) with a list of initial values in curly braces.
Such an expression creates an array large enough to hold
all of the elements specified between the braces, and
initializes the array to contain those elements.  The
elements in braces must all be of the type specified
after the <tt class=literal>new</tt> keyword, of course.

<p class=para>
Code that uses anonymous arrays looks like this:

<p class=para>
<div class=screen>
<p>
<pre>
int[] a;
a = new int[] {1, 2, 3, 4, 5};
int total = sum(new int[] {1, 2, 3, 4, 5});
System.out.println(new char[] {'h', 'e', 'l', 'l', 'o'});
</PRE>
</DIV>

<p class=para>
As you can see, this new syntax allows you to create and
initialize arrays without using a variable initializer, or
without even assigning the array to a variable at all.
That is why arrays created and initialized this way are
called <i class=emphasis>anonymous arrays</I>.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-5-SECT-6.3">Class Literals</A></h3>

<p class=para>
Another major change in Java 1.1 is the introduction of the
Reflection API in the <tt class=literal>java.lang.reflect</tt> package.  As
part of this new package, the <tt class=literal>java.lang.Class</tt> class
has been broadened to represent not just Java classes, but
all Java data types. In other words, there are now special
<tt class=literal>Class</tt> objects that represent each of the
Java primitive types.  

<p class=para>
You can access these special
<tt class=literal>Class</tt> objects through the <tt class=literal>TYPE</tt> field of each
of the primitive wrapper classes.  For example, the static
variable <tt class=literal>Boolean.TYPE</tt> holds the <tt class=literal>Class</tt> object that
represents the <tt class=literal>boolean</tt> data type.  And the
<tt class=literal>Float.TYPE</tt> static variable holds the <tt class=literal>Class</tt>
object that represents the <tt class=literal>float</tt> data type.  A new class
<tt class=literal>Void</tt> has been added, and <tt class=literal>Void.TYPE</tt>
represents the type <tt class=literal>void</tt>.

<p class=para>
The changes described in the paragraph above are all changes
to the Java class libraries, rather than changes to the Java
language itself.  The language change is a related one,
however.  In Java 1.1, you can obtain the <tt class=literal>Class</tt>
object for any class or primitive type by following the
class name or type name by a period and the <tt class=literal>class</tt>
keyword.  For example, <tt class=literal>String.class</tt> evaluates to the
<tt class=literal>Class</tt> object that represents the <tt class=literal>java.lang.String</tt>
class.  Similarly, <tt class=literal>int.class</tt> evaluates to the
special class object <tt class=literal>Integer.TYPE</tt> that represents
the <tt class=literal>int</tt> data type.

<p class=para>
In Java 1.0, it is much more cumbersome (and less
efficient) to obtain a <tt class=literal>Class</tt> object--you have to use the
static <tt class=literal>Class.forName()</tt> method, so you end up with
expressions like:

<p class=para>
<div class=screen>
<p>
<pre>
Class c = Class.forName("java.util.Vector");
</PRE>
</DIV>

<p class=para>
Where in Java 1.1 you can simply write:

<p class=para>
<div class=screen>
<p>
<pre>
Class c = java.util.Vector.class;
</PRE>
</DIV>

<p class=para>
Remember that <tt class=literal>class</tt> is a keyword in Java, so this
syntax does not simply constitute a reference to a static
variable pre-defined in each class.

<p class=para>
This new syntax is meant to simplify use of the new
reflection facilities in Java 1.1.  It is also necessary
because using <tt class=literal>Class.forName()</tt> with inner classes
requires knowledge of the way the compiler transforms the
names of inner classes (i.e., where it replaces "<tt class=literal>.</tt>"
with "<tt class=literal>$</tt>").  While compiler writers need to know
about these transformation rules, Java programmers should
not.  Thus the new <tt class=literal>.class</tt> syntax provides a way to
obtain a <tt class=literal>Class</tt> object that works with inner classes,
as well as with top-level classes and interfaces.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch05_05.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch06_01.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Anonymous Classes</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Applets</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
