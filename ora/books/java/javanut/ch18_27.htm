<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 18] 18.27 java.awt.Graphics (JDK 1.0)</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 16:10:06 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch18_26.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 18<br>The java.awt Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch18_28.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-18-SECT-27">18.27 java.awt.Graphics (JDK 1.0)</A></h2>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-18-SECT-27.1"></A></h3>
</DIV>

<p class=para>
This abstract class defines a device-independent interface
to graphics.  It specifies methods for doing 
line drawing, area filling,
image painting, area copying, and graphics output clipping.
Specific subclasses of <tt class=literal>Graphics</tt> are implemented for
different platforms and different graphics output devices.  A
<tt class=literal>Graphics</tt> object cannot be created directly through a
constructor--it must be obtained with the
<tt class=literal>getGraphics()</tt> method of a <tt class=literal>Component</tt> or an
<tt class=literal>Image</tt>, or copied from an existing <tt class=literal>Graphics</tt>
object with <tt class=literal>create()</tt>.  When a <tt class=literal>Graphics</tt>
object is no
longer needed, you should call <tt class=literal>dispose()</tt> to free up
the window system resources it uses.

<div class=screen>
<p>
<pre>
public abstract class <tt class=literal>Graphics</tt> extends Object {
    // <tt class=literal>Protected Constructor</tt>
            protected <tt class=literal>Graphics</tt>();
    // <tt class=literal>Public Instance Methods</tt>
            public abstract void <tt class=literal>clearRect</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>);
            public abstract void <tt class=literal>clipRect</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>);
            public abstract void <tt class=literal>copyArea</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>, int <tt class=literal>dx</tt>, int <tt class=literal>dy</tt>);
            public abstract Graphics <tt class=literal>create</tt>();
            public Graphics <tt class=literal>create</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>);
            public abstract void <tt class=literal>dispose</tt>();
            public void <tt class=literal>draw3DRect</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>, boolean <tt class=literal>raised</tt>);
            public abstract void <tt class=literal>drawArc</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>, int <tt class=literal>startAngle</tt>, int <tt class=literal>arcAngle</tt>);
            public void <tt class=literal>drawBytes</tt>(byte[] <tt class=literal>data</tt>, int <tt class=literal>offset</tt>, int <tt class=literal>length</tt>, int <tt class=literal>x</tt>, int <tt class=literal>y</tt>);
            public void <tt class=literal>drawChars</tt>(char[] <tt class=literal>data</tt>, int <tt class=literal>offset</tt>, int <tt class=literal>length</tt>, int <tt class=literal>x</tt>, int <tt class=literal>y</tt>);
            public abstract boolean <tt class=literal>drawImage</tt>(Image <tt class=literal>img</tt>, int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, ImageObserver <tt class=literal>observer</tt>);
            public abstract boolean <tt class=literal>drawImage</tt>(Image <tt class=literal>img</tt>, int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>, ImageObserver <tt class=literal>observer</tt>);
            public abstract boolean <tt class=literal>drawImage</tt>(Image <tt class=literal>img</tt>, int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, Color <tt class=literal>bgcolor</tt>, ImageObserver <tt class=literal>observer</tt>);
            public abstract boolean <tt class=literal>drawImage</tt>(Image <tt class=literal>img</tt>, int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>, Color <tt class=literal>bgcolor</tt>, 
            public abstract boolean <tt class=literal>drawImage</tt>'u'ImageObserver <tt class=literal>observer</tt>);
        <b>1.1</b>  public abstract boolean <tt class=literal>drawImage</tt>(Image <tt class=literal>img</tt>, int <tt class=literal>dx1</tt>, int <tt class=literal>dy1</tt>, int <tt class=literal>dx2</tt>, int <tt class=literal>dy2</tt>, int <tt class=literal>sx1</tt>, int <tt class=literal>sy1</tt>, 
        <b>1.1</b>  public abstract boolean <tt class=literal>drawImage</tt>'u'int <tt class=literal>sx2</tt>, int <tt class=literal>sy2</tt>, ImageObserver <tt class=literal>observer</tt>);
        <b>1.1</b>  public abstract boolean <tt class=literal>drawImage</tt>(Image <tt class=literal>img</tt>, int <tt class=literal>dx1</tt>, int <tt class=literal>dy1</tt>, int <tt class=literal>dx2</tt>, int <tt class=literal>dy2</tt>, int <tt class=literal>sx1</tt>, int <tt class=literal>sy1</tt>, 
        <b>1.1</b>  public abstract boolean <tt class=literal>drawImage</tt>'u'int <tt class=literal>sx2</tt>, int <tt class=literal>sy2</tt>, Color <tt class=literal>bgcolor</tt>, ImageObserver <tt class=literal>observer</tt>);
            public abstract void <tt class=literal>drawLine</tt>(int <tt class=literal>x1</tt>, int <tt class=literal>y1</tt>, int <tt class=literal>x2</tt>, int <tt class=literal>y2</tt>);
            public abstract void <tt class=literal>drawOval</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>);
            public abstract void <tt class=literal>drawPolygon</tt>(int[] <tt class=literal>xPoints</tt>, int[] <tt class=literal>yPoints</tt>, int <tt class=literal>nPoints</tt>);
            public void <tt class=literal>drawPolygon</tt>(Polygon <tt class=literal>p</tt>);
        <b>1.1</b>  public abstract void <tt class=literal>drawPolyline</tt>(int[] <tt class=literal>xPoints</tt>, int[] <tt class=literal>yPoints</tt>, int <tt class=literal>nPoints</tt>);
            public void <tt class=literal>drawRect</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>);
            public abstract void <tt class=literal>drawRoundRect</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>, int <tt class=literal>arcWidth</tt>, int <tt class=literal>arcHeight</tt>);
            public abstract void <tt class=literal>drawString</tt>(String <tt class=literal>str</tt>, int <tt class=literal>x</tt>, int <tt class=literal>y</tt>);
            public void <tt class=literal>fill3DRect</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>, boolean <tt class=literal>raised</tt>);
            public abstract void <tt class=literal>fillArc</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>, int <tt class=literal>startAngle</tt>, int <tt class=literal>arcAngle</tt>);
            public abstract void <tt class=literal>fillOval</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>);
            public abstract void <tt class=literal>fillPolygon</tt>(int[] <tt class=literal>xPoints</tt>, int[] <tt class=literal>yPoints</tt>, int <tt class=literal>nPoints</tt>);
            public void <tt class=literal>fillPolygon</tt>(Polygon <tt class=literal>p</tt>);
            public abstract void <tt class=literal>fillRect</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>);
            public abstract void <tt class=literal>fillRoundRect</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>, int <tt class=literal>arcWidth</tt>, int <tt class=literal>arcHeight</tt>);
            public void <tt class=literal>finalize</tt>();  //<tt class=literal> Overrides Object</tt>
        <b>1.1</b>  public abstract Shape <tt class=literal>getClip</tt>();
        <b>1.1</b>  public abstract Rectangle <tt class=literal>getClipBounds</tt>();
        #   public Rectangle <tt class=literal>getClipRect</tt>();
            public abstract Color <tt class=literal>getColor</tt>();
            public abstract Font <tt class=literal>getFont</tt>();
            public FontMetrics <tt class=literal>getFontMetrics</tt>();
            public abstract FontMetrics <tt class=literal>getFontMetrics</tt>(Font <tt class=literal>f</tt>);
        <b>1.1</b>  public abstract void <tt class=literal>setClip</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>, int <tt class=literal>width</tt>, int <tt class=literal>height</tt>);
        <b>1.1</b>  public abstract void <tt class=literal>setClip</tt>(Shape <tt class=literal>clip</tt>);
            public abstract void <tt class=literal>setColor</tt>(Color <tt class=literal>c</tt>);
            public abstract void <tt class=literal>setFont</tt>(Font <tt class=literal>font</tt>);
            public abstract void <tt class=literal>setPaintMode</tt>();
            public abstract void <tt class=literal>setXORMode</tt>(Color <tt class=literal>c1</tt>);
            public String <tt class=literal>toString</tt>();  //<tt class=literal> Overrides Object</tt>
            public abstract void <tt class=literal>translate</tt>(int <tt class=literal>x</tt>, int <tt class=literal>y</tt>);
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-18-SECT-27.2">Passed To:</A></h3>

<p class=para>
<tt class=literal>Canvas.paint(), 
Component.paint(), 
Component.paintAll(), 
Component.print(), 
Component.printAll(), 
Component.update(), 
ComponentPeer.paint(), 
ComponentPeer.print(), 
Container.paint(), 
Container.paintComponents(), 
Container.print(), 
Container.printComponents(), 
PropertyEditor.paintValue(), 
PropertyEditorSupport.paintValue(), 
ScrollPane.printComponents()</tt>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-18-SECT-27.3">Returned By:</A></h3>

<p class=para>
<tt class=literal>Component.getGraphics(), 
ComponentPeer.getGraphics(), 
Graphics.create(), 
Image.getGraphics(), 
PrintJob.getGraphics()</tt>

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch18_26.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch18_28.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>java.awt.Frame (JDK 1.0)</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>java.awt.GridBagConstraints (JDK 1.0)</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
