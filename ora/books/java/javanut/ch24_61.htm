<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 24] 24.61 java.io.StreamTokenizer (JDK 1.0)</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 16:23:02 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch24_60.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 24<br>The java.io Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch24_62.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-24-SECT-61">24.61 java.io.StreamTokenizer (JDK 1.0)</A></h2>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-24-SECT-61.1"></A></h3>
</DIV>

<p class=para>
This class performs lexical analysis of a
specified input stream and breaks the input up into tokens.
It can be extremely useful when writing simple parsers.

<p class=para>
<tt class=literal>nextToken()</tt> returns the next token in the
stream--this is either one of the constants defined by
the class (which represent end-of-file, end-of-line, a
parsed floating-point number, and a parsed word) or a
character value. <tt class=literal>pushBack()</tt> "pushes" the token back
onto the stream, so that it is returned by the next
call to <tt class=literal>nextToken()</tt>. The public variables
<tt class=literal>sval</tt> and <tt class=literal>nval</tt> contain the string and numeric
values (if applicable) of the most recently read token. They
are applicable when the returned token is <tt class=literal>TT_WORD</tt>
and <tt class=literal>TT_NUMBER</tt>. <tt class=literal>lineno()</tt> returns the current
line number.

<p class=para>
The remaining methods allow you to specify how tokens are
recognized.  <tt class=literal>wordChars()</tt>
specifies a range of characters that should be treated as
parts of words. <tt class=literal>whitespaceChars()</tt> specifies a range
of characters that serve to delimit tokens.
<tt class=literal>ordinaryChars()</tt> and <tt class=literal>ordinaryChar()</tt> specify
characters that are never part of tokens and should be
returned as-is. <tt class=literal>resetSyntax()</tt> makes all characters
"ordinary."  
<tt class=literal>eolIsSignificant()</tt> specifies whether end-of-line is
significant. If so, the <tt class=literal>TT_EOL</tt> constant is
returned for end-of-lines. Otherwise they are treated
as whitespace.

<p class=para>
<tt class=literal>commentChar()</tt> specifies a character that begins a
comment that lasts until the end of the line. No characters
in the comment are returned.
<tt class=literal>slashStarComments()</tt> and <tt class=literal>slashSlashComments()</tt>
specify whether the <tt class=literal>StreamTokenizer</tt> should recognize
C and C++-style comments. If so, no parts of the comments
are returned as tokens.
<tt class=literal>quoteChar()</tt> specifies a character used to delimit
strings. When a string token is parsed, the quote character
is returned as the token value, and the body of the
string is stored in the <tt class=literal>sval</tt> variable.
<tt class=literal>lowerCaseMode()</tt> specifies whether <tt class=literal>TT_WORD</tt>
tokens should be converted to all lowercase characters
before being stored in <tt class=literal>sval</tt>.
<tt class=literal>parseNumbers()</tt> specifies
that the <tt class=literal>StreamTokenizer</tt> should recognize and return
double-precision floating-point number tokens.

<div class=screen>
<p>
<pre>
public class <tt class=literal>StreamTokenizer</tt> extends Object {
    // <tt class=literal>Public Constructors</tt>
        #   public <tt class=literal>StreamTokenizer</tt>(InputStream <tt class=literal>is</tt>);
        <b>1.1</b>  public <tt class=literal>StreamTokenizer</tt>(Reader <tt class=literal>r</tt>);
    // <tt class=literal>Constants</tt>
            public static final int <tt class=literal>TT_EOF</tt>;
            public static final int <tt class=literal>TT_EOL</tt>;
            public static final int <tt class=literal>TT_NUMBER</tt>;
            public static final int <tt class=literal>TT_WORD</tt>;
    // <tt class=literal>Public Instance Variables</tt>
            public double <tt class=literal>nval</tt>;
            public String <tt class=literal>sval</tt>;
            public int <tt class=literal>ttype</tt>;
    // <tt class=literal>Public Instance Methods</tt>
            public void <tt class=literal>commentChar</tt>(int <tt class=literal>ch</tt>);
            public void <tt class=literal>eolIsSignificant</tt>(boolean <tt class=literal>flag</tt>);
            public int <tt class=literal>lineno</tt>();
            public void <tt class=literal>lowerCaseMode</tt>(boolean <tt class=literal>fl</tt>);
            public int <tt class=literal>nextToken</tt>() throws IOException;
            public void <tt class=literal>ordinaryChar</tt>(int <tt class=literal>ch</tt>);
            public void <tt class=literal>ordinaryChars</tt>(int <tt class=literal>low</tt>, int <tt class=literal>hi</tt>);
            public void <tt class=literal>parseNumbers</tt>();
            public void <tt class=literal>pushBack</tt>();
            public void <tt class=literal>quoteChar</tt>(int <tt class=literal>ch</tt>);
            public void <tt class=literal>resetSyntax</tt>();
            public void <tt class=literal>slashSlashComments</tt>(boolean <tt class=literal>flag</tt>);
            public void <tt class=literal>slashStarComments</tt>(boolean <tt class=literal>flag</tt>);
            public String <tt class=literal>toString</tt>();  //<tt class=literal> Overrides Object</tt>
            public void <tt class=literal>whitespaceChars</tt>(int <tt class=literal>low</tt>, int <tt class=literal>hi</tt>);
            public void <tt class=literal>wordChars</tt>(int <tt class=literal>low</tt>, int <tt class=literal>hi</tt>);
}
</PRE>
</DIV>

<p class=para>
</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch24_60.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch24_62.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>java.io.StreamCorruptedException (JDK 1.1)</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>java.io.StringBufferInputStream (JDK 1.0; Deprecated.)</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
