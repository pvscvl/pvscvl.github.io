<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 3] 3.4 Class Methods</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 15:49:42 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 3<br>Classes and Objects in Java</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch03_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-3-SECT-4">3.4 Class Methods</A></h2>

<p class=para>
<a name="CH3.CLASS.METHOD1"></A><a name="CH3.METHODS2"></A>Let's define a new method in our <tt class=literal>Circle</tt>
class.  This one tests whether a specified point falls within
the defined circle:

<div class=screen>
<p>
<pre>
public class Circle {
    double x, y, r;
    // is point (a,b) inside this circle?  
    public boolean isInside(double a, double b)
    {
        double dx = a - x;
        double dy = b - y;
        double distance = Math.sqrt(dx*dx + dy*dy);
        if (distance &lt; r) return true;
        else return false;
    }
        .
        .  // Constructor and other methods omitted.
        .
}
</PRE>
</DIV>

<p class=para>
What's this <tt class=literal>Math.sqrt()</tt> thing?  It looks like a
method call and, given its name and its context, we can guess
that it is computing a square root.  But the method calls
we've discussed are done through an object.  <tt class=literal>Math</tt>
isn't the name of an object that we've declared, and there
aren't any global objects in Java, so this must be a kind of
method call that we haven't seen before.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-3-SECT-4.1">static Methods</A></h3>

<p class=para>
What's going on here is that <tt class=literal>Math</tt> is the name of a
class.  <tt class=literal>sqrt()</tt> is the name of a <i class=emphasis>class method</I>
(or static method) defined in <tt class=literal>Math</tt>.  It differs from the <i class=emphasis>instance
methods</I>, such as <tt class=literal>area()</tt> in <tt class=literal>Circle</tt>, that
we've seen so far.

<p class=para>
Class methods are like class variables in a number of ways:

<p>
<ul class=itemizedlist>
<li class=listitem>Class methods are declared with the <tt class=literal>static</tt> keyword.

<p>
<li class=listitem>Class methods are often referred to as "static methods."

<p>
<li class=listitem>Class methods are invoked through the class rather than
through an instance.  (Although within the class they may be
invoked by method name alone.)

<p>
<li class=listitem>Class methods are the closest Java comes to "global"
methods.  Because they must be referred to by the class name,
there is no danger of name conflicts.

<p>
</UL>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-3-SECT-4.2">No this</A></h3>

<p class=para>
Class methods differ from instance methods in one
important way: they are not passed an implicit <tt class=literal>this</tt>
reference.  Thus, these <tt class=literal>this</tt>-less methods are not
associated with any instance of the class and may not refer
to any instance variables or invoke instance methods.

<p class=para>
Since class methods are not passed a <tt class=literal>this</tt> reference,
and are not invoked through an object, they are the closest
thing that Java offers to the "normal" C procedures that you
may be accustomed to, and may therefore seem familiar and comforting.
If you're sick and tired of this object-oriented business,
it is perfectly possible to write complete Java programs
using only class methods, although this does defeat
an important purpose of using the language!

<p class=para>
But don't think that class methods are somehow
cheating--there are perfectly good reasons to declare a
method <tt class=literal>static</tt>.  And indeed, there are classes like
<tt class=literal>Math</tt> that declare all their methods (and variables)
<tt class=literal>static</tt>.  Since <tt class=literal>Math</tt> is a collection of
functions that operate on floating-point numbers, which are
a primitive type, there are no objects involved, and no need
for instance methods.  <tt class=literal>System</tt> is another class that
defines only class methods--it provides a varied collection of
system functions for which there is no appropriate object
framework. 

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-3-SECT-4.3">A Class Method for Circles</A></h3>

<p class=para>
<a href="#JNUT2-CH-3-EX-5">Example 3.5</A>
shows two (overloaded) definitions of a method for our
<tt class=literal>Circle</tt> class.  One is an instance method and one is a
class method.

<div class=example>
<h4 class=example><a class="TITLE" name="JNUT2-CH-3-EX-5">Example 3.5: A Class Method and an Instance Method</A></h4>

<div class=screen>
<p>
<pre>
public class Circle {
    public double x, y, r;
    // An instance method.  Returns the bigger of two circles.
    public Circle bigger(Circle c) { 
        if (c.r &gt; r) return c; else return this; 
    }
    // A class method.  Returns the bigger of two circles.
    public static Circle bigger(Circle a, Circle b) {
        if (a.r &gt; b.r) return a; else return b;
    }
        .
        .  // Other methods omitted here.
        .
}
</PRE>
</DIV>

</DIV>

<p class=para>
You would invoke the instance method like this:

<div class=screen>
<p>
<pre>
Circle a = new Circle(2.0);
Circle b = new Circle(3.0);
Circle c = a.bigger(b);         // or, b.bigger(a);
</PRE>
</DIV>

<p class=para>
And you would invoke the class method like this:

<div class=screen>
<p>
<pre>
Circle a = new Circle(2.0);
Circle b = new Circle(3.0);
Circle c = Circle.bigger(a,b);
</PRE>
</DIV>

<p class=para>
Neither of these is the "correct" way to implement this
method.  One or the other will seem more natural, depending
on circumstances.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-3-SECT-4.4">A Mystery Explained</A></h3>

<p class=para>
Now that we understand class variables, instance variables,
class methods, and instance methods, we are in a position to
explore that mysterious method call we saw in our very first
Java "Hello World" example:

<div class=screen>
<p>
<pre>
System.out.println("Hello world!");
</PRE>
</DIV>

<p class=para>
One hypothesis is that <tt class=literal>println()</tt> is a class method
in a class named <tt class=literal>out</tt>, which is in a package named <tt class=literal>System</tt>.
Syntactically, this is perfectly reasonable (except perhaps
that class names always seem to be capitalized by
convention, and <tt class=literal>out</tt> isn't capitalized).  But if you
look at the API documentation, you'll find that
<tt class=literal>System</tt> is not a package name; it is the name of a class
(which is in the <tt class=literal>java.lang</tt> package, by the way).
Can you figure it out?

<p class=para>
Here's the story: <tt class=literal>System</tt> is a class.  It has a class
variable named <tt class=literal>out</tt>.  <tt class=literal>out</tt> refers to an object
of type <tt class=literal>PrintStream</tt>.  The object <tt class=literal>System.out</tt>
has an instance method named <tt class=literal>println()</tt>.  Mystery
solved!

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-3-SECT-4.5">Static Initializers</A></h3>

<p class=para>
<a name="CH3.INITIALIZERS1"></A><a name="CH3.STATIC1"></A><a name="CH3.CLASS.VARIAB2"></A><a name="CH3.INSTANCE.VAR1"></A><a name="CH3.VARIABLES2"></A>Both class and instance variables can have initializers
attached to their declarations.  For example:

<div class=screen>
<p>
<pre>
static int num_circles = 0;
float r = 1.0;
</PRE>
</DIV>

<p class=para>
Class variables are initialized when the class is first
loaded.  Instance variables are initialized when an object
is created.

<p class=para>
Sometimes we need more complex initialization than is
possible with these simple variable initializers.  For
instance variables, there are constructor methods, which are
run when a new instance of the class is created.  Java also
allows you to write an initialization method for class
variables.  Such a method is called a <i class=emphasis>static
initializer</I>.

<p class=para>
The syntax of static initializers gets kind of bizarre.
Consider that a static initializer is invoked automatically
by the system when the class is loaded.  Thus there are no
meaningful arguments that can be passed to it (unlike the
arguments we can pass to a constructor method when creating
a new instance).  There is also no value to return.  So a
static initializer has no arguments and no return value.
Furthermore, it is not really necessary to give it a name,
since the system calls the method automatically for us.
What part of a method declaration is left?  Just the
<tt class=literal>static</tt> keyword and the curly brackets!

<p class=para>
<a href="#JNUT2-CH-3-EX-6">Example 3.6</A> 
shows a class declaration with a static initializer.
Notice that the class contains a regular static variable
initializer of the kind we've seen before, and also a static
initializer--an arbitrary block of code between <tt class=literal>{</tt>
and <tt class=literal>}</tt>.

<div class=example>
<h4 class=example><a class="TITLE" name="JNUT2-CH-3-EX-6">Example 3.6: A Static Initializer</A></h4>

<div class=screen>
<p>
<pre>
// We can draw the outline of a circle using trigonometric functions.
// Trigonometry is slow though, so we pre-compute a bunch of values.
public class Circle {
    // Here are our static lookup tables, and their own simple initializers.
    static private double sines[] = new double[1000];
    static private double cosines[] = new double[1000];
    // Here's a static initializer "method" that fills them in.  
    // Notice the lack of any method declaration!
    static {
        double x, delta_x;
        int i;
        delta_x = (Circle.PI/2)/(1000-1);
        for(i = 0, x = 0.0; i &lt; 1000; i++, x += delta_x) {
            sines[i] = Math.sin(x);
            cosines[i] = Math.cos(x);
        }
    }
        .
        .  // The rest of the class omitted.
        .
}
</PRE>
</DIV>

</DIV>

<p class=para>
The syntax gets even a little stranger than this.  Java
allows any number of static initializer blocks of code to
appear within a class definition.  What the compiler
actually does is to internally produce a single class
initialization routine that combines all the static variable
initializers and all of the static initializer blocks of
code, in the order that they appear in the class
declaration.  This single initialization procedure is run
automatically, one time only, when the class is first
loaded.

<p class=para>
One common use of static initializers is for classes that
implement <tt class=literal>native</tt> methods--i.e., methods written in
C.  The static initializer for such a class should call
<tt class=literal>System.load()</tt> or <tt class=literal>System.loadLibrary()</tt> to
read in the native library that implements these native
methods.  

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-3-SECT-4.6">Instance Initializers</A></h3>

<p class=para>
In Java 1.1, a class definition may also include <i class=emphasis>instance
initializers</I>.  These look like static initializers, but
without the <tt class=literal>static</tt> keyword.  An instance initializer
is like a constructor: it runs when an instance of the class
is created.  We'll see more about instance initializers in
<a href="ch05_01.htm">Chapter 5, <i>Inner Classes and Other New Language Features</i></A>, <i class=emphasis>Inner Classes and Other New Language
Features</I>.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_03.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch03_05.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Class Variables</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Object Destruction</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
