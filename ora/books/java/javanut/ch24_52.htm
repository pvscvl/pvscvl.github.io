<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 24] 24.52 java.io.PrintStream (JDK 1.0)</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 16:22:45 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch24_51.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 24<br>The java.io Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch24_53.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-24-SECT-52">24.52 java.io.PrintStream (JDK 1.0)</A></h2>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-24-SECT-52.1"></A></h3>
</DIV>

<p class=para>
This class is a <tt class=literal>FilterOutputStream</tt> that implements a
number of methods for displaying textual representation of
Java primitive data types. The <tt class=literal>print()</tt> methods
output a standard textual representation of each data type.
The <tt class=literal>println()</tt> methods do the same, and follow that
representation with a newline. The methods convert various
Java primitive types to <tt class=literal>String</tt> representations and
then output the resulting string. When an <tt class=literal>Object</tt> is
passed to a <tt class=literal>print()</tt> or <tt class=literal>println()</tt>, it is
converted to a <tt class=literal>String</tt> by calling its
<tt class=literal>toString()</tt> method.

<p class=para>
<tt class=literal>PrintStream</tt> is the <tt class=literal>OutputStream</tt> type that
makes it easiest to output text. As such, it is the most
commonly used of the output streams. The <tt class=literal>System.out</tt>
variable is a <tt class=literal>PrintStream</tt>.

<p class=para>
Note that in Java 1.0 this class does not handle Unicode
characters correctly--it discards the top 8 bits of all
16-bit characters, and thus works only with Latin-1
(ISO8859-1) characters.  Although this problem has been
fixed in Java 1.1, <tt class=literal>PrintStream</tt> has been superseded
in Java 1.1 with <tt class=literal>PrintWriter</tt>.  The constructors of
this class have been deprecated, but the class itself has
not, because it is still used by the <tt class=literal>System.out</tt>
and <tt class=literal>System.err</tt> standard output streams.

<p class=para>
<tt class=literal>PrintStream</tt> and its <tt class=literal>PrintWriter</tt>
replacement output textual representations of Java data
types.  Use <tt class=literal>DataOutputStream</tt> to output binary
representations of data.

<div class=screen>
<p>
<pre>
public class <tt class=literal>PrintStream</tt> extends FilterOutputStream {
    // <tt class=literal>Public Constructors</tt>
        #   public <tt class=literal>PrintStream</tt>(OutputStream <tt class=literal>out</tt>);
        #   public <tt class=literal>PrintStream</tt>(OutputStream <tt class=literal>out</tt>, boolean <tt class=literal>autoFlush</tt>);
    // <tt class=literal>Public Instance Methods</tt>
            public boolean <tt class=literal>checkError</tt>();
            public void <tt class=literal>close</tt>();  //<tt class=literal> Overrides FilterOutputStream</tt>
            public void <tt class=literal>flush</tt>();  //<tt class=literal> Overrides FilterOutputStream</tt>
            public void <tt class=literal>print</tt>(boolean <tt class=literal>b</tt>);
            public void <tt class=literal>print</tt>(char <tt class=literal>c</tt>);
            public void <tt class=literal>print</tt>(int <tt class=literal>i</tt>);
            public void <tt class=literal>print</tt>(long <tt class=literal>l</tt>);
            public void <tt class=literal>print</tt>(float <tt class=literal>f</tt>);
            public void <tt class=literal>print</tt>(double <tt class=literal>d</tt>);
            public void <tt class=literal>print</tt>(char[] <tt class=literal>s</tt>);
            public void <tt class=literal>print</tt>(String <tt class=literal>s</tt>);
            public void <tt class=literal>print</tt>(Object <tt class=literal>obj</tt>);
            public void <tt class=literal>println</tt>();
            public void <tt class=literal>println</tt>(boolean <tt class=literal>x</tt>);
            public void <tt class=literal>println</tt>(char <tt class=literal>x</tt>);
            public void <tt class=literal>println</tt>(int <tt class=literal>x</tt>);
            public void <tt class=literal>println</tt>(long <tt class=literal>x</tt>);
            public void <tt class=literal>println</tt>(float <tt class=literal>x</tt>);
            public void <tt class=literal>println</tt>(double <tt class=literal>x</tt>);
            public void <tt class=literal>println</tt>(char[] <tt class=literal>x</tt>);
            public void <tt class=literal>println</tt>(String <tt class=literal>x</tt>);
            public void <tt class=literal>println</tt>(Object <tt class=literal>x</tt>);
            public void <tt class=literal>write</tt>(int <tt class=literal>b</tt>);  //<tt class=literal> Overrides FilterOutputStream</tt>
            public void <tt class=literal>write</tt>(byte[] <tt class=literal>buf</tt>, int <tt class=literal>off</tt>, int <tt class=literal>len</tt>);  //<tt class=literal> Overrides FilterOutputStream</tt>
    // <tt class=literal>Protected Instance Methods</tt>
        <b>1.1</b>  protected void <tt class=literal>setError</tt>();
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-24-SECT-52.2">Hierarchy:</A></h3>

<p class=para>
Object->OutputStream->FilterOutputStream->PrintStream

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-24-SECT-52.3">Passed To:</A></h3>

<p class=para>
Component.list(), 
Container.list(), 
Properties.list(), 
System.setErr(), 
System.setOut(), 
Throwable.printStackTrace()

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-24-SECT-52.4">Type Of:</A></h3>

<p class=para>
System.err, 
System.out

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch24_51.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch24_53.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>java.io.PipedWriter (JDK 1.1)</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>java.io.PrintWriter (JDK 1.1)</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
