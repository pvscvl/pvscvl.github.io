<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 5] Inner Classes and Other New Language Features</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 15:52:14 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="Content-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_12.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 5</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch05_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="JNUT2-CH-5">5. Inner Classes and Other New Language Features</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
An Overview of Inner Classes<br>
<a href="ch05_02.htm">Nested Top-Level Classes and Interfaces</A><br>
<a href="ch05_03.htm">Member Classes</A><br>
<a href="ch05_04.htm">Local Classes</A><br>
<a href="ch05_05.htm">Anonymous Classes</A><br>
<a href="ch05_06.htm">Other New Features of Java 1.1</A><br>

<p>
</DIV>

<p class=para>
The largest enhancement to the Java language in Java 1.1 is
something called
"inner classes."  With this addition to the language,
classes can be defined as members of other classes, just as
fields and methods can be defined within classes.
Classes can also be defined within a block of Java code, just
as local variables can be defined within a block of code.

<p class=para>
<a name="CH5.INNER.CLASSE1"></A>From one point of view, the addition of inner classes
regularizes the syntax of Java.  From another point of view,
though,
inner classes create quite a few special cases, and a
confusing array of new rules.  In practice, however, if you
avoid the obscure and pathological cases, inner classes prove
to be an elegant and extremely useful addition to the language.
Their use is particularly common in conjunction with the new
event model defined by the AWT in Java 1.1.

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-5-SECT-1">5.1 An Overview of Inner Classes</A></h2>

<p class=para>
Java 1.0 allowed classes and interfaces to be defined in
exactly one context: at the "top level," as members of
packages.  Java 1.1 adds one new type of top-level classes
and interfaces, and adds three new types of "inner classes,"
as outlined below.  Later sections of this chapter describe
each of these new types of classes and interfaces in more detail and
present examples of their use.

<p>
<dl class=variablelist>
<dt class=varlistentry><i class=emphasis>Nested top-level classes and interfaces</I><br>
<dd>

<p class=para>
A <i class=emphasis>nested top-level</I> class or interface is defined as a
static member of an enclosing top-level class or interface.
The definition of a nested top-level class uses the
<tt class=literal>static</tt> modifier, just as the definition of a static
method or static field does.  Nested interfaces are
implicitly static (though they may be declared
<tt class=literal>static</tt> to make this explicit) and so are always
top-level. A nested top-level class or interface behaves
just like a "normal" class or interface that is a member of
a package.  The difference is that the name of a nested
top-level class or interface includes the name of the class
in which it is defined.  Thus, a <tt class=literal>LinkedList</tt> class
could define a nested top-level interface <tt class=literal>Linkable</tt>.
This interface would be referred to as
<tt class=literal>LinkedList.Linkable</tt>.  Nested top-level classes and
interfaces are typically used as a convenient way to group
related classes.

<p>
<dt class=varlistentry><i class=emphasis>Member classes</I><br>
<dd>

<p class=para>
A <i class=emphasis>member class</I> is also defined as a member of an
enclosing class, but unlike a nested top-level class, it is
not defined with the <tt class=literal>static</tt> modifier.  This means
that it is an inner class, rather than a top-level class.
Nested interfaces are always implicitly <tt class=literal>static</tt>, so
they are always top-level; there is no such thing as a
"member interface," or any kind of "inner interface."
In many ways, a member class is analogous to the other
members--the instance fields and methods--of a class.
Member classes are of interest because the code within a
member class can implicitly refer to any of the fields and
methods, including <tt class=literal>private</tt> fields and methods, of its
enclosing class.
[1]
Every instance of a member class is associated with an
enclosing instance of the class that defines it.  Because of
the requirement for this enclosing instance, several new
pieces of syntax have been introduced into the Java
language.

<blockquote class=footnote>
<p class=para>[1] 
Unfortunately, in Java 1.1 and 1.1.1 there are compiler
bugs that prevent access to the <tt class=literal>private</tt> fields and
methods of enclosing classes from working correctly.  It is
not yet clear when these bugs will be fixed.  So while
access to <tt class=literal>private</tt> members of enclosing classes is
part of the inner class specification, it is a feature that
is currently best avoided.  If a field or method must be
visible to nested classes, you should give it package
visibility rather than <tt class=literal>private</tt> visibility.
</blockquote>
<p>
<dt class=varlistentry><i class=emphasis>Local classes</I><br>
<dd>

<p class=para>
A <i class=emphasis>local class</I> is an inner class defined within a block
of Java code; it is visible only within that block.
Interfaces can not be defined locally.  Because a local
class is defined within a block of code, it is analogous,
in some ways, to a local variable.  Local classes are not
member classes, but can still use the fields and methods of
enclosing classes.  More important, however, the code
within a local class definition can use any <tt class=literal>final</tt>
local variables or parameters that are accessible in the
scope of the block that defines the class.
Local classes are useful primarily as "adapter
classes" and are commonly used with the new event-handling
model required by the Java 1.1 AWT and by JavaBeans.  For
example, a block of Java 1.1 code that creates a
<tt class=literal>java.awt.Button</tt> object could use a local class to
define a simple implementation of the
<tt class=literal>java.awt.event.ActionListener</tt> interface.  Then it
could instantiate this simple implementation and pass the
resulting object to the button's <tt class=literal>addActionListener()</tt>
method, thereby connecting the button to the "callback" code
that is executed when the button is pressed.

<p>
<dt class=varlistentry><i class=emphasis>Anonymous classes</I><br>
<dd>

<p class=para>
An <i class=emphasis>anonymous class</I> is an extension to the local class
concept described above.  Instead of declaring a local class
with one Java statement, and then instantiating and using it
in another statement, an anonymous class combines the two
steps in a single Java expression.  An anonymous class, as
you might guess, does not have a name.  And because it is
instantiated in the same expression that defines it, it can
only be instantiated once.  Except for these differences,
anonymous classes are quite similar to local classes in
behavior and use.  Interfaces cannot be defined anonymously,
of course.  When writing a simple adapter class, the choice
between a named local class and an unnamed anonymous class
typically comes down to a matter of style and code clarity,
rather than any difference in functionality.</DL>
<p class=para>
<a href="#JNUT2-CH-5-TAB-1">Table 5.1</A>
summarizes the types of classes and interfaces that can be
defined in Java 1.1; the remaining sections of the chapter
document each type in more detail.

<p>
<div class=table>
<table border>
<caption><a class="TITLE" name="JNUT2-CH-5-TAB-1">Table 5.1: Inner Class Summary</A></CAPTION>
<tr class=row>
<th colspan=2 align="center">Class Type</TH>
<th align="left">Description</TH>
</TR>
<tr class=row>
<td rowspan=2 align="left">

<p class=para>
Top-level classes and interfaces</TD>
<td align="left">

<p class=para>
Package member class or interface</TD>
<td align="left">

<p class=para>
An ordinary class or interface that is a direct member of a package.
The basic Java class understood by the VM.  All nested and
inner classes are converted to this type.</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
Nested top-level class or interface</TD>
<td align="left">

<p class=para>
A conveniently nested top-level class or interface.
Must be declared <tt class=literal>static</tt> within another top-level
class or interface.  (Nested interfaces are implicitly
<tt class=literal>static</tt>.)
May use the <tt class=literal>static</tt> members of its containing type.</TD>
</TR>
<tr class=row>
<td rowspan=3 align="left">

<p class=para>
Inner classes</TD>
<td align="left">

<p class=para>
Member class</TD>
<td align="left">

<p class=para>
A class defined as a member (non-<tt class=literal>static</tt>) of another.
Each instance has an enclosing instance, and can use its members.
New syntax for <tt class=literal>this</tt>, <tt class=literal>new</tt>, and <tt class=literal>super</tt>.
Cannot have <tt class=literal>static</tt> members.  Cannot have same name
as a containing class.</TD>
</TR>
<tr class=row>
<td align="left">

<p class=para>
Local class</TD>
<td align="left">

<p class=para>
A class defined in a block of code.
Can use members of enclosing classes and <tt class=literal>final</tt>
local variables and parameters.  New <tt class=literal>this</tt> syntax.
Same restrictions as member classes.</TD>
</TR>
<tr class=row>
<td align="left">Anonymous class</TD>
<td align="left">

<p class=para>
Unnamed class defined within an expression.
Has features of a local class.  Allows a one-shot class to
be defined exactly where needed.
Same restrictions as local class, plus has no name or
constructor.  Only one instance of the class is created.</TD>
</TR>
</TABLE>
<p>
</DIV>
<p class=para>
</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch04_12.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch05_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>New JDK Utilities</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>Nested Top-Level Classes and Interfaces</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
