<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 25] 25.32 java.lang.Integer (JDK 1.0)</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 16:27:06 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch25_31.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 25<br>The java.lang Package</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch25_33.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-25-SECT-32">25.32 java.lang.Integer (JDK 1.0)</A></h2>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-25-SECT-32.1"></A></h3>
</DIV>

<p class=para>
This class provides an immutable object wrapper around the
<tt class=literal>int</tt> primitive data type.  This
class also contains useful minimum and maximum
constants and useful conversion methods.
<tt class=literal>parseInt()</tt> and <tt class=literal>valueOf()</tt> convert a string
to an <tt class=literal>int</tt> or to an <tt class=literal>Integer</tt>,
respectively. Each can take a radix argument to
specify the base that the value is represented in.
<tt class=literal>decode()</tt> also converts a <tt class=literal>String</tt> to an
<tt class=literal>Integer</tt>.  It assumes a hexadecimal number if the
string begins with "0X" or "0x," or an octal
number if the string begins with "0". Otherwise, a decimal number is assumed.

<p class=para>
<tt class=literal>toString()</tt> converts in the other direction, and the
<tt class=literal>static</tt> version takes a radix
argument. <tt class=literal>toBinaryString()</tt>, <tt class=literal>toOctalString()</tt>,
and <tt class=literal>toHexString()</tt> convert an <tt class=literal>int</tt> to a string
using base 2, base 8, and base 16.  These methods treat the
integer as an unsigned value.

<p class=para>
Other routines return the value of an <tt class=literal>Integer</tt> as
various primitive types, and finally, the
<tt class=literal>getInteger()</tt> methods
return the integer value of a named property from the system
property list or the specified default value.

<div class=screen>
<p>
<pre>
public final class <tt class=literal>Integer</tt> extends Number {
    // <tt class=literal>Public Constructors</tt>
            public <tt class=literal>Integer</tt>(int <tt class=literal>value</tt>);
            public <tt class=literal>Integer</tt>(String <tt class=literal>s</tt>) throws NumberFormatException;
    // <tt class=literal>Constants</tt>
            public static final int <tt class=literal>MAX_VALUE</tt>;
            public static final int <tt class=literal>MIN_VALUE</tt>;
        <b>1.1</b>public static final Class <tt class=literal>TYPE</tt>;
    // <tt class=literal>Class Methods</tt>
        <b>1.1</b>public static Integer <tt class=literal>decode</tt>(String <tt class=literal>nm</tt>) throws NumberFormatException;
            public static Integer <tt class=literal>getInteger</tt>(String <tt class=literal>nm</tt>);
            public static Integer <tt class=literal>getInteger</tt>(String <tt class=literal>nm</tt>, int <tt class=literal>val</tt>);
            public static Integer <tt class=literal>getInteger</tt>(String <tt class=literal>nm</tt>, Integer <tt class=literal>val</tt>);
            public static int <tt class=literal>parseInt</tt>(String <tt class=literal>s</tt>, int <tt class=literal>radix</tt>) throws NumberFormatException;
            public static int <tt class=literal>parseInt</tt>(String <tt class=literal>s</tt>) throws NumberFormatException;
            public static String <tt class=literal>toBinaryString</tt>(int <tt class=literal>i</tt>);
            public static String <tt class=literal>toHexString</tt>(int <tt class=literal>i</tt>);
            public static String <tt class=literal>toOctalString</tt>(int <tt class=literal>i</tt>);
            public static String <tt class=literal>toString</tt>(int <tt class=literal>i</tt>, int <tt class=literal>radix</tt>);
            public static String <tt class=literal>toString</tt>(int <tt class=literal>i</tt>);
            public static Integer <tt class=literal>valueOf</tt>(String <tt class=literal>s</tt>, int <tt class=literal>radix</tt>) throws NumberFormatException;
            public static Integer <tt class=literal>valueOf</tt>(String <tt class=literal>s</tt>) throws NumberFormatException;
    // <tt class=literal>Public Instance Methods</tt>
        <b>1.1</b>public byte <tt class=literal>byteValue</tt>();  //<tt class=literal> Overrides Number</tt>
            public double <tt class=literal>doubleValue</tt>();  //<tt class=literal> Defines Number</tt>
            public boolean <tt class=literal>equals</tt>(Object <tt class=literal>obj</tt>);  //<tt class=literal> Overrides Object</tt>
            public float <tt class=literal>floatValue</tt>();  //<tt class=literal> Defines Number</tt>
            public int <tt class=literal>hashCode</tt>();  //<tt class=literal> Overrides Object</tt>
            public int <tt class=literal>intValue</tt>();  //<tt class=literal> Defines Number</tt>
            public long <tt class=literal>longValue</tt>();  //<tt class=literal> Defines Number</tt>
        <b>1.1</b>public short <tt class=literal>shortValue</tt>();  //<tt class=literal> Overrides Number</tt>
            public String <tt class=literal>toString</tt>();  //<tt class=literal> Overrides Object</tt>
}
</PRE>
</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-25-SECT-32.2">Hierarchy:</A></h3>

<p class=para>
Object->Number(Serializable)->Integer

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-25-SECT-32.3">Passed To:</A></h3>

<p class=para>
Integer.getInteger()

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-25-SECT-32.4">Returned By:</A></h3>

<p class=para>
Integer.decode(), 
Integer.getInteger(), 
Integer.valueOf()

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch25_31.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch25_33.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>java.lang.InstantiationException (JDK 1.0)</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>java.lang.InternalError (JDK 1.0)</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
