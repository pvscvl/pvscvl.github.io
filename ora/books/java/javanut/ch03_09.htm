<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 3] 3.9 Abstract Classes and Interfaces</TITLE>
<meta name="author" content="David Flanagan">
<meta name="date" content="Thu Jul 31 15:50:00 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Java">
<meta name="title" content="Java in a Nutshell">
<meta http-equiv="index.htmlContent-Script-Type" content="text/javascript">
</HEAD>
<body bgcolor="#FFFFFF">

<div class=htmlnav>
<h1><a href='index.htm'><img src="gifs/smbanner.gif" alt="Java in a Nutshell" border=0></a></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_08.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 3<br>Classes and Objects in Java</FONT></B></TD>
<td width=172 align=right valign=top><a href="ch03_10.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>

&nbsp;
<hr align=left width=515>
</DIV>
<div class=sect1>
<h2 class=sect1><a class="TITLE" name="JNUT2-CH-3-SECT-9">3.9 Abstract Classes and Interfaces</A></h2>

<p class=para>
<a name="CH3.ABSTRACT.CLA1"></A><a name="CH3.CLASSES3"></A>In
<a href="ch03_08.htm">Example 3.14</A>
we declared our <tt class=literal>Circle</tt> class to be part of a package
named <tt class=literal>shapes</tt>.  Suppose we plan to implement a number
of shape classes: <tt class=literal>Rectangle</tt>, <tt class=literal>Square</tt>,
<tt class=literal>Ellipse</tt>, <tt class=literal>Triangle</tt>, and so on.  We'll give
all of these shape classes our two basic <tt class=literal>area()</tt> and
<tt class=literal>circumference()</tt> methods.  Now, to make it easy to
work with an array of shapes, it would be
helpful if all our shape classes have a common superclass,
<tt class=literal>Shape</tt>.  We want <tt class=literal>Shape</tt> to encapsulate
whatever features all our shapes have in common.  In this
case, they have in common the <tt class=literal>area()</tt> and
<tt class=literal>circumference()</tt> methods.  But our generic
<tt class=literal>Shape</tt> class can't actually implement these methods,
since it doesn't represent any actual shape.  Java handles
this case with abstract methods.

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-3-SECT-9.1">Abstract Methods</A></h3>

<p class=para>
<a name="CH3.ABSTRACT.MET1"></A><a name="CH3.METHODS4"></A>Java lets us define a method without implementing it by
making the method <tt class=literal>abstract</tt>.  An <tt class=literal>abstract</tt>
method has no body; it simply has a signature definition
followed by a semicolon.
[13]
Here are the rules about <tt class=literal>abstract</tt> methods, 
and the <tt class=literal>abstract</tt> classes that contain them:

<blockquote class=footnote>
<p class=para>[13] 
An <tt class=literal>abstract</tt> method in Java is something like a
"pure virtual function" in C++ (i.e., a virtual function
that is declared <tt class=literal>= 0</tt>).  In C++, a class that
contains a pure virtual function is called an "abstract
class" and may not be instantiated.  The same is true of
Java classes that contain <tt class=literal>abstract</tt> methods.
</blockquote>
<p>
<ul class=itemizedlist>
<li class=listitem>Any class with an <tt class=literal>abstract</tt> method is automatically
<tt class=literal>abstract</tt> itself, and must be declared as such.

<p>
<li class=listitem>A class may be declared <tt class=literal>abstract</tt> even if it has no
<tt class=literal>abstract</tt> methods.  This prevents it from being
instantiated. 

<p>
<li class=listitem>An <tt class=literal>abstract</tt> class cannot be instantiated.

<p>
<li class=listitem>A subclass of an <tt class=literal>abstract</tt> class can be instantiated
if it overrides each of the <tt class=literal>abstract</tt> methods of its
superclass and provides an implementation (i.e., a method
body) for all of them.

<p>
<li class=listitem>If a subclass of an <tt class=literal>abstract</tt> class does not
implement all of the <tt class=literal>abstract</tt> methods it inherits,
that subclass is itself <tt class=literal>abstract</tt>.

<p>
</UL>
<p class=para>
That description of the <tt class=literal>abstract</tt> keyword was pretty
abstract!
<a href="#JNUT2-CH-3-EX-15">Example 3.15</A>
is more concrete.  It shows an <tt class=literal>abstract</tt>
<tt class=literal>Shape</tt> class and two non-<tt class=literal>abstract</tt> subclasses
of it.

<div class=example>
<h4 class=example><a class="TITLE" name="JNUT2-CH-3-EX-15">Example 3.15: An Abstract Class and Subclasses</A></h4>

<div class=screen>
<p>
<pre>
public abstract class Shape {
    public abstract double area();
    public abstract double circumference();
}
class Circle extends Shape {
    protected double r;
    protected static final double PI = 3.14159265358979323846;
    public Circle() { r = 1.0; }
    public Circle(double r) { this.r = r; }
    public double area() { return PI * r * r; }
    public double circumference() { return 2 * PI * r; }
    public double getRadius() { return r; }
}
class Rectangle extends Shape {
    protected double w, h;
    public Rectangle() { w = 0.0; h = 0.0; }
    public Rectangle(double w, double h) { this.w = w;  this.h = h; }
    public double area() { return w * h; }
    public double circumference() { return 2 * (w + h); }
    public double getWidth() { return w; }
    public double getHeight() { return h; }
}
</PRE>
</DIV>

</DIV>

<p class=para>
Note that the <tt class=literal>abstract</tt> methods in <tt class=literal>Shape</tt> have a
semicolon right after their parentheses.  There are no curly
braces, and no method body is defined.  Using the classes
defined in
<a href="#JNUT2-CH-3-EX-15">Example 3.15</A>,
we can now write code like this:

<div class=screen>
<p>
<pre>
Shape[] shapes = new Shape[3];          // Create an array to hold shapes.
shapes[0] = new Circle(2.0);            // Fill in the array...
shapes[1] = new Rectangle(1.0, 3.0);
shapes[2] = new Rectangle(4.0, 2.0);
double total_area = 0;
for(int i = 0; i &lt; shapes.length; i++)
    total_area += shapes[i].area();     // Compute the area of the shapes.
</PRE>
</DIV>

<p class=para>
There are two important points to notice here:

<p>
<ul class=itemizedlist>
<li class=listitem>Subclasses of <tt class=literal>Shape</tt> can be assigned to elements of
an array of <tt class=literal>Shape</tt>.  No cast is necessary.

<p>
<li class=listitem>You can invoke the <tt class=literal>area()</tt> and
<tt class=literal>circumference()</tt> methods for <tt class=literal>Shape</tt> objects,
even though <tt class=literal>Shape</tt> does not define a body for these
methods, because <tt class=literal>Shape</tt> declared them
<tt class=literal>abstract</tt>.  If <tt class=literal>Shape</tt> did not declare them at
all, the code would cause a compilation error.

<p>
</UL>
<p class=para>
</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-3-SECT-9.2">Interfaces</A></h3>

<p class=para>
<a name="CH3.DATA.TYPES1"></A><a name="CH3.INTERFACES1"></A>Let's extend our <tt class=literal>shapes</tt> package further.  Suppose we
now want to implement a number of shapes that can be drawn
on the screen.  We could define an abstract
<tt class=literal>DrawableShape</tt> class, and then implement various
subclasses of it, such as <tt class=literal>DrawableCircle</tt>,
<tt class=literal>DrawableRectangle</tt>, and so on.  This would work fine.

<p class=para>
But suppose we want our drawable shape types to support the
<tt class=literal>area()</tt> and <tt class=literal>circumference()</tt> methods.  We
don't want to have to re-implement these methods, so we'd
like to make <tt class=literal>DrawableCircle</tt> a subclass of
<tt class=literal>Circle</tt>, for example, and <tt class=literal>DrawableRectangle</tt> a
subclass of <tt class=literal>Rectangle</tt>.  But classes in Java can only
have one superclass.  If <tt class=literal>DrawableCircle</tt> extends
<tt class=literal>Circle</tt>, then it cannot also extend
<tt class=literal>DrawableShape</tt>!
[14]

<blockquote class=footnote>
<p class=para>[14] 
C++ allows classes to have more than one superclass, using
a technique known as "multiple inheritance." Multiple
inheritance opens up a can of worms, so Java replaces it
with what many believe is a more elegant solution.
</blockquote>
<p class=para>
Java's solution to this problem is called an
<i class=emphasis>interface</I>.  An interface looks a lot like an abstract
class, except that it uses the keyword <tt class=literal>interface</tt>
instead of the words <tt class=literal>abstract</tt> and <tt class=literal>class</tt>.
<a href="#JNUT2-CH-3-EX-16">Example 3.16</A>
shows an interface named <tt class=literal>Drawable</tt>.

<div class=example>
<h4 class=example><a class="TITLE" name="JNUT2-CH-3-EX-16">Example 3.16: An Interface Definition</A></h4>

<div class=screen>
<p>
<pre>
public interface Drawable {
    public void setColor(Color c);
    public void setPosition(double x, double y);
    public void draw(DrawWindow dw);
}
</PRE>
</DIV>

</DIV>

<p class=para>
While an <tt class=literal>abstract</tt> class may define some <tt class=literal>abstract</tt> methods and
some non-<tt class=literal>abstract</tt> methods, all the methods defined within an
interface are implicitly <tt class=literal>abstract</tt>.  We've omitted
the <tt class=literal>abstract</tt> keyword in this example, but it is
perfectly legal to use it if you want to belabor the
abstractness of interface methods.  A further restriction on
interfaces is that any variables declared in an interface
must be <tt class=literal>static</tt> and <tt class=literal>final</tt>--that is, they must
be constants.

<p class=para>
So what can we do with an interface?  Just as a class
<tt class=literal>extends</tt> its superclass, it also optionally <tt class=literal>implements</tt>
an interface.  <tt class=literal>implements</tt> is a Java keyword that can
appear in a class declaration following the
<tt class=literal>extends</tt> clause.  <tt class=literal>implements</tt> should be
followed by the name of the interface that the class
implements.  In order to implement an interface, a class
must first declare the interface in an <tt class=literal>implements</tt>
clause, and then it
must provide an implementation (i.e., a body) for all of the
<tt class=literal>abstract</tt> methods of the interface.
[15]

<blockquote class=footnote>
<p class=para>[15] 
This is the real difference between multiple inheritance in
C++ and interfaces in Java.  In C++, a class can inherit
method implementations from more than one superclass.  In
Java, a class can inherit actual implementations only from
one superclass.  It can inherit additional <tt class=literal>abstract</tt>
methods from interfaces, but it must provide its own
implementation of those methods.  It is rare, however, to
actually be able to use C++ multiple inheritance to inherit
useful, non-trivial implementations from more than one class.
The elegance and simplicity of Java's interface more than
compensate for the inability to inherit implementations from
more than one class.
</blockquote>
<p class=para>
<a href="#JNUT2-CH-3-EX-17">Example 3.17</A>
shows how we can define a <tt class=literal>DrawableRectangle</tt> class
that extends our <tt class=literal>Rectangle</tt> class and implements the
<tt class=literal>Drawable</tt> interface we defined in
<a href="#JNUT2-CH-3-EX-16">Example 3.16</A>.
The example assumes that a <tt class=literal>Color</tt> class and a
<tt class=literal>DrawWindow</tt> class are defined elsewhere, and that
<tt class=literal>DrawWindow</tt> knows how to convert floating-point
coordinates to pixel coordinates and knows how to draw
primitive shapes.

<div class=example>
<h4 class=example><a class="TITLE" name="JNUT2-CH-3-EX-17">Example 3.17: Implementing an Interface</A></h4>

<div class=screen>
<p>
<pre>
public class DrawableRectangle extends Rectangle implements Drawable {
    // New instance variables
    private Color c;
    private double x, y;
    // A constructor
    public DrawableRectangle(double w, double h) { super(w, h); }
    // Here are implementations of the Drawable methods.
    // We also inherit all the public methods of Rectangle.
    public void setColor(Color c) { this.c = c; }
    public void setPosition(double x, double y) { this.x = x; this.y = y; }
    public void draw(DrawWindow dw) { 
        dw.drawRect(x, y, w, h, c);
    }
}
</PRE>
</DIV>

</DIV>

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-3-SECT-9.3">Using Interfaces</A></h3>

<p class=para>
Suppose we implement <tt class=literal>DrawableCircle</tt> and
<tt class=literal>DrawableSquare</tt> just as we implemented
<tt class=literal>DrawableRectangle</tt> in
<a href="#JNUT2-CH-3-EX-17">Example 3.17</A>.
As we saw earlier, instances of these classes can be treated
as instances of the abstract <tt class=literal>Shape</tt> class.  They can
also be treated as instances of the <tt class=literal>Drawable</tt> interface.
<a href="#JNUT2-CH-3-EX-18">Example 3.18</A>
demonstrates this.

<div class=example>
<h4 class=example><a class="TITLE" name="JNUT2-CH-3-EX-18">Example 3.18: Casting Objects to Their Interface Type</A></h4>

<div class=screen>
<p>
<pre>
Shape[] shapes = new Shape[3];          // Create an array to hold shapes
Drawable[] drawables = new Drawable[3]; // and an array to hold drawables.
// Create some drawable shapes.
DrawableCircle dc = new DrawableCircle(1.1);
DrawableSquare ds = new DrawableSquare(2.5);
DrawableRectangle dr = new DrawableRectangle(2.3, 4.5);
// The shapes can be assigned to both arrays.
shapes[0] = dc;   drawables[0] = dc;
shapes[1] = ds;   drawables[1] = ds;
shapes[2] = dr;   drawables[2] = dr;
// Compute total area and draw the shapes by invoking 
// the Shape and the Drawable abstract methods.
double total_area = 0;
for(int i = 0; i &lt; shapes.length; i++) {
    total_area += shapes[i].area();    // Compute the area of the shapes.
    drawables[i].setPosition(i*10.0, i*10.0);
    drawables[i].draw(draw_window);    // Assume draw_window defined somewhere.
}
</PRE>
</DIV>

</DIV>

<p class=para>
What this example demonstrates is that interfaces are data
types in Java, just as classes are, and that when a class
implements an interface, instances of that class can be
assigned to variables of the interface type.  Don't
interpret this example to imply that you must assign a
<tt class=literal>DrawableRectangle</tt> object to a <tt class=literal>Drawable</tt>
variable before you can invoke the <tt class=literal>draw()</tt> method or
that you must assign it to a <tt class=literal>Shape</tt> variable before
you can invoke the <tt class=literal>area()</tt> method.
<tt class=literal>DrawableRectangle</tt> defines <tt class=literal>draw()</tt> and
inherits <tt class=literal>area()</tt> from its <tt class=literal>Rectangle</tt>
superclass, and so you can always invoke these methods.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-3-SECT-9.4">Implementing Multiple Interfaces</A></h3>

<p class=para>
Suppose we wanted shapes that could be scaled to be larger
or smaller.  One way we could do this is by defining a
<tt class=literal>Scalable</tt> interface and implementing subclasses of
<tt class=literal>DrawableRectangle</tt> and the other classes.  To do this,
though, the new subclass would have to implement both the
<tt class=literal>Drawable</tt> interface and the <tt class=literal>Scalable</tt>
interface.
This is no problem.  You may specify a list of
comma-separated interfaces in the <tt class=literal>implements</tt> clause
of any class:

<div class=screen>
<p>
<pre>
public class DrawableScalableRectangle extends DrawableRectangle
                implements Drawable, Scalable {
    // The methods of the Scalable interface must be implemented here.
}
</PRE>
</DIV>

<p class=para>
When a class implements more than one interface, it means
simply that it must provide an implementation for all of the
abstract methods in all of its interfaces.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-3-SECT-9.5">Constants in Interfaces</A></h3>

<p class=para>
As we noted above, constants may appear in interface
definitions.  What does it mean to implement an interface
that contains constants?  It
simply means that the class that implements the interface
"inherits" the constants (in a sense) and can use them as if
they were defined directly in the class.  There is no need
to prefix them with the name of the interface, and there is
no need to provide an "implementation" of the constants:

<div class=screen>
<p>
<pre>
class A { static final int CONSTANT1 = 3; }
interface B { static final int CONSTANT2 = 4; }
class C implements B {
    void f() { 
        int i = A.CONSTANT1;  // Have to use the class name here.
        int j = CONSTANT2;    // No class name here, because we implement
    }                         // the interface that defines this constant.
}
</PRE>
</DIV>

<p class=para>
When you have a set of constants used by more than one class
within a package (for example, a port number and other
protocol constants used by a client and server), it is
convenient to define them in an interface that contains no
abstract <tt class=literal>methods</tt>.  Then, any class that wants to use
those constants needs only to declare that it implements the
interface.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-3-SECT-9.6">Extending Interfaces</A></h3>

<p class=para>
Interfaces can have sub-interfaces, just as classes can have subclasses.  A
sub-interface inherits all the abstract methods and
constants of its super-interface, and may define new
abstract methods and constants.  Interfaces are different
from classes in one very important way, however. 

<p class=para>
An interface can extend more than one interface at a time:

<div class=screen>
<p>
<pre>
public interface Transformable extends Scalable, Rotateable, Reflectable { }
public interface DrawingObject extends Drawable, Transformable { }
public class Shape implements DrawingObject { ... }
</PRE>
</DIV>

<p class=para>
An interface that extends more than one interface inherits
all the abstract methods and constants from each of those
interfaces, and may define its own additional abstract methods
and constants.  A class that implements such an interface
must implement the abstract methods defined in the interface
itself as well as all the abstract methods inherited from
all the super-interfaces.

</DIV>

<div class=sect2>
<h3 class=sect2><a class="TITLE" name="JNUT2-CH-3-SECT-9.7">Marker Interfaces</A></h3>

<p class=para>
Another technique that is sometimes useful is to define an
interface that is entirely empty.  A class can implement
this interface to provide additional information about
itself.  The <tt class=literal>Cloneable</tt> interface in
<tt class=literal>java.lang</tt> is an example of this type of "marker
interface."  It defines no methods, but serves simply to
identify the class as one that will allow its internal state
to be cloned by the <tt class=literal>clone()</tt> method of the
<tt class=literal>Object</tt> class.  In Java 1.1,
<tt class=literal>java.io.Serializable</tt> is another such marker
interface.  You can test whether a class implements a marker
interface (or any interface) using the <tt class=literal>instanceof</tt>
operator.

</DIV>

</DIV>


<div class=htmlnav>

<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch03_08.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td>
<td width=172 align=right valign=top><a href="ch03_10.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Data Hiding and Encapsulation</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td>
<td width=172 align=right valign=top>C++ Features Not Found in Java</td>
</tr>
</table>
<hr align=left width=515>

<img src="gifs/smnavbar.gif" usemap="#map" border=0> 
<map name="map"> 
<area shape=RECT coords="0,0,108,15" href="index.htm" alt="Java in a Nutshell"> 
<area shape=RECT coords="109,0,200,15" href="../langref/index.htm" alt="Java Language Reference"> 
<area shape=RECT coords="203,0,290,15" href="../awt/index.htm" alt="Java AWT"> 
<area shape=RECT coords="291,0,419,15" href="../fclass/index.htm" alt="Java Fundamental Classes"> 
<area shape=RECT coords="421,0,514,15" href="../exp/index.htm" alt="Exploring Java"> 
</MAP>
</DIV>

</BODY>
</HTML>
