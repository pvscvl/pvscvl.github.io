<html>
<head>
<title>The Box Container (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The Box Container">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_13.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_13.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_01.htm">Chapter 3: Swing

Programming Topics</a></td><td align="right" valign="top" width="172"><a href="ch03_15.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_15.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">3.14. The Box Container</h2>
<a name="INDEX-553"></a>
<a name="INDEX-554"></a>

<p>
<a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_01.htm">Chapter 2, "Swing and AWTArchitecture"</a>, discussed the general task of
      arranging components within containers and listed the layout
      managers provided by AWT and Swing.  This section describes a
      commonly used Swing layout management technique in detail.
      The easiest way to create complex arrangements of Swing components
      is often with the <tt class="literal">javax.swing.Box</tt> 
      container.<a href="#FOOTNOTE-1">[1]</a><tt class="literal">Box</tt> arranges its components into a single row or a
      single column.  You can then use nested <tt class="literal">Box</tt> 
      containers to create a two-dimensional arrangement of 
      components.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-1"></a>
<p>[1]For
      some reason, <tt class="literal">Box</tt> does not begin with the letter
      J as other Swing components and containers do.  Nevertheless, it
      is a very useful and commonly used container.</p>
</blockquote>

<a name="INDEX-555"></a>

<p>The <tt class="literal">Box</tt> 
      container uses the <tt class="literal">BoxLayout</tt> layout
      manager, but this layout manager is automatically assigned, so you
      never need to work with it explicitly.  The easiest way to create
      a <tt class="literal">Box</tt> is with the static 
      <tt class="literal">Box.createHorizontalBox()</tt> or
      
<tt class="literal">Box.createVerticalBox()</tt> method.  
      Once you have created
      a <tt class="literal">Box</tt>, simply add children to it.  They will be
      arranged from left to right or from top to bottom.</p>

<a name="INDEX-556"></a>
<a name="INDEX-557"></a>
<a name="INDEX-558"></a>

<p>The unique power of the <tt class="literal">Box</tt> actually comes from
      an inner class called <tt class="literal">Box.Filler</tt>.  This class is a
      simple component that has no appearance; it exists simply to
      insert blank space in a layout and to affect the resize behavior
      of the layout.  You do not create <tt class="literal">Box.Filler</tt>
      objects directly.  Instead, you create them using the
      following static methods of
      <tt class="literal">Box</tt>: 
</p>

<blockquote>
<pre class="programlisting">Box.createHorizontalStrut(int <em class="replaceable">width</em>)
Box.createVerticalStrut(int <em class="replaceable">height</em>)
Box.createHorizontalGlue()
Box.createVerticalGlue()</pre>
</blockquote>



<a name="INDEX-559"></a>
<a name="INDEX-560"></a>

<p>If you are arranging a row of components, you can call
      <tt class="literal">createHorizontalStrut()</tt> to insert a fixed
      number of pixels of blank horizontal 
      space.  For a column of components, use
      <tt class="literal">createVerticalStrut()</tt> to insert a blank
      vertical space.</p>

<a name="INDEX-561"></a>
<a name="INDEX-562"></a>

<p>The glue methods are different.  They insert stretchy
      horizontal or vertical space into a row or column.  By default,
      the space is zero pixels wide or zero pixels high.  But, if the row
      or column is stretched so that it becomes wider or higher than its
      default size, these glue components stretch to take up that
      extra space.  For example, say you fill a row with some horizontal
      glue, a <tt class="literal">JButton</tt> component, and some more
      horizontal glue.  Now, no matter how wide the row becomes, the
      <tt class="literal">JButton</tt> is always centered in it.  This is
      because the two glue components (and possibly the 
      <tt class="literal">JButton</tt>) 
      grow equally to take up the extra space.  On the other hand, if
      the row consists of only one glue component followed by a
      <tt class="literal">JButton</tt>, the <tt class="literal">JButton</tt>
      always appears right justified in the row, since the glue
      component grows to take up all the space to the left of
      the button.</p>

<p>As another example, consider a <tt class="literal">Box</tt> used in a
      dialog to hold a row of <b class="emphasis-bold">OK</b>,
      <b class="emphasis-bold">Cancel</b>, and <b class="emphasis-bold">Help</b> buttons.  Without any glue, the buttons
      are resized to fill up the entire row, with no extra space
      between them.  If we intersperse the three buttons with
      four glue components, however, the buttons are always nicely spaced
      out and the buttons and the spaces between them grow
      proportionally as the dialog box becomes wider.</p>

<a name="INDEX-563"></a>

<h3 class="sect2">3.14.1. Minimum, Preferred, and Maximum Sizes</h3>
<a name="INDEX-564"></a>
<a name="INDEX-565"></a>
<a name="INDEX-566"></a>

<p>In order to fully understand the behavior of the
	<tt class="literal">Box</tt> container and its glue, it is
	important to understand that Swing components can have a minimum
	size, a preferred size, and a maximum size.  Many components
	have a natural size.  For example, with a 
	<tt class="literal">JButton</tt>, the
	natural size is the space required to accommodate the button text
	and/or <tt class="literal">Icon</tt>, plus the space required for the
	button border.  By default, a <tt class="literal">JButton</tt> reports
	its natural size as its minimum size and as its preferred size.
	When asked for its maximum size, a <tt class="literal">JButton</tt>
	returns very large integers, indicating that it can grow to
	become arbitrarily wide and arbitrarily tall.</p>

<a name="INDEX-567"></a>

<p>Swing components (but not AWT components) allow you to specify
	their minimum, preferred, and maximum sizes.  For
	example, if you do not want to allow a
	<tt class="literal">JButton</tt> to become arbitrarily large as its
	container grows larger, you can set a maximum size for it by
	calling <tt class="literal">setMaximumSize()</tt>.
	Setting a preferred size for a <tt class="literal">JButton</tt> is an
	uncommon thing to do, as <tt class="literal">JButton</tt> has a
	perfectly good natural size.  But some components, such as
	<tt class="literal">JScrollPane</tt> objects, do not have a natural 
	size.  For components like these, it is usually important that you
	establish a default size with
	<tt class="literal">setPreferredSize()</tt>.  If you want to prevent a
	<tt class="literal">JScrollPane</tt> or similar component from
	becoming arbitrarily small or arbitrarily large, you should also
	call <tt class="literal">setMinimumSize()</tt> and
	<tt class="literal">setMaximumSize()</tt>.</p>

<a name="INDEX-568"></a>
<a name="INDEX-569"></a>
<a name="INDEX-570"></a>
<a name="INDEX-571"></a>

<p>Now that you understand the concepts of minimum, preferred, and
	maximum sizes, we can return to the <tt class="literal">Box</tt>
	container and its struts and glue.  Both struts and glue
	are instances of the <tt class="literal">Box.Filler</tt> component.
	When you create a <tt class="literal">Box.Filler</tt>, you are actually
	specifying minimum, preferred, and maximum sizes for the
	component.  A horizontal strut is
	simply a <tt class="literal">Box.Filler</tt> with its minimum,
	preferred, and maximum width set to the number of pixels
	you specify.  A vertical strut has a fixed minimum, preferred,
	and maximum height.</p>

<p>Horizontal glue has a minimum and preferred width of zero, but
	a very large maximum width.  This means that the glue takes
	up no space by default but grows as necessary to fill up extra
	space.  Vertical glue does the same thing in the other
	dimension.  In order to understand glue, it is also important to
	understand how the <tt class="literal">Box</tt> container distributes
	excess space to its children.  If a horizontal
	<tt class="literal">Box</tt> becomes wider, the extra width is
	allocated among the children based on their maximum widths.
	Children with larger maximums are given a proportionally larger
	amount of the extra space.  When you intersperse
	<tt class="literal">JButton</tt> objects with glue, all the components
	have effectively infinite maximum widths, so all grow by equal
	amounts.  Suppose, instead, that you restricted the sizes of
	your buttons like this:
</p>

<blockquote>
<pre class="programlisting">okayButton.setMaximumSize(okayButton.getPreferredSize());
cancelButton.setMaximumSize(cancelButton.getPreferredSize());
helpButton.setMaximumSize(helpButton.getPreferredSize());</pre>
</blockquote>

<p>
	In this case, the buttons are already at their maximum
	sizes, so no extra space is allocated to them.  Now 
	the glue between the buttons gets all the extra space.</p>

<p>I just said that glue components have a preferred size of zero.  
	With regard to the example of three buttons interspersed with	 
	four glue components, this means that when the row of
	buttons is displayed at its default size, the buttons 
	bump into one another and appear awkwardly crowded.  To
	remedy this, you might place horizontal struts <em class="emphasis">and</em>
	horizontal glue between the buttons.  In this case, 
	the struts provide the
	default and minimum spacing, while the glue components 
	make the spacing
	grow.  There is a more efficient way to do this, however.  You
	can explicitly create <tt class="literal">Box.Filler</tt> components
	that combine the nonzero default size of a strut with the
	infinite maximum size of a glue object.  You can create such a
	filler object as follows:
</p>

<blockquote>
<pre class="programlisting">Dimension fixedwidth = new Dimension(15, 0);
Dimension infinitewidth = new Dimension(Short.MAX_VALUE, 0);
Box.Filler filler = new Box.Filler(fixedwidth, fixedwidth, infinitewidth);</pre>
</blockquote>



<h3 class="sect2">3.14.2. The Other Dimension</h3>

<p>So far, our discussion of the <tt class="literal">Box</tt> container
	has covered only how components are arranged horizontally in
	a horizontal box or vertically in a
	vertical box.  What does <tt class="literal">Box</tt> do in the other
	dimension?  When laying out components in a row, the 
	<tt class="literal">Box</tt> makes
	the row as tall as the tallest component and then attempts to
	make all the components as tall as the row.  Similarly,
	when it lays out
	components in a column, <tt class="literal">Box</tt> 
	tries to make all components as wide
	as the widest component.</p>

<p>As we've discussed, however, components can have a maximum
	size.  If a row becomes taller than a component's maximum height
	or a column becomes wider than a component's maximum width, 
	the <tt class="literal">Box</tt> must decide how to position the
	component with respect to the others in the row or column.  For
	a column, the component can be left, center, or right justified 
	or positioned anywhere in between.  A component in a
	row can be aligned along the top or bottom of the row
	or placed somewhere in between.  </p>

<p>A <tt class="literal">Box</tt> positions such a component based
	on its <tt class="literal">alignmentX</tt> or
	<tt class="literal">alignmentY</tt> property.  Each is a
	<tt class="literal">float</tt> property that should have a value
	between 0.0 and 1.0.  The default for both is 0.5.  When a
	component needs to be positioned horizontally in a column, the
	<tt class="literal">Box</tt> uses the <tt class="literal">alignmentX</tt>
	property.  A value of 0.0 means the component is
	left justified, 1.0 means the component is right justified, and 
	0.5 means the component is centered.  Other values 
	position the component appropriately between these positions.  When a
	<tt class="literal">Box</tt> needs to position a component vertically
	in a row, it uses the component's <tt class="literal">alignmentY</tt>
	property to place the component in the vertical plane in 
	an analogous way.</p>

<a name="INDEX-572"></a>
<a name="INDEX-573"></a>
<a name="INDEX-574"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_13.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_13.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_15.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_15.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.13. Double-Buffering</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.15. Simple Dialogs</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
