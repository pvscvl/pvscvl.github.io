<html>
<head>
<title>Containers and Containment (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Containers and Containment">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_01.htm">Chapter 2: Swing and AWTArchitecture</a></td><td align="right" valign="top" width="172"><a href="ch02_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">2.4. Containers and Containment</h2>
<a name="INDEX-151"></a>

<p>
<a href="ch02_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_02.htm">Table 2-1</a> and <a href="ch02_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_02.htm">Table 2-2</a> listed the GUI components
      available in the AWT and Swing toolkits.  In order to create a
      graphical user interface, however, these individual components must be
      arranged within some kind of container.  A
      <em class="emphasis">container</em> is a component that can contain
      other components.  All containers inherit from the
      <tt class="literal">java.awt.Container</tt> base class, which itself
      inherits from <tt class="literal">java.awt.Component</tt>. </p>

<a name="INDEX-152"></a>
<a name="INDEX-153"></a>

<p>Main application windows and dialog boxes are commonly used
      containers.  Each provides a window within which GUI components can
      be arranged to create a user interface.  A graphical application does
      not usually arrange all its components directly within a
      window or dialog box, however.  Instead, an application typically uses
      containers nested within other containers.  For example, a dialog
      box that contains two columns of text input fields above a row of
      push buttons might use three separate containers, one for each column
      of text fields and one for the row of push buttons.  Then the dialog box
      container contains only these three containers, instead of the
      full set of text fields and push buttons.  </p>

<p>Some kinds of containers display their children in very specific
      ways, while others have restrictions on the number or type of
      components they can display.  Some other containers are generic, so they
      can contain any number of children, arranged in any way.  A
      generic container uses a layout manager to specify how its
      children should be arranged (as we'll discuss in the next section).</p>

<a name="INDEX-154"></a>

<p>
<a href="#jfcnut-ch-2-tab-awtcont">Table 2-3</a> lists the containers
      provided by AWT (in the <tt class="literal">java.awt</tt> package), and
      <a href="#jfcnut-ch-2-tab-swingcont">Table 2-4</a> lists the additional
      containers provided by Swing (in <tt class="literal">javax.swing</tt>).
      Menus and menu bars, such as
      <tt class="literal">javax.swing.JMenuBar</tt> and
      <tt class="literal">javax.swing.JPopupMenu</tt>, are containers.  Because
      of their highly specialized use, however, I have listed them in the
      earlier tables of components.  Also, the <tt class="literal">JComponent</tt> class extends
      <tt class="literal">java.awt.Container</tt>, which means that all Swing
      components are actually containers.  In practice, however, they
      are not used this way; only the Swing classes listed in
      <a href="#jfcnut-ch-2-tab-swingcont">Table 2-4</a> are typically used as 
      containers.</p>

<a name="INDEX-155"></a>
<a name="INDEX-156"></a>
<a name="INDEX-157"></a>
<a name="INDEX-158"></a>
<a name="INDEX-159"></a>
<a name="INDEX-160"></a>
<a name="jfcnut-ch-2-tab-awtcont"></a>
<h4 class="objtitle">Table 2-3. AWT Containers</h4>
<table border="1">
<tr>
<th>Container</th>
<th>Description</th>
</tr>

<tr>
<a name="INDEX-161"></a>
<a name="INDEX-162"></a>
<td><tt class="literal">Applet</tt></td>
<td>
<p>This subclass of <tt class="literal">Panel</tt> is actually
		part of the <tt class="literal">java.applet</tt> package.  It
		is the base class for all applets. (See <a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch07_01.htm">Chapter 7, "Applets"</a>.) </p>
</td>
<a name="INDEX-163"></a>
</tr>
<tr>
<td><tt class="literal">Container</tt></td>
<td>
<p>The base class from which all containers inherit.</p>
</td>
<a name="INDEX-164"></a>
<a name="INDEX-165"></a>
</tr>
<tr>
<td><tt class="literal">Dialog</tt></td>
<td>
<p>A window suitable for dialog boxes.</p>
</td>
<a name="INDEX-166"></a>
<a name="INDEX-167"></a>
</tr>
<tr>
<td><tt class="literal">Frame</tt></td>
<td>
<p>A window suitable for use as the main window of an application.
		In AWT, <tt class="literal">Frame</tt> is the only container
		that can contain a <tt class="literal">MenuBar</tt> and
		related menu components.</p>
</td>
<a name="INDEX-168"></a>
<a name="INDEX-169"></a>
</tr>
<tr>
<td><tt class="literal">Panel</tt></td>
<td>
<p>A generic container used to create nested layouts.</p>
</td>
<a name="INDEX-170"></a>
<a name="INDEX-171"></a>
</tr>
<tr>
<td><tt class="literal">ScrollPane</tt></td>
<td>
<p>A container that contains a single child and allows that
		child to be scrolled vertically and horizontally.</p>
</td>
<a name="INDEX-172"></a>
<a name="INDEX-173"></a>
</tr>
<tr>
<td><tt class="literal">Window</tt></td>
<td>
<p>A heavyweight window with no titlebar or other
		decoration, suitable for pop-up menus and similar uses.</p>
</td>
</tr>
</table>
<a name="INDEX-174"></a>
<a name="INDEX-175"></a>
<a name="INDEX-176"></a>
<a name="INDEX-177"></a>
<a name="jfcnut-ch-2-tab-swingcont"></a>
<h4 class="objtitle">Table 2-4. Swing Containers</h4>
<table border="1">
<tr>
<th>Container</th>
<th>Description</th>
</tr>

<tr>
<td><tt class="literal">Box</tt></td>
<td>
<p>A general-purpose container that arranges children
		using the <tt class="literal">BoxLayout</tt> layout manager.</p>
</td>
<a name="INDEX-178"></a>
<a name="INDEX-179"></a>
<a name="INDEX-180"></a>
</tr>
<tr>
<td><tt class="literal">JApplet</tt></td>
<td>
<p>A <tt class="literal">java.applet.Applet</tt> subclass that 
		contains a
		<tt class="literal">JRootPane</tt> to add Swing features,
		such as support for menu bars to applets.
		Applets are discussed in 
		<a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch07_01.htm">Chapter 7, "Applets"</a>.</p>
</td>
<a name="INDEX-181"></a>
<a name="INDEX-182"></a>
</tr>
<tr>
<td><tt class="literal">JDesktopPane</tt></td>
<td>
<p>A container for <tt class="literal">JInternalFrame</tt>
		components; simulates the operation of a desktop
		within a single window.  Supports MDI (multiple
		document interface) application styles.</p>
</td>
<a name="INDEX-183"></a>
<a name="INDEX-184"></a>
</tr>
<tr>
<a name="INDEX-185"></a>
<a name="INDEX-186"></a>
<td><tt class="literal">JDialog</tt></td>
<td>
<p>The container used to display dialog boxes in Swing.</p>
</td>
<a name="INDEX-187"></a>
<a name="INDEX-188"></a>
</tr>
<tr>
<td><tt class="literal">JFrame</tt></td>
<td>
<p>The container used for top-level windows in Swing.</p>
</td>
<a name="INDEX-189"></a>
<a name="INDEX-190"></a>
</tr>
<tr>
<td><tt class="literal">JInternalFrame</tt></td>
<td>
<p>A lightweight nested window container.
		Behaves like a <tt class="literal">JFrame</tt> and displays a
		


		titlebar and resize handles but is not an independent
		window and is constrained to appear within the bounds
		of its parent container.  Often used with
		<tt class="literal">JDesktopPane</tt>.</p>
</td>
<a name="INDEX-191"></a>
</tr>
<tr>
<td><tt class="literal">JLayeredPane</tt></td>
<td>
<p>
		A container that allows its children to
		overlap and manages the stacking order of those children.</p>
</td>
<a name="INDEX-192"></a>
<a name="INDEX-193"></a>
</tr>
<tr>
<a name="INDEX-194"></a>
<td><tt class="literal">JPanel</tt></td>
<td>
<p>A generic container for grouping Swing
		components. Typically used with an
		appropriate <tt class="literal">LayoutManager</tt>. </p>
</td>
<a name="INDEX-195"></a>
<a name="INDEX-196"></a>
</tr>
<tr>
<td><tt class="literal">JRootPane</tt></td>
<td>
<p>A complex container used internally by
		<tt class="literal">JApplet</tt>,
		<tt class="literal">JDialog</tt>, <tt class="literal">JFrame</tt>,
		<tt class="literal">JInternalFrame</tt>, and
		<tt class="literal">JWindow</tt>.  Provides a 
		number of important Swing capabilities to these top-level
		containers.</p>
</td>
<a name="INDEX-197"></a>
</tr>
<tr>
<td><tt class="literal">JScrollPane</tt></td>
<td>
<p>A container that allows a single child component to be
		scrolled horizontally or vertically.  Supports scrolling
		and non-scrolling header regions at the top and left of
		the scrolling region.</p>
</td>
<a name="INDEX-198"></a>
<a name="INDEX-199"></a>
</tr>
<tr>
<td><tt class="literal">JSplitPane</tt></td>
<td>
<p>

		A container that displays two children by splitting
		itself horizontally or vertically.  Allows the
		user to adjust the amount of space allocated to each
		child. </p>
</td>
<a name="INDEX-200"></a>
</tr>
<tr>
<td><tt class="literal">JTabbedPane</tt></td>
<td>
<p>A container that displays one child at a time, 
		


		allowing the user to select the currently displayed
		child by clicking on tabs like those found on
		manila file folders.</p>
</td>
<a name="INDEX-201"></a>
<a name="INDEX-202"></a>
</tr>
<tr>
<a name="INDEX-203"></a>
<td><tt class="literal">JViewport</tt></td>
<td>
<p>A fixed-size container that displays a portion of a
		single larger child.  Typically used as part of a
		<tt class="literal">JScrollPane</tt>. </p>
</td>
<a name="INDEX-204"></a>
</tr>
<tr>
<td><tt class="literal">JWindow</tt></td>
<td>
<p>A top-level Swing window that does not display a
		


		titlebar, resize handles, or any other decorations.</p>
</td>
</tr>
</table>
<a name="INDEX-205"></a>
<a name="INDEX-206"></a>
<a name="INDEX-207"></a>
<a name="INDEX-208"></a>

<p>When building a graphical user interface, you must create your
	components, create the containers that will hold those
	components, and then add the components to the containers.  You
	do this with one of the <tt class="literal">add()</tt> methods defined
	by <tt class="literal">java.awt.Container</tt>.  In its simplest form,
	this process looks like this:
<a name="INDEX-209"></a><a name="INDEX-210"></a><a name="INDEX-211"></a>
</p>
<blockquote>
<pre class="programlisting">JButton b = new JButton("Push Me");
JPanel p = new JPanel();
p.add(b);</pre>
</blockquote>

<p>There are other versions of the <tt class="literal">add()</tt> method
	as well.  In addition to specifying the component to add, you
	may also specify a string or an object as a constraint.  The
	container may use this constraint object as a hint that tells it
	how the component should be arranged in the container.  In
	practice, containers do not use the constraint directly, but
	pass it on to a layout manager, as we'll discuss shortly.</p>

<a name="INDEX-212"></a>
<a name="INDEX-213"></a>
<a name="INDEX-214"></a>

<p>In Swing, the top-level containers <tt class="literal">JFrame</tt>,
	<tt class="literal">JDialog</tt>, <tt class="literal">JInternalFrame</tt>,
	<tt class="literal">JWindow</tt>, and <tt class="literal">JApplet</tt> are
	used slightly differently than containers such as
	<tt class="literal">JPanel</tt>, <tt class="literal">JSplitPane</tt>, and
	<tt class="literal">JTabbedPane</tt>.</p>

<a name="INDEX-215"></a>
<a name="INDEX-216"></a>
<a name="INDEX-217"></a>
<a name="INDEX-218"></a>
<a name="INDEX-219"></a>

<p>I've said that all Swing components extend
	<tt class="literal">JComponent</tt>.  <tt class="literal">JFrame</tt>,
	<tt class="literal">JInternalFrame</tt>,
	<tt class="literal">JDialog</tt>, <tt class="literal">JWindow</tt>, and
	<tt class="literal">JApplet</tt> are actually exceptions to this rule.
	These top-level Swing containers extend their corresponding AWT
	containers: <tt class="literal">Frame</tt>, <tt class="literal">Dialog</tt>,
	<tt class="literal">Window</tt>, and
	<tt class="literal">java.applet.Applet</tt>.  Because these container
	classes do not extend <tt class="literal">JComponent</tt>, they do not
	inherit the Swing-specific features of
	<tt class="literal">JComponent</tt>.  </p>

<a name="INDEX-220"></a>

<p>Instead, when you create a <tt class="literal">JFrame</tt>,
	<tt class="literal">JInternalFrame</tt>,
	<tt class="literal">JDialog</tt>, <tt class="literal">JWindow</tt>, or
	<tt class="literal">JApplet</tt> container, the container 
	automatically creates a single child
	for itself.  The child is a <tt class="literal">JRootPane</tt>
	container.  <tt class="literal">JRootPane</tt> does extend
	<tt class="literal">JComponent</tt>, and it is this automatically
	created <tt class="literal">JRootPane</tt> that will hold all of the
	components that are placed in the container.  You cannot
	add children directly to the top-level container.  Instead, you
	add them to the content pane of the
	<tt class="literal">JRootPane</tt>.  All Swing containers that use a
	<tt class="literal">JRootPane</tt> implement the
	<tt class="literal">RootPaneContainer</tt> interface.  This interface
	defines the <tt class="literal">getContentPane()</tt> method, which
	returns the container that you should use.
	This is not as confusing as it sounds.  In practice,
	your code looks like this:
<a name="INDEX-221"></a><a name="INDEX-222"></a>
</p>
<blockquote>
<pre class="programlisting">JButton b = new JButton("Press Me");        // Create a button
JFrame f = new JFrame("Test Application");  // Create a window to display it
f.getContentPane().add(b);                  // Add the button to the window</pre>
</blockquote>
<p>        By default, <tt class="literal">getContentPane()</tt> returns a
        <tt class="literal">JPanel</tt> container, but you can override this
        default by creating a container of your own and passing it to
        <tt class="literal">setContentPane()</tt>.</p>

<a name="INDEX-223"></a>

<p>The <tt class="literal">JRootPane</tt> container is a complex one; it
	contains a number of children in addition to the content pane
	container.  These children support features such as pop-up menus
	and are primarily for internal use by Swing.  One notable and
	commonly used feature of <tt class="literal">JRootPane</tt>, however,
	is that it displays a <tt class="literal">JMenuBar</tt> passed to
	its <tt class="literal">setJMenuBar()</tt> method.  (In AWT, you
	specify 

a <tt class="literal">MenuBar</tt> for a
	<tt class="literal">Frame</tt> by calling the
	<tt class="literal">setMenuBar()</tt> method of
	<tt class="literal">Frame</tt>.)</p>

<a name="INDEX-224"></a>
<a name="INDEX-225"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.3. Properties</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.5. Layout Management</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
