<html>
<head>
<title>Applets (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Applets">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch06_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part1.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/part1.htm">Part 1: Introducing the Java Foundation Classes</a></td><td align="right" valign="top" width="172"><a href="ch07_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch07_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h1 class="chapter">Chapter 7.  Applets</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch07_01.htm">Writing Applets</a>
<br>
<a href="ch07_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch07_02.htm">Including Applets in HTML Files</a>
<br>
<a href="ch07_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch07_03.htm">Applet Security</a>
<br>
</p>
</div>


<p>An applet, as the name implies, is a kind of mini-application,
    designed to be downloaded over a network from a possibly untrusted
    source and run in a web browser or in the context of some other
    applet viewer application.  Because of the ubiquity of
    web browsers, applets are a useful and powerful way of
    delivering Java programs to end users.  In fact, it was the power of
    applets that popularized Java in the first place.  Applets differ
    from regular applications in several important ways:
<a name="INDEX-1165"></a>
</p>

    <ul>
<li>

<p>An applet doesn't have a <tt class="literal">main()</tt> method
	  like a standalone Java application does.  Writing an applet
	  is a lot more like subclassing an AWT or Swing component than
	  writing a standalone application.</p>
</li>
<li>

<p>An applet is not invoked using the command line, as a Java
	  application is.  Instead, an applet is embedded within an HTML
	  file with an <tt class="literal">&lt;APPLET&gt;</tt> tag.  And, instead of
	  reading command-line arguments as an application does, an applet
	  gets its arguments from <tt class="literal">&lt;PARAM&gt;</tt> tags
	  in the HTML file.</p>
</li>
<a name="INDEX-1166"></a>
<li>

<p>An applet is usually subject to a number of strict security
	  restrictions that prevent untrusted, and possibly malicious,
	  applet code from damaging the host system.</p>
</li>
</ul>

<a name="INDEX-1167"></a>

<p>This chapter briefly explains how applets are written and how
    they are embedded in HTML pages.  It also explains the security
    restrictions to which applets are 

subject.</p>




<h2 class="sect1">7.1. Writing Applets</h2>
<a name="INDEX-1168"></a>
<a name="INDEX-1169"></a>
<a name="INDEX-1170"></a>

<p>From a programmer's standpoint, one of the biggest differences
      between an applet and an application is that an applet does not have a
      <tt class="literal">main()</tt> method or any other single entry point from
      which the program starts running.  Instead, to write an applet,
      you subclass the <tt class="literal">java.applet.Applet</tt> class 
      (which is itself a
      subclass of <tt class="literal">java.awt.Panel</tt> and thus a descendant of
      <tt class="literal">java.awt.Component</tt>) and override a number of
      standard methods.  At appropriate times, under well-defined
      circumstances, the web browser or applet viewer invokes the
      methods you have defined.  The applet is not in control of the
      thread of execution; it simply responds when the browser or viewer
      tells it to.  For this reason, the methods you write must take the
      necessary action and return promptly--they are not allowed to
      enter time-consuming (or infinite) loops.  In order to perform a
      time-consuming or repetitive task, such as animation, an applet
      may create its own <tt class="literal">Thread</tt>, over which it does
      have complete control.</p>

<p>The task of writing an applet, then, comes down to defining
      the appropriate methods.  A number of these methods are
      defined by the <tt class="literal">Applet</tt> class:</p>
<dl>
<a name="INDEX-1171"></a>
<dt>
<b><tt class="literal">init()</tt></b>
</dt>
<dd>

<p>Called when the applet is first loaded into the browser or
	    viewer.  It is typically used to perform applet
	    initialization, in preference to a constructor method.  (If
	    you define a constructor for your <tt class="literal">Applet</tt>,
	    it must be a no-argument constructor, as that is what
	    the web browser expects.)  If your applet displays GUI
	    components, they are typically created here.  (Remember that
	    the applet itself is a <tt class="literal">java.awt.Panel</tt>, so
	    you can create components and <tt class="literal">add()</tt> them
	    directly to the applet.)</p>
</dd>
<a name="INDEX-1172"></a>
<dt>
<b><tt class="literal">destroy()</tt></b>
</dt>
<dd>

<p>Called when the applet is about to be unloaded from the
	    browser or viewer.  The method 
	    should free any resources, other than
	    memory, that the applet has allocated.  The
	    <tt class="literal">destroy()</tt> method is much less commonly
	    used than <tt class="literal">init()</tt>.</p>
</dd>
<a name="INDEX-1173"></a>
<dt>
<b><tt class="literal">start()</tt></b>
</dt>
<dd>

<p>Called when the applet becomes visible and should start
	    doing whatever it is that it does.  An applet that performs
	    animation or does some other action only when it is 
	    visible needs to implement this method.</p>
</dd>
<a name="INDEX-1174"></a>
<dt>
<b><tt class="literal">stop()</tt></b>
</dt>
<dd>

<p>Called when the applet becomes temporarily invisible (e.g., 
	    when the user has scrolled it off the screen).
	    Tells the applet to stop performing an animation or other
	    task.</p>
</dd>
<a name="INDEX-1175"></a>
<dt>
<b><tt class="literal">getAppletInfo()</tt></b>
</dt>
<dd>

<p>Called to get information about the applet (e.g., its name and
	    author).  This method should return a
	    string suitable for display in a dialog box.</p>
</dd>
<a name="INDEX-1176"></a>
<dt>
<b><tt class="literal">getParameterInfo()</tt></b>
</dt>
<dd>

<p>Called to obtain information about the parameters to which the applet
	    responds.  Returns a
	    <tt class="literal">String[ ][ ]</tt> that describes
	    the parameters.</p>
</dd>
</dl>
<a name="INDEX-1177"></a>
<a name="INDEX-1178"></a>
<a name="INDEX-1179"></a>

<p>In addition to these <tt class="literal">Applet</tt> methods, there are a
      variety of <tt class="literal">Component</tt> methods that an applet may
      want to override.  The most obvious of these methods is
      <tt class="literal">paint()</tt>, which the browser or viewer invokes to ask the applet to draw itself on the
      screen.  </p>

<p>Applets handle events in the same way that AWT and Swing
      applications and components do.  However, for maximum portability to old
      web browsers such as Netscape Navigator 3 and early versions of
      Navigator 4, many applets use the deprecated Java 1.0 event model
      and override methods such as <tt class="literal">mouseDown()</tt>,
      <tt class="literal">mouseDrag()</tt>, <tt class="literal">keyDown()</tt>, and
      <tt class="literal">action()</tt>.</p>

<p>In addition to all these methods that you override when writing an
      applet, the <tt class="literal">Applet</tt> class also defines some methods
      that you may find useful to invoke from your applet:</p>
<dl>
<a name="INDEX-1180"></a>
<dt>
<b><tt class="literal">getImage()</tt></b>
</dt>
<dd>

<p>Loads an image file from the network and returns an
	    <tt class="literal">Image</tt> object.</p>
</dd>
<a name="INDEX-1181"></a>
<dt>
<b><tt class="literal">getAudioClip()</tt></b>
</dt>
<dd>

<p>Loads a sound clip from the network and returns an
	    <tt class="literal">AudioClip</tt> object.</p>
</dd>
<a name="INDEX-1182"></a>
<dt>
<b><tt class="literal">getParameter()</tt></b>
</dt>
<dd>

<p>Looks up and returns the value of a named parameter,
	    specified with a <tt class="literal">&lt;PARAM&gt;</tt> tag in the
	    HTML file that contains the applet.</p>
</dd>
<a name="INDEX-1183"></a>
<dt>
<b><tt class="literal">getCodeBase()</tt></b>
</dt>
<dd>

<p>Returns the base URL from which the applet class file was
	    loaded.</p>
</dd>
<a name="INDEX-1184"></a>
<dt>
<b><tt class="literal">getDocumentBase()</tt></b>
</dt>
<dd>

<p>Returns the base URL of the HTML file that refers to the
	    applet.</p>
</dd>
<a name="INDEX-1185"></a>
<dt>
<b><tt class="literal">showStatus()</tt></b>
</dt>
<dd>

<p>Displays a message in the status line of the browser or
	    applet viewer.</p>
</dd>
<a name="INDEX-1186"></a>
<a name="INDEX-1187"></a>
<dt>
<b><tt class="literal">getAppletContext()</tt></b>
</dt>
<dd>

<p>Returns the <tt class="literal">AppletContext</tt> object for the applet.
	    <tt class="literal">AppletContext</tt> defines the useful
	    <tt class="literal">showDocument()</tt> method that asks the browser to
	    load and display a new web page.</p>
</dd>
</dl>
<a name="INDEX-1188"></a>
<a name="INDEX-1189"></a>
<a name="INDEX-1190"></a>

<h3 class="sect2">7.1.1. A Simple Applet</h3>
<a name="INDEX-1191"></a>

<p>
<a href="#jfcnut-ch-7-ex-1">Example 7-1</a> is a simple applet.  
	The applet has a simple
	<tt class="literal">init()</tt> method but consists primarily of the
	<tt class="literal">paint()</tt> method that produces the applet
	display shown in <a href="#jfcnut-ch-7-fig-1">Figure 7-1</a>.  
	The example also demonstrates the use of
	the <tt class="literal">getParameter()</tt> method to obtain
	the string of text that it displays.</p>

<a name="INDEX-1192"></a>
<a name="INDEX-1193"></a>

<p>This applet can be placed within an HTML file using the
	following HTML tags:</p>
<blockquote>
<pre class="programlisting">&lt;APPLET code="MessageApplet.class" width=350 height=125&gt;
  &lt;PARAM name="message" value="Hello World"&gt;
&lt;/APPLET&gt;</pre>
</blockquote>

<p>	To run and display the applet, simply load the
	HTML file into a Java-enabled web browser.  Alternatively, you
	can use the <em class="emphasis">appletviewer</em> program included
	with Sun's Java implementation to view the applet:</p>


<blockquote>
<pre class="programlisting">% appletviewer MessageApplet.html</pre>
</blockquote>
<p>
	When invoking <em class="emphasis">appletviewer</em>,
	you must specify the name of the HTML file that includes the
	applet, not the Java class file that implements the
	applet. We'll discuss how applets are embedded in HTML files in
	full detail later in this chapter.</p>
<a name="jfcnut-ch-7-fig-1"></a>
<div class="figure">
<img alt="figure" src="figs/jfcn.0701.gif" webstripperlinkwas="figs/jfcn.0701.gif"></div>
<h4 class="objtitle">Figure 7-1. A simple applet</h4>

<a name="jfcnut-ch-7-ex-1"></a>
<div class="example">
<h4 class="objtitle">Example 7-1. MessageApplet.java</h4>

<blockquote>
<pre class="programlisting">import java.applet.*;
import java.awt.*;

public class MessageApplet extends Applet {
  protected String message;   // The text to display
  protected Font font;        // The font to display it in

  // One-time initialization for the applet
  public void init() {
    message = this.getParameter("message");
    font = new Font("Helvetica", Font.BOLD, 48);
  }

  // Draw the applet whenever necessary
  public void paint(Graphics g) {
    // The pink oval
    g.setColor(Color.pink);
    g.fillOval(10, 10, 330, 100);

    // The red outline. The browser may not support Java 2D, so we
    // try to simulate a four-pixel-wide line by drawing four ovals.
    g.setColor(Color.red);
    g.drawOval(10,10, 330, 100);
    g.drawOval(9, 9, 332, 102);
    g.drawOval(8, 8, 334, 104);
    g.drawOval(7, 7, 336, 106);

    // The text
    g.setColor(Color.black);
    g.setFont(font);
    g.drawString(message, 40, 75);
  }
}</pre>
</blockquote>
</div>
<a name="INDEX-1194"></a>


<h3 class="sect2">7.1.2. Applets and the Java 1.0 Event Model</h3>
<a name="INDEX-1195"></a>
<a name="INDEX-1196"></a>

<p>The AWT event model changed dramatically between Java 1.0 and
	Java 1.1.  <a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_01.htm">Chapter 2, "Swing and AWTArchitecture"</a>, described the Java 1.1
	event-handling model exclusively, since the Java 1.0 event model
	is now deprecated.  However, because there is still a large
	installed base of web browsers that support only the Java 1.0
	event model, applets are sometimes still written using this
	model.  </p>

<a name="INDEX-1197"></a>
<a name="INDEX-1198"></a>
<a name="INDEX-1199"></a>
<a name="INDEX-1200"></a>

<p>In Java 1.0, all events are represented by the <tt class="literal">Event</tt>
	class.  This class has a number of instance variables that
	describe the event.  One of these variables, <tt class="literal">id</tt>,
	specifies the type of the event.  <tt class="literal">Event</tt> defines a
	number of constants that are the possible values for the
	<tt class="literal">id</tt> field.  The <tt class="literal">target</tt> field specifies the
	object (typically a <tt class="literal">Component</tt>) that generated the
	event or on which the event occurred (i.e., the source of the
	event).  The other fields may or may not be used, depending
	on the type of the event.  For example, the <tt class="literal">x</tt> and
	<tt class="literal">y</tt> fields are defined when <tt class="literal">id</tt> specifies a
	<tt class="literal">BUTTON_EVENT</tt> but not when it specifies an
	<tt class="literal">ACTION_EVENT</tt>.
	The <tt class="literal">arg</tt> field can provide additional type-dependent data.</p>

<a name="INDEX-1201"></a>
<a name="INDEX-1202"></a>

<p>A Java 1.0 event is dispatched first to the
	<tt class="literal">handleEvent()</tt> method of the
	<tt class="literal">Component</tt> on which it occurred.  The default
	implementation of this method checks the <tt class="literal">id</tt> field of
	the <tt class="literal">Event</tt> object and dispatches the most commonly
	used types of events to various type-specific methods,
	listed in <a href="#jfcnut-ch-7-tab-1">Table 7-1</a>.</p>

<a name="INDEX-1203"></a>
<a name="jfcnut-ch-7-tab-1"></a>
<h4 class="objtitle">Table 7-1. Java 1.0 Event Processing Methods of Component</h4>
<table border="1">
<tr>
<td><tt class="literal">action()</tt></td>
<td><tt class="literal">keyUp()</tt></td>
<td><tt class="literal">mouseDrag()</tt></td>
<td><tt class="literal">mouseMove()</tt></td>
</tr>
<tr>
<td><tt class="literal">gotFocus()</tt></td>
<td><tt class="literal">lostFocus()</tt></td>
<td><tt class="literal">mouseEnter()</tt></td>
<td><tt class="literal">mouseUp()</tt></td>
</tr>
<tr>
<td><tt class="literal">keyDown()</tt></td>
<td><tt class="literal">mouseDown()</tt></td>
<td><tt class="literal">mouseExit()</tt></td>
<td><tt class="literal"></tt></td>
</tr>
</table>
<a name="INDEX-1204"></a>
<a name="INDEX-1205"></a>

<p>The methods listed in <a href="#jfcnut-ch-7-tab-1">Table 7-1</a> are
	defined by the <tt class="literal">Component</tt> class.  One of the primary
	characteristics of the Java 1.0 event model is that you must
	override these methods in order to process events.  This means
	that you must create a subclass to define custom event-handling
	behavior, which is exactly what we do when we write an applet,
	for example.  However, not all of the event types
	are dispatched by <tt class="literal">handleEvent()</tt> to more specific
	methods.  If you are interested in <tt class="literal">LIST_SELECT</tt>
	or <tt class="literal">WINDOW_ICONIFY</tt> events, for example, you have to
	override <tt class="literal">handleEvent()</tt> itself, rather than one of
	the more specific methods.  If you do this, you usually want to
	invoke <tt class="literal">super.handleEvent()</tt> to continue dispatching
	events of other types in the default way.</p>

<p>
<tt class="literal">handleEvent()</tt> and all of the
	type-specific methods return <tt class="literal">boolean</tt> values.
	If an event-handling method returns
	<tt class="literal">false</tt>, as they all do by default, it means that the
	event was not handled, so it should be passed to the container
	of the current component to see if that container is
	interested in processing it.  If a method returns
	<tt class="literal">true</tt>, on the other hand, it is a signal that the
	event <em class="emphasis">has</em> been handled and no further processing is
	needed.</p>

<p>The fact that unhandled events are passed up the
	containment hierarchy is important.  It means that we can
	override the <tt class="literal">action()</tt> method in an
	applet in order to handle <tt class="literal">ACTION_EVENT</tt> events that are
	generated by the buttons within the applet.  If they were


	not propagated up as they are, we would have to create a
	custom subclass of <tt class="literal">Button</tt> for every button we wanted
	to add to an interface!</p>

<p>In the Java 1.0 model, there is no de facto way to know what
	types of events are generated by what GUI components nor to
	know what fields of the <tt class="literal">Event</tt> object are
	filled in for what types of events.  You simply have to look
	this information up in the documentation of individual AWT
	components.  </p>

<p>Many event types use the <tt class="literal">modifiers</tt> field of
	the <tt class="literal">Event</tt> object to report which keyboard
	modifier keys were pressed when the event occurred.  This
	field contains a bitmask of the <tt class="literal">SHIFT_MASK</tt>,
	<tt class="literal">CTRL_MASK</tt>, <tt class="literal">META_MASK</tt>, and
	<tt class="literal">ALT_MASK</tt> constants defined by the
	<tt class="literal">Event</tt> class.  The
	<tt class="literal">shiftDown()</tt>, <tt class="literal">controlDown()</tt>,
	and <tt class="literal">metaDown()</tt> methods can be used to test
	for the various modifiers.  </p>

<a name="INDEX-1206"></a>
<a name="INDEX-1207"></a>
<a name="INDEX-1208"></a>
<a name="INDEX-1209"></a>

<p>The <tt class="literal">Event</tt> class does not have a special field to
	indicate which mouse button was pressed when a mouse event occurs.
	Instead, <tt class="literal">Event</tt> uses 
	the keyboard modifier constants for this purpose, which allows
	systems that use a one-button mouse to simulate other
	mouse buttons by using keyboard modifiers.  If the left mouse
	button is in use, no keyboard modifiers are reported.  If
	the right button is used, the <tt class="literal">META_MASK</tt> bit
	is set in the <tt class="literal">modifiers</tt> field.  And if
	the middle button is down, the <tt class="literal">ALT_MASK</tt> bit
	is set.</p>

<p>When a keyboard event occurs, you should check the
	<tt class="literal">id</tt> field of the <tt class="literal">Event</tt>
	object to determine what kind of key was pressed.  If the event
	type is <tt class="literal">KEY_PRESS</tt> or
	<tt class="literal">KEY_RELEASE</tt>, the keyboard key has an
	ASCII or Unicode representation, and the <tt class="literal">key</tt>
	fields of the event object contain the encoding of the
	key.  On the other hand, if <tt class="literal">id</tt> is
	<tt class="literal">KEY_ACTION</tt> or
	<tt class="literal">KEY_ACTION_RELEASE</tt>, the key is a
	function key of some sort, and the <tt class="literal">key</tt> field
	contains one of the keyboard constants defined by the
	<tt class="literal">Event</tt> class, such as
	<tt class="literal">Event.F1</tt> or <tt class="literal">Event.LEFT</tt>. </p>

<p>
<a href="#jfcnut-ch-7-ex-2">Example 7-2</a> shows a
	simple applet that allows the user to produce drawings by
	scribbling with the mouse.  It also allows the user to erase
	those drawings by clicking on a button or pressing the 
	<b class="emphasis-bold">E</b> key.
	The applet overrides methods to handle mouse
	events, keyboard events, and action events generated by the
	<tt class="literal">Button</tt> component.  Unlike the applet in 
	<a href="#jfcnut-ch-7-ex-1">Example 7-1</a>, this applet does not define a
	<tt class="literal">paint()</tt> method.  For simplicity, it does its
	drawing directly in response to the events it receives and does
	not store the coordinates.  This means that it cannot regenerate
	the user's drawing if it is scrolled off the screen and then
	scrolled back on.</p>
<a name="jfcnut-ch-7-ex-2"></a>
<div class="example">
<h4 class="objtitle">Example 7-2. An Applet That Uses the Java 1.0 Event Model</h4>

<blockquote>
<pre class="programlisting">import java.applet.*;
import java.awt.*;

/** A simple applet using the Java 1.0 event-handling model */
public class Scribble extends Applet {
  private int lastx, lasty;    // Remember last mouse coordinates
  Button erase_button;         // The Erase button
  Graphics g;                  // A Graphics object for drawing

  /** Initialize the button and the Graphics object */
  public void init() {
    erase_button = new Button("Erase");
    this.add(erase_button);
    g = this.getGraphics();
    this.requestFocus();  // Ask for keyboard focus so we get key events
  }
  /** Respond to mouse clicks */
  public boolean mouseDown(Event e, int x, int y) {
    lastx = x; lasty = y;             // Remember where the click was
    return true;
  }
  /** Respond to mouse drags */
  public boolean mouseDrag(Event e, int x, int y) {
    g.setColor(Color.black);
    g.drawLine(lastx, lasty, x, y);   // Draw from last position to here
    lastx = x; lasty = y;             // And remember new last position
    return true;
  }
  /** Respond to key presses: erase drawing when user types 'e' */
  public boolean keyDown(Event e, int key) {
    if ((e.id = = Event.KEY_PRESS) &amp;&amp; (key = = 'e')) {
      g.setColor(this.getBackground());   
      g.fillRect(0, 0, bounds().width, bounds().height);
      return true;
    }
    else return false;
  }
  /** Respond to button clicks: erase drawing when user clicks button */
  public boolean action(Event e, Object arg) {
    if (e.target = = erase_button) {
      g.setColor(this.getBackground());   
      g.fillRect(0, 0, bounds().width, bounds().height);
      return true;
    }
    else return false;
  }
}</pre>
</blockquote>
</div>
<a name="INDEX-1210"></a>
<a name="INDEX-1211"></a>
<a name="INDEX-1212"></a>



<a name="INDEX-1264"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch06_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch07_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch07_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">6.5. A Data Sink</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">7.2. Including Applets in HTML Files</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
