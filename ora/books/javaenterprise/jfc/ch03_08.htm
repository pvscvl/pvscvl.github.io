<html>
<head>
<title>Keyboard Shortcuts (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Keyboard Shortcuts">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_01.htm">Chapter 3: Swing

Programming Topics</a></td><td align="right" valign="top" width="172"><a href="ch03_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_09.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">3.8. Keyboard Shortcuts</h2>
<a name="INDEX-474"></a>
<a name="INDEX-475"></a>

<p>A full-featured user interface does not require the user to use the
      mouse all the time. Instead, it provides keyboard shortcuts that
      allow the user to operate the application primarily or entirely
      with the keyboard.  Swing has a number of features that support
      keyboard shortcuts.  Every Swing component is designed
      to respond to keyboard events and support keyboard operation 
      automatically.  For example, a <tt class="literal">JButton</tt> is 
      activated when it receives a <tt class="literal">KeyEvent</tt> that tells 
      it that the user pressed the <b class="emphasis-bold">Spacebar</b> or the 
      <b class="emphasis-bold">Enter</b> key.  Similarly,
      <tt class="literal">JMenu</tt> and <tt class="literal">JList</tt> respond to
      the arrow keys.</p>

<a name="INDEX-476"></a>

<h3 class="sect2">3.8.1. Focus Management</h3>
<a name="INDEX-477"></a>

<p>In order for a Swing component to receive keyboard events, it
	must first have the keyboard focus.  In the
	old days, before graphical interfaces, when you typed on
	the keyboard, the characters always appeared on the screen.  
	There was only one "window," 
	so there was only one place to send key events.
	This changes with the introduction of
	windowing systems and GUIs, however, as there
	are now lots of places that keyboard events can be directed to.
	When there is more than one window open on the screen, one
	window is singled out as the current window (or the
	focused window).  Most windowing systems highlight this
	window somehow.  When you type at the keyboard, it is understood
	that your keystrokes are directed at the current window.</p>

<p>Just as a screen may contain many application windows, a single
	application window usually contains many GUI components.  
	An application window must redirect the
	keyboard events it receives to only one of these components, 
	called the focused component.
	Like most GUI toolkits, Swing highlights the component that has 
	the keyboard focus, to let the user know where keyboard events
	are being directed.  The
	details of the highlight depend on the look-and-feel that is
	currently in effect, but focus is often indicated by drawing a
	bold border around a 

component.</p>



<p>A Swing component can be operated from the keyboard when it 
	has the focus.  The user can usually direct keyboard focus to a
	given component by clicking on that component with the
	mouse, but this defeats the whole point of not using the
	mouse.  The missing piece of the picture is focus
	traversal, otherwise known as keyboard navigation, which
	allows the user to
	use the keyboard to change focus from one component to the next.</p>

<p>Swing uses the <b class="emphasis-bold">Tab</b> key to
	implement focus traversal.  When the user presses <b class="emphasis-bold">Tab</b>, Swing moves the keyboard focus from
	the current component to the next component that can accept the
	focus. (Some components, such as <tt class="literal">JLabel</tt> objects, do
	not respond to keyboard events and are therefore 
	never given the focus.)
	When the user types <b class="emphasis-bold">Shift-Tab</b>,
	Swing moves keyboard focus backward to the previous focusable
	component.  By default, keyboard focus moves from left to right
	and top to bottom within a container.  You can override
	this, however, by setting the
	<tt class="literal">nextFocusableComponent</tt> property of your
	components, chaining them together in whatever order you desire.</p>

<a name="INDEX-478"></a>
<a name="INDEX-479"></a>
<a name="INDEX-480"></a>
<a name="INDEX-481"></a>

<p>When a container is given focus through this mechanism, it
	passes that focus on to its first focusable child.  When the
	focus reaches the last focusable child, some containers
	relinquish the focus and allow it to move on, while other containers
	retain the focus and give it back to the first focusable
	child.  You can determine the behavior of a container by calling
	<tt class="literal">isFocusCycleRoot()</tt>.  If this method returns
	<tt class="literal">true</tt>, the container defines a focus
	cycle and retains the focus.  The user must type <b class="emphasis-bold">Ctrl-Tab</b> to traverse to the next focus
	cycle or <b class="emphasis-bold">Ctrl-Shift-Tab</b> to
	traverse to the previous focus cycle.  There is no
	<tt class="literal">setFocusCycleRoot()</tt> method: the only way you
	can change this behavior is by subclassing a container and
	overriding the <tt class="literal">isFocusCycleRoot()</tt> method.
	Also note that multiline text components such as
	<tt class="literal">JTextArea</tt> and <tt class="literal">JEditorPane</tt>
	use the <b class="emphasis-bold">Tab</b> key for their own
	purposes.  These components behave like focus cycles, so
	the user must type <b class="emphasis-bold">Ctrl-Tab</b> to
	move the focus away from such a component.</p>

<a name="INDEX-482"></a>
<a name="INDEX-483"></a>

<p>An application sometimes needs to set the keyboard
	focus to a particular component explicitly.  
	You can do this by calling the
	<tt class="literal">requestFocus()</tt> method of that component.
	Components typically call <tt class="literal">requestFocus()</tt>
	themselves under certain circumstances, such as when they are
	clicked on.  If you do not want a component to respond to
	<tt class="literal">requestFocus()</tt> calls, set its
	<tt class="literal">requestFocusEnabled</tt> property to
	<tt class="literal">false</tt>.  For example, you might set this
	property on a <tt class="literal">JButton</tt> so that the user can
	click on it without taking keyboard focus away from whatever
	component currently has it.</p>

<p>Swing focus management is handled by the currently installed
	<tt class="literal">javax.swing.FocusManager</tt> object.  You can 
	obtain this object with
	
<tt class="literal">FocusManager.getCurrentFocusManager()</tt>.  If
	you implement your own manager, you can install it with
	<tt class="literal">FocusManager.setCurrentFocusManager()</tt>.
<a name="INDEX-484"></a><a name="INDEX-485"></a><a name="INDEX-486"></a>
</p>

<h3 class="sect2">3.8.2. Menu Mnemonics and Accelerators</h3>

<p>Although Swing components can all be operated automatically from
	the keyboard, doing so is often cumbersome.  The solution is 
	to provide additional explicit keyboard shortcuts for common
	actions, as is commonly done with items on pull-down menus.
	Swing pull-down menus support two traditional types of
	keyboard shortcuts: mnemonics and accelerators.  
	<a href="#jfcnut-ch-3-fig-menushortcuts">Figure 3-1</a> shows both types
	of menu shortcuts.</p>
<a name="jfcnut-ch-3-fig-menushortcuts"></a>
<div class="figure">
<img alt="figure" src="figs/jfcn.0301.gif" webstripperlinkwas="figs/jfcn.0301.gif"></div>
<h4 class="objtitle">Figure 3-1. Swing menu mnemonics and accelerators</h4>
<a name="INDEX-487"></a>
<a name="INDEX-488"></a>

<p>A <em class="emphasis">menu mnemonic</em> 
	is a single-letter abbreviation for a menu
	command.  When the menu has already been pulled down, the user can type
	this single key to invoke that menu item.  The mnemonic for a
	menu item is
	typically indicated by underlining the letter of the
	shortcut in the menu item name, which means that you must select
	a shortcut letter that appears in the menu item label.
	Mnemonics must be unique within a menu, of course, but multiple
	menu panes can reuse mnemonics.  Items in a menu bar may also
	have mnemonics.  You specify a mnemonic for a menu or a menu item
	with the <tt class="literal">setMnemonic()</tt> method (inherited from
	<tt class="literal">AbstractButton</tt>):
<a name="INDEX-489"></a><a name="INDEX-490"></a>
</p>

<blockquote>
<pre class="programlisting">JMenu file = new JMenu("File");
file.setMnemonic('F');
JMenuItem save = new JMenuItem("Save");
save.setMnemonic('S');            // Always use a capital letter
file.add(save);</pre>
</blockquote>



<a name="INDEX-491"></a>
<a name="INDEX-492"></a>
<a name="INDEX-493"></a>
<a name="INDEX-494"></a>

<p>A <em class="emphasis">menu accelerator</em> 
	is a unique keyboard command that can be used
	to invoke a menu item even when the menu is not displayed.
	An accelerator is represented by a 
	<tt class="literal">javax.swing.KeyStroke</tt>
	object and usually includes a keyboard modifier such as
	<b class="emphasis-bold">Ctrl</b> or <b class="emphasis-bold">Alt</b>.  Unlike mnemonics, accelerators
	can be applied only to menu items, not to menus in a menu bar.
	You can create an accelerator for a menu item by calling
	<tt class="literal">setAccelerator()</tt>.  To obtain an appropriate
	<tt class="literal">KeyStroke</tt> object, call the static
	<tt class="literal">KeyStroke.getKeyStroke()</tt> method with the
	keycode and modifier mask for the keyboard command you
	want to use:
<a name="INDEX-495"></a><a name="INDEX-496"></a>
</p>

<blockquote>
<pre class="programlisting">JMenuItem save = new JMenuItem("Save");
save.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S,
                                           java.awt.Event.CTRL_MASK));</pre>
</blockquote>



<h3 class="sect2">3.8.3. Keyboard Actions</h3>

<p>Sometimes even the keyboard shortcuts supported by menus are not
	enough.  An application may need to define keyboard shortcuts for
	actions that are not available through the menu system.  For
	example, an application that uses a
	<tt class="literal">JScrollPane</tt> to display a large drawing
	might want to allow the user to scroll the drawing with the
	arrow keys and the <b class="emphasis-bold">PageUp</b> and
	<b class="emphasis-bold">PageDown</b> keys.</p>

<p>Fortunately, every Swing component maintains a table of 
	<tt class="literal">KeyStroke</tt>-to-<tt class="literal">ActionListener</tt> 
	bindings.  When a particular keystroke is bound
	to an <tt class="literal">ActionListener</tt>, the component 
	will perform the action (i.e., invoke the 
	<tt class="literal">actionPerformed()</tt>
	method) when the user types the keystroke.  You can register a
	keyboard shortcut for a component with
	<tt class="literal">registerKeyboardAction()</tt>.  For instance:
<a name="INDEX-497"></a><a name="INDEX-498"></a><a name="INDEX-499"></a>
</p>

<blockquote>
<pre class="programlisting">Action scroll;   // This action object is initialized elsewhere
JPanel panel;    // The application's main container; initialized elsewhere

KeyStroke up = KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_UP);
KeyStroke down = KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DOWN);
KeyStroke pgup = KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_UP);
KeyStroke pgdown=KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_DOWN);

panel.registerKeyboardAction(scroll, "lineup", up,
                             JComponent.WHEN_ANCESTOR_OF_FOCUSED_WINDOW);
panel.registerKeyboardAction(scroll, "linedown", down,
                             JComponent.WHEN_ANCESTOR_OF_FOCUSED_WINDOW);
panel.registerKeyboardAction(scroll, "pageup", pgup,
                             JComponent.WHEN_ANCESTOR_OF_FOCUSED_WINDOW);
panel.registerKeyboardAction(scroll, "pagedown", pgdown,
                             JComponent.WHEN_ANCESTOR_OF_FOCUSED_WINDOW);</pre>
</blockquote>



<p>This code registers four keystrokes that all invoke the
	<tt class="literal">scroll</tt> action.  When
	the user types one of these keystrokes, the
	<tt class="literal">actionPerformed()</tt> method is passed an
	<tt class="literal">ActionEvent</tt> object.  The
	<tt class="literal">getActionCommand()</tt> method of this
	<tt class="literal">ActionEvent</tt> returns one of the strings
	"lineup", "linedown", "pageup", or "pagedown".  The hypothetical
	<tt class="literal">scroll</tt> action we are using here would examine
	this string to determine what kind of scrolling to perform.</p>

<a name="INDEX-500"></a>

<p>The fourth argument to
	<tt class="literal">registerKeyboardAction()</tt> is a constant that
	defines under what circumstances the keyboard action should be
	available to the user.  The value used here,
	<tt class="literal">WHEN_ANCESTOR_OF_FOCUSED_WINDOW</tt>, specifies that the
	keyboard binding should be in effect whenever the panel 
	or any of its descendants has the focus.  You can also specify
	a value of 
	<tt class="literal">WHEN_IN_FOCUSED_WINDOW</tt>, which means 
	that the keyboard action is 
	available whenever the window containing the
	component has the focus.  This is useful for shortcuts
	registered on default buttons within dialog boxes.  The final
	allowable value for this argument is
	<tt class="literal">WHEN_FOCUSED</tt>, which specifies that the key
	binding is in effect only when the component itself has the
	focus.  This is useful when you are adding key bindings to an
	individual component like a <tt class="literal">JTree</tt>.</p>

<h3 class="sect2">3.8.4. Keymaps</h3>
<a name="INDEX-501"></a>
<a name="INDEX-502"></a>

<p>Swing supports a general, yet powerful text-editing
	subsystem.  The
	<tt class="literal">javax.

swing.text.JTextComponent</tt> is the base
	component in this system; it is the superclass of
	<tt class="literal">JTextField</tt>, <tt class="literal">JTextEditor</tt>,
	and <tt class="literal">JEditorPane</tt>, among others.</p>

<a name="INDEX-503"></a>
<a name="INDEX-504"></a>

<p>Because text editing typically involves many keyboard shortcuts,
	Swing defines the <tt class="literal">javax.swing.text.Keymap</tt>
	interface, which represents a set of
	<tt class="literal">KeyStroke</tt>-to-<tt class="literal">Action</tt>
	bindings.  As you might expect, when a text component has the 
	keyboard focus and the user types a keystroke that is bound to an 
	action, the text component invokes that action. 
	A <tt class="literal">Keymap</tt> can have a parent
	<tt class="literal">Keymap</tt> from which it inherits bindings,
	making it easy to override a few bindings of an existing keymap
	without redefining all the bindings from scratch.  When 
	you are working
	with a large number of keyboard shortcuts, it is easier to use a
	<tt class="literal">Keymap</tt> than to register each one individually
	with <tt class="literal">registerKeyboardAction()</tt>.</p>

<a name="INDEX-505"></a>
<a name="INDEX-506"></a>

<p>
<tt class="literal">JTextComponent</tt> defines
	<tt class="literal">getKeymap()</tt> and
	<tt class="literal">setKeymap()</tt> methods you can use to query
	and set the current keymap of a text component.  There are no
        public implementations of the <tt class="literal">Keymap</tt>
        interface, so you cannot instantiate one directly.  Instead, 
        create a new <tt class="literal">Keymap</tt> by calling the static
        <tt class="literal">JTextComponent.addKeymap()</tt> method.  This 
        method allows you to specify a name and parent for the new
        <tt class="literal">Keymap</tt>.  Both arguments are optional, however,
        so you may pass in <tt class="literal">null</tt>.</p>

<a name="INDEX-507"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_09.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.7. Client Properties</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.9. Serialization</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
