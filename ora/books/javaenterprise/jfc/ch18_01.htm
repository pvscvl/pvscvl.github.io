<html>
<head>
<title>The java.awt.image Package (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The java.awt.image Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch17_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch17_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/part2.htm">Part 2: API Quick Reference</a></td><td align="right" valign="top" width="172"><a href="ch19_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch19_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 18.  The java.awt.image Package</h1>

<a name="INDEX-2067"></a>
<a name="INDEX-2068"></a>
<p> 
  The <tt class="literal">java.awt.image</tt>
  package contains classes and interfaces for manipulating
  images.  Note that the <tt class="literal">java.awt.Image</tt> class itself
  is not part of this package.  In Java 1.0 and Java 1.1, the image
  processing model was optimized for streaming image data loaded over a
  network and processed on the fly.  It involved the
  <tt class="literal">ImageProducer</tt>, <tt class="literal">ImageConsumer</tt>, and
  <tt class="literal">ImageObserver</tt> interfaces and the
  <tt class="literal">ImageFilter</tt> class.  This image-processing model is
  complex and difficult to use.  Much of it has been superseded in Java
  1.2.</p>
<a name="INDEX-2069"></a>
<a name="INDEX-2070"></a>
<a name="INDEX-2071"></a>
<p>  In Java 2D, the image-processing model has been extended (and
  simplified) to accommodate image data that is stored and manipulated in
  memory.  The key pieces of this new image-processing model are the
  <tt class="literal">BufferedImage</tt> class, which represents an image in
  memory, and the <tt class="literal">BufferedImageOp</tt> interface, which
  represents an image-processing operation.  Every
  <tt class="literal">BufferedImage</tt> contains a <tt class="literal">Raster</tt>
  object that hold the pixels of the image and a
  <tt class="literal">ColorModel</tt> object that can interpret those pixel
  values as <tt class="literal">Color</tt> objects.  A
  <tt class="literal">Raster</tt> object, in turn, contains a
  <tt class="literal">DataBuffer</tt> that holds the raw image data and a
  <tt class="literal">SampleModel</tt> object that knows how to extract pixel
  values from that raw data.</p>
<p>
<a href="#jfcnut-ch-java.awt.image-fig-1">Figure 18-1</a> shows the class hierarchy of
  this package.
  See <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_01.htm">Chapter 4, "Graphics with AWT

and Java 2D"</a>, for a discussion of images and image
  processing.</p>
<a name="jfcnut-ch-java.awt.image-fig-1"></a>
<div class="figure">
<img alt="figure" src="figs/jfcn.1801.gif" webstripperlinkwas="figs/jfcn.1801.gif"></div>
<h4 class="objtitle">Figure 18-1. The java.awt.image package</h4>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AffineTransformOp</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2072"></a>
<p>  This class is a <tt class="literal">BufferedImageOp</tt> and a
  <tt class="literal">RasterOp</tt> that performs an arbitrary
  <tt class="literal">java.awt.geom.AffineTransform</tt> on a
  <tt class="literal">BufferedImage</tt> or <tt class="literal">Raster</tt>.  To
  create an <tt class="literal">AffineTransformOp</tt>, you must specify the
  desired <tt class="literal">AffineTransform</tt> and the interpolation mode
  to use when interpolation is necessary to determine the pixel or color
  values of the destination.  <tt class="literal">TYPE_NEAREST_NEIGHBOR</tt>
  is the quicker form of interpolation, but
  <tt class="literal">TYPE_BILINEAR</tt> produces better results.  You may
  also specify the type of interpolation to use by specifying a
  <tt class="literal">java.awt.RenderingHints</tt> object that contains an
  interpolation hint.</p>
<a name="INDEX-2073"></a>
<p>  To use an <tt class="literal">AffineTransformOp</tt>, simply pass a
  <tt class="literal">BufferedImage</tt> or <tt class="literal">Raster</tt> to the
  <tt class="literal">filter()</tt> method.  Note that for this operation the
  destination image or raster cannot be the same as the source image or
  raster. 
  See <tt class="literal">BufferedImageOp</tt> for further details.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">AffineTransformOp</b> implements BufferedImageOp, RasterOp {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">AffineTransformOp</b> (java.awt.geom.AffineTransform <i class="parameter">xform</i>, RenderingHints <i class="parameter">hints</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">AffineTransformOp</b> (java.awt.geom.AffineTransform <i class="parameter">xform</i>, int <i class="parameter">interpolationType</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_BILINEAR</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_NEAREST_NEIGHBOR</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getInterpolationType</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.AffineTransform <b class="function">getTransform</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing BufferedImageOp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public BufferedImage <b class="function">createCompatibleDestImage</b> (BufferedImage <i class="parameter">src</i>, ColorModel <i class="parameter">destCM</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final BufferedImage <b class="function">filter</b> (BufferedImage <i class="parameter">src</i>, BufferedImage <i class="parameter">dst</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.Rectangle2D <b class="function">getBounds2D</b> (BufferedImage <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.Point2D <b class="function">getPoint2D</b> (java.awt.geom.Point2D <i class="parameter">srcPt</i>, java.awt.geom.Point2D <i class="parameter">dstPt</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final RenderingHints <b class="function">getRenderingHints</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing RasterOp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">createCompatibleDestRaster</b> (Raster <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final WritableRaster <b class="function">filter</b> (Raster <i class="parameter">src</i>, WritableRaster <i class="parameter">dst</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.Rectangle2D <b class="function">getBounds2D</b> (Raster <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->AffineTransformOp(BufferedImageOp,RasterOp)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>AreaAveragingScaleFilter</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>cloneable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2074"></a>
This class implements an <tt class="literal">ImageFilter</tt> that scales an
image to a specified pixel size.  It uses a scaling
algorithm that averages adjacent pixel values when shrinking
an image, which produces relatively smooth scaled images.
Its superclass, <tt class="literal">ReplicateScaleFilter</tt>, implements a
faster, less smooth scaling algorithm.
<a name="INDEX-2075"></a>
The easiest way to use this filter is to call the
<tt class="literal">getScaledInstance()</tt> method of <tt class="literal">java.awt.Image</tt>, 
specifying an appropriate
hint constant.</p>
<a name="INDEX-2076"></a>
<p>The methods of this class are <tt class="literal">ImageConsumer</tt> methods
intended for communication between the image filter and the
<tt class="literal">FilteredImageSource</tt> that uses it.  Applications do
not usually call these methods directly.</p>
<p>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">AreaAveragingScaleFilter</b> extends ReplicateScaleFilter {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">AreaAveragingScaleFilter</b> (int <i class="parameter">width</i>, int <i class="parameter">height</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding ReplicateScaleFilter</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">model</i>, int[ ] <i class="parameter">pixels</i>, int <i class="parameter">off</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">model</i>, byte[ ] <i class="parameter">pixels</i>, int <i class="parameter">off</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding ImageFilter</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setHints</b> (int <i class="parameter">hints</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ImageFilter(Cloneable,ImageConsumer)-->ReplicateScaleFilter-->AreaAveragingScaleFilter</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>BandCombineOp</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2077"></a>
<p>  This <tt class="literal">RasterOp</tt> allows the bands of image data in a
  <tt class="literal">Raster</tt> to be arbitrarily combined using a matrix.
  For example, you can use a <tt class="literal">BandCombineOp</tt> to
  convert three bands of color image data to a single band of grayscale
  image data.  The number of columns of the matrix should be equal to
  the number of bands in the source raster or the number of
  bands plus one, if you are adding constant values as part of the
  combination.  The number of rows in the matrix should be equal to the
  number of bands in the destination <tt class="literal">Raster</tt>.</p>
<p>  As an example, consider the following matrix with four columns and
  three rows, used to convert a <tt class="literal">Raster</tt> with three
  bands to another three-banded raster:
  
<img alt="figure" src="figs/jfcn-1801-eqn.epsi.gif" webstripperlinkwas="figs/jfcn-1801-eqn.epsi.gif">

  This matrix is used to convert the source bands <tt class="literal">s1</tt>, 
  <tt class="literal">s2</tt>, and <tt class="literal">s3</tt> into
  destination bands <tt class="literal">d1</tt>, <tt class="literal">d2</tt>, and 
  <tt class="literal">d3</tt>, using the following formulas:</p>

  <blockquote>
<pre class="programlisting">d1 = s1*m11 + s2*m21 + s3*m31 + c1;
d2 = s1*m12 + s2*m22 + s3*m32 + c2;
d3 = s1*m13 + s2*m23 + s3*m33 + c3;</pre>
</blockquote>

<p>  If the constants <tt class="literal">c1</tt>, <tt class="literal">c2</tt>, and 
  <tt class="literal">c3</tt> are all 0, they can be omitted from
  the vector.</p>
<p>  After creating a <tt class="literal">BandCombineOp</tt> for a specified
  vector, you perform the operation by passing a source and optional
  destination <tt class="literal">Raster</tt> to the
  <tt class="literal">filter()</tt> method.  Because this operation
  processes each pixel independently, you can specify the same
  <tt class="literal">Raster</tt> object as both source and destination.
  <tt class="literal">BandCombineOp</tt> does
  <em class="emphasis">not</em> implement <tt class="literal">BufferedImageOp</tt>
  and cannot be used to process <tt class="literal">BufferedImage</tt>
  objects.  See <tt class="literal">RasterOp</tt> for further details.</p>
<a name="INDEX-2078"></a>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">BandCombineOp</b> implements RasterOp {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BandCombineOp</b> (float[ ][ ] <i class="parameter">matrix</i>, RenderingHints <i class="parameter">hints</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final float[ ][ ] <b class="function">getMatrix</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing RasterOp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">createCompatibleDestRaster</b> (Raster <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">filter</b> (Raster <i class="parameter">src</i>, WritableRaster <i class="parameter">dst</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.Rectangle2D <b class="function">getBounds2D</b> (Raster <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.Point2D <b class="function">getPoint2D</b> (java.awt.geom.Point2D <i class="parameter">srcPt</i>, java.awt.geom.Point2D <i class="parameter">dstPt</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final RenderingHints <b class="function">getRenderingHints</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->BandCombineOp(RasterOp)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>BandedSampleModel</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2079"></a>
<p>  This <tt class="literal">SampleModel</tt> represents image data stored so
  that each color component is in a separate data element of a
  <tt class="literal">DataBuffer</tt> and each band of color
  components is in a separate bank of the
  <tt class="literal">DataBuffer</tt>.  For example, it can be used to
  represent RGB colors stored in three separate banks of
  <tt class="literal">short</tt> values.
  Most applications never need to use this class.  See
  <tt class="literal">SampleModel</tt> for further information.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">BandedSampleModel</b> extends ComponentSampleModel {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BandedSampleModel</b> (int <i class="parameter">dataType</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">numBands</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BandedSampleModel</b> (int <i class="parameter">dataType</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">scanlineStride</i>, int[ ] <i class="parameter">bankIndices</i>, int[ ] <i class="parameter">bandOffsets</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding ComponentSampleModel</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SampleModel <b class="function">createCompatibleSampleModel</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public DataBuffer <b class="function">createDataBuffer</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SampleModel <b class="function">createSubsetSampleModel</b> (int[ ] <i class="parameter">bands</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getDataElements</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, Object <i class="parameter">obj</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getSample</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDataElements</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, Object <i class="parameter">obj</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSample</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>, int <i class="parameter">s</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->SampleModel-->ComponentSampleModel-->BandedSampleModel</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>BufferedImage</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2080"></a>
<p> 
  This is the central class in the simplified, immediate-mode
  imaging API introduced in Java 1.2 as part of Java 2D.  A
  <tt class="literal">BufferedImage</tt> represents an image as a rectangular
  array of pixels in a <tt class="literal">Raster</tt> object and a
  <tt class="literal">ColorModel</tt> object that is capable of interpreting
  the pixel values of the <tt class="literal">Raster</tt>.
  <tt class="literal">BufferedImage</tt> extends 
<tt class="literal">java.awt.Image</tt> and
  can therefore be used anywhere that an <tt class="literal">Image</tt> can.
  However, a <tt class="literal">BufferedImage</tt> always holds its image
  data in memory, so there is no need for the complicated
  <tt class="literal">ImageObserver</tt> interface to handle asynchronous
  notifications as image data loads over a network.</p>
<p>  If you know the data format of the image you need, you can create a
  <tt class="literal">BufferedImage</tt> by calling the
  <tt class="literal">BufferedImage()</tt> constructor.  For example, to
  create an off-screen image with an alpha channel for use in complex
  color compositing operations, you can call
  <tt class="literal">BufferedImage()</tt> with the desired image size and an
  image type of <tt class="literal">TYPE_INT_ARGB</tt>.  If you want to create an
  off-screen image and you do not need an alpha channel, it is easier
  to simply call the <tt class="literal">createImage()</tt> method of a
  <tt class="literal">java.awt.Component</tt>.  Although this method is
  declared to return an <tt class="literal">Image</tt>, in Java 1.2 it is
  guaranteed to return a <tt class="literal">BufferedImage</tt>.  The
  advantage to using this method is that it creates a
  <tt class="literal">BufferedImage</tt> with a type that is the same as (or
  can be efficiently converted to) the type used on your screen.
  If you do not have a <tt class="literal">Component</tt> handy, you can
  achieve the same effect by calling the
  <tt class="literal">createCompatibleImage()</tt> method of the
  <tt class="literal">java.awt.GraphicsConfiguration</tt> object that
  represents your screen configuration.</p>
<p>  Once you have created a <tt class="literal">BufferedImage</tt>, you can call
  <tt class="literal">createGraphics()</tt> to obtain a
  <tt class="literal">Graphics2D</tt> object that you can use to draw into the
  image.  You can draw a <tt class="literal">BufferedImage</tt> onto the
  screen or into any other image, using any of the
  <tt class="literal">drawImage()</tt> methods of <tt class="literal">Graphics</tt>
  or <tt class="literal">Graphics2D</tt>.  You can perform image processing on
  a <tt class="literal">BufferedImage</tt> by passing it to the
  <tt class="literal">filter()</tt> method of any
  <tt class="literal">BufferedImageOp</tt> object.  Finally, you can query and
  set individual pixels (or blocks of pixels) in a
  <tt class="literal">BufferedImage</tt> with <tt class="literal">getRGB()</tt> and
  <tt class="literal">setRGB()</tt>.  These methods use the default
  <tt class="literal">ARGB</tt> color model: each pixel contains 8 bits of
  alpha, red, green, and blue data.</p>
<p>
<tt class="literal">BufferedImage</tt> implements
  <tt class="literal">WritableRenderedImage</tt>, which in turn implements
  <tt class="literal">RenderedImage</tt>.  These interfaces are used primarily
  by the forthcoming Java Advanced Imaging (JAI) API 
  (<tt class="literal">javax.jai.*</tt>).
  Their methods allow an image to be
  divided up into multiple rectangular tiles.  The
  <tt class="literal">BufferedImage</tt> class defines each image as a single
  tile, so most of these methods have trivial implementations.  Most
  applications can simply ignore the <tt class="literal">RenderedImage</tt>
  and <tt class="literal">WritableRenderedImage</tt> methods of this class.</p>
<a name="INDEX-2081"></a>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">BufferedImage</b> extends Image implements WritableRenderedImage {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BufferedImage</b> (int <i class="parameter">width</i>, int <i class="parameter">height</i>, int <i class="parameter">imageType</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BufferedImage</b> (ColorModel <i class="parameter">cm</i>, WritableRaster <i class="parameter">raster</i>, boolean <i class="parameter">isRasterPremultiplied</i>, java.util.Hashtable <i class="parameter">properties</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BufferedImage</b> (int <i class="parameter">width</i>, int <i class="parameter">height</i>, int <i class="parameter">imageType</i>, IndexColorModel <i class="parameter">cm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_3BYTE_BGR</b> ;</td><td align="right"><i> =5</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_4BYTE_ABGR</b> ;</td><td align="right"><i> =6</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_4BYTE_ABGR_PRE</b> ;</td><td align="right"><i> =7</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_BYTE_BINARY</b> ;</td><td align="right"><i> =12</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_BYTE_GRAY</b> ;</td><td align="right"><i> =10</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_BYTE_INDEXED</b> ;</td><td align="right"><i> =13</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_CUSTOM</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_INT_ARGB</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_INT_ARGB_PRE</b> ;</td><td align="right"><i> =3</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_INT_BGR</b> ;</td><td align="right"><i> =4</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_INT_RGB</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_USHORT_555_RGB</b> ;</td><td align="right"><i> =9</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_USHORT_565_RGB</b> ;</td><td align="right"><i> =8</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_USHORT_GRAY</b> ;</td><td align="right"><i> =11</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isAlphaPremultiplied</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">getAlphaRaster</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public ColorModel <b class="function">getColorModel</b> ();</td><td align="right"><i> Implements:RenderedImage</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Raster <b class="function">getData</b> ();</td><td align="right"><i> Implements:RenderedImage</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Raster <b class="function">getData</b> (Rectangle <i class="parameter">rect</i>);</td><td align="right"><i> Implements:RenderedImage</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setData</b> (Raster <i class="parameter">r</i>);</td><td align="right"><i> Implements:WritableRenderedImage</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Graphics <b class="function">getGraphics</b> ();</td><td align="right"><i> Overrides:Image</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getHeight</b> ();</td><td align="right"><i> Implements:RenderedImage</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getHeight</b> (ImageObserver <i class="parameter">observer</i>);</td><td align="right"><i> Overrides:Image</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getMinTileX</b> ();</td><td align="right"><i> Implements:RenderedImage constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getMinTileY</b> ();</td><td align="right"><i> Implements:RenderedImage constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getMinX</b> ();</td><td align="right"><i> Implements:RenderedImage</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getMinY</b> ();</td><td align="right"><i> Implements:RenderedImage</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getNumXTiles</b> ();</td><td align="right"><i> Implements:RenderedImage constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getNumYTiles</b> ();</td><td align="right"><i> Implements:RenderedImage constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String[ ] <b class="function">getPropertyNames</b> ();</td><td align="right"><i> Implements:RenderedImage constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">getRaster</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SampleModel <b class="function">getSampleModel</b> ();</td><td align="right"><i> Implements:RenderedImage</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public ImageProducer <b class="function">getSource</b> ();</td><td align="right"><i> Overrides:Image</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.util.Vector <b class="function">getSources</b> ();</td><td align="right"><i> Implements:RenderedImage constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getTileGridXOffset</b> ();</td><td align="right"><i> Implements:RenderedImage</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getTileGridYOffset</b> ();</td><td align="right"><i> Implements:RenderedImage</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getTileHeight</b> ();</td><td align="right"><i> Implements:RenderedImage</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getTileWidth</b> ();</td><td align="right"><i> Implements:RenderedImage</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getType</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getWidth</b> ();</td><td align="right"><i> Implements:RenderedImage</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getWidth</b> (ImageObserver <i class="parameter">observer</i>);</td><td align="right"><i> Overrides:Image</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Point[ ] <b class="function">getWritableTileIndices</b> ();</td><td align="right"><i> Implements:WritableRenderedImage</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">coerceData</b> (boolean <i class="parameter">isAlphaPremultiplied</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Graphics2D <b class="function">createGraphics</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getRGB</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getRGB</b> (int <i class="parameter">startX</i>, int <i class="parameter">startY</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">rgbArray</i>, int <i class="parameter">offset</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public BufferedImage <b class="function">getSubimage</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setRGB</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">rgb</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setRGB</b> (int <i class="parameter">startX</i>, int <i class="parameter">startY</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">rgbArray</i>, int <i class="parameter">offset</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Other Methods Implementing RenderedImage</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">copyData</b> (WritableRaster <i class="parameter">outRaster</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getProperty</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Raster <b class="function">getTile</b> (int <i class="parameter">tileX</i>, int <i class="parameter">tileY</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing WritableRenderedImage</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">addTileObserver</b> (TileObserver <i class="parameter">to</i>);</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">getWritableTile</b> (int <i class="parameter">tileX</i>, int <i class="parameter">tileY</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Point[ ] <b class="function">getWritableTileIndices</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">hasTileWriters</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isTileWritable</b> (int <i class="parameter">tileX</i>, int <i class="parameter">tileY</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">releaseWritableTile</b> (int <i class="parameter">tileX</i>, int <i class="parameter">tileY</i>);</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">removeTileObserver</b> (TileObserver <i class="parameter">to</i>);</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setData</b> (Raster <i class="parameter">r</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Image</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">flush</b> ();</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getProperty</b> (String <i class="parameter">name</i>, ImageObserver <i class="parameter">observer</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Image-->BufferedImage(WritableRenderedImage(RenderedImage))</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list.</p>
<p>
<span class="refsect1">Returned By: </span>Too many methods to list.</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>BufferedImageFilter</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>cloneable</i></b></font></td>
</tr>
</table>
<a name="INDEX-2082"></a>
<p> 
  This class allows a Java 1.2 <tt class="literal">BufferedImageOp</tt>
  image-processing operation to be used as an
  <tt class="literal">ImageFilter</tt> in the Java 1.0 and Java 1.1 image
  processing model.  Create a <tt class="literal">BufferedImageFilter</tt> by
  passing a <tt class="literal">BufferedImageOp</tt> to the constructor.  Then
  use the resulting <tt class="literal">BufferedImageFilter</tt> with a
  <tt class="literal">FilteredImageSource</tt> exactly as you would use
  <tt class="literal">RGBImageFilter</tt>, 
  <tt class="literal">CropImageFilter</tt>, or any other Java 1.0 or Java 1.1
  image filter.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">BufferedImageFilter</b> extends ImageFilter implements Cloneable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">BufferedImageFilter</b> (BufferedImageOp <i class="parameter">op</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public BufferedImageOp <b class="function">getBufferedImageOp</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding ImageFilter</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">imageComplete</b> (int <i class="parameter">status</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setColorModel</b> (ColorModel <i class="parameter">model</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDimensions</b> (int <i class="parameter">width</i>, int <i class="parameter">height</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">model</i>, int[ ] <i class="parameter">pixels</i>, int <i class="parameter">off</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">model</i>, byte[ ] <i class="parameter">pixels</i>, int <i class="parameter">off</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ImageFilter(Cloneable,ImageConsumer)-->BufferedImageFilter(Cloneable)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>BufferedImageOp</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2083"></a>
<p>  This interface describes an image-processing operation that can be
  performed on any <tt class="literal">BufferedImage</tt>.  Java 2D includes a
  number of versatile implementations of this interface that most 
  applications can rely for all their image-processing needs.</p>
<a name="INDEX-2084"></a>
<p>  To use a <tt class="literal">BufferedImageOp</tt>, call its
  <tt class="literal">filter()</tt> method.  This method processes 
  a specified source
  image and stores the results in a specified destination image.  If no
  destination image is specified, the method 
  creates and returns an appropriate
  one.
  You can pass a source image to <tt class="literal">getBounds2D()</tt> to get
  the bounding box of the destination image that
  would be produced if that source image were to be passed to
  <tt class="literal">filter()</tt>.  Given a point in a (hypothetical) source
  image, <tt class="literal">getPoint2D()</tt> returns the corresponding point
  in the destination image.  If a destination <tt class="literal">Point2D</tt>
  object is provided, it is used to return the destination point;
  otherwise a <tt class="literal">Point2D</tt> object is allocated for
  this purpose.  <tt class="literal">getRenderingHints()</tt> returns the
  rendering hints associated with this implementation of 
  <tt class="literal">BufferedImageOp</tt>, or <tt class="literal">null</tt> if it
  has no rendering hints.  Finally,
  <tt class="literal">createCompatibleDestImage()</tt> is an internal method
  that implementations must define but that applications never need to
  call.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">BufferedImageOp</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract BufferedImage <b class="function">createCompatibleDestImage</b> (BufferedImage <i class="parameter">src</i>, ColorModel <i class="parameter">destCM</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract BufferedImage <b class="function">filter</b> (BufferedImage <i class="parameter">src</i>, BufferedImage <i class="parameter">dest</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.awt.geom.Rectangle2D <b class="function">getBounds2D</b> (BufferedImage <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.awt.geom.Point2D <b class="function">getPoint2D</b> (java.awt.geom.Point2D <i class="parameter">srcPt</i>, java.awt.geom.Point2D <i class="parameter">dstPt</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract RenderingHints <b class="function">getRenderingHints</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">AffineTransformOp, ColorConvertOp, ConvolveOp, LookupOp, RescaleOp</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Graphics2D.drawImage(), BufferedImageFilter.BufferedImageFilter()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">BufferedImageFilter.getBufferedImageOp()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ByteLookupTable</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2085"></a>
<p>  This concrete subclass of <tt class="literal">LookupTable</tt> contains one
  or more <tt class="literal">byte</tt> arrays that serve as lookup tables for
  a <tt class="literal">LookupOp</tt> image-processing operation.
  Applications never need to use a <tt class="literal">ByteLookupTable</tt>
  directly; they need to create one only to pass to the
  <tt class="literal">LookupOp()</tt> constructor.  Create a
  <tt class="literal">ByteLookupTable</tt> by passing the
  <tt class="literal">byte</tt> array or arrays to the
  <tt class="literal">ByteLookupTable()</tt> constructor, along with an offset
  that is subtracted from each source color component before the
  lookup is performed.  See also <tt class="literal">LookupTable</tt>.</p>
<a name="INDEX-2086"></a>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ByteLookupTable</b> extends LookupTable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ByteLookupTable</b> (int <i class="parameter">offset</i>, byte[ ][ ] <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ByteLookupTable</b> (int <i class="parameter">offset</i>, byte[ ] <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final byte[ ][ ] <b class="function">getTable</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public byte[ ] <b class="function">lookupPixel</b> (byte[ ] <i class="parameter">src</i>, byte[ ] <i class="parameter">dst</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding LookupTable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">lookupPixel</b> (int[ ] <i class="parameter">src</i>, int[ ] <i class="parameter">dst</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->LookupTable-->ByteLookupTable</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ColorConvertOp</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2087"></a>
<p> 
  This class is a <tt class="literal">BufferedImageOp</tt> and a
  <tt class="literal">RasterOp</tt> that converts the colors of a
  <tt class="literal">BufferedImage</tt> or a <tt class="literal">Raster</tt>
  from one color space to another color space.  If the
  <tt class="literal">filter()</tt> method is called with two distinct source
  and destination <tt class="literal">BufferedImage</tt> objects specified,
  it converts the colors from the
  <tt class="literal">java.awt.color.ColorSpace</tt> of the source image to
  the <tt class="literal">ColorSpace</tt> of the destination image.  If no
  destination image is passed to <tt class="literal">filter()</tt>, the
  destination <tt class="literal">ColorSpace</tt> must have been specified
  when the <tt class="literal">ColorConvertOp()</tt> constructor was called.
  Finally, if this <tt class="literal">ColorConvertOp</tt> is to be used to
  filter <tt class="literal">Raster</tt> object, both the source and
  destination color spaces must be specified, either in the form of
  <tt class="literal">ColorSpace</tt> objects or as an array of two
  <tt class="literal">java.awt.color.ICC_PROFILE</tt> objects.</p>
<a name="INDEX-2088"></a>
<p>  In addition to optionally specifying the source and destination color
  spaces when you invoke the <tt class="literal">ColorConvertOp()</tt>
  constructor, you may also specify a <tt class="literal">RenderingHints</tt>
  object.  If the hints object is non-<tt class="literal">null</tt>, the
  <tt class="literal">ColorConvertOp</tt> may use the color rendering and
  dithering hints it contains.</p>
<p>  To use a <tt class="literal">ColorConvertOp</tt>, simply pass a source and
  optional destination image or raster to the
  <tt class="literal">filter()</tt> method.  Because the
  <tt class="literal">ColorConvertOp</tt> works on each pixel of the image or
  raster independently, you may specify the same object for both source
  and destination.  In this case, the image or raster is modified
  in place.
  See <tt class="literal">BufferedImageOp</tt> for further details.</p>
<a name="INDEX-2089"></a>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ColorConvertOp</b> implements BufferedImageOp, RasterOp {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ColorConvertOp</b> (RenderingHints <i class="parameter">hints</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ColorConvertOp</b> (java.awt.color.ICC_Profile[ ] <i class="parameter">profiles</i>, RenderingHints <i class="parameter">hints</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ColorConvertOp</b> (java.awt.color.ColorSpace <i class="parameter">cspace</i>, RenderingHints <i class="parameter">hints</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ColorConvertOp</b> (java.awt.color.ColorSpace <i class="parameter">srcCspace</i>, java.awt.color.ColorSpace <i class="parameter">dstCspace</i>, RenderingHints <i class="parameter">hints</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.color.ICC_Profile[ ] <b class="function">getICC_Profiles</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing BufferedImageOp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public BufferedImage <b class="function">createCompatibleDestImage</b> (BufferedImage <i class="parameter">src</i>, ColorModel <i class="parameter">destCM</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final BufferedImage <b class="function">filter</b> (BufferedImage <i class="parameter">src</i>, BufferedImage <i class="parameter">dest</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.Rectangle2D <b class="function">getBounds2D</b> (BufferedImage <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.Point2D <b class="function">getPoint2D</b> (java.awt.geom.Point2D <i class="parameter">srcPt</i>, java.awt.geom.Point2D <i class="parameter">dstPt</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final RenderingHints <b class="function">getRenderingHints</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing RasterOp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">createCompatibleDestRaster</b> (Raster <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final WritableRaster <b class="function">filter</b> (Raster <i class="parameter">src</i>, WritableRaster <i class="parameter">dest</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.Rectangle2D <b class="function">getBounds2D</b> (Raster <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ColorConvertOp(BufferedImageOp,RasterOp)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ColorModel</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>
<a name="INDEX-2090"></a>
<p> 
  This abstract class defines a scheme for representing colors as
  pixels.  The primary job of a <tt class="literal">ColorModel</tt> object is
  to extract individual color components from pixel values.  Most
  applications do not need to work with <tt class="literal">ColorModel</tt>
  objects directly; those that do usually need only to instantiate
  an appropriate <tt class="literal">ColorModel</tt> subclass for use by some
  other method or constructor.</p>
<a name="INDEX-2091"></a>
<a name="INDEX-2092"></a>
<a name="INDEX-2093"></a>
<a name="INDEX-2094"></a>
<a name="INDEX-2095"></a>
<a name="INDEX-2096"></a>
<p>  In Java 1.0 and 1.1, this is a fairly simple class: pixel values are
  supplied as <tt class="literal">int</tt> values, and the
  <tt class="literal">getRed()</tt>, <tt class="literal">getGreen()</tt>,
  <tt class="literal">getBlue()</tt>, and <tt class="literal">getAlpha()</tt>
  methods return the red, green, blue, and alpha components of the
  pixel.  The <tt class="literal">getRGB()</tt> method converts a pixel to the
  pixel format used by the default ARGB color model. This color model is
  returned by the static <tt class="literal">getRGBDefault()</tt> method; it
  packs 8-bit color and alpha components into a 32-bit
  <tt class="literal">int</tt> in <tt class="literal">0xAARRGGBB</tt> format.</p>
<p>  With the introduction of Java 2D in Java 1.2, this class has become more
  complicated.  Now the <tt class="literal">ColorModel</tt> is not
  tied to the default RGB <tt class="literal">java.awt.color.ColorSpace</tt>
  and provides methods for extracting color components from any color
  space.  The <tt class="literal">getComponents()</tt> method and its
  variants return an array of color components for a given pixel value.
  If the <tt class="literal">ColorModel</tt> is defined in terms of the CMYK
  color space, for example, these components are not red,
  green, and blue, but cyan, magenta, yellow, and black.  Note, however,
  that because every <tt class="literal">ColorSpace</tt> can convert colors to
  the default RGB color space, the <tt class="literal">getRed()</tt>,
  <tt class="literal">getGreen()</tt>, <tt class="literal">getBlue()</tt>, and
  <tt class="literal">getRGB()</tt> methods still work, regardless of color
  space.</p>
<p>  Another generalization to the <tt class="literal">ColorModel</tt> class in
  Java 1.2 is that pixel values are no longer assumed to fit in
  <tt class="literal">int</tt> values.  Each method that extracts color
  components from pixels comes in two forms.  In the first, the pixel
  value is specified as an <tt class="literal">int</tt>.  In the second form,
  it is specified as a <tt class="literal">Object</tt>.  This object is an
  array of primitive values.  The type of these values is known as the
  transfer type of the color model and is specified by one of the
  constants <tt class="literal">DataBuffer.TYPE_BYTE</tt>,
  <tt class="literal">Databuffer.TYPE_USHORT</tt>, or
  <tt class="literal">DataBuffer.TYPE_INT</tt>.  In simple cases, the elements of
  the transfer type arrays contain color components, and the
  <tt class="literal">ColorModel</tt> object provides a trivial mapping
  between pixel values and color component values.</p>
<p>  Other <tt class="literal">ColorModel</tt> additions in Java 1.2 include the
  implementation of the <tt class="literal">Transparency</tt> interface and
  its <tt class="literal">getTransparency()</tt> method.  This method returns
  a <tt class="literal">Transparency</tt> constant that specifies the level of
  transparency supported by the <tt class="literal">ColorModel</tt>.  For
  <tt class="literal">ColorModel</tt> objects that support transparency, the
  <tt class="literal">isAlphaPremultiplied()</tt> method specifies whether the
  color components have been premultiplied by the alpha component.
  (Premultiplication makes alpha compositing operations more
  efficient.)  Also, the <tt class="literal">getNormalizedComponents()</tt>
  and <tt class="literal">getUnnormalizedComponents()</tt> convert back and
  forth between normalized and unnormalized color component values.  A
  normalized component is a <tt class="literal">float</tt> value between 0.0 and
  1.0 that has not been premultiplied by an alpha value.  An unnormalized
  component is an integral value with a range that depends on the number of
  bits used by the color model, possibly premultiplied by the alpha
  value.</p>
<p>  There are a number of <tt class="literal">ColorModel</tt> subclasses,
  suitable for distinctly different types of color models.  See also
  <tt class="literal">ComponentColorModel</tt>,
  <tt class="literal">DirectColorModel</tt>,
  <tt class="literal">IndexColorModel</tt>, and
  <tt class="literal">PackedColorModel</tt>. </p>
<a name="INDEX-2097"></a>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">ColorModel</b> implements Transparency {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ColorModel</b> (int <i class="parameter">bits</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected <b class="function">ColorModel</b> (int <i class="parameter">pixel_bits</i>, int[ ] <i class="parameter">bits</i>, java.awt.color.ColorSpace <i class="parameter">cspace</i>, boolean <i class="parameter">hasAlpha</i>, boolean <i class="parameter">isAlphaPremultiplied</i>, int <i class="parameter">transparency</i>, int <i class="parameter">transferType</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static ColorModel <b class="function">getRGBdefault</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final boolean <b class="function">isAlphaPremultiplied</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final java.awt.color.ColorSpace <b class="function">getColorSpace</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int[ ] <b class="function">getComponentSize</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getComponentSize</b> (int <i class="parameter">componentIdx</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getNumColorComponents</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getNumComponents</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getPixelSize</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getTransparency</b> ();</td><td align="right"><i> Implements:Transparency</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public ColorModel <b class="function">coerceData</b> (WritableRaster <i class="parameter">raster</i>, boolean <i class="parameter">isAlphaPremultiplied</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public SampleModel <b class="function">createCompatibleSampleModel</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public WritableRaster <b class="function">createCompatibleWritableRaster</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getAlpha</b> (Object <i class="parameter">inData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getAlpha</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public WritableRaster <b class="function">getAlphaRaster</b> (WritableRaster <i class="parameter">raster</i>);</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getBlue</b> (Object <i class="parameter">inData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getBlue</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int[ ] <b class="function">getComponents</b> (int <i class="parameter">pixel</i>, int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int[ ] <b class="function">getComponents</b> (Object <i class="parameter">pixel</i>, int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getDataElement</b> (int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Object <b class="function">getDataElements</b> (int <i class="parameter">rgb</i>, Object <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Object <b class="function">getDataElements</b> (int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>, Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getGreen</b> (Object <i class="parameter">inData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getGreen</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public float[ ] <b class="function">getNormalizedComponents</b> (int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>, float[ ] <i class="parameter">normComponents</i>, int <i class="parameter">normOffset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getRed</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getRed</b> (Object <i class="parameter">inData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getRGB</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getRGB</b> (Object <i class="parameter">inData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int[ ] <b class="function">getUnnormalizedComponents</b> (float[ ] <i class="parameter">normComponents</i>, int <i class="parameter">normOffset</i>, int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final boolean <b class="function">hasAlpha</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">isCompatibleRaster</b> (Raster <i class="parameter">raster</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">isCompatibleSampleModel</b> (SampleModel <i class="parameter">sm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Transparency</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getTransparency</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">finalize</b> ();</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">pixel_bits</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected int <b class="function">transferType</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ColorModel(Transparency)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">ComponentColorModel, IndexColorModel, PackedColorModel</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list.</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Component.getColorModel(), GraphicsConfiguration.getColorModel(), PaintContext.getColorModel(), Toolkit.getColorModel(), BufferedImage.getColorModel(), ColorModel.{coerceData(), getRGBdefault()}, ComponentColorModel.coerceData(), DirectColorModel.coerceData(), PixelGrabber.getColorModel(), RenderedImage.getColorModel(), java.awt.peer.ComponentPeer.getColorModel()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">RGBImageFilter.{newmodel, origmodel}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ComponentColorModel</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2098"></a>
<p> 
  This <tt class="literal">ColorModel</tt> is used with image data in
  which the color and transparency components of pixels are stored
  separately, instead of being 
  combined together into a single <tt class="literal">int</tt> value.
  This class works only with pixel values specified as an array of
  primitive values of the specified transfer type.  The number of
  elements in these pixel arrays must match the number of color and
  transparency 
  components in the specified color space.  This class performs the
  trivial mapping between the array elements of the pixel value and
  the color components of the color it represents.  The methods of this
  class that are passed <tt class="literal">int</tt> pixel values can throw 
  <tt class="literal">IllegalArgumentException</tt>.  Only applications that
  are doing custom image processing need to use this, or any,
  <tt class="literal">ColorModel</tt>.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ComponentColorModel</b> extends ColorModel {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ComponentColorModel</b> (java.awt.color.ColorSpace <i class="parameter">colorSpace</i>, int[ ] <i class="parameter">bits</i>, boolean <i class="parameter">hasAlpha</i>, boolean <i class="parameter">isAlphaPremultiplied</i>, int <i class="parameter">transparency</i>, int <i class="parameter">transferType</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding ColorModel</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public ColorModel <b class="function">coerceData</b> (WritableRaster <i class="parameter">raster</i>, boolean <i class="parameter">isAlphaPremultiplied</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SampleModel <b class="function">createCompatibleSampleModel</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">createCompatibleWritableRaster</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getAlpha</b> (Object <i class="parameter">inData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getAlpha</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">getAlphaRaster</b> (WritableRaster <i class="parameter">raster</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getBlue</b> (Object <i class="parameter">inData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getBlue</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getComponents</b> (Object <i class="parameter">pixel</i>, int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getComponents</b> (int <i class="parameter">pixel</i>, int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getDataElement</b> (int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getDataElements</b> (int <i class="parameter">rgb</i>, Object <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getDataElements</b> (int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>, Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getGreen</b> (Object <i class="parameter">inData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getGreen</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getRed</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getRed</b> (Object <i class="parameter">inData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getRGB</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getRGB</b> (Object <i class="parameter">inData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isCompatibleRaster</b> (Raster <i class="parameter">raster</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isCompatibleSampleModel</b> (SampleModel <i class="parameter">sm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ColorModel(Transparency)-->ComponentColorModel</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ComponentSampleModel</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2099"></a>
<p>  This <tt class="literal">SampleModel</tt> represents image data stored so
  that each component of each pixel is stored in a separate
  element of the <tt class="literal">DataBuffer</tt>.  The arguments to the
  <tt class="literal">ComponentSampleModel</tt> allow great flexibility in
  this model.  For example, it can represent RGB values interleaved into
  a single bank of bytes or ARGB values stored in four separate banks
  of bytes.  Additionally, it can handle offsets at the end of
  scanlines and an offset at the beginning of each bank.  </p>
<p>  Java 2D defines two subclasses of
  <tt class="literal">ComponentSampleModel</tt> that are more efficient for
  particular types of image data.  When each band of pixel components is
  stored in a separate bank of the <tt class="literal">DataBuffer</tt>, it is
  easier and more efficient to use the
  <tt class="literal">BandedSampleModel</tt> subclass.  When the
  components of a pixel are stored in adjacent data elements of a single
  bank of the <tt class="literal">DataBuffer</tt>, it is easier and more
  efficient to use <tt class="literal">PixelInterleavedSampleModel</tt>.</p>
<p>  Most applications never need to use this class or its subclasses.  See
  <tt class="literal">SampleModel</tt> for further information.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ComponentSampleModel</b> extends SampleModel {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ComponentSampleModel</b> (int <i class="parameter">dataType</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">pixelStride</i>, int <i class="parameter">scanlineStride</i>, int[ ] <i class="parameter">bandOffsets</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ComponentSampleModel</b> (int <i class="parameter">dataType</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">pixelStride</i>, int <i class="parameter">scanlineStride</i>, int[ ] <i class="parameter">bankIndices</i>, int[ ] <i class="parameter">bandOffsets</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int[ ] <b class="function">getBandOffsets</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int[ ] <b class="function">getBankIndices</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getNumDataElements</b> ();</td><td align="right"><i> Overrides:SampleModel</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getPixelStride</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int[ ] <b class="function">getSampleSize</b> ();</td><td align="right"><i> Overrides:SampleModel</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getSampleSize</b> (int <i class="parameter">band</i>);</td><td align="right"><i> Overrides:SampleModel</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getScanlineStride</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getOffset</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getOffset</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding SampleModel</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SampleModel <b class="function">createCompatibleSampleModel</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public DataBuffer <b class="function">createDataBuffer</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SampleModel <b class="function">createSubsetSampleModel</b> (int[ ] <i class="parameter">bands</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getDataElements</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, Object <i class="parameter">obj</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getSample</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDataElements</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, Object <i class="parameter">obj</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSample</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>, int <i class="parameter">s</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int[ ] <b class="function">bandOffsets</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int[ ] <b class="function">bankIndices</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">numBands</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">numBanks</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">pixelStride</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">scanlineStride</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->SampleModel-->ComponentSampleModel</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">BandedSampleModel, PixelInterleavedSampleModel</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ConvolveOp</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2100"></a>
<p> 
  This class is a <tt class="literal">BufferedImageOp</tt> and a
  <tt class="literal">RasterOp</tt> that performs an arbitrary convolution on
  an image.  Convolution is a versatile image-processing operation that
  can be used, for example, to blur or sharpen an image or
  perform edge detection on an image.  The convolution to be performed
  is specified by a matrix of floating-point numbers, in the form of a
  <tt class="literal">Kernel</tt> object.  Because convolution looks at the
  neighbors of each pixel in an image, special care must be taken when
  operating on the pixels at the edges of the image.  By default, a
  <tt class="literal">ConvolveOp</tt> uses imaginary color components of all
  zeros when it reaches the edges of an image.  You can pass
  <tt class="literal">EDGE_NO_OP</tt> to the constructor to specify that the
  edges of the image should simply be left unprocessed.  Finally, you
  can pass a <tt class="literal">RenderingHints</tt> object to the
  <tt class="literal">ConvolveOp()</tt> constructor.  If this argument is not
  <tt class="literal">null</tt>, the <tt class="literal">ConvolveOp</tt> may use its
  color and dithering hints.</p>
<p>  To use a <tt class="literal">ConvolveOp</tt>, simply pass a source and
  optional destination image or raster to its
  <tt class="literal">filter()</tt> method.  Note that you cannot specify the
  same object as both source and destination.
  See <tt class="literal">BufferedImageOp</tt> for further details.</p>
<a name="INDEX-2101"></a>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ConvolveOp</b> implements BufferedImageOp, RasterOp {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ConvolveOp</b> (Kernel <i class="parameter">kernel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ConvolveOp</b> (Kernel <i class="parameter">kernel</i>, int <i class="parameter">edgeCondition</i>, RenderingHints <i class="parameter">hints</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">EDGE_NO_OP</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">EDGE_ZERO_FILL</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getEdgeCondition</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final Kernel <b class="function">getKernel</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing BufferedImageOp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public BufferedImage <b class="function">createCompatibleDestImage</b> (BufferedImage <i class="parameter">src</i>, ColorModel <i class="parameter">destCM</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final BufferedImage <b class="function">filter</b> (BufferedImage <i class="parameter">src</i>, BufferedImage <i class="parameter">dst</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.Rectangle2D <b class="function">getBounds2D</b> (BufferedImage <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.Point2D <b class="function">getPoint2D</b> (java.awt.geom.Point2D <i class="parameter">srcPt</i>, java.awt.geom.Point2D <i class="parameter">dstPt</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final RenderingHints <b class="function">getRenderingHints</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing RasterOp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">createCompatibleDestRaster</b> (Raster <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final WritableRaster <b class="function">filter</b> (Raster <i class="parameter">src</i>, WritableRaster <i class="parameter">dst</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.Rectangle2D <b class="function">getBounds2D</b> (Raster <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ConvolveOp(BufferedImageOp,RasterOp)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>CropImageFilter</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>cloneable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2102"></a><a name="INDEX-2103"></a>
This class implements an <tt class="literal">ImageFilter</tt> that crops an
image to a specified rectangle. The methods defined by this
class are used for communication between the filter and its
<tt class="literal">FilteredImageSource</tt> and should never be called
directly.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">CropImageFilter</b> extends ImageFilter {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">CropImageFilter</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding ImageFilter</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDimensions</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">model</i>, int[ ] <i class="parameter">pixels</i>, int <i class="parameter">off</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">model</i>, byte[ ] <i class="parameter">pixels</i>, int <i class="parameter">off</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setProperties</b> (java.util.Hashtable <i class="parameter">props</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ImageFilter(Cloneable,ImageConsumer)-->CropImageFilter</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DataBuffer</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2104"></a>
<p>  This abstract class stores image data at the lowest level.  A
  <tt class="literal">DataBuffer</tt> stores one or more arrays, or banks, of
  data of a specified size and a given type.  The
  <tt class="literal">Raster</tt> class uses a <tt class="literal">DataBuffer</tt>
  to store image data and a <tt class="literal">SampleModel</tt> to
  interpret the storage format of that data.  Most applications never
  need to use <tt class="literal">DataBuffer</tt> objects directly.</p>
<p>  Specific concrete subclasses of <tt class="literal">DataBuffer</tt> are
  implemented for specific types of data.  See
  also <tt class="literal">DataBufferByte</tt>, <tt class="literal">DataBufferShort</tt>,
  <tt class="literal">DataBufferUShort</tt>, and <tt class="literal">DataBufferInt</tt>.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">DataBuffer</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">DataBuffer</b> (int <i class="parameter">dataType</i>, int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">DataBuffer</b> (int <i class="parameter">dataType</i>, int <i class="parameter">size</i>, int <i class="parameter">numBanks</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">DataBuffer</b> (int <i class="parameter">dataType</i>, int <i class="parameter">size</i>, int <i class="parameter">numBanks</i>, int[ ] <i class="parameter">offsets</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">DataBuffer</b> (int <i class="parameter">dataType</i>, int <i class="parameter">size</i>, int <i class="parameter">numBanks</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_BYTE</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_DOUBLE</b> ;</td><td align="right"><i> =5</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_FLOAT</b> ;</td><td align="right"><i> =4</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_INT</b> ;</td><td align="right"><i> =3</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_SHORT</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_UNDEFINED</b> ;</td><td align="right"><i> =32</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TYPE_USHORT</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static int <b class="function">getDataTypeSize</b> (int <i class="parameter">type</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getDataType</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getNumBanks</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getOffset</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getOffsets</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getSize</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getElem</b> (int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getElem</b> (int <i class="parameter">bank</i>, int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getElemDouble</b> (int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getElemDouble</b> (int <i class="parameter">bank</i>, int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float <b class="function">getElemFloat</b> (int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float <b class="function">getElemFloat</b> (int <i class="parameter">bank</i>, int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setElem</b> (int <i class="parameter">i</i>, int <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setElem</b> (int <i class="parameter">bank</i>, int <i class="parameter">i</i>, int <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setElemDouble</b> (int <i class="parameter">i</i>, double <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setElemDouble</b> (int <i class="parameter">bank</i>, int <i class="parameter">i</i>, double <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setElemFloat</b> (int <i class="parameter">i</i>, float <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setElemFloat</b> (int <i class="parameter">bank</i>, int <i class="parameter">i</i>, float <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">banks</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">dataType</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">offset</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int[ ] <b class="function">offsets</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">size</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">DataBufferByte, DataBufferInt, DataBufferShort, DataBufferUShort</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list.</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">BandedSampleModel.createDataBuffer(), ComponentSampleModel.createDataBuffer(), MultiPixelPackedSampleModel.createDataBuffer(), Raster.getDataBuffer(), SampleModel.createDataBuffer(), SinglePixelPackedSampleModel.createDataBuffer()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">Raster.dataBuffer</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DataBufferByte</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2105"></a>
<p>  This class stores image data in one or more <tt class="literal">byte</tt>
  arrays.  The arrays, or banks, of data can be passed directly to the
  <tt class="literal">DataBufferByte()</tt> constructor, or they can be
  created by the constructor.  You may specify an offset into each array
  at which the data begins.  <tt class="literal">getElem()</tt> and
  <tt class="literal">setElem()</tt> allow you to get and set the values of a
  particular element of a particular bank.  Most applications never use
  this class directly.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">DataBufferByte</b> extends DataBuffer {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferByte</b> (int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferByte</b> (byte[ ][ ] <i class="parameter">dataArray</i>, int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferByte</b> (byte[ ] <i class="parameter">dataArray</i>, int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferByte</b> (int <i class="parameter">size</i>, int <i class="parameter">numBanks</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferByte</b> (byte[ ][ ] <i class="parameter">dataArray</i>, int <i class="parameter">size</i>, int[ ] <i class="parameter">offsets</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferByte</b> (byte[ ] <i class="parameter">dataArray</i>, int <i class="parameter">size</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public byte[ ][ ] <b class="function">getBankData</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public byte[ ] <b class="function">getData</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public byte[ ] <b class="function">getData</b> (int <i class="parameter">bank</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding DataBuffer</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getElem</b> (int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getElem</b> (int <i class="parameter">bank</i>, int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setElem</b> (int <i class="parameter">i</i>, int <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>

<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setElem</b> (int <i class="parameter">bank</i>, int <i class="parameter">i</i>, int <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->DataBuffer-->DataBufferByte</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DataBufferInt</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2106"></a>
<p>  This class stores image data in one or more <tt class="literal">int</tt>
  arrays.  The arrays, or banks, of data can be passed directly to the
  <tt class="literal">DataBufferInt()</tt> constructor, or they can be
  created by the constructor.  You may specify an offset into each array
  at which the data begins.  <tt class="literal">getElem()</tt> and
  <tt class="literal">setElem()</tt> allow you to get and set the values of a
  particular element of a particular bank.  Most applications never use
  this class directly.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">DataBufferInt</b> extends DataBuffer {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferInt</b> (int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferInt</b> (int[ ][ ] <i class="parameter">dataArray</i>, int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferInt</b> (int[ ] <i class="parameter">dataArray</i>, int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferInt</b> (int <i class="parameter">size</i>, int <i class="parameter">numBanks</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferInt</b> (int[ ][ ] <i class="parameter">dataArray</i>, int <i class="parameter">size</i>, int[ ] <i class="parameter">offsets</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferInt</b> (int[ ] <i class="parameter">dataArray</i>, int <i class="parameter">size</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ][ ] <b class="function">getBankData</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getData</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getData</b> (int <i class="parameter">bank</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding DataBuffer</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getElem</b> (int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getElem</b> (int <i class="parameter">bank</i>, int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setElem</b> (int <i class="parameter">i</i>, int <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setElem</b> (int <i class="parameter">bank</i>, int <i class="parameter">i</i>, int <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->DataBuffer-->DataBufferInt</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DataBufferShort</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2107"></a>
<p>  This class stores image data in one or more <tt class="literal">short</tt>
  arrays.  The arrays, or banks, of data can be passed directly to the
  <tt class="literal">DataBufferShort()</tt> constructor, or they can be
  created by the constructor.  You may specify an offset into each array
  at which the data begins.  <tt class="literal">getElem()</tt> and
  <tt class="literal">setElem()</tt> allow you to get and set the values of a
  particular element of a particular bank.  Most applications never use
  this class directly.</p>
<a name="INDEX-2108"></a>
<a name="INDEX-2109"></a>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">DataBufferShort</b> extends DataBuffer {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferShort</b> (int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferShort</b> (short[ ][ ] <i class="parameter">dataArray</i>, int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferShort</b> (short[ ] <i class="parameter">dataArray</i>, int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferShort</b> (int <i class="parameter">size</i>, int <i class="parameter">numBanks</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferShort</b> (short[ ][ ] <i class="parameter">dataArray</i>, int <i class="parameter">size</i>, int[ ] <i class="parameter">offsets</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferShort</b> (short[ ] <i class="parameter">dataArray</i>, int <i class="parameter">size</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public short[ ][ ] <b class="function">getBankData</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public short[ ] <b class="function">getData</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public short[ ] <b class="function">getData</b> (int <i class="parameter">bank</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding DataBuffer</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getElem</b> (int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getElem</b> (int <i class="parameter">bank</i>, int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setElem</b> (int <i class="parameter">i</i>, int <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setElem</b> (int <i class="parameter">bank</i>, int <i class="parameter">i</i>, int <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->DataBuffer-->DataBufferShort</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DataBufferUShort</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2110"></a>
<p>  This class stores unsigned image data in one or more
  <tt class="literal">short</tt> 
  arrays.  The arrays, or banks, of data can be passed directly to the
  <tt class="literal">DataBufferUShort()</tt> constructor, or they can be
  created by the constructor.  You may specify an offset into each array
  at which the data begins.  <tt class="literal">getElem()</tt> and
  <tt class="literal">setElem()</tt> allow you to get and set the values of a
  particular element of a particular bank.  Most applications never use
  this class directly.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">DataBufferUShort</b> extends DataBuffer {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferUShort</b> (int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferUShort</b> (short[ ][ ] <i class="parameter">dataArray</i>, int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferUShort</b> (short[ ] <i class="parameter">dataArray</i>, int <i class="parameter">size</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferUShort</b> (int <i class="parameter">size</i>, int <i class="parameter">numBanks</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferUShort</b> (short[ ][ ] <i class="parameter">dataArray</i>, int <i class="parameter">size</i>, int[ ] <i class="parameter">offsets</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DataBufferUShort</b> (short[ ] <i class="parameter">dataArray</i>, int <i class="parameter">size</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public short[ ][ ] <b class="function">getBankData</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public short[ ] <b class="function">getData</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public short[ ] <b class="function">getData</b> (int <i class="parameter">bank</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding DataBuffer</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getElem</b> (int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getElem</b> (int <i class="parameter">bank</i>, int <i class="parameter">i</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setElem</b> (int <i class="parameter">i</i>, int <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setElem</b> (int <i class="parameter">bank</i>, int <i class="parameter">i</i>, int <i class="parameter">val</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->DataBuffer-->DataBufferUShort</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DirectColorModel</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>
<a name="INDEX-2111"></a>
<p>  This <tt class="literal">ColorModel</tt> works only with RGB color spaces.
  It extracts red, green, blue, and, optionally, alpha values directly
  from the bits of the pixel, using bitmasks to specify which bits
  correspond to which color components.  The default RGB color model is
  a <tt class="literal">DirectColorModel</tt>.  Only applications that are
  doing custom image processing need to use this, or any,
  <tt class="literal">ColorModel</tt>.</p>
<p>  Prior to Java 1.2, this class extended <tt class="literal">ColorModel</tt>
  directly. In Java 1.2, it extends <tt class="literal">PackedColorModel</tt>,
  which itself extends <tt class="literal">ColorModel</tt>.  The
  Java 1.2 methods of this class that accept pixel values as an array of
  a primitive transfer type expect that array argument to have a length
  of 1. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DirectColorModel</b> extends PackedColorModel {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DirectColorModel</b> (int <i class="parameter">bits</i>, int <i class="parameter">rmask</i>, int <i class="parameter">gmask</i>, int <i class="parameter">bmask</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DirectColorModel</b> (int <i class="parameter">bits</i>, int <i class="parameter">rmask</i>, int <i class="parameter">gmask</i>, int <i class="parameter">bmask</i>, int <i class="parameter">amask</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public <b class="function">DirectColorModel</b> (java.awt.color.ColorSpace <i class="parameter">space</i>, int <i class="parameter">bits</i>, int <i class="parameter">rmask</i>, int <i class="parameter">gmask</i>, int <i class="parameter">bmask</i>, int <i class="parameter">amask</i>, boolean <i class="parameter">isAlphaPremultiplied</i>, int <i class="parameter">transferType</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getAlphaMask</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getBlueMask</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getGreenMask</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getRedMask</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding ColorModel</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final ColorModel <b class="function">coerceData</b> (WritableRaster <i class="parameter">raster</i>, boolean <i class="parameter">isAlphaPremultiplied</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final WritableRaster <b class="function">createCompatibleWritableRaster</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getAlpha</b> (Object <i class="parameter">inData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getAlpha</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getBlue</b> (Object <i class="parameter">inData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getBlue</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final int[ ] <b class="function">getComponents</b> (Object <i class="parameter">pixel</i>, int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final int[ ] <b class="function">getComponents</b> (int <i class="parameter">pixel</i>, int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getDataElement</b> (int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Object <b class="function">getDataElements</b> (int <i class="parameter">rgb</i>, Object <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Object <b class="function">getDataElements</b> (int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>, Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getGreen</b> (Object <i class="parameter">inData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getGreen</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getRed</b> (Object <i class="parameter">inData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getRed</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getRGB</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getRGB</b> (Object <i class="parameter">inData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">isCompatibleRaster</b> (Raster <i class="parameter">raster</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ColorModel(Transparency)-->PackedColorModel-->DirectColorModel</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>FilteredImageSource</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2112"></a><a name="INDEX-2113"></a>
This class is an <tt class="literal">ImageProducer</tt> that produces image
data filtered from some other <tt class="literal">ImageProducer</tt>. A
<tt class="literal">FilteredImageSource</tt> is created with a specified
<tt class="literal">ImageProducer</tt> and a specified <tt class="literal">ImageFilter</tt>.  
For example, an applet might use the following code to
download and crop an image:</p>

<blockquote>
<pre class="programlisting">Image full_image = getImage(getDocumentBase(), "images/1.gif");
ImageFilter cropper = new CropImageFilter(10, 10, 100, 100);
ImageProducer prod = new FilteredImageSource(full_image.getSource(), cropper);
Image cropped_image = createImage(prod);</pre>
</blockquote>

<p>The methods of this class are the standard
<tt class="literal">ImageProducer</tt> methods that you can invoke to add and
remove <tt class="literal">ImageConsumer</tt> objects.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">FilteredImageSource</b> implements ImageProducer {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">FilteredImageSource</b> (ImageProducer <i class="parameter">orig</i>, ImageFilter <i class="parameter">imgf</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing ImageProducer</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">addConsumer</b> (ImageConsumer <i class="parameter">ic</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isConsumer</b> (ImageConsumer <i class="parameter">ic</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">removeConsumer</b> (ImageConsumer <i class="parameter">ic</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">requestTopDownLeftRightResend</b> (ImageConsumer <i class="parameter">ic</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">startProduction</b> (ImageConsumer <i class="parameter">ic</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->FilteredImageSource(ImageProducer)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ImageConsumer</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2114"></a><a name="INDEX-2115"></a><a name="INDEX-2116"></a><a name="INDEX-2117"></a>
This interface defines the methods necessary for a class
that consumes image data to communicate with a class that
produces image data. The methods defined by this interface
should never be called by a program directly; instead, they
are invoked by an <tt class="literal">ImageProducer</tt> to pass the image
data and other information about the image to the
<tt class="literal">ImageConsumer</tt>. The constants defined by this
interface are values passed to the <tt class="literal">setHints()</tt> and
<tt class="literal">imageComplete()</tt> methods.
Unless you want to do low-level manipulation of image data,
you never need to use or implement an <tt class="literal">ImageConsumer</tt>.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">ImageConsumer</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">COMPLETESCANLINES</b> ;</td><td align="right"><i> =4</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">IMAGEABORTED</b> ;</td><td align="right"><i> =4</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">IMAGEERROR</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">RANDOMPIXELORDER</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">SINGLEFRAME</b> ;</td><td align="right"><i> =16</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">SINGLEFRAMEDONE</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">SINGLEPASS</b> ;</td><td align="right"><i> =8</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">STATICIMAGEDONE</b> ;</td><td align="right"><i> =3</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">TOPDOWNLEFTRIGHT</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">imageComplete</b> (int <i class="parameter">status</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setColorModel</b> (ColorModel <i class="parameter">model</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setDimensions</b> (int <i class="parameter">width</i>, int <i class="parameter">height</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setHints</b> (int <i class="parameter">hintflags</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">model</i>, int[ ] <i class="parameter">pixels</i>, int <i class="parameter">off</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">model</i>, byte[ ] <i class="parameter">pixels</i>, int <i class="parameter">off</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setProperties</b> (java.util.Hashtable <i class="parameter">props</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">ImageFilter, PixelGrabber</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list.</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">ImageFilter.consumer</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ImageFilter</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>cloneable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2118"></a><a name="INDEX-2119"></a>
This class is used in conjunction with a
<tt class="literal">FilteredImageSource</tt>. It accepts image data through
the <tt class="literal">ImageConsumer</tt> interface and passes it on to an
<tt class="literal">ImageConsumer</tt> specified by the controlling
<tt class="literal">FilteredImageSource</tt>. <tt class="literal">ImageFilter</tt> is the
superclass of all image filters; it performs no filtering
itself. You must subclass it to perform the desired
filtering. See also <tt class="literal">CropImageFilter</tt> and
<tt class="literal">RGBImageFilter</tt>. The <tt class="literal">ImageFilter</tt> methods are
the <tt class="literal">ImageConsumer</tt> methods invoked by an
<tt class="literal">ImageProducer</tt>. You should not call them directly.
See <tt class="literal">FilteredImageSource</tt> for an example of using an
<tt class="literal">ImageFilter</tt>.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ImageFilter</b> implements Cloneable, ImageConsumer {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ImageFilter</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public ImageFilter <b class="function">getFilterInstance</b> (ImageConsumer <i class="parameter">ic</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">resendTopDownLeftRight</b> (ImageProducer <i class="parameter">ip</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing ImageConsumer</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">imageComplete</b> (int <i class="parameter">status</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setColorModel</b> (ColorModel <i class="parameter">model</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDimensions</b> (int <i class="parameter">width</i>, int <i class="parameter">height</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setHints</b> (int <i class="parameter">hints</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">model</i>, int[ ] <i class="parameter">pixels</i>, int <i class="parameter">off</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">model</i>, byte[ ] <i class="parameter">pixels</i>, int <i class="parameter">off</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setProperties</b> (java.util.Hashtable <i class="parameter">props</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected ImageConsumer <b class="function">consumer</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ImageFilter(Cloneable,ImageConsumer)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">BufferedImageFilter, CropImageFilter, ReplicateScaleFilter, RGBImageFilter</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">FilteredImageSource.FilteredImageSource()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ImageFilter.getFilterInstance()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ImageObserver</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2120"></a>
This interface defines a method and associated constants
used by classes that want to receive information
asynchronously about the status of an image. Many methods
that query information about an image take an
<tt class="literal">ImageObserver</tt> as an argument. If the specified
information is not available when requested, it is passed to
the <tt class="literal">ImageObserver</tt> when it becomes available.
<tt class="literal">Component</tt> implements this interface, and components
are the most commonly used image observers.
<a name="INDEX-2121"></a>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">ImageObserver</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">ABORT</b> ;</td><td align="right"><i> =128</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">ALLBITS</b> ;</td><td align="right"><i> =32</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">ERROR</b> ;</td><td align="right"><i> =64</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">FRAMEBITS</b> ;</td><td align="right"><i> =16</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">HEIGHT</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">PROPERTIES</b> ;</td><td align="right"><i> =4</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">SOMEBITS</b> ;</td><td align="right"><i> =8</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">WIDTH</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">imageUpdate</b> (Image <i class="parameter">img</i>, int <i class="parameter">infoflags</i>, int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">width</i>, int <i class="parameter">height</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">Component</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list.</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">javax.swing.ImageIcon.getImageObserver()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ImageProducer</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2122"></a><a name="INDEX-2123"></a>
This interface defines the methods that any class that
produces image data must define to enable
communication with <tt class="literal">ImageConsumer</tt> classes. An
<tt class="literal">ImageConsumer</tt> registers itself as interested in a
producer's image by calling the <tt class="literal">addConsumer()</tt>
method.
<a name="INDEX-2124"></a>
Most applications never need to use or implement this
interface. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">ImageProducer</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">addConsumer</b> (ImageConsumer <i class="parameter">ic</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">isConsumer</b> (ImageConsumer <i class="parameter">ic</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">removeConsumer</b> (ImageConsumer <i class="parameter">ic</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">requestTopDownLeftRightResend</b> (ImageConsumer <i class="parameter">ic</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">startProduction</b> (ImageConsumer <i class="parameter">ic</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">FilteredImageSource, MemoryImageSource, java.awt.image.renderable.RenderableImageProducer</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Component.createImage(), Toolkit.createImage(), FilteredImageSource.FilteredImageSource(), ImageFilter.resendTopDownLeftRight(), PixelGrabber.PixelGrabber(), java.awt.peer.ComponentPeer.createImage()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Image.getSource(), BufferedImage.getSource()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ImagingOpException</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked</i></b></font></td>
</tr>
</table>
<p> 
  Thrown by the <tt class="literal">filter()</tt>
  methods of <tt class="literal">BufferedImageOp</tt> and
  <tt class="literal">RasterOp</tt> if, for any reason, they are unable to
  filter the specified image.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ImagingOpException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ImagingOpException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->ImagingOpException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>IndexColorModel</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>
<a name="INDEX-2125"></a>
<p>  This <tt class="literal">ColorModel</tt> is used with RGB color spaces and
  determines the red, green, blue, and, optionally, alpha components of a
  pixel by using the pixel value as an index into colormap arrays.  If
  no array of alpha values is specified, all pixels are fully
  opaque, except for one optionally specified reserved value that is
  fully transparent.  This color model is useful when working with image
  data that is defined in terms of a colormap.  Only applications that are
  doing custom image processing need to use this, or any,
  <tt class="literal">ColorModel</tt>.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">IndexColorModel</b> extends ColorModel {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IndexColorModel</b> (int <i class="parameter">bits</i>, int <i class="parameter">size</i>, byte[ ] <i class="parameter">cmap</i>, int <i class="parameter">start</i>, boolean <i class="parameter">hasalpha</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IndexColorModel</b> (int <i class="parameter">bits</i>, int <i class="parameter">size</i>, byte[ ] <i class="parameter">r</i>, byte[ ] <i class="parameter">g</i>, byte[ ] <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IndexColorModel</b> (int <i class="parameter">bits</i>, int <i class="parameter">size</i>, byte[ ] <i class="parameter">cmap</i>, int <i class="parameter">start</i>, boolean <i class="parameter">hasalpha</i>, int <i class="parameter">trans</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IndexColorModel</b> (int <i class="parameter">bits</i>, int <i class="parameter">size</i>, byte[ ] <i class="parameter">r</i>, byte[ ] <i class="parameter">g</i>, byte[ ] <i class="parameter">b</i>, byte[ ] <i class="parameter">a</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">IndexColorModel</b> (int <i class="parameter">bits</i>, int <i class="parameter">size</i>, byte[ ] <i class="parameter">r</i>, byte[ ] <i class="parameter">g</i>, byte[ ] <i class="parameter">b</i>, int <i class="parameter">trans</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public <b class="function">IndexColorModel</b> (int <i class="parameter">bits</i>, int <i class="parameter">size</i>, int[ ] <i class="parameter">cmap</i>, int <i class="parameter">start</i>, boolean <i class="parameter">hasalpha</i>, int <i class="parameter">trans</i>, int <i class="parameter">transferType</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public BufferedImage <b class="function">convertToIntDiscrete</b> (Raster <i class="parameter">raster</i>, boolean <i class="parameter">forceARGB</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">getAlphas</b> (byte[ ] <i class="parameter">a</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">getBlues</b> (byte[ ] <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">getGreens</b> (byte[ ] <i class="parameter">g</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getMapSize</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final void <b class="function">getReds</b> (byte[ ] <i class="parameter">r</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public final void <b class="function">getRGBs</b> (int[ ] <i class="parameter">rgb</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getTransparentPixel</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding ColorModel</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public SampleModel <b class="function">createCompatibleSampleModel</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public WritableRaster <b class="function">createCompatibleWritableRaster</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">finalize</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getAlpha</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getBlue</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int[ ] <b class="function">getComponents</b> (Object <i class="parameter">pixel</i>, int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int[ ] <b class="function">getComponents</b> (int <i class="parameter">pixel</i>, int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int[ ] <b class="function">getComponentSize</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getDataElement</b> (int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Object <b class="function">getDataElements</b> (int <i class="parameter">rgb</i>, Object <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public Object <b class="function">getDataElements</b> (int[ ] <i class="parameter">components</i>, int <i class="parameter">offset</i>, Object <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getGreen</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getRed</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getRGB</b> (int <i class="parameter">pixel</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public int <b class="function">getTransparency</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">isCompatibleRaster</b> (Raster <i class="parameter">raster</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public boolean <b class="function">isCompatibleSampleModel</b> (SampleModel <i class="parameter">sm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ColorModel(Transparency)-->IndexColorModel</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">BufferedImage.BufferedImage(), RGBImageFilter.filterIndexColorModel()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">RGBImageFilter.filterIndexColorModel()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Kernel</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>cloneable</i></b></font></td>
</tr>
</table>
<a name="INDEX-2126"></a>
<p>  This class represents a matrix of <tt class="literal">float</tt> values,
  for use with the <tt class="literal">ConvolveOp</tt> image-processing
  operation.  Convolution is performed by combining a pixel value with
  the values of the pixels that surround it.  The convolution kernel
  specifies the relative contribution of each pixel to the end result.
  For example, to blur an image, you can use a kernel like this:
  
<img alt="figure" src="figs/jfcn-1802-eqn.epsi.gif" webstripperlinkwas="figs/jfcn-1802-eqn.epsi.gif">

  This matrix specifies that the destination pixel is composed of one-ninth (0.111) of the source pixel plus one-ninth of each of the eight
  pixels that surround it.</p>
<p>  To create a <tt class="literal">Kernel</tt>, pass the width and height of
  the kernel to the constructor, along with the array of
  <tt class="literal">float</tt> values that comprise the kernel.  The array
  should be organized by rows.  Note that a <tt class="literal">Kernel</tt>
  need not have a square array.  Kernels typically have an odd number of
  rows and columns and are placed symmetrically about the source pixel
  being processed.  However, if the number of rows or columns is even,
  the origin of the <tt class="literal">Kernel</tt> is such that 
  the extra row or column is to the bottom or the right of the pixel
  being processed.</p>
<a name="INDEX-2127"></a>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Kernel</b> implements Cloneable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Kernel</b> (int <i class="parameter">width</i>, int <i class="parameter">height</i>, float[ ] <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getHeight</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getWidth</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getXOrigin</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getYOrigin</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final float[ ] <b class="function">getKernelData</b> (float[ ] <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Kernel(Cloneable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">ConvolveOp.ConvolveOp()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ConvolveOp.getKernel()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>LookupOp</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2128"></a>
<p> 
  This class is a <tt class="literal">BufferedImageOp</tt> and
  <tt class="literal">RasterOp</tt> that processes an image by one or more
  lookup tables to convert the value of each component of each pixel to
  a new value.  <tt class="literal">LookupOp</tt> is useful for operations
  such as brightening or darkening an image, reducing the number of
  colors in an image, or thresholding an image.  When you create a
  <tt class="literal">LookupOp</tt> object, you specify the lookup table or
  tables with a <tt class="literal">LookupTable</tt> object, typically a
  <tt class="literal">ByteLookupTable</tt> or
  <tt class="literal">ShortLookupTable</tt>.  If the
  <tt class="literal">LookupTable</tt> contains one table, that table is
  used for all color bands of the image (but not alpha bands).
  Otherwise, the <tt class="literal">LookupTable</tt> should contain one table
  for each color band or one table for each of the color and
  transparency bands.  If you specify a
  <tt class="literal">RenderingHints</tt> object when you create a
  <tt class="literal">LookupOp</tt>, the operation may use the color rendering
  and dithering hints it contains.</p>
<p>  To use a <tt class="literal">LookupOp</tt>, simply pass a source and
  optional destination image or raster to the
  <tt class="literal">filter()</tt> method.  Because
  <tt class="literal">LookupOp</tt> processes pixels independently of each
  other, you can use the same objects as both source and destination.
  Because of the nature of lookup tables, however, you cannot use
  <tt class="literal">LookupOp</tt> with images that use an
  <tt class="literal">IndexColorModel</tt>.
  If the lookup tables used by a <tt class="literal">LookupOp</tt>
  describe a simple linear function, you can also use a
  <tt class="literal">RescaleOp</tt> to achieve the same effect.
  See <tt class="literal">BufferedImageOp</tt> for further details.</p>
<a name="INDEX-2129"></a>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">LookupOp</b> implements BufferedImageOp, RasterOp {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">LookupOp</b> (LookupTable <i class="parameter">lookup</i>, RenderingHints <i class="parameter">hints</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final LookupTable <b class="function">getTable</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing BufferedImageOp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public BufferedImage <b class="function">createCompatibleDestImage</b> (BufferedImage <i class="parameter">src</i>, ColorModel <i class="parameter">destCM</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final BufferedImage <b class="function">filter</b> (BufferedImage <i class="parameter">src</i>, BufferedImage <i class="parameter">dst</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.Rectangle2D <b class="function">getBounds2D</b> (BufferedImage <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.Point2D <b class="function">getPoint2D</b> (java.awt.geom.Point2D <i class="parameter">srcPt</i>, java.awt.geom.Point2D <i class="parameter">dstPt</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final RenderingHints <b class="function">getRenderingHints</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing RasterOp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">createCompatibleDestRaster</b> (Raster <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final WritableRaster <b class="function">filter</b> (Raster <i class="parameter">src</i>, WritableRaster <i class="parameter">dst</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.Rectangle2D <b class="function">getBounds2D</b> (Raster <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->LookupOp(BufferedImageOp,RasterOp)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>LookupTable</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2130"></a>
<p>  This abstract class defines one or more lookup tables used by the
  <tt class="literal">LookupOp</tt> image-processing operation.
  <tt class="literal">lookupPixel()</tt> performs the table-lookup operation.
  This method is passed an array of color component source values.  It
  transforms this array into a new array of destination values by
  replacing each source value with the value found in the appropriate
  lookup table at the index that corresponds to the source value.
  Note, however, that an offset may be specified for the lookup tables.
  If so, the offset is subtracted from the source values before the


  lookup is performed.
  See the concrete subclasses <tt class="literal">ByteLookupTable</tt> and
  <tt class="literal">ShortLookupTable</tt>.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">LookupTable</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">LookupTable</b> (int <i class="parameter">offset</i>, int <i class="parameter">numComponents</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getNumComponents</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getOffset</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int[ ] <b class="function">lookupPixel</b> (int[ ] <i class="parameter">src</i>, int[ ] <i class="parameter">dest</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">ByteLookupTable, ShortLookupTable</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">LookupOp.LookupOp()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">LookupOp.getTable()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>MemoryImageSource</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2131"></a><a name="INDEX-2132"></a>
This class is an <tt class="literal">ImageProducer</tt> that produces an
image from data stored in memory. The various constructors
specify image data, color model, array offset, scanline
length, and properties in slightly different ways. The
instance methods implement the standard
<tt class="literal">ImageProducer</tt> interface that
allows an
<tt class="literal">ImageConsumer</tt> object to register interest in the
image.  </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">MemoryImageSource</b> implements ImageProducer {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">MemoryImageSource</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">pix</i>, int <i class="parameter">off</i>, int <i class="parameter">scan</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">MemoryImageSource</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">cm</i>, int[ ] <i class="parameter">pix</i>, int <i class="parameter">off</i>, int <i class="parameter">scan</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">MemoryImageSource</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">cm</i>, byte[ ] <i class="parameter">pix</i>, int <i class="parameter">off</i>, int <i class="parameter">scan</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">MemoryImageSource</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">pix</i>, int <i class="parameter">off</i>, int <i class="parameter">scan</i>, java.util.Hashtable <i class="parameter">props</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">MemoryImageSource</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">cm</i>, byte[ ] <i class="parameter">pix</i>, int <i class="parameter">off</i>, int <i class="parameter">scan</i>, java.util.Hashtable <i class="parameter">props</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">MemoryImageSource</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">cm</i>, int[ ] <i class="parameter">pix</i>, int <i class="parameter">off</i>, int <i class="parameter">scan</i>, java.util.Hashtable <i class="parameter">props</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">newPixels</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">newPixels</b> (byte[ ] <i class="parameter">newpix</i>, ColorModel <i class="parameter">newmodel</i>, int <i class="parameter">offset</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">newPixels</b> (int[ ] <i class="parameter">newpix</i>, ColorModel <i class="parameter">newmodel</i>, int <i class="parameter">offset</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">newPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">newPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, boolean <i class="parameter">framenotify</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">setAnimated</b> (boolean <i class="parameter">animated</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">setFullBufferUpdates</b> (boolean <i class="parameter">fullbuffers</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing ImageProducer</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">addConsumer</b> (ImageConsumer <i class="parameter">ic</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isConsumer</b> (ImageConsumer <i class="parameter">ic</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">removeConsumer</b> (ImageConsumer <i class="parameter">ic</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">requestTopDownLeftRightResend</b> (ImageConsumer <i class="parameter">ic</i>);</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">startProduction</b> (ImageConsumer <i class="parameter">ic</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->MemoryImageSource(ImageProducer)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>MultiPixelPackedSampleModel</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2133"></a>
<p>  This <tt class="literal">SampleModel</tt> knows how to interpret
  single-banded image 
  data in a <tt class="literal">DataBuffer</tt> that is organized so that more than
  one pixel is packed into a single element of the data buffer.  For
  example, a <tt class="literal">MultiPixelPackedSampleModel</tt> can be
  used to represent a monochrome image in which eight pixels are packed in
  a byte or 8-bit indexed color data in which four pixels


  are packed into an <tt class="literal">int</tt>.
  Most applications never need to use this class.  See
  also <tt class="literal">SampleModel</tt> for further information.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">MultiPixelPackedSampleModel</b> extends SampleModel {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">MultiPixelPackedSampleModel</b> (int <i class="parameter">dataType</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">numberOfBits</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">MultiPixelPackedSampleModel</b> (int <i class="parameter">dataType</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">numberOfBits</i>, int <i class="parameter">scanlineStride</i>, int <i class="parameter">dataBitOffset</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getBitOffset</b> (int <i class="parameter">x</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getDataBitOffset</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getOffset</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getPixelBitStride</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getScanlineStride</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding SampleModel</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SampleModel <b class="function">createCompatibleSampleModel</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public DataBuffer <b class="function">createDataBuffer</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getNumDataElements</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SampleModel <b class="function">createSubsetSampleModel</b> (int[ ] <i class="parameter">bands</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getDataElements</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, Object <i class="parameter">obj</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getSample</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getSampleSize</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getSampleSize</b> (int <i class="parameter">band</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getTransferType</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDataElements</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, Object <i class="parameter">obj</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSample</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>, int <i class="parameter">s</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->SampleModel-->MultiPixelPackedSampleModel</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PackedColorModel</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2134"></a>
<p> 
  This abstract <tt class="literal">ColorModel</tt> is used with image
  data in which color component and transparency values are packed into
  contiguous bits 
  of a <tt class="literal">byte</tt>, <tt class="literal">short</tt>, or
  <tt class="literal">int</tt>.  It uses bitmasks and bit-shifting operations
  to extract the color and transparency components from the pixel value.
  <tt class="literal">DirectColorModel</tt> is a concrete subclass that works
  with RGB color spaces.  Only applications that are doing custom image
  processing need to use this, or any, <tt class="literal">ColorModel</tt>.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">PackedColorModel</b> extends ColorModel {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PackedColorModel</b> (java.awt.color.ColorSpace <i class="parameter">space</i>, int <i class="parameter">bits</i>, int[ ] <i class="parameter">colorMaskArray</i>, int <i class="parameter">alphaMask</i>, boolean <i class="parameter">isAlphaPremultiplied</i>, int <i class="parameter">trans</i>, int <i class="parameter">transferType</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PackedColorModel</b> (java.awt.color.ColorSpace <i class="parameter">space</i>, int <i class="parameter">bits</i>, int <i class="parameter">rmask</i>, int <i class="parameter">gmask</i>, int <i class="parameter">bmask</i>, int <i class="parameter">amask</i>, boolean <i class="parameter">isAlphaPremultiplied</i>, int <i class="parameter">trans</i>, int <i class="parameter">transferType</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getMask</b> (int <i class="parameter">index</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int[ ] <b class="function">getMasks</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding ColorModel</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SampleModel <b class="function">createCompatibleSampleModel</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">getAlphaRaster</b> (WritableRaster <i class="parameter">raster</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isCompatibleSampleModel</b> (SampleModel <i class="parameter">sm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>

<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ColorModel(Transparency)-->PackedColorModel</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">DirectColorModel</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PixelGrabber</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2135"></a>
This class is an <tt class="literal">ImageConsumer</tt> that extracts a
specified rectangular array of pixels (in the default RGB
color model) from a specified <tt class="literal">Image</tt> or
<tt class="literal">ImageProducer</tt> and stores them in a specified array
(using the specified offset into the array and specified
scanline size). Use this class when you want to
inspect or manipulate the data of an image or some
rectangular portion of an image.</p>
<p>
<a name="INDEX-2136"></a><a name="INDEX-2137"></a>
The method <tt class="literal">grabPixels()</tt> makes the
<tt class="literal">PixelGrabber</tt> start grabbing pixels.
<tt class="literal">status()</tt> returns the status of the pixel-grabbing
process. The return value uses the same flag value
constants that the <tt class="literal">ImageObserver</tt> class does. The
remaining methods are the standard <tt class="literal">ImageConsumer</tt>
methods and should not be called directly.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PixelGrabber</b> implements ImageConsumer {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public <b class="function">PixelGrabber</b> (Image <i class="parameter">img</i>, int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, boolean <i class="parameter">forceRGB</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PixelGrabber</b> (ImageProducer <i class="parameter">ip</i>, int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">pix</i>, int <i class="parameter">off</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PixelGrabber</b> (Image <i class="parameter">img</i>, int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">pix</i>, int <i class="parameter">off</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public ColorModel <b class="function">getColorModel</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setColorModel</b> (ColorModel <i class="parameter">model</i>);</td><td align="right"><i> Implements:ImageConsumer empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public int <b class="function">getHeight</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public Object <b class="function">getPixels</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public int <b class="function">getStatus</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public int <b class="function">getWidth</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">abortGrabbing</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">grabPixels</b> () throws InterruptedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">grabPixels</b> (long <i class="parameter">ms</i>) throws InterruptedException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.1</span></td><td align="left">public void <b class="function">startGrabbing</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">status</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing ImageConsumer</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">imageComplete</b> (int <i class="parameter">status</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setColorModel</b> (ColorModel <i class="parameter">model</i>);</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDimensions</b> (int <i class="parameter">width</i>, int <i class="parameter">height</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setHints</b> (int <i class="parameter">hints</i>);</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">srcX</i>, int <i class="parameter">srcY</i>, int <i class="parameter">srcW</i>, int <i class="parameter">srcH</i>, ColorModel <i class="parameter">model</i>, int[ ] <i class="parameter">pixels</i>, int <i class="parameter">srcOff</i>, int <i class="parameter">srcScan</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">srcX</i>, int <i class="parameter">srcY</i>, int <i class="parameter">srcW</i>, int <i class="parameter">srcH</i>, ColorModel <i class="parameter">model</i>, byte[ ] <i class="parameter">pixels</i>, int <i class="parameter">srcOff</i>, int <i class="parameter">srcScan</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setProperties</b> (java.util.Hashtable <i class="parameter">props</i>);</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->PixelGrabber(ImageConsumer)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PixelInterleavedSampleModel</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2138"></a>
<p>  This <tt class="literal">SampleModel</tt> represents image data stored so
  that each component of each pixel is stored in a separate
  element of the <tt class="literal">DataBuffer</tt> and all pixel components
  are stored in the same bank of the
  <tt class="literal">DataBuffer</tt>.  For example, it can be used to
  represent RGB pixels in which the red, green, and blue components are
  interleaved into a single bank of <tt class="literal">byte</tt> values.
  Most applications never need to use this class or its subclasses.  See
  <tt class="literal">SampleModel</tt> for further information.</p>

<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PixelInterleavedSampleModel</b> extends ComponentSampleModel {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PixelInterleavedSampleModel</b> (int <i class="parameter">dataType</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">pixelStride</i>, int <i class="parameter">scanlineStride</i>, int[ ] <i class="parameter">bandOffsets</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding ComponentSampleModel</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SampleModel <b class="function">createCompatibleSampleModel</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SampleModel <b class="function">createSubsetSampleModel</b> (int[ ] <i class="parameter">bands</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->SampleModel-->ComponentSampleModel-->PixelInterleavedSampleModel</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Raster</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2139"></a>
<p>  This class represents a rectangular array of pixels.  A
  <tt class="literal">Raster</tt> is composed of a
  <tt class="literal">DataBuffer</tt> that contains raw pixel data and a
  matching <tt class="literal">SampleModel</tt> that knows how to extract
  pixel data from that <tt class="literal">DataBuffer</tt>.
  A <tt class="literal">Raster</tt> object is used within
  a <tt class="literal">BufferedImage</tt> object, which also contains a 
  <tt class="literal">ColorModel</tt> object to interpret the pixel values of
  the <tt class="literal">Raster</tt> as colors.  Most applications can simply
  used <tt class="literal">BufferedImage</tt> objects and never have to
  work with <tt class="literal">Raster</tt> objects directly.</p>
<p>
<tt class="literal">Raster</tt> does not have any public constructors.  You
  can call the static method <tt class="literal">createRaster()</tt> or
  <tt class="literal">createWritableRaster()</tt> to create a
  <tt class="literal">Raster</tt> using arbitrary
  <tt class="literal">DataBuffer</tt> and <tt class="literal">SampleModel</tt>
  objects.  However, you usually obtain more efficient results if
  you use 
<tt class="literal">createBandedRaster()</tt>,
  <tt class="literal">createInterleavedRaster()</tt>, or
  <tt class="literal">createPackedRaster()</tt> to create a 
  <tt class="literal">Raster</tt> using one of the
  data formats supported by the built-in <tt class="literal">DataBuffer</tt>
  and <tt class="literal">SampleModel</tt> subclasses.</p>
<p>
<tt class="literal">Raster</tt> contains a number of methods to
  read individual pixels and blocks of pixels.  Note, however, that
  there are no methods to set pixel values.
  If you want to modify pixels in a <tt class="literal">Raster</tt>, you must use the
  <tt class="literal">WritableRaster</tt> subclass.  A
  <tt class="literal">Raster</tt> can have a parent <tt class="literal">Raster</tt>
  that contains the actual data.  The <tt class="literal">createChild()</tt>
  method uses this feature to return a <tt class="literal">Raster</tt> object
  that represents a rectangular subset of the current raster.  (It can
  also return a child <tt class="literal">Raster</tt> that contains only a
  subset of the bands of the parent raster: for example, a
  <tt class="literal">Raster</tt> that contains only the alpha band of
  transparency values of its parent.)  Finally, while
  <tt class="literal">BufferedImage</tt> objects have only a width and height,
  <tt class="literal">Raster</tt> objects have a size and location.  Thus, you can
  specify an origin when you create a <tt class="literal">Raster</tt>.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Raster</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Raster</b> (SampleModel <i class="parameter">sampleModel</i>, Point <i class="parameter">origin</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Raster</b> (SampleModel <i class="parameter">sampleModel</i>, DataBuffer <i class="parameter">dataBuffer</i>, Point <i class="parameter">origin</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">Raster</b> (SampleModel <i class="parameter">sampleModel</i>, DataBuffer <i class="parameter">dataBuffer</i>, Rectangle <i class="parameter">aRegion</i>, Point <i class="parameter">sampleModelTranslate</i>, Raster <i class="parameter">parent</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static WritableRaster <b class="function">createBandedRaster</b> (int <i class="parameter">dataType</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">bands</i>, Point <i class="parameter">location</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static WritableRaster <b class="function">createBandedRaster</b> (int <i class="parameter">dataType</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">scanlineStride</i>, int[ ] <i class="parameter">bankIndices</i>, int[ ] <i class="parameter">bandOffsets</i>, Point <i class="parameter">location</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static WritableRaster <b class="function">createBandedRaster</b> (DataBuffer <i class="parameter">dataBuffer</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">scanlineStride</i>, int[ ] <i class="parameter">bankIndices</i>, int[ ] <i class="parameter">bandOffsets</i>, Point <i class="parameter">location</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static WritableRaster <b class="function">createInterleavedRaster</b> (int <i class="parameter">dataType</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">bands</i>, Point <i class="parameter">location</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static WritableRaster <b class="function">createInterleavedRaster</b> (int <i class="parameter">dataType</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">scanlineStride</i>, int <i class="parameter">pixelStride</i>, int[ ] <i class="parameter">bandOffsets</i>, Point <i class="parameter">location</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static WritableRaster <b class="function">createInterleavedRaster</b> (DataBuffer <i class="parameter">dataBuffer</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">scanlineStride</i>, int <i class="parameter">pixelStride</i>, int[ ] <i class="parameter">bandOffsets</i>, Point <i class="parameter">location</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static WritableRaster <b class="function">createPackedRaster</b> (DataBuffer <i class="parameter">dataBuffer</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">bitsPerPixel</i>, Point <i class="parameter">location</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static WritableRaster <b class="function">createPackedRaster</b> (int <i class="parameter">dataType</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">bandMasks</i>, Point <i class="parameter">location</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static WritableRaster <b class="function">createPackedRaster</b> (DataBuffer <i class="parameter">dataBuffer</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">scanlineStride</i>, int[ ] <i class="parameter">bandMasks</i>, Point <i class="parameter">location</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static WritableRaster <b class="function">createPackedRaster</b> (int <i class="parameter">dataType</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">bands</i>, int <i class="parameter">bitsPerBand</i>, Point <i class="parameter">location</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Raster <b class="function">createRaster</b> (SampleModel <i class="parameter">sm</i>, DataBuffer <i class="parameter">db</i>, Point <i class="parameter">location</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static WritableRaster <b class="function">createWritableRaster</b> (SampleModel <i class="parameter">sm</i>, Point <i class="parameter">location</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static WritableRaster <b class="function">createWritableRaster</b> (SampleModel <i class="parameter">sm</i>, DataBuffer <i class="parameter">db</i>, Point <i class="parameter">location</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Rectangle <b class="function">getBounds</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public DataBuffer <b class="function">getDataBuffer</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getHeight</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getMinX</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getMinY</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getNumBands</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getNumDataElements</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Raster <b class="function">getParent</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SampleModel <b class="function">getSampleModel</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getSampleModelTranslateX</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getSampleModelTranslateY</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getTransferType</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getWidth</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Raster <b class="function">createChild</b> (int <i class="parameter">parentX</i>, int <i class="parameter">parentY</i>, int <i class="parameter">width</i>, int <i class="parameter">height</i>, int <i class="parameter">childMinX</i>, int <i class="parameter">childMinY</i>, int[ ] <i class="parameter">bandList</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">createCompatibleWritableRaster</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">createCompatibleWritableRaster</b> (Rectangle <i class="parameter">rect</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">createCompatibleWritableRaster</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">createCompatibleWritableRaster</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Raster <b class="function">createTranslatedChild</b> (int <i class="parameter">childMinX</i>, int <i class="parameter">childMinY</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getDataElements</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, Object <i class="parameter">outData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getDataElements</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, Object <i class="parameter">outData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int[ ] <i class="parameter">iArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float[ ] <b class="function">getPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, float[ ] <i class="parameter">fArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double[ ] <b class="function">getPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, double[ ] <i class="parameter">dArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">iArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float[ ] <b class="function">getPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, float[ ] <i class="parameter">fArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double[ ] <b class="function">getPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, double[ ] <i class="parameter">dArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getSample</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getSampleDouble</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float <b class="function">getSampleFloat</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, int[ ] <i class="parameter">iArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float[ ] <b class="function">getSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, float[ ] <i class="parameter">fArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double[ ] <b class="function">getSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, double[ ] <i class="parameter">dArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected DataBuffer <b class="function">dataBuffer</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">height</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">minX</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">minY</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">numBands</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">numDataElements</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Raster <b class="function">parent</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected SampleModel <b class="function">sampleModel</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">sampleModelTranslateX</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">sampleModelTranslateY</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">width</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">WritableRaster</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list.</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">PaintContext.getRaster(), BufferedImage.{getData(), getTile()}, Raster.{createChild(), createRaster(), createTranslatedChild(), getParent()}, RenderedImage.{getData(), getTile()}</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">Raster.parent</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RasterFormatException</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked</i></b></font></td>
</tr>
</table>
<p>  Signals that a <tt class="literal">Raster</tt> is
  improperly configured.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">RasterFormatException</b> extends RuntimeException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">RasterFormatException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->RasterFormatException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RasterOp</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2140"></a>
<p> 
  This interface defines an image-processing operation that can be
  performed on a <tt class="literal">Raster</tt>.  It is very similar to the
  <tt class="literal">BufferedImageOp</tt>, except that the operation is
  performed directly on the uninterpreted pixels of <tt class="literal">Raster</tt> data, rather than on the color values of a
  <tt class="literal">BufferedImage</tt>.  Many of the implementations of
  <tt class="literal">BufferedImageOp</tt> are also implementations of
  <tt class="literal">RasterOp</tt>.  See <tt class="literal">BufferedImageOp</tt>
  for details.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">RasterOp</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract WritableRaster <b class="function">createCompatibleDestRaster</b> (Raster <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract WritableRaster <b class="function">filter</b> (Raster <i class="parameter">src</i>, WritableRaster <i class="parameter">dest</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.awt.geom.Rectangle2D <b class="function">getBounds2D</b> (Raster <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.awt.geom.Point2D <b class="function">getPoint2D</b> (java.awt.geom.Point2D <i class="parameter">srcPt</i>, java.awt.geom.Point2D <i class="parameter">dstPt</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract RenderingHints <b class="function">getRenderingHints</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">AffineTransformOp, BandCombineOp, ColorConvertOp, ConvolveOp, LookupOp, RescaleOp</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RenderedImage</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2141"></a>
<p>  This interface describes the methods of rendered images.
  <tt class="literal">RenderedImage</tt> exists primarily for use by the
  forthcoming Java Advanced Imaging API (<tt class="literal">javax.jai.*</tt>), 
  but it is also
  implemented (through <tt class="literal">WritableRenderedImage</tt>) by
  <tt class="literal">BufferedImage</tt>, meaning that
  <tt class="literal">BufferedImage</tt> images will be able to interoperate
  with JAI-rendered images.</p>
<p>  The <tt class="literal">getSources()</tt> method and the tile-related
  methods of <tt class="literal">RenderedImage</tt> are used in the JAI, and
  are not of interest in Java 2D.  <tt class="literal">BufferedImage</tt>
  objects contain only a single tile, so the
  <tt class="literal">BufferedImage</tt> class defines implementations of
  these methods.  Methods that are of interest include
  <tt class="literal">getData()</tt>, <tt class="literal">getSampleModel()</tt>, and
  <tt class="literal">getColorModel()</tt>.  These methods return a copy of the
  <tt class="literal">Raster</tt> that contains pixels, the
  <tt class="literal">SampleModel</tt> that specifies the internal
  organization of the <tt class="literal">Raster</tt>, and the <tt class="literal">ColorModel</tt> that
  specifies how to interpret the pixels as colors, respectively.
  <tt class="literal">getWidth()</tt>, <tt class="literal">getHeight()</tt>, and
  <tt class="literal">copyData()</tt> are also useful in Java 2D programs.</p>

<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">RenderedImage</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract ColorModel <b class="function">getColorModel</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Raster <b class="function">getData</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Raster <b class="function">getData</b> (Rectangle <i class="parameter">rect</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getHeight</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getMinTileX</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getMinTileY</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getMinX</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getMinY</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getNumXTiles</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getNumYTiles</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String[ ] <b class="function">getPropertyNames</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract SampleModel <b class="function">getSampleModel</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.util.Vector <b class="function">getSources</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getTileGridXOffset</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getTileGridYOffset</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getTileHeight</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getTileWidth</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getWidth</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract WritableRaster <b class="function">copyData</b> (WritableRaster <i class="parameter">raster</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">getProperty</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Raster <b class="function">getTile</b> (int <i class="parameter">tileX</i>, int <i class="parameter">tileY</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">WritableRenderedImage</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Graphics2D.drawRenderedImage()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">java.awt.image.renderable.ContextualRenderedImageFactory.create(), java.awt.image.renderable.ParameterBlock.getRenderedSource(), java.awt.image.renderable.RenderableImage.{createDefaultRendering(), createRendering(), createScaledRendering()}, java.awt.image.renderable.RenderableImageOp.{createDefaultRendering(), createRendering(), createScaledRendering()}, java.awt.image.renderable.RenderedImageFactory.create()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ReplicateScaleFilter</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>cloneable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2142"></a>
This class implements an <tt class="literal">ImageFilter</tt> that scales an
image to a specified pixel size.  It uses a simple
scaling algorithm in which rows and columns of image pixels
are duplicated
or omitted as necessary to achieve the
desired size. See <tt class="literal">AreaAveragingScaleFilter</tt> for a
scaling filter that results in smoother images.
The methods of this class are <tt class="literal">ImageConsumer</tt> methods
used for communication between the image filter and the
<tt class="literal">FilteredImageSource</tt> that uses it.  Applications
usually do not call these methods directly.
The easiest way to use this filter is to call the
<tt class="literal">getScaledInstance()</tt> method of <tt class="literal">Image</tt>, 
specifying an appropriate hint constant.
<a name="INDEX-2143"></a>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ReplicateScaleFilter</b> extends ImageFilter {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ReplicateScaleFilter</b> (int <i class="parameter">width</i>, int <i class="parameter">height</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding ImageFilter</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDimensions</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">model</i>, int[ ] <i class="parameter">pixels</i>, int <i class="parameter">off</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">model</i>, byte[ ] <i class="parameter">pixels</i>, int <i class="parameter">off</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setProperties</b> (java.util.Hashtable <i class="parameter">props</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">destHeight</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">destWidth</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Object <b class="function">outpixbuf</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int[ ] <b class="function">srccols</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">srcHeight</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int[ ] <b class="function">srcrows</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">srcWidth</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ImageFilter(Cloneable,ImageConsumer)-->ReplicateScaleFilter</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">AreaAveragingScaleFilter</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RescaleOp</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2144"></a>
<p> 
  This class is a <tt class="literal">BufferedImageOp</tt> and a
  <tt class="literal">RasterOp</tt> that performs a linear scaling on the
  components of each pixel in an image by multiplying them by a scale
  factor and adding a constant.  When you create a
  <tt class="literal">RescaleOp</tt>, you specify either 
  a single scale factor and a
  single offset or an array of scale factors and an array
  of constants.  If only one scale factor and constant are specified,
  then all color bands of the image are rescaled identically.
  Otherwise, there should be one scale factor and constant for each
  color band or for each color band plus the alpha transparency band.
  In this case, each color band, and possibly the alpha band, is
  rescaled independently.</p>
<p>  To use a <tt class="literal">RescaleOp</tt>, simply pass a source and
  optional destination image or raster to the
  <tt class="literal">filter()</tt> method.  Because
  <tt class="literal">RescaleOp</tt> processes pixels independently of each
  other, you can use the same objects as both source and destination.
  Because of the nature of the rescaling, however, you cannot use
  <tt class="literal">LookupOp</tt> with images that use an
  <tt class="literal">IndexColorModel</tt>.
  <tt class="literal">RescaleOp</tt> performs a linear rescaling.  If you want
  to perform a nonlinear rescaling, you can do so with a
  <tt class="literal">LookupOp</tt> and a <tt class="literal">LookupTable</tt> that
  describes the desired scaling.
  See <tt class="literal">BufferedImageOp</tt> for further details.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">RescaleOp</b> implements BufferedImageOp, RasterOp {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">RescaleOp</b> (float <i class="parameter">scaleFactor</i>, float <i class="parameter">offset</i>, RenderingHints <i class="parameter">hints</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">RescaleOp</b> (float[ ] <i class="parameter">scaleFactors</i>, float[ ] <i class="parameter">offsets</i>, RenderingHints <i class="parameter">hints</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getNumFactors</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final float[ ] <b class="function">getOffsets</b> (float[ ] <i class="parameter">offsets</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final float[ ] <b class="function">getScaleFactors</b> (float[ ] <i class="parameter">scaleFactors</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing BufferedImageOp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public BufferedImage <b class="function">createCompatibleDestImage</b> (BufferedImage <i class="parameter">src</i>, ColorModel <i class="parameter">destCM</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final BufferedImage <b class="function">filter</b> (BufferedImage <i class="parameter">src</i>, BufferedImage <i class="parameter">dst</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.Rectangle2D <b class="function">getBounds2D</b> (BufferedImage <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.Point2D <b class="function">getPoint2D</b> (java.awt.geom.Point2D <i class="parameter">srcPt</i>, java.awt.geom.Point2D <i class="parameter">dstPt</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final RenderingHints <b class="function">getRenderingHints</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing RasterOp</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">createCompatibleDestRaster</b> (Raster <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final WritableRaster <b class="function">filter</b> (Raster <i class="parameter">src</i>, WritableRaster <i class="parameter">dst</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final java.awt.geom.Rectangle2D <b class="function">getBounds2D</b> (Raster <i class="parameter">src</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->RescaleOp(BufferedImageOp,RasterOp)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RGBImageFilter</b></font></td><td align="right"><font size="+1"><b>Java 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i>cloneable PJ1.1</i></b></font></td>
</tr>
</table>

<p>
<a name="INDEX-2145"></a><a name="INDEX-2146"></a><a name="INDEX-2147"></a>
This abstract class is an <tt class="literal">ImageFilter</tt> that provides
an easy way to implement filters that modify the colors of
an image. To create a color filter that modifies the colors
of an image, you should subclass <tt class="literal">RGBImageFilter</tt> and
provide a definition of <tt class="literal">filterRGB()</tt> that converts
the input pixel value (in the default RGB color model) to an
output value. If the conversion does not depend on the
location of the pixel, set the
<a name="INDEX-2148"></a><tt class="literal">canFilterIndexColorModel</tt> variable to <tt class="literal">true</tt> so
that the <tt class="literal">RGBImageFilter</tt> can save time by filtering
the colormap of an image that uses an
<tt class="literal">IndexColorModel</tt>, instead of filtering each pixel of
the image.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">RGBImageFilter</b> extends ImageFilter {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">RGBImageFilter</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public IndexColorModel <b class="function">filterIndexColorModel</b> (IndexColorModel <i class="parameter">icm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">filterRGB</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">rgb</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">filterRGBPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">pixels</i>, int <i class="parameter">off</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">substituteColorModel</b> (ColorModel <i class="parameter">oldcm</i>, ColorModel <i class="parameter">newcm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding ImageFilter</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setColorModel</b> (ColorModel <i class="parameter">model</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">model</i>, int[ ] <i class="parameter">pixels</i>, int <i class="parameter">off</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, ColorModel <i class="parameter">model</i>, byte[ ] <i class="parameter">pixels</i>, int <i class="parameter">off</i>, int <i class="parameter">scansize</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected boolean <b class="function">canFilterIndexColorModel</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected ColorModel <b class="function">newmodel</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected ColorModel <b class="function">origmodel</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ImageFilter(Cloneable,ImageConsumer)-->RGBImageFilter</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">javax.swing.GrayFilter</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SampleModel</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2149"></a>
<p>  This abstract class defines methods for extracting the pixels of an image
  from an arbitrary <tt class="literal">DataBuffer</tt>, regardless
  of how those pixels are stored in the
  <tt class="literal">DataBuffer</tt>.  Image data is stored in a
  <tt class="literal">Raster</tt> object, which consists of a
  <tt class="literal">DataBuffer</tt> to hold the raw data and a
  <tt class="literal">SampleModel</tt> to interpret the storage format.
  Only appliations that read or write image data directly from files or
  other sources ever need to use this class.
  See also the concrete subclasses
  <tt class="literal">ComponentSampleModel</tt>,
  <tt class="literal">SinglePixelPackedSampleModel</tt>, and
  <tt class="literal">MultiPixelPackedSampleModel</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">SampleModel</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SampleModel</b> (int <i class="parameter">dataType</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">numBands</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getDataType</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getHeight</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getNumBands</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getNumDataElements</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int[ ] <b class="function">getSampleSize</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getSampleSize</b> (int <i class="parameter">band</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getTransferType</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final int <b class="function">getWidth</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract SampleModel <b class="function">createCompatibleSampleModel</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract DataBuffer <b class="function">createDataBuffer</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract SampleModel <b class="function">createSubsetSampleModel</b> (int[ ] <i class="parameter">bands</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">getDataElements</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, Object <i class="parameter">obj</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getDataElements</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, Object <i class="parameter">obj</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float[ ] <b class="function">getPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, float[ ] <i class="parameter">fArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double[ ] <b class="function">getPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, double[ ] <i class="parameter">dArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float[ ] <b class="function">getPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, float[ ] <i class="parameter">fArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double[ ] <b class="function">getPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, double[ ] <i class="parameter">dArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getSample</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getSampleDouble</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float <b class="function">getSampleFloat</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public float[ ] <b class="function">getSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, float[ ] <i class="parameter">fArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double[ ] <b class="function">getSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, double[ ] <i class="parameter">dArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setDataElements</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, Object <i class="parameter">obj</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDataElements</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, Object <i class="parameter">obj</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, float[ ] <i class="parameter">fArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, double[ ] <i class="parameter">dArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, float[ ] <i class="parameter">fArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, double[ ] <i class="parameter">dArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setSample</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>, int <i class="parameter">s</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSample</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>, float <i class="parameter">s</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSample</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>, double <i class="parameter">s</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, float[ ] <i class="parameter">fArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, double[ ] <i class="parameter">dArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">dataType</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">height</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">numBands</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">width</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">ComponentSampleModel, MultiPixelPackedSampleModel, SinglePixelPackedSampleModel</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">ColorModel.isCompatibleSampleModel(), ComponentColorModel.isCompatibleSampleModel(), IndexColorModel.isCompatibleSampleModel(), PackedColorModel.isCompatibleSampleModel(), Raster.{createRaster(), createWritableRaster(), Raster()}, WritableRaster.WritableRaster()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span>Too many methods to list.</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">Raster.sampleModel</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ShortLookupTable</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2150"></a>
<p>  This concrete subclass of <tt class="literal">LookupTable</tt> contains one
  or more <tt class="literal">short</tt> arrays that serve as lookup tables for
  a <tt class="literal">LookupOp</tt> image-processing operation.
  Applications never need to use a <tt class="literal">ShortLookupTable</tt>
  directly; they need to create one only to pass to the
  <tt class="literal">LookupOp()</tt> constructor.  Create a
  <tt class="literal">ShortLookupTable</tt> by passing the
  <tt class="literal">short</tt> array or arrays to the
  <tt class="literal">ShortLookupTable()</tt> constructor, along with an offset
  that is subtracted from each source color component before the
  lookup is performed.  See also <tt class="literal">ByteLookupTable()</tt>.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ShortLookupTable</b> extends LookupTable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ShortLookupTable</b> (int <i class="parameter">offset</i>, short[ ][ ] <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ShortLookupTable</b> (int <i class="parameter">offset</i>, short[ ] <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public final short[ ][ ] <b class="function">getTable</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public short[ ] <b class="function">lookupPixel</b> (short[ ] <i class="parameter">src</i>, short[ ] <i class="parameter">dst</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding LookupTable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">lookupPixel</b> (int[ ] <i class="parameter">src</i>, int[ ] <i class="parameter">dst</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->LookupTable-->ShortLookupTable</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SinglePixelPackedSampleModel</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2151"></a>
<p>  This <tt class="literal">SampleModel</tt> knows how to interpret
  image data in a
  <tt class="literal">DataBuffer</tt> that is organized so that each pixel is stored
  in a single data element and each data element contains exactly one
  pixel.  For example, it can be used to represent RGB and ARGB data
  packed into a <tt class="literal">int</tt> element or 8-bit
  grayscale data stored in <tt class="literal">byte</tt> elements.  The
  <em class="replaceable">bitMasks</em> array passed to the constructor
  specifies the bitmask used to extract each color component from the
  data element.  For example, to extract the red color component of an
  RGB color from an <tt class="literal">int</tt>, you specify a bitmask of 
  <tt class="literal">0x00FF0000</tt>. 
  Most applications never need to use this class.  See
  <tt class="literal">SampleModel</tt> for further information.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">SinglePixelPackedSampleModel</b> extends SampleModel {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SinglePixelPackedSampleModel</b> (int <i class="parameter">dataType</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">bitMasks</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SinglePixelPackedSampleModel</b> (int <i class="parameter">dataType</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">scanlineStride</i>, int[ ] <i class="parameter">bitMasks</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getBitMasks</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getBitOffsets</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getOffset</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getScanlineStride</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding SampleModel</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SampleModel <b class="function">createCompatibleSampleModel</b> (int <i class="parameter">w</i>, int <i class="parameter">h</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getNumDataElements</b> ();</td><td align="right"><i> constant</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public DataBuffer <b class="function">createDataBuffer</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public SampleModel <b class="function">createSubsetSampleModel</b> (int[ ] <i class="parameter">bands</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getDataElements</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, Object <i class="parameter">obj</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getSample</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int[ ] <b class="function">getSampleSize</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getSampleSize</b> (int <i class="parameter">band</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDataElements</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, Object <i class="parameter">obj</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSample</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>, int <i class="parameter">s</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, int[ ] <i class="parameter">iArray</i>, DataBuffer <i class="parameter">data</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->SampleModel-->SinglePixelPackedSampleModel</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>TileObserver</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2152"></a>
<p> 
  This interface is implemented by objects that wish to be notified
  when a <tt class="literal">WritableRenderedImage</tt> is about to be written
  to.  It is used as part of the Java Advanced Imaging API
  (<tt class="literal">javax.jai.*</tt>) and is not of interest to Java 2D
  programs.  In particular, note that while
  <tt class="literal">BufferedImage</tt> objects allow
  <tt class="literal">TileObserver</tt> objects to be registered, they never
  send out notifications to them.  Only programs using the JAI will ever
  implement this interface.  It is used in the
  <tt class="literal">java.awt.image</tt> package simply for future
  compatibility with the JAI.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">TileObserver</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">tileUpdate</b> (WritableRenderedImage <i class="parameter">source</i>, int <i class="parameter">tileX</i>, int <i class="parameter">tileY</i>, boolean <i class="parameter">willBeWritable</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">BufferedImage.{addTileObserver(), removeTileObserver()}, WritableRenderedImage.{addTileObserver(), removeTileObserver()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>WritableRaster</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2153"></a>
<p> 
  This class extends <tt class="literal">Raster</tt> to add methods for
  setting pixel values in the <tt class="literal">Raster</tt>.  It does not
  have any public constructors.  You create
  <tt class="literal">WritableRaster</tt> objects with the static methods
  defined by the <tt class="literal">Raster</tt> class.
  <tt class="literal">WritableRaster</tt> is used by
  <tt class="literal">BufferedImage</tt>, and, in practice, most rasters used
  in a program are <tt class="literal">WritableRaster</tt> objects.  Most
  applications can use the features of <tt class="literal">BufferedImage</tt>
  and never need to use <tt class="literal">WritableRaster</tt> or
  <tt class="literal">Raster</tt> directly.
  See <tt class="literal">Raster</tt> for more information.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">WritableRaster</b> extends Raster {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">WritableRaster</b> (SampleModel <i class="parameter">sampleModel</i>, Point <i class="parameter">origin</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">WritableRaster</b> (SampleModel <i class="parameter">sampleModel</i>, DataBuffer <i class="parameter">dataBuffer</i>, Point <i class="parameter">origin</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">WritableRaster</b> (SampleModel <i class="parameter">sampleModel</i>, DataBuffer <i class="parameter">dataBuffer</i>, Rectangle <i class="parameter">aRegion</i>, Point <i class="parameter">sampleModelTranslate</i>, WritableRaster <i class="parameter">parent</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">createWritableChild</b> (int <i class="parameter">parentX</i>, int <i class="parameter">parentY</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">childMinX</i>, int <i class="parameter">childMinY</i>, int[ ] <i class="parameter">bandList</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">createWritableTranslatedChild</b> (int <i class="parameter">childMinX</i>, int <i class="parameter">childMinY</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public WritableRaster <b class="function">getWritableParent</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDataElements</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, Raster <i class="parameter">inRaster</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDataElements</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, Object <i class="parameter">inData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDataElements</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, Object <i class="parameter">inData</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, float[ ] <i class="parameter">fArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int[ ] <i class="parameter">iArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixel</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, double[ ] <i class="parameter">dArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, double[ ] <i class="parameter">dArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, float[ ] <i class="parameter">fArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPixels</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int[ ] <i class="parameter">iArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setRect</b> (Raster <i class="parameter">srcRaster</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setRect</b> (int <i class="parameter">dx</i>, int <i class="parameter">dy</i>, Raster <i class="parameter">srcRaster</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSample</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>, double <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSample</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>, float <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSample</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">b</i>, int <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, double[ ] <i class="parameter">dArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, float[ ] <i class="parameter">fArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSamples</b> (int <i class="parameter">x</i>, int <i class="parameter">y</i>, int <i class="parameter">w</i>, int <i class="parameter">h</i>, int <i class="parameter">b</i>, int[ ] <i class="parameter">iArray</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Raster-->WritableRaster</tt>
</p>
<p>
<span class="refsect1">Passed To: </span>Too many methods to list.</p>
<p>
<span class="refsect1">Returned By: </span>Too many methods to list.</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>WritableRenderedImage</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.image</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2154"></a>
<p> 
  This interface defines methods that allow image data to be written
  into a <tt class="literal">RenderedImage</tt> in a way that allows for
  notification of updates.  Most of the methods of this interface
  exist for use with the forthcoming Java Advanced Imaging (JAI) API
  (<tt class="literal">javax.jai.*</tt>) and are not of interest to programs
  using Java 2D.  Nevertheless,
  <tt class="literal">BufferedImage</tt> implements this interface, so that
  Java 2D <tt class="literal">BufferedImage</tt> objects can interoperate with
  future JAI <tt class="literal">RenderedImage</tt> objects.
  <tt class="literal">BufferedImage</tt> objects contain only a single tile
  and provide trivial implementations of all the tile-related methods.
  <tt class="literal">setData()</tt> is the only method of interest to Java 2D
  programs.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">WritableRenderedImage</b> extends RenderedImage {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">addTileObserver</b> (TileObserver <i class="parameter">to</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract WritableRaster <b class="function">getWritableTile</b> (int <i class="parameter">tileX</i>, int <i class="parameter">tileY</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Point[ ] <b class="function">getWritableTileIndices</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">hasTileWriters</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">isTileWritable</b> (int <i class="parameter">tileX</i>, int <i class="parameter">tileY</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">releaseWritableTile</b> (int <i class="parameter">tileX</i>, int <i class="parameter">tileY</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">removeTileObserver</b> (TileObserver <i class="parameter">to</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setData</b> (Raster <i class="parameter">r</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(WritableRenderedImage(RenderedImage))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">BufferedImage</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">TileObserver.tileUpdate()</tt>
</p>
</div>
<a name="INDEX-2155"></a>
<a name="INDEX-2156"></a>
<a name="INDEX-2157"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch17_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch17_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch19_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch19_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">17.1. The java.awt.im Package</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">19. The java.awt.image.renderable Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
