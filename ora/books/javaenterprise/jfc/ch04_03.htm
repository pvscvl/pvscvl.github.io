<html>
<head>
<title>The Coordinate System (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The Coordinate System">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_01.htm">Chapter 4: Graphics with AWT

and Java 2D</a></td><td align="right" valign="top" width="172"><a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">4.3. The Coordinate System</h2>
<a name="INDEX-832"></a>
<a name="INDEX-833"></a>
<a name="INDEX-834"></a>

<p>By default, Java 2D uses the same coordinate system as AWT.  The
      origin is in the upper-left corner of the drawing surface. X 
      coordinate values increase to the right, and Y coordinate
      values increase as they
      go down.  When drawing to a screen or an off-screen image, X and Y
      coordinates are measured in pixels.  When drawing to a printer or
      other high-resolution device, however, X and Y coordinates are
      measured in points instead of pixels (and there are 72
      points in one inch).  </p>

<a name="INDEX-835"></a>
<a name="INDEX-836"></a>

<p>It is instructive to consider in more detail how Java 2D draws to a
      high-resolution device like a printer.  The Java 2D drawing
      commands you issue express coordinates on the printer paper in
      units of points.  This coordinate system is referred to
      as "user space."  However, different printers print at different
      resolutions and support different coordinate systems, so
      when drawing to a device like this, Java 2D must convert your
      user-space coordinates into printer-specific, device-space
      coordinates.</p>

<p>On a high-resolution printer, one point in user space may
      translate into 10 or more pixels in the printer's device space.
      In order to take full advantage of all this resolution, you need
      to be able to use coordinates like 75.3 in user space.  This
      brings us to one of the big differences between the Java 2D
      coordinate system and the AWT system: Java 2D allows coordinates to
      be expressed as floating-point numbers, instead of restricting them
      to integers.  Throughout the Java 2D API, you'll see methods that
      accept <tt class="literal">float</tt> values instead of
      <tt class="literal">int</tt> values.</p>

<a name="INDEX-837"></a>
<a name="INDEX-838"></a>
<a name="INDEX-839"></a>
<a name="INDEX-840"></a>
<a name="INDEX-841"></a>

<p>The distinction between user space and device space is valid even
      when we are just drawing to the relatively low resolution
      screen.  By default, when drawing to a screen or image, user space
      is the same as device space.  However, the
      <tt class="literal">Graphics2D</tt> class defines methods that allow you
      to trivially modify the default coordinate system.  For example,
      you can move the origin of the coordinate system with the
      <tt class="literal">translate()</tt> method.  The following 
      code draws two identical lines at identical positions.  The first
      line is drawn in the default coordinate system, while the second is
      drawn after calling <tt class="literal">translate()</tt>:
</p>

<blockquote>
<pre class="programlisting">Graphics2D g;                    // Assume this is already initialized
g.drawLine(100, 100, 200, 200);  // Draw in the default coordinate system
g.translate(100.0, 100.0);       // Move the origin down and to the right
g.drawLine(0, 0, 100, 100);      // Draw the same line relative to new origin</pre>
</blockquote>



<p>The <tt class="literal">translate()</tt> method is not all that
      interesting, and, in fact, a version of it existed even before
      Java 2D.  The <tt class="literal">Graphics2D</tt> class also defines
      <tt class="literal">scale()</tt>, <tt class="literal">rotate()</tt>, and
      <tt class="literal">shear()</tt> methods that perform more powerful
      transformations of the coordinate system.</p>

<a name="INDEX-842"></a>
<a name="INDEX-843"></a>
<a name="INDEX-844"></a>

<p>By default, when drawing to the screen, one unit in user space corresponds to one
      pixel in device space.  The <tt class="literal">scale()</tt> method
      changes this.
      If you scale the coordinate system by a factor of 10, one
      unit of user space corresponds to 10 pixels in device space.  Note
      that you
      can scale by different amounts in the X and Y dimensions.
      The following code draws the same simple line from 
      100, 100 to 200, 200 (using the default origin):
</p>

<blockquote>
<pre class="programlisting">g.scale(2.0, 2.0);
g.drawLine(50, 50, 100, 100);</pre>
</blockquote>



<a name="INDEX-845"></a>

<p>You can combine transformations.  For example, suppose you are
      drawing into a 500-pixel-by-500-pixel window and you want to
      have the origin at the bottom left of the window, with Y
      coordinates increasing as they go up, rather than as they go
      down.  You can achieve this with two simple method calls:
</p>

<blockquote>
<pre class="programlisting">g.translate(0.0, 500.0);  // Move the origin to the lower left
g.scale(1.0, -1.0);       // Flip the sign of the coordinate system</pre>
</blockquote>



<a name="INDEX-846"></a>

<p>
<tt class="literal">rotate()</tt> is another powerful coordinate system
      transformation method.  You specify an angle in radians, and the 
      method rotates the coordinate system by that amount.  The direction of
      rotation is such that points on the positive X axis are rotated in
      the direction of the positive Y axis.  Although you typically do not want to leave your coordinate system in a permanently
      rotated state, the <tt class="literal">rotate()</tt> method is useful
      for drawing rotated text or other rotated graphics.  For example:
</p>

<blockquote>
<pre class="programlisting">g.rotate(Math.PI/4);                     // Rotate 45 degrees
g.drawString("Hello world", 300, 300)    // Draw text in this rotated position
g.rotate(-Math.PI/4);                    // Rotate back to normal</pre>
</blockquote>



<p>Note that these calls to <tt class="literal">rotate()</tt> rotate the
      coordinate system about the origin.  There is also a three-argument
      version of the method that rotates about a specified
      point, which can often be more useful.</p>

<a name="INDEX-847"></a>

<p>The final transformation method defined by
      <tt class="literal">Graphics2D</tt> is <tt class="literal">shear()</tt>.  The
      effects of this method are not as intuitive as the methods
      we've already discussed. After a call to <tt class="literal">shear()</tt>,
      any rectangles you draw appear skewed, as parallelograms.</p>

<a name="INDEX-848"></a>
<a name="INDEX-849"></a>

<p>Any calls you make to <tt class="literal">translate()</tt>,
      <tt class="literal">scale()</tt>, <tt class="literal">rotate()</tt>, and
      <tt class="literal">shear()</tt> have a cumulative effect on
      the mapping from
      user space to device space.  This mapping is encapsulated in a
      <tt class="literal">java.awt.geom.AffineTransform</tt> object and is
      one of the graphics attributes maintained by a
      <tt class="literal">Graphics2D</tt> object.  You can obtain a copy of
      the current transform with <tt class="literal">getTransform()</tt>, and
      you can set a transform directly with
      <tt class="literal">setTransform()</tt>.  <tt class="literal">setTransform()</tt> is not cumulative.  It simply
      replaces the current user-to-device-space mapping with a new
      mapping:
</p>

<blockquote>
<pre class="programlisting">AffineTransform t = g.getTransform(); // Save the current transform
g.rotate(theta);                      // Change the transform
g.drawRect(100, 100, 200, 200);       // Draw something
g.setTransform(t);                    // Restore the transform to its old state</pre>
</blockquote>



<a name="INDEX-850"></a>

<p>
<tt class="literal">AffineTransform</tt> is used in a number of places
      in the Java 2D API; we'll discuss it in more detail later in
      this chapter.  Once you understand the details and some of the
      math behind this class, you can define
      <tt class="literal">AffineTransform</tt> objects of your own and pass
      them to <tt class="literal">setTransform()</tt>.</p>

<p>Another
      use of <tt class="literal">AffineTransform</tt> objects is with the
      <tt class="literal">transform()</tt> method of
      <tt class="literal">Graphics2D</tt>.  This method modifies the current
      coordinate system, just as <tt class="literal">translate()</tt>, 
      <tt class="literal">scale()</tt>, <tt class="literal">rotate()</tt>, and 
      <tt class="literal">shear()</tt>
      do.  <tt class="literal">transform()</tt> is much more
      general, however.  The <tt class="literal">AffineTransform</tt> object 
      you pass to it can represent any arbitrary combination of translation,
      scaling, rotation, and shearing.</p>

<a name="INDEX-851"></a>
<a name="INDEX-852"></a>
<a name="INDEX-853"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.2. Java 2D Graphics Attributes and Operations</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.4. Shapes</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
