<html>
<head>
<title>JTextComponent and HTML Text Display (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="JTextComponent and HTML Text Display">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_20.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_20.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_01.htm">Chapter 3: Swing

Programming Topics</a></td><td align="right" valign="top" width="172"><a href="ch03_22.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_22.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">3.21. JTextComponent and HTML Text Display</h2>
<a name="INDEX-648"></a>
<a name="INDEX-649"></a>
<a name="INDEX-650"></a>
<a name="INDEX-651"></a>

<p>The most complex component in all of Swing is the
      <tt class="literal">JTextComponent</tt>, which is a powerful
      editor.  It is part of the <tt class="literal">javax.swing.text</tt>
      package and generally is not used directly.  Instead, you 
      typically use one of
      its subclasses, such as <tt class="literal">JTextField</tt>,
      <tt class="literal">JPasswordField</tt>, <tt class="literal">JTextArea</tt>,
      or <tt class="literal">JEditorPane</tt>.  The first three of these
      components are straightforward.  They are for the entry of a
      single line of text, secret text such as a password, and simple,
      unformatted, multiline text, respectively.</p>

<a name="INDEX-652"></a>
<a name="INDEX-653"></a>
<a name="INDEX-654"></a>
<a name="INDEX-655"></a>
<a name="INDEX-656"></a>
<a name="INDEX-657"></a>
<a name="INDEX-658"></a>

<p>It is the <tt class="literal">JEditorPane</tt> component that really
      makes use of the full power of 
      <tt class="literal">JTextComponent</tt>.  <tt class="literal">JEditorPane</tt>
      supports the display and editing of complex formatted text.  In
      conjunction with the classes in the 
      <tt class="literal">javax.swing.text.html</tt> and
      <tt class="literal">javax.swing.text.rtf</tt> packages, 
      <tt class="literal">JEditorPane</tt> can display and edit
      HTML and RTF documents.
      The ability to display formatted text so easily is a very powerful
      feature.  For example, the ability to display
      HTML documents makes it simple for a Swing application to add 
      online help based on an HTML version of the
      application's user manual.  Furthermore, formatted text is a 
      professional-looking way for an application to
      display its output to the user.  </p>

<a name="INDEX-659"></a>

<p>Because HTML has become so ubiquitous, we'll focus on the display
      of HTML documents with <tt class="literal">JEditorPane</tt>, 
      There are several different ways to get a
      <tt class="literal">JEditorPane</tt> to display an HTML document.  If
      the desired document is available on the network, the easiest way
      to display it is simply to pass an appropriate
      <tt class="literal">java.net.URL</tt> object to 
      the <tt class="literal">setPage()</tt>
      method of <tt class="literal">JEditorPane</tt>.
      <tt class="literal">setPage()</tt> determines the data type of the
      document and, assuming it is an HTML document, loads it and
      displays it as such.  For example:
</p>

<blockquote>
<pre class="programlisting">editor.setPage(new java.net.URL("http://www.my.com/product/help.htm"));</pre>
</blockquote>



<a name="INDEX-660"></a>
<a name="INDEX-661"></a>

<p>If the document you want to display is in a local file or is
      available from some kind of <tt class="literal">InputStream</tt>, you
      can display it by passing the appropriate stream to the
      <tt class="literal">read()</tt> method of 
      <tt class="literal">JEditorPane</tt>.  The second argument to this
      method should be <tt class="literal">null</tt>.  For example:
</p>

<blockquote>
<pre class="programlisting">InputStream in = new FileInputStream("help.htm");
editor.read(in, null);</pre>
</blockquote>



<a name="INDEX-662"></a>


<p>Yet another way to display text in a <tt class="literal">JEditorPane</tt> is
      to pass the text to the <tt class="literal">setText()</tt>
      method.  Before you do this, however, you must tell the editor
      what type of text to expect:
</p>

<blockquote>
<pre class="programlisting">editor.setContentType("text/html");
editor.setText("&lt;H1&gt;Hello World!&lt;/H1&gt;");</pre>
</blockquote>

<p>
      Calling <tt class="literal">setText()</tt> can be particularly useful
      when your application generates HTML text on the fly and wants to
      use a <tt class="literal">JEditorPane</tt> to display nicely formatted
      output to the user.  </p>

<p>
<a href="#jfcnut-ch-3-ex-text">Example 3-4</a> shows
      one such use of the <tt class="literal">JEditorPane</tt>.  This example
      is an alternative to <a href="ch03_20.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_20.htm">Example 3-3</a>: it
      displays the contents of a directory in tabular form but uses an
      HTML table instead of the <tt class="literal">JTable</tt>
      component.  As a bonus, this example uses HTML hyperlinks to allow
      the user to browse from one directory to the next.  (If you
      download and run the two examples, however, you'll probably notice
      that the <tt class="literal">JTable</tt> example is significantly
      faster, since it does not have to encode the directory contents
      into HTML and then parse that HTML into a table.)
      <a href="#jfcnut-ch-3-fig-text">Figure 3-9</a> shows sample output from
      this example.</p>
<a name="jfcnut-ch-3-fig-text"></a>
<div class="figure">
<img alt="figure" src="figs/jfcn.0309.gif" webstripperlinkwas="figs/jfcn.0309.gif"></div>
<h4 class="objtitle">Figure 3-9. The JEditorPane component displaying an HTML table</h4>
<a name="jfcnut-ch-3-ex-text"></a>
<div class="example">
<h4 class="objtitle">Example 3-4. Dynamically Generated HTML in JEditorPane</h4>
<blockquote>
<pre class="programlisting">import javax.swing.*;
import javax.swing.event.*;
import java.io.*;
import java.util.Date;

/**
 * This class implements a simple directory browser using the HTML
 * display capabilities of the JEditorPane component
 **/
public class FileTableHTML {
  public static void main(String[] args) throws IOException {
    // Get the name of the directory to display
    String dirname = (args.length&gt;0)?args[0]:System.getProperty("user.home");

    // Create something to display it in
    final JEditorPane editor = new JEditorPane();
    editor.setEditable(false);               // we're browsing not editing
    editor.setContentType("text/html");      // must specify HTML text
    editor.setText(makeHTMLTable(dirname));  // specify the text to display
  
    // Set up the JEditorPane to handle clicks on hyperlinks
    editor.addHyperlinkListener(new HyperlinkListener() {
      public void hyperlinkUpdate(HyperlinkEvent e) {
	// Handle clicks; ignore mouseovers and other link-related events
	if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
	  // Get the HREF of the link and display it.
	  editor.setText(makeHTMLTable(e.getDescription()));
	}
      }
    });

    // Put the JEditorPane in a scrolling window and display it
    JFrame frame = new JFrame("FileTableHTML");
    frame.getContentPane().add(new JScrollPane(editor));
    frame.setSize(650, 500);
    frame.setVisible(true);
  }

  // This method returns an HTML table representing the specified directory
  public static String makeHTMLTable(String dirname) {
    // Look up the contents of the directory
    File dir = new File(dirname);
    String[] entries = dir.list();

    // Set up an output stream we can print the table to.
    // This is easier than concatenating strings all the time.
    StringWriter sout = new StringWriter();
    PrintWriter out = new PrintWriter(sout);
    
    // Print the directory name as the page title
    out.println("&lt;H1&gt;" + dirname + "&lt;/H1&gt;");

    // Print an "up" link, unless we're already at the root
    String parent = dir.getParent();
    if ((parent != null) &amp;&amp; (parent.length() &gt; 0)) 
      out.println("&lt;A HREF=\"" + parent + "\"&gt;Up to parent directory&lt;/A&gt;&lt;P&gt;");

    // Print out the table
    out.print("&lt;TABLE BORDER=2 WIDTH=600&gt;&lt;TR&gt;");
    out.print("&lt;TH&gt;Name&lt;/TH&gt;&lt;TH&gt;Size&lt;/TH&gt;&lt;TH&gt;Modified&lt;/TH&gt;");
    out.println("&lt;TH&gt;Readable?&lt;/TH&gt;&lt;TH&gt;Writable?&lt;/TH&gt;&lt;/TR&gt;");
    for(int i=0; i &lt; entries.length; i++) {
      File f = new File(dir, entries[i]);
      out.println("&lt;TR&gt;&lt;TD&gt;" + 
		  (f.isDirectory() ?
		     "&lt;a href=\""+f+"\"&gt;" + entries[i] + "&lt;/a&gt;" : 
		     entries[i]) +
		  "&lt;/TD&gt;&lt;TD&gt;" + f.length() +
		  "&lt;/TD&gt;&lt;TD&gt;" + new Date(f.lastModified()) + 
		  "&lt;/TD&gt;&lt;TD align=center&gt;" + (f.canRead()?"x":" ") +
		  "&lt;/TD&gt;&lt;TD align=center&gt;" + (f.canWrite()?"x":" ") +
		  "&lt;/TD&gt;&lt;/TR&gt;");
    }
    out.println("&lt;/TABLE&gt;");
    out.close();

    // Get the string of HTML from the StringWriter and return it.
    return sout.toString();
  }
}</pre>
</blockquote>
</div>
<a name="INDEX-663"></a>
<a name="INDEX-664"></a>
<a name="INDEX-665"></a>
<a name="INDEX-666"></a>
<a name="INDEX-667"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_20.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_20.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_22.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_22.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.20. JTable and TableModel</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.22. Pluggable Look-and-Feel</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
