<html>
<head>
<title>Data Transfer (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Data Transfer">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch05_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part1.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/part1.htm">Part 1: Introducing the Java Foundation Classes</a></td><td align="right" valign="top" width="172"><a href="ch06_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch06_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h1 class="chapter">Chapter 6.  Data Transfer</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch06_01.htm">The Data Transfer Framework</a>
<br>
<a href="ch06_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch06_02.htm">Cut-and-Paste</a>
<br>
<a href="ch06_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch06_03.htm">Drag-and-Drop</a>
<br>
<a href="ch06_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch06_04.htm">A Data Source</a>
<br>
<a href="ch06_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch06_05.htm">A Data Sink</a>
<br>
</p>
</div>


<p>Data transfer 
    refers to the ability of an application to transfer selected data
    in a variety of ways.  For example, an application can use data 
    transfer to support moving data between its own subparts.  An
    application can also use data transfer to exchange data with 
    other Java applications that are running in
    the same Java VM or in another Java VM or with native applications
    that are not running in a VM at all.  There are two commonly 
    used metaphors for data transfer: cut-and-paste and drag-and-drop.  
    Java 1.1 included a
    basic data transfer architecture and supported cut-and-paste.  The Java
    2 platform extends the architecture in minor ways and adds support for
    drag-and-drop.</p>

<a name="INDEX-1089"></a>
<a name="INDEX-1090"></a>


<h2 class="sect1">6.1. The Data Transfer Framework</h2>

<p>Both the cut-and-paste and drag-and-drop 
      metaphors rely on the same underlying data transfer architecture.
      This architecture was defined in Java 1.1 in the
      <tt class="literal">java.awt.datatransfer</tt> package.  It consists of
      the <tt class="literal">DataFlavor</tt> class, which describes data types
      and data formats, and the <tt class="literal">Transferable</tt>
      interface, which defines methods that must be implemented if data
      is to be transferred.  </p>

<h3 class="sect2">6.1.1. The DataFlavor Class</h3>
<a name="INDEX-1091"></a>

<p>A data transfer mechanism requires a precise and portable
	way to specify the type of data to be transferred.  This
	is necessary so that both parties to the transfer--the data
	source and the data sink--can agree on exactly what is being
	transferred.  Since the data source and the data sink may be
	entirely different applications, the mechanism for describing a
	data type must be general and flexible.</p>

<a name="INDEX-1092"></a>
<a name="INDEX-1093"></a>

<p>In Java, the type of data being transferred is described by a
	<tt class="literal">java.awt.datatransfer.DataFlavor</tt> object.  The
	<tt class="literal">DataFlavor</tt> class describes data types 
	using MIME types.  MIME defines standard types like 
	"text/html" and "image/jpeg".  
	Because Java programs often transfer data 
	within the same Java VM or between VMs, 
	the <tt class="literal">DataFlavor</tt> class also
	supports describing data types with Java class
	names.  For example, to transfer a <tt class="literal">java.awt.Point</tt> 
	object from one Java VM to another, the data transfer mechanism 
	can simply serialize the <tt class="literal">Point</tt> object and send the
	resulting stream of bytes to the other Java VM, where the
	<tt class="literal">Point</tt> object can be deserialized.  When doing
	data transfer between Java VMs in this way, the transfer of
	objects becomes totally transparent.</p>

<a name="INDEX-1094"></a>
<a name="INDEX-1095"></a>
<a name="INDEX-1096"></a>

<p>The <tt class="literal">DataFlavor</tt> class defines constants for
	several
	commonly used data flavors, including
	<tt class="literal">DataFlavor.stringFlavor</tt>,
	<tt class="literal">DataFlavor.plainTextFlavor</tt>, and (in Java 1.2)
	<tt class="literal">DataFlavor.javaFileListFlavor</tt>.  To transfer
	another types of data, you must create a custom
	<tt class="literal">DataFlavor</tt> by specifying
	the MIME type or Java class of the data and a human-readable name
	for the data type.  For example:</p>

<blockquote>
<pre class="programlisting">DataFlavor jpegFlavor = new DataFlavor("image/jpeg", "JPEG Image Data");
DataFlavor pointFlavor = new DataFlavor(java.awt.Point.class, 
                                        "Java Point Object");</pre>
</blockquote>

<a name="INDEX-1097"></a>


<h3 class="sect2">6.1.2. The Transferable Interface</h3>
<a name="INDEX-1098"></a>

<p>
<tt class="literal">DataFlavor</tt> objects describe data types,
	but they contain no data themselves.  Data to be
	transferred using cut-and-paste or drag-and-drop must be
	encapsulated in an object that implements the
	<tt class="literal">Transferable</tt> interface.  </p>

<a name="INDEX-1099"></a>

<p>Data transfer occurs in a heterogeneous environment.  When you
	design the data transfer capabilities of your application, you
	cannot know the other applications with which the user may eventually
	want to exchange data.  Thus, for maximum flexibility, an
	application that exports data--a data source--typically
	offers its data in multiple formats.  An application that
	exports text might offer to transfer that data in the form of a
	Java <tt class="literal">String</tt> object or as a stream of Unicode
	characters, for example.  If the receiving application is a Java
	program, it may choose to request the data as a Java 
	<tt class="literal">String</tt>, while a non-Java application 
	would choose the stream of characters instead.</p>

<a name="INDEX-1100"></a>
<a name="INDEX-1101"></a>
<a name="INDEX-1102"></a>
<a name="INDEX-1103"></a>

<p>The <tt class="literal">Transferable</tt> interface defines three
	methods.  <tt class="literal">getTransferDataFlavors()</tt>,
	returns an array of <tt class="literal">DataFlavor</tt> objects that
	represent the data formats in which the data may be
	transferred, while
	<tt class="literal">isDataFlavorSupported()</tt> asks whether a
	particular data flavor is supported.  The third method,
	<tt class="literal">getTransferData()</tt>, performs the actual
	transfer.  This method takes an argument that specifies 
	the desired data
	flavor and returns an <tt class="literal">Object</tt> that
	represents the data in the specified format.  If the
	specified data flavor is not supported,
	<tt class="literal">getTransferData()</tt> throws an
	<tt class="literal">UnsupportedFlavorException</tt>. </p>

<a name="INDEX-1104"></a>
<a name="INDEX-1105"></a>

<p>The return value for <tt class="literal">getTransferData()</tt> needs
	a little more explanation.  The type of this object depends on
	the <tt class="literal">DataFlavor</tt> that was requested.  For any
	<tt class="literal">DataFlavor</tt>, the
	<tt class="literal">getRepresentationClass()</tt> method returns a Java
	<tt class="literal">Class</tt> object that represents the type of
	object that will be returned by 
	<tt class="literal">getTransferData()</tt>.  When a 
	<tt class="literal">DataFlavor</tt> represents data that is transferred
	as a serialized Java object, the return value of 
	<tt class="literal">getTransferData()</tt> is simply a Java object of
	whatever type was transferred (e.g., a <tt class="literal">String</tt> or
	<tt class="literal">java.awt.Point</tt> object).  When a 
	<tt class="literal">DataFlavor</tt> represents a MIME type, the
	data is actually transferred between applications as a 
	stream of bytes.  In this case, <tt class="literal">getTransferData()</tt> 
	returns a <tt class="literal">java.io.InputStream</tt> object from which 
	you can read and parse these bytes.</p>

<a name="INDEX-1106"></a>
<a name="INDEX-1107"></a>

<p>Because text is the most frequently transferred data type, the
	<tt class="literal">java.awt.datatransfer</tt> package defines a
	<tt class="literal">StringSelection</tt> class that implements the
	<tt class="literal">Transferable</tt> interface for strings.  This
	<tt class="literal">Transferable</tt> class supports two data flavors,
	the pre-defined <tt class="literal">DataFlavor.stringFlavor</tt> and
	<tt class="literal">DataFlavor.plainTextFlavor</tt> constants.  Unfortunately,
	however, there is a problem with
	<tt class="literal">StringSelection</tt>.  When the string is
	requested in plain text format, the
	<tt class="literal">getTransferData()</tt> method returns a
	<tt class="literal">java.io.Reader</tt> object instead of a
	<tt class="literal">java.io.InputStream</tt>.  Because
	<tt class="literal">StringSelection</tt> is widely used, applications
	receiving <tt class="literal">DataFlavor.plainTextFlavor</tt> data
	may want to use <tt class="literal">instanceof</tt> to determine
	whether the return value is an <tt class="literal">InputStream</tt> (a
	byte stream) or a <tt class="literal">Reader</tt> (a Unicode character
	stream).  Despite the problems with
	<tt class="literal">StringSelection</tt>, there is a long-standing bug
	in Sun's Java 1.1 and Java 1.2 implementations for Windows
	platforms that makes it indispensable.  On those platforms,
	<tt class="literal">StringSelection</tt> is the only
	<tt class="literal">Transferable</tt> class that can successfully
	transfer text between a Java application and a native
	application.</p>

<a name="INDEX-1108"></a>
<a name="INDEX-1109"></a>
<a name="INDEX-1110"></a>

<p>Applications that display strings in
	<tt class="literal">JTextField</tt>, <tt class="literal">JTextArea</tt>, and
	related components already support textual data transfer, as
	these components have cut-and-paste support built in.
	In other words, you typically don't have to implement textual
	data transfer yourself.  When you do need to implement 
	data transfer, it is probably because you are
	transferring some specialized type of data. <a href="#jfcnut-ch-6-ex-1">Example 6-1</a> shows how we can implement the
	<tt class="literal">Transferable</tt> interface to transfer
	<tt class="literal">java.awt.Color</tt> objects between Java
	applications.</p>
<a name="jfcnut-ch-6-ex-1"></a>
<div class="example">
<h4 class="objtitle">Example 6-1. TransferableColor.java</h4>

<blockquote>
<pre class="programlisting">import java.awt.Color;
import java.awt.datatransfer.*;
import java.io.*;

/**
 * This class is used to transfer a Color object via cut-and-paste or
 * drag-and-drop.  It allows a color to be transferred as a Color object
 * or as a string. Due to a long-standing bug in Java 1.1 and Java 1.2, 
 * transferring a color as a string to native Windows applications will
 * not work.
 */
public class TransferableColor implements Transferable {
  // This DataFlavor object is used when we transfer Color objects directly
  protected static DataFlavor colorFlavor =
    new DataFlavor(Color.class, "Java Color Object");

  // These are the data flavors we support
  protected static DataFlavor[] supportedFlavors = {
    colorFlavor,                  // Transfer as a Color object
    DataFlavor.stringFlavor,      // Transfer as a String object
    DataFlavor.plainTextFlavor,   // Transfer as a stream of Unicode text
  };

  Color color;                    // The color we encapsulate and transfer

  /** Create a new TransferableColor that encapsulates the specified color */
  public TransferableColor(Color color) { this.color = color; }

  /** Return a list of DataFlavors we can support */
  public DataFlavor[] getTransferDataFlavors() { return supportedFlavors; }

  /** Check whether a specified DataFlavor is available */
  public boolean isDataFlavorSupported(DataFlavor flavor) {
    if (flavor.equals(colorFlavor) || 
        flavor.equals(DataFlavor.stringFlavor) ||
        flavor.equals(DataFlavor.plainTextFlavor)) return true;
    return false;
  }

  /** 
   * Transfer the data.  Given a specified DataFlavor, return an Object
   * appropriate for that flavor.  Throw UnsupportedFlavorException if we
   * don't support the requested flavor.
   */
  public Object getTransferData(DataFlavor flavor) 
       throws UnsupportedFlavorException, IOException
  {
    if (flavor.equals(colorFlavor)) return color;
    else if (flavor.equals(DataFlavor.stringFlavor)) return color.toString();
    else if (flavor.equals(DataFlavor.plainTextFlavor))
      return new ByteArrayInputStream(color.toString().getBytes("Unicode"));
    else throw new UnsupportedFlavorException(flavor);
  }
}</pre>
</blockquote>
</div>
<a name="INDEX-1111"></a>
<a name="INDEX-1112"></a>
<a name="INDEX-1113"></a>







<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch05_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch06_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch06_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.2. Printing in Java 1.2</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">6.2. Cut-and-Paste</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
