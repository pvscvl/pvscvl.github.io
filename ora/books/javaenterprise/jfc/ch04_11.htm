<html>
<head>
<title>Transformations with AffineTransform (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Transformations with AffineTransform">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_10.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_10.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_01.htm">Chapter 4: Graphics with AWT

and Java 2D</a></td><td align="right" valign="top" width="172"><a href="ch04_12.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_12.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">4.11. Transformations with AffineTransform</h2>
<a name="INDEX-1017"></a>

<p>As we discussed earlier when we considered the Java 2D 
      coordinate system, the
      <tt class="literal">java.awt.geom.AffineTransform</tt> class represents
      a general mapping from one coordinate system to another.  
      <tt class="literal">AffineTransform</tt>
      defines a general 

coordinate-system transformation that can
      include translation, scaling, rotation, and shearing.  </p>


<a name="INDEX-1018"></a>

<h3 class="sect2">4.11.1. Setting Up an AffineTransform</h3>

<p>One of the easiest ways to obtain an
	<tt class="literal">AffineTransform</tt> object is to use one of the static
	methods defined by <tt class="literal">AffineTransform</tt>.  For example,
	<tt class="literal">getScaleInstance()</tt> returns an
	instance of <tt class="literal">AffineTransform</tt> that represents a
	simple scaling transformation.</p>

<a name="INDEX-1019"></a>

<p>Another way to get an <tt class="literal">AffineTransform</tt> is with
	the <tt class="literal">AffineTransform()</tt> constructor, of course.
	The no-argument version of the constructor returns an
	<tt class="literal">AffineTransform</tt> 
	that represents the identity transform--that
	is, no transform at all.  You can modify this empty transform
	with a number of methods.  Note that
	<tt class="literal">AffineTransform</tt> defines several other
	constructors, but we have to wait to discuss them until after
	we've discussed the mathematics that underlie
	<tt class="literal">AffineTransform</tt>.  </p>

<a name="INDEX-1020"></a>
<a name="INDEX-1021"></a>
<a name="INDEX-1022"></a>
<a name="INDEX-1023"></a>

<p>Once you have obtained an <tt class="literal">AffineTransform</tt>
	object, you can modify it with methods just like the methods
	defined by <tt class="literal">Graphics2D</tt>.  Each of the
	<tt class="literal">translate()</tt>, <tt class="literal">scale()</tt>,
	<tt class="literal">rotate()</tt>, and <tt class="literal">shear()</tt>
	methods modifies an <tt class="literal">AffineTransform</tt> by adding the
	specified transformation to it.  Note that there are two
	versions of <tt class="literal">rotate()</tt>.  One rotates around the
	origin and the other rotates around a specified point; both use
	angles specified in radians.  Remember that calls to these
	four methods are cumulative: you can build up a complex
	transformation as a combination of translation, scaling,
	rotation, and shearing.</p>

<a name="INDEX-1024"></a>
<a name="INDEX-1025"></a>
<a name="INDEX-1026"></a>

<p>
<tt class="literal">AffineTransform</tt> also defines noncumulative
	methods.  <tt class="literal">setToTranslation()</tt>,
	<tt class="literal">setToScale()</tt>,
	<tt class="literal">setToRotation()</tt>, and
	<tt class="literal">setToShear()</tt> set an
	<tt class="literal">AffineTransform</tt> to a single transform,
	replacing whatever transform was previously contained by the
	<tt class="literal">AffineTransform</tt>. </p>

<a name="INDEX-1027"></a>


<h3 class="sect2">4.11.2. Performing Transformations</h3>

<p>Once you have created and initialized an
	<tt class="literal">AffineTransform</tt> object, you can use

 it to
	transform points and shapes.  <tt class="literal">AffineTransform</tt>
	defines a number 

of <tt class="literal">transform()</tt> methods that
	transform points represented by either
	<tt class="literal">java.awt.

geom.Point2D</tt> objects or arrays
	of numbers.  <tt class="literal">deltaTransform()</tt> is a variant of
	<tt class="literal">transform()</tt> that performs a transformation
	disregarding any translation component.  It is designed for 
	transforming distances or position-independent vectors, instead
	of actual points.  <tt class="literal">inverseTransform()</tt> is the
	inverse of 
<tt class="literal">transform()</tt>--it converts points
	expressed in the new coordinate system back to the corresponding
	points in the original coordinate system.</p>


<a name="INDEX-1028"></a>
<a name="INDEX-1029"></a>
<a name="INDEX-1030"></a>
<a name="INDEX-1031"></a>

<p>The <tt class="literal">transform()</tt>,
	<tt class="literal">deltaTransform()</tt>, and
	<tt class="literal">inverseTransform()</tt> methods are fairly
	low-level and typically are not used directly by Java 2D
	programs.  Instead, a program typically uses the 
	<tt class="literal">createTransformedShape()</tt> method, which provides
	a powerful, high-level transformation capability.  Given an
	arbitrary <tt class="literal">Shape</tt> object, this method returns a
	new <tt class="literal">Shape</tt> that has been transformed as
	specified by the <tt class="literal">AffineTransform</tt> object.</p>

<h3 class="sect2">4.11.3. The Mathematics of AffineTransform</h3>
<a name="INDEX-1032"></a>

<p>The coordinate system transformations described by
	<tt class="literal">AffineTransform</tt> have two very important
	properties:</p>

	<ul>
<li>

<p>Straight lines remain straight</p>
</li>
<li>

<p>Parallel lines remain parallel</p>
</li>
</ul>

<p>An <tt class="literal">AffineTransform</tt> is a linear transform, so
	the transformation can be expressed in the matrix notation of
	linear algebra.  An arbitrary <tt class="literal">AffineTransform</tt>
	can be mathematically expressed by six numbers arranged in a
	matrix like this:
<img alt="figure" src="figs/jfcn-0401-eqn.epsi.gif" webstripperlinkwas="figs/jfcn-0401-eqn.epsi.gif">

	In this matrix, <tt class="literal">tx</tt> and <tt class="literal">ty</tt>
	are the translation amounts, 
	<tt class="literal">sx</tt> and <tt class="literal">sy</tt> are the scaling
	factors, and <tt class="literal">shx</tt>
	and <tt class="literal">shy</tt> are the shearing factors, all in the
	X and Y dimensions, respectively.  
	As we'll see in a moment, rotation is a combination of
	scaling and 

shearing, so there are not separate
	<tt class="literal">rx</tt> and <tt class="literal">ry</tt> numbers.</p>

<p>To transform a point from one coordinate system to another using
	an <tt class="literal">AffineTransform</tt>, we multiply the point by
	this matrix.  Using matrix notation (and adding a few dummy
	matrix elements), the equation looks like this:
<img alt="figure" src="figs/jfcn-0402-eqn.epsi.gif" webstripperlinkwas="figs/jfcn-0402-eqn.epsi.gif">

	This matrix equation is simply shorthand for the following
	system of equations:
</p>

<blockquote>
<pre class="programlisting">x' = sx*x + shx*y + tx
y' = shy*x + sy*y + ty</pre>
</blockquote>



<p>The identity transform does not perform any
	transformation at all.  It looks like this:
	
<img alt="figure" src="figs/jfcn-0403-eqn.epsi.gif" webstripperlinkwas="figs/jfcn-0403-eqn.epsi.gif"></p>

<p>Mathematically, rotation is a
	combination of scaling and shearing.  The rotation of an angle
	<tt class="literal">theta</tt> around the origin is expressed with a
	matrix like this:
<img alt="figure" src="figs/jfcn-0404-eqn.epsi.gif" webstripperlinkwas="figs/jfcn-0404-eqn.epsi.gif">

	You don't need to understand how this rotation matrix works.  If
	you remember basic trigonometry, however, you can use it
	and the preceding equations to verify that this matrix works for the
	base cases of 90-degree and 180-degree rotations.</p>

<p>As we've seen, it is possible to make cumulative changes to an
	<tt class="literal">AffineTransform</tt>.  This is done by multiplying
	the current transformation matrix by the new transformation
	matrix.  For example, suppose we perform a translation by
	100 units in both the X and Y dimensions and follow this by
	scaling both the X and Y dimensions by a factor of 2.  The
	resulting <tt class="literal">AffineTransform</tt> matrix is the
	product of the two individual matrices:
<img alt="figure" src="figs/jfcn-0405-eqn.epsi.gif" webstripperlinkwas="figs/jfcn-0405-eqn.epsi.gif">

	Note that matrix multiplication is not commutative.  If we 
	perform the scaling operation first and then do the
	translation, we obtain a different result:
<img alt="figure" src="figs/jfcn-0406-eqn.epsi.gif" webstripperlinkwas="figs/jfcn-0406-eqn.epsi.gif"></p>

<p>Most applications do not have to work with matrices explicitly
	in order to perform coordinate-system transformations.  As we've
	seen, it typically is easier to use the
	<tt class="literal">translate()</tt>, <tt class="literal">scale()</tt>,
	<tt class="literal">rotate()</tt>, and <tt class="literal">shear()</tt>
	methods of either <tt class="literal">AffineTransform</tt> or 
	<tt class="literal">Graphics2D</tt>.  It is useful to understand the
	mathematics underlying <tt class="literal">AffineTransform</tt>,
	however.  </p>

<p>You may, on occasion, have the need to create a
	custom <tt class="literal">AffineTransform</tt> object from a set of
	six numbers.  A number of <tt class="literal">AffineTransform</tt>
	constructors and methods take matrix elements as arguments.
	These matrix elements are either passed in explicitly or 
	specified in an array.  Note that the matrix-element naming
	system used by the <tt class="literal">AffineTransform</tt> class is
	different than the system I've used here.  The parameter names
	for <tt class="literal">AffineTransform</tt> methods are based on the
	following matrix:
<img alt="figure" src="figs/jfcn-0407-eqn.epsi.gif" webstripperlinkwas="figs/jfcn-0407-eqn.epsi.gif">

	This is nothing more that a different naming scheme for the
	elements we are already familiar with:
<img alt="figure" src="figs/jfcn-0408-eqn.epsi.gif" webstripperlinkwas="figs/jfcn-0408-eqn.epsi.gif">

	When matrix elements are passed to or returned by an
	<tt class="literal">AffineTransform</tt> in an array of
	<tt class="literal">float</tt> or <tt class="literal">double</tt> values,
	they are stored in this order:
	
<img alt="figure" src="figs/jfcn-0409-eqn.epsi.gif" webstripperlinkwas="figs/jfcn-0409-eqn.epsi.gif">

	This corresponds to the following order using our mnemonic names:
	
<img alt="figure" src="figs/jfcn-0410-eqn.epsi.gif" webstripperlinkwas="figs/jfcn-0410-eqn.epsi.gif"></p>

<a name="INDEX-1033"></a>
<a name="INDEX-1034"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_10.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_10.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_12.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_12.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.10. Buffered Images</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.12. Color Spaces</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
