<html>
<head>
<title>Fonts and Text (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Fonts and Text">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_08.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_01.htm">Chapter 4: Graphics with AWT

and Java 2D</a></td><td align="right" valign="top" width="172"><a href="ch04_10.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_10.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">4.9. Fonts and Text</h2>

<p>As we've seen, fonts are represented in AWT by the
      <tt class="literal">java.awt.Font</tt> class.  While you can continue to use
      fonts in Java 1.2 exactly as you did in Java 1.1, Java 2D
      has added a number of powerful new features related to fonts and
      text rendering that you may want to take advantage of. </p>

<h3 class="sect2">4.9.1. Available Fonts</h3>
<a name="INDEX-929"></a>
<a name="INDEX-930"></a>
<a name="INDEX-931"></a>

<p>Java 1.0 and Java 1.1 support only a small set of fonts,
	specified by logical font names.  Although these logical fonts
	are guaranteed to be available on every platform, they are not
	guaranteed to look the same on every platform.  In addition, 
	the lack of
	variety severely limits the design choices available to
	developers.  The fonts and their logical names were listed
	earlier in <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_01.htm">Table 4-3</a>. </p>

<a name="INDEX-932"></a>

<p>Java 1.2 allows an application to use any font installed on the
	native system and refer to that font by its physical
	font name, instead of a logical font name.  A physical font
	name is the actual name of a font, such as "Century Gothic" or
	"Lucida Sans Bold."  To request a specific font, simply pass its
	physical name to the <tt class="literal">Font()</tt> constructor.
	The <tt class="literal">Font()</tt> constructor always returns a valid
	<tt class="literal">Font</tt> object, even if the font you have
	requested does not exist.  If you need to check whether you got
	the font you requested, call the
	<tt class="literal">getFontName()</tt> method of the returned font.</p>

<p>If you want to be sure that a font exists on the host system
	before attempting to use it, you should first query the system
	to find out what fonts are installed.  You can do this with methods
	of the <tt class="literal">java.awt.GraphicsEnvironment</tt> object.
	The code looks like this:
<a name="INDEX-933"></a>
</p>

<blockquote>
<pre class="programlisting">GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
Font[] allfonts = env.getAllFonts();</pre>
</blockquote>

<p>
<a name="INDEX-934"></a>
	The <tt class="literal">getAllFonts()</tt> method returns an array of
	<tt class="literal">Font</tt> objects that represents all of the fonts
	installed on the system.  Each <tt class="literal">Font</tt>
	object in this array represents a font that is one point high,
	so you have to scale the font (using <tt class="literal">deriveFont()</tt>
	as explained shortly) before using it.  Also, in the initial
	release of Java 1.2 at least, the <tt class="literal">getAllFonts()</tt>
	method can take prohibitively long to return 
	(65 seconds on my Windows 95
	system).  </p>

<a name="INDEX-935"></a>

<p>Another <tt class="literal">GraphicsEnvironment</tt> method,
	<tt class="literal">getAvailableFontFamilyNames()</tt>, returns an
	array of font family names instead of an array of
	<tt class="literal">Font</tt> objects:
</p>

<blockquote>
<pre class="programlisting">GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
String[] familynames = env.getAvailableFontFamilyNames();</pre>
</blockquote>

<p>
        This method returns relatively
	quickly and is therefore safer to call than
	<tt class="literal">getAllFonts()</tt>.  
	Note that this method returns font family names (e.g., "Lucida
	Sans"), not actual font face names (e.g., "Lucida Sans
	Oblique"). The good news is that 
	you can get away with specifying a font
	family name instead of a font face name when you call the
	<tt class="literal">Font()</tt> 
	constructor.<a href="#FOOTNOTE-2">[2]</a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-2"></a>
<p>[2]A bug in Java 1.2, 1.2d, and 1.2.2 prevents the <tt class="literal">Font()</tt> constructor 
	from working with any nonlogical font name
	unless you have previously queried
	the list of available fonts or font family names.</p>
</blockquote>

<h3 class="sect2">4.9.2. Font Attributes</h3>
<a name="INDEX-936"></a>


<p>In Java 1.2, the <tt class="literal">Font</tt> class has a new
	constructor that is passed a
	<tt class="literal">java.util.Map</tt> object that contains a set of
	font attributes.  These attributes specify the desired
	characteristics of the font; the <tt class="literal">Font()</tt>
	constructor tries to return a <tt class="literal">Font</tt>
	that matches the attributes.  Typically, you use a
	<tt class="literal">java.util.Hashtable</tt> or
	<tt class="literal">java.util.Hashmap</tt> to hold your attribute
	values.  The attribute names or keys are constants defined in
	<tt class="literal">java.awt.font.TextAttribute</tt>.  The important
	constants are <tt class="literal">FAMILY</tt>,
	<tt class="literal">SIZE</tt>, <tt class="literal">WEIGHT</tt>, and
	<tt class="literal">POSTURE</tt>.  The
	<tt class="literal">TextAttribute</tt> class also defines
	commonly used values for the <tt class="literal">WEIGHT</tt> and
	<tt class="literal">POSTURE</tt> attributes.</p>

<h3 class="sect2">4.9.3. Transforming Fonts</h3>
<a name="INDEX-937"></a>
<a name="INDEX-938"></a>

<p>The <tt class="literal">Font</tt> class defines several
	<tt class="literal">deriveFont()</tt> methods that allow you to use
	a <tt class="literal">Font</tt> object to create 
	related <tt class="literal">Font</tt> 
	objects.  <tt class="literal">deriveFont()</tt> is typically
	used to return a new
	<tt class="literal">Font</tt> object that represents an existing
	font at a different size or in a different style.  For example:
</p>

<blockquote>
<pre class="programlisting">GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
String[] familynames = env.getAvailableFontFamilyNames();
Font regularFont = new Font("Century Schoolbook", Font.PLAIN, 12);
Font bigFont = regularFont.deriveFont(18.0f);
Font boldFont = regularFont.deriveFont(Font.BOLD);
Font bigBoldFont = regularFont.deriveFont(Font.BOLD, 24.0f);</pre>
</blockquote>

<p>
	When you are passing a point size to
	<tt class="literal">deriveFont()</tt>, be sure to explicitly specify a
	<tt class="literal">float</tt> value, such as the
	<tt class="literal">18.0f</tt> constant in the preceding code, so that you
	do not inadvertently call the version of
	<tt class="literal">deriveFont()</tt> that takes an integer-style constant.</p>

<p>You can also derive a transformed version of a
	<tt class="literal">Font</tt> object by passing in an arbitrary
	<tt class="literal">java.awt.geom.AffineTransform</tt> object.  This
	technique allows you to arbitrarily rotate or skew any font,
	as we'll discuss later in the chapter.</p>

<a name="INDEX-939"></a>


<h3 class="sect2">4.9.4. Text-Rendering Hints</h3>
<a name="INDEX-940"></a>
<a name="INDEX-941"></a>
<a name="INDEX-942"></a>

<p>The <tt class="literal">java.awt.RenderingHints</tt> class defines two
	hints that apply particularly to text drawing.  The first
	controls antialiasing.  Antialiasing is a technique used to
	make the jagged edges of shapes, such as the glyphs of a font,
	look smoother.  It is implemented using translucent colors and
	compositing: when the edge of a shape only partially covers a
	pixel, the color used to draw that pixel is given an alpha-
	transparency value that corresponds to the amount of coverage.
	If a fully covered pixel is drawn with an opaque color, a
	pixel that is only one-quarter covered is drawn with an
	alpha value of .25. As you can imagine, antialiasing can be
	computationally intensive.  However, the smoothing effect it
	achieves is significant and is particularly useful when drawing
	small amounts of text at large point sizes.</p>

<a name="INDEX-943"></a>

<p>The first text-related rendering hint simply requests
	antialiasing for text.  If you want text to be antialiased,
	set the <tt class="literal">KEY_TEXT_ANTIALIASING</tt> hint to
	<tt class="literal">VALUE_

TEXT_ANTIALIAS_ON</tt>.  There is
	also a more general hint, <tt class="literal">KEY_ANTIALIASING</tt>.
	Java 2D defines a separate hint for text so that you can choose
	independently whether to request antialiasing for text and other
	graphics.</p>

<p>The second text-related rendering hint controls the low-level
	positioning of characters of text.  When Java 2D renders the
	shape of an individual font glyph, it caches the rendered pixels
	for reuse.  This technique dramatically speeds up text display.
	However, the cached rendering is useful only if the glyph is
	always drawn at an integral pixel position.  By default,
	therefore, most implementations of Java 2D adjust character
	spacing so that the origin of each character falls evenly on an
	integer-pixel coordinate.  If you want to be able to position
	text at arbitrary floating-point positions, without forcing each
	character to the nearest device pixel, set the
	<tt class="literal">KEY_FRACTIONALMETRICS</tt> hint to
	<tt class="literal">VALUE_FRACTIONALMETRICS_ON</tt>.  Note, however,
	that the visual effect of setting this hint is rarely worth the
	computational overhead it requires.</p>

<a name="INDEX-944"></a>


<h3 class="sect2">4.9.5. Measuring Text and Fonts</h3>
<a name="INDEX-945"></a>

<p>Sometimes you need to obtain measurement
	information about a font or measure text
	before you can draw text.  For example,
	to horizontally center a string of text, you must be able to
	figure out how wide it is.  To correctly draw multiple lines of
	text, you need to be able to query the baseline position and
	the interline spacing for the font.  In Java 1.0 and Java 1.1,
	you obtained this information with the
	<tt class="literal">FontMetrics</tt> class (as described near the
	beginning of the chapter). </p>

<p>Java 2D provides another way to measure the width of a string of
	text.  The <tt class="literal">Font</tt> class defines several
	<tt class="literal">getStringBounds()</tt> methods that return the
	width and height of a specified string as a
	<tt class="literal">Rectangle2D</tt> object.  These methods allow
	widths to be returned as floating-point numbers instead of 
	integers and are therefore more accurate than the
	<tt class="literal">stringWidth()</tt> method of
	<tt class="literal">FontMetrics</tt>.  Each variant of
	<tt class="literal">getStringBounds()</tt> allows you to
	specify a string of text in a
	different way.  What these methods have in common, however, is
	that they must all be passed a <tt class="literal">FontRenderContext</tt>
	object.  This object contains information needed to accurately
	measure text.  It includes information about whether 
	antialiasing and  fractional metrics are being
	used, for example.  You can obtain an appropriate
	<tt class="literal">FontRenderContext</tt> by calling the
	<tt class="literal">getFontRenderContext()</tt> method of a
	<tt class="literal">Graphics2D</tt> object.</p>

<a name="INDEX-946"></a>
<a name="INDEX-947"></a>


<p>The Java 1.2 <tt class="literal">Font</tt> class also defines a set of
	<tt class="literal">getLineMetrics()</tt> methods that are similar to
	the <tt class="literal">getStringBounds()</tt> methods.  Each method
	takes a <tt class="literal">FontRenderContext</tt> object and
	returns a <tt class="literal">java.awt.font.LineMetrics</tt> object
	that contains various vertical metrics for the font.
	<tt class="literal">LineMetrics</tt> is similar to the older
	<tt class="literal">FontMetrics</tt>, except that it returns precise
	<tt class="literal">float</tt> values instead of approximate
	<tt class="literal">int</tt> values.  
	<tt class="literal">getHeight()</tt> returns the line height of
	the font.  This value is the sum of the values returned by
	<tt class="literal">getAscent()</tt>, <tt class="literal">getDescent()</tt>,
	and <tt class="literal">getLeading()</tt>.  Ascent is the amount of
	space above the baseline, descent is the space below the
	baseline, and leading space is the empty interline spacing for the
	font.  Other <tt class="literal">LineMetrics</tt> methods return
	values that allow you to correctly underline and strike through
	text.</p>

<a name="INDEX-948"></a>
<a name="INDEX-949"></a>
<a name="INDEX-950"></a>
<a name="INDEX-951"></a>

<p>The following code shows how you can obtain important metrics
	for a string of text, so that you can center it in a box:
</p>

<blockquote>
<pre class="programlisting">Graphics2D g;                     // Initialized elsewhere
Font f;                           // Initialized elsewhere
String message = "Hello World!";  // The text to measure and display
Rectangle2D box;                  // The display box: initialized elsewhere

// Measure the font and the message
FontRenderContext frc = g.getFontRenderContext();
Rectangle2D bounds = f.getStringBounds(message, frc);
LineMetrics metrics = f.getLineMetrics(message, frc);
float width = (float) bounds.getWidth();     // The width of our text
float lineheight = metrics.getHeight();      // Total line height
float ascent = metrics.getAscent();          // Top of text to baseline

// Now display the message centered horizontally and vertically in box
float x0 = (float) (box.getX() + (box.getWidth() - width)/2);
float y0 = (float) (box.getY() + (box.getHeight() - lineheight)/2 + ascent);
g.setFont(f);
g.drawString(message, x0, y0);</pre>
</blockquote>



<a name="INDEX-952"></a>

<p>The <tt class="literal">getLineMetrics()</tt> methods all require a
	string to be specified, just as the
	<tt class="literal">getStringBounds()</tt> methods do.  This is
	because a single font may have different font metrics for glyphs
	in different writing systems.  If you pass a string of Latin
	text, you may get a different <tt class="literal">LineMetrics</tt>
	object than you would if you supplied a string of Chinese text,
	for example.  If you pass in a string that mixes text from
	several distinct writing systems, you get line metrics for
	only a prefix of that string.  The
	<tt class="literal">LineMetrics.getNumChars()</tt> method returns the
	length of this prefix.</p>

<a name="INDEX-953"></a>


<h3 class="sect2">4.9.6. Advanced Text Drawing</h3>

<p>The easiest way to display text in an application is to use a
	Swing component such as a <tt class="literal">JLabel</tt>,
	<tt class="literal">JTextField</tt>, <tt class="literal">JTextArea</tt>, or
	<tt class="literal">JEditorPane</tt>.  Sometimes, however, you have
	to draw text explicitly, such as
	when you are implementing a custom Swing component.</p>

<a name="INDEX-954"></a>

<p>The easiest way to draw text is with the
	<tt class="literal">drawString()</tt> method of 
	<tt class="literal">Graphics</tt> or <tt class="literal">Graphics2D</tt>.
	<tt class="literal">drawString()</tt> is actually 
	a more complex method than
	you might think.  It works by first taking the characters
	of a string and converting them to a list of glyphs in a font.
	There is not always a one-to-one correspondence between
	characters and glyphs, however, 
	and font encodings usually do not match
	the Unicode encoding used for characters.  Next, the method must
	obtain the measurements of each glyph in the list of glyphs and
	position it individually.  Only after these steps can the
	method actually perform the requested string drawing 

operation.</p>





<p>If you are drawing a string repeatedly, you can optimize
	this process by first converting the string of characters into a
	<tt class="literal">java.awt.font.GlyphVector</tt>.<a href="#FOOTNOTE-3">[3]</a> 
	This converts
	characters to glyphs and calculates the appropriate position
	for each glyph.  Then, to draw the string, you simply pass
	the resulting glyph vector to the
	<tt class="literal">drawGlyphVector()</tt> method of a
	<tt class="literal">Graphics2D</tt> object.  Your code might look like
	this:
<a name="INDEX-955"></a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-3"></a>
<p>[3]The
	<tt class="literal">drawString()</tt> method is typically already
	highly optimized for drawing basic ASCII or Latin-1 text without
	antialiasing.  Using a <tt class="literal">GlyphVector</tt> may 
	actually slow down the drawing process.</p>
</blockquote>

<blockquote>
<pre class="programlisting">Graphics2D g;
Font f;
GlyphVector msg = f.createGlyphVector(g.getFontRenderContext(), "Hello");
g.drawGlyphVector(msg, 100.0f, 100.0f);</pre>
</blockquote>

<p>
	This technique is useful only if you expect to be
	drawing the same string repeatedly.  The optimization occurs
	because the string is converted to glyphs only once, instead
	of being converted each time you call <tt class="literal">drawString()</tt>.</p>

<a name="INDEX-956"></a>
<a name="INDEX-957"></a>
<a name="INDEX-958"></a>

<p>The <tt class="literal">GlyphVector</tt> class has a number of methods
	that are useful for other purposes.  Once you have
	created a <tt class="literal">GlyphVector</tt>, you can call
	<tt class="literal">getOutline()</tt> to obtain a
	<tt class="literal">Shape</tt> that represents the original string or
	<tt class="literal">getGlyphOutline()</tt> to get the
	<tt class="literal">Shape</tt> of a single glyph.  You can 

also call
	<tt class="literal">getGlyphMetrics()</tt> to obtain a
	<tt class="literal">GlyphMetrics</tt> object that contains detailed
	metrics for an individual glyph.</p>

<a name="INDEX-959"></a>
<a name="INDEX-960"></a>
<a name="INDEX-961"></a>
<a name="INDEX-962"></a>
<a name="INDEX-963"></a>
<a name="INDEX-964"></a>

<p>Two other methods,
	<tt class="literal">setGlyphPosition()</tt> and
	<tt class="literal">setGlyphTransform()</tt>, are designed to let
	you set the position and transform for individual glyphs.
	For example, you might use <tt class="literal">setGlyphPosition()</tt>
	to increase the interletter spacing of a glyph in a
	<tt class="literal">GlyphVector</tt> in order to implement
	fill-justification.  In the initial release of Java 1.2, however,
	these methods are not implemented.  If you want to handle the
	low-level layout of glyphs, one approach is to implement your
	own subclass of the abstract <tt class="literal">GlyphVector</tt>
	class.</p>

<p>A <tt class="literal">GlyphVector</tt> object can represent only glyphs from
	a single font; the default implementation represents
	only glyphs that appear on a single line of text.  If you want to
	represent a single line of multifont text, you can use a
	<tt class="literal">java.awt.

font.TextLayout</tt> object.  And if you
	want to work with multiline text, you can use
	<tt class="literal">java.awt.font.LineBreakMeasurer</tt> to break a
	paragraph of multifont text into multiple
	<tt class="literal">TextLayout</tt> objects, each representing a
	single line of text.</p>

<a name="INDEX-965"></a>
<a name="INDEX-966"></a>

<p>
<tt class="literal">TextLayout</tt> is a powerful class for displaying
	multifont text.  It supports bidirectional text layout, such
	as when left-to-right English text is mixed with right-to-left
	Hebrew or Arabic text or when right-to-left Hebrew letters are
	mixed with left-to-right Hebrew numbers.  Once you've created a
	<tt class="literal">TextLayout</tt> object, you can draw the text it
	represents by calling its <tt class="literal">draw()</tt> method,
	specifying a <tt class="literal">Graphics2D</tt> object and a position.</p>

<p>The <tt class="literal">TextLayout</tt> object does more than simply
	draw text.  Once the text is drawn, it also provides methods
	that applications can use to allow a user to interact with the
	text. If the user clicks on the text, the
	<tt class="literal">TextLayout</tt> has a method that allows you
	to determine which character was clicked on.  If you want to
	highlight portions of the text, you can tell the
	<tt class="literal">TextLayout</tt> the first and last characters to
	be highlighted, and it returns a <tt class="literal">Shape</tt>
	that represents the region to be highlighted.  Similarly, if you
	want to display an insertion cursor within the text, you can specify
	the character position, and the <tt class="literal">TextLayout</tt>
	returns a <tt class="literal">Shape</tt> that you can draw to display
	the cursor.  Although these methods may seem trivial, they in
	fact handle all the nontrivial complexities of multifont and
	bidirectional text, making <tt class="literal">TextLayout</tt> a 
	powerful class for certain applications.</p>

<p>You can create a <tt class="literal">TextLayout</tt> object by
	specifying a <tt class="literal">String</tt>, a
	<tt class="literal">Font</tt>, and a
	<tt class="literal">FontRenderContext</tt>.  However, a
	<tt class="literal">TextLayout</tt> created in this way can
	represent only single-font text.  To display multifont text, you
	must use a
	<tt class="literal">java.text.AttributedCharacterIterator</tt> to
	represent the text.  The attributes associated with the text 
	should be <tt class="literal">java.awt.font.TextAttribute</tt>
	constants, such as <tt class="literal">TextAttribute.FONT</tt>.  The
	easiest way to create an
	<tt class="literal">AttributedCharacterIterator</tt> is to create a
	<tt class="literal">java.text.AttributedString</tt>, specify
	attributes with its <tt class="literal">addAttribute()</tt> method,
	and then get an iterator for it with its
	<tt class="literal">getIterator()</tt> method.  The
	<tt class="literal">java.text</tt> API is covered in <em class="emphasis">Java in
	a Nutshell</em>, not in this book.</p>

<a name="INDEX-967"></a>
<a name="INDEX-968"></a>


<h3 class="sect2">4.9.7. Text Art with Font Glyphs</h3>
<a name="INDEX-969"></a>
<a name="INDEX-970"></a>
<a name="INDEX-971"></a>
<a name="INDEX-972"></a>
<a name="INDEX-973"></a>


<p>As I mentioned earlier, 
	the <tt class="literal">GlyphVector</tt> class allows
	you to obtain a <tt class="literal">Shape</tt> object that represents
	the outline of a single glyph or a string of glyphs.  This is
	a powerful feature of Java 2D that allows you to produce
	sophisticated text art.  
	The <tt class="literal">Shape</tt> object returned by the
	<tt class="literal">getOutline()</tt> or
	<tt class="literal">getGlyphOutline()</tt> method of
	<tt class="literal">GlyphVector</tt> can be used in the same way that
	you use any other <tt class="literal">Shape</tt> object.  Use the
	<tt class="literal">draw()</tt> method of <tt class="literal">Graphics2D</tt> 
	to draw the outline of the glyph or glyphs.  Use
	<tt class="literal">fill()</tt> to fill the glyphs with an arbitrary
	<tt class="literal">Paint</tt>.  You can transform the glyph shapes by
	scaling, rotating, and skewing them and you can even use them to
	perform clipping and hit detection.</p>

<a name="INDEX-974"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_08.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_10.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_10.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.8. Rendering Hints</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.10. Buffered Images</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
