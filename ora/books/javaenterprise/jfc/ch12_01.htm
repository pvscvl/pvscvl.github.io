<html>
<head>
<title>The java.awt.dnd Package (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The java.awt.dnd Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch11_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/part2.htm">Part 2: API Quick Reference</a></td><td align="right" valign="top" width="172"><a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch13_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 12.  The java.awt.dnd Package</h1>

<p> 
  The <tt class="literal">java.awt.dnd</tt> 
  package contains classes and interfaces that support data
  transfer through the drag-and-drop metaphor; the package is new in Java 1.2.  This 

functionality
  is built upon the
  data transfer framework of the
  <tt class="literal">java.awt.datatransfer</tt>
package.</p>



<a name="INDEX-1730"></a>
<a name="INDEX-1731"></a>
<p>  A <tt class="literal">DragSource</tt> object is a proxy for an object
  that initiates a drag, while a <tt class="literal">DropTarget</tt> object is a
  proxy for an object that wishes to accept drops.  All
  inter-object communication during the drag process is done
  through the various event classes defined by this package.
  <a href="#jfcnut-ch-java.awt.dnd-fig-1">Figure 12-1</a> shows the class hierarchy of
  this package.
  See <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch06_01.htm">Chapter 6, "Data Transfer"</a>, for more details on drag-and-drop.</p>
<a name="INDEX-1732"></a>
<a name="INDEX-1733"></a>
<a name="jfcnut-ch-java.awt.dnd-fig-1"></a>
<div class="figure">
<img alt="figure" src="figs/jfcn.1201.gif" webstripperlinkwas="figs/jfcn.1201.gif"></div>
<h4 class="objtitle">Figure 12-1. The java.awt.dnd package</h4>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Autoscroll</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-1734"></a>
<a name="INDEX-1735"></a>
<p> 
  This interface allows a scrollable component to scroll itself as part
  of the drag-and-drop process, so that a user can drop an object
  anywhere within the component's scrollable content.  Consider, for
  example, the problem of cutting a paragraph of text from the top of a
  long document and dragging it down to the bottom of the same
  document.  While the drag-and-drop operation is in progress, the user
  obviously cannot operate the scrollbar, since the mouse is already in
  use.  So some other technique is necessary to enable scrolling during
  a drag-and-drop operation.</p>
<a name="INDEX-1736"></a>
<p>  The <tt class="literal">Autoscroll</tt> interface enables this specialized
  form of scrolling.  When an object is first dragged over a component
  that implements <tt class="literal">Autoscroll</tt>, the drag-and-drop
  system calls the component's <tt class="literal">getAutoscrollInsets()</tt>
  method.  This defines an autoscroll region at the edges of the
  component.  If, during the drag, the user places the mouse within this
  autoscroll region and holds it there (for a platform-dependent amount
  of time), the drag-and-drop system begins to call the
  <tt class="literal">autoscroll()</tt> method repeatedly (at a
  platform-dependent repetition rate) until the user once again moves
  the mouse.  The <tt class="literal">autoscroll()</tt> method of the
  component is responsible for scrolling the content.  The direction of
  the scroll is determined by the position of the mouse pointer, which
  is passed as an argument to <tt class="literal">autoscroll()</tt>.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">Autoscroll</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">autoscroll</b> (Point <i class="parameter">cursorLocn</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Insets <b class="function">getAutoscrollInsets</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DnDConstants</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-1737"></a>
<p>  Successful completion of a drag-and-drop operation can result in a
  number of different types of actions being performed.  This interface
  defines constants that represent the possible actions:</p>

<dl>
<dt>
<b><tt class="literal">ACTION_COPY</tt></b>
</dt>
<dd>
<p>	This is the most common action: the dragged object is to be
	copied in some way.  <tt class="literal">ACTION_COPY</tt> is also used
	as a default action when there is only one possible action, even
	if that action is not really a copy.
      </p>
</dd>
<dt>
<b><tt class="literal">ACTION_MOVE</tt></b>
</dt>
<dd>
<p>	  The dragged object is to be copied by the destination.  The
	  source object deletes its copy after the object is
	  successfully transferred.
	</p>
</dd>
<dt>
<b><tt class="literal">ACTION_COPY_OR_MOVE</tt></b>
</dt>
<dd>
<p>	  This constant is the combination of
	  <tt class="literal">ACTION_COPY</tt> and
	  <tt class="literal">ACTION_MOVE</tt>.  Many drop targets can accept
	  drops of either type; this constant is used to indicate
	  that fact.
	</p>
</dd>
<dt>
<b><tt class="literal">ACTION_LINK</tt> or <tt class="literal">ACTION_REFERENCE</tt></b>
</dt>
<dd>
<p>	  These two constants are synonyms.  They indicate that the
	  destination object should create a link to the transferred
	  object or share a reference to the transferred object with
	  the source object.  Note that this action has a particularly
	  vague meaning; its use is not recommended except for
	  intra-application drag-and-drop of specialized data types.
	</p>
</dd>
<dt>
<b><tt class="literal">ACTION_NONE</tt></b>
</dt>
<dd>
<p>	  This constant specifies that no actions are supported.  It is
	  used internally by the drag-and-drop API but is not commonly
	  used by application-level code.
	</p>
</dd>
</dl>
<a name="INDEX-1738"></a>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">DnDConstants</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">ACTION_COPY</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">ACTION_COPY_OR_MOVE</b> ;</td><td align="right"><i> =3</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">ACTION_LINK</b> ;</td><td align="right"><i> =1073741824</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">ACTION_MOVE</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">ACTION_NONE</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">ACTION_REFERENCE</b> ;</td><td align="right"><i> =1073741824</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DragGestureEvent</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i>serializable event</i></b></font></td>
</tr>
</table>
<a name="INDEX-1739"></a>
<p>  This event type is fired by a <tt class="literal">DragGestureRecognizer</tt>
  and sent to the <tt class="literal">dragGestureRecognized()</tt> method of a
  <tt class="literal">DragGestureListener</tt>.  Unlike many event classes,
  which are merely holders of event information,
  <tt class="literal">DragGestureEvent</tt> also defines the
  <tt class="literal">startDrag()</tt> method, which can be used to initiate the
  drag-and-drop process.</p>
<a name="INDEX-1740"></a>
<a name="INDEX-1741"></a>
<p>  When the <tt class="literal">dragGestureRecognized()</tt> method is invoked,
  it should start the drag-and-drop process by invoking this
  <tt class="literal">startDrag()</tt> method, passing in the initial drag cursor to
  display, the <tt class="literal">Transferable</tt> data to transfer, and the
  <tt class="literal">DragSourceListener</tt> that monitors the drag
  process.  If there is to be an image dragged along with the drag
  cursor, the image and its offset from the cursor hotspot may also be
  passed to <tt class="literal">startDrag()</tt>.</p>
<p>  The other methods of <tt class="literal">DragGestureEvent()</tt> are 
  accessor methods that return information about the event.  Most
  applications do not need to call them.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DragGestureEvent</b> extends java.util.EventObject {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DragGestureEvent</b> (DragGestureRecognizer <i class="parameter">dgr</i>, int <i class="parameter">act</i>, Point <i class="parameter">ori</i>, java.util.List <i class="parameter">evs</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Component <b class="function">getComponent</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getDragAction</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Point <b class="function">getDragOrigin</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public DragSource <b class="function">getDragSource</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public DragGestureRecognizer <b class="function">getSourceAsDragGestureRecognizer</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.awt.event.InputEvent <b class="function">getTriggerEvent</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.util.Iterator <b class="function">iterator</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">startDrag</b> (Cursor <i class="parameter">dragCursor</i>, java.awt.datatransfer.Transferable <i class="parameter">transferable</i>, DragSourceListener <i class="parameter">dsl</i>) throws InvalidDnDOperationException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">startDrag</b> (Cursor <i class="parameter">dragCursor</i>, Image <i class="parameter">dragImage</i>, Point <i class="parameter">imageOffset</i>, java.awt.datatransfer.Transferable <i class="parameter">transferable</i>, DragSourceListener <i class="parameter">dsl</i>) throws InvalidDnDOperationException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object[ ] <b class="function">toArray</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object[ ] <b class="function">toArray</b> (Object[ ] <i class="parameter">array</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.util.EventObject(Serializable)-->DragGestureEvent</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Toolkit.createDragSourceContextPeer(), DragGestureListener.dragGestureRecognized(), DragSource.{createDragSourceContext(), startDrag()}, DragSourceContext.DragSourceContext()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">DragSourceContext.getTrigger()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DragGestureListener</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i>event listener</i></b></font></td>
</tr>
</table>
<a name="INDEX-1742"></a>
<a name="INDEX-1743"></a>
<p>  This interface defines the method that is invoked by a
  <tt class="literal">DragGestureRecognizer</tt> when the user initiates a
  drag-and-drop action.  When <tt class="literal">dragGestureRecognized()</tt>
  is called, the <tt class="literal">DragGestureListener</tt> should prepare a
  <tt class="literal">Transferable</tt> object to be transferred through the
  drag-and-drop process and then initiate that process by calling
  the <tt class="literal">startDrag()</tt> method of the
  <tt class="literal">DragGestureEvent</tt> object.</p>
<p>  You do not typically pass a <tt class="literal">DragGestureListener</tt> to
  an <tt class="literal">addDragGestureListener()</tt> method.  Instead,
  you specify the <tt class="literal">DragGestureListener</tt> when
  you call the 
  <tt class="literal">createDefaultDragGestureRecognizer()</tt> method of a
  <tt class="literal">DragSource</tt> object.
  This method creates a <tt class="literal">DragGestureRecognizer</tt> and
  automatically registers the <tt class="literal">DragGestureListener</tt>
  with it.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">DragGestureListener</b> extends java.util.EventListener {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">dragGestureRecognized</b> (DragGestureEvent <i class="parameter">dge</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(DragGestureListener(java.util.EventListener))</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Toolkit.createDragGestureRecognizer(), DragGestureRecognizer.{addDragGestureListener(), DragGestureRecognizer(), removeDragGestureListener()}, DragSource.{createDefaultDragGestureRecognizer(), createDragGestureRecognizer()}, MouseDragGestureRecognizer.MouseDragGestureRecognizer()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">DragGestureRecognizer.dragGestureListener</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DragGestureRecognizer</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-1744"></a>
<p>  Drag-and-drop operations may be initiated in different ways on
  different native platforms.  This abstract class is the superclass of
  the platform-dependent classes that are
  used to recognize the platform-dependent
  gesture used to begin a drag.  As an abstract class, you cannot
  instantiate a <tt class="literal">DragGestureRecognizer</tt> directly.
  Instead, you typically create a
  <tt class="literal">DragGestureRecognizer</tt> by calling the
  <tt class="literal">createDefaultDragGestureRecognizer()</tt> method of a
  <tt class="literal">DragSource</tt> object.  If you want to allow the user
  to initiate drags with nonstandard gestures, you may 

implement your
  own <tt class="literal">DragGestureRecognizer</tt> subclass and instantiate
  it by calling the
  <tt class="literal">createDragGestureRecognizer()</tt> method of
  <tt class="literal">java.awt.Toolkit</tt>. </p>
<p>  When you create a <tt class="literal">DragGestureRecognizer</tt>, you
  specify the <tt class="literal">Component</tt> it is to look for drag
  gestures over and the
  <tt class="literal">DragGestureListener</tt> it is to notify when it
  recognizes one.  The creation process automatically links these three
  objects together, so you typically never need to do anything with a
  <tt class="literal">DragGestureRecognizer</tt> other than create it.</p>
<p>  One additional piece of information you must supply when you create a
  <tt class="literal">DragGestureRecognizer</tt> is a bit mask of allowed drag
  actions.  <tt class="literal">ACTION_COPY</tt>,
  <tt class="literal">ACTION_MOVE</tt>, and <tt class="literal">ACTION_LINK</tt>
  actions are usually initiated with different gestures (different
  modifier keys).  A <tt class="literal">DragGestureRecognizer</tt> must
  know which actions are available so it can know which gestures to
  recognize and which to ignore.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">DragGestureRecognizer</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">DragGestureRecognizer</b> (DragSource <i class="parameter">ds</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">DragGestureRecognizer</b> (DragSource <i class="parameter">ds</i>, Component <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">DragGestureRecognizer</b> (DragSource <i class="parameter">ds</i>, Component <i class="parameter">c</i>, int <i class="parameter">sa</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">DragGestureRecognizer</b> (DragSource <i class="parameter">ds</i>, Component <i class="parameter">c</i>, int <i class="parameter">sa</i>, DragGestureListener <i class="parameter">dgl</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Event Registration Methods (by event name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">addDragGestureListener</b> (DragGestureListener <i class="parameter">dgl</i>) throws java.util.TooManyListenersException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">removeDragGestureListener</b> (DragGestureListener <i class="parameter">dgl</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Component <b class="function">getComponent</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setComponent</b> (Component <i class="parameter">c</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public DragSource <b class="function">getDragSource</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getSourceActions</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSourceActions</b> (int <i class="parameter">actions</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.awt.event.InputEvent <b class="function">getTriggerEvent</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">resetRecognizer</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">appendEvent</b> (java.awt.event.InputEvent <i class="parameter">awtie</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">fireDragGestureRecognized</b> (int <i class="parameter">dragAction</i>, Point <i class="parameter">p</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">registerListeners</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected abstract void <b class="function">unregisterListeners</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected Component <b class="function">component</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected DragGestureListener <b class="function">dragGestureListener</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected DragSource <b class="function">dragSource</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected java.util.ArrayList <b class="function">events</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">sourceActions</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">MouseDragGestureRecognizer</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">DragGestureEvent.DragGestureEvent()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Toolkit.createDragGestureRecognizer(), DragGestureEvent.getSourceAsDragGestureRecognizer(), DragSource.{createDefaultDragGestureRecognizer(), createDragGestureRecognizer()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DragSource</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-1745"></a>
<p>  This class coordinates the initiation of drag-and-drop operations.
  Despite the central role it plays in the drag-and-drop system, it is
  not used much in typical drag-and-drop code.</p>
<a name="INDEX-1746"></a>
<p>  You can create a <tt class="literal">DragSource</tt> object by calling the
  constructor, but because the <tt class="literal">DragSource</tt> object does
  not hold any state, you can continually reuse a single object.  Call the
  static <tt class="literal">getDefaultDragSource()</tt> method to obtain a
  reference to a shared default <tt class="literal">DragSource</tt> object.</p>
<a name="INDEX-1747"></a>
<p>  Once you have obtained a <tt class="literal">DragSource</tt> object, call
  <tt class="literal">createDefaultDragGestureRecognizer()</tt> to create and
  register a <tt class="literal">DragGestureRecognizer</tt> object that
  detects user gestures that should initiate drags.  If you want to drag
  an image that represents the dragged data along with the drag cursor, you
  may also call the <tt class="literal">isDragImageSupported()</tt> method to
  find out whether that option is supported on the native platform.</p>
<p>  After you have called these two methods, you typically never need to
  use the <tt class="literal">DragSource</tt> again.  The
  <tt class="literal">startDrag()</tt> method of the
  <tt class="literal">DragSource</tt> is responsible for initiating a drag
  action, but it is easier to invoke it through the
  <tt class="literal">startDrag()</tt> utility method of the
  <tt class="literal">DragGestureEvent</tt> class instead.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DragSource</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DragSource</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Cursor <b class="function">DefaultCopyDrop</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Cursor <b class="function">DefaultCopyNoDrop</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Cursor <b class="function">DefaultLinkDrop</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Cursor <b class="function">DefaultLinkNoDrop</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Cursor <b class="function">DefaultMoveDrop</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final Cursor <b class="function">DefaultMoveNoDrop</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static DragSource <b class="function">getDefaultDragSource</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static boolean <b class="function">isDragImageSupported</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public DragGestureRecognizer <b class="function">createDefaultDragGestureRecognizer</b> (Component <i class="parameter">c</i>, int <i class="parameter">actions</i>, DragGestureListener <i class="parameter">dgl</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public DragGestureRecognizer <b class="function">createDragGestureRecognizer</b> (Class <i class="parameter">recognizerAbstractClass</i>, Component <i class="parameter">c</i>, int <i class="parameter">actions</i>, DragGestureListener <i class="parameter">dgl</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.awt.datatransfer.FlavorMap <b class="function">getFlavorMap</b> ();</td><td align="right"><i> default:SystemFlavorMap</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">startDrag</b> (DragGestureEvent <i class="parameter">trigger</i>, Cursor <i class="parameter">dragCursor</i>, java.awt.datatransfer.Transferable <i class="parameter">transferable</i>, DragSourceListener <i class="parameter">dsl</i>) throws InvalidDnDOperationException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">startDrag</b> (DragGestureEvent <i class="parameter">trigger</i>, Cursor <i class="parameter">dragCursor</i>, java.awt.datatransfer.Transferable <i class="parameter">transferable</i>, DragSourceListener <i class="parameter">dsl</i>, java.awt.datatransfer.FlavorMap <i class="parameter">flavorMap</i>) throws InvalidDnDOperationException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">startDrag</b> (DragGestureEvent <i class="parameter">trigger</i>, Cursor <i class="parameter">dragCursor</i>, Image <i class="parameter">dragImage</i>, Point <i class="parameter">dragOffset</i>, java.awt.datatransfer.Transferable <i class="parameter">transferable</i>, DragSourceListener <i class="parameter">dsl</i>) throws InvalidDnDOperationException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">startDrag</b> (DragGestureEvent <i class="parameter">trigger</i>, Cursor <i class="parameter">dragCursor</i>, Image <i class="parameter">dragImage</i>, Point <i class="parameter">imageOffset</i>, java.awt.datatransfer.Transferable <i class="parameter">transferable</i>, DragSourceListener <i class="parameter">dsl</i>, java.awt.datatransfer.FlavorMap <i class="parameter">flavorMap</i>) throws InvalidDnDOperationException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected DragSourceContext <b class="function">createDragSourceContext</b> (java.awt.dnd.peer.DragSourceContextPeer <i class="parameter">dscp</i>, DragGestureEvent <i class="parameter">dgl</i>, Cursor <i class="parameter">dragCursor</i>, Image <i class="parameter">dragImage</i>, Point <i class="parameter">imageOffset</i>, java.awt.datatransfer.Transferable <i class="parameter">t</i>, DragSourceListener <i class="parameter">dsl</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Toolkit.createDragGestureRecognizer(), DragGestureRecognizer.DragGestureRecognizer(), MouseDragGestureRecognizer.MouseDragGestureRecognizer()</tt>
</p>

<p>
<span class="refsect1">Returned By: </span><tt class="literal">DragGestureEvent.getDragSource(), DragGestureRecognizer.getDragSource(), DragSource.getDefaultDragSource(), DragSourceContext.getDragSource()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">DragGestureRecognizer.dragSource</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DragSourceContext</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-1748"></a>
<p> 
  This class contains state information about a drag operation
  currently in progress.  It is the <tt class="literal">DragSourceContext</tt>
  that is responsible for communicating with the native drag-and-drop
  system of the underlying platform and relaying drag-and-drop
  events to the <tt class="literal">DragSourceListener</tt>.  Although this is
  an important class, it does its work in the background, and you typically do not need to use it.  If you do want to use it, for example, to
  perform cursor animation with the <tt class="literal">setCursor()</tt>
  method, you may obtain the current
  <tt class="literal">DragSourceContext</tt> from any
  <tt class="literal">DragSourceEvent</tt> object.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DragSourceContext</b> implements DragSourceListener {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DragSourceContext</b> (java.awt.dnd.peer.DragSourceContextPeer <i class="parameter">dscp</i>, DragGestureEvent <i class="parameter">trigger</i>, Cursor <i class="parameter">dragCursor</i>, Image <i class="parameter">dragImage</i>, Point <i class="parameter">offset</i>, java.awt.datatransfer.Transferable <i class="parameter">t</i>, DragSourceListener <i class="parameter">dsl</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected static final int <b class="function">CHANGED</b> ;</td><td align="right"><i> =3</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected static final int <b class="function">DEFAULT</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected static final int <b class="function">ENTER</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected static final int <b class="function">OVER</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Event Registration Methods (by event name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">addDragSourceListener</b> (DragSourceListener <i class="parameter">dsl</i>) throws java.util.TooManyListenersException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">removeDragSourceListener</b> (DragSourceListener <i class="parameter">dsl</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Component <b class="function">getComponent</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Cursor <b class="function">getCursor</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setCursor</b> (Cursor <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public DragSource <b class="function">getDragSource</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getSourceActions</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.awt.datatransfer.Transferable <b class="function">getTransferable</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public DragGestureEvent <b class="function">getTrigger</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">transferablesFlavorsChanged</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing DragSourceListener</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">dragDropEnd</b> (DragSourceDropEvent <i class="parameter">dsde</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">dragEnter</b> (DragSourceDragEvent <i class="parameter">dsde</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">dragExit</b> (DragSourceEvent <i class="parameter">dse</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">dragOver</b> (DragSourceDragEvent <i class="parameter">dsde</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">dropActionChanged</b> (DragSourceDragEvent <i class="parameter">dsde</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">updateCurrentCursor</b> (int <i class="parameter">dropOp</i>, int <i class="parameter">targetAct</i>, int <i class="parameter">status</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->DragSourceContext(DragSourceListener(java.util.EventListener))</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">DragSourceDragEvent.DragSourceDragEvent(), DragSourceDropEvent.DragSourceDropEvent(), DragSourceEvent.DragSourceEvent(), java.awt.dnd.peer.DragSourceContextPeer.startDrag()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">DragSource.createDragSourceContext(), DragSourceEvent.getDragSourceContext()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DragSourceDragEvent</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i>serializable event</i></b></font></td>
</tr>
</table>
<a name="INDEX-1749"></a>
<a name="INDEX-1750"></a>
<a name="INDEX-1751"></a>
<a name="INDEX-1752"></a>
<p>  This event type is fired by a <tt class="literal">DragSourceContext</tt> and
  passed to the <tt class="literal">dragEnter()</tt>,
  <tt class="literal">dragOver()</tt>, <tt class="literal">dragExit()</tt>, and
  <tt class="literal">dragActionChanged()</tt> methods of a
  <tt class="literal">DragSourceListener</tt>.  These methods may use the
  notification as an opportunity to perform 

drag-over animation
  effects, by changing the cursor, for example.</p>
<a name="INDEX-1753"></a>
<p>
<tt class="literal">isLocalDropTarget()</tt> specifies whether the drop
  target currently under the cursor is in the same Java VM
  as the drag source.  <tt class="literal">getUserAction()</tt> returns the
  current drag action selected by the user.  This is usually a function
  of the modifier keys the user is holding down; these modifiers are
  available from <tt class="literal">getGestureModifiers()</tt>.
  <tt class="literal">getTargetActions()</tt> returns a bit mask of the
  actions that the drop target can support, and
  <tt class="literal">getDropAction()</tt> is the intersection of the user
  action with the set of target actions.</p>
<a name="INDEX-1754"></a>
<a name="INDEX-1755"></a>
<a name="INDEX-1756"></a>
<a name="INDEX-1757"></a>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DragSourceDragEvent</b> extends DragSourceEvent {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DragSourceDragEvent</b> (DragSourceContext <i class="parameter">dsc</i>, int <i class="parameter">dropAction</i>, int <i class="parameter">actions</i>, int <i class="parameter">modifiers</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getDropAction</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getGestureModifiers</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getTargetActions</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getUserAction</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.util.EventObject(Serializable)-->DragSourceEvent-->DragSourceDragEvent</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">DragSourceContext.{dragEnter(), dragOver(), dropActionChanged()}, DragSourceListener.{dragEnter(), dragOver(), dropActionChanged()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DragSourceDropEvent</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i>serializable event</i></b></font></td>
</tr>
</table>
<a name="INDEX-1758"></a>
<p> 
  This event type is fired by the <tt class="literal">DragSourceContext</tt>
  and is passed to the <tt class="literal">dragDropEnd()</tt> method of a
  <tt class="literal">DragSourceListener</tt> to signify that the
  drag-and-drop operation is complete.
  <tt class="literal">getDropSuccess()</tt> returns <tt class="literal">true</tt> if
  the drop occurs and the data is successfully transferred.  It
  returns <tt class="literal">false</tt> if the drag is cancelled, if the
  drop is performed over an invalid drop target, or if the data
  transfer is not successful.  <tt class="literal">getDropAction()</tt>
  returns the action (see <tt class="literal">DnDConstants</tt>) that is
  actually performed.  The user's selected action may change during the
  drag, so this value may not be the same as the initially selected
  action.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DragSourceDropEvent</b> extends DragSourceEvent {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DragSourceDropEvent</b> (DragSourceContext <i class="parameter">dsc</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DragSourceDropEvent</b> (DragSourceContext <i class="parameter">dsc</i>, int <i class="parameter">action</i>, boolean <i class="parameter">success</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getDropAction</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">getDropSuccess</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.util.EventObject(Serializable)-->DragSourceEvent-->DragSourceDropEvent</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">DragSourceContext.dragDropEnd(), DragSourceListener.dragDropEnd()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DragSourceEvent</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i>serializable event</i></b></font></td>
</tr>
</table>
<a name="INDEX-1759"></a>
<p> 
  This class is the superclass of event types fired by a
  <tt class="literal">DragSourceContext</tt> to notify a
  <tt class="literal">DragSourceListener</tt> about events in the
  drag-and-drop process.  Although applications typically do not need to
  do so, they can call <tt class="literal">getDragSourceContext()</tt> or
  <tt class="literal">getSource()</tt> to obtain a reference to the current
  <tt class="literal">DragSourceContext</tt>.  This object can be used, for
  example, to perform drag over animation effects by changing the
  current drag cursor.  If you are writing a
  <tt class="literal">DragSourceListener</tt> that handles drags on more than
  one component, you can determine which component initiated the drag by
  calling <tt class="literal">getSource()</tt> to obtain a
  <tt class="literal">DragSourceContext</tt> and then calling its
  <tt class="literal">getComponent()</tt> method.</p>
<p>  See also <tt class="literal">DragSourceDragEvent</tt> and
  <tt class="literal">DragSourceDropEvent</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DragSourceEvent</b> extends java.util.EventObject {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DragSourceEvent</b> (DragSourceContext <i class="parameter">dsc</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public DragSourceContext <b class="function">getDragSourceContext</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.util.EventObject(Serializable)-->DragSourceEvent</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">DragSourceDragEvent, DragSourceDropEvent</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">DragSourceContext.dragExit(), DragSourceListener.dragExit()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DragSourceListener</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i>event listener</i></b></font></td>
</tr>
</table>
<a name="INDEX-1760"></a>
<p> 
  This interface is implemented by objects that allow data to be
  transferred through drag-and-drop and want to be notified about
  the progress of the drag-and-drop process.  The methods of this
  interface are invoked by a <tt class="literal">DragSourceContext</tt> at
  various interesting points during the drag-and-drop.  The methods are
  passed a <tt class="literal">DragSourceDragEvent</tt> or a
  <tt class="literal">DragSourceDropEvent</tt>, both of which are subclasses
  of <tt class="literal">DragSourceEvent</tt>.  The methods are:
<a name="INDEX-1761"></a>
</p>

  <dl>
<dt>
<b><tt class="literal">dragDropEnd()</tt></b>
</dt>
<dd>
<p>	  Invoked when the drag-and-drop operation is complete and has
	  ended in success or failure.  This is the only method that is
	  passed a <tt class="literal">DragSourceDropEvent</tt>, instead of a
	  <tt class="literal">DragSourceDragEvent</tt>.  If the drag is of
	  type <tt class="literal">ACTION_MOVE</tt> and the
	  <tt class="literal">getDropSuccess()</tt> method of 
	  <tt class="literal">DragSourceDropEvent</tt> returns
	  <tt class="literal">true</tt>, the
	  <tt class="literal">DragSourceListener</tt> knows that the data has
	  been safely transferred to the drop target and should
	  delete the source copy of that data.
	</p>
</dd>
<a name="INDEX-1762"></a>
<dt>
<b><tt class="literal">dragEnter()</tt></b>
</dt>
<dd>
<p>	  Called when the drag cursor has entered an active drop target
	  that has indicated an interest in and capability to receive a
	  drop.  This method should initiate any custom drag over
	  effects. 
	</p>
</dd>
<a name="INDEX-1763"></a>
<dt>
<b><tt class="literal">dragExit()</tt></b>
</dt>
<dd>
<p>	  Invoked when the drag cursor has left a receptive drop
	  target.  This method should terminate any custom drag over
	  effects. 
	</p>
</dd>
<a name="INDEX-1764"></a>
<dt>
<b><tt class="literal">dragOver()</tt></b>
</dt>
<dd>
<p>	  Called continuously while the mouse remains within 
	  a receptive drop
	  target.  Because this method is called very frequently, it
	  should not perform any lengthy operations.
	</p>
</dd>
<a name="INDEX-1765"></a>
<dt>
<b><tt class="literal">dropActionChanged()</tt></b>
</dt>
<dd>
<p>	  Invoked if the user changes his desired drop action,
	  typically by changing the keyboard modifiers she is holding
	  down.  If you are displaying a custom drag cursor, this method
	  may need to modify the currently displayed cursor.
	</p>
</dd>
</dl>
<a name="INDEX-1766"></a>

<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">DragSourceListener</b> extends java.util.EventListener {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">dragDropEnd</b> (DragSourceDropEvent <i class="parameter">dsde</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">dragEnter</b> (DragSourceDragEvent <i class="parameter">dsde</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">dragExit</b> (DragSourceEvent <i class="parameter">dse</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">dragOver</b> (DragSourceDragEvent <i class="parameter">dsde</i>);</td><td align="right"><i></i></td>
</tr>

<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">dropActionChanged</b> (DragSourceDragEvent <i class="parameter">dsde</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(DragSourceListener(java.util.EventListener))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">DragSourceContext</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">DragGestureEvent.startDrag(), DragSource.{createDragSourceContext(), startDrag()}, DragSourceContext.{addDragSourceListener(), DragSourceContext(), removeDragSourceListener()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DropTarget</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i>serializable</i></b></font></td>
</tr>
</table>
<a name="INDEX-1767"></a>
<p>  This class holds the state necessary for a
  <tt class="literal">Component</tt> to accept drops.  Create a
  <tt class="literal">DropTarget</tt> by specifying the
  <tt class="literal">Component</tt> with which it is to be associated and the
  <tt class="literal">DropTargetListener</tt> that responds to
  interesting events during a drag-and-drop
  operation.  You may optionally specify a bit mask of drop
  actions that this <tt class="literal">DropTarget</tt> can support and a
  <tt class="literal">boolean</tt> value that indicates whether the
  <tt class="literal">DropTarget</tt> is currently active.  If you do
  not 

specify these optional values, your <tt class="literal">DropTarget</tt>
  supports <tt class="literal">ACTION_COPY_OR_MOVE</tt>
  and is active.</p>
<p>  Once you have created a <tt class="literal">DropTarget</tt>, you often never
  have to do anything else with it.  The <tt class="literal">DropTarget()</tt>
  constructor automatically connects the <tt class="literal">DropTarget</tt>
  with the <tt class="literal">Component</tt> it serves and the
  <tt class="literal">DropTargetListener</tt> it notifies, so you do not have
  to perform any of the registration yourself.  In fact, the only time
  you typically need to use the <tt class="literal">DropTarget</tt>
  object you create is if you need to activate or deactivate it with
  <tt class="literal">setActive()</tt>. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DropTarget</b> implements DropTargetListener, Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DropTarget</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DropTarget</b> (Component <i class="parameter">c</i>, DropTargetListener <i class="parameter">dtl</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DropTarget</b> (Component <i class="parameter">c</i>, int <i class="parameter">ops</i>, DropTargetListener <i class="parameter">dtl</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DropTarget</b> (Component <i class="parameter">c</i>, int <i class="parameter">ops</i>, DropTargetListener <i class="parameter">dtl</i>, boolean <i class="parameter">act</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DropTarget</b> (Component <i class="parameter">c</i>, int <i class="parameter">ops</i>, DropTargetListener <i class="parameter">dtl</i>, boolean <i class="parameter">act</i>, java.awt.datatransfer.FlavorMap <i class="parameter">fm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Inner Classes</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Event Registration Methods (by event name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">addDropTargetListener</b> (DropTargetListener <i class="parameter">dtl</i>) throws java.util.TooManyListenersException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">removeDropTargetListener</b> (DropTargetListener <i class="parameter">dtl</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isActive</b> ();</td><td align="right"><i> synchronized default:true</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setActive</b> (boolean <i class="parameter">isActive</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Component <b class="function">getComponent</b> ();</td><td align="right"><i> synchronized default:null</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setComponent</b> (Component <i class="parameter">c</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getDefaultActions</b> ();</td><td align="right"><i> synchronized default:3</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setDefaultActions</b> (int <i class="parameter">ops</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public DropTargetContext <b class="function">getDropTargetContext</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.awt.datatransfer.FlavorMap <b class="function">getFlavorMap</b> ();</td><td align="right"><i> default:SystemFlavorMap</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setFlavorMap</b> (java.awt.datatransfer.FlavorMap <i class="parameter">fm</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">addNotify</b> (java.awt.peer.ComponentPeer <i class="parameter">peer</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">removeNotify</b> (java.awt.peer.ComponentPeer <i class="parameter">peer</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing DropTargetListener</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">dragEnter</b> (DropTargetDragEvent <i class="parameter">dtde</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">dragExit</b> (DropTargetEvent <i class="parameter">dte</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">dragOver</b> (DropTargetDragEvent <i class="parameter">dtde</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">drop</b> (DropTargetDropEvent <i class="parameter">dtde</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">dropActionChanged</b> (DropTargetDragEvent <i class="parameter">dtde</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">clearAutoscroll</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected DropTarget.DropTargetAutoScroller <b class="function">createDropTargetAutoScroller</b> (Component <i class="parameter">c</i>, Point <i class="parameter">p</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected DropTargetContext <b class="function">createDropTargetContext</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">initializeAutoscrolling</b> (Point <i class="parameter">p</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">updateAutoscroll</b> (Point <i class="parameter">dragCursorLocn</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->DropTarget(DropTargetListener(java.util.EventListener),Serializable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Component.setDropTarget(), java.awt.dnd.peer.DropTargetPeer.{addDropTarget(), removeDropTarget()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Component.getDropTarget(), DropTargetContext.getDropTarget(), java.awt.dnd.peer.DropTargetContextPeer.getDropTarget()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DropTarget.DropTargetAutoScroller</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-1768"></a>
<p>  This protected inner class implements autoscrolling behavior for a
  drop target.  If the drop target is associated with a component that
  implements <tt class="literal">Autoscroll</tt>, this class invokes the
  <tt class="literal">autoscroll()</tt> method of that component as
  appropriate.  Applications never need to use this class directly.
  Applications that want to override the default autoscrolling behavior
  can subclass this class and override the
  <tt class="literal">createDropTargetAutoScroller()</tt> method of
  <tt class="literal">DropTarget</tt> to return an instance of the subclass.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">protected static class <b class="classname">DropTarget.DropTargetAutoScroller</b> implements java.awt.event.ActionListener {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">DropTargetAutoScroller</b> (Component <i class="parameter">c</i>, Point <i class="parameter">p</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing ActionListener</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">actionPerformed</b> (java.awt.event.ActionEvent <i class="parameter">e</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">stop</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">updateLocation</b> (Point <i class="parameter">newLocn</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">DropTarget.createDropTargetAutoScroller()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DropTargetContext</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-1769"></a>
<p>  This class contains state information about a drag operation currently
  in progress above a <tt class="literal">DropTarget</tt>.  The
  <tt class="literal">DropTargetContext</tt> is responsible for communicating
  with the native drag-and-drop system of the underlying platform and
  relaying drag-and-drop events from that native system to the
  <tt class="literal">DropTargetListener</tt>.  </p>
<a name="INDEX-1770"></a>
<p>  Although this is an important class, it does its work internally, and
  application-level code does not typically need to use it.
  <tt class="literal">DropTargetContext</tt> does define some important
  methods, such as <tt class="literal">acceptDrag()</tt> and
  <tt class="literal">acceptDrop()</tt>, but these are typically invoked
  through the utility methods of <tt class="literal">DropTargetDragEvent</tt>
  and <tt class="literal">DropTargetDropEvent</tt>.  If you ever do need to
  use a <tt class="literal">DropTargetContext</tt> directly, it is available
  from any <tt class="literal">DropTargetEvent</tt>.</p>

<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DropTargetContext</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Inner Classes</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">addNotify</b> (java.awt.dnd.peer.DropTargetContextPeer <i class="parameter">dtcp</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">dropComplete</b> (boolean <i class="parameter">success</i>) throws InvalidDnDOperationException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Component <b class="function">getComponent</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public DropTarget <b class="function">getDropTarget</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">removeNotify</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">acceptDrag</b> (int <i class="parameter">dragOperation</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">acceptDrop</b> (int <i class="parameter">dropOperation</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected java.awt.datatransfer.Transferable <b class="function">createTransferableProxy</b> (java.awt.datatransfer.Transferable <i class="parameter">t</i>, boolean <i class="parameter">local</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected java.awt.datatransfer.DataFlavor[ ] <b class="function">getCurrentDataFlavors</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected java.util.List <b class="function">getCurrentDataFlavorsAsList</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected int <b class="function">getTargetActions</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected java.awt.datatransfer.Transferable <b class="function">getTransferable</b> () throws InvalidDnDOperationException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected boolean <b class="function">isDataFlavorSupported</b> (java.awt.datatransfer.DataFlavor <i class="parameter">df</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">rejectDrag</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">rejectDrop</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">setTargetActions</b> (int <i class="parameter">actions</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">DropTargetDragEvent.DropTargetDragEvent(), DropTargetDropEvent.DropTargetDropEvent(), DropTargetEvent.DropTargetEvent()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">DropTarget.{createDropTargetContext(), getDropTargetContext()}, DropTargetEvent.getDropTargetContext()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">DropTargetEvent.context</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DropTargetContext.TransferableProxy</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-1771"></a>
<p>  This protected inner class is used by the protected
  <tt class="literal">createTransferableProxy()</tt> method of
  <tt class="literal">DropTargetContext</tt>.  Applications never need to use
  this class.  This class is not defined by the JFC drag-and-drop
  specification and its inclusion in the public API of
  <tt class="literal">java.awt.dnd</tt> was probably unintentional.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">protected class <b class="classname">DropTargetContext.TransferableProxy</b> implements java.awt.datatransfer.Transferable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Transferable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">getTransferData</b> (java.awt.datatransfer.DataFlavor <i class="parameter">df</i>) throws java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.awt.datatransfer.DataFlavor[ ] <b class="function">getTransferDataFlavors</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isDataFlavorSupported</b> (java.awt.datatransfer.DataFlavor <i class="parameter">flavor</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected boolean <b class="function">isLocal</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected java.awt.datatransfer.Transferable <b class="function">transferable</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DropTargetDragEvent</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i>serializable event</i></b></font></td>
</tr>
</table>
<a name="INDEX-1772"></a>
<p> 
  This event is fired by a <tt class="literal">DropTargetContext</tt> and
  passed to the <tt class="literal">dragEnter()</tt>,
  <tt class="literal">dragOver()</tt>, and
  <tt class="literal">dropActionChanged()</tt> methods of a
  <tt class="literal">DropTargetListener</tt>.  Each of these methods should use
  <tt class="literal">getDropAction()</tt>,
  <tt class="literal">getCurrentDataFlavors()</tt>, and related methods to
  check whether the drop target knows how to handle the drag action and
  is able to interpret the data formats offered.  If so, the method should
  call <tt class="literal">acceptDrag()</tt>.  If not, it should call
  <tt class="literal">rejectDrag()</tt>.  See
  <tt class="literal">DropTargetListener</tt> for further details.</p>
<a name="INDEX-1773"></a>
<a name="INDEX-1774"></a>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DropTargetDragEvent</b> extends DropTargetEvent {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DropTargetDragEvent</b> (DropTargetContext <i class="parameter">dtc</i>, Point <i class="parameter">cursorLocn</i>, int <i class="parameter">dropAction</i>, int <i class="parameter">srcActions</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.awt.datatransfer.DataFlavor[ ] <b class="function">getCurrentDataFlavors</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.util.List <b class="function">getCurrentDataFlavorsAsList</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getDropAction</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Point <b class="function">getLocation</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getSourceActions</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">acceptDrag</b> (int <i class="parameter">dragOperation</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isDataFlavorSupported</b> (java.awt.datatransfer.DataFlavor <i class="parameter">df</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">rejectDrag</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.util.EventObject(Serializable)-->DropTargetEvent-->DropTargetDragEvent</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">DropTarget.{dragEnter(), dragOver(), dropActionChanged()}, DropTargetListener.{dragEnter(), dragOver(), dropActionChanged()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DropTargetDropEvent</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i>serializable event</i></b></font></td>
</tr>
</table>
<a name="INDEX-1775"></a>
<p>  This event is fired by a <tt class="literal">DropTargetContext</tt> and 
  delivered to the <tt class="literal">drop()</tt> method of a
  <tt class="literal">DropTargetListener</tt>.  This method should call
  <tt class="literal">getDropAction()</tt> to ensure that it is able to
  perform the requested action.  It should also call
  <tt class="literal">getCurrentDataFlavors()</tt> or
  <tt class="literal">isDataFlavorSupported()</tt> to ensure that it can
  interpret the data that is transferred.  If it cannot perform
  the action or interpret the data, it should call
  <tt class="literal">rejectDrag()</tt> and return.</p>
<a name="INDEX-1776"></a>
<p>  If the <tt class="literal">DropTargetListener</tt> can perform the action
  and interpret the data, it should accept the drop.  It does this in a
  four-step process.  First, it calls <tt class="literal">acceptDrop()</tt>
  to signal that it accepts the drop.  Second, it calls
  <tt class="literal">getTransferable()</tt> to obtain a
  <tt class="literal">java.awt.datatransfer.Transferable</tt> object.  Third,
  it calls the <tt class="literal">getTransferData()</tt> method of 
  <tt class="literal">Transferable</tt> to actually transfer the data.</p>
<p>  Finally, if the data transfer fails for any reason, the
  <tt class="literal">DropTargetListener</tt> should pass
  <tt class="literal">false</tt> to the <tt class="literal">dropComplete()</tt>
  method of the <tt class="literal">DropTargetDropEvent</tt>, indicating that
  the drop action is complete but that it was not successful.  If the
  data transfer is successful and the data has been safely and
  completely transferred, the <tt class="literal">drop()</tt> method
  should pass <tt class="literal">true</tt> to the
  <tt class="literal">dropComplete()</tt> method.  This notifies the system
  that the data has been successfully transferred.  The notification
  is passed on to the <tt class="literal">DragSourceListener</tt>, which
  can then complete its part of the action.  For example, if the
  action is <tt class="literal">ACTION_MOVE</tt>, the
  <tt class="literal">DragSourceListener</tt> deletes its copy of the data
  once it receives notification that the
  <tt class="literal">DropTargetListener</tt> has successfully copied it.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DropTargetDropEvent</b> extends DropTargetEvent {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DropTargetDropEvent</b> (DropTargetContext <i class="parameter">dtc</i>, Point <i class="parameter">cursorLocn</i>, int <i class="parameter">dropAction</i>, int <i class="parameter">srcActions</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DropTargetDropEvent</b> (DropTargetContext <i class="parameter">dtc</i>, Point <i class="parameter">cursorLocn</i>, int <i class="parameter">dropAction</i>, int <i class="parameter">srcActions</i>, boolean <i class="parameter">isLocal</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.awt.datatransfer.DataFlavor[ ] <b class="function">getCurrentDataFlavors</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.util.List <b class="function">getCurrentDataFlavorsAsList</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getDropAction</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isLocalTransfer</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Point <b class="function">getLocation</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getSourceActions</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.awt.datatransfer.Transferable <b class="function">getTransferable</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">acceptDrop</b> (int <i class="parameter">dropAction</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">dropComplete</b> (boolean <i class="parameter">success</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isDataFlavorSupported</b> (java.awt.datatransfer.DataFlavor <i class="parameter">df</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">rejectDrop</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.util.EventObject(Serializable)-->DropTargetEvent-->DropTargetDropEvent</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">DropTarget.drop(), DropTargetListener.drop()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DropTargetEvent</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i>serializable event</i></b></font></td>
</tr>
</table>
<a name="INDEX-1777"></a>
<p>  This class is the superclass of both
  <tt class="literal">DropTargetDragEvent</tt> and
  <tt class="literal">DropTargetDropEvent</tt>.
  <tt class="literal">getDropTargetContext()</tt> returns the 
  <tt class="literal">DropTargetContext</tt> object that generated the event, 
  and <tt class="literal">getSource()</tt> returns the corresponding
  <tt class="literal">DropTarget</tt> object.
  Applications rarely need to use these methods, however.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">DropTargetEvent</b> extends java.util.EventObject {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">DropTargetEvent</b> (DropTargetContext <i class="parameter">dtc</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public DropTargetContext <b class="function">getDropTargetContext</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected DropTargetContext <b class="function">context</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.util.EventObject(Serializable)-->DropTargetEvent</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">DropTargetDragEvent, DropTargetDropEvent</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">DropTarget.dragExit(), DropTargetListener.dragExit()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>DropTargetListener</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i>event listener</i></b></font></td>
</tr>
</table>
<a name="INDEX-1778"></a>
<p>  This interface is implemented by objects that want to be able to
  receive dropped data.  Its methods are invoked by a
  <tt class="literal">DropTargetContext</tt> at various interesting points in
  the drag-and-drop process.  The methods of this interface are passed a
  <tt class="literal">DropTargetEvent</tt> or one of its subclasses, a
  <tt class="literal">DropTargetDragEvent</tt> or a
  <tt class="literal">DropTargetDropEvent</tt>.  The methods are:
<a name="INDEX-1779"></a>
</p>

  <dl>
<dt>
<b><tt class="literal">dragEnter()</tt></b>
</dt>
<dd>
<p>	  Invoked when a drag enters the <tt class="literal">Component</tt>
	  associated with the <tt class="literal">DropTargetListener</tt>.
	  This method should call <tt class="literal">getDropAction()</tt> to
	  determine whether it can perform the requested action and
	  either <tt class="literal">getCurrentDataFlavors()</tt> or
	  <tt class="literal">isDataFlavorSupported()</tt> to determine
	  whether it can interpret the data that is being offered.  If
	  so, it should call the <tt class="literal">acceptDrag()</tt> method
	  of the event object.  If not, it should call the
	  <tt class="literal">rejectDrag()</tt> method.
	</p>
<p>	  If this method accepts the drag, it may also perform or
	  initiate custom graphical drag under effects on the
	  associated <tt class="literal">Component</tt>.  These effects
	  provide feedback to the user that the drop target
	  <tt class="literal">Component</tt> is interested in receiving the
	  drop.
	</p>
</dd>
<a name="INDEX-1780"></a>
<dt>
<b><tt class="literal">dragExit()</tt></b>
</dt>
<dd>
<p>	  Called when a previously accepted drag leaves the
	  <tt class="literal">DropTarget</tt>.  If the
	  <tt class="literal">dragEnter()</tt> method performed any custom
	  drag under effects, this method should undo them.
	</p>
</dd>
<a name="INDEX-1781"></a>
<dt>
<b><tt class="literal">dragOver()</tt></b>
</dt>
<dd>
<p>	  Invoked continuously while the mouse pointer remains over the
	  <tt class="literal">DragTarget</tt>.  In most cases, this method need
	  not do anything.  If the 
	  <tt class="literal">DropTarget</tt> is a complex one that is capable
	  of accepting drags in some regions but not in other regions,
	  this method should behave like
	  <tt class="literal">dragEnter()</tt> and call the
	  <tt class="literal">acceptDrag()</tt> or
	  <tt class="literal">rejectDrag()</tt> methods of the event object to
	  inform the system whether a drag is possible at the current
	  location.  In this case, this method is also responsible for
	  any custom drag under graphical effects.
	</p>
</dd>
<a name="INDEX-1782"></a>
<dt>
<b><tt class="literal">drop()</tt></b>
</dt>
<dd>
<p>	  Called when data is dropped over the
	  <tt class="literal">DropTarget</tt>.  This method should determine
	  whether the <tt class="literal">DropTarget</tt> can accept the drop
	  and call the <tt class="literal">acceptDrop()</tt> or
	  <tt class="literal">rejectDrop()</tt> method of the
	  <tt class="literal">DropTargetDropEvent</tt> event object.  If it
	  accepts the drop, it must then transfer the data, perform the
	  requested action, and call
	  <tt class="literal">dropComplete()</tt>.  See
	  <tt class="literal">DropTargetDropEvent</tt> for details on this
	  process.  This method need not undo your drag under effects;
	  the <tt class="literal">dragExit()</tt> method is invoked
	  for this purpose.
	</p>
</dd>
<a name="INDEX-1783"></a>
<dt>
<b><tt class="literal">dropActionChanged()</tt></b>
</dt>
<dd>
<p>	  Invoked when the user changes the requested action in
	  mid-drag.  This typically occurs if the user changes the
	  modifier keys currently held down.  This method should behave
	  like <tt class="literal">dragEnter()</tt> to evaluate whether the
	  drop target can perform the requested action on the offered
	  data and then call <tt class="literal">acceptDrag()</tt> or
	  <tt class="literal">rejectDrag()</tt> and begin or end custom
	  drag under effects, as appropriate.
	</p>
</dd>
</dl>

<p>
<a name="INDEX-1784"></a>
</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">DropTargetListener</b> extends java.util.EventListener {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">dragEnter</b> (DropTargetDragEvent <i class="parameter">dtde</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">dragExit</b> (DropTargetEvent <i class="parameter">dte</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">dragOver</b> (DropTargetDragEvent <i class="parameter">dtde</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">drop</b> (DropTargetDropEvent <i class="parameter">dtde</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">dropActionChanged</b> (DropTargetDragEvent <i class="parameter">dtde</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(DropTargetListener(java.util.EventListener))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">DropTarget</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">DropTarget.{addDropTargetListener(), DropTarget(), removeDropTargetListener()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>InvalidDnDOperationException</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i>serializable unchecked</i></b></font></td>
</tr>
</table>
<a name="INDEX-1785"></a>
<p> 
  Signals that a
  misconfiguration or error of some sort prevents a drag-and-drop
  operation from completing normally.
  This exception is thrown by methods throughout the
  <tt class="literal">java.awt.dnd</tt> package.  </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">InvalidDnDOperationException</b> extends java.lang.IllegalStateException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InvalidDnDOperationException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">InvalidDnDOperationException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->RuntimeException-->java.lang.IllegalStateException-->InvalidDnDOperationException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">Toolkit.createDragSourceContextPeer(), DragGestureEvent.startDrag(), DragSource.startDrag(), DropTargetContext.{dropComplete(), getTransferable()}, java.awt.dnd.peer.DragSourceContextPeer.{setCursor(), startDrag()}, java.awt.dnd.peer.DropTargetContextPeer.getTransferable()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>MouseDragGestureRecognizer</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.dnd</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>  This class is a <tt class="literal">DragGestureRecognizer</tt> that is
  designed to recognize mouse gestures (as opposed, for example, to
  keyboard gestures).  Like <tt class="literal">DragGestureRecognizer</tt>,
  this is an abstract class and cannot be instantiated.  The
  <tt class="literal">createDefaultDragGestureRecognizer()</tt> method of
  <tt class="literal">DragSource</tt> returns a platform-specific concrete
  subclass of this class.  Most applications do not need to use this
  class.  Applications that want to support custom drag-and-drop
  gestures may find it convenient to subclass this class.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">MouseDragGestureRecognizer</b> extends DragGestureRecognizer implements java.awt.event.MouseListener, java.awt.event.MouseMotionListener {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">MouseDragGestureRecognizer</b> (DragSource <i class="parameter">ds</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">MouseDragGestureRecognizer</b> (DragSource <i class="parameter">ds</i>, Component <i class="parameter">c</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">MouseDragGestureRecognizer</b> (DragSource <i class="parameter">ds</i>, Component <i class="parameter">c</i>, int <i class="parameter">act</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">MouseDragGestureRecognizer</b> (DragSource <i class="parameter">ds</i>, Component <i class="parameter">c</i>, int <i class="parameter">act</i>, DragGestureListener <i class="parameter">dgl</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing MouseListener</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">mouseClicked</b> (java.awt.event.MouseEvent <i class="parameter">e</i>);</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">mouseEntered</b> (java.awt.event.MouseEvent <i class="parameter">e</i>);</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">mouseExited</b> (java.awt.event.MouseEvent <i class="parameter">e</i>);</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">mousePressed</b> (java.awt.event.MouseEvent <i class="parameter">e</i>);</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">mouseReleased</b> (java.awt.event.MouseEvent <i class="parameter">e</i>);</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing MouseMotionListener</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">mouseDragged</b> (java.awt.event.MouseEvent <i class="parameter">e</i>);</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">mouseMoved</b> (java.awt.event.MouseEvent <i class="parameter">e</i>);</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Methods Overriding DragGestureRecognizer</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">registerListeners</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected void <b class="function">unregisterListeners</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->DragGestureRecognizer-->MouseDragGestureRecognizer(java.awt.event.MouseListener(java.util.EventListener),java.awt.event.MouseMotionListener(java.util.EventListener))</tt>
</p>
</div>
<a name="INDEX-1786"></a>
<a name="INDEX-1787"></a>
<a name="INDEX-1788"></a>
<a name="INDEX-1789"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch11_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch13_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">11.1. The java.awt.datatransfer Package</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">13. The java.awt.dnd.peer Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
