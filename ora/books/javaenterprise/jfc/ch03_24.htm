<html>
<head>
<title>Custom Components (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Custom Components">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_23.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_23.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_01.htm">Chapter 3: Swing

Programming Topics</a></td><td align="right" valign="top" width="172"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">3.24. Custom Components</h2>
<a name="INDEX-707"></a>
<a name="INDEX-708"></a>

<p>We'll conclude this survey of Swing features with a quick look at
      what it takes to write a custom Swing component.  Creating a
      custom component is a matter of subclassing an existing
      component and adding the new functionality you desire.  Sometimes
      this is a simple job of adding a minor new feature to an
      existing component.  At other times, you may want to create an entirely
      new component from scratch.  In this case, you'll probably be 
      subclassing <tt class="literal">JComponent</tt>, which is a bit more
      complicated.  The following sections briefly
      explain the various things you'll need to consider when creating
      such a custom component.  The best way to learn to write your own
      Swing-style components is to study the source code of Swing
      components, and since Sun makes this source code freely available,
      I encourage you to examine it.</p>

<h3 class="sect2">3.24.1. Properties</h3>
<a name="INDEX-709"></a>

<p>You need to decide what properties you want your component to 
	export and
	define accessor methods that allow them to be set and queried.
	If your component represents or displays some kind of
	nontrivial data structure, consider representing the data in a
	separate model object.  Define an interface for the model and a
	default implementation of the interface.</p>

<a name="INDEX-710"></a>
<a name="INDEX-711"></a>

<p>If you think that other objects may be interested in property
	changes on your component, have the <tt class="literal">set</tt>
	methods for those properties generate
	the events 
<tt class="literal">PropertyChangeEvent</tt> or
	<tt class="literal">ChangeEvent</tt> and include appropriate
	event listener registration methods in your component.  This
	kind of notification is often important if you follow the Swing
	architecture and divide the functionality of your component
	among a component object, a model object, and a UI delegate
	object.</p>

<p>When a property is set on your component, the component may need
	to be redrawn or resized as a result.  You must keep this in
	mind when you write the property accessor methods for your
	component.  For example, if you define a
	<tt class="literal">setColor()</tt> method, this method should
	call <tt class="literal">repaint()</tt> to request that the component
	be repainted.  (Painting the component is a separate topic that
	is discussed later.)  If you define a
	<tt class="literal">setFont()</tt> method and a change in font size
	causes the component to require more (or less) space on the
	screen, you should call <tt class="literal">revalidate()</tt> to
	request a relayout of the GUI.  Note that the
	<tt class="literal">repaint()</tt> and <tt class="literal">revalidate()</tt>
	methods add a repaint or relayout request to a queue and return
	right away.  Therefore, you may call these methods freely without
	fear of inefficiency.</p>
<a name="INDEX-712"></a>

<h3 class="sect2">3.24.2. Events</h3>

<p>You need to decide what kind of events your component generates.  
	You can reuse existing event and listener classes, if they suit 
	your purposes, or you can define your own.  Add event listener 
	registration and
	deregistration methods in your component.  You need to keep
	track of the registered listeners, and you may find the
	<tt class="literal">javax.swing.event.EventListenerList</tt> helpful
	for this task.  For each event listener registration method, it
	is common practice to define a protected method to generate and
	fire an appropriate event to all registered listeners.  For
	example, if your component has a public
	<tt class="literal">addActionListener()</tt> method, you may
	find it useful to define a protected
	<tt class="literal">fireActionEvent()</tt> method as well.  This
	method calls the <tt class="literal">actionPerformed()</tt> method
	of every registered <tt class="literal">ActionListener</tt> object.</p>

<a name="INDEX-713"></a>


<h3 class="sect2">3.24.3. Constructors</h3>
<a name="INDEX-714"></a>

<p>It is customary to provide a no-argument constructor for a
	component.  This is helpful if you want your component to work
	with GUI builder tools, for example.  In addition, 
	think about how you expect programmers to use your
	component.  If there are a few properties that are likely to
	be set in most cases, you should define a constructor that 
	takes values for these properties as arguments, to make the
	component easier to use.</p>

<h3 class="sect2">3.24.4. Drawing the Component</h3>

<p>Almost every component has some visual appearance.  When you
	define a custom component, you have to write the code that draws
	the component on the screen.  There are several ways you can do
	this.  If you are creating an AWT component, override the
	<tt class="literal">paint()</tt> method and use the
	<tt class="literal">Graphics</tt> object that is passed to it to do
	whatever drawing you need to do.  </p>

<a name="INDEX-715"></a>

<p>For Swing components, the <tt class="literal">paint()</tt> method is
	also responsible for drawing the border and the children of your
	component, so you should not override it directly.  Instead,
	override the <tt class="literal">paintComponent()</tt> method.  This
	method is passed a <tt class="literal">Graphics</tt> object, just as
	the <tt class="literal">paint()</tt> method is, and you use this
	<tt class="literal">Graphics</tt> object to do any drawing you want.
	As we'll see in <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_01.htm">Chapter 4, "Graphics with AWT

and Java 2D"</a>, you can cast this
	<tt class="literal">Graphics</tt> object to a
	<tt class="literal">Graphics2D</tt> object if you want to use Java 2D
	features when drawing your component.  Keep in mind, however,
	that a Swing component can be assigned an arbitrary border.  Your
	<tt class="literal">paintComponent()</tt> method should check the size
	of the border and take this value into account when 

drawing.</p>


<a name="INDEX-716"></a>
<a name="INDEX-717"></a>

<p>When you define a custom component, you typically have only one
	look-and-feel in mind, so you can hardcode this look-and-feel
	as part of the component class itself.  If you want
	your component to support the Swing pluggable look-and-feel
	architecture, however, you need to separate the drawing and
	event-handling tasks out into a separate
	<tt class="literal">javax.swing.plaf.ComponentUI</tt> object.
	If you do this, you should not override your component's
	<tt class="literal">paintComponent()</tt> method.  Instead, put
	the painting functionality in the <tt class="literal">paint()</tt>
	method of the <tt class="literal">ComponentUI</tt> implementation.
	In order to make this work, you have to override the
	<tt class="literal">getUIClassID()</tt>, <tt class="literal">getUI()</tt>,
	<tt class="literal">setUI()</tt>, and <tt class="literal">updateUI()</tt>
	methods of <tt class="literal">JComponent</tt>.</p>

<h3 class="sect2">3.24.5. Handling Events</h3>
<a name="INDEX-718"></a>
<a name="INDEX-719"></a>

<p>Most components have some kind of interactive behavior and
	respond to user-input events such as mouse clicks and drags and
	key presses.  When you are creating a custom component, you must
	write the code that handles these events.  The Swing event-handling model was discussed in <a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_01.htm">Chapter 2, "Swing and AWTArchitecture"</a>.
	Recall that the high-level way to handle input events is to
	register appropriate event listeners, such as
	<tt class="literal">MouseListener</tt>,
	<tt class="literal">MouseMotionListener</tt>,
	<tt class="literal">KeyListener</tt>, and
	<tt class="literal">FocusListener</tt> on your component.  If you are
	using a separate UI delegate object, this object should
	implement the appropriate listener interfaces, and it should
	register itself with the appropriate event registration methods
	on the component when its <tt class="literal">installUI()</tt> method
	is called.</p>

<a name="INDEX-720"></a>
<a name="INDEX-721"></a>
<a name="INDEX-722"></a>

<p>If you are not using a UI delegate, your component class
	can handle events at the lower level discussed in <a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_01.htm">Chapter 2, "Swing and AWTArchitecture"</a>.  To do this, you override methods such
	as <tt class="literal">processMouseEvent()</tt>,
	<tt class="literal">processMouseMotionEvent()</tt>,
	<tt class="literal">processKeyEvent()</tt>, and
	<tt class="literal">processFocusEvent()</tt>.  In this case, be sure to
	register your interest in receiving events of the appropriate type by
	calling <tt class="literal">enableEvents()</tt> in your component's
	initialization code.</p>

<a name="INDEX-723"></a>
<a name="INDEX-724"></a>


<h3 class="sect2">3.24.6. Component Size</h3>

<p>Most components have a natural or preferred size that often
	depends on the settings of various component properties.  Many
	components also have a minimum size below which they cannot
	adequately display themselves.  And some components have a
	maximum size they wish to enforce.  You must write the methods
	that compute and return these sizes.</p>

<p>If you are using a UI delegate object, you should implement the
	<tt class="literal">getMinimumSize()</tt>,
	<tt class="literal">getPreferredSize()</tt>, and
	<tt class="literal">getMaximumSize()</tt> methods in the delegate.
	The default <tt class="literal">JComponent</tt> methods call the
	delegate methods to determine these sizes if the programmer
	using the component has not
	overridden the minimum, preferred, or maximum sizes with her
	own specifications.</p>

<a name="INDEX-725"></a>
<a name="INDEX-726"></a>
<a name="INDEX-727"></a>

<p>If you are not using a UI delegate object, you should
	override these three methods in the component itself.  Ideally,
	your methods should respect any sizes passed to
	<tt class="literal">setMinimumSize()</tt>,
	<tt class="literal">setPreferredSize()</tt> and
	<tt class="literal">setMaximumSize()</tt>.  Unfortunately, the values
	set by these methods are stored in <tt class="literal">private</tt>
	fields of <tt class="literal">JComponent</tt>, so you typically
	have to override both the <tt class="literal">get</tt> and the
	<tt class="literal">set</tt> methods.</p>

<h3 class="sect2">3.24.7. Accessibility</h3>
<a name="INDEX-728"></a>
<a name="INDEX-729"></a>

<p>It is a good idea to make your component accessible.  In order
	to do this, your component must implement the
	<tt class="literal">javax.accessibility.Accessible</tt> interface and
	its <tt class="literal">getAccessibleContext()</tt> method.
	This method must return an <tt class="literal">AccessibleContext</tt>
	object that is customized for your component.  You typically
	implement <tt class="literal">AccessibleContext</tt> as an inner class
	of the component by extending
	<tt class="literal">JComponent.AccessibleJComponent</tt> or some
	subclass of that class.  Depending
	on your component, you may need to implement various other
	accessibility interfaces on this inner class as well.  Studying
	the accessibility code in existing Swing 

components can be very
	helpful in learning how to write your own accessible 

components.
	You might start, for example, with the source code for
	<tt class="literal">AbstractButton.AccessibleAbstractButton</tt>.</p>

<a name="INDEX-730"></a>
<a name="INDEX-731"></a>

<h3 class="sect2">3.24.8. Miscellaneous Methods</h3>

<p>
<tt class="literal">JComponent</tt> defines a number of other methods
	that you can optionally override to change aspects of a
	component's behavior.  If you take a look at the list of
	properties defined by the <tt class="literal">JComponent</tt> API,
	you'll notice that a number of these are read-only properties
	(i.e., they do not define <tt class="literal">set</tt> methods).
	The only way to set the value returned by one of 
	these methods is to subclass the method.
	In general, when you see a read-only property, you should
	consider it a candidate for subclassing.  Here are a few
	methods of particular interest:</p>

<a name="INDEX-732"></a>
<a name="INDEX-733"></a>
<dl>
<dt>
<b><tt class="literal">isOpaque()</tt></b>
</dt>
<dd>

<p>If the component always fills its entire background, this
	      method should return <tt class="literal">true</tt>.  If a
	      component can guarantee that it completely paints itself,
	      Swing can perform some drawing optimizations.  <tt class="literal">JComponent</tt> actually does define a
	      
<tt class="literal">setOpaque()</tt> method for this property,
	      but your custom component may choose to ignore
	      <tt class="literal">setOpaque()</tt> and override
	      <tt class="literal">isOpaque()</tt>.</p>
</dd>
<a name="INDEX-734"></a>
<dt>
<b><tt class="literal">isOptimizedDrawingEnabled()</tt></b>
</dt>
<a name="INDEX-735"></a>
<dd>

<p>If your component has children and allows those children
	      to overlap, it should override this method to return
	      <tt class="literal">false</tt>.  Otherwise, leave it as is.</p>
</dd>
<dt>
<b><tt class="literal">isFocusTraversable()</tt></b>
</dt>
<a name="INDEX-736"></a>
<dd>

<p>If your component wants to be included in focus traversal,
	      it should override this method to return
	      <tt class="literal">true</tt>.  If your component does not want
	      to be included in the keyboard navigation system, this method
	      should return <tt class="literal">false</tt>.</p>
</dd>
<dt>
<b><tt class="literal">isFocusCycleRoot()</tt></b>
</dt>
<a name="INDEX-737"></a>
<dd>

<p>If your component has children and wants to cycle focus
	      among them, override this method to return
	      <tt class="literal">true</tt>. </p>
</dd>
<dt>
<b><tt class="literal">isManagingFocus()</tt></b>
</dt>
<a name="INDEX-738"></a>
<a name="INDEX-739"></a>
<dd>

<p>If your component needs to receive the <b class="emphasis-bold">Tab</b> and <b class="emphasis-bold">Shift-Tab</b> key events that are
	      normally handled by the focus manager, override this
	      method to return <tt class="literal">true</tt>.  If you do, 
	      the focus manager uses 
	      <b class="emphasis-bold">Ctrl-Tab</b>
	      instead. </p>
</dd>
</dl>
<a name="INDEX-740"></a>
<a name="INDEX-741"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_23.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_23.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.23. Accessibility</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4. Graphics with AWT

and Java 2D</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
