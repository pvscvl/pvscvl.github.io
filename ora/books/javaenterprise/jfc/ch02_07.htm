<html>
<head>
<title>Swing Component Architecture (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Swing Component Architecture">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_01.htm">Chapter 2: Swing and AWTArchitecture</a></td><td align="right" valign="top" width="172"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">2.7. Swing Component Architecture</h2>
<a name="INDEX-395"></a>
<a name="INDEX-396"></a>
<a name="INDEX-397"></a>

<p>So far, we have treated components as single,
      self-contained GUI building blocks.  And indeed, components can be
      written to be entirely self-contained.  However, neither AWT nor
      Swing components are actually self-contained.  As I mentioned
      earlier, each AWT component is simply a frontend for an underlying
      native user-interface object.  AWT delegates all the display and event
      processing--that is, the look-and-feel--to these native GUI
      elements.</p>

<a name="INDEX-398"></a>
<a name="INDEX-399"></a>

<p>Swing components are not self-contained either.  Most Swing
	components rely on two other objects: a user-interface (UI) delegate
	object and a model object.  Swing supports a pluggable
	look-and-feel architecture, which means that a Swing application
	can control the appearance and behavior of its user-interface.
	Thus, a Swing application can be displayed in a platform-independent
	way or in a way that mimics the native look-and-feel of the 
	underlying platform, for example.  In order
	to implement the pluggable look-and-feel architecture, every Swing
	component must delegate its display and event-handling
	functions to a separate object: the UI delegate.  Fortunately, you
	can use Swing without ever thinking about the pluggable
	look-and-feel.  That's because, when 
	you create a Swing component, an appropriate
	UI delegate object is automatically created for it.</p>

<a name="INDEX-400"></a>
<a name="INDEX-401"></a>
<a name="INDEX-402"></a>

<p>The model object for a Swing component 
	is responsible for storing the state of the
	component.  For example, the <tt class="literal">JToggleButton</tt> uses
	an implementation of the <tt class="literal">ButtonModel</tt>
	interface as its model.  This <tt class="literal">ButtonModel</tt>
	object remembers whether the button is currently selected.
	As another example, 
	the <tt class="literal">JScrollBar</tt>, <tt class="literal">JSlider</tt>, and
	<tt class="literal">JProgressBar</tt> components use a
	<tt class="literal">BoundedRangeModel</tt> object to keep track of their
	state.  This state includes minimum, maximum, and current values.</p>

<a name="INDEX-403"></a>

<p>Most Swing components automatically create the model objects they
	rely on, so you can use these components without ever worrying
	about model objects.  When working with more complicated
	components, however, models become more important.  For example,
	the <tt class="literal">JTree</tt> component uses a
	
<tt class="literal">javax.swing.tree.TreeModel</tt> object to represent
	the data it is to display.  The <tt class="literal">JTree</tt> component
	can be used to display many kinds of hierarchically structured
	data.  <tt class="literal">JTree</tt> does not require you to convert your
	data into some predefined data format, however.  Instead, you
	implement the <tt class="literal">TreeModel</tt>
	interface in a way that allows <tt class="literal">JTree</tt> to
	understand the data.  For example, to use a
	<tt class="literal">JTree</tt> component to display files in the
	filesystem, you might define a <tt class="literal">FileTreeModel</tt>
	class that implements the <tt class="literal">TreeModel</tt> interface
	on top of the capabilities of the <tt class="literal">java.io.File</tt>
	class.  Or, if you want to use
	<tt class="literal">JTree</tt> to display the structure of
	an XML document, you might create an implementation of
	<tt class="literal">TreeModel</tt> that works with the parse tree
	returned by an XML parsing class.</p>

<a name="INDEX-404"></a>
<a name="INDEX-405"></a>
<a name="INDEX-406"></a>

<p>The <tt class="literal">JTable</tt> component is another for which the
	use of a separate model object is particularly important.  
	<tt class="literal">JTable</tt> can be used to display a tabular view
	of data, even when that data is not tabular by nature.  To do
	so, you implement the 
	<tt class="literal">javax.

swing.table.TableModel</tt> interface
	to provide a neat, tabular view of the data.</p>

<p>One advantage of this model object approach, where the actual 
	data is separated from the component's view of that data, is
	that you can define multiple views of the same data.  For
	example, if you have a large set of tabular data that implements
	the <tt class="literal">TableModel</tt> interface, you
	can have two or more <tt class="literal">JTable</tt> components that
	display different portions of that data at the same time.
	When you are writing an application that manipulates complex 
	data structures, you should 
	consider designing these structures so that they implement
	appropriate Swing model interfaces.  If you do this, you'll be
	able to trivially display your data using Swing components. See <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_01.htm">Chapter 3, "Swing

Programming Topics"</a>, for more information about implementing <tt class="literal">TreeModel</tt> and <tt class="literal">TableModel</tt>. </p>

<a name="INDEX-407"></a>
<a name="INDEX-408"></a>
<a name="INDEX-409"></a>
<a name="INDEX-410"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.6. Event Handling</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3. Swing

Programming Topics</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
