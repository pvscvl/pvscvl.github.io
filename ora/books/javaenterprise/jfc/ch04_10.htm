<html>
<head>
<title>Buffered Images (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Buffered Images">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_09.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_01.htm">Chapter 4: Graphics with AWT

and Java 2D</a></td><td align="right" valign="top" width="172"><a href="ch04_11.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_11.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">4.10. Buffered Images</h2>
<a name="INDEX-975"></a>
<a name="INDEX-976"></a>

<p>Java 2D introduces a new <tt class="literal">java.awt.Image</tt>
      subclass, <tt class="literal">java.awt.image.BufferedImage</tt>.
      <tt class="literal">BufferedImage</tt> represents image data that is
      present in memory, unlike <tt class="literal">Image</tt>, which typically
      represents streaming image data being transferred over a network.
      Java 2D also provides powerful image-processing classes that
      operate on <tt class="literal">BufferedImage</tt> objects and
      are much simpler to use than the <tt class="literal">ImageFilter</tt> class of
      Java 1.0.</p>

<a name="INDEX-977"></a>

<p>As we discussed at the beginning of the chapter, Java knows how to
	read images in commonly used formats from files and URLs.  You
	can use the <tt class="literal">getImage()</tt> method of either
	<tt class="literal">Applet()</tt> or <tt class="literal">Toolkit</tt> to
	retrieve an <tt class="literal">Image</tt>, but the image data may
	not have been fully read when the method returns.  If you want to
	ensure that the image is fully loaded, you have to use a
	<tt class="literal">java.awt.MediaTracker</tt>.  Note
	also that both of these methods return read-only
	<tt class="literal">Image</tt> objects, rather than read/write
	<tt class="literal">BufferedImage</tt> objects.  </p>

<a name="INDEX-978"></a>
<a name="INDEX-979"></a>
<a name="INDEX-980"></a>

<p>If you are writing a Swing application, an easy way to load an
	image is with the <tt class="literal">javax.swing.ImageIcon</tt> class.  
	This
	class automatically waits until the image is fully loaded.
	For example:
</p>

<blockquote>
<pre class="programlisting">Image myimage = new javax.swing.ImageIcon("myimage.gif").getImage();</pre>
</blockquote>

<p>
	As useful as <tt class="literal">ImageIcon</tt> is, its
	<tt class="literal">getImage()</tt> method still returns an
	<tt class="literal">Image</tt> object, not a
	<tt class="literal">BufferedImage</tt> object.</p>

<a name="INDEX-981"></a>

<h3 class="sect2">4.10.1. Obtaining a BufferedImage</h3>
<a name="INDEX-982"></a>
<a name="INDEX-983"></a>

<p>To create an empty <tt class="literal">BufferedImage</tt> object, call
	the <tt class="literal">createImage()</tt> method of a
	<tt class="literal">Component</tt>.  This
	method was first introduced in Java 1.0; it returns an
	<tt class="literal">Image</tt> object.  In Java 1.2, however, the
	returned <tt class="literal">Image</tt> object is always an instance
	of <tt class="literal">BufferedImage</tt>, so you can safely cast it.
	After you have created an empty <tt class="literal">BufferedImage</tt>,
	you can call its <tt class="literal">createGraphics()</tt> method to
	obtain a <tt class="literal">Graphics2D</tt> object.  
	Then use this <tt class="literal">Graphics2D</tt> object to draw image data
	from an <tt class="literal">Image</tt> object into your
	<tt class="literal">BufferedImage</tt> object.  For example:
<a name="INDEX-984"></a>
</p>

<blockquote>
<pre class="programlisting">javax.swing.JFrame f;                  // Initialized elsewhere

// Create an image, and wait for it to load
Image i = javax.swing.ImageIcon("myimage.gif").getImage();

// Create a BufferedImage of the same size as the Image
BufferedImage bi = (BufferedImage)f.createImage(i.getWidth(f),i.getHeight(f));



Graphics2D g = bi.createGraphics();    // Get a Graphics2D object
g.drawImage(i, 0, 0, f);      // Draw the Image data into the BufferedImage</pre>
</blockquote>

<p>
        Note that we must pass an <tt class="literal">ImageObserver</tt>
	object to the <tt class="literal">getWidth()</tt>,
	<tt class="literal">getHeight()</tt> and
	<tt class="literal">drawImage()</tt> methods in this code.  All AWT
	components implement <tt class="literal">ImageObserver</tt>, so we use our
	<tt class="literal">JFrame</tt> for this purpose.  Although we could
	have gotten away with passing <tt class="literal">null</tt>, this is
	exactly the sort of complexity that the
	<tt class="literal">BufferedImage</tt> API allows us to avoid.</p>

<a name="INDEX-985"></a>
<a name="INDEX-986"></a>


<p>Sun's implementation of Java 1.2 ships with a package named
	<tt class="literal">com.sun.image.codec.jpeg</tt> that contains
	classes for reading JPEG image data directly
	into <tt class="literal">BufferedImage</tt> objects and for encoding
	<tt class="literal">BufferedImage</tt> image data using the JPEG image
	format.  Although this package is not part of the core Java 2 platform, most
	Java implementations will probably contain these classes.  You
	can use this package to read JPEG files with code like this:
</p>

<blockquote>
<pre class="programlisting">import java.io.*;
import com.sun.image.codec.jpeg.*;

FileInputStream in = new FileInputStream("myimage.jpeg");
JPEGImageDecoder decoder = JPEGCodec.createJPEGDecoder(in);
BufferedImage image = decoder.decodeAsBufferedImage();
in.close();</pre>
</blockquote>



<h3 class="sect2">4.10.2. Drawing a BufferedImage</h3>

<p>A <tt class="literal">BufferedImage</tt> is a kind of
	<tt class="literal">Image</tt>, so you can do anything with a
	<tt class="literal">BufferedImage</tt> that you can do with an
	<tt class="literal">Image</tt>.  For instance,
	the <tt class="literal">Graphics</tt> class
	defines a number of methods for drawing <tt class="literal">Image</tt>
	objects.  Some of these methods take only an X and a Y
	coordinate at which to draw the image and simply draw the
	image at its original size.  Other
	<tt class="literal">drawImage()</tt> methods also take a width and a
	height and scale the image as appropriate.  </p>

<a name="INDEX-987"></a>

<p>Java 1.1 introduced
	more sophisticated <tt class="literal">drawImage()</tt> methods that
	take coordinates that specify a destination rectangle on the
	drawing surface and a source rectangle within the image.  
	These methods map an arbitrary subimage onto an
	arbitrary rectangle of the drawing surface, scaling and flipping
	as necessary.  Each of these <tt class="literal">drawImage()</tt>
	methods comes in two versions, one that takes a background color
	argument and one that does not.  The background
	<tt class="literal">Color</tt> is used if the <tt class="literal">Image</tt>
	contains transparent pixels.  </p>

<p>Since all the
	<tt class="literal">drawImage()</tt> methods of the
	<tt class="literal">Graphics</tt> object operate on
	<tt class="literal">Image</tt> objects instead of
	<tt class="literal">BufferedImage</tt> objects, they all require a
	<tt class="literal">Component</tt> or other
	<tt class="literal">ImageObserver</tt> object to be specified.</p>

<p>In Java 2D, the <tt class="literal">Graphics2D</tt> object defines two
	more <tt class="literal">drawImage()</tt> methods.  One of these
	methods draws an
	<tt class="literal">Image</tt> object as modified by an arbitrary
	<tt class="literal">AffineTransform</tt> object.  As we'll see a
	bit later, an <tt class="literal">AffineTransform</tt> object can specify a
	position, scaling factor, rotation, and shear.</p>



<p>The other <tt class="literal">drawImage()</tt> method of
	<tt class="literal">Graphics2D</tt> actually operates on a
	<tt class="literal">BufferedImage</tt> object.  This method processes the
	specified <tt class="literal">BufferedImage</tt> as specified by a
	<tt class="literal">BufferedImageOp</tt> object and then draws the
	processed image at the specified position.  We'll talk about
	image processing with <tt class="literal">BufferedImageOp</tt> objects
	in more detail shortly.  Since this <tt class="literal">drawImage()</tt>
	method operates on a <tt class="literal">BufferedImage</tt> object
	instead of an <tt class="literal">Image</tt> object, it does not require
	an <tt class="literal">ImageObserver</tt> argument.</p>

<a name="INDEX-988"></a>
<a name="INDEX-989"></a>

<p>Finally, the <tt class="literal">Graphics2D</tt> class defines a
	<tt class="literal">drawRenderedImage()</tt> method.
	<tt class="literal">BufferedImage</tt> implements the
	<tt class="literal">RenderedImage</tt> interface, so you can pass a
	<tt class="literal">BufferedImage</tt> to this method, along with an
	arbitrary <tt class="literal">AffineTransform</tt> that specifies
	where and how to draw it.</p>

<a name="INDEX-990"></a>


<h3 class="sect2">4.10.3. Drawing into a BufferedImage</h3>

<p>As I mentioned earlier, the <tt class="literal">createGraphics()</tt>
	method of a <tt class="literal">BufferedImage</tt> returns a
	<tt class="literal">Graphics2D</tt> object that you can use to draw
	into a <tt class="literal">BufferedImage</tt>.  Anything you can draw
	on the screen, you can draw into a
	<tt class="literal">BufferedImage</tt>.  One common reason to draw
	into a <tt class="literal">BufferedImage</tt> object is to implement
	double-buffering.  When performing animations or other repetitive
	drawing tasks, the erase/redraw cycle can cause flickering.  To
	avoid this, do your drawing into an off-screen
	<tt class="literal">BufferedImage</tt> and then copy the contents of the
	image to the screen all at once.  Although this requires extra
	memory, it can dramatically 

improve the appearance of your
	programs.<a href="#FOOTNOTE-4">[4]</a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-4"></a>
<p>[4]Recall that Swing components, and custom
	components subclassed from Swing components, automatically
	support double-buffering.</p>
</blockquote>

<h3 class="sect2">4.10.4. Manipulating Pixels of a BufferedImage</h3>

<p>The <tt class="literal">Image</tt> class defines very few methods, so
	about all you can do with an <tt class="literal">Image</tt> object 
	is query
	its width and height.  The <tt class="literal">BufferedImage</tt>
	class, by contrast, defines quite a few methods.  Most of these
	are required by interfaces that
	<tt class="literal">BufferedImage</tt> implements.  A few important
	ones, however, allow pixel-level manipulation of images.</p>

<a name="INDEX-991"></a>
<a name="INDEX-992"></a>
<a name="INDEX-993"></a>

<p>For example, 
	<tt class="literal">getRGB()</tt> returns the image pixel at the
	specified X and Y coordinates, while <tt class="literal">setRGB()</tt>
	sets the pixel at the specified coordinates.  Both of these
	methods represent the pixel value as an <tt class="literal">int</tt>
	that contains 8-bit red, green, and blue color values.  Other
	versions of <tt class="literal">getRGB()</tt> and
	<tt class="literal">setRGB()</tt> read and write rectangular arrays of
	pixels into <tt class="literal">int</tt> arrays.
	<tt class="literal">getSubimage()</tt> is a related method that
	returns a rectangular region of the image as a
	<tt class="literal">BufferedImage</tt>. </p>

<h3 class="sect2">4.10.5. Inside a BufferedImage</h3>

<p>Most applications can use the <tt class="literal">BufferedImage</tt>
	class without ever caring what is inside a
	<tt class="literal">BufferedImage</tt>.  However, if you are writing a
	program that performs low-level image-data manipulation, such as
	reading or writing image data from a file, you need to know
	more.  The complete details of the image architecture are beyond
	the scope of this book; this section explains the basics in
	case you want to explore on your own.</p>


<a name="INDEX-994"></a>

<p>The image data of a <tt class="literal">BufferedImage</tt> is stored
	in a <tt class="literal">java.awt.image.Raster</tt> object, which can
	be obtained with the <tt class="literal">getData()</tt> method of
	<tt class="literal">BufferedImage</tt>.  The <tt class="literal">Raster</tt>
	itself contains 

two parts: a
	<tt class="literal">java.awt.image.DataBuffer</tt> that holds the raw
	image data and a
	<tt class="literal">java.awt.image.SampleModel</tt> object that 
	knows how to extract individual pixel values out of the 
	<tt class="literal">DataBuffer</tt>.  <tt class="literal">DataBuffer</tt> 
	supports a wide 

variety of formats for image data, which is
	why a <tt class="literal">Raster</tt> object also needs 
	a <tt class="literal">SampleModel</tt>.</p>

<p>The <tt class="literal">Raster</tt> object of a
	<tt class="literal">BufferedImage</tt> stores the pixel values of an
	image.  These pixel values may or may not correspond directly to
	the red, green, and blue color values to be displayed on the
	screen.  Therefore, a <tt class="literal">BufferedImage</tt> object
	also contains a <tt class="literal">java.awt.image.ColorModel</tt>
	object that knows how to convert pixel values from the
	<tt class="literal">Raster</tt> into <tt class="literal">Color</tt> objects.
	A <tt class="literal">ColorModel</tt> object typically contains a
	<tt class="literal">java.awt.color.ColorSpace</tt> object that
	specifies the representation of color components.</p>

<h3 class="sect2">4.10.6. Processing a BufferedImage</h3>

<p>The <tt class="literal">java.awt.image</tt> package defines five
	powerful implementations of the 
	<tt class="literal">BufferedImageOp</tt> interface that
	perform various types of image-processing operations on
	<tt class="literal">BufferedImage</tt> objects.  The five
	implementations are described briefly in <a href="#jfcnut-ch-4-tab-imageprocessing">Table 4-9</a>.  </p>

<a name="INDEX-995"></a>
<a name="INDEX-996"></a>
<a name="jfcnut-ch-4-tab-imageprocessing"></a>
<h4 class="objtitle">Table 4-9. Java 1.2 Image-Processing Classes</h4>
<table border="1">
<tr>
<th>Class</th>
<th>Description</th>
</tr>

<tr>
<a name="INDEX-997"></a>
<a name="INDEX-998"></a>
<td><tt class="literal">AffineTransformOp</tt></td>
<td>
<p>Performs an arbitrary geometric
		  transformation--specified by an
		  <tt class="literal">AffineTransform</tt>--on an image.  The
		  transform can include scaling, rotation, translation,
		  and shearing in any combination.
		  This operator interpolates pixel values when needed,
		  using either a fast, nearest-neighbor algorithm or a
		  slower, higher-quality bilinear interpolation
		  algorithm. This class cannot process images in place.</p>
</td>
<a name="INDEX-999"></a>
<a name="INDEX-1000"></a>
</tr>
<tr>
<td><tt class="literal">ColorConvertOp</tt></td>
<td>
<p>Converts an image to a new
		  <tt class="literal">java.awt.color.ColorSpace</tt>.  It can
		  process an image in place.</p>
</td>
<a name="INDEX-1001"></a>
</tr>
<tr>
<td><tt class="literal">ConvolveOp</tt></td>
<td>
<p>Performs a powerful and flexible type of
		  image processing called
		  <em class="emphasis">convolution</em>, which is used for
		  blurring or sharpening images and performing edge
		  detection, among other things.
		  <tt class="literal">ConvolveOp</tt> uses a
		  <tt class="literal">java.awt.image.Kernel</tt> object to
		  hold the matrix of numbers that specify exactly what
		  convolution operation is performed.  Convolution
		  operations cannot be performed in place.</p>
</td>
<a name="INDEX-1002"></a>
<a name="INDEX-1003"></a>
</tr>
<tr>
<td><tt class="literal">LookupOp</tt></td>
<td>
<p>Processes the color channels of an image
		  using a lookup table, which is an array
		  that maps color values in the source image to color
		  values in the new image.  The use of lookup tables
		  makes <tt class="literal">LookupOp</tt> a very flexible
		  image-processing class.  For example, you can use it
		  to brighten or darken an image, to invert the colors
		  of an image, or to reduce the number of distinct
		  color levels in an image.  <tt class="literal">LookupOp</tt>
		  can use either a single lookup table to operate on all color
		  channels in an image or a separate lookup
		  table for each channel.  <tt class="literal">LookupOp</tt>
		  can be used to process images in place.  You typically
		  use <tt class="literal">LookupOp</tt> in conjunction with
		  <tt class="literal">java.awt.image.ByteLookupTable</tt>. </p>
</td>
<a name="INDEX-1004"></a>
</tr>
<tr>
<td><tt class="literal">RescaleOp</tt></td>
<td>
<p>Like <tt class="literal">LookupOp</tt>,
		  <tt class="literal">RescaleOp</tt> is used to modify the
		  values of the individual color components of an image.
		  Instead of using a lookup table, however,
		  <tt class="literal">RescaleOp</tt> uses a simple linear
		  equation.  The color values of the destination are
		  obtained by multiplying the source values by a
		  constant and then adding another constant.  You can
		  specify either a single pair of constants for use on all
		  color channels or individual pairs of
		  constants for each of the channels in the image.
		  <tt class="literal">RescaleOp</tt> can process images in
		  place. </p>
</td>
</tr>
</table>
<a name="INDEX-1005"></a>
<a name="INDEX-1006"></a>
<a name="INDEX-1007"></a>
<a name="INDEX-1008"></a>

<p>To use a <tt class="literal">BufferedImageOp</tt>, simply call its
	<tt class="literal">filter()</tt> method.  This method processes or
	filters a source image and stores the results in a destination
	image.  If no destination image is supplied,
	<tt class="literal">filter()</tt> creates one.  In either case, the
	method returns a <tt class="literal">BufferedImage</tt> that contains
	the processed image.  As noted in <a href="#jfcnut-ch-4-tab-imageprocessing">Table 4-9</a>, some implementations
	of <tt class="literal">BufferedImageOp</tt> can process an image "in
	place."  These implementations allow you to specify the same
	<tt class="literal">BufferedImage</tt> object as both the source and
	destination arguments to the <tt class="literal">filter()</tt>
	method.</p>

<a name="INDEX-1009"></a>
<a name="INDEX-1010"></a>

<p>To convert a color image to grayscale, you can use
	<tt class="literal">ColorConvertOp</tt> as follows:
</p>

<blockquote>
<pre class="programlisting">import java.awt.image.*;
import java.awt.color.*;

ColorConvertOp op = new ColorConvertOp(ColorSpace.getInstance(CS_GRAY), null);
BufferedImage grayImage = op.filter(sourceImage, null);</pre>
</blockquote>



<a name="INDEX-1011"></a>
<a name="INDEX-1012"></a>

<p>To invert the colors in an image (producing a photographic
	negative effect), you might use a <tt class="literal">RescaleOp</tt>
	as follows:
</p>

<blockquote>
<pre class="programlisting">RescaleOp op = new RescaleOp(-1.0f, 255f, null);
BufferedImage negative = op.filter(sourceImage, null);</pre>
</blockquote>



<p>To brighten an image, you can use a
	<tt class="literal">RescaleOp</tt> to linearly increase the intensity
	of each color value.  More realistic brightening effects require
	a nonlinear transform, however.  For example, you can use a
	<tt class="literal">LookupOp</tt> to handle brightening
	based on the square-root function, which boosts midrange colors
	more than colors that are dark or bright:
</p>

<blockquote>
<pre class="programlisting">byte[] data = new byte[256];
for(int i = 0; i &lt; 256; i++) 
  data[i] = (byte)(Math.sqrt((float)i/255.0) * 255);
ByteLookupTable table = new ByteLookupTable(0, data);
LookupOp op = new LookupOp(table, null);
BufferedImage brighterImage = op.filter(sourceImage, null);</pre>
</blockquote>



<a name="INDEX-1013"></a>
<a name="INDEX-1014"></a>
<a name="INDEX-1015"></a>

<p>You can blur an image using a <tt class="literal">ConvolveOp</tt>.
	When processing an image by convolution, a pixel value in the
	destination image is computed from the corresponding
	pixel value in the source
	image and the pixels that surround that pixel.  A matrix of
	numbers known as the <em class="emphasis">kernel</em> is used to
	specify the contribution of each source pixel to the destination
	pixel.  To perform a simple blurring operation, you might use a
	kernel like this to specify that the destination pixel is the
	average of the source pixel and the eight pixels that surround
	that source pixel:
</p>

<blockquote>
<pre class="programlisting">0.1111  0.1111  0.1111
0.1111  0.1111  0.1111
0.1111  0.1111  0.1111</pre>
</blockquote>

<p>
	Note that the sum of the values in this kernel is 1.0, which
	means that the destination image has the same brightness
	as the source image.
	To perform a simple blur, use code like this:
</p>

<blockquote>
<pre class="programlisting">Kernel k = new Kernel(3, 3, new float[] { .1111f, .1111f, .1111f, 
                                          .1111f, .1111f, .1111f, 
                                          .1111f, .1111f, .1111f });
ConvolveOp op = new ConvolveOp(k);
BufferedImage blurry = op.filter(sourceImage, null);</pre>
</blockquote>



<a name="INDEX-1016"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_09.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_11.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_11.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.9. Fonts and Text</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.11. Transformations with AffineTransform</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
