<html>
<head>
<title>Event Handling (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Event Handling">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_01.htm">Chapter 2: Swing and AWTArchitecture</a></td><td align="right" valign="top" width="172"><a href="ch02_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">2.6. Event Handling</h2>
<a name="INDEX-250"></a>
<a name="INDEX-251"></a>
<a name="INDEX-252"></a>

<p>Using a layout manager to arrange components within a container
      may result in a GUI that looks good, but in order to make it do
      anything, you have to handle events.  An event typically signifies
      an action by the user, such as striking a key or clicking the mouse
      over a <tt class="literal">JButton</tt> component.  But it can also
      refer to any other action performed by the user or 
      the program.  An event can be generated when the value of
      component's property changes or when a specified amount of time
      elapses, for example.</p>

<a name="INDEX-253"></a>

<p>The event model used in Java changed between Java 1.0 and Java
      1.1.  The Java 1.1 event model is used by AWT and Swing in Java
      1.1 and Java 1.2.  The Java 1.0 event model is largely obsolete;
      we'll discuss it in <a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch07_01.htm">Chapter 7, "Applets"</a>, 
however,
      since some web browsers still only support Java 1.0.</p>

<h3 class="sect2">2.6.1. Event Objects</h3>

<p>Different types of events are represented by different Java
	classes.  The base class, from which all events inherit, is
	<tt class="literal">java.util.EventObject</tt>.  AWT defines its own
	base class for GUI events, <tt class="literal">java.awt.AWTEvent</tt>, 
	which is subclassed from <tt class="literal">EventObject</tt>.  AWT
	then defines a number of subclasses of
	<tt class="literal">AWTEvent</tt> in the package
	<tt class="literal">java.awt.event</tt>.  Swing uses many of these event
	types and also defines more of its own in the
	<tt class="literal">javax.swing.event</tt> package.  Some Swing events
	subclass AWT events, but many subclass
	<tt class="literal">java.util.EventObject</tt> directly.  There is one
	other kind of event used by Swing components: the
	<tt class="literal">java.beans.PropertyChangeEvent</tt>, which is part
	of the JavaBeans component model.  </p>

<a name="INDEX-254"></a>
<a name="INDEX-255"></a>
<a name="INDEX-256"></a>
<a name="INDEX-257"></a>

<p>The base <tt class="literal">EventObject</tt> class defines a
	<tt class="literal">getSource()</tt> method that returns the object
	that generated or triggered the event.
	<tt class="literal">AWTEvent</tt> defines the <tt class="literal">getID()</tt>
	method; the value returned by this method is used to distinguish
	the various types of events that are represented by the same event
	class.  For example, <tt class="literal">FocusEvent</tt> has two
	possible types: <tt class="literal">FocusEvent.FOCUS_GAINED</tt> and
	<tt class="literal">FocusEvent.FOCUS_LOST</tt>.</p>

<a name="INDEX-258"></a>
<a name="INDEX-259"></a>
<a name="INDEX-260"></a>
<a name="INDEX-261"></a>
<a name="INDEX-262"></a>
<a name="INDEX-263"></a>

<p>In addition to these <tt class="literal">getSource()</tt> and
	<tt class="literal">getID()</tt> methods, the various event subclasses
	define methods to return whatever data values are pertinent to the
	particular event type.  For example, <tt class="literal">MouseEvent</tt>
	has <tt class="literal">getX()</tt>, <tt class="literal">getY()</tt>, and
	<tt class="literal">getClickCount()</tt> methods; it also inherits the
	<tt class="literal">getModifiers()</tt> and <tt class="literal">getWhen()</tt>
	methods, among others, from its superclass
	<tt class="literal">InputEvent</tt>.  Thus, when the user clicks the
	mouse, you receive a <tt class="literal">MouseEvent</tt> that
	specifies where, when, and how many times the user clicked,
	along with other information, such as the set of keyboard
	modifier keys that were held down at the time.</p>
<a name="INDEX-264"></a>

<h3 class="sect2">2.6.2. Event Listeners</h3>
<a name="INDEX-265"></a>
<a name="INDEX-266"></a>

<p>An object that would like to be notified of and
	respond to an event is an <em class="emphasis">event listener</em>.  An
	object that generates a particular kind of event, called an
	<em class="emphasis">event source</em>, maintains a list of listeners
	that are interested in being notified when that kind of event
	occurs.  The event source provides methods that allow listeners
	to add and remove themselves from this list of
	interested objects.  When the event source generates an
	event (or when a user input event such as a mouse click or a key
	press occurs on the event source object), the event source
	notifies all the listener objects that the event has occurred.</p>

<p>All AWT and Swing components are event sources, and all of them
	define (or inherit) methods for adding and removing event
	listeners.  By convention, these methods have names that begin
	with "add" or "remove" and end with "Listener".  So, for
	example, the <tt class="literal">JButton</tt> class inherits the
	<tt class="literal">addActionListener()</tt> and
	<tt class="literal">removeActionListener()</tt> methods.  In the
	reference section of this book, you'll notice that the event
	registration methods of a component are grouped separately, just
	as the property accessor methods are.  This is because one of
	the most important things you need to know about a component is
	the list of event types that it can generate.  </p>



<p>Each type of event object typically has a corresponding event
	listener type.  The <tt class="literal">ActionEvent</tt> event type
	has an <tt class="literal">ActionListener</tt> listener type, for
	example.  Event listeners, such as
	<tt class="literal">ActionListener</tt>, are interfaces that extend
	<tt class="literal">java.util.EventListener</tt>.
	<tt class="literal">EventListener</tt> doesn't define any methods; it
	is merely a marker interface that gives all event listeners a
	common type.  An event listener interface defines one or more
	methods that an event source may invoke when a particular type of
	event occurs.  Such a method always takes an event object as
	its single argument.  For example, the
	<tt class="literal">ActionListener</tt> interface defines a single
	method, <tt class="literal">actionPerformed()</tt>.  When the user
	clicks on a <tt class="literal">JButton</tt> component, an
	<tt class="literal">ActionEvent</tt> representing that click is
	created and passed to the
	<tt class="literal">actionPerformed()</tt> method of each
	<tt class="literal">ActionListener</tt> object that was registered
	on the <tt class="literal">JButton</tt> with the
	<tt class="literal">addActionListener()</tt> method.</p>

<a name="INDEX-267"></a>
<a name="INDEX-268"></a>
<a name="INDEX-269"></a>
<a name="INDEX-270"></a>

<p>
	An event listener interface may define more than one
	method.  For example, <tt class="literal">MouseListener</tt> defines
	several methods that correspond to different types
	of mouse events, including button press events and button
	release events.  This is because <tt class="literal">MouseEvent</tt>
	represents several different types of mouse events.
	By convention, each method of an event listener is passed a single
	argument that is an event object of the type that corresponds
	to the listener.  Thus, a <tt class="literal">MouseEvent</tt> object
	is always created when a mouse event occurs, but the object
	is passed to a different listener method depending on the
        type of mouse event that occurred. </p>
<a name="INDEX-271"></a>

<h3 class="sect2">2.6.3. Event Adapters</h3>
<a name="INDEX-272"></a>
<a name="INDEX-273"></a>

<p>When an event listener interface defines more than one method,
	it is often accompanied by an event adapter class that
	provides empty implementations for each of the methods.  For
	example, the <tt class="literal">MouseListener</tt> interface defines
	five different methods.  If your program is interested only in
	the <tt class="literal">mouseClicked()</tt> method, it may be easier
	for you to subclass the <tt class="literal">MouseAdapter</tt> class
	and override <tt class="literal">mouseClicked()</tt> than to
	implement all five methods of the
	<tt class="literal">MouseListener</tt> interface directly.</p>

<h3 class="sect2">2.6.4. Event Handling with Inner Classes</h3>
<a name="INDEX-274"></a>
<a name="INDEX-275"></a>

<p>An important point to notice about the Java event handling model
	is that, in order to receive an event notification, you must
	implement an appropriate event listener interface.  Sometimes
	you do this directly in your main application class.  For
	example, an object interested in action and focus events might
	simply implement <tt class="literal">ActionListener</tt> and
	<tt class="literal">FocusListener</tt> directly.</p>

<a name="INDEX-276"></a>

<p>However, it is also quite common to create special classes for
	the sole purpose of handling events.  This is usually done with
	inner classes, as we saw in
	<a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_01.htm">Example 2-1</a>.  With this event-handling
	paradigm, you create a simple inner class to handle each event
	type that you are interested in for a particular event source.  Your
	code might look like this:</p>
<blockquote>
<pre class="programlisting">JFrame window = new JFrame("test application");
window.addFocusListener(new FocusListener() {
  public void focusGained(FocusEvent e) { /* gain focus code here */ }
  public void focusLost(FocusEvent e) {   /* lose focus code here */ }
});</pre>
</blockquote>

<p>You can also use this approach with an event adapter class,
	instead of an event listener interface.  For example:</p>
<blockquote>
<pre class="programlisting">Panel panel = new Panel();
panel.addMouseListener(new MouseAdapter() {
  public void mouseClicked(MouseEvent e) { /* mouse click code here */ }
});</pre>
</blockquote>
<a name="INDEX-277"></a>
<a name="INDEX-278"></a>
<a name="INDEX-279"></a>

<h3 class="sect2">2.6.5. Handling Input Events Directly</h3>
<a name="INDEX-280"></a>
<a name="INDEX-281"></a>

<p>Certain types of events occur as a direct result of user input.
	When the user types a key or moves the mouse, for example, a
	<tt class="literal">KeyEvent</tt> or <tt class="literal">MouseEvent</tt> is
	generated.  Similarly, when the user resizes a window or
	transfers keyboard focus to a new component, a
	<tt class="literal">FocusEvent</tt> or
	<tt class="literal">ComponentEvent</tt> is generated.  These types of
	events represent event notifications generated by the underlying
	native windowing system or operating system.  Other types of
	events, such as <tt class="literal">ActionEvent</tt> and 
	<tt class="literal">PopupMenuEvent</tt>, do not originate in the native
	windowing system.  Instead, these events are generated directly
	by AWT and Swing components.</p>

<a name="INDEX-282"></a>

<p>The distinction between these types of events becomes more clear
	when you implement a component yourself.  Consider the
	<tt class="literal">JButton</tt> component, for example.  It
	receives <tt class="literal">MouseEvent</tt> events and generates
	<tt class="literal">ActionEvent</tt> events in response to them.  For
	a component like this, it is not particularly appropriate or
	efficient to use a <tt class="literal">MouseListener</tt> object to
	receive mouse events.</p>

<p>The Java event model provides 
	a low-level way to handle input events that originate
	in the underlying windowing system.  When such an event occurs,
	it is passed to the <tt class="literal">processEvent()</tt> method
	of the <tt class="literal">Component</tt> on which it occurs.  This
	method examines the type of event and invokes an appropriate
	method to handle the event.  These methods are:
	<tt class="literal">processMouseEvent()</tt>,
	<tt class="literal">processMouseMotionEvent()</tt>,
	<tt class="literal">processKeyEvent()</tt>,
	<tt class="literal">processFocusEvent()</tt>,
	<tt class="literal">processComponentEvent()</tt>, and
	<tt class="literal">processInputMethodEvent()</tt>.  By default, each
	method simply invokes the appropriate methods on the appropriate
	event listeners.  When you subclass a component, however, you
	can override any of these <tt class="literal">protected</tt> methods
	to perform any other type of event handling you desire.  When you override one of these methods, you should usually
	remember to invoke the superclass method as well, so that the
	appropriate event listeners are notified.</p>

<a name="INDEX-283"></a>
<a name="INDEX-284"></a>
<a name="INDEX-285"></a>

<p>There is one additional requirement to make this low-level Java
	1.1 event model work.  In order to receive events of a
	particular type for a particular component, you must tell the
	component that it is interested in receiving that type of
	event.  If you do not, events of that type are simply not 
	delivered to the component, at least on some operating systems.  
	With event listeners, the act of registering a
	listener is sufficient to tell the component what kinds of
	events it should request.  However, when you are using the
	<tt class="literal">processXXXEvent()</tt> methods directly, you must
	first call another protected method,
	<tt class="literal">enableEvents()</tt>, and pass in a bit mask that
	specifies the types of events you are interested in.  The bit
	mask is formed by ORing together various
	<tt class="literal">EVENT_MASK</tt> constants that are defined by
	<tt class="literal">java.awt.AWTEvent</tt>.  For example:</p>
<blockquote>
<pre class="programlisting">this.enableEvents(AWTEvent.MOUSE_EVENT_MASK | AWTEvent.KEY_EVENT_MASK);</pre>
</blockquote>

<a name="INDEX-286"></a>


<h3 class="sect2">2.6.6. Event Reference</h3>
<a name="INDEX-287"></a>
<a name="INDEX-288"></a>
<a name="INDEX-289"></a>

<p>AWT and Swing define quite a few event objects, event listeners,
	and event adapters in the <tt class="literal">java.awt.event</tt> and
	<tt class="literal">javax.swing.event</tt> packages.  Fortunately, all
	these classes and interfaces follow the same basic naming
	conventions.  For an event <em class="replaceable">X</em>, the
	event object is named
	<em class="replaceable">X</em><tt class="literal">Event</tt>, the
	listener interface is
	<em class="replaceable">X</em><tt class="literal">Listener</tt>, and the
	adapter, if one is defined is
	<em class="replaceable">X</em><tt class="literal">Adapter</tt>.  The
	event listener interface defines methods that vary by event
	type, but every event listener method returns <tt class="literal">void</tt>
	and accepts the
	corresponding event object as its single argument.  The only
	significant variation from these rules is that the
	<tt class="literal">java.awt.MouseListener</tt> and
	<tt class="literal">java.awt.

MouseMotionListener</tt> listeners both
	work with <tt class="literal">MouseEvent</tt> events--there is no
	separate <tt class="literal">MouseMotionEvent</tt>.</p>

<p>You can find a list of the events generated by any given
	component by turning to its reference page and looking at the
	event listener registration methods for that component.
	Remember, too, that the component may also inherit events.
	<a href="#jfcnut-ch-2-tab-awtevents">Table 2-7</a> and <a href="#jfcnut-ch-2-tab-swingevents">Table 2-8</a> work in the opposite
	direction.  For a given event listener type, these tables list
	the components that can generate events of that type. (Note,
	however, that they do not list classes that inherit events of
	that type.)  These tables also list the names of the methods
	defined by each event listener interface.  You can learn a lot
	about the intended usage of an event simply by looking at the
	list of listener methods to which it can be passed.</p>

<p>
<a href="#jfcnut-ch-2-tab-awtevents">Table 2-7</a> shows the event listeners
	defined by AWT.  These event types are not restricted
	to AWT components; Swing components use them too, as do some
	other Swing classes that are not components.
	<a href="#jfcnut-ch-2-tab-swingevents">Table 2-8</a> displays the event
	listeners defined by Swing.  Note that I have also added two event
	listeners defined in the <tt class="literal">java.beans</tt> package,
	but used by Swing components, to this table.</p>

<a name="INDEX-290"></a>
<a name="INDEX-291"></a>
<a name="jfcnut-ch-2-tab-awtevents"></a>
<h4 class="objtitle">Table 2-7. AWT Event Listeners and the Components That Use Them</h4>
<table border="1">
<tr>
<th>Event Listener</th>
<th>Listener Methods</th>
<th>Registered on</th>
</tr>

<tr>
<a name="INDEX-292"></a>
<a name="INDEX-293"></a>
<td><tt class="literal">ActionListener</tt></td>
<td>
<p>
<tt class="literal">actionPerformed()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">AbstractButton</tt>, 
	    <tt class="literal">Button</tt>, 
	    <tt class="literal">ButtonModel</tt>, 
	    <tt class="literal">ComboBoxEditor</tt>, 
	    <tt class="literal">JComboBox</tt>, 
	    <tt class="literal">JFileChooser</tt>, 
	    <tt class="literal">JTextField</tt>, 
	    <tt class="literal">List</tt>, 
	    <tt class="literal">MenuItem</tt>, 
	    <tt class="literal">TextField</tt>, 
	    <tt class="literal">Timer</tt>
</p>
</td>
<a name="INDEX-294"></a>
<a name="INDEX-295"></a>
</tr>
<tr>
<td><tt class="literal">AdjustmentListener</tt></td>
<td>
<p>
<tt class="literal">adjustmentValue-</tt>
</p>
</td>
<td>
<p>
<tt class="literal">Adjustable</tt>,</p>
</td>
</tr>
<tr>
<td></td>
<td><tt class="literal">Changed()</tt></td>
<td>
<p>
<tt class="literal">JScrollBar</tt>, 
	    <tt class="literal">Scrollbar</tt>
</p>
</td>
<a name="INDEX-296"></a>
<a name="INDEX-297"></a>
</tr>
<tr>
<a name="INDEX-298"></a>
<a name="INDEX-299"></a>
<a name="INDEX-300"></a>
<td><tt class="literal">ComponentListener</tt></td>
<td>
<p>
<tt class="literal">componentHidden()</tt>, 
	    <tt class="literal">componentMoved()</tt>, 
	    <tt class="literal">componentResized()</tt>, 
	    <tt class="literal">componentShown()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">Component</tt>
</p>
</td>
<a name="INDEX-301"></a>
<a name="INDEX-302"></a>
</tr>
<tr>
<a name="INDEX-303"></a>
<td><tt class="literal">ContainerListener</tt></td>
<td>
<p>
<tt class="literal">componentAdded()</tt>, 
	    <tt class="literal">componentRemoved()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">Container</tt>
</p>
</td>
<a name="INDEX-304"></a>
<a name="INDEX-305"></a>
</tr>
<tr>
<a name="INDEX-306"></a>
<td><tt class="literal">FocusListener</tt></td>
<td>
<p>
<tt class="literal">focusGained()</tt>, 
	    <tt class="literal">focusLost()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">Component</tt>
</p>
</td>
<a name="INDEX-307"></a>
<a name="INDEX-308"></a>
</tr>
<tr>
<td><tt class="literal">ItemListener</tt></td>
<td>
<p>
<tt class="literal">itemStateChanged()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">AbstractButton</tt>, 
	    <tt class="literal">ButtonModel</tt>, 
	    <tt class="literal">Checkbox</tt>, 
	    <tt class="literal">CheckboxMenuItem</tt>, 
	    <tt class="literal">Choice</tt>, 
	    <tt class="literal">ItemSelectable</tt>, 
	    <tt class="literal">JComboBox</tt>, 
	    <tt class="literal">List</tt>
</p>
</td>
<a name="INDEX-309"></a>
<a name="INDEX-310"></a>
</tr>
<tr>
<a name="INDEX-311"></a>
<a name="INDEX-312"></a>
<td><tt class="literal">KeyListener</tt></td>
<td>
<p>
<tt class="literal">keyPressed()</tt>, 
	    <tt class="literal">keyReleased()</tt>, 
	    <tt class="literal">keyTyped()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">Component</tt>
</p>
</td>
<a name="INDEX-313"></a>
<a name="INDEX-314"></a>
</tr>
<tr>
<a name="INDEX-315"></a>
<a name="INDEX-316"></a>
<a name="INDEX-317"></a>
<a name="INDEX-318"></a>
<td><tt class="literal">MouseListener</tt></td>
<td>
<p>
<tt class="literal">mouseClicked()</tt>, 
	    <tt class="literal">mouseEntered()</tt>, 
	    <tt class="literal">mouseExited()</tt>, 
	    <tt class="literal">mousePressed()</tt>, 
	    <tt class="literal">mouseReleased()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">Component</tt>
</p>
</td>
<a name="INDEX-319"></a>
<a name="INDEX-320"></a>
</tr>
<tr>
<a name="INDEX-321"></a>
<td><tt class="literal">MouseMotionListener</tt></td>
<td>
<p>
<tt class="literal">mouseDragged()</tt>, 
	    <tt class="literal">mouseMoved()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">Component</tt>
</p>
</td>
<a name="INDEX-322"></a>
<a name="INDEX-323"></a>
</tr>
<tr>
<td><tt class="literal">TextListener</tt></td>
<td>
<p>
<tt class="literal">textValueChanged()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">TextComponent</tt>
</p>
</td>
<a name="INDEX-324"></a>
<a name="INDEX-325"></a>
</tr>
<tr>
<a name="INDEX-326"></a>
<a name="INDEX-327"></a>
<a name="INDEX-328"></a>
<a name="INDEX-329"></a>
<a name="INDEX-330"></a>
<a name="INDEX-331"></a>
<td><tt class="literal">WindowListener</tt></td>
<td>
<p>
<tt class="literal">windowActivated()</tt>, 
	    <tt class="literal">windowClosed()</tt>, 
	    <tt class="literal">windowClosing()</tt>, 
	    <tt class="literal">windowDeactivated()</tt>, 
	    <tt class="literal">windowDeiconified()</tt>, 
	    <tt class="literal">windowIconified()</tt>, 
	    <tt class="literal">windowOpened()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">Window</tt>
</p>
</td>
</tr>
</table>
<a name="INDEX-332"></a>

<a name="INDEX-333"></a>

<a name="jfcnut-ch-2-tab-swingevents"></a>
<h4 class="objtitle">Table 2-8. Swing Event Listeners and the Components That Use Them</h4>
<table border="1">
<tr>
<a name="INDEX-334"></a>
<a name="INDEX-335"></a>
<th>Event Listener</th>
<th>Listener Methods</th>
<th>Registered on</th>
</tr>

<tr>
<a name="INDEX-336"></a>
<a name="INDEX-337"></a>
<a name="INDEX-338"></a>
<a name="INDEX-339"></a>
<td><tt class="literal">AncestorListener</tt></td>
<td>
<p>
<tt class="literal">ancestorAdded()</tt>, 
	    <tt class="literal">ancestorMoved()</tt>, 
	    <tt class="literal">ancestorRemoved()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">Action</tt>, 
	    <tt class="literal">JComponent</tt>
</p>
</td>
<a name="INDEX-340"></a>
<a name="INDEX-341"></a>
</tr>
<tr>
<td><tt class="literal">CaretListener</tt></td>
<td>
<p>
<tt class="literal">caretUpdate()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">JTextComponent</tt>
</p>
</td>
<a name="INDEX-342"></a>
<a name="INDEX-343"></a>
</tr>
<tr>
<a name="INDEX-344"></a>
<td><tt class="literal">CellEditorListener</tt></td>
<td>
<p>
<tt class="literal">editingCanceled()</tt>, 
	    <tt class="literal">editingStopped()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">CellEditor</tt>, </p>
</td>
<a name="INDEX-345"></a>
<a name="INDEX-346"></a>
</tr>
<tr>
<td><tt class="literal">ChangeListener</tt></td>
<td>
<p>
<tt class="literal">stateChanged()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">AbstractButton</tt>, 
	    <tt class="literal">BoundedRangeModel</tt>, 
	    <tt class="literal">ButtonModel</tt>, 
	    <tt class="literal">JProgressBar</tt>, 
	    <tt class="literal">JSlider</tt>, 
	    <tt class="literal">JTabbedPane</tt>, 
	    <tt class="literal">JViewport</tt>, 
	    <tt class="literal">MenuSelectionManager</tt>, 
	    <tt class="literal">SingleSelectionModel</tt>
</p>
</td>
<a name="INDEX-347"></a>
<a name="INDEX-348"></a>
</tr>
<tr>
<td><tt class="literal">HyperlinkListener</tt></td>
<td>
<p>
<tt class="literal">hyperlinkUpdate()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">JEditorPane</tt>
</p>
</td>
<a name="INDEX-349"></a>
<a name="INDEX-350"></a>
</tr>
<tr>
<a name="INDEX-351"></a>
<a name="INDEX-352"></a>
<a name="INDEX-353"></a>
<a name="INDEX-354"></a>
<a name="INDEX-355"></a>
<a name="INDEX-356"></a>
<td><tt class="literal">InternalFrameListener</tt></td>
<td>
<p>
<tt class="literal">internalFrame- Activated ()</tt>,
	    <tt class="literal">internalFrameClosed()</tt>, 
	    <tt class="literal">internalFrameClosing()</tt><tt class="literal">internalFrame- Deactivated()</tt>,
	    <tt class="literal">internalFrame- Deiconified()</tt>,
	    <tt class="literal">internalFrame- Iconified()</tt><tt class="literal">internalFrameOpened()</tt>
</p>
</td>
<td></td>
<a name="INDEX-357"></a>
<a name="INDEX-358"></a>
</tr>
<tr>
<a name="INDEX-359"></a>
<a name="INDEX-360"></a>
<td><tt class="literal">ListDataListener</tt></td>
<td>
<p>
<tt class="literal">contentsChanged()</tt>, 
	    <tt class="literal">intervalAdded()</tt>, 
	    <tt class="literal">intervalRemoved()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">AbstractListModel</tt>, 
	    <tt class="literal">ListModel</tt>
</p>
</td>
<a name="INDEX-361"></a>
</tr>
<tr>
<td><tt class="literal">ListSelectionListener</tt></td>
<td>
<p>
<tt class="literal">valueChanged()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">JList</tt>, 
	    <tt class="literal">ListSelectionModel</tt>
</p>
</td>
<a name="INDEX-362"></a>
<a name="INDEX-363"></a>
</tr>
<tr>
<a name="INDEX-364"></a>
<a name="INDEX-365"></a>
<a name="INDEX-366"></a>
<td><tt class="literal">MenuDragMouseListener</tt></td>
<td>
<p>
<tt class="literal">menuDragMouseDragged()</tt>, 
	    <tt class="literal">menuDragMouseEntered()</tt>, 
	    <tt class="literal">menuDragMouseExited()</tt>, 
	    <tt class="literal">menuDragMouseReleased()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">JMenuItem</tt>
</p>
</td>
<a name="INDEX-367"></a>
<a name="INDEX-368"></a>
</tr>
<tr>
<a name="INDEX-369"></a>
<a name="INDEX-370"></a>
<td><tt class="literal">MenuKeyListener</tt></td>
<td>
<p>
<tt class="literal">menuKeyPressed()</tt>, 
	    <tt class="literal">menuKeyReleased()</tt>, 
	    <tt class="literal">menuKeyTyped()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">JMenuItem</tt>
</p>
</td>
<a name="INDEX-371"></a>
<a name="INDEX-372"></a>
</tr>
<tr>
<a name="INDEX-373"></a>
<a name="INDEX-374"></a>
<td><tt class="literal">MenuListener</tt></td>
<td>
<p>
<tt class="literal">menuCanceled()</tt>, 
	    <tt class="literal">menuDeselected()</tt>, 
	    <tt class="literal">menuSelected()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">JMenu</tt>
</p>
</td>
<a name="INDEX-375"></a>
<a name="INDEX-376"></a>
</tr>
<tr>
<a name="INDEX-377"></a>
<a name="INDEX-378"></a>
<td><tt class="literal">PopupMenuListener</tt></td>
<td>
<p>
<tt class="literal">popupMenuCanceled()</tt>,</p>
</td>
<td>
<p>
<tt class="literal">JPopupMenu</tt>
</p>
</td>
</tr>
<tr>
<td></td>
<td> 
	    <tt class="literal">popupMenuWillBecome-</tt></td>
<td></td>
</tr>
<tr>
<td></td>
<td><tt class="literal">Invisible()</tt>,</td>
<td></td>
</tr>
<tr>
<td></td>
<td><tt class="literal">popupMenuWillBecome-</tt></td>
<td></td>
</tr>
<tr>
<td></td>
<td><tt class="literal">Visible()</tt></td>
<td></td>
<a name="INDEX-379"></a>
<a name="INDEX-380"></a>
</tr>
<tr>
<a name="INDEX-381"></a>
<td><tt class="literal">TreeExpansionListener</tt></td>
<td>
<p>
<tt class="literal">treeCollapsed()</tt>, 
	    <tt class="literal">treeExpanded()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">JTree</tt>
</p>
</td>
<a name="INDEX-382"></a>
<a name="INDEX-383"></a>
</tr>
<tr>
<td><tt class="literal">TreeSelectionListener</tt></td>
<td>
<p>
<tt class="literal">valueChanged()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">JTree</tt>
</p>
</td>
<a name="INDEX-384"></a>
<a name="INDEX-385"></a>
</tr>
<tr>
<a name="INDEX-386"></a>
<td><tt class="literal">TreeWillExpandListener</tt></td>
<td>
<p>
<tt class="literal">treeWillCollapse()</tt>, 
	    <tt class="literal">treeWillExpand()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">JTree</tt>
</p>
</td>
<a name="INDEX-387"></a>
<a name="INDEX-388"></a>
</tr>
<tr>
<td><tt class="literal">java.beans.-</tt></td>
<td>
<p>
<tt class="literal">propertyChange()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">Action</tt>, 
	    <tt class="literal">JComponent</tt>, </p>
</td>
</tr>
<tr>
<td><tt class="literal">PropertyChangeListener</tt></td>
<td></td>
<td><tt class="literal">UIDefaults</tt>, <tt class="literal">UIManager</tt></td>
<a name="INDEX-389"></a>
<a name="INDEX-390"></a>
</tr>

<tr>
<td><tt class="literal">java.beans.-</tt></td>
<td>
<p>
<tt class="literal">vetoableChange()</tt>
</p>
</td>
<td>
<p>
<tt class="literal">JComponent</tt>
</p>
</td>
</tr>
<tr>
<td><tt class="literal">VetoableChangeListener</tt></td>
<td></td>
<td></td>
</tr>
</table>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch02_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.5. Layout Management</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.7. Swing Component Architecture</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
