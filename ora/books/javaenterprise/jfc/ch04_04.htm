<html>
<head>
<title>Shapes (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Shapes">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_01.htm">Chapter 4: Graphics with AWT

and Java 2D</a></td><td align="right" valign="top" width="172"><a href="ch04_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">4.4. Shapes</h2>
<a name="INDEX-854"></a>
<a name="INDEX-855"></a>
<a name="INDEX-856"></a>
<a name="INDEX-857"></a>

<p>One of the most fundamental abstractions in Java 2D is the
      <tt class="literal">java.awt.Shape</tt>.  This interface describes a
      shape, obviously.  But note that the Java 2D definition of a shape
      does not require the shape to enclose an area--a
      <tt class="literal">Shape</tt> object may represent an open curve such
      as a line or parabola just as easily as it represents a closed
      curve such as a rectangle or circle.  If an open curve is passed
      to a graphics operation (such as <tt class="literal">fill()</tt>) that
      requires a closed curve, the curve is implicitly closed by adding
      a straight-line segment between its end points.  A Java 2D shape is
      sometimes referred to as a "path," because it describes the path a
      pen would follow to draw the shape.</p>

<a name="INDEX-858"></a>
<a name="INDEX-859"></a>
<a name="INDEX-860"></a>
<a name="INDEX-861"></a>
<a name="INDEX-862"></a>
<a name="INDEX-863"></a>

<p>The Java 2D <tt class="literal">Graphics2D</tt> class defines some very
      fundamental operations on <tt class="literal">Shape</tt> objects:
      <tt class="literal">draw()</tt> draws a <tt class="literal">Shape</tt>;
      <tt class="literal">fill()</tt> fills a <tt class="literal">Shape</tt>;
      <tt class="literal">clip()</tt> restricts the current drawing region to
      the specified <tt class="literal">Shape</tt>; <tt class="literal">hit()</tt>
      tests whether a given rectangle falls in or on a given shape.  
      In addition, the <tt class="literal">AffineTransform</tt> class
      has methods that allow <tt class="literal">Shape</tt> objects
      to be arbitrarily scaled, rotated, translated, and
      sheared. Because the <tt class="literal">Shape</tt> interface is used
      throughout Java 2D, these fundamental operations on shapes are quite
      powerful.  For example, the individual glyphs of a font can be
      represented as <tt class="literal">Shape</tt> objects, meaning 

they can be
      individually scaled, rotated, drawn, filled, and so on.</p>

<p>Java 2D contains a number of predefined
      <tt class="literal">Shape</tt> implementations, many of which are part
      of the <tt class="literal">java.awt.geom</tt> package.  Note that some
      basic geometric shapes have multiple <tt class="literal">Shape</tt>
      implementations, where each implementation uses a different data type to
      store coordinates. <a href="#jfcnut-ch-4-tab-shapes">Table 4-7</a> lists
      these predefined <tt class="literal">Shape</tt>
implementations.</p>


<a name="jfcnut-ch-4-tab-shapes"></a>
<h4 class="objtitle">Table 4-7. Java 2D Shape Implementations</h4>
<table border="1">
<tr>
<th>Shape</th>
<th>Implementations</th>
</tr>

<tr>
<a name="INDEX-864"></a>
<td>Rectangle</td>
<td>
<p>
<tt class="literal">java.awt.Rectangle</tt>,
		<tt class="literal">java.awt.geom.Rectangle2D.Float</tt>,
		<tt class="literal">java.awt.geom.Rectangle2D.Double</tt>
</p>
</td>
</tr>
<tr>
<td>Rounded rectangle</td>
<td>
<p>
<tt class="literal">java.awt.geom.RoundRectangle2D.Float</tt>,
		<tt class="literal">java.awt.geom.RoundRectangle2D.Double</tt>
</p>
</td>
<a name="INDEX-865"></a>
<a name="INDEX-866"></a>
</tr>
<tr>
<td>Ellipse (and circle)</td>
<td>
<p>
<tt class="literal">java.awt.geom.Ellipse2D.Float</tt>,
		<tt class="literal">java.awt.geom.Ellipse2D.Double</tt>
</p>
</td>
<a name="INDEX-867"></a>
</tr>
<tr>
<td>Polygon</td>
<td>
<p>
<tt class="literal">java.awt.Polygon</tt>
</p>
</td>
<a name="INDEX-868"></a>
</tr>
<tr>
<td>Line segment</td>
<td>
<p>
<tt class="literal">java.awt.geom.Line2D.Float</tt>,
		<tt class="literal">java.awt.geom.Line2D.Double</tt>
</p>
</td>
<a name="INDEX-869"></a>
</tr>
<tr>
<td>Arc (ellipse segment)</td>
<td>
<p>
<tt class="literal">java.awt.geom.Arc2D.Float</tt>,
		<tt class="literal">java.awt.geom.Arc2D.Double</tt>
</p>
</td>
<a name="INDEX-870"></a>
</tr>

<tr>
<td>Bezier curve (quadratic)</td>
<td>
<p>
<tt class="literal">java.awt.geom.QuadCurve2D.Float</tt>,
		<tt class="literal">java.awt.geom.QuadCurve2D.Double</tt>
</p>
</td>
</tr>
<tr>
<td>Bezier curve (cubic)</td>
<td>
<p>
<tt class="literal">java.awt.geom.CubicCurve2D.Float</tt>,
		<tt class="literal">java.awt.geom.CubicCurve2D.Double</tt>
</p>
</td>
</tr>
</table>

<p>To draw a circle inside a square, for example, 
      you can use code like this:
</p>

<blockquote>
<pre class="programlisting">Graphics2D g;                          // Initialized elsewhere
Shape square = new Rectangle2D.Float(100.0f, 100.0f, 100.0f, 100.0f);
Shape circle = new Ellipse2D.Float(100.0f, 100.0f, 100.0f, 100.0f);
g.draw(square);
g.draw(circle);</pre>
</blockquote>



<a name="INDEX-871"></a>

<p>In addition to these basic predefined shapes, the
      <tt class="literal">java.awt.geom</tt> package also contains two
      powerful classes for defining complex shapes.  The
      <tt class="literal">Area</tt> class allows you to define a shape that is
      the union or intersection of other shapes.  It also allows you to
      subtract one shape from another or define a shape that is the
      exclusive OR of two shapes.  For example, the following code
      allows you to fill the shape that results from subtracting a
      circle from a square:
</p>

<blockquote>
<pre class="programlisting">Graphics2D g;                          // Initialized elsewhere
Shape square = new Rectangle2D.Float(100.0f, 100.0f, 100.0f, 100.0f);
Shape circle = new Ellipse2D.Float(100.0f, 100.0f, 100.0f, 100.0f);
Area difference = new Area(square);
difference.subtract(circle);
g.fill(difference);</pre>
</blockquote>



<a name="INDEX-872"></a>

<p>The <tt class="literal">GeneralPath</tt> class allows you to describe a
      <tt class="literal">Shape</tt> as a sequence of line segments and Bezier
      curve segments.  You create such a general shape by calling the
      <tt class="literal">moveTo()</tt>, <tt class="literal">lineTo()</tt>,
      <tt class="literal">quadTo()</tt>, and <tt class="literal">curveTo()</tt>
      methods of <tt class="literal">GeneralPath</tt>.
      <tt class="literal">GeneralPath</tt> also allows you to append entire
      <tt class="literal">Shape</tt> objects to the path you are defining.
<a name="INDEX-873"></a><a name="INDEX-874"></a><a name="INDEX-875"></a><a name="INDEX-876"></a>
</p>

<a name="INDEX-877"></a>

<h3 class="sect2">4.4.1. Bezier Curves</h3>
<a name="INDEX-878"></a>

<p>A Bezier curve is a smooth curve between two end points, with a
	shape described by one or more control points.  Java 2D makes
	extensive low-level use of quadratic and cubic Bezier curves.  A
	quadratic Bezier curve uses one control point, while a cubic
	Bezier curve uses two control points.  There is some moderately
	complex mathematics behind Bezier curves, but for most Java 2D
	programmers, an intuitive understanding of these curves is
	sufficient.  <a href="#jfcnut-ch-4-fig-bezier">Figure 4-1</a> shows
	three quadratic and three cubic Bezier curves and illustrates how the
	position of the control points affects the shape of the curve.</p>
<a name="jfcnut-ch-4-fig-bezier"></a>
<div class="figure">
<img alt="figure" src="figs/jfcn.0401.gif" webstripperlinkwas="figs/jfcn.0401.gif"></div>
<h4 class="objtitle">Figure 4-1. Bezier curves</h4>
<a name="INDEX-879"></a>


<h3 class="sect2">4.4.2. How Shapes Are Implemented</h3>
<a name="INDEX-880"></a>

<p>Java 2D can perform some very general operations on arbitrary
	<tt class="literal">Shape</tt> objects.  In order to make this
	possible, the <tt class="literal">Shape</tt> interface exposes a
	quite general description of the desired shape.  For example,
	the <tt class="literal">getBounds()</tt> and
	<tt class="literal">getBounds2D()</tt> methods return a bounding
	box for the shape.  The various <tt class="literal">contains()</tt>
	methods test whether a given point or rectangle is enclosed by
	the shape.  The <tt class="literal">intersects()</tt> methods test
	whether a given rectangle touches or overlaps the shape.  These
	methods enable clipping, hit detection, and similar operations.</p>

<a name="INDEX-881"></a>
<a name="INDEX-882"></a>
<a name="INDEX-883"></a>

<p>The <tt class="literal">getBounds()</tt>,
	<tt class="literal">contains()</tt>, and
	<tt class="literal">intersects()</tt> methods are important, but they
	do not say anything about how to draw the shape.  This is the job
	of <tt class="literal">getPathIterator()</tt>, which returns a
	<tt class="literal">java.awt.geom.PathIterator</tt> object that
	breaks a <tt class="literal">Shape</tt> down into a sequence of
	individual line and curve segments that Java 2D can handle at a
	primitive level.  The <tt class="literal">PathIterator</tt>
	interface is basically the opposite of
	<tt class="literal">GeneralPath</tt>.  While
	<tt class="literal">GeneralPath</tt> allows a <tt class="literal">Shape</tt>
	to be built of line and curve segments,
	<tt class="literal">PathIterator</tt> breaks a
	<tt class="literal">Shape</tt> down into its component line and curve
	

segments. </p>


<a name="INDEX-884"></a>

<p>
<tt class="literal">Shape</tt> defines two
	<tt class="literal">getPathIterator()</tt> methods.  The two-argument
	version of this method returns a <tt class="literal">PathIterator</tt>
	that describes the shape in terms of line segments only (i.e., 
	it cannot use curves).  This method is usually implemented with a
	<tt class="literal">java.awt.geom.FlatteningPathIterator</tt>, an
	implementation of <tt class="literal">PathIterator</tt> that
	approximates the curved segments in a given path with multiple
	line segments.  The <em class="replaceable">flatness</em> argument
	to <tt class="literal">getPathIterator()</tt> is a measure of how
	closely these line segments must approximate the original curve
	segments, where smaller values of <em class="replaceable">flatness</em> 
	imply a better approximation. </p>

<a name="INDEX-885"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.3. The Coordinate System</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.5. Stroking Lines</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
