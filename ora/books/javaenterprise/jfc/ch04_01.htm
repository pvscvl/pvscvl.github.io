<html>
<head>
<title>Graphics with AWT and Java 2D (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Graphics with AWT" and java 2d">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_24.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_24.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part1.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/part1.htm">Part 1: Introducing the Java Foundation Classes</a></td><td align="right" valign="top" width="172"><a href="ch04_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h1 class="chapter">Chapter 4.  Graphics with AWT

and Java 2D</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_01.htm">Graphics Before Java 2D</a>
<br>
<a href="ch04_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_02.htm">Java 2D Graphics Attributes and Operations</a>
<br>
<a href="ch04_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_03.htm">The Coordinate System</a>
<br>
<a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_04.htm">Shapes</a>
<br>
<a href="ch04_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_05.htm">Stroking Lines</a>
<br>
<a href="ch04_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_06.htm">Paint</a>
<br>
<a href="ch04_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_07.htm">Blending Colors with AlphaComposite</a>
<br>
<a href="ch04_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_08.htm">Rendering Hints</a>
<br>
<a href="ch04_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_09.htm">Fonts and Text</a>
<br>
<a href="ch04_10.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_10.htm">Buffered Images</a>
<br>
<a href="ch04_11.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_11.htm">Transformations with AffineTransform</a>
<br>
<a href="ch04_12.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_12.htm">Color Spaces</a>
<br>
</p>
</div>


<p>Java 1.0 and Java 1.1 included basic graphics capabilities as part of
    the AWT (Abstract Windowing Toolkit).  In the Java 2 platform, these capabilities
    have been greatly enhanced with the introduction of Java 2D.  While
    Java 2D is
    part of the JFC (the Java Foundation Classes), the Java 2D API is
    implemented in the same <tt class="literal">java.awt</tt> package as the
    original Java graphics classes.</p>

<a name="INDEX-742"></a>
<a name="INDEX-743"></a>
<a name="INDEX-744"></a>

<p>This chapter begins by documenting the original Java graphics model,
    which is still required for Java 1.1 applications, applets, and
    Personal Java applications.  The chapter then moves on to detail the
    enhanced features provided by Java 2D.  This chapter can provide only an introduction to the various features of Java 2D; for
    more complete information, see <em class="emphasis">Java 2D Graphics</em>,
    by Jonathan Knudsen (O'Reilly).</p>

<h2 class="sect1">4.1. Graphics Before Java 2D</h2>
<a name="INDEX-745"></a>
<a name="INDEX-746"></a>

<p>All graphics operations in Java are performed using a
      <tt class="literal">java.awt.Graphics</tt> object.  The
      <tt class="literal">Graphics</tt> object serves three purposes:
</p>
      <ul>
<li>

<p>It represents the drawing surface. A
	    <tt class="literal">Graphics</tt> object is used to draw into a
	    <tt class="literal">java.awt.Component</tt> on the screen, to draw
	    into an
	    off-screen <tt class="literal">java.awt.

Image</tt>, or to send
	    graphics to a printer.</p>
</li>
<li>

<p>It maintains the current state of graphics attributes, such
	    as the current drawing color, font, and clipping region.</p>
</li>
<li>

<p>It defines methods that perform various graphics operations,
	    such as drawing lines, rendering strings of text, and
	    copying the content of <tt class="literal">Image</tt> objects onto
	    the drawing surface.</p>
</li>
</ul>

<a name="INDEX-747"></a>

<p>The graphics capabilities of Java before Java 2D can be neatly
      summarized by listing the graphics attributes and operations
      supported by the <tt class="literal">Graphics</tt> object.  
      <a href="#jfcnut-ch-4-tab-graphicsattrs">Table 4-1</a> lists the
      attributes, and 
      <a href="#jfcnut-ch-4-tab-graphicsops">Table 4-2</a> lists the
      operations.  </p>

<a name="INDEX-748"></a>
<a name="jfcnut-ch-4-tab-graphicsattrs"></a>
<h4 class="objtitle">Table 4-1. Attributes of the Graphics Class</h4>
<table border="1">
<tr>
<th>Attribute</th>
<th>Type</th>
<th>Description</th>
</tr>

<tr>
<a name="INDEX-749"></a>
<td>Color</td>
<td><tt class="literal">Color</tt></td>
<td>
<p>Set with <tt class="literal">setColor()</tt>.</p>
</td>
<a name="INDEX-750"></a>
</tr>
<tr>
<td>Font</td>
<td><tt class="literal">Font</tt></td>
<td>
<p>Set with <tt class="literal">setFont()</tt>.
		Only a small number of standard fonts are available.</p>
</td>
<a name="INDEX-751"></a>
</tr>
<tr>
<td>Clipping region</td>
<td><tt class="literal">Rectangle</tt></td>
<td>
<p>In Java 1.1, set with <tt class="literal">setClip()</tt>.  Use
		<tt class="literal">clipRect()</tt> to set
		to the intersection of the current clipping region
		and a rectangle.
		<tt class="literal">setClip()</tt> takes a
		<tt class="literal">Shape</tt> object, but prior to Java 1.2,
		the clipping region is, in practice, restricted to
		rectangles.</p>
</td>
<a name="INDEX-752"></a>
</tr>
<tr>
<td>Origin</td>
<td><tt class="literal">Point</tt></td>
<td>
<p>Use <tt class="literal">translate()</tt> to move 
		the origin.
		The default origin is in the upper-left corner of the
		drawing region, with X coordinates increasing to the
		right and Y coordinates increasing down.</p>
</td>
</tr>
<tr>
<td>Paint mode</td>
<td><tt class="literal">boolean</tt></td>
<td>
<p>
<tt class="literal">setXORMode()</tt> puts the
		<tt class="literal">Graphics</tt> object into the infrequently
		used XOR mode, while <tt class="literal">setPaintMode()</tt>
		restores the default drawing mode.</p>
</td>
<a name="INDEX-753"></a>
</tr>
<tr>
<td>Background color</td>
<td><tt class="literal">Color</tt></td>
<td>
<p>This attribute is used only by the
		<tt class="literal">clearRect()</tt> method, and its value
		cannot be set.  When drawing into a
		<tt class="literal">Component</tt>, the background color 
		is the value of
		the <tt class="literal">background</tt> attribute of the
		component.  The value is undefined when drawing into
		off-screen images.</p>
</td>
</tr>
</table>
<a name="INDEX-754"></a>
<a name="INDEX-755"></a>
<a name="jfcnut-ch-4-tab-graphicsops"></a>
<h4 class="objtitle">Table 4-2. Operations of the Graphics Class</h4>
<table border="1">
<tr>
<th>Operation</th>
<th>Methods</th>
<th>Attributes Used</th>
</tr>

<tr>
<a name="INDEX-756"></a>
<td>Line drawing</td>
<td>
<p>
<tt class="literal">drawLine()</tt>,
		<tt class="literal">drawPolyline()</tt>
</p>
</td>
<td>
<p>color, origin, clip, paint mode</p>
</td>
<a name="INDEX-757"></a>
</tr>
<tr>
<td>Shape drawing</td>
<td>
<p>
<tt class="literal">drawArc()</tt>, 
		<tt class="literal">drawOval()</tt>, 
		<tt class="literal">drawPolygon()</tt>, 
		<tt class="literal">drawRect()</tt>, 
		<tt class="literal">drawRoundRect()</tt>,
		<tt class="literal">draw3DRect()</tt>
</p>
</td>
<td>
<p>color, origin, clip, paint mode</p>
</td>
<a name="INDEX-758"></a>
</tr>
<tr>
<td>Shape filling</td>
<td>
<p>
<tt class="literal">fillArc()</tt>, 
		<tt class="literal">fillOval()</tt>, 
		<tt class="literal">fillPolygon()</tt>, 
		<tt class="literal">fillRect()</tt>, 
		<tt class="literal">fillRoundRect()</tt>,
		<tt class="literal">fill3DRect()</tt>
</p>
</td>
<td>
<p>color, origin, clip, paint mode</p>
</td>
<a name="INDEX-759"></a>
</tr>
<tr>
<td>Text drawing</td>
<td>
<p>
<tt class="literal">drawBytes()</tt>, 
		<tt class="literal">drawChars()</tt>, 
		<tt class="literal">drawString()</tt>
</p>
</td>
<td>
<p>color, font, origin, clip, paint mode</p>
</td>
<a name="INDEX-760"></a>
</tr>
<tr>
<td>Image drawing (blitting)</td>
<td>
<p>
<tt class="literal">drawImage()</tt> (various versions)</p>
</td>
<td>
<p>origin, clip, paint mode</p>
</td>
</tr>
<tr>
<td>Clearing</td>
<td>
<p>
<tt class="literal">clearRect()</tt>
</p>
</td>
<td>
<p>origin, clip, background color</p>
</td>
</tr>
</table>
<a name="INDEX-761"></a>

<h3 class="sect2">4.1.1. Line Drawing</h3>
<a name="INDEX-762"></a>

<p>An important point to notice in 
	<a href="#jfcnut-ch-4-tab-graphicsattrs">Table 4-1</a> is that there is
	no attribute for line width.  Prior to Java 2D, Java can only
	draw lines that are a single pixel wide.  This is perhaps the
	single largest limitation of the Java 1.0 and Java 1.1 graphics
	

environments. </p>


<h3 class="sect2">4.1.2. Colors</h3>
<a name="INDEX-763"></a>

<p>Colors are represented by the
	<tt class="literal">java.awt.Color</tt> class.  In Java 1.0 and Java
	1.1, this class represents colors in the RGB color space.  It
	has constructors that allow you to specify red, green, and blue
	color coordinates as integers or as floating-point
	values.  The class defines a static method that allows you to create a
	<tt class="literal">Color</tt> using coordinates from the HSB (hue,
	saturation, brightness) color space.  It also defines a number
	of constants that represent colors by their common names, such as
	<tt class="literal">Color.black</tt> and
	<tt class="literal">Color.white</tt>.</p>

<a name="INDEX-764"></a>
<a name="INDEX-765"></a>

<p>
<tt class="literal">java.awt.SystemColor</tt> is a subclass of
	<tt class="literal">Color</tt> introduced in Java 1.1.  The class has
	no public constructor but defines a number of
	<tt class="literal">SystemColor</tt> constants that represent colors
	used on the system desktop (for systems that support a
	system desktop color palette).  For example,
	<tt class="literal">SystemColor.textHighlight</tt> represents the
	color used for highlighted text</p>

<a name="INDEX-766"></a>


<h3 class="sect2">4.1.3. Fonts</h3>
<a name="INDEX-767"></a>
<a name="INDEX-768"></a>

<p>Fonts are represented with the
	<tt class="literal">java.awt.Font</tt> class.  A
	<tt class="literal">Font</tt> object is created by specifying the
	name, style, and point size of the desired font.  In an attempt to
	promote platform independence, Java 1.0 supports only a handful
	of standard font names.  Java 1.1 supports the same fonts but
	provides new preferred symbolic names for them.  The fonts
	supported prior to Java 2D are listed in 
	<a href="#jfcnut-ch-4-tab-fontnames">Table 4-3</a>.</p>

<a name="INDEX-769"></a>
<a name="INDEX-770"></a>
<a name="jfcnut-ch-4-tab-fontnames"></a>
<h4 class="objtitle">Table 4-3. Font Names in Java 1.0 and Java 1.1</h4>
<table border="1">
<tr>
<th>Java 1.0 Name</th>
<th>Preferred Name in Java 1.1</th>
</tr>

<tr>
<td>TimesRoman</td>
<td>Serif</td>
</tr>
<tr>
<td>Helvetica</td>
<td>SansSerif</td>
</tr>
<tr>
<td>Courier</td>
<td>Monospaced</td>
</tr>
<tr>
<td>Symbol</td>
<td>Symbol</td>
</tr>
<tr>
<td>Dialog</td>
<td>Dialog</td>
</tr>
<tr>
<td>DialogInput</td>
<td>DialogInput</td>
</tr>
</table>
<a name="INDEX-771"></a>
<a name="INDEX-772"></a>

<p>Fonts can be displayed in any of four possible font styles,
	which are represented by the symbolic constants listed in 
	<a href="#jfcnut-ch-4-tab-fontstyles">Table 4-4</a>.</p>

<a name="jfcnut-ch-4-tab-fontstyles"></a>
<h4 class="objtitle">Table 4-4. Java Font Styles</h4>
<table border="1">
<tr>
<th>Style</th>
<th>Java Constant</th>
</tr>

<tr>
<td>plain</td>
<td><tt class="literal">Font.PLAIN</tt></td>
</tr>
<tr>
<td>italic</td>
<td><tt class="literal">Font.ITALIC</tt></td>
</tr>
<tr>
<td>bold</td>
<td><tt class="literal">Font.BOLD</tt></td>
</tr>
<tr>
<td>bolditalic</td>
<td><tt class="literal">Font.BOLD + Font.ITALIC</tt></td>
</tr>
</table>

<p>Font sizes are specified in points.  The
	<tt class="literal">Font()</tt> constructor accepts an integer
	argument, so fractional point sizes are not supported in Java
	1.0 and 1.1.  If the native platform does not support scalable
	fonts, the returned font may have a different size than what you
	requested.</p>

<a name="INDEX-773"></a>


<h3 class="sect2">4.1.4. Font Metrics</h3>
<a name="INDEX-774"></a>
<a name="INDEX-775"></a>

<p>If you need to figure out how big a piece of text will be, you can
	call
	the <tt class="literal">getFontMetrics()</tt> methods of a
	<tt class="literal">Graphics</tt> object and pass in the desired
	font.  This returns a <tt class="literal">FontMetrics</tt> object.
	The <tt class="literal">getHeight()</tt> method returns the line
	height for the font, which can be further broken down into the
	font ascent and descent, returned by <tt class="literal">getAscent()</tt>
	and <tt class="literal">getDescent()</tt>, respectively.  
	To measure the horizontal
	dimension of text, use <tt class="literal">charWidth()</tt> and
	<tt class="literal">stringWidth()</tt>. 
<a name="INDEX-776"></a><a name="INDEX-777"></a><a name="INDEX-778"></a><a name="INDEX-779"></a>
</p>

<h3 class="sect2">4.1.5. Images</h3>
<a name="INDEX-780"></a>
<a name="INDEX-781"></a>

<p>Images are represented by the
	<tt class="literal">java.awt.Image</tt> class.  Working with images in
	Java 1.0 and Java 1.1 is a little tricky because the image
	processing model of those releases is based on streaming image
	data being loaded across a network.  This treatment of images
	allows images to be partially displayed before they are fully
	loaded, but makes working with images somewhat more difficult.</p>

<a name="INDEX-782"></a>


<p>All of the <tt class="literal">drawImage()</tt> methods of the
	<tt class="literal">Graphics</tt> objects require an
	<tt class="literal">java.awt.

image.ImageObserver</tt> object.  This is
	the object that handles things if you try to draw an image that
	is not fully loaded.  Fortunately,
	<tt class="literal">java.awt.Component</tt> implements
	<tt class="literal">ImageObserver</tt>, so you can use any
	<tt class="literal">Component</tt> or <tt class="literal">Applet</tt> object
	for this method argument.</p>

<a name="INDEX-783"></a>
<a name="INDEX-784"></a>

<p>If are writing an applet and want to load a predefined image
	from a URL, you can 
	use the <tt class="literal">getImage()</tt> method defined
	by the <tt class="literal">java.applet.Applet</tt> class.  This method
	begins downloading the specified image and returns an
	<tt class="literal">Image</tt> object to you immediately.</p>

<p>If you are writing a standalone application and want to load a
	predefined image from a file or URL, use one of the
	<tt class="literal">getImage()</tt> or
	<tt class="literal">createImage()</tt> methods of the 
	<tt class="literal">java.awt.Toolkit</tt> class:
</p>

<blockquote>
<pre class="programlisting">Toolkit.getDefaultToolkit().getImage("myimage.gif");</pre>
</blockquote>

<p>
	Like the <tt class="literal">getImage()</tt> method of
	<tt class="literal">Applet</tt>, these <tt class="literal">Toolkit</tt>
	methods start loading the image and immediately return an
	<tt class="literal">Image</tt> object.  The image formats supported by
	these <tt class="literal">Applet</tt> and <tt class="literal">Toolkit</tt>
	methods are implementation dependent.  Most implementations
	support common formats, such as GIF (including transparent GIF),
	JPEG, and XBM.</p>

<a name="INDEX-785"></a>

<p>To ensure that an <tt class="literal">Image</tt> object is
	fully loaded before you use it, you can create a
	<tt class="literal">java.awt.MediaTracker</tt> object, pass your
	<tt class="literal">Image</tt> to its <tt class="literal">addImage()</tt>
	method, then call the <tt class="literal">waitForAll()</tt> method.</p>

<a name="INDEX-786"></a>
<a name="INDEX-787"></a>
<a name="INDEX-788"></a>

<p>To create an empty off-screen image that you can
	draw into and copy pixels out of, call the
	<tt class="literal">createImage()</tt> method of the
	<tt class="literal">Component</tt> with which you plan to use the
	image and pass in the desired width and height of the image.  To
	draw into the image, you have to 
	obtain a <tt class="literal">Graphics</tt> object
	by calling the <tt class="literal">getGraphics()</tt> method of the
	image.  Images created in this way are often used for
	double-buffering, to produce smoother animations or graphical
	updates. </p>

<a name="INDEX-789"></a>
<a name="INDEX-790"></a>

<p>The <tt class="literal">java.awt.image</tt> package contains classes
	that support rudimentary image processing and filtering.  Java 2D
	implements more powerful image-processing techniques, so
	the Java 1.0 model is not described here.</p>

<a name="INDEX-791"></a>
<a name="INDEX-792"></a>


<a name="INDEX-831"></a>












<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_24.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_24.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.24. Custom Components</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.2. Java 2D Graphics Attributes and Operations</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
