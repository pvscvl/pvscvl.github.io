<html>
<head>
<title>Pluggable Look-and-Feel (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Pluggable Look-and-Feel">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_21.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_21.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_01.htm">Chapter 3: Swing

Programming Topics</a></td><td align="right" valign="top" width="172"><a href="ch03_23.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_23.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">3.22. Pluggable Look-and-Feel</h2>
<a name="INDEX-668"></a>
<a name="INDEX-669"></a>
<a name="INDEX-670"></a>
<a name="INDEX-671"></a>
<a name="INDEX-672"></a>
<a name="INDEX-673"></a>
<a name="INDEX-674"></a>

<p>One of the unique features of Swing is its pluggable
      look-and-feel (PLAF) architecture, which 
      allows a Swing application to change its entire appearance
      with one or two lines of code.  The most common use of this
      feature is to give applications a choice between the native
      platform look-and-feel and a new platform-independent Java
      look-and-feel (also known as the Metal look-and-feel).  Swing
      is distributed with three look-and-feels: Metal and two 
      look-and-feels that 
      mimic the appearance and behavior of the Windows and Motif
      (Unix/X) component toolkits.  A look-and-feel that mimics the
      Macintosh platform is available as a separate download.  While the
      Metal and Motif look-and-feels can be freely used, the Windows
      look-and-feel is restricted for use only on Windows platform--for
      copyright reasons, it does not run on any other operating system.</p>

<p>When a Swing application starts up, it reads the system property
      <tt class="literal">swing.defaultlaf</tt> to determine the classname of
      the default look-and-feel.  In most Java installations, this
      property is set to the default Java look-and-feel, implemented by
      the class
      <tt class="literal">javax.swing.plaf.metal.MetalLookAndFeel</tt>.  
      The end user can override this default by using the
      <tt class="literal">-D</tt> switch on the command line when invoking the
      Java interpreter.  For example, to run a Swing application using
      the Motif look-and-feel, a user can type:
<a name="INDEX-675"></a>
</p>

<blockquote>
<pre class="programlisting">% java -Dswing.defaultlaf=com.sun.java.swing.plaf.motif.MotifLookAndFeel app</pre>
</blockquote>

<p>
      If the user is using a Windows operating system, he can
      start the application using the Windows look-and-feel like this:
<a name="INDEX-676"></a>
</p>

<blockquote>
<pre class="programlisting">% java -Dswing.defaultlaf=com.sun.java.swing.plaf.windows.WindowsLookAndFeel app</pre>
</blockquote>



<a name="INDEX-677"></a>
<a name="INDEX-678"></a>

<p>When you write a Swing application, you can explicitly set the
      look-and-feel that the application uses.  To do this, simply call
      the static <tt class="literal">setLookAndFeel()</tt> method of the
      <tt class="literal">UIManager</tt> class and specify the classname
      of the desired look-and-feel implementation.  To make this even
      easier, <tt class="literal">UIManager</tt> defines a static method that
      returns the classname of the default cross-platform look-and-feel
      (i.e., Metal) and another that returns 
      the classname of the look-and-feel that mimics
      the native look-and-feel of the current platform.  So, if you want
      your application to always look like a native application, you
      can simply include this line of code in your application, before
      it begins to create any GUI components:
</p>

<blockquote>
<pre class="programlisting">UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());</pre>
</blockquote>

<p>
      Or, if you want to force the application to use the cross-platform
      look-and-feel, regardless of installation defaults and user
      preferences, you can use this line of code:
</p>

<blockquote>
<pre class="programlisting">UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());</pre>
</blockquote>



<p>Note that calling <tt class="literal">setLookAndFeel()</tt> like this
      overrides the value of the
      <tt class="literal">swing.defaultlaf</tt> property, if the end user
      has set one.  Of course, the command-line
      syntax for setting that property is quite awkward and may be
      beyond the capabilities of many end users.  An alternative is to
      implement command-line options in your own application that give
      the user a choice of look-and-feels.  You
      might set a native look-and-feel if the user specifies a
      <tt class="literal">-nativelook</tt> flag on the command line, for
      example.</p>

<p>The easiest time to call the <tt class="literal">setLookAndFeel()</tt>
      method is at application start-up, before any Swing components
      have been created.  It is also possible to change the look-and-feel of
      a running application, however.  This means that you can allow 
      the user to change the current look-and-feel through a preferences 
      dialog box, if you are so inclined.  
      When the user selects a new look-and-feel, you 
      first call <tt class="literal">setLookAndFeel()</tt> to install the new
      look-and-feel, and then you have to notify all of the Swing
      components that a new look-and-feel is in effect and ask them to
      use it. Fortunately, there is a convenience method to do this.
      Your code might look like this:
</p>

<blockquote>
<pre class="programlisting">// Set the new look-and-feel
UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName);
// Tell all components from main JFrame on down that LAF has changed
SwingUtilities.updateComponentTreeUI(myframe);</pre>
</blockquote>



<a name="INDEX-679"></a>

<p>A dialog that allows the user to
      change the currently installed look-and-feel of a running
      application should probably let the user choose among all the
      look-and-feels that are installed on the system.
      An application can find out the classnames and human-readable
      names of all the installed look-and-feels on a given system by
      calling the static 
      <tt class="literal">getInstalledLookAndFeels()</tt> method
      of <tt class="literal">UIManager</tt>.  In the
      implementation from Sun, this method returns either a default list
      of installed look-and-feels or a list obtained from the
      <tt class="literal">swing.properties</tt> file of the installation.</p>

<a name="INDEX-680"></a>
<a name="INDEX-681"></a>

<h3 class="sect2">3.22.1. Using Themes with the Metal Look-and-Feel</h3>

<p>You can customize the colors and fonts of the default Java 
	look-and-feel by subclassing the
	<tt class="literal">DefaultMetalTheme</tt> class that appears in the
	<tt class="literal">javax.swing.plaf.metal</tt> package.  When you create
	a custom subclass, you can specify the six different fonts and six
	different colors used by the Metal look-and-feel.  For example,
	you might implement a large font theme for users who have
	difficulty reading the default fonts used by Metal.  </p>

<a name="INDEX-682"></a>
<a name="INDEX-683"></a>

<p>If you are feeling brave and want to second-guess the skilled
	designers who put the Metal look-and-feel together, you can
	subclass the abstract <tt class="literal">MetalTheme</tt> class
	directly.  This class defines many methods that return colors
	and fonts.  All of these methods, however, are implemented in
	terms of the six basic font methods and six basic color methods
	of the <tt class="literal">DefaultMetalTheme</tt> class.</p>

<a name="INDEX-684"></a>
<a name="INDEX-685"></a>

<p>If you look at the <tt class="literal">DefaultMetalTheme</tt> API, 
	you'll notice that the font and color methods do not return
	<tt class="literal">java.awt.Font</tt> and
	<tt class="literal">java.awt.Color</tt> objects as you would expect.
	Instead, they return <tt class="literal">FontUIResource</tt>
	and <tt class="literal">ColorUIResource</tt> objects.  Both of these
	classes are part of the <tt class="literal">javax.swing.plaf</tt>
	package and are trivial subclasses of the more familiar
	<tt class="literal">Font</tt> and <tt class="literal">Color</tt> classes.
	The only thing these subclasses do is implement the
	<tt class="literal">UIResource</tt> interface.  But
	<tt class="literal">UIResource</tt> is a marker interface, with no
	methods of its own.  Thus, a <tt class="literal">FontUIResource</tt> is
	a <tt class="literal">Font</tt> object that also happens to implement
	<tt class="literal">UIResource</tt>.  Similarly, a
	<tt class="literal">ColorUIResource</tt> is 

both a
	<tt class="literal">Color</tt> object and a
	<tt class="literal">UIResource</tt> object.  </p>

<a name="INDEX-686"></a>
<a name="INDEX-687"></a>

<p>The currently installed look-and-feel assigns default values for
	many properties of Swing components.  A look-and-feel 
	implementation needs to be able to distinguish between 
	default values it has specified and programmer-supplied property 
	values.  For this reason, all
	look-and-feel defaults, such as colors and fonts, must implement
	the <tt class="literal">UIResource</tt> marker interface.  For our
	purposes here, you can subclass
	<tt class="literal">DefaultMetalTheme</tt> and use the
	<tt class="literal">FontUIResource</tt> and
	<tt class="literal">ColorUIResource</tt> classes exactly as you would
	use normal <tt class="literal">Font</tt> and <tt class="literal">Color</tt>
	resources.</p>

<p>Once you have created your own theme by subclassing
	<tt class="literal">MetalTheme</tt> or
	<tt class="literal">DefaultMetalTheme</tt>, you can install it with
	code like this:
<a name="INDEX-688"></a>
</p>

<blockquote>
<pre class="programlisting">MetalLookAndFeel.setCurrentTheme(new MyCustomTheme());</pre>
</blockquote>

<p>
	If you are changing the current theme after having already
	created Swing components, you also have to reinstall the
	<tt class="literal">MetalLookAndFeel</tt> and notify all the
	components of the change:
</p>

<blockquote>
<pre class="programlisting">UIManager.setLookAndFeel(new MetalLookAndFeel());
SwingUtilities.updateComponentTreeUI(myRootFrame);</pre>
</blockquote>



<a name="INDEX-689"></a>


<h3 class="sect2">3.22.2. Auxiliary Look-and-Feels</h3>

<p>If you've browsed the list of Swing packages, you've probably
	noticed <tt class="literal">javax.swing.plaf.multi</tt>.  This is the
	multiplexing look-and-feel.  It allows one or more auxiliary
	look-and-feels to be used in conjunction with a single primary
	look-and-feel.  The multiplexing look-and-feel is automatically used
	by a Swing application if an auxiliary look-and-feel has been
	requested.  An application can request an auxiliary
	look-and-feel by calling the static
	<tt class="literal">UIManager</tt> method
	<tt class="literal">addAuxiliaryLookAndFeel()</tt>, while an end user can
	do this by setting the <tt class="literal">swing.auxiliarylaf</tt>
	property on a Java command line.  </p>

<a name="INDEX-690"></a>
<a name="INDEX-691"></a>
<a name="INDEX-692"></a>

<p>The primary purpose of auxiliary look-and-feels is for
	accessibility.  For example, a person with impaired vision might
	start up a Java application using the
	<tt class="literal">-Dswing.auxiliarylaf=</tt> option to specify that
	the application should load a screen-reader look-and-feel.
	Auxiliary look-and-feels can be used for other purposes as well,
	of course.  You might use an auxiliary look-and-feel to add
	audio feedback to a user interface.  Such a look-and-feel might
	produce an audible click when the user clicks on a
	<tt class="literal">JButton</tt>, for example.</p>

<a name="INDEX-693"></a>

<p>Swing is not shipped with any predefined auxiliary
	look-and-feels.  You can implement your own, of course, although
	explaining how to do so is beyond the scope of this
	book.  </p>

<a name="INDEX-694"></a>
<a name="INDEX-695"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_21.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_21.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_23.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch03_23.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.21. JTextComponent and HTML Text Display</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.23. Accessibility</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
