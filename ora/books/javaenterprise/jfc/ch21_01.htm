<html>
<head>
<title>The java.awt.print Package (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The java.awt.print Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch20_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch20_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/part2.htm">Part 2: API Quick Reference</a></td><td align="right" valign="top" width="172"><a href="ch22_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch22_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 21.  The java.awt.print Package</h1>

<p>  The <tt class="literal">java.awt.print</tt> 
  package contains classes and interfaces that support
  printing.  It has been introduced in Java 1.2 and supersedes the
  <tt class="literal">PrintJob</tt> class of the <tt class="literal">java.awt</tt>
  package.  The most important class in this package is
  <tt class="literal">PrinterJob</tt>; it coordinates the printing process.
  The <tt class="literal">Printable</tt> and <tt class="literal">Pageable</tt>
  interfaces represent printable objects or documents that can be printed
  with a <tt class="literal">PrinterJob</tt>.
  <a href="#jfcnut-ch-java.awt.print-fig-1">Figure 21-1</a> shows the class hierarchy of
  this package.
  See <a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch05_01.htm">Chapter 5, "Printing"</a>, for more details on printing.</p>
<a name="INDEX-2200"></a>
<a name="INDEX-2201"></a>
<a name="INDEX-2202"></a>
<a name="jfcnut-ch-java.awt.print-fig-1"></a>
<div class="figure">
<img alt="figure" src="figs/jfcn.2101.gif" webstripperlinkwas="figs/jfcn.2101.gif"></div>
<h4 class="objtitle">Figure 21-1. The java.awt.print package</h4>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Book</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.print</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2203"></a>
<p> 
  This class implements a multi-page <tt class="literal">Pageable</tt>
  document out of individual single-page <tt class="literal">Printable</tt>
  objects.  Each page of the <tt class="literal">Book</tt> can have its own
  <tt class="literal">PageFormat</tt> specified.  You might use this class,
  for example, in a database-reporting application when you want to
  print a report that consists of single-page tables and graphs in mixed
  portrait and landscape modes.</p>
<a name="INDEX-2204"></a>
<a name="INDEX-2205"></a>
<p>  The <tt class="literal">append()</tt> and <tt class="literal">setPage()</tt>
  methods allow you to specify the <tt class="literal">Printable</tt> pages
  that make up the book, along with their <tt class="literal">PageFormat</tt>
  objects.  The remaining methods implement the
  <tt class="literal">Pageable</tt> interface and are used by a
  <tt class="literal">PrinterJob</tt> to print the <tt class="literal">Book</tt>.</p>
<p>  As with all <tt class="literal">Pageable</tt> objects, the
  <tt class="literal">Printable</tt> objects added to a
  <tt class="literal">Book</tt> must print only a single page.  (See
  <tt class="literal">Pageable</tt> for details.)  Note that the
  three-argument version of <tt class="literal">append()</tt> takes a
  <em class="replaceable">numPages</em> argument.  
  This argument does not specify
  the number of pages in the <tt class="literal">Printable</tt>; instead, it
  specifies the number of identical copies of the single-page
  <tt class="literal">Printable</tt> to be printed.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Book</b> implements Pageable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Book</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">append</b> (Printable <i class="parameter">painter</i>, PageFormat <i class="parameter">page</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">append</b> (Printable <i class="parameter">painter</i>, PageFormat <i class="parameter">page</i>, int <i class="parameter">numPages</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPage</b> (int <i class="parameter">pageIndex</i>, Printable <i class="parameter">painter</i>, PageFormat <i class="parameter">page</i>) throws IndexOutOfBoundsException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods Implementing Pageable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getNumberOfPages</b> ();</td><td align="right"><i> default:0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public PageFormat <b class="function">getPageFormat</b> (int <i class="parameter">pageIndex</i>) throws IndexOutOfBoundsException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Printable <b class="function">getPrintable</b> (int <i class="parameter">pageIndex</i>) throws IndexOutOfBoundsException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Book(Pageable)</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Pageable</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.print</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2206"></a>
<p> 
  This interface is implemented by multipage documents that know
  how to print themselves in more sophisticated ways than the
  <tt class="literal">Printable</tt> interface allows.  There are two primary
  differences between <tt class="literal">Pageable</tt> and
  <tt class="literal">Printable</tt>.  The first is that
  a <tt class="literal">Pageable</tt> object knows how many pages are in the
  document and can print them in an arbitrary order.  This allows a
  printer dialog to give the user the choice to print only a range of
  pages within the document.  It also allows the user to request that
  the pages be printed in reverse order, which is useful on some
  printers that stack document pages in reverse order.
  The second difference between <tt class="literal">Pageable</tt> and
  <tt class="literal">Printable</tt> is that each page of a
  <tt class="literal">Pageable</tt> may have a different
  <tt class="literal">PageFormat</tt> associated with it.  This is useful when
  a document contains pages in portrait orientation and some pages
  in landscape orientation, for example.</p>
<a name="INDEX-2207"></a>
<p>  The heart of the <tt class="literal">Pageable</tt> interface is the
  method <tt class="literal">getPrintable()</tt>, which returns a
  <tt class="literal">Printable</tt> object able to print the specified page
  of the document.  The <tt class="literal">Printable</tt> objects
  returned by this method are used differently and must be implemented
  differently than <tt class="literal">Printable</tt> objects that are
  designed to be printed alone.  While standalone
  <tt class="literal">Printable</tt> objects may print multiple pages, the
  <tt class="literal">Printable</tt> objects returned by a
  <tt class="literal">Pageable</tt> represent only a single page.  In other
  words, the
  <tt class="literal">getPrintable()</tt> method of <tt class="literal">Pageable</tt>
  is called once for
  every page in the document, and the <tt class="literal">Printable</tt> it
  returns is used to print only that one page.</p>
<p>  The <tt class="literal">Pageable</tt> interface lends itself to two distinct
  implementation strategies. In the first, the
  <tt class="literal">getPrintable()</tt> method returns a different
  <tt class="literal">Printable</tt> object for each page of the document.
  This <tt class="literal">Printable</tt> object knows exactly what page to
  print and can ignore the <em class="replaceable">pageIndex</em>
  argument passed to its <tt class="literal">print()</tt> method.  The second
  strategy is to implement a single <tt class="literal">Printable</tt> object
  and have the <tt class="literal">getPrintable()</tt> method always return
  this one object, regardless of page number.  In this case, the
  <tt class="literal">print()</tt> method uses the
  <em class="replaceable">pageIndex</em> argument to decide what page to
  print.  Note that a <tt class="literal">Printable</tt> implemented in this
  way must be more flexible than a standalone
  <tt class="literal">Printable</tt> object, since its pages may be printed in
  any order and are not guaranteed to be accessed sequentially.</p>
<p>  Finally, as with standalone <tt class="literal">Printable</tt>
  objects, <tt class="literal">Printable</tt> objects returned by
  <tt class="literal">Pageable</tt> objects must be prepared to have their
  <tt class="literal">print()</tt> methods called multiple times for the same
  page number.  This is a requirement for banded raster printing in
  low-memory environments.  See <tt class="literal">Printable</tt> for
  details. </p>
<a name="INDEX-2208"></a>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">Pageable</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">UNKNOWN_NUMBER_OF_PAGES</b> ;</td><td align="right"><i> =-1</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getNumberOfPages</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract PageFormat <b class="function">getPageFormat</b> (int <i class="parameter">pageIndex</i>) throws IndexOutOfBoundsException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Printable <b class="function">getPrintable</b> (int <i class="parameter">pageIndex</i>) throws IndexOutOfBoundsException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">Book</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">PrinterJob.setPageable()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PageFormat</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.print</b></font></td><td align="right"><font size="+1"><b><i>cloneable</i></b></font></td>
</tr>
</table>
<a name="INDEX-2209"></a>
<p> 
  This class is a combination of a <tt class="literal">Paper</tt> object
  that specifies page size and imageable area with a field that
  specifies the orientation of the page.  The orientation values are the
  following:</p>

  <dl>
<dt>
<b><tt class="literal">PORTRAIT</tt></b>
</dt>
<dd>
<p>	  This is the normal orientation of a piece of paper.  The
	  origin is at the top left, with the X axis running from left
	  to right and the Y axis running from top to bottom.
	</p>
</dd>
<dt>
<b><tt class="literal">LANDSCAPE</tt></b>
</dt>
<dd>
<p>	  This is the orientation that results from rotating a piece of
	  paper 90 degrees clockwise.  The origin is at the bottom left
	  of the sheet of paper, with the X axis running from bottom to
	  top and the Y axis running from left to right.
	</p>
</dd>
<dt>
<b><tt class="literal">REVERSE_LANDSCAPE</tt></b>
</dt>
<dd>
<p>	    This is the orientation that results from rotating a piece
	    of paper 90 degrees counterclockwise.  The origin is at the
	    top right of the sheet of paper, with the X axis running
	    from top to bottom and the Y axis running from right to
	    left.  
	  </p>
</dd>
</dl>

<p>
<tt class="literal">Printable</tt> and <tt class="literal">Pageable</tt>
  objects are not responsible for performing the rotations necessary to
  print in these orientations.  The appropriate transform has already
  been done in the <tt class="literal">Graphics</tt> object passed to the
  <tt class="literal">print()</tt> method of <tt class="literal">Printable</tt>.</p>
<a name="INDEX-2210"></a>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PageFormat</b> implements Cloneable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PageFormat</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">LANDSCAPE</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">PORTRAIT</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">REVERSE_LANDSCAPE</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getHeight</b> ();</td><td align="right"><i> default:792.0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getImageableHeight</b> ();</td><td align="right"><i> default:648.0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getImageableWidth</b> ();</td><td align="right"><i> default:468.0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getImageableX</b> ();</td><td align="right"><i> default:72.0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getImageableY</b> ();</td><td align="right"><i> default:72.0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double[ ] <b class="function">getMatrix</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getOrientation</b> ();</td><td align="right"><i> default:1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setOrientation</b> (int <i class="parameter">orientation</i>) throws IllegalArgumentException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Paper <b class="function">getPaper</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setPaper</b> (Paper <i class="parameter">paper</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getWidth</b> ();</td><td align="right"><i> default:612.0</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->PageFormat(Cloneable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Book.{append(), setPage()}, Printable.print(), PrinterJob.{defaultPage(), pageDialog(), setPrintable(), validatePage()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Book.getPageFormat(), Pageable.getPageFormat(), PrinterJob.{defaultPage(), pageDialog(), validatePage()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Paper</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.print</b></font></td><td align="right"><font size="+1"><b><i>cloneable</i></b></font></td>
</tr>
</table>
<a name="INDEX-2211"></a>
<p> 
  This class describes the width, height, 
  and imageable area of a piece of paper.  The imageable area
  is the region of a page that should be printed on--the area inside the
  margins.  Most printers cannot print all the way to the edges of the
  page and require margins of at least a quarter inch on all sides.
  All coordinates and sizes used by this class are measured in printer's
  points, where one point is defined as exactly 1/72nd of an inch.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Paper</b> implements Cloneable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">Paper</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getHeight</b> ();</td><td align="right"><i> default:792.0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getImageableHeight</b> ();</td><td align="right"><i> default:648.0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getImageableWidth</b> ();</td><td align="right"><i> default:468.0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getImageableX</b> ();</td><td align="right"><i> default:72.0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getImageableY</b> ();</td><td align="right"><i> default:72.0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public double <b class="function">getWidth</b> ();</td><td align="right"><i> default:612.0</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setImageableArea</b> (double <i class="parameter">x</i>, double <i class="parameter">y</i>, double <i class="parameter">width</i>, double <i class="parameter">height</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">setSize</b> (double <i class="parameter">width</i>, double <i class="parameter">height</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Methods Overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Paper(Cloneable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">PageFormat.setPaper()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">PageFormat.getPaper()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Printable</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.print</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2212"></a>
<p> 
  This interface is implemented by objects that know how to print
  themselves.  It should be implemented by objects that always print a
  single page, or by multipage documents that know how to print their
  pages in sequential order only.  Multipage documents that are able to
  print their pages in arbitrary order should implement the somewhat
  more complex <tt class="literal">Pageable</tt> interface.</p>
<p>  When a <tt class="literal">PrinterJob</tt> prints a
  <tt class="literal">Printable</tt> object, it calls the
  <tt class="literal">print()</tt> method one or more times to print the
  pages.  This method should print the page specified by
  <em class="replaceable">pageIndex</em>, using the specified
  <tt class="literal">Graphics</tt> object and the page size and
  orientation specified in the <tt class="literal">PageFormat</tt> object.</p>
<p>  The <tt class="literal">PrinterJob</tt> guarantees that it prints the
  pages of a <tt class="literal">Printable</tt> in strictly sequential order.
  The <tt class="literal">pageIndex</tt> argument begins at 0 and
  increases.  After printing a page, the <tt class="literal">print()</tt>
  method should return the <tt class="literal">PAGE_EXISTS</tt> constant.
  Since the <tt class="literal">PrinterJob</tt> has no way of knowing how many
  pages there are in a <tt class="literal">Printable</tt> object, it keeps
  increasing the page number until the <tt class="literal">print()</tt> method
  returns the <tt class="literal">NO_SUCH_PAGE</tt> constant.  When this value
  is returned, the <tt class="literal">PrinterJob</tt> knows that it has
  reached the end of the print job.</p>
<p>  There is a very important twist in this communication protocol between
  <tt class="literal">PrinterJob</tt> and <tt class="literal">Printable</tt>.  While
  the <tt class="literal">PrinterJob</tt> guarantees that it does not try to
  print pages out of order, it is allowed to print the same page
  multiple times.  This means, for example, that the
  <tt class="literal">print()</tt> method may be called with a
  <em class="replaceable">pageIndex</em> argument of 0 three times in a
  row.  <tt class="literal">Printable</tt> objects must be implemented with
  this possibility in mind.  The reason that this is necessary is that,
  in some cases, printing is done into a very large (high-resolution)
  off-screen image, and this image data is then transferred to the
  printer.  On systems with limited memory, this printing technique must
  be done in multiple passes, printing only a fraction, or band, of the
  page at each pass.</p>
<p>  The <tt class="literal">Printable</tt> interface is also
  used by <tt class="literal">Pageable</tt> objects that know how to print
  their pages out of order.  When a <tt class="literal">Printable</tt> object
  is returned by a <tt class="literal">Pageable</tt> object, the
  <tt class="literal">PrinterJob</tt> uses it differently than it does a
  standalone <tt class="literal">Printable</tt> object.  See
  <tt class="literal">Pageable</tt> for details.</p>
<a name="INDEX-2213"></a>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">Printable</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">NO_SUCH_PAGE</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">PAGE_EXISTS</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">print</b> (Graphics <i class="parameter">graphics</i>, PageFormat <i class="parameter">pageFormat</i>, int <i class="parameter">pageIndex</i>) throws PrinterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">Book.{append(), setPage()}, PrinterJob.setPrintable()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Book.getPrintable(), Pageable.getPrintable()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PrinterAbortException</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.print</b></font></td><td align="right"><font size="+1"><b><i>serializable checked</i></b></font></td>
</tr>
</table>
<p>  Signals that a print job has been aborted,
  typically because of a user request to terminate it.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PrinterAbortException</b> extends PrinterException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PrinterAbortException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PrinterAbortException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->PrinterException-->PrinterAbortException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PrinterException</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.print</b></font></td><td align="right"><font size="+1"><b><i>serializable checked</i></b></font></td>
</tr>
</table>
<a name="INDEX-2214"></a>
<p>  This class serves as the superclass for all exceptions that may arise
  in the process of printing.  See the subclasses
  <tt class="literal">PrinterAbortException</tt> and
  <tt class="literal">PrinterIOException</tt>.  <tt class="literal">PrinterException</tt> and its subclasses are checked
  exceptions, they must be declared in the <tt class="literal">throws</tt>
  clauses of methods that may throw them.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PrinterException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PrinterException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PrinterException</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->PrinterException</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">PrinterAbortException, PrinterIOException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">Printable.print(), PrinterJob.print()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PrinterGraphics</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.print</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>  This interface is implemented by any <tt class="literal">Graphics</tt>
  object that is passed to the <tt class="literal">print()</tt> method of a
  <tt class="literal">Printable</tt> object.  This means that a
  <tt class="literal">Printable</tt> can always cast its
  <tt class="literal">Graphics</tt> object to a
  <tt class="literal">PrinterGraphics</tt> object and use the
  <tt class="literal">getPrinterJob()</tt> method to obtain the
  <tt class="literal">PrinterJob</tt> that is in use.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">PrinterGraphics</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract PrinterJob <b class="function">getPrinterJob</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PrinterIOException</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.print</b></font></td><td align="right"><font size="+1"><b><i>serializable checked</i></b></font></td>
</tr>
</table>
<a name="INDEX-2215"></a>
<p> 
  Indicates that an I/O error occurred during
  the printing process.  This usually means that the
  <tt class="literal">PrinterJob</tt> had trouble communicating with the
  printer or print server.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">PrinterIOException</b> extends PrinterException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PrinterIOException</b> (java.io.IOException <i class="parameter">exception</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.io.IOException <b class="function">getIOException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->PrinterException-->PrinterIOException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>PrinterJob</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.awt.print</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<a name="INDEX-2216"></a>
<p>  This class controls printing of <tt class="literal">Printable</tt> and
  <tt class="literal">Pageable</tt> objects.  Applications typically use this
  class as follows:</p>

  <ul>
<li>
<p>	Create a <tt class="literal">PrinterJob</tt> by calling the
	static method <tt class="literal">getPrinterJob()</tt>.  This requires appropriate security permissions, so untrusted
	applets cannot do this.
      </p>
</li>
<a name="INDEX-2217"></a>
<li>
<p>	Configure the <tt class="literal">PrinterJob</tt>, if desired, by
	calling <tt class="literal">setJobName()</tt> and
	<tt class="literal">setCopies()</tt>.
      </p>
</li>
<a name="INDEX-2218"></a>
<a name="INDEX-2219"></a>
<li>
<p>	Interactive applications that want to give the user a choice
	about page orientation and margins should call
	<tt class="literal">pageDialog()</tt>, passing in a default
	<tt class="literal">PageFormat</tt> object.  This method returns a new
	<tt class="literal">PageFormat</tt> object that contains the user's
	choices.  While <tt class="literal">pageDialog()</tt> is
	suitable for simple single-page <tt class="literal">Printable</tt>
	objects, it typically is not necessary for more complex
	multipage documents, since these often have implicit or
	explicit margin sizes and page orientation already specified. 
      </p>
</li>
<a name="INDEX-2220"></a>
<a name="INDEX-2221"></a>
<li>
<p>	Call <tt class="literal">setPrintable()</tt> or
	<tt class="literal">setPageable()</tt> to specify the object to be
	printed.  You can use the <tt class="literal">PageFormat</tt> object
	returned by <tt class="literal">pageDialog()</tt>,
	<tt class="literal">defaultPage()</tt>, or
	<tt class="literal">validatePage()</tt> when creating the
	<tt class="literal">Printable</tt> or <tt class="literal">Pageable</tt> object
	used in this step.  Or you can pass such a
	<tt class="literal">PageFormat</tt> object to the two-argument version
	of <tt class="literal">setPrintable()</tt>.
      </p>
</li>
<a name="INDEX-2222"></a>
<a name="INDEX-2223"></a>
<li>
<p>	If your application is an interactive one, call
	<tt class="literal">printDialog()</tt> to give the user a chance to
	specify what range of pages to print or to 
	cancel the print job.  <tt class="literal">printDialog()</tt>
	configures the <tt class="literal">PrinterJob</tt> and returns
	<tt class="literal">true</tt> if the user wants to proceed with the
	print job.  If <tt class="literal">printDialog()</tt> returns
	<tt class="literal">false</tt>, you should not continue with the print
	job.  Non-interactive jobs that run unattended should skip this
	step.
      </p>
</li>
<a name="INDEX-2224"></a>
<li>
<p>	Finally, call <tt class="literal">print()</tt> to begin printing.  If
	you are using more than one thread, you can abort the print job
	by calling <tt class="literal">cancel()</tt>.
      </p>
</li>
</ul>

<a name="INDEX-2225"></a>
<p>
<tt class="literal">PrinterJob</tt> is the preferred class for printing in
  Java 1.2.  Do not confuse it with
  <tt class="literal">java.awt.PrintJob</tt>, which was introduced in Java
  1.1. </p>
<a name="INDEX-2226"></a>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">PrinterJob</b> {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">PrinterJob</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static PrinterJob <b class="function">getPrinterJob</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Property Accessor Methods (by property name)</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">isCancelled</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getCopies</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setCopies</b> (int <i class="parameter">copies</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getJobName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setJobName</b> (String <i class="parameter">jobName</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getUserName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">cancel</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public PageFormat <b class="function">defaultPage</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract PageFormat <b class="function">defaultPage</b> (PageFormat <i class="parameter">page</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract PageFormat <b class="function">pageDialog</b> (PageFormat <i class="parameter">page</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">print</b> () throws PrinterException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">printDialog</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setPageable</b> (Pageable <i class="parameter">document</i>) throws NullPointerException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setPrintable</b> (Printable <i class="parameter">painter</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setPrintable</b> (Printable <i class="parameter">painter</i>, PageFormat <i class="parameter">format</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract PageFormat <b class="function">validatePage</b> (PageFormat <i class="parameter">page</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">PrinterGraphics.getPrinterJob(), PrinterJob.getPrinterJob()</tt>
</p>
</div>
<a name="INDEX-2227"></a>
<a name="INDEX-2228"></a>
<a name="INDEX-2229"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch20_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch20_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch22_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch22_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">20.1. The java.awt.peer Package</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">22. The javax.accessibility Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
