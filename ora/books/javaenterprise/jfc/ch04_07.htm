<html>
<head>
<title>Blending Colors with AlphaComposite (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Blending Colors with AlphaComposite">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_01.htm">Chapter 4: Graphics with AWT

and Java 2D</a></td><td align="right" valign="top" width="172"><a href="ch04_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_08.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">4.7. Blending Colors with AlphaComposite</h2>
<a name="INDEX-911"></a>

<p>Although a <tt class="literal">Paint</tt> object is used to generate the
      colors used when drawing and filling with Java 2D, these colors are not
      always the final colors that end up displayed on the screen.
      Another Java 2D attribute, the <tt class="literal">Composite</tt> object,
      controls the way in which the colors being drawn combine 
      with the colors that are already visible on the drawing
      surface. </p>

<p>A compositing operation combines the pixels of your drawing (the
      source pixels) with the pixels of the drawing surface (the
      destination pixels) to produce a new, composite set of
      pixels.  Prior to Java 2D, you could use the
      <tt class="literal">setXORMode()</tt> method of a
      <tt class="literal">Graphics</tt> object to produce a simple and very
      specialized kind of compositing operation.  Java 2D supports
      generalized compositing through the
      <tt class="literal">java.awt.Composite</tt> interface and its
      implementation, <tt class="literal">java.awt.AlphaComposite</tt>.</p>

<a name="INDEX-912"></a>

<p>
<tt class="literal">AlphaComposite</tt> performs compositing based on
      alpha-transparency, letting you paint with partially
      transparent colors that allow some of the background color to
      show through.  It also supports various Porter-Duff compositing
      rules, as we'll discuss shortly.</p>

<h3 class="sect2">4.7.1. Transparent Colors and the Alpha Channel</h3>
<a name="INDEX-913"></a>
<a name="INDEX-914"></a>

<p>Before we can discuss the <tt class="literal">AlphaComposite</tt> class, 
	you need to understand a bit about the notion of transparent
	colors.  With most low-end graphics systems, such as the AWT before
	Java 2D, colors and images are opaque.  When a line is drawn, a
	shape is filled, or an image is rendered, that item totally obscures
	whatever pixels it is drawn on top of.  An image is always
	represented as a rectangular array of pixels.  Sometimes, however,
	we want to use an image to display a nonrectangular graphic.  To
	allow this, some image formats support the notion of a
	transparent color.  When the image is drawn, the background shows
	through whatever pixels are marked as transparent.  Transparency
	is indicated with a bit mask: for each pixel in the image, the
	graphics system uses one extra bit of information 
	to specify whether the pixel is transparent or opaque.</p>

<p>Bit mask transparency is an on-or-off thing: a pixel is either
	fully transparent or fully opaque.  The notion of transparency
	can be generalized, however, to include translucent pixels.
	Instead of simply associating 1 extra bit of data with each
	pixel, the graphics system can associate 4, 8, 16, or some
	other number of bits with each pixel.
	This leads to 16, 256, or 65,536 possible levels of
	translucency, ranging from fully transparent (0) to fully opaque
	(16, 256, or 65536).  When you think about it, these
	transparency bits are really no different than the bits we use
	to represent the red, green, and blue components of each pixel.
	The transparency bits are called the alpha channel, while 
	the color bits are called 
	the red, green, and blue channels.  When you are working
	with pixels represented by red, green, and blue components, you
	are said to be using the RGB color space.  </p>

<p>Transparent and translucent pixels do not actually exist.
	Inside a monitor, there are red, green, and blue electron
	guns (or red, green, and blue LCD elements), but there is no
	electron gun for the alpha channel.  At the hardware level, a
	pixel is on or it is off; it cannot be partially on.  In
	order to give the appearance of transparency, the graphics
	system (Java 2D, in this case) has to blend (or composite)
	transparent pixels with the pixels that are beneath them.  When a
	source color <tt class="literal">Cs</tt> that has a transparency of
	<tt class="literal">&alpha;</tt> is painted over a destination color
	<tt class="literal">Cd</tt>, the two colors are combined to produce a
	new destination color <tt class="literal">Cd'</tt> with an equation
	like the following:
</p>

<blockquote>
<pre class="programlisting">Cd' = Cs*&alpha; + Cd*(1 - &alpha;)</pre>
</blockquote>



<p>For the purposes of this computation, the alpha value and the
	values of the red, green, and blue channels are treated as
	floating-point numbers between 0.0 and 1.0, rather than 8- or
	16-bit integers.  The equation is shorthand: the computation is actually performed independently on
	each of the red, green, and blue channels.  If
	<tt class="literal">Cs</tt> is fully opaque, 
	<tt class="literal">&alpha;</tt> is 1 and <tt class="literal">Cd'</tt> is
	simply <tt class="literal">Cs</tt>.  On the other hand, if
	<tt class="literal">Cs</tt> is fully transparent, 
	<tt class="literal">&alpha;</tt> is 0 and <tt class="literal">Cd'</tt> is
	simply <tt class="literal">Cd</tt>.  If <tt class="literal">&alpha;</tt> is
	somewhere between fully opaque and fully transparent, the
	resulting color <tt class="literal">Cd'</tt> is a combination of the
	source and destination colors.
	The remarkable fact about combining colors with this simple
	mathematical formula is that the resulting blended color is
	actually a visually convincing simulation of translucent
	colors. </p>

<a name="INDEX-915"></a>
<a name="INDEX-916"></a>


<h3 class="sect2">4.7.2. Drawing with Translucent Colors</h3>
<a name="INDEX-917"></a>
<a name="INDEX-918"></a>
<a name="INDEX-919"></a>
<a name="INDEX-920"></a>

<p>You create an <tt class="literal">AlphaComposite</tt> object by
	calling its static <tt class="literal">getInstance()</tt> factory
	method.  (A factory method is provided instead of a constructor
	so that the <tt class="literal">AlphaComposite</tt> class can cache
	and share immutable <tt class="literal">AlphaComposite</tt> objects.)
	<tt class="literal">getInstance()</tt> takes two arguments: a 
	compositing mode and a <tt class="literal">float</tt> value 
	between 0.0 and 1.0 that specifies an
	alpha-transparency value.  The default
	<tt class="literal">Composite</tt> object used by a
	<tt class="literal">Graphics2D</tt> object is an
	<tt class="literal">AlphaComposite</tt> created like this:
</p>

<blockquote>
<pre class="programlisting">AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f);</pre>
</blockquote>

<p>
	The <tt class="literal">AlphaComposite.SrcOver</tt> constant also
	refers to this default <tt class="literal">AlphaComposite</tt> object.</p>

<p>The <tt class="literal">SRC_OVER</tt> compositing rule places the
	source color over the destination color and blends them based
	on the transparency of the source, using the formula shown in
	the previous section.  I'll explain this rule and the
	others supported by <tt class="literal">AlphaComposite</tt>
	in more detail shortly.  For now, you just need to know
	that <tt class="literal">SRC_OVER</tt> is the most commonly used
	compositing rule and has the most intuitive behavior.</p>

<a name="INDEX-921"></a>

<p>If you use the default <tt class="literal">AlphaComposite</tt> attribute 
	of a <tt class="literal">Graphics2D</tt> object, you can achieve
	color-blending effects by 
	drawing with a translucent color.  In Java 2D,
	the <tt class="literal">Color</tt> class includes new constructors that
	allow you to create translucent colors by 
	including an alpha channel.  For example, you can create and use
	a 50% transparent red color with code like the following:
</p>

<blockquote>
<pre class="programlisting">Graphics2D g;                                 // Initialized elsewhere
Color c = new Color(1.0f, 0.0f, 0.0f, 0.5f);  // Red with alpha = 0.5
g.setPaint(c);                                // Use this translucent color
g.fillRect(100, 100, 100, 100);               // Draw something with it</pre>
</blockquote>

<p>
	This code draws a translucent red rectangle over whatever
	background previously existed on the drawing surface represented
	by the <tt class="literal">Graphics2D</tt> object.  As an aside, it is
	worth noting that you can achieve interesting effects by using
	the <tt class="literal">GradientPaint</tt> class to define color
	gradients between colors with different levels of transparency.</p>

<p>Now suppose that you want to draw a complex, multicolor figure,
	and you want to make it translucent.  While you could allocate
	a bunch of translucent colors and draw with them, there is an 
	easier way.  As we already discussed, when you create an
	<tt class="literal">AlphaComposite</tt> object, you specify an alpha value
	for it.  The alpha value of any source pixel is
	multiplied by the alpha value associated with the
	<tt class="literal">AlphaComposite</tt> currently in effect.  Since the
	default <tt class="literal">AlphaComposite</tt> object has an alpha value
	of 1.0, this object does not affect the transparency of colors.  
	However, by setting the alpha value of an 
	<tt class="literal">AlphaComposite</tt> object,
	we can draw using opaque colors and opaque images and 

still
	achieve the effect of translucency.  For example, here's another
	way to draw a translucent red rectangle:
</p>

<blockquote>
<pre class="programlisting">Graphics2D g;                                 // Initialized elsewhere
Color c = new Color(1.0f, 0.0f, 0.0f);        // Opaque red; alpha = 1.0
g.setPaint(c);                                // Use this opaque color

// Get and install an AlphaComposite to do transparent drawing
g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f);

g.fillRect(100, 100, 100, 100);               // Start drawing with it</pre>
</blockquote>



<h3 class="sect2">4.7.3. The AlphaComposite Compositing Rules</h3>

<p>The <tt class="literal">SRC_OVER</tt> compositing rule
	draws a possibly translucent source color over the
	destination color.  This is what we typically want to
	happen when we perform a graphics operation.  But the
	<tt class="literal">AlphaComposite</tt> object actually 
	allows colors to be
	combined according to seven other rules as well.  </p>

<p>Before we consider the compositing rules in detail, there is an
	important point you need to understand.  Colors displayed on the
	screen never have an alpha channel.  If you can see a color, it
	is an opaque color.  The precise color value may have been
	chosen based on a transparency calculation, but, once that
	color is chosen, the color resides in the memory of a video
	card somewhere and does not have an alpha value associated with
	it.  In other words, with on-screen drawing, destination
	pixels always have alpha values of 1.0.</p>

<p>The situation is different when you are drawing into an off-screen
	image, however.  As you'll see when we consider the Java 2D
	<tt class="literal">BufferedImage</tt> class later in this chapter,
	you can specify the desired color
	representation when you create an off-screen image.  By default,
	a <tt class="literal">BufferedImage</tt> object represents an image as
	an array of RGB colors, but you can also create an image that is
	an array of ARGB colors.  Such an image has alpha values
	associated with it, and when you draw into the images, the alpha
	values remain associated with the pixels you draw.</p>

<p>This distinction between on-screen and
	off-screen drawing is important because some of the compositing
	rules perform compositing based on the alpha
	values of the destination pixels, rather than the alpha values of
	the source pixels.  With on-screen drawing, the destination
	pixels are always opaque (with alpha values of 1.0), but
	with off-screen drawing, this need not be the case.  
	Thus, some of the compositing rules only are useful when
	you are drawing into off-screen images that have an 
	alpha channel.  </p>

<p>To overgeneralize a bit, we can say that when you are 
	drawing on-screen, you typically stick with the default
	<tt class="literal">SRC_OVER</tt> compositing rule, use opaque colors,
	and vary the alpha value used by the
	<tt class="literal">AlphaComposite</tt> object.  When working with
	off-screen images that have alpha channels, however, you can
	make use of other compositing rules.  In this case, you typically use
	translucent colors and translucent images and an
	<tt class="literal">AlphaComposite</tt> object with an alpha value of 1.0.</p>



<p>The compositing rules supported by
	<tt class="literal">AlphaComposite</tt> are a subset of the classic
	Porter-Duff compositing rules.<a href="#FOOTNOTE-1">[1]</a> Each of the rules describes a way of
	creating a new destination color <tt class="literal">Cd'</tt> by
	combining a source color <tt class="literal">Cs</tt> with the existing
	destination color <tt class="literal">Cd</tt>.  The colors are
	combined according to a general formula, which is applied
	independently to each of the red, green, and blue values of the
	color:
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-1"></a>
<p>[1]These rules were
	described originally in the paper "Compositing Digital
	Images," by Porter and Duff, published in SIGGRAPH,
	vol. 84.</p>
</blockquote>

<blockquote>
<pre class="programlisting">Cd' = Cs*Fs + Cd*Fd</pre>
</blockquote>

<p>
	In this formula, <tt class="literal">Fs</tt> and <tt class="literal">Fd</tt>
	are the fractions of the source and destination colors 
	used in the compositing operation, respectively.  Each of the eight
	compositing rules uses a different pair of values for
	<tt class="literal">Fs</tt> and <tt class="literal">Fd</tt>, which is 
	what makes each rule unique.</p>

<p>As I already noted, with certain off-screen images,
	destination pixels can have alpha values.  The new alpha
	value of a destination pixel is computed in the same way as
	the new color value of that pixel (i.e., using the same
	fractions).  If <tt class="literal">Ad</tt>
	is the destination alpha value and <tt class="literal">As</tt> is the
	source alpha value, the resulting alpha value is computed
	like this:
</p>

<blockquote>
<pre class="programlisting">Ad' = As*Fs + Ad*Fd</pre>
</blockquote>



<p>
<a href="#jfcnut-ch-4-tab-composite">Table 4-8</a>
	lists the compositing rules supported by
	<tt class="literal">AlphaComposite</tt>, using the names defined by
	that class.  Don't take the names of these constants at face
	value; they can be misleading.  The rule names that include the
	words <tt class="literal">IN</tt> and <tt class="literal">OUT</tt> make the
	most sense if you consider the case of a 1-bit alpha channel.
	In this case, the alpha channel is simply a bit mask, and an
	image has an inside where it is fully opaque and an outside
	where it is fully transparent.  In the more general case, with a
	multibit alpha channel, these compositing operations behave
	more generally than their names imply.  These rules also make
	the most sense when 

copying one image into another; they typically are not useful for drawing lines, text, and so on.</p>

<p>
<a href="#jfcnut-ch-4-tab-composite">Table 4-8</a> includes the
	<tt class="literal">Fs</tt> and <tt class="literal">Fd</tt> values, used in
	the preceding formulas that define each of the compositing rules.
	These values are specified in terms of <tt class="literal">As</tt>,
	the alpha value of the source pixel, and <tt class="literal">Ad</tt>,
	the alpha value of the destination pixel.  Note that the values
	of <tt class="literal">Fs</tt> and <tt class="literal">Fd</tt> listed here
	are for illustrative purposes, to help you understand the
	compositing operations.  The actual formulas for computing
	composited colors depends on whether the source and destination
	color values have been premultiplied by their alpha values.</p>

<a name="INDEX-922"></a>
<a name="INDEX-923"></a>
<a name="jfcnut-ch-4-tab-composite"></a>
<h4 class="objtitle">Table 4-8. AlphaComposite Compositing Rules</h4>
<table border="1">
<tr>
<th>Rule</th>
<th>Fs</th>
<th>Fd</th>
<th>Description</th>
</tr>

<tr>
<td><tt class="literal">SRC_OVER</tt></td>
<td><tt class="literal">As</tt></td>
<td><tt class="literal">1-As</tt></td>
<td>
<p>By far the most commonly used compositing
		  rule.  It draws the source on top of the
		  destination.  The source and destination are combined
		  based on the transparency of the source.  Where the
		  source is opaque, it replaces the destination.  Where
		  the source is transparent, the destination is
		  unchanged.  Where the source is translucent, the
		  source and destination colors are combined so that
		  some of the destination color shows through the
		  translucent source.</p>
</td>
</tr>
<tr>
<td><tt class="literal">DST_OVER</tt></td>
<td><tt class="literal">1-Ad</tt></td>
<td><tt class="literal">Ad</tt></td>
<td>
<p>This rule draws the source based on the transparency
		  of the destination, so that the source appears to be
		  underneath the destination.  Where the destination
		  is opaque, it is left unchanged.  Where the
		  destination is fully transparent, the source is drawn.
		  Where the destination is translucent, the source and
		  destination colors are combined so that some of the
		  source color shows through the translucent
		  destination.</p>
</td>
</tr>
<tr>
<td><tt class="literal">SRC</tt></td>
<td><tt class="literal">1.0</tt></td>
<td><tt class="literal">0.0</tt></td>
<td>
<p>The source replaces the destination color and its alpha
		  channel with the source color and its alpha channel.  
		  In other words, the rule
		  does a simple replacement, ignoring the destination
		  and doing no color blending at all.</p>
</td>
</tr>
<tr>
<td><tt class="literal">CLEAR</tt></td>
<td><tt class="literal">0.0</tt></td>
<td><tt class="literal">0.0</tt></td>
<td>
<p>This rule ignores both the source and the destination.
		  It clears the destination by setting it to a fully
		  transparent black.</p>
</td>
</tr>
<tr>
<td><tt class="literal">SRC_IN</tt></td>
<td><tt class="literal">Ad</tt></td>
<td><tt class="literal">0</tt></td>
<td>
<p>This rule draws the source color using the
		  transparency of the destination.  Where the
		  destination is fully opaque, it is replaced with an
		  opaque version of the source.  Where the destination
		  is fully transparent, it remains fully transparent.
		  Where the destination is translucent, it is replaced
		  with an equally translucent version of the source.
		  The color of the destination is never blended with the
		  color of the source.</p>
</td>
</tr>
<tr>
<td><tt class="literal">SRC_OUT</tt></td>
<td><tt class="literal">1-Ad</tt></td>
<td><tt class="literal">0</tt></td>
<td>
<p>This is the inverse of the <tt class="literal">SRC_IN</tt>
		  rule.  It draws the source color using the inverse of
		  the destination transparency.  Where the destination
		  is opaque, it becomes transparent.  Where the
		  destination is transparent, it is replaced with
		  an opaque version of the source.  Where the
		  destination is translucent, it is replaced with an
		  inversely translucent version of the source.</p>
</td>
</tr>
<tr>
<td><tt class="literal">DST_IN</tt></td>
<td><tt class="literal">0</tt></td>
<td><tt class="literal">As</tt></td>
<td>
<p>This rule ignores the color of the source, but
		  modifies the destination based on the transparency of
		  the source.  Where the source is transparent, the
		  destination becomes transparent.  Where the source is
		  opaque, the destination is unmodified.  Where the
		  source is translucent, the destination becomes
		  correspondingly translucent.</p>
</td>
</tr>
<tr>
<td><tt class="literal">DST_OUT</tt></td>
<td><tt class="literal">0</tt></td>
<td><tt class="literal">1-As</tt></td>
<td>
<p>This rule is the inverse of the
		  <tt class="literal">DST_IN</tt> rule.  It ignores the source
		  color but modifies the destination based on the
		  inverse of the source transparency.  Where the source
		  is opaque, the destination becomes transparent.
		  Where the source is transparent, the destination is
		  left unmodified.  Where the source is translucent, the
		  destination is given the inverse translucency.</p>
</td>
</tr>
</table>
<a name="INDEX-924"></a>

<p>Finally, note that <tt class="literal">AlphaComposite</tt> also predefines
	constant <tt class="literal">AlphaComposite</tt> objects that use each
	of these rules along with a built-in alpha value of 1.0.  For
	example, the <tt class="literal">AlphaComposite.DstOver</tt> object
	uses the <tt class="literal">AlphaComposite.DST_OVER</tt>
compositing
	rule with an alpha value of 1.0.  
	This object is the same as the object 

created by:
</p>

<blockquote>
<pre class="programlisting">AlphaComposite.getInstance(AlphaComposite.DST_OVER, 1.0f)</pre>
</blockquote>

<p>
	Remember that if you use an <tt class="literal">AlphaComposite</tt>
	object with an alpha value other than the default 1.0, that
	alpha value is used to make the source colors more
	transparent before the rest of the compositing operation
	occurs. </p>

<a name="INDEX-925"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_08.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.6. Paint</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.8. Rendering Hints</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
