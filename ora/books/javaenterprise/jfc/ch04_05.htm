<html>
<head>
<title>Stroking Lines (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Stroking Lines">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_01.htm">Chapter 4: Graphics with AWT

and Java 2D</a></td><td align="right" valign="top" width="172"><a href="ch04_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">4.5. Stroking Lines</h2>
<a name="INDEX-886"></a>

<p>One of the new graphic attributes defined by Java 2D is the
      <tt class="literal">java.awt.Stroke</tt>; it is set with the
      <tt class="literal">setStroke()</tt> method of a
      <tt class="literal">Graphics2D</tt> object.  The
      <tt class="literal">Stroke</tt> attribute is used by Java 2D whenever it
      draws a line.  Conceptually, the <tt class="literal">Stroke</tt>
      describes the pen or brush that is used to draw the line: it
      controls all line-drawing attributes, such as line width and dash
      pattern.  Java 2D defines a single implementation of the
      <tt class="literal">Stroke</tt> interface,
      <tt class="literal">java.awt.BasicStroke</tt>, that is suitable for almost
      all line drawing needs.  </p>

<a name="INDEX-887"></a>

<h3 class="sect2">4.5.1. BasicStroke</h3>

<p>A <tt class="literal">BasicStroke</tt> object encapsulates several
	different line drawing attributes: the
	line width, the dash pattern, the end cap style for the line,
	and the join style for the line.  You specify values for these
	attributes when you call the <tt class="literal">BasicStroke()</tt>
	constructor.  <tt class="literal">BasicStroke</tt> objects are
	immutable, so that they can be safely cached and shared.  This
	means, however, that they don't have <tt class="literal">set()</tt>
	methods that allow you to change the attribute values.  </p>

<p>The line-width attribute specifies (obviously) 
	the width of the line.  This line width is measured in units of
	user space.  If you are using the default coordinate system,
	then user space equals device space, and line widths are
	measured in pixels.  For backward
	compatibility, the default line width is 1.0.  
	Suppose you want to draw the
	outline of a circle of radius 100, using a line that
	is 10 units wide.  You can code it like this:
</p>

<blockquote>
<pre class="programlisting">Graphics2D g;                                       // Initialized elsewhere
Shape circle = new Ellipse2D.Float(100.0f, 100.0f,  // Upper-left corner
                                   300.0f, 300.0f); // Width and height
g.setStroke(new BasicStroke(10.0f));                // Set line width
g.draw(circle);                                     // Now draw it</pre>
</blockquote>



<a name="INDEX-888"></a>

<p>The end-cap attribute specifies how the ends of lines are
	drawn, or, more specifically, what type of end caps
	are placed at the end of lines.  There is no
	analogous line attribute in AWT prior to Java 2D, as end caps
	are necessary only for lines that are more than one-pixel wide.
	If you are not familiar with end caps, look at 
	<a href="#jfcnut-ch-4-fig-endcap">Figure 4-2</a>, as they are 
	best explained visually.  This figure shows what lines look
	like when drawn with each of the three possible end cap styles.</p>
<a name="jfcnut-ch-4-fig-endcap"></a>
<div class="figure">
<img alt="figure" src="figs/jfcn.0402.gif" webstripperlinkwas="figs/jfcn.0402.gif"></div>
<h4 class="objtitle">Figure 4-2. BasicStroke end-cap styles</h4>

<p>The <tt class="literal">BasicStroke.CAP_BUTT</tt> constant specifies
	that the line should have no end cap.  The
	<tt class="literal">CAP_SQUARE</tt> constant specifies a rectangular
	end cap that projects beyond the end point of the line by a
	distance equal to half of the line width; this is the default
	value for the end-cap attribute.  <tt class="literal">CAP_ROUND</tt>
	specifies a semicircular end cap, with a radius equal
	to half of the line width.</p>

<a name="INDEX-889"></a>

<p>The join-style attribute is similar to the end-cap attribute,
	except that it applies to the vertex where two lines join, rather
	than to the end of a line.  Like the end-cap attribute, the join-style attribute is necessary only with wide lines and is best
	understood visually.  <a href="#jfcnut-ch-4-fig-joinstyle">Figure 4-3</a>
	illustrates this <tt class="literal">BasicStroke</tt> attribute.
	Note that the join style attribute is used only 
	when drawing a shape that includes multiple line segments,
	not when two intersecting lines are drawn as separate shapes.  </p>
<a name="jfcnut-ch-4-fig-joinstyle"></a>
<div class="figure">
<img alt="figure" src="figs/jfcn.0403.gif" webstripperlinkwas="figs/jfcn.0403.gif"></div>
<h4 class="objtitle">Figure 4-3. BasicStroke join styles</h4>

<p>The default join style is a mitered join, represented by
	the <tt class="literal">BasicStroke.JOIN_MITER</tt> constant.
	This value specifies that lines are joined by extending their
	outer edges until they meet.  The <tt class="literal">JOIN_BEVEL</tt>
	constant specifies that lines are joined by drawing a straight
	line between the outside corners of the two lines, while
	<tt class="literal">JOIN_ROUND</tt> specifies that the vertex
	formed by the two lines should be rounded, with a radius of half
	the line width.  To use cap style and join style, you can use
	code like this:
</p>

<blockquote>
<pre class="programlisting">g.setStroke(new BasicStroke(5.0f,                     // Line width
                            BasicStroke.CAP_ROUND,    // End-cap style
                            BasicStroke.JOIN_ROUND)); // Vertex join style</pre>
</blockquote>



<p>When you use the <tt class="literal">JOIN_MITER</tt> style to join two
	lines that have a small angle between them, the miter can become
	quite long.  To avoid this situation,
	<tt class="literal">BasicStroke</tt> includes another attribute known
	as the miter limit.  If the miter would be longer than this
	value times half of the line width, it is truncated.
	The default miter limit is 10.0.</p>

<a name="INDEX-890"></a>

<p>The dash pattern of a line is actually controlled by two
	attributes: the dash array and the dash phase.  The dash
	array is a <tt class="literal">float[]</tt> that
	specifies the number of units to be drawn followed by the number
	of units to be skipped.  For example, to draw a dashed line in
	which both the dashes and spaces are 25 units long, you use an
	array like:
</p>

<blockquote>
<pre class="programlisting">new float[] { 25.0f, 25.0f }</pre>
</blockquote>

<p>
	To draw a dot-dash pattern consisting of 21 on, 9 off,
	3 on, and 9 off, you use this array:
</p>

<blockquote>
<pre class="programlisting">new float[] { 21.0f, 9.0f, 3.0f, 9.0f }</pre>
</blockquote>

<p>
<a href="#jfcnut-ch-4-fig-dashes">Figure 4-4</a> illustrates these
	dashed-line examples.  The end-cap style you specify
	is applied to each dash that is drawn. </p>
<a name="jfcnut-ch-4-fig-dashes"></a>
<div class="figure">
<img alt="figure" src="figs/jfcn.0404.gif" webstripperlinkwas="figs/jfcn.0404.gif"></div>
<h4 class="objtitle">Figure 4-4. BasicStroke dash patterns</h4>

<p>If, for some reason, you want to draw a dashed line but do not
	want your line to begin at the beginning of the dash pattern,
	you can specify the dash-phase attribute.  The value of this
	attribute specifies how far into the dash pattern the line
	should begin.  Note, however, that this value is not an integer
	index into the dash pattern array.  Instead, it is a floating-point value that specifies a linear distance.  </p>

<p>To draw a dashed
	line, you must use the most complicated
	<tt class="literal">BasicStroke()</tt> constructor and specify values
	for all attributes.  For example:
</p>

<blockquote>
<pre class="programlisting">Stroke s = new BasicStroke(4.0f,                      // Width
                           BasicStroke.CAP_SQUARE,    // End cap
                           BasicStroke.JOIN_MITER,    // Join style
                           10.0f,                     // Miter limit
                           new float[] {16.0f,20.0f}, // Dash pattern
                           0.0f);                     // Dash phase</pre>
</blockquote>



<a name="INDEX-891"></a>


<h3 class="sect2">4.5.2. How a Stroke Works</h3>
<a name="INDEX-892"></a>

<p>The <tt class="literal">BasicStroke</tt> class is sufficient for most
	drawing needs, so it is unlikely that you will ever need to
	implement the <tt class="literal">Stroke</tt> interface yourself.
	Nevertheless, the <tt class="literal">Stroke</tt> interface defines
	only a single <tt class="literal">createStrokedShape()</tt> method,
	and it is instructive to understand what this method does.</p>

<a name="INDEX-893"></a>
<a name="INDEX-894"></a>
<a name="INDEX-895"></a>

<p>In Java 2D, 
	filling an area is a more fundamental operation than drawing (or
	stroking) the outline of a shape.  The
	<tt class="literal">Stroke</tt> object is the link between the two
	operations; it makes it possible to implement the
	<tt class="literal">draw()</tt> method using the
	<tt class="literal">fill()</tt> method.  </p>

<a name="INDEX-896"></a>
<a name="INDEX-897"></a>
<a name="INDEX-898"></a>

<p>Recall the code that we just
	used to draw the outline of a circle.
	The <tt class="literal">draw()</tt> method has to draw the outline of
	the circle using only the <tt class="literal">fill()</tt> method.  If
	it simply calls <tt class="literal">fill()</tt> on the circle, it ends
	up creating a solid disk, not the outline of a circle.  So 
	instead, <tt class="literal">draw()</tt> first
	passes the circle to the <tt class="literal">createStrokedShape()</tt>
	method of the <tt class="literal">BasicStroke</tt> object we've
	specified.  <tt class="literal">createStrokedShape()</tt> returns a new
	shape: a circle of radius 105, minus a concentric circle of
	radius 95.  The interior of this shape is the area between the
	two circles, a region that always has a width of 10 units.
	Now <tt class="literal">draw()</tt> can call
	<tt class="literal">fill()</tt> on this stroked shape to draw the
	10-unit-wide outline of the original circle.  (We'll discuss
	the <tt class="literal">fill()</tt> operation and the graphics
	attributes that it uses in the next section.)</p>
<a name="INDEX-899"></a>
<a name="INDEX-900"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch04_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.4. Shapes</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.6. Paint</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
