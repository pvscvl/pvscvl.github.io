<html>
<head>
<title>Drag-and-Drop (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Drag-and-Drop">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch06_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch06_01.htm">Chapter 6: Data Transfer</a></td><td align="right" valign="top" width="172"><a href="ch06_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch06_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">6.3. Drag-and-Drop</h2>
<a name="INDEX-1125"></a>
<a name="INDEX-1126"></a>

<p>Java 1.2 adds drag-and-drop support to Java.  Drag-and-drop requires
      quite a bit more infrastructure than cut-and-paste, and this
      infrastructure is added in a package of its own,
      <tt class="literal">java.awt.dnd</tt>.  Despite the complexity of the
      infrastructure, drag-and-drop is built upon the same data transfer
      architecture as cut-and-paste.  The key classes are still
      <tt class="literal">DataFlavor</tt> and <tt class="literal">Transferable</tt>.</p>

<p>Here's the general outline of a drag-and-drop transaction from the
      standpoint of the initiating or dragging application or component:</p>

      <ul>
<li>

<p>If a component within an application wants to allow data to
	    be dragged from it, it first obtains a
	    <tt class="literal">DragSource</tt> object and then uses this
	    <tt class="literal">DragSource</tt> to create a
	    <tt class="literal">DragGestureRecognizer</tt>.  This
	    <tt class="literal">DragGestureRecognizer</tt> pays attention to
	    mouse events that occur over the component, looking for the
	    platform-dependent gesture that indicates that the user
	    wants to drag something.</p>
</li>
<li>

<p>When the <tt class="literal">DragGestureRecognizer</tt> sees a
	    drag gesture, it invokes the
	    <tt class="literal">dragGestureRecognized()</tt> of a specified
	    <tt class="literal">DragGestureListener</tt> object.</p>
</li>
<a name="INDEX-1127"></a>
<a name="INDEX-1128"></a>
<li>

<p>The <tt class="literal">dragGestureRecognized()</tt> method
	    determines if there is data available for dragging, and, if
	    so, it encapsulates the data in a <tt class="literal">Transferable</tt>
	    object.  <tt class="literal">dragGestureRecognized</tt> is passed a
	    <tt class="literal">DragGestureEvent</tt> object.  Unlike most other
	    event objects, many of the event objects in the
	    <tt class="literal">java.awt.dnd</tt> package define important
	    methods that are used during a drag-and-drop transaction.
	    In this case, the <tt class="literal">dragGestureRecognized()</tt>
	    method activates the native drag-and-drop system by calling
	    the <tt class="literal">startDrag()</tt> method of its
	    <tt class="literal">DragGestureEvent</tt> object and passing
	    it the <tt class="literal">Transferable</tt> object. 
	    In the call to <tt class="literal">startDrag()</tt>, you also 
	    specify a cursor that is displayed during the drag and a
	    <tt class="literal">DragSourceListener</tt> object that
	    keeps the data source notified about how the drag is
	    progressing.  You can also specify an
	    optional <tt class="literal">Image</tt> that is dragged 
	    along with the cursor, on
	    systems that support it.  (Call the static
	    <tt class="literal">DragSource.isDragImageSupported()</tt> to see
	    if image dragging is supported on the system.)</p>
</li>
<a name="INDEX-1129"></a>
<a name="INDEX-1130"></a>
<a name="INDEX-1131"></a>
<li>

<p>As the user drags the data, various methods of the
	    <tt class="literal">DragSourceListener</tt> are invoked to
	    notify the initiating application of the status of the drag.
	    These methods can be used to update the cursor being
	    displayed or the image being dragged along with the cursor.
	    The methods provide a way to implement specialized drag-over 
	    animation effects, for
	    example.  The native drag-and-drop system typically supplies
	    basic drag-over effects, by changing the cursor when it is
	    over a receptive drop target.</p>
</li>
<a name="INDEX-1132"></a>
<li>

<p>The most commonly used <tt class="literal">DragSourceListener</tt>
	    method is <tt class="literal">dragDropEnd()</tt>.  This
	    method is invoked when the user drops the data.  The
	    initiating application can use this method to determine
	    whether the drop was successful.  If the user
	    were moving data instead of copying data, the initiating
	    application should delete its copy of the data once it
	    has been successfully transferred to the recipient.
	    <tt class="literal">dragDropEnd()</tt> is passed a
	    <tt class="literal">DragSourceDropEvent</tt> object.  The
	    <tt class="literal">getDropSuccess()</tt> and
	    <tt class="literal">getDropAction()</tt> methods of this event
	    help the initiating application decide on the appropriate
	    action to take.</p>
</li>
</ul>

<a name="INDEX-1133"></a>
<a name="INDEX-1134"></a>

<p>A drag-and-drop transaction looks somewhat different from the
      standpoint of a receiving application or component:</p>

      <ul>
<li>

<p>A component that wants to allow data to be dropped on it
	    must create a <tt class="literal">DropTarget</tt> object to act as
	    an intermediary between itself and 
	    the native drag-and-drop system.  When
	    creating a <tt class="literal">DropTarget</tt>, you must specify
	    the component on which data can be dropped and also a
	    <tt class="literal">DropTargetListener</tt> object that can be
	    notified when data is dragged over the component.</p>
</li>
<a name="INDEX-1135"></a>
<a name="INDEX-1136"></a>
<a name="INDEX-1137"></a>
<li>

<p>When the user drags data over the component, the
	    <tt class="literal">dragEnter()</tt> method of the
	    <tt class="literal">DropTargetListener</tt> is invoked.  This
	    method is passed a <tt class="literal">DropTargetDragEvent</tt>
	    that it can query to determine the supported data flavors
	    of the data being dragged.  If the component is willing to
	    accept a drop of that type of data, it should call the
	    <tt class="literal">acceptDrop()</tt> method of the event object
	    to signal its willingness.  This in turn causes the
	    <tt class="literal">dragEnter()</tt> method of the
	    <tt class="literal">DragSourceListener</tt> in the initiating
	    application to be invoked.  The
	    <tt class="literal">dragEnter()</tt> method of the
	    <tt class="literal">DropTargetListener</tt> may also want to
	    display some visual cue to the user of its willingness to
	    accept a drop.  For example, it might change colors or
	    change its border.  This kind of visual change is known as a
	    "drag-under effect."</p>
</li>
<a name="INDEX-1138"></a>
<a name="INDEX-1139"></a>
<a name="INDEX-1140"></a>

<li>

<p>The <tt class="literal">dragOver()</tt> method is called
	    repeatedly as the user continues to drag the data over the
	    component.  If the user drags the data out of the component,
	    the <tt class="literal">dragExit()</tt> method is called.  If
	    <tt class="literal">dragEnter()</tt> displayed a visual cue,
	    <tt class="literal">dragExit()</tt> should undo it.</p>
</li>
<a name="INDEX-1141"></a>
<a name="INDEX-1142"></a>
<a name="INDEX-1143"></a>
<li>

<p>If the user drops the data while over the component, the
	    <tt class="literal">drop()</tt> method of the
	    <tt class="literal">DropTargetListener</tt> is invoked.  It
	    is this method that performs the actual data transfer.
	    <tt class="literal">drop()</tt> is passed a
	    <tt class="literal">DropTargetDropEvent</tt>. The
	    <tt class="literal">getTransferable()</tt> method of this event
	    returns the <tt class="literal">Transferable</tt> object that was
	    dropped.  If the <tt class="literal">Transferable</tt> object
	    supports a <tt class="literal">DataFlavor</tt> that the component
	    can accept, the component calls the
	    <tt class="literal">acceptDrop()</tt> method of the event to tell
	    the native drag-and-drop system that the drop is valid.  If
	    it cannot work with any of the available data flavors, it
	    should call <tt class="literal">rejectDrop()</tt>.  After
	    accepting the drop, the receiving component uses the
	    <tt class="literal">getTransferData()</tt> method of the
	    <tt class="literal">Transferable</tt> object to actually transfer
	    the data.  This phase of the data transfer is done exactly
	    as it is in cut-and-paste.  Finally, the component calls the
	    <tt class="literal">dropComplete()</tt> method of the
	    <tt class="literal">DropTargetDropEvent</tt>, passing
	    <tt class="literal">true</tt> if the transfer was successful or 
	    <tt class="literal">false</tt> if something went wrong and 
	    the transfer did not succeed.</p>
</li>
</ul>

<a name="INDEX-1144"></a>
<a name="INDEX-1145"></a>
<a name="INDEX-1146"></a>
<a name="INDEX-1147"></a>
<a name="INDEX-1148"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch06_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch06_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch06_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">6.2. Cut-and-Paste</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">6.4. A Data Source</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
