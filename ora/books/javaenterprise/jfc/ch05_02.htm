<html>
<head>
<title>Printing in Java 1.2 (Java Foundation Classes)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-488-6E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Printing in Java 1.2">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch05_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch05_01.htm">Chapter 5: Printing</a></td><td align="right" valign="top" width="172"><a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch06_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">5.2. Printing in Java 1.2</h2>
<a name="INDEX-1053"></a>
<a name="INDEX-1054"></a>

<p>Java 1.2 introduces a more complete printing API.  As in Java
      1.1, printing is done by calling methods of a special
      <tt class="literal">Graphics</tt> object that represents the printer
      device.  The printer coordinate system and base resolution of 72
      points per inch are the same in both Java 1.1 and Java 1.2.  
      Beyond these similarities, however, the Java 1.2 API flips
      the Java 1.1 API upside down.  Instead of asking a
      <tt class="literal">PrintJob</tt> object for the
      <tt class="literal">Graphics</tt> object to draw to, Java 1.2 uses a
      callback model.  You tell the Java 1.2 printing API the
      object you'd like to print, and it calls the
      <tt class="literal">print()</tt> method of that object, passing in the
      appropriate <tt class="literal">Graphics</tt> object to draw to.  In
      Java 1.1, your printing code is in charge of the print job, while
      in Java 1.2, the print job is in charge of your printing code.</p>

<a name="INDEX-1055"></a>
<a name="INDEX-1056"></a>
<a name="INDEX-1057"></a>

<p>The Java 1.2 printing API is contained in the
      <tt class="literal">java.awt.print</tt> package.  Key classes and
      interfaces in this package are <tt class="literal">Printable</tt>, which
      represents a printable object, <tt class="literal">Pageable</tt>, which
      represents a multipage printable document, and
      <tt class="literal">PrinterJob</tt>, which coordinates the print job and
      serves as an intermediary between the Java API and the native
      printing system.  Do not confuse
      <tt class="literal">java.awt.print.PrinterJob</tt> with the
      <tt class="literal">java.awt.PrintJob</tt> class used by the Java 1.1
      printing API!  Another important class is
      <tt class="literal">PageFormat</tt>, which represents the size of the
      paper being printed on, its margins, and the printing
      orientation (i.e., portrait mode or landscape mode).</p>

<a name="INDEX-1058"></a>

<p>The basic Java 1.2 printing algorithm includes the following steps:</p>

      <ol>
<li>

<p>First, obtain a <tt class="literal">PrinterJob</tt> object to
	    coordinate the printing.  Do this by calling the static
	    method <tt class="literal">PrinterJob.getPrinterJob()</tt>.</p>
</li>
<a name="INDEX-1059"></a>
<li>

<p>Obtain a <tt class="literal">PageFormat</tt> object that describes the
	    size, margins, and orientation of the page or pages to be
	    printed.  The <tt class="literal">PrinterJob</tt> object has
	    methods that allow you to obtain a default
	    <tt class="literal">PageFormat</tt> object and display a
	    dialog asking the user to specify paper, margin, and
	    orientation information.  (You might display this dialog box
	    in response to a <b class="emphasis-bold">Print
	    Setup...</b> menu item, for example.)</p>
</li>
<a name="INDEX-1060"></a>
<a name="INDEX-1061"></a>
<li>

<p>Next, tell the <tt class="literal">PrinterJob</tt> object what it
	    is that you want to print.  The item to print is an object that
	    implements either the <tt class="literal">Printable</tt> interface
	    or the <tt class="literal">Pageable</tt> interface (we'll discuss
	    each of these in more detail shortly).  You 
	    pass this object to either the <tt class="literal">setPrintable()</tt> 
	    or the <tt class="literal">setPageable()</tt> method of the
	    <tt class="literal">PrinterJob</tt>.</p>
</li>
<a name="INDEX-1062"></a>
<li>

<p>Unless you want the printing to occur silently, without any
	    user interaction, your next call is to the
	    <tt class="literal">printDialog()</tt> method of the
	    <tt class="literal">PrinterJob</tt> object.  This method displays
	    a dialog box, giving the user the opportunity to
	    specify the printer to use and the number of
	    copies to print.  If you are printing a multipage
	    <tt class="literal">Pageable</tt> object, this dialog box 
	    allows the user to select a subset of pages to print,
	    rather than printing the entire <tt class="literal">Pageable</tt>
	    document.  The dialog box also gives the user the
	    opportunity to cancel the print job.  If the
	    <tt class="literal">printDialog()</tt> method returns
	    <tt class="literal">false</tt>, the user has asked to cancel
	    printing and you should not proceed.</p>
</li>
<a name="INDEX-1063"></a>
<li>

<p>Finally, you call the <tt class="literal">print()</tt> method of
	    the <tt class="literal">PrinterJob</tt>.  This tells the
	    <tt class="literal">PrinterJob</tt> to begin the printing process.</p>
</li>
<li>

<p>The <tt class="literal">PrinterJob</tt> is now in control of
	    printing.  As we'll discuss later, 
<tt class="literal">PrinterJob</tt> 
	    invokes methods of
	    the <tt class="literal">Printable</tt> or
	    <tt class="literal">Pageable</tt> object you specified, 

providing
	    the opportunity for your object to print itself to an
	    appropriate <tt class="literal">Graphics</tt> object.</p>
</li>
</ol>





<h3 class="sect2">5.2.1. Printing Single-Page Objects</h3>
<a name="INDEX-1064"></a>

<p>When the object, figure, or document you want to print fits
	on a single printed page, you typically represent it using the
	<tt class="literal">Printable</tt> interface.  This interface defines
	a single method, <tt class="literal">print()</tt>, that the
	<tt class="literal">PrinterJob</tt> calls to print the page.  The
	<tt class="literal">print()</tt> method has three arguments.  The
	first is the <tt class="literal">Graphics</tt> object that represents
	the printer.  <tt class="literal">print()</tt> should do all of its
	drawing using this object.  This <tt class="literal">Graphics</tt>
	object may be cast to a <tt class="literal">Graphics2D</tt> object,
	enabling all the features of Java 2D, including the use of
	floating-point coordinates to position graphics elements with
	more precision than is possible with integer coordinates.</p>

<a name="INDEX-1065"></a>
<a name="INDEX-1066"></a>
<a name="INDEX-1067"></a>
<a name="INDEX-1068"></a>

<p>The second argument to <tt class="literal">print()</tt> is a
	<tt class="literal">PageFormat</tt> object.  Your 
	<tt class="literal">print()</tt> method should call the
	<tt class="literal">getImageableX()</tt>,
	<tt class="literal">getImageableY()</tt>,
	<tt class="literal">getImageableWidth()</tt>, and
	<tt class="literal">getImageableHeight()</tt> methods of
	<tt class="literal">PageFormat</tt> to determine the size and position
	of the area that it should draw in.  Note that these methods are
	poorly named.  The values they return represent the 
	page and margin sizes requested by the user,

not the size of the
	paper actually available in the printer or the imageable area
	of the printer (i.e., the region of the page that a specific
	type of printer can actually

 print to).</p>

<p>The third argument is a
	page number.  Although the <tt class="literal">Printable</tt>
	interface is most useful for single-page documents, it can be
	used for multipage documents.  The
	<tt class="literal">PrinterJob</tt> has no way to determine how many
	pages a <tt class="literal">Printable</tt> object requires.  Indeed,
	a <tt class="literal">Printable</tt> object may be implemented in
	such a way that it does not know how many pages it requires
	either (e.g., a <tt class="literal">PrintableStream</tt>
	object that prints a stream of text as it arrives).  Because the
	page count is not known in advance, the
	<tt class="literal">PrinterJob</tt> calls the
	<tt class="literal">print()</tt> method repeatedly, incrementing the
	page number after printing each page.  </p>

<a name="INDEX-1069"></a>

<p>One important responsibility of the
	<tt class="literal">print()</tt> method is to notify the
	<tt class="literal">PrinterJob</tt> when all pages are printed.  Your
	method does this by returning the constant
	<tt class="literal">Printable.NO_SUCH_PAGE</tt> when the
	<tt class="literal">PrinterJob</tt> asks it to print a page that is
	past the end of the document.</p>

<p>It is also important to implement the <tt class="literal">print()</tt>
	method so that it can be called more than once for each page.
	As of this writing, Sun's Java 1.2 printing implementation calls
	the <tt class="literal">print()</tt> method at least twice for each
	page (we'll see why at the end of this chapter).</p>

<a name="INDEX-1070"></a>

<p>
<a href="#jfcnut-ch-5-ex-1">Example 5-1</a> shows a
	<tt class="literal">PrintableComponent</tt> class that can be
	used to print the
	contents of a Swing component, applet, or custom AWT component.
	This class is a wrapper around a <tt class="literal">Component</tt>
	and implements the <tt class="literal">Printable</tt> interface.  Note
	that it defines two <tt class="literal">print()</tt> methods.  One is
	the three-argument <tt class="literal">Printable</tt> method I
	already described.  The other <tt class="literal">print()</tt> method
	takes no arguments and implements the general 
	Java 1.2 printing algorithm.  It creates a
	<tt class="literal">PrinterJob</tt>, displays some dialogs to the user, and
	initiates the printing process.  To print a component, create a
	<tt class="literal">PrintableComponent</tt> for that component, then
	call its <tt class="literal">print()</tt> method with no arguments.</p>

<a name="INDEX-1071"></a>
<a name="jfcnut-ch-5-ex-1"></a>
<div class="example">
<h4 class="objtitle">Example 5-1. PrintableComponent.java</h4>

<blockquote>
<pre class="programlisting">import java.awt.*;
import java.awt.print.*;

/**
 * This wrapper class encapsulates a Component and allows it to be printed
 * using the Java 1.2 printing API
 */
public class PrintableComponent implements Printable {
  // The component to be printed
  Component c;

  /** Create a PrintableComponent wrapper around a Component */
  public PrintableComponent(Component c) { this.c = c; }

  /**
   * This method is not part of the Printable interface.  It is a method
   * that sets up the PrinterJob and initiates the printing.
   */
  public void print() throws PrinterException {
    // Get the PrinterJob object
    PrinterJob job = PrinterJob.getPrinterJob();
    // Get the default page format, then allow the user to modify it
    PageFormat format = job.pageDialog(job.defaultPage());
    // Tell the PrinterJob what to print
    job.setPrintable(this, format);
    // Ask the user to confirm, and then begin the printing process
    if (job.printDialog()) 
      job.print();
  }

  /**
   * This is the "callback" method that the PrinterJob will invoke.
   * This method is defined by the Printable interface.
   */
  public int print(Graphics g, PageFormat format, int pagenum) {
    // The PrinterJob will keep trying to print pages until we return
    // this value to tell it that it has reached the end
    if (pagenum &gt; 0) 
      return Printable.NO_SUCH_PAGE;

    // We're passed a Graphics object, but it can always be cast to Graphics2D
    Graphics2D g2 = (Graphics2D) g;

    // Use the top and left margins specified in the PageFormat Note
    // that the PageFormat methods are poorly named.  They specify
    // margins, not the actual imageable area of the printer.
    g2.translate(format.getImageableX(), format.getImageableY());

    // Tell the Component to draw itself to the printer by passing in 
    // the Graphics2D object.  This will not work well if the Component
    // has double-buffering enabled.
    c.paint(g2);

    // Return this constant to tell the PrinterJob that we printed the page
    return Printable.PAGE_EXISTS;
  }
}</pre>
</blockquote>
</div>
<a name="INDEX-1072"></a>

<p>There are a few important points to note about this
	<tt class="literal">PrintableComponent</tt> example.  First, it is not
	designed to work with native AWT components, since those
	components do not do their own drawing.  Second, it does not
	work well for components that use double-buffering because
	double-buffering locks the component drawing into the relatively
	low resolution of an off-screen image, rather than taking
	advantage of the high resolution available on the printer.
	Finally, <tt class="literal">PrintableComponent</tt> prints only
	the visible portion of a component, not the complete contents of
	the component.  For example, the Swing
	<tt class="literal">JEditorPane</tt> class can display long HTML
	documents.  If you use <tt class="literal">PrintableComponent</tt> to
	print a <tt class="literal">JEditorPane</tt>, however, it prints
	only the currently visible text, not the complete HTML
	document.  The ability to print complete documents is a feature
	that is sorely missing in the current implementation of Swing.</p>
<a name="INDEX-1073"></a>
<a name="INDEX-1074"></a>
<a name="INDEX-1075"></a>

<h3 class="sect2">5.2.2. Printing Multipage Documents</h3>

<p>As we just discussed, the <tt class="literal">Printable</tt> interface
	can be used to print multipage documents.  However, the
	<tt class="literal">PrinterJob</tt> has no way of determining in
	advance how many pages are required.  This means that the
	user cannot request that only a subset of pages be printed, for
	example.  When you know the complete contents of the document to
	be printed and can break it into pages before printing begins,
	it is better to use the <tt class="literal">Pageable</tt> interface
	than the <tt class="literal">Printable</tt> interface.</p>

<a name="INDEX-1076"></a>
<a name="INDEX-1077"></a>
<a name="INDEX-1078"></a>

<p>
<tt class="literal">Pageable</tt> defines a
	<tt class="literal">getNumberOfPages()</tt> method that returns the
	number of pages to be printed.  It also defines two methods that take
	a page number and return <tt class="literal">PageFormat</tt> and
	<tt class="literal">Printable</tt> objects for that page.  To print a
	<tt class="literal">Pageable</tt> object, the
	<tt class="literal">PrinterJob</tt> asks for a
	<tt class="literal">PageFormat</tt> and a <tt class="literal">Printable</tt>
	object for each page to be printed and then uses the
	<tt class="literal">print()</tt> method of each
	<tt class="literal">Printable</tt> object to print that page.</p>

<a name="INDEX-1079"></a>
<a name="INDEX-1080"></a>
<a name="INDEX-1081"></a>

<p>
<a href="#jfcnut-ch-5-ex-2">Example 5-2</a> shows a class that implements the
	<tt class="literal">Pageable</tt> and <tt class="literal">Printable</tt>
	interfaces in order to print a string, file, or stream of text.
	This is a rudimentary example of text printing.  It prints
	only text files, using a single font, and does not even
	expand tabs or wrap long lines.  The Java 1.2 printing API allows
	the use of Java 2D graphics through the
	<tt class="literal">Graphics2D</tt> class.  This example does not use
	the Java 2D version of the <tt class="literal">drawString()</tt>
	method, however.  Although that method allows text to be
	positioned more precisely using floating-point coordinates,
	there is a bug in the current implementation that prevents this
	method from printing correctly.</p>

<a name="INDEX-1082"></a>
<a name="INDEX-1083"></a>
<a name="jfcnut-ch-5-ex-2"></a>
<div class="example">
<h4 class="objtitle">Example 5-2. PageableText.java</h4>

<blockquote>
<pre class="programlisting">import java.awt.*;
import java.awt.print.*;
import java.io.*;
import java.util.Vector;

public class PageableText implements Pageable, Printable {
  // Constants for font name, size, style and line spacing
  public static String FONTFAMILY = "Monospaced";
  public static int FONTSIZE = 10;
  public static int FONTSTYLE = Font.PLAIN;
  public static float LINESPACEFACTOR = 1.1f;

  PageFormat format;   // The page size, margins, and orientation
  Vector lines;        // The text to be printed, broken into lines
  Font font;           // The font to print with
  int linespacing;     // How much space between lines
  int linesPerPage;    // How many lines fit on a page
  int numPages;        // How many pages required to print all lines
  int baseline = -1;   // The baseline position of the font

  /** Create a PageableText object for a string of text */
  public PageableText(String text, PageFormat format) throws IOException { 
    this(new StringReader(text), format); 
  }

  /** Create a PageableText object for a file of text */
  public PageableText(File file, PageFormat format) throws IOException { 
    this(new FileReader(file), format); 
  }

  /** Create a PageableText object for a stream of text */
  public PageableText(Reader stream, PageFormat format) throws IOException {
    this.format = format;

    // First, read all the text, breaking it into lines.
    // This code ignores tabs and does not wrap long lines.
    BufferedReader in = new BufferedReader(stream);
    lines = new Vector();
    String line;
    while((line = in.readLine()) != null) 
      lines.addElement(line);

    // Create the font we will use, and compute spacing between lines
    font = new Font(FONTFAMILY, FONTSTYLE, FONTSIZE);
    linespacing = (int) (FONTSIZE * LINESPACEFACTOR);

    // Figure out how many lines per page and how many pages
    linesPerPage = (int)Math.floor(format.getImageableHeight()/linespacing);
    numPages = (lines.size()-1)/linesPerPage + 1;
  }

  // These are the methods of the Pageable interface.
  // Note that the getPrintable() method returns this object, which means
  // that this class must also implement the Printable interface.
  public int getNumberOfPages() { return numPages; }
  public PageFormat getPageFormat(int pagenum) { return format; }
  public Printable getPrintable(int pagenum) { return this; }

  /**
   * This is the print() method of the Printable interface.
   * It does most of the printing work.
   */
  public int print(Graphics g, PageFormat format, int pagenum) {
    // Tell the PrinterJob if the page number is not a legal one
    if ((pagenum &lt; 0) | (pagenum &gt;= numPages)) 
      return NO_SUCH_PAGE;

    // First time we're called, figure out the baseline for our font.
    // We couldn't do this earlier because we needed a Graphics object.
    if (baseline == -1) {
      FontMetrics fm = g.getFontMetrics(font);
      baseline = fm.getAscent();
    }

    // Clear the background to white.  This shouldn't be necessary but is
    // required on some systems to work around an implementation bug.
    g.setColor(Color.white);
    g.fillRect((int)format.getImageableX(), (int)format.getImageableY(),
               (int)format.getImageableWidth(), 
               (int)format.getImageableHeight());

    // Set the font and the color we will be drawing with.
    // Note that you cannot assume that black is the default color!
    g.setFont(font);
    g.setColor(Color.black);

    // Figure out which lines of text we will print on this page
    int startLine = pagenum * linesPerPage;
    int endLine = startLine + linesPerPage - 1;
    if (endLine &gt;= lines.size()) 
      endLine = lines.size()-1;

    // Compute the position on the page of the first line
    int x0 = (int) format.getImageableX();
    int y0 = (int) format.getImageableY() + baseline;

    // Loop through the lines, drawing them all to the page
    for(int i=startLine; i &lt;= endLine; i++) {
      // Get the line
      String line = (String)lines.elementAt(i);

      // Draw the line.
      // We use the integer version of drawString(), not the Java 2D
      // version that uses floating-point coordinates. A bug in early
      // Java 1.2 implementations prevents the Java 2D version from working.
      if (line.length() &gt; 0) 
        g.drawString(line, x0, y0);

      // Move down the page for the next line
      y0 += linespacing;  
    }

    // Tell the PrinterJob that we successfully printed the page
    return PAGE_EXISTS;
  }

  /**
   * This is a test program that demonstrates the use of PageableText
   */
  public static void main(String[] args) throws IOException, PrinterException {
    // Get the PrinterJob object that coordinates everything
    PrinterJob job = PrinterJob.getPrinterJob();

    // Get the default page format, then ask the user to customize it
    PageFormat format = job.pageDialog(job.defaultPage());

    // Create our PageableText object, and tell the PrinterJob about it
    job.setPageable(new PageableText(new File(args[0]), format));

    // Ask the user to select a printer, etc., and if not canceled, print!
    if (job.printDialog()) 
      job.print();
  }
}</pre>
</blockquote>
</div>
<a name="INDEX-1084"></a>
<a name="INDEX-1085"></a>
<a name="INDEX-1086"></a>


<h3 class="sect2">5.2.3. Efficiency Issues in the Java 1.2 Printing API</h3>

<p>Although the Java 1.2 printing API offers important design improvements over the Java 1.1 API, there are serious efficiency problems with Sun's implementation of the 1.2 API in versions of Java up to at least Java 1.2.2.  All
	printers are good at printing text, but not all are equally good
	at drawing arbitrary graphics.  Thus, when a page contains
	anything but text or very simple graphics, Java 1.2 converts the entire page to a very
	large image and prints it in graphics mode.  </p>

<p>As I mentioned earlier, the current implementation of
	<tt class="literal">PrinterJob</tt> calls the
	<tt class="literal">print()</tt> method of a
	<tt class="literal">Printable</tt> object at least twice.  The first
	call uses a dummy <tt class="literal">Graphics</tt> object whose sole
	purpose is to determine what kind of graphics the page contains.
	If the page contains only text, as is the case in <a href="#jfcnut-ch-5-ex-2">Example 5-2</a>, the <tt class="literal">PrinterJob</tt>
	can print the page efficiently in text mode.</p>

<a name="INDEX-1087"></a>
<a name="INDEX-1088"></a>

<p>However, if the page contains any other type of graphics, the
	<tt class="literal">PrinterJob</tt> uses a large, high-resolution
	image to capture the graphics on the page and then transmits
	this image to the printer for printing in graphics mode.
	Because such a high-resolution image is memory intensive, the
	<tt class="literal">PrinterJob</tt> typically breaks the page up into
	several smaller bands and calls the
	<tt class="literal">print()</tt> method several times (using a different
	clipping region each time).  In this way, the
	<tt class="literal">PrinterJob</tt> is able to spool a large
	image to the printer without using a large amount of
	memory (a classic time versus space trade-off).</p>

<p>Unfortunately, the implementation is not well optimized, and
	printing performance is unacceptable on some systems.  Printing
	even a simple graphic, such as one produced with the
	<tt class="literal">PrintableComponent</tt> class shown in <a href="#jfcnut-ch-5-ex-1">Example 5-1</a>, can take several minutes and can
	produce a printer spool file of more than 50 megabytes.</p>

<p>Printing with the Java 1.1 API works better in Java 1.1 than it
	does in current implementations of Java 1.2.  The Java 1.1 API
	works in Java 1.2, but it suffers the same efficiency problems as the
	Java 1.2 API.  Furthermore, the Java 1.1 API does not perform
	the first pass to determine what type of graphics a page
	contains,

 so even a Java 1.1 program that prints only text is 
	inefficient when run under

 Java 1.2.</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch05_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/ch06_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.1. Printing in Java 1.1</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">6. Data Transfer</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
