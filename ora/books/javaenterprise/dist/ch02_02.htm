<html>
<head>
<title>URLs, URLConnections, and ContentHandlers (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="URLs, URLConnections, and ContentHandlers">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch02_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch02_01.htm">Chapter 2: Networking in Java</a></td><td align="right" valign="top" width="172"><a href="ch02_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch02_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">2.2. URLs, URLConnections, and ContentHandlers</h2>

<p>
<a name="INDEX-228"></a>The
<tt class="literal">java.net</tt><a name="INDEX-229"></a> package, in addition to object-oriented
representations of IP sockets, also provides objects that support the
<a name="INDEX-230"></a>HTTP protocol
for accessing data in the form of addressable documents. HTTP is
really an extension of the underlying IP protocol we discussed
earlier, designed specifically to provide a way to address different
kinds of documents, or pieces of data, distributed on the network. In
the rest of this book, we'll see numerous examples of
distributed applications whose agents use customized or standard
communications protocols to talk to each other. If there is an HTTP
server "agent" available on one of the hosts in our
distributed application, then we can use the classes discussed in
this section to ask it for data documents using the standard HTTP
protocol.
</p>

<p>To address a specific document or data object, we use a
<a name="INDEX-231"></a><a name="INDEX-232"></a>Uniform Resource Locator
(URL), which includes four address elements: the protocol, host,
port, and document. The Java representation for a URL is the
<tt class="literal">URL</tt><a name="INDEX-233"></a>
class, which is constructed with a given protocol, host, port, and
document filename. Once the <tt class="literal">URL</tt> object is
constructed, it allows the user to make the necessary requests to
connect to the HTTP server of the data object, query for information
about the object, and download the object. The content of the object
can be accessed using the <tt class="literal">getContent()</tt>,
<tt class="literal">openConnection()</tt>, or
<tt class="literal">openStream()</tt> methods on the
<tt class="literal">URL</tt> object. Of these three methods,
<tt class="literal">openStream()</tt><a name="INDEX-234"></a>
is simplest. The <tt class="literal">openStream()</tt> method returns an
<tt class="literal">InputStream</tt> that can be used to read the data
contents directly.
</p>

<p>When you call <tt class="literal">openConnection()</tt><a name="INDEX-235"></a>
on a <tt class="literal">URL</tt> object, you get a
<tt class="literal">URLConnection</tt><a name="INDEX-236"></a> in return. You can use the
<tt class="literal">URLConnection</tt> to query the data connection's
header information for the data object's length, the type of
data it contains, the data encoding, etc. You can also control
aspects of the data connection that determine when the data object
can be pulled from a local cache, whether input or output is to be
done over the data connection, and when unmodified data should be
read from the server.<tt class="literal"></tt><a name="INDEX-237"></a>
</p>

<p>The
<tt class="literal">getContent()</tt><a name="INDEX-238"></a>
method downloads the data object and returns an
<tt class="literal">Object</tt> containing the data. Using this method
relies upon having a content handler that supports the object's
data format and is capable of converting it into a Java object. The
<tt class="literal">java.net</tt> package allows you to extend the
available content handlers using the
<tt class="literal">ContentHandler</tt><a name="INDEX-239"></a><a name="INDEX-240"></a> and
<tt class="literal">ContentHandlerFactory</tt> classes. A
<tt class="literal">ContentHandler</tt> accepts a
<tt class="literal">URLConnection</tt>, reads the data from the
associated data object, and constructs an appropriate
<tt class="literal">Object</tt> instance to represent the data object in
the Java environment. It is the job of the system-wide
<tt class="literal">ContentHandlerFactory</tt> to associate the proper
<tt class="literal">ContentHandler</tt> with each data object referenced
by a URL. When <tt class="literal">getContent()</tt> is called on a
<tt class="literal">URL</tt> or <tt class="literal">URLConnection</tt>
object, the <tt class="literal">ContentHandlerFactory</tt> is queried for
a <tt class="literal">ContentHandler</tt> that can read the format of the
data at the other end of the connection. The
<tt class="literal">ContentHandlerFactory</tt> checks the MIME type and
encoding of the data object, and returns a
<tt class="literal">ContentHandler</tt> for that MIME type. The
<tt class="literal">ContentHandler</tt> that's returned is then
asked for an <tt class="literal">Object</tt> representing the data by
calling its <tt class="literal">getContent()</tt> method with the
<tt class="literal">URLConnection</tt>. Typically, the
<tt class="literal">ContentHandler</tt> reads the raw data from the
<tt class="literal">URLConnection</tt>'s
<tt class="literal">InputStream</tt>, formats the data into an
appropriate object representation, and returns the object to the
caller.
</p>

<p>Suppose we want to connect to an HTTP server containing computational
fluid dynamics (CFD) data files stored in a proprietary format.
Suppose these data files have a ".cfd" suffix, and we
decide to reserve the MIME type "application/cfd" for
these data files. Now, assuming that the HTTP server has been
properly configured to export this MIME type in the content headers
its transmits, we can use Java's HTTP support to access these
data files from our application by creating our own
<tt class="literal">ContentHandler</tt> subclass that is capable of
reading the data stream and converting it to an appropriate Java
object. <a href="#JDP-CH-2-EX-8">Example 2-7</a> shows a
<tt class="literal">CFDContentHandler</tt> that does just this. Its
<tt class="literal">getContent()</tt> method creates a
<tt class="literal">CFDDataSet</tt> object from the data read from the
input stream of the <tt class="literal">URLConnection</tt> argument. It
assumes that the incoming data is of the expected type and format for
the <tt class="literal">CFDDataSet</tt>;<tt class="literal"></tt>a more
robust implementation would check the MIME type of the
<tt class="literal">URLConnection</tt> and warn the user if the type
doesn't match.
<a name="INDEX-241"></a>
</p>

<a name="JDP-CH-2-EX-8"></a>
<div class="example">
<h4 class="objtitle">Example 2-7. A ContentHandler for CFD File</h4>
<blockquote>
<pre class="programlisting">import java.net.*;
import dcj.examples.Networking.CFDDataSet;

public class CFDContentHandler extends ContentHandler {
  public Object getContent(URLConnection u) {
    CFDDataSet d = new CFDDataSet();
    try {
      InputStream in = u.getInputStream();
      byte[] buffer = new byte[1024];
      while (in.read(buffer) &gt; 0) {
        d.addData(buffer);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return d;
  }
}</pre>
</blockquote>
</div>

<p>To use our <tt class="literal">CFDContentHandler</tt> to read CFD files,
we still need to register a new
<tt class="literal">ContentHandlerFactory</tt> that knows about the
<tt class="literal">CFDContentHandler</tt>. The
<tt class="literal">CFDContentHandlerFactory</tt><a name="INDEX-242"></a> in <a href="#JDP-CH-2-EX-9">Example 2-8</a>
creates <tt class="literal">CFDContent-Handlers</tt> for the
<tt class="literal">application/cfd</tt> MIME type. It ignores any other
MIME types, but we could also implement it with a reference to a
default <tt class="literal">ContentHandlerFactory</tt> that can handle
other MIME types.
</p>

<a name="JDP-CH-2-EX-9"></a>
<div class="example">
<h4 class="objtitle">Example 2-8. A Specialized ContentHandlerFactory for CFD Data Files</h4>
<blockquote>
<pre class="programlisting">package dcj.examples.Networking;

import java.net.*;

public class CFDContentHandlerFactory
    implements ContentHandlerFactory {
  public ContentHandler createContentHandler(String mimetype) {
    if (mimetype.compareTo("application/cfd") == 0) {
      return new CFDContentHandler();
    }
    else
      return null;
  }
}</pre>
</blockquote>
</div>

<p>Finally, our application can read CFD data files from an HTTP server
by first registering the specialized
<tt class="literal">ContentHandlerFactory</tt>, and then requesting a CFD
file from the HTTP server on which it
lives:<tt class="literal"></tt><a name="INDEX-243"></a><a name="INDEX-244"></a><a name="INDEX-245"></a>
</p>

<blockquote>
<pre class="programlisting">URLConnection.setContentHandlerFactory(new CFDContentHandlerFactory());
URL cfdURL = new URL("http://my.data.server/datasets/bigset.cfd");
CFDDataSet data = (CFDDataSet)cfdURL.getContent();</pre>
</blockquote>

<a name="JDP-CH-2-SECT-2.1"></a>
<h3 class="sect2">2.2.1. When and Where Are URLs Practical?</h3>

<p>As we've seen in earlier sections of this chapter, we can
transmit data around a distributed system using sockets and streams.
This method has the advantage of being efficient, since we are using
basic IP sockets with minimal protocol overhead getting between us
and our data. The downside is that it is our responsibility to know
the type and format of the data we're transmitting and
receiving. The communication protocol must be mutually agreed upon by
all participating computing agents, or we have to establish our own
means for communicating metadata about the kind of information with
which we are dealing.
</p>

<p>Java's HTTP support classes, on the other hand, provide a
standard means for serving and accessing data objects, and for easily
identifying the type and format of these objects. To make a piece of
data available from a URL, we need to install it in the content
section of an HTTP server, and configure the server to transmit the
appropriate MIME type when the data is accessed. On the receiving
end, we simply need to use the data object's URL to access the
document, ask the corresponding
<tt class="literal">URLConnection</tt><a name="INDEX-246"></a> for the type and encoding of the data,
and respond accordingly. The downside is that HTTP imposes plenty of
protocol overhead on the data stream, which reduces our net data
bandwidth between computing agents. Our data is now sharing space in
network packets with IP protocol <em class="emphasis">and</em> HTTP
protocol. Another downside is the relatively basic and simplistic
resource naming facility that HTTP provides, compared to formal
directory naming services like NIS and LDAP. The simple conclusion is
that, for distributed applications that are severely
bandwidth-limited, or that need to support complicated resource
hierarchies, using the HTTP protocol to access data is probably not
the appropriate method. On the other hand, if you have the luxury of
some extra communications bandwidth, and the CPU time to use it, and
your resource groupings are relatively simple, then using URLs to
access data is a possibility you should <a name="INDEX-247"></a> consider.<a name="INDEX-248"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch02_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch02_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.1. Sockets and Streams</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.3. The ClassLoader</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
