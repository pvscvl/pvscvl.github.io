<html>
<head>
<title>Identities and Access Control (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Identities and Access Control">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_01.htm">Chapter 5: Security</a></td><td align="right" valign="top" width="172"><a href="ch05_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">5.3. Identities and Access Control</h2>

<p>The <tt class="literal">Identity</tt><a name="INDEX-627"></a><a name="INDEX-628"></a><a name="INDEX-629"></a> class represents an agent within the
Security API. <tt class="literal">Identity</tt> implements the
<tt class="literal">Principal</tt><a name="INDEX-630"></a> interface, which is a generic
representation of a person, group, or other named entity. An
<tt class="literal">Identity</tt> has a name, which it inherits from the
<tt class="literal">Principal</tt> interface, and other information that
verifies the identity of the agent (a public key and assorted
certificates, for example). A <tt class="literal">Signer</tt> is a
subclass of <tt class="literal">Identity</tt> that also includes a
private key that can be used to sign data. We'll discuss public
and private keys and how they are created in more detail later in the
chapter.
</p>

<p>An <tt class="literal">Identity</tt> is created using a name for the agent
being represented:
</p>

<blockquote>
<pre class="programlisting">Identity fredsID = new Identity("Fred");</pre>
</blockquote>

<p>A public key and any available certificates can be added to
Fred's identity to support the validity of his identity:
</p>

<blockquote>
<pre class="programlisting">PublicKey fredsKey = ... // Get Fred's key
Certificate fredsCert = ... // Get Fred's certificate
Certificate fredsRSACert = ... // Get another certificate for Fred
fredsID.setPublicKey(fredsKey);
fredsID.addCertificate(fredsCert);
fredsID.addCertificate(fredsRSACert);</pre>
</blockquote>

<p>If we are also able to sign data using Fred's identity, then
we'll also have a private key for Fred, and we can create a
<tt class="literal">Signer</tt> object for him:
</p>

<blockquote>
<pre class="programlisting">Signer signingFred = new Signer("Fred");
PrivateKey fredsSigningKey = ... // Get Fred's private key
PublicKey fredsPublicKey = ... // Get Fred's public key
signingFred.setKeyPair(new KeyPair(fredsPublicKey, fredsSigning Key));;</pre>
</blockquote>

<a name="INDEX-631"></a>
<a name="INDEX-632"></a>
<a name="INDEX-633"></a>

<a name="JDP-CH-5-SECT-3.1"></a>
<h3 class="sect2">5.3.1. Access Control Lists</h3>

<p>The <tt class="literal">java.security.acl</tt><a name="INDEX-634"></a><a name="INDEX-635"></a><a name="INDEX-636"></a> package includes interfaces that let you
define specific access rights for individual agents or groups of
agents. In the same style as the rest of the Security API, this
package defines an API for access-control lists, with few of the
interfaces actually implemented in the package. Sun has provided a
default implementation of the ACL package in their
<tt class="literal">sun.security.acl</tt><a name="INDEX-637"></a> package. We'll use classes from
Sun's implementation to demonstrate ACLs.
</p>

<p>Central to the <tt class="literal">java.security.acl</tt> package is the
<tt class="literal">Acl</tt> interface, which represents an
access-control list. An <tt class="literal">Acl</tt> has a group of owners
associated with it, represented by <tt class="literal">Principal</tt>
objects. <em class="emphasis">Principal</em> is a term often used in
security circles to refer to a user or agent acting as a party in a
secure transaction. Since both <tt class="literal">Identity</tt> and
<tt class="literal">Signer</tt> are subclasses of
<tt class="literal">Principal</tt>, you can use instances of either
wherever a <tt class="literal">Principal</tt> is called for. Only owners
of the <tt class="literal">Acl</tt> are supposed to be able to modify the
<tt class="literal">Acl</tt>. Implementations of the
<tt class="literal">Acl</tt> interface should enforce this by checking
the keys and certificates on the <tt class="literal">Principal</tt>s of
the owners, to be sure that the agent creating or modifying the ACL
has access to the certified elements of the identity of one of the
owners of the ACL.
</p>

<p>Each entry in the access-control list is represented as an
<tt class="literal">AclEntry</tt><a name="INDEX-638"></a>
object, which associates specific identities with the permissions
they have over the resource being controlled. An entry is added to
the <tt class="literal">Acl</tt> using the
<tt class="literal">addEntry()</tt><a name="INDEX-639"></a>
method, which takes the <tt class="literal">Principal</tt> for the entity
and its <tt class="literal">AclEntry</tt> as arguments.
</p>

<p>Each <tt class="literal">AclEntry</tt> defines a set of permissions given
to the <tt class="literal">Principal</tt> over the resource being
protected. Specific types of permission are represented using the
<tt class="literal">Permission</tt> interface, which doesn't
actually implement any behavior, but acts as a placeholder for
subclasses that distinguish permissions in application-specific ways
(permission names, binary typecodes, etc.). The
<tt class="literal">sun.security.acl</tt> package provides an
implementation of <tt class="literal">Permission</tt> called
<tt class="literal">PermissionImpl</tt><a name="INDEX-640"></a> that uses strings to identify permission
types (e.g., "READ", "WRITE").
</p>

<p>The <tt class="literal">Principal</tt> for an
<tt class="literal">AclEntry</tt> is set using the
<tt class="literal">setPrincipal()</tt><a name="INDEX-641"></a>
method on the entry. Once this is done, permissions for the
<tt class="literal">Principal</tt> are added to the entry using the
<tt class="literal">addPermission()</tt><a name="INDEX-642"></a><a name="INDEX-643"></a> method:
</p>

<blockquote>
<pre class="programlisting">// Define a set of permission types
Permission read = new PermissionImpl("READ");
Permission create = new PermissionImpl("CREATE");
Permission update = new PermissionImpl("UPDATE");
Permission destroy = new PermissionImpl("DESTROY");
// Create some Principals
Principal person1 = new PrincipalImpl("Fred");
Principal person2 = new PrincipalImpl("Sally");
// Make an entry for each principal
AclEntry entry1 = new AclEntryImpl(person1);
AclEntry entry2 = new AclEntryImpl(person2);
// Give each principal their permissions:
// Fred can only read the resource
entry1.addPermission(read);
// Sally can do anything
entry2.addPermission(read);
entry2.addPermission(create);
entry2.addPermission(update);
entry2.addPermission(destroy);</pre>
</blockquote>

<p>Notice that we've used <tt class="literal">PrincipalImpl</tt>
objects to represent <tt class="literal">Principal</tt>s in the
<tt class="literal">Acl</tt>. The
<tt class="literal">PrincipalImpl</tt><a name="INDEX-644"></a> class is a subclass of the
<tt class="literal">Principal</tt> interface provided in the
<tt class="literal">sun.security.acl</tt> package. In a real application,
we would probably use an <tt class="literal">Identity</tt> or
<tt class="literal">Signer</tt> object to represent a principal in the
<tt class="literal">Acl</tt>. This would allow us to verify a digital
signature from a remote client before we would allow that remote
client to access the resource protected by the
<tt class="literal">Acl</tt>.
</p>

<p>Once the <tt class="literal">AclEntry</tt>s have been created, they can
be added to the <tt class="literal">Acl</tt> with the
<tt class="literal">addEntry()</tt> method. The method takes two
arguments: a <tt class="literal">Principal</tt> argument that corresponds
to the owner of the <tt class="literal">Acl</tt> making the entry, and
the <tt class="literal">AclEntry</tt> itself. For example:
</p>

<blockquote>
<pre class="programlisting">Principal myID = ... // Get my identity
Acl myAcl = ... // Create the Acl, setting me as an owner
// Now add the entries created above.
myAcl.addEntry(myID, entry1);
myAcl.addEntry(myID, entry2);</pre>
</blockquote>

<p>With the ACL in place, we can check incoming agents for the necessary
permissions to do specific actions. If an agent contacts our agent
and asks to update a resource, we can check the ACL of that resource
for write permission for that agent using their
<tt class="literal">Principal</tt>:
</p>

<blockquote>
<pre class="programlisting">Principal remoteAgent = ... // Initialize Principal for remote agent
if (myAcl.checkPermission(remoteAgent, update)) {
    // Let the update action go through
}
else {
    // Disallow the action, and tell the agent
    // that it doesn't have the right permissions
}</pre>
</blockquote>

<a name="INDEX-645"></a>
<a name="INDEX-646"></a>
<a name="INDEX-647"></a>
<a name="INDEX-648"></a>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.2. The java.security Package</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.4. Keys: Public, Private, and Secret</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
