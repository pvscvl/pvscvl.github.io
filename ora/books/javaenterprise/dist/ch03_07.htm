<html>
<head>
<title>RMI vs. CORBA (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="RMI vs. CORBA">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch03_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch03_01.htm">Chapter 3: Distributing Objects</a></td><td align="right" valign="top" width="172"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch04_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">3.7. RMI vs. CORBA</h2>

<p>
<a name="INDEX-478"></a><a name="INDEX-479"></a>In this <a name="INDEX-480"></a><a name="INDEX-481"></a> chapter we've implemented the
simple distributed compute engine using both CORBA and RMI, and
we've seen many similarities between the two in terms of
functionality. There are also some critical differences between the
two technologies. In order for you to understand which distributed
object scheme is right for whatever system you're facing,
it's important to spell out these differences.
</p>

<a name="JDP-CH-3-SECT-7.1"></a>
<h3 class="sect2">3.7.1. The Language Barrier: Advantage or Disadvantage?</h3>

<p>
<a name="INDEX-482"></a>As we mentioned
before, RMI is a Java-centric distributed object system. The only way
currently to integrate code written in other languages into a RMI
system is to use the Java native-code interface to link a remote
object implementation in Java to C or C++ code. This is a
possibility, but definitely not something for the faint of heart. The
native-code interface in Java is complicated, and can quickly lead to
fragile or difficult-to-maintain code. CORBA, on the other hand, is
designed to be language-independent. Object interfaces are specified
in a language that is independent of the actual implementation
language. This interface description can then be compiled into
whatever implementation language suits the job and the environment.
</p>

<p>
<a name="INDEX-483"></a>This distinction is really
at the heart of the split between the two technologies. RMI, as a
Java-centric system, inherits all of the benefits of Java. An RMI
system is immediately cross-platform; any subsystem of the
distributed system can be relocated to any host that has a Java
virtual machine handy. Also, the virtual machine architecture of Java
allows us to do some rather interesting things in an RMI system that
just aren't possible in CORBA. For example, using RMI and the
object serialization in the <tt class="literal">java.io</tt> package, we
can implement an agent-based system where clients subclass and
specialize an <tt class="literal">Agent</tt> interface, set the operating
parameter values for the agent, and then send the object in its
entirety to a remote "sandbox" server, where the object
will act in our name to negotiate on some issue (airline ticket
prices, stocks and bonds, order-fulfillment schedules, etc.). The
remote server only knows that each agent has to implement an
agreed-upon interface, but doesn't know anything about how each
agent is implemented, even though the agent is running on the server
itself. In CORBA, objects can never really leave their implementation
hosts; they can only roam the network in the virtual sense, sending
stub references to themselves and to clients. We don't have the
option of offloading an object from one host to another.
</p>

<p>However, CORBA doesn't require a commitment to a single
implementation language. We can pick and choose how different
elements of a distributed system are implemented based on the issues
at hand. Legacy systems may dictate our implementation language in
some cases (large COBOL systems like to be spoken to in COBOL, for
example). Performance may be an issue in other cases. Heavy
computational tasks like computational fluid dynamics and
finite-element modeling are best written in languages that can be
compiled down to native hardware instructions, like C and C++. The
Java virtual machine architecture is a disadvantage here, since an
additional interpretation layer is added to the processing of
instructions. The Java <a name="INDEX-484"></a> just-in-time compilers (JIT) are
capable of generating native instructions from Java bytecodes, but
there is still an additional piece of overhead in running each piece
of Java code. If we know that migrating system elements around the
network is not necessary, then natively compiled Java code can be
permanently installed, but by doing this we're sacrificing the
critical "run everywhere" aspect of Java.
</p>

<p>If we're using CORBA in these cases, we can take IDL interface
definitions for our objects, compile them into COBOL, C, C++, or
whatever languages we need at the various nodes in our distributed
system. As long as the ORB implementations that we use at each node
support a standard inter-ORB protocol like IIOP, the various CORBA
objects implemented in various languages can interact with each other
just fine.<a name="INDEX-485"></a>
</p>


<a name="JDP-CH-3-SECT-7.2"></a>
<h3 class="sect2">3.7.2. Other Differences</h3>

<p>In addition to this core distinction between CORBA and RMI, there are
other differences to keep in mind:
</p>

<ul>
<li>
<p>Relatively speaking, RMI can be easier to master, especially for
experienced Java programmers, than CORBA. CORBA is a rich, extensive
family of standards and interfaces, and delving into the details of
these interfaces is sometimes overkill for the task at hand.
</p>
</li>
<li>
<p>CORBA is a more mature standard than RMI, and has had time to gain
richer implementations. The CORBA standard is a fairly comprehensive
one in terms of distributed objects, and there are CORBA
implementations out there that provide many more services and
distribution options than RMI or Java. The CORBA Services
specifications, for example, include comprehensive high-level
interfaces for naming, security, and transaction services (see <a href="appb_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/appb_01.htm">Appendix B, "CORBA Services"</a>).
</p>
</li>
<li>
<p>Various low-level technical details about the two schemes may be seen
as advantages or disadvantages to you as a developer: the fact that
RMI imposes additional <tt class="literal">throws</tt> clauses in your
remote interface is one that we've already mentioned, and
CORBA's peer-to-peer ORB communication model as opposed to
RMI's server-centric model may be another.
</p>
</li>
</ul>


<a name="JDP-CH-3-SECT-7.3"></a>
<h3 class="sect2">3.7.3. The Bottom Line</h3>

<p>So which is better, CORBA or RMI? Basically, it depends. If
you're looking at a system that you're building from
scratch, with no hooks to legacy systems and fairly mainstream
requirements in terms of performance and other language features,
then RMI may be the most effective and efficient tool for you to use.
On the other hand, if you're linking your distributed system to
legacy services implemented in other languages, or if there is the
possibility that subsystems of your application will need to migrate
to other languages in the future, or if your system depends strongly
on services that are available in CORBA and not in RMI, or if
critical subsystems have highly-specialized requirements that Java
can't meet, then CORBA may be your best <a name="INDEX-486"></a><a name="INDEX-487"></a> bet.<a name="INDEX-488"></a><a name="INDEX-489"></a><a name="INDEX-490"></a><a name="INDEX-491"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch03_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch04_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.6. Java RMI</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4. Threads</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
