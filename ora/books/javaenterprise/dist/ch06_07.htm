<html>
<head>
<title>Using Remote Objects (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Using Remote Objects">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_01.htm">Chapter 6: Message-Passing Systems</a></td><td align="right" valign="top" width="172"><a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch07_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">6.7. Using Remote Objects</h2>

<p>
<a name="INDEX-967"></a><a name="INDEX-968"></a><a name="INDEX-969"></a><a name="INDEX-970"></a>Earlier in the chapter we
mentioned some of the situations that might lead you to use message
passing rather than remote objects to handle the agent-to-agent
communication in your distributed system. To get a more concrete
feeling for the differences between a message-passing system and one
based on remote objects, this section describes an RMI implementation
of our chess game.
</p>

<p>The RMI implementation of the <a name="INDEX-971"></a> chess game uses two remote objects: a
remote chess player and a remote chess move. The interface for the
<tt class="literal">RMIChessMove</tt><a name="INDEX-972"></a> object is shown in <a href="#JDP-CH-6-EX-19">Example 6-18</a>. It has essentially the same interface as the
<tt class="literal">ChessMove</tt> class in our earlier examples.
</p>

<a name="JDP-CH-6-EX-19"></a>
<div class="example">
<h4 class="objtitle">Example 6-18. A Remote Chess Move Interface</h4>
<blockquote>
<pre class="programlisting">package dcj.examples.message;

import java.rmi.RemoteException;

// Interface for an RMI-based chess move

public interface RMIChessMove {
  public String from() throws RemoteException;
  public void setFrom(String f) throws RemoteException;
  public String to() throws RemoteException;
  public void setTo(String t) throws RemoteException;
  public int checkFlag() throws RemoteException;
  public void setCheckFlag (String f) throws RemoteException;
}</pre>
</blockquote>
</div>

<a name="INDEX-973"></a>

<p>
<a href="#JDP-CH-6-EX-20">Example 6-19</a> shows the
<tt class="literal">RMIChessMoveImpl</tt><a name="INDEX-974"></a> class, which is the server
implementation of the chess move object.
</p>

<a name="JDP-CH-6-EX-20"></a>
<div class="example">
<h4 class="objtitle">Example 6-19. Chess Move Implementation</h4>
<blockquote>
<pre class="programlisting">package dcj.examples.message;

import java.rmi.*;

public class RMIChessMoveImpl implements RMIChessMove extends Remote {
  String fromPos;
  String toPos;
  int checkFlag;

  public RMIChessMoveImpl(String from, String to, int ckFlag) {
    fromPos = from;
    toPos = to;
    checkFlag = ckFlag;
  }

  public String from() throws RemoteException {
    return fromPos;
  }

  public void setFrom(String f) throws RemoteException {
    fromPos = f;
  }

  public String to() throws RemoteException {
    return toPos;
  }

  public void setTo(String t) throws RemoteException {
    toPos = t;
  }

  public int checkFlag() throws RemoteException {
    return checkFlag;
  }

  public void setCheckFlag(String f) throws RemoteException {
    checkFlag = f;
  }
}</pre>
</blockquote>
</div>

<a name="INDEX-975"></a>
<p>
<a href="#JDP-CH-6-EX-21">Example 6-20</a> shows the interface for the
<tt class="literal">RMIChessPlayer</tt><a name="INDEX-976"></a>. It has essentially the
same interface as the earlier <tt class="literal">ChessPlayer</tt>,
except that we've changed the <tt class="literal">nextMove()</tt>
method to return the player's move as an
<tt class="literal">RMIChessMove</tt> object, rather than returning a
boolean flag and filling in method arguments to indicate the move.
We've also added a <tt class="literal">gameOver()</tt> method,
which reveals whether the player has finished the game it was playing
(win or lose).
</p>

<a name="JDP-CH-6-EX-21"></a>
<div class="example">
<h4 class="objtitle">Example 6-20. Remote Chess Player Interface</h4>
<blockquote>
<pre class="programlisting">package dcj.examples.message;

import java.rmi.RemoteException;

// Interface for an RMI-based chess player

public interface RMIChessPlayer {
  public boolean acceptMove(RMIChessMove m) throws RemoteException;
  public RMIChessMove nextMove() throws RemoteException;
  public void moveAccepted(RMIChessMove m) throws RemoteException;
  public void conceded() throws RemoteException;
}</pre>
</blockquote>
</div>

<p>The server implementation of the <tt class="literal">RMIChessPlayer</tt>
is shown in <a href="#JDP-CH-6-EX-22">Example 6-21</a> as the
<tt class="literal">RMIChessPlayerImpl</tt><a name="INDEX-977"></a>. Again, it's very similar to
the <tt class="literal">ChessPlayer</tt> implementation, with the
addition of the <tt class="literal">boolean</tt><tt class="literal">gameOver</tt> data member, the exceedingly simple
<tt class="literal">gameOver()</tt> method, and a
<tt class="literal">main()</tt> method. The <tt class="literal">main()</tt>
method on the <tt class="literal">RMIChessPlayerImpl</tt> takes the place
of the <tt class="literal">ChessServer</tt> in our message-passing chess
game. If we call it with a single command line argument, then that
argument is treated as the name used to register a local
<tt class="literal">RMIChessPlayerImpl</tt> object with the RMI Naming
service. Once the local player is registered with the RMI registry,
the method loops waiting for a remote player to start a game,
checking the local player to see when its game is over before
quitting. If we invoke the class with a local player name plus a
remote host name and remote player name on the command line, then the
<tt class="literal">main()</tt> method tries to look up a remote
<tt class="literal">RMIChessPlayer</tt> on that host under that name. If
it finds one, it mediates a game between the remote and local
players, iteratively calling each player's
<tt class="literal">nextMove()</tt> and <tt class="literal">acceptMove()</tt>
methods.
</p>

<a name="JDP-CH-6-EX-22"></a>
<div class="example">
<h4 class="objtitle">Example 6-21. Chess Player Implementation</h4>
<blockquote>
<pre class="programlisting">package dcj.examples.message;

// Server implementation of our RMI-based chess player

public class RMIChessPlayerImpl
  implements RMIChessPlayer extends Remote {

  // Our opponent
  protected RMIChessPlayer opponent = null;

  // Game-over indicator
  protected boolean gameOver = false;

  // Data structures for maintaining chess board state
  // ...           

  public static final int CHECK = 0;
  public static final int CHECKMATE = 1;
  public static final int NO_CHECK = 2;

  public RMIChessPlayerImpl() {
    // Initialize chess board
  }

  public boolean acceptMove(RMIChessMove m) throws RemoteException {
    // Check validity of requested move.
    // If valid, apply to chess board and return true.
    // If invalid, return false.
    // ...            
    return true;
  }

  public boolean nextMove(RMIChessMove m) throws RemoteException {
    // Generate our next move based on the current
    // state of the game board, and put it into the
    // ChessMove passed in.  If no move in this round,
    // return false.
    // ...            
    return true;
  }

  public void moveAccepted(RMIChessMove m) throws RemoteException {
    // Our move was accepted as valid, apply it to the
    // game board...
    // ...            
  }

  public void conceded() throws RemoteException {
    // We've won!
    gameOver = true;
  }

  public static void main(String argv[]) {
    String playerName = argv[0];
    // Create the chess player for our side of the game
    RMIChessPlayerImpl me = new RMIChessPlayerImpl();

    // If we've been given an opponent, try to start
    // a game with them...
    if (argv.size &gt; 2) {
      String oppName = argv[1];
      String oppHost = argv[2];
      RMIChessPlayer opponent =
        (RMIChessPlayer)Naming.lookup("rmi://" + oppHost
                                      + "/" + oppName);

      RMIChessMoveImpl myMove = new RMIChessMoveImpl();
      RMIChessMoveImpl theirMove = new RMIChessMoveImpl();

      while (!gameOver) {
        if (opponent.nextMove(theirMove)) {
          while (!me.acceptMove(theirMove) &amp;&amp;
                 opponent.nextMove(theirMove)) {
            // Don't have to do anything, the while
            // loop conditions do all the work.
          }
        }

        if (me.nextMove(myMove)) {
          while (!opponent.acceptMove(myMove) &amp;&amp;
                 me.nextMove(myMove)) {}
        }
      }
    }
    else {
      // No arguments telling us where our opponent is, so
      // we register the local player and wait for them to come
      // to us.

      // Bind the player to their name in the registry
      Naming.rebind(playerName, player);
      // Now wait for another player to engage us in a game.
      while(1) {
        wait();
      }
    }
  }
}</pre>
</blockquote>
</div>

<a name="INDEX-978"></a>

<p>In this version of our chess game, the
<tt class="literal">MessageHandler</tt> and the various
<tt class="literal">Message</tt> subclasses have been replaced by the
remote method-calling services provided by RMI. The RMI-based chess
game is also easier to extend with new features--we just need to
add new methods to our <tt class="literal">RMIChessPlayer</tt> interface.
In the worst case, we'll need to define some new remote objects
to support new features. In the message-passing version, we would
need to extend the <tt class="literal">ChessPlayer</tt> interface, create
new subclasses of <tt class="literal">Message</tt> to support the new
functions, and update the <tt class="literal">ChessServer</tt> class to
support the new message types. What we've lost in the RMI
version is some flexibility in terms of the low-level communication
protocol. Since RMI is encapsulating all of the network-level details
of the remote method calls, we can't control the data protocol
directly, as we do with message passing. If RMI's network
protocol imposes too much overhead on our distributed system,
there's little we can do about it except minimize the data
members and method arguments on our remote objects. And if
we're faced with a firewall that blocks the RMI protocol
(perhaps for reasons that are known only to the network operator),
then our distributed system is stopped dead in its tracks. With a
simple (some would say barebones) message-passing system, we can
directly control the format of both the serialized data and the
communication protocol to suit our needs, and we can get our messages
through using relatively "unadorned" IP <a name="INDEX-979"></a> packets.<a name="INDEX-980"></a><a name="INDEX-981"></a><a name="INDEX-982"></a><a name="INDEX-983"></a>
</p>





<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch07_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">6.6. Message Passing with Java Events</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">7. Databases</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
