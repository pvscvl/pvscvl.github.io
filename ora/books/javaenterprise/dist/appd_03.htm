<html>
<head>
<title>The java.rmi.server Package (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The java.rmi.server Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172">
  <a href="appd_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/appd_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td>

<td align="center" valign="top" width="171">
  <a href="appd_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/appd_01.htm">Appendix D: RMI Quick Reference</a></td>

<td align="right" valign="top" width="172">
  <a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">D.3. The java.rmi.server Package</h2>

<p>
<a name="INDEX-1477"></a><a name="INDEX-1478"></a>
This package contains the classes used in server implementations of
remote objects. The <tt class="literal">RemoteServer</tt> class acts as the
base class for all RMI server objects.
<tt class="literal">UnicastRemoteObject</tt>, the single subclass of
<tt class="literal">RemoteServer</tt> provided in this package, implements
a non-persistent, point-to-point object communication scheme. Other
subclasses of <tt class="literal">RemoteServer</tt> could be written to
implement multicast object communication, replicated objects, etc.
The <tt class="literal">java.rmi.server</tt> package also contains several
<tt class="literal">Exception</tt> subclasses relevant to the server
implementation of a remote object.
</p>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.ExportException</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>This <tt class="literal">RemoteException</tt> is thrown if an attempt is
made to export a remote object on a port that is already in use.
</p>

<blockquote>
<pre class="programlisting">public class <b class="emphasis-bold">ExportException</b> extends java.rmi.RemoteException {
// Public Constructors
    public <b class="emphasis-bold">ExportException</b>(String descr);
    public <b class="emphasis-bold">ExportException</b>(String descr, Exception nestedExc);
}</pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1479"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.LoaderHandler</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>This defines the interface to the internal handler used by the
<tt class="literal">RMIClassLoader</tt> to load classes over the network.
<a name="INDEX-1481"></a><a name="INDEX-1482"></a>
</p>

<blockquote>
<pre class="programlisting">public interface LoaderHandler {
// Class Constants
    public final static String <b class="emphasis-bold">packagePrefix</b>;
// Public Instance Methods
    public Object getSecurityContext(ClassLoader loader);
    public Class loadClass(String name);
    public Class loadClass(URL codebase, String name)
                 throws MalformedURLException, ClassNotFoundException;
}</pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1480"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.LogStream</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>This class provides the server with an output stream to an error log.
<tt class="literal">LogStreams</tt> can't be created directly by
the application. Instead, a handle on a
<tt class="literal">LogStream</tt> is obtained by calling the static
<tt class="literal">log()</tt> method with the name of the desired log.
If the named log doesn't exist, the default log is returned.
The default <tt class="literal">PrintStream</tt> used to create new
<tt class="literal">LogStreams</tt> can be gotten through the
<tt class="literal">getDefaultStream()</tt> method, and set using the
<tt class="literal">setDefaultStream()</tt> method.
<a name="INDEX-1484"></a><a name="INDEX-1485"></a><a name="INDEX-1486"></a><a name="INDEX-1487"></a><a name="INDEX-1488"></a><a name="INDEX-1489"></a><a name="INDEX-1490"></a><a name="INDEX-1491"></a>
</p>

<blockquote>
<pre class="programlisting">public class <b class="emphasis-bold">LogStream</b> extends PrintStream {
// Class Constants
    public static final int <b class="emphasis-bold">SILENT</b>;
    public static final int <b class="emphasis-bold">BRIEF</b>;
    public static final int <b class="emphasis-bold">VERBOSE</b>;
// Class Methods
    public static synchronized PrintStream getDefaultStream();
    public static LogStream log(String name);
    public static int parseLevel(String s);
    public static synchronized void setDefaultStream(
       PrintStream newDefault);
// Public Instance Methods
    public synchronized OutputStream getOutputStream();
    public synchronized void setOutputStream(OutputStream out);
    public String toString();
    public void write(byte b[], int off, int len);
    public void write(int b);
} </pre>
</blockquote>

<a name="INDEX-1492"></a>
</table>
</div>
</div>
<a name="INDEX-1483"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.ObjID</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>An <tt class="literal">ObjID</tt> is used on an object server to uniquely
identify exported remote objects. It's used primarily in an RMI
server during distributed garbage collection.
</p>

<p>The
<tt class="literal">equals()</tt><a name="INDEX-1494"></a> method is overridden from
<tt class="literal">Object</tt> to return <tt class="literal">true</tt> only if
the objects identified by the two <tt class="literal">ObjID</tt>s are
equal. The <tt class="literal">ObjID</tt> class also has
<tt class="literal">read()</tt><a name="INDEX-1495"></a> and
<tt class="literal">write()</tt><a name="INDEX-1496"></a> methods that serve to marshal and
unmarshal an <tt class="literal">ObjID</tt> from I/O streams.
<a name="INDEX-1497"></a><a name="INDEX-1498"></a>
</p>

<blockquote>
<pre class="programlisting">public final class <b class="emphasis-bold">ObjID</b> implements java.io.Serializable {
// Public Constructors
    public <b class="emphasis-bold">ObjID()</b>;
    public <b class="emphasis-bold">ObjID</b>(int num);
// Class Constants
    public static final int <b class="emphasis-bold">REGISTRY_ID</b>;
    public static final int <b class="emphasis-bold">DGC_ID</b>;
// Class Methods
    public static ObjID <b class="emphasis-bold">read</b>(ObjectInput in) 
                        throws java.io.IOException;
// Public Instance Methods
    public boolean equals(Object obj);
    public int hashCode();
    public String toString();
    public void write(ObjectOutput out) throws java.io.IOException;
}</pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1493"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.Operation</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>An <tt class="literal">Operation</tt> contains a description of a method
on a remote object.
<a name="INDEX-1500"></a><a name="INDEX-1501"></a><a name="INDEX-1502"></a>
</p>

<blockquote>
<pre class="programlisting">public class <b class="emphasis-bold">Operation</b> {
// Public Constructors
    public <b class="emphasis-bold">Operation</b>(String op);
// Public Instance Methods
    public String getOperation();
    public String toString();
}</pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1499"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.RemoteCall</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>A <tt class="literal">RemoteCall</tt> is the interface used by stubs and
skeletons to perform remote method calls. The
<tt class="literal">getInputStream()</tt><a name="INDEX-1504"></a> and
<tt class="literal">getOutputStream()</tt><a name="INDEX-1505"></a> methods return streams that can be
used to marshal arguments or return values, and unmarshal them on the
other end of the method call.
<a name="INDEX-1506"></a><a name="INDEX-1507"></a><a name="INDEX-1508"></a><a name="INDEX-1509"></a><a name="INDEX-1510"></a>
</p>

<blockquote>
<pre class="programlisting">public interface RemoteCall {
    public void done() throws IOException;
    public void executeCall() throws Exception;
    public ObjectInput getInputStream()  throws IOException;
    public ObjectOutput getOutputStream()  throws IOException;
    public ObjectOutput getResultStream(boolean success)
                        throws IOException, StreamCorruptedException;
    public void releaseInputStream() throws IOException;
    public void releaseOutputStream()  throws IOException;
} </pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1503"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.RemoteObject</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>The <tt class="literal">RemoteObject</tt> class reimplements key
<tt class="literal">Object</tt> methods for remote objects, and maintains
a <tt class="literal">RemoteRef</tt> object that is a handle to the
actual remote object. The
<tt class="literal">equals()</tt><a name="INDEX-1512"></a> implementation returns
<tt class="literal">true</tt> only if the two referenced remote objects are
equal. The
<tt class="literal">hashCode()</tt><a name="INDEX-1513"></a> method is implemented so that every
remote stub that refers to the same remote object will have the same
hash code.
<a name="INDEX-1514"></a>
</p>

<blockquote>
<pre class="programlisting">public abstract class <b class="emphasis-bold">RemoteObject</b> 
    implements Remote, java.io.Serializable {
// Protected Constructors
    protected <b class="emphasis-bold">RemoteObject</b>();
    protected <b class="emphasis-bold">RemoteObject</b>(RemoteRef newref);
// Protected Instance Variables
    transient protected RemoteRef <b class="emphasis-bold">&gt;ref</b>;
// Public Instance Methods
    public boolean equals(Object obj);
    public int hashCode();
    public String toString();
} </pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1511"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.RemoteRef</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>A handle on the object implementing a remote object reference. Each
<tt class="literal">RemoteObject</tt> contains a
<tt class="literal">RemoteRef</tt>, which acts as its interface to the
actual remote object it represents. Normally, you won't need to
interact directly with <tt class="literal">RemoteRef</tt>s from your
application code. Rather, application code will interact with
<tt class="literal">RemoteObject</tt>s, which use their internal
<tt class="literal">RemoteRef</tt>s to perform remote method invocations.
</p>

<p>The
<tt class="literal">newCall()</tt><a name="INDEX-1516"></a>
method is used to create a call object for invoking a remote method
on the referenced object. The
<tt class="literal">invoke()</tt><a name="INDEX-1517"></a>
method actually executes a remote method invocation. If a remote
method returns successfully, then the <tt class="literal">done()</tt>
method is called to clean up the connection to the remote object.
</p>

<p>The
<tt class="literal">remoteEquals()</tt><a name="INDEX-1518"></a>
,
<tt class="literal">remoteHashCode()</tt><a name="INDEX-1519"></a>
, and
<tt class="literal">remoteToString()</tt><a name="INDEX-1520"></a>
methods on <tt class="literal">RemoteRef</tt> are used by
<tt class="literal">RemoteObjects</tt> to implement the remote versions
of the <tt class="literal">equals()</tt>,
<tt class="literal">hashCode()</tt>, and <tt class="literal">toString()</tt>
methods.
<a name="INDEX-1521"></a>
</p>

<blockquote>
<pre class="programlisting">public interface <b class="emphasis-bold">RemoteRef</b> extends java.io.Externalizable {
// Class Constants
    public final static String <b class="emphasis-bold">packagePrefix</b>;
// Public Instance Methods
    public void done(RemoteCall call) throws RemoteException;
    public String getRefClass(java.io.ObjectOutput out);
    public void invoke(RemoteCall call) throws Exception;
    public RemoteCall newCall(RemoteObject obj, Operation[] op,
                              int opnum, long hash) 
                      throws RemoteException;
    public boolean <b class="emphasis-bold">remoteEquals</b>(RemoteRef obj);
    public int <b class="emphasis-bold">remoteHashCode</b>();
    public String <b class="emphasis-bold">remoteToString</b>();
}</pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1515"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.RemoteServer</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>This class acts as an abstract base class for all remote object
server implementations. The intent is for subclasses to implement the
semantics of the remote object (e.g., multicast remote objects,
replicated objects). In the current version of RMI, the only concrete
subclass provided is <tt class="literal">UnicastRemoteServer</tt>, which
implements a nonreplicated remote object.
</p>

<p>The
<tt class="literal">getClientHost()</tt><a name="INDEX-1524"></a> method returns the name of the host for
the client being served in the current thread. The
<tt class="literal">getLog()</tt><a name="INDEX-1525"></a>
and
<tt class="literal">setLog()</tt><a name="INDEX-1526"></a>
methods access the call log for this
<tt class="literal">RemoteServer</tt>.
<a name="INDEX-1527"></a><a name="INDEX-1528"></a>
</p>

<blockquote>
<pre class="programlisting">public abstract class <b class="emphasis-bold">RemoteServer</b> extends RemoteObject {
// Protected Constructors
    protected <b class="emphasis-bold">RemoteServer</b>();
    protected <b class="emphasis-bold">RemoteServer</b>(RemoteRef ref);
// Class Methods
    public static String <b class="emphasis-bold">getClientHost</b>() 
                         throws ServerNotActiveException;
    public static java.io.PrintStream getLog();
    public static void setLog(java.io.OutputStream out);
} </pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1522"></a><a name="INDEX-1523"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.RemoteStub</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>All client stub classes generated by the <em class="emphasis">rmic</em>
compiler are derived from this abstract class. A client receives a
<tt class="literal">RemoteStub</tt> when it successfully looks up a remote
object through the RMI registry. A client stub serves as a client
interface to the remote object it references, converting method calls
on its interface into remote method invocations on the remote object
implementation.
<a name="INDEX-1530"></a>
</p>

<blockquote>
<pre class="programlisting">public abstract class <b class="emphasis-bold">RemoteStub</b> extends RemoteObject {
// Protected Constructors
    protected <b class="emphasis-bold">RemoteStub</b>();
    protected <b class="emphasis-bold">RemoteStub</b>(RemoteRef ref);
// Protected Class Methods
    protected static void setRef(RemoteStub stub, RemoteRef ref);
} </pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1529"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.RMIClassLoader</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>This class loads classes over the network using URLs. The class has
two <tt class="literal">loadClass()</tt> methods: one for loading a class
from a given (absolute) URL, and another for loading a class from a
given (relative) URL, which starts at a particular codebase.
<a name="INDEX-1533"></a>
</p>

<blockquote>
<pre class="programlisting">public class <b class="emphasis-bold">RMIClassLoader</b> {
// Class Methods
    public static Object getSecurityContext(ClassLoader loader);
    public static Class loadClass(String name)
        throws MalformedURLException, ClassNotFoundException;
    public static Class <b class="emphasis-bold">loadClass</b>(URL codebase, String name)
        throws MalformedURLException, ClassNotFoundException;
}</pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1531"></a><a name="INDEX-1532"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.RMIFailureHandler</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>The
<tt class="literal">failure()</tt><a name="INDEX-1535"></a>
method on the current <tt class="literal">RMIFailureHandler</tt> is
called when the RMI communications system fails to create a
<tt class="literal">Socket</tt> or <tt class="literal">ServerSocket</tt>. The
current handler is set using the
<tt class="literal">setFailureHandler()</tt> method on
<tt class="literal">RMISocketFactory</tt>. The
<tt class="literal">failure()</tt> method returns a boolean value that
indicates whether the RMI system should retry the socket connection.
</p>

<blockquote>
<pre class="programlisting">public interface <b class="emphasis-bold">RMIFailureHandler</b> {
// Public Instance Methods
    public boolean <b class="emphasis-bold">failure</b>(Exception ex);
}</pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1534"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.RMISocketFactory</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>This abstract class provides an interface for the RMI internals to
use to create sockets. The factory can create either
<tt class="literal">Sockets</tt> for clients, or
<tt class="literal">ServerSockets</tt> for servers. The factory maintains
an <tt class="literal">RMIFailureHandler</tt> that it uses to deal with
failures encountered while attempting to create sockets. If an error
is encountered while creating a socket, the
<tt class="literal">failure()</tt> method on the current
<tt class="literal">RMIFailureHandler</tt> is called. If the return value
is <tt class="literal">true</tt>, then the
<tt class="literal">RMISocketFactory</tt> attempts the socket creation
again, otherwise the factory gives up and throws an
<tt class="literal">IOException</tt>.
</p>

<p>Client sockets are created using the
<tt class="literal">createSocket()</tt><a name="INDEX-1537"></a><a name="INDEX-1538"></a>
method, while server sockets are created using the
<tt class="literal">createServerSocket()</tt> method. The current
<tt class="literal">RMISocketFactory</tt> is accessed using the static
<tt class="literal">getSocketFactory()</tt><a name="INDEX-1539"></a>
and <tt class="literal">setSocketFactory()</tt> methods. The
<tt class="literal">RMIFailureHandler</tt> for the current factory is
accessed using the <tt class="literal">getFailureHandler()</tt> and
<tt class="literal">setFailureHandler()</tt> methods.
</p>

<blockquote>
<pre class="programlisting">public abstract class <b class="emphasis-bold">RMISocketFactory</b> {
// Public Instance Methods
    public abstract ServerSocket <b class="emphasis-bold">createServerSocket</b>(int port)
                                 throws IOException;
    public abstract Socket <b class="emphasis-bold">createSocket</b>(String host, int port)
                           throws IOException;
// Class Methods
    public static RMIFailureHandler <b class="emphasis-bold">getFailureHandler</b>();
    public static RMISocketFactory <b class="emphasis-bold">getSocketFactory</b>();
    public static void <b class="emphasis-bold">setFailureHandler</b>(RMIFailureHandler fh);
    public static void <b class="emphasis-bold">setSocketFactory</b>(RMISocketFactory fac)
                       throws IOException;
}</pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1536"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.ServerCloneException</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>This exception is thrown if an attempt to clone a
<tt class="literal">RemoteServer</tt> object fails while the clone is
being exported. The nested exception is the
<tt class="literal">RemoteException</tt> that was thrown during the
cloning operation.
</p>

<blockquote>
<pre class="programlisting">public class <b class="emphasis-bold">ServerCloneException</b> extends CloneNotSupportedException {
// Public Constructors
    public <b class="emphasis-bold">ServerCloneException</b>(String desc)
    public <b class="emphasis-bold">ServerCloneException</b>(String desc, Exception nestedExc);
// Public Instance Variables
    public Exception <b class="emphasis-bold">detail</b>;
// Public Instance Methods
    public String <b class="emphasis-bold">getMessage</b>();
}</pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1540"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.ServerNotActiveException</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>This exception is thrown if the <tt class="literal">getClientHost()</tt>
method is called on a <tt class="literal">RemoteServer</tt> when the
server isn't handling a remote method call.
</p>

<blockquote>
<pre class="programlisting">public class <b class="emphasis-bold">ServerNotActiveException</b> extends java.lang.Exception {
// Public Constructors
    public <b class="emphasis-bold">ServerNotActiveException</b>();
    public <b class="emphasis-bold">ServerNotActiveException</b>(String desc);
}</pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1541"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.ServerRef</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>This is an interface to the server-side implementation of a remote
object. The <tt class="literal">getClientHost()</tt> method returns the
name of the host whose remote method call is currently being serviced
by the object implementation. If the server object is not servicing a
remote method call when <tt class="literal">getClientHost()</tt> is
called, then a <tt class="literal">ServerNotActiveException</tt> is
thrown. The <tt class="literal">exportObject()</tt> method is meant to
either create or find a client stub for the given object
implementation, using the data provided.
<a name="INDEX-1543"></a>
</p>

<blockquote>
<pre class="programlisting">public interface <b class="emphasis-bold">ServerRef</b> extends RemoteRef {
    public RemoteStub <b class="emphasis-bold">exportObject</b>(Remote obj, Object data)
                      throws RemoteException;
    public String getClientHost() throws ServerNotActiveException;
}</pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1542"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.Skeleton</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>A <tt class="literal">Skeleton</tt> object lives with a server-side
object implementation, dispatching method calls to the remote object
implementation. Server implementations generated by the
<em class="emphasis">rmic</em> compiler use skeletons.
</p>

<p>The
<tt class="literal">dispatch()</tt><a name="INDEX-1545"></a>
method invokes the method specified by the operation number
<tt class="literal">opnum</tt> on the object implementation
<tt class="literal">obj</tt>. It unmarshals the method arguments from the
input stream obtained from the <tt class="literal">RemoteCall</tt>
argument, passes them to the appropriate method on the
<tt class="literal">Remote</tt> object, marshals the results (if any),
and returns them to the caller using the output stream on the
<tt class="literal">RemoteCall</tt>. The
<tt class="literal">getOperations()</tt><a name="INDEX-1546"></a>
method returns an array of <tt class="literal">Operation</tt> objects,
which represent the methods available on the remote object.
<a name="INDEX-1547"></a>
</p>

<blockquote>
<pre class="programlisting">public interface <b class="emphasis-bold">Skeleton</b> {
    public void <b class="emphasis-bold">dispatch</b>(Remote obj, RemoteCall theCall,
                         int opnum, long hash) 
                throws Exception;
    public Operation[] getOperations();
} </pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1544"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.SkeletonMismatchException</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>This <tt class="literal">RemoteException</tt> is thrown during a remote
method call if a mismatch is detected on the server between the hash
code of the client stub and the hash code of the server
implementation. It is usually received by the client wrapped in a
<tt class="literal">ServerException</tt>.
</p>

<blockquote>
<pre class="programlisting">public class <b class="emphasis-bold">SkeletonMismatchException</b> extends RemoteException {
// Public Constructors
    public <b class="emphasis-bold">SkeletonMismatchException</b>(String s);
}</pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1548"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.SkeletonNotFoundException</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>This <tt class="literal">RemoteException</tt> is thrown during the export
of a remote object, if the corresponding skeleton class for the
object either can't be found or can't be loaded.
</p>

<blockquote>
<pre class="programlisting">public class <b class="emphasis-bold">SkeletonNotFoundException</b> extends RemoteException {
// Public Constructors
    public <b class="emphasis-bold">SkeletonNotFoundException</b>(String desc);
    public <b class="emphasis-bold">SkeletonNotFoundException</b>(String desc, Exception nestedEx);
}</pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1549"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.SocketSecurityException</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>This exception is a subclass of <tt class="literal">ExportException</tt>
that is thrown if a socket security violation is encountered while
attempting to export a remote object. An example would be an attempt
to export an object on an illegal port.
</p>

<blockquote>
<pre class="programlisting">public class SocketSecurityException extends ExportException {
    public SocketSecurityException(String s);
    public SocketSecurityException(String s, Exception ex);
}</pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1550"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.UID</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>A <tt class="literal">UID</tt> is an identifier that is unique with
respect to a particular host. <tt class="literal">UID</tt>s are used
internally by RMIs distributed garbage collector, and are generally
not dealt with directly in application code.
<a name="INDEX-1552"></a><a name="INDEX-1553"></a><a name="INDEX-1554"></a><a name="INDEX-1555"></a><a name="INDEX-1556"></a>
</p>

<blockquote>
<pre class="programlisting">public final class <b class="emphasis-bold">UID</b> implements java.io.Serializable {
// Public Constructors
    public <b class="emphasis-bold">UID</b>();
    public <b class="emphasis-bold">UID</b>(short num);
// Class Methods
    public static UID read(DataInput in) throws java.io.IOException;
// Public Instance Methods
    public boolean equals(Object obj);
    public int hashCode();
    public String toString();
    public void write(DataOutput out) throws java.io.IOException;
} </pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1551"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.UnicastRemoteObject</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>This class represents a nonreplicated remote object: one that lives
as a singular implementation on a server with point-to-point
connections to each client. through reference stubs. This remote
server class does not implement persistence, so client references to
the object are only valid during the lifetime of the object. This is
the only concrete subclass of <tt class="literal">RemoteServer</tt>
offered in the standard JDK 1.1 distribution.
</p>

<blockquote>
<pre class="programlisting">public class <b class="emphasis-bold">UnicastRemoteObject</b> extends RemoteServer {
// Protected Constructors
    protected <b class="emphasis-bold">UnicastRemoteObject</b>() throws RemoteException;
// Class Methods
    public static RemoteStub <b class="emphasis-bold">exportObject</b>(Remote obj)
                             throws RemoteException;
// Public Instance Methods
    public Object <b class="emphasis-bold">clone</b>() throws CloneNotSupportedException;
}</pre>
</blockquote>

</table>
</div>
</div>
<a name="INDEX-1557"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>java.rmi.server.Unreferenced</b></font></td><td align="right"><font size="+1"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b></b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>



<div class="refsynopsisdiv">
<table border="0">
<p>Appropriately enough, the last interface in this reference is the
<tt class="literal">Unreferenced</tt> interface. If a server object
implements this interface, then the
<tt class="literal">unreferenced()</tt> method is called by the RMI
runtime when the last client reference to a remote object is dropped.
A remote object shouldn't be garbage collected until all of its
remote and local references are gone. So the
<tt class="literal">unreferenced()</tt><a name="INDEX-1559"></a> method
isn't a trigger for an object to be finalized, but rather a
chance for the remote object to respond appropriately when its client
reference count goes to zero. The unreferenced object could, for
example, start a timer countdown to move the object to persistent
storage after a given idle time.
<a name="INDEX-1560"></a><a name="INDEX-1561"></a><a name="INDEX-1562"></a><a name="INDEX-1563"></a>
</p>

<blockquote>
<pre class="programlisting">public interface Unreferenced {
// Public Instance Methods
    public void unreferenced();} </pre>
</blockquote>
</table>
</div>
</div>
<a name="INDEX-1558"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appd_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/appd_02.htm">
<img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td>

<td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm">
<img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td>

<td align="right" valign="top" width="172"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm">
<img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</td>
</tr>
<tr>
<td align="left" valign="top" width="172">D.2. The java.rmi.registry Package</td>

<td align="center" valign="top" width="171">
<a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td>

<td align="right" valign="top" width="172">Index</td>

</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
