<html>
<head>
<title>Choosing a Cryptographic Algorithm (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Choosing a Cryptographic Algorithm">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_01.htm">Chapter 5: Security</a></td><td align="right" valign="top" width="172"><a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">5.7. Choosing a Cryptographic Algorithm</h2>

<p>
<a name="INDEX-777"></a><a name="INDEX-778"></a>Throughout this chapter
we've shown how objects from the Java Security API, such as
<tt class="literal">KeyPairGenerator</tt>s and
<tt class="literal">Cipher</tt>s, can be created by specifying a
particular cryptographic algorithm for the implementation of the
object. We haven't yet discussed the issues involved in picking
one algorithm over another.
</p>

<a name="JDP-CH-5-SECT-7.1"></a>
<h3 class="sect2">5.7.1. Features of Cryptographic Algorithms</h3>

<p>Cryptography includes a broad range of techniques under its umbrella.
Some of the characteristics that distinguish one technique from
another follow.
</p>

<a name="JDP-CH-5-SECT-7.1.1"></a>
<h3 class="sect3">5.7.1.1. Level of protection</h3>

<p>Some encryption techniques provide a virtually unbreakable barrier to
information theft; others just require a determined attacker with
moderate resources to be broken. One way to compare techniques on
this level is to estimate how much CPU time would be required on a
machine of a given processing speed to iterate through all the
possible keys to the encoded data. For example, "A 128-bit XYZ
cryptographic key requires 14.5 months of CPU time on an Acme
24-processor server to be broken." But other issues can affect
the level of effort required to break the encrypted data, and make it
difficult to objectively compare the security of encryption
techniques. For example, if the attacker is not familiar with the
format of the data being transmitted, and the data isn't easily
interpreted on its own, then it may be tough to tell if an attempt to
decode the data has worked or not.
</p>



<a name="JDP-CH-5-SECT-7.1.2"></a>
<h3 class="sect3">5.7.1.2. Sophistication and complexity</h3>

<p>
<a name="INDEX-779"></a><a name="INDEX-780"></a>Encryption techniques
are usually based upon the mathematical properties of numbers and
digital information. The mathematical theories employed in creating
encryption techniques vary in their complexity and sophistication;
some require poring over many pages of mathematics and statistics
journals to be fully understood, while others can be explained using
basic concepts of algebra. The resources required to implement and to
break a given encryption technique are usually a direct function of
its complexity. All other issues being equal, a more complex
encryption scheme is normally more expensive to implement, but is
also more expensive to break. As an application developer,
you'll typically need to trade off efficiency against security.
If high throughput is a requirement for your application, you may be
willing to use a less complex, and less secure, cryptographic
algorithm if it imposes significantly less overhead on your agents.
</p>



<a name="JDP-CH-5-SECT-7.1.3"></a>
<h3 class="sect3">5.7.1.3. One-, two-, and many-way cryptography</h3>

<p>Depending on the nature of your distributed application, there may be
situations in which many parties need to be individually or mutually
authenticated by one agent. A secure chat room or whiteboard system,
for example, may require mutual authentication by all participating
parties. Most authentication schemes directly support
<a name="INDEX-781"></a><a name="INDEX-782"></a><a name="INDEX-783"></a><a name="INDEX-784"></a> one- or two-way agent
authentication. Few, if any, have any concept of multi-way
authenticated communications. Instead, the developer must maintain a
set of two-way-authenticated channels at each agent site. One way to
deal with multi-way authentication is to define a group of
individuals as a group identity with a single key pair and set of
certificates. Every person in this group needs to prove ownership by
providing a digital signature verifying that they have access to the
group's private key, and some kind of certification of their
keys. The viability of this approach really lies in the policies of
the certification authority being used. If they agree to certify
groups, and have defined a policy for verifying membership in certain
groups, then most cryptographic algorithms will support a key pair or
certificate associated with a named group rather than a named
individual.
</p>



<a name="JDP-CH-5-SECT-7.1.4"></a>
<h3 class="sect3">5.7.1.4. Design issues</h3>

<p>As we've already mentioned, modern cryptography involves the
use of keys for data signing, encoding, and decoding. Some require
the secure distribution of private keys between parties, while others
allow the parties to use public keys that can be broadcast openly. In
our <tt class="literal">SecureAgent</tt> example, we used an encoding
scheme that required the use of secret keys.
</p>

<p>Other design issues involve the low-level implementation details of
the algorithm. If we're building an agent to be used in an
applet context, then we'd like the implementation of an
cryptographic algorithm to be done completely in Java without any
native method calls, so that we don't have to distribute native
libraries to every agent that will talk to our agent.
</p>

<p>Another issue that may seem obvious is the level of standardization
of a cryptographic algorithm. If an algorithm is standardized, or at
least widely used, then there is a better chance that we can use our
security-enabled agents with other people's agents without
modifying them.
</p>



<a name="JDP-CH-5-SECT-7.1.5"></a>
<h3 class="sect3">5.7.1.5. Financial and legal issues</h3>

<p>
<a name="INDEX-785"></a><a name="INDEX-786"></a><a name="INDEX-787"></a>An issue of a different sort is
the expense of using a cryptographic algorithm. Some of the more
sophisticated techniques are patented, and require payment of license
fees to be used. Others are simply too involved to be implemented by
the average developer, and software implementations can be sold for
high prices by those who do have the resources to develop
them.<a href="#FOOTNOTE-2">[2]</a>
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-2"></a>
<p>[2]To give an idea of the kind of price tags being
put on high-caliber encryption packages, one set of Java encryption
classes was listed at a cost of $25,000 for a limited-use license.
Depending on the expected usage of the package, the price tag climbs
as high as $100,000.</p> </blockquote>

<p>There are also legal and political restrictions to worry about. The
United States, for example, has specific restrictions on the types of
encryption that can be implemented for export to foreign countries.
Currently, there are two separate versions of the Netscape browser:
one for international use, and one for use only within the United
States. The latter includes a more sophisticated version of the RSA
encryption technology, whose export is restricted by the U.S. federal
government. <a name="INDEX-788"></a><a name="INDEX-789"></a><a name="INDEX-790"></a>
</p>



<a name="JDP-CH-5-SECT-7.2"></a>
<h3 class="sect2">5.7.2. Available Algorithms</h3>

<p>
<a name="INDEX-791"></a>There are numerous cryptographic
algorithms for data encryption, and a similar number of certification
and authentication techniques. Several umbrella security protocols
and standards have been developed that incorporate both encryption
and authentication facilities. Among them are Netscape's Secure
Socket Layer (at the time of this writing, SSL 3.0 is an IETF
Internet Draft), the Pretty Good Privacy (PGP) package developed
originally by Phil Zimmermann, and the Public Key Cryptography
Standard (PKCS) from RSA Laboratories. S-HTTP is a security protocol
designed specifically around the HTTP protocol, which differentiates
it from these other, more general protocols. The chief motivation
behind the development of these packages is to make encryption and
authentication technologies easily accessible to developers, and to
provide a common protocol for security-enabled applications to
interact freely.
</p>

<a name="JDP-CH-5-SECT-7.2.1"></a>
<h3 class="sect3">5.7.2.1. Encryption techniques</h3>

<p>
<a name="INDEX-792"></a>We've already discussed
some of the differences between public key encryption and secret key
techniques. Some commonly used secret key encryption algorithms are
the Data Encryption Standard (DES), and the International Data
Encryption Algorithm (IDEA).
</p>

<p>Some common forms of public key encryption in use today are
<a name="INDEX-793"></a><a name="INDEX-794"></a>Diffie-Hellman, derived from the
original paper describing public key systems; <a name="INDEX-795"></a><a name="INDEX-796"></a><a name="INDEX-797"></a>RSA, licensed by RSA Laboratories;
and the <a name="INDEX-798"></a><a name="INDEX-799"></a><a name="INDEX-800"></a><a name="INDEX-801"></a>Digital
Signature Algorithm (DSA), developed by the National Institute of
Standards and Technology (NIST). Diffie-Hellman uses an encryption
algorithm based on factoring prime numbers, while DSA is based on an
algorithm involving discrete logarithms. These two algorithms are
believed by many cryptographers to be comparably hard to crack. RSA
is based upon a combination of their own public key encryption scheme
with other secret key algorithms, such as DES block
ciphers.<a name="INDEX-802"></a>
</p>



<a name="JDP-CH-5-SECT-7.2.2"></a>
<h3 class="sect3">5.7.2.2. Certificates and authentication techniques</h3>

<p>
<a name="INDEX-803"></a><a name="INDEX-804"></a>As we've
already seen, certification and authentication schemes are typically
founded on an existing public key encryption technique. The RSA
public key cryptography system, for example, can be used in
combination with a hashing technique to implement an authentication
scheme. One party "signs" a message by running it through
a known hashing algorithm, and then encrypts the hashed message with
their private key to generate a digital signature. The signature is
then sent along with the original message to the other party. The
receiving party can then decrypt the signature using the
sender's public key, and hash the clear message using the same
hashing algorithm used to generate the signature. If the hashed
message is equal to the decrypted signature, then the receiving party
can assume that the sender is the person that owns the public key. In
order to impersonate some other party, we would have to know their
private key. Otherwise, we wouldn't be able to generate both a
clear message and an encrypted, hashed version of the message that
check out against each other.<a name="INDEX-805"></a><a name="INDEX-806"></a><a name="INDEX-807"></a>
</p>

<p>All authentication systems use certificates, which minimally contain
an identifier for a party and the party's public key. The most
commonly used standard format for digital certificates is the ITU
<a name="INDEX-808"></a>X.509 standard certificate format. SSL,
PKCS, and S-HTTP all offer X.509-compliant certification methods
within their protocols. RSA can also be used in conjunction with
X.509 certificates. Many cryptographic systems, however, resort to
nonstandard certificate formats based on their own binary formatting
schemes, where a public key, an identifier, and several other
parameters, such as expiration times and serial numbers, are
serialized and encrypted before being transmitted.
</p>

<p>In most cases, the power of a certificate to authenticate a party
rests on the
<a name="INDEX-809"></a><a name="INDEX-810"></a> certifying
authority (CA) that issues and vouches for the certificate. VeriSign,
BBN, and even the United States Postal Service offer CA services.
Certificate authorities usually provide several levels of
certification and require various types of proof of identity. In some
cases an email verification is sufficient; other certificates require
verification by a notary public before being issued. A certificate
issued from a CA must be installed somehow on your host computer in
order to be properly broadcast by your network applications when
secure transmissions are attempted. The Netscape browser, for
example, will use your personal certificate to establish secure HTTP
connections when a remote HTTP server requests it.<a name="INDEX-811"></a>
</p>



<a name="JDP-CH-5-SECT-7.3"></a>
<h3 class="sect2">5.7.3. General Security Protocols</h3>

<p>
<a name="INDEX-812"></a>We've already mentioned
some of the more common general security protocols in use today.
Support for them in the Java environment is becoming more broadly
available, but implementation of the cryptographic algorithms
underlying these protocols is a complex task that typically requires
the backing of a software development company. If public-domain or
shareware versions of these protocols do become available they will
undoubtedly be few and far between.
</p>

<a name="JDP-CH-5-SECT-7.3.1"></a>
<h3 class="sect3">5.7.3.1. Secure Socket Layer (SSL)</h3>

<p>The <a name="INDEX-813"></a><a name="INDEX-814"></a><a name="INDEX-815"></a><a name="INDEX-816"></a>Secure Socket Layer, originally put forth
by Netscape and now an Internet Draft of the IETF, defines a general
security protocol for private, authenticated communications. SSL is a
protocol that layers on top of a network transport protocol (such as
TCP/IP), but below application protocols (such as HTTP) or security
APIs (such as the Java Security API). The protocol allows agents to
choose from a suite of encryption algorithms and authentication
schemes, including DES ciphers and RSA cryptography.
</p>

<p>In addition to providing communications security with existing
cryptographic techniques, SSL also provides a means to extend the
protocol to include new encryption methods that may be developed. SSL
also provides a session caching facility, where key pairs associated
with a connection to a particular party can be retrieved and used to
reinstate secure connections in sessionless application protocols,
like HTTP.
</p>



<a name="JDP-CH-5-SECT-7.3.2"></a>
<h3 class="sect3">5.7.3.2. Pretty Good Privacy (PGP)</h3>

<p>
<a name="INDEX-817"></a><a name="INDEX-818"></a><a name="INDEX-819"></a><a name="INDEX-820"></a>PGP was originally developed by Phil
Zimmermann as an effort to get effective privacy and authentication
tools into the hands of the general technology community. There has
been a shroud of controversy surrounding PGP since its public release
by Zimmermann, involving United States export laws concerning
cryptographic technology. We won't discuss the sordid details
here, except to say that there are essentially two versions of PGP:
one for use within the United States and Canada, and another for
international use, which does not use certain implementations of RSA
encryption algorithms.
</p>

<p>In terms of the families of encryption algorithms that we discussed
in an earlier section, PGP is a hybrid technique that uses public key
methods to distribute private keys between agents. The reason for
this is efficiency: public key methods are computationally very
expensive, and can significantly reduce your data throughput if all
data is transmitted with public key encryption. PGP tries to
circumvent this by using RSA public key encryption to transmit a pair
of random private keys between the two parties securely. Once the
agents have each other's private keys, they can proceed to
encrypt their messages using faster, private key encryption. Messages
are encrypted using a block cipher called IDEA. Note that, while SSL
allows us to specify what kind of encryption we would like to use,
the encryption scheme used by PGP is fixed.
</p>

<p>
<a name="INDEX-821"></a>Authentication in PGP can be implemented
with digital signatures, using a method similar to that used by RSA
for authentication. An MD5 hashing function and RSA encryption is
used to generate the <a name="INDEX-822"></a><a name="INDEX-823"></a><a name="INDEX-824"></a> signature.<a name="INDEX-825"></a><a name="INDEX-826"></a><a name="INDEX-827"></a>
</p>





<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.6. Data Encryption</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">6. Message-Passing Systems</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
