<html>
<head>
<title>Features of Distributed Object Systems (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Features of Distributed Object Systems">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch03_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch03_01.htm">Chapter 3: Distributing Objects</a></td><td align="right" valign="top" width="172"><a href="ch03_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch03_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">3.3. Features of Distributed Object Systems</h2>

<p>
<a name="INDEX-303"></a>
From our exercise in the previous section, we uncovered some of the
features that distributed object systems need. These features, plus
some others, are illustrated in <a href="#JDP-CH-3-FIG-2">Figure 3-1</a>. An
<a name="INDEX-304"></a><a name="INDEX-305"></a><a name="INDEX-306"></a> object interface specification
is used to generate a server <em class="emphasis">implementation</em> of a
class of objects, an interface between the object implementation and
the object manager, sometimes called an object
<em class="emphasis">skeleton</em><a name="INDEX-307"></a><a name="INDEX-308"></a><a name="INDEX-309"></a><a name="INDEX-310"></a><a name="INDEX-311"></a><a name="INDEX-312"></a>, and a
<a name="INDEX-313"></a> client interface for the class of
objects, sometimes called an object <em class="emphasis">stub</em>. The
skeleton will be used by the server to create new instances of the
class of objects and to route remote method calls to the object
implementation. The stub will be used by the client to route
transactions (method invocations, mostly) to the object on the
server. On the server side, the class implementation is passed
through a <em class="emphasis">registration
service</em><a name="INDEX-314"></a><a name="INDEX-315"></a>, which registers the new class with
a <em class="emphasis">naming service</em> and an <em class="emphasis">object
manager</em>, and then stores the class in the server's
storage for object skeletons.
</p>

<a name="JDP-CH-3-FIG-2"></a>
<div class="figure">
<img alt="figure" src="figs/jdc_0301.gif" webstripperlinkwas="figs/jdc_0301.gif"></div>
<h4 class="objtitle">Figure 3-1. General architecture for distributed object systems</h4>

<p>With an object fully registered with a server, the client can now
request an instance of the class through the naming service. The
<a name="INDEX-316"></a> runtime transactions involved in
requesting and using a remote object are shown in <a href="#JDP-CH-3-FIG-3">Figure 3-2</a>. The naming service routes the client's
request to the server's object manager, which creates and
initializes the new object using the stored object skeleton. The new
object is stored in the server's object storage area, and an
object handle is issued back to the client in the form of an object
stub interface. This stub is used by the client to interact with the
remote object.
</p>

<a name="JDP-CH-3-FIG-3"></a>
<div class="figure">
<img alt="figure" src="figs/jdc_0302.gif" webstripperlinkwas="figs/jdc_0302.gif"></div>
<h4 class="objtitle">Figure 3-2. Remote object transactions at runtime</h4>

<p>While <a href="#JDP-CH-3-FIG-3">Figure 3-2</a> illustrates a client-server remote
object environment, a remote object scheme can typically be used in a
peer-to-peer manner as well. Any agent in the system can act as both
a server and a client of remote objects, with each maintaining its
own object manager, object skeleton storage, and object instance
storage. In some systems the naming service can be shared between
distributed agents, while in others each agent maintains its own
naming service.
</p>

<p>In the following sections we'll look at each element of this
general distributed object architecture in more detail.
</p>

<a name="JDP-CH-3-SECT-3.1"></a>
<h3 class="sect2">3.3.1. Object Interface Specification</h3>

<p>To provide a truly open system for distributing objects, the
distributed object system should allow the client to access objects
regardless of their implementation details, like hardware platform
and software language. It should also allow the object server to
implement an object in whatever way it needs to. Although in this
book we are talking about implementing systems in Java, you may have
valuable services already implemented in C, C++, or Smalltalk, and
these services might be expensive to reimplement in Java. In this
situation you'd like the option of wrapping your existing
services with object interfaces and using them directly via the
remote object system.
</p>

<p>
<a name="INDEX-317"></a>Some distributed object systems
provide a platform-independent means for specifying object
interfaces. These object interface descriptions can be converted into
server skeletons, which can be compiled and implemented in whatever
form the server requires. The same object interfaces can be used to
generate client-side stub interfaces. If we're dealing with a
Java-based distributed system, then the server skeletons and client
stubs will be generated as Java class definitions, which will then be
compiled into bytecodes.
</p>

<p>In CORBA, object interfaces are described using a
platform-independent language called the Interface Definition
Language (IDL). Other similar languages are the Interface
Specification Language (ISL) in Xerox's Inter-Language
Unification (ILU) system, and the Distributed Component Object Model
(DCOM, comprised of COM and an extended version of DCE-RPC) used in
Microsoft's DCOM system.<a name="INDEX-318"></a>
</p>


<a name="JDP-CH-3-SECT-3.2"></a>
<h3 class="sect2">3.3.2. Object Manager</h3>

<p>The <a name="INDEX-319"></a>
object manager is really at the heart of the distributed object
system, since it manages the object skeletons and object references
on an object server. The object manager plays a role similar to that
of an Object Request Broker (ORB) in a CORBA system, or the registry
service in RMI, both of which will be discussed in more detail
shortly. When a client asks for a new object, the object manager
locates the skeleton for the class of object requested, creates a new
object based on the skeleton, stores the new object in object
storage, and sends a reference to the object back to the client.
Remote method calls made by the client are routed through the manager
to the proper object on the server, and the manager also routes the
results back to the client. Finally, when the client is through with
the remote object, it can issue a request to the object manager to
destroy the object. The manager removes the object from the
server's storage and frees up any resources the object is
using.
</p>

<p>Some distributed object systems support things like <a name="INDEX-320"></a><a name="INDEX-321"></a><a name="INDEX-322"></a> dynamic object activation and
deactivation, and persistent objects. The object manager typically
handles these functions for the object server. In order to support
dynamic object activation and deactivation, the object manager needs
to have an activation and deactivation method registered for each
object implementation it manages. When a client requests activation
of a new instance of an interface, for example, the object manager
invokes the activation method for the implementation of the
interface, which should generate a new instance. A reference to the
new instance is returned to the client. A similar process is used for
deactivating objects. If an object is set to be persistent, then the
object manager needs a method for storing the object's state
when it is deactivated, and for restoring it the next time a client
asks for the object.
</p>

<p>Depending on the architecture of the distributed object system, the
object manager might be located on the host serving the objects, or
its functions might be distributed between the client and the server,
or it might reside completely on a third host, acting as a liaison
between the object client and the object server.<a name="INDEX-323"></a>
</p>


<a name="JDP-CH-3-SECT-3.3"></a>
<h3 class="sect2">3.3.3. Registration/Naming Service</h3>

<p>The <a name="INDEX-324"></a><a name="INDEX-325"></a><a name="INDEX-326"></a><a name="INDEX-327"></a> registration/naming service acts as
an intermediary between the object client and the object manager.
Once we have defined an interface to an object, an implementation of
the interface needs to be registered with the service so that it can
be addressed by clients. In order to create and use an object from a
remote host, a client needs a naming service so that it can specify
things like the type of object it needs, or the name of a particular
object if one already exists on the server. The naming service routes
these requests to the proper object server. Once the client has an
object reference, the naming service might also be used to route
method invocations to their targets.
</p>

<p>If the object manager also supports dynamic object activation and
persistent objects, then the naming service can also be used to
support these functions. If a client asks the service to activate a
new instance of a given interface, the naming service can route this
request to an object server that has an implementation of that
interface.<a name="INDEX-328"></a><a name="INDEX-329"></a><a name="INDEX-330"></a> And if an object manager has any
persistent objects under its control, the naming service can be
notified of this so that requests for the object can be routed
correctly.<a name="INDEX-331"></a><a name="INDEX-332"></a><a name="INDEX-333"></a><a name="INDEX-334"></a>
</p>


<a name="JDP-CH-3-SECT-3.4"></a>
<h3 class="sect2">3.3.4. Object Communication Protocol</h3>

<p>
<a name="INDEX-335"></a><a name="INDEX-336"></a><a name="INDEX-337"></a>In order for the client to interact
with the remote object, a general protocol for handling remote object
requests is needed. This protocol needs to support, at a minimum, a
means for transmitting and receiving object references, method
references, and data in the form of objects or basic data types.
Ideally we don't want the client application to need to know
any details about this protocol. It should simply interact with local
object interfaces, letting the object distribution scheme take care
of communicating with the remote object behind the scenes. This
minimizes the impact on the client application source code, and helps
you to be flexible about how clients access remote services.
</p>


<a name="JDP-CH-3-SECT-3.5"></a>
<h3 class="sect2">3.3.5. Development Tools</h3>

<p>
<a name="INDEX-338"></a><a name="INDEX-339"></a>Of course, we'll need to develop,
debug, and maintain the object interfaces, as well as the
language-specific implementations of these interfaces, which make up
our distributed object system. Object interface editors and project
managers, language cross-compilers, and symbolic debuggers are
essential tools. The fact that we are developing distributed systems
imposes further requirements on these tools, since we need a
reasonable method to monitor and diagnose object systems spread
across the network. Load simulation and testing tools become very
handy here as well, to verify that our server and the network can
handle the typical request frequencies and types we expect to see at
runtime.
</p>


<a name="JDP-CH-3-SECT-3.6"></a>
<h3 class="sect2">3.3.6. Security</h3>

<p>
<a name="INDEX-340"></a>As we have already mentioned, any
network interactions carry the potential need for security. In the
case of distributed object systems, agents making requests of the
object broker may need to be authenticated and authorized to access
elements of the object repository, and restricted from other areas
and objects. Transactions between agents and the remote objects they
are invoking may need to be encrypted to prevent eavesdropping.
Ideally, the object distribution scheme will include direct support
for these operations. For example, the client may want to
"tunnel" the object communication protocol through a
secure protocol layer, with public key encryption on either end of
the transmission.<a name="INDEX-341"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch03_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch03_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.2. What's So Tough About Distributing Objects?</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.4. Distributed Object Schemes for Java</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
