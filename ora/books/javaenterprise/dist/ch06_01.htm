<html>
<head>
<title>Message-Passing Systems (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Message-Passing Systems">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm">Java Distributed Computing</a></td><td align="right" valign="top" width="172"><a href="ch06_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 6.  Message-Passing Systems</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_01.htm">Messages Defined</a>
<br>
<a href="ch06_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_02.htm">Why Do We Need Messages?</a>
<br>
<a href="ch06_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_03.htm">Message Processing</a>
<br>
<a href="ch06_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_04.htm">Fixed Protocols</a>
<br>
<a href="ch06_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_05.htm">Adaptable Protocols</a>
<br>
<a href="ch06_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_06.htm">Message Passing with Java Events</a>
<br>
<a href="ch06_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_07.htm">Using Remote Objects</a>
<br>
</p>
</div>



<p>In this chapter we examine applications that use message-passing
schemes to distribute information between agents in a distributed
system. The first thing we'll do is define what we mean by
"message passing," then we'll look at some ways
that messages can be handled by a Java agent. We'll build two
versions of a message-passing system. The first is based on a
homegrown message-handling system, with <tt class="literal">Message</tt>
objects being transmitted over I/O streams between
<tt class="literal">MessageHand-ler</tt>s. Most of our discussion about
message passing will be based on these classes. Near the end of the
chapter, we'll look at a message-passing system based on the
delegation event model built into the JDK and used by the AWT
package. In this case, we'll be using
<tt class="literal">EventObject</tt>s as our messages, and leveraging the
model of event sources and listeners from the JDK to build a
message-handling framework.
</p>




<h2 class="sect1">6.1. Messages Defined</h2>

<p>
<a name="INDEX-828"></a>Before we start discussing message-passing
systems, we need to define what we mean by a
<em class="emphasis">message</em>. Essentially, a message is a structured
piece of information sent from one agent to another over a
communication channel. Some messages are requests made to one agent
by another, other messages deliver data or notification to another
agent. In most applications that we'll discuss, a message
consists of a message identifier and, if needed, a set of message
arguments. The message identifier tells the receiver the purpose or
type of the message. The arguments to the message contain additional
information that is interpreted based on the type of message. They
may contain the object of an action (e.g., the message
"<em class="emphasis">x</em><em class="emphasis">y</em>" means,
"Do <em class="emphasis">x</em> to <em class="emphasis">y</em> and return
the result"), or they may contain information used to carry out
a request (e.g., "<em class="emphasis">x a b c</em> " means,
"Do <em class="emphasis">x</em>, and use <em class="emphasis">a</em>,
<em class="emphasis">b</em>, and <em class="emphasis">c</em> to do it").
</p>

<p>
<a name="INDEX-829"></a><a name="INDEX-830"></a>Message identifiers are usually simple,
unique tokens that differentiate one type of message from another.
They may even be simple integer values, where the agents on either
end use a look-up table of some sort to match the value with its
meaning. Message arguments, on the other hand, can be of many types.
Some simple message protocols get away with using only basic data
types, like integers, strings, and floating-point values, for message
arguments. These arguments can be read and written directly using the
<tt class="literal">DataInputStream</tt> and
<tt class="literal">DataOutputStream</tt> classes. Other protocols need
to use more complicated data types and objects as message arguments.
These complex data types can be sent as an ordered sequence of simple
data types over a <tt class="literal">DataOutputStream</tt>. They can
also be transmitted as objects using the Java RMI object
serialization support, as discussed in <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch03_01.htm">Chapter 3, "Distributing Objects"</a>.
</p>

<p>In some very well defined and controlled application environments, a
message protocol may not need message identifiers at all. The
interactions between agents may be so strictly defined that
there's no need to specify the type of message being sent
because the receiver is already expecting it. Suppose, for example,
that we have two <a name="INDEX-831"></a> chess-playing agents talking to each
other. Assuming that they both always make valid moves and that they
both continue to play until checkmate results, the only kind of
message they need to exchange is one that contains the next move that
they want to make, with an optional argument that indicates if the
move results in a "check" or a "checkmate."
In this case, there's no need for message identifiers--the
messages can just contain the chess players' moves.<a name="INDEX-832"></a><a name="INDEX-833"></a>
</p>

<p>In a sense, every network standard and protocol we've discussed
so far can be boiled down to some form of message passing. HTTP, SSL,
even low-level network protocols like TCP/IP are protocols built
around some form of message passing. When we speak of message passing
in this chapter, however, we are talking about message passing that
is done explicitly by the application programmer. While these other
protocols are built around some kind of message-passing protocol,
that level of the protocol is hidden from the developer by an API of
some kind. For example, SSL is utilized by an application programmer
through a class library, where method calls on SSL-related objects
are automatically broken down into SSL-compliant messages. Likewise,
incoming SSL "messages" are processed and mapped into new
data objects and method calls on SSL objects. This is what makes
these complicated but powerful protocols so useful: the application
programmer doesn't need to know the details of the protocol at
the lower level. When we speak of message passing in this chapter,
we're referring to situations where the message
protocol--the generation and the processing of messages--is
defined and performed directly at the application level.<a name="INDEX-834"></a>
</p>
















<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch06_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.7. Choosing a Cryptographic Algorithm</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">6.2. Why Do We Need Messages?</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
