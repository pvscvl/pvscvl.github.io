<html>
<head>
<title>Introduction (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Introduction">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch00_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch00_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm">Java Distributed Computing</a></td><td align="right" valign="top" width="172"><a href="ch01_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch01_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h1 class="chapter">Chapter 1.  Introduction</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch01_01.htm">Anatomy of a Distributed Application</a>
<br>
<a href="ch01_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch01_02.htm">Requirements for Developing Distributed Applications</a>
<br>
<a href="ch01_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch01_03.htm">What Does Java Provide?</a>
<br>
</p>
</div>



<p>For the past decade, "distributed computing" has been one
of the biggest buzz phrases in the computer industry. At this point
in the information age, we know how to build networks; we use
thousands of engineering workstations and personal computers to do
our work, instead of huge behemoths in glass-walled rooms. Surely we
ought to be able to use our networks of smaller computers to work
together on larger tasks. And we do--an act as simple as reading
a web page requires the cooperation of two computers (a client and a
server) plus other computers that make sure the data gets from one
location to the other. However, simple browsing (i.e., a largely
one-way data exchange) isn't what we usually mean when we talk
about distributed computing. We usually mean something where
there's more interaction between the systems involved.
</p>

<p>
<a name="INDEX-10"></a>
You can think about distributed computing in terms of breaking down
an application into individual computing <em class="emphasis">agents</em>
that can be distributed on a network of computers, yet still work
together to do cooperative tasks. The motivations for distributing an
application this way are many. Here are a few of the more common
ones:
</p>

<ul>
<li>
<p>Computing things in parallel by breaking a problem into smaller
pieces enables you to solve larger problems without resorting to
larger computers. Instead, you can use smaller, cheaper,
easier-to-find computers.
</p>
</li>
<li>
<p>Large data sets are typically difficult to relocate, or easier to
control and administer located where they are, so users have to rely
on remote data servers to provide needed information.
</p>
</li>
<li>
<p>Redundant processing agents on multiple networked computers can be
used by systems that need fault tolerance. If a machine or agent
process goes down, the job can still carry on.
</p>
</li>
</ul>

<p>There are many other motivations, and plenty of subtle variations on
the ones listed here.
</p>

<p>Assorted tools and standards for assembling distributed computing
applications have been developed over the years. These started as
low-level data transmission APIs and protocols, such as RPC and DCE,
and have recently begun to evolve into object-based distribution
schemes, such as CORBA, RMI, and OpenDoc. These programming tools
essentially provide a protocol for transmitting structured data (and,
in some cases, actual runnable code) over a network connection. Java
offers a language and an environment that encompass various levels of
distributed computing development, from low-level network
communication to distributed objects and agents, while also having
built-in support for secure applications, multiple threads of
control, and integration with other Internet-based protocols and
services.
</p>

<p>This chapter gives an introduction to distributed application
development, and how Java can be used as a tool towards this end. In
the following chapters, we'll start by reviewing some essential
background material on network programming, threads, and security.
Then we'll move into a series of chapters that explore
different distributed problems in detail. Where appropriate,
we'll use RMI, CORBA, or a homegrown protocol to implement
examples. If you are developing distributed applications, you need to
be familiar with all possible solutions and where they're
appropriate; so where we choose a particular tool, we'll try to
discuss how things would be better or worse if you chose a different
set of tools in building something similar.
</p>




<h2 class="sect1">1.1. Anatomy of a Distributed Application</h2>

<p>A <a name="INDEX-11"></a><a name="INDEX-12"></a> distributed application is built upon
several layers. At the lowest level, a network connects a group of
host computers together so that they can talk to each other. Network
protocols like TCP/IP let the computers send data to each other over
the network by providing the ability to package and address data for
delivery to another machine. Higher-level services can be defined on
top of the network protocol, such as directory services and security
protocols. Finally, the distributed application itself runs on top of
these layers, using the mid-level services and network protocols as
well as the computer operating systems to perform coordinated tasks
across the network.
</p>

<p>At the application level, a distributed application can be broken
down into the following parts:
</p>

<dl>
<dt>
<b><em class="emphasis">Processes</em></b>
</dt>
<dd>
<p>
<a name="INDEX-13"></a>A
typical computer operating system on a computer host can run several
processes at once. A process is created by describing a sequence of
steps in a programming language, compiling the program into an
executable form, and running the executable in the operating system.
While it's running, a process has access to the resources of
the computer (such as CPU time and I/O devices) through the operating
system. A process can be completely devoted to a particular
application, or several applications can use a single process to
perform tasks.<a name="INDEX-14"></a>
</p>
</dd>

<dt>
<b><em class="emphasis">Threads</em></b>
</dt>
<dd>
<p>Every process has at least one
<a name="INDEX-15"></a><a name="INDEX-16"></a>
thread of control. Some operating systems support the creation of
multiple threads of control within a single process. Each thread in a
process can run independently from the other threads, although there
is usually some synchronization between them. One thread might
monitor input from a socket connection, for example, while another
might listen for user events (keystrokes, mouse movements, etc.) and
provide feedback to the user through output devices (monitor,
speakers, etc.). At some point, input from the input stream may
require feedback from the user. At this point, the two threads will
need to coordinate the transfer of input data to the user's
attention.
</p>
</dd>

<dt>
<b><em class="emphasis">Objects</em></b>
</dt>
<dd>
<p>Programs written in object-oriented languages are made up of
cooperating objects. One simple definition of an object is a group of
related data, with methods available for querying or altering the
data (<tt class="literal">getName()</tt>,
<tt class="literal">set-Name()</tt>), or for taking some action based on
the data (<tt class="literal">sendName(Out-putStream</tt><tt class="literal">o)</tt>). A process can be made up of one or more
objects, and these objects can be accessed by one or more threads
within the process. And with the introduction of distributed object
technology like RMI and CORBA, an object can also be logically spread
across multiple processes, on multiple computers.
</p>
</dd>

<dt>
<b><em class="emphasis">Agents</em></b>
</dt>
<dd>
<p>For the sake of this book, we will use the term "agent"
as a general way to refer to significant functional elements of a
distributed application.<a href="#FOOTNOTE-1">[1]</a> While a process, a thread, and an object
are pretty well-defined entities, an agent (at least the definition
we'll use for the sake of this book) is a higher-level system
component, defined around a particular function, or utility, or role
in the overall system. A remote banking application, for example,
might be broken down into a customer agent, a transaction agent and
an information brokerage agent. Agents can be distributed across
multiple processes, and can be made up of multiple objects and
threads in these processes. Our customer agent might be made up of an
object in a process running on a client desktop that's
listening for data and updating the local display, along with an
object in a process running on the bank server, issuing queries and
sending the data back to the client. There are two objects running in
distinct processes on separate machines, but together we can consider
them to make up one customer agent, with client-side elements and
server-side elements.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1]The term "agent"
is overused in the technology community. In the more formal sense of
the word, an agent is a computing entity that is a bit more
intelligent and autonomous than an object. An agent is supposed to be
capable of having goals that it needs to accomplish, such as
retrieving information of a certain type from a large database or
remote data sources. Some agents can monitor their progress towards
achieving their goals at a higher level than just successful
execution of methods, like an object. The definition of agent that
we're using here is a lot less formal than this, and a bit more
general.</p> </blockquote>
</dd>

</dl>

<p>So a distributed application can be thought of as a coordinated group
of agents working to accomplish some goal. Each of these agents can
be distributed across multiple processes on remote hosts, and can
consist of multiple objects or threads of control. Agents can also
belong to more than one application at once. You may be developing an
automated teller machine application, for example, which consists of
an account database server, with customer request agents distributed
across the network submitting requests. The account server agent and
the customer request agents are agents within the ATM application,
but they might also serve agents residing at the financial
institution's headquarters, as part of an administrative
application.<a name="INDEX-17"></a>
</p>








<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch00_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch00_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch01_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch01_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">0.5. Acknowledgments</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">1.2. Requirements for Developing Distributed Applications</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
