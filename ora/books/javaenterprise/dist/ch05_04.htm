<html>
<head>
<title>Keys: Public, Private, and Secret (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Keys: Public, Private, and Secret">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_01.htm">Chapter 5: Security</a></td><td align="right" valign="top" width="172"><a href="ch05_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">5.4. Keys: Public, Private, and Secret</h2>

<p>
<a name="INDEX-649"></a><a name="INDEX-650"></a>
The Java Security API makes heavy use of both secret key and public
key cryptography. The basics of creating and managing keys are
provided by the <tt class="literal">Key</tt> interface and the
<tt class="literal">KeyPair</tt>, <tt class="literal">KeyGenerator</tt>, and
<tt class="literal">KeyPairGenerator</tt> classes in the
<tt class="literal">java.security</tt> package.
</p>

<p>Before we delve into how keys are supported in the Security API,
it's important to understand the basics of public key
cryptography algorithms, and the differences between them and the
more well known secret key algorithms. Most of the features in the
Java Security API, and most modern security APIs in general, support
both secret key and public key algorithms. Readers that are already
familiar with the concept of public key cryptography can skip over
the next few sections.
</p>

<a name="JDP-CH-5-SECT-4.1"></a>
<h3 class="sect2">5.4.1. Secret Keys</h3>

<p>
<a name="INDEX-651"></a><a name="INDEX-652"></a>
Early cryptographic systems used secret key methods for encoding
private data. Secret key cryptography depends on the use of private
keys for authentication and encryption. Two parties have to exchange
secret keys with each other over some private, secure communications
channel, and these keys are used to encode and decode messages. Each
party has to have the other party's secret key in order to
decode their messages. If attackers manage to steal or intercept a
secret key, then they can listen in on communications or even
impersonate one of the parties by sending encrypted messages using
the stolen secret key.
</p>

<p>Secret key cryptography has the advantage of simplicity. Algorithms
for implementing secret key schemes are generally simpler and faster
than the more complicated public key schemes. But there are some
obvious problems with secret key cryptography. The basis for the
security of the system is the secret key itself, but the secret key
must be given to any agent that needs to communicate securely with
you. This opens up the possibility of keys being stolen in transit,
and finding a separate, secure way to transmit secret keys may be
inconvenient, expensive, or just impossible.
</p>


<a name="JDP-CH-5-SECT-4.2"></a>
<h3 class="sect2">5.4.2. Public Key Methods</h3>

<p>
<a name="INDEX-653"></a><a name="INDEX-654"></a><a name="INDEX-655"></a><a name="INDEX-656"></a>In 1976,
<a name="INDEX-657"></a><a name="INDEX-658"></a>Diffie and Hellman published a
paper describing a means for two parties to share cryptographic keys
over a public communications channel without compromising the
security of their private transmissions.<a href="#FOOTNOTE-1">[1]</a> Essentially, the technique involves the use of two keys
by each party, a
<em class="emphasis">private</em><a name="INDEX-659"></a><a name="INDEX-660"></a> key and a <em class="emphasis">public</em>
key. A message encrypted with one party's public key can only
be decrypted with that party's private key. At the start of a
conversation, two parties independently choose random private keys,
which they keep to themselves. Then they
<a name="INDEX-661"></a> generate a
public key that is based on their private key. This public key can be
freely shared with anyone, and can be used to encrypt messages to the
party that owns the corresponding private key. Having the public key
doesn't do an information thief any good, since it can't
be used on its own to decrypt messages--you have to have the
corresponding private key to do that. Public key encryption
techniques are sometimes called
<em class="emphasis">asymmetric</em><a name="INDEX-662"></a><a name="INDEX-663"></a> techniques, since a different
process and key are used for encrypting messages than for decrypting
messages.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1]Diffie &amp;
Hellman, "New Directions in Cryptography," IEEE
Transactions on Information Theory IT-22, November 1976.</p>
</blockquote>

<p>
<a name="INDEX-664"></a><a name="INDEX-665"></a>The original form of public key
cryptography described by Diffie and Hellman was vulnerable to the
host-spoofing attack we described earlier, where a third party
impersonates one or both of the communicating parties in order to
steal the information being transmitted. Since public keys are
transmitted as clear data, if a third party were to insert itself
between the two agents on the network, it could intercept the public
keys from each agent, and replace them with its own public key or
keys. The two parties would then encrypt messages using the hostile
party's keys. The hostile party could intercept these messages,
decrypt them with its private keys, and re-encrypt them using the
original intercepted public keys. This information theft could go on
indefinitely, since the two parties wouldn't have any sign that
a third party had injected itself into their conversation (except
maybe some additional latency). To close this security hole, the
concept of <em class="emphasis">public key certificates
</em><a name="INDEX-666"></a><a name="INDEX-667"></a> was developed, to allow each
party to verify the correspondence of a public key with a particular
person or organization. A certificate contains some person's
name and public key, and has been encrypted by the private key of a
certification authority. The <a name="INDEX-668"></a><a name="INDEX-669"></a> certification authority is
an organization responsible for verifying the person's
identity; it has made its public key widely available, so it can be
used to decrypt the certificates it issues. When starting a network
session, each party sends its certificate. When the certificate is
received, the certifying authority's public key can be used to
check the certificate for authenticity. If it checks out, then we can
be assured that the public key for the other party is authentic. So a
third party can't impersonate another by issuing a false public
key, since they don't have a certificate matching the fake
public key to the person they're trying to impersonate.
</p>

<p>Public key cryptography, when it's extended to include
certificates for authenticating the owner of public keys, is a
powerful way to authenticate agents and carry out secure
communications with them. And we can carry out secure communications
without the need for secondary, private channels for secret key
transmissions. The main disadvantage to public key methods is the
additional overhead involved in encoding and decoding information.
Since it relies on a more complex mathematical algorithm, secure
public key I/O involves using more CPU time per kilobyte of data
transferred and received.<a name="INDEX-670"></a><a name="INDEX-671"></a><a name="INDEX-672"></a><a name="INDEX-673"></a>
</p>


<a name="JDP-CH-5-SECT-4.3"></a>
<h3 class="sect2">5.4.3. Keys in the Java Security API</h3>

<p>The <tt class="literal">Key</tt><a name="INDEX-674"></a><a name="INDEX-675"></a> interface represents a
cryptographic key. The key could be a public or private key for
public key algorithms such as RSA, or it could be a secret key for
algorithms based on them, such as some block-cipher algorithms. A
<tt class="literal">Key</tt> has an algorithm associated with it, and the
name of the algorithm can be gotten using the
<tt class="literal">getAlgorithm()</tt><a name="INDEX-676"></a>
method. Key generation is algorithm-specific, and knowing the
algorithm used to generate a key can be important later. There are
<tt class="literal">PublicKey</tt><a name="INDEX-677"></a><a name="INDEX-678"></a> and
<tt class="literal">PrivateKey</tt> subclasses of
<tt class="literal">Key</tt> that represent the public and private
elements of a key pair, and there is also a
<tt class="literal">SecretKey</tt> subclass for secret keys. These
subclasses don't add any functionality to the
<tt class="literal">Key</tt> interface. They just provide a way to
distinguish one type of key from another.
</p>

<p>The <tt class="literal">KeyPair</tt><a name="INDEX-679"></a> class is a holder for a
<tt class="literal">PublicKey</tt> and its corresponding
<tt class="literal">PrivateKey</tt>. You can get the private and public
elements of the <tt class="literal">KeyPair</tt> using the
<tt class="literal">getPrivate()</tt><a name="INDEX-680"></a><a name="INDEX-681"></a> and
<tt class="literal">getPublic()</tt> methods.
</p>

<p>Key pairs are generated through the
<tt class="literal">KeyPairGenerator</tt><a name="INDEX-682"></a><a name="INDEX-683"></a>
class. A <tt class="literal">KeyPairGenerator</tt> instance is created
using the static <tt class="literal">getInstance()</tt> method, using an
algorithm name to specify what type of keys are needed:
</p>

<blockquote>
<pre class="programlisting">KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("RSA");</pre>
</blockquote>

<p>Every key-pair generator has a strength factor and a random number
generator parameter that can be changed using the
<tt class="literal">initialize()</tt><a name="INDEX-684"></a>
methods on <tt class="literal">KeyPairGenerator</tt> before generating
any keys:
</p>

<blockquote>
<pre class="programlisting">keyPairGen.initialize(1024, new SecureRandom());</pre>
</blockquote>

<p>The <tt class="literal">SecureRandom</tt><a name="INDEX-685"></a><a name="INDEX-686"></a><a name="INDEX-687"></a> class is a pseudo-random number
generator provided in the <tt class="literal">java.security</tt> package.
The strength and random-number generator parameters are interpreted
and used in algorithm-specific ways by the actual implementations of
the <tt class="literal">KeyPairGenerator</tt> class. You can also
initialize a key-pair generator with algorithm-specific parameters by
casting the generated <tt class="literal">KeyPairGenerator</tt> object to
its subtype, and calling specialized
<tt class="literal">initialize()</tt> methods for the subclass. For
example, we created a generator for the RSA algorithm, so we can cast
our <tt class="literal">KeyPairGenerator</tt> to an
<tt class="literal">RSAKeyPairGenerator</tt><a name="INDEX-688"></a> and call its initialize method, which
takes a strength parameter, a public exponent for the key generation,
and a random-number generator:
</p>

<blockquote>
<pre class="programlisting">RSAKeyPairGenerator rsaKeyPairGen = (RSAKeyPairGenerator)keyPairGen;
BigInteger myExp = ... // Create custom exponent
rsaPairKeyGen.initialize(1024, myExp, new SecureRandom());</pre>
</blockquote>

<p>You should only need to do this algorithm-specific initialization if
you have specific values for the algorithm parameters that are
required by your application. Implementations of the
<tt class="literal">KeyPairGenerator</tt> class will generally provide
default values for all of their algorithm parameters.
</p>

<p>Once the <tt class="literal">KeyPairGenerator</tt> is created and, if
necessary, initialized, then you create a new
<tt class="literal">KeyPair</tt> using the
<tt class="literal">generateKeyPair()</tt><a name="INDEX-689"></a>
method:
</p>

<blockquote>
<pre class="programlisting">KeyPair myKeyPair = keyPairGen.generateKeyPair();</pre>
</blockquote>

<p>
<tt class="literal"></tt><a name="INDEX-690"></a>Secret key algorithms require the use of
<tt class="literal">SecretKey</tt> objects instead of public/private
key-pairs. <tt class="literal">SecretKeys</tt> are generated using the
<tt class="literal">KeyGenerator</tt><a name="INDEX-691"></a> class. A
<tt class="literal">KeyGenerator</tt> is created for a particular
algorithm, using the static <tt class="literal">getInstance()</tt> method
on <tt class="literal">KeyGenerator</tt>:
</p>

<blockquote>
<pre class="programlisting">KeyGenerator keyGen = KeyGenerator.getInstance("DES");</pre>
</blockquote>

<p>The <tt class="literal">KeyGenerator</tt> can be initialized, if
necessary, with a random-number generator if the default one is not
sufficient:
</p>

<blockquote>
<pre class="programlisting">keyGen.initialize(new SecureRandom(mySeed));</pre>
</blockquote>

<p>Finally, a new <tt class="literal">SecretKey</tt> can be generated using
the
<tt class="literal">generateKey()</tt><a name="INDEX-692"></a>
method:
</p>

<blockquote>
<pre class="programlisting">SecretKey myKey = keyGen.generateKey();</pre>
</blockquote>

<p>The public, private, and secret keys generated this way can be used
to create digital signatures, create message digests, and encrypt
data, as described in the coming <a name="INDEX-693"></a><a name="INDEX-694"></a><a name="INDEX-695"></a> sections.<a name="INDEX-696"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.3. Identities and Access Control</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.5. Digital Signatures</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
