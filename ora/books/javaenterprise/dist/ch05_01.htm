<html>
<head>
<title>Security (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Security">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch04_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm">Java Distributed Computing</a></td><td align="right" valign="top" width="172"><a href="ch05_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 5.  Security</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_01.htm">Security Issues and Concerns</a>
<br>
<a href="ch05_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_02.htm">The java.security Package</a>
<br>
<a href="ch05_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_03.htm">Identities and Access Control</a>
<br>
<a href="ch05_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_04.htm">Keys: Public, Private, and Secret</a>
<br>
<a href="ch05_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_05.htm">Digital Signatures</a>
<br>
<a href="ch05_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_06.htm">Data Encryption</a>
<br>
<a href="ch05_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_07.htm">Choosing a Cryptographic Algorithm</a>
<br>
</p>
</div>



<p>Security becomes an issue as soon as you allow your computing
resources to come in contact with the rest of the world. With the
recent explosion in the use of networks, preserving the security of
data and the resources that carry data has become a primary concern.
An open communications port on any computing device almost always
carries the potential for abuse: a malicious party may steal or
damage sensitive information, network bandwidth, or any other
resource associated with your site. Security measures can increase
the effort needed for an intruder to gain access to these resources.
</p>

<p>In this chapter, we'll look at the Java Security API and how
you can use it to make the agents in your distributed application
safe from network hostility. We'll briefly discuss the kinds of
security concerns you should have as a distributed application
developer, and what tools are available in the Java environment for
addressing these issues. Some of the issues we'll discuss are
common across most applications, so the Java language developers have
provided integrated features in the runtime environment that attempt
to address them. An example of one of these features is the bytecode
verifier, which prevents some kinds of malicious code from running on
your machine. Other issues are only important in specific domains and
applications, and it's your duty to determine how important
these issues are to your particular application, what kinds of
measures need to be taken, and how much effort needs to be invested
in implementing these measures. For example, consider data theft from
communications links. Is your data valuable enough to protect with
data encryption, and if so, what level of encryption is appropriate,
given the value of the data and the level of effort you can expect
from those trying to steal it?
</p>

<p>The subject of security in networked environments is worthy of
several books' worth of material, and you can find many
readings on the subject. In this book, we will only have a
superficial discussion of the technical aspects of network security
and cryptography, with limited excursions into the details only where
it is necessary to support a solid understanding of the topic. From
this foundation, we can take an educated look at the security options
available to you in the Java Security API, and where you might find
them useful.
</p>

<p>The next section of this chapter discusses general security issues in
networked environments. If you're already familiar with this
topic, you can jump right to the later sections, which discuss the
design and use of cryptographic security measures through the Java
Security API.
</p>




<h2 class="sect1">5.1. Security Issues and Concerns</h2>

<p>
<a name="INDEX-581"></a><a name="INDEX-582"></a>Just about
everything making up a site on a computer network is a resource with
potential value. The most obvious resource you need to worry about is
information--the data being sent over the network and the
information residing on your host computers. Other resources that
could be targets are the applications on your hosts, the CPU
resources of your computers, even the bandwidth available on your
communications links. A hostile party may want to steal these
resources or do damage to them.
</p>

<p>Following are some of the things an attacker may do to steal or
destroy your resources:
</p>

<dl>
<dt>
<b>Eavesdrop on network communications</b>
</dt>
<dd>
<p>
<a name="INDEX-583"></a><a name="INDEX-584"></a>The hostile agent may physically tap into
network lines, or set up rogue programs on other hosts to watch for
interesting traffic. They may be trying to steal information, or
gather information that will help them steal or damage other
resources.
</p>
</dd>

<dt>
<b>Set up imposter agents or data sources</b>
</dt>
<dd>
<p>
<a name="INDEX-585"></a><a name="INDEX-586"></a>
This will let them fool you into sending valuable information or
giving access to resources they shouldn't have. Our
<tt class="literal">Solver</tt> servers could be accessed by intruders
acting as legitimate clients, and used to solve their numerical
problems; or a hostile party could flood the server with
<tt class="literal">ProblemSet</tt>s to be solved, rendering the server
useless to the legitimate users. Clients of the
<tt class="literal">Solver</tt> are also vulnerable, since a hostile
party could set up an imposter <tt class="literal">Solver</tt> meant to
steal the problem data submitted by clients, or they could purposely
generate erroneous results. If the attacker manages to figure out
that the clients are trying to solve for stress levels in a
finite-element model, for example, then the imposter server could be
set up to return results that indicate abnormally high or low stress
levels in critical sections of the model. This could cause someone to
design a bridge that will collapse, or that's too expensive to
build.
</p>
</dd>

<dt>
<b><em class="emphasis">Directly or indirectly intrude on your site</em></b>
</dt>
<dd>
<p>
<a name="INDEX-587"></a>Once attackers
have located your site, and maybe even stolen some information about
what's on the site, they may try to break in to your host and
steal or destroy resources directly. For example, attackers may try
to crack passwords so that they can log onto your system. A more
sophisticated approach is to take advantage of the class-loading and
distributed-object features of Java to inject hostile agents directly
into a remote host. For example, a client of the
<tt class="literal">RMISolver</tt> from <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch03_01.htm">Chapter 3, "Distributing Objects"</a>
downloads a stub class that it uses for remote method calls to the
server. A sophisticated attacker might try to create a
"synthetic" remote stub, one whose methods have been
modified to steal and transmit valuable information back to the
attacker, or to do damage to the remote host from the inside.
</p>
</dd>

</dl>

<p>This discussion leads us to the following list of general security
concerns for the distributed application developer:
</p>

<dl>
<dt>
<b><em class="emphasis">Verification of the identity of remote agents</em></b>
</dt>
<dd>
<p>
<a name="INDEX-588"></a><a name="INDEX-589"></a><a name="INDEX-590"></a>Any time you open a network
connection to a remote host, either directly, using the
<tt class="literal">java.net.Socket</tt> and
<tt class="literal">ServerSocket</tt> classes, or indirectly, using
higher-level operations like connecting to a remote object, you
should be concerned about whose agent you are really communicating
with, and on which host machine the agent actually resides.
</p>
</dd>

<dt>
<b><em class="emphasis">Ensuring that transmitted data is only received and understood by the intended recipient</em></b>
</dt>
<dd>
<p>If you assume that your network transmissions can be tapped into by a
hostile party, then you may need to take measures to ensure that only
the destination agent is able to interpret and reuse the information
you're sending.
</p>
</dd>

<dt>
<b><em class="emphasis">Verification of "visiting" agents for correctness and security holes</em></b>
</dt>
<dd>
<p>
<a name="INDEX-591"></a><a name="INDEX-592"></a><a name="INDEX-593"></a>Internet-based languages such as Java
have brought with them the common practice of allowing agents to
"visit" your local environment, either as distributed
objects or as applets embedded in an HTML page. So you need a means
for screening incoming agents for questionable behavior.
</p>
</dd>

<dt>
<b><em class="emphasis">Fortification of the local environment against damage</em></b>
</dt>
<dd>
<p>If your other security measures fail and a malicious agent manages to
gain access to your local Java runtime environment, you want to
minimize or prevent any damage the agent can cause.
</p>
</dd>

</dl>

<p>Luckily for us, the <a name="INDEX-594"></a>Java
language developers have decided that the last two issues mentioned
in the preceding list will be handled inherently by the Java language
and runtime. Verification of incoming Java objects is handled by the
runtime bytecode verifier. Any classes loaded over the network as
applets or distributed objects are checked for correct bytecode
syntax and for basic malicious operations. Some of these questionable
operations are attempts to manipulate memory addresses directly, or
to replace core system classes with network-loaded versions. On top
of this, the Java runtime puts restrictions on any loaded code,
depending on its source. Applets have minimal access to the local
system, for example, and any code has restricted access to classes
outside of its own package scope.<a name="INDEX-595"></a>
</p>

<p>If we assume that the Java language developers have done their job in
dealing with the last two issues, that leaves the first two for you
to worry about as an application developer. Verifying the identity of
a remote agent or the source of incoming data requires some kind of
<em class="emphasis">certification and authentication</em> process.
Keeping communications private on a semiprivate or public
communications link involves the use of <em class="emphasis">data
encryption</em>. Again, the Java language developers are
looking out for you. The Java Security API, introduced in the 1.1
version of the Java Developers' Kit (JDK&#153;), provides a
framework for integrating these security measures into your
applications.<a name="INDEX-596"></a>
</p>
















<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch04_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.4. Networked Threads</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.2. The java.security Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
