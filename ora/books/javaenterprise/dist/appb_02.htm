<html>
<head>
<title>Event Service (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Event Service">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appb_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/appb_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="appb_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/appb_01.htm">Appendix B: CORBA Services</a></td><td align="right" valign="top" width="172"><a href="appb_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/appb_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">B.2. Event Service</h2>

<p>The <a name="INDEX-1364"></a><a name="INDEX-1365"></a><a name="INDEX-1366"></a>Event Service
provides asynchronous communications between cooperating, remote
objects. It's most similar in nature to the message-passing and
event-based messaging we saw in <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_01.htm">Chapter 6, "Message-Passing Systems"</a>.
</p>

<p>The CORBA Event Service is based on a model involving
<em class="emphasis">suppliers</em> and <em class="emphasis">consumers</em> of
events, connected by <em class="emphasis">event channels</em> that carry
events back and forth between the two. An event channel can support
multiple event suppliers and multiple event consumers. The Event
Service also supports two event propagation styles for both consumers
and suppliers of events: <em class="emphasis">push</em> style and
<em class="emphasis">pull</em> style. A push-style consumer has events
pushed to it by its event suppliers, while a pull-style consumer
explicitly pulls events from its suppliers. On the other end of the
event channel, a push-style supplier pushes events to its consumers,
while a pull-style supplier waits for its consumers to pull events
from it. <a href="#appb-40168">Figure B-2</a> shows the relationship between
event suppliers, consumers, and channels. In the figure, arrows
indicate flow of events, and the location of the head of the arrow
indicates which entity drives the event transfer.
</p>

<a name="appb-40168"></a>
<div class="figure">
<img alt="figure" src="figs/jdc_ab02.gif" webstripperlinkwas="figs/jdc_ab02.gif"></div>
<h4 class="objtitle">Figure B-2. Propagation model in the Event Services</h4>

<p>Although the event channel provides a physical connection between
consumers and suppliers in the Event Service model, logically each
consumer attaches itself to one or more suppliers, and each supplier
attaches itself to one or more consumers. Each consumer and supplier
attaches itself to an event channel by attaching itself to a proxy
supplier or consumer that the event channel exports. An event channel
can be thought of as supporting both the supplier and consumer
interfaces, simultaneously.
</p>

<p>So here's the typical execution plan that an agent follows when
using the CORBA Event Service:
</p>

<ul>
<li>
<p>A reference to an event channel object is obtained, either using the
Naming Service to look up a remote event channel object reference, or
by invoking an operation on an existing remote object reference that
dynamically opens an event channel.
</p>
</li>
<li>
<p>If the agent has any event suppliers, they register themselves with
the event channel by attaching themselves to proxy consumers obtained
from the channel. Pull-style suppliers attach themselves to proxy
pull consumers created from the channel, and push-style suppliers
attach themselves to proxy push consumers created from the channel.
</p>
</li>
<li>
<p>If the agent has any event consumers, they register themselves with
the event channel in a similar way. Pull-style consumers attach
themselves to proxy pull suppliers and push-style consumers attach
themselves to proxy push suppliers.
</p>
</li>
<li>
<p>When suppliers on the agent's side of the channel generate
events, the events are carried through the event channel to any
consumers attached remotely to the channel. Push suppliers push their
events through the channel by calling
<tt class="literal">push()</tt><a name="INDEX-1367"></a> methods on the proxy
consumers obtained from the channel. Pull suppliers wait for their
proxy consumers to pull events from them through the channel.
</p>
</li>
<li>
<p>Consumers on the agent's side of the channel receive events
from remote suppliers attached to the channel. Pull-style consumers
pull events through the channel from their proxy suppliers by calling
<tt class="literal">pull()</tt><a name="INDEX-1368"></a> methods on them.
Push-style consumers wait for their proxy suppliers to give them
events received through the channel.
</p>
</li>
</ul>

<p>The consumers and suppliers attached to a channel don't know or
care about the type or implementation details of their counterparts
on the other end of the event channel. A push consumer might attach
itself to a channel with only a pull supplier on the other end; the
event channel is responsible for ensuring that events are pulled from
the supplier and pushed to the consumer, so that the flow of events
is maintained. The same is the case when a pull consumer is attached
to a push supplier--the event channel accepts the events pushed
to it by the supplier, and buffers them until the consumer pulls
them. Regardless of the types of suppliers and consumers attached to
an event channel at any given time, you should assume that event
delivery by the channel is asynchronous.
</p>

<p>The Event Service specification provides both generic and typed event
communication. In the generic case, the type of the event data is not
specified in the interfaces for the suppliers, consumers, or
channels. Event data is represented using the CORBA
<tt class="literal">any</tt> data type, and suppliers and consumers call
generic <tt class="literal">push()</tt> and <tt class="literal">pull()</tt>
methods on each other to propagate events through the distributed
system. In typed event communication, the interfaces for the
suppliers, consumers, and channels can include type-specific event
propagation methods and type-specific event representations. In this
appendix we'll only discuss the generic event communication
aspects of the Event
Service.
</p>

<a name="appb-2-fm2xml"></a>
<h3 class="sect2">B.2.1. Quality of Service for Channels</h3>

<p>
<a name="INDEX-1369"></a><a name="INDEX-1370"></a>Any given implementation
of the event channel interface can support a particular quality of
service. Some implementations may guarantee delivery of every event
to every consumer attached to the channel, while others may just
guarantee to make a best effort to deliver the events generated by
its suppliers. The Event Service specification leaves the
implementation open to these different levels of service to allow for
different application requirements. The trade-offs here are similar
to those found at a lower level, in choosing between TCP and UDP
packet delivery over IP network connections. Guaranteed event
delivery typically means reduced net throughput. Best-effort event
delivery can potentially provide higher event throughput, but at the
cost of potentially undelivered events, or events delivered to only
some of the consumers attached to the channel.
</p>


<a name="appb-3-fm2xml"></a>
<h3 class="sect2">B.2.2. Interface Specifics</h3>

<p>The Event Service includes several modules that provide IDL
interfaces for suppliers, consumers, and event channels. In this
appendix we'll briefly review the highlights of the interfaces
for generic event communication. If you're interested, see the
CORBA Services specification document.<a href="#FOOTNOTE-1">[1]</a>
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1]CORBA Services
Specification, OMG Technical Document formal/97-07-04, July
1997.</p> </blockquote>

<p>The <tt class="literal">CosEventComm</tt><a name="INDEX-1371"></a> module contains interface definitions
for push and pull consumers and suppliers of events:
</p>

<dl>
<dt>
<b><tt class="literal">PushSupplier</tt></b>
</dt>
<dd>
<p>The <tt class="literal">PushSupplier</tt><a name="INDEX-1372"></a> interface has only one method,
<tt class="literal">disconnect_push_supplier()</tt><a name="INDEX-1373"></a>
, which releases the supplier from its event communication link.
There's no exported method for getting events from the
supplier, since it's responsible for pushing events to its
attached consumer(s).<tt class="literal"></tt><a name="INDEX-1374"></a>
</p>
</dd>

<dt>
<b><tt class="literal">PushConsumer</tt></b>
</dt>
<dd>
<p>The <tt class="literal">PushConsumer</tt><a name="INDEX-PushConsumer"></a>  has a <tt class="literal">push()</tt>
method, which accepts a single input argument of type
<tt class="literal">any</tt> that represents the event data. The
<tt class="literal">any</tt> type is an IDL language feature used to mark
data that can be of any type. The receiver of the event is
responsible for determining the actual data type. The
<tt class="literal">PushConsumer</tt> also has a
<tt class="literal">disconnect_push_consumer()</tt> <a name="INDEX-disconnect_push_consumer"></a> method for releasing
it from the event communication channel.
</p>
</dd>

<dt>
<b><tt class="literal">PullSupplier</tt></b>
</dt>
<dd>
<p><a name="INDEX-PullSupplier"></a>This interface has two methods for pulling event data from the
supplier: <tt class="literal">pull()</tt> and
<tt class="literal">try_pull()</tt>. A consumer can choose to do a
blocking event pull by calling <tt class="literal">pull()</tt>, or it can
do a nonblocking polling of the event supplier by calling
<tt class="literal">try_pull()</tt>. There is also a
<tt class="literal">disconnect_pull_supplier()</tt> <a name="INDEX-disconnect_pull_consumer"></a>method.
</p>
</dd>

<dt>
<b><tt class="literal">PullConsumer</tt></b>
</dt>
<dd>
<p>The <a name="INDEX-PullConsumer"></a><tt class="literal">PullConsumer</tt> just has a
<tt class="literal">disconnect_pull_consumer()</tt> method, since
it's responsible for internally pulling events from its
suppliers.
</p>
</dd>

</dl>

<p>The <tt class="literal">CosEventChannelAdmin</tt><a name="INDEX-1375"></a> module contains interfaces for event
channels and their proxy consumers and suppliers:
</p>

<dl>
<dt>
<b><tt class="literal">EventChannel</tt></b>
</dt>
<dd>
<p>This interface has three methods:
<tt class="literal">for_consumers()</tt><a name="INDEX-1376"></a>
,
<tt class="literal">for_suppliers()</tt><a name="INDEX-1377"></a>
, and
<tt class="literal">destroy()</tt><a name="INDEX-1378"></a>
. The <tt class="literal">for_consumers()</tt> method returns a reference
to a <tt class="literal">ConsumerAdmin</tt> <a name="INDEX-ConsumerAdmin"></a>
object, which can be used by
consumers to get references to proxy suppliers. Likewise, the
<tt class="literal">for_suppliers()</tt> method returns a
<tt class="literal">SupplierAdmin</tt> <a name="INDEX-SupplierAdmin"></a>
object, which can be used by
suppliers to get references to proxy consumers. The
<tt class="literal">destroy()</tt> method destroys the channel and any
communication resources it had been using.
</p>
</dd>

<dt>
<b><tt class="literal">ConsumerAdmin</tt></b>
</dt>
<dd>
<p>This interface allows consumers to get references to proxy suppliers
from an event channel. The
<tt class="literal">obtain_push_supplier()</tt> <a name="INDEX-obtain_push_supplier"></a>
method returns a
reference to a <tt class="literal">ProxyPushSupplier</tt> <a name="INDEX-ProxyPushSupplier"></a>
object, and the
<tt class="literal">obtain_pull_supplier()</tt> <a name="INDEX-obtain_pull_supplier"></a>
method returns a
reference to a <tt class="literal">ProxyPullSupplier</tt> <a name="INDEX-ProxyPullSupplier"></a>object.
</p>
</dd>

<dt>
<b><tt class="literal">SupplierAdmin</tt></b>
</dt>
<dd>
<p>The
<tt class="literal">SupplierAdmin</tt><a name="INDEX-1379"></a> interface allows suppliers to get
references to proxy consumers from the channel. The
<tt class="literal">obtain_push_consumer()</tt><a name="INDEX-1380"></a>
method returns a <tt class="literal">ProxyPushConsumer</tt> <a name="INDEX-ProxyPushConsumer"></a>
reference,
and
<tt class="literal">obtain_pull_consumer()</tt><a name="INDEX-1381"></a>
returns a <tt class="literal">ProxyPullConsumer</tt> <a name="INDEX-ProxyPullConsumer"></a>
reference.
</p>
</dd>

<dt>
<b><tt class="literal">ProxyPushSupplier</tt></b>
</dt>
<dd>
<p>This interface derives from the <tt class="literal">PushSupplier</tt>
interface in the <tt class="literal">CosEventComm</tt> module. It adds a
method, <tt class="literal">connect_push_consumer()</tt>, 
<a name="INDEX-connect_push_consumer"></a>
which allows a
local <tt class="literal">PushConsumer</tt> to attach itself to the
supplier. The method takes a single argument: a reference to a
<tt class="literal">PushConsumer</tt>. Attaching a consumer to the proxy
supplier sets up a path for events to flow from the remote suppliers
attached to the channel, through the channel, to the local proxy
supplier, and finally to the local consumer.
</p>
</dd>

<dt>
<b><tt class="literal">ProxyPullSupplier</tt></b>
</dt>
<dd>
<p>This derives from <tt class="literal">PullSupplier</tt> and adds a
<tt class="literal">connect_pull_consumer()</tt> method, 
<a name="INDEX-connect_pull_consumer"></a>
which accepts a
<tt class="literal">PullConsumer</tt> reference.
</p>
</dd>

<dt>
<b><tt class="literal">ProxyPushConsumer</tt></b>
</dt>
<dd>
<p>This derives from <tt class="literal">PushConsumer</tt> and adds a
<tt class="literal">connect_push_supplier()</tt> <a name="INDEX-connect_push_supplier"></a>
method, which accepts a
<tt class="literal">PushSupplier</tt> reference. Attaching a supplier to
a proxy consumer sets up a path for events to flow from the local
suppliers attached to the channel to the local proxy consumer,
through the channel, and finally to remote consumers attached to the
channel.
</p>
</dd>

<dt>
<b><tt class="literal">ProxyPullConsumer</tt></b>
</dt>
<dd>
<p>This derives from <tt class="literal">PullConsumer</tt> and adds a
<tt class="literal">connect_pull_supplier()</tt><a name="INDEX-1382"></a>
method, which accepts a <tt class="literal">PullSupplier</tt>
reference.<tt class="literal"></tt><a name="INDEX-1383"></a>
</p>
</dd>

</dl>


<a name="appb-4-fm2xml"></a>
<h3 class="sect2">B.2.3. Comparison to the Java Event Model</h3>

<p>As we discussed in <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_01.htm">Chapter 6, "Message-Passing Systems"</a>, the core
<a name="INDEX-1384"></a>Java API provides a basic framework for
event-based communication between agents, remote or otherwise. The
only full implementation of this framework present in the Java API is
found in the AWT package, which uses the event delegation model to
define the flow of user events from user interface elements to
application objects that process the events, update the system state,
and provide visual feedback to the user through changes to the user
interface.
</p>

<p>We showed in <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_01.htm">Chapter 6, "Message-Passing Systems"</a> how the delegation event
model in Java could be used to build a remote messaging system. But
the Java API didn't provide us much
"out-of-the-box." There is no generic event-handling
interface provided as an extension of the placeholder
<tt class="literal">EventListener</tt><a name="INDEX-1385"></a> interface. We had to fill this gap
ourselves by creating the <tt class="literal">EventHandler</tt> interface
with its generic
<tt class="literal">handleEvent()</tt><a name="INDEX-1386"></a>
abtract method. And there is no interface supplied at all for event
sources. This significantly limits the usefulness of the Java API as
a broad framework for distributed event-passing systems, especially
when it comes to interfacing with other event-based
systems.<a name="INDEX-1387"></a><a name="INDEX-1388"></a><a name="INDEX-1389"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appb_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/appb_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="appb_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/appb_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">B.1. Naming Service</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">B.3. Security Service</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
