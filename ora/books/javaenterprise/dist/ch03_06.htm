<html>
<head>
<title>Java RMI (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Java RMI">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch03_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch03_01.htm">Chapter 3: Distributing Objects</a></td><td align="right" valign="top" width="172"><a href="ch03_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch03_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">3.6. Java RMI</h2>

<p>
<a name="INDEX-417"></a><a name="INDEX-418"></a><a name="INDEX-419"></a>The Java
<a name="INDEX-420"></a><a name="INDEX-421"></a>
Remote Method Invocation (RMI) package is a Java-centric scheme for
distributed objects that is now a part of the core Java API. RMI
offers some of the critical elements of a distributed object system
for Java, plus some other features that are made possible by the fact
that RMI is a Java-only system. RMI has object communication
facilities that are analogous to CORBA's IIOP, and its object
serialization system provides a way for you to transfer or request an
object instance by value from one remote process to another.
</p>

<a name="JDP-CH-3-SECT-6.1"></a>
<h3 class="sect2">3.6.1. Remote Object Interfaces</h3>

<p>
<a name="INDEX-422"></a><a name="INDEX-423"></a>Since RMI is a Java-only
distributed object scheme, all object interfaces are written in Java.
Client stubs and server skeletons are generated from this interface,
but using a slightly different process than in CORBA. First, the
interface for the remote object has to be written as extending the
<tt class="literal">java.rmi.Remote</tt><a name="INDEX-424"></a> interface. The
<tt class="literal">Remote</tt> interface doesn't introduce any
methods to the object's interface; it just serves to mark
remote objects for the RMI system. Also, all methods in the interface
must be declared as throwing the
<tt class="literal">java.rmi</tt>.<tt class="literal">RemoteException</tt><a name="INDEX-425"></a>
. The <tt class="literal">RemoteException</tt> is the base class for many
of the exceptions that RMI defines for remote operations, and the RMI
engineers decided to expose the exception model in the interfaces of
all RMI remote objects. This is one of the drawbacks of RMI: it
requires you to alter an existing interface in order to apply it to a
distributed environment.
</p>


<a name="JDP-CH-3-SECT-6.2"></a>
<h3 class="sect2">3.6.2. Server Implementations</h3>

<p>
<a name="INDEX-426"></a>Once the remote object's
Java interface is defined, a server implementation of the interface
can be written. In addition to implementing the object's
interface, the server also typically extends the
<tt class="literal">java.rmi.server.UnicastRemoteObject</tt><a name="INDEX-427"></a> class.
<tt class="literal">UnicastRemoteObject</tt> is an extension of the
<tt class="literal">RemoteServer</tt><a name="INDEX-428"></a><a name="INDEX-429"></a> class, which acts as a base class for
server implementations of objects in RMI. Subclasses of
<tt class="literal">RemoteServer</tt> can implement different kinds of
object distribution schemes, like replicated objects, multicast
objects, or point-to-point communications. The current version of RMI
(1.1) only supports remote objects that use point-to-point
communication, and <tt class="literal">UnicastRemoteObject</tt> is the
only subclass of <tt class="literal">RemoteServer</tt> provided. RMI
doesn't require your server classes to derive from a
<tt class="literal">RemoteServer</tt> subclass, but doing so lets your
server inherit specialized implementations of some methods from
<tt class="literal">Object</tt> (<tt class="literal">hashCode()</tt>,
<tt class="literal">equals()</tt>, and <tt class="literal">toString()</tt>)
so that they do the right thing in a remote object scenario. If you
decide that you don't want to subclass from a
<tt class="literal">RemoteServer</tt> subclass for some reason, then you
have to either provide your own special implementations for these
methods or live with the fact that these methods may not behave
consistently on your remote objects. For example, if you have two
client stubs that refer to the same remote object, you would probably
want their <tt class="literal">hashCode()</tt> methods to return the same
value, but the standard <tt class="literal">Object</tt> implementation
will return independent hash codes for the two stubs. The same
inconsistency applies to the standard <tt class="literal">equals()</tt>
and <tt class="literal">toString()</tt> methods.
</p>


<a name="JDP-CH-3-SECT-6.3"></a>
<h3 class="sect2">3.6.3. The RMI Registry</h3>

<p>
<a name="INDEX-430"></a><a name="INDEX-431"></a><a name="INDEX-432"></a><a name="INDEX-433"></a><a name="INDEX-434"></a><a name="INDEX-435"></a>In
RMI, the registry serves the role of the Object Manager and Naming
Service for the distributed object system. The registry runs in its
own Java <a name="INDEX-436"></a> runtime environment on the host
that's serving objects. Unlike CORBA, the RMI registry is only
required to be running on the server of a remote object. Clients of
the object use classes in the RMI package to communicate with the
remote registry to look up objects on the server. You start an RMI
registry on a host by running the
<tt class="literal">rmiregistry</tt><a name="INDEX-437"></a> command, which is included in the
standard JDK distribution. By default, the registry listens to port
1099 on the local host for connections, but you can specify any port
for the registry process by using a command-line option:
</p>

<blockquote>
<pre class="programlisting">objhost% rmiregistry 4001</pre>
</blockquote>

<p>Once the registry is running on the server, you can register object
implementations by name, using the
<tt class="literal">java.rmi.Naming</tt><a name="INDEX-438"></a> interface. We'll see the
details of registering server implementations in the next section. A
registered class on a host can then be located by a client by using
the <tt class="literal">lookup()</tt><a name="INDEX-439"></a> method on the
<tt class="literal">Naming</tt> interface. You address remote objects
using a URL-like scheme. For example,
</p>

<blockquote>
<pre class="programlisting">MyObject obj1 =
    (MyObject)Naming.lookup("rmi://objhost.myorg.com/Object1");</pre>
</blockquote>

<p>will look up an object registered on the host
<tt class="literal">objhost.myorg.com</tt> under the name
<tt class="literal">Object1</tt>. You can have multiple registries
running on a server host, and address them independently using their
port assignments. For example, if you have two registries running on
the <tt class="literal">objhost</tt> server, one on port 1099 and another
on port 2099, you can locate objects in either registry using URLs
that include the port numbers:<a name="INDEX-440"></a>
</p>

<blockquote>
<pre class="programlisting">MyObject obj1 = 
    (MyObject)Naming.lookup("rmi://objhost.myorg.com:1099/Object1");
MyObject obj2 =
    (MyObject)Naming.lookup("rmi://objhost.myorg.com:2099/Object2");</pre>
</blockquote>

<a name="INDEX-441"></a>
<a name="INDEX-442"></a>
<a name="INDEX-443"></a>
<a name="INDEX-444"></a>


<a name="JDP-CH-3-SECT-6.4"></a>
<h3 class="sect2">3.6.4. Client Stubs and Server Skeletons</h3>

<p>
<em class="emphasis"></em><a name="INDEX-445"></a><a name="INDEX-446"></a><a name="INDEX-447"></a>Once you've
<em class="emphasis"></em><a name="INDEX-448"></a><a name="INDEX-449"></a><a name="INDEX-450"></a>
defined your object's interface and derived a server
implementation for the object, you can create a client stub and
server skeleton for your object. First the interface and the server
implementation are compiled into bytecodes using the
<tt class="command">javac</tt> compiler, just like normal classes. Once we
have the bytecodes for the interface and the server implementation,
we have to generate the linkage from the client through the RMI
registry to the object implementation we just generated. This is done
using the RMI stub compiler,
<tt class="literal">rmic</tt><a name="INDEX-451"></a>. Suppose we've defined a remote
interface called <tt class="literal">MyObject</tt>, and we've
written a server implementation called
<tt class="literal">MyObjectImpl</tt>, and compiled both of these into
bytecodes. Assuming that we have the compiled classes in our
CLASSPATH, we would generate the RMI stub and skeleton for the class
with the <tt class="literal">rmic</tt> compiler:
</p>

<blockquote>
<pre class="programlisting">myhost% rmic MyObject</pre>
</blockquote>

<p>The <tt class="literal">rmic</tt> compiler bootstraps off of the Java
bytecodes for the object interface and implementation to generate a
client stub and a server skeleton for the class. A client stub is
returned to a client when a remote instance of the class is requested
through the <tt class="literal">Naming</tt> interface. The stub has hooks
into the object serialization subsystem in RMI for marshaling method
parameters.
</p>

<p>The server skeleton acts as an interface between the RMI registry and
instances of the object implementation residing on a host. When a
client request for a method invocation on an object is received, the
skeleton is called on to extract the serialized parameters and pass
them to the object implementation.
</p>


<a name="JDP-CH-3-SECT-6.5"></a>
<h3 class="sect2">3.6.5. Registering and Using a Remote Object</h3>

<p>
<a name="INDEX-452"></a><a name="INDEX-453"></a>Now we have a compiled interface and
implementation for our remote object, and we've created the
client stub and server skeleton using the <tt class="literal">rmic</tt>
compiler. The final hurdle is to register an instance of our
implementation on a remote server, and then look up the object on a
client. Since RMI is a Java-centric API, we can rely on the bytecodes
for the interface, the implementation, the rmic-generated stub, and
skeleton being loaded automatically over the network into the Java
runtimes at the clients. A server process has to register an instance
of the implementation with a RMI registry running on the server:
</p>

<blockquote>
<pre class="programlisting">MyObjectImpl obj = new MyObjectImpl();
Naming.rebind("Object1", obj);</pre>
</blockquote>

<p>Once this is done, a client can get a reference to the remote object
by connecting to the remote registry and asking for the object by
name:
</p>

<blockquote>
<pre class="programlisting">System.setSecurityManager(new java.rmi.RMISecurityManager());
MyObject objStub = (MyObject)Naming.lookup("rmi://objhost/Object1");</pre>
</blockquote>

<p>Before loading the remote object stub, we installed a special RMI
security manager with the <tt class="literal">System</tt> object. The RMI
<a name="INDEX-454"></a><a name="INDEX-455"></a>
security manager enforces a security policy for remote stubs to
prevent them from doing illicit snooping or sabotage when
they're loaded into your local Java environment from a network
source. If a client doesn't install an RMI security manager,
then stub classes can only be loadable from the local file <a name="INDEX-456"></a><a name="INDEX-457"></a> system.<a name="INDEX-458"></a><a name="INDEX-459"></a>
</p>


<a name="JDP-CH-3-SECT-6.6"></a>
<h3 class="sect2">3.6.6. Serializing Objects</h3>

<p>
<a name="INDEX-460"></a><a name="INDEX-461"></a>
Another Java facility that supports RMI is object serialization. The
<tt class="literal">java.io</tt> package includes classes that can
convert an object into a stream of bytes and reassemble the bytes
back into an identical copy of the original object. Using these
classes, an object in one process can be serialized and transmitted
over a network connection to another process on a remote host. The
object (or at least a copy of it) can then be reassembled on the
remote host.
</p>

<p>An object that you want to serialize has to implement the
<tt class="literal">java.io.Serializable</tt><a name="INDEX-462"></a> interface. With this done, an
object can be written just as easily to a file, a string buffer, or a
network socket. For example, assuming that <tt class="literal">Foo</tt>
is a class that implements <tt class="literal">Serializable</tt>, the
following code writes <tt class="literal">Foo</tt> on an object output
stream, which sends it to the underlying I/O stream:
</p>

<blockquote>
<pre class="programlisting">Foo myFoo = new Foo();
OutputStream out = ... // Create output stream to object destination
ObjectOutputStream oOut = new ObjectOutputStream(out);
oOut.writeObject(myFoo);</pre>
</blockquote>

<p>The object can be reconstructed just as easily:</p>

<blockquote>
<pre class="programlisting">InputStream in = ... // Create input stream from source of object
ObjectInputStream oIn = new ObjectInputStream(in);
Foo myFoo = (Foo)oIn.readObject();</pre>
</blockquote>

<p>We've simplified things a bit by ignoring any exceptions
generated by these code snippets. Note that serializing objects and
sending them over a network connection is very different from the
functionality provided by the <a name="INDEX-463"></a><a name="INDEX-464"></a><a name="INDEX-465"></a><a name="INDEX-466"></a><tt class="literal">ClassLoader</tt>, which
we saw earlier in this book. The <tt class="literal">ClassLoader</tt>
loads class definitions into the Java runtime, so that new instances
of the class can be created. The object serialization facility allows
an actual object to be serialized in its entirety, transmitted to any
destination, and then reconstructed as a precise replica of the
original.
</p>

<p>When you serialize an object, all of the objects that it references
as data members will also be serialized, and all of their object
references will be serialized, and so on. If you attempt to serialize
an object that doesn't implement the
<tt class="literal">Serializable</tt> interface, or an object that refers
to non-serializable objects, then a
<tt class="literal">NotSerializableException</tt> will be thrown. Method
arguments that aren't objects are serialized automatically
using their standard byte stream formats.
</p>

<p>In RMI, the serialization facility is used to marshal and unmarshal
method arguments that are objects, but that are not remote objects.
Any object argument to a method on a remote object in RMI must
implement the <tt class="literal">Serializable</tt> interface, since the
argument will be serialized and transmitted to the remote host during
the remote method invocation.<a name="INDEX-467"></a><a name="INDEX-468"></a>
</p>


<a name="JDP-CH-3-SECT-6.7"></a>
<h3 class="sect2">3.6.7. An RMI Solver</h3>

<p>
<tt class="literal"></tt><a name="INDEX-469"></a><a name="INDEX-470"></a>
Now let's go back to our <tt class="literal">Solver</tt> example
and distribute it using RMI. First, we would have to rewrite the
<tt class="literal">Solver</tt> interface so that it implements the
<tt class="literal">java.rmi.Remote</tt> interface. The methods on the
interface also have to be specified as throwing
<tt class="literal">RemoteExceptions</tt>. This modified version of the
<tt class="literal">Solver</tt> interface, the
<tt class="literal">RMISolver</tt><a name="INDEX-471"></a>, is shown in <a href="#JDP-CH-3-EX-10">Example 3-10</a>.
</p>

<a name="JDP-CH-3-EX-10"></a>
<div class="example">
<h4 class="objtitle">Example 3-10. Interface for a RMI Solver</h4>
<blockquote>
<pre class="programlisting">package dcj.examples.rmi;

import java.rmi.*;
import java.io.OutputStream;

public interface RMISolver extends java.rmi.Remote
{
  public boolean solve() throws RemoteException;
  public boolean solve(RMIProblemSet s,
                       int numIters) throws RemoteException;

  public RMIProblemSet getProblem() throws RemoteException;
  public boolean setProblem(RMIProblemSet s) throws RemoteException;
  public int getIterations() throws RemoteException;
  public boolean setIterations(int numIter) throws RemoteException;
}</pre>
</blockquote>
</div>

<p>There are two methods in this interface, the
<tt class="literal">solve()</tt> method with arguments, and the
<tt class="literal">setProblem()</tt> method, where we have problem set
arguments that we want to pass into the remote method invocation. We
could achieve this by creating a version of the
<tt class="literal">ProblemSet</tt> class that implements the
<tt class="literal">Serializable</tt> interface. If we did that, the
problem set would be sent to the remote host by value--the
remote object would be operating on a copy of the problem set. But in
both of these cases we want to pass the problem set by reference; we
want the remote <tt class="literal">Solver</tt> to operate on the same
problem set object that we have on the client, so that when the
solution is stored in the problem set, we will see it automatically
on the client. We can do this in RMI by making a remote version of
the <tt class="literal">ProblemSet</tt> class. With an RMI-enabled
<tt class="literal">ProblemSet</tt> interface, we can use an instance of
an implementation of the interface as an argument to remote methods,
and the remote object will receive a stub to the local
<tt class="literal">ProblemSet</tt>. The RMI version of the
<tt class="literal">ProblemSet</tt> interface, the
<tt class="literal">RMIProblemSet</tt>, is shown in <a href="#JDP-CH-3-EX-11">Example 3-11</a>.
</p>

<a name="JDP-CH-3-EX-11"></a>
<div class="example">
<h4 class="objtitle">Example 3-11. Interface for an RMI ProblemSet</h4>
<blockquote>
<pre class="programlisting">package dcj.examples.rmi;

import java.rmi.*;

public interface RMIProblemSet extends Remote {
  public double getValue() throws RemoteException;
  public double getSolution() throws RemoteException;
  public void setValue(double v) throws RemoteException;
  public void setSolution(double s) throws RemoteException;
}</pre>
</blockquote>
</div>

<p>Now we'll need to write server-side implementations of these
interfaces. Our server-side implementation of the
<tt class="literal">RMISolver</tt> derives from
<tt class="literal">java.rmi.Uni-castRemoteObject</tt>, and is shown in
<a href="#JDP-CH-3-EX-12">Example 3-12</a>. The implementation of the
<tt class="literal">RMIProblemSet</tt> interface is shown in <a href="#JDP-CH-3-EX-13">Example 3-13</a>. It also extends the
<tt class="literal">UnicastRemoteObject</tt> class.
</p>

<a name="JDP-CH-3-EX-12"></a>
<div class="example">
<h4 class="objtitle">Example 3-12. Implementation of the RMISolver</h4>
<blockquote>
<pre class="programlisting">package dcj.examples.rmi;

import java.rmi.*;
import java.rmi.server.UnicastRemoteObject;
import java.io.*;

public class RMISolverImpl
    extends UnicastRemoteObject
    implements RMISolver {

  // Protected implementation variables
  protected int numIterations = 1; // not used for this Solver...
  protected RMIProblemSet currProblem = null;

  // Constructors
  public RMISolverImpl() throws RemoteException { super(); }
  public RMISolverImpl(int numIter) throws RemoteException {
    super();
    numIterations = numIter;
  }

  // Public methods
  public boolean solve() throws RemoteException {
    System.out.println("Solving current problem...");
    return solve(currProblem, numIterations);
  }

  public boolean solve(RMIProblemSet s, int numIters) 
      throws RemoteException {
    boolean success = true;

    if (s == null) {
      System.out.println("No problem to solve.");
      return false;
    }

    System.out.println("Problem value = " + s.getValue());

    // Solve problem here...
    try {
      s.setSolution(Math.sqrt(s.getValue()));
    }
    catch (ArithmeticException e) {
      System.out.println("Badly-formed problem.");
      success = false;
    }

    System.out.println("Problem solution = " + s.getSolution());

    return success;
  }

  public RMIProblemSet getProblem() throws RemoteException {
    return currProblem;
  }
  
  public boolean setProblem(RMIProblemSet s) throws RemoteException {
    currProblem = s;
    return true;
  }

  public int getIterations() throws RemoteException {
    return numIterations;
  }
  
  public boolean setIterations(int numIter) throws RemoteException {
    numIterations = numIter;
    return true;
  }

  public static void main(String argv[]) {
    try {
      // Register an instance of RMISolverImpl with the
      // RMI Naming service
      String name = "TheSolver";
      System.out.println("Registering RMISolverImpl as \"" + name + "\"");
      RMISolverImpl solver = new RMISolverImpl();
      Naming.rebind(name, solver);
      System.out.println("Remote Solver ready...");
    }
    catch (Exception e) {
      System.out.println("Caught exception while registering: " + e);
    }
  }
}</pre>
</blockquote>
</div>

<a name="JDP-CH-3-EX-13"></a>
<div class="example">
<h4 class="objtitle">Example 3-13. Implementation of the RMIProblemSet</h4>
<blockquote>
<pre class="programlisting">package dcj.examples.rmi;

import java.rmi.*;
import java.rmi.server.UnicastRemoteObject;

public class RMIProblemSetImpl
    extends java.rmi.server.UnicastRemoteObject
    implements RMIProblemSet {

  protected double value;
  protected double solution;
  
  public RMIProblemSetImpl() throws RemoteException {
    value = 0.0;
    solution = 0.0;
  }
  
  public double getValue() throws RemoteException {
    return value;
  }
  
  public double getSolution() throws RemoteException {
    return solution;
  }
  
  public void setValue(double v) throws RemoteException {
    value = v;
  }
  
  public void setSolution(double s) throws RemoteException {
    solution = s;
  }
}</pre>
</blockquote>
</div>

<p>These implementations of our <tt class="literal">Solver</tt> and
<tt class="literal">ProblemSet</tt> interfaces are very similar to those
that we created for the earlier CORBA examples. As in our earlier
examples, the <tt class="literal">Solver</tt> simply performs a square
root on the <tt class="literal">ProblemSet</tt> floating-point value. The
<tt class="literal">RMISolverImpl</tt> has a <tt class="literal">main()</tt>
method that registers a <tt class="literal">RMISolverImpl</tt> object
with the local RMI registry.
</p>

<p>Now we compile our interfaces and our server implementations into
bytecodes, then generate their client stubs and server skeletons
using the <tt class="literal">rmic</tt> compiler:
</p>

<blockquote>
<pre class="programlisting">myhost% rmic dcj.examples.rmi.RMIProblemSetImpl
myhost% rmic dcj.examples.rmi.RMISolverImpl</pre>
</blockquote>

<p>The last required item is a client to use our remote object. The
<tt class="literal">RMISolverClient</tt> in <a href="#JDP-CH-3-EX-14">Example 3-14</a>
is a simple client for the remote solver. The client has a single
<tt class="literal">main()</tt> method where it gets a stub for the
remote solver and asks it to solve a problem. The first line of the
<tt class="literal">main()</tt> method installs the
<tt class="literal">RMISecurityManager</tt>. Next, the client looks up
the solver registered on the remote server through the
<tt class="literal">Naming.lookup()</tt> method. Once it has the
<tt class="literal">RMISolver</tt> stub, it creates a
<tt class="literal">RMIProblemSetImpl</tt> object (our RMI-enabled
<tt class="literal">ProblemSet</tt> implementation), and passes it into
the solver's <tt class="literal">solve()</tt> method. The remote
solver receives a stub to the <tt class="literal">RMIProblemSetImpl</tt>
object on the client host, and solves the problem it represents. The
methods that the remote <tt class="literal">RMISolver</tt> calls on the
<tt class="literal">RMIProblemSet</tt> stub are invoked remotely on the
<tt class="literal">RMIProblemSetImpl</tt> object on the client. Once the
<tt class="literal">solve()</tt> method returns, our client can get the
problem solution from the <tt class="literal">RMIProblemSetImpl</tt>
object that it passed into the remote method call.
</p>

<a name="JDP-CH-3-EX-14"></a>
<div class="example">
<h4 class="objtitle">Example 3-14. An RMISolver Client</h4>
<blockquote>
<pre class="programlisting">package dcj.examples.rmi;

import java.rmi.*;
import java.rmi.server.*;

public class RMISolverClient {
  public static void main(String argv[]) {
    // Install a security manager that can handle remote stubs
    System.setSecurityManager(new RMISecurityManager());

    // Get a remote reference to the RMISolver class
    String name = "rmi://objhost.myorg.com/TheSolver";
    System.out.println("Looking up " + name + "...");
    RMISolver solver = null;
    try {
      solver = (RMISolver)Naming.lookup(name);
    }
    catch (Exception e) {
      System.out.println("Caught an exception looking up Solver.");
      System.exit(1);
    }

    // Make a problem set for the solver
    RMIProblemSetImpl s = null;
    
    try {
      s = new RMIProblemSetImpl();
      s.setValue(Double.valueOf(argv[0]).doubleValue());
    }
    catch (Exception e) {
      System.out.println("Caught exception initializing problem.");
      e.printStackTrace();
    }

    // Ask solver to solve
    try {
      if (solver.solve(s, 1)) {
        System.out.println("Solver returned solution: " +
                           s.getSolution());
      }
      else {
        System.out.println(
          "Solver was unable to solve problem with value = " +
          s.getValue());
      }
    }
    catch (RemoteException e) {
      System.out.println("Caught remote exception.");
      System.exit(1);
    }
  }
}</pre>
</blockquote>
</div>

<p>Finally, we're ready to try our distributed object system.
First, we start a registry on the host that is serving objects
through the Naming service:
</p>

<blockquote>
<pre class="programlisting">objhost% rmiregistry &amp;</pre>
</blockquote>

<p>Now we can register a <tt class="literal">RMISolverImpl</tt> object by
running the <tt class="literal">main()</tt> method on the
<tt class="literal">RMISolverImpl</tt> class:
</p>

<blockquote>
<pre class="programlisting">objhost% java dcj.examples.rmi.RMISolverImpl
Registering RMISolverImpl as "TheSolver"
Remote Solver ready...</pre>
</blockquote>

<p>Back on our client host, we can run the client class:</p>

<blockquote>
<pre class="programlisting">client% java dcj.examples.rmi.RMISolverClient 47.0
Looking up "rmi://objhost.myorg.com/TheSolver"...
Solver returned solution: 6.855654600401044</pre>
</blockquote>

<p>Our remote solver has solved our problem for us. </p>

<p>It's important to note here that the
<tt class="literal">ProblemSet</tt> we're sending to the remote
<tt class="literal">Solver</tt> object through a remote method call
isn't being served in the same way as the
<tt class="literal">Solver</tt> object. The <tt class="literal">Solver</tt>
server doesn't need to lookup the
<tt class="literal">ProblemSet</tt> object through the RMI registry. A
stub interface to the client-side
<tt class="literal">RMIProblemSetImpl</tt> object is automatically
generated on the server side by the underlying RMI <a name="INDEX-472"></a><a name="INDEX-473"></a><a name="INDEX-474"></a><a name="INDEX-475"></a>
system.<tt class="literal"></tt><a name="INDEX-476"></a><a name="INDEX-477"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch03_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch03_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.5. CORBA</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.7. RMI vs. CORBA</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
