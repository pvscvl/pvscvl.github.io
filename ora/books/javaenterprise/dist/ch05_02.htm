<html>
<head>
<title>The java.security Package (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The java.security Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_01.htm">Chapter 5: Security</a></td><td align="right" valign="top" width="172"><a href="ch05_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">5.2. The java.security Package</h2>

<p>The <a name="INDEX-597"></a>Java Security API is a
framework for implementing and using security measures in the Java
environment. The Java Security API is included in the core Java API,
in the form of the <tt class="literal">java.security</tt> package.
</p>

<a name="JDP-CH-5-SECT-2.1"></a>
<h3 class="sect2">5.2.1. Architectural Overview</h3>

<p>The security package really provides two APIs: one for users of
security algorithms, and another for the implementors or
<em class="emphasis">providers</em> of these algorithms.
</p>

<a name="JDP-CH-5-SECT-2.1.1"></a>
<h3 class="sect3">5.2.1.1. The User API</h3>

<p>
<a name="INDEX-598"></a>The user API is designed to
let you use different <a name="INDEX-599"></a><a name="INDEX-600"></a> cryptographic algorithms in your
application without having to know how they are implemented by
providers. All you need to know is an algorithm's name. As an
example, you can create a new key-pair generator using the <a name="INDEX-601"></a><a name="INDEX-602"></a><a name="INDEX-603"></a><a name="INDEX-604"></a>Digital
Signature Algorithm (DSA) with the following call:
</p>

<blockquote>
<pre class="programlisting">KeyPairGenerator myGen = KeyPairGenerator.getInstance("DSA");</pre>
</blockquote>

<p>You can take this new object and ask it for key pairs to be used to
sign messages, without knowing how the key pairs are being generated.
If you wanted to use a different algorithm to implement your key-pair
generator, you would just change the algorithm name in the preceding
line of code. The rest of your code that uses the object can usually
remain unchanged.
</p>

<p>In the same way that cryptographic algorithms are specified by name,
providers of these algorithms are also specified by name. If you
wanted to use an implementation of DSA from a specific provider, then
you could ask for it by name when you create an object:
</p>

<blockquote>
<pre class="programlisting">KeyPairGenerator myGen =
    KeyPairGenerator.getInstance("DSA", "MY_PROVIDER");</pre>
</blockquote>

<p>Although the Security API lets you hide from the details of
cryptographic algorithms if you want to, it also lets you use those
details if you need to. Underneath the generic, algorithm-independent
interfaces provided by the Security API, like the
<tt class="literal">KeyPairGenerator</tt> in our example, implementations
of these interfaces will use algorithm-specific subclasses. If you
need to give details about the algorithm and its specific parameters,
then you can access these algorithm-specific interfaces for the
objects you create by casting:
</p>

<blockquote>
<pre class="programlisting">DSAKeyPairGenerator myDSAGen = 
    (DSAKeyPairGenerator)KeyPairGenerator.getInstance("DSA");
DSAParams myParams = new DSAParams(myP, myQ, myG);
myDSAGen.initialize(myParams, new SecureRandom(mySeed));</pre>
</blockquote>

<p>In this case, since we asked for a key-pair generator for the DSA
algorithm, we know that the returned object will implement the
<tt class="literal">DSAKeyPairGenerator</tt><a name="INDEX-605"></a> interface. <a name="INDEX-606"></a><a name="INDEX-607"></a><a name="INDEX-608"></a><a name="INDEX-609"></a> So we can cast the
object to this type, and call <a name="INDEX-610"></a><a name="INDEX-611"></a> algorithm-specific methods on the
interface.<a name="INDEX-612"></a>
</p>



<a name="JDP-CH-5-SECT-2.1.2"></a>
<h3 class="sect3">5.2.1.2. The Provider API</h3>

<p>
<a name="INDEX-613"></a>Companies or individuals that
provide implementations of security algorithms can add their own
implementations to the <tt class="literal">java.security</tt> API using
the <tt class="literal">Provider</tt><a name="INDEX-614"></a> interface. The provider creates
implementations of the relevant interfaces in the API
(<tt class="literal">Signature</tt>,
<tt class="literal">KeyPairGenerator</tt>, etc.), then creates a subclass
of the <tt class="literal">Provider</tt> interface. The
<tt class="literal">Provider</tt> subclass will register the algorithms
with the Security API, so that users can ask for their implementation
of algorithms by name. So if you had implemented a better, faster
version of the <a name="INDEX-615"></a>MD5 message digest format you would
create a subclass of the
<tt class="literal">java.security.MessageDigest</tt> class that used your
implementation, and then create a subclass of
<tt class="literal">Provider</tt> that would register your MD5
implementation under your chosen provider name ("Jim's
Security," for example). Then a user of the Security API would
use your MD5 implementation through the Security API by just asking
for it by name:
</p>

<blockquote>
<pre class="programlisting">MessageDigest digest =
    MessageDigest.getInstance("MD5", "Jim's Security");</pre>
</blockquote>



<a name="JDP-CH-5-SECT-2.2"></a>
<h3 class="sect2">5.2.2. The Core Security API</h3>

<p>The high-level facilities provided by the Security API cover the
<em class="emphasis">identification</em> of agents and the
<em class="emphasis">encoding</em> or <em class="emphasis">decoding</em> of
information passed between agents. These are the same issues we
identified as critical security issues in an earlier section, since
indentifying agents involves the <em class="emphasis">certification</em>
and <em class="emphasis">authentication</em> of the agents, while data
encoding and decoding requires some form of
<em class="emphasis">encryption</em>.
</p>

<p>The initial public release of the Java Security API in the JDK 1.1
included APIs for identifying and verifying agents, and using message
digests and digital signatures. At the time of this writing, there is
also an extension package, the <a name="INDEX-616"></a><a name="INDEX-617"></a><a name="INDEX-618"></a>Java Cryptography
Extension (JCE&#153;), that adds encryption interfaces to the
Security API. These extensions are separated from the main Security
API because the encryption code used in the JCE is not exportable
outside the United States. In this chapter we'll discuss both
elements of the overall Security API, but be warned that to use the
encryption classes, such as <tt class="literal">Ciphers</tt>,
you'll need to be a U.S. or Canadian citizen and download the
JCE package from the Javasoft site.
</p>

<p>The overall Java Security API includes interfaces for the following:</p>

<dl>
<dt>
<b>Identity management</b>
</dt>
<dd>
<p>
<a name="INDEX-619"></a><a name="INDEX-620"></a>These
interfaces let you represent the identities of agents and create
access control lists (ACLs) for resources that reference these
identities. These interfaces include <tt class="literal">Principal</tt>,
<tt class="literal">Identity</tt>, <tt class="literal">Signer</tt>, and the
<tt class="literal">java.secu-rity.acl</tt> package.
</p>
</dd>

<dt>
<b>Digital signatures</b>
</dt>
<dd>
<p>
<a name="INDEX-621"></a><a name="INDEX-622"></a>
Digital signatures are used to sign messages and data, so that the
receiver can verify the identity of the sender. Signatures are often
implemented using public/private key pairs--a message is signed
using the sender's private key, and the signature can be
verified on the other end using the corresponding public key. The
interfaces provided for generating and using digital signatures
include <tt class="literal">Key</tt>, <tt class="literal">KeyGenerator</tt>,
<tt class="literal">KeyPairGenerator</tt>,
<tt class="literal">Signature</tt>, and
<tt class="literal">MessageDigest</tt>.
</p>
</dd>

<dt>
<b>Data encryption</b>
</dt>
<dd>
<p>
<a name="INDEX-623"></a><a name="INDEX-624"></a>
Encryption algorithms are used to encode and decode data for secure
transmission between agents. The key interface here is the
<tt class="literal">Cipher</tt>, which is a general representation of an
encryption algorithm.
</p>
</dd>

</dl>

<p>In the rest of this chapter, we'll be looking at adding
security to distributed applications using the Java Security API. To
fuel the discussion, we'll be extending the simple agent shown
in <a href="#JDP-CH-5-EX-2">Example 5-1</a> to include user authentication and
data encryption. The <tt class="literal">SimpleAgent</tt><a name="INDEX-625"></a> is a basic network client that
opens up a socket to a remote agent at a particular host and port
number, and starts exchanging messages with it. The
<tt class="literal">SimpleAgent</tt> keeps a queue of outgoing messages
in its <tt class="literal">msgQueue</tt> data member: messages are added
to the queue with the <tt class="literal">addMsg()</tt> method, and the
<tt class="literal">nextMsg()</tt> method takes the first message off the
queue and returns it. The <tt class="literal">SimpleAgent</tt>
constructor takes a host name and port number as arguments, and opens
a socket connection to the process listening to that port on the
remote host. If the connection is made, it retrieves the input and
output streams from the socket. The <tt class="literal">SimpleAgent</tt>
also extends <tt class="literal">Thread</tt>, and its
<tt class="literal">run()</tt> method is a loop in which it sends the
next message in its queue to the remote process, reads a response
message from the remote process, and handles the message by calling
its <tt class="literal">processMsg()</tt> method. In this example, the
<tt class="literal">processMsg()</tt> method does nothing, but subclasses
of <tt class="literal">SimpleAgent</tt> could implement this method to
interpret the message and act on it.
</p>

<a name="JDP-CH-5-EX-2"></a>
<div class="example">
<h4 class="objtitle">Example 5-1. A Simple Agent Class</h4>
<blockquote>
<pre class="programlisting">package dcj.examples.security;

import java.lang.*;
import java.net.*;
import java.io.*;
import java.util.Vector;

public class SimpleAgent extends Thread {
  // Our socket connection to the server
  protected Socket serverConn;

  // The input/output streams from the other agent
  protected InputStream inStream;
  protected OutputStream outStream;

  // Message queue
  Vector msgQueue;

  public SimpleAgent(String host, int port)
      throws IllegalArgumentException {
    try {
      serverConn = new Socket(host, port);
    }
    catch (UnknownHostException e) {
      throw new IllegalArgumentException("Bad host name given.");
    }
    catch (IOException e) {
      System.out.println("SimpleAgent: " + e);
      System.exit(1);
    }

    try {
      inStream = new DataInputStream(serverConn.getInputStream());
      outStream = new DataOutputStream(serverConn.getOutputStream());
    }
    catch (Exception e) {
      inStream = null;
      outStream = null;
    }
  }

  public synchronized void addMsg(String msg) {
    msgQueue.addElement(msg);
  }

  protected synchronized String nextMsg() {
    String msg = null;
    if (msgQueue.size() &gt; 0) {
      msg = (String)msgQueue.elementAt(0);
      msgQueue.removeElementAt(0);
    }
    return msg;
  }
  
  // Close the connection to the server when finished.
  protected void closeConnection() {
    try {
      serverConn.close();
    }
    catch (Exception e) {}
    inStream = null;
    outStream = null;
  }

  public void run() {
    // Go into infinite loop, sending messages, receiving responses, and
    // processing them...
    DataInputStream din = (DataInputStream)inStream;
    DataOutputStream dout = (DataOutputStream)outStream;
    while (true) {
      String msg = nextMsg();
      if (msg != null) {
        String inMsg = "", inToken = "";
        try {
          dout.writeChars(msg);
          while (inToken.compareTo("END") != 0) {
            inToken = din.readUTF();
            inMsg = inMsg + " " + inToken;
          }
          processMsg(inMsg);
        }
        catch (Exception e) {}
      }
    }
  }

  protected void processMsg(String msg) {}
}</pre>
</blockquote>
</div>

<p>To use the <tt class="literal">SimpleAgent</tt> class, you would create
one first, using the host and port number of the remote agent with
which you want it to communicate. Then you would call its
<tt class="literal">run()</tt> method to start the message-passing
process:
</p>

<blockquote>
<pre class="programlisting">SimpleAgent myAgent = new SimpleAgent("remote.host.org", 1234);
myAgent.run();</pre>
</blockquote>

<a name="INDEX-626"></a>

<p>In the examples in the remainder of this chapter, we'll add
identity authentication and data encryption to this simple agent, to
make sure that the information passed in its messages is secure.
Although we'll be using a credit agent as our example
application, we won't go into any details about the message
protocol being used. These details aren't critical in a
discussion about security, since our security measures will apply to
any message protocol we decide to use.
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.1. Security Issues and Concerns</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.3. Identities and Access Control</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
