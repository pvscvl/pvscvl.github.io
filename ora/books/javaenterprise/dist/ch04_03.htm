<html>
<head>
<title>Managing Threads at Runtime (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Managing Threads at Runtime">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch04_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch04_01.htm">Chapter 4: Threads</a></td><td align="right" valign="top" width="172"><a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch04_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">4.3. Managing Threads at Runtime</h2>

<p>
<a name="INDEX-522"></a><a name="INDEX-523"></a>In addition to changing the running
state of your application threads, the Java API allows you to do some
basic thread management at runtime. The functionality provided
includes thread <em class="emphasis">synchronization</em>, organization of
threads into thread <em class="emphasis">groups</em>, and influencing the
thread scheduler by setting thread <em class="emphasis">priorities</em>.
Before we see how all of these can come into play in a distributed
application, let's go over them briefly so that we have a
feeling for what kinds of capabilities they provide.
</p>

<a name="JDP-CH-4-SECT-3.1"></a>
<h3 class="sect2">4.3.1. Synchronizing Threads</h3>

<p>
<a name="INDEX-524"></a><a name="INDEX-525"></a>
When you have multiple threads in an application, it sometimes
becomes necessary to synchronize them with respect to a particular
method or block of code. This usually occurs when multiple threads
are updating the same data asynchronously. To ensure that these
changes are consistent throughout the application, we need to make
sure that one thread can't start updating the data before
another thread is finished reading or updating the same data. If we
let this occur, then the data will be left in an inconsistent state,
and one or both threads will not get the correct result.
</p>

<p>Java allows you to define critical regions of code using the
<tt class="literal">synchronized</tt><a name="INDEX-526"></a><a name="INDEX-527"></a><a name="INDEX-528"></a><a name="INDEX-529"></a>
statement. A method or block of code is synchronized on a class,
object, or array, depending on the context of the
<tt class="literal">synchronized</tt> keyword. If you use the
<tt class="literal">synchronized</tt> modifier on a static method of a
class, for example, then before the method is executed, the Java
virtual machine obtains an exclusive "lock" on the class.
A thread that attempts to enter this block of code has to get the
lock before the code in the synchronized block is executed. If
another thread is executing in this critical section at the time, the
thread will block until the running thread exits the critical section
and the lock on the class is released.
</p>

<p>If a non-static method is declared <tt class="literal">synchronized</tt>,
then the virtual machine obtains a lock on the object on which the
method is invoked. If you define a synchronized block of code, then
you have to specify the class, object, or array on which to
synchronize.
</p>


<a name="JDP-CH-4-SECT-3.2"></a>
<h3 class="sect2">4.3.2. Thread Groups</h3>

<p>The Java API also lets you organize threads into groups, represented
by the
<tt class="literal">ThreadGroup</tt><a name="INDEX-530"></a><a name="INDEX-531"></a> class. A <tt class="literal">ThreadGroup</tt>
can contain individual threads, or other thread groups, to create a
thread hierarchy. The benefit of thread groups is a mixture of
security and convenience. Thread groups are secure because threads in
a group can't access the parent thread of their group. This
allows you to isolate certain threads from other threads and prevent
them from monitoring or modifying each other.
</p>

<p>Convenience comes from the methods provided on the
<tt class="literal">ThreadGroup</tt> class for performing
"batch" operations on the group of threads. The
<tt class="literal">start()</tt><a name="INDEX-532"></a>
method on <tt class="literal">ThreadGroup</tt> starts all of the threads
in the group, for example. Similar methods exist for suspending,
resuming, stopping, and destroying the threads in the group.
</p>


<a name="JDP-CH-4-SECT-3.3"></a>
<h3 class="sect2">4.3.3. Priorities</h3>

<p>
<a name="INDEX-533"></a><a name="INDEX-534"></a><a name="INDEX-535"></a>The Java virtual machine is a
process running under the operating system for the platform
it's on. The operating system is responsible for allocating CPU
time among the processes running on the system. When CPU time is
allocated to the Java runtime, the virtual machine is responsible for
allocating CPU time to each of the threads in the Java process. How
much CPU time is given to a thread, and when, is determined by the
virtual machine using a simple scheduling algorithm called
fixed-priority scheduling. When a Java process starts, there are one
or more threads that are in the runnable state (i.e., not in the
stopped state described earlier). These threads all need to use a
CPU. The Java runtime chooses the highest priority thread to run
first. If all of the threads have the same priority, then a thread is
chosen using a round-robin scheme. The currently running thread will
continue to run until it yields the CPU, or a higher-priority thread
becomes runnable (e.g., is created and its
<tt class="literal">start()</tt> method is called), or until the CPU time
slice allocated to the thread runs out (on systems that support
thread time-slicing). When a thread loses the CPU, the next thread to
run is chosen using the same algorithm that was used to pick the
first thread: highest priority wins, or if there is more than one
thread with the highest priority, one is picked in round-robin
fashion.
</p>

<p>All this means that there is no guarantee that the highest priority
thread is running at any given time during the life of a process.
Even if you ensure that one thread in your process has a higher
priority than all the others, that thread might lose control of the
CPU if it's suspended by some external agent, or if it yields
the CPU itself, or if the underlying platform implements thread
time-slicing and its time slice runs out. So thread priorities should
only be used to influence the relative runtime behavior of the
threads in your process, and shouldn't be used to implement
synchronized interactions between threads. If one thread has to
finish before another one can complete its job, then you should
implement some kind of completion flag for the second thread to
check, or use <tt class="literal">wait()</tt> and
<tt class="literal">notify()</tt> to synchronize the threads, rather than
giving the first thread a higher priority than the second. Depending
on the number of CPU cycles each thread needs to finish, and whether
the Java runtime is running on a time-slicing system or not, the
second thread could still finish before the first, even with its
lower <a name="INDEX-536"></a><a name="INDEX-537"></a><a name="INDEX-538"></a>
priority.<a name="INDEX-539"></a><a name="INDEX-540"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch04_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch04_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.2. Making a Thread</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.4. Networked Threads</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
