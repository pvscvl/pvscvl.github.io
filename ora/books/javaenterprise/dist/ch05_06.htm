<html>
<head>
<title>Data Encryption (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Data Encryption">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_01.htm">Chapter 5: Security</a></td><td align="right" valign="top" width="172"><a href="ch05_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">5.6. Data Encryption</h2>

<p>
<a name="INDEX-753"></a>Now
we've seen how you can authenticate a remote agent talking to
you over the network, but what about the security of the data
you're exchanging? Our <tt class="literal">AuthCreditAgent</tt>
checks the identity of the requesting agent before sending account
information to them, but once it does, the data is sent unencoded
over the network as a message:
</p>

<blockquote>
<pre class="programlisting">String msg = nextMsg();
    ...
dout.writeUTF(msg);</pre>
</blockquote>

<p>So if the data is all an attacker is after, and he couldn't
easily bypass our authentication system, he could
<a name="INDEX-754"></a><a name="INDEX-755"></a> eavesdrop on the network communications
and collect the data that way. To prevent this, you want to encode,
or <em class="emphasis">encrypt</em>, the data before it's
transmitted, in such a way that only the intended recipient can
decode the data.
</p>

<a name="JDP-CH-5-SECT-6.1"></a>
<h3 class="sect2">5.6.1. Ciphers for Secure Data Transfers</h3>

<p>The Java Cryptography Extension to the Java Security API provides the
<tt class="literal">java.security.Cipher</tt><a name="INDEX-756"></a><a name="INDEX-757"></a><a name="INDEX-758"></a><a name="INDEX-759"></a> class
for implementing secure, encrypted data transfers. A
<tt class="literal">Cipher</tt> can be used on the sending end of a
transmission to encrypt data, and on the receiving end to decrypt
data. A <tt class="literal">Cipher</tt> is created using the
<tt class="literal">getInstance()</tt> method common to the Java Security
API, passing in the name of an algorithm to be used for encryption:
</p>

<blockquote>
<pre class="programlisting">Cipher sendCipher = Cipher.getInstance("DES");</pre>
</blockquote>

<p>In this example, we're creating a <tt class="literal">Cipher</tt>
that uses the DES algorithm to encrypt data. This algorithm is a
<em class="emphasis">symmetric</em><a name="INDEX-760"></a><a name="INDEX-761"></a> encryption algorithm, which means
that it needs to use the same secret key for both the encryption and
decryption of data at either end of the transmission link. Other
encryption schemes are considered
<em class="emphasis">asymmetric</em><a name="INDEX-762"></a><a name="INDEX-763"></a>, in that they use different keys
for encryption and decryption. This term is usually used to refer to
encryption algorithms that are based on public key methods. With an
asymmetric cipher, a message might be encrypted using an
agent's public key, and can only be decrypted using the
corresponding private key. The advantage of asymmetric encryption is
that we can transmit public keys to other agents in the clear.
Symmetric encryption requires that we securely transmit a secret key
between two parties. The advantage of symmetric encryption is
performance; symmetric algorithms usually take less CPU time to
encrypt and decrypt data. Where performance is an issue, you can use
a combination of symmetric and asymmetric encryption. A secret key
can be transmitted between two parties first, using their public keys
and asymmetric encryption on the secret key. Then the rest of the
communication can be carried out using symmetric encryption, with the
secret key.
</p>

<p>For sending data, the <tt class="literal">Cipher</tt> that we create
needs to be initialized with a key to use to encrypt the data. This
is done by passing the <tt class="literal">Key</tt> into the
<tt class="literal">initEncrypt()</tt><a name="INDEX-764"></a>
method on the <tt class="literal">Cipher</tt>:
</p>

<blockquote>
<pre class="programlisting">Key encodeKey = ...;   // Get key to be used for encrypting data
sendCipher.initEncrypt(encodeKey);</pre>
</blockquote>

<p>The data to be encrypted is passed into the
<tt class="literal">Cipher</tt>'s
<tt class="literal">crypt()</tt><a name="INDEX-765"></a>
method next:
</p>

<blockquote>
<pre class="programlisting">byte[] sensitiveData = ...;
byte[] encodedData = sendCipher.crypt(sensitiveData);</pre>
</blockquote>

<p>The encoded data can now be transmitted safely to another party,
where it can be decoded only if the right key and algorithm are used.
</p>

<p>The procedure for decrypting the message is similar. A
<tt class="literal">Cipher</tt> object is created just as in the
encryption stage, but it is initialized for decryption using the
proper key:
</p>

<blockquote>
<pre class="programlisting">Key decodeKey = ...;   // Get the key to be used for decrypting data
receiveCipher.initDecrypt(decodeKey);</pre>
</blockquote>

<p>Once the encoded data is received, either over a
<tt class="literal">Socket</tt> connection or through some other means,
the receiver can decrypt it using the <tt class="literal">crypt()</tt>
methods on the decrypting <tt class="literal">Cipher</tt>:
</p>

<blockquote>
<pre class="programlisting">byte[] sensitiveData = receiveCipher.crypt(encodedData);</pre>
</blockquote>

<a name="INDEX-766"></a>
<a name="INDEX-767"></a>
<a name="INDEX-768"></a>
<a name="INDEX-769"></a>


<a name="JDP-CH-5-SECT-6.2"></a>
<h3 class="sect2">5.6.2. Back to Our Credit Agent</h3>

<p>Now we can add data encryption to our credit agent, so that the
account information sent back to the remote agent is safe from prying
eyes. First, we'll make a new subclass of our
<tt class="literal">SimpleAgent</tt>, called
<tt class="literal">SecureAgent</tt><a name="INDEX-770"></a>, that includes all of the
authentication abilities of the <tt class="literal">AuthAgent</tt> from
<a href="ch05_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_05.htm">Example 5-3</a>, plus the ability to encrypt and decrypt
messages. The <tt class="literal">SecureAgent</tt> is shown in <a href="#JDP-CH-5-EX-6">Example 5-5</a>. The <tt class="literal">SecureAgent</tt> has an
extra data member, <tt class="literal">cryptKey</tt>, which is a
<tt class="literal">Key</tt> to be used to encrypt and decrypt messages
sent to and from the remote agent. For this example, we'll
assume that we're using a symmetric, secret key encryption
algorithm to encode messages. The key used for the cipher may have
been initialized with a handshaking process involving an asymmetric
algorithm, as we described earlier.
</p>

<a name="JDP-CH-5-EX-6"></a>
<div class="example">
<h4 class="objtitle">Example 5-5. An Agent with Authentication and Encryption</h4>
<blockquote>
<pre class="programlisting">package dcj.examples.security;

import java.lang.*;
import java.net.*;
import java.io.*;
import java.security.*;

public class SecureAgent extends SimpleAgent {

  // The Identity of the agent we're connected to
  Identity remoteAgent = null;
  // A secret key used to encode/decode messages
  Key cryptKey = null;

  public SecureAgent(String host, int port)
      throws IllegalArgumentException {

    super(host, port);
    DataInputStream din = new DataInputStream(inStream);

    // Try to authenticate the remote agent
    try {
      String agentId = din.readUTF();
      int dataLen = din.readInt();
      byte[] data = new byte[dataLen];
      din.read(data);
      int sigLen = din.readInt();
      byte[] sig = new byte[sigLen];
      din.read(sig);

      if (!authenticate(agentId, data, sig)) {
        // Failed to authenticate: write error message, close socket and
        // return
        System.out.println("Failed to authenticate remote agent "
                           + agentId);
        closeConnection();
      }
      else {
        // Remote agent is authenticated, first message is a welcome
        addMsg("HELLO " + agentId);
      }
    }
    catch (Exception e) {
      closeConnection();
    }
  }

  protected boolean authenticate(String id, byte[] data, byte[] sig) {
    boolean success = false;
    PublicKey key = lookupKey(id);
    try {
      // Set up a signature with the agent's public key
      Signature agentSig = Signature.getInstance(key.getAlgorithm());
      agentSig.initVerify(key);
      // Try to verify the signature message from the agent
      agentSig.update(data);
      success = agentSig.verify(sig);

      if (success) {
        // Agent checks out, so initialize an identity for it
        remoteAgent = new Identity(id);
        remoteAgent.setPublicKey(key);
        // Get the agent's secret encryption key, too
        cryptKey = lookupSecretKey(id);
      }
    }
    catch (Exception e) {
      System.err.println("Failed to verify agent signature.");
      success = false;
    }

    return success;
  }

  public void run() {
    // Go into infinite loop, sending messages, receiving responses, and
    // processing them...

    DataInputStream din = (DataInputStream)inStream;
    DataOutputStream dout = (DataOutputStream)outStream;

    // Make an encryption Cipher for sending messages...
    String cryptAlgName = cryptKey.getAlgorithm();
    Cipher sendCipher = Cipher.getInstance(cryptAlgName);
    sendCipher.initEncrypt(cryptKey);
    // ...and a decryption Cipher for receiving them.
    Cipher receiveCipher = Cipher.getInstance(cryptAlgName);
    receiveCipher.initDecrypt(cryptKey);

    while (true) {
      String msg = nextMsg();
      if (msg != null) {
        String inMsg = "", inToken = "";
        try {
          // Send encrypted message to agent
          byte[] eData = sendCipher.crypt(msg.getBytes());
          dout.write(eData);

          // Read and decrypt message from agent
          int dataLen = din.readInt();
          eData = new byte[dataLen];
          din.read(eData);
          byte[] clearData = receiveCipher.crypt(eData);
          inMsg = new String(clearData);

          // Process the incoming message
          processMsg(inMsg);
        }
        catch (Exception e) {}
      }
    }
  }
}</pre>
</blockquote>
</div>

<p>The <tt class="literal">SecureAgent</tt> constructor is identical to the
<tt class="literal">AuthAgent</tt><a name="INDEX-771"></a>, reading a digital
signature from the input stream and passing it to the
<tt class="literal">authenticate()</tt> method. The
<tt class="literal">authenticate()</tt><a name="INDEX-772"></a>
method is almost the same: the digital signature is checked, and if
it is verified, then the agent's <tt class="literal">Identity</tt>
is initialized with their <tt class="literal">PublicKey</tt>. An extra
step is added, though, to look up the agent's secret key using
the aptly named
<tt class="literal">lookupSecretKey()</tt><a name="INDEX-773"></a>
method. The secret key might be stored in a local database, or on a
key-ring in memory. A very simple way to store a key-ring would be to
put keys in a <tt class="literal">Hashtable</tt> indexed by the identity
name, and then serialize the <tt class="literal">Hashtable</tt> object to a
file on disk. In this case, the <tt class="literal">lookupSecretKey()</tt>
method on our <tt class="literal">AuthAgent</tt> might look something like
this:
</p>

<blockquote>
<pre class="programlisting">protected SecretKey lookupSecretKey(String id) {
    SecretKey key = null;

    // Get the key-ring file name from the property list for this agent
    String keyringFile = System.getProperty("keyring", "keyring.dat");

    // Try reading the key-ring and looking up the key for the id
    try {
        // Read the key-ring from disk
        ObjectInputStream in =
            new ObjectInputStream(new FileInputStream(keyringFile));
        Hashtable keyring = (Hashtable) in.readObject();
        // Lookup the id's key on the ring
        key = (SecretKey)keyring.get(id);
    }
    catch (Exception e) {
        System.err.println("Failure looking up key on keyring.");
        e.printStackTrace(System.err);
    }

    return key;
}</pre>
</blockquote>

<p>The big difference between the <tt class="literal">AuthAgent</tt> and the
<tt class="literal">SecureAgent</tt> is in their
<tt class="literal">run()</tt> methods. Before the
<tt class="literal">SecureAgent</tt> starts sending and receiving
messages in the <tt class="literal">run()</tt> method's while loop,
it initializes two <tt class="literal">Cipher</tt>s, one for encrypting
outgoing messages and one for decrypting incoming messages. It uses
the <tt class="literal">cryptKey</tt> to initialize both
<tt class="literal">Cipher</tt>s. In the message-passing loop, the
<tt class="literal">Secure-Agent</tt> encrypts each outgoing message with
the send <tt class="literal">Cipher</tt>, and all incoming messages are
read as byte arrays, and decrypted using the receive
<tt class="literal">Cipher</tt>.
</p>

<p>To make our credit agent use the new encryption abilities offered by
the <tt class="literal">SecureAgent</tt>, we can just change the class
definition and have the agent extend the
<tt class="literal">SecureAgent</tt> rather than the
<tt class="literal">AuthAgent</tt>. The <tt class="literal">processMsg()</tt>
method will work unchanged since the incoming messages have been
decrypted in the <tt class="literal">Se-cureAgent.run()</tt> method
before being passed into the
<tt class="literal">processMsg()</tt><a name="INDEX-774"></a><a name="INDEX-775"></a> method.<a name="INDEX-776"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch05_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.5. Digital Signatures</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.7. Choosing a Cryptographic Algorithm</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
