<html>
<head>
<title>Databases (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Databases">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm">Java Distributed Computing</a></td><td align="right" valign="top" width="172"><a href="ch07_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch07_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 7.  Databases</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch07_01.htm">An Overview of JDBC</a>
<br>
<a href="ch07_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch07_02.htm">Remote Database Applications</a>
<br>
<a href="ch07_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch07_03.htm">Multi-Database Applications</a>
<br>
</p>
</div>



<p>This chapter is a brief introduction to the topic of integrating
databases into networked Java applications. As with many of the
topics in this book, the development of database applications is a
subject that can fill a book of its own. And it has, many times over.
For the purposes of this book, rather than trying to cover the gamut
of database design and development in depth, we will restrict this
chapter to a discussion of the following topics:
</p>

<ul>
<li>
<p>An overview of the primary database access API available in the Java
environment, JDBC
</p>
</li>
<li>
<p>A discussion of the basic issues that arise in developing networked
database applications
</p>
</li>
<li>
<p>The special issues that come into play when multiple distributed
databases are accessed from a single application
</p>
</li>
</ul>

<p>We assume that the reader has a basic understanding of general
relational database topics, such as SQL and the layout of data into
tables and records. For more in-depth coverage of the JDBC package
than we will be able to provide here, refer to George Reese's
book, <em class="emphasis">Database Programming with JDBC and Java</em>
(O'Reilly &amp; Associates).
</p>




<h2 class="sect1">7.1. An Overview of JDBC</h2>

<p>
<a name="INDEX-984"></a><a name="INDEX-985"></a>JDBC is the database
connectivity package included in the core Java API.<a href="#FOOTNOTE-1">[1]</a> JDBC gives you a database-independent interface for
opening a connection to a relational database, issuing SQL calls to
the database, and receiving a set of data as the result. In more
technical terms, JDBC acts as a Java implementation of the standard
SQL call-level interface (CLI) defined by X/Open and supported by
most major relational database vendors. In order to perform
transactions with a specific type of database, you need to have a
JDBC driver that acts as a bridge between the JDBC method calls and
the native database interface.
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-1"></a>
<p>[1]JDBC became a formal part of the JDK in version 1.1. </p>
</blockquote>

<a name="JDP-CH-7-SECT-1.1"></a>
<h3 class="sect2">7.1.1. Data Retrieval Example</h3>

<p>
<a name="INDEX-986"></a>Perhaps the easiest way to get started
with JDBC is to see a simple example of the API in action. <a href="#JDP-CH-7-EX-2">Example 7-1</a> shows a Java code segment that opens a
database connection, executes a query, and iterates through the
results.
</p>

<a name="JDP-CH-7-EX-2"></a>
<div class="example">
<h4 class="objtitle">Example 7-1. A Simple JDBC Database Query</h4>
<blockquote>
<pre class="programlisting">// Construct the database address
String dbaseURL = "jdbc:mysubprotocol://dbasehost/dbasename";
// Make the database connection
Connection dbConnection =
  DriverManager.getConnection(dbaseURL, "dbaseuser", "dbasepasswd");
// Create a statement and execute the SQL query
Statement query = dbConnection.getStatement();
ResultSet results =
  query.executeQuery("SELECT first_name, last_name from user_table");

// Iterate through the results and print them to standard output
while (results.next()) {
  String fname = results.getString("first_name");
  String lname = results.getString("last_name");
  System.out.println("Found user \"" + fname + " " + lname + "\"");
}</pre>
</blockquote>
</div>

<p>In the example, we refer to the database using a URL:</p>

<blockquote>
<pre class="programlisting">String dbaseURL = "jdbc:mysubprotocol://dbasehost/dbasename";</pre>
</blockquote>

<p>This URL is passed to the JDBC
<tt class="literal">DriverManager</tt>'s
<tt class="literal">getConnection()</tt><a name="INDEX-987"></a>
method, along with an account name and password, to open a connection
to the database:
</p>

<blockquote>
<pre class="programlisting">Connection dbConnection =
  DriverManager.getConnection(dbaseURL, "dbaseuser", "dbasepasswd");</pre>
</blockquote>

<p>Once the connection is created, we construct a
<tt class="literal">Statement</tt><a name="INDEX-988"></a> object, which is used to issue an SQL
query. In this case, we're retrieving all of the first and last
names (<tt class="literal">user_fname</tt> and
<tt class="literal">user_lname</tt>) from a table of user information
(<tt class="literal">user_table</tt>). The results of the query are
returned by JDBC as a
<tt class="literal">ResultSet</tt><a name="INDEX-989"></a> object:
</p>

<blockquote>
<pre class="programlisting">Statement query = dbConnection.createStatement();
ResultSet results =
 query.executeQuery("SELECT first_name, last_name from user_table");</pre>
</blockquote>

<p>Finally, we can iterate over the results of the query and present
them to the user:
</p>

<blockquote>
<pre class="programlisting">while (results.next()) {
    String fname = results.getString("first_name");
    String lname = results.getString("last_name");
    System.out.println("Found user \"" + fname + " " + lname + "\"");
}</pre>
</blockquote>

<p>In the following sections, we'll examine JDBC in more detail to
see how this and other database interactions are supported.<a name="INDEX-990"></a>
</p>


<a name="JDP-CH-7-SECT-1.2"></a>
<h3 class="sect2">7.1.2. The API at a Glance</h3>

<p>The JDBC API offers you interfaces that mirror the basic concepts
surrounding relational databases. These interfaces, all part of the
<tt class="literal">java.sql</tt> package, include interfaces for a
<tt class="literal">DriverManager</tt>, a
<tt class="literal">Connection</tt>, a <tt class="literal">Statement</tt>,
and a <tt class="literal">ResultSet</tt>.
</p>

<a name="JDP-CH-7-SECT-1.2.1"></a>
<h3 class="sect3">7.1.2.1. DriverManager</h3>

<p>The
<tt class="literal">DriverManager</tt><a name="INDEX-991"></a> class provides the means to load database
drivers into a Java application or applet; it is the primary way in
JDBC to establish a connection to a database. A Java application
first creates a <tt class="literal">DriverManager</tt> instance, then
connects to a database by calling the
<tt class="literal">DriverManager</tt>'s static
<tt class="literal">getConnection()</tt><a name="INDEX-992"></a>
method, passing a URL-like reference to the database as a method
argument. The <tt class="literal">DriverManager</tt> searches the set of
available drivers for one that can support a connection to the
referenced database. If it finds one, it passes the database address
to the driver and asks it to create a connection. The connection to
the database is returned in the form of a
<tt class="literal">Connection</tt> object (described later).
</p>

<p>All JDBC drivers provide an implementation of the
<tt class="literal">java.sql.Driver</tt><a name="INDEX-993"></a> interface. When a
<tt class="literal">DriverManager</tt> is created, it attempts to load a
set of drivers specified by the <tt class="literal">sql.Driver</tt>'s
Java property, which can be set to a list of colon-delimited
<tt class="literal">Driver</tt> class names. Additional drivers can also be
loaded explicitly in the Java application as needed. When a
<tt class="literal">Driver</tt> class is loaded into the Java runtime,
it's responsible for creating an instance of itself and
registering this instance with the resident
<tt class="literal">DriverManager</tt>. So any additional drivers needed
by an application can be loaded explicitly by using the
<tt class="literal">Class.forName()</tt><a name="INDEX-994"></a>
method:
</p>

<blockquote>
<pre class="programlisting">Driver myDriver = (Driver)Class.forName("specialdb.Driver");</pre>
</blockquote>

<p>Since the <tt class="literal">Driver</tt> class automatically registers
itself with the <tt class="literal">DriverManager</tt>, there really
isn't any reason to keep the reference to the
<tt class="literal">Driver</tt>. You'll often see drivers loaded by
just calling the <tt class="literal">forName()</tt> method and later
referencing the driver by name when a database connection is made.
</p>



<a name="JDP-CH-7-SECT-1.2.2"></a>
<h3 class="sect3">7.1.2.2. Connection</h3>

<p>
<a name="INDEX-995"></a>Once
the necessary drivers have been loaded by the
<tt class="literal">DriverManager</tt>, a connection to a database can be
made through the <tt class="literal">getConnection()</tt> method of the
<tt class="literal">DriverManager</tt> class. The desired database is
specified with a <tt class="literal">String</tt> argument that acts as a
URL-like address to the database. There is no standard format for
this database address string; the <tt class="literal">DriverManager</tt>
simply passes it to each loaded JDBC driver in turn and asks if it
understands and supports the type of database being addressed.
Typically, the database address will include explicit information
about the type of driver to be used to make the connection. For
example, JDBC drivers using ODBC protocol to establish database
connections usually use addresses of the form:
</p>

<blockquote>
<pre class="programlisting">jdbc:odbc:financedata,</pre>
</blockquote>

<p>where <tt class="literal">financedata</tt> is a local data source. Access
to a remote database from a local client may involve an address of a
slightly different form:
</p>

<blockquote>
<pre class="programlisting">jdbc:drvr://dataserver.foobar.com:500/financedata.</pre>
</blockquote>

<p>The JDBC API specification recommends that database URLs take the
form:
</p>

<blockquote>
<pre class="programlisting">jdbc:&lt;sub-protocol&gt;:&lt;sub-name&gt;,</pre>
</blockquote>

<p>where <tt class="literal">&lt;sub-protocol&gt;</tt> specifies a database
connection service and <tt class="literal">&lt;sub-name&gt;</tt> provides
all of the information that the underlying service will need to find
the database and connect to it. So in the remote database URL shown
above, <tt class="literal">drvr</tt> is the sub-protocol, specifying a
specific driver to use to connect to our database. The
<tt class="literal">dataserver.foobar.com:500/financedata</tt> portion of
the URL acts as the sub-name, and gives the information the driver
needs to find our database. Other drivers may require you to specify
sub-protocols and sub-names differently. You should consult the
documentation for the JDBC drivers you're using to find out
what form your database URLs should take.
</p>

<p>The <tt class="literal">getConnection()</tt> method on
<tt class="literal">DriverManager</tt> either returns a
<tt class="literal">Connection</tt> object that represents the connection
to the named database, or throws an exception if the connection
couldn't be established.
</p>



<a name="JDP-CH-7-SECT-1.2.3"></a>
<h3 class="sect3">7.1.2.3. Statement</h3>

<p>
<a name="INDEX-996"></a><a name="INDEX-997"></a>The <tt class="literal">Connection</tt>
interface allows the user to create query statements to the database.
Query statements are represented as <tt class="literal">Statement</tt>
objects or subclasses. The <tt class="literal">Connection</tt> interface
provides three methods for creating database query statements:
<tt class="literal">createStatement()</tt><a name="INDEX-998"></a><a name="INDEX-999"></a><a name="INDEX-1000"></a>,
<tt class="literal">prepareStatement()</tt>, and
<tt class="literal">prepareCall()</tt>. The
<tt class="literal">createStatement()</tt> method is used for simple SQL
statements that don't involve any parameters. This returns a
<tt class="literal">Statement</tt> object that can be used to issue SQL
queries to the database, normally using its
<tt class="literal">executeQuery()</tt><a name="INDEX-1001"></a>
method. This method accepts an SQL statement as a string argument,
and the results of the statement are returned in the form of a
<tt class="literal">ResultSet</tt> object (described later). Other
methods available in the <tt class="literal">Statement</tt> interface for
issuing SQL statements to the database are
<tt class="literal">execute()</tt>, which is used for SQL queries that
can return multiple result sets, and
<tt class="literal">executeUpdate()</tt>, which can be used to issue
INSERT, UPDATE, or DELETE statements.
</p>

<p>In addition to the basic <tt class="literal">Statement</tt> interface, a
<tt class="literal">Connection</tt> object can be used to create
precompiled
<tt class="literal">PreparedStatement</tt><a name="INDEX-1002"></a><a name="INDEX-1003"></a> s, and
<tt class="literal">CallableStatement</tt>s that represent stored
procedures in the database. An SQL statement involving input
parameters, or a statement that you want to execute multiple times,
can be created using the <tt class="literal">prepareStatement()</tt>
method on a <tt class="literal">Connection</tt> object, which returns a
<tt class="literal">PreparedStatement</tt> object. The SQL statement
passed into the <tt class="literal">prepareStatement()</tt> method is
precompiled so that multiple executions of the statement will be more
efficient. This subclass of <tt class="literal">Statement</tt> supports
setting the values of precompiled input parameters through a series
of <tt class="literal">setXXX()</tt> methods. The
<tt class="literal">PreparedStatement</tt> object has an
<tt class="literal">executeQuery()</tt><a name="INDEX-1004"></a>
method that requires no arguments, and instead executes the
precompiled SQL statement on the database. Note that not all database
vendors or JBC drivers support precompiled statements, so check your
DBMS documentation and JDBC driver specifications to see if you can
use <tt class="literal">PreparedStatement</tt>s.
</p>

<p>A stored SQL procedure can be accessed through an SQL statement
created through the <tt class="literal">prepareCall()</tt> method on a
<tt class="literal">Connection</tt> object. This method returns a
<tt class="literal">CallableStatement</tt> object, which lets you set
input parameters and get output parameters from the statement.
</p>

<p>By default, the JDBC package is configured to commit each
<tt class="literal">Statement</tt> issued through a
<tt class="literal">Connection</tt>. If you need to do rollbacks of
transactions, or you want to commit multiple statements as a single
transaction, or both, you can disable the autocommit feature by
calling
<tt class="literal">Connection.setAutoCommit(false)</tt><a name="INDEX-1005"></a>
. Then a sequence of <tt class="literal">Statements</tt> can be created
from a <tt class="literal">Connection</tt> object, executed against the
database, and the entire transaction can be committed as one
transaction by calling the <tt class="literal">Connection</tt>'s
<tt class="literal">commit()</tt><a name="INDEX-1006"></a><a name="INDEX-1007"></a> method. If you
want to abort the transaction, you can call the
<tt class="literal">Connection</tt>'s
<tt class="literal">rollback()</tt> method.<a name="INDEX-1008"></a><a name="INDEX-1009"></a>
</p>



<a name="JDP-CH-7-SECT-1.2.4"></a>
<h3 class="sect3">7.1.2.4. ResultSet</h3>

<p>
<a name="INDEX-1010"></a>
Rows of data returned from the execution of a statement against a
database are represented as <tt class="literal">ResultSet</tt> objects in
JDBC. For example, the <tt class="literal">executeQuery()</tt> method of
the <tt class="literal">Statement</tt> interface returns a
<tt class="literal">ResultSet</tt> object. A
<tt class="literal">ResultSet</tt> object provides ways to iterate
through the rows of data returned as the result of an SQL query,
through its <tt class="literal">next()</tt> method; data fields within
each row can be retrieved by name or by column index number using its
<tt class="literal">getXXX()</tt> methods. The user needs to know the
type of data to expect in each column of returned data, since each
data item is retrieved through type-specific
<tt class="literal">getXXX()</tt> methods.
</p>

<p>Depending on how your JDBC driver is implemented, iterating through
the rows of data in a <tt class="literal">ResultSet</tt> may cause
individual data fetches from the database, or it may simply pull each
row of data from a local cache. If the performance of your data
transactions is an issue in your application, you should determine
how returned data is handled by your vendor's
drivers.<a name="INDEX-1011"></a><a name="INDEX-1012"></a><a name="INDEX-1013"></a>
</p>










<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch06_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch07_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch07_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">6.7. Using Remote Objects</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">7.2. Remote Database Applications</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
