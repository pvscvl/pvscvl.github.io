<html>
<head>
<title>Requirements for Developing Distributed Applications (Java Distributed Computing)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jim Farley">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-206-9E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Requirements for Developing Distributed Applications">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm" alt="Java Distributed Computing"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch01_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch01_01.htm">Chapter 1: Introduction</a></td><td align="right" valign="top" width="172"><a href="ch01_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch01_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">1.2. Requirements for Developing Distributed Applications</h2>

<p>
<a name="INDEX-18"></a>Now that we've defined some
terms that can be used to discuss distributed applications, we can
start to look at what goes into developing these applications. In
this section we'll discuss some of the issues that you face
when developing distributed systems, and what kinds of tools and
capabilities you'll need in order to address these issues. The
next section will describe how Java provides these tools and
capabilities.
</p>

<a name="JDP-CH-1-SECT-2.1"></a>
<h3 class="sect2">1.2.1. Partitioning and Distributing Data and Functions</h3>

<p>
<a name="INDEX-19"></a><a name="INDEX-20"></a><a name="INDEX-21"></a><a name="INDEX-22"></a>If you think of the computer
hosts and network connections available for a distributed application
to use as a "virtual machine," then one of the primary
tasks you have is to engineer an optimal mapping of processes,
objects, threads and agents to the various parts of this virtual
machine. In some cases, a straightforward client/server partitioning
based on data requirements can be used. Computational tasks can be
distributed based on the data needs of the application: maximize
local data needed for processing, and minimize data transfers over
the network. In other, more compute-intensive applications, you can
partition the system based upon the functional requirements of the
system, with data mapped to the most logical compute host. This
method of partitioning is especially useful when the overhead
associated with data transfers is negligible compared to the
computing time spent at the various hosts.
</p>

<p>In the best of all possible worlds, you could develop modules based
upon either data- or functionally driven partitioning. You could then
distribute these modules as needed throughout a virtual machine
comprised of computers and communication links, and easily connect
the modules to establish the data flow required by the application.
These module interconnections should be as flexible and transparent
as possible, since they may need to be adjusted at any point during
development or deployment of the distributed system.<a name="INDEX-23"></a><a name="INDEX-24"></a><a name="INDEX-25"></a><a name="INDEX-26"></a>
</p>


<a name="JDP-CH-1-SECT-2.2"></a>
<h3 class="sect2">1.2.2. Flexible, Extendible Communication Protocols</h3>

<p>
<a name="INDEX-27"></a><a name="INDEX-28"></a><a name="INDEX-29"></a><a name="INDEX-30"></a>The type and format of the
information that's sent between agents in a distributed system
is subject to many varied and changing requirements. Some of them are
a result of the data/function partitioning issues discussed in the
previous section. The allocation of tasks and data to agents in the
distributed system has a direct influence on what type of data will
need to be communicated between agents, how much data will be
transferred, and how complicated the communication protocol between
agents needs to be. If most of our data is sitting on the host where
it's needed, then communications will be mostly short, simple
messages to report status, instruct other agents to start processing,
etc. If central data servers are providing lots of data to remote
agents, then the communication protocol will be more complex and
connections between nodes in the system will stay open longer. You
need to be able to implement various styles of communication, and
adapt them to evolving requirements.
</p>

<p>The communication protocols a given agent will need to understand
might also be dictated by legacy systems that need to be incorporated
into the system. These legacy systems might control data or
functionality that's critical to enabling a given system, but
are not easily transferable to a new system. Support for these
protocols should be available, or easily attainable, in your
distributed application development environment. In the worst case,
when support for a required protocol is unavailable due to its
obscurity or the expense associated with the available support, you
should have the option to develop the required protocol support
yourself, and have a reasonable way of incorporating the extended
communications abilities into the existing infrastructure.
</p>


<a name="JDP-CH-1-SECT-2.3"></a>
<h3 class="sect2">1.2.3. Multithreading Requirements</h3>

<p>
<a name="INDEX-31"></a>Agents often have to execute
several threads of control at once, either to service requests from
multiple remote agents, or block on I/O while processing data, or for
any number of other reasons. Multithreading is often an effective way
to optimize the use of various resources, such as CPU time, local
storage devices, or network bandwidth. The ability to create and
control multiple threads of control is especially important in
developing distributed applications, since distributed agents are
typically more asynchronous than agents within a single process on a
single host.
<a name="INDEX-32"></a>The environments in which agents are
running can be very heterogeneous, too, and we don't want every
agent in a distributed application to be a slave to the slowest, most
heavily loaded agent in the system. We don't want our
multiprocessor compute server, for example, to be sitting idle while
it waits for a slow client desktop to read and render the results of
an analysis. We would want a single thread on the compute server to
be servicing the slow client, and while the client is crawling along
trying to read data and draw graphs on its display, other threads on
the compute server can be doing useful work, like analyzing the data
from other clients.<a name="INDEX-33"></a>
</p>


<a name="JDP-CH-1-SECT-2.4"></a>
<h3 class="sect2">1.2.4. Security Issues</h3>

<p>
<a name="INDEX-34"></a>The information
transactions that occur between computing agents often need to be
secure from outside observation, when information of a sensitive
nature needs to be shared between agents. In situations where an
outside agent not under the host's direct control is allowed to
interact with local agents, it is also wise to have reasonable
security measures available to authenticate the source of the agent,
and to prevent the agent from wreaking havoc once it gains access to
local processing resources. So at a minimum a secure distributed
application needs a way to <em class="emphasis">authenticate</em> the
identity of agents, define resource <em class="emphasis">access</em>
levels for agents, and <em class="emphasis">encrypt</em> data for
transmission between agents.<a name="INDEX-35"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch01_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch01_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/ch01_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">1.1. Anatomy of a Distributed Application</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">1.3. What Does Java Provide?</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
