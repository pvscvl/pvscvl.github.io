<html>
<head>
<title>Session Tracking (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Session Tracking">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_01.htm">Chapter 5: Java Servlets</a></td><td align="right" valign="top" width="172"><a href="ch05_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_09.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">5.8. Session Tracking</h2>
<p>
<a name="INDEX-1323"></a><a name="INDEX-1324"></a>Very few web applications are confined to a single page, so
having a mechanism for tracking users through a site can often
simplify application development.  The Web, however, is an inherently
stateless environment.  A client makes a request, the server fulfills<a name="INDEX-1325"></a>
it, and both promptly forget about each other.  In the past,
applications that needed to deal with a user through multiple pages
(for instance, a shopping cart) had to resort to complicated dodges to
hold onto state information, such as hidden fields in forms, setting
and reading cookies, or rewriting URLs to contain state information. </p>
<p>
<a name="INDEX-1326"></a><a name="INDEX-1327"></a>Fortunately, Version 2.0 of the Servlet API provides classes and
methods specifically designed to handle session tracking.  A servlet
can use the session-tracking API to delegate most of the user-tracking
functions to the server.  The first time a user connects to a
session-enabled servlet, the servlet simply creates a
<tt class="literal">javax.servlet.http.HttpSession</tt> object.  The servlet
can then bind data to this object, so subsequent requests can read the
data.  After a certain amount of inactive time, the session object is
destroyed. </p>
<p>
<a name="INDEX-1328"></a><a name="INDEX-1329"></a>A servlet uses the <tt class="literal">getSession()</tt> method of
<tt class="literal">HttpServletRequest</tt> to retrieve the current session
object.  This method takes a single <tt class="literal">boolean</tt>
argument.  If you pass <tt class="literal">true</tt>, and there is no
current session object, the method creates and returns a new
<tt class="literal">HttpSession</tt> object.  If you pass
<tt class="literal">false</tt>, the method returns <tt class="literal">null</tt>
if there is no current session object. For example:</p>
<blockquote>
<pre class="programlisting">
HttpSession thisUser = req.getSession(true);</pre>
</blockquote>
<p>
<a name="INDEX-1330"></a><a name="INDEX-1331"></a>When a new <tt class="literal">HttpSession</tt> is created, the server
assigns a unique session ID that must somehow be associated with the
client.   Since clients differ in what they support, the server has a
few options that vary slightly depending on the server implementation.
In general, the server's first choice is to try to set a cookie on the
client (which means that <tt class="literal">getSession()</tt> must be
called before you write any other data back to the client).  If cookie
support is lacking, the API allows servlets to rewrite internal links<a name="INDEX-1332"></a><a name="INDEX-1333"></a><a name="INDEX-1334"></a><a name="INDEX-1335"></a>
to include the session ID, using the <tt class="literal">encodeUrl()</tt>
method of <tt class="literal">HttpServletResponse</tt>.  This is optional,
but recommended, particularly if your servlets share a system with
other, unknown servlets that may rely on uninterrupted session
tracking.  However, this on-the-fly URL encoding can become a
performance bottleneck because the server needs to perform additional<a name="INDEX-1336"></a>
parsing on each incoming request to determine the correct session key
from the URL. (The performance hit is so significant that the Java Web
Server disables URL encoding by default.)  </p>
<p>To use URL encoding, you have to run all your internal links through <tt class="literal">encodeUrl()</tt>.  Say you have a line of code like this:</p>
<blockquote>
<pre class="programlisting">
out.println("&lt;A HREF=\"/servlet/CheckoutServlet\"&gt;Check Out&lt;/A&gt;");</pre>
</blockquote>
<p>You should replace it with:</p>
<blockquote>
<pre class="programlisting">out.print("&lt;A HREF=\"");
out.print(resp.encodeUrl("/servlet/CheckoutServlet");
out.println("\"&gt;Check Out&lt;/A&gt;");</pre>
</blockquote>
<p>JWS, in this case, adds an identifier beginning with
<tt class="literal">$</tt> to the end of the URL.  Other servers have their
own methods.  Thus, with JWS, the final output looks like this:</p>
<blockquote>
<pre class="programlisting">&lt;A HREF="/servlet/CheckoutServlet$FASEDAW23798ASD978"&gt;CheckOut&lt;/A&gt;"</pre>
</blockquote>
<p>
<a name="INDEX-1337"></a>
In addition to encoding your internal links, you need to use <tt class="literal">encodeRedirectUrl()</tt> to handle redirects properly.  This method works in the same manner as <tt class="literal">encodeUrl()</tt>. Note that in Version 2.1 of the Servlet API, both methods have been deprecated in favor of identical methods that use the more standard "URL" in their names: <tt class="literal">encodeURL()</tt> and <tt class="literal">encodeRedirectURL()</tt>.</p>
<p>
<a name="INDEX-1338"></a><a name="INDEX-1339"></a><a name="INDEX-1340"></a>You can access the unique session ID via the <tt class="literal">getID() </tt>method of <tt class="literal">HttpSession</tt>.  This is enough for most applications, since a servlet can use some other storage mechanism (i.e., a flat file, memory, or a database) to store the unique information (e.g., hit count or shopping cart contents) associated with each session.  However, the API makes it even easier to hold onto session-specific information by allowing servlets to bind objects to a session using the <tt class="literal">putValue()</tt> method of <tt class="literal">HttpSession</tt>.  Once an object is bound to a session, you can use the <tt class="literal">getValue()</tt> method. </p>
<p>
<a name="INDEX-1341"></a><a name="INDEX-1342"></a><a name="INDEX-1343"></a>Objects bound using <tt class="literal">putValue()</tt> are available to all servlets running on the server. The system works by assigning a user-defined name to each object (the <tt class="literal">String</tt> argument); this name is used to identify objects at retrieval time.  In order to avoid conflicts, the general practice is to name bound objects with names of the form <em class="emphasis">applicationname</em><tt class="literal">.</tt><em class="emphasis">objectname</em>.  For example:</p>
<blockquote>
<pre class="programlisting">
session.putValue("myservlet.hitcount", new Integer(34));</pre>
</blockquote>
<p>Now that object can be retrieved with:</p>
<blockquote>
<pre class="programlisting">
Integer hits = (Integer)session.getValue("myservlet.hitcount")</pre>
</blockquote>
<p>
<a href="#ch05-pgfid-547977">Example 5-7</a> demonstrates a basic session-tracking application that keeps track of the number of visits to the site by a particular user.  It works by storing a counter value in an <tt class="literal">HttpSession</tt> object and incrementing it as necessary.  When a new session is created (as indicated by <tt class="literal">isNew()</tt>, which returns <tt class="literal">true</tt> if the session ID has not yet passed through the client and back to the server), or the counter object is not found, a new counter object is created.</p>
<a name="ch05-pgfid-547977"></a>
<div class="example">
<h4 class="objtitle">Example 5-7. Counting Visits with Sessions </h4>
<blockquote>
<pre class="programlisting">
import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;

public class VisitCounterServlet extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse resp)
    throws ServletException, IOException {
 
    PrintWriter out = resp.getWriter();
    resp.setContentType("text/html");

    HttpSession thisUser = req.getSession(true);
    Integer visits;

    if(!thisUser.isNew()) {          //Don't check newly created sessions
      visits = (Integer)thisUser.getValue("visitcounter.visits");
      if(visits == null)
        visits = new Integer(1);
      else
        visits = new Integer(visits.intValue() + 1);
    } 
    else
      visits = new Integer(1);

    // Put the new count in the session
    thisUser.putValue("visitcounter.visits", visits);

    // Finally, display the results and give them the session ID too
    out.println("&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Visit Counter&lt;/TITLE&gt;&lt;/HEAD&gt;");
    out.println("&lt;BODY&gt;You have visited this page " + visits + " time[s]");
    out.println("since your last session expired."); 
    out.println("Your Session ID is " + thisUser.getId());
    out.println("&lt;/BODY&gt;&lt;/HTML&gt;");
  }
}  </pre>
</blockquote>
</div>
<a name="ch05-pgfid-348759"></a>
<h3 class="sect2">5.8.1. HttpSessionBindingListener</h3>
<p>
<a name="INDEX-1344"></a><a name="INDEX-1345"></a><a name="INDEX-1346"></a><a name="INDEX-1347"></a>
Sometimes it is useful to know when an object is getting bound or unbound from a session object.  For instance, in an application that binds a JDBC <tt class="literal">java.sql.Connection</tt> object to a session (something that, by the way, is ill-advised in all but very low traffic sites), it is important that the <tt class="literal">Connection</tt> be explicitly closed when the session is destroyed.</p>
<p>
<a name="INDEX-1348"></a><a name="INDEX-1349"></a><a name="INDEX-1350"></a>The <tt class="literal">javax.servlet.http.HttpSessionBindingListener</tt> interface handles this task.  It includes two methods, <tt class="literal">valueBound()</tt> and <tt class="literal">valueUnbound()</tt>, that are called whenever the object that implements the interface is bound or unbound from a session, respectively. Each of these methods receives an <tt class="literal">HttpSessionBindingEvent</tt> object that provides the name of the object being bound/unbound and the session involved in the action.  Here is an object that implements the <tt class="literal">HttpSessionBindingListener</tt> interface in order to make sure that a database connection is closed properly:</p>

<blockquote>
<pre class="programlisting">
class ConnectionHolder implements HttpSessionBindingListener {

  java.sql.Connection dbCon;

  public ConnectionHolder(java.sql.Connection con) {
    dbCon = con;
  }

  public void valueBound(HttpSessionBindingEvent event) {
    // Do nothing
  }

  public void valueUnbound(HttpSessionBindingEvent event) {
    dbCon.close();
  }
}</pre>
</blockquote>


<a name="ch05-pgfid-348797"></a>
<h3 class="sect2">5.8.2. Session Contexts</h3>
<p>Version 2.0 of the Servlet API included the
<tt class="literal">getContext()</tt> method of
<tt class="literal">HttpSession</tt>, coupled with an interface named
<tt class="literal">HttpSessionContext</tt>.  Together, these allowed
servlets to access other sessions running in the same context.<a name="INDEX-1351"></a>
Unfortunately, this functionality also allowed a servlet to
accidentally expose all the session IDs in use on the server, meaning
that an outsider with knowledge could spoof a session.  To eliminate
this minor security risk, the session context functionality has been
deprecated in Version 2.1 of the Servlet API.</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_09.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.7. Cookies</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.9. Databases and Non-HTML Content</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
