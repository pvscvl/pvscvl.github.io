<html>
<head>
<title>Constants and Literals (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Constants and Literals">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_01.htm">Chapter 10: IDL Reference</a></td><td align="right" valign="top" width="172"><a href="ch10_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">10.5. Constants and Literals</h2>
<p>
<a name="INDEX-2309"></a><a name="INDEX-2310"></a><a name="INDEX-2311"></a>

Literals are explicit values inserted into IDL code. Sometimes a
  literal is used to specify a default value for an interface
  attribute or to declare the value for a constant. Literals can be
  boolean (<tt class="literal">TRUE</tt> or <tt class="literal">FALSE</tt>),
  numeric (integer, floating point, or fixed point), or
  character-based (a single character or a string). </p>
<p>Literals are most often used in IDL to initialize the values of
  constants. Constants are named variables that are restricted from
  being modified after being initialized. In IDL, a constant is
  declared using the syntax:</p>
<blockquote>
<pre class="programlisting">
// IDL
const <em class="replaceable">type</em> <em class="replaceable">identifier</em> = <em class="replaceable">value</em>;</pre>
</blockquote>
<p>where <em class="replaceable">type</em> is any valid basic data type or declared interface type, <em class="replaceable">identifier</em> is any valid IDL identifier, and <em class="replaceable">value</em> is any IDL expression that evaluates to a literal value. The initialization expression can be a simple literal or a complex expression combining multiple literals using logical or mathematical operators. You can declare a few useful numeric constants as follows, for example:</p>
<blockquote>
<pre class="programlisting">// IDL
const float half = 1 / 2;
const float quarter = 1 / 4;</pre>
</blockquote>
<p>
<a name="INDEX-2312"></a><a name="INDEX-2313"></a><a name="INDEX-2314"></a>
Most of the operators present in C/C++, such as addition (<tt class="literal">+</tt>), subtraction (<tt class="literal">-</tt>), multiplication (<tt class="literal">*</tt>), division (<tt class="literal">/</tt>), and the logical and bitwise operators (<tt class="literal">|</tt>, <tt class="literal">&amp;</tt>, <tt class="literal">^</tt>, <tt class="literal">||</tt>, <tt class="literal">&amp;&amp;</tt>, etc.) are supported by IDL.</p>
<a name="ch10-pgfid-962495"></a>
<h3 class="sect2">10.5.1. Mapping Constants to Java</h3>
<p>
<a name="INDEX-2315"></a><a name="INDEX-2316"></a><a name="INDEX-2317"></a>
If an IDL constant is declared within an interface definition, the constant is mapped to a <tt class="literal">public final static</tt> member on the corresponding Java interface. </p>
<p>If the IDL constant is declared outside an interface definition, a Java interface is created to hold the constant value as a <tt class="literal">public static final</tt> value. The generated interface has the same name as the IDL identifier given to the constant, and the static class member has the name <tt class="literal">value</tt>. Consider the following IDL constant declaration:</p>
<blockquote>
<pre class="programlisting">// IDL
const float PI = 3.14159;
interface GeometricOperators {
	...</pre>
</blockquote>
<p>This causes the generation of the following Java interface:</p>
<blockquote>
<pre class="programlisting">// Java
public final class PI {
    public static final float value = (float) (3.14159D);
}</pre>
</blockquote>
<p>In your Java code, you can reference the constant value using <tt class="literal">PI.value</tt>.</p>
<a name="ch10-pgfid-960234"></a>
<h3 class="sect2">10.5.2. Boolean Literals</h3>
<p>There are two boolean literals (naturally) in IDL. They are specified using the keywords <tt class="literal">TRUE</tt> and <tt class="literal">FALSE</tt>. Their IDL type is <tt class="literal">boolean</tt>. In Java, they are mapped to the <tt class="literal">boolean</tt> values <tt class="literal">true</tt> and <tt class="literal">false</tt>.</p>
<a name="ch10-pgfid-960680"></a>
<h3 class="sect2">10.5.3. Numeric Literals</h3>
<p>
<a name="INDEX-2318"></a><a name="INDEX-2319"></a><a name="INDEX-2320"></a>
Integer literals, floating-point literals, and fixed-point literals comprise numeric literals in IDL.</p>
<a name="ch10-pgfid-962383"></a>
<h3 class="sect3">10.5.3.1. Integer literals</h3>
<p>
<a name="INDEX-2321"></a>
An integer value in IDL can be declared in decimal, octal, or hexadecimal notation. Any sequence of digits that does not start with a zero is considered a decimal integer value. If the sequence is all digits but starts with a zero, it's assumed to be an octal value. If the literal starts with <tt class="literal">0X</tt> or <tt class="literal">0x</tt>, it's taken to be a hexadecimal value.</p>
<a name="ch10-pgfid-960238"></a>
<h3 class="sect3">10.5.3.2. Floating-point literals</h3>
<p>
<a name="INDEX-2322"></a>
A floating-point literal is a decimal integer, optionally followed by a decimal point and a fractional component, and/or by the letter <tt class="literal">e</tt> or <tt class="literal">E</tt> followed by an exponent expressed as a decimal integer. Either the fractional component (with the decimal point) or the exponent (with the <tt class="literal">e</tt> or <tt class="literal">E</tt>) must be present for the literal to be interpreted as a floating-point value and not an integer. Similarly, either the initial integer component or the decimal point must be present. So, for example, these are valid floating-point literals:</p>
<blockquote>
<pre class="programlisting">
2.34
0.314159e1
3E19
.0003413</pre>
</blockquote>
<a name="ch10-pgfid-960255"></a>
<h3 class="sect3">10.5.3.3. Fixed-point literals</h3>
<p>
<a name="INDEX-2323"></a>
A fixed-point literal consists of a decimal integer, optionally followed by a decimal point and fractional component (expressed as a decimal value), followed by the letter <tt class="literal">d</tt> or <tt class="literal">D</tt>. Either the integer component or the fractional component must be present. The decimal point is optional. The trailing <tt class="literal">d</tt> or <tt class="literal">D</tt> must be present in order for the literal to be interpreted as a fixed-point value. The following are all valid fixed-point literals:</p>
<blockquote>
<pre class="programlisting">
1.50d
.025d
1.333D
12d</pre>
</blockquote>
<a name="ch10-pgfid-960263"></a>
<h3 class="sect3">10.5.3.4. Mapping numeric literals to Java</h3>
<p>
<a name="INDEX-2324"></a><a name="INDEX-2325"></a><a name="INDEX-2326"></a>
Numeric literals are mapped by taking into account the context in which they are used. Typically, a literal initializes a constant, so the declared type of the constant has to be checked to determine whether the literal is valid for the type and how it should be mapped to a Java literal. For example, these two similar IDL constant declarations:</p>
<blockquote>
<pre class="programlisting">// IDL
const short largeVal = 2e5;
const float largeFloatVal = 2e5;</pre>
</blockquote>
<p>are mapped by Sun's <em class="emphasis">idltojava</em> compiler to these Java declarations:</p>
<blockquote>
<pre class="programlisting">// Java
public static final short largeVal = (short) (2e5D);
public static final float largeFloatVal = (float) (2e5D);</pre>
</blockquote>
<p>Sun's <em class="emphasis">idltojava</em> compiler doesn't do any type checking on the IDL literal before converting it to its Java form and inserting it into the cast operation shown previously. So it is possible for the <em class="emphasis">idltojava</em> compiler to generate invalid Java code. For example:</p>
<blockquote>
<pre class="programlisting">// IDL
const float literalTest = TRUE;</pre>
</blockquote>
<p>is converted without warning by <em class="emphasis">idltojava</em> to:</p>
<blockquote>
<pre class="programlisting">// Java
public static final float literalTest = (float)(true);</pre>
</blockquote>
<a name="ch10-pgfid-962388"></a>
<h3 class="sect2">10.5.4. Character Literals</h3>
<p>
<a name="INDEX-2327"></a><a name="INDEX-2328"></a><a name="INDEX-2329"></a>
A character literal is a character specification enclosed in
single quotes (e.g., <tt class="literal">'a'</tt>). Character
literals can be specified using only elements of the ISO 8859-1
<a name="INDEX-2330"></a>
character set. Some characters need to be specified with a sequence of
more than one character. These include characters that are
nonprintable and the single- and double-quote characters that delimit
string and character literals. These characters are specified with
escape sequences, which start with a backslash character
(<tt class="literal">\</tt>). <a href="#ch10-16387">Table 10-3</a> lists the escape
sequences supported by IDL and the nonprintable characters they
represent.</p>
<a name="ch10-16387"></a>
<h4 class="objtitle">Table 10-3. IDL Escape Sequences</h4>
<table border="1">
<tr>
<th>
<p>Escape Sequence</p>
</th><th>
<p>Meaning</p>
</th>
</tr>
<tr>
<td>
<p>
<tt class="literal">\a</tt>
</p>
</td><td>
<p>Alert</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">\\</tt>
</p>
</td><td>
<p>Backslash</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">\b</tt>
</p>
</td><td>
<p>Backspace</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">\r</tt>
</p>
</td><td>
<p>Carriage return</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">\"</tt>
</p>
</td><td>
<p>Double quote</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">\f</tt>
</p>
</td><td>
<p>Form feed</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">\x</tt><em class="replaceable">##</em><tt class="literal"></tt>(e.g., <tt class="literal">\x4e</tt>)</p>
</td><td>
<p>Hexadecimal number</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">\n</tt>
</p>
</td><td>
<p>Newline</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">\</tt><em class="replaceable">###</em><tt class="literal"></tt>(e.g., <tt class="literal">\012</tt>)</p>
</td><td>
<p>Octal number</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">\?</tt>
</p>
</td><td>
<p>Question mark</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">\'</tt>
</p>
</td><td>
<p>Single quote</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">\t</tt>
</p>
</td><td>
<p>Tab</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">\v</tt>
</p>
</td><td>
<p>Vertical tab</p>
</td>
</tr>
</table>
<p>
<a name="INDEX-2331"></a><a name="INDEX-2332"></a><a name="INDEX-2333"></a>
Character literals, including the escape sequences listed in <a href="#ch10-16387">Table 10-3</a>, are converted unchanged into Java literals.</p>
<a name="ch10-pgfid-960652"></a>
<h3 class="sect2">10.5.5. String Literals</h3>
<p>
<a name="INDEX-2334"></a><a name="INDEX-2335"></a>
A string literal is a sequence of characters delimited by double quote (<tt class="literal">"</tt>) characters. If two string literals are adjacent to each other in an IDL file, they are concatenated. So, in this example:</p>
<blockquote>
<pre class="programlisting">
// IDL
const string acctHolder = "Jim" "Farley";</pre>
</blockquote>
<p>the generated Java code is:<a href="#FOOTNOTE-3">[3]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-3"></a>
<p>[3]There appears to be an error in Sun's <em class="emphasis">idltojava</em> compiler (with the version released as of this writing, at least) that causes it to raise a syntax error when it encounters adjacent string literals. The IDL specification dictates the behavior as described here, though.</p>
</blockquote>
<blockquote>
<pre class="programlisting">
// Java
public static final String acctHolder = "Jim Farley";</pre>
</blockquote>
<p>If you want to use the double-quote character in a string literal, you have to use its escape sequence (see <a href="#ch10-16387">Table 10-3</a>).</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch10_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">10.4. Basic Data Types</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">10.6. Naming Scopes</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
