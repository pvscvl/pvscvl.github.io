<html>
<head>
<title>The javax.servlet Package (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The javax.servlet Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch24_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch24_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part3.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/part3.htm">Part 3: API Quick Reference</a></td><td align="right" valign="top" width="172"><a href="ch26_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch26_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 25.  The javax.servlet Package</h1>

<p>
<a name="INDEX-3134"></a><a name="INDEX-3135"></a>

The <tt class="literal">javax.servlet</tt> package is the core of the Servlet API. It contains the classes necessary for a standard, protocol-independent servlet.  Every servlet must implement the <tt class="literal">Servlet</tt> interface in one form or another. The abstract <tt class="literal">GenericServlet</tt> class provides the framework for developing basic servlets. The package also includes a variety of utility classes that communicate with the server and the client. <a href="#ch25-pgfid-780325">Figure 25-1</a> shows the class hierarchy of this package.</p>
<a name="ch25-pgfid-780325"></a>
<div class="figure">
<img alt="figure" src="figs/Jent.2501.gif" webstripperlinkwas="figs/Jent.2501.gif"></div>
<h4 class="objtitle">Figure 25-1. The javax.servlet package</h4>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>GenericServlet</b></font></td><td align="right"><font size="+1"><b>Servlets 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.servlet</b></font></td><td align="right"><font size="+1"><b><i>serializable</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3136"></a><a name="INDEX-3137"></a>

The <tt class="literal">GenericServlet</tt> class provides a basic implementation of the <tt class="literal">Servlet</tt> and <tt class="literal">ServletConfig</tt> interfaces.  If you are creating a protocol-independent servlet, you probably want to subclass this class rather than implement the <tt class="literal">Servlet</tt> interface directly. Note that the <tt class="literal">service()</tt> method is declared as abstract; this is the only method you have to override to implement a generic servlet.</p>
<p>
<a name="INDEX-3138"></a><a name="INDEX-3139"></a><tt class="literal">GenericServlet</tt> includes basic implementations of the <tt class="literal">init()</tt> and <tt class="literal">destroy()</tt> methods, which perform basic setup and cleanup tasks, respectively.  The <tt class="literal">init()</tt> method that takes a <tt class="literal">ServletConfig</tt> object stores that object for later use.  This means that if you override the method and fail to call the <tt class="literal">super.init(ServletConfig)</tt> method, you won't be able to use the <tt class="literal">ServletConfig</tt> methods later.  In Version 2.1 of the Servlet API, you can override a no-argument version of <tt class="literal">init()</tt> that is dispatched by the default <tt class="literal">init(ServletConfig)</tt> method of <tt class="literal">GenericServlet</tt>.</p>

<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">GenericServlet</b> implements Servlet, ServletConfig, Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">GenericServlet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.1</span></td><td align="left">public void <b class="function">init</b> () throws ServletException;</td><td align="right"><i> empty</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">log</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.1</span></td><td align="left">public void <b class="function">log</b> (String <i class="parameter">message</i>, Throwable <i class="parameter">t</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods implementing Servlet</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">destroy</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public ServletConfig <b class="function">getServletConfig</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getServletInfo</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">init</b> (ServletConfig <i class="parameter">config</i>) throws ServletException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">service</b> (ServletRequest <i class="parameter">req</i>, ServletResponse <i class="parameter">res</i>) throws ServletException, IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods implementing ServletConfig</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getInitParameter</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public java.util.Enumeration <b class="function">getInitParameterNames</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public ServletContext <b class="function">getServletContext</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->GenericServlet(Servlet,ServletConfig,Serializable)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">javax.servlet.http.HttpServlet</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RequestDispatcher</b></font></td><td align="right"><font size="+1"><b>Servlets 2.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.servlet</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3140"></a><a name="INDEX-3141"></a><a name="INDEX-3142"></a><a name="INDEX-3143"></a><tt class="literal">RequestDispatcher</tt> allows a servlet to delegate some or all of the processing of a request to another resource on the web server.  A <tt class="literal">RequestDispatcher</tt> object is retrieved by calling the <tt class="literal">getRequestDispatcher()</tt> method on the <tt class="literal">ServletContext</tt> object.  The <tt class="literal">forward()</tt> method passes a request on to another servlet for processing, while the <tt class="literal">include()</tt> method includes the output of another servlet in the output of the current servlet.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">RequestDispatcher</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">forward</b> (ServletRequest <i class="parameter">request</i>, ServletResponse <i class="parameter">response</i>) throws ServletException, IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">include</b> (ServletRequest <i class="parameter">request</i>, ServletResponse <i class="parameter">response</i>) throws ServletException, IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ServletContext.getRequestDispatcher()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Servlet</b></font></td><td align="right"><font size="+1"><b>Servlets 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.servlet</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3144"></a>

The <tt class="literal">Servlet</tt> interface defines the basic structure
of a servlet.  All servlets implement this interface, either directly
or by subclassing a class that does.  The interface declares the basic
servlet functionality: initializing a servlet, handling client
requests, and destroying a servlet.  </p>
<a name="INDEX-3145"></a>
<a name="INDEX-3146"></a>
<a name="INDEX-3147"></a>
<a name="INDEX-3148"></a>
<a name="INDEX-3149"></a>
<p>
<tt class="literal">init()</tt> is called when the servlet is first initialized.  Since <tt class="literal">init()</tt> creates resources the servlet can reuse, it is guaranteed to finish executing before the servlet handles any client requests.  The server calls the <tt class="literal">service()</tt> method for each client request.  The servlet interacts with the client via <tt class="literal">ServletRequest</tt> and <tt class="literal">ServletResponse</tt> objects passed to <tt class="literal">service()</tt>.  <tt class="literal">destroy()</tt> is called to clean up resources (such as database connections) or save state when the server shuts down.  The <tt class="literal">getServletInfo()</tt> method should return a <tt class="literal">String</tt> that describes a servlet, and the <tt class="literal">getServletConfig()</tt> method should return the <tt class="literal">ServletConfig</tt> object that was passed to the <tt class="literal">init()</tt> method.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">Servlet</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">destroy</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract ServletConfig <b class="function">getServletConfig</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getServletInfo</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">init</b> (ServletConfig <i class="parameter">config</i>) throws ServletException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">service</b> (ServletRequest <i class="parameter">req</i>, ServletResponse <i class="parameter">res</i>) throws ServletException, IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">GenericServlet</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">UnavailableException.UnavailableException()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ServletContext.getServlet(), UnavailableException.getServlet()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ServletConfig</b></font></td><td align="right"><font size="+1"><b>Servlets 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.servlet</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>

A <tt class="literal">ServletConfig</tt> object passes configuration information from the server to a servlet.  <tt class="literal">ServletConfig</tt> supports initialization parameters (also known simply as init parameters) defined by the server administrator for a particular servlet.  These parameters are accessed via the <tt class="literal">getInitParameter()</tt> and <tt class="literal">getInitParameterNames()</tt> methods.   <tt class="literal">ServletConfig</tt> also includes a <tt class="literal">ServletContext</tt> object, accessible via <tt class="literal">getServletContext()</tt>, for direct interaction with the server.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">ServletConfig</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getInitParameter</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.util.Enumeration <b class="function">getInitParameterNames</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract ServletContext <b class="function">getServletContext</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">GenericServlet</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">GenericServlet.init(), Servlet.init()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">GenericServlet.getServletConfig(), Servlet.getServletConfig()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ServletContext</b></font></td><td align="right"><font size="+1"><b>Servlets 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.servlet</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3150"></a><a name="INDEX-3151"></a><a name="INDEX-3152"></a><a name="INDEX-3153"></a><a name="INDEX-3154"></a><a name="INDEX-3155"></a><tt class="literal">ServletContext</tt> defines methods that allow a servlet
to interact with the host server. This includes reading server-specific
attributes, finding information about particular files located on the


server, and writing to the server log files. If there are several
virtual servers running, each one may return a different
<tt class="literal">ServletContext</tt>.</p>
<p>Servlets can also use <tt class="literal">ServletContext</tt> to interact with other servlets loaded on the same server. In Version 1.0 of the Servlet API, this was done via the <tt class="literal">getServlets()</tt> method. In Version 2.0, <tt class="literal">getServlets()</tt> was deprecated in favor of <tt class="literal">getServlet()</tt> and <tt class="literal">getServletNames()</tt>. In Version 2.1, <tt class="literal">getServlet()</tt> and <tt class="literal">getServletNames()</tt> were both deprecated in favor of the new <tt class="literal">setAttribute()</tt> and <tt class="literal">getAttribute()</tt> methods.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">ServletContext</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">getAttribute</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.1</span></td><td align="left">public abstract java.util.Enumeration <b class="function">getAttributeNames</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.1</span></td><td align="left">public abstract ServletContext <b class="function">getContext</b> (String <i class="parameter">uripath</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.1</span></td><td align="left">public abstract int <b class="function">getMajorVersion</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getMimeType</b> (String <i class="parameter">file</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.1</span></td><td align="left">public abstract int <b class="function">getMinorVersion</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getRealPath</b> (String <i class="parameter">path</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.1</span></td><td align="left">public abstract RequestDispatcher <b class="function">getRequestDispatcher</b> (String <i class="parameter">urlpath</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.1</span></td><td align="left">public abstract java.net.URL <b class="function">getResource</b> (String <i class="parameter">path</i>) throws java.net.MalformedURLException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.1</span></td><td align="left">public abstract java.io.InputStream <b class="function">getResourceAsStream</b> (String <i class="parameter">path</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getServerInfo</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">log</b> (String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.1</span></td><td align="left">public abstract void <b class="function">log</b> (String <i class="parameter">message</i>, Throwable <i class="parameter">throwable</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.1</span></td><td align="left">public abstract void <b class="function">removeAttribute</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.1</span></td><td align="left">public abstract void <b class="function">setAttribute</b> (String <i class="parameter">name</i>, Object <i class="parameter">object</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract Servlet <b class="function">getServlet</b> (String <i class="parameter">name</i>) throws ServletException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.0#</span></td><td align="left">public abstract java.util.Enumeration <b class="function">getServletNames</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract java.util.Enumeration <b class="function">getServlets</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.0#</span></td><td align="left">public abstract void <b class="function">log</b> (Exception <i class="parameter">exception</i>, String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">GenericServlet.getServletContext(), ServletConfig.getServletContext(), ServletContext.getContext()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ServletException</b></font></td><td align="right"><font size="+1"><b>Servlets 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.servlet</b></font></td><td align="right"><font size="+1"><b><i>serializable checked</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3156"></a>

A generic <tt class="literal">Exception</tt> class used for basic servlet errors. In version 2.1, a servlet can specify a <tt class="literal">Throwable</tt> root cause for this exception (using the constructors that accept <tt class="literal">Throwable</tt> parameters).  The root cause can be retrieved with the <tt class="literal">getRootCause()</tt> method.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ServletException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.0</span></td><td align="left">public <b class="function">ServletException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.1</span></td><td align="left">public <b class="function">ServletException</b> (Throwable <i class="parameter">rootCause</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ServletException</b> (String <i class="parameter">message</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.1</span></td><td align="left">public <b class="function">ServletException</b> (String <i class="parameter">message</i>, Throwable <i class="parameter">rootCause</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.1</span></td><td align="left">public Throwable <b class="function">getRootCause</b> ();</td><td align="right"><i> default:null</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>

<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->ServletException</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">UnavailableException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">GenericServlet.{init(), service()}, RequestDispatcher.{forward(), include()}, Servlet.{init(), service()}, ServletContext.getServlet(), javax.servlet.http.HttpServlet.{doDelete(), doGet(), doOptions(), doPost(), doPut(), doTrace(), service()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ServletInputStream</b></font></td><td align="right"><font size="+1"><b>Servlets 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.servlet</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3157"></a><a name="INDEX-3158"></a><tt class="literal">ServletInputStream</tt> provides an input stream for reading data from a client request.  A servlet can get a <tt class="literal">ServletInputStream</tt> by calling the <tt class="literal">getInputStream()</tt> method of <tt class="literal">ServletRequest</tt>.  While <tt class="literal">ServletInputStream</tt> does contain a <tt class="literal">readLine()</tt> method for reading textual data one line at a time, this functionality was taken over by <tt class="literal">BufferedReader</tt> objects and the <tt class="literal">getReader()</tt> method of <tt class="literal">ServletRequest</tt> in Version 2.0 of the Servlet API.  Thus, <tt class="literal">ServletInputStream</tt> should be used only to read binary data, generally in the context of a filtering servlet.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">ServletInputStream</b> extends java.io.InputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">ServletInputStream</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">readLine</b> (byte ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.InputStream-->ServletInputStream</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">javax.servlet.http.HttpUtils.parsePostData()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ServletRequest.getInputStream()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ServletOutputStream</b></font></td><td align="right"><font size="+1"><b>Servlets 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.servlet</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<tt class="literal"><a name="INDEX-3159"></a><a name="INDEX-3160"></a><a name="INDEX-3161"></a>

ServletOutputStream</tt> provides an output stream for sending
binary data back to a client. A servlet can get a
<tt class="literal">ServletOutputStream</tt> by calling the
<tt class="literal">getOutputStream()</tt> method of
<tt class="literal">ServletResponse</tt>.
<tt class="literal">ServletOutputStream</tt> was the only available output
method in Version 1.0 of the Servlet API.  For text and HTML output,
it has been supplanted by <tt class="literal">PrintWriter</tt> objects
produced by the <tt class="literal">getWriter()</tt> method of
<tt class="literal">ServletResponse</tt>.  The various
<tt class="literal">print()</tt> and <tt class="literal">println()</tt> methods
should therefore be regarded as legacies.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">ServletOutputStream</b> extends java.io.OutputStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">ServletOutputStream</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (long <i class="parameter">l</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (float <i class="parameter">f</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (double <i class="parameter">d</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (int <i class="parameter">i</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (String <i class="parameter">s</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (boolean <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">print</b> (char <i class="parameter">c</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (long <i class="parameter">l</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (float <i class="parameter">f</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (double <i class="parameter">d</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (int <i class="parameter">i</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (String <i class="parameter">s</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (boolean <i class="parameter">b</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">println</b> (char <i class="parameter">c</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.OutputStream-->ServletOutputStream</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ServletResponse.getOutputStream()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ServletRequest</b></font></td><td align="right"><font size="+1"><b>Servlets 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.servlet</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3162"></a><a name="INDEX-3163"></a><a name="INDEX-3164"></a><a name="INDEX-3165"></a><a name="INDEX-3166"></a><a name="INDEX-3167"></a><a name="INDEX-3168"></a><a name="INDEX-3169"></a><a name="INDEX-3170"></a><a name="INDEX-3171"></a><a name="INDEX-3172"></a><a name="INDEX-3173"></a><a name="INDEX-3174"></a><a name="INDEX-3175"></a><a name="INDEX-3176"></a><a name="INDEX-3177"></a>
A <tt class="literal">ServletRequest</tt> object encapsulates information about a client request.  The server passes a <tt class="literal">ServletRequest</tt> object to the <tt class="literal">service()</tt> method of a servlet.  <tt class="literal">ServletRequest</tt> provides access to request parameters, such as form values or other request-specific parameters.  These are accessed using the <tt class="literal">getParameterNames()</tt>, <tt class="literal">getParameter()</tt>, and <tt class="literal">getParameterValues()</tt> methods. Raw request data can be read by the <tt class="literal">getReader()</tt> method (for textual data) and the <tt class="literal">getInputStream()</tt> method (for binary data). The <tt class="literal">getContentType()</tt>, <tt class="literal">getContentLength()</tt>, and <tt class="literal">getCharacterEncoding()</tt> methods can help retrieve this information. Other methods provide information about the client (<tt class="literal">getRemoteAddr()</tt>, <tt class="literal">getRemoteHost()</tt>), the request itself (<tt class="literal">getScheme()</tt>, <tt class="literal">getProtocol()</tt>), and the server (<tt class="literal">getServerName()</tt>, <tt class="literal">getServerPort()</tt>).  Version 2.1 also adds the <tt class="literal">getAttribute()</tt> and <tt class="literal">setAttribute()</tt> methods, which are generally used with the new <tt class="literal">RequestDispatcher</tt> interface.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">ServletRequest</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract Object <b class="function">getAttribute</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.1</span></td><td align="left">public abstract java.util.Enumeration <b class="function">getAttributeNames</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.0</span></td><td align="left">public abstract String <b class="function">getCharacterEncoding</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getContentLength</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getContentType</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract ServletInputStream <b class="function">getInputStream</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getParameter</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.util.Enumeration <b class="function">getParameterNames</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String[ ] <b class="function">getParameterValues</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getProtocol</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.0</span></td><td align="left">public abstract BufferedReader <b class="function">getReader</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getRemoteAddr</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getRemoteHost</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getScheme</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getServerName</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">getServerPort</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.1</span></td><td align="left">public abstract void <b class="function">setAttribute</b> (String <i class="parameter">key</i>, Object <i class="parameter">o</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract String <b class="function">getRealPath</b> (String <i class="parameter">path</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">javax.servlet.http.HttpServletRequest</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">GenericServlet.service(), RequestDispatcher.{forward(), include()}, Servlet.service(), javax.servlet.http.HttpServlet.service()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ServletResponse</b></font></td><td align="right"><font size="+1"><b>Servlets 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.servlet</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3178"></a><a name="INDEX-3179"></a><a name="INDEX-3180"></a><a name="INDEX-3181"></a><a name="INDEX-3182"></a>

The <tt class="literal">ServletResponse</tt> object sends MIME-encoded data
back to the client.  The interface defines a
<tt class="literal">getOutputStream()</tt> method that returns a
<tt class="literal">ServletOutputStream</tt> for sending binary data and a
<tt class="literal">getWriter()</tt> method that returns a
<tt class="literal">PrintWriter</tt> for sending textual data.  The
<tt class="literal">setContentType()</tt> and
<tt class="literal">setContentLength()</tt> methods can explicitly set the
content type and content length (often necessary for keep-alive
connections and other tasks).  If you call
<tt class="literal">setContentType()</tt>, you should do 


so before you call <tt class="literal">getWriter()</tt>, as
<tt class="literal">getWriter()</tt> consults the content type to determine
which charset to use.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">ServletResponse</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.0</span></td><td align="left">public abstract String <b class="function">getCharacterEncoding</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract ServletOutputStream <b class="function">getOutputStream</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">2.0</span></td><td align="left">public abstract PrintWriter <b class="function">getWriter</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setContentLength</b> (int <i class="parameter">len</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">setContentType</b> (String <i class="parameter">type</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">javax.servlet.http.HttpServletResponse</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">GenericServlet.service(), RequestDispatcher.{forward(), include()}, Servlet.service(), javax.servlet.http.HttpServlet.service()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SingleThreadModel</b></font></td><td align="right"><font size="+1"><b>Servlets 2.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.servlet</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3183"></a><a name="INDEX-3184"></a><tt class="literal">SingleThreadModel</tt> is a tag interface that tells the server to create a pool of servlet instances to serve individual requests.  In this case, the server ensures that each instance of the servlet handles only one service request at a time.  <tt class="literal">SingleThreadModel</tt> provides easy thread safety, but imposes performance penalties.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public interface <b class="classname">SingleThreadModel</b>  {</td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>UnavailableException</b></font></td><td align="right"><font size="+1"><b>Servlets 1.0</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>javax.servlet</b></font></td><td align="right"><font size="+1"><b><i>serializable checked</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-3185"></a>

An <tt class="literal">UnavailableException</tt> indicates that a servlet is unable to handle client requests, either temporarily or permanently.  To specify temporary unavailability, use the three-argument constructor and specify the duration of the servlet's downtime.  If a servlet specifies temporary unavailability, the server may (but is not required to) attempt to reload the servlet after the specified interval.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">UnavailableException</b> extends ServletException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnavailableException</b> (Servlet <i class="parameter">servlet</i>, String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UnavailableException</b> (int <i class="parameter">seconds</i>, Servlet <i class="parameter">servlet</i>, String <i class="parameter">msg</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Servlet <b class="function">getServlet</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">getUnavailableSeconds</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">isPermanent</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->ServletException-->UnavailableException</tt>
</p>
</div>
<a name="INDEX-3186"></a>
<a name="INDEX-3187"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch24_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch24_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch26_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch26_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">24.1. The javax.naming.spi Package</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">26. The javax.servlet.http Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
