<html>
<head>
<title>Interface Declarations (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Interface Declarations">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_09.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_01.htm">Chapter 10: IDL Reference</a></td><td align="right" valign="top" width="172"><a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch11_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">10.10. Interface Declarations</h2>
<p>
<a name="INDEX-2400"></a>
An IDL interface is just a collection of data attributes and methods that define the semantics of the interface. Declaring an interface is another way to create a new data type in IDL, but unlike structs and unions, an interface can have both data members and methods that can be called on objects of its type. An interface is also a name-scoping construct, similar to a module. You can declare an IDL interface and simply include a set of constants you want associated with that interface name. In this case, you have to specify the interface scope in order to refer to the constants from within other scopes.</p>
<p>An interface consists of the following elements:</p>

<blockquote>
<pre class="programlisting">
// IDL
interface <em class="replaceable">identifier</em> [: <em class="replaceable">inheritance-spec</em>] {
	<em class="replaceable">interface-body</em>
};</pre>
</blockquote>
<p>The interface identifier can be any valid IDL identifier. The body of the interface can contain any of the following constructs:</p>
<ul>
<li>
<p>A user-defined type (<tt class="literal">struct</tt>, <tt class="literal">union</tt>, <tt class="literal">typedef</tt>, <tt class="literal">enum</tt>)</p>
</li>
<li>
<p>A constant declaration</p>
</li>
<li>
<p>An interface-specific exception declaration</p>
</li>
<li>
<p>Data attributes</p>
</li>
<li>
<p>Methods or operations</p>
</li>
</ul>
<p>We've already seen the syntax for the first three items in earlier sections of this IDL overview. They become part of an interface simply by being declared within the braces of the body of the interface. In the next few sections, we'll see how to define interface attributes and methods, and then we'll look at how inheritance of IDL interfaces works.</p>
<a name="ch10-pgfid-962598"></a>
<h3 class="sect2">10.10.1. Attributes</h3>
<p>
<a name="INDEX-2401"></a><a name="INDEX-2402"></a>
Attributes are data members that belong to an interface. To readers familiar with JavaBeans, declaring an attribute on an interface is roughly analogous to adding a property to a JavaBeans component. An attribute in an IDL interface indicates that the interface provides some way to read and (in most cases) write the attribute value.</p>
<p>The syntax for declaring an attribute within an interface body is:</p>
<blockquote>
<pre class="programlisting">
// IDL
[readonly] attribute <em class="replaceable">type</em> <em class="replaceable">identifier</em> [, <em class="replaceable">identifier</em>, ...];</pre>
</blockquote>
<p>
<a name="INDEX-2403"></a>
The attribute is signified by the <tt class="literal">attribute</tt> keyword, followed by a type specification for the attribute and an identifier name. You can declare multiple attributes of the same type by providing their identifiers in a comma-delimited list after the type specifier:</p>
<blockquote>
<pre class="programlisting">
// IDL
attribute short coord_x, coord_y, coord_z;</pre>
</blockquote>
<p>The type specifier can be any valid type, including IDL basic types, other interfaces, and user-defined types previously defined or declared in a <tt class="literal">typedef</tt>. For example:</p>
<blockquote>
<pre class="programlisting">
// IDL
enum ErrorCode { BadValue, DimensionError, Overflow, Underflow };

interface AttrTest {
  struct coord {
    short x;
    short y;
  };
  attribute ErrorCode lastError;
  readonly attribute coord COG;
  attribute string name;
};</pre>
</blockquote>
<p>The optional <tt class="literal">readonly</tt> keyword can precede the
  attribute declaration. This indicates that the attribute can be read
  only externally and not directly written. This typically means that
  the value of this attribute is set only as a side effect of some other method(s). In our example, the <tt class="literal">COG</tt> attribute may represent the center-of-gravity of some geometric object, and we'll only want that to be recomputed as the result of other methods that change the geometry of the object.</p>
<a name="ch10-pgfid-962597"></a>
<h3 class="sect2">10.10.2. Methods</h3>
<p>
<a name="INDEX-2404"></a><a name="INDEX-2405"></a>
&gt;Methods (or operations, to use the IDL vernacular) provide a way for remote clients to interact with the objects defined by an interface. A method declaration in IDL is composed of an identifier for the method, the type of data returned by the method, and a list of parameters that the method accepts. An IDL method can also (optionally) be declared to use specific call semantics, to possibly raise certain exceptions during its execution, and to accept certain context variables from the client environment.</p>
<p>The syntax of a method declaration within an IDL interface is:</p>
<blockquote>
<pre class="programlisting">
// IDL
[<em class="replaceable">call-semantics</em>] <em class="replaceable">return-type</em> <em class="replaceable">identifier</em> ([<em class="replaceable">param</em>, <em class="replaceable">param</em>, ...]) 
  [<em class="replaceable">exception-clause</em>] [<em class="replaceable">context-clause</em>];</pre>
</blockquote>
<p>The only required elements in a method declaration are the method identifier and the return type, so an example of the simplest form of method declaration is:</p>
<blockquote>
<pre class="programlisting">
// IDL
boolean doSomething();</pre>
</blockquote>
<p>This method simply returns a <tt class="literal">boolean</tt> flag when it is complete. It doesn't accept any arguments, uses the default call semantics, raises no nonstandard exceptions, and accepts no context variables from the client environment.</p>
<p>The return type for an IDL method can be any valid type, including user-defined types such as structs and other interfaces. If a method doesn't return any data, the return type should be declared as <tt class="literal">void</tt>. </p>
<p>The identifier for a method is a valid IDL identifier. In IDL, two methods in the same interface cannot have the same identifier (i.e., there is no method overloading, as there is in C++ and Java). </p>
<a name="ch10-pgfid-963459"></a>
<h3 class="sect3">10.10.2.1. Parameters</h3>
<p>
<a name="INDEX-2406"></a><a name="INDEX-2407"></a>
The parameters for a method on an interface are declared within the parentheses following the method identifier and are separated by commas. The syntax for an individual method parameter is:</p>
<blockquote>
<pre class="programlisting">
<em class="replaceable">arg-direction</em> <em class="replaceable">arg-type</em> <em class="replaceable">identifier</em>
</pre>
</blockquote>
<p>The identifier is any valid IDL identifier, and the parameter type is any valid IDL type, including user-defined types. </p>
<p>The direction specification indicates whether the parameter is passed into the server, returned from the server, or both. The direction specification can have one of three values: <tt class="literal">in</tt>, <tt class="literal">out</tt>, or <tt class="literal">inout</tt>. An parameter tagged as <tt class="literal">in</tt> is only passed from the client to the server object. An parameter tagged as <tt class="literal">out</tt> is not taken from the client, but its value is set by the server and returned if the method returns successfully. An <tt class="literal">inout</tt> parameter is passed in both directions; the data from the client is passed to the server, and the server may modify the data and have the updates returned back to the client if the method returns successfully.</p>
<p>Here's a modified method declaration for <tt class="literal">doSomething()</tt> that specifies some parameters:</p>
<blockquote>
<pre class="programlisting">
boolean doSomething(in string whatToDo, inout string whatToDoItTo);</pre>
</blockquote>
<p>The first parameter tells the server object what to do, so it is
input-only. The second parameter is the thing to be acted upon, so it is declared as <tt class="literal">inout</tt> to allow the modified object to be passed back to the client.</p>
<p>If a method raises an exception during its execution, the values of any <tt class="literal">out</tt> or <tt class="literal">inout</tt> parameters to the method are undefined. They may or may not have been modified by the method before the exception was raised, and execution was halted.</p>
<a name="ch10-pgfid-963460"></a>
<h3 class="sect3">10.10.2.2. Exceptions</h3>
<p>
<a name="INDEX-2408"></a><a name="INDEX-2409"></a>
If a method on an interface can raise any exceptions during its execution, you have to declare this in IDL by adding a clause to the method declaration that lists all the exceptions that can be raised by the method. This is similar to the <tt class="literal">throws</tt> clause on Java methods. The syntax for the <tt class="literal">raises</tt> clause looks like:</p>
<blockquote>
<pre class="programlisting">// IDL
raises (<em class="replaceable">exception-type</em>, <em class="replaceable">exception-type</em>, ...)</pre>
</blockquote>
<p>Every exception you list in this clause has to be defined earlier in
the IDL file. </p>
<p>
<a name="INDEX-2410"></a>
Every method that you declare on an IDL interface can potentially throw one of the standard ORB exceptions we mentioned earlier (see <a href="ch10_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_08.htm">Table 10-4</a>). You cannot list these standard exceptions in the <tt class="literal">raises</tt> clause for your methods.</p>
<p>As an example, let's specify a <tt class="literal">BadDirective</tt> exception for our <tt class="literal">doSomething()</tt> method, which is raised if the client passes in a string directive the server object doesn't understand. We can modify the method declaration to look like the this:</p>
<blockquote>
<pre class="programlisting">// IDL
boolean doSomething(in string whatToDo, inout string whatToDoItTo)
	raises (BadDirective);</pre>
</blockquote>
<p>Again, we must have declared the <tt class="literal">BadDirective</tt> exception and any data it contains earlier in the IDL file.</p>
<a name="ch10-pgfid-963461"></a>
<h3 class="sect3">10.10.2.3. Context values</h3>
<p>
<a name="INDEX-2411"></a><a name="INDEX-2412"></a><a name="INDEX-2413"></a>
IDL supports the concept of a client context, which can contain name/value pairs that describe the client's environment in some way. You might have an authenticated username stored in the client's context, for example. The name of a context value is a string, and its value is an <tt class="literal">Any</tt> object. The interface to the context is provided by the IDL <tt class="literal">Context</tt> interface, and a mapping of this interface must be provided in any language-specific binding of the CORBA standard.</p>
<p>You can add a context clause to your method declarations that indicates which client context variables should be propagated to the server when the method is invoked. The server object can then query these context variables during the execution of the method. The syntax for adding a context clause to your method declaration is:</p>
<blockquote>
<pre class="programlisting">// IDL
context (<em class="replaceable">var-name</em>, <em class="replaceable">var-name</em>, ...)</pre>
</blockquote>
<p>Each <em class="replaceable">var-name</em> is a string literal that names the context variable to be propagated to the server when the method is called.</p>
<p>Suppose that when we invoke our <tt class="literal">doSomething()</tt> method, we want to be able to log who is making the request. We can look for a <tt class="literal">username</tt> variable in the client context and assume it is the authenticated identity of the client. We can specify that this context variable should be included in the method call by adding a context clause to our method declaration:</p>
<blockquote>
<pre class="programlisting">
// IDL
boolean doSomething(in string whatToDo, inout string whatToDoItTo)
	raises (BadDirective) context ("username");</pre>
</blockquote>
<p>A Java client might use this method like so:</p>
<blockquote>
<pre class="programlisting">
// Java
// Get the context
Context ctx = ORB.get_default_context();

// Add a username to the context
Any username = new Any();
username.insert_string("JimF");
ctx.set_one_value("username", username);

// Call the remote method
obj.doSomething("anything", "entity");</pre>
</blockquote>
<p>Since we declared the <tt class="literal">doSomething()</tt> method to include the <tt class="literal">username</tt> context variable in its invocations, this variable appears in the server's context and can be queried during execution of the method.<a href="#FOOTNOTE-5">[5]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-5"></a>
<p>[5]<a name="INDEX-2414"></a><a name="INDEX-2415"></a><a name="INDEX-2416"></a><a name="INDEX-2417"></a>
Sun's implementation of the Java IDL binding (including its <em class="emphasis">idltojava</em> compiler) does not support context variables. The <tt class="literal">Context</tt> interface is available in the Java IDL API, but context clauses on IDL methods are not represented in the generated Java code, and no context data is transferred to the server.</p>
</blockquote>
<p>You might wonder when this context feature should be used, as opposed to just adding a method argument to the method declaration. I could have just as easily added another string argument to my declaration for the <tt class="literal">doSomething()</tt> method:</p>
<blockquote>
<pre class="programlisting">
boolean doSomething(in string whatToDo, inout string whatToDoItTo, 
	in string username) raises BadDirective;</pre>
</blockquote>
<p>One argument for using context variables is to make things easier on the client when certain data for a method is optional. Rather than including an explicit argument and forcing the user to add a nil value of some kind to the method call (<tt class="literal">null</tt> in Java, for example), you can make the optional data a context variable, and the user can choose to set it or not. In most cases, though, you'll find that context variables are used rarely, if at all.</p>
<a name="ch10-pgfid-963462"></a>
<h3 class="sect3">10.10.2.4. Call semantics</h3>
<p>
<a name="INDEX-2418"></a><a name="INDEX-2419"></a><a name="INDEX-2420"></a><a name="INDEX-2421"></a>
If you don't specify any call semantics at the start of your method declaration, the default semantics is "at-most-once." This means that if a method call returns with no exceptions, the method was called a single time on the server object. If an exception is raised, the method was called at most once (the exception occurred either before the method was invoked, or during execution of the method). </p>
<p>You can choose to use alternate call semantics for your method by including a call attribute at the start of your method declaration. In the current CORBA standard, only a single alternative, called "best-effort" semantics, is available. In this case, whether the method call returns successfully or not, there's no guarantee that the method was actually invoked on the server object. The difference between the default semantics and "best-effort" semantics is roughly equivalent to the difference between TCP and UDP IP network connections and their handling of data packets.</p>
<p>
<a name="INDEX-2422"></a><a name="INDEX-2423"></a>
You specify best-effort call semantics by adding the keyword <tt class="literal">oneway</tt> to the start of your method declaration:</p>
<blockquote>
<pre class="programlisting">
// IDL
oneway void tryToDoSomething(in whatToDo);</pre>
</blockquote>
<p>If you specify that a method is <tt class="literal">oneway</tt>, the return type of the method has to be <tt class="literal">void</tt>, and it can't have any <tt class="literal">out</tt> or <tt class="literal">inout</tt> arguments. The method is effectively called asynchronously, so the client can't synchronously receive return data from the server object.</p>
<a name="ch10-pgfid-960689"></a>
<h3 class="sect2">10.10.3. Interface Inheritance</h3>
<p>
<a name="INDEX-2424"></a><a name="INDEX-2425"></a><a name="INDEX-2426"></a><a name="INDEX-2427"></a>
You can inherit attributes and methods from another IDL interface by deriving your interface from it. The syntax for declaring the inheritance of an interface in its header is:</p>
<blockquote>
<pre class="programlisting">
interface <em class="replaceable">identifier</em> : <em class="replaceable">parent-interface</em>, <em class="replaceable">parent-interface</em>, ... {</pre>
</blockquote>
<p>The parent interfaces can be any pre-defined interfaces, in the same module as this interface or in different modules. If the parent interfaces are from other modules, you need to use the <tt class="literal">::</tt> scope specifier to identify them. </p>
<a name="ch10-pgfid-963632"></a>
<h3 class="sect3">10.10.3.1. Method and attribute inheritance</h3>
<p>
<a name="INDEX-2428"></a><a name="INDEX-2429"></a><a name="INDEX-2430"></a>
A derived interface inherits all the attributes and methods from its parent interfaces. Although IDL allows for multiple inheritance, it's illegal to have two inherited attributes or methods with the same identifier. You also can't declare an attribute or method within your interface with the same name as an inherited attribute or method (i.e., you cannot <em class="emphasis">overload</em> a method or attribute). Say you have two interfaces declared as follows:</p>
<blockquote>
<pre class="programlisting">
// IDL
interface A {
	boolean f(int float x);
};

interface B {
	void f();
};</pre>
</blockquote>
<p>You cannot define a new interface that derives from both these interfaces, since the definition of the method <tt class="literal">f()</tt> would be ambiguous. Note that, unlike C++ and Java, IDL only uses the name for the method as its unique identifier, and not the entire method signature. This rule is a result of IDL's multilanguage support, since some languages may be similarly limited.</p>
<a name="ch10-pgfid-963633"></a>
<h3 class="sect3">10.10.3.2. Constant, type, and exception inheritance</h3>
<p>
<a name="INDEX-2431"></a><a name="INDEX-2432"></a><a name="INDEX-2433"></a>
A derived interface also inherits any constants, user-defined types, and exceptions defined in its parent interfaces. They can be referred to in the derived interface as if they had been defined within the interface. For example, say we define the following base interface:</p>
<blockquote>
<pre class="programlisting">
// IDL
interface Server {
	exception ServiceInterrupted {};
	boolean doSomething(in string what) raises (ServiceInterrupted);
};</pre>
</blockquote>
<p>We can use the <tt class="literal">ServiceInterrupted</tt> exception defined within the <tt class="literal">Server</tt> interface in another interface by naming its scope:</p>
<blockquote>
<pre class="programlisting">
// IDL
interface PrintServer {
	boolean printSomething(in string what) 
		raises (Server::ServiceInterrupted);
};</pre>
</blockquote>
<p>Alternately, we can derive the <tt class="literal">PrintServer</tt> from the <tt class="literal">Server</tt> interface, and then the exception can be used as if it existed in the <tt class="literal">PrintServer</tt> scope:</p>
<blockquote>
<pre class="programlisting">
// IDL
interface PrintServer : Server {
  boolean printSomething(in string what) raises (ServiceInterrupted);
};</pre>
</blockquote>
<p>
<a name="INDEX-2434"></a><a name="INDEX-2435"></a>
It is legal to define a constant, type, or exception in a
derived interface that uses the same name as one of these things in
its parent interface. If you do this, though, you need to refer to
them unambiguously in your interface declaration, using fully scoped names if necessary. If you declare your own <tt class="literal">ServiceInterrupted</tt> exception in the <tt class="literal">PrintServer</tt> interface, for example, you need to provide a scope for the exception in the <tt class="literal">raises</tt> clause, in order for the IDL compiler to know which version you're referring to:</p>
<blockquote>
<pre class="programlisting">
// IDL
interface PrintServer : Server {
	exception ServiceInterrupted { string printerName; };
	boolean printSomething(in string what)
		raises (PrintServer::ServiceInterrupted);</pre>
</blockquote>
<p>If you don't, the IDL compiler throws back an error about <tt class="literal">ServiceInterrupted</tt> being ambiguous.</p>
<a name="ch10-pgfid-963641"></a>
<h3 class="sect3">10.10.3.3. IDL early binding</h3>
<p>
<a name="INDEX-2436"></a><a name="INDEX-2437"></a><a name="INDEX-2438"></a><a name="INDEX-2439"></a><a name="INDEX-2440"></a>
It's important to realize that IDL does early binding of constants, user-defined types, and exceptions as it compiles your IDL. This means that the definition of a constant, type, or exception is bound to a particular reference within an interface as it's encountered in your IDL file, not after all definitions have been examined. Consider the following IDL definitions:</p>
<blockquote>
<pre class="programlisting">
// IDL
struct Coord {
	short x;
	short y;
};

interface GeometricObj {
	attribute Coord cog;
};

interface GeometricObj3D : GeometricObj {
	struct Coord {
		short x;
		short y;
		short z;
	};
	attribute Coord cog3D;
};</pre>
</blockquote>
<p>The <tt class="literal">cog</tt> attribute in the <tt class="literal">GeometricObj</tt> interface is off the global <tt class="literal">Coord</tt> type (with <tt class="literal">x</tt> and <tt class="literal">y</tt> members only), since at the time the <tt class="literal">cog</tt> attribute is encountered in the IDL file, this is the binding definition for <tt class="literal">Coord</tt>. The <tt class="literal">GeometricObj3D</tt> interface inherits this attribute with this type. However, the <tt class="literal">cog3D</tt> attribute declared in the <tt class="literal">GeometricObj3D</tt> interface is of the <tt class="literal">GeometricObj3D::Coord</tt> type (with <tt class="literal">x</tt>, <tt class="literal">y</tt>, and <tt class="literal">z</tt> members), since at that point, the <tt class="literal">Coord</tt> struct within the <tt class="literal">GeometricObj3D</tt> scope has been defined and is the default reference of the relative <tt class="literal">Coord</tt> type used in the cog3D declaration.</p>
<a name="ch10-pgfid-963488"></a>
<h3 class="sect2">10.10.4. Mapping Interfaces to Java</h3>
<p>
<a name="INDEX-2441"></a><a name="INDEX-2442"></a>
As you might expect, each interface you define in IDL is mapped
to a <tt class="literal">public</tt> interface in Java. Helper and holder
class are also generated for each interface; the names of these
  interfaces are 


generated using the identifier of the IDL interface, with <tt class="literal">Helper</tt> and <tt class="literal">Holder</tt> appended to it. </p>
<p>
<a name="INDEX-2443"></a>
The Java interface extends the <tt class="literal">org.omg.CORBA.Object</tt> interface. Any inheritance specification you provide in your IDL interface is mapped directly to interface inheritance in Java, using <tt class="literal">extends</tt> clauses. So our earlier <tt class="literal">GeometricObj3D</tt> example that inherits from <tt class="literal">GeometricObj</tt> is mapped into a Java interface that begins:</p>
<blockquote>
<pre class="programlisting">
// Java
public interface GeometricObj3D
    extends org.omg.CORBA.Object, GeometricObj { ...</pre>
</blockquote>
<a name="ch10-pgfid-963696"></a>
<h3 class="sect3">10.10.4.1. Helper and holder classes</h3>
<p>
<a name="INDEX-2444"></a><a name="INDEX-2445"></a><a name="INDEX-2446"></a>
The helper class generated for an interface includes a static <tt class="literal">narrow()</tt> method that allows you to safely cast a CORBA <tt class="literal">Object</tt> reference to a reference of the interface type. If the <tt class="literal">Object</tt> isn't of the expected type, an <tt class="literal">org.omg.CORBA.BAD_PARAM</tt> exception is thrown. The helper class also includes other static methods that let you read or write objects of the interface type over I/O streams and insert/extract an object of this type from an <tt class="literal">Any</tt> value.</p>
<p>
<a name="INDEX-2447"></a>
The holder class is used whenever the interface is used as the type for an <tt class="literal">out</tt> or <tt class="literal">inout</tt> method parameter. The holder class is responsible for marshalling the contents of the object to the server object for the method call (for <tt class="literal">inout</tt> arguments), and then unmarshalling the (possibly updated) return value. The holder class has a constructor defined that lets you wrap the holder around an existing instance of the original interface, and it has a public <tt class="literal">value</tt> member that lets you access the object argument both before and after the method call. </p>
<p>See <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_01.htm">Chapter 4, "Java IDL"</a> for more details on helper and holder classes.</p>
<a name="ch10-pgfid-963697"></a>
<h3 class="sect3">10.10.4.2. Attributes</h3>
<p>
<a name="INDEX-2448"></a><a name="INDEX-2449"></a>
Each attribute you declare on the IDL interface is mapped to two accessor methods, with the same name as the attribute. So an attribute declared within an IDL interface as follows:</p>
<blockquote>
<pre class="programlisting">
// IDL
attribute string name;</pre>
</blockquote>
<p>is mapped to these two methods on the corresponding Java interface:</p>
<blockquote>
<pre class="programlisting">
// Java
String name();
void name(String n);</pre>
</blockquote>
<p>If you include the <tt class="literal">readonly</tt> tag in your IDL
attribute declaration, the Java interface has only the read accessor method, not the update accessor.</p>
<a name="ch10-pgfid-963732"></a>
<h3 class="sect3">10.10.4.3. Methods</h3>
<p>
<a name="INDEX-2450"></a><a name="INDEX-2451"></a><a name="INDEX-2452"></a><a name="INDEX-2453"></a>
Methods declared on your IDL interface are mapped one-to-one to methods on the Java interface. The return values and any <tt class="literal">in</tt> parameters are mapped directly to their corresponding types in Java. Any <tt class="literal">out</tt> or <tt class="literal">inout</tt> parameters in the IDL method are mapped to their holder classes in the Java method. This includes basic IDL types, which have their own holder classes defined for them in the standard Java mapping. So this IDL method:</p>
<blockquote>
<pre class="programlisting">
// IDL
boolean setPrintServer(in PrintServer server,
	out PrintServer previousServer,
	out long requestsHandled);</pre>
</blockquote>
<p>is mapped to the following Java method on the corresponding interface:</p>
<blockquote>
<pre class="programlisting">
// Java
boolean setPrintServer(PrintServer server,
	PrintServerHolder previousServer,
	IntHolder requestsHandled);</pre>
</blockquote>
<p>
<a name="INDEX-2454"></a>
Note that the last argument is declared a <tt class="literal">long</tt> in IDL, which is mapped to <tt class="literal">int</tt> in Java, so the <tt class="literal">IntHolder</tt> class is used in the mapped Java method.</p>
<p>To use this method, we have to create holder objects for the output parameters, then check their values after the method call:</p>
<blockquote>
<pre class="programlisting">
// Java
PrintServer newServer = . . .;
PrintServerHolder prevHolder = new PrintServerHolder();
IntHolder numReqHolder = new IntHolder();
<em class="replaceable">xxx</em>.setPrintServer(newServer, prevHolder, numReqHolder);
int numReq = numReqHolder.value;
PrintServer prevServer = prevHolder.value;</pre>
</blockquote>
<p>We don't need to initialize the contents of the holders, since they are being used for <tt class="literal">out</tt> parameters. If they were used for <tt class="literal">inout</tt> parameters, we'd either have to initialize their contents at construction time or set their <tt class="literal">value</tt> members directly.</p>
<p>If there is a <tt class="literal">raises</tt> clause on your IDL
method declaration, it is mapped to an equivalent
<tt class="literal">throws</tt> clause on the Java method. The context
<a name="INDEX-2455"></a>
clause and call semantics (<tt class="literal">oneway</tt>) on an IDL method
declaration affect only the implementation of the generated Java method, not its signature.</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_09.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch11_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">10.9. Module Declarations</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">11. CORBA Services Reference</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
