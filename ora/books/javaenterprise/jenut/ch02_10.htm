<html>
<head>
<title>Transactions (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Transactions">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_09.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_01.htm">Chapter 2: JDBC</a></td><td align="right" valign="top" width="172"><a href="ch02_11.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_11.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">2.10. Transactions</h2>
<p>
<a name="INDEX-313"></a><a name="INDEX-314"></a><a name="INDEX-315"></a><a name="INDEX-316"></a>
A <em class="emphasis">transaction</em> is a group of several operations that must behave atomically, or as if they are a single, indivisible operation. With regards to databases, transactions allow you to combine one or more database actions
into a single atomic unit. If you have an application that needs to execute multiple SQL statements to fulfill one goal (say, an inventory management system that needs to move items from an <tt class="literal">INVENTORY</tt> table to a <tt class="literal">SHIPPING</tt> table), you probably want to use JDBC's transaction services to accomplish the goal. </p>
<p>
<a name="INDEX-317"></a><a name="INDEX-318"></a>
Working with a transaction involves the following steps: start the transaction, perform its component operations, and then either commit the transaction if all the component operations succeed or roll it back if one of the operations fails. The ability to roll back a transaction is the key feature. This means that if any one SQL statement fails, the entire operation fails, and it is as though none of the component operations took place. Therefore it is impossible to end up with a situation where, for example, the <tt class="literal">INVENTORY</tt> table has been debited, but the <tt class="literal">SHIPPING</tt> table has not been credited. </p>
<p>
<a name="INDEX-319"></a><a name="INDEX-320"></a>
Another issue with transactions and databases concerns when
changes to the database become visible to the rest of the
system. Transactions can operate at varying levels of isolation from
the rest of the database. At the most isolated level, the results of
all the component SQL statements become visible to the rest of the
system only when the transaction is committed. In other words, nobody sees the reduced inventory before the shipping data is updated.</p>
<p>
<a name="INDEX-321"></a><a name="INDEX-322"></a><a name="INDEX-323"></a>
The <tt class="literal">Connection</tt> object in JDBC is responsible for transaction management. With JDBC, you are always using transactions in some form. By default, a new connection starts out in transaction auto-commit mode, which means that every SQL statement is executed as an individual transaction that is immediately committed to the database. </p>
<p>
<a name="INDEX-324"></a><a name="INDEX-325"></a><a name="INDEX-326"></a><a name="INDEX-327"></a>

To perform a transaction that uses multiple statements, you have to call the <tt class="literal">setAutoCommit()</tt> method with a <tt class="literal">false</tt> argument. (You can check the status of auto-commit with the <tt class="literal">getAutoCommit()</tt> method.)  Now you can execute the SQL statements that comprise your transaction. When you are done, you call the <tt class="literal">commit()</tt> method to commit the transaction or the <tt class="literal">rollback()</tt> method to undo it. Here's an example:</p>
<blockquote>
<pre class="programlisting">
try {
  con.setAutoCommit(false);
  // run some SQL
  stmt.executeUpdate("UPDATE INVENTORY SET ONHAND = 10 WHERE ID = 5");
  stmt.executeUpdate("INSERT INTO SHIPPING (QTY) VALUES (5)");
  con.commit();
} 
catch (SQLException e) {
  con.rollback(); //undo the results of the transaction
}</pre>
</blockquote>
<p>
<a name="INDEX-328"></a>
When auto-commit is set to <tt class="literal">false</tt>, you must remember to call <tt class="literal">commit()</tt> (or <tt class="literal">rollback()</tt>) at the end of each transaction, or your changes will be lost.</p>
<p>
<a name="INDEX-329"></a><a name="INDEX-330"></a><a name="INDEX-331"></a><a name="INDEX-332"></a>
JDBC supports a number of transaction isolation modes that allow you
to control how the database deals with transaction conflicts--in
other words, who sees what when. JDBC defines five modes, some of
which may not be supported by all databases. The default mode varies
depending on the underlying database and driver. Higher isolation
levels yield poorer performance. Here are the five standard options,
which are defined as integer constants in the
<tt class="literal">Connection</tt> interface:
<a name="INDEX-333"></a><a name="INDEX-334"></a><a name="INDEX-335"></a><a name="INDEX-336"></a><a name="INDEX-337"></a>
</p>
<dl>
<dt>
<b><tt class="literal">TRANSACTION_NONE</tt></b>
</dt>
<dd>
<p>Transactions are either disabled or not supported.</p>
</dd>
<dt>
<b><tt class="literal">TRANSACTION_READ_UNCOMMITTED</tt></b>
</dt>
<dd>
<p>Minimal transaction support that allows dirty reads.<a name="INDEX-"></a> In other words, other transactions can see the results of a transaction's SQL statements before the transaction commits itself. If you roll back your transaction, other transactions may be left with invalid data.</p>
</dd>
<dt>
<b><tt class="literal">TRANSACTION_READ_COMMITTED</tt></b>
</dt>
<dd>
<p>Transactions are prevented from reading rows with uncommitted changes, or in other words, dirty reads are not allowed.</p>
</dd>
<dt>
<b><tt class="literal">TRANSACTION_REPEATABLE_READ</tt></b>
</dt>
<dd>
<p>Protects against repeatable reads as well
<a name="INDEX-338"></a>
as dirty reads. Say one transaction reads a row that is subsequently
altered (and committed) by another transaction. If the first
transaction reads the row again, the first transaction does not get a
different value the second time around. The new data is visible to the
first transaction only after it calls <tt class="literal">commit()</tt> and
performs another read.</p>
</dd>
<dt>
<b><tt class="literal">TRANSACTION_SERIALIZABLE</tt></b>
</dt>
<dd>
<p>Provides all the support of
<tt class="literal">TRANSACTION_REAPEATABLE_READ</tt> and guards against row
<a name="INDEX-339"></a><a name="INDEX-340"></a>
insertions as well. Say one transaction reads a set of rows, and then
another transaction adds a row to the set. If the first transaction
reads the set again, it does not see the newly added row. Put another
way, this level of isolation forces the database to treat transactions
as if they occurred one at a time.</p>
</dd>
</dl>
<p>
<a name="INDEX-341"></a><a name="INDEX-342"></a><a name="INDEX-343"></a>
Transaction isolation modes are set by the
<tt class="literal">setTransactionIsolation()</tt> method. For example:</p>
<blockquote>
<pre class="programlisting">con.setTransactionIsolation(TRANSACTION_READ_COMMITTED);</pre>
</blockquote>
<p>
<a name="INDEX-344"></a><a name="INDEX-345"></a><a name="INDEX-346"></a><a name="INDEX-347"></a>

You can use the <tt class="literal">DatabaseMetaData</tt> class to
determine the transaction support of the underlying database. The most
useful methods are <tt class="literal">getDefaultTransactionIsolation()</tt>,
<tt class="literal">supportsTransactions()</tt>,
<tt class="literal">supportsTransactionIsolationLevel()</tt>, and
<tt class="literal">supportsDataDefinitionAndDataManipulationTransactions()</tt>
(which may very well be the longest method name in the Java
API).</p>
<p>
<a name="INDEX-348"></a><a name="INDEX-349"></a>
An application that uses transactions is a prime candidate for
also using a connection pool (available in JDBC 2.0). Since each
database transaction requires its own Connection object, an
application that performs multiple simultaneous transactions (for
<a name="INDEX-350"></a>
instance, spawning threads that perform database updates) needs
multiple connections available. Maintaining a pool of connections is
much more efficient than creating a new one whenever you need a new
transaction.</p>
<a name="INDEX-351"></a>
<a name="INDEX-352"></a>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_09.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_11.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_11.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.9. Metadata</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.11. Stored Procedures</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
