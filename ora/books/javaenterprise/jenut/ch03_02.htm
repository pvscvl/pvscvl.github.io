<html>
<head>
<title>Defining Remote Objects (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Defining Remote Objects">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_01.htm">Chapter 3: Remote Method Invocation</a></td><td align="right" valign="top" width="172"><a href="ch03_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">3.2. Defining Remote Objects</h2>
<p>
<a name="INDEX-572"></a>
Now that you have a basic idea of how Java RMI works, we can
explore the details of creating and using distributed objects with
RMI. As I mentioned earlier, defining a remote RMI object involves
<a name="INDEX-573"></a><a name="INDEX-574"></a><a name="INDEX-575"></a><a name="INDEX-576"></a>
specifying a remote interface for the object, then providing a class
that implements this interface. The remote interface and
implementation class are then used by RMI to generate a client stub
and server skeleton for your remote object. The communication between
<a name="INDEX-577"></a>
local objects and remote objects is handled using these client stubs
and server skeletons. The relationships among stubs, skeletons, and
the objects that use them are shown in <a href="#ch03-pgfid-973267">Figure 3-2</a>.</p>
<a name="ch03-pgfid-973267"></a>
<div class="figure">
<img alt="figure" src="figs/Jent.0302.gif" webstripperlinkwas="figs/Jent.0302.gif"></div>
<h4 class="objtitle">Figure 3-2. Relationships among remote object, stub, and skeleton classes</h4>
<p>
<a name="INDEX-578"></a>
When a client gets a reference to a remote object (details on how this
  reference is obtained come later) and then calls methods on this
  object reference, there needs to be a way for the method request to
  get transmitted back to the actual object on the remote server and
  for the results of the method call to get transmitted back to the
  client. This is what the generated stub and skeleton classes are
  for. They act as the communication link between the client and your
  exported remote object, making it seem to the client that the object
  actually exists within its Java VM. </p>
<p>
<a name="INDEX-579"></a><a name="INDEX-580"></a><a name="INDEX-581"></a>

The RMI compiler (<em class="emphasis">rmic</em>) automatically generates
these stub and skeleton classes for you. Based on the remote interface
and implementation class you provide, <em class="emphasis">rmic</em>
generates stub and skeleton classes that implement the remote
interface and act as go-betweens for the client application and the
actual server object. For the client stub class, the compiler
generates an implementation of each remote method that simply packages
up (marshals) the method arguments and transmits them to the
server. For the server skeleton class, the RMI compiler generates
another set of implementations of the remote methods, but these are
designed to receive the method arguments from the remote method call,
unpackage them, and make the corresponding method call on the object
implementation. Whatever the method call generates (return data or an
exception), the results are packaged and transmitted back to the
remote client. The client stub method (which is still executing at
this point) unpackages the results and delivers them to the client as
the result of its remote method call.</p>
<p>
<a name="INDEX-582"></a>
So, the first step in creating your remote objects is to define the
remote interfaces for the types of objects you need to use in a
distributed object context. This isn't much different from
defining the public interfaces in a nondistributed application, with
the following exceptions:</p>
<ul>
<li>
<p>Every object you want to distribute using RMI has to directly or
indirectly extend an interface that extends the
<tt class="literal">java.rmi.Remote</tt> interface.</p>
</li>
<li>
<p>
<a name="INDEX-583"></a><a name="INDEX-584"></a>
Every method in the remote interface has to declare that it throws a
	<tt class="literal">java.rmi.RemoteException</tt> or one of the
	parent classes of <tt class="literal">RemoteException</tt>.<a href="#FOOTNOTE-1">[1]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-1"></a>
<p>[1]Note that prior to Java 1.2, the
	RMI specification required that every method on a remote
	interface had to throw <tt class="literal">RemoteException</tt>
	specifically. In Java 1.2, this has been loosened to allow any
	superclass of <tt class="literal">RemoteException</tt>. The reason
	for this change is to make it easier to define generic
	interfaces that support both local and remote objects.</p>
</blockquote>
</li>
</ul>
<p>
<a name="INDEX-585"></a><a name="INDEX-586"></a>
RMI imposes the first requirement to allow it to differentiate quickly
between objects that are enabled for remote distribution and those
that are not. As we've already seen, during a remote method
invocation, the RMI runtime system needs to be able to determine
whether each argument to the remote method is a
<tt class="literal">Remote</tt> object or not. The <tt class="literal">Remote</tt>
interface, which is simply a tag interface that marks remote objects,
makes it easy to perform this check.</p>
<p>
<a name="INDEX-587"></a>

The second requirement is needed to deal with errors that can happen
  during a remote session. When a client makes a method call on a
  remote object, any number of errors can occur, preventing the remote
  method call from completing. These include client-side errors (e.g.,
  an argument can't be marshaled), errors during the transport of data
  between client and server (e.g., the network connection is dropped),
  and errors on the server side (e.g., the method throws a local
  exception that needs to be sent back to the remote caller). The
  <tt class="literal">RemoteException</tt> class is used by RMI as a base
  exception class for any of the different types of problems that
  might occur during a remote method call. Any method you declare in a
  <tt class="literal">Remote</tt> interface is assumed to be remotely
  callable, so every method has to declare that it might throw a
  <tt class="literal">RemoteException</tt>, or one of its parent interfaces.</p>
<p>
<a href="#ch03-20611">Example 3-3</a> shows a simple remote interface that
  declares two methods: <tt class="literal">doThis()</tt> and
  <tt class="literal">doThat()</tt>. These methods could do anything that we
  want; in our <tt class="literal">Account</tt> example, we had remote
  methods to deposit, withdraw, and transfer funds. Each method takes
  a single <tt class="literal">String</tt> argument and returns a
  <tt class="literal">String</tt> result. Since we want to use this
  interface in an RMI setting, we've declared that the interface
  extends the <tt class="literal">Remote</tt> interface. In addition, each
  method is declared as throwing a
  <tt class="literal">RemoteException</tt>. </p>
<a name="ch03-20611"></a>
<div class="example">
<h4 class="objtitle">Example 3-3. The ThisOrThatServer Interface</h4>
<blockquote>
<pre class="programlisting">
import java.rmi.Remote;
import java.rmi.RemoteException;

public interface ThisOrThatServer extends Remote {
  public String doThis(String todo) throws RemoteException;
  public String doThat(String todo) throws RemoteException;
}</pre>
</blockquote>
</div>
<p>With the remote interface defined, the next thing we need to do is write a class that implements the interface. <a href="#ch03-39879">Example 3-4</a> shows the <tt class="literal">ThisOrThatServerImpl</tt> class, which implements the <tt class="literal">ThisOrThatServer</tt> interface.</p>
<a name="ch03-39879"></a>
<div class="example">
<h4 class="objtitle">Example 3-4. Implementation of the ThisOrThatServer</h4>
<blockquote>
<pre class="programlisting">
import java.rmi.server.UnicastRemoteObject;
import java.rmi.RemoteException;

public class ThisOrThatServerImpl
  extends UnicastRemoteObject implements ThisOrThatServer {

  public ThisOrThatServerImpl() throws RemoteException {}

  // Remotely accessible methods
  public String doThis(String todo) throws RemoteException {
    return doSomething("this", todo);
  }

  public String doThat(String todo) throws RemoteException {
    return doSomething("that", todo);
  }

  // Non-remote methods
  private String doSomething(String what, String todo) {
    String result = "Did " + what + " to " + todo + ".";
    return result;
  }
}</pre>
</blockquote>
</div>
<p>
<a name="INDEX-588"></a>
This class has implementations of the <tt class="literal">doThis()</tt> and
  <tt class="literal">doThat()</tt> methods declared in the
  <tt class="literal">ThisOrThatServer</tt> interface; it also has a
  nonremote method, <tt class="literal">doSomething()</tt>, that is used to
  implement the two remote methods. Notice that the
  <tt class="literal">doSomething()</tt> method doesn't have to be
  declared as throwing a <tt class="literal">RemoteException</tt>, since it
  isn't a remotely callable method. Only the methods declared in
  the remote interface can be invoked remotely. Any other methods you
  include in your implementation class are considered nonremote (i.e.,
  they are only callable from within the local Java virtual machine
  where the object exists).</p>
<a name="ch03-pgfid-963323"></a>
<h3 class="sect2">3.2.1. Key RMI Classes for Remote Object Implementations</h3>
<p>
<a name="INDEX-589"></a><a name="INDEX-590"></a>
You probably noticed that our
<tt class="literal">ThisOrThatServerImpl</tt> class also extends the
<tt class="literal">UnicastRemoteObject</tt> class. This is a class in the
<tt class="literal">java.rmi.server</tt> package that extends
<tt class="literal">java.rmi.server.RemoteServer</tt>, which itself extends
<tt class="literal">java.rmi.ser-ver.RemoteObject</tt>, the base class for
all RMI remote objects. There are four key classes related to writing
server object implementations: </p>
<dl>
<dt>
<b><tt class="literal">RemoteObject</tt></b>
</dt>
<dd>
<p>
<tt class="literal">RemoteObject</tt><a name="INDEX-591"></a><a name="INDEX-592"></a><a name="INDEX-593"></a><a name="INDEX-594"></a><a name="INDEX-595"></a><a name="INDEX-596"></a><a name="INDEX-597"></a>
implements both the <tt class="literal">Remote</tt> and
<tt class="literal">java.rmi.server</tt> package, it is used by both the
<tt class="literal">Serializable</tt> interfaces. Although the
<tt class="literal">RemoteObject</tt> class is in the
client and server portions of a remote object reference. Both client
stubs and server implementations are subclassed (directly or
indirectly) from <tt class="literal">RemoteObject</tt>. A
<tt class="literal">RemoteObject</tt> contains the remote reference for a
particular remote object.</p>
<p>
<tt class="literal">RemoteObject</tt> is an
<a name="INDEX-598"></a><a name="INDEX-599"></a><a name="INDEX-600"></a>
abstract class that reimplements the <tt class="literal">equals()</tt>,
<tt class="literal">hashCode()</tt>, and <tt class="literal">toString()</tt>
methods inherited from <tt class="literal">Object</tt> in a way that makes
sense and is practical for remote objects. The
<tt class="literal">equals()</tt> method, for example, is implemented to
return <tt class="literal">true</tt> if the internal remote references of
the two <tt class="literal">RemoteObject</tt> objects are equal, (i.e., if
they both point to the same server object).</p>
</dd>
<dt>
<b><tt class="literal">RemoteServer</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-601"></a><a name="INDEX-602"></a><a name="INDEX-603"></a><a name="INDEX-604"></a><a name="INDEX-605"></a><a name="INDEX-606"></a><tt class="literal">RemoteServer</tt> is an abstract class that extends <tt class="literal">RemoteObject</tt>. It
defines a set of static methods that are useful for implementing
server objects in RMI, and it acts as a base class for classes that
define various semantics for remote objects. In principle, a remote
object can behave according to a simple point-to-point reference
scheme; it can have replicated copies of itself scattered across the
network that need to be kept synchronized; or any number of other
scenarios. JDK 1.1 supported only point-to-point, nonpersistent remote
references with the <tt class="literal">UnicastRemoteObject</tt> class. The Java 2 SDK 1.2 has introduced the RMI activation system, so it provides
another subclass of <tt class="literal">RemoteServer</tt>,
<tt class="literal">Activatable</tt>. </p>
</dd>
<dt>
<b><tt class="literal">UnicastRemoteObject</tt></b>
</dt>
<dd>
<p>This is a concrete subclass of
<tt class="literal">RemoteServer</tt> that implements point-to-point remote
references over TCP/IP networks. These references are nonpersistent:
remote references to a server object are only valid during the
lifetime of the server object. Before the server object is created
(inside a virtual machine running on the host) or after the object has
been destroyed, a client can't obtain remote references to the
object. In addition, if the virtual machine containing the object
exits (intentionally or otherwise), any existing remote references on
clients become invalid and generate <tt class="literal">RemoteException</tt>
objects if used. 

<a name="INDEX-607"></a><a name="INDEX-608"></a>
</p>
</dd>
<dt>
<b><tt class="literal">Activatable</tt></b>
</dt>
<dd>
<p>This concrete subclass of
<tt class="literal">RemoteServer</tt> is part of the new RMI object
activation facility in Java 1.2 and can be found in the
<tt class="literal">java.rmi.activation</tt> package. It implements a server
object that supports persistent remote references. If a remote method
request is received on the server host for an
<tt class="literal">Activatable</tt> object, and the target object is not
executing at the time, the object can be started automatically by the
RMI activation daemon.
<a name="INDEX-609"></a><a name="INDEX-610"></a><a name="INDEX-611"></a>
</p>
</dd>
</dl>
<a name="INDEX-612"></a>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.1. Introduction to RMI</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.3. Creating the Stubs and Skeletons</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
