<html>
<head>
<title>JDBC 2.0 (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="JDBC 2.0">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_12.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_12.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_01.htm">Chapter 2: JDBC</a></td><td align="right" valign="top" width="172"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">2.13. JDBC 2.0</h2>
<p>
<a name="INDEX-388"></a><a name="INDEX-389"></a><a name="INDEX-390"></a><a name="INDEX-391"></a>
The original JDBC API (JDBC 1.0) was first introduced as an
add-on package for JDK 1.0, and it became a part of the core Java API
with Java 1.1. In May 1998, Sun released the specification for JDBC
2.0. This new version of the API provides support for extended result
handling, Java-aware databases, BLOB fields, and other minor
improvements. All in all, there are enough new features in JDBC 2.0 to
warrant a separate section in this chapter. The new version of the API
is backward-compatible; code written for JDBC 1.0 compiles and runs
just fine under JDBC 2.0.</p>
<p>
<a name="INDEX-392"></a><a name="INDEX-393"></a>
The updated API ships with Version 1.2 of the Java 2 platform
and is also available for
download separately. As of early 1999, there are very few JDBC
  2.0-compliant drivers available, although Sun and InterSolv are working
towards an updated version of the JDBC-ODBC Bridge.
<a name="INDEX-394"></a>
</p>
<a name="ch02-pgfid-271266"></a>
<h3 class="sect2">2.13.1. Results Handling</h3>
<p>
<a name="INDEX-395"></a><a name="INDEX-396"></a><a name="INDEX-397"></a><a name="INDEX-398"></a><a name="INDEX-399"></a><a name="INDEX-400"></a>
With JDBC 1.0, the functionality provided by the
<tt class="literal">ResultSet</tt> interface is rather limited. There is no
support for updates of any kind and access to rows is limited to a
single, sequential read (i.e., first row, second row, third row, etc.,
and no going back). JDBC 2.0 supports scrollable and updateable result
sets, which allows for advanced record navigation and in-place data
manipulation.</p>
<p>
<a name="INDEX-401"></a><a name="INDEX-402"></a>


With scrolling, you can move forward and backward through the
results of a query, rather than just using the
<tt class="literal">next()</tt> method to move to the next row. In terms of
scrolling, there are now three distinct types of
<tt class="literal">ResultSet</tt> objects: forward-only (as in JDBC 1.0),
scroll-insensitive, and scroll-sensitive. A scroll-insensitive result
set generally does not reflect changes to the underlying data, while
scroll-sensitive ones do. In fact, the number of rows in a sensitive
result set does not even need to be fixed. </p>
<p>
<a name="INDEX-403"></a><a name="INDEX-404"></a>
As of JDBC 2.0, result sets are also updateable. From this
perspective, there are two different kinds of result sets: read-only
result sets that do not allow changes to the underlying data and
updateable result sets that allow such changes, subject to transaction
limitations and so on.</p>
<p>
<a name="INDEX-405"></a><a name="INDEX-406"></a>

To create an updateable, scroll-sensitive result set, we pass
two extra arguments to the <tt class="literal">createStatement()</tt>
method:</p>
<blockquote>
<pre class="programlisting">
Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, 
                                     ResultSet.CONCUR_UPDATEABLE);</pre>
</blockquote>
<p>If you do not pass any arguments to <tt class="literal">createStatement()</tt>, you get a forward-only, read-only result set, just as you would using JDBC 1.0. Note that if you specify a scrollable result set (either sensitive or insensitive), you must also specify whether or not the result set is updateable. After you have created a scrollable <tt class="literal">ResultSet</tt>, use the methods listed in <a href="#ch02-pgfid-726886">Table 2-2</a> to navigate through it. As with JDBC 1.0, when you start working with a <tt class="literal">ResultSet</tt>, you are positioned before the first row of results.
<a name="INDEX-407"></a>
</p>
<a name="ch02-pgfid-726886"></a>
<h4 class="objtitle">Table 2-2. JDBC 2.0 Record Scrolling Functions </h4>
<table border="1">
<tr>
<th>
<p>Method</p>
</th><th>
<p>Function</p>
</th>
</tr>
<tr>
<td>
<p>
<tt class="literal">first()</tt>
</p>
</td><td>
<p>Move to the first record.</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">last()</tt>
</p>
</td><td>
<p>Move to the last record.</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">next()</tt>
</p>
</td><td>
<p>Move to the next record.</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">previous()</tt>
</p>
</td><td>
<p>Move to the previous record.</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">beforeFirst()</tt>
</p>
</td><td>
<p>Move to immediately before the first record.</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">afterLast()</tt>
</p>
</td><td>
<p>Move to immediately after the last record.</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">absolute(</tt><em class="replaceable">int</em><tt class="literal">)</tt>
</p>
</td><td>
<p>Move to an absolute row number. Takes a positive or negative argument.</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">relative(</tt><em class="replaceable">int</em><tt class="literal">)</tt>
</p>
</td><td>
<p>Move backward or forward a specified number of rows. Takes a positive or negative argument.</p>
</td>
</tr>
</table>
<p>
<a name="INDEX-408"></a><a name="INDEX-409"></a>
The JDBC 2.0 API also includes a number of methods that tell you where you are in a <tt class="literal">ResultSet</tt>. You can think of your position in a <tt class="literal">ResultSet</tt> as the location of a cursor in the results. The <tt class="literal">isFirst()</tt> and <tt class="literal">isLast()</tt> methods return <tt class="literal">true</tt> if the cursor is located on the first or last record, respectively. <tt class="literal">isAfterLast()</tt> returns <tt class="literal">true</tt> if the cursor is after the last row in the result set, while <tt class="literal">isBeforeFirst() </tt>returns <tt class="literal">true</tt> if the cursor is before the first row. </p>
<p>
<a name="INDEX-410"></a><a name="INDEX-411"></a><a name="INDEX-412"></a>
With an updateable <tt class="literal">ResultSet</tt>, you can change
data in an existing row, insert an entirely new row, or delete an
existing row. To change data in an existing row, you use the new
<a name="INDEX-413"></a><tt class="literal">updateXXX()</tt> methods of
<tt class="literal">ResultSet</tt>. Let's assume we want to update the
<tt class="literal">CUSTOMER_ID</tt> field of the first row we retrieve
(okay, it's a contrived example, but bear with me):</p>

<blockquote>
<pre class="programlisting">Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, 
                                     ResultSet.CONCUR_UPDATEABLE);
ResultSet rs = stmt.executeQuery("SELECT NAME, CUSTOMER_ID FROM CUSTOMERS");

rs.first();
rs.updateInt(2, 35243);  
rs.updateRow();</pre>
</blockquote>

<a name="INDEX-414"></a>
<a name="INDEX-415"></a>
<a name="INDEX-416"></a>
<p>Here we use <tt class="literal">first()</tt> to navigate to the first
row of the result set and then call <tt class="literal">updateInt()</tt> to
change the value of the customer ID column in the result set. After
making the change, call <tt class="literal">updateRow()</tt> to actually
make the change in the database. If you forget to call
<tt class="literal">updateRow()</tt> before moving to another row in the
result set, any changes you made are lost. If you need to make a
number of changes in a single row, you can do that with multiple calls
to <tt class="literal">updateXXX()</tt> methods and then a single call to
<tt class="literal">updateRow()</tt>. Just be sure you call
<tt class="literal">updateRow()</tt> before moving on to another row.</p>
<p>
<a name="INDEX-417"></a><a name="INDEX-418"></a>
The technique for inserting a row is similar to updating data in
an existing row, with a few important differences. The first step is
to move to what is called the insert row, using the
<tt class="literal">moveToInsertRow()</tt> method. The <em class="emphasis">insert row</em> is a blank
row associated with the <tt class="literal">ResultSet</tt> that contains all
the fields, but no data; you can think of it as a pseudo-row where you
can compose a new row. After you have moved to the insert row, use
<tt class="literal">updateXXX()</tt> methods to load new data into the
insert row and then call <tt class="literal">insertRow() </tt>to append the
new row to the <tt class="literal">ResultSet</tt> and the underlying
database  Here's an example that adds a new customer to the
database:</p>

<blockquote>
<pre class="programlisting">ResultSet rs = stmt.executeQuery("SELECT NAME, CUSTOMER_ID FROM CUSTOMERS");
rs.moveToInsertRow();
rs.updateString(1, "Tom Flynn");
rs.updateInt(2, 35244); 
rs.insertRow();</pre>
</blockquote>

<p>
<a name="INDEX-419"></a><a name="INDEX-420"></a>
Note that you do not have to supply a value for every column, as
long as the columns you omit can accept <tt class="literal">null</tt>
values. If you don't specify a value for a column that cannot be
<tt class="literal">null</tt>, you'll get a
<tt class="literal">SQLException</tt>. After you call
<tt class="literal">insertRow()</tt>, you can create another new row, or you
can move back to the <tt class="literal">ResultSet</tt> using the various
navigation methods shown in <a href="#ch02-pgfid-726886">Table 2-2</a>. One final navigation method
that isn't listed in the table is
<a name="INDEX-421"></a><tt class="literal">moveToCurrentRow()</tt>. This method takes you back to
where you were before you called <tt class="literal">moveToInsertRow()</tt>;
it can only be called while you are in the insert row.</p>
<p>
<a name="INDEX-422"></a><a name="INDEX-423"></a><a name="INDEX-424"></a>
Deleting a row from an updateable result set is easy. Simply move to the row you want to delete and call the <tt class="literal">deleteRow()</tt> method. Here's how to delete the last record in a <tt class="literal">ResultSet</tt>:</p>
<blockquote>
<pre class="programlisting">
rs.last();
rs.deleteRow();</pre>
</blockquote>
<p>Calling <tt class="literal">deleteRow()</tt> also deletes the row from the underlying database. </p>
<p>
<a name="INDEX-425"></a><a name="INDEX-426"></a>
Note that not all <tt class="literal">ResultSet</tt> objects are updateable. In general, the query must reference only a single table without any joins. Due to differences in database implementations, there is no single set of requirements for what makes an updateable <tt class="literal">ResultSet</tt>.</p>
<p>
<a name="INDEX-427"></a><a name="INDEX-428"></a><a name="INDEX-429"></a><a name="INDEX-430"></a><a name="INDEX-431"></a>
As useful as scrollable and updateable result sets are, the JDBC 2.0 specification does not require driver vendors to support them. If you are building middleware or some other kind of system that requires interaction with a wide range of database drivers, you should avoid this functionality for the time being. The
 extended JDBC 2.0 <tt class="literal">DatabaseMetaData</tt> object can provide information about scrolling and concurrency support.</p>
<a name="ch02-pgfid-271333"></a>
<h3 class="sect2">2.13.2. Batch Updates</h3>
<p>
<a name="INDEX-432"></a><a name="INDEX-433"></a><a name="INDEX-434"></a><a name="INDEX-435"></a>
The original JDBC standard isn't very efficient when it comes to
loading large amounts of information into a database. Even if you use
a <tt class="literal">PreparedStatement</tt>, your program still executes a
separate query for each piece of data inserted. If your software is
inserting 10,000 rows into the database, there may be performance
problems.</p>
<p>
<a name="INDEX-436"></a>
The new <tt class="literal">addBatch()</tt> method of
<tt class="literal">Statement</tt> allows you to lump multiple update
statements as a unit and execute them at once. You call
<tt class="literal">addBatch()</tt> after you create the statement and
before execution:</p>

<blockquote>
<pre class="programlisting">con.setAutoCommit(false);      // If some fail, we want to rollback the rest
Statement stmt = con.createStatement();

stmt.addBatch("INSERT INTO CUSTOMERS VALUES (1, "J Smith", "617 555-1323");
stmt.addBatch("INSERT INTO CUSTOMERS VALUES (2, "A Smith", "617 555-1132");
stmt.addBatch("INSERT INTO CUSTOMERS VALUES (3, "C Smith", "617 555-1238");
stmt.addBatch("INSERT INTO CUSTOMERS VALUES (4, "K Smith", "617 555-7823");

int[] upCounts = stmt.executeBatch();
con.commit();</pre>
</blockquote>

<p>
<a name="INDEX-437"></a><a name="INDEX-438"></a><a name="INDEX-439"></a><a name="INDEX-440"></a><a name="INDEX-441"></a><a name="INDEX-442"></a>
Notice that we turn transaction auto-commit off before creating
the batch. This is because we want to roll back all the SQL statements
if one or more of them fail to execute properly. After calling
<tt class="literal">addBatch()</tt> multiple times to create our batch, we
call <tt class="literal">executeBatch()</tt> to send the SQL statements off
to the database to be executed as a batch. Batch statements are
executed in the order they are added to the
batch. <tt class="literal">executeBatch()</tt> returns an array of update
counts, where each value in the array represents the number of rows
affected by the corresponding batch statement. If you need to remove
the statements from a pending batch job, you can call
<tt class="literal">clearBatch()</tt>, as long as you call it before calling
<tt class="literal">executeBatch()</tt>.</p>
<p>
<a name="INDEX-443"></a>

Note that you can use only SQL statements that return an update
count (e.g., <tt class="literal">CREATE</tt>, <tt class="literal">DROP</tt>,
<tt class="literal">INSERT</tt>, <tt class="literal">UPDATE</tt>,
<tt class="literal">DELETE</tt>) as part of a batch. If you include a
statement that returns a result set, such as
<tt class="literal">SELECT</tt>, you get a
<tt class="literal">SQLException</tt> when you execute the batch. If one of
the statements in a batch cannot be executed for some reason,
<tt class="literal">executeBatch()</tt> throws a
<tt class="literal">BatchUpdateException</tt>. This exception, derived from
<tt class="literal">SQLException</tt>, contains an array of update counts
for the batch statements that executed successfully before the
exception was thrown.</p>
<p>
<a name="INDEX-444"></a><a name="INDEX-445"></a><a name="INDEX-446"></a>

The <tt class="literal">addBatch()</tt> method works slightly
differently for <tt class="literal">PreparedStatement</tt> and
<tt class="literal">CallableStatement</tt> objects. To use batch updating
with a <tt class="literal">PreparedStatement</tt>, create the statement
normally, set the input parameters, and then call the
<tt class="literal">addBatch()</tt> method with no arguments. Repeat as
necessary and then call <tt class="literal">executeBatch()</tt> when
you're finished:</p>

<blockquote>
<pre class="programlisting">con.setAutoCommit(false);      // If some fail, we want to rollback the rest
PreparedStatement stmt = con.prepareStatement(
                         "INSERT INTO CUSTOMERS VALUES (?,?,?)");

stmt.setInt(1,1);
stmt.setString(2, "J Smith");
stmt.setString(3, "617 555-1323");
stmt.addBatch();

stmt.setInt(1,2);
stmt.setString(2, "A Smith");
stmt.setString(3, "617 555-1132");
stmt.addBatch();

int[] upCounts = stmt.executeBatch();
con.commit();</pre>
</blockquote>

<p>
<a name="INDEX-447"></a><a name="INDEX-448"></a>
This batch functionality also works with <tt class="literal">CallableStatement</tt> objects for stored procedures. The catch is that each stored procedure must return an update count and may not take any <tt class="literal">OUT</tt> or <tt class="literal">INOUT </tt>parameters.</p>
<a name="ch02-pgfid-271399"></a>
<h3 class="sect2">2.13.3. Java-Aware Databases</h3>
<p>
<a name="INDEX-449"></a><a name="INDEX-450"></a><a name="INDEX-451"></a><a name="INDEX-452"></a><a name="INDEX-453"></a><a name="INDEX-454"></a>
Java is object-oriented; relational databases are not. As a result, it's decidedly difficult to shoehorn a Java object into a stubbornly primitive-oriented database table. Luckily, the wind is changing, and newer database systems, 
including object-oriented database management systems (OODBMS) and Java-relational database management systems,<a href="#FOOTNOTE-5">[5]</a> provide direct support for storing and manipulating
objects. Where a regular relational database can store only a limited
number of primitive types, a JDBMS system can store entire, arbitrary
Java objects.
<a name="INDEX-"></a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-5"></a>
<p>[5] This is Sun's term. I have yet to see any packages actually marketed as Java-relational databases, but many newer packages, including Personal Oracle, are capable of storing Java classes. A number of these products also use Java as a trigger language, generally in a JDBC structure.
<a name="INDEX-455"></a>
</p>
</blockquote>
<p>Say we want to store a customized Java <tt class="literal">Account</tt> object in the <tt class="literal">ACCOUNTS</tt> table in a database. With a standard DBMS and JDBC 1.0, we have to pull each piece of data (account number, account holder, balance, etc.) out of the <tt class="literal">Account</tt> object and write it to a complicated database table. To get data out, we reverse the process. Short of serializing the <tt class="literal">Account</tt> object and writing it to a binary field (a rather complex operation), we're stuck with this clumsy approach.<a href="#FOOTNOTE-6">[6]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-6"></a>
<p>[6]<a name="INDEX-456"></a><a name="INDEX-457"></a><a name="INDEX-458"></a>
There is a commercial product, called Java Blend,
that automatically handles mapping objects to database records and
vice versa. See <a href="../../../../../../../www.javasoft.com/products/java-blend/index.html">http://www.javasoft.com/products/java-blend/index.html</a> for more information.</p>
</blockquote>
<p>
<a name="INDEX-459"></a>
With JDBC 2.0, the <tt class="literal">getObject()</tt> method has been extended to support these new Java-aware databases. Provided that the database supports a Java-object type, we can read the <tt class="literal">Account</tt> object just like any primitive type:</p>

<blockquote>
<pre class="programlisting">ResultSet rs = stmt.executeQuery("SELECT ACCOUNT FROM ACCOUNTS");
rs.next();
Account a = (Account)rs.getObject(1);</pre>
</blockquote>

<p>To store an object, we use a PreparedStatement and the setObject() method:</p>

<blockquote>
<pre class="programlisting">Account a = new Account(); 
// Fill in appropriate fields in Account object

PreparedStatement stmt = con.prepareStatement(
                            "INSERT INTO ACCOUNTS (ACCOUNT) VALUE (?)");
stmt.setObject(1, a);
stmt.executeUpdate();</pre>
</blockquote>

<p>
<a name="INDEX-460"></a><a name="INDEX-461"></a><a name="INDEX-462"></a><a name="INDEX-463"></a>
A column that stores a Java object has a type of <tt class="literal">Types.JAVA_OBJECT.</tt> The JDBC API does not take any special steps to locate the bytecodes associated with any particular class, so you should make sure that any necessary objects can be instantiated with a call to <tt class="literal">Class.forName()</tt>.</p>
<a name="ch02-pgfid-271433"></a>
<h3 class="sect2">2.13.4. BLOBs and CLOBs</h3>
<p>
<a name="INDEX-464"></a><a name="INDEX-465"></a><a name="INDEX-466"></a><a name="INDEX-467"></a><a name="INDEX-468"></a>
Binary large objects (BLOBs) and character large objects
(CLOBs) store large amounts of binary or character data. Different
database vendors have different names for these fields. For example,
on Oracle7 systems, they are known as <tt class="literal">LONG</tt> and 
<tt class="literal">LONG RAW</tt> fields, while Microsoft Access refers to them
as OLE object fields. Oracle8 introduces actual <tt class="literal">BLOB</tt> and <tt class="literal">CLOB</tt> types. JDBC 1.0 makes programs retrieve
<tt class="literal">BLOB</tt> and <tt class="literal">CLOB</tt> data using the
<tt class="literal">getBinaryStream()</tt> or
<tt class="literal">getAsciiStream()</tt> methods (a third method,
<tt class="literal">getUnicodeStream()</tt>, has been deprecated in favor of
the new <tt class="literal">getCharacterStream()</tt> method, which returns
a <tt class="literal">Reader</tt>). </p>
<p>
<a name="INDEX-469"></a><a name="INDEX-470"></a><a name="INDEX-471"></a><a name="INDEX-472"></a><a name="INDEX-473"></a>

In JDBC 2.0, the <tt class="literal">ResultSet</tt> interface includes
<tt class="literal">getBlob()</tt> and <tt class="literal">getClob()</tt> methods,
which return <tt class="literal">Blob</tt> and <tt class="literal">Clob</tt>
objects, respectively. The <tt class="literal">Blob</tt> and
<tt class="literal">Clob</tt> objects themselves allow access to their data
via streams (the <tt class="literal">getBinaryStream()</tt> method of
<tt class="literal">Blob</tt> and the
<tt class="literal">getCharacterStream()</tt> method of
<tt class="literal">Clob</tt>) or direct-read methods
<tt class="literal">(</tt>the <tt class="literal">getBytes()</tt> method of
<tt class="literal">Blob</tt> and the <tt class="literal">getSubString()</tt>
method of <tt class="literal">Clob</tt>).</p>
<p>
<a name="INDEX-474"></a><a name="INDEX-475"></a>
In addition, you can set <tt class="literal">Blob</tt> and
<tt class="literal">Clob</tt> objects when you are working with a
<tt class="literal">PreparedStatement</tt>, using the <tt class="literal">setBlob() and
setClob()</tt> methods. There are update methods for streams, but
no <tt class="literal">updateBlob()</tt> and <tt class="literal">updateClob()</tt>methods. Note that the lifespan of a <tt class="literal">Blob</tt>
or <tt class="literal">Clob</tt> object is limited to the transaction that
created it.</p>

<a name="ch02-pgfid-271441"></a>
<h3 class="sect2">2.13.5. The JDBC Standard Extension</h3>
<p>
<a name="INDEX-476"></a><a name="INDEX-477"></a><a name="INDEX-478"></a><a name="INDEX-479"></a><a name="INDEX-480"></a><a name="INDEX-481"></a><a name="INDEX-482"></a><a name="INDEX-483"></a><a name="INDEX-484"></a><a name="INDEX-485"></a><a name="INDEX-486"></a><a name="INDEX-487"></a><a name="INDEX-488"></a><a name="INDEX-489"></a><a name="INDEX-490"></a>
The <tt class="literal">javax.sql</tt> package is a standard extension
for JDBC 2.0 that includes support for a variety of
enterprise-development activities. For example, the standard extension
lets you use JNDI for connecting to a database, making it possible to
obtain the name of a database from a name service, rather than using a
hardcoded name. Another key feature is the ability to treat the
results of a database query as a JavaBeans component, using the
<tt class="literal">RowSet</tt> interface. The
<tt class="literal">PooledConnection</tt> interface offers
connection-pooling functionality, so that your application can have a
cache of open database connections. The standard extension also
provides support for distributed transactions by allowing a JDBC
driver to utilize the standard two-phase commit protocol used by the
Java Transaction API (JTA), which facilitates the use of JDBC in
Enterprise JavaBeans components.</p>
<a name="INDEX-491"></a>
<a name="INDEX-492"></a>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_12.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_12.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.12. Escape Sequences</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3. Remote Method Invocation</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
