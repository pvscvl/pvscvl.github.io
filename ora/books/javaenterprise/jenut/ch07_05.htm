<html>
<head>
<title>Implementing Session Beans (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Implementing Session Beans">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_01.htm">Chapter 7: Enterprise JavaBeans</a></td><td align="right" valign="top" width="172"><a href="ch07_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">7.5. Implementing Session Beans</h2>
<p>
<a name="INDEX-1871"></a><a name="INDEX-1872"></a><a name="INDEX-1873"></a>
Now that we've seen a simple bean example, let's move on and talk about the specifics of implementing session beans (we'll get to entity beans after that). A session bean is much like a regular remote object, with the added benefit of being a JavaBeans component. The session bean serves as a remote extension of the client, running on a remote EJB server. Usually, a session bean is used by a single client, and the state data maintained by the session bean is owned by this client. The client acquires a reference to a session bean, and asks it to perform services by calling methods on the bean. These method calls might retrieve or update data in a remote database, filter data to be returned to the client, or update the session-related state information (if any) that the client is maintaining with the bean. </p>
<p>
<a name="INDEX-1874"></a><a name="INDEX-1875"></a>
A session bean doesn't live beyond the lifetime of its server. If your client has a reference to a session bean, and the server restarts, that session bean reference is no longer valid. You can reacquire a session bean of the same type from the same server, but it's not guaranteed to be in the same state as the bean you had before the server restart. An EJB container also has the option of destroying a session bean after some timeout period while the bean is in an inactive state on the server (i.e., if there are no client references to the session bean for a period that exceeds the session timeout for the bean).</p>
<p>
<a name="INDEX-1876"></a><a name="INDEX-1877"></a><a name="INDEX-1878"></a>
Stateful session beans can optionally receive notification of transaction boundaries from the EJB container. The container notifies the bean when a new client transaction is beginning and when the client transaction has either been completed or rolled back. If the session bean receives a rollback notification, it should manually reset its state information.</p>
<p>
<a name="INDEX-1879"></a><a name="INDEX-1880"></a><a name="INDEX-1881"></a><a name="INDEX-1882"></a><a name="INDEX-1883"></a><a name="INDEX-1884"></a><a name="INDEX-1885"></a><a name="INDEX-1886"></a>

Session beans implement the <tt class="literal">javax.ejb.SessionBean</tt>
interface. This interface extends the
<tt class="literal">javax.ejb.EnterpriseBean</tt> interface and specifies
<tt class="literal">ejbActivate()</tt>, <tt class="literal">ejbPassivate()</tt>,
<tt class="literal">ejbRemove()</tt>, and
<tt class="literal">setSessionContext()</tt> methods.</p>
<p>In addition to the standard EJB object methods mentioned in the
previous section, a session bean also needs to implement a
<tt class="literal">setSessionContext()</tt> method, as specified in the
<tt class="literal">SessionBean</tt> interface. The container calls this
method on the session bean just after the bean has been created,
passing in a <tt class="literal">javax.ejb.SessionContext</tt> object that
represents the runtime context for the bean. The session context is
valid for the life of the bean. The session bean can use the
<tt class="literal">SessionContext</tt> to get a reference to the remote
object associated with the bean, by calling the
<tt class="literal">getEJBObject()</tt> method on the context object. Since
the bean is not required to implement the remote interface for the
bean, this object may be different from the bean itself, and may
implement a class generated by the server based on the remote
interface, the home interface, and the bean implementation you
provided. More about that later, when we talk about deploying EJB
objects.</p>
<p>
<a name="INDEX-1887"></a><a name="INDEX-1888"></a><a name="INDEX-1889"></a><a name="INDEX-1890"></a><a name="INDEX-1891"></a><a name="INDEX-1892"></a>
The <tt class="literal">SessionContext</tt> that the container passes to a
  session bean is also an <tt class="literal">EJBContext</tt>, which is a
  general representation for runtime context information, regardless
  of whether the bean is an entity or session bean. Among other
  things, the <tt class="literal">EJBContext</tt> has accessors that allow
  the bean to get a reference to its home interface
  (<tt class="literal">getEJBHome()</tt>), a list of environment properties
  used to deploy the bean (<tt class="literal">getEnvironment()</tt>), and
  the identity of the client that is currently executing a transaction
  with the bean (<tt class="literal">getCallerIdentity()</tt>).</p>
<a name="ch07-pgfid-965507"></a>
<h3 class="sect2">7.5.1. Stateless Versus Stateful Session Beans</h3>
<p>
<a name="INDEX-1893"></a><a name="INDEX-1894"></a><a name="INDEX-1895"></a><a name="INDEX-1896"></a><a name="INDEX-1897"></a>
Session beans can be either stateful or stateless. A
  <em class="emphasis">stateless</em> session bean does not maintain state
  across method calls. If a client makes a series of remote method
  calls and/or transactions with the stateless bean, the bean is in
  the same state at the start of each method call or transaction. Our
  <tt class="literal">ProfileServerBean</tt> is such a bean. Stateless
  session beans of the same type can be considered identical to each
  other, and can be pooled and reused by multiple clients. A stateless
  session bean can be used concurrently by multiple remote clients
  without fear of conflicting with each other, since there is no
  shared state data that can be corrupted. Stateless beans don't
  need to be passivated since they have no state that needs to be
  restored when they're reactivated. The container simply
  destroys any stateless session beans it feels are no longer needed.</p>
<p>
<a name="INDEX-1898"></a><a name="INDEX-1899"></a><a name="INDEX-1900"></a>
A <em class="emphasis">stateful</em> session bean, on the other hand, does
  maintain state that can be accessed and changed directly by the
  client's interactions with the bean. A stateful session bean
  is generally not intended to be accessed by more than a single
  remote client; the state of the stateful session bean along with its
  remote methods act as an extension of the client that created the
  bean. </p>
<p>To illustrate the difference between stateless and stateful
session beans, let's take our
<tt class="literal">ProfileServerBean</tt> and convert it to a stateful
session bean. The <tt class="literal">ProfileServerBean</tt> is stateless
because all it does is accept requests for user profiles and return
the profiles directly to the client as RMI object references. The
client then interacts with the <tt class="literal">Profile</tt> object
directly, and the <tt class="literal">Profile</tt> manages the state of the
interaction, in the form of the values of the profile entries. If the
profile were a stateful enterprise bean itself, we wouldn't need
the <tt class="literal">ProfileServer</tt> at all.</p>
<p>
<a name="INDEX-1901"></a><a href="#ch07-40193">Example 7-5</a> shows the remote interface for a stateful <tt class="literal">Profile</tt> bean. It's similar to the remote interface for the RMI-based <tt class="literal">Profile</tt> we used in the stateless <tt class="literal">ProfileServerBean</tt> example. It has <tt class="literal">setEntry()</tt> and <tt class="literal">getEntry()</tt> methods that access entries using their names. The <tt class="literal">Profile</tt> bean also has accessors for the name of its user. </p>
<a name="ch07-40193"></a>
<div class="example">
<h4 class="objtitle">Example 7-5. Remote Interface for the Stateful Session Bean  </h4>
<blockquote>
<pre class="programlisting">
import javax.ejb.*;
import java.rmi.Remote;
import java.rmi.RemoteException;

public interface Profile extends Remote, EJBObject {
  public String getName() throws RemoteException;
  public void setName(String name) throws RemoteException;
  public String getEntry(String key) throws RemoteException;
  public void setEntry(String key, String value) throws RemoteException;
}</pre>
</blockquote>
</div>
<p>
<a name="INDEX-1902"></a><a name="INDEX-1903"></a><a name="INDEX-1904"></a>
The implementation of the stateful <tt class="literal">ProfileBean</tt> is shown in <a href="#ch07-14607">Example 7-6</a>. It has the requisite implementations for the bean methods needed by the container and includes two <tt class="literal">ejbCreate()</tt> methods: one with no arguments that creates an unnamed profile and another that takes the name of the user of the profile. The corresponding <tt class="literal">create()</tt> methods on the <tt class="literal">ProfileHome</tt> interface are shown in <a href="#ch07-13512">Example 7-7</a>. The state of this stateful session bean is maintained in a <tt class="literal">String</tt> field that holds the profile user's name and a <tt class="literal">Properties</tt> object that keeps the profile entries. The principal design difference between the <tt class="literal">ProfileBean</tt> and the stateless <tt class="literal">ProfileServerBean</tt> is the state information stored on the <tt class="literal">ProfileBean</tt> in its data members. The get/set accessors from the remote <tt class="literal">Profile</tt> interface are implemented here as operations on these fields. </p>
<a name="ch07-14607"></a>
<div class="example">
<h4 class="objtitle">Example 7-6. Implementation of the Stateful Session Bean</h4>
<blockquote>
<pre class="programlisting">
import javax.ejb.*;
import java.rmi.RemoteException;
import java.util.Properties;

public class ProfileBean implements SessionBean {
  // Name of the person owning the profile
  private String mName = "";
  // Entries in the profile (name/value pairs)
  private Properties mEntries = new Properties();
  
  // Store session context
  private SessionContext mContext = null;
  
  // Session bean methods
  public void ejbActivate() {
    System.out.println("ProfileBean activated.");
  }

  public void ejbRemove() {
    System.out.println("ProfileBean removed.");
  }

  public void ejbPassivate() {
    System.out.println("ProfileBean passivated.");
  }

  public void setSessionContext(SessionContext context) {
    System.out.println("ProfileBean context set.");
    mContext = context;
  }

  public void ejbCreate() {
    System.out.println("Nameless ProfileBean created.");
  }

  public void ejbCreate(String name) throws NoSuchPersonException {
    mName = name;
    System.out.println("ProfileBean created for " + mName + ".");
  }

  // Business methods
  public String getName() {
    return mName;
  }

  public void setName(String name) {
    mName = name;
  }

  public String getEntry(String key) {
    return mEntries.getProperty(key);
  }

  public void setEntry(String key, String value) {
    mEntries.put(key, value);
  }
}</pre>
</blockquote>
</div>
<a name="ch07-13512"></a>
<div class="example">
<h4 class="objtitle">Example 7-7. Home Interface for the Stateful Session Bean</h4>
<blockquote>
<pre class="programlisting">
import javax.ejb.*;
import java.rmi.RemoteException;

public interface ProfileHome extends EJBHome {
  public Profile create() throws RemoteException, CreateException;
  public Profile create(String name) throws RemoteException, CreateException;
}</pre>
</blockquote>
</div>
<p>
<a name="INDEX-1905"></a><a name="INDEX-1906"></a>

This stateful bean is used by clients to maintain a set of application-specific profile entries for a named user. Here is an example client scenario: </p>
<blockquote>
<pre class="programlisting">
// Get the Profile bean's home interface
ProfileHome pHome = ...
// Create a profile for a person
System.out.println("Creating profile for " + name);
Profile profile = pHome.create(name);
// Get/set some entries in the profile
System.out.println("Setting profile entries for " + name);
profile.setEntry("favoriteColor", "blue");
profile.setEntry("language", "German");
System.out.println("Getting profile entries for " + name);
System.out.println("\tFavorite color: " +
  profile.getEntry("favoriteColor"));
System.out.println("\tLanguage: " + profile.getEntry("language"));</pre>
</blockquote>
<p>After getting the home interface for the <tt class="literal">ProfileBean</tt>, the client creates a profile for a named user, sets the values for some profile entries, and gets them back again.</p>
<p>
<a name="INDEX-1907"></a><a name="INDEX-1908"></a><a name="INDEX-1909"></a><a name="INDEX-1910"></a><a name="INDEX-1911"></a>


An EJB container must be told at deployment time whether a session bean is stateful or stateless. The container uses this information to determine how to handle pooling of the session beans and whether to passivate the bean or not, among other things. Since stateless beans can be used by any client, the container pools stateless beans and doles them out to clients as needed. If new stateless beans are needed, the container creates them, and when they aren't needed (e.g., the rate of client requests decreases), they are simply destroyed. In order to allow the container to fill its pool, any stateless session bean must provide a single <tt class="literal">create()</tt> method with no arguments. Stateless beans implement only the no-argument creation method, since they have no client state that could be affected by arguments. An additional restriction on stateless beans is that they cannot participate in transaction synchronization and cannot implement the <tt class="literal">SessionSynchronization</tt> interface, which is described in the next section. </p>
<a name="ch07-pgfid-972034"></a>
<h3 class="sect2">7.5.2. Optional Transaction Support</h3>
<p>
<a name="INDEX-1912"></a><a name="INDEX-1913"></a><a name="INDEX-1914"></a><a name="INDEX-1915"></a><a name="INDEX-1916"></a>
Since session beans don't typically represent persistent shared data, and stateful session beans can only be accessed by a single client at a time, user transaction boundaries may not be important to such a bean. If, however, the session bean is managing database data for the user, it may want to know about the beginning and ending of user transactions, so that it can cache data at the start and commit its database updates at the end. For this reason, the EJB specification allows session beans to optionally implement the <tt class="literal">javax.ejb.SessionSynchronization</tt> interface. By implementing this interface, the session bean indicates that it wants the container to notify it about the beginning and end of transactions. </p>
<p>
<a name="INDEX-1917"></a><a name="INDEX-1918"></a><a name="INDEX-1919"></a>
In this case, the bean must implement the three methods declared on the interface: <tt class="literal">afterBegins()</tt>, <tt class="literal">beforeCompletion()</tt>, and <tt class="literal">afterCompletion()</tt>. The container calls the bean's <tt class="literal">afterBegin()</tt> method just after a new transaction begins. This lets the bean allocate any resources it might need during the transaction and cache database data, for example. Just before the transaction completes, the container calls the bean's <tt class="literal">beforeCompletion()</tt> method. In this method, the bean can release any resources or cached data it may have initialized during the transaction. The <tt class="literal">afterCompletion()</tt> method is called just after the transaction has completed. The container passes in a <tt class="literal">boolean</tt> value that is <tt class="literal">true</tt> if the transaction was committed and <tt class="literal">false</tt> if the transaction was rolled back. The bean can use this notification to deal with rollbacks, for example, allowing the bean to undo any changes made during the transaction.</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch07_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">7.4. Implementing a Basic EJB Object</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">7.6. Implementing Entity Beans</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
