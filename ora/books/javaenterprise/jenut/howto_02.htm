<html>
<head>
<title>Reading a Quick-Reference Entry (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Reading a Quick-Reference Entry">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="howto_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/howto_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="howto_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/howto_01.htm">How to Use This

Quick Reference</a></td><td align="right" valign="top" width="172"><a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch13_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">2. Reading a Quick-Reference Entry</h2>
<p>      Each quick-reference entry contains
      quite a bit of information.  The
      sections that follow describe the structure of a quick-reference entry,
      explaining what information is available, where it is found, and
      what it means.  While reading the following descriptions,
      you will find it helpful to flip through the reference
      section itself to find examples of the features being described.
    </p>
<a name="jentnut-ch-howto-sect-2.1"></a>
<h3 class="sect2">2.1. Class Name, Package Name, Availability, and Flags</h3>
<p>	Each quick-reference entry begins with a four-part title that
	specifies the name, package, and availability of the class, and 
	may also
	specify various additional flags that describe the class.  The
	class name appears in bold at the upper left of the title.  The
	package name appears, in smaller print, in the lower- left, below
	the class name.
      </p>
<p>	The upper-right portion of the title indicates
	the availability of the class; it 
	specifies the earliest release that
	contained the class.  If a class was introduced in Java 1.1, for
	example, this portion of the title reads "Java 1.1".
	If the class was introduced in Version 1.2 of the Java 2 platform,
        the availability reads "Java 1.2," for simplicity's
        sake.  If the class is part of a standard extension, this portion
	of the title specifies the name (or acronym) of the standard
	extension and the earliest version in which the
	class appeared. For example, the availability might read 
	"Servlets
	2.0" or "JNDI 1.1."  
	The availability section of the title is also
	indicates whether a class has been deprecated, and, if
	so, in what release.  For example, it might read "Java 1.1;
	Deprecated in Java 1.2."</p>
<p>	In the lower-right corner of the title you may find a list of
	flags that describe the class.  The possible
	flags and their meanings are as follows:
      </p>
<dl>
<dt>
<b><em class="emphasis">checked</em></b>
</dt>
<dd>
<p>	        The class is a checked exception, which means that it 
		extends <tt class="literal">java.lang.Exception</tt>, but not
		<tt class="literal">java.lang.RuntimeException</tt>.
		In other words, it
		must be declared in the <tt class="literal">throws</tt>
		clause of any method that may throw it.
	      </p>
</dd>
<dt>
<b><em class="emphasis">cloneable</em></b>
</dt>
<dd>
<p>	        The class, or a superclass, implements
		<tt class="literal">java.lang.Cloneable</tt>.
	      </p>
</dd>
<dt>
<b><em class="emphasis">collection</em></b>
</dt>
<dd>
<p>	        The class, or a superclass, implements
		<tt class="literal">java.util.Collection</tt> or
		<tt class="literal">java.util.Map</tt>. 
	      </p>
</dd>
<dt>
<b><em class="emphasis">comparable</em></b>
</dt>
<dd>
<p>	        The class, or a superclass, implements
		<tt class="literal">java.lang.Comparable</tt>. 
	      </p>
</dd>
<dt>
<b><em class="emphasis">error</em></b>
</dt>
<dd>
<p>	        The class extends <tt class="literal">java.lang.Error</tt>.
	      </p>
</dd>
<dt>
<b><em class="emphasis">event</em></b>
</dt>
<dd>
<p>	        The class extends
		<tt class="literal">java.util.EventObject</tt>.
	      </p>
</dd>
<dt>
<b><em class="emphasis">event adapter</em></b>
</dt>
<dd>
<p>	        The class, or a superclass, implements
		<tt class="literal">java.util.EventListener</tt>, and the
		class name ends with "Adapter."
	      </p>
</dd>
<dt>
<b><em class="emphasis">event listener</em></b>
</dt>
<dd>
<p>	        The class, or a superclass, implements
		<tt class="literal">java.util.EventListener</tt>. 
	      </p>
</dd>
<dt>
<b><em class="emphasis">layout manager</em></b>
</dt>
<dd>
<p>	        The class, or a superclass, implements
		<tt class="literal">java.awt.LayoutManager</tt>. 
	      </p>
</dd>
<dt>
<b><em class="emphasis">PJ1.1</em></b>
</dt>
<dd>
<p>	        The class or interface is part of the 
		Personal Java 1.1 platform.
	      </p>
</dd>
<dt>
<b><em class="emphasis">PJ1.1(mod)</em></b>
</dt>
<dd>
<p>	        The class or interface is supported, in modified
		form, by the Personal Java 1.1 platform.
	      </p>
</dd>
<dt>
<b><em class="emphasis">PJ1.1(opt)</em></b>
</dt>
<dd>
<p>	        The class or interface is an optional part of the
		Personal Java 1.1 platform.  Support for the class is
		implementation-dependent.
	      </p>
</dd>
<dt>
<b><em class="emphasis">remote</em></b>
</dt>
<dd>
<p>	        The class, or a superclass, implements
		<tt class="literal">java.rmi.Remote</tt>. 
	      </p>
</dd>
<dt>
<b><em class="emphasis">runnable</em></b>
</dt>
<dd>
<p>	        The class, or a superclass, implements
		<tt class="literal">java.lang.Runnable</tt>. 
	      </p>
</dd>
<dt>
<b><em class="emphasis">serializable</em></b>
</dt>
<dd>
<p>	        The class, or a superclass, implements
		<tt class="literal">java.io.Serializable</tt> 
		and may be serialized.
	      </p>
</dd>
<dt>
<b><em class="emphasis">unchecked</em></b>
</dt>
<dd>
<p>	        The class is an unchecked exception, which means it extends
		<tt class="literal">java.lang.RuntimeException</tt> and,
		therefore, does not need to be declared in the
		<tt class="literal">throws</tt> clause of a method that
		may throw it.
	      </p>
</dd>
</dl>
<a name="jentnut-ch-howto-sect-2.2"></a>
<h3 class="sect2">2.2. Description</h3>
<p>	The title of each quick-reference entry is followed by a short
	description of the most important features of the class or
	interface.  This description may be anywhere from a couple of
	sentences to several paragraphs long.
      </p>
<a name="jentnut-ch-howto-sect-2.3"></a>
<h3 class="sect2">2.3. Synopsis</h3>
<p>	The most important part of every quick-reference entry is the
	<em class="emphasis">class synopsis</em>, which follows the title and description.  The
	synopsis for a class looks a lot like the source code for the
	class, except that the method bodies are omitted, and some
	additional annotations are added.  If you know Java syntax, you
	can read the class synopsis.
      </p>
<p>	The first line of the synopsis contains information about the
	class itself.  It begins with a list of class modifiers, such as
	<tt class="literal">public</tt>, <tt class="literal">abstract</tt>, and
	<tt class="literal">final</tt>.  These modifiers are followed by the
	<tt class="literal">class</tt> or <tt class="literal">interface</tt> keyword
	and then by the name of the class.  The class name may be
	followed by an <tt class="literal">extends</tt> clause that specifies
	the superclass and an <tt class="literal">implements</tt> clause
	that specifies any interfaces the class implements.
      </p>
<p>	The class definition line is followed by a list of the
	fields and methods the class defines.  Once again, if you
	understand basic Java syntax, you should have no trouble making
	sense of these lines.  The listing for each member includes the
	modifiers, type, and name of the member.  For methods, the
	synopsis also includes the type and name of each method
	parameter and an optional <tt class="literal">throws</tt> clause
	that lists the exceptions the method can throw.  The member
	names are in boldface, so that it is easy to scan the list of
	members looking for the one you want.  The names of method
	parameters are in italics to indicate that they are not
	to be used literally.  The member listings are printed on
	alternating gray and white backgrounds to keep them visually
	separate. 
      </p>
<h3 class="sect3">2.3.1. Member availability and flags</h3>
<p>
<a name="INDEX-3560"></a><a name="INDEX-3561"></a>
	  Each member listing is a single line
	  that defines the API for that member.  These listings use
	  Java syntax, so their meaning is immediately clear to any
	  Java programmer.  There is some auxiliary information
	  associated with each member synopsis, however, that requires
	  explanation.
	</p>
<p>	  Recall that each quick-reference entry begins with a title
	  section that includes the release in which the class was first
	  defined.  When a member is introduced into a class after the
	  initial release of the class, the version in which the member
	  was introduced appears, in small print, to the left of the
	  member synopsis.  For example, if a class was first introduced
	  in Java 1.1, but had a new method added in Version 1.2 of Java 2, the
	  title contains the string "Java 1.1," 
	  and the listing for
	  the new member is preceded by the number "1.2."
	  Furthermore, if a member has been deprecated, that fact is
	  indicated with a hash mark (<tt class="literal">#</tt>) to the left
	  of the member synopsis.
	</p>
<p>	  The area to the right of the member synopsis displays a variety of flags that provide additional
	  information about the member.  Some of these flags indicate
	  additional specification details that do not appear in the
	  member API itself.  Other flags contain
	  implementation-specific information.  This information can be
	  quite useful in understanding the class and in debugging your
	  code, but be aware that
	  it may differ between implementations.  The
	  implementation-specific flags displayed in this book are based
	  on Sun's implementation of Java for Microsoft Windows.
	</p>
<p> 
	  The following flags may be displayed to the right of a
	  member synopsis:
	</p>
<dl>
<dt>
<b><em class="emphasis">native</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3562"></a>
		An implementation-specific flag that indicates
		that a method is implemented in native code.  Although
		<tt class="literal">native</tt> is a Java keyword and can
		appear in method signatures, it is part of the method
		implementation, not part of its specification.
		Therefore, this information is included with the
		member flags, rather than as part of the member
		listing.  This flag is useful as a hint about the
		expected performance of a method.
	      </p>
</dd>
<dt>
<b><em class="emphasis">synchronized</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3563"></a>
		An implementation-specific flag that indicates a
		method implementation is declared
		<tt class="literal">synchronized</tt>, meaning that it
		obtains a lock on the object or class before executing.
		Like the <tt class="literal">native</tt> keyword, the
		<tt class="literal">synchronized</tt> keyword is part of the
		method implementation, not part of the specification,
		so it appears as a flag, not in the method


		synopsis itself.  This flag is a useful hint 
		that the method is probably implemented in
		a thread-safe manner.
	      </p>
<p>		Whether or not a method is thread-safe is part of the
		method specification, and this information
		<em class="emphasis">should</em> appear (although it often
		does not) in the method documentation.  There are a
		number of different ways to make a method thread-safe,
		however, and declaring the method with the
		<tt class="literal">synchronized</tt> keyword is only one
		possible implementation.  In other words, a method
		that does not bear the <tt class="literal">synchronized</tt>
		flag can still be thread-safe.
	      </p>
</dd>
<dt>
<b><em class="emphasis">Overrides:</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3564"></a>
		Indicates that a method overrides a method in one of
		its superclasses.  The flag is followed by the name of
		the superclass that the method overrides.  This is a
		specification detail, not an implementation detail.
		As we'll see in the next section, 
		overriding methods are usually
		grouped together in their own section of the class
		synopsis.  The <tt class="literal">Overrides:</tt> flag is
		used only when an overriding method is not grouped in
		that way.
	      </p>
</dd>
<dt>
<b><em class="emphasis">Implements:</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3565"></a>
		Indicates that a method implements a method in
		an interface.  The flag 
		is followed by the name of the interface
		that is implemented.  This is a specification detail, not
		an implementation detail.  As we'll see in the next
		section, methods
		that implement an interface are usually grouped into a
		special section of the class synopsis.  The
		<tt class="literal">Implements:</tt> flag is used only for
		methods that are not grouped in this way.
	      </p>
</dd>
<dt>
<b><em class="emphasis">empty</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3566"></a>
		Indicates that the implementation of the method
		has an empty body.  This can be a hint to the programmer
		that the method may need to be overridden in a subclass.
	      </p>
</dd>
<dt>
<b><em class="emphasis">constant</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3567"></a>
		An implementation flag that indicates a method has
		a trivial implementation.  Only methods with a
		<tt class="literal">void</tt> return type can be truly empty.
		Any method declared to return a value must have at least a
		<tt class="literal">return</tt> statement.  The
		"constant" flag indicates the method
		implementation is empty except for a
		<tt class="literal">return</tt> statement that returns a
		constant value.  Such a method might have a body like
		<tt class="literal">return null;</tt> or <tt class="literal">return
		false;</tt>.  Like the "empty" flag,
		this flag indicates that a method may need to be
		overridden.
	      </p>
</dd>
<dt>
<b><em class="emphasis">default:</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3568"></a>
		This flag is used with property accessor methods that
		read the value of a property (i.e., methods whose names
		begins with "get" and take no arguments).  The
		flag is followed by the default value of the property.
		Strictly speaking, default property values are a
		specification detail.  In practice, however, these
		defaults are not always documented, and care should be
		taken, because the default values may change between
		implementations.
	      </p>
<p>		Not all property accessors have a
		"default:" flag.  A default value is
		determined by dynamically loading the class in question,
		instantiating it using a no-argument constructor, and
		then calling the method to find what it returns.
		This technique can be used only on classes that can be
		dynamically loaded and instantiated and that have
		no-argument constructors, so default values are shown
		for those classes only.  Furthermore, note that when a
		class is instantiated using a different constructor, the
		default values for its properties may be different.
	      </p>
</dd>
<dt>
<b><em class="emphasis">bound</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3569"></a> 
		This flag is used with property accessor methods for
		bound properties of JavaBeans components.  
		The presence of this
		flag means that calling the method generates a
		<tt class="literal">java.beans.PropertyChangeEvent</tt>.  This
		is a specification detail, but it is sometimes not
		documented.  Information about bound properties is
		obtained from the <tt class="literal">BeanInfo</tt> object for
		the class.
	      </p>
</dd>
<dt>
<b><em class="emphasis">constrained</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3570"></a>
		Indicates that a JavaBeans component
		property is constrained.  In other
		words, the method may throw a
		<tt class="literal">java.beans.PropertyVetoException</tt>.  This
		is a specification detail, not an implementation detail.
	      </p>
</dd>
<dt>
<b><em class="emphasis">expert</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3571"></a>
		Indicates that the <tt class="literal">BeanInfo</tt>
		object for this class specifies this method is
		intended for use by experts only.  This
		hint is intended for visual programming tools, but users of
		this book may find the hint useful as well.
	      </p>
</dd>
<dt>
<b><em class="emphasis">hidden</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3572"></a>
		Indicates that the <tt class="literal">BeanInfo</tt>
		object for this class specifies this method
		is for internal use only.  This is a hint that
		visual programming tools should hide the property or
		event from the programmer.  This book does 
		not hide these methods, of course, but this flag
		indicates you 
		should probably avoid using the method.
	      </p>
</dd>
<dt>
<b><em class="emphasis">preferred</em></b>
</dt>
<dd>
<p>
<a name="INDEX-3573"></a> 
		Indicates that the <tt class="literal">BeanInfo</tt> object
		for this class specifies that this method is an accessor
		for a default or preferred property or event.
		This is a hint to visual programming tools to display
		the property or event in a prominent way, and it may
		also be a useful hint to readers of this book.
	      </p>
</dd>
<dt>
<b><em class="emphasis">=</em></b>
</dt>
<dd>
<p>		For <tt class="literal">static</tt><tt class="literal">final</tt> fields, this flag is
		followed by the constant value of the field.  Only
		constants of primitive and <tt class="literal">String</tt>
		types and constants with the value 
		<tt class="literal">null</tt> are displayed.  Some
		constant values are specification details, while others
		are implementation details.  The reason that symbolic
		constants are defined, however, is so you can write code
		that does not rely directly upon the constant value. Use
		this flag to help you understand the class, but do not
		rely upon the constant values in your own programs.
	      </p>
</dd>
</dl>
<h3 class="sect3">2.3.2. Functional grouping of members</h3>
<p>	  Within a class synopsis, the members are not listed in strict
	  alphabetical order.  Instead, they are broken into
	  functional groups and listed alphabetically within each
	  group.  Constructors, methods, fields, and inner classes are
	  listed separately.  Instance methods are kept separate
	  from static (class) methods.  Constants are separated from
	  nonconstant fields; public members are listed separately
	  from protected members.  Grouping members by category breaks a
	  class down into smaller, more comprehensible segments, making
	  the class easier to understand.  This grouping also makes it
	  easier for you to find a desired member.
	</p>
<p>	  Functional groups are separated from each other
	  in a class synopsis with Java comments, such as "// Public
	  Constructors", "// Inner Classes", 
	  and "// Methods
	  Implementing Servlet".  The various functional categories are
	  as follows (in the order in which they appear in a class
	  synopsis):
	</p>
<dl>
<dt>
<b><em class="emphasis">Constructors</em></b>
</dt>
<dd>
<p>		Displays the constructors for the class. Public
		constructors and protected constructors are displayed
		separately in subgroupings. If a class defines no
		constructor at all, the Java compiler adds a default
		no-argument constructor that is displayed here. If a
		class defines only private constructors, it cannot be
		instantiated, and a special, empty grouping entitled
		"No Constructor" indicates this
		fact. Constructors are listed first because the first
		thing you do with most classes is instantiate them by
		calling a constructor.
	      </p>
</dd>
<dt>
<b><em class="emphasis">Constants</em></b>
</dt>
<dd>
<p>		Displays all constants (i.e., fields that are
		declared <tt class="literal">static</tt> and
		<tt class="literal">final</tt>) defined by the class. Public
		and protected constants are displayed in separate
		subgroups. Constants are listed here, near the top of
		the class synopsis, because constant values are often
		used throughout the class as legal values for method
		parameters and return values.
	      </p>
</dd>
<dt>
<b><em class="emphasis">Inner Classes</em></b>
</dt>
<dd>
<p>		Groups all inner classes and interfaces
		defined by the class or interface.  For each inner class,
		there is a single-line synopsis.  Each inner class also
		has its own quick-reference entry that includes a full class
		synopsis for the inner class.  Like constants, inner
		classes are listed near the top of the class synopsis
		because they are often used by other members
		of the class.
	      </p>
</dd>
<dt>
<b><em class="emphasis">Static Methods</em></b>
</dt>
<dd>
<p>		Lists the static methods (class methods) of the class,
		broken down into subgroups for public static methods
		and protected static methods.
	      </p>
</dd>
<dt>
<b><em class="emphasis">Event Listener Registration Methods</em></b>
</dt>
<dd>
<p>		Lists the public instance methods that register and
		deregister event listener objects with the class.  The
		names of these methods begin with the words
		"add" and "remove" and end
		in "Listener."  These methods are always
		passed a <tt class="literal">java.util.EventListener</tt>
		object, and are typically defined in pairs,
		so the pairs are listed together.  The methods are
		listed alphabetically by event name, rather than by
		method name.
	      </p>
</dd>
<dt>
<b><em class="emphasis">Public Instance Methods</em></b>
</dt>
<dd>
<p>		Contains all public instance methods that are not
		grouped elsewhere.
	      </p>
</dd>
<dt>
<b><em class="emphasis">Implementing Methods</em></b>
</dt>
<dd>
<p>		Groups the methods that implement the same
		interface.  There is one subgroup for each interface
		implemented by the class.  Methods
		defined by the same interface are almost always 
		related to each other, so this is a useful functional
		grouping of methods.
	      </p>
</dd>
<dt>
<b><em class="emphasis">Overriding Methods</em></b>
</dt>
<dd>
<p>		Groups the methods that override methods of a
		superclass broken into subgroups by
		superclass. This is typically a useful grouping,
		because it helps to make it clear how a class modifies
		the default behavior of its superclasses.  In practice,
		it is also often true that methods that override the
		same superclass are functionally related to each
		other.
	      </p>
</dd>
<dt>
<b><em class="emphasis">Protected Instance Methods</em></b>
</dt>
<dd>
<p>		Contains all protected instance methods that are not
		grouped elsewhere.
	      </p>
</dd>
<dt>
<b><em class="emphasis">Fields</em></b>
</dt>
<dd>
<p>		Lists all nonconstant fields of the class, breaking them down
		into subgroups for public and protected static fields,
		and public and protected instance fields.  Many classes
		do not define any publicly accessible fields.  For
		those that do, many object-oriented programmers prefer
		not to use those fields directly, but instead to use
		accessor methods when such methods are available.
	      </p>
</dd>
<dt>
<b><em class="emphasis">Deprecated Members</em></b>
</dt>
<dd>
<p>		Deprecated methods and deprecated fields are grouped at
		the very bottom of the class synopsis. Use of these
		members is strongly discouraged.
	      </p>
</dd>
</dl>
<a name="jentnut-ch-howto-sect-2.4"></a>
<h3 class="sect2">2.4. Class Hierarchy</h3>
<p>	For any class or interface that has a nontrivial
	class hierarchy, the class synopsis is followed by a "Hierarchy" section.  This section lists all superclasses of the class, as well as any interfaces
	implemented by those superclasses.  It may also list any
	interfaces extended by an interface.  In the hierarchy listing,
	arrows indicate superclass to subclass relationships, while the
	interfaces implemented by a class follow the class name in
	parentheses.  For example, the following hierarchy indicates
	that <tt class="literal">javax.servlet.ServletException</tt> extends
	<tt class="literal">Exception</tt>, which extends
	<tt class="literal">Throwable</tt> (which implements
	<tt class="literal">Serializable</tt>), which extends
	<tt class="literal">Object</tt>:</p>

	<blockquote>
<pre class="programlisting">Object-->Throwable(Serializable)-->Exception-->ServletException</pre>
</blockquote>

<p>If a class has subclasses, the "Hierarchy" section is followed
	by a "Subclasses" section that lists those subclasses. If an
	interface has implementations, the "Hierarchy" section is
	followed by an "Implementations" section that lists those
	implementations.  While the "Hierarchy" section shows
	ancestors of the class, the "Subclasses" or "Implementations"
	section shows descendants.</p>
<a name="jentnut-ch-howto-sect-2.5"></a>
<h3 class="sect2">2.5. Cross References</h3>
<p>	The class hierarchy section of a quick-reference entry is
	followed by a number of optional "cross reference" 
	sections that
	indicate other, related classes and methods that may be of
	interest.  These sections are:
      </p>
<dl>
<dt>
<b><em class="emphasis">Passed To</em></b>
</dt>
<dd>
<p>	      This section lists all methods and constructors
	      that are passed an object of this type as an argument.
	      This is useful when you have an object of a given type
	      and want to figure out what you can do with it.
	    </p>
</dd>
<dt>
<b><em class="emphasis">Returned By</em></b>
</dt>
<dd>
<p>	      This section lists all methods (but not
	      constructors) that return an object of this type. This is
	      useful when you know that you want to work with an object
	      of this type, but don't know how to obtain one.
	    </p>
</dd>
<dt>
<b><em class="emphasis">Thrown By</em></b>
</dt>
<dd>
<p>	      For checked exception classes, this section lists all methods and constructors that throw exceptions of this
	      type.  This material helps you figure out when a given
	      exception or error may be thrown.  Note, however, that
	      this section is based on the exception types listed in the
	      <tt class="literal">throws</tt> clauses of methods and
	      constructors.  Subclasses of
	      <tt class="literal">RuntimeException</tt> and <tt class="literal">Error</tt> do not have to be
	      listed in <tt class="literal">throws</tt> clauses, so it is not
	      possible to generate a complete cross reference of methods
	      that throw these types of unchecked exceptions.
	    </p>
</dd>
<dt>
<b><em class="emphasis">Type Of</em></b>
</dt>
<dd>
<p>	      This section lists all of the fields and constants that
	      are of this type, which can help you figure out how to
	      obtain an object of this type.
	    </p>
</dd>
</dl>
<a name="jentnut-ch-howto-sect-2.6"></a>
<h3 class="sect2">2.6. A Note About Class Names</h3>
<p>	Throughout the quick reference, you'll notice that classes are
	sometimes referred to by class name alone and at other times
	referred to by
	class name and package name.  If package names were always used,
	the class synopses would become long and hard to read.  On the
	other hand, if package names were never used, it would sometimes
	be difficult to know what class was being referred to.  The
	rules for including or omitting the package name are complex.
	They can be summarized approximately as follows, however:
      </p>
<ul>
<li>
<p>	    If the class name alone is ambiguous, the package
	    name is always used.
	  </p>
</li>
<li>
<p>	    If the class is part of <tt class="literal">java.lang</tt> or <tt class="literal">java.io</tt>, the package
	    name is omitted.
	  </p>
</li>
<li>
<p>	    If the class being referred to is part of the current package
	    (and has a quick-ref entry in the current chapter), the
	    package name is omitted.  The package name is also omitted
	    if the class being referred to is part of a package that
	    contains the current package.  And it is sometimes omitted if
	    the class being referred to is part of a subpackage of the
	    current package.
	  </p>
</li>
</ul>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="howto_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/howto_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch13_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">How to Use This Quick Reference</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">13. The java.rmi Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
