<html>
<head>
<title>The java.rmi.server Package (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The java.rmi.server Package">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch16_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch16_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part3.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/part3.htm">Part 3: API Quick Reference</a></td><td align="right" valign="top" width="172"><a href="ch18_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch18_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 17.  The java.rmi.server Package</h1>

<p>
<a name="INDEX-2675"></a><a name="INDEX-2676"></a><a name="INDEX-2677"></a>
The <tt class="literal">java.rmi.server</tt> package contains the classes that develop server implementations of remote objects. <a href="#ch17-pgfid-975315">Figure 17-1</a> shows the class hierarchy for this package.</p>
<p>The <tt class="literal">RemoteServer</tt> class in this package acts as the base class for all RMI server objects. A single subclass of <tt class="literal">RemoteServer</tt>, <tt class="literal">UnicastRemoteObject</tt>, is provided in this package. It implements a nonpersistent, point-to-point object communication scheme. Other subclasses of <tt class="literal">RemoteServer</tt> could be written to implement multicast object communication, replicated objects, etc.</p>
<p>This package also contains several <tt class="literal">Exception</tt> subclasses relevant to the server implementation of a remote object.</p>
<a name="ch17-pgfid-975315"></a>
<div class="figure">
<img alt="figure" src="figs/Jent.1701.gif" webstripperlinkwas="figs/Jent.1701.gif"></div>
<h4 class="objtitle">Figure 17-1. The java.rmi.server package</h4>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ExportException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2678"></a><a name="INDEX-2679"></a>
This <tt class="literal">RemoteException</tt> is thrown if an attempt is made to export a remote object on a port already in use.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ExportException</b> extends RemoteException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ExportException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ExportException</b> (String <i class="parameter">s</i>, Exception <i class="parameter">ex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->RemoteException-->ExportException</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">SocketSecurityException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>LoaderHandler</b></font></td><td align="right"><font size="+1"><b>Java 1.1; Deprecated in Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2680"></a>
This defines the interface to the internal handler used by the <tt class="literal">RMIClassLoader</tt> to load classes over the network. </p>

<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">LoaderHandler</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final String <b class="function">packagePrefix</b> ;</td><td align="right"><i>="sun.rmi.server"</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract Object <b class="function">getSecurityContext</b> (ClassLoader <i class="parameter">loader</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract Class <b class="function">loadClass</b> (String <i class="parameter">name</i>) throws java.net.MalformedURLException, ClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract Class <b class="function">loadClass</b> (java.net.URL <i class="parameter">codebase</i>, String <i class="parameter">name</i>) throws java.net.MalformedURLException, ClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>LogStream</b></font></td><td align="right"><font size="+1"><b>Java 1.1; Deprecated in Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2681"></a><a name="INDEX-2682"></a><a name="INDEX-2683"></a><a name="INDEX-2684"></a><a name="INDEX-2685"></a>
This class provides the server with an output stream to an error log. A <tt class="literal">LogStream</tt> cannot be created directly by an application. Instead, a handle on a <tt class="literal">LogStream</tt> is obtained by calling the static <tt class="literal">log()</tt> method with the name of the desired log. If the named log doesn't exist, the default log is returned. The default <tt class="literal">PrintStream</tt> creates new <tt class="literal">LogStream</tt> objects can be retrieved through the <tt class="literal">getDefaultStream()</tt> method and set using the <tt class="literal">setDefaultStream()</tt> method.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">LogStream</b> extends PrintStream {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">BRIEF</b> ;</td><td align="right"><i> =10</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">SILENT</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">VERBOSE</b> ;</td><td align="right"><i> =20</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public static PrintStream <b class="function">getDefaultStream</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public java.io.OutputStream <b class="function">getOutputStream</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public static LogStream <b class="function">log</b> (String <i class="parameter">name</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public static int <b class="function">parseLevel</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public static void <b class="function">setDefaultStream</b> (PrintStream <i class="parameter">newDefault</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public void <b class="function">setOutputStream</b> (java.io.OutputStream <i class="parameter">out</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i> Overrides:Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public void <b class="function">write</b> (int <i class="parameter">b</i>);</td><td align="right"><i> Overrides:PrintStream</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public void <b class="function">write</b> (byte[ ] <i class="parameter">b</i>, int <i class="parameter">off</i>, int <i class="parameter">len</i>);</td><td align="right"><i> Overrides:PrintStream</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->java.io.OutputStream-->FilterOutputStream-->PrintStream-->LogStream</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">LogStream.log()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ObjID</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2686"></a><a name="INDEX-2687"></a><a name="INDEX-2688"></a><a name="INDEX-2689"></a>
An <tt class="literal">ObjID</tt> is used on an object server to uniquely identify exported remote objects. It is used in an RMI server during distributed garbage collection.</p>
<p>The <tt class="literal">equals()</tt> method is overridden from <tt class="literal">Object</tt> to return <tt class="literal">true</tt> only if the objects identified by the two <tt class="literal">ObjID</tt> values are equal. The <tt class="literal">ObjID</tt> class also has <tt class="literal">read()</tt> and <tt class="literal">write()</tt> methods that marshal and unmarshal an <tt class="literal">ObjID</tt> from I/O streams.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">ObjID</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ObjID</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ObjID</b> (int <i class="parameter">num</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static final int <b class="function">ACTIVATOR_ID</b> ;</td><td align="right"><i> =1</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">DGC_ID</b> ;</td><td align="right"><i> =2</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final int <b class="function">REGISTRY_ID</b> ;</td><td align="right"><i> =0</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static ObjID <b class="function">read</b> (ObjectInput <i class="parameter">in</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (ObjectOutput <i class="parameter">out</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public methods overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->ObjID(Serializable)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.rmi.dgc.DGC.{clean(), dirty()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ObjID.read()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Operation</b></font></td><td align="right"><font size="+1"><b>Java 1.1; Deprecated in Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2690"></a>

An <tt class="literal">Operation</tt> contains a description of a method on a
remote object. This class is used only in the stub classes generated by
the <em class="emphasis">rmic</em> compiler. The Java 2
<em class="emphasis">rmic</em> compiler no longer uses the Operation class,
so it is deprecated, but still present in the Java 2 SDK 1.2 to support
RMI stubs generated by the JDK 1.1 <em class="emphasis">rmic</em>
compiler.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">Operation</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public <b class="function">Operation</b> (String <i class="parameter">op</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public String <b class="function">getOperation</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i> Overrides:Object</i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">RemoteRef.newCall()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">Skeleton.getOperations()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RemoteCall</b></font></td><td align="right"><font size="+1"><b>Java 1.1; Deprecated in Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2691"></a><a name="INDEX-2692"></a><a name="INDEX-2693"></a><tt class="literal">RemoteCall</tt> is the interface used by stubs and skeletons to perform remote method calls. The <tt class="literal">getInputStream()</tt> and <tt class="literal">getOutputStream()</tt> methods return streams that can marshal arguments, or return values and then unmarshal them on the other end of the method call.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">RemoteCall</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract void <b class="function">done</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract void <b class="function">executeCall</b> () throws Exception;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract ObjectInput <b class="function">getInputStream</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract ObjectOutput <b class="function">getOutputStream</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract ObjectOutput <b class="function">getResultStream</b> (boolean <i class="parameter">success</i>) throws IOException, StreamCorruptedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract void <b class="function">releaseInputStream</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract void <b class="function">releaseOutputStream</b> () throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">RemoteRef.{done(), invoke()}, Skeleton.dispatch()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">RemoteRef.newCall()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RemoteObject</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>serializable remote PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>The <tt class="literal"><a name="INDEX-2694"></a><a name="INDEX-2695"></a><a name="INDEX-2696"></a>
RemoteObject</tt> class reimplements key <tt class="literal">Object</tt> methods for remote objects. It also maintains a <tt class="literal">RemoteRef</tt> object, which is a handle to the actual remote object. The <tt class="literal">equals()</tt> implementation returns <tt class="literal">true</tt> only if the two referenced remote objects are equal. The <tt class="literal">hashCode()</tt> method is implemented so that every remote stub that refers to the same remote object has the same hash code. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">RemoteObject</b> implements Remote, Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">RemoteObject</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">RemoteObject</b> (RemoteRef <i class="parameter">newref</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static Remote <b class="function">toStub</b> (Remote <i class="parameter">obj</i>) throws NoSuchObjectException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public RemoteRef <b class="function">getRef</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public methods overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected transient RemoteRef <b class="function">ref</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->RemoteObject(Remote,Serializable)</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">RemoteServer, RemoteStub</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">RemoteRef.newCall()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RemoteRef</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2697"></a>
A <tt class="literal">RemoteRef</tt> is a handle on the object that implements a remote object reference. Each <tt class="literal">RemoteObject</tt> contains a <tt class="literal">RemoteRef</tt> that acts as its interface to the actual remote object it represents. Normally, you don't need to interact directly with <tt class="literal">RemoteRef</tt> objects from your application code. Rather, application code interacts with <tt class="literal">RemoteObject</tt> objects, which use their internal <tt class="literal">RemoteRef</tt> objects to perform remote method invocations.</p>
<p>
<a name="INDEX-2698"></a><a name="INDEX-2699"></a><a name="INDEX-2700"></a>
The <tt class="literal">newCall()</tt> method creates a call object for invoking a remote method on the referenced object. The <tt class="literal">invoke()</tt> method actually executes a remote-method invocation. If a remote method returns successfully, the <tt class="literal">done()</tt> method is called to clean up the connection to the remote object.</p>
<p>
<a name="INDEX-2701"></a><a name="INDEX-2702"></a><a name="INDEX-2703"></a><a name="INDEX-2704"></a>
The <tt class="literal">remoteEquals()</tt>, <tt class="literal">remoteHashCode()</tt>, and <tt class="literal">remoteToString()</tt> methods on <tt class="literal">RemoteRef</tt> are used by <tt class="literal">RemoteObject</tt> to implement the remote versions of the <tt class="literal">equals()</tt>, <tt class="literal">hashCode()</tt>, and <tt class="literal">toString()</tt> methods.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">RemoteRef</b> extends Externalizable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static final String <b class="function">packagePrefix</b> ;</td><td align="right"><i>="sun.rmi.server"</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static final long <b class="function">serialVersionUID</b> ;</td><td align="right"><i> =3632638527362204081</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getRefClass</b> (ObjectOutput <i class="parameter">out</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public abstract Object <b class="function">invoke</b> (Remote <i class="parameter">obj</i>, java.lang.reflect.Method <i class="parameter">method</i>, Object[ ] <i class="parameter">params</i>, long <i class="parameter">opnum</i>) throws Exception;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">remoteEquals</b> (RemoteRef <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract int <b class="function">remoteHashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">remoteToString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract void <b class="function">done</b> (RemoteCall <i class="parameter">call</i>) throws RemoteException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract void <b class="function">invoke</b> (RemoteCall <i class="parameter">call</i>) throws Exception;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract RemoteCall <b class="function">newCall</b> (RemoteObject <i class="parameter">obj</i>, Operation[ ] <i class="parameter">op</i>, int <i class="parameter">opnum</i>, long <i class="parameter">hash</i>) throws RemoteException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(RemoteRef(Externalizable(Serializable)))</tt>
</p>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">ServerRef</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.rmi.activation.ActivationGroup_Stub.ActivationGroup_Stub(), RemoteObject.RemoteObject(), RemoteRef.remoteEquals(), RemoteServer.RemoteServer(), RemoteStub.{RemoteStub(), setRef()}</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">RemoteObject.getRef()</tt>
</p>
<p>
<span class="refsect1">Type Of: </span><tt class="literal">RemoteObject.ref</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RemoteServer</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>serializable remote PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2705"></a><a name="INDEX-2706"></a><a name="INDEX-2707"></a><a name="INDEX-2708"></a>
This class acts as an abstract base class for all remote object server implementations. The intent is for subclasses to implement the semantics of the remote object (e.g., multicast remote objects, replicated objects). As of JDK 1.1 and later, the only concrete sub-class provided is <tt class="literal">UnicastRemoteObject</tt>, which implements a nonreplicated remote object. The <tt class="literal">java.activation.Activatable</tt> class is a new abstract subclass in Java 2 that represents a server object that is persistent and activatable.</p>
<p>The <tt class="literal">getClientHost()</tt> method returns the name of the host for the client being served in the current thread. The <tt class="literal">getLog()</tt> and <tt class="literal">setLog()</tt> methods access the call log for a <tt class="literal">RemoteServer</tt>.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">RemoteServer</b> extends RemoteObject {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">RemoteServer</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">RemoteServer</b> (RemoteRef <i class="parameter">ref</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static String <b class="function">getClientHost</b> () throws ServerNotActiveException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static PrintStream <b class="function">getLog</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setLog</b> (java.io.OutputStream <i class="parameter">out</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->RemoteObject(Remote,Serializable)-->RemoteServer</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.rmi.activation.Activatable, UnicastRemoteObject</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RemoteStub</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>serializable remote PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2709"></a><a name="INDEX-2710"></a>
All client stub classes generated by the <em class="emphasis">rmic</em> compiler are derived from this abstract class. A client receives a <tt class="literal">RemoteStub</tt> when it successfully looks up a remote object through the RMI registry. A client stub serves as a client interface to the remote object it references, converting method calls on its interface to remote method invocations on the remote object implementation. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">RemoteStub</b> extends RemoteObject {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">RemoteStub</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">RemoteStub</b> (RemoteRef <i class="parameter">ref</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Protected Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">protected static void <b class="function">setRef</b> (RemoteStub <i class="parameter">stub</i>, RemoteRef <i class="parameter">ref</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->RemoteObject(Remote,Serializable)-->RemoteStub</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.rmi.activation.ActivationGroup_Stub</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">RemoteStub.setRef()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">ServerRef.exportObject(), UnicastRemoteObject.exportObject()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RMIClassLoader</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2711"></a><a name="INDEX-2712"></a><a name="INDEX-2713"></a>
This class loads classes over the network using URLs. The class has two <tt class="literal">loadClass()</tt> methods, one for loading a class from a given (absolute) URL and another for loading a class from a given (relative) URL, starting at a particular codebase.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">RMIClassLoader</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">No Constructor</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static String <b class="function">getClassAnnotation</b> (Class <i class="parameter">cl</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static Class <b class="function">loadClass</b> (java.net.URL <i class="parameter">codebase</i>, String <i class="parameter">name</i>) throws java.net.MalformedURLException, ClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static Class <b class="function">loadClass</b> (String <i class="parameter">codebase</i>, String <i class="parameter">name</i>) throws java.net.MalformedURLException, ClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public static Object <b class="function">getSecurityContext</b> (ClassLoader <i class="parameter">loader</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public static Class <b class="function">loadClass</b> (String <i class="parameter">name</i>) throws java.net.MalformedURLException, ClassNotFoundException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RMIClientSocketFactory</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2714"></a><a name="INDEX-2715"></a>
This interface represents a source for client sockets that is used by the RMI internals to make client connections during RMI calls. It is possible to provide a custom socket factory to be used with a particular remote object, by using the appropriate constructors on the <tt class="literal">UnicastRemoteObject</tt> or <tt class="literal">Activatable</tt> classes, or, with a particular registry, by using the appropriate <tt class="literal">LocateRegistry.createRegistry()</tt> method. This can be useful in situations where a firewall lies between the client and the server object or remote registry, and specialized sockets are needed to negotiate the firewall protocol.</p>
<p>The <tt class="literal">RMIClientSocketFactory</tt> associated with a remote object is used by any remote stub references to establish connections with the server object. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">RMIClientSocketFactory</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.net.Socket <b class="function">createSocket</b> (String <i class="parameter">host</i>, int <i class="parameter">port</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">RMISocketFactory</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.rmi.activation.Activatable.{Activatable(), exportObject()}, java.rmi.registry.LocateRegistry.{createRegistry(), getRegistry()}, UnicastRemoteObject.{exportObject(), UnicastRemoteObject()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RMIFailureHandler</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2716"></a><a name="INDEX-2717"></a><a name="INDEX-2718"></a>
The <tt class="literal">failure()</tt> method on the current <tt class="literal">RMIFailureHandler</tt> is called when the RMI communication system fails to create a <tt class="literal">Socket</tt> or <tt class="literal">ServerSocket</tt>. The current handler is set using the <tt class="literal">setFailureHandler()</tt> method on <tt class="literal">RMISocketFactory</tt>. The <tt class="literal">failure()</tt> method returns a <tt class="literal">boolean</tt> value that indicates whether the RMI system should retry the socket connection.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">RMIFailureHandler</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract boolean <b class="function">failure</b> (Exception <i class="parameter">ex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">RMISocketFactory.setFailureHandler()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">RMISocketFactory.getFailureHandler()</tt>
</p>
</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RMIServerSocketFactory</b></font></td><td align="right"><font size="+1"><b>Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2719"></a><a name="INDEX-2720"></a><a name="INDEX-2721"></a>
This interface represents a source for server sockets that is used by the RMI internals to make client connections during RMI calls. It is possible to provide a custom socket factory to be used with a particular remote object, by using the appropriate constructors on the <tt class="literal">UnicastRemoteObject</tt> or <tt class="literal">Activatable</tt> classes, or, with a particular registry, by using the appropriate <tt class="literal">LocateRegistry.createRegistry()</tt> method. This can be useful in situations where a firewall lies between the client and the server object or the remote registry, and specialized sockets are needed to negotiate the firewall protocol.</p>
<p>The <tt class="literal">RMIServerSocketFactory</tt> creates <tt class="literal">ServerSocket</tt> objects that are used by remote objects to accept client connections.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">RMIServerSocketFactory</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.net.ServerSocket <b class="function">createServerSocket</b> (int <i class="parameter">port</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Implementations: </span><tt class="literal">RMISocketFactory</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">java.rmi.activation.Activatable.{Activatable(), exportObject()}, java.rmi.registry.LocateRegistry.createRegistry(), UnicastRemoteObject.{exportObject(), UnicastRemoteObject()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>RMISocketFactory</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2722"></a>
This abstract class provides an interface for the RMI internals to use to create sockets for both client and server communications. It implements both the <tt class="literal">RMIClientSocketFactory</tt> and the <tt class="literal">RMIServerSocketFactory</tt> interfaces, so it can create either <tt class="literal">Socket</tt> objects for clients or <tt class="literal">ServerSocket</tt> objects for servers. The factory maintains a <tt class="literal">RMIFailureHandler</tt> to deal with failures encountered while attempting to create sockets. If an error is encountered while creating a socket, the <tt class="literal">failure()</tt> method on the current <tt class="literal">RMIFailureHandler</tt> is called. If the return value is <tt class="literal">true</tt>, the <tt class="literal">RMISocketFactory</tt> attempts the socket creation again; otherwise the factory gives up and throws an <tt class="literal">IOException</tt>.</p>
<p>
<a name="INDEX-2723"></a><a name="INDEX-2724"></a><a name="INDEX-2725"></a><a name="INDEX-2726"></a><a name="INDEX-2727"></a><a name="INDEX-2728"></a><a name="INDEX-2729"></a><a name="INDEX-2730"></a>

Client sockets are created using the <tt class="literal">createSocket()</tt> method (inherited from <tt class="literal">RMIClientSocketFactory</tt>), while server sockets are created using the <tt class="literal">createServerSocket()</tt> method (inherited from <tt class="literal">RMIServerSocketFactory</tt>). The current <tt class="literal">RMISocketFactory</tt> for the runtime system can be accessed using the static <tt class="literal">getSocketFactory()</tt> and <tt class="literal">setSocketFactory()</tt> methods. The <tt class="literal">RMIFailureHandler</tt> for the current factory is accessed using the <tt class="literal">getFailureHandler()</tt> and <tt class="literal">setFailureHandler()</tt> methods. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract class <b class="classname">RMISocketFactory</b> implements RMIClientSocketFactory, RMIServerSocketFactory {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">RMISocketFactory</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static RMISocketFactory <b class="function">getDefaultSocketFactory</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static RMIFailureHandler <b class="function">getFailureHandler</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static RMISocketFactory <b class="function">getSocketFactory</b> ();</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setFailureHandler</b> (RMIFailureHandler <i class="parameter">fh</i>);</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static void <b class="function">setSocketFactory</b> (RMISocketFactory <i class="parameter">fac</i>) throws IOException;</td><td align="right"><i> synchronized</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods implementing RMIClientSocketFactory</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.net.Socket <b class="function">createSocket</b> (String <i class="parameter">host</i>, int <i class="parameter">port</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Methods implementing RMIServerSocketFactory</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract java.net.ServerSocket <b class="function">createServerSocket</b> (int <i class="parameter">port</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->RMISocketFactory(RMIClientSocketFactory,RMIServerSocketFactory)</tt>
</p>
<p>
<span class="refsect1">Passed To: </span><tt class="literal">RMISocketFactory.setSocketFactory()</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">RMISocketFactory.{getDefaultSocketFactory(), getSocketFactory()}</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ServerCloneException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2731"></a><a name="INDEX-2732"></a>

This exception is thrown if an attempt to clone a <tt class="literal">RemoteServer</tt> object fails while the clone is being exported. The nested exception is the <tt class="literal">RemoteException</tt> that was thrown during the cloning operation.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ServerCloneException</b> extends CloneNotSupportedException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ServerCloneException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ServerCloneException</b> (String <i class="parameter">s</i>, Exception <i class="parameter">ex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public methods overriding Throwable</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">getMessage</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">printStackTrace</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">printStackTrace</b> (PrintStream <i class="parameter">ps</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public void <b class="function">printStackTrace</b> (PrintWriter <i class="parameter">pw</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Fields</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Exception <b class="function">detail</b> ;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->CloneNotSupportedException-->ServerCloneException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ServerNotActiveException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2733"></a>
This exception is thrown if the <tt class="literal">getClientHost()</tt> method is called on a <tt class="literal">RemoteServer</tt> when the server isn't handling a remote method call.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">ServerNotActiveException</b> extends Exception {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ServerNotActiveException</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">ServerNotActiveException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->ServerNotActiveException</tt>
</p>
<p>
<span class="refsect1">Thrown By: </span><tt class="literal">RemoteServer.getClientHost(), ServerRef.getClientHost()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>ServerRef</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2734"></a><a name="INDEX-2735"></a><a name="INDEX-2736"></a><a name="INDEX-2737"></a><a name="INDEX-2738"></a>
This is an interface to the server-side implementation of a remote object. The <tt class="literal">getClientHost()</tt> method returns the name of the host whose remote method call is currently being serviced by the object implementation. If the server object is not servicing a remote method call when <tt class="literal">getClientHost()</tt> is called, a <tt class="literal">ServerNotActiveException</tt> is thrown. Using the data provided, the <tt class="literal">exportObject()</tt> method either creates or finds a client stub for the given object implementation.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">ServerRef</b> extends RemoteRef {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constants</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static final long <b class="function">serialVersionUID</b> ;</td><td align="right"><i> =-4557750989390278438</i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract RemoteStub <b class="function">exportObject</b> (Remote <i class="parameter">obj</i>, Object <i class="parameter">data</i>) throws RemoteException;</td><td align="right"><i></i></td>
</tr>

<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract String <b class="function">getClientHost</b> () throws ServerNotActiveException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">(ServerRef(RemoteRef(Externalizable(Serializable))))</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Skeleton</b></font></td><td align="right"><font size="+1"><b>Java 1.1; Deprecated in Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2739"></a><a name="INDEX-2740"></a><a name="INDEX-2741"></a><a name="INDEX-2742"></a>
Server-side skeleton classes generated by the <em class="emphasis">rmic</em> compiler implement the <tt class="literal">Skeleton</tt> interface. The <tt class="literal">dispatch()</tt> method invokes a method on the server object, and <tt class="literal">getOperations()</tt> returns an array of <tt class="literal">Operation</tt> objects that represent the methods available on the server object. </p>
<p>
<a name="INDEX-2743"></a>
The <tt class="literal">Skeleton</tt> interface is used in classes generated by the <em class="emphasis">rmic</em> compiler in JDK 1.1. The Java 2 SDK 1.2 <em class="emphasis">rmic</em> compiler doesn't use the <tt class="literal">Skeleton</tt> interface for its skeleton classes, so it has been deprecated as of Java 2.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">Skeleton</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Deprecated Public Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract void <b class="function">dispatch</b> (Remote <i class="parameter">obj</i>, RemoteCall <i class="parameter">theCall</i>, int <i class="parameter">opnum</i>, long <i class="parameter">hash</i>) throws Exception;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public abstract Operation[ ] <b class="function">getOperations</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SkeletonMismatchException</b></font></td><td align="right"><font size="+1"><b>Java 1.1; Deprecated in Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2744"></a><a name="INDEX-2745"></a>
This <tt class="literal">RemoteException</tt> is thrown during a remote method call if a mismatch is detected on the server between the hash code of the client stub and the hash code of the server implementation. It is usually received by the client wrapped in a <tt class="literal">ServerException</tt>.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">SkeletonMismatchException</b> extends RemoteException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">#</span></td><td align="left">public <b class="function">SkeletonMismatchException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->RemoteException-->SkeletonMismatchException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SkeletonNotFoundException</b></font></td><td align="right"><font size="+1"><b>Java 1.1; Deprecated in Java 1.2</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2746"></a>
This <tt class="literal">RemoteException</tt> is thrown during the export of a remote object, if the corresponding skeleton class for the object either cannot be found or loaded for some reason.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">SkeletonNotFoundException</b> extends RemoteException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SkeletonNotFoundException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SkeletonNotFoundException</b> (String <i class="parameter">s</i>, Exception <i class="parameter">ex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->RemoteException-->SkeletonNotFoundException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>SocketSecurityException</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>serializable checked PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2747"></a><a name="INDEX-2748"></a>
This exception is a subclass of <tt class="literal">ExportException</tt> that is thrown if a socket security violation is encountered while attempting to export a remote object. An example would be an attempt to export an object on an illegal port.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">SocketSecurityException</b> extends ExportException {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SocketSecurityException</b> (String <i class="parameter">s</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">SocketSecurityException</b> (String <i class="parameter">s</i>, Exception <i class="parameter">ex</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->Throwable(Serializable)-->Exception-->IOException-->RemoteException-->ExportException-->SocketSecurityException</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>UID</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>serializable PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2749"></a><a name="INDEX-2750"></a>
A <tt class="literal">UID</tt> is an identifier that is unique with respect to a particular host. <tt class="literal">UID </tt>objects are used internally by RMI's distributed garbage collector and are generally not dealt with directly in application code.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public final class <b class="classname">UID</b> implements Serializable {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UID</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public <b class="function">UID</b> (short <i class="parameter">num</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static UID <b class="function">read</b> (DataInput <i class="parameter">in</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public void <b class="function">write</b> (DataOutput <i class="parameter">out</i>) throws IOException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public methods overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public boolean <b class="function">equals</b> (Object <i class="parameter">obj</i>);</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public int <b class="function">hashCode</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public String <b class="function">toString</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->UID(Serializable)</tt>
</p>
<p>
<span class="refsect1">Returned By: </span><tt class="literal">UID.read()</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>UnicastRemoteObject</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>serializable remote PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2751"></a><a name="INDEX-2752"></a><a name="INDEX-2753"></a>
This class represents a nonreplicated remote object, or in other words, an object that lives as a singular implementation on a server, with a point-to-point connection to each client through reference stubs. This remote server class does not implement persistence, so client references to the object are valid only during the lifetime of the object. </p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public class <b class="classname">UnicastRemoteObject</b> extends RemoteServer {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Protected Constructors</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">protected <b class="function">UnicastRemoteObject</b> () throws RemoteException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected <b class="function">UnicastRemoteObject</b> (int <i class="parameter">port</i>) throws RemoteException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">protected <b class="function">UnicastRemoteObject</b> (int <i class="parameter">port</i>, RMIClientSocketFactory <i class="parameter">csf</i>, RMIServerSocketFactory <i class="parameter">ssf</i>) throws RemoteException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Class Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public static RemoteStub <b class="function">exportObject</b> (Remote <i class="parameter">obj</i>) throws RemoteException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static Remote <b class="function">exportObject</b> (Remote <i class="parameter">obj</i>, int <i class="parameter">port</i>) throws RemoteException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static Remote <b class="function">exportObject</b> (Remote <i class="parameter">obj</i>, int <i class="parameter">port</i>, RMIClientSocketFactory <i class="parameter">csf</i>, RMIServerSocketFactory <i class="parameter">ssf</i>) throws RemoteException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td width="10"><span class="java-revision">1.2</span></td><td align="left">public static boolean <b class="function">unexportObject</b> (Remote <i class="parameter">obj</i>, boolean <i class="parameter">force</i>) throws NoSuchObjectException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public methods overriding Object</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public Object <b class="function">clone</b> () throws CloneNotSupportedException;</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>

<p>
<span class="refsect1">Hierarchy: </span><tt class="literal">Object-->RemoteObject(Remote,Serializable)-->RemoteServer-->UnicastRemoteObject</tt>
</p>
<p>
<span class="refsect1">Subclasses: </span><tt class="literal">java.rmi.activation.ActivationGroup</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>Unreferenced</b></font></td><td align="right"><font size="+1"><b>Java 1.1</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>java.rmi.server</b></font></td><td align="right"><font size="+1"><b><i>PJ1.1(opt)</i></b></font></td>
</tr>
</table>
<p>
<a name="INDEX-2754"></a><a name="INDEX-2755"></a>
If a server object implements this interface, the <tt class="literal">unreferenced()</tt> method is called by the RMI runtime system when the last client reference to a remote object is dropped. A remote object shouldn't be garbage collected until all its remote and local references are gone. So the <tt class="literal">unreferenced()</tt> method isn't a trigger for an object to be finalized, but rather a chance for the remote object to respond appropriately when its client reference count goes to zero. The unreferenced object could, for example, start a timer countdown to move the object to persistent storage after a given idle time with respect to remote clients.</p>
<div class="refsynopsisdiv">
<table border="0">
<tr>
<td colspan="3">public abstract interface <b class="classname">Unreferenced</b>  {</td>
</tr>
<tr>
<td><i class="members">// </i></td><td colspan="2"><i class="members">Public Instance Methods</i></td>
</tr>
<tr>
<td width="10"><span class="java-revision"></span></td><td align="left">public abstract void <b class="function">unreferenced</b> ();</td><td align="right"><i></i></td>
</tr>
<tr>
<td colspan="3">}</td>
</tr>
</table>
</div>
</div>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch16_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch16_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch18_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch18_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">15.1. The java.rmi.registry Package</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">18. The java.sql Package</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
