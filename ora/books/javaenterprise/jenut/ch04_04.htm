<html>
<head>
<title>Finding Remote Objects (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Finding Remote Objects">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_01.htm">Chapter 4: Java IDL</a></td><td align="right" valign="top" width="172"><a href="ch04_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">4.4. Finding Remote Objects</h2>
<a name="INDEX-1035"></a>
<p>Now that we have registered our remote object with an ORB, it is
available to CORBA client applications. This means we are done with
the setup of the remote object and can turn our attention to client
applications that want to use the object. As I said earlier, every
CORBA process needs a reference to an ORB. Once a client application
has access to an ORB, the next thing for it to do is find remote
objects to interact with. But before we can discuss finding remote
objects, we need to talk a bit about what remote object references
look like under CORBA.
<a name="INDEX-1036"></a><a name="INDEX-1037"></a>
</p>
<p>
<a name="INDEX-1038"></a>
The whole point of CORBA is to be able to distribute objects across
  the network and then use them from any point on the network. In
  order for a local process to make requests of a remote object, it
  needs to have some kind of reference to that remote object. This
  object reference needs to contain enough information for the local
  ORB to find the ORB serving the target object and send the request
  to the remote ORB using an agreed-upon protocol. </p>
<p>
<a name="INDEX-1039"></a>
In most situations, a CORBA client has a reference to a remote object
  in the form of an object stub. The stub encapsulates the actual
  object reference, providing what seems like a direct interface to
  the remote object in the local environment. If the client is
  implemented in C++, Java, or some other object-oriented language,
  the object stub is a native object in that language. Other,
  nonobject languages represent remote object references in whatever
  way is dictated in the CORBA language binding for that language.</p>
<p>
<a name="INDEX-1040"></a><a name="INDEX-1041"></a><a name="INDEX-1042"></a><a name="INDEX-1043"></a>
CORBA includes its own root object class, since some object
programming languages may have different inheritance structures. In
the Java binding for CORBA, all CORBA object references (local or
remote) implement the <tt class="literal">org.omg.CORBA.Object</tt>
interface. So, when a client of a remote CORBA object receives a stub
for the object, it actually gets an
<tt class="literal">org.omg.CORBA.Object</tt> that serves as a proxy for the
remote object. The
<tt class="literal">org.omg.CORBA.portable.ObjectImpl</tt> class provides
default implementations for the methods defined on
<tt class="literal">org.omg.CORBA.Object</tt>. Java stubs and
implementations for CORBA objects are actually subclassed from the
<tt class="literal">ObjectImpl</tt> class. Internally,
<tt class="literal">ObjectImpl</tt> deals with delegating requests on the
object to the proper target object, whether it is a remote object or a
local one. <tt class="literal">ObjectImpl</tt> implements the
<tt class="literal">org.omg.CORBA.Object</tt> interface and extends the
<tt class="literal">java.lang.Object</tt> class, so it truly provides a
joining point between the CORBA and Java object environments.</p>
<p>
<a name="INDEX-1044"></a><a name="INDEX-1045"></a>
A reference to an <tt class="literal">org.omg.CORBA.Object</tt> object that
is connected to a remote object is all a client needs to invoke
methods on a remote object. Using the Dynamic Invocation Interface
defined by the CORBA standard, you can create method requests and send
them to the remote object through the <tt class="literal">Object</tt>
interface, as we'll discuss later in this chapter. If your
client has the actual Java interface for the remote object available
at compile time, however, you probably want to convert the
<tt class="literal">Object</tt> reference into a reference of that type, so
that you can use the interface to call remote methods directly. </p>
<p>
<a name="INDEX-1046"></a><a name="INDEX-1047"></a><a name="INDEX-1048"></a><a name="INDEX-1049"></a>
Converting an <tt class="literal">org.omg.COBRA.Object</tt> to a specific
 remote interface is done by narrowing the object reference to the
 corresponding interface type, using type-specific helper classes to
 do the narrowing. We've already seen how the Java IDL compiler,
 <em class="emphasis">idltojava</em>, creates a helper class from an IDL
 interface (e.g., <tt class="literal">ThisOrThatServerHelper</tt>). The
 helper class includes a <tt class="literal">narrow()</tt> method that
 converts an <tt class="literal">org.omg.CORBA.Object</tt> reference to a
 reference of the given type. If the object reference you pass into
 the <tt class="literal">narrow()</tt> method is not the type the helper
 expects, an <tt class="literal">org.omg.CORBA.BAD_PARAM</tt> exception is
 thrown. This is a <tt class="literal">RuntimeException</tt>, so it
 doesn't have to be caught by your code, unless you're
 trying to test the type of a CORBA reference for some reason. </p>
<p>With that background material out of the way, let's
 discuss actually finding remote object references. There are many
 ways that an object reference can find its way through the ORB into a
 client application, but they all boil down to one of these methods:
<a name="INDEX-1050"></a>
</p>
<ul>
<li>
<p>Getting an initial reference directly from the ORB</p>
</li>
<li>
<p>Getting an object reference through a method call on another remote object reference</p>
</li>
<li>
<p>Using a stringified object reference obtained through a secondary channel and converting it to a live object reference</p>
</li>
</ul>
<a name="ch04-pgfid-961016"></a>
<h3 class="sect2">4.4.1. Initial ORB References</h3>
<p>
<a name="INDEX-1051"></a><a name="INDEX-1052"></a>

In addition to providing core object communication services, an ORB can also provide additional services, such as a Naming Service, a Trading Service, a Security Service, etc. These services are represented as CORBA objects and are available through the ORB automatically, based on how it is configured. The ORB interface provides the <tt class="literal">resolve_initial_references()</tt> method for obtaining references to these initial objects. Each CORBA service the ORB supports is represented by one or more object interfaces, and these objects can be asked for using standard names. As we saw earlier when we registered a remote object, the standard name for the Naming Service is "NameService."</p>
<p>
<a name="INDEX-1053"></a><a name="INDEX-1054"></a><a name="INDEX-1055"></a>
Once you've initialized your ORB reference, you can ask the ORB for a list of the names of its initial objects using the <tt class="literal">list_initial_references()</tt> method:</p>
<blockquote>
<pre class="programlisting">
String names[] = myORB.list_initial_references();</pre>
</blockquote>
<p>
<a name="INDEX-1056"></a>
This method returns an array of <tt class="literal">String</tt> objects that contains the names of all initial objects in the ORB. These names can then be used to get references to the objects through the <tt class="literal">resolve_initial_references()</tt> method. </p>
<p>
<a name="INDEX-1057"></a><a name="INDEX-1058"></a><a name="INDEX-1059"></a>
Here's how we used <tt class="literal">resolve_initial_references()</tt> to obtain a reference to the Naming Service in 
<a href="ch04_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_03.htm">Example 4-8</a>:</p>
<blockquote>
<pre class="programlisting">
ORB myORB = ORB.init(...);
org.omg.CORBA.Object nameRef = 
	myORB.resolve_initial_references("NameService");</pre>
</blockquote>
<p>Although the <tt class="literal">list_initial_references()</tt> and
<tt class="literal">resolve_initial_references()</tt> methods are a standard
element of the ORB interface, how the ORB implements these initial
object references is not standardized. Sun's Java IDL
implementation stores an ORB's initial object references as root
objects in its Naming Service.</p>
<a name="ch04-pgfid-961154"></a>
<h3 class="sect2">4.4.2. Getting Objects from Other Remote Objects</h3>
<p>
<a name="INDEX-1060"></a><a name="INDEX-1061"></a><a name="INDEX-1062"></a>
In addition to getting remote objects directly from an ORB reference,
  a client can obtain remote objects from other remote objects. A
  common variation on this approach is to get a reference to a Naming
  Service object and then look up objects in the naming directory by
  name. Another variation (that we won't cover in detail in this
  section) is to obtain an application-specific object reference,
  either directly from the ORB or through the Naming Service, and use
  this initial reference to request other objects. An object used in
  this way in a distributed application is sometimes called a
  <em class="emphasis">factory</em> object. </p>
<a name="ch04-pgfid-972971"></a>
<h3 class="sect3">4.4.2.1. Using a naming context</h3>
<p>
<a name="INDEX-1063"></a><a name="INDEX-1064"></a><a name="INDEX-1065"></a><a name="INDEX-1066"></a><a name="INDEX-1067"></a><a name="INDEX-1068"></a>
 Once you have a reference to a Naming Service that you can narrow to a
<tt class="literal">NamingContext</tt> reference, you can look up objects
within the context by passing names to its
<tt class="literal">resolve()</tt> method. As before, when we were binding
objects, a name is represented by an ordered array of
<tt class="literal">NameComponent</tt> objects. Each
<tt class="literal">NameComponent</tt> (both the <tt class="literal">id</tt> field
and the <tt class="literal">kind</tt> field) must exactly match the
path to an object within the context in order to successfully find the
object. If an object is not found at a specified name, an
<tt class="literal">org.omg.CosNaming.NamingContextPackage.NotFound</tt>
exception is thrown. </p>
<a name="INDEX-1069"></a>
<p>So, if a client wants to find the object we stored in the last
binding example, it needs to do the following (assuming that it
already has a reference to the root naming context of the Naming
Service):</p>
<blockquote>
<pre class="programlisting">// Set up path
NameComponent comp1 = new NameComponent("servers", "");
NameComponent comp2 = new NameComponent("ThisOrThat", "");
NameComponent serverName = new NameComponent("server1", "");
NameComponent objPath[] = { comp1, comp2, serverName };

// Find the object in the directory
org.omg.CORBA.Object objRef = rootNC.resolve(objPath);
ThisOrThatServer server = ThisOrThatServerHelper.narrow(objRef);</pre>
</blockquote>
<p>Note the use of the <tt class="literal">narrow()</tt> method on <tt class="literal">ThisOrThatServerHelper</tt> to "cast" the generic object reference to a <tt class="literal">ThisOrThatServer</tt> object.</p>
<p>
<a name="INDEX-1070"></a>
You can also use the <tt class="literal">resolve()</tt> method on a <tt class="literal">NamingContext</tt> to get a reference to a subcontext. Just use the path to the context itself and <tt class="literal">narrow()</tt> it to a <tt class="literal">NamingContext</tt> reference:</p>
<blockquote>
<pre class="programlisting">
NameComponent ttPath[] = { comp1, comp2 };
org.omg.CORBA.Object ncRef = rootNC.resolve(ttPath);
NamingContext ttContext = NamingContextHelper.narrow(ncRef);</pre>
</blockquote>
<a name="ch04-pgfid-960539"></a>
<h3 class="sect3">4.4.2.2. Using multiple naming services</h3>
<a name="INDEX-1071"></a>
<a name="INDEX-1072"></a>
<a name="INDEX-1073"></a>
<a name="INDEX-1074"></a>
<p>Suppose there are objects stored in multiple Naming Services (representing, for example, multiple organizations offering CORBA-based services) that you want to access from your client. One way to do this is to initialize an ORB reference for each one. Sun's Java IDL lets you specify an initial host and port for an ORB when you initialize it. So, if each independent Naming Service has its own ORB behind it, you can simply get a reference to each ORB and ask it for a reference to its Naming Service:</p>
<blockquote>
<pre class="programlisting">
String host1 = "orbhost1.net";
int port1 = 1234;
String host2 = "orghost2.net";
int port2 = 2345;

// Initialize the first ORB reference
Properties props = new Properties();
props.put("org.omg.CORBA.ORBInitialHost", host1);
props.put("org.omg.CORBA.ORBInitialPort", String.valueOf(port1));
ORB orb1 = ORB.init((String[])null, props);

// Initialize another ORB reference
props.put("org.omg.CORBA.ORBInitialHost", host2);
props.put("org.omg.CORBA.ORBInitialPort", String.valueOf(port2));
ORB orb2 = ORB.init((String[])null, props);

// Get references to the Naming Services
org.omg.CORBA.Object nc1Ref = 
	orb1.resolve_initial_references("NameService");
org.omg.CORBA.Object nc2Ref = 
	orb2.resolve_initial_references("NameService");

// Narrow the Naming Service references to NamingContexts and use them
...</pre>
</blockquote>
<p>
<a name="INDEX-1075"></a>
The only problem with this approach is that it depends on using a nonstandard feature of Sun's Java implementation of the CORBA standard. If you try using this same code against a different Java implementation of CORBA, it probably won't work. </p>
<p>
<a name="INDEX-1076"></a>

Another option is to have one Naming Service hold references to other Naming Services located elsewhere on the network. As we've seen, the interface to a Naming Service is a <tt class="literal">NamingContext</tt> object reference that represents the root of the naming tree for that name directory. Since the <tt class="literal">NamingContext</tt> is itself a CORBA-exported object, one Naming Service can hold a reference to a <tt class="literal">NamingContext</tt> from another Naming Service, acting as a bridge to the other Naming Service and its objects. To do this, you first have to run some code on the server that is going to act as the bridge. This code gets a reference to the local Naming Service and stores references to remote Naming Services in the local directory:</p>
<blockquote>
<pre class="programlisting">
// Get the local ORB and main NamingContext
ORB myORB = ORB.init(...);
org.omg.CORBA.Object ncRef = 
  orb.resolve_initial_references("NameService");
NamingContext localNC = NamingContextHelper.narrow(ncRef);

// Create a new subcontext to hold the remote contexts
NameComponent nodeName = new NameComponent("RemoteContexts", "");
NameComponent path[] = {nodeName};
NamingContext ncNode = localNC.bind_new_context(path);

// Get a reference to a remote Naming Service
// using Sun's non-standard ORB properties
Properties remoteORBProps = new Properties();
remoteORBProps.put("org.omg.CORBA.ORBInitialHost", "remote.orb.com");
ORB remoteORB = ORB.init((String[])null, remoteORBProps);
org.omg.CORBA.Object remoteNCRef = 
  remoteORB.resolve_initial_references("NameService");
NamingContext remoteNC = NamingContextHelper.narrow(remoteNCRef);

// Store the remote reference in the local context
NameComponent sub = new NameComponent("Naming1", "");
NameComponent path2[] = {nodeName, sub};
localNC.bind(path2, remoteNC);</pre>
</blockquote>
<p>With this done, a remote client can get a reference to the main Naming Service directory and then look up other remote directories within the bridge directory:</p>
<blockquote>
<pre class="programlisting">
public class NamingClient {
  public static void main(String argv[]) {
    ORB orb = ORB.init(argv, null);
    org.omg.CORBA.Object ref = null;
    try {
      ref = orb.resolve_initial_references("NameService");
    }
    catch (InvalidName invN) {
      System.out.println("No primary NameService available.");
      System.exit(1);
    }
    NamingContext nameContext = NamingContextHelper.narrow(ref);
    NameComponent topNC = new NameComponent("RemoteContexts", "");
    NameComponent subNC = new NameComponent("Naming1", "");
    NameComponent path[] = {topNC, subNC };
    try {
      org.omg.CORBA.Object ref2 = nameContext.resolve(path);
      NamingContext nameContext2 = NamingContextHelper.narrow(ref2);
      System.out.println("Got secondary naming context...");
    }
    catch (Exception e) {
      System.out.println("Failed to resolve secondary NameService:");
      e.printStackTrace();
    }
  }
}</pre>
</blockquote>
<p>
<a name="INDEX-1077"></a>
Using one Naming Service as a bridge to other remote named object
  directories is a useful tool to help manage a constellation of
  remote objects, but the same question arises: how do we get
  references to the remote <tt class="literal">NamingContext</tt> objects in
  order to store them in the bridge directory? In the previous bridge
  example, we're still using the nonstandard ORB properties
  provided by Sun's Java IDL implementation to initialize
  references to multiple remote ORBs (and their Naming Services). What
  we really want to do is initialize the bridge directory in a way
  that falls within the CORBA standard. One way is to do this is to
  use stringified object references, which are the topic of the next
  section.</p>
<a name="ch04-23555"></a>
<h3 class="sect2">4.4.3. Stringified Object References</h3>
<p>
<a name="INDEX-1078"></a><a name="INDEX-1079"></a><a name="INDEX-1080"></a>
As we've seen, Sun's implementation of Java IDL provides a
nonstandard way to initialize an ORB to reference a remote Naming
Service, so that one of the ORB's initial references is to the
root context of the remote Naming Service. But what do you do if you
want an object from a remote Naming Service, and your Java IDL
implementation doesn't provide a way to directly initialize a
reference to the remote service? Or, worse yet, what if the object
that you want isn't stored in a Naming Service or available
through any other CORBA service? How can your client get a reference
to the object?</p>
<p>
<a name="INDEX-1081"></a><a name="INDEX-1082"></a><a name="INDEX-1083"></a><a name="INDEX-1084"></a><a name="INDEX-1085"></a><a name="INDEX-1086"></a><a name="INDEX-1087"></a><a name="INDEX-1088"></a><a name="INDEX-1089"></a><a name="INDEX-1090"></a>
The CORBA standard comes to the rescue again. Part of the standard,
called Interoperable Object References (IORs), includes a syntax for
representing a remote object reference in the form of a printable
string of characters. This stringified object reference includes
enough information for a remote CORBA client to locate the
object's home ORB and convert the string to a runtime stub
reference to the object. Two methods on the <tt class="literal">ORB</tt>
interface, <tt class="literal">object_to_string()</tt> and
<tt class="literal">string_to_object()</tt>, let you convert a CORBA object
reference to string form and back again. </p>
<p>
<a href="#ch04-23499">Example 4-9</a> shows how to create an instance of our server implementation of the <tt class="literal">ThisOrThatServer</tt> interface, register it with the ORB, and generate a stringified object reference from the CORBA server object. A stringified reference to a remote object is called an Interoperable Object Reference (IOR) because it uses a format for object references that can be freely distributed between ORBs running a
cross the network. In order for the IOR you generate to be acceptable to another ORB, both your ORB and the remote ORB have to be using the same inter-ORB communication protocol (IIOP, DCE-CIOP, etc.). In this example, our client and host are both running IIOP.</p>
<a name="ch04-23499"></a>
<div class="example">
<h4 class="objtitle">Example 4-9. Registering an Object/Getting Its Stringified Object Reference</h4>
<blockquote>
<pre class="programlisting">
import org.omg.CORBA.*;

public class ServerInit {
  public static void main(String[] argv) {
    try {
      // Obtain ORB reference
      ORB myORB = ORB.init(argv, null); 

      // Make a ThisOrThatServer object to register with the ORB
      ThisOrThatServer impl = new ThisOrThatServerImpl();

      // Register the local object with the ORB
      myORB.connect(impl);

      // Get a stringified reference to the object
      String sor = myORB.object_to_string(impl);
      System.out.println("ThisOrThatServer IOR: " + sor);

      // Go into a wait state, waiting for clients to connect
      java.lang.Object dummy = new String("I wait...");
      synchronized (dummy) {
        dummy.wait();
      }
    }
    catch (Exception e) {
      System.out.println("Error occurred while initializing server object:");
      e.printStackTrace();
    }
  }
}</pre>
</blockquote>
</div>
<p>
<a name="INDEX-1091"></a><a name="INDEX-1092"></a>
The <tt class="literal">ServerInit</tt> class contains a <tt class="literal">main()</tt> method that is intended to be run on the server host for our remote object. The <tt class="literal">main()</tt> method first initializes a connection to the local ORB and then creates an instance of the <tt class="literal">ThisOrThatServerImpl</tt> class. This instance serves as the server implementation of our remote object. We create a stringified reference to the object using the <tt class="literal">object_to_string()</tt> method on the ORB and then output the stringified reference, so that it can be copied and sent to clients. Finally, by doing a synchronous <tt class="literal">wait()</tt> on a local object, the <tt class="literal">main()</tt> method goes into a wait state. This <tt class="literal">wait()</tt> is necessary to keep the ORB running so that it can respond to client requests. If we let the <tt class="literal">main()</tt> method exit, the server object we created is destroyed, and the IOR we generated is no longer valid.</p>
<p>
<a name="INDEX-1093"></a>
A sample client for our object is shown in <a href="#ch04-38183">Example 4-10</a>. The client accepts a stringified object reference as a command-line argument to its <tt class="literal">main()</tt> method. Then it initializes a local ORB reference and uses its <tt class="literal">string_to_object()</tt> method to convert the stringified reference to a live object reference. To do this, the ORB parses the encoded information in the stringified reference, makes a connection with the remote ORB serving the object, and generates a CORBA object reference for the client. </p>
<a name="ch04-38183"></a>
<div class="example">
<h4 class="objtitle">Example 4-10. A Client Utilizing a Stringified Object Reference</h4>
<blockquote>
<pre class="programlisting">
import org.omg.CORBA.*;

public class ServerStringClient {
  public static void main(String[] argv) {
    // Get the stringified reference from our command-line arguments
    String sor = null;
    if (argv.length &gt; 0) {
      sor = argv[0];
    }
    else {
      System.out.println("You forgot the object reference...");
      System.exit(1);
    }

    try {
      // Obtain ORB reference
      ORB myORB = ORB.init(argv, null); 

      // Convert the stringified reference into a live object reference
      org.omg.CORBA.Object objRef = myORB.string_to_object(sor);

      // Narrow the object reference to a ThisOrThatServer
      // using the ThisOrThatServerHelper
      ThisOrThatServer server = ThisOrThatServerHelper.narrow(objRef);

      // Invoke some methods on the remote object through the stub
      server.doThis("something");
      server.doThat("something else");
    }
    catch (Exception e) {
      System.out.println("Error occurred while initializing server object:");
      e.printStackTrace();
    }
  }
}</pre>
</blockquote>
</div>
<p>Before we can run the client, the remote object has to be registered with its ORB, so that we can get the stringified object reference:</p>
<blockquote>
<pre class="programlisting">objhost% java ServerInit
ThisOrThatServer IOR: IOR:000000000000002349444c3a6a656e2f636f7262612f546869
734f72546861745365727665723a312e30000000000001000000000000003000010000000000
0a6c6f63616c686f737400043200000018afabcafe00000002496bb469000000080000000000
000000</pre>
</blockquote>
<p>
<a name="INDEX-1094"></a>
Somehow, you have to get this IOR to the client host. You could embed the stringified object reference within a hidden field in a HTML page, so that a Java client can access it using a <tt class="literal">URL</tt> object. Or you could set up a simple server on a given port on your host that broadcasts the stringified object reference to whoever makes a socket connection. Or you could email the string to a colleague, and she can type the stringified reference into the startup command for her CORBA client. In any case, the client is invoked with the IOR as a command-line option:</p>
<blockquote>
<pre class="programlisting">clienthost% java ServerStringClient IOR:000000000000002349444c3a6a656e2f636f
7262612f546869734f72546861745365727665723a312e300000000000010000000000000030
000100000000000a6c6f63616c686f737400043200000018afabcafe00000002496bb4690000
00080000000000000000</pre>
</blockquote>
<p>The client uses the argument to reconstitute a remote reference to the server object, so that it can invoke methods on the remote object.</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.3. Putting It in the Public Eye</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.5. What If I Don't Know the Interface?</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
