<html>
<head>
<title>RMI Tools (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="RMI Tools">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch08_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/part2.htm">Part 2: Enterprise Reference</a></td><td align="right" valign="top" width="172"><a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 9.  RMI Tools</h1>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>rmic</b></font></td><td align="right"><font size="+1"><b>JDK 1.1 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>The Java RMI Compiler</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<blockquote>
<pre class="programlisting">
rmic [ <em class="replaceable">options</em> ] <em class="replaceable">fully-qualified-classnames</em>
</pre>
</blockquote>
<p>
<span class="refsect1">Description: </span><a name="INDEX-2235"></a><a name="INDEX-2236"></a><a name="INDEX-2237"></a><a name="INDEX-2238"></a><a name="INDEX-2239"></a><a name="INDEX-2240"></a>
The <em class="emphasis">rmic</em> compiler generates the stub and skeleton classes for remote objects you've written. Once you've compiled your remote objects using a standard Java compiler, like <em class="emphasis">javac</em>, you need to run <em class="emphasis">rmic</em>, specifying the classnames of your remote implementation classes using their full package names. </p>
<p>
<span class="refsect1">Description: </span>As an example, suppose you defined an interface named <tt class="literal">utils.remote.TimeServer</tt> that extends <tt class="literal">java.rmi.Remote</tt>, and wrote an implementation of this interface named <tt class="literal">utils.remote.TimeServerImpl</tt>. After compiling both with a Java compiler, you would run <em class="emphasis">rmic</em>, specifying <tt class="literal">utils.remote.TimeServerImpl</tt> as the class name argument. </p>
<p>
<span class="refsect1">Description: </span>Running <em class="emphasis">rmic</em> generates a skeleton class for each remote object type named <em class="replaceable">xxx</em><em class="emphasis">_Skel</em>, where the <em class="replaceable">xxx</em> is the name of the remote interface. The skeleton is responsible for receiving client requests on a server object and dispatching these requests to the actual remote object. A stub class, named <em class="replaceable">xxx</em><em class="emphasis">_Stub</em>, is also generated. The stub class is used for client references to the remote object. When a client gets a reference to a remote object, it receives an instance of the stub class, which forwards any method requests to the server object over the network. In our example, the stub and skeleton classes would be called <tt class="literal">utils.remote.TimeServer_Stub</tt> and <tt class="literal">utils.remote.TimeServer_Skel</tt>, respectively.</p>
<p>
<span class="refsect1">Description: </span><a name="INDEX-2241"></a>
Both the stub class and the skeleton class implement the same remote interface as your remote object implementation, so they can be typecast to the remote interface.</p>
<a name="INDEX-2242"></a>
<dl>
<dt>
<b><tt class="literal">-classpath</tt> <em class="replaceable">pathlist</em></b>
</dt>
<dd>
<p>Provides the classpath <em class="emphasis">rmic</em> uses to find any required classes, overriding the environment <tt class="literal">CLASSPATH</tt> or the default classpath. The directories in the list are separated by colons on Unix environments, by semicolons in Windows environments. </p>
</dd>
<dt>
<b><tt class="literal">-d</tt> <em class="replaceable">path</em></b>
</dt>
<dd>
<p>The destination directory where the compiler should write the generated class files. If a <tt class="literal">-d</tt> option is given, the package of the generated classes places the stubs and skeletons in their proper subdirectories in the given destination. If the directories don't exist, <em class="emphasis">rmic</em> creates them for you. If no <tt class="literal">-d</tt> option is given, the stubs and skeletons are still generated to fall within the same package as the remote implementation, but the class files are placed in the current directory.</p>
</dd>
<dt>
<b><tt class="literal">-depend</tt></b>
</dt>
<dd>
<p>Forces the compiler to attempt to recompile interdependent classes whose class files are out of date with each other. Without this option, the compiler attempts to recompile only class files explicitly referenced in the command-line options.</p>
</dd>
<dt>
<b><tt class="literal">-g</tt></b>
</dt>
<dd>
<p>Includes debugging information in the generated stub and skeleton classes, for use with Java debuggers.</p>
</dd>
<dt>
<b><tt class="literal">-J</tt></b>
</dt>
<dd>
<p>Passes the option immediately following the <tt class="literal">-J</tt> to the Java interpreter. There should be no spaces between the <tt class="literal">-J</tt> and the option to be passed to the interpreter.</p>
</dd>
<dt>
<b><tt class="literal">-keep</tt></b>
</dt>
<dt>
<b><tt class="literal">-keepgenerated</tt></b>
</dt>
<dd>
<p>Keeps the Java source files for the stub and skeleton classes generated by the compiler. The Java files are written to the same directory as the class files, with or without a <tt class="literal">-d</tt> option specified. Without the <tt class="literal">-keepgenerated</tt> option, the Java source files are removed after the stub and skeleton classes are generated.</p>
</dd>
<dt>
<b><tt class="literal">-nowarn</tt></b>
</dt>
<dd>
<p>Instructs the <em class="emphasis">rmic</em> compiler to eliminate warning messages from its output. Only errors encountered during compilation are reported.</p>
</dd>
<dt>
<b><tt class="literal">-vcompat</tt></b>
</dt>
<dd>
<p>Creates a stub and skeleton classes that are compatible with both JDK 1.1 and the Java 2 SDK 1.2 versions of RMI. This option is enabled by default and does not need to be specified.</p>
</dd>
<dt>
<b><tt class="literal">-verbose</tt></b>
</dt>
<dd>
<p>Prints verbose messages as compilation takes place, including which class is being compiled and class files that are loaded during compilation.</p>
</dd>
<dt>
<b><tt class="literal">-v1.1</tt></b>
</dt>
<dd>
<p>Creates stub and skeleton classes that are compatible with the JDK 1.1 version of RMI. These classes may not run in a Java 2 runtime environment.</p>
</dd>
<dt>
<b><tt class="literal">-v1.2</tt></b>
</dt>
<dd>
<p>Creates stub and skeleton classes that are compatible with the Java 1.2 (Java 2) version of RMI. These classes may not run in a Java 1.1 runtime environment.</p>
</dd>
</dl>
<a name="INDEX-2243"></a>
<a name="INDEX-2244"></a>
<dl>
<dt>
<b><tt class="literal">CLASSPATH</tt></b>
</dt>
<dd>
<p>An ordered list of directories, ZIP files,
and/or JAR files that the <em class="emphasis">rmic</em> compiler should use
to look for classes. This list is separated by colons on Unix
environments, semicolons on Windows environments. The list is searched
in order for a given class when it is encountered during compilation.
The compiler automatically appends the system classpath to the
<tt class="literal">CLASSPATH</tt>, if it is specified. If the
<tt class="literal">CLASSPATH</tt> is not set in the environment, the
compiler uses the current directory and the system classpath as its


classpath. The <tt class="literal">CLASSPATH</tt> environment variable is
overridden by the <tt class="literal">-classpath</tt> option to
<em class="emphasis">rmic</em>.</p>
</dd>
</dl>
<a name="INDEX-2245"></a>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>rmiregistry</b></font></td><td align="right"><font size="+1"><b>JDK 1.1 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>The Java RMI Object Registry</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<blockquote>
<pre class="programlisting">
rmiregistry [ <em class="replaceable">port</em> ]</pre>
</blockquote>
<p>
<span class="refsect1">Description: </span><a name="INDEX-2246"></a><a name="INDEX-2247"></a><a name="INDEX-2248"></a><a name="INDEX-2249"></a>
The <em class="emphasis">rmiregistry</em> command starts a remote object naming registry on the current host. The RMI registry binds remote objects to names, so that remote clients can request object references by name, using a URL-like syntax, and use the object references to invoke methods. </p>
<p>
<span class="refsect1">Description: </span>Internally, the <em class="emphasis">rmiregistry</em> command uses the <tt class="literal">java.rmi.registry.LocateRegistry</tt> class to instantiate a registry object. If no port is provided, the default port for the registry is 1099. Typically, the registry is run in the background on a server and remains running for the lifetime of the objects that it contains. If the registry crashes, and the registry is running in a separate Java VM from the actual remote objects, the remote objects are still available over RMI, and any remote references to these objects that existed before the crash are still valid. But all the name bindings the objects had in the registry are lost and need to be recreated after a new registry is started.</p>
<dl>
<dt>
<b><tt class="literal">CLASSPATH</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-2250"></a><a name="INDEX-2251"></a><a name="INDEX-2252"></a>
An ordered list of directories, ZIP files, and/or JAR files that the <em class="emphasis">rmiregistry</em> command should use to look for classes. This list is separated by colons on Unix environments, semicolons on Windows environments. The list is searched in order for a given class when it is encountered during execution. The registry automatically appends the system classpath to the <tt class="literal">CLASSPATH</tt>, if it is specified. If the <tt class="literal">CLASSPATH</tt> is not set in the environment, the daemon uses the current directory and the system classpath as its classpath. </p>
</dd>
</dl>
<p>
<span class="refsect1">See Also: </span><tt class="literal">java.rmi.registry.LocateRegistry</tt>, <tt class="literal">java.rmi.Naming</tt>.</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>rmid</b></font></td><td align="right"><font size="+1"><b>Java2 SDK 1.2 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>The RMI Activation Daemon</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<blockquote>
<pre class="programlisting">
rmid [ <em class="replaceable">options</em> ]</pre>
</blockquote>
<p>
<span class="refsect1">Description: </span><a name="INDEX-2253"></a><a name="INDEX-2254"></a><a name="INDEX-2255"></a><a name="INDEX-2256"></a>
The <em class="emphasis">rmid</em> command starts an RMI activation daemon on the local host. The activation daemon services all requests to register activatable objects and is responsible for activating objects due to client requests to invoke methods on them.</p>
<p>
<span class="refsect1">Description: </span><a name="INDEX-2257"></a><a name="INDEX-2258"></a>
If no port option is given, the activation daemon runs on a default port of 1098. Internally, the activation daemon creates a <tt class="literal">java.rmi.activation.Activator</tt> and its own RMI naming registry (listening to port 1098). The daemon binds a <tt class="literal">java.rmi.activation.ActivationSystem</tt> object to the name "java.rmi.activation.ActivationSystem" in its internal registry.</p>

<dl>
<dt>
<b><tt class="literal">-C</tt><em class="replaceable">cmdlineOption</em></b>
</dt>
<dd>
<p>
<a name="INDEX-2259"></a>
Uses the given option as a command-line option to the Java VM for each
  activation group started by the daemon. This can pass default
  properties to the VM, for example, or set 
its memory limits to some default value. The Java interpreter option should immediately follow the <tt class="literal">-C</tt> option, with no spaces.</p>
</dd>
<dt>
<b><tt class="literal">-log</tt> <em class="replaceable">path</em></b>
</dt>
<dd>
<p>Uses the given directory for any logging or temporary files needed by the activation daemon. If this option is not specified, the daemon writes its log files to a new directory named <em class="emphasis">log</em> in the current directory. </p>
</dd>
<dt>
<b><tt class="literal">-port</tt> <em class="replaceable">portnum</em></b>
</dt>
<dd>
<p>
<a name="INDEX-2260"></a>
Uses this port for the internal registry started by the activation daemon. If this option is not given, the daemon's internal naming registry runs by default on port 1098 of the local host. If you want the activation daemon's registry to listen to the default registry port, you can start the daemon with this command (Unix version):</p>
<blockquote>
<pre class="programlisting">
$ rmid -port 1099 &amp;</pre>
</blockquote>
</dd>
<dt>
<b><tt class="literal">-stop</tt></b>
</dt>
<dd>
<p>Stop any activation daemon currently running on the specified port, or the default port if none is specified.</p>
</dd>
</dl>
<dl>
<dt>
<b>CLASSPATH</b>
</dt>
<dd>
<p>
<a name="INDEX-2261"></a><a name="INDEX-2262"></a>
An ordered list of directories, ZIP files, and/or JAR files that the <em class="emphasis">rmid</em> daemon should use to look for classes. This list is separated by colons on Unix environments, semicolons on Windows environments. The list is searched in order for a given class when it is encountered during execution. The daemon automatically appends the system classpath to the <tt class="literal">CLASSPATH</tt>, if it is specified. If the <tt class="literal">CLASSPATH</tt> is not set in the environment, the daemon uses the current directory and the system classpath as its classpath. </p>
</dd>
</dl>
<p>
<span class="refsect1">See Also: </span><em class="emphasis">rmic</em>, <tt class="literal">java.rmi.activation.Activator</tt>
</p>
</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+1"><b>serialver</b></font></td><td align="right"><font size="+1"><b>JDK 1.1 and later</b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+1"><b>The RMI Serial Version Utility</b></font></td><td align="right"><font size="+1"><b><i></i></b></font></td>
</tr>
</table>
<blockquote>
<pre class="programlisting">
serialver [ <em class="replaceable">options</em> ] <em class="replaceable">fully-qualified-classnames</em>
</pre>
</blockquote>
<p>
<span class="refsect1">Description: </span><a name="INDEX-2263"></a><a name="INDEX-2264"></a><a name="INDEX-2265"></a>
The <em class="emphasis">serialver</em> utility generates a serial version ID you can use to mark a given class definition to track its versions as it evolves. The utility returns a static int member declaration you can paste into your Java class definition. In other words, this command:</p>
<blockquote>
<pre class="programlisting">
% serialver AccountImpl</pre>
</blockquote>
<p>
<span class="refsect1">Description: </span>generates output something like:</p>
<blockquote>
<pre class="programlisting">
AccountImpl: static final long serialVersionUID = 37849129093280989384L;</pre>
</blockquote>
<p>
<span class="refsect1">Description: </span><a name="INDEX-2266"></a>
If versioning of your remote object classes becomes a problem for clients, this utility can tag a class with a version ID that can be checked to see if the proper version is being exported by your server for a given client, or if its local version is out of date. Serial version IDs are used by Java object serialization to uniquely identify class definitions.</p>
<dl>
<dt>
<b><tt class="literal">-show</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-2267"></a><a name="INDEX-2268"></a><a name="INDEX-2269"></a>
Uses the graphical version of the tool, which displays a GUI interface that allows you to type in a fully qualified classname and press a button to see the serial version ID generated.</p>
</dd>
</dl>
<dl>
<dt>
<b>CLASSPATH</b>
</dt>
<dd>
<p>An ordered list of directories, ZIP files, and/or JAR files that the <em class="emphasis">serialver</em> utility should use to look for classes. This list is separated by colons on Unix environments, semicolons on Windows environments. The list is searched in order for a given class when it is encountered during execution. The utility automatically appends the system classpath to the <tt class="literal">CLASSPATH</tt>, if it is specified. If the <tt class="literal">CLASSPATH</tt> is not set in the environment, the utility uses the current directory and the system classpath as its classpath.</p>
</dd>
</dl>
</div>
<a name="INDEX-2270"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch08_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">8.6. Return Codes</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">10. IDL Reference</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
