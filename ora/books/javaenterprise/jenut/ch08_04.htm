<html>
<head>
<title>Data Manipulation Commands (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Data Manipulation Commands">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch08_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch08_01.htm">Chapter 8: SQL Reference</a></td><td align="right" valign="top" width="172"><a href="ch08_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch08_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">8.4. Data Manipulation Commands</h2>
<p>
<a name="INDEX-2188"></a><a name="INDEX-2189"></a>
Empty tables aren't very useful, and, even once they've been populated with data, we need some way of getting that data back out.  The SQL data manipulation commands allow you to read data from a table and to create, update, and remove existing data.</p>
<a name="ch08-pgfid-706138"></a>
<h3 class="sect2">8.4.1. SELECT</h3>
<p>
<a name="INDEX-2190"></a>
The <tt class="literal">SELECT</tt> statement is the most important statement in SQL and also the most complex. It allows you to retrieve data from a table or a set of tables. Here's the syntax:</p>
<blockquote>
<pre class="programlisting">
SELECT [ DISTINCT ]
   { <em class="replaceable">summary_function</em>, ... }
   | { <em class="replaceable">data_manipulation_expression</em>, ... }
   | { <em class="replaceable">column_name</em>, ... }
FROM 
   { { <em class="replaceable">table_name</em> [ AS <em class="replaceable">correlation_name</em> ] }
   | { <em class="replaceable">subquery</em> [ AS <em class="replaceable">correlation_name</em> ] }
   | <em class="replaceable">joined_tables</em>}
[ WHERE <em class="replaceable">predicate</em> ]
[ GROUP BY <em class="replaceable">column_name</em>, ... [ HAVING <em class="replaceable">group_selection_predicate</em> ] ]
[ { UNION | INTERSECT | EXCEPT } [ ALL ] 
     [ CORRESPONDING [ BY (<em class="replaceable">column_name</em>, ...] ]
      <em class="replaceable">select_statement</em> | { TABLE <em class="replaceable">table_name</em> } 
                       | <em class="replaceable">table_value_constructor</em> ]
[ ORDER BY {{<em class="replaceable">output_column</em> [ ASC | DESC ]}, ...}
           | {{<em class="replaceable">positive_integer</em> [ ASC | DESC ]}, ...}] </pre>
</blockquote>
<p>The simplest possible <tt class="literal">SELECT</tt>, one that
   displays all columns of all rows of a single table, looks like
   this:</p>
<blockquote>
<pre class="programlisting">
SELECT * FROM BOOKS</pre>
</blockquote>
<p>If this statement is executed in a command-line SQL interpreter,
the output might look like this:</p>
<blockquote>
<pre class="programlisting">
TITLE                | AUTHOR           | EDITION | PRICE
---------------------+------------------+---------+-------
Me                   | Garrison Keillor |       1 | 24.99
Bleak House          | Charles Dickens  |      57 |  8.99
A Tale Of Two Cities | Charles Dickens  |     312 |  4.99</pre>
</blockquote>
<p>To sort the output by title, we can add an
<tt class="literal">ORDER</tt><tt class="literal">BY</tt> clause to the
statement:</p>
<blockquote>
<pre class="programlisting">
SELECT * FROM BOOKS ORDER BY TITLE</pre>
</blockquote>
<p>Now the output is:</p>
<blockquote>
<pre class="programlisting">
TITLE                | AUTHOR           | EDITION | PRICE
---------------------+------------------+---------+-------
A Tale Of Two Cities | Charles Dickens  |     312 |  4.99
Bleak House          | Charles Dickens  |      57 |  8.99
Me                   | Garrison Keillor |       1 | 24.99</pre>
</blockquote>
<p>To select just the <tt class="literal">TITLE</tt> and
<tt class="literal">AUTHOR</tt> columns:</p>
<blockquote>
<pre class="programlisting">
SELECT TITLE, AUTHOR FROM BOOKS</pre>
</blockquote>
<p>To select a subset of records, use the <tt class="literal">WHERE</tt> clause:</p>
<blockquote>
<pre class="programlisting">
SELECT * FROM BOOKS WHERE PRICE &lt; 10.0</pre>
</blockquote>
<p>This returns the Charles Dickens books, but not the Garrison Keillor book.  You can have multiple criteria:</p>
<blockquote>
<pre class="programlisting">SELECT * FROM BOOKS WHERE PRICE &lt; 10.0 OR EDITION = 1</pre>
</blockquote>
<p>
<a name="INDEX-2191"></a><a name="INDEX-2192"></a>
This returns all three books.  If we had specified a price less than 10 and an edition equal to 1, we wouldn't have received any records back.  The various predicates you can use are listed in <a href="#ch08-pgfid-865958">Table 8-2</a>.  Note that not all of the more esoteric ones (such as <tt class="literal">LIKE</tt>) are supported by all databases.</p>
<a name="ch08-pgfid-865958"></a>
<h4 class="objtitle">Table 8-2. SQL Predicates </h4>
<table border="1">
<tr>
<th>
<p>Operator</p>
</th><th>
<p>Meaning</p>
</th>
</tr>
<tr>
<td>
<p>
<tt class="literal">=</tt>
</p>
</td><td>
<p>Equals</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">&lt;</tt>
</p>
</td><td>
<p>Less than</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">&gt;</tt>
</p>
</td><td>
<p>Greater than</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">&lt;=</tt>
</p>
</td><td>
<p>Less than or equal to </p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">&gt;=</tt>
</p>
</td><td>
<p>Greater than or equal to</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">!=</tt> or <tt class="literal">&lt; &gt;</tt>
</p>
</td><td>
<p>Not equal to (some implementations may only support one of these)</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">LIKE</tt>
</p>
</td><td>
<p>Wildcard match </p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">IS</tt><tt class="literal">NULL</tt>
</p>
</td><td>
<p>Checks for a <tt class="literal">null</tt> value</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">IN</tt>
</p>
</td><td>
<p>Checks to see if a value is contained within a set</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">BETWEEN</tt>
</p>
</td><td>
<p>Checks to see if a date value is between two other date values</p>
</td>
</tr>
</table>
<p>The final four predicates in the table can be used with the
<tt class="literal">NOT</tt> modifier (e.g., <tt class="literal">NOT</tt><tt class="literal">LIKE</tt>, <tt class="literal">IS</tt><tt class="literal">NOT</tt><tt class="literal">NULL</tt>, etc.).  </p>
<a name="ch08-pgfid-706227"></a>
<h3 class="sect3">8.4.1.1. String comparisons</h3>
<p>
<a name="INDEX-2193"></a>
The <tt class="literal">=</tt> operator can generally be used for exact
  string comparisons.  The <tt class="literal">LIKE</tt> operator allows
  wildcard searches using two wildcard characters:
  <tt class="literal">%</tt> to match any number of characters and
  <tt class="literal">_</tt> to match at most one character.  Here's a query
  that selects all records that have a <tt class="literal">LAST_NAME</tt>
  that contains the letters "for":</p>
<blockquote>
<pre class="programlisting">SELECT LAST_NAME FROM CUSTOMERS WHERE LAST_NAME LIKE`%for%'</pre>
</blockquote>
<p>This matches last names like Buford, Crawford, and Trefor, but may not match Fordham, since most databases implement <tt class="literal">LIKE</tt> in a case-sensitive manner (Microsoft Access is a notable exception to this rule).  Case-insensitive searches generally require a single-case version of the column or the use of a case-adjusting function (we'll discuss functions later in this chapter).</p>
<a name="ch08-pgfid-706235"></a>
<h3 class="sect3">8.4.1.2. Subqueries and joins</h3>
<p>
<a name="INDEX-2194"></a><a name="INDEX-2195"></a><a name="INDEX-2196"></a><a name="INDEX-2197"></a>

The <tt class="literal">IN</tt> predicate allows you to check whether a value appears in another set of values.  The simplest way to use this feature is in a SQL statement like this:</p>
<blockquote>
<pre class="programlisting">SELECT * FROM BOOKS WHERE PRICE IN (5.95, 4.95, 7.95)</pre>
</blockquote>
<p>This is simply another form for:</p>
<blockquote>
<pre class="programlisting">
SELECT * FROM BOOKS WHERE PRICE = 5.95 OR PRICE = 4.95 OR PRICE = 7.95</pre>
</blockquote>
<p>But we can do something more interesting with
<tt class="literal">IN</tt>.  Let's assume that we have a table, called
<tt class="literal">PRICES</tt>, that holds all the prices we want to search on.  In this case, we can generate the set of values using another query, as follows:</p>
<blockquote>
<pre class="programlisting">SELECT * FROM BOOKS WHERE PRICE IN
  SELECT PRICE FROM PRICES</pre>
</blockquote>
<p>Note that we didn't put parentheses around the second
<tt class="literal">SELECT</tt> statement: use parentheses only when you are specifying the entire list manually.</p>
<p>Subqueries like this are useful, but they still restrict the
output columns to those of a single table.  </p>
<p>
<a name="INDEX-2198"></a><a name="INDEX-2199"></a>
Rather than using subqueries, two tables are normally connected via a
  join.  A <em class="emphasis">join</em> allows a query to include
  references to multiple tables and to restrict the output based on
  the relations between those tables. The basic join is an
  <em class="emphasis">equi-join</em> (or inner join): data in two tables
  is linked based on a shared value.  An order-tracking database might
  include a <tt class="literal">CUSTOMERS</tt> table and an <tt class="literal">ORDERS
  </tt>table.  The <tt class="literal">CUSTOMERS </tt>table has a
  customer identifier (<tt class="literal">CUSTOMER_ID</tt>) as its primary
  key.  The orders table also has a <tt class="literal">CUSTOMER_ID
  </tt>column, although not as a primary key, since there may be
  more than one order per customer (see <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch08_01.htm">Figure 8-1</a> for a graphical
  representation of these tables).  Here's the SQL to combine
  the two tables based on the <tt class="literal">CUSTOMER_ID</tt> column: </p>
<blockquote>
<pre class="programlisting">SELECT * FROM CUSTOMERS, ORDERS WHERE ORDERS.CUSTOMER_ID = 
   CUSTOMERS.CUSTOMER_ID</pre>
</blockquote>
<p>Since it's an equi-join, it works just as well the other way around:</p>
<blockquote>
<pre class="programlisting">SELECT * FROM CUSTOMERS, ORDERS WHERE CUSTOMERS.CUSTOMER_ID = 
   ORDERS.CUSTOMER_ID</pre>
</blockquote>
<p>In SQL-92, there is a <tt class="literal">JOIN</tt> operator that performs the same operation with a slightly different syntax:<a href="#FOOTNOTE-4">[4]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-4"></a>
<p>[4] Note that some databases allow you to use <tt class="literal">JOIN</tt> without the <tt class="literal">ON </tt>clause.  In this case, the join operates on columns that have the same name.</p>
</blockquote>
<blockquote>
<pre class="programlisting">
SELECT CUSTOMERS.CUSTOMER_ID, CUSTOMERS.NAME, ORDERS.ORDER_ID, ORDERS.TOTAL
  FROM CUSTOMERS INNER JOIN ORDERS ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID</pre>
</blockquote>
<p>This example indicates the specific columns to return. Using the data shown in <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch08_01.htm">Figure 8-1</a>, the output of this query might look like this:</p>
<blockquote>
<pre class="programlisting">
CUSTOMER_ID | NAME       | ORDER_ID | TOTAL 
------------+------------+----------+--------
          1 | Bob Copier |        4 | 72.19 
          1 | Bob Copier |        6 | 21.07 </pre>
</blockquote>
<p>Note that some databases require you to use <tt class="literal">INNER</tt><tt class="literal">JOIN </tt>instead of <tt class="literal">JOIN</tt>, while others allow just <tt class="literal">JOIN </tt>because inner joins are the default join.</p>
<p>
<a name="INDEX-2200"></a>
To join on more than one table, use multiple <tt class="literal">JOIN</tt> statements.  Here we add an <tt class="literal">ITEMS</tt> table that includes the <tt class="literal">ORDER_ID </tt>from the <tt class="literal">ORDERS </tt>table:</p>
<blockquote>
<pre class="programlisting">SELECT * FROM ITEMS JOIN ORDERS JOIN CUSTOMERS</pre>
</blockquote>
<p>This query joins the <tt class="literal">CUSTOMERS</tt> and <tt class="literal">ORDERS </tt>tables based on <tt class="literal">CUSTOMER_ID</tt>, and the <tt class="literal">ORDERS </tt>and <tt class="literal">ITEMS </tt>tables based on <tt class="literal">ORDER_ID</tt>.  The join is performed from left to right, so this three-table join goes from the largest table to the smallest table.  </p>
<p>
<a name="INDEX-2201"></a>
As useful as the <tt class="literal">JOIN</tt> keyword is, it is not required for entry-level SQL-92 implementations, so here's a three-column join using the syntax we started with:</p>
<blockquote>
<pre class="programlisting">SELECT CUSTOMERS.CUSTOMER_ID, CUSTOMERS.NAME, ORDERS.ORDER_ID, ORDER.TOTAL,
  ITEMS.ITEM_NO, ITEMS.COST FROM CUSTOMERS, ORDERS, ITEMS 
  WHERE ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
  AND ITEMS.ORDER_ID = ORDERS.ORDER_ID</pre>
</blockquote>

<p>Again, using the data shown in <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch08_01.htm">Figure 8-1</a>, the output from this query might look as follows:</p>
<blockquote>
<pre class="programlisting">CUSTOMER_ID | NAME       | ORDER_ID | TOTAL | ITEM_NO | COST 
------------+------------+----------+-------+---------+-------
          1 | Bob Copier |        4 | 72.19 |    1280 | 16.72
          1 | Bob Copier |        4 | 72.19 |    4129 | 41.10
          1 | Bob Copier |        4 | 72.19 |    3017 | 14.37</pre>
</blockquote>
<p>
<a name="INDEX-2202"></a><a name="INDEX-2203"></a>
So far, all we've talked about is equi-joins, or inner joins.  There are also outer joins, which do not require a matching key in both tables.  An <em class="emphasis">outer join</em> includes all the records from one table and any records from another table that match the primary key of the first table.  If there are no corresponding records in the second table, those columns are simply left blank in the result.  Outer joins are divided into left outer and right outer joins: in a left join, the primary key table is on the left, and in a right join, it is on the right. Here's the syntax for a <tt class="literal">LEFT</tt><tt class="literal">JOIN </tt>(or <tt class="literal">LEFT</tt><tt class="literal">OUTER</tt><tt class="literal">JOIN</tt>) on <tt class="literal">CUSTOMERS</tt> and <tt class="literal">ORDERS</tt>:</p>
<blockquote>
<pre class="programlisting">
SELECT CUSTOMERS.CUSTOMER_ID, CUSTOMERS.NAME, ORDERS.ORDER_ID, ORDERS.TOTAL
  FROM CUSTOMERS LEFT JOIN ORDERS ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID</pre>
</blockquote>
<p>This includes all the customer records and order records for all the customers that have them. Here's some possible output using the data shown in <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch08_01.htm">Figure 8-1</a>:</p>
<blockquote>
<pre class="programlisting">
CUSTOMER_ID | NAME         | ORDER_ID | TOTAL 
------------+--------------+----------+--------
          1 | Bob Copier   |        4 | 72.19 
          1 | Bob Copier   |        6 | 21.07 
          2 | John Stapler |          |       </pre>
</blockquote>
<p>If we were to do a <tt class="literal">RIGHT</tt><tt class="literal">JOIN </tt>on <tt class="literal">CUSTOMERS </tt>and <tt class="literal">ORDERS</tt>, the result would be the same as an inner join, since there are no records in <tt class="literal">ORDERS </tt>that don't have a match in <tt class="literal">CUSTOMERS</tt>.</p>
<a name="ch08-pgfid-706330"></a>
<h3 class="sect3">8.4.1.3. Groups</h3>
<p>
<a name="INDEX-2204"></a><a name="INDEX-2205"></a>
The <tt class="literal">GROUP BY</tt> clause allows you to collapse multiple records into groups with a common field.  For instance, to select all the records in the <tt class="literal">BOOKS</tt> table grouped by <tt class="literal">AUTHOR</tt>:</p>
<blockquote>
<pre class="programlisting">
SELECT AUTHOR FROM BOOKS GROUP BY AUTHOR</pre>
</blockquote>
<p>This returns one row for each distinct author in the table.   This query is not really that useful though, since we can do the same thing with the <tt class="literal">DISTINCT</tt> keyword (<tt class="literal">SELECT</tt><tt class="literal">DISTINCT</tt>).  However, we can use an aggregate function on each of the groups to do something more useful:</p>
<blockquote>
<pre class="programlisting">
SELECT AUTHOR, COUNT(*) FROM BOOKS GROUP BY AUTHOR</pre>
</blockquote>
<p>This query returns two columns: the author and the number of books by that author in the table.  Here's the output, based on the <tt class="literal">BOOKS</tt> table we used earlier:</p>
<blockquote>
<pre class="programlisting">
AUTHOR           | COUNT(*)
-----------------+----------
Charles Dickens  |        2
Garrison Keillor |        1</pre>
</blockquote>
<p>We'll talk more about aggregate functions later in this chapter.</p>
<a name="ch08-pgfid-706352"></a>
<h3 class="sect2">8.4.2. INSERT</h3>
<p>
<a name="INDEX-2206"></a><a name="INDEX-2207"></a>
The <tt class="literal">INSERT</tt> statement loads data into a table.
Here's the syntax:</p>
<blockquote>
<pre class="programlisting">INSERT INTO <em class="replaceable">table_name</em>
   [ (<em class="replaceable">column_name</em>, ...) ]
   <em class="replaceable">subquery</em> | { VALUES (<em class="replaceable">val1</em>, <em class="replaceable">val2</em>,...) } | DEFAULT VALUES</pre>
</blockquote>
<p>To load static data, simply specify the table and the actual data:</p>
<blockquote>
<pre class="programlisting">
INSERT INTO CUSTOMERS VALUES (3, 'Tom Fax', '617 555-1214')</pre>
</blockquote>
<p>This statement inserts the values 3, "Tom Fax", and "617 555-1214" into the first three fields of a new row in the <tt class="literal">CUSTOMERS</tt> table.  If there are more than three fields in the <tt class="literal">CUSTOMERS</tt> table, this statement fails.  If you don't want to insert into every column, you can specify the columns you want to insert into:</p>
<blockquote>
<pre class="programlisting">
INSERT INTO CUSTOMERS (CUSTOMER_ID, NAME) VALUES (3, 'Tom Fax')</pre>
</blockquote>
<p>Note, however, that this kind of statement can fail if we do not provide a value for a field that is specified as <tt class="literal">NOT</tt><tt class="literal">NULL</tt>.</p>
<p>To add more than one row at a time and to add data from other tables, we can specify a subquery rather than a set of specific values.  To fill the <tt class="literal">JUNKMAIL</tt> table with values from the <tt class="literal">CUSTOMERS</tt> and <tt class="literal">ADDRESSES</tt> tables, run this query:</p>
<blockquote>
<pre class="programlisting">
INSERT INTO JUNKMAIL (NAME, ADDR, CITY, STATE, ZIP) 
  SELECT NAME, ADDR, CITY, STATE, ZIP FROM CUSTOMERS JOIN ADDRESSES</pre>
</blockquote>
<p>The database first performs a join on <tt class="literal">CUSTOMERS</tt> and <tt class="literal">ADDRESSES</tt>. It matches on the <tt class="literal">CUSTOMER_ID </tt>field and outputs the <tt class="literal">NAME </tt>field from <tt class="literal">CUSTOMERS </tt>and the other fields from <tt class="literal">ADDRESSES</tt>.  The rows from the join are then inserted into the <tt class="literal">JUNKMAIL</tt> table, which can now be used to fill our mailboxes with catalogs.</p>
<a name="ch08-pgfid-706380"></a>
<h3 class="sect2">8.4.3. UPDATE</h3>
<p>
<a name="INDEX-2208"></a><a name="INDEX-2209"></a>
The <tt class="literal">UPDATE</tt> statement modifies data in one or more existing rows.  It consists of one or more <tt class="literal">SET</tt> statements and an optional <tt class="literal">WHERE</tt> clause.  If the <tt class="literal">WHERE</tt> clause is not present, the operation is performed on every row in the table. Here's the syntax:</p>
<blockquote>
<pre class="programlisting">UPDATE <em class="replaceable">table_name</em>
   SET { <em class="replaceable">column_name</em> = { value | NULL | DEFAULT }, ...}
   [ { WHERE <em class="replaceable">predicate</em> }  
     | { WHERE CURRENT OF <em class="replaceable">cursor_name</em> } ]  </pre>
</blockquote>
<p>Here's an example that updates a few fields:</p>
<blockquote>
<pre class="programlisting">UPDATE ADDRESSES
   SET ADDR = '1282 Country Club Drive', STATE='CA' WHERE CUSTOMER_ID
   = 432 </pre>
</blockquote>
<p>This statement sets the <tt class="literal">ADDR </tt>and
   <tt class="literal">STATE</tt> fields of the <tt class="literal">ADDRESSES
   </tt>table to particular values on all records where
   <tt class="literal">CUSTOMER_ID</tt> equals 432. Sometimes we do want to
   run an <tt class="literal">UPDATE </tt>on all records.


 Here's an example that makes sure all the <tt class="literal">STATE</tt> fields are in uppercase:</p>

<blockquote>
<pre class="programlisting">UPDATE ADDRESSES SET STATE = UPPER(STATE)</pre>
</blockquote>

<p>Note how we can use a field from the table itself in the <tt class="literal">SET</tt> statement.</p>
<p>The <tt class="literal">WHERE</tt><tt class="literal">CURRENT</tt><tt class="literal">OF</tt> clause allows you to update the row at the current cursor location in a multiple-table row.  This is not something that JDBC programmers need to concern themselves with, although it can be of interest to an underlying JDBC 2.0 driver.</p>
<a name="ch08-pgfid-706406"></a>
<h3 class="sect2">8.4.4. DELETE</h3>
<p>
<a name="INDEX-2210"></a><a name="INDEX-2211"></a><tt class="literal">DELETE</tt> is very simple: it removes rows from a table.  Here's the syntax:</p>
<blockquote>
<pre class="programlisting">
DELETE FROM <em class="replaceable">table_name</em>
   [ { WHERE <em class="replaceable">predicate</em> } 
   | { WHERE CURRENT OF <em class="replaceable">cursor_name</em> } ]</pre>
</blockquote>
<p>To delete all the rows in <tt class="literal">ORDERS</tt>:</p>
<blockquote>
<pre class="programlisting">
DELETE FROM ORDERS</pre>
</blockquote>
<p>To delete a specific record:</p>
<blockquote>
<pre class="programlisting">
DELETE FROM ORDERS WHERE ORDER_ID = 32</pre>
</blockquote>
<p>Once a row has been deleted, there is no way to recover it.</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch08_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch08_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch08_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">8.3. Schema Manipulation Commands</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">8.5. Functions</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
