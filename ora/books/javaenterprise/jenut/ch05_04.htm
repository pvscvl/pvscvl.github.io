<html>
<head>
<title>Custom Servlet Initialization (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Custom Servlet Initialization">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_01.htm">Chapter 5: Java Servlets</a></td><td align="right" valign="top" width="172"><a href="ch05_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">5.4. Custom Servlet Initialization</h2>
<p>
<a name="INDEX-1258"></a><a name="INDEX-1259"></a><a name="INDEX-1260"></a><a name="INDEX-1261"></a><a name="INDEX-1262"></a><a name="INDEX-1263"></a><a name="INDEX-1264"></a>At the beginning of this chapter, I talked about how a servlet's
  persistence can be used to build more efficient web applications.
  This is accomplished via class variables and the
  <tt class="literal">init()</tt> method. When a server loads a servlet for
  the first time, it calls the servlet's <tt class="literal">init()
  </tt>method and does not make any service calls until
  <tt class="literal">init()</tt> has finished.  In the default
  implementation, <tt class="literal">init()</tt> simply handles some basic
  housekeeping, but a servlet can override the method to perform
  whatever one-time tasks are required.  This often means doing some
  sort of I/O-intensive resource creation, such as opening a database
  connection.  You can also use the <tt class="literal">init()</tt> method
  to create threads that perform various ongoing tasks. For instance,
  a servlet that monitors the status of machines on a network might
  create a separate thread to periodically ping each machine.  When an
  actual request occurs, the service methods in the servlet can use
  the resources created in <tt class="literal">init()</tt>.  Thus, the
  status monitor servlet might display an HTML table with the status
  of the various machines. The default <tt class="literal">init()</tt>
  implementation is not a do-nothing method, so you should remember to
  always call the <tt class="literal">super.init()</tt> method as the first
  action in your own <tt class="literal">init()</tt> routines.<a href="#FOOTNOTE-5">[5]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-5"></a>
<p>[5] Note that you no longer have to do this with Version 2.1 of the
  Servlet API.  The specification has been changed so that you can
  simply override a no-argument <tt class="literal">init()</tt> method,
  which is called by the <tt class="literal">Generic Servlet</tt><tt class="literal">init(ServletConfig)</tt> implementation.</p>
</blockquote>
<p>The server passes the <tt class="literal">init()</tt> method a
<tt class="literal">ServletConfig</tt> object, which can include specific
servlet configuration parameters (for instance, the list of machines
to monitor). <tt class="literal">ServletConfig </tt>encapsulates the servlet
initialization parameters, which are accessed via the
<tt class="literal">getInitParameter()</tt> and
<tt class="literal">getInitParameterNames()</tt>
methods. <tt class="literal">GenericServlet</tt> and
<tt class="literal">HttpServlet</tt> both implement the
<tt class="literal">ServletConfig</tt> interface, so these methods are
always available in a servlet (one of the things the default
<tt class="literal">init()</tt> implementation does is store the
<tt class="literal">ServletConfig</tt> object for these methods, which is
why it is important that you always call
<tt class="literal">super.init()</tt>).  Different web servers have
different ways of setting initialization parameters, so we aren't
going to discuss how to set them.  Consult your server documentation
for details.</p>
<p>Every servlet also has a <tt class="literal">destroy()</tt> method
that can be overwritten.  This method is called when, for whatever
reason, a server unloads a servlet.  You can use this method to ensure
that important resources are freed, or that threads are allowed to
finish executing unmolested.  Unlike <tt class="literal">init()</tt>, the
default implementation of <tt class="literal">destroy()</tt> is a do-nothing
method, so you don't have to worry about invoking the superclass'
<tt class="literal">destroy()</tt> method.</p>
<p>
<a name="INDEX-1265"></a><a name="INDEX-1266"></a><a name="INDEX-1267"></a><a href="#ch05-pgfid-546960">Example 5-4</a> shows a counter servlet that saves its state between
  server shutdowns.  It uses the <tt class="literal">init()</tt> method to
  first try to load a default value from a servlet initialization
  parameter. Next the <tt class="literal">init()</tt> method tries to open a
  file named <em class="filename">/data/counter.dat</em> and read an
  integer from it.  When the servlet is shut down, the
  <tt class="literal">destroy()</tt> method creates a new
  <em class="filename">counter.dat</em> file with the current hit-count for
  the servlet.</p>
<a name="ch05-pgfid-546960"></a>
<div class="example">
<h4 class="objtitle">Example 5-4. A Persistent Counter Servlet </h4>
<blockquote>
<pre class="programlisting">
import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;

public class LifeCycleServlet extends HttpServlet {

  int timesAccessed;

  public void init(ServletConfig conf) throws ServletException {

    super.init(conf);

    // Get initial value
    try {
      timesAccessed = Integer.parseInt(getInitParameter("defaultStart"));
    } 
    catch(NullPointerException e) {
     timesAccessed = 0;
    } 
    catch(NumberFormatException e) {
      timesAccessed = 0;
    }

    // Try loading from the disk
    try {
      File r = new File("./data/counter.dat");      
      DataInputStream ds = new DataInputStream(new FileInputStream(r));
      timesAccessed = ds.readInt();
    } 
    catch (FileNotFoundException e) {
      // Handle error
    } 
    catch (IOException e) {
      // This should be logged
    }    
    finally {
      ds.close();
    }
  }
        
  public void doGet(HttpServletRequest req, HttpServletResponse resp)
    throws ServletException, IOException {
    
    resp.setContentType("text/html");
    PrintWriter out = resp.getWriter();
  
    timesAccessed++;
   
    out.println("&lt;HTML&gt;");
    out.println("&lt;HEAD&gt;");
    out.println("&lt;TITLE&gt;Life Cycle Servlet&lt;/TITLE&gt;");
    out.println("&lt;/HEAD&gt;&lt;BODY&gt;");
     
    out.println("I have been accessed " + timesAccessed + " time[s]");
    out.println("&lt;/BODY&gt;&lt;/HTML&gt;"); 
  }

  public void destroy() {

    // Write the Integer to a file
    File r = new File("./data/counter.dat");
    try {
      DataOutputStream dout = new DataOutputStream(new FileOutputStream(r));
      dout.writeInt(timesAccessed);
    } 
    catch(IOException e) {
      // This should be logged 
    }
    finally {
      dout.close();
    }
  }
}</pre>
</blockquote>
</div>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.3. Servlet Chaining</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.5. Thread Safety</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
