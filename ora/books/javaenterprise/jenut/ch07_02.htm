<html>
<head>
<title>EJB Roles (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="EJB Roles">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_01.htm">Chapter 7: Enterprise JavaBeans</a></td><td align="right" valign="top" width="172"><a href="ch07_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">7.2. EJB Roles</h2>
<p>
<a name="INDEX-1709"></a>
In <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_01.htm">Chapter 3, "Remote Method Invocation"</a>, I
<a name="INDEX-1710"></a><a name="INDEX-1711"></a>
described two fundamental roles in the RMI environment: the client of
the remote object, and the object itself, which acts as a kind of
server or service provider. These two roles exist in the EJB
environment as well, but EJB adds a third role, called the
<a name="INDEX-1712"></a><a name="INDEX-1713"></a><em class="emphasis">container provider</em>. The container provider is
responsible for implementing all the extra services for an EJB object
that I mentioned earlier: transaction processing, security, object
persistence, and resource pooling. If you're familiar with
CORBA, you can think of the EJB container as being roughly equivalent
to the ORB in CORBA, with a few of the CORBA services thrown in as
well. In EJB, however, the container is strictly a server-side
entity. The client doesn't need its own container to use EJB
objects, but an EJB object needs to have a container in order to be
exported for remote use. <a href="#ch07-pgfid-989567">Figure 7-1</a> shows a conceptual diagram of how
the three EJB roles interact with each other.</p>
<a name="ch07-pgfid-989567"></a>
<div class="figure">
<img alt="figure" src="figs/Jent.0701.gif" webstripperlinkwas="figs/Jent.0701.gif"></div>
<h4 class="objtitle">Figure 7-1. The basic roles in an EJB environment</h4>
<a name="ch07-pgfid-964398"></a>
<h3 class="sect2">7.2.1. The EJB Client</h3>
<p>
<a name="INDEX-1714"></a><a name="INDEX-1715"></a><a name="INDEX-1716"></a>
An EJB client uses remote EJB objects to access data, perform
tasks, and generally get things done. In the EJB environment, the
first action a client performs is to find the home interface for a
<a name="INDEX-1717"></a>
type of EJB object that it wants to use. This home interface is a kind
of object factory, used to create new instances of the EJB type, look
up existing instances (only when using entity EJB objects, discussed
later), and delete EJB objects. This is a bit different from RMI,
where the client first has to get a direct handle to an existing RMI
object. In many RMI applications, however, this first RMI object is a
kind of object factory that creates other RMI object references. So,
in a sense, the use of home interfaces in EJB is just formalizing the
role of factory objects in distributed component applications.</p>
<p>
<a name="INDEX-1718"></a>
EJB home interfaces are located by clients using JNDI (see
<a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch06_01.htm">Chapter 6, "JNDI"</a>, for more information). An EJB
server publishes the home interface for a particular EJB object under
a particular name in a JNDI namespace. The EJB client needs to specify
<a name="INDEX-1719"></a>
the JNDI server and the name that the EJB home interface is stored
under in order to start things off. The following code shows a simple
EJB client that uses remote <tt class="literal">Person</tt> beans: </p>
<blockquote>
<pre class="programlisting">
import javax.ejb.*;
import javax.naming.*;
import java.rmi.*;
import java.util.Properties;

public class PersonClient {
  public static void main(String[] args) {
    String name = args[0];

    try {
      // Get a JNDI context for our EJB server (EJBHome, in this case)
      Properties p = new Properties();
      p.put(Context.INITIAL_CONTEXT_FACTORY,
            "com.ejbhome.naming.spi.rmi.RMIInitCtxFactory");
      // Add URL, host or port options, if needed...;
      Context context = new InitialContext(p);

      // Get the home interface for Person beans
      PersonHome pHome =
        (PersonHome)context.lookup("People");

      // Create a named person
      Person person = pHome.create(name);

      // Use the remote stub interface to access the person's data
      . . .
    }
    catch (NoSuchPersonException nspe) {
      System.out.println("Invalid person: " + name);
    }
    catch (Exception e) {
      System.out.println("Error while creating/using person.");
    }
  }
}</pre>
</blockquote>
<p>We'll examine the details of this client a bit later in
      the chapter, but the example shows the fundamental steps an EJB
      client performs:</p>
<ul>
<li>
<p>Get a JNDI context from the EJB server.</p>
</li>
<li>
<p>Use this context to look up a home interface for the bean you want to use.</p>
</li>
<li>
<p>Use this home interface to create (or find) a bean.</p>
</li>
<li>
<p>Call methods on the bean.</p>
</li>
</ul>
<a name="ch07-pgfid-980331"></a>
<h3 class="sect2">7.2.2. The Enterprise JavaBeans Object</h3>
<p>
<a name="INDEX-1720"></a><a name="INDEX-1721"></a><a name="INDEX-1722"></a>
If you develop your own EJB object, you need to provide three
Java interfaces/classes in order to fully describe your EJB object to
an EJB container:</p>
<ul>
<li>
<p>A home interface</p>
</li>
<li>
<p>A remote interface</p>
</li>
<li>
<p>An enterprise bean implementation</p>
</li>
</ul>
<p>
<a name="INDEX-1723"></a><a name="INDEX-1724"></a><a name="INDEX-1725"></a><a name="INDEX-1726"></a>
The remote interface and the object implementation are similar
to the corresponding RMI interfaces. A client issues method requests
through a stub derived from the remote interface and eventually these
requests make their way to the corresponding bean instance on the
<a name="INDEX-1727"></a>
server. The home interface is a new twist: it acts as a bean factory,
providing a way for a client to create, locate, and destroy EJB
objects that it uses. With the home interface in the picture, the
remote interface acts as the interface the client uses to interact
with EJB objects, and the implementation is where the object itself
does its thing. </p>
<p>Here is an example home interface for the
<tt class="literal">Person</tt> bean used in the previous example:</p>
<blockquote>
<pre class="programlisting">
import javax.ejb.*;
import java.rmi.RemoteException;
import java.util.Hashtable;

public interface PersonHome extends EJBHome {
  // Create a new (nameless) person
  public Person create() throws RemoteException;

  // Create a named person.  
  // Throws an exception if the person can't be found.
  public Person create(String name)
    throws RemoteException, NoSuchPersonException;

  // Lookup a Person by name (the "primary key")
  public Person findByPrimaryKey(PersonPK key)
    throws RemoteException, FinderException;

  // Lookup people with a given string in their name.
  public Enumeration findByPartialName(String fragment)
    throws RemoteException, FinderException;
}</pre>
</blockquote>
<p>This home interface includes methods to create <tt class="literal">Person</tt> beans and to find them if they already exist on the server. The remote interface for our <tt class="literal">Person</tt> bean is shown here:</p>
<blockquote>
<pre class="programlisting">
import javax.ejb.*;
import java.rmi.Remote;
import java.rmi.RemoteException;

public interface Person extends Remote, EJBObject {
  public String getName() throws RemoteException;
  public void setName(String name) throws RemoteException;
}</pre>
</blockquote>
<p>
<a name="INDEX-1728"></a><a name="INDEX-1729"></a>
This interface shows the business methods that are available to
  clients. When a client gets a reference to a bean through the
  <tt class="literal">PersonHome</tt> interface, it is given a stub that
  implements the <tt class="literal">Person</tt> interface. </p>
<p>
<a name="INDEX-1730"></a><a name="INDEX-1731"></a><a name="INDEX-1732"></a>

The EJB object implementation needs to implement all the business
methods in the remote interface, plus some methods used by the
container to tell it about various events in its lifetime. The EJB
object does not need to implement the remote interface, which is
another new twist compared to RMI, where the server object always
implements the remote interface. In EJB, the container arranges for
method calls on the remote interface to be transferred to the EJB
object. You just need to ensure that the EJB object has methods that
match the signatures of the methods in the remote
interface. We'll see an example of EJB object implementation a
bit later.</p>
<p>
<a name="INDEX-1733"></a>
Various pieces of these Java classes (home, remote, and
  implementation) are provided for the sake of the client, to allow a
  client to create EJB objects and call remote methods on them. Other
  pieces are provided for the EJB container, to allow it to notify the
  EJB object about transaction- and persistence-related events, for
  example.</p>
<p>
<a name="INDEX-1734"></a><a name="INDEX-1735"></a><a name="INDEX-1736"></a><a name="INDEX-1737"></a>
In addition to the interfaces that describe the EJB object type, an
  EJB object also provides <em class="emphasis">deployment descriptors</em>
  to its containers. The deployment descriptors tell the container the
  name to use for registering the bean's home interface in JNDI,
  how to manage transactions for the bean, the access rights that
  remote identities are given to invoke methods on the EJB, and how
  persistence of the EJB objects should be handled. The container does
  all the heavy lifting with regard to providing these services, but
  the EJB object has to tell the container how it would prefer to have
  these services managed.</p>
<p>
<a name="INDEX-1738"></a><a name="INDEX-1739"></a><a name="INDEX-1740"></a>
There are two fundamental types of Enterprise JavaBeans: <em class="emphasis">session</em> beans and <em class="emphasis">entity</em> beans.<a href="#FOOTNOTE-2">[2]</a><a name="INDEX-1741"></a>
 A session bean is accessed by a single client at a time and is
  nonpersistent. It lives for a specific period of time (a session),
  and then gets removed by the server. An entity bean, on the other
  hand, represents a data entity stored in persistent storage (e.g., a
  database or filesystem). It can be accessed by multiple clients
  concurrently and is persistent beyond a client session or the
  lifetime of the EJB server. </p>
<blockquote class="footnote">
<a name="FOOTNOTE-2"></a>
<p>[2]In Version 1.0 of the EJB specification, support for entity
  beans is optional in compliant EJB servers.</p>
</blockquote>
<p>
<a name="INDEX-1742"></a><a name="INDEX-1743"></a>
To illustrate the difference between session and entity beans, suppose
  you're building an online banking system using EJB
  components. An automated bank teller, which reports on account
  balances and executes deposits and withdrawals on specified
  accounts, could be implemented as a session bean. A single client
  uses the teller bean to perform services on bank accounts that are
  maintained in some separate persistent store (the bank's
  database). A EJB object that directly represents a bank account,
  however, should be an entity bean. Multiple clients can access the
  account to perform transactions, and the state of the account entity
  should be persistent across the lifetime of the online banking
  server.</p>
<a name="ch07-pgfid-971618"></a>
<h3 class="sect2">7.2.3. The EJB Container</h3>
<p>
<a name="INDEX-1744"></a><a name="INDEX-1745"></a><a name="INDEX-1746"></a>
Most readers need to be familiar only with EJB containers from the
perspective of an EJB client or an EJB object. For example, a Java
application server that you might use to deploy an EJB-based
application provides an implementation of the EJB container
role. EJB-enabled application servers, with their own EJB containers
and deployment tools, are available from Weblogic/BEA, Bluestone, IBM,
Netscape, and Art Technology Group, among others. </p>
<p>The EJB container represents the value-added features of EJB over
standard remote objects built using RMI or CORBA. The EJB container
manages the details of transactional processing, resource pooling, and
data persistence for you, which reduces the burden on client
applications and EJB objects and allows them to deal with just the
business at hand. </p>
<p>
<a name="INDEX-1747"></a><a name="INDEX-1748"></a>
An EJB application server can contain multiple EJB containers, each
  managing multiple EJB objects. In this chapter, I'll refer to
  EJB servers and EJB containers somewhat interchangeably, depending
  on the context. In general, though, the container is strictly the
  runtime elements that interact directly with your EJB objects to
  provide client proxy services and notifications, while the server is
  the other glue outside the core EJB standard that integrates the EJB
  containers into a larger application management structure of some
  kind.</p>
<p>
<a name="INDEX-1749"></a><a name="INDEX-1750"></a><a name="INDEX-1751"></a>
An EJB container is the heart of an EJB environment, in the same way
  an ORB is the heart of a CORBA environment. The container registers
  EJB objects for remote access, manages transactions between clients
  and EJB objects, provides access control over specific methods on
  the EJB, and manages the creation, pooling, and destruction of
  enterprise beans. The container also registers the home interface
  for each type of bean under a given name in a JNDI namespace,
  allowing remote clients to find the home interfaces and use them to
  create enterprise beans.</p>
<p>
<a name="INDEX-1752"></a><a name="INDEX-1753"></a><a name="INDEX-1754"></a>
Once you provide the EJB container with the home and remote interfaces
  and the implementation class for your bean, along with a deployment
  descriptor, the container is responsible for generating the various
  classes that connect these components, as shown in <a href="#ch07-41426">Figure 7-2</a>. The
  home and remote interfaces you provide are RMI
  <tt class="literal">Remote</tt> interfaces; the container generates both
  the client stubs and the server-side implementation for these
  interfaces. When a client looks up a bean's home interface
  through JNDI, it receives an instance of the home stub class. All
  methods invoked on this stub are remotely invoked, via RMI, on the
  corresponding home implementation object on the EJB
  server. Similarly, if the client creates or finds any beans through
  the home stub, the client receives remote object stubs, and methods
  invoked on the stubs are passed through RMI to corresponding
  implementation objects on the server. These remote objects are
  linked, through the EJB container, to a corresponding enterprise
  bean object, which is an instance of your bean-implementation
  class. Optionally, the EJB container may also generate a
  container-specific subclass of your bean implementation (e.g., if it
  wants to augment some of your bean methods to facilitate
  synchronization with the container).</p>
<a name="ch07-41426"></a>
<div class="figure">
<img alt="figure" src="figs/Jent.0702.gif" webstripperlinkwas="figs/Jent.0702.gif"></div>
<h4 class="objtitle">Figure 7-2. Relationship of bean-provider classes and container-generated classes</h4>
<p>
<a name="INDEX-1755"></a>
The container receives client requests to create, look up, and/or
  remove beans. It either handles them itself or passes the requests
  to corresponding methods on the EJB object. Once the client obtains
  a reference to a remote interface for an EJB object, the container
  intercedes in remote method calls on the bean, to provide the bean
  with required transaction management and security measures. The
  container also provides support for persistence of enterprise beans,
  either by storing/loading the bean state itself or by notifying the
  bean that it needs to store or reload its state from persistent
  storage.</p>
<p>
<a name="INDEX-1756"></a><a name="INDEX-1757"></a><a name="INDEX-1758"></a><a name="INDEX-1759"></a>

A container can maintain multiple EJB objects and object types during its lifetime. The container has some freedom to manage resources on the server for performance or other reasons. For example, a container can choose to temporarily
  serialize a bean and store it to the server filesystem or some other
  persistent store; this is called <em class="emphasis">passivating</em> a
  bean. The EJB object is notified of this and given a chance to
  release any shared resources or transient data that shouldn't
  be serialized. The bean is also notified after it is activated
  again, to allow it to restore any transient state or reopen shared
  resources.</p>
<p>
<a name="INDEX-1760"></a><a name="INDEX-1761"></a><a name="INDEX-1762"></a><a name="INDEX-1763"></a><a name="INDEX-1764"></a><a name="INDEX-1765"></a>

An EJB container can make any EJB object type available for remote
  use. When you deploy an EJB object within an EJB server, you can
  specify how the container should manage the bean during runtime, in
  terms of transaction management, resource pooling, access control,
  and data persistence. This is done using deployment descriptors,
  which contain parameter settings for these various options. These
  settings can be customized for each deployment of an EJB object. You
  might purchase an EJB object from a vendor and deploy it on your EJB
  server with a particular set of container management options, while
  someone else who purchased the same bean can deploy it with a
  different set of deployment options. We discuss the details of the
  runtime options available in deployment descriptors and how to use
  them later in this chapter, 


when we talk about deploying EJB
  components.</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch07_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">7.1. A Note on Evolving Standards</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">7.3. Transaction Management</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
