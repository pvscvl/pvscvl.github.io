<html>
<head>
<title>Thread Safety (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Thread Safety">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_01.htm">Chapter 5: Java Servlets</a></td><td align="right" valign="top" width="172"><a href="ch05_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">5.5. Thread Safety</h2>
<p>
<a name="INDEX-1268"></a><a name="INDEX-1269"></a><a name="INDEX-1270"></a><a name="INDEX-1271"></a>In a typical servlet scenario, only one copy of any particular servlet
  is loaded at any given time.  Each servlet might, however, be called
  upon to deal with multiple requests at the same time.  This means
  that a servlet needs to be thread-safe. If a servlet doesn't use any
  class variables (that is, any variables with a scope broader than
  the service method itself), it is generally already thread-safe.  If
  you are using any third-party libraries or extensions, make sure
  that those components are also thread-safe.  However, a servlet that
  maintains persistent resources needs to make sure that nothing
  untoward happens to those resources.  Imagine, for example, a
  servlet that maintains a bank balance using an
  <tt class="literal">int</tt> in memory.<a href="#FOOTNOTE-6">[6]</a>  If two servlets try to access the balance at the same
time, we might get this sequence of events:</p>
<blockquote class="footnote">
<a name="FOOTNOTE-6"></a>
<p>[6] Hey, bear with me on this one.  It's certainly more than
  adequate for <em class="emphasis">my</em> salary...</p>
</blockquote>
<blockquote>
<pre class="programlisting">User 1 connects to the servlet to make a $100 withdrawal.
The servlet checks the balance for User 1, finding $120.
User 2 connects to the servlet to make a $50 withdrawal.
The servlet checks the balance for User 2, finding $120.
The servlet debits $100 for User 1, leaving $20.
The servlet debits $50 for User 2, leaving -$30.
The programmer is fired.</pre>
</blockquote>
<p>
<a name="INDEX-1272"></a><a name="INDEX-1273"></a>Obviously, this is incorrect behavior, particularly that last bit.  We want the servlet to
perform the necessary action for User 1, and then deal with User 2 (in
this case, by giving him an insufficient funds message).  We can do
this by surrounding sections of code with
<tt class="literal">synchronized</tt> blocks.  While a particular
synchronized block is executing, no other sections of code that are
synchronized on the same object (usually the servlet or the resource
being protected) can execute. For more information on thread safety
and synchronization, see <em class="emphasis">Java Threads</em> by Scott
Oaks and Henry Wong (O'Reilly).</p>
<p>
<a name="INDEX-1274"></a><a href="#ch05-pgfid-547396">Example 5-5</a> implements the ATM display for the First Bank of Java.
The <tt class="literal">doGet()</tt> method displays the current account
balance and provides a small ATM control panel for making deposits and
withdrawals, as shown in <a href="#ch05-pgfid-548589">Figure 5-3</a>.<a href="#FOOTNOTE-7">[7]</a>  The control panel uses a POST request to send the<a name="INDEX-1275"></a><a name="INDEX-1276"></a>
transaction back to the servlet, which performs the appropriate action
and calls <tt class="literal">doGet()</tt> to redisplay the ATM screen with
the updated balance.</p>
<blockquote class="footnote">
<a name="FOOTNOTE-7"></a>
<p>[7] Despite the fact that Java is a very large island,
there's still only one account.</p>
</blockquote>
<a name="ch05-pgfid-548589"></a>
<div class="figure">
<img alt="figure" src="figs/Jent.0503.gif" webstripperlinkwas="figs/Jent.0503.gif"></div>
<h4 class="objtitle">Figure 5-3. The First Bank of Java ATM display</h4>
<a name="ch05-pgfid-547396"></a>
<div class="example">
<h4 class="objtitle">Example 5-5. An ATM Servlet </h4>
<blockquote>
<pre class="programlisting">import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
import java.io.*;

public class AtmServlet extends HttpServlet {

  Account act;
   
  public void init(ServletConfig conf) throws ServletException {
    super.init(conf);
    act = new Account();
    act.balance = 0;
  }
        
  public void doGet(HttpServletRequest req, HttpServletResponse resp)
    throws ServletException, IOException {

    resp.setContentType("text/html");
    PrintWriter out = resp.getWriter();

    out.println("&lt;HTML&gt;&lt;BODY&gt;");
    out.println("&lt;H2&gt;First Bank of Java ATM&lt;/H2&gt;");
    out.println("Current Balance: &lt;B&gt;" + act.balance + "&lt;/B&gt;&lt;BR&gt;");
    out.println("&lt;FORM METHOD=POST ACTION=/servlet/AtmServlet&gt;");
    out.println("Amount: &lt;INPUT TYPE=TEXT NAME=AMOUNT SIZE=3&gt;&lt;BR&gt;");
    out.println("&lt;INPUT TYPE=SUBMIT NAME=DEPOSIT VALUE=\"Deposit\"&gt;");
    out.println("&lt;INPUT TYPE=SUBMIT NAME=WITHDRAW VALUE=\"Withdraw\"&gt;");
    out.println("&lt;/FORM&gt;");
    out.println("&lt;/BODY&gt;&lt;/HTML&gt;");
  }

  public void doPost(HttpServletRequest req, HttpServletResponse resp)
    throws ServletException, IOException {
    
    int amt=0; 

    try {
      amt = Integer.parseInt(req.getParameter("AMOUNT"));
    } 
    catch (NullPointerException e) { 
      // No Amount Parameter passed
    }
    catch (NumberFormatException e) {
      // Amount Parameter was not a number
    }
   
    synchronized(act) {
      if(req.getParameter("WITHDRAW") != null) &amp;&amp; (amt &lt; act.balance)
        act.balance = act.balance - amt;
      if(req.getParameter("DEPOSIT") != null) &amp;&amp; (amt &gt; 0)
        act.balance = act.balance + amt;
    } // end synchronized block

    doGet(req, resp);                   // Show ATM screen
  }

  public void destroy() {
    // This is where we would save the balance to a file
  }

  class Account {
    public int balance;
  }
}</pre>
</blockquote>
</div>
<p>
<a name="INDEX-1277"></a>The <tt class="literal">doPost()</tt> method alters the account
balance contained within an <tt class="literal">Account</tt> object
<tt class="literal">act</tt> (since <tt class="literal">Account</tt> is so simple,
I've defined it as an inner class).  In order to prevent
multiple requests from accessing the same account at once, any code
that alters <tt class="literal">act</tt> is synchronized on
<tt class="literal">act</tt>.  This ensures that no other code can alter
<tt class="literal">act</tt> while a synchronized section is running.</p>
<p>
<a name="INDEX-1278"></a>The <tt class="literal">destroy() </tt>method is defined in the <tt class="literal">AtmServlet</tt>, but it contains no actual code.  A real banking servlet would obviously want to write the account balance to disk before being unloaded. And if the servlet were using JDBC to store the balance in a database, it would also want to destroy all its database related objects.</p>
<p>
<a name="INDEX-1279"></a><a name="INDEX-1280"></a><a name="INDEX-1281"></a><a name="INDEX-1282"></a>A more complex servlet than <tt class="literal">AtmServlet</tt> might need to synchronize its entire service method, limiting the servlet to one request at a time.  In these situations, it sometimes makes sense to modify the standard servlet life cycle a little bit.  We can do this by implementing the <tt class="literal">SingleThreadModel</tt> interface.  This is a tag interface that has no methods; it simply tells the server to create a pool of servlet instances, instead of a single instance of the servlet.  To handle an incoming request, the server uses a servlet from the pool and only allows each copy of the servlet to serve one request at a time.  Implementing this interface effectively makes a servlet thread-safe, while allowing the server to deal with more than one connection at a time.  Of course, using <tt class="literal">SingleThreadModel</tt> does increase resource requirements and make it difficult to share data objects within a servlet.</p>
<p>
<a name="INDEX-1283"></a>Another use for <tt class="literal">SingleThreadModel</tt> is to implement simple database connection sharing. Having multiple database connections can improve performance and avoid connection overloading. Of course, for more advanced or high-traffic applications, you generally want to manage connection pooling explicitly, rather than trusting the web server to do it for you.</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.4. Custom Servlet Initialization</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.6. Server-Side Includes</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
