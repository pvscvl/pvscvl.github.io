<html>
<head>
<title>Using an Enterprise JavaBeans Object (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Using an Enterprise JavaBeans Object">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_01.htm">Chapter 7: Enterprise JavaBeans</a></td><td align="right" valign="top" width="172"><a href="ch07_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_09.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">7.8. Using an Enterprise JavaBeans Object</h2>
<p>
<a name="INDEX-2098"></a><a name="INDEX-2099"></a>
So far, we've seen how to write an enterprise bean and how to
  deploy it through an EJB container. Now let's look at how you
  use an enterprise bean as a client.</p>
<a name="ch07-pgfid-971483"></a>
<h3 class="sect2">7.8.1. Finding Home Interfaces Through JNDI</h3>
<p>
<a name="INDEX-2100"></a><a name="INDEX-2101"></a>
Once an enterprise bean is deployed within an EJB container, the home
  interface for the bean has been exported under a particular name
  using JNDI. As a client, you need to know how to connect to the JNDI
  context of the remote EJB server, and you need to know the name for
  the bean home interface you're interested in. A typical way to
  connect to the JNDI naming context is to specify the initial context
  factory for JNDI and create a new naming context through it (for
  more details, see <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch06_01.htm">Chapter 6, "JNDI"</a>):</p>
<blockquote>
<pre class="programlisting">
Hashtable props = new Hashtable();
// Specify the context factory for our EJB server
props.put(Context.INITIAL_CONTEXT_FACTORY, 
          "my.ejb.server.context.factory");
// Specify the URL for the context provider, if any
props.put(Context.PROVIDER_URL, "my.server.jndi.url");
// Trying looking up the context
javax.naming.Context ctx = null;
try {
  ctx = new javax.naming.InitialContext(props);
}
catch (NamingException ne) {
  System.out.println("Failed to create JNDI context from EJB server");
}</pre>
</blockquote>
<p>
<a name="INDEX-2102"></a><a name="INDEX-2103"></a><a name="INDEX-2104"></a><a name="INDEX-2105"></a><a name="INDEX-2106"></a><a name="INDEX-2107"></a>
In this example client, we make a <tt class="literal">Hashtable</tt> that
contains two standard JNDI properties, the
<tt class="literal">INITIAL_CONTEXT_FACTORY</tt> and
<tt class="literal">PROVIDER_URL</tt> properties. These property names are
<tt class="literal">String</tt> constants defined on the
<tt class="literal">javax.naming.Context</tt> interface, whose values are
"java.naming.factory.initial" and
"java.naming.provider.url", respectively. You can use the
explicit string values if you prefer, but the constant values are
provided by the <tt class="literal">Context</tt> interface as a convenience,
since they're a bit easier to remember. The value of
<tt class="literal">INITIAL_CONTEXT_FACTORY</tt> is the class name for a
context factory, provided by your JNDI provider (the EJB server, in
this case), and <tt class="literal">PROVIDER_URL</tt> is a URL used to
connect remotely to the JNDI server running within the EJB server. The
proper values for both of these items should be provided by your EJB
application server provider.</p>
<p>
<a name="INDEX-2108"></a><a name="INDEX-2109"></a><a name="INDEX-2110"></a><a name="INDEX-2111"></a><a name="INDEX-2112"></a>
You can also specify the security principal under which you want to
interact with the EJB/JNDI server, by including the
<tt class="literal">Context.SECURITY_PRINCIPAL</tt> property in the call to
create your naming context. This property value should be a
<tt class="literal">java.security.Identity</tt> object that represents the
identity of your client:</p>
<blockquote>
<pre class="programlisting">
Hashtable props = new Hashtable();
// Initialized other connection properties...
java.security.Identity id = . . .;
props.put(Context.SECURITY_PRINCIPAL, id);
javax.naming.Context ctx = new javax.naming.InitialContext(props);
...</pre>
</blockquote>
<p>
<a name="INDEX-2113"></a>
Some EJB server providers use this identity in determining access to
bean features, as specified in the bean deployment descriptors. The
EJB 1.0 specification doesn't provide a standard for providing
this identity, however, so check the documentation on your EJB server
for specific details. For more details on accessing remote JNDI
servers, see <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch06_01.htm">Chapter 6, "JNDI"</a>.</p>
<p>Now that we have a JNDI naming context from the EJB server, we
can look up the home interface for the bean we're interested in:</p>
<blockquote>
<pre class="programlisting">
ProfileHome pHome = null;
try {
  pHome =
    (ProfileHome)ctx.lookup("jen.ejb.entity.beanManaged.ProfileHome");
}
catch (NamingException ne) {
  System.out.println("Failed to lookup home for ProfileBean.");
}</pre>
</blockquote>
<p>In this case, we've assumed that the bean provider has
deployed its home interface on the EJB server under the name
"jen.ejb.entity.beanManaged.ProfileHome". With the home
interface stub, our client can now create or find beans located on the
server.</p>
<a name="ch07-pgfid-964613"></a>
<h3 class="sect2">7.8.2. Creating/Finding Beans</h3>
<p>
<a name="INDEX-2114"></a><a name="INDEX-2115"></a>
The home interface for the bean contains methods that allow a client
  to create new beans or find existing beans (for entity
  beans). Continuing our example client, assuming we're using
  our entity <tt class="literal">ProfileBean</tt> from <a href="ch07_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_06.htm">Example 7-9</a> and its
  corresponding home interface, we can create a new
  <tt class="literal">ProfileBean</tt> and get a stub reference to it as
  follows:</p>
<blockquote>
<pre class="programlisting">
Profile profile = null;
try {
  profile = pHome.create("Kaitlyn");
}
catch (DuplicatePersonException dpe) {
  System.out.println("Profile already exists for Kaitlyn.");
}
catch (RemoteException re) {
  System.out.println("Remote exception while creating profile.");
}</pre>
</blockquote>
<p>Here we're trying to create a new profile for someone
named "Kaitlyn". We're using the
<tt class="literal">create()</tt> method defined on our
<tt class="literal">ProfileHome</tt> interface, which we've declared
to throw <tt class="literal">RemoteException</tt> and our own
<tt class="literal">DuplicatePersonException</tt>. In the client, we catch
each of these exceptions and print a corresponding error message if it
occurs.</p>
<p>
<a name="INDEX-2116"></a>
Now, if we thought a profile already existed for Kaitlyn, we could try
finding it in persistent storage first, using one of the finder
methods on our home interface:</p>
<blockquote>
<pre class="programlisting">
try {
  profile = pHome.findByPrimaryKey(new ProfilePK("Kaitlyn"));
}
catch (FinderException fe) {  
  System.out.println("No profile found for Kaitlyn.");
}
catch (RemoteException re) {
  System.out.println("Remote exception while finding profile.");
}</pre>
</blockquote>
<p>If we weren't sure whether a profile for Kaitlyn had been
  created or not, we could try finding it first, using the code above,
  then create one if needed:</p>
<blockquote>
<pre class="programlisting">
if (profile == null) {
  // Create profile as before ...
}</pre>
</blockquote>
<a name="ch07-pgfid-964615"></a>
<h3 class="sect2">7.8.3. Using Client-Side Transactions</h3>
<p>
<a name="INDEX-2117"></a><a name="INDEX-2118"></a><a name="INDEX-2119"></a><a name="INDEX-2120"></a>
I mentioned before that you can specify at deployment time how
your bean handles transactions, using one of the transaction
attributes we already discussed. On the client-side, you can use the
Java Transaction API (JTA) to create your own transaction
boundaries. These transactions are taken into account, along with the
bean's transaction-handling attributes, by the EJB container, to
determine which transaction context to put the bean into for each
remote method call your client makes. Again, a complete description of
the JTA is beyond the scope of this chapter, but it's useful to
take a quick look at how to create your own client transactions. </p>
<p>
<a name="INDEX-2121"></a>
Continuing the example client we've been working with in
this section, we've already found the home interface for the
<tt class="literal">ProfileBean</tt> and created/found a
<tt class="literal">Profile</tt> for Kaitlyn. Now we want to make some
changes to Kaitlyn's profile, but we want to make sure that all
our changes are made before we commit them. To do this, we create our
own "javax.transaction.UserTransaction"<a href="#FOOTNOTE-5">[5]</a> and either commit it or roll it back, depending on whether
we get an exception while setting the profile entries:</p>
<blockquote class="footnote">
<a name="FOOTNOTE-5"></a>
<p>[5]Note that shortly after the EJB 1.0 specification was released,
the name of the (then beta) JTA was changed, so that
<tt class="literal">javax.jts.UserTransaction</tt> became
<tt class="literal">javax.transaction.UserTransaction</tt>. I'm using
the new class name here, but keep in mind that you might see the old
package names in the EJB 1.0 documentation from Sun.</p>
</blockquote>
<blockquote>
<pre class="programlisting">javax.transaction.UserTransaction xact = 
  (UserTransaction)jndiCtx.lookup("javax.transaction.UserTransaction");

xact.begin();
try {
  profile.setEntry("username", "kschmitz");
  profile.setEntry("password", "foobar");
  profile.setEntry("interestGroups", "dogs:cartoons:napping");
  xact.commit();
}
catch (RemoteException re) {
  xact.rollback();
}</pre>
</blockquote>
<p>We acquire the transaction from whatever transaction provider
we're using on the client side. Here, we assume that we've
retrieved a "JNDI context" from the EJB server and use it to look up an
instance of "javax.transaction.UserTransaction" that the EJB server
provides. When we use this transaction object, the EJB server can
manage the transaction around calls to enterprise bean methods. We
begin the transaction before starting our profile update. We make our
updates to Kaitlyn's profile, and, if successful, we commit the
transaction. If we get an exception from the EJB server along the way,
we rollback our changes by calling <tt class="literal">rollback()</tt> on
the transaction. </p>
<p>
<a name="INDEX-2122"></a><a name="INDEX-2123"></a>
If the ProfileBean was deployed with a transaction attribute of
<tt class="literal">TX_SUPPORTS</tt>, <tt class="literal">TX_REQUIRED</tt>, or
<tt class="literal">TX_MANDATORY</tt>, the EJB container should execute the
bean methods within our client transaction context. The corresponding
database updates are committed to the database when we
<tt class="literal">commit()</tt> our transaction or rolled back if we
<tt class="literal">rollback()</tt> our transaction. The bean does not need
to know anything about the transaction boundaries, even if it is
managing its own persistence. The EJB container manages the
association between the client-specified transaction boundaries and
the JDBC transactions initiated by the bean implementation.</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch07_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_09.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">7.7. Deploying an Enterprise JavaBeans Object</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">7.9. Changes in EJB 1.1 Specification</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
