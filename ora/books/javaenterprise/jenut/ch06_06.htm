<html>
<head>
<title>Listing the Children of a Context (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Listing the Children of a Context">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch06_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch06_01.htm">Chapter 6: JNDI</a></td><td align="right" valign="top" width="172"><a href="ch06_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch06_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">6.6. Listing the Children of a Context</h2>
<p>
<a name="INDEX-1515"></a><a name="INDEX-1516"></a><a name="INDEX-1517"></a>
A common JNDI operation is retrieving the list of names of an
  object's children. For example, an application might get the
  names of Enterprise JavaBeans in a Java application server to see if
  one is running or list the names of children of an
  <tt class="literal">InitialContext</tt> in order to populate a Swing
  <tt class="literal">JTree</tt>

component. You list the names of an
  object's children using the <tt class="literal">list()</tt> method
  of <tt class="literal">Context</tt>:</p>
<blockquote>
<pre class="programlisting">
NamingEnumeration children = initialContext.list("");</pre>
</blockquote>
<p>
<a name="INDEX-1518"></a><a name="INDEX-1519"></a><a name="INDEX-1520"></a><a name="INDEX-1521"></a><a name="INDEX-1522"></a><a name="INDEX-1523"></a>

The <tt class="literal">list()</tt> method returns a
<tt class="literal">javax.naming.NamingEnumeration</tt> of
<tt class="literal">javax.naming.NameClassPair</tt> objects, where each
<tt class="literal">NameClassPair</tt> contains the name and class of a
single child of the <tt class="literal">Context</tt>. Note that the
<tt class="literal">NameClassPair</tt> is not the child itself. Its
<tt class="literal">getName()</tt> method, however, enables us to learn the
name of the child, while <tt class="literal">getClassName()</tt> lets us
access the child's class name. The
<tt class="literal">NamingEnumeration</tt> implements the
<tt class="literal">java.util.Enumeration</tt> interface, so it allows us to
loop through the results of calling <tt class="literal">list()</tt> using
the familiar enumeration methods. JNDI actually uses
<tt class="literal">NamingEnumeration</tt> as the return type of a number of
naming operations; the actual objects in the enumeration vary
depending on the operation.</p>
<p>
<a name="INDEX-1524"></a><a href="#ch06-pgfid-982611">Example 6-6</a> shows the implementation of a <em class="emphasis">list</em>
  command for <tt class="literal">NamingShell</tt>. Because executing
  <tt class="literal">list()</tt> requires a current
  <tt class="literal">Context</tt>, the <tt class="literal">execute()</tt> method
  queries the shell to determine whether one exists. If there is no
  current <tt class="literal">Context</tt>, the method throws an exception.</p>
<a name="ch06-pgfid-982611"></a>
<div class="example">
<h4 class="objtitle">Example 6-6. The list Command</h4>
<blockquote>
<pre class="programlisting">
import java.util.Vector;
import javax.naming.*;

public class list implements Command {
  public void execute(Context c, Vector v) throws CommandException {
        
    String name = "";
        
    // An empty string is OK for a list operation as it means
    // list children of the current context.
    if (!(v.isEmpty()))
      name = (String)v.firstElement();
        
    // Check for current context; throw an exception if there isn't one
    if (NamingShell.getCurrentContext() == null)
      throw new CommandException(new Exception(), 
        "Error: no current context.");

    // Call list() and then loop through the results, printing the names
    // and class names of the children
    try {
      NamingEnumeration enum = c.list(name);                
      while (enum.hasMore()) {
        NameClassPair ncPair = (NameClassPair)enum.next();
        System.out.print(ncPair.getName() + " (type ");
        System.out.println(ncPair.getClassName() + ")");
      }
    }
    catch (NamingException e) {
      throw new CommandException(e, "Couldn't list " + name);
    }
  }

  public void help() { System.out.println("Usage: list [name]"); }
}</pre>
</blockquote>
</div>
<p>Let's continue with our example of using <tt class="literal">NamingShell</tt> with the filesystem provider. Say that we are accessing a filesystem where we have unpacked a JAR file that contains, among others, a <em class="filename">javax</em> directory and a <em class="filename">naming</em> subdirectory. If the current <tt class="literal">Context</tt> is the <em class="filename">naming</em> directory (ignoring for a moment how we set the current <tt class="literal">Context</tt>; we'll see how to do that shortly), we can use the <em class="emphasis">list</em> command with the following results:</p>
<blockquote>
<pre class="programlisting">
naming% list
AuthenticationException.class (type java.io.File)
AuthenticationNotSupportedException.class (type java.io.File)
BinaryRefAddr.class (type java.io.File)
Binding.class (type java.io.File)
CannotProceedException.class (type java.io.File)
CommunicationException.class (type java.io.File)
CompositeName.class (type java.io.File)
CompoundName.class (type java.io.File)
ConfigurationException.class (type java.io.File)
Context.class (type java.io.File)
ContextNotEmptyException.class (type java.io.File)
directory (type javax.naming.Context)
...</pre>
</blockquote>
<a name="ch06-pgfid-976482"></a>
<h3 class="sect2">6.6.1. How Names Work</h3>
<p>
<a name="INDEX-1525"></a><a name="INDEX-1526"></a>
The <tt class="literal">list()</tt> method allows us to list the names of the children of any arbitrary child of a <tt class="literal">Context</tt>. We just saw that we can list the names of the children of a <tt class="literal">Context</tt> itself (in this case, the <em class="filename">naming</em> directory) by calling its <tt class="literal">list()</tt> method using an empty string as a parameter. Again, let's assume we have a <tt class="literal">Context</tt> object for the <em class="filename">naming</em> subdirectory under <em class="filename">javax</em>. Here's how a call to get the names of the children of this <tt class="literal">Context</tt> might look:</p>
<blockquote>
<pre class="programlisting">
NamingEnumeration childrenOfNaming = namingContext.list("");</pre>
</blockquote>
<p>The result is a <tt class="literal">NamingEnumeration</tt> that contains <tt class="literal">NameClassPair</tt> objects representing all the children of <em class="filename">naming</em> (i.e., the classes and subpackages of <tt class="literal">javax.naming</tt>), including the <em class="filename">directory</em> directory (i.e., the <tt class="literal">javax.naming.directory</tt> subpackage).</p>
<p>To list the names of the children of an arbitrary child of a <tt class="literal">Context</tt>, we have to pass a name to <tt class="literal">list()</tt>. For example, we can list the children of <em class="filename">directory</em> by specifying the <tt class="literal">String</tt> "directory" as a parameter to <tt class="literal">list()</tt>:</p>
<blockquote>
<pre class="programlisting">
NamingEnumeration childrenOfDirectory = namingContext.list("directory");</pre>
</blockquote>
<p>The result here is a <tt class="literal">NamingEnumeration</tt> that contains <tt class="literal">NameClassPair</tt> objects representing all the children of <em class="filename">directory</em> (i.e., the classes of <tt class="literal">javax</tt>.<tt class="literal">naming.directory</tt>, such as <tt class="literal">DirContext</tt>). </p>
<p>
<a name="INDEX-1527"></a><a name="INDEX-1528"></a>
You can also specify a name using something called a compound name. A <em class="emphasis">compound name</em> is composed of atomic names, like "naming" and "directory", that are separated by separator characters, which, in the case of the filesystem provider, can be either a Unix-style forward slash (<tt class="literal">/</tt>) or a Windows-style backward slash (<tt class="literal">\</tt>). Any JNDI method that takes a name as a parameter can accept a compound name.</p>
<p>Say we have a <tt class="literal">Context</tt> object for the <em class="filename">javax</em> directory. We can get a list of the children of <em class="filename">directory</em> as follows:</p>
<blockquote>
<pre class="programlisting">
NamingEnumeration childrenOfDirectory = javaxContext.list("naming/directory"); </pre>
</blockquote>
<p>This call returns the same <tt class="literal">NamingEnumeration</tt> we got earlier. Now consider the following call:</p>
<blockquote>
<pre class="programlisting">
NamingEnumeration childrenOfContext = javaxContext.list("naming/Context"); </pre>
</blockquote>
<p>
The compound name here specifies an object that is not a
<tt class="literal">Context</tt>, so it has no children. In this case, the
call to <tt class="literal">list()</tt> throws a <tt class="literal">NamingException</tt>.</p>
<p>
<a name="INDEX-1529"></a><a name="INDEX-1530"></a><a name="INDEX-1531"></a><a name="INDEX-1532"></a><a name="INDEX-1533"></a>

The separator character used in JNDI compound names varies across
naming and directory services; the separator is analogous to the
separator used in <tt class="literal">java.io.File</tt>. Although the Sun
filesystem provider allows us to use the Unix-style forward slash and
the Windows-style backward slash interchangeably, most service
providers are very picky about the separator character used for that
service. Unfortunately, the JNDI API does not provide a way to get the
separator character programmatically the way
<tt class="literal">java.io.File</tt> does. Although the
<tt class="literal">javax.naming.CompoundName</tt> class reads a property
called "jndi.syntax.separator" that contains the separator
character, this property cannot be accessed outside the service
provider. So, to find out the separator character for a particular
service provider, you have to consult the documentation or some sample
code for that provider.</p>
<a name="ch06-pgfid-976505"></a>
<h3 class="sect2">6.6.2. Browsing a Naming System</h3>
<p>
<a name="INDEX-1534"></a><a name="INDEX-1535"></a>
So far, we know how to look up an object in a
  <tt class="literal">Context</tt> using <tt class="literal">lookup()</tt> and
  list the children of that <tt class="literal">Context</tt> with
  <tt class="literal">list()</tt>. Browsing is a composite operation that
  involves repeated calls to <tt class="literal">list()</tt> and
  <tt class="literal">lookup()</tt>, to see what objects are available in
  the naming system and to move around in those objects.</p>
<p>
<a name="INDEX-1536"></a><tt class="literal">Context</tt> objects are the key to browsing. You start
with a current <tt class="literal">Context</tt> and list the children of
that <tt class="literal">Context</tt> to see which child you (or, more
likely, the user) are interested in. Once you have selected an
interesting child, you look up that child to get the actual child
object. If the object implements <tt class="literal">Context</tt>, you can
use this new <tt class="literal">Context</tt> object to continue browsing,
by calling <tt class="literal">list()</tt> again, selecting a child, and
looking up its object. If the object does not implement
<tt class="literal">Context</tt>, however, you obviously cannot continue
browsing down that branch of the naming system. Once you have a
<tt class="literal">Context</tt> object, it is always possible to list its
children and look up objects within it. So, for example, you can
always use the <tt class="literal">InitialContext</tt> for a naming system
to go back and start browsing at the entry point to the naming system</p>
<p>
<a name="INDEX-1537"></a><a name="INDEX-1538"></a><a href="#ch06-pgfid-982706">Example 6-7</a> shows an implementation of a <em class="emphasis">cd</em>
command for <tt class="literal">NamingShell</tt>. The
<em class="emphasis">cd</em> command changes the current context of
<tt class="literal">NamingShell</tt> to the specified context; you use it in
conjunction with the <em class="emphasis">list</em> command to browse the
naming system. The name of this command comes from the Unix
<em class="emphasis">cd</em> command for changing directories, since
changing the directory on a Unix system is an analogous operation to
changing the current context when <tt class="literal">NamingShell</tt> is
used with the filesystem provider. To change the current context back
to the initial context, use either <em class="emphasis">cd /</em> or
<em class="emphasis">cd \</em>. Note, however, 


that you cannot use <em class="emphasis">cd ..</em>, as <tt class="literal">Context</tt> objects do not know about their parents, and therefore, we cannot go up the <tt class="literal">Context</tt> hierarchy.</p>
<a name="ch06-pgfid-982706"></a>
<div class="example">
<h4 class="objtitle">Example 6-7. The cd Command</h4>
<blockquote>
<pre class="programlisting">
import java.util.Vector;
import javax.naming.*;

class cd implements Command {
  public void execute(Context ctx, Vector v) throws CommandException {
    if (NamingShell.getCurrentContext() == null)
      throw new CommandException(new Exception(), "No current context");
    else if (v.isEmpty())
      throw new CommandException(new Exception(), "No name specified");
            
    // Get args[0] and throw away the other args
    else {
      String name = (String)v.firstElement();
      try {
        if (name.equals("..")) {
          throw new CommandException(new Exception(), 
            "Contexts don't know about their parents.");
        }
        else if (((name.equals("/")) || (name.equals("\\"))) {
          NamingShell.setCurrentContext(NamingShell.getInitialContext());
          NamingShell.setCurrentName(NamingShell.getInitialName());
          System.out.println("Current context now " + name);
        }
        else {
          Context c = (Context) (NamingShell.getCurrentContext()).lookup(name);
          NamingShell.setCurrentContext(c);
          NamingShell.setCurrentName(name);
          System.out.println("Current context now " + name);
        }
      }
      catch (NamingException ne) {
        throw new CommandException(ne, "Couldn't change to context " + name);
      }
      catch (ClassCastException cce) {
        throw new CommandException(cce, name + " not a Context");
      }
    }
  }
    
  public void help() { System.out.println("Usage: cd [name]"); }
}</pre>
</blockquote>
</div>
<p>Earlier, when we demonstrated the <em class="emphasis">list</em> command, I
asked you to assume that the current <tt class="literal">Context</tt> for
<tt class="literal">NamingShell</tt> was the <em class="filename">naming</em>
subdirectory. Now we can see just how to change the current
<tt class="literal">Context</tt> to that directory:</p>
<blockquote>
<pre class="programlisting">
initctx% cd temp
Current context now temp
temp% cd javax
Current context now javax
javax% cd naming
Current context now naming</pre>
</blockquote>
<p>Of course, these commands assume we are starting from the
initial context and that the <em class="filename">naming</em> directory is
available in the filesystem at
<em class="filename">/temp/javax/naming</em>.</p>
<a name="ch06-pgfid-976972"></a>
<h3 class="sect2">6.6.3. Listing the Bindings of a Context </h3>
<p>
<a name="INDEX-1539"></a><a name="INDEX-1540"></a><a name="INDEX-1541"></a><a name="INDEX-1542"></a><a name="INDEX-1543"></a>


The <tt class="literal">listBindings()</tt> method of
<tt class="literal">Context</tt> provides an alternative means of accessing
the children of a <tt class="literal">Context</tt>. We've seen that
<tt class="literal">list()</tt> returns a
<tt class="literal">NamingEnumeration</tt> of
<tt class="literal">NameValuePair</tt> objects, where each
<tt class="literal">NameValuePair</tt> provides access to the name and class
name of a single child of the
<tt class="literal">Context</tt>. <tt class="literal">listBindings()</tt> also
returns a <tt class="literal">NamingEnumeration</tt>, but, in this case, the
enumeration contains <tt class="literal">Binding</tt>
objects. <tt class="literal">Binding</tt> is a subclass of
<tt class="literal">NameValuePair</tt> that contains the actual child
object, in addition to its name and class. You can use the
<tt class="literal">getObject()</tt> method of <tt class="literal">Binding</tt> to
get the child object.</p>
<p>Just as with <tt class="literal">list()</tt>, we can pass an empty
string to <tt class="literal">listBindings()</tt> to return the bindings for
a <tt class="literal">Context</tt>:</p>
<blockquote>
<pre class="programlisting">
NamingEnumeration bindings = initialContext.listBindings("");</pre>
</blockquote>
<p>
<a name="INDEX-1544"></a><tt class="literal">listBindings()</tt> is designed for situations where you need to perform some sort of operation on all the children of a <tt class="literal">Context</tt>, and you want to save yourself the time and trouble of looking up each child individually. Be aware, however, that <tt class="literal">listBindings()</tt> is potentially a very expensive operation, as it has to get each child object from the underlying naming system. If you don't need all the objects, you are better off using <tt class="literal">list()</tt> to get the names of the children and then just looking up the objects you need.</p>
<a name="INDEX-1545"></a>
<a name="INDEX-1546"></a>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch06_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch06_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch06_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">6.5. The NamingShell Application</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">6.7. Creating and Destroying Contexts</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
