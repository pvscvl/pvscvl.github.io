<html>
<head>
<title>Accessing Directory Services (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Accessing Directory Services">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch06_08.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch06_01.htm">Chapter 6: JNDI</a></td><td align="right" valign="top" width="172"><a href="ch06_10.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch06_10.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">6.9. Accessing Directory Services</h2>
<p>
<a name="INDEX-1563"></a><a name="INDEX-1564"></a><a name="INDEX-1565"></a><a name="INDEX-1566"></a><a name="INDEX-1567"></a>
So far, we have only discussed JNDI in the context of naming services. Now it's time to turn to directory services. At its root, a directory is merely a naming service whose objects have attributes as well as names. Programming for a directory service, such as an LDAP directory, is roughly as hard as programming for a relational database. </p>
<p>As we've seen, a binding in JNDI is an association between a name and an object. While this association is sufficient for some naming services, a directory service needs to be able to associate more than just a name with an object. Attributes associate specialized data with an object. In JNDI, an object with attributes as well as a name is called a <em class="emphasis">directory entry.</em>
</p>
<p>
<a name="INDEX-1568"></a><a name="INDEX-1569"></a><a name="INDEX-1570"></a>

We've been talking about the filesystem as though it were a naming system because that is how Sun's filesystem provider implements it. But if you think about it, a filesystem is really a directory system; files and directories have attributes like permissions, user IDs, and group IDs (we just can't get at these attributes using Sun's filesystem provider). </p>
<p>Most of the directories you'll interact with using JNDI are based on the X.500 directory services standard. For example, both standard LDAP directories and Novell's NDS directories have been influenced by X.500. As such, it is important that you know a little bit about X.500, so that you can understand how these directories work.</p>
<a name="ch06-pgfid-969616"></a>
<h3 class="sect2">6.9.1. X.500 Directories</h3>
<p>X.500 is a directory services standard that was developed through a collaboration between ISO and CCITT in the late 1980s. It is the "big daddy" of most directories in use today. Like all such collaborations between standards bodies and treaty organizations, the X.500 specification has the bulk of an earthmover and is about as maneuverable. But, like an earthmover, it can really get the big jobs done.</p>
<p>
<a name="INDEX-1571"></a><a name="INDEX-1572"></a><a name="INDEX-1573"></a><a name="INDEX-1574"></a>
A large contributor to X.500's bulk is its <em class="emphasis">schema</em>, which is the directory type system. A directory schema is a set of rules that govern the layout of the objects in the directory. The schema determines what classes of objects can reside in a directory system, what classes of children and kinds of attributes an object is permitted to have, and what classes of values those attributes can have. If you have worked with databases, be careful not to confuse a directory schema with a database schema. A database schema is the layout of tables in the database, while a directory schema is the set of rules that control the directory layout, not the layout itself. </p>
<p>
<a name="INDEX-1575"></a><a name="INDEX-1576"></a><a name="INDEX-1577"></a><a name="INDEX-1578"></a>
During the mid 1990s, researchers at the University of Michigan began
  to examine ways of reducing the complexity of the X.500 Directory
  Access Protocol (DAP). These researchers came up with the
  "lightweight" DAP, or LDAP, which significantly slimmed
  down the protocol's bulk. LDAP has gathered considerable
  support in the industry, so that it is now considered the standard
  Internet directory access protocol. Netscape is in part responsible
  for the acceptance of LDAP, as it declared LDAP the preferred method
  for accessing address books incorporated into its product line and
  developed the Netscape Directory Server, which is the most popular
  general-purpose LDAP-based directory server in use today. Note that
  while the LDAP protocol is simpler than the X.500 protocol, an LDAP
  directory still uses a directory schema. </p>
<p>
<a name="INDEX-1579"></a><a name="INDEX-1580"></a><a name="INDEX-1581"></a>
Novell's NDS is another X.500-based directory. In the early
  1990s, Novell released NetWare 4.0, which included something called
  NetWare Directory Services (NDS), a directory that was heavily
  influenced by X.500. NDS provides information about various
  networking services, such as printing and file services. As Novell
  ported NDS to other non-NetWare platforms, the name of the directory
  morphed into Novell Directory Services, and then NDS became its
  official name. As further proof of the acceptance of the LDAP
  protocol, even Novell has declared that the LDAP protocol is the
  preferred directory access protocol for NDS. </p>
<p>
<a name="INDEX-1582"></a><a name="INDEX-1583"></a><a name="INDEX-1584"></a>
JNDI supports the X.500-based notion of a directory schema. But it can
  just as easily support non-X.500 schemae, such as the informal
  schema of a filesystem. Keep in mind that what we are discussing in
  this section applies to all directory services, not just X.500,
  LDAP, or NDS directories. As with naming services, to access a
  particular directory service, all you need is a service provider for
  that service.</p>
<a name="ch06-pgfid-961959"></a>
<h3 class="sect2">6.9.2. The DirContext Interface</h3>
<p>
<a name="INDEX-1585"></a><a name="INDEX-1586"></a><a name="INDEX-1587"></a><tt class="literal">javax.naming.directory.DirContext</tt> is JNDI's
  directory services interface. It extends <tt class="literal">Context</tt>
  and provides modified methods that support operations involving
  attributes. Like a <tt class="literal">Context</tt>, a
  <tt class="literal">DirContext</tt> encapsulates a set of name-to-object
  bindings. In addition, a <tt class="literal">DirContext</tt> contains a
  <tt class="literal">javax.naming.directory.Attributes</tt> object for each
  bound object that holds the attributes and values for that object.</p>
<p>
<a name="INDEX-1588"></a><a name="INDEX-1589"></a>
The names of objects in X.500-based directories look a little
  different from the names we've seen so far for filesystems. If
  you've worked with an LDAP directory, you've probably
  seen names like "cn=Billy Roberts, o=Acme
  Products". This name is actually a compound name, while
  something like "o=Acme Products" is an atomic name. By
  convention, in an LDAP directory, the part of the name before the
  equals sign (e.g., "cn", "o") is stored as
  an attribute of the directory entry, and the rest of the name (e.g.,
  "Billy Roberts", "Acme Products") is stored
  as its value. This attribute is called the <em class="emphasis">key
  attribute</em>. <a href="#ch06-12551">Table 6-2</a> lists some
  commonly used key attributes. Note that when a
  <tt class="literal">DirContext</tt> is used with an LDAP directory, it
  knows its name, unlike a <tt class="literal">Context</tt>.
 <a name="INDEX-1590"></a>
</p>
<a name="ch06-12551"></a>
<h4 class="objtitle">Table 6-2. Common Key Attributes</h4>
<table border="1">
<tr>
<th>
<p>Attribute</p>
</th><th>
<p>Meaning</p>
</th>
</tr>
<tr>
<td>
<p>"c"</p>
</td><td>
<p>A country, such as the United States or Lithuania</p>
</td>
</tr>
<tr>
<td>
<p>"o"</p>
</td><td>
<p>An organization or corporation, such as the Humane Society or Omni Consumer Products </p>
</td>
</tr>
<tr>
<td>
<p>"ou"</p>
</td><td>
<p>A division of an organization, such as the Public Relations Department or the Robotic Peace Officer Division</p>
</td>
</tr>

<tr>
<td>
<p>"cn"</p>
</td><td>
<p>The common name of an entity (often a user, where it can be a first name or a full name)</p>
</td>
</tr>
<tr>
<td>
<p>"sn"</p>
</td><td>
<p>The surname (last name) of a user</p>
</td>
</tr>
</table>
<p>
<a name="INDEX-1591"></a><a name="INDEX-1592"></a><a name="INDEX-1593"></a><a name="INDEX-1594"></a><a name="INDEX-1595"></a><a name="INDEX-1596"></a>
The key attribute is closely tied to the directory entry's
<em class="emphasis">object class definition</em>, otherwise known as its
type. For example, in an LDAP directory, an entry that has a key
attribute of "cn" has an object class of
"user", while the key attribute "o" has an
object class of "organization". The schema for a directory
controls the object classes that can be used in the directory. The
object class of a directory entry is stored as an attribute. Note that
the values used for object classes are directory-dependent, so a user
entry from one directory might have a different object class than a
user entry from another directory even though both have the high-level
notion of a user entry. </p>
<a name="ch06-pgfid-979450"></a>
<h3 class="sect2">6.9.3. The Attributes Interface</h3>
<p>
<a name="INDEX-1597"></a><a name="INDEX-1598"></a><a name="INDEX-1599"></a><a name="INDEX-1600"></a><a name="INDEX-1601"></a>
The <tt class="literal">Attributes</tt> interface represents the set of
attributes for a directory entry. It has accessor methods that enable
access to the entire set, as well as to specific attributes. In
X.500-based directories, the name of an attribute (also called an
attribute ID), such as "name", "address", or
"telephonenumber", determines the type of the attribute
and is called the <em class="emphasis">attribute type definition</em>. An
attribute type definition is part of a directory's schema; the
corresponding <em class="emphasis">attribute syntax definition</em>
specifies the syntax for the attribute's value and whether it
can have multiple values, among other things.</p>
<p>
<a name="INDEX-1602"></a><a name="INDEX-1603"></a>
We can retrieve all the attributes of a directory entry by calling the
<tt class="literal">getAttributes()</tt> method of
<tt class="literal">DirContext</tt>, followed by the
<tt class="literal">getAll()</tt> method of
<tt class="literal">Attributes</tt>. <tt class="literal">getAttributes()</tt>
returns an <tt class="literal">Attributes</tt> object. Calling the
<tt class="literal">getAll()</tt> method of this object returns a
<tt class="literal">NamingEnumeration</tt> of
<tt class="literal">javax.naming.directory.Attribute</tt> objects, one for
each attribute of the directory entry.</p>
<p>
<a href="#ch06-pgfid-982951">Example 6-10</a> shows the implementation of a
<em class="emphasis">listattrs</em> command for
<tt class="literal">NamingShell</tt>. This command prints the attributes of
a directory entry, as well as string representations of the attribute
values.</p>
<a name="ch06-pgfid-982951"></a>
<div class="example">
<h4 class="objtitle">Example 6-10. The listattrs Command</h4>
<blockquote>
<pre class="programlisting">
import java.util.Vector;
import javax.naming.*;
import javax.naming.directory.*;

class listattrs implements Command {
  public void execute(Context c, Vector v) throws CommandException {
        
    String name = "";
        
    // An empty string is OK for a listattrs operation
    // as it means list attributes of the current context
    if (!(v.isEmpty()))
      name = (String)v.firstElement();
        
    if (NamingShell.getCurrentContext() == null)
      throw new CommandException(new Exception(), "No current context");       

    try {
      // Get the Attributes and then get enumeration of Attribute objects
      Attributes attrs = ((DirContext)c).getAttributes(name);
      NamingEnumeration allAttr = attrs.getAll();
      while (allAttr.hasMore()) {
        Attribute attr = (Attribute)allAttr.next();
        System.out.println("Attribute: " + attr.getID());
                
        // Note that this can return human-unreadable garbage
        NamingEnumeration values = attr.getAll();
        while (values.hasMore())
          System.out.println("Value: " + values.next());
      }
    }
    catch (NamingException e) {
      throw new CommandException(e, "Couldn't list attributes of " + name);
    }
    catch (ClassCastException cce) {
      throw new CommandException(cce, "Not a directory context");
    }
  }

  public void help() { System.out.println("Usage: listattrs [name]"); }
}</pre>
</blockquote>
</div>
<p>
<a name="INDEX-1604"></a><a name="INDEX-1605"></a><a name="INDEX-1606"></a><a name="INDEX-1607"></a>
To use the <em class="emphasis">listattrs</em> command, you need to have access to a live directory server. To experiment with a live LDAP directory server, you might try the University of Michigan's server at <a href="../../../../../../../ext.rlab.cs.nyu.edu/~jsr/oreilly/WebStripper/protected.html">ldap://ldap.itd.umich.edu/</a> or Novell's test server at <a href="../../../../../../../ext.rlab.cs.nyu.edu/~jsr/oreilly/WebStripper/protected.html">ldap://nldap.com/</a>. Another option is to download and compile the OpenLDAP source code from <a href="../../../../../../../www.openldap.org/">http://www.openldap.org/</a> and get an LDAP server running on your local network. To use the University of Michigan's LDAP server with <tt class="literal">NamingShell</tt>, you need to create a properties file that contains the following properties:</p>
<blockquote>
<pre class="programlisting">
java.naming.factory.initial=com.sun.jndi.ldap.LdapCtxFactory
java.naming.provider.url=ldap://ldap.itd.umich.edu/</pre>
</blockquote>
<p>Make sure that the JAR file for the LDAP service provider is in the classpath of <tt class="literal">NamingShell</tt> when you use this initial context information. </p>
<p>
<a name="INDEX-1608"></a><a name="INDEX-1609"></a>
Once you have <tt class="literal">NamingShell</tt> set up to use a directory server, here's how you might use the <em class="emphasis">listattrs</em> command:</p>
<blockquote>
<pre class="programlisting">
o=NOVELL% listattrs cn=admin
Attribute: groupMembership
Value: cn=DEVNET SYSOP,ou=Groups,o=NOVELL
Attribute: revision
Value: 235
Attribute: uid
Value: admin
Attribute: objectClass
Value: top
Value: person
Value: organizationalPerson
Value: inetOrgPerson
Attribute: sn
Value: admin
Attribute: cn
Value: admin</pre>
</blockquote>
<p>
<a name="INDEX-1610"></a>
The following code in <tt class="literal">listattrs</tt> retrieves the <tt class="literal">Attributes</tt> object of the named directory context and enumerates the individual <tt class="literal">Attribute</tt> objects:</p>
<blockquote>
<pre class="programlisting">
Attributes attrs = ((DirContext)c).getAttributes(name);
NamingEnumeration allAttr = attrs.getAll();</pre>
</blockquote>
<p>Calling <tt class="literal">getAttributes()</tt> with the name of a directory entry returns an <tt class="literal">Attributes</tt> object that contains all the attributes for that entry. Another variation of <tt class="literal">getAttributes()</tt> allows you to pass the name of a directory entry and an array of attribute names (as <tt class="literal">String</tt> objects). This method returns an <tt class="literal">Attributes</tt> object that contains only the specified attributes. For example:</p>
<blockquote>
<pre class="programlisting">
String[] attrIDs = {"name", "telephonenumber"};
Attributes partialAttrs = dirContext.getAttributes(name, attrIDs); </pre>
</blockquote>
<p>
<a name="INDEX-1611"></a><a name="INDEX-1612"></a><a name="INDEX-1613"></a><a name="INDEX-1614"></a>
In <tt class="literal">listattrs</tt>, we used the
  <tt class="literal">getAll()</tt> method of <tt class="literal">Attributes</tt>
  to return an enumeration of <tt class="literal">Attribute</tt>
  objects. The <tt class="literal">Attributes</tt> interface also provides a
  <tt class="literal">getIDs()</tt> method that returns an enumeration of
  just the attribute names (or IDs) for the directory entry. If you
  know the attribute you want, you can specify the attribute name in a
  call to the <tt class="literal">get()</tt> method, which returns a single
  <tt class="literal">Attribute</tt> object. For example:
<a name="INDEX-1615"></a>
</p>
<blockquote>
<pre class="programlisting">
Attribute addr = attrs.get("address");</pre>
</blockquote>
<a name="ch06-pgfid-964626"></a>
<h3 class="sect2">6.9.4. The Attribute Interface</h3>
<p>
<a name="INDEX-1616"></a><a name="INDEX-1617"></a>
The <tt class="literal">Attribute</tt> interface represents a single
directory attribute. We've already seen this interface in the
<em class="emphasis">listattrs</em> command, where we used it to print the
names and values of all the attributes of a directory context.</p>
<p>
<a name="INDEX-1618"></a>
An attribute can have a single value or multiple values, as specified
  in the schema for the directory. For example, a "name"
  attribute might have a single value (e.g., "Billy"),
  while a "telephonenumber" attribute might have multiple
  values (e.g., "800 555 1212" and "303 444
  6633"). </p>
<p>
<a name="INDEX-1619"></a>
JNDI provides several methods for working with values in an
  attribute. For instance, we can get one or more values, add or
  remove a single value, remove all values, and determine if a
  particular value is present.</p>
<p>
<a name="INDEX-1620"></a>
The <tt class="literal">get()</tt> method of <tt class="literal">Attribute</tt>
returns a single attribute value as a
<tt class="literal">java.lang.Object</tt>. If the attribute has only a
single value, <tt class="literal">get()</tt> returns that value. If the
attribute has multiple values, 
the service provider determines the
value that is returned. The following code shows how to get a single
value from an attribute: </p>
<blockquote>
<pre class="programlisting">
DirContext user ... ;           // Created somewhere else in the program
Attributes attrs = user.getAttributes("");
Attribute attr  = attrs.get("telephonenumber");
Object onePhoneNumber = attr.get();</pre>
</blockquote>
<p>
<a name="INDEX-1621"></a>

The <tt class="literal">getAll()</tt> method returns multiple
attribute values as a <tt class="literal">NamingEnumeration</tt> of objects,
as we saw in <tt class="literal">listattrs</tt>. Here's how to print
all values stored in an attribute:</p>
<blockquote>
<pre class="programlisting">
Attribute attr  = attrs.get("telephonenumber");
NamingEnumeration phoneNumbers = attr.getAll();
while (phoneNumbers.hasMore())
  System.out.println(phoneNumbers.next());</pre>
</blockquote>
<p>
<a name="INDEX-1622"></a>
The <tt class="literal">add()</tt> method of <tt class="literal">Attribute</tt> enables us to add another value to an attribute:</p>
<blockquote>
<pre class="programlisting">
Attribute attr = attrs.get("telephonenumber"); 
attr.add("520 765 4321");       // Add a new number</pre>
</blockquote>
<p>
<a name="INDEX-1623"></a>

If we try to add a value to an attribute that doesn't support multiple values, the method does not throw an exception. The attribute simply does not accept the new value. By the same token, you can use the <tt class="literal">remove()</tt> method to remove a value from an attribute.</p>
<blockquote>
<pre class="programlisting">
Attribute attr = attrs.get("telephonenumber");
attr.remove("303 444 6633");      // Remove the old number</pre>
</blockquote>
<p>
<a name="INDEX-1624"></a><a name="INDEX-1625"></a>

To remove all the values from an attribute, you can call the <tt class="literal">clear()</tt> method. Note that none of these method calls actually affect the directory entry; they simply modify the local <tt class="literal">Attribute</tt> object. To make a permanent change, you have to call the <tt class="literal">modifyAttributes()</tt> method of <tt class="literal">DirContext</tt> and provide it with a modified <tt class="literal">Attribute</tt> object, as discussed in the next section.</p>
<p>
<a name="INDEX-1626"></a><a name="INDEX-1627"></a>

The <tt class="literal">contains()</tt> method lets you determine whether an attribute has a certain value, while <tt class="literal">size()</tt> returns the number of values the attribute has:</p>
<blockquote>
<pre class="programlisting">
Attribute attr = attrs.get("telephonenumber"); 
boolean itsThere = attr.contains("800 555 1212");  // Check for certain value 
int valuesItHas = attr.size();  // Check how many values it has</pre>
</blockquote>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch06_08.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch06_10.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch06_10.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">6.8. Binding Objects</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">6.10. Modifying Directory Entries</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
