<html>
<head>
<title>Results (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Results">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_01.htm">Chapter 2: JDBC</a></td><td align="right" valign="top" width="172"><a href="ch02_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">2.6. Results</h2>
<p>
<a name="INDEX-202"></a><a name="INDEX-203"></a>
When a SQL query executes, the results form a pseudo-table that contains all rows that fit the query parameters. For instance, here's a textual representation of the results of the query string "SELECT NAME, CUSTOMER_ID, PHONE FROM CUSTOMERS":</p>
<blockquote>
<pre class="programlisting">
<tt class="computeroutput">NAME                             CUSTOMER_ID PHONE</tt>
<tt class="computeroutput">-------------------------------- ----------- -------------------</tt>
<tt class="computeroutput">Jane Markham                               1 617 555-1212</tt>
<tt class="computeroutput">Louis Smith                                2 617 555-1213</tt>
<tt class="computeroutput">Woodrow Lang                               3 508 555-7171</tt>
<tt class="computeroutput">Dr. John Smith                             4 (011) 42 323-1239</tt>
</pre>
</blockquote>
<p>
<a name="INDEX-204"></a><a name="INDEX-205"></a><a name="INDEX-206"></a><a name="INDEX-207"></a><a name="INDEX-208"></a>

This kind of textual representation is not very useful for Java
programs. Instead, JDBC uses the <tt class="literal">java.sql.ResultSet</tt>
interface to encapsulate the query results as Java primitive types and
objects. You can think of a <tt class="literal">ResultSet</tt> as an object
that represents an underlying table of query results, where you use
method calls to navigate between rows and retrieve particular column
values. </p>
<p>A Java program might handle the previous query as follows:</p>
<blockquote>
<pre class="programlisting">
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery(
  "SELECT NAME, CUSTOMER_ID, PHONE FROM CUSTOMERS");

while(rs.next()) {
  System.out.print("Customer #" + rs.getString("CUSTOMER_ID"));
  System.out.print(", " + rs.getString("NAME"));
  System.out.println(", is at " + rs.getString("PHONE");
}
rs.close();
stmt.close();</pre>
</blockquote>
<p>Here's the resulting output:</p>
<blockquote>
<pre class="programlisting">
<tt class="computeroutput">Customer #1, Jane Markham, is at 617 555-1212</tt>
<tt class="computeroutput">Customer #2, Louis Smith, is at 617 555-1213</tt>
<tt class="computeroutput">Customer #3, Woodrow Lang, is at 508 555-7171</tt>
<tt class="computeroutput">Customer #4, Dr. John Smith, is at (011) 42 323-1239</tt>
</pre>
</blockquote>
<p>
<a name="INDEX-209"></a>
The code loops through each row of the
<tt class="literal">ResultSet</tt> using the <tt class="literal">next()</tt>method. When you start working with a
<tt class="literal">ResultSet</tt>, you are positioned before the first row
of results. That means you have to call <tt class="literal">next()</tt> once
just to access the first row. Each time you call
<tt class="literal">next()</tt>, you move to the next row. If there are no
more rows to read, <tt class="literal">next()</tt> returns
<a name="INDEX-210"></a><a name="INDEX-211"></a><tt class="literal">false</tt>. Note that with the JDBC 1.0
<tt class="literal">ResultSet</tt>, you can only move forward through the
results and, since there is no way to go back to the beginning, you
can read them only once. The JDBC 2.0 <tt class="literal">ResultSet</tt>,
which we discuss later, overcomes these limitations.</p>
<p>
<a name="INDEX-212"></a><a name="INDEX-213"></a><a name="INDEX-214"></a>
Individual column values are read using the
<tt class="literal">getString()</tt> method. <tt class="literal">getString()</tt>
is one of a family of <tt class="literal">getXXX()</tt> methods, each of
which returns data of a particular type. There are two versions of
each <tt class="literal">getXXX()</tt> method: one that takes the
case-insensitive <tt class="literal">String</tt> name of the column to be
read (e.g., <tt class="literal">"PHONE"</tt>,
<tt class="literal">"CUSTOMER_ID"</tt>) and one that takes a SQL-style
column index. Note that column indexes run from 1 to
<em class="emphasis">n</em>, unlike Java array indexes, 


which run from 0 to
<em class="emphasis">n</em>-1, where <em class="emphasis">n</em> is the number
of columns.</p>
<p>
The most important <tt class="literal">getXXX() </tt>method is
<tt class="literal">getObject()</tt>, which can return any kind of data
packaged in an object wrapper. For example, calling<tt class="literal">getObject()</tt> on an integer field returns an
<tt class="literal">Integer</tt> object, while calling it on a date field
yields a <tt class="literal">java.sql.Date</tt> object. <a href="#ch02-pgfid-726867">Table 2-1</a> lists the
<a name="INDEX-215"></a><a name="INDEX-216"></a>
different <tt class="literal">getXXX()</tt> methods, along with the
corresponding SQL data type and Java data type. Where the return type
for a <tt class="literal">getXXX()</tt> method is different from the Java
type, the return type is shown in parentheses. Note that the
<a name="INDEX-217"></a><tt class="literal">java.sql.Types</tt> class defines integer constants that
represent the standard SQL data types.</p>
<a name="ch02-pgfid-726867"></a>
<h4 class="objtitle">Table 2-1. SQL Data Types, Java Types, and Default getXXX( ) Methods </h4>
<table border="1">
<tr>
<th>
<p>SQL Data Type</p>
</th><th>
<p>Java Type</p>
</th><th>
<p>GetXXX( ) Method</p>
</th>
</tr>
<tr>
<td>
<p>
<tt class="literal">CHAR</tt>
</p>
</td><td>
<p>
<tt class="literal">String</tt>
</p>
</td><td>
<p>
<tt class="literal">getString()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">VARCHAR</tt>
</p>
</td><td>
<p>
<tt class="literal">String</tt>
</p>
</td><td>
<p>
<tt class="literal">getString()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">LONGVARCHAR</tt>
</p>
</td><td>
<p>
<tt class="literal">String</tt>
</p>
</td><td>
<p>
<tt class="literal">getString()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">NUMERIC</tt>
</p>
</td><td>
<p>
<tt class="literal">java.math.BigDecimal</tt>
</p>
</td><td>
<p>
<tt class="literal">getBigDecimal()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">DECIMAL</tt>
</p>
</td><td>
<p>
<tt class="literal">java.math.BigDecimal</tt>
</p>
</td><td>
<p>
<tt class="literal">getBigDecimal()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">BIT</tt>
</p>
</td><td>
<p>
<tt class="literal">Boolean (boolean)</tt>
</p>
</td><td>
<p>
<tt class="literal">getBoolean()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">TINYINT</tt>
</p>
</td><td>
<p>
<tt class="literal">Integer (byte)</tt>
</p>
</td><td>
<p>
<tt class="literal">getByte()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SMALLINT</tt>
</p>
</td><td>
<p>
<tt class="literal">Integer (short)</tt>
</p>
</td><td>
<p>
<tt class="literal">getShort()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">INTEGER</tt>
</p>
</td><td>
<p>
<tt class="literal">Integer (int)</tt>
</p>
</td><td>
<p>
<tt class="literal">getInt()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">BIGINT</tt>
</p>
</td><td>
<p>
<tt class="literal">Long (long)</tt>
</p>
</td><td>
<p>
<tt class="literal">getLong()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">REAL</tt>
</p>
</td><td>
<p>
<tt class="literal">Float (float)</tt>
</p>
</td><td>
<p>
<tt class="literal">getFloat()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">FLOAT</tt>
</p>
</td><td>
<p>
<tt class="literal">Double (double)</tt>
</p>
</td><td>
<p>
<tt class="literal">getDouble()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">DOUBLE</tt>
</p>
</td><td>
<p>
<tt class="literal">Double (double)</tt>
</p>
</td><td>
<p>
<tt class="literal">getDouble()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">BINARY</tt>
</p>
</td><td>
<p>
<tt class="literal">byte[]</tt>
</p>
</td><td>
<p>
<tt class="literal">getBytes()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">VARBINARY</tt>
</p>
</td><td>
<p>
<tt class="literal">byte[]</tt>
</p>
</td><td>
<p>
<tt class="literal">getBytes()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">LONGVARBINARY</tt>
</p>
</td><td>
<p>
<tt class="literal">byte[]</tt>
</p>
</td><td>
<p>
<tt class="literal">getBytes()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">DATE</tt>
</p>
</td><td>
<p>
<tt class="literal">java.sql.Date</tt>
</p>
</td><td>
<p>
<tt class="literal">getDate()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">TIME</tt>
</p>
</td><td>
<p>
<tt class="literal">java.sql.Time</tt>
</p>
</td><td>
<p>
<tt class="literal">getTime()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">TIMESTAMP</tt>
</p>
</td><td>
<p>
<tt class="literal">java.sql.Timestamp</tt>
</p>
</td><td>
<p>
<tt class="literal">getTimestamp()</tt>
</p>
</td>
</tr>
</table>
<p>Note that this table merely lists the default mappings according
to the JDBC specification, and some drivers do not follow these
mappings exactly. Also, a certain amount of casting is permitted. For
instance, the <tt class="literal">getString()</tt> method returns a
<tt class="literal">String</tt> representation of just about any data
type.</p>

<a name="ch02-pgfid-270624"></a>
<h3 class="sect2">2.6.1. Handling Nulls</h3>
<p>
<a name="INDEX-218"></a><a name="INDEX-219"></a><a name="INDEX-220"></a>
Sometimes database columns contain <tt class="literal">null</tt>, or
empty, values. However, because of the way certain database APIs are
written, it is impossible for JDBC to provide a method to determine
before the fact whether or not a column is
<tt class="literal">null</tt>.<a href="#FOOTNOTE-2">[2]</a> Methods that don't return an object of some sort are
especially vulnerable. <tt class="literal">getInt()</tt>, for instance,
resorts to returning a value of -<tt class="literal">1</tt>. JDBC deals with
<a name="INDEX-223"></a>
this problem via the <tt class="literal">wasNull()</tt> method, which
indicates whether or not the last column read was
<tt class="literal">null</tt>:</p>
<blockquote class="footnote">
<a name="FOOTNOTE-2"></a>
<p>[2]<a name="INDEX-221"></a>
The driver can figure this out after reading the object, but
since some driver implementations and database connection protocols
allow you to reliably read a value from a column only once,
<a name="INDEX-222"></a>
implementing an <tt class="literal">isNull()</tt> method requires the
<tt class="literal">ResultSet</tt> to cache the entire row in memory. While
many programs do exactly this, it is not appropriate behavior for the
lowest-level result handler.</p>
</blockquote>
<blockquote>
<pre class="programlisting">
int numberInStock = rs.getInt("STOCK");
if(rs.wasNull())
  System.out.println("Result was null");
else
  System.out.println("In Stock: " + numberInStock);</pre>
</blockquote>
<p>Alternately, you can call <tt class="literal">getObject()</tt> and
test to see if the result is <tt class="literal">null</tt>:<a href="#FOOTNOTE-3">[3]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-3"></a>
<p>[3]Some drivers, including early versions of Oracle's JDBC drivers, don't properly support this behavior.</p>
</blockquote>
<blockquote>
<pre class="programlisting">Object numberInStock = rs.getObject("STOCK");
if(numberInStock == null)
  System.out.println("Result was null");</pre>
</blockquote>
<a name="ch02-pgfid-270647"></a>
<h3 class="sect2">2.6.2. Large Data Types</h3>
<p>
<a name="INDEX-224"></a><a name="INDEX-225"></a><a name="INDEX-226"></a><a name="INDEX-227"></a><a name="INDEX-228"></a><a name="INDEX-229"></a>
You can retrieve large chunks of data from a
<tt class="literal">ResultSet</tt> as a stream. This can be useful when
reading images from a database or loading large documents from a data
store, for example. The relevant <tt class="literal">ResultSet</tt> methods are <tt class="literal">getAsciiStream()</tt>, <tt class="literal">getBinaryStream()</tt>, and
<tt class="literal">getUnicodeStream()</tt>, where each method has column
name and column index variants, just like the other
<tt class="literal">getXXX()</tt> methods. Each of these methods returns an
<tt class="literal">InputStream</tt>. Here's a code sample that retrieves an
image from a <tt class="literal">PICTURES</tt> table and writes the image to
an <tt class="literal">OutputStream</tt> of some kind (this might be a
<tt class="literal">ServletOutputStream</tt> for a Java servlet that
produces a GIF from a database):</p>
<blockquote>
<pre class="programlisting">
ResultSet rs =
  stmt.executeQuery("SELECT IMAGE FROM PICTURES WHERE PID = " +
                     req.getParameter("PID"));

if (rs.next()) {
  BufferedInputStream gifData =
    new BufferedInputStream(rs.getBinaryStream("IMAGE"));
  byte[] buf = new byte[4 * 1024];  // 4K buffer
  int len;
  while ((len = gifData.read(buf, 0, buf.length)) != -1) {
    out.write(buf, 0, len);
  }
}</pre>
</blockquote>
<p>
<a name="INDEX-230"></a><a name="INDEX-231"></a><a name="INDEX-232"></a><a name="INDEX-233"></a><a name="INDEX-234"></a>
The JDBC 2.0 API includes <tt class="literal">Blob</tt> and <tt class="literal">Clob</tt> objects to handle large data types; we discuss these objects later in this chapter.</p>
<a name="ch02-pgfid-270679"></a>
<h3 class="sect2">2.6.3. Dates and Times</h3>
<p>
<a name="INDEX-235"></a><a name="INDEX-236"></a><a name="INDEX-237"></a><a name="INDEX-238"></a><a name="INDEX-239"></a>

JDBC defines three classes devoted to storing date and time information:
 <tt class="literal">java.sql.Date</tt>, <tt class="literal">java.sql.Time</tt>, and <tt class="literal">java.sql.Timestamp</tt>. These correspond to the SQL <tt class="literal">DATE</tt>, <tt class="literal">TIME</tt>, and <tt class="literal">TIMESTAMP</tt> types. The <tt class="literal">java.util.Date</tt> class is not suitable for any of them, so JDBC defines a new set of wrapper classes that extend (or limit) the standard <tt class="literal">Date</tt> class to fit the JDBC mold.</p>
<p>The SQL <tt class="literal">DATE</tt> type contains only a date, so the <tt class="literal">java.sql.Date</tt> class contains only a day, month, and year. SQL <tt class="literal">TIME</tt> (<tt class="literal">java.sql.Time)</tt> includes only a time of day, without date information. SQL <tt class="literal">TIMESTAMP</tt> (<tt class="literal">java.sql.Timestamp</tt>) includes both, but at nanosecond precision (the standard <tt class="literal">Date</tt> class is incapable of handling more than milliseconds). </p>
<p>Since different DBMS packages have different methods of encoding date and
<a name="INDEX-240"></a><a name="INDEX-241"></a>
 time information, JDBC supports the ISO date escape sequences, and individual drivers are required to translate these sequences into whatever form the underlying DBMS requires. The syntax for dates, times, and timestamps is:</p>
<blockquote>
<pre class="programlisting">
{d '<em class="replaceable">yyyy</em>-<em class="replaceable">mm</em>-<em class="replaceable">dd</em>'}
{t '<em class="replaceable">hh</em>:<em class="replaceable">mm</em>:<em class="replaceable">ss</em>'}
{ts '<em class="replaceable">yyyy</em>-<em class="replaceable">mm</em>-<em class="replaceable">dd</em> <em class="replaceable">hh</em>:<em class="replaceable">mm</em>:<em class="replaceable">ss</em>.<em class="replaceable">ms</em>.<em class="replaceable">microseconds</em>.<em class="replaceable">ns</em>'}</pre>
</blockquote>
<p>A <tt class="literal">TIMESTAMP</tt> only needs to be specified up to
seconds; the remaining values are optional. Here is an example that uses a date
 escape sequence (where <tt class="literal">dateSQL</tt> is a <tt class="literal">Statement</tt> of some sort):
<a name="INDEX-242"></a>
</p>
<blockquote>
<pre class="programlisting">
dateSQL.execute("INSERT INTO FRIENDS(BIRTHDAY) VALUES ({d '1978-12-14'})");</pre>
</blockquote>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.5. Statements</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.7. Handling Errors</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
