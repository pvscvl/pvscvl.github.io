<html>
<head>
<title>Metadata (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Metadata">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_08.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_01.htm">Chapter 2: JDBC</a></td><td align="right" valign="top" width="172"><a href="ch02_10.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_10.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">2.9. Metadata</h2>
<p>
<a name="INDEX-283"></a><a name="INDEX-284"></a><a name="INDEX-285"></a><a name="INDEX-286"></a>
Most JDBC programs are designed to work with a specific database
and particular tables in that database; the program knows exactly what
kind of data it is dealing with. Some applications, however, need to
dynamically discover information about result set structures or
underlying database configurations. This information is called
<em class="emphasis">metadata</em>, and JDBC provides two classes for
<a name="INDEX-287"></a><a name="INDEX-288"></a>
dealing with it: <tt class="literal">DatabaseMetaData</tt> and
<tt class="literal">ResultSetMetaData</tt>. If you are developing a JDBC
application that will be deployed outside a known environment, you
need to be familiar with these interfaces.</p>
<a name="ch02-pgfid-270813"></a>
<h3 class="sect2">2.9.1. DatabaseMetaData</h3>
<p>
<a name="INDEX-289"></a>
You can retrieve general information about the structure of a
database with the <tt class="literal">java.sql.DatabaseMetaData</tt>
interface. By making thorough use of this class, a program can tailor
its SQL and use of JDBC on the fly, to accommodate different levels of
database and JDBC driver support.
<a name="INDEX-290"></a>
</p>
<p>
<a name="INDEX-291"></a>
Database metadata is associated with a particular connection, so
<tt class="literal">DatabaseMetaData</tt> objects are created with the
<tt class="literal">getMetaData()</tt> method of <tt class="literal">Connection</tt>:</p>
<blockquote>
<pre class="programlisting">
DatabaseMetaData dbmeta = con.getMetaData();</pre>
</blockquote>
<p>
<a name="INDEX-292"></a><a name="INDEX-293"></a><a name="INDEX-294"></a><a name="INDEX-295"></a><a name="INDEX-296"></a><a name="INDEX-297"></a><tt class="literal">DatabaseMetaData</tt> provides an overwhelming
number of methods you can call to get actual configuration information
about the database. Some of these return <tt class="literal">String</tt>
objects (<tt class="literal">getURL()</tt>), some return
<tt class="literal">boolean</tt> values
(<tt class="literal">nullsAreSortedHigh()</tt>), and still others return
integers (<tt class="literal">getMaxConnections()</tt>). The full list is
given in <a href="ch17_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch17_01.htm">Chapter 17, "The java.rmi.server Package"</a>.</p>
<p>
<a name="INDEX-298"></a><a name="INDEX-299"></a><a name="INDEX-300"></a>
A number of other methods return <tt class="literal">ResultSet</tt>
objects. These methods, such as <tt class="literal">getColumns()</tt>,
<tt class="literal">getTableTypes()</tt>, and
<tt class="literal">getPrivileges()</tt>, generally encapsulate complex or
variable-length information. The <tt class="literal">getTables()</tt>
method, for instance, returns a <tt class="literal">ResultSet</tt> that
contains the name of every table in the database and a good deal of
extra information besides. </p>
<p>
<a name="INDEX-301"></a><a name="INDEX-302"></a>
Many of the <tt class="literal">DatabaseMetaData</tt> methods take
string patterns as arguments, allowing for simple wildcard
searching. A percent sign (<tt class="literal">%</tt>) substitutes for any
number of characters, and an underscore (<tt class="literal"> _ </tt>) calls
for a single character match. Thus, <tt class="literal">%CUSTOMER%</tt>
matches <tt class="literal">NEW_CUSTOMERS</tt>, <tt class="literal">CUSTOMER</tt>,
and <tt class="literal">CUSTOMERS</tt>, while <tt class="literal">CUSTOMER%</tt>
matches only <tt class="literal">CUSTOMER</tt> and
<tt class="literal">CUSTOMERS</tt>. All of these patterns are case-sensitive. </p>
<p>
<a href="#ch02-pgfid-726157">Example 2-2</a> shows a simple program that displays some basic
database characteristics, a list of tables, and a list of indexes on
each table. The program assumes a JDBC driver with full support for
all the <tt class="literal">DatabaseMetaData</tt> commands.</p>
<a name="ch02-pgfid-726157"></a>
<div class="example">
<h4 class="objtitle">Example 2-2. DBViewer Program </h4>
<blockquote>
<pre class="programlisting">
import java.sql.*;
import java.util.StringTokenizer;

public class DBViewer {

  final static String jdbcURL = "jdbc:odbc:customerdsn";
  final static String jdbcDriver = "sun.jdbc.odbc.JdbcOdbcDriver";

  public static void main(java.lang.String[] args) {

    System.out.println("--- Database Viewer ---");
   
    try {
      Class.forName(jdbcDriver);
      Connection con = DriverManager.getConnection(jdbcURL, "", "");

      DatabaseMetaData dbmd = con.getMetaData();

      System.out.println("Driver Name: " + dbmd.getDriverName());
      System.out.println("Database Product: " + dbmd.getDatabaseProductName());
      System.out.println("SQL Keywords Supported:");
      StringTokenizer st = new StringTokenizer(dbmd.getSQLKeywords(), ",");
      while(st.hasMoreTokens())
        System.out.println(" " + st.nextToken());
 
      // Get a ResultSet that contains all of the tables in this database
      // We specify a table_type of "TABLE" to prevent seeing system tables,
      // views and so forth
      String[] tableTypes = { "TABLE" };
      ResultSet allTables = dbmd.getTables(null,null,null,tableTypes);
      while(allTables.next()) {
        String table_name = allTables.getString("TABLE_NAME");
        System.out.println("Table Name: " + table_name);
        System.out.println("Table Type: " + allTables.getString("TABLE_TYPE"));
        System.out.println("Indexes: ");

        // Get a list of all the indexes for this table
        ResultSet indexList = dbmd.getIndexInfo(null,null,table_name,false,false);
        while(indexList.next()) {
          System.out.println(" Index Name: "+indexList.getString("INDEX_NAME"));
          System.out.println(" Column Name:"+indexList.getString("COLUMN_NAME"));
        }
        indexList.close(); 
      }

      allTables.close();
      con.close();
    } 
    catch (ClassNotFoundException e) {
      System.out.println("Unable to load database driver class");
    }
    catch (SQLException e) {
      System.out.println("SQL Exception: " + e.getMessage());
    }
  }
}</pre>
</blockquote>
</div>
<p>
<a name="INDEX-303"></a><a name="INDEX-304"></a><a name="INDEX-305"></a>
Here's some sample output when this program is run against a Microsoft Access database via the JDBC-ODBC bridge (snipped slightly to prevent several pages of uninteresting text):</p>
<blockquote>
<pre class="programlisting">
<tt class="computeroutput">--- Database Viewer ---</tt>
<tt class="computeroutput">Driver Name: JDBC-ODBC Bridge (odbcjt32.dll)</tt>
<tt class="computeroutput">Database Product: ACCESS</tt>
<tt class="computeroutput">SQL Keywords Supported:</tt>
<tt class="computeroutput"> ALPHANUMERIC</tt>
<tt class="computeroutput"> AUTOINCREMENT</tt>
<tt class="computeroutput"> BINARY</tt>
<tt class="computeroutput"> BYTE</tt>
<tt class="computeroutput"> FLOAT8</tt>
<tt class="computeroutput"> ...</tt>
<tt class="computeroutput">Table Name: Customers</tt>
<tt class="computeroutput">Table Type: TABLE</tt>
<tt class="computeroutput">Indexes: </tt>
<tt class="computeroutput"> Index Name: PrimaryKey</tt>
<tt class="computeroutput"> Column Name:CustNo</tt>
<tt class="computeroutput"> Index Name: AddressIndex</tt>
<tt class="computeroutput"> Column Name:Address</tt>
<tt class="computeroutput"> ...</tt>
</pre>
</blockquote>
<a name="ch02-pgfid-270981"></a>
<h3 class="sect2">2.9.2. ResultSetMetaData</h3>
<p>
<a name="INDEX-306"></a>
The <tt class="literal">ResultSetMetaData</tt> interface provides information about the structure of a particular <tt class="literal">ResultSet</tt>. Data provided by <tt class="literal">ResultSetMetaData</tt> includes the number of available columns, the names of those columns, and the kind of data available in each. <a href="#ch02-pgfid-726491">Example 2-3</a> shows a short program that displays the contents of a table and shows the data type for each column.
<a name="INDEX-307"></a>
</p>
<a name="ch02-pgfid-726491"></a>
<div class="example">
<h4 class="objtitle">Example 2-3. TableViewer Program </h4>
<blockquote>
<pre class="programlisting">
import java.sql.*;
import java.util.StringTokenizer;

public class TableViewer {

  final static String jdbcURL = "jdbc:oracle:customerdb";
  final static String jdbcDriver = "oracle.jdbc.OracleDriver";
  final static String table = "CUSTOMERS";

  public static void main(java.lang.String[] args) {
 
    System.out.println("--- Table Viewer ---");
   
    try {
      Class.forName(jdbcDriver);
      Connection con = DriverManager.getConnection(jdbcURL, "", "");
      Statement stmt = con.createStatement();
      ResultSet rs = stmt.executeQuery("SELECT * FROM "+ table);

      ResultSetMetaData rsmd = rs.getMetaData();
      int columnCount = rsmd.getColumnCount();
      for(int col = 1; col &lt;= columnCount; col++) {
        System.out.print(rsmd.getColumnLabel(col));
        System.out.print(" (" + rsmd.getColumnTypeName(col)+")");
        if(col &lt; columnCount) 
          System.out.print(", ");
      }
      System.out.println();
  
      while(rs.next()) {
        for(int col = 1; col &lt;= columnCount; col++) {
          System.out.print(rs.getString(col));
          if(col &lt; columnCount) 
            System.out.print(", ");
        } 
        System.out.println();
      }  
 
      rs.close();
      stmt.close();
      con.close();
    }
    catch (ClassNotFoundException e) {
      System.out.println("Unable to load database driver class");
    }
    catch (SQLException e) {
      System.out.println("SQL Exception: " + e.getMessage());
    }
  }
}</pre>
</blockquote>
</div>
<p>
<a name="INDEX-308"></a><a name="INDEX-309"></a><a name="INDEX-310"></a>
The key methods used here are <tt class="literal">getColumnCount()</tt>,
<tt class="literal">getColumnLabel()</tt>, and
<tt class="literal">getColumnTypeName()</tt>. Note that type names returned
by <tt class="literal">getColumnTypeName()</tt> are database-specific (e.g.,
Oracle refers to a string value as a <tt class="literal">VARCHAR</tt>;
Microsoft Access calls it <tt class="literal">TEXT)</tt>. Here's some sample
output for <tt class="literal">TableViewer</tt>:</p>
<blockquote>
<pre class="programlisting">
<tt class="computeroutput">--- Table Viewer ---</tt>
<tt class="computeroutput">CustNo (SHORT), CustName (VARCHAR), CustAddress (VARCHAR)</tt>
<tt class="computeroutput">1, Jane Markham, 12 Stevens St</tt>
<tt class="computeroutput">2, Louis Smith, 45 Morrison Lane</tt>
<tt class="computeroutput">3, Woodrow Lang, 4 Times Square</tt>
</pre>
</blockquote>
<a name="INDEX-311"></a>
<a name="INDEX-312"></a>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_08.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_10.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_10.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.8. Prepared Statements</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.10. Transactions</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
