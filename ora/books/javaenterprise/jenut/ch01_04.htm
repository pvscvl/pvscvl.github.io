<html>
<head>
<title>Enterprise Computing Scenarios (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Enterprise Computing Scenarios">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch01_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch01_01.htm">Chapter 1: Introduction</a></td><td align="right" valign="top" width="172"><a href="ch01_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch01_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">1.4. Enterprise Computing Scenarios</h2>
<p>      The previous sections have been rapid-fire introductions to the Java
      Enterprise APIs.  Don't worry if you didn't understand all the
      information presented there: the rest of the chapters in this Part
      cover the APIs in more detail.  The important message you should 
      take from this chapter is that the Java Enterprise APIs are
      building blocks that work together to enable you to write
      distributed Java applications for enterprise computing.  The
      network infrastructure of every enterprise is unique, and the Java
      Enterprise APIs can be combined in any number of ways to meet the
      specific needs and goals of a particular enterprise.
    </p>
<p>
<a href="#jenut-ch01-fig-1">Figure 1-1</a> shows a network schematic for a hypothetical
<a name="INDEX-101"></a>
      enterprise.  It illustrates some of the many possible interconnections
<a name="INDEX-102"></a><a name="INDEX-103"></a>
      among network services and shows the Java Enterprise APIs that
      facilitate those interconnections.  The figure is followed by
      example scenarios that demonstrate how the Java Enterprise APIs
      might be used to solve typical enterprise computing problems.  You
      may find it useful to refer to <a href="#jenut-ch01-fig-1">Figure 1-1</a> while reading through
      the scenarios, but note that the figure does not illustrate the
      specific scenarios presented here. 
    </p>
<a name="jenut-ch01-fig-1"></a>
<div class="figure">
<img alt="figure" src="figs/Jent.0101.gif" webstripperlinkwas="figs/Jent.0101.gif"></div>
<h4 class="objtitle">Figure 1-1. 	The distributed computing architecture of a hypothetical enterprise
      </h4>
<h3 class="sect2">1.4.1. Enabling E-Commerce for a Mail-Order Enterprise</h3>
<p>	CornCo Inc. runs a successful catalog-based mail-order business
<a name="INDEX-104"></a><a name="INDEX-105"></a>
	selling fresh flavored popcorn.  They want to expand into the
	exciting world of electronic commerce over the Internet.  Here's
	how they might do it:<a href="#FOOTNOTE-2">[2]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-2"></a>
<p>[2]This example is intended to
	illustrate only how the Java Enterprise APIs can be used together.  I
	have ignored efficiency considerations, so the resulting design
	might not actually be practical for a large-scale e-commerce web
	site.</p>
</blockquote>

	<ul>
<li>
<p>	      A customer visits the company's web site,
	      <em class="emphasis">www.cornco.com</em>, and uses a web
	      browser to interact with the company's web server.  This
	      allows the customer to view the company's products and
	      make selections to purchase.
	    </p>
</li>
<li>
<p>	      The web server uses a shopping-cart servlet to keep
<a name="INDEX-106"></a><a name="INDEX-107"></a>
	      track of the products the customer has chosen to buy.
	      The HTTP protocol is itself stateless, but servlets can
<a name="INDEX-108"></a><a name="INDEX-109"></a>
	      persist
	      between client requests, so this shopping-cart servlet
	      can remember the customer's selections even while the
	      customer continues to browse the web site.
	    </p>
</li>
<li>
<p>	      When the customer is done browsing and is ready to
	      purchase the selected products, the web server invokes a
	      different checkout servlet.  This servlet performs a
	      number of important tasks, using several Enterprise APIs.
	    </p>
</li>
<li>
<p>	      The checkout servlet uses JDBC to retrieve the list of 
	      products to be purchased (stored in a
	      database by the shopping-cart servlet).
	    </p>
</li>
<li>
<p>	      Next, the servlet
	      queries the customer for a shipping address, a
	      billing address, and other required information, and
	      then uses JDBC again to store this information in a
	      customer database.  This database can be used, for
	      example, by the CornCo marketing department for
	      direct mail purposes.
	    </p>
</li>
<li>
<p>	      The servlet then sends the customer's billing address
	      and total purchase price to the billing server.  This
	      server is a legacy application, specific to
	      CornCo, that has a nonstandard interface.
	      Fortunately, however, the billing server exports itself
	      as a CORBA object, so the servlet can treat the entire
	      server as a CORBA remote object and invoke
	      the necessary methods on it.
	    </p>
</li>
<li>
<p>	      In order to ensure the very freshest product,
	      CornCo maintains warehouses throughout the world.
	      CornCo is a growing company, so the list of warehouses
	      is frequently updated.  The checkout servlet uses JNDI
	      to contact a directory server and then uses the directory
	      server to find a warehouse that is close to the
	      customer and has the customer's requested products in
	      stock. 
	    </p>
</li>
<li>
<p>	      Having located a warehouse that can fulfill the
	      customer's order, the checkout servlet uses JMS to
	      contact the company's enterprise messaging service.
	      It uses this service to send the customer's order to
	      the selected warehouse in the form of a message.
	      This message is delivered to and queued up on
	      the local computer at the warehouse.
	    </p>
</li>
</ul>


<h3 class="sect2">1.4.2. Updating CornCo with Enterprise JavaBeans</h3>
<p>	You may have noticed a flaw in the previous scenario.  The
<a name="INDEX-110"></a>
	checkout servlet sends billing information to one server, and
	then sends fulfillment information to another server.  But it
	performs these two actions independently, without any attempt to
	maintain transactional integrity and make them behave
	atomically.  In other words, if a network failure or server crash were
	to occur after the billing information had been sent, but before
	the fulfillment information had been sent, the customer
	might receive a bill for popcorn that was never shipped.
      </p>
<p>	The designers of the e-commerce system described in the previous
	section were
	aware of this problem, but since distributed transactions are
	complex, and CornCo did not own a transaction management
	server, they simply chose to ignore it.  In practice, the number
	of customers who would have problems would be small, and it was
	easier for the original programmers to let the customer service
	department sort out any irregularities.  
      </p>
<p>	But now, CornCo has hired a new Vice President of Information
	Systems.  She's tough as nails, and likes all her i's dotted and
	her t's crossed.  She won't stand for this sloppy state of
	affairs. As her first official act as VP, she buys a
	high-end application server with Enterprise JavaBeans
	support and gives her e-commerce team the job of revamping the
	online ordering system to use it.  The modified design might work
	like this:
      </p>
<ul>
<li>
<p>	    The customer interacts with the web server and the shopping-cart servlet in the same way as before.
	  </p>
</li>
<li>
<p>	    The checkout servlet is totally rewritten.  Now it is
	    merely a frontend for an Enterprise JavaBeans component
	    that handles
	    the interactions with the ordering and fulfillment servers
	    and with the marketing database.  The servlet uses JNDI to
	    look up the enterprise bean, and then uses RMI to invoke
<a name="INDEX-111"></a>
	    methods on the bean (recall that all enterprise beans are
	    RMI remote objects).
	  </p>
</li>
<li>
<p>	    The major functionality of the checkout servlet is moved to
	    a new checkout bean.  The bean stores customer data in the
	    marketing database using JDBC, sends billing information to
	    the billing server using CORBA, looks up a warehouse using
	    JNDI, and sends shipping information to the warehouse using
	    JMS.  The bean does not explicitly coordinate all these
	    activities into a distributed transaction, however.  Instead, when
	    the bean is deployed within the EJB server, the system
	    administrator configures the bean so that the server
	    automatically wraps a distributed transaction around all of
	    its actions.  That is, when the
	    <tt class="literal">checkout()</tt> method of the bean is called,
	    it always behaves as an atomic operation.
	  </p>
</li>
<li>
<p>	    In order for this automatic distributed transaction
	    management to work, another change is required in the
	    conversion from checkout servlet to checkout bean.  The
	    checkout servlet managed all its own connections to other
	    enterprise services, but enterprise beans do not typically
	    do this.  Instead, they rely on their server for connection
	    management.  Thus, 
	    when the checkout bean wants to connect to the
	    marketing database or the enterprise messaging system, for
	    example, it asks the EJB server to establish that
	    connection for it.  The server doesn't need to know what the
	    bean does with the connection, but it does need to manage
	    the connection, if it is to perform transaction
	    management on the connection.
	  </p>
</li>
</ul>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch01_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch01_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch01_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">1.3. The Java Enterprise APIs</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">1.5. Java Enterprise APIs Versus Jini</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
