<html>
<head>
<title>The Servlet API 2.1 (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The Servlet API 2.1">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_09.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_01.htm">Chapter 5: Java Servlets</a></td><td align="right" valign="top" width="172"><a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch06_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">5.10. The Servlet API 2.1</h2>
<p>
<a name="INDEX-1365"></a><a name="INDEX-1366"></a>Sun made the specification for Version 2.1 of the Servlet API
  available in November 1998. This version of the API includes some
  small "housekeeping" changes that make it more consistent and easier
  to use.  For example, method names have been standardized to
  capitalize "URL", meaning <tt class="literal">encodeUrl()</tt> has been
  deprecated in favor of <tt class="literal">encodeURL()</tt>, and so
  forth. <tt class="literal">GenericServlet</tt> now implements
  <tt class="literal">ServletContext</tt> directly and provides a
  no-argument <tt class="literal">init()</tt> method you can override in
  your own servlets. The <tt class="literal">ServletContext</tt> interface
  contains two new methods, <tt class="literal">getMajorVersion()</tt> and
  <tt class="literal">getMinorVersion()</tt>, that can determine the latest
  API version supported.<a name="INDEX-1367"></a><a name="INDEX-1368"></a><a name="INDEX-1369"></a><a name="INDEX-1370"></a><a name="INDEX-1371"></a>
</p>
<p>
<a name="INDEX-1372"></a><a name="INDEX-1373"></a><a name="INDEX-1374"></a><a name="INDEX-1375"></a>In addition to these small updates (and a few others noted in <a href="part3.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/part3.htm">Part 3, "API Quick Reference"</a>), Sun included a few genuinely new features.  Some are fairly minor.  For example, a servlet can now specify a "root cause" exception when creating a new <tt class="literal">ServletException</tt> object.  The root cause can be read with the new <tt class="literal">getRootCause()</tt> method of <tt class="literal">ServletException</tt>.  This provides somewhat more information than the old approach of creating a <tt class="literal">ServletException</tt> with the value returned by <tt class="literal">getMessage()</tt> from the exception that actually caused the problem.</p>
<p>Other new features, including request dispatching and shared attributes, are more significant and are discussed in the sections that follow.  Note that as of this writing, few servlet engines support the new features in Version 2.1 of the Servlet API.</p>
<a name="ch05-pgfid-348925"></a>
<h3 class="sect2">5.10.1. Request Dispatching</h3>
<p>
<a name="INDEX-1376"></a><a name="INDEX-1377"></a><a name="INDEX-1378"></a><a name="INDEX-1379"></a>The new request dispatching functionality allows a servlet to delegate request handling to other components on the server.  A servlet can either forward an entire request to another servlet or include bits of content from other components in its own output.  In either case, this is done with a <tt class="literal">RequestDispatcher</tt> object that is obtained from the <tt class="literal">ServletContext</tt> with its new <tt class="literal">getRequestDispatcher()</tt> method. When you call this method, you specify the path to the servlet to which you are dispatching the request.</p>
<p>
<a name="INDEX-1380"></a><a name="INDEX-1381"></a><a name="INDEX-1382"></a><a name="INDEX-1383"></a>When you dispatch a request, you can set request attributes using the <tt class="literal">setAttribute()</tt> method of <tt class="literal">ServletRequest</tt> and read them using the <tt class="literal">getAttribute()</tt> method.  A list of available attributes is returned by <tt class="literal">getAttributeNames()</tt>.  All three of these methods are new in Version 2.1.  Rather than taking only <tt class="literal">String</tt> objects (like parameters), an attribute may be any valid Java object.</p>
<p>
<a name="INDEX-1384"></a><a name="INDEX-1385"></a><a name="INDEX-1386"></a><a name="INDEX-1387"></a><tt class="literal">RequestDispatcher</tt> provides two methods for dispatching requests: <tt class="literal">forward()</tt> and <tt class="literal">include()</tt>. To forward an entire request to another servlet, use the <tt class="literal">forward()</tt> method.  When using <tt class="literal">forward()</tt>, the <tt class="literal">ServletRequest</tt> object <a name="INDEX-"></a>
is updated to include the new target URL.  If a <tt class="literal">ServletOutputStream</tt> or <tt class="literal">PrintWriter</tt> has already been retrieved from the <tt class="literal">ServletResponse</tt> object, the <tt class="literal">forward()</tt> method throws an <tt class="literal">IllegalStateException</tt>.<a name="INDEX-1388"></a>
</p>
<p>
<a name="INDEX-1389"></a><a name="INDEX-1390"></a><a name="INDEX-1391"></a>The <tt class="literal">include()</tt> method of <tt class="literal">RequestDispatcher</tt> causes the content of the dispatchee to be included in the output of the main servlet--just like a server-side include. To see how this works, let's look at part of a servlet that does a keep-alive check on several different servers:</p>
<blockquote>
<pre class="programlisting">
out.println("Uptime for our servers");

// Get a RequestDispatcher to the ServerMonitorServlet
RequestDispatcher d = 
  getServletContext().getRequestDispatcher("/servlet/ServerMonitorServlet");

req.setAttribute("serverurl", new URL("http://www1.company.com"));
d.include(req, res);

req.setAttribute("serverurl", new URL("http://www2.company.com"));
d.include(req, res);</pre>
</blockquote>
<a name="ch05-pgfid-348957"></a>
<h3 class="sect2">5.10.2. Shared Attributes</h3>
<p>
<a name="INDEX-1392"></a><a name="INDEX-1393"></a><a name="INDEX-1394"></a><a name="INDEX-1395"></a><a name="INDEX-1396"></a><a name="INDEX-1397"></a>
The <tt class="literal">ServletContext</tt> interface includes a number of new methods that support the ability for servlets to share attributes.  The new <tt class="literal">setAttribute()</tt> method allows a servlet to set an attribute that can be shared by any other servlets that live in its <tt class="literal">ServletContext</tt>.  The <tt class="literal">getAttribute()</tt> method, which previously allowed servlets to retrieve hardcoded server attributes, provides access to attribute values, while <tt class="literal">getAttributeNames()</tt> returns an <tt class="literal">Enumeration</tt> of all the shared attributes.</p>
<p>
<a name="INDEX-1398"></a><a name="INDEX-1399"></a>Shared attributes open up some exciting new possibilities.  Multiple
  servlets within a single web application can easily share
  configuration information, as well as complex programmatic
  resources, such as a CORBA object that handles user authentication
  or a database connection pool.</p>
<p>
<a name="INDEX-1400"></a><a name="INDEX-1401"></a><a name="INDEX-1402"></a>On a related note, Version 2.1 of the Servlet API deprecates all
  methods related to accessing other servlets directly, due to the
  fact that they are inherently insecure. Thus,
  <tt class="literal">getServlet()</tt> and
  <tt class="literal">getServletNames()</tt> join the already deprecated
  <tt class="literal">getServlets()</tt>. The problem here was that
  <tt class="literal">getServlet()</tt> incorrectly allowed one servlet to
  call another servlet's life-cycle methods.</p>
<a name="ch05-pgfid-348965"></a>
<h3 class="sect2">5.10.3. Resource Abstraction</h3>
<p>
<a name="INDEX-1403"></a><a name="INDEX-1404"></a>Resource abstraction is a new feature that allows a servlet to access
a resource on a web server, such as an HTML file, without knowing
where that resource actually lives.  This functionality makes it much
easier to move servlets on a web server and even among web servers,
such as for load-balancing purposes.</p>
<p>
<a name="INDEX-1405"></a><a name="INDEX-1406"></a><a name="INDEX-1407"></a>A servlet gets access to a resource using the new
<tt class="literal">getResource()</tt> method of
<tt class="literal">ServletContext</tt>.  You specify a URI path to the
resource and get back a URL object that lets you examine the requested
resource.  The web server controls how URI path parameters map to
actual resources.  Note that the resources handled by this
functionality cannot be an active resource, like another servlet or a
CGI script; use the <tt class="literal">RequestDispatcher</tt> for these
kinds of resources.</p>
<p>Let's say we have a servlet that writes a complicated header for
the content served by the page.  To load the actual content, all we
have to do is:</p>
<blockquote>
<pre class="programlisting">
URL content = getServletContext().getResource("/pages/page12.html");
out.print(content.getContent());</pre>
</blockquote>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_09.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch06_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.9. Databases and Non-HTML Content</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">6. JNDI</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
