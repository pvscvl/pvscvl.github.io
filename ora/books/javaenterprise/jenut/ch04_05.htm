<html>
<head>
<title>What If I Don't Know the Interface? (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="What If I Don't Know the Interface?">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_01.htm">Chapter 4: Java IDL</a></td><td align="right" valign="top" width="172"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">4.5. What If I Don't Know the Interface?</h2>
<p>
<a name="INDEX-1095"></a><a name="INDEX-1096"></a><a name="INDEX-1097"></a>
In the examples we've seen so far, we've always assumed that the Java interfaces for the remote objects are available at compile time. But what happens if they aren't? You might get a reference to a CORBA <tt class="literal">Object</tt> from a Naming Service, for example, 
and not know what interface that object implements. I mentioned earlier that you can use an <tt class="literal">org.omg.CORBA.Object</tt> reference directly to make requests and exchange data with its remote object. </p>
<p>
<a name="INDEX-1098"></a><a name="INDEX-1099"></a><a name="INDEX-1100"></a><a name="INDEX-1101"></a><a name="INDEX-1102"></a><a name="INDEX-1103"></a><a name="INDEX-1104"></a><a name="INDEX-1105"></a>
The CORBA standard defines two complementary APIs for this
purpose: the Dynamic Invocation Interface (DII) that a client can use
to make remote method requests of a server object, and the Dynamic
Skeleton Interface (DSI) that a server-side skeleton can use to
forward method invocations to its server implementation object. Both
of these APIs provide the same essential function: a dynamic interface
to an object whose interface is not known at compile time. The DII offers this functionality to clients of CORBA objects, and the DSI provides it to the server-side skeletons that bridge the object implementation with the ORB.</p>
<p>
<a name="INDEX-1106"></a>
The DII and DSI may seem like sidebar topics in the CORBA world, but in reality they are at the heart of CORBA and how it works. When we generate Java stubs and skeletons from IDL interfaces, the code that is generated uses the DII and DSI to execute remote method calls. The details of how this is done are shielded from you, the developer, by the Java interface you use to interact with the remote object. But it's still worthwhile to understand how CORBA objects implement their distributed nature, especially in situations where the Java interface for the remote object is not there, and you need to deal directly with these details.</p>
<p>In this section, we take a look at how the DII works and how you
might use it in a client. We won't cover the DSI in this book,
since its practical uses are even more limited for the average
developer. Note, however, that the API of the DSI is analogous to that
of the DII, so you shouldn't have much trouble mapping the
following explanation to the DSI as well.</p>
<a name="ch04-11992"></a>
<h3 class="sect2">4.5.1. Dynamic Invocation Interface</h3>
<p>
<a name="INDEX-1107"></a><a name="INDEX-1108"></a>
The Dynamic Invocation Interface provides abstract representations of remote method requests and their arguments. In simple terms, this means it includes objects that represent remote method requests and parameters that are passed with these method requests. Methods on these objects allow you to set the parameters to the request, make the request, and get the results. DII's central classes are:</p>
<dl>
<dt>
<b><tt class="literal">Request</tt></b>
</dt>
<dd>
<p>A request to invoke a method on a remote object. Created by the client and issued through the ORB to the server object.</p>
</dd>
<dt>
<b><tt class="literal">NamedValue</tt></b>
</dt>
<dd>
<p>A named parameter to a method request. Conceptually, this is a name tied to an <tt class="literal">Any</tt> value. The name of the value must match the name of the parameter as specified in the IDL interface the remote object satisfies.</p>
</dd>
<dt>
<b><tt class="literal">NVList</tt></b>
</dt>
<dd>
<p>A list of <tt class="literal">NamedValue</tt> parameters used to represent an argument list passed into a remote method request.</p>
</dd>
<dt>
<b><tt class="literal">Any</tt></b>
</dt>
<dd>
<p>A general argument value. An <tt class="literal">Any</tt> object can contain the Java equivalent of any basic IDL type or an <tt class="literal">Object</tt> that can be described in IDL.</p>
</dd>
<dt>
<b><tt class="literal">Context</tt></b>
</dt>
<dd>
<p>A list of <tt class="literal">NamedValue</tt> objects used to specify any details of the client environment that shouldn't be passed as method arguments.</p>
</dd>
</dl>
<p>
<a name="INDEX-1109"></a><a name="INDEX-1110"></a><a name="INDEX-1111"></a>
Once you get an <tt class="literal">org.omg.CORBA.Object</tt> reference to a remote object (using any of the approaches we've already covered), you can create and issue a method request to the object by building a parameter list for the method call, making a <tt class="literal">NamedValue</tt> object to hold the result, making a <tt class="literal">Context</tt> object and putting any useful environment values in it, and then using all of these items to create a <tt class="literal">Request</tt> object that corresponds to a particular method on the object. <a href="#ch04-20950">Example 4-11</a> shows a sample DII client that gets a reference to a remote object through a Naming Service and then makes a dynamic call to its <tt class="literal">doThis()</tt> method. </p>
<a name="ch04-20950"></a>
<div class="example">
<h4 class="objtitle">Example 4-11. Client Using DII to Make Remote Method Call</h4>
<blockquote>
<pre class="programlisting">
import org.omg.CORBA.*;
import org.omg.CosNaming.*;

public class DIISimpleClient {
  public static void main(String argv[]) {
    ORB myORB = ORB.init(argv, null);
    ORB singleORB = ORB.init();
    try {
      // Get a reference to the object
      org.omg.CORBA.Object ncRef = 
        myORB.resolve_initial_references("NameService");
      NamingContext nc = NamingContextHelper.narrow(ncRef);
      NameComponent nComp = new NameComponent("ThisOrThatServer", "");
      NameComponent[] path = {nComp};
      org.omg.CORBA.Object objRef = nc.resolve(path);

      // Now make a dynamic call to the doThis method.  The first step is
      // to build the argument list. In this case, there's a single String
      // argument to the method, so create an NVList of length 1.  Next
      // create an Any object to hold the value of the argument and insert
      // the desired value.  Finally, wrap the Any object with a NamedValue
      // and insert it into the NVList, specifying that it is an input
      // parameter.
      NVList argList = myORB.create_list(1);
      Any arg1 = myORB.create_any();
      arg1.insert_string("something");
      NamedValue nvArg = 
        argList.add_value("what", arg1, org.omg.CORBA.ARG_IN.value);

      // Create an Any object to hold the return value of the method and
      // wrap it in a NamedValue
      Any result = myORB.create_any();
      result.insert_string("dummy");
      NamedValue resultVal = myORB.create_named_value("result", result, 
          org.omg.CORBA.ARG_OUT.value);

      // Get the local context from the ORB.  
      // NOTE: This call does not work in Java 1.2, and returns a
      //   NOT_IMPLEMENTED exception.  To make this work in Java 1.2, simply
      //   remove this call to get_default_context(), and pass a null pointer
      //   into the _create_request() call below.  This example should work 
      //   as is with any compliant Java CORBA environment, however.
      Context ctx = myORB.get_default_context();

      // Create the method request using the default context, the name of
      // the method, the NVList argument list, and the NamedValue for the 
      // result.  Then invoke the method by calling invoke() on the Request.
      Request thisReq = 
        objRef._create_request(ctx, "doThis", argList, resultVal);
      thisReq.invoke();

      // Get the return value from the Request object and output results.
      result = thisReq.result().value();
      System.out.println("doThis() returned: " + result.extract_string());
    }
    catch (Exception e) {
      e.printStackTrace();
    }
  }
}</pre>
</blockquote>
</div>
<p>Note that in most situations you will have the Java interface
for the remote object available in your client along with its helper
class, so you'll be able to narrow the <tt class="literal">Object</tt>
reference to a specific type. One exception might be if you're
building some kind of software development tool, and you want to
provide a dynamic execution utility for the CORBA code being
developed. The previous example demonstrates how a CORBA
method call can be carried out at this lower level, in case you ever
find it necessary to do so. And when you're trying to fix a
problem with your CORBA application, it's always better to
understand what's going on under the hood, so to speak.</p>
<a name="INDEX-1112"></a>
<a name="INDEX-1113"></a>
<a name="INDEX-1114"></a>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch05_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.4. Finding Remote Objects</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5. Java Servlets</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
