<html>
<head>
<title>User-Defined Data Types (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="User-Defined Data Types">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_01.htm">Chapter 10: IDL Reference</a></td><td align="right" valign="top" width="172"><a href="ch10_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_08.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">10.7. User-Defined Data Types</h2>
<p>
<a name="INDEX-2339"></a><a name="INDEX-2340"></a><a name="INDEX-2341"></a>
In addition to the basic data types already described, IDL supports
  user-defined data types, which are aggregations of these basic
  types. These complex data types include arrays, sequences,


enumerations, and constructed data types you define yourself using
  structs and unions. We'll go over each in detail in this
  section.</p>
<p>A complex data type is used in IDL by first giving it a type
name, then using the type name wherever you would use a basic
data- or interface-type name (e.g., declaring attributes,
method arguments). There are a few ways a name is assigned to a
complex data type:</p>
<ul>
<li>
<p>With structures, unions, and enumerations, the name is included
in the declaration of the data type.</p>
</li>
<li>
<p>
<a name="INDEX-2342"></a>
A <tt class="literal">typedef</tt> can be used to assign a name to a
specific type (basic or complex).</p>
</li>
</ul>
<p>Before we go on to see how complex data types are declared in
IDL, let's take a look at how a <tt class="literal">typedef</tt>
assigns a type name to a complex data type.</p>
<a name="ch10-pgfid-962452"></a>
<h3 class="sect2">10.7.1. Typedefs</h3>
<p>A <tt class="literal">typedef</tt> associates a name with another data
type. Here is the syntax of an IDL <tt class="literal">typedef</tt>:</p>
<blockquote>
<pre class="programlisting">
typedef <em class="replaceable">type</em> <em class="replaceable">identifier</em>
</pre>
</blockquote>
<p>The <em class="replaceable">type</em> can be any basic IDL data type, a user-defined data structure (structure, union, or enumeration), an IDL interface type, or a sequence. The <em class="replaceable">identifier</em> can be a simple IDL identifier, or it can include dimension specifications for an array. So the following are all valid <tt class="literal">typedef</tt> statements:</p>
<blockquote>
<pre class="programlisting">
// IDL
typedef short myShort;
typedef long longArray[2][2];
typedef PrintServer pserver;</pre>
</blockquote>
<p>After declaring these <tt class="literal">typedefs</tt> in your IDL file, you can use <tt class="literal">myShort</tt>, <tt class="literal">longArray</tt>, and <tt class="literal">pserver</tt> as type names when declaring method arguments, return values, or interface attributes.</p>
<a name="ch10-pgfid-964221"></a>
<h3 class="sect3">10.7.1.1. Mapping typedefs to Java</h3>
<p>
<a name="INDEX-2343"></a><a name="INDEX-2344"></a><a name="INDEX-2345"></a>
If an IDL <tt class="literal">typedef</tt> refers to a basic IDL type,
the Java equivalent to that type is used wherever the
<tt class="literal">typedef</tt> identifier is used. So our
<tt class="literal">myShort</tt><tt class="literal">typedef</tt> in the previous section is replaced by the Java type <tt class="literal">short</tt> wherever it's used.</p>
<p>Any <tt class="literal">typedefs</tt> that refer to user-defined types are replaced by the mapped Java class or interface for the target IDL type. If the type used in an IDL <tt class="literal">typedef</tt> is itself a <tt class="literal">typedef</tt>, its target type is found, and so on, until a final user-defined type or basic IDL type is found. Consider this example:</p>
<blockquote>
<pre class="programlisting">
// IDL
struct LinkedList {
	any item;
	any next;
};


typedef LinkedList DefList;
typedef DefList MyList;</pre>
</blockquote>
<p>Wherever either <tt class="literal">DefList</tt> or <tt class="literal">MyList</tt> appears in the IDL file, it is mapped to the Java class generated for the <tt class="literal">LinkedList</tt> type, since they both refer (directly or indirectly) to that type.</p>
<a name="ch10-pgfid-962431"></a>
<h3 class="sect2">10.7.2. Arrays</h3>
<p>
<a name="INDEX-2346"></a><a name="INDEX-2347"></a>
Arrays can only be declared within the context of a <tt class="literal">typedef</tt>. Once you've assigned the array type to a type name using the <tt class="literal">typedef</tt>, you can use the new type name to declare array members on interfaces. IDL doesn't provide a way to initialize array values, so you cannot declare array constants in IDL, since constants have to be initialized in their declaration. </p>
<p>To declare an array, simply add dimensions in brackets to a variable identifier. For example, to define a two-dimensional array of short values:</p>
<blockquote>
<pre class="programlisting">
// IDL
typedef short short2x2Array[2][2];</pre>
</blockquote>
<p>IDL requires that you explicitly specify each dimension of the array, in order to support mappings to languages that have a similar requirement.</p>
<a name="ch10-pgfid-962571"></a>
<h3 class="sect3">10.7.2.1. Mapping arrays to Java</h3>
<p>
<a name="INDEX-2348"></a><a name="INDEX-2349"></a>
Arrays are mapped into Java as arrays (naturally). So, if we use the <tt class="literal">short2x2Array</tt> type defined above in an IDL interface:</p>
<blockquote>
<pre class="programlisting">
// IDL
interface MatrixOps {
	attribute short2x2Array identity2D;
	...</pre>
</blockquote>
<p>the corresponding Java code looks like so:</p>
<blockquote>
<pre class="programlisting">
// Java
public interface MatrixOps {
	short[][] identity2D();
	void identity2D(short[][] arg);
	...</pre>
</blockquote>
<p>We'll look more at how interface attributes are mapped to Java later, but you can infer from this that the <tt class="literal">short</tt> IDL array is mapped to a <tt class="literal">short</tt> array in Java. The attribute is mapped to <tt class="literal">get()</tt> and <tt class="literal">set()</tt> methods for that attribute. Since Java doesn't allow array type specifiers to include dimensions, our declaration that the <tt class="literal">identity2D</tt> attribute be a 2-by-2 array has been lost in the mapping. It's up to you to provide an implementation of this interface that enforces the intended dimensions of the array within the Java interface.</p>
<p>
<a name="INDEX-2350"></a><a name="INDEX-2351"></a><a name="INDEX-2352"></a>
In addition to mapping the array type to equivalent type specifiers, each array <tt class="literal">typedef</tt> in IDL causes the generation of corresponding helper and holder classes in Java. The type name specified in the IDL <tt class="literal">typedef</tt> is used as the prefix for the <tt class="literal">xxxHelper</tt> and <tt class="literal">xxxHolder</tt> class names. So our <tt class="literal">short2x2Array</tt> type has <tt class="literal">short2x2ArrayHelper</tt> and <tt class="literal">short2x2ArrayHolder</tt> classes generated for it. The helper class provides the static methods that read and write the array type over CORBA I/O streams, when the array type is used as a method argument or return type. These methods enforce the array dimensions that you dictate in your IDL <tt class="literal">typedef</tt>; if the array is not of the correct type when being marshalled, the <tt class="literal">write()</tt> method throws an <tt class="literal">org.omg.CORBA.MARSHAL</tt> exception. The holder class is used whenever you use your array type as an <tt class="literal">inout</tt> or <tt class="literal">out</tt> method argument. For more details on the purposes of helper and holder classes, see <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_01.htm">Chapter 4, "Java IDL"</a>.</p>
<a name="ch10-pgfid-962483"></a>
<h3 class="sect2">10.7.3. Sequences</h3>
<p>
<a name="INDEX-2353"></a><a name="INDEX-2354"></a><a name="INDEX-2355"></a>
An IDL sequence is a one-dimensional array. To declare a sequence, you need to declare the type of the elements in the sequence, and optionally the maximum size of the sequence:</p>
<blockquote>
<pre class="programlisting">
// IDL
typedef sequence&lt;long, 2&gt; longVector;
typedef sequence&lt;short&gt; unboundedShortVector;
typedef sequence&lt;sequence&lt;float, 2&gt; &gt; coordVector;</pre>
</blockquote>
<p>Like arrays, sequences have to be declared within a <tt class="literal">typedef</tt> and then the new type name can be used for typing attributes, method arguments, and return values. Note that the elements in a sequence can themselves be a sequence. Also notice that if you don't provide a bound for a sequence of sequences, you need to put a space between the two <tt class="literal">&gt;</tt> brackets, so that they aren't parsed as a <tt class="literal">&gt;&gt;</tt> operator.</p>
<a name="ch10-pgfid-962587"></a>
<h3 class="sect3">10.7.3.1. Mapping sequences to Java</h3>
<p>
<a name="INDEX-2356"></a><a name="INDEX-2357"></a><a name="INDEX-2358"></a><a name="INDEX-2359"></a>
Sequences are mapped to Java almost identically to arrays. A sequence of a given IDL type becomes a Java array of the equivalent Java type, sequences of sequences become two-dimensional arrays, etc. A holder and helper class are generated for each sequence <tt class="literal">typedef</tt> as well, using the type name specified in the <tt class="literal">typedef</tt>. The <tt class="literal">write()</tt> method on the helper class enforces any size bounds you specify on the sequence, throwing an <tt class="literal">org.omg.CORBA.MARSHAL</tt> exception if they don't match.</p>
<a name="ch10-pgfid-962432"></a>
<h3 class="sect2">10.7.4. Structs</h3>
<p>
<a name="INDEX-2360"></a><a name="INDEX-2361"></a>
A fixed data structure is declared using the <tt class="literal">struct</tt> construct in IDL. A <tt class="literal">struct</tt> is declared using the following syntax:</p>
<blockquote>
<pre class="programlisting">
// IDL
struct <em class="replaceable">type-name</em> {
	<em class="replaceable">data-member</em>;
	<em class="replaceable">data-member</em>;
	...
};</pre>
</blockquote>
<p>The type name is any valid identifier in IDL. Each data member
is specified using a type specification and an identifier that
references the member (similar to attributes on an interface,
described in <a href="ch10_10.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_10.htm">Section 10.10.1, "Attributes"</a> in <a href="ch10_10.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_10.htm">Section 10.10, "Interface Declarations"</a>). You can use basic data types, arrays, sequences, and
any other <tt class="literal">typedefs</tt> as types for members of a
<tt class="literal">struct</tt>. 


You can declare a recursive structure (a
structure that includes members of its own type) by using a
<tt class="literal">sequence</tt> declaration:</p>
<blockquote>
<pre class="programlisting">
// IDL
struct LispStringList {
	string car;
	sequence&lt;LispStringList&gt; cdr;
};</pre>
</blockquote>
<a name="ch10-pgfid-962622"></a>
<h3 class="sect3">10.7.4.1. Mapping structs to Java</h3>
<p>
<a name="INDEX-2362"></a><a name="INDEX-2363"></a>
An IDL <tt class="literal">struct</tt> is mapped to a <tt class="literal">public
final</tt> Java class with the same name as the struct. Each
member of the <tt class="literal">struct</tt> is mapped to a public instance
member on the Java class. The Java class includes a default
constructor that leaves the member variables uninitialized and a constructor that accepts a value for each member. Our example <tt class="literal">struct</tt> above is mapped to the following Java class:</p>
<blockquote>
<pre class="programlisting">
// Java
public final class LispStringList {
	// instance variables
	public String car;
	public LispStringList[] cdr;
	// constructors
	public LispStringList() { }
	public LispStringList(String __car, LispStringList[] __cdr) {
		car = __car;
		cdr = __cdr;
	}
}</pre>
</blockquote>
<p>
<a name="INDEX-2364"></a>
Each struct also has a Java holder class generated for it, which marshalls the data type when it's used as an <tt class="literal">inout</tt> or <tt class="literal">out</tt> method argument or as a method return value.</p>
<a name="ch10-pgfid-962668"></a>
<h3 class="sect2">10.7.5. Enumerations</h3>
<p>
<a name="INDEX-2365"></a><a name="INDEX-2366"></a>
An enumeration in IDL declares an ordered list of identifiers, whose values are assigned in ascending order according to their order in the enumeration. An enumeration is given a type name so that the elements of the enumeration can be referenced. The syntax for declaring an IDL enumeration is:</p>
<blockquote>
<pre class="programlisting">
// IDL
enum <em class="replaceable">type-name</em> { <em class="replaceable">element-name</em>, <em class="replaceable">element-name</em>, ... };</pre>
</blockquote>
<p>The elements in the enumeration are guaranteed to be assigned actual values so that the comparison operators in the implementation language recognize the order of the elements as specified in the <tt class="literal">enum</tt> declaration. In other words, the first element is less than the second, the second is less than the third, etc. An example <tt class="literal">enum</tt> declaration follows:</p>
<blockquote>
<pre class="programlisting">
// IDL
enum ErrorCode { BadValue, DimensionError, Overflow, Underflow };</pre>
</blockquote>
<a name="ch10-pgfid-962673"></a>
<h3 class="sect3">10.7.5.1. Mapping enumerations to Java</h3>
<p>Each enumerated type you declare in IDL is mapped to a
<tt class="literal">public</tt><tt class="literal">final</tt> Java class of the
same name as the enumeration. The class holds a single
<tt class="literal">private</tt><tt class="literal">int</tt> instance member
called <tt class="literal">value</tt>. A single <tt class="literal">private</tt>
constructor is generated for the class, which takes an
<tt class="literal">int</tt> argument that initializes the <tt class="literal">value</tt> member. </p>
<p>For each element of the enumeration, two components are added to the Java class: a <tt class="literal">static final int</tt> data member and a <tt class="literal">static</tt> instance of the generated Java class. The static data member generated for each element is given a value that enforces the order of the elements in the enumeration, and the static class instance generated for each element is initialized with this same value. The static class instance is given the same name as the element in the enumeration, and the static data member is given the element's name prepended with an underscore. These two representations for each element of the enumeration let you reference the element value using either a corresponding <tt class="literal">int</tt> value or the generated Java class type. If the enumerated type is used as a method argument or return value in an IDL interface, your Java implementation has to use the object versions of the elements.</p>
<p>Our example enumeration generates a Java class like the following:</p>
<blockquote>
<pre class="programlisting">
// Java
public final class ErrorCode {
	public static final int _BadValue = 0,
		_DimensionError = 1,
		_Overflow = 2,
		_Underflow = 3;
	public static final ErrorCode BadValue = new ErrorCode(_BadValue);
	public static final ErrorCode DimensionError = new 
      ErrorCode(_DimensionError);
	public static final ErrorCode Overflow = new ErrorCode(_Overflow);
	public static final ErrorCode Underflow = new ErrorCode(_Underflow);
	public int value() {
		return _value;
	}
	public static final ErrorCode from_int(int i) throws 
      org.omg.CORBA.BAD_PARAM {
		switch (i) {
			case _BadValue:
				return BadValue;
			case _DimensionError:
				return DimensionError;
			case _Overflow:
				return Overflow;
			case _Underflow:
				return Underflow;
			default:
				throw new org.omg.CORBA.BAD_PARAM();
		}
	}
	private ErrorCode(int _value){
		this._value = _value;
	}
	private int _value;
}</pre>
</blockquote>
<p>So we can refer to the elements in the enumeration in our Java code using any of the following forms:</p>
<blockquote>
<pre class="programlisting">
// Java
int error1 = ErrorCode._BadValue;
ErrorCode error2 = ErrorCode.Overflow;
int error2Val = error2.value();</pre>
</blockquote>
<p>
<a name="INDEX-2367"></a><a name="INDEX-2368"></a>
Each enumerated type also has a holder class generated for it that is used whenever the enumerated type is used in IDL as an <tt class="literal">out</tt> or <tt class="literal">inout</tt> method argument. Although not strictly required by the IDL Java mapping defined by the OMG, an enumerated type might also have a helper class generated for it.</p>
<a name="ch10-pgfid-962490"></a>
<h3 class="sect2">10.7.6. Unions</h3>
<p>
<a name="INDEX-2369"></a><a name="INDEX-2370"></a><a name="INDEX-2371"></a><a name="INDEX-2372"></a><a name="INDEX-2373"></a>
IDL unions are similar in nature to discriminated unions in C and C++. A single tag field, or <em class="emphasis">discriminator</em>, determines the data element held by the union. Depending on the value of the discriminator field, a particular instance of the union type may hold a different data member. The union is declared using a <tt class="literal">switch</tt> statement to declare the various possible formats, or branches, of the union structure:</p>
<blockquote>
<pre class="programlisting">
// IDL
union <em class="replaceable">type-name</em> switch (<em class="replaceable">discriminator-type</em>) {
	case <em class="replaceable">tag-value</em>:
		[<em class="replaceable">data-element</em>;]
	case <em class="replaceable">tag-value</em>:
		[<em class="replaceable">data-element</em>;]
	. . .
	[default:]
		<em class="replaceable">data-element</em>;
};</pre>
</blockquote>
<p>The discriminator for the union is declared using only the type for the discriminator (no identifier is given to the discriminator, since there is only a single discriminator per union type). The type for the discriminator must be an integer, character, boolean, or enumerated type (<tt class="literal">string</tt>, <tt class="literal">struct</tt>, <tt class="literal">union</tt>, <tt class="literal">array</tt>, and <tt class="literal">sequence</tt> are not allowed). </p>
<p>
<a name="INDEX-2374"></a>
Each branch in the <tt class="literal">switch</tt> defines a data element that represents the value of the union if its discriminator is a given value. Each data member identifier in a union <tt class="literal">switch</tt> has to be unique. Multiple cases can be mapped to the same data element by listing them sequentially within the <tt class="literal">switch</tt>. A single optional <tt class="literal">default</tt> case can be given for any values not given their own cases. Consider the following union:</p>
<blockquote>
<pre class="programlisting">
// IDL
typedef Coord2d sequence&lt;long, 2&gt;;
typedef Coord3d sequence&lt;long, 3&gt;;
union MultiCoord switch (short) {
	case 1:
		long pos;
	case 2:
		Coord2d val2d;
	case 3:
	default:
		Coord3d val3d;
};</pre>
</blockquote>
<p>This declares a type named <tt class="literal">MultiCoord</tt> that
represents a one-, two-, or three-dimensional coordinate, depending on
the value of its discriminator value. The default is for the
coordinate to be three-dimensional, so the case for a discriminator
value of 3 is the same as the default case. Since a union can have
only a single data member per case, we have to use <tt class="literal">typedef</tt> types for the coordinate values. Depending on the discriminator value, the union contains either a simple integer position, a <tt class="literal">Coord2D</tt> type that is declared as a <tt class="literal">sequence</tt> of two integer values, or a <tt class="literal">Coord3D</tt> type that is a <tt class="literal">sequence</tt> of three integer values.</p>
<p>If the discriminator value is given a value not listed in a
case, the union consists of the data member in the default case, if
present. If there is no default case, the union has only its discriminator value and no data members.</p>
<a name="ch10-pgfid-963045"></a>
<h3 class="sect3">10.7.6.1. Mapping unions to Java</h3>
<p>
<a name="INDEX-2375"></a><a name="INDEX-2376"></a><a name="INDEX-2377"></a><a name="INDEX-2378"></a><a name="INDEX-2379"></a><a name="INDEX-2380"></a>
Each IDL union is mapped to a <tt class="literal">public final</tt> Java class of the same name as the union identifier. The class contains a single, default constructor. The class has some kind of data member for maintaining the value of the union discriminator (the details of which are not dictated by the IDL-to-Java mapping) and a <tt class="literal">discriminator()</tt> method for accessing it as a <tt class="literal">short</tt> value. The standard also doesn't specify how data members for the union are implemented in the Java class. Each branch you specify in the IDL union is mapped to an accessor method and modifier method for that branch, and these methods are named after the identifier given to the data member in the branch. If you use one of the modifier methods to set that branch of the union type, the discriminator is automatically set to the corresponding value. If you attempt to access the value from a branch, and the union is not set to that branch, an <tt class="literal">org.omg.CORBA.BAD_OPERATION</tt> exception is thrown. The return value types and method arguments for the <tt class="literal">discriminator()</tt> method and the case accessor/modifier methods are determined based on the standard type conversion rules for mapping IDL to Java.</p>
<p>Our <tt class="literal">MultiCoord</tt> union example is mapped to the following Java class by Sun's <em class="emphasis">idltojava</em> compiler:
<a name="INDEX-2381"></a>
</p>
<blockquote>
<pre class="programlisting">
// Java
public final class MultiCoord {
	// instance variables
	private boolean __initialized;
	private short __discriminator;
	private java.lang.Object __value;
	private short _default = 4;
	// constructor
	public MultiCoord() {
		__initialized = false;
		__value = null;
	}
	// discriminator accessor
	public short discriminator() throws org.omg.CORBA.BAD_OPERATION {
		if (!__initialized) {
			throw new org.omg.CORBA.BAD_OPERATION();
		}
		return __discriminator;
	}
	// branch constructors and get and set accessors
	public int pos() throws org.omg.CORBA.BAD_OPERATION {
		if (!__initialized) {
			throw new org.omg.CORBA.BAD_OPERATION();
		}
		switch (__discriminator) {
			case (short) (1L):
				break;
			default:
				throw new org.omg.CORBA.BAD_OPERATION();
		}
		return ((org.omg.CORBA.IntHolder) __value).value;
	}
	public void pos(int value) {
		__initialized = true;
		__discriminator = (short) (1L);
		__value = new org.omg.CORBA.IntHolder(value);
	}
	public int[] val2d() throws org.omg.CORBA.BAD_OPERATION {
		if (!__initialized) {
			throw new org.omg.CORBA.BAD_OPERATION();
		}
		switch (__discriminator) {
			case (short) (2L):
				break;
			default:
				throw new org.omg.CORBA.BAD_OPERATION();
		}
		return (int[]) __value;
	}
	public void val2d(int[] value) {
		__initialized = true;
		__discriminator = (short) (2L);
		__value = value;
	}
	public int[] val3d() throws org.omg.CORBA.BAD_OPERATION {
		if (!__initialized) {
			throw new org.omg.CORBA.BAD_OPERATION();
		}
		switch (__discriminator) {
			default:
				break;
			case (short) (1L):
			case (short) (2L):
				throw new org.omg.CORBA.BAD_OPERATION();
		}
		return (int[]) __value;
	}
	public void val3d(int[] value) {
		__initialized = true;
		__discriminator = (short) (3L);
		__value = value;
	}
}</pre>
</blockquote>
<p>
<a name="INDEX-2382"></a>
Notice that Sun's <em class="emphasis">idltojava</em> compiler implements the data branches in the union using a single <tt class="literal">java.lang.Object</tt> data member, which references an object of the appropriate type when the union is put into a particular branch.</p>
<p>
<a name="INDEX-2383"></a><a name="INDEX-2384"></a>
In this case, the default case and the third case share the same branch, so no accessor or modifier method is generated for the default case. If we have a default case that is separate from all other explicit cases in the union (i.e., has its own branch), an accessor and modifier method are generated for its branch as well. If two explicit cases are mapped to the same branch in the switch, the Java modifier method generated for that branch sets the discriminator value to the value of the first case included for that branch. In these cases, another modifier method, which takes a second argument that is the value for the discriminator, is also generated. As an example, if we want to use a <tt class="literal">Coord2D</tt> for both 1D and 2D coordinates, we can modify our IDL union to have both case 1 and 2 use the same branch:</p>
<blockquote>
<pre class="programlisting">
typedef sequence&lt;long, 2&gt; Coord2d;
typedef sequence&lt;long, 3&gt; Coord3d;
union MultiCoord switch (short) {
 case 1:
 case 2:
   Coord2d val2d;
 case 3:
   Coord3d val3d;
 default:
   Coord3d valDef;
};</pre>
</blockquote>
<p>In this situation, the generated Java has an additional method included for the <tt class="literal">val2d</tt> branch:</p>
<blockquote>
<pre class="programlisting">
public void val2d(int discrim, int[] value) { ... }</pre>
</blockquote>
<p>This allows you to set the union to that branch and also specify which discriminator is intended. This can be useful in some cases, such as our modified <tt class="literal">MultiCoord</tt> example, where the value of the discriminator determines the usage for the object.<a href="#FOOTNOTE-4">[4]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-4"></a>
<p>[4]The current version of Sun's <em class="emphasis">idltojava</em> compiler, which originally shipped with the beta 2 of JDK 1.2, violates this part of the standard and does not generate the extra modifier method for multicase branches. </p>
</blockquote>
<p>If no explicit <tt class="literal">default</tt> case is given in the union and if the listed cases do not completely cover the possible values for the discriminator, the generated Java class includes a single method named <tt class="literal">default()</tt> that takes no arguments and returns a <tt class="literal">void</tt>. This serves as the modifier for the default case, setting the union discriminator to some unused value.</p>
<p>
<a name="INDEX-2385"></a><a name="INDEX-2386"></a>
The union class also has a holder class generated for it. Although not specified in the standard mapping, it might also have a helper class generated, but you shouldn't depend on the helper class being present in the generated Java.</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch10_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_08.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">10.6. Naming Scopes</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">10.8. Exceptions</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
