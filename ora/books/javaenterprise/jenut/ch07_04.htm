<html>
<head>
<title>Implementing a Basic EJB Object (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Implementing a Basic EJB Object">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_01.htm">Chapter 7: Enterprise JavaBeans</a></td><td align="right" valign="top" width="172"><a href="ch07_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">7.4. Implementing a Basic EJB Object</h2>
<p>
<a name="INDEX-1814"></a><a name="INDEX-1815"></a><a name="INDEX-1816"></a><a name="INDEX-1817"></a><a name="INDEX-1818"></a>
Now it's time to start talking about actually implementing an
  Enterprise JavaBeans component. No matter whether you are creating
  an entity bean or a session bean, there are three Java
  interfaces/classes you need to provide:</p>
<dl>
<dt>
<b><em class="emphasis">Home interface</em></b>
</dt>
<dd>
<p>
<a name="INDEX-1819"></a>
The home interface is accessed directly by clients and used to create
and/or find EJB objects of a specific type. </p>
</dd>
<dt>
<b><em class="emphasis">Remote bean interface</em></b>
</dt>
<dd>
<p>
<a name="INDEX-1820"></a>
The remote interface for the bean is also used directly by
clients. When a client creates or finds an EJB object through a home
interface, it is given a reference to a stub that implements the
remote interface for the bean. The remote interface defines the
methods the EJB object exports to remote clients.</p>
</dd>
<dt>
<b><em class="emphasis">Bean implementation</em></b>
</dt>
<dd>
<p>
<a name="INDEX-1821"></a>
The EJB object implementation itself must implement all the remote
  methods defined in its remote interface, provide methods that
  correspond to the methods on its home interface for creating and/or
  finding the bean, and also implement the methods used by the EJB
  container to manage the bean.</p>
</dd>
</dl>
<p>
<a name="INDEX-1822"></a><a name="INDEX-1823"></a><a name="INDEX-1824"></a>
To demonstrate the various components that make up an Enterprise
  JavaBeans object, we'll look at a simple example: a profile
  server. The profile server is a stateless session bean that provides
  profile information for named users. This profile information
  consists of name/value pairs that might represent preferences in an
  application, historical usage patterns, etc. You might see a profile
  server running behind an online information service, allowing users
  to personalize the content and appearance of the site when they
  enter. After we've gone through this general example of
  writing a bean, we'll look more closely at the differences
  between implementing session beans and entity beans.</p>
<p>
<a name="INDEX-1825"></a><a name="INDEX-1826"></a><a name="INDEX-1827"></a><a href="#ch07-32653">Table 7-1</a> shows how the methods of the home interface, the
remote interface, and the bean implementation are related to each
other.</p>

<a name="ch07-32653"></a>
<h4 class="objtitle">Table 7-1. Related Methods</h4>
<table border="1">




<tr>
<th>
<p>Home Interface Method</p>
</th>
<th>
<p>Remote Interface Method</p>
</th>
<th>
<p>EJB Object Method</p>
</th>
</tr>



<tr>
<td>
<p>
<em class="replaceable">remote-type</em><tt class="literal"> create(</tt><em class="replaceable">args</em><tt class="literal">) throws
CreateException, RemoteException;</tt>
</p>
</td>

<td>
<p>N/A</p>
</td>

<td>
<p>
<tt class="literal">public void
ejbCreate(</tt><em class="replaceable">args</em><tt class="literal">);
</tt> // Session beans <tt class="literal">public</tt><em class="replaceable">primary-key-type</em><tt class="literal">
ejbCreate(</tt><em class="replaceable">args</em><tt class="literal">);
</tt> // Entity beans
</p>
</td>
</tr>

<tr>

<td>
<p>
<em class="replaceable">remote-type</em> or <tt class="literal">Enumeration
findBy</tt><em class="replaceable">method</em><tt class="literal">(</tt><em class="replaceable">args</em><tt class="literal">)
throws FinderException, RemoteException; </tt>// Entity beans
only
</p>
</td>

<td>
<p>N/A</p>
</td>

<td>
<p>
<tt class="literal">public</tt><em class="replaceable">primary-key-type</em><em class="emphasis"></em>
or <tt class="literal"> Enumeration
ejbFindBy</tt><em class="replaceable">method</em><tt class="literal">(</tt><em class="replaceable">args</em><tt class="literal">);
</tt> // Entity beans only
</p>
</td>
</tr>

<tr>
<td>
<p>
<tt class="literal">public void remove();</tt>
</p>
</td>
<td>
<p>
<tt class="literal">public void remove();</tt>
</p>
</td>
<td>
<p>
<tt class="literal">public void ejbRemove();</tt>
</p>
</td>
</tr>

<tr>
<td>
<p>N/A</p>
</td>

<td>
<p>
Business method (must throw <tt class="literal">RemoteException</tt>)
</p>
</td>

<td>
<p>
Business method, same signature (must throw
<tt class="literal">RemoteException</tt>)
</p>
</td>
</tr>


</table>

<a name="ch07-pgfid-971969"></a>
<h3 class="sect2">7.4.1. Home Interface</h3>
<p>
<a name="INDEX-1828"></a>
The client needs a way to create a local reference to a profile server, so we have to provide a home interface for our bean, as shown in <a href="#ch07-40317">Example 7-1</a>. This home interface provides a single <tt class="literal">create()</tt> method that takes no arguments and returns the bean's remote interface type, <tt class="literal">ProfileServer</tt>.</p>
<a name="ch07-40317"></a>
<div class="example">
<h4 class="objtitle">Example 7-1. Home Interface for the Profile Server Bean  </h4>
<blockquote>
<pre class="programlisting">
import javax.ejb.*;
import java.rmi.RemoteException;

public interface ProfileServerHome extends EJBHome {
  public ProfileServer create() throws CreateException, RemoteException;
}</pre>
</blockquote>
</div>
<p>
<a name="INDEX-1829"></a><a name="INDEX-1830"></a><a name="INDEX-1831"></a>

The home interface for an EJB object extends the
<tt class="literal">javax.ejb.EJBHome</tt> interface. The home interface is
also an RMI remote interface, since <tt class="literal">EJBHome</tt> extends
<tt class="literal">java.rmi.Remote</tt>. The home interface can contain
multiple <tt class="literal">create()</tt> methods that take various
initialization arguments for the bean to be created. The
<tt class="literal">create()</tt> method returns a reference to our
bean's remote interface (<tt class="literal">ProfileServer</tt>, in
this case). </p>
<p>
<a name="INDEX-1832"></a><a name="INDEX-1833"></a><a name="INDEX-1834"></a><a name="INDEX-1835"></a><a name="INDEX-1836"></a>
As shown in <a href="#ch07-32653">Table 7-1</a>, for each <tt class="literal">create()</tt> method on
  the home interface, the EJB object implementation must have a
  matching <tt class="literal">ejbCreate()</tt> method that takes the same
  arguments. The <tt class="literal">create()</tt> method on the home
  interface has to declare that it throws
  <tt class="literal">java.rmi.RemoteException</tt>, since the home
  interface is an RMI remote interface. It also has to throw
  <tt class="literal">javax.ejb.CreateException</tt>, in case some error
  occurs during the EJB creation process (as opposed to some general
  RMI-related problem). If the corresponding
  <tt class="literal">ejbCreate()</tt> method on the bean implementation
  throws any other exceptions, the <tt class="literal">create()</tt> method
  has to include these in its <tt class="literal">throws</tt> clause as
  well. In this example, the bean's
  <tt class="literal">ejbCreate()</tt> method doesn't throw any
  exceptions, so we don't need to add any additional exceptions
  here. </p>
<p>
<a name="INDEX-1837"></a><a name="INDEX-1838"></a>
Home interfaces for entity beans can also include finder methods, used to find existing persistent entity beans that were previously created. We'll discuss them in detail a bit later, when we talk about entity beans.</p>
<a name="ch07-pgfid-965201"></a>
<h3 class="sect2">7.4.2. Remote Interface</h3>
<p>
<a name="INDEX-1839"></a><a name="INDEX-1840"></a><a name="INDEX-1841"></a>

You usually start putting together an EJB by defining its remote
  interface. This interface contains declarations of the methods that
  are available to remote clients, so it really points to the heart of
  the EJB object. The remote interface for our
  <tt class="literal">ProfileServer</tt> is shown in <a href="#ch07-13694">Example 7-2</a>. A remote
  EJB interface must extend the <tt class="literal">javax.ejb.EJBObject</tt>
  interface. <tt class="literal">EJBObject</tt> in turn extends the
  <tt class="literal">java.rmi.Remote</tt> interface, which makes the EJB
  remote interface an RMI remote interface as well. </p>
<a name="ch07-13694"></a>
<div class="example">
<h4 class="objtitle">Example 7-2. Remote Interface for the Profile Server Bean </h4>
<blockquote>
<pre class="programlisting">
import javax.ejb.*;
import java.rmi.RemoteException;
import java.rmi.Remote;

public interface ProfileServer extends EJBObject {
  public Profile getProfile(String name)
    throws NoSuchPersonException, RemoteException;
}</pre>
</blockquote>
</div>
<p>The <tt class="literal">ProfileServer</tt> interface defines a single
remote method, <tt class="literal">getProfile()</tt>, that accepts a
username as its only argument. It returns a <tt class="literal">Profile</tt>
object, containing the profile information for the person named. If
the person's profile cannot be found on the server, a
<tt class="literal">NoSuchPersonException</tt> is thrown. This is an
application-specific exception whose implementation isn't shown
here. Since the <tt class="literal">ProfileServer</tt> interface is an RMI
remote interface, its methods must throw
<tt class="literal">RemoteException</tt> in case some RMI communication
problem occurs during a method call. Also, the arguments and return
values for the methods have to be <tt class="literal">Serializable</tt>,
and/or they need to be exportable RMI objects themselves. Our
<tt class="literal">getProfile()</tt> method returns a
<tt class="literal">Profile</tt> object, which we'll implement as an
RMI-exportable object. The remote interface for
<tt class="literal">Profile</tt> is shown in <a href="#ch07-13503">Example 7-3</a>. The interface has
only two remote methods, one to set profile entry values and one to
get those values. Note: the implementation of the
<tt class="literal">Profile</tt> remote interface isn't shown in this
chapter.</p>
<a name="ch07-13503"></a>
<div class="example">
<h4 class="objtitle">Example 7-3. RMI Remote Interface for a Profile Object</h4>
<blockquote>
<pre class="programlisting">
import java.rmi.Remote;
import java.rmi.RemoteException;

public interface Profile extends Remote {
  public String getProfileEntry(String name) throws RemoteException;
  public void setProfileEntry(String name, String value)
    throws RemoteException;
}</pre>
</blockquote>
</div>
<p>When you deploy your EJB object, you can specify who is allowed
to call each method on your bean through the remote interface. In this
case, we might want only certain clients to be able to query for user
profiles, so we might want to limit access to the
<tt class="literal">getProfile()</tt> method on our
<tt class="literal">ProfileServer</tt> bean. We discuss the access control
features of bean deployment descriptors later in the chapter.</p>
<a name="ch07-pgfid-965362"></a>
<h3 class="sect2">7.4.3. The Bean Implementation</h3>
<p>
<a name="INDEX-1842"></a><a name="INDEX-1843"></a><a name="INDEX-1844"></a>

Now that we have a home interface that lets clients create EJB
  references and a remote interface that describes the EJB methods, we
  need to actually implement the EJB object itself. Our
  <tt class="literal">ProfileServerBean</tt> is shown in <a href="#ch07-30132">Example 7-4</a>. If you
  are familiar with RMI, this should look like an RMI server object,
  with some extra methods included. These extra methods are the hooks
  the EJB container uses to manage the bean as a component. At the end
  of the class is the implementation of the
  <tt class="literal">getProfile()</tt> method from the remote
  interface. The <tt class="literal">ejbCreate()</tt> method is also
  included here, to match the <tt class="literal">create()</tt> method on
  the home interface.</p>
<a name="ch07-30132"></a>
<div class="example">
<h4 class="objtitle">Example 7-4. The ProfileServerBean Implementation</h4>
<blockquote>
<pre class="programlisting">
import javax.ejb.*;
import java.rmi.RemoteException;

public class ProfileServerBean implements SessionBean {
  private SessionContext mContext = null;
  
  // Session bean methods
  public void ejbPassivate() {
    System.out.println("ProfileServerBean passivated.");
  }

  public void ejbActivate() {
    System.out.println("ProfileServerBean activated.");
  }

  public void ejbCreate() {
    System.out.println("ProfileServerBean created.");
  }

  public void ejbRemove() {
    System.out.println("ProfileServerBean removed.");
  }

 // Get session context from container
  public void setSessionContext(SessionContext context) {
    System.out.println("ProfileServerBean context set.");
    mContext = context;
  }

 // Business methods
  public Profile getProfile(String name) throws NoSuchPersonException {
    // Here, we just create a ProfileImpl and return it.
    ProfileImpl profile = null;
    try {
      profile = new ProfileImpl(name);
    }
    catch (RemoteException re) {
      System.out.println("Failed creating profile for " + name);
      re.printStackTrace();
      throw new NoSuchPersonException();
    }

    return profile;
  }
}</pre>
</blockquote>
</div>
<p>
<a name="INDEX-1845"></a><a name="INDEX-1846"></a><a name="INDEX-1847"></a><a name="INDEX-1848"></a><a name="INDEX-1849"></a><a name="INDEX-1850"></a>

The class for an EJB object must implement the
<tt class="literal">javax.ejb.EnterpriseBean</tt> interface. This is usually
done indirectly, through either the
<tt class="literal">javax.ejb.SessionBean</tt> interface or the
<tt class="literal">javax.ejb.EntityBean</tt> interface. In our example,
we're defining a session bean, so the
<tt class="literal">ProfileServerBean</tt> class implements the
<tt class="literal">SessionBean</tt> interface. </p>
<p>The EJB class must be declared as <tt class="literal">public</tt>, to allow the container to introspect the class when generating the classes that hook the bean to the container and to allow the container to invoke methods on the bean directly where necessary. The bean class can optionally implement the bean's remote interface, but this isn't strictly required. In our case, we haven't implemented the bean's remote <tt class="literal">ProfileServer</tt> interface in the <tt class="literal">ProfileServerBean</tt> class. When the EJB server generates the classes that bridge the bean to the container, it also provides a class that implements the remote interface and acts as a proxy to the EJB class itself.<a href="#FOOTNOTE-4">[4]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-4"></a>
<p>[4]<a name="INDEX-1851"></a><a name="INDEX-1852"></a>
Depending on the server implementation and how it chooses to generate these classes, it may be useful for you to provide an EJB class that directly implements the remote interface, since it might eliminate one level of method indirection. This is server-dependent, however, so there's no guarantee that this will help (or hurt).</p>
</blockquote>
<p>
<a name="INDEX-1853"></a><a name="INDEX-1854"></a>
In fact, for practical reasons, you probably don't want your EJB
  implementation to implement the remote interface for your bean. The
  remote interface has to extend the <tt class="literal">EJBObject</tt>
  interface, which includes a set of abstract methods that clients can
  use to retrieve the bean's home interface, get the primary key
  for entity beans, etc. When you deploy your bean, you'll use
  tools provided by the EJB container tools to generate stub and
  skeleton classes for the remote interface that implement these
  methods from <tt class="literal">EJBObject</tt>. If you implement the
  remote interface with your bean implementation class, you have to
  provide implementations for the <tt class="literal">EJBObject</tt> methods
  as well.</p>
<p>
<a name="INDEX-1855"></a><a name="INDEX-1856"></a>
All Enterprise JavaBean objects, whether they are session beans or entity beans, must implement the following methods:</p>
<dl>
<dt>
<b><tt class="literal">public void ejbActivate()</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-1857"></a><a name="INDEX-1858"></a><a name="INDEX-1859"></a><a name="INDEX-1860"></a><a name="INDEX-1861"></a><a name="INDEX-1862"></a><a name="INDEX-1863"></a>
Called by the container when the bean has been deserialized from
passive storage on the server. Allows the bean to reclaim any
resources freed during passivation (e.g., file handles, network
connections) or restore any other state not explicitly saved when the
bean was serialized.</p>
</dd>
<dt>
<b><tt class="literal">public void ejbPassivate()</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-1864"></a>
Called by the container just before the bean is to be serialized and stored in passive storage (e.g., disk, database) on the server. Allows the bean to release any non-serializable resources (e.g., open files, network connections).</p>
</dd>
<dt>
<b><tt class="literal">public void ejbCreate(. . .)</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-1865"></a><a name="INDEX-1866"></a><a name="INDEX-1867"></a><a name="INDEX-1868"></a>
Called after the client invokes one of the <tt class="literal">create()</tt> methods on the bean's home interface. The bean and its home interface usually provide at least one <tt class="literal">create()</tt>/<tt class="literal">ejbCreate()</tt> pair to allow the client to create new beans. Session beans are required to provide at least one create method, but create methods are optional on entity beans, since entity beans can also be acquired using finder methods. The container creates the bean object using one of its standard constructors and might create several beans of the same type at server startup to act as a pool for future client requests. The <tt class="literal">ejbCreate()</tt> method indicates that a client is ready to use the bean; the arguments indicate the identity or starting state of the bean. For entity beans, the return type of an <tt class="literal">ejbCreate()</tt> method should be the bean's primary key type (see the later section "Implementing Entity Beans" for more details).</p>
</dd>
<dt>
<b><tt class="literal">public void ejbRemove()</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-1869"></a><a name="INDEX-1870"></a>
Called by the container just before the bean is to be removed from the container and made eligible for garbage collection. The container may call this when all remote and local references to the bean have been removed.</p>
</dd>
</dl>
<p>These methods are used by the bean's container to notify
the bean of various changes in its runtime state. In our example, the
<tt class="literal">ProfileServerBean</tt> doesn't need to perform any
actions in these methods, so they are included as empty methods that
simply print messages to standard output, indicating that they have
been called. </p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch07_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">7.3. Transaction Management</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">7.5. Implementing Session Beans</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
