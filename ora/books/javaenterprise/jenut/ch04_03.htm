<html>
<head>
<title>Putting It in the Public Eye (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Putting It in the Public Eye">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_01.htm">Chapter 4: Java IDL</a></td><td align="right" valign="top" width="172"><a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">4.3. Putting It in the Public Eye</h2>
<p>
<a name="INDEX-994"></a><a name="INDEX-995"></a><a name="INDEX-996"></a><a name="INDEX-997"></a><a name="INDEX-998"></a>
We still need to do some work to make the Java implementation of our
  IDL interface available to remote clients. There are two ways a
  client gets a reference to a remote object: it can get an initial
  object reference using the
  <tt class="literal">ORB.resolve_initial_references()</tt> method and
  somehow find a reference to the object through method calls on the
  initial object, or it can get a "stringified" reference
  to the remote object (an Interoperable Object Reference) and convert
  it locally to a live object reference. </p>
<p>For the first case, the remote object needs to be registered in
  some way with a server-side ORB. In order for you to register a
  remote object, you first have to get a reference to an
  ORB. We'll look at how to do that first, then look at
  registering the remote object with a Naming Service. We discuss the
  stringified object reference technique later in this chapter, when
  we look at how clients can access remote objects.</p>
<a name="ch04-pgfid-969639"></a>
<h3 class="sect2">4.3.1. Initializing the ORB</h3>
<p>
<a name="INDEX-999"></a><a name="INDEX-1000"></a><a name="INDEX-1001"></a><a name="INDEX-1002"></a>

Since the ORB is so central to everything in a CORBA environment, the
first thing any CORBA process needs to do is get a reference to a
local or remote ORB that it can use to find other objects, access
CORBA services, and handle remote method calls. A CORBA participant
initializes its ORB reference by calling one of the static
<tt class="literal">init()</tt> methods on the ORB interface. Each of these
methods returns an <tt class="literal">ORB</tt> object that can find CORBA
objects and services. The standard <tt class="literal">init()</tt> methods
provided on an ORB are as follows (Sun's Java IDL supports all
of these standard initialization methods):</p>
<dl>
<dt>
<b><tt class="literal">public static ORB ORB.init()</tt></b>
</dt>
<dd>
<p>Returns a shared (static) ORB
instance. Each call within the same runtime environment returns the
same ORB reference. If used within an applet context, the ORB has
limited abilities.</p>
</dd>
<dt>
<b><tt class="literal">public static ORB ORB.init(String[] args, Properties props)</tt></b>
</dt>
<dd>
<p>Creates a new ORB using the given
arguments and properties, as discussed in the following paragraphs.</p>
</dd>
<dt>
<b><tt class="literal">public static ORB ORB.init(Applet applet, Properties props)</tt></b>
</dt>
<dd>
<p>Creates a new ORB within an applet context. The applet's codebase and host are used by the ORB as the source of various services, such as the Naming Service.</p>
</dd>
</dl>
<p>
<a name="INDEX-1003"></a><a name="INDEX-1004"></a><a name="INDEX-1005"></a><a name="INDEX-1006"></a><a name="INDEX-1007"></a><a name="INDEX-1008"></a>

There are two standard properties defined for an ORB that can be set in the call to <tt class="literal">init()</tt>, using either the <tt class="literal">String</tt> arguments array or a <tt class="literal">Properties</tt> object. These are the <tt class="literal">ORBClass</tt> and <tt class="literal">ORBSingletonClass</tt> properties, which specify the Java classes to use to create ORBs when an <tt class="literal">init()</tt> method is called. (<tt class="literal">ORBSingletonClass</tt> is a shared ORB instance that is used mainly by generated classes to do things like create <tt class="literal">TypeCode</tt> objects that identify the types of CORBA objects, while <tt class="literal">ORBClass</tt> is a fully functional ORB.) You can use these properties 
to specify a custom ORB implementation. You may want to override the default ORB implementation (<tt class="literal">com.sun.CORBA.iiop.ORB</tt> in Java IDL) with one of your own that has particular performance characteristics. Or you may be running your CORBA code within an applet and want to ensure that a valid ORB is available no matter what browser version your applet encounters.</p>
<p>
<a name="INDEX-1009"></a><a name="INDEX-1010"></a><a name="INDEX-1011"></a><a name="INDEX-1012"></a><a name="INDEX-1013"></a><a name="INDEX-1014"></a><a name="INDEX-1015"></a><a name="INDEX-1016"></a>
Sun's Java IDL also adds two nonstandard properties:
<tt class="literal">ORBInitialHost</tt> and
<tt class="literal">ORBInitialPort</tt>. By default, each
<tt class="literal">ORB.init()</tt> method initializes an ORB that looks for
its services locally. The current version of the Java IDL API
includes a single service, the Naming Service, and the
<tt class="literal">ORB.init()</tt> methods assume that the Naming Service
is listening to port 900 on the local host. Java IDL adds these two
nonstandard properties to allow your local ORB to defer its services
(naming, trading, etc.) to a remote ORB running on a given host and
listening on a given port. Be careful before you decide to depend on
these properties in your application or applet. They are only honored
within Sun's Java IDL implementation of the CORBA standard. If
you want your CORBA application to be portable to any implementation
of the standard IDL-to-Java binding, and you want to use a remote
Naming Service, you should stick to using a stringified reference to
the remote service, obtained through a secondary communication
channel, as we'll discuss shortly.</p>
<p>
<a name="INDEX-1017"></a><a name="INDEX-1018"></a>
Any of these properties can be specified within a <tt class="literal">Properties</tt> object or as a command-line option to a Java application. As an example, if you want to specify a different host to use for finding services like the Naming Service, one way to do this is to specify the host explicitly in the code that initializes the ORB, using a <tt class="literal">Properties</tt> object:</p>
<blockquote>
<pre class="programlisting">
Properties orbProps = new Properties();
orbProps.put("org.omg.CORBA.ORBInitialHost", "remote.orb.com");
ORB myOrb = ORB.init((String[])null, orbProps); </pre>
</blockquote>
<p>Alternately, you can take command-line arguments passed into your Java code and pass them to the <tt class="literal">ORB.init()</tt> method to be parsed. Say we have a class named <tt class="literal">InitRemote</tt> with a main method implemented as follows:</p>
<blockquote>
<pre class="programlisting">
public class InitRemote {
  public static void main(String[] argv) {
    try {
      ORB myOrb = ORB.init(argv, null);
      ...
    }
  }
}</pre>
</blockquote>
<p>In this case, we can specify any ORB properties on the command line using specific argument names:</p>
<blockquote>
<pre class="programlisting">
orbhost% java InitRemote -ORBInitialHost remote.orb.com</pre>
</blockquote>
<p>Note that you can use the second <tt class="literal">ORB.init()</tt> method with both a <tt class="literal">String</tt> arguments array and a <tt class="literal">Properties</tt> list specified, even though the examples here haven't shown that.</p>
<a name="ch04-pgfid-968229"></a>
<h3 class="sect2">4.3.2. Registering with a Naming Service</h3>
<p>
<a name="INDEX-1019"></a><a name="INDEX-1020"></a>

One way to make a server object available to remote clients is to
  register it with the local CORBA Naming Service under a specific
  name. A remote client can then get a reference 


to the root
  <tt class="literal">NamingContext</tt> for the Naming Service and ask for
  the server object by name.</p>
<p>
<a href="#ch04-19578">Example 4-8</a> shows a class whose <tt class="literal">main()</tt> method creates an instance of our <tt class="literal">ThisOrThatServer</tt> implementation and then registers the object with the Naming Service. The program starts by getting a reference to the local ORB. Then it asks the ORB for a reference to the Naming Service (using the standard name "NameService") with the <tt class="literal">resolve_initial_references()</tt> method. This reference is actually the root <tt class="literal">NamingContext</tt>, so we narrow the object reference using <tt class="literal">NamingContextHelper</tt>. We register the <tt class="literal">ThisOrThatServer</tt> with the Naming Service by building an array of <tt class="literal">NameComponent</tt> objects and then calling the <tt class="literal">rebind()</tt> method on the <tt class="literal">NamingContext</tt>. With the object registered, we go into a wait state, waiting for client requests.</p>
<a name="ch04-19578"></a>
<div class="example">
<h4 class="objtitle">Example 4-8. Registering an Object with the Naming Service</h4>
<blockquote>
<pre class="programlisting">
import org.omg.CORBA.*;
import org.omg.CosNaming.*;

public class ServerNamingInit {
  public static void main(String[] argv) {
    try {
      // Obtain ORB reference
      ORB myORB = ORB.init(argv, null); 

      // Make a ThisOrThatServer object to register with the ORB
      ThisOrThatServer impl = new ThisOrThatServerImpl();

      // Get the root name context
      org.omg.CORBA.Object objRef = 
        myORB.resolve_initial_references("NameService");
      NamingContext nc = NamingContextHelper.narrow(objRef);

      // Register the local object with the Name Service
      NameComponent ncomp = new NameComponent("ThisOrThatServer", "");
      NameComponent[] name = {ncomp};
      nc.rebind(name, impl);

      // Go into a wait state, waiting for clients to connect
      System.out.println("Waiting for clients...");
      java.lang.Object dummy = new String("I wait...");
      synchronized (dummy) {
        dummy.wait();
      }
    }
    catch (Exception e) {
      System.out.println("Error occurred while initializing server object:");
      e.printStackTrace();
    }
  }
}</pre>
</blockquote>
</div>
<p>
<a name="INDEX-1021"></a><a name="INDEX-1022"></a><a name="INDEX-1023"></a>
<p>
Note that Example 4-8 imports the <tt class="literal">org.omg.CORBA</tt> and <tt class="literal">org.omg.CosNaming</tt> packages, which are the two main packages in Java IDL. Because of the naming collision between <tt class="literal">java.lang.Object</tt> and <tt class="literal">org.omg.CORBA.Object</tt>, we have to use the fully qualified names of these two classes when we use them in CORBA applications that import <tt class="literal">org.orm.CORBA</tt>. Finally, note that this example binds the <tt class="literal">ThisOrThatServer</tt> object within the root <tt class="literal">NamingContext</tt> using the name "ThisOrThatServer". We'll see shortly how to create subcontexts and bind objects within them.</p>
<p>Before running this initialization of our CORBA object, we need to start a Naming Service on the host for the object. A Naming Service daemon listens for Naming Service requests on a specific port and provides access to the named object directory it manages. In Java IDL, the Naming Service is started using the <em class="emphasis">tnameserv</em> command:</p>
<blockquote>
<pre class="programlisting">
objhost% tnameserv &amp;</pre>
</blockquote>
<p>With that done, we can run our initialization method to register our server object with the ORB:</p>
<blockquote>
<pre class="programlisting">
objhost% java ServerNamingInit</pre>
</blockquote>
<a name="ch04-pgfid-967420"></a>
<h3 class="sect2">4.3.3. Adding Objects to a Naming Context</h3>
<p>
<a name="INDEX-1024"></a><a name="INDEX-1025"></a><a name="INDEX-1026"></a><a name="INDEX-1027"></a>

Initially, a CORBA naming directory is empty, with only its root
<tt class="literal">NamingContext</tt> and no objects. The
<tt class="literal">bind()</tt> method on a <tt class="literal">NamingContext</tt>
object binds a server object to a name within the context. The
<tt class="literal">bind_new_context()</tt> method creates new subcontexts
within a given <tt class="literal">NamingContext</tt>. Using a file
directory analogy, calling <tt class="literal">bind_new_context()</tt> on a
<tt class="literal">NamingContext</tt> object is like making a new
subdirectory, while calling <tt class="literal">bind()</tt> puts a new file
into a directory. </p>
<p>
<a name="INDEX-1028"></a><a name="INDEX-1029"></a>
The Java IDL mapping uses arrays of <tt class="literal">NameComponent</tt>
objects to represent the names of subcontexts within a naming
directory. Each <tt class="literal">NameComponent</tt> represents a
component of the path to the named object. A
<tt class="literal">NameComponent</tt> contains <tt class="literal">id</tt> and
<tt class="literal">kind</tt> string fields that serve to label the
component in the path. Only the <tt class="literal">id</tt> field is
significant in determining name uniqueness. So a
<tt class="literal">NameComponent</tt> with <tt class="literal">id</tt> set to
"student" and <tt class="literal">kind</tt> set to an empty
string conflicts with a <tt class="literal">NameComponent</tt> with an
<tt class="literal">id</tt> of "student" and
<tt class="literal">kind</tt> "doctoral," if both
<tt class="literal">NameComponent</tt> objects are relative to the same
subcontext. The <tt class="literal">NameComponent</tt> class has a
constructor that takes the <tt class="literal">id</tt> and
<tt class="literal">kind</tt> values as arguments. Here's how to
create a single <tt class="literal">NameComponent</tt>:</p>
<blockquote>
<pre class="programlisting">
NameComponent comp1 = new NameComponent("student", "doctoral");</pre>
</blockquote>
<p>A complete name path can be composed as an array of these objects:</p>
<blockquote>
<pre class="programlisting">
NameComponent path[] = { comp1, comp2, ... };</pre>
</blockquote>
<p>
<a name="INDEX-1030"></a>
The <tt class="literal">bind()</tt> method takes two arguments: an array of
  <tt class="literal">NameComponent</tt> objects as the relative name for
  the object you're putting into the Naming Service and the
  server object itself. If you're binding a server object using
  the root context of the Naming Service, the name is also the
  absolute name of the object in the overall naming directory. If an
  object is already bound to the name, you can use the
  <tt class="literal">rebind()</tt> method with the same arguments, causing
  the existing object bound to that name to be replaced by the new
  object. Note that since the Naming Service is a CORBA service that
  can be accessed remotely by other CORBA clients, the objects it
  contains need to be exportable to these remote clients. This means
  that only <tt class="literal">org.omg.CORBA.Object</tt> references can be
  bound to names within a <tt class="literal">NamingContext</tt>. </p>
<p>The following code binds a few of our
<tt class="literal">ThisOrThatServer</tt> objects to names within the root
context of a Naming Service:</p>
<blockquote>
<pre class="programlisting">
// Get the root naming context
ORB myORB = ORB.init(...);
org.omg.CORBA.Object ref = 	myORB.resolve_initial_references("NameService");
NamingContext rootNC = NamingContextHelper.narrow(ref);

// Create a few servers
org.omg.CORBA.Object ref1 = new ThisOrThatServerImpl();
org.omg.CORBA.Object ref2 = new ThisOrThatServerImpl();

// Bind them to names in the Naming Service
NameComponent name1 = new NameComponent("server1", "");
NameComponent path1[] = { name1 };
NameComponent name2 = new NameComponent("server2", "");
NameComponent path2[] = { name2 };
rootNC.bind(path1, ref1);
rootNC.bind(path2, ref2);</pre>
</blockquote>
<p>
<a name="INDEX-1031"></a><a name="INDEX-1032"></a>
Before you can bind an object to a name with multiple components, all the subcontexts (subdirectories) have to be created using the <tt class="literal">bind_new_context()</tt> method on a <tt class="literal">NamingContext</tt>. The <tt class="literal">bind_new_context()</tt> method takes an array of <tt class="literal">NameComponent</tt> objects as the relative path of the new context and a reference to the <tt class="literal">NamingContext</tt> object to bind to that location in the overall directory. A new <tt class="literal">NamingContext</tt> object can be created from an existing one by calling its <tt class="literal">new_context()</tt> method. If a context already exists at the target name, you can use the <tt class="literal">rebind_context()</tt> method to replace the existing context with a new one. This is useful for emptying out an entire subcontext without removing each object individually.</p>
<p>Here is an example that binds some objects within various subcontexts:</p>
<blockquote>
<pre class="programlisting">
// Get the root context, as before
NamingContext rootNC = ...;

// Create the components to the subcontext name
NameComponent comp1 = new NameComponent("servers", "");
NameComponent ttComp = new NameComponent("ThisOrThat", "");
NameComponent otherComp= new NameComponent("misc", "");

// Create each subcontext within the root context and bind them
// to their appropriate names
// Create a new context, bind it to the name "servers"
// off the root NamingContext
NamingContext context1 = rootNC.new_context();
NameComponent path1[] = { comp1 };
rootNC.bind_context(path1, context1);
// Create another context, bind it to the name "servers, ThisOrThat"
NamingContext ttDir = rootNC.new_context();
NameComponent path2_1[] = { comp1, ttComp };
rootNC.bind_context(path2_1, ttDir);
// Create another context, bind it to the name "servers, misc"
NamingContext otherDir = rootNC.new_context();
NameComponent path2_2[] = { comp1, otherComp };
rootNC.bind_context(path2_2, otherDir);

// Now we can bind servers to a name within any of the new subcontexts
org.omg.CORBA.Object ttRef = new ThisOrThatServerImpl();
org.omg.CORBA.Object otherRef = new SomeOtherServerImpl();


// Bind the other server to the "misc" branch of the "servers" dir.
NameComponent yetAnotherComp = new NameComponent("SomeOtherServer", "");
NameComponent otherPath[] = { comp1, otherComp, yetAnotherComp };
rootNC.bind(otherPath, otherRef);

// Bind the ThisOrThatServer to the appropriate branch under "servers"
NameComponent tt1Comp = new NameComponent("server1", "");
NameComponent ttPath[] = { comp1, ttComp, tt1Comp };
rootNC.bind(ttPath, ttRef);</pre>
</blockquote>
<p>
<a name="INDEX-1033"></a><a name="INDEX-1034"></a>
If you try to bind an object or a subcontext to a name within a
  context that hasn't been created yet, a
  <tt class="literal">org.omg.CosNaming.NamingContextPackage.NotFound</tt>
  exception is thrown.</p>
<p>Note that names used in the <tt class="literal">bind()</tt> or
  <tt class="literal">rebind()</tt> methods are relative to the
  <tt class="literal">NamingContext</tt> object that they're called
  on. This means we can bind our <tt class="literal">ThisOrThatServer</tt>
  object in the previous example to the same absolute name within the
  directory by replacing the last two lines of the example with the
  following:</p>
<blockquote>
<pre class="programlisting">
NameComponent relObjPath[] = { tt1Comp };
ttDir.bind(relObjPath, ttRef);</pre>
</blockquote>
<p>The <tt class="literal">ttDir</tt> context is bound to the
<tt class="literal">{"servers", "ThisOrThat"}</tt>
subdirectory, so binding an object to the name
<tt class="literal">{"server1"}</tt> within this context is
equivalent to binding it to the full path
<tt class="literal">{"servers", "ThisOrThat",
"server1"}</tt> from the root context. You can use
similar shorthand when binding new contexts within a directory. In
other words, you can bind a context to a relative name within a
subcontext, instead of an absolute name within the root context.</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.2. Creating CORBA Objects</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.4. Finding Remote Objects</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
