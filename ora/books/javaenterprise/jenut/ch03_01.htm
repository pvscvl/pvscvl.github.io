<html>
<head>
<title>Remote Method Invocation (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Remote Method Invocation">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_13.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_13.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part1.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/part1.htm">Part 1: Introducing the Java Enterprise APIs</a></td><td align="right" valign="top" width="172"><a href="ch03_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 3.  Remote Method Invocation</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_01.htm">Introduction to RMI</a>
<br>
<a href="ch03_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_02.htm">Defining Remote Objects</a>
<br>
<a href="ch03_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_03.htm">Creating the Stubs and Skeletons</a>
<br>
<a href="ch03_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_04.htm">Accessing Remote Objects as a Client</a>
<br>
<a href="ch03_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_05.htm">Dynamically Loaded Classes</a>
<br>
<a href="ch03_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_06.htm">Remote Object Activation</a>
<br>
<a href="ch03_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_07.htm">RMI and Native Method Calls</a>
<br>
<a href="ch03_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_08.htm">RMI over IIOP</a>
<br>
</p>
</div>

<p>
<a name="INDEX-493"></a><a name="INDEX-494"></a>
This chapter examines the Java Remote Method Invocation (RMI)
API--Java's native scheme for creating and using remote
objects. Java RMI provides the following elements:</p>
<ul>
<li>
<p>Remote object implementations</p>
</li>
<li>
<p>
<a name="INDEX-495"></a><a name="INDEX-496"></a>
Client interfaces, or stubs, to remote objects</p>
</li>
<li>
<p>A remote object registry for finding objects on the network</p>
</li>
<li>
<p>A network protocol for communication between remote objects and their
client</p>
</li>
<li>
<p>A facility for automatically creating (activating) remote objects
on-demand</p>
</li>
</ul>
<p>
<a name="INDEX-497"></a><a name="INDEX-498"></a>
Each of these elements (except the last one) has a Java interface defined for 
it within the <tt class="literal">java.rmi</tt> package and its subpackages, which comprise the RMI API. Using these interfaces, you can develop remote
  objects and the clients that use them to create a distributed
application that resides on hosts across the network.</p>
<h2 class="sect1">3.1. Introduction to RMI</h2>
<p>
<a name="INDEX-499"></a><a name="INDEX-500"></a>
RMI is the distributed object system that is built into the core Java
  environment. You can think of RMI as a built-in facility for Java
  that allows you to interact with objects that are actually running
  in Java virtual machines on remote hosts on the network. With RMI
  (and other distributed object APIs we discuss in this book), you can
  get a reference to an object that "lives" in a remote
  process and invoke methods on it as if it were a local object
  running within the same virtual machine as your code (hence the
  name, "Remote Method Invocation API"). </p>
<p>RMI was added to the core Java API in Version 1.1 of the JDK
(and enhanced for Version 1.2 of 
the Java 2 platform), in recognition of the critical
need for support for distributed objects in distributed-application
development. Prior to RMI, writing a distributed application involved
basic socket programming, where a "raw" communication
channel was used to pass messages and data between two remote
processes. Now, with RMI and distributed objects, you can
"export" an object as a remote object, so that other
remote processes/agents can access it directly as a Java object. So,
instead of defining a low-level message protocol and data transmission
format between processes in your distributed application, you use Java
interfaces as the "protocol" and the exported method
arguments become the data transmission format. The distributed object
system (RMI in this case) handles all the underlying networking needed
to make your remote method calls work.</p>
<p>
<a name="INDEX-501"></a><a name="INDEX-502"></a>
Java RMI is a Java-only distributed object scheme; the objects
in an RMI-based distributed application have to be implemented in
Java. Some other distributed object schemes, most notably CORBA, are
language-independent, which means that the objects can be implemented
in any language that has a defined binding. With CORBA, for example,
bindings exist for C, C++, Java, Smalltalk, and Ada, among other
languages.</p>
<p>
<a name="INDEX-503"></a><a name="INDEX-504"></a><a name="INDEX-505"></a>
The advantages of RMI primarily revolve around the fact that it
is "Java-native." Since RMI is part of the core Java API
and is built to work directly with Java objects within the Java VM,
the integration of its remote object facilities into a Java
application is almost seamless. You really can use RMI-enabled objects
as if they live in the local Java environment. And since Java RMI is
built on the assumption that both the client and server are Java
objects, RMI can extend the internal garbage-collection mechanisms of
the standard Java VM to provide distributed garbage collection of
remotely exported objects.</p>
<p>
<a name="INDEX-506"></a><a name="INDEX-507"></a><a name="INDEX-508"></a><a name="INDEX-509"></a><a name="INDEX-510"></a>

If you have a distributed application with heterogeneous
components, some of which are written in Java and some that
aren't, you have a few choices. You can use RMI, wrapping the
non-Java code with RMI-enabled Java objects using the Java Native
Interface (JNI). At the end of this chapter, we discuss this first
option in some detail, to give you a feeling for where it could be
useful and where it wouldn't. Another option is to use another
object distribution scheme, such as CORBA, that supports
language-independent object interfaces. <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_01.htm">Chapter 4, "Java IDL"</a>, covers the Java interface to CORBA that is included in the Java 2 SDK. A third option involves the new RMI/IIOP
functionality that allows RMI objects to communicate directly with
remote CORBA objects over IIOP. We also discuss this option in some
detail at the end of this chapter.</p>
<a name="ch03-pgfid-965707"></a>
<h3 class="sect2">3.1.1. RMI in Action</h3>
<p>Before we start examining the details of using RMI, let's
look at a simple RMI remote object at work. We can create an
<tt class="literal">Account</tt> object that represents some kind of bank
account and then use RMI to export it as a remote object so that
remote clients (e.g., ATMs, personal finance software running on a PC)
can access it and carry out transactions.</p>
<p>
<a name="INDEX-511"></a><a name="INDEX-512"></a><a name="INDEX-513"></a>
The first step is to define the interface for our remote
object. <a href="#ch03-23521">Example 3-1</a> shows the
<tt class="literal">Account</tt> interface. You can tell that it's an
RMI object because it extends the <tt class="literal">java.rmi.Remote</tt>
interface. Another signal that this is meant for remote access is that
each method can throw a
<tt class="literal">java.rmi.RemoteException</tt>. The
<tt class="literal">Account</tt> interface includes methods to get the
account name and 


balance and to make deposits, withdrawals, and
transfers. </p>
<a name="ch03-23521"></a>
<div class="example">
<h4 class="objtitle">Example 3-1. A Remote Account Interface</h4>
<blockquote>
<pre class="programlisting">
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.List;

public interface Account extends Remote {
  public String getName() throws RemoteException;
  public float getBalance() throws RemoteException;
  public void withdraw(float amt) throws RemoteException;
  public void deposit(float amt) throws RemoteException;
  public void transfer(float amt, Account src) throws RemoteException;
  public void transfer(List amts, List srcs) throws RemoteException;
}</pre>
</blockquote>
</div>
<p>
<a name="INDEX-514"></a><a name="INDEX-515"></a><a name="INDEX-516"></a>
The next step is to create an implementation of this interface, which
leads to the <tt class="literal">AccountImpl</tt> class shown in <a href="#ch03-16794">Example 3-2</a>. This class implements all the methods
listed in the <tt class="literal">Account</tt> interface and adds a
constructor that takes the name of the new account to be
created. Notice that the <tt class="literal">AccountImpl</tt> class
implements the <tt class="literal">Account</tt> interface, but it also
extends the <tt class="literal">java.rmi.UnicastRemoteObject</tt>
class. This RMI class provides some of the basic remote functionality
for server objects.</p>
<a name="ch03-16794"></a>
<div class="example">
<h4 class="objtitle">Example 3-2. Implementation of the Remote Account Interface</h4>
<blockquote>
<pre class="programlisting">
import java.rmi.server.UnicastRemoteObject;
import java.rmi.RemoteException;
import java.util.List;
import java.util.ListIterator;

public class AccountImpl extends UnicastRemoteObject implements Account {
  private float mBalance = 0;
  private String mName = "";

  // Create a new account with the given name
  public AccountImpl(String name) throws RemoteException {
    mName = name;
  }

  public String getName() throws RemoteException {
    return mName;
  }
  public float getBalance() throws RemoteException {
    return mBalance;
  }

  // Withdraw some funds
  public void withdraw(float amt) throws RemoteException {
    mBalance -= amt;
    // Make sure balance never drops below zero
    mBalance = Math.max(mBalance, 0);
  }   

  // Deposit some funds
  public void deposit(float amt) throws RemoteException {
    mBalance += amt;
  }

  // Move some funds from another (remote) account into this one
  public void transfer(float amt, Account src) throws RemoteException {
    src.withdraw(amt);
    this.deposit(amt);
  }

  // Make several transfers from other (remote) accounts into this one
  public void transfer(List amts, List srcs) throws RemoteException {
    ListIterator amtCurs = amts.listIterator();
    ListIterator srcCurs = srcs.listIterator();
    // Iterate through the accounts and the amounts to be transferred from
    // each (assumes amounts are given as Float objects)
    while (amtCurs.hasNext() &amp;&amp; srcCurs.hasNext()) {
      Float amt = (Float)amtCurs.next();
      Account src = (Account)srcCurs.next();
      this.transfer(amt.floatValue(), src);
    }
  }
}</pre>
</blockquote>
</div>
<p>
<a name="INDEX-517"></a><a name="INDEX-518"></a><a name="INDEX-519"></a><a name="INDEX-520"></a>
Once the remote interface and an implementation of it are complete, you need to compile both Java files with your favorite Java compiler. After this is done, you use the RMI stub/skeleton compiler to generate a client stub and a server skeleton for the <tt class="literal">AccountImpl</tt> object. The stub and skeleton handle the communication between the client application and the server object. With Sun's Java SDK, the RMI compiler is called <em class="emphasis">rmic</em>, and you can invoke it for this example like so:</p>
<blockquote>
<pre class="programlisting">
% rmic -d /home/classes AccountImpl</pre>
</blockquote>
<p>The stub and skeleton classes are generated and stored in the
directory given by the <tt class="literal">-d</tt> option
(<em class="filename">/home/classes</em>, in this case). This example
assumes that the <tt class="literal">AccountImpl</tt> class is already in
your <tt class="literal">CLASSPATH</tt> before you run the RMI
compiler.</p>
<p>
<a name="INDEX-521"></a><a name="INDEX-522"></a><a name="INDEX-523"></a><a name="INDEX-524"></a><a name="INDEX-525"></a>

There's just one more thing we need to do before we can actually use our remote object: register it with an RMI registry, so that remote clients can find it on the network. The utility class that follows, <tt class="literal">RegAccount</tt>, does this by creating an <tt class="literal">AccountImpl</tt> object and then binding it to a name in the local registry using the <tt class="literal">java.rmi.Naming</tt> interface. After it's done registering the object, the class
goes into a <tt class="literal">wait()</tt>, which allows remote clients to
connect to the remote object:</p>
<blockquote>
<pre class="programlisting">
import java.rmi.Naming;

public class RegAccount {
  public static void main(String argv[]) {
    try {
      // Make an Account with a given name
      AccountImpl acct = new AccountImpl("JimF");

      // Register it with the local naming registry
      Naming.rebind("JimF", acct);
      System.out.println("Registered account.");
    }
    catch (Exception e) {
      e.printStackTrace();


    }
  }
}</pre>
</blockquote>
<p>
<a name="INDEX-526"></a>
After you compile the <tt class="literal">RegAccount</tt> class, you can run its <tt class="literal">main()</tt> method to register an <tt class="literal">Account</tt> with the local RMI registry. First, however, you need to start the registry. With Sun's Java SDK, the registry can be started using the <em class="emphasis">rmiregistry</em> utility. On a Unix machine, this can be done like so:</p>
<blockquote>
<pre class="programlisting">
objhost% rmiregistry &amp;</pre>
</blockquote>
<p>Once the registry is started, you can invoke the <tt class="literal">main()</tt> method on the <tt class="literal">RegAccount</tt> class simply by running it:</p>
<blockquote>
<pre class="programlisting">
objhost% java RegAccount
Registered account.</pre>
</blockquote>
<p>
<a name="INDEX-527"></a>

Now we have a remote <tt class="literal">Account</tt> object that is ready and waiting for a client to access it and call its methods. The following client code does just this, by first looking up the remote <tt class="literal">Account</tt> object using the <tt class="literal">java.rmi.Naming</tt> interface (and assuming that the <tt class="literal">Account</tt> object was registered on a machine named <em class="emphasis">objhost.org</em>), and then calling the deposit method on the <tt class="literal">Account</tt> object:</p>
<blockquote>
<pre class="programlisting">
import java.rmi.Naming;

public class AccountClient {
  public static void main(String argv[]) {
    try {
      // Lookup account object
      Account jimAcct = (Account)Naming.lookup("rmi://objhost.org/JimF");

      // Make deposit
      jimAcct.deposit(12000);

      // Report results and balance.
      System.out.println("Deposited 12,000 into account owned by " +
                         jimAcct.getName());
      System.out.println("Balance now totals: " + jimAcct.getBalance());
    }
    catch (Exception e) {
      System.out.println("Error while looking up account:");
      e.printStackTrace();
    }
  }
}</pre>
</blockquote>
<p>The first time you run this client, here's what
      you'd do:</p>
<blockquote>
<pre class="programlisting">
% java AccountClient
Deposited 12,000 into account owned by JimF
Balance now totals: 12000.0</pre>
</blockquote>
<p>For the sake of this example, I've assumed that the client process is running on a machine with all the necessary classes available locally (the <tt class="literal">Account</tt> interface and the stub and skeleton classes generated from the <tt class="literal">AccountImpl</tt> implementation). Later in the chapter, we'll see how to deal with loading these classes remotely when the client doesn't have them locally.</p>
<a name="ch03-pgfid-966146"></a>
<h3 class="sect2">3.1.2. RMI Architecture</h3>
<p>
<a name="INDEX-528"></a><a name="INDEX-529"></a>
Now that we've seen a complete example of an RMI object in action, let's look at what makes remote objects work, starting with an overview of the underlying RMI architecture. There are three layers that comprise the basic remote-object communication facilities in RMI:</p>
<ul>
<li>
<p>
<a name="INDEX-530"></a><a name="INDEX-531"></a><a name="INDEX-532"></a>
The <em class="emphasis">stub/skeleton</em> layer, which provides the interface that client and server application objects use to interact with each other.</p>
</li>
<li>
<p>
<a name="INDEX-533"></a>
The <em class="emphasis">remote reference</em> layer, which is the middleware between the stub/skeleton layer and the underlying transport protocol. This layer handles the creation and management of remote object references.</p>
</li>
<li>
<p>
<a name="INDEX-534"></a>
The <em class="emphasis">transport protocol</em> layer, which is the binary data protocol that sends remote object requests over the wire.</p>
</li>
</ul>
<p>These layers interact with each other as shown in <a href="#ch03-98125">Figure 3-1</a>. In this figure, the server is the application that provides remotely accessible objects, while the client is any remote application that communicates with these server objects. </p>
<p>
<a name="INDEX-535"></a>

In a distributed object system, the distinctions between clients and
servers can get pretty blurry at times. Consider the case where one
process registers a remote-enabled object with the RMI naming service,
and a number of remote processes are accessing it. We might be tempted
to call the first process the server and the other processes the
clients. But what if one of the clients calls a method on the remote
object, passing a reference to an RMI object that's local to the
client. Now the server has a reference to and is using an object
exported from the client, which turns the tables somewhat. The
"server" is really the server for one object and the
client of another object, and the "client" is a client and
a server, too. For the sake of discussion, I'll refer to a
process in a distributed application as a server or client if its role
in the overall system is generally limited to one or the other. In
peer-to-peer systems, where there is no clear client or server,
I'll refer to elements of the system in terms of
application-specific roles (e.g., chat participant, chat facilitator).
</p>
<a name="ch03-98125"></a>
<div class="figure">
<img alt="figure" src="figs/Jent.0301.gif" webstripperlinkwas="figs/Jent.0301.gif"></div>
<h4 class="objtitle">Figure 3-1. The RMI runtime architecture</h4>
<p>
<a name="INDEX-536"></a><a name="INDEX-537"></a><a name="INDEX-538"></a><a name="INDEX-539"></a><a name="INDEX-540"></a>
As you can see in <a href="#ch03-98125">Figure 3-1</a>, a client makes a
request of a remote object using a client-side stub; the server object
receives this request from a server-side object skeleton. A client
initiates a remote method invocation by calling a method on a stub
object. The stub maintains an internal reference to the remote object
it represents and forwards the method invocation request through the remote reference layer by <em class="emphasis">marshalling</em> the method
arguments into serialized form and asking the remote reference layer
to forward the method request and arguments to the appropriate remote
object. Marshalling involves converting local objects into portable
form so that they can be transmitted to a remote process. Each object
is checked as it is marshaled, to determine whether it implements the
<tt class="literal">java.rmi.Remote</tt> interface. If it does, its remote
reference is used as its marshaled data. If it isn't a
<tt class="literal">Remote</tt> object, the argument is serialized into
bytes that are sent to the remote host and reconstituted into a copy
of the local object. If the argument is neither <tt class="literal">Remote</tt> nor <tt class="literal">Serializable</tt>, the
stub throws a <tt class="literal">java.rmi.MarshalException </tt>back to the
client. 
<a name="INDEX-541"></a><a name="INDEX-542"></a>
</p>
<p>
<a name="INDEX-543"></a>

If the marshalling of method arguments succeeds, the client-side
remote reference layer receives the remote reference and marshaled
arguments from the stub. This layer converts the client request into
low-level RMI transport requests according to the type of remote
object communication being used. In RMI, remote objects can
(potentially) run under several different communication styles, such
<a name="INDEX-544"></a><a name="INDEX-545"></a><a name="INDEX-546"></a>
as point-to-point object references, replicated objects, or multicast
objects. The remote reference layer is responsible for knowing which
communication style is in effect for a given remote object and
generating the corresponding transport-level requests. In the current
<a name="INDEX-547"></a>
version of RMI (Version 1.2 of Java 2), the only communication style provided out of
the box is point-to-point object references, so this is the only style
we'll discuss in this chapter. For a point-to-point communication,
the remote reference layer constructs a single network-level request
and sends it over the wire to the sole remote object that corresponds
to the remote reference passed along with the request.</p>
<p>
<a name="INDEX-548"></a>
On the server, the server-side remote reference layer receives
the transport-level request and converts it into a request for the
server skeleton that matches the referenced object. The skeleton
converts the remote request into the appropriate method call on the
<a name="INDEX-549"></a><a name="INDEX-550"></a><a name="INDEX-551"></a>
actual server object, which involves <em class="emphasis">unmarshalling</em>
the method arguments into the server environment and passing them to
the server object. As you might expect, unmarshalling is the inverse
procedure to the marshalling process on the client. Arguments sent as
remote references are converted into local stubs on the server, and
arguments sent as serialized objects are converted into local copies
of the originals. </p>
<p>
<a name="INDEX-552"></a>
If the method call generates a return value or an exception, the
skeleton marshals the object for transport back to the client and
forwards it through the server reference layer. This result is sent
back using the appropriate transport protocol, where it passes through
the client reference layer and stub, is unmarshaled by the stub, and
is finally handed back to the client thread that invoked the remote
method.</p>
<a name="ch03-pgfid-958824"></a>
<h3 class="sect2">3.1.3. RMI Object Services</h3>
<p>
<a name="INDEX-553"></a><a name="INDEX-554"></a>
On top of its remote object architecture, RMI provides some basic
  object services you can use in your distributed application. These
  include an object naming/registry service, a remote object
  activation service, and distributed garbage collection.</p>
<a name="ch03-pgfid-958826"></a>
<h3 class="sect3">3.1.3.1. Naming/registry service</h3>
<p>
<a name="INDEX-555"></a><a name="INDEX-556"></a><a name="INDEX-557"></a><a name="INDEX-558"></a><a name="INDEX-559"></a><a name="INDEX-560"></a><a name="INDEX-561"></a><a name="INDEX-562"></a><a name="INDEX-563"></a><a name="INDEX-564"></a>
When a server process wants to export some RMI-based service to
clients, it does so by registering one or more RMI-enabled objects
with its local RMI registry (represented by the
<tt class="literal">Registry</tt> interface). Each object is registered with
a name clients can use to reference it. A client can obtain a stub
reference to the remote object by asking for the object by name
through the <tt class="literal">Naming</tt> interface. The
<tt class="literal">Naming.lookup()</tt> method takes the fully qualified
name of a remote object and locates the object on the network. The
object's fully qualified name is in a URL-like syntax that
includes the name of the object's host and the object's
registered name.</p>
<p>
<a name="INDEX-565"></a><a name="INDEX-566"></a><a name="INDEX-567"></a>
It's important to note that, although the
<tt class="literal">Naming</tt> interface is a default naming service
provided with RMI, the RMI registry can be tied into other naming
services by vendors. Sun has provided a binding to the RMI registry
through the Java Naming and Directory Interface ( JNDI), for
example. See <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch06_01.htm">Chapter 6, "JNDI"</a>, for more details on
how JNDI can be used to look up objects (remote or otherwise).</p>
<p>Once the <tt class="literal">lookup()</tt> method locates the
object's host, it consults the RMI registry on that host and
asks for the object by name. If the registry finds the object, it
generates a remote reference to the object and delivers it to the
client process, where it is converted into a stub reference that is
returned to the caller. Once the client has a remote reference to the
server object, communication between the client and the server
commences as described earlier. We'll talk in more detail about
the <tt class="literal">Naming</tt> and <tt class="literal">Registry</tt>
interfaces later in this chapter. </p>
<a name="ch03-pgfid-958828"></a>
<h3 class="sect3">3.1.3.2. Object activation service</h3>
<p>
<a name="INDEX-568"></a><a name="INDEX-569"></a>
The remote object activation service is new to RMI as of Version 1.2
of the Java 2 platform. It provides a way for server objects to be
started on an as-needed basis. Without remote activation, a server
object has to be registered with the RMI registry service from within
a running Java virtual machine. A remote object registered this way is
only available during the lifetime of the Java VM that registered
it. If the server VM halts or crashes for some reason, the server
object becomes unavailable and any existing client references to the
object become invalid. Any further attempts by clients to call methods
through these now-invalid references result in RMI exceptions being
thrown back to the client. </p>
<p>The RMI activation service provides a way for a server object to
be activated automatically when a client requests it. This involves
creating the server object within a new or existing virtual machine
and obtaining a reference to this newly created object for the client
that caused the activation. A server object that wants to be activated
automatically needs to register an activation method with the RMI
activation daemon running on its host. We'll discuss the RMI
activation service in more detail later in the chapter.</p>
<a name="ch03-pgfid-958830"></a>
<h3 class="sect3">3.1.3.3. Distributed garbage collection</h3>
<p>
<a name="INDEX-570"></a><a name="INDEX-571"></a>

The last of the remote object services, distributed garbage
collection, is a fairly automatic process that you as an application
developer should never have to worry about. Every server that contains
RMI-exported objects automatically maintains a list of remote
references to the objects it serves. Each client that requests and
receives a reference to a remote object, either explicitly through the
registry/naming service or implicitly as the result of a remote method
call, is issued this remote object reference through the remote
reference layer of the object's host process. The reference
layer automatically keeps a record of this reference in the form of an
expirable "lease" on the object. When the client is done
with the reference and allows the remote stub to go out of scope, or
when the lease on the object expires, the reference layer on the host
automatically deletes the record of the remote reference and notifies
the client's reference layer that this remote reference has
expired. The concept of expirable leases, as opposed to strict on/off
references, is used to deal with situations where a client-side
failure or a network failure keeps the client from notifying the
server that it is done with its reference to an object. </p>
<p>When an object has no further remote references recorded in the
remote reference layer, it becomes a candidate for garbage
collection. If there are also no further local references to the
object (this reference list is kept by the Java VM itself as part of
its normal garbage-collection algorithm), the object is marked as
garbage and picked up by the next run of the system garbage
collector. </p>









<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_13.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch02_13.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.13. JDBC 2.0</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.2. Defining Remote Objects</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
