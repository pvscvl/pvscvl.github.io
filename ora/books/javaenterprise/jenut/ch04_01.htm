<html>
<head>
<title>Java IDL (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Java IDL">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_08.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part1.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/part1.htm">Part 1: Introducing the Java Enterprise APIs</a></td><td align="right" valign="top" width="172"><a href="ch04_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h1 class="chapter">Chapter 4.  Java IDL</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_01.htm">The CORBA Architecture</a>
<br>
<a href="ch04_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_02.htm">Creating CORBA Objects</a>
<br>
<a href="ch04_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_03.htm">Putting It in the Public Eye</a>
<br>
<a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_04.htm">Finding Remote Objects</a>
<br>
<a href="ch04_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_05.htm">What If I Don't Know the Interface?</a>
<br>
</p>
</div>

<p>
<a name="INDEX-858"></a><a name="INDEX-859"></a><a name="INDEX-860"></a><a name="INDEX-861"></a><a name="INDEX-862"></a><a name="INDEX-863"></a><a name="INDEX-864"></a><a name="INDEX-865"></a><a name="INDEX-866"></a>
The Java IDL API, introduced in Version 1.2 of the Java 2 platform,
provides an interface between Java programs and distributed objects
and services built using the Common Object Request Broker Architecture
(CORBA). CORBA is a standard defined by the Object Management Group
(OMG). It describes an architecture, interfaces, and protocols that
distributed objects can use to interact with each other. Part of the
CORBA standard is the Interface Definition Language (IDL), which is an
implementation-independent language for describing the interfaces of
remote-capable objects. There are standard mappings defined by the OMG
for converting IDL interfaces into C++ classes, C code, and Java
classes, among other things. These generated classes use the
underlying CORBA framework to communicate with remote clients and give
you the basis for implementing and exporting your own distributed
objects. Java IDL is an implementation of the standard IDL-to-Java
mapping and is provided by Sun with the standard Java SDK in the
<tt class="literal">org.omg.CORBA</tt> and
<tt class="literal">org.omg.CosNaming</tt> packages and their
subpackages.<a href="#FOOTNOTE-1">[1]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-1"></a>
<p>[1]The version of
Java IDL shipped with Version 1.2 of Java 2 is compliant with the
CORBA 2.x specification.</p>
</blockquote>
<p>
<a name="INDEX-867"></a>
Like RMI, Java IDL gives you a way to access remote objects over
the network. It also provides the tools you need to make your objects
accessible to other CORBA clients. If you export a Java class using
Java IDL, you can create an instance of that class and publish it
through a naming/directory service. A remote client can find this
object, call methods on it, and receive data from it, just as if it
were running on the client's local machine. Unlike RMI, however,
objects that are exported using CORBA can be accessed by clients
implemented in any language with an IDL binding (C, C++, Ada, etc.).</p>
<p>
<a name="INDEX-868"></a><a name="INDEX-869"></a><a name="INDEX-870"></a><a name="INDEX-871"></a><a name="INDEX-872"></a>
The CORBA standard is extensive, to say the least. In addition
to the basic remote object architecture and the syntax of IDL, it also
includes specifications for several distributed object services, like
an object naming service, a security policy service, and persistent
object services. It would be foolhardy to attempt to cover all these
topics completely in one chapter, so I won't. Instead,
I'll just cover the basic features of the CORBA architecture and
the IDL syntax. We'll also look at the Naming Service, which is
key to almost every CORBA application because it provides a standard way to
find remote CORBA objects on the network. With that under our belts,
we'll take a look at the Java IDL API and the
<em class="emphasis">idltojava</em> compiler and how together they give you
an interface from your Java code to CORBA objects and services. They
also give you the tools you need to create your own CORBA objects,
implemented in Java. </p>
<p>The rest of this chapter is broken down roughly into three
parts. In the first part, we'll look at an overview of the CORBA
architecture and how it allows you to create, export, access, and
manage remote objects. In the second part, we'll explore the
details of creating your own CORBA objects. Finally, we'll look
at how clients can remotely access your CORBA objects.</p>
<h2 class="sect1">4.1. The CORBA Architecture</h2>
<p>
<a name="INDEX-873"></a><a name="INDEX-874"></a><a name="INDEX-875"></a><a name="INDEX-876"></a><a name="INDEX-877"></a><a name="INDEX-878"></a>
At its core, the CORBA architecture for distributed objects shares
  many features with the architecture used by Java RMI. A description
  of a remote object is used to generate a client stub interface and a
  server skeleton interface for the object. A client application
  invokes methods on a remote object using the client stub. The method
  request is transmitted through the underlying infrastructure to the
  remote host, where the server skeleton for the object is asked to
  invoke the method on the object itself. Any data resulting from the
  method call (return values, exceptions) is transmitted back to the
  client by the communication infrastructure.</p>
<p>
<a name="INDEX-879"></a><a name="INDEX-880"></a><a name="INDEX-881"></a><a name="INDEX-882"></a><a name="INDEX-883"></a><a name="INDEX-884"></a><a name="INDEX-885"></a>
But that's where the similarities between CORBA and RMI
  end. CORBA was designed from the start to be a language-independent
  distributed object standard, so it is much more extensive and
  detailed in its specification than RMI is (or needs to be). For the
  most part, these extra details are required in CORBA because it
  needs to support languages that have different built-in
  features. Some languages, like C++, directly support objects, while
  others, like C, don't. The CORBA standard needs to include a
  detailed specification of an object model so that nonobject-oriented
  languages can take advantage of CORBA. Java includes built-in
  support for communicating object interfaces and examining them
  abstractly (using Java bytecodes and the Java Reflection API). Many
  other languages do not. So the CORBA specification includes details
  about a Dynamic Invocation Interface and a Dynamic Skeleton
  Interface, which can be implemented in languages that don't
  have their own facilities for these operations. In languages that do
  have these capabilities, like Java, there needs to be a mapping
  between the built-in features and the features as defined by the
  CORBA specification.</p>
<p>The rest of this section provides an overview of the major
components that make up the CORBA architecture: the Interface
Definition Language, which is how CORBA interfaces are defined; the
Object Request Broker (ORB), which is responsible for handling all
interactions between remote objects and the applications that use
them; the Naming Service, a standard service in CORBA that lets remote
clients find remote objects on the network; and the inter-ORB
communication that handles the low-level communication between
processes in a CORBA context.</p>
<a name="ch04-pgfid-960884"></a>
<h3 class="sect2">4.1.1. Interface Definition Language</h3>
<p>
<a name="INDEX-886"></a>
The Interface Definition Language provides the primary way of describing data types in CORBA. IDL is independent of any particular programming language. Mappings, or bindings, from IDL to specific programming languages are defined and standardized as part of the CORBA specification. At the time of this writing, standard bindings for C, C++, Smalltalk, Ada, COBOL, and Java have been approved by the OMG. <a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch10_01.htm">Chapter 10, "IDL Reference"</a>, contains a complete description of IDL syntax. </p>
<p>
<a name="INDEX-887"></a><a name="INDEX-888"></a>
The central CORBA functions, services, and facilities, such as the ORB
  and the Naming Service, are also specified in IDL. This means that a
  particular language binding also provides the bindings for the core
  CORBA functions to that language. Sun's Java IDL API follows
  the Java IDL mapping defined by the OMG. This allows you to
  run your CORBA-based Java code in any compliant Java implementation
  of the CORBA standard, provided you stick to standard elements
  of the Java binding. Note, however, that Sun's implementation
  includes some nonstandard elements; they are highlighted in this chapter where appropriate.</p>
<a name="ch04-pgfid-960558"></a>
<h3 class="sect2">4.1.2. Object Request Broker</h3>
<p>
<a name="INDEX-889"></a><a name="INDEX-890"></a><a name="INDEX-891"></a>
The core of the CORBA architecture is the Object Request Broker, as
  shown in <a href="#ch04-85667">Figure 4-1</a>. Each machine involved in a
  CORBA application must have an ORB running in order for processes on
  that machine to interact with CORBA objects running in remote
  processes. Object clients and servers make requests through their
  ORBs; the ORB is responsible for making the requests happen or
  indicating why they cannot. The client ORB provides a stub for a
  remote object. Requests made on the stub are transferred from the
  client's ORB to the ORB servicing the implementation of the
  target object. The request is passed onto the implementation through
  its skeleton interface.</p>
<a name="ch04-85667"></a>
<div class="figure">
<img alt="figure" src="figs/Jent.0401.gif" webstripperlinkwas="figs/Jent.0401.gif"></div>
<h4 class="objtitle">Figure 4-1. Basic CORBA architecture</h4>
<a name="ch04-pgfid-967363"></a>
<h3 class="sect2">4.1.3. The Naming Service</h3>
<p>
<a name="INDEX-892"></a><a name="INDEX-893"></a><a name="INDEX-894"></a><a name="INDEX-895"></a>

The CORBA Naming Service provides a directory naming structure for
remote objects. The tree always starts with a root node, and subnodes
of the object tree can be defined. Actual objects are stored by name
at the leaves of the tree. <a href="#ch04-32492">Figure 4-2</a> depicts an
example set of objects<a href="#FOOTNOTE-2">[2]</a>
registered within a Naming Service directory. The fully qualified name
of an object in the directory is the ordered list of all of its parent
nodes, starting from the root node and including the leaf name of the
object itself. So, the full name of the object labeled
"Fred" is "living thing,"
"animal," "man," "Fred," in that
order.</p>
<blockquote class="footnote">
<a name="FOOTNOTE-2"></a>
<p>[2]Example
adapted from <em class="emphasis">Categories</em>, by Aristotle. Please
pardon the categorization "man," as opposed to
"human." This is the typical translation of
Aristotle's original Greek, perhaps because political
correctness wasn't in fashion in 350 B.C.</p>
</blockquote>
<a name="ch04-32492"></a>
<div class="figure">
<img alt="figure" src="figs/Jent.0402.gif" webstripperlinkwas="figs/Jent.0402.gif"></div>
<h4 class="objtitle">Figure 4-2. A naming directory</h4>
<p>
<a name="INDEX-896"></a><a name="INDEX-897"></a><a name="INDEX-898"></a><a name="INDEX-899"></a><a name="INDEX-900"></a>


Each branch in the directory tree is called a <em class="emphasis">naming
 context</em>, and leaf objects have
 <em class="emphasis">bindings</em> to specific names. The
 <tt class="literal">org.omg.CosNaming.NamingContext</tt> interface
 represents each branch in the naming directory. Each
 <tt class="literal">NamingContext</tt> can be asked to find an object
 within its branch of the tree by giving its name relative to that
 naming context. You can get a reference to the root context of the
 naming directory from an ORB using the
 <tt class="literal">resolve_initial_references()</tt> method. The standard
 name for the Naming Service is "NameService", so the
 following code snippet gets the root
 <tt class="literal">NamingContext</tt>:</p>
<blockquote>
<pre class="programlisting">ORB myORB = ORB.init(...);
org.omg.CORBA.Object nameRef =
	myORB.resolve_initial_references("NameService");
NamingContext nc = NamingContextHelper.narrow(nameRef);</pre>
</blockquote>
<p>
<a name="INDEX-901"></a><a name="INDEX-902"></a><a name="INDEX-903"></a>

Note that we have to narrow the <tt class="literal">Object</tt> reference to
a <tt class="literal">NamingContext</tt> reference using the
<tt class="literal">NamingContextHelper.narrow()</tt> method. Even though
Java has a cast operation in its syntax, there's no guarantee in
the Java IDL binding that the object reference returned by the
<tt class="literal">resolve_initial_references()</tt> method is the correct
type, since there's no guarantee that the local environment has
access to the language-specific definition of the object's
interface.</p>
<p>
<a name="INDEX-904"></a><a name="INDEX-905"></a>
This <tt class="literal">narrow()</tt> operation highlights one of the key
differences between RMI and CORBA. In the Java environment, class
bytecodes are portable, and all remote object types are objects that
can be specified by their full class names. An RMI client can
automatically download the bytecodes for a remote stub from the object
server, if the class for the stub cannot be found locally (see Chapter
3, <em class="emphasis">Remote Method Invocation</em>, for more details on
the mechanics of remote class loading). CORBA is a
language-independent remote object scheme, so there is no portable way
to specify a remote object's type when a client obtains a stub
reference. As a result, the stub reference is initially represented by
a basic <tt class="literal">ObjectImpl</tt> object that knows how to forward
methods requests to its server object. The client application is
forced to "cast" this stub to the correct local type,
using the appropriate <tt class="literal">narrow()</tt> method. In the Java
mapping of IDL, this means calling the <tt class="literal">narrow()</tt>
method on the corresponding helper class. The
<tt class="literal">narrow()</tt> method converts the reference, making a
type-specific stub interface that also includes the remote object
reference information needed to forward method requests to the actual
object implementation.</p>
<a name="ch04-pgfid-961110"></a>
<h3 class="sect2">4.1.4. Inter-ORB Communication</h3>
<p>
<a name="INDEX-906"></a><a name="INDEX-907"></a>
Version 2.0 (and later) of the CORBA standard includes specifications
  for inter-ORB communication protocols that can transmit object
  requests between various ORBs running on the network. The protocols
  are independent of the particular ORB implementations running at
  either end of the communication link. An ORB implemented in Java can
  talk to another ORB implemented in C, as long as they're both
  compliant with the CORBA standard and use a standard communication
  protocol. The inter-ORB protocol is responsible for delivering
  messages between two cooperating ORBs. These messages might be
  method requests, return types, error messages, etc. The inter-ORB
  protocol also deals with differences between the two ORB
  implementations, like machine-level byte ordering and alignment. As
  a CORBA application developer, you shouldn't have to deal
  directly with the low-level communication protocol between ORBs. If
  you want two ORBs to talk to each other, you just need to be sure
  that they both speak a common, standard inter-ORB protocol.</p>
<p>
<a name="INDEX-908"></a><a name="INDEX-909"></a><a name="INDEX-910"></a><a name="INDEX-911"></a><a name="INDEX-912"></a><a name="INDEX-913"></a>
The Internet Inter-ORB Protocol (IIOP) is an inter-ORB protocol based
on TCP/IP. TCP/IP is by far the most commonly used network protocol on
the Internet, so IIOP is the most commonly used CORBA communication
protocol. There are other standard CORBA protocols defined for other
network environments, however. The DCE Common Inter-ORB Protocol
(DCE-CIOP), for example, allows ORBs to communicate on top of DCE-RPC.</p>
<a name="INDEX-914"></a>
<a name="INDEX-915"></a>




<a name="INDEX-1115"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_08.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.8. RMI over IIOP</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.2. Creating CORBA Objects</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
