<html>
<head>
<title>RMI over IIOP (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="RMI over IIOP">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_01.htm">Chapter 3: Remote Method Invocation</a></td><td align="right" valign="top" width="172"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">3.8. RMI over IIOP</h2>
<p>
<a name="INDEX-834"></a><a name="INDEX-835"></a>

A new and exciting possibility for connecting RMI objects to non-Java objects is the ability for RMI objects to communicate directly with remote CORBA objects using IIOP, the CORBA network interface protocol.<a href="#FOOTNOTE-4">[4]</a> The standard RMI implementation provided with Java uses an
RMI-specific protocol, JRMP, to communicate over the network. RMI/IIOP
allows RMI objects to use the CORBA network protocol, IIOP, to
communicate with other objects. This means that an RMI object using
RMI/IIOP can communicate with a remote CORBA object, regardless of the
implementation language of the CORBA object. Likewise, a CORBA object
<a name="INDEX-836"></a>
can interact with your Java RMI objects directly. This really gives
you the best of both worlds, since you can then implement your remote
clients using RMI and use either CORBA or RMI/JNI on the server to
interface to any native legacy code. </p>
<blockquote class="footnote">
<a name="FOOTNOTE-4"></a>
<p>[4]The RMI-IIOP tools and classes are an extension to the standard Java platform that has to be downloaded separately from <a href="../../../../../../../java.sun.com/products/rmi-iiop/">http://java.sun.com/products/rmi-iiop/</a>.</p>
</blockquote>
<p>In order to convert your RMI objects to use IIOP, there are some changes you need to make:</p>
<ul>
<li>
<p>
<a name="INDEX-837"></a>
Any implementation classes should extend the <tt class="literal">javax.rmi.PortableRemoteObject</tt> class, rather than <tt class="literal">java.rmi.server.UnicastRemoteObject</tt>.</p>
</li>
<li>
<p>
<a name="INDEX-838"></a><a name="INDEX-839"></a><a name="INDEX-840"></a><a name="INDEX-841"></a><a name="INDEX-842"></a>
All your stub and skeleton classes need to be regenerated using
the updated <em class="emphasis">rmic</em> compiler provided with the
RMI/IIOP installation. This updated compiler has an
<tt class="literal">-iiop</tt> option that produces stubs and ties
(<em class="emphasis">ties</em> refers to skeletons in the CORBA
vernacular). These stubs and ties handle the link between client and
server objects, but using IIOP rather than JRMP.</p>
</li>
<li>
<p>
<a name="INDEX-843"></a><a name="INDEX-844"></a><a name="INDEX-845"></a>
All use of the RMI <tt class="literal">Naming</tt> registry has to be
converted to use JNDI to talk to a CORBA Naming Service. Objects that
you export are bound to names in the CORBA Naming Service through the
JNDI context, and remote objects you look up are accessed from the
Naming Service through the JNDI context.</p>
</li>
<li>
<p>
<a name="INDEX-846"></a>
Instead of using the standard Java casting operator on remote
objects you look up, you should use the
<tt class="literal">javax.rmi.PortableRemoteObject.narrow()</tt> method.</p>
</li>
</ul>
<p>
<a name="INDEX-847"></a>
To give you a taste for how to use RMI/IIOP with your RMI classes, let's convert our first <tt class="literal">Account</tt> example to use RMI/IIOP. First, we need to update the <tt class="literal">AccountImpl</tt> class to extend <tt class="literal">PortableRemoteObject</tt>. The following fragment of the <tt class="literal">IIOPAccountImpl</tt> class does that:</p>
<blockquote>
<pre class="programlisting">
import javax.rmi.PortableRemoteObject;
import java.rmi.RemoteException;
import java.util.List;
import java.util.ListIterator;

public class IIOPAccountImpl extends PortableRemoteObject implements Account {
  // Remainder of implementation is identical</pre>
</blockquote>
<p>We can compile the updated <tt class="literal">IIOPAccountImpl</tt> using the regular Java compiler, then use the extended <em class="emphasis">rmic</em> compiler included with RMI/IIOP to generate IIOP stubs and ties:</p>
<blockquote>
<pre class="programlisting">
% rmic -iiop -d /home/myclasses IIOPAccountImpl</pre>
</blockquote>
<p>This generates an <em class="filename">IIOPAccountImpl_Stub</em> class and an <em class="emphasis">IIOPAccountImpl_Tie</em> class, which act as the IIOP stub and tie for the remote object.</p>
<p>
<a name="INDEX-848"></a>
In the CORBA world, remote objects are looked up using the CORBA Naming Service, so we need to update the <tt class="literal">RegAccount</tt> class to use JNDI to register an <tt class="literal">Account</tt> object with a CORBA Naming Service, rather than the RMI registry. The updated <tt class="literal">IIOPRegAccount</tt> class looks like this:</p>
<blockquote>
<pre class="programlisting">
import javax.naming.*;
import java.rmi.*;

public class IIOPRegAccount {
  public static void main(String argv[]) {
    try {
      // Make an Account with a given name
      IIOPAccountImpl acct = new IIOPAccountImpl("JimF");

      // Get a reference to CORBA naming service using JNDI
      Hashtable props = new Hashtable();
      props.put("java.naming.factory.initial",
                "com.sun.jndi.cosnaming.CNCtxFactory");
      props.put("java.naming.provider.url", "iiop://objhost.org:900");
      Context ctx = new InitialContext(props);

      // Register our Account with the CORBA naming service
      ctx.rebind("JimF", acct);
      System.out.println("Registered account.");
    }
    catch (Exception e) {
      e.printStackTrace();
    }
  }
}</pre>
</blockquote>
<p>
<a name="INDEX-849"></a>
Refer to <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch06_01.htm">Chapter 6, "JNDI"</a>, for details on the properties used to create the JNDI context and what they mean. All you need to glean from this is that we're trying to connect to a naming service running on <em class="emphasis">objhost.org</em>, listening to port 900. Once we are connected, we register the new <tt class="literal">IIOPAccountImpl</tt> object with the naming service using the <tt class="literal">Context.rebind()</tt> method.</p>
<p>Finally, we need to update our client so that it works with RMI/IIOP. Instead of using an RMI registry to look up the remote <tt class="literal">Account</tt> object, the client needs to use JNDI to connect to the same CORBA Naming Service that now hosts our <tt class="literal">Account</tt> object and ask for the <tt class="literal">Account</tt> by name. The updated <tt class="literal">IIOPAccountClient</tt> is shown here. Notice that we've also changed the client to use the <tt class="literal">PortableRemoteObject.narrow()</tt> method, instead of just casting the object returned from the lookup:</p>
<blockquote>
<pre class="programlisting">
import javax.naming.*;
import java.rmi.RMISecurityManager;

public class IIOPAccountClient {
  public static void main(String argv[]) {
    try {
      // Lookup account object
      Hashtable props = new Hashtable();
      props.put("java.naming.factory.initial",
                "com.sun.jndi.cosnaming.CNCtxFactory");
      props.put("java.naming.provider.url", "iiop://objhost.org:900");
      Context ctx = new InitialContext(props);
      Account jimAcct =
        (Account)PortableRemoteObject.narrow(ctx.lookup("JimF"),
                                             Account.class);

      // Make deposit
      jimAcct.deposit(12000);

      // Report results and balance.
      System.out.println("Deposited 12,000 into account owned by " +
                         jimAcct.getName());
      System.out.println("Balance now totals: " + jimAcct.getBalance());
    }
    catch (Exception e) {
      System.out.println("Error while looking up account:");
      e.printStackTrace();
    }
  }
}</pre>
</blockquote>
<p>
<a name="INDEX-850"></a><a name="INDEX-851"></a><a name="INDEX-852"></a>
In order to register the server object, we need a CORBA Naming Service running, just like we need an RMI registry with standard RMI. The RMI/IIOP package includes a special naming service that is started using the <em class="emphasis">tnameserv</em> utility. This tool is similar to the naming service provided with Java IDL (and discussed in <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_01.htm">Chapter 4, "Java IDL"</a>), but this version is a CORBA Naming Service that also provides JNDI access. On <em class="emphasis">objhost.org</em>, we need to start the naming service like so:</p>
<blockquote>
<pre class="programlisting">
objhost% tnameserv -ORBInitialPort 900</pre>
</blockquote>
<p>Now we can run <tt class="literal">IIOPRegAccount</tt> to register the <tt class="literal">Account</tt> object with the naming service, then run our <tt class="literal">IIOPAccountClient</tt> to access the <tt class="literal">Account</tt> and make a deposit. All network communications are now taking place using IIOP rather than the RMI protocol.</p>
<a name="ch03-pgfid-969096"></a>
<h3 class="sect2">3.8.1. Accessing RMI Objects from CORBA</h3>
<p>
<a name="INDEX-853"></a><a name="INDEX-854"></a><a name="INDEX-855"></a><a name="INDEX-856"></a>
Since our <tt class="literal">Account</tt> object is now speaking IIOP, we can also access it from other, non-Java CORBA clients. First, we need to get an IDL interface for the <tt class="literal">Account</tt> interface, which can be done using the <em class="emphasis">rmic</em> compiler provided with RMI/IIOP. The <tt class="literal">-idl</tt> option generates an IDL mapping of a Java RMI interface using the Java-to-IDL mapping defined by the CORBA standard. With this IDL mapping, we can generate language-specific stubs that lets any CORBA client talk to our Java remote object. See <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_01.htm">Chapter 4, "Java IDL"</a> for more details on using IDL and generating language-specific interfaces from it.</p>
<a name="INDEX-857"></a>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch03_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch04_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.7. RMI and Native Method Calls</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4. Java IDL</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
