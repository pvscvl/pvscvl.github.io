<html>
<head>
<title>Deploying an Enterprise JavaBeans Object (Java Enterprise in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan, Jim Farley, William Crawford and Kristopher Magnusson">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-483-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Deploying an Enterprise JavaBeans Object">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_01.htm">Chapter 7: Enterprise JavaBeans</a></td><td align="right" valign="top" width="172"><a href="ch07_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_08.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">7.7. Deploying an Enterprise JavaBeans Object</h2>
<p>
<a name="INDEX-2039"></a><a name="INDEX-2040"></a>
Once you've written the home and remote interfaces and the
  implementation of your enterprise bean, you need to deploy your
  beans in an EJB container, which involves the following steps:</p>
<ol>
<li>
<p>
<a name="INDEX-2041"></a>
Specifying the various deployment options for your bean, using the
  deployment tools provided by the EJB container. These options
  include transaction support options, access control settings, and
  data mappings (for container-managed entity beans).</p>
</li>
<li>
<p>
<a name="INDEX-2042"></a>
Using the container-provided tools to create a serialized deployment
  descriptor, which bundles up your deployment options into a single
  serialized object.</p>
</li>
<li>
<p>Generating the container-specific classes, as shown in <a href="ch07_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_02.htm">Figure 7-2</a>.</p>
</li>
<li>
<p>Optionally packaging your enterprise beans into an EJB-JAR file.
<a name="INDEX-2043"></a><a name="INDEX-2044"></a>
</p>
</li>
</ol>
<p>
<a name="INDEX-2045"></a><a name="INDEX-2046"></a>
As shown in <a href="ch07_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_02.htm">Figure 7-2</a>, the EJB container generates a set of classes
  that deploy your EJB object. It's up to the EJB container to
  provide a tool or tools for generating these classes. Some may be
  command-line tools that accept some sort of properties file that
  tells the EJB container about your bean, while others may be GUI
  tools that let you control the deployment options of your bean using
  a visual interface. Regardless of the deployment/generation tool
  your EJB application server provides, it needs to be told the fully
  qualified names for the home and remote interfaces for your EJB
  object and for the bean implementation class. It also needs to be
  told how to deploy your bean, in terms of transaction support,
  client access to features of your bean, and management of the
  persistent data (if any) associated with your bean. The baseline
  information and options needed for deploying your enterprise bean
  are as follows:</p>
<dl>
<dt>
<b>Bean implementation class and interfaces</b>
</dt>
<dd>
<p>
<a name="INDEX-2047"></a>
The fully qualified names of your bean implementation class and the
  home and remote interfaces for your bean.</p>
</dd>
<dt>
<b>Bean type</b>
</dt>
<dd>
<p>Is the bean a session or entity bean? If it is a session bean, is it
stateful or stateless? If it is an entity bean, is its persistence
bean-managed or container-managed?</p>
</dd>
<dt>
<b>JNDI name for home interface</b>
</dt>
<dd>
<p>
<a name="INDEX-2048"></a>
The name under which the home interface for the bean is exported
  through JNDI by the server. Clients use this name to look up the
  home interface.</p>
</dd>
<dt>
<b>Transaction support attribute</b>
</dt>
<dd>
<p>
<a name="INDEX-2049"></a>
The level of transaction support required by the bean. Specify one of
  the values described earlier in the chapter.</p>
</dd>
<dt>
<b>Transaction isolation level</b>
</dt>
<dd>
<p>
<a name="INDEX-2050"></a>
The level of transaction isolation required by the bean. Specify one
  of the values described earlier in the chapter.</p>
</dd>
<dt>
<b>Access control attributes</b>
</dt>
<dd>
<p>
<a name="INDEX-2051"></a>
Which remote identities should have access to the methods on your bean? What identity should your bean assume when it accesses resources (a database, other EJB objects, etc.)?</p>
</dd>
<dt>
<b>Session time-out (session beans only)</b>
</dt>
<dd>
<p>
<a name="INDEX-2052"></a><a name="INDEX-2053"></a>
The maximum lifetime for a session bean.</p>
</dd>
<dt>
<b>Database/member mapping (container-managed entity beans only)</b>
</dt>
<dd>
<p>
<a name="INDEX-2054"></a>
The data members on your bean that need to be stored persistently and
  their corresponding database fields.</p>
</dd>
<dt>
<b>Reentrant flag (entity beans only)</b>
</dt>
<dd>
<p>
<a name="INDEX-2055"></a><a name="INDEX-2056"></a>

Is your bean implementation reentrant (i.e., can the bean's
  methods make loopback calls to themselves, directly or through other
  bean methods)? This property is always <tt class="literal">false</tt> for
  session beans.</p>
</dd>
<dt>
<b>Primary key class (entity beans only)</b>
</dt>
<dd>
<p>
<a name="INDEX-2057"></a>
The fully qualified name of the class that serves as the primary key for your entity bean.</p>
</dd>
<dt>
<b>Environment variables</b>
</dt>
<dd>
<p>
<a name="INDEX-2058"></a>
Miscellaneous environment properties, either EJB server-specific or bean-specific, that are provided to the bean in its <tt class="literal">EJBContext</tt>.</p>
</dd>
</dl>
<p>Some EJB containers may expand on this baseline list to include properties they need for extended services they may provide or additional controls they provide to supplement the basic EJB deployment options.</p>
<p>
<a name="INDEX-2059"></a><a name="INDEX-2060"></a><a name="INDEX-2061"></a><a name="INDEX-2062"></a><a name="INDEX-2063"></a>
All these deployment properties are represented as publicly accessible properties on the <tt class="literal">DeploymentDescriptor</tt>, <tt class="literal">SessionDescriptor</tt>, and <tt class="literal">EntityDescriptor</tt> classes in the <tt class="literal">javax.ejb.deployment</tt> package. If you want to create an EJB-JAR package for your bean, the EJB server tools typically allow you to bundle your deployment options into an instance of either the <tt class="literal">SessionDescriptor</tt> or <tt class="literal">EntityDescriptor</tt> class and serialize the object to a file to be included in the EJB-JAR file as the bean's <em class="emphasis">deployment descriptor</em>. See the later section "Packaging Enterprise Beans" for more details.</p>
<p>
<a name="INDEX-2064"></a>
At the time of this writing, the released EJB specification doesn't include a standard format for deployment descriptor files. The EJB 1.1 public draft includes an XML-based deployment descriptor schema, but until the 1.1 specification is released and this standard deployment descriptor file format is widely supported, you need to deal with the vendor-specific formats currently provided by each EJB server. Currently, the only way to provide a portable deployment descriptor for your enterprise bean is to do the work of the server deployment tools yourself. To do this, you have to write some Java code that creates an instance of the appropriate <tt class="literal">DeploymentDescriptor</tt> subclass, fills in the properties on this object, and then serializes the descriptor object to a file. If you need to do this, refer to <a href="ch20_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch20_01.htm">Chapter 20, "The javax.ejb.deployment Package"</a> for details on <tt class="literal">DeploymentDescriptor</tt> and its subclasses. For the examples that follow, however, I'm going to show snippets of deployment descriptor files for a particular EJB server, BEA's WebLogic application server.</p>
<a name="ch07-pgfid-977833"></a>
<h3 class="sect2">7.7.1. Container-Managed Data Mapping</h3>
<p>
<a name="INDEX-2065"></a><a name="INDEX-2066"></a><a name="INDEX-2067"></a><a name="INDEX-2068"></a>
If you are deploying an entity bean with container-managed
  persistence, you need to tell the EJB container which fields on your
  bean implementation are persistent and how to map them to persistent
  storage. For example, suppose we are deploying our entity
  <tt class="literal">ProfileBean</tt>, using container-managed
  persistence. Let's assume that we've made the
  modifications to our bean implementation we discussed in the section
  "Container-Managed Persistence." In other words,
  we've created a table called <tt class="literal">PROFILE_BYTES</tt>
  with a single <tt class="literal">LONG BINARY</tt> column named
  <tt class="literal">DATA</tt> to hold our serialized
  <tt class="literal">Properties</tt> object. Now we simply have to tell the
  container that the <tt class="literal">mEntriesBytes</tt> member on our
  modified <tt class="literal">ProfileBean</tt> is mapped to the
  <tt class="literal">DATA</tt> column on the
  <tt class="literal">PROFILE_BYTES</tt> table, with 


an entry in a textual
  deployment options file like this example shown for BEA WebLogic
  server:</p>
<blockquote>
<pre class="programlisting">
(persistentStoreProperties
  persistentStoreType    jdbc 
  (jdbc
    tableName            PROFILE_BYTES
      ...
    (attributeMap
      mName              NAME
      mEntriesBytes      DATA
    )
  )
)
...
containerManagedFields   [mName mEntriesBytes]</pre>
</blockquote>
<p>Based on these mappings, the EJB container generates all of the necessary JDBC calls in its generated classes.</p>
<a name="ch07-pgfid-971256"></a>
<h3 class="sect2">7.7.2. Access-Control Deployment Attributes</h3>
<p>
<a name="INDEX-2069"></a><a name="INDEX-2070"></a><a name="INDEX-2071"></a>

There are precious few details in the EJB 1.0 specification about support for security in EJB containers, but there is a construct provided for you to specify certain access control levels at deployment time. </p>
<p>Essentially, the EJB server should provide some means for mapping a client-provided identity (in the form of a <tt class="literal">java.security.Identity</tt> object) to a named user or role on the EJB server itself. Then you, the bean provider, can specify which users and/or roles can access each method on your bean. The EJB server allows you to specify access control levels in some server-specific way (ideally, using the same deployment tools as the other deployment attributes). There should be a way to specify access for the entire bean, as well as for individual methods. Any method without an access-control entry assumes the access level of the bean as a default. So, for the various versions of our <tt class="literal">ProfileBean</tt>, we might want to allow anyone to get profile entries off of the bean, but only allow profile administrators (users or applications) to set profile entries. We might do this by specifying access-control entries such as:</p>
<blockquote>
<pre class="programlisting">
(accessControlEntries
  DEFAULT                    [everyone]
  "setEntry(String, String)" [profileAdmin]
)</pre>
</blockquote>
<p>
<a name="INDEX-2072"></a><a name="INDEX-2073"></a>
This allows any user who identifies himself as <em class="emphasis">profileAdmin</em> to invoke the <tt class="literal">setEntry()</tt> method on the <tt class="literal">ProfileBean</tt>, while all other remote methods on the bean are accessible to everyone.</p>
<p>As a step towards standardizing the specification of client identities to the EJB server, there is a proposal being considered by various EJB providers that involves the use of a reserved JNDI name entry to hold the client's identity. The client would provide an <tt class="literal">Identity</tt> object to the EJB server as the value of the <tt class="literal">Context.PROVIDER_IDENTITY</tt> property, passed in when the client creates its initial JNDI naming context from the server. This issue should be settled in an upcoming update to the EJB specification.</p>
<p>
<a name="INDEX-2074"></a><a name="INDEX-2075"></a>
In addition to specifying client access rules for your bean, you
  need to specify to the EJB server what identity your bean should
  assume when it accesses controlled resources, such as other EJB
  objects and databases. This is done using two deployment properties:
  run-as-mode and run-as-identity. The
  <em class="emphasis">run-as-mode</em> property indicates whether the bean
  should assume the identity of the client that invoked it
  (<tt class="literal">CLIENT_IDENTITY</tt>), the identity of some
  system-defined account (<tt class="literal">SYSTEM_IDENTITY</tt>), or the identity of some
  other specific user account
  (<tt class="literal">SPECIFIED_IDENTITY</tt>). The
  <tt class="literal">SYSTEM_IDENTITY</tt> option causes the EJB server to
  use a platform-specific privileged account. A server may use the
  <em class="emphasis">root</em> account on Unix systems or the
  Administrator account on Windows NT systems, for example. Some EJB
  servers may use the account that runs the server when the <tt class="literal">SYSTEM_IDENTITY</tt> is specified. The <em class="emphasis">run-as-identity</em> property is used when run-as-mode is set to <tt class="literal">SPECIFIED_IDENTITY</tt>. The identity given in the run-as-identity property is the identity the bean assumes when accessing system resources and other beans. </p>
<p>
<a name="INDEX-2076"></a><a name="INDEX-2077"></a><a name="INDEX-2078"></a><a name="INDEX-2079"></a>
The run-as-mode and run-as-identity attributes are settable at the bean level or at the individual method level, in the same way client access levels are applied. If you set these attributes for specific methods on your bean, that means you want those methods to be executed using the specified identity for access-control purposes. There are some restrictions imposed by the EJB specification, however. Within a single transaction, all methods invoked on your bean must be run with the same identity. If a client transaction attempts to execute methods you've deployed with different access-control identities, the server throws an RMI <tt class="literal">RemoteException</tt> to the client. If your bean is a stateful session bean, all methods executed during a session lifetime must be the same. If a client attempts, within the same session, to execute methods on your bean that have different access-control identities associated with them, the EJB server throws an RMI <tt class="literal">RemoteException</tt>.</p>
<a name="ch07-pgfid-977867"></a>
<h3 class="sect2">7.7.3. Generating the Container Classes and Deployment Descriptor</h3>
<p>
<a name="INDEX-2080"></a><a name="INDEX-2081"></a><a name="INDEX-2082"></a><a name="INDEX-2083"></a>
Once you've specified all the deployment options for your bean, the container provides a utility for converting these deployment properties to a serialized deployment descriptor. This deployment descriptor is a serialized instance of either the <tt class="literal">EntityDescriptor</tt> or <tt class="literal">SessionDescriptor</tt> class from the <tt class="literal">javax.ejb.deployment</tt> package. The container tools store all the deployment options you specified into an instance of one of these classes, depending on what type of bean you're deploying, and serialize the object to a file you specify, one for each type of bean that you are deploying. You can then use these deployment descriptors to package your enterprise beans into EJB-JAR files, as described a bit later.</p>
<p>
<a name="INDEX-2084"></a>
In addition to the deployment descriptor, you also need to use the EJB container's tools to generate the container-specific classes that deploy your bean, as shown in <a href="ch07_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_02.htm">Figure 7-2</a>. In order to generate these classes, the container tools need to take into account your deployment options. If you're deploying an entity bean, for example, the tool needs to know whether the bean uses container-managed persistence or not, so that the tool knows whether it needs to include JDBC code for the bean in its generated classes. The container tools typically allow you to specify where to generate the deployment classes.</p>
<p>Once you have your compiled interfaces and bean implementation class, the deployment descriptor, and the container-generated classes for your bean, you're ready to package your bean in an EJB-JAR file. </p>
<a name="ch07-pgfid-971400"></a>
<h3 class="sect2">7.7.4. Packaging Enterprise JavaBeans</h3>
<p>
<a name="INDEX-2085"></a><a name="INDEX-2086"></a><a name="INDEX-2087"></a><a name="INDEX-2088"></a>
EJB-JAR files are the standard packaging format for Enterprise JavaBeans. They are normal Java archive (JAR) files, created using the standard <em class="emphasis">jar</em> utility, but they contain specific files that provide all the information needed for an EJB container to deploy the beans that are contained in the EJB-JAR file. An EJB-JAR file can contain one or many beans.</p>
<p>An EJB-JAR file contains three components:</p>
<ul>
<li>
<p>
<a name="INDEX-2089"></a><a name="INDEX-2090"></a><a name="INDEX-2091"></a>
The class files for each bean, including their home and remote interfaces, and the bean implementations.</p>
</li>
<li>
<p>
<a name="INDEX-2092"></a><a name="INDEX-2093"></a><a name="INDEX-2094"></a>
A deployment descriptor, in the form of a serialized instance of either the <tt class="literal">EntityDescriptor</tt> or <tt class="literal">SessionDescriptor</tt> classes from the <tt class="literal">javax.ejb.deployment</tt> package.</p>
</li>
<li>
<p>
<a name="INDEX-2095"></a>
A manifest file, located in the file <em class="filename">META-INF/MANIFEST.MF</em> within the JAR file, with a section for each bean that names its deployment descriptor within the JAR file.</p>
</li>
</ul>
<p>The manifest file is a simple text file, with sections delimited by blank lines. Each section has name/value pairs. The name starts the line, followed by a colon, followed by the value. EJB-JAR files define two tags: "Name" and "Enterprise-Bean". The Name line specifies the serialized deployment descriptor for an enterprise bean, while Enterprise-Bean marks the section as relevant to the EJB server and always has a value of "True". Here's a typical manifest file that might be used for an EJB-JAR file that contains a few of our bean examples:</p>
<blockquote>
<pre class="programlisting">
Name: jen/ejb/stateless/ProfileServerBeanDD.ser
Enterprise-Bean: True

Name: jen/ejb/entity/beanManaged/ProfileBeanDD.ser
Enterprise-Bean: True</pre>
</blockquote>
<p>This manifest file describes two enterprise beans. The EJB-JAR file that contains this manifest must contain the two serialized deployment descriptors named in the manifest file, all class files specified in the deployment descriptors for the beans, and all container-generated classes for deploying the bean.</p>
<p>An EJB-JAR file contains everything an EJB container needs to
deploy your bean. The container reads the manifest file and, for each
bean specified, loads the serialized deployment descriptor and checks
its parameters. The container looks in the JAR file for the class
files needed for the bean and deploys the bean using the additional
parameters specified in the deployment descriptors. </p>
<p>
<a name="INDEX-2096"></a><a name="INDEX-2097"></a>
Some EJB container/server providers include a utility to facilitate
the creation of EJB-JAR files from your bean classes. It's a
simple matter, however, to create one using the standard
<em class="emphasis">jar</em> utility provided with nearly every Java SDK
implementation. Assuming that you have created a manifest file, such
as the one shown earlier, in a file named
<tt class="literal">ProfileManifest.txt</tt>, you can create an EJB-JAR file
for the previous two beans with the following command:</p>
<blockquote>
<pre class="programlisting">% jar cmf ProfileManifest.txt ProfileBeans.jar\ 
jen/ejb/stateless jen/ejb/entity/beanManaged</pre>
</blockquote>
<p>This command creates an EJB-JAR file named
<em class="filename">ProfileBeans.jar</em> in the current directory. The
<em class="emphasis">jar</em> utility automatically places the manifest
file in the proper location in the JAR file for you. Note that
we're assuming that the subdirectories we've included in
the JAR file contain both the class files we need and the serialized
deployment decriptors mentioned in the manifest file.</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch07_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/ch07_08.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">7.6. Implementing Entity Beans</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">7.8. Using an Enterprise JavaBeans Object</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
