<html>
<head>
<title>The Life Cycle of an Entity Bean (Enterprise JavaBeans)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Richard Monson-Haefel">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-869-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The Life Cycle of an Entity Bean">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm" alt="Enterprise JavaBeans"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch06_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch06_01.htm">Chapter 6: Entity Beans</a></td><td align="right" valign="top" width="172"><a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch07_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">6.3. The Life Cycle of an Entity Bean</h2>

<p>To understand how to best develop <a name="INDEX-1240"></a><a name="INDEX-1241"></a>entity
beans, it is important to understand how the container manages them.
The EJB specification defines just about every major event in an
entity bean's life, from the time it is instantiated to the
time it is garbage collected. This is called the <em class="emphasis">life
cycle</em>, and it provides the bean developer and EJB vendors
with all the information they need to develop beans and EJB servers
that adhere to a consistent protocol. To understand the life cycle,
we will follow an entity instance through several life-cycle events
and describe how the container interacts with the entity bean during
these events. <a href="#JBEANS-CH-6-FIG-2">Figure 6-2</a> illustrates the life cycle
of an entity instance.
</p>

<a name="JBEANS-CH-6-FIG-2"></a>
<div class="figure">
<img alt="figure" src="figs/ejb2_0602.gif" webstripperlinkwas="figs/ejb2_0602.gif"></div>
<h4 class="objtitle">Figure 6-2. Entity bean life cycle</h4>

<p>We will examine the life cycle of an entity bean and identify the
points at which the container would call each of the methods
described in the
<tt class="literal">EntityBean</tt><a name="INDEX-1242"></a> interface. Bean instances must
implement the <tt class="literal">EntityBean</tt> interface, which means
that invocations of the <a name="INDEX-1243"></a><a name="INDEX-1244"></a>callback methods are
invocations on the bean instance itself.
</p>

<a name="JBEANS-CH-6-SECT-3.1"></a>
<h3 class="sect2">6.3.1. Does Not Exist</h3>

<p>The <a name="INDEX-1245"></a>
bean instance begins life as a collection of files. Included in that
collection are the bean's deployment descriptor, the remote
interface, the home interface, the primary key, and all the
supporting classes generated at deployment time. At this stage, no
instance of the bean exists.
</p>


<a name="JBEANS-CH-6-SECT-3.2"></a>
<h3 class="sect2">6.3.2. The Pooled State</h3>

<p>
<a name="INDEX-1246"></a><a name="INDEX-1247"></a>When the EJB
server is started, it reads the bean's files and instantiates
several instances of the bean, which it places in a pool. The
instances are created by calling the
<a name="INDEX-1248"></a><a name="INDEX-1249"></a><a name="INDEX-1250"></a><a name="INDEX-1251"></a><tt class="literal">Class.newInstance()</tt> method on the bean class. The
<tt class="literal">newInstance()</tt> method creates an instance using the
default constructor, which has no arguments.<a href="#FOOTNOTE-7">[7]</a> This means that the persistent fields of the bean
instances are set at their default values; the instances themselves
do not represent any data in the database.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-7"></a>
<p>[7]
Constructors should never be defined in the bean class. The default
no-argument constructor must be available to the container.</p>
</blockquote>

<p>Immediately following the creation of an instance, and just before it
is placed in the pool, the container assigns the instance its
<tt class="literal">EntityContext</tt>. The
<tt class="literal">EntityContext</tt> is assigned by calling the
<a name="INDEX-1252"></a><a name="INDEX-1253"></a><a name="INDEX-1254"></a><tt class="literal">setEntityContext()</tt>
method defined in the <tt class="literal">EntityBean</tt> interface and
implemented by the bean class. After the instance has been assigned
its context, it is entered into the instance pool.
</p>

<p>In the instance pool, the bean instance is available to the container
as a candidate for serving client requests. Until it is requested,
however, the bean instance remains inactive unless it is used to
service a find request. Bean instances in the Pooled state typically
service find requests, which makes perfectly good sense because they
aren't busy and find methods don't rely on the bean
instance's state. All instances in the Pooled state are
equivalent. None of the instances are assigned to an EJB object, and
none of them has meaningful state.
</p>

<p>At each stage of the entity bean's life cycle the bean
container provides varying levels of access. For example, the
<tt class="literal">EJBContext.getPrimary()</tt> method will not work if
it's invoked during in the <tt class="literal">ejbCreate()</tt>
method, but it does work when called in the
<tt class="literal">ejbPostCreate()</tt> method. Other
<tt class="literal">EJBContext</tt> methods have similar restrictions, as
does the JNDI ENC (EJB 1.1). While this section touches on the
accessibility of these methods, a complete table that details what is
available in each bean class method (<tt class="literal">ejbCreate()</tt>,
<tt class="literal">ejbActivate()</tt>, <tt class="literal">ejbLoad()</tt>, etc.)
can be found in <a href="appb_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/appb_01.htm">Appendix B, "State and Sequence Diagrams"</a>.
</p>


<a name="JBEANS-CH-6-SECT-3.3"></a>
<h3 class="sect2">6.3.3. The Ready State</h3>

<p>
<a name="INDEX-1255"></a><a name="INDEX-1256"></a>When a bean instance is in the
<a name="INDEX-1257"></a>Ready
State, it can accept client requests. A bean instance moves to the
Ready State when the container assigns it to an EJB object. This
occurs under two circumstances: when a new entity bean is being
created or when the container is activating an entity.
</p>

<a name="JBEANS-CH-6-SECT-3.3.1"></a>
<h3 class="sect3">6.3.3.1. Transitioning from the Pooled state to the Ready State via creation</h3>

<p>
<a name="INDEX-1258"></a><a name="INDEX-1259"></a>When a client <a name="INDEX-1260"></a>application
invokes the <tt class="literal">create()</tt> method on
<a name="INDEX-1261"></a>an EJB
home, several operations must take place before the EJB container can
return a remote reference (EJB object) to the client. First, an EJB
object must be created on the EJB server. Once the EJB object is
created, a bean instance is taken from the instance pool and assigned
to the EJB object. Next, the <tt class="literal">create()</tt> method,
invoked by the client, is delegated to its corresponding
<tt class="literal">ejbCreate()</tt> method on the bean instance. After the
<tt class="literal">ejbCreate()</tt> method completes, a
<a name="INDEX-1262"></a>primary key is created. In
container-managed persistence, the container instantiates and
populates the key automatically; in bean-managed persistence, the
bean instantiates and populates the primary key and returns it from
the <tt class="literal">ejbCreate()</tt> method. The key is embedded in the
EJB object, providing it with <em class="emphasis">identity</em>. Once the
EJB object has identity, the bean instance's
<tt class="literal">EntityContext</tt> can access information specific to
that EJB object, including the primary key and its own remote
reference. While the <tt class="literal">ejbCreate()</tt> method is
executing, the properties, security, and transactional information is
available.
</p>

<p>When the <tt class="literal">ejbCreate()</tt> method is done, the
<tt class="literal">ejbPostCreate()</tt><a name="INDEX-1263"></a> method on the bean instance
is called. At this time, the bean instance can perform any
post-processing that is necessary before making itself available to
the client. While the <tt class="literal">ejbPostCreate()</tt> executes,
the bean's primary key and access to its own remote reference
is available through the <tt class="literal">EJBContext</tt>.
</p>

<p>Finally, after the successful completion of the
<tt class="literal">ejbPostCreate()</tt> method, the home is allowed to
return a remote reference--an EJB object
<a name="INDEX-1264"></a>stub--to the client. The bean
instance and EJB object are now ready to service method requests from
the client. This is one way that the bean instance can move from the
Pooled state to the Ready State.
</p>



<a name="JBEANS-CH-6-SECT-3.3.2"></a>
<h3 class="sect3">6.3.3.2. Transitioning from the Pooled state to the Ready State via a find method</h3>

<p>When a <a name="INDEX-1265"></a><a name="INDEX-1266"></a><a name="INDEX-1267"></a>find method is
<a name="INDEX-1268"></a>executed, each bean that is found will be
realized by transitioning an instance from the Pooled state to the
Ready State. When a bean is found, it is assigned to an EJB object
and its remote reference is returned to the client. A found bean
follows the same protocol as a passivated bean; it is activated when
the client invokes a business method. A found bean can be considered
to be a passivated bean and will move into the Ready State through
activation as described in the next section.
</p>



<a name="JBEANS-CH-6-SECT-3.3.3"></a>
<h3 class="sect3">6.3.3.3. Transitioning from the Pooled state to the Ready State via activation</h3>

<p>The <a name="INDEX-1269"></a>
activation <a name="INDEX-1270"></a>process can also move a
<a name="INDEX-1271"></a>bean instance
from the Pooled state to the Ready State. Activation facilitates
resource management by allowing a few bean instances to service many
EJB objects. Activation was explained in <a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch02_01.htm">Chapter 2, "Architectural Overview"</a>, but we will revisit the process as it relates
to the bean instance's life cycle. Activation presumes that the
bean has previously been passivated. More is said about this state
transition later; for now, suffice it to say that when a bean
instance is passivated, it frees any resources that it does not need
and leaves the EJB object for the instance pool. When the bean
instance returns to the pool, the EJB object is left without an
instance to delegate client requests to. The EJB object maintains its
stub connection on the client, so as far as the client is concerned,
the entity bean hasn't changed. When the client invokes a
business method on the EJB object, the EJB object must obtain a new
bean instance. This is accomplished by activating a bean instance.
</p>

<p>When a bean instance is activated, it leaves the instance pool (the
Pooled State) to be assigned to an EJB object. When a bean instance
makes this transition, the bean instance is first assigned to an EJB
object. Once assigned to the EJB object, the
<tt class="literal">ejbActivate()</tt><a name="INDEX-1272"></a>
 method is called--the instance's
<tt class="literal">EntityContext</tt> can now provide information specific
to the EJB object, but it cannot provide security or transactional
information. This callback method can be used in the bean instance to
reobtain any resources or perform some other work needed before
servicing the client.
</p>

<p>When an entity bean instance is activated, nonpersistent fields
contain arbitrary values (dirty values) and must be reinitialized in
the <tt class="literal">ejbActivate()</tt> method.
</p>

<p>In
<a name="INDEX-1273"></a><a name="INDEX-1274"></a>
container-managed persistence, persistent fields (container-managed
fields) are automatically synchronized with the database after
<tt class="literal">ejbActivate()</tt> is invoked and before a business
method can be serviced by the bean instance. The order in which these
things happen is as follows:
</p>

<ol>
<li>
<p>
<tt class="literal">ejbActivate()</tt> is invoked on the bean instance.</p>
</li>
<li>
<p>Persistent fields are synchronized automatically.</p>
</li>
<li>
<p>
<tt class="literal">ejbLoad()</tt><a name="INDEX-1275"></a>
 notifies the bean that its persistent fields have been synchronized.
</p>
</li>
<li>
<p>Business methods are invoked as needed.</p>
</li>
</ol>
<p>
<a name="INDEX-1276"></a><a name="INDEX-1277"></a>In bean-managed persistence,
persistent fields are synchronized by the
<tt class="literal">ejbLoad()</tt> method after
<tt class="literal">ejbActivate()</tt> has been called and before a
business method can be invoked. Here is the order of operations in
bean-managed persistence:
</p>

<ol>
<li>
<p>
<tt class="literal">ejbActivate()</tt> is invoked on the bean instance.</p>
</li>
<li>
<p>
<tt class="literal">ejbLoad()</tt> is called to let the bean synchronize
its persistent fields.
</p>
</li>
<li>
<p>Business methods are invoked as needed.</p>
</li>
</ol>


<a name="JBEANS-CH-6-SECT-3.3.4"></a>
<h3 class="sect3">6.3.3.4. Transitioning from the Ready State to the Pooled state via passivation</h3>

<p>
<a name="INDEX-1278"></a><a name="INDEX-1279"></a><a name="INDEX-1280"></a>A bean can move from the Ready
State to the Pooled state via passivation, which is the process of
disassociating a bean instance from an EJB object when it is not
busy. After a bean instance has been assigned to an EJB object, the
EJB <a name="INDEX-1281"></a><a name="INDEX-1282"></a>container can passivate the instance at
any time, provided that the instance is not currently executing a
method. As part of the passivation process, the
<tt class="literal">ejbPassivate()</tt> method is invoked on the bean
instance. This callback method can be used in the instance to release
any resources or perform other processing prior to leaving the EJB
object. A bean-managed entity instance should not try to save its
state to the database in the <tt class="literal">ejbPassivate()</tt>
method; this activity is reserved for the
<tt class="literal">ejbStore()</tt> method. The container will invoke
<tt class="literal">ejbStore()</tt> to synchronize the bean
instance's state with the database prior to passivating the
bean. When <tt class="literal">ejbPassivate()</tt> has completed, the bean
instance is disassociated from the EJB object server and returned to
the instance pool. The bean instance is now back in the Pooled State.
</p>

<p>The most fundamental thing to remember is that, for entity beans,
passivation is simply a notification that the instance is about to be
disassociated from the EJB object. Unlike stateful session beans, an
entity bean instance's fields are not serialized and held with
the EJB object when the bean is passivated. Whatever values are held
in the instance's fields when it was assigned to the EJB object
will be carried with it to its next assignment.
</p>



<a name="JBEANS-CH-6-SECT-3.3.5"></a>
<h3 class="sect3">6.3.3.5. Transitioning from the Ready State to the Pooled state via removal</h3>

<p>
<a name="INDEX-1283"></a>A bean
instance also moves from the <a name="INDEX-1284"></a><a name="INDEX-1285"></a>Ready State to the Pooled state when
it is removed. This occurs when the client application invokes one of
the <tt class="literal">remove()</tt> methods on the bean's EJB
object or EJB home. With entity beans, invoking a remove method means
that the entity's data is deleted from the database. Once the
entity's data has been deleted from the database, it is no
longer a valid entity. The <tt class="literal">EntityContext</tt> can
provide the EJB object with identity information during the execution
of the <tt class="literal">ejbRemove()</tt> method. Once the
<tt class="literal">ejbRemove()</tt><a name="INDEX-1286"></a>
 method has finished, the bean instance is moved back to the instance
pool and out of the Ready State. It is important that the
<tt class="literal">ejbRemove()</tt> method release any resources that
would normally be released by
<tt class="literal">ejbPassivate()</tt><a name="INDEX-1287"></a>
, which is not called when a bean is removed. This can be done by
invoking the <tt class="literal">ejbPassivate()</tt> method within the
<tt class="literal">ejbRemove()</tt> method<a name="INDEX-1288"></a> body.
</p>



<a name="JBEANS-CH-6-SECT-3.4"></a>
<h3 class="sect2">6.3.4. Life in the Ready State</h3>

<p>A bean is in the <a name="INDEX-1289"></a><a name="INDEX-1290"></a>Ready State when it is associated with
an EJB object and is ready to service requests from the client. When
the client invokes a business method, like
<tt class="literal">Ship.getName()</tt>, on the bean's remote
reference (EJB object stub), the method invocation is received by the
EJB object server and delegated to the bean instance. The instance
performs the method and returns the results. As long as the bean
instance is in the Ready State, it can service all the business
methods invoked by the client. Business methods can be called zero or
more times in any order.
</p>

<p>The
<tt class="literal">ejbLoad()</tt><a name="INDEX-1291"></a><a name="INDEX-1292"></a> and <tt class="literal">ejbStore()</tt>
methods, which synchronize the bean instance's state with the
database, can be called only when the bean is in the Ready State.
These methods can be called in any order, depending on the
vendor's implementation. Some vendors call
<tt class="literal">ejbLoad()</tt> before every method invocation and
<tt class="literal">ejbStore()</tt> after every method invocation,
depending on the transactional context. Other vendors call these
methods less frequently.
</p>

<p>In bean-managed persistence, the <tt class="literal">ejbLoad()</tt> method
should always use the
<tt class="literal">EntityContext.getPrimaryKey()</tt> to obtain data from
the database and not trust any primary key or other data that the
bean has stored in one of its fields. (This is how we implemented it
in the bean-managed version of the Ship bean.) It should be assumed,
however, that the state of the bean is valid when calling the
<tt class="literal">ejbStore()</tt> method.
</p>

<p>In container-managed persistence, the <tt class="literal">ejbLoad()</tt>
method is always called immediately following the
<a name="INDEX-1293"></a><a name="INDEX-1294"></a>synchronization of the
bean's container-managed fields with the database--in
other words, right after the container updates the state of the bean
instance with data from the database. This provides an opportunity to
perform any calculations or reformat data before the instance can
service business method invocations from the client. The
<tt class="literal">ejbStore()</tt> method is called just before the
database is synchronized with the state of the bean
instance--just before the container writes the container-managed
fields to the database. This provides the container-managed bean
instance with an opportunity to change the data in the
container-managed fields prior to their persistence to the database.
</p>

<p>In
<a name="INDEX-1295"></a>bean-managed
persistence, the <tt class="literal">ejbLoad()</tt> and
<tt class="literal">ejbStore()</tt> methods are called when the container
deems it appropriate to
<a name="INDEX-1296"></a>synchronize the bean's
state with the database. These are the only callback methods that
should be used to synchronize the bean's state with the
database. Do not use <tt class="literal">ejbActivate()</tt>,
<tt class="literal">ejbPassivate()</tt>,
<tt class="literal">setEntityContext()</tt>, or
<tt class="literal">unsetEntityContext()</tt> to access the database for
the purpose of synchronization. The <tt class="literal">ejbCreate()</tt>
and <tt class="literal">ejbRemove()</tt> methods, however, can be used to
insert and delete (respectively) the entity's data from the
database.
</p>


<a name="JBEANS-CH-6-SECT-3.5"></a>
<h3 class="sect2">6.3.5. End of the Life Cycle</h3>

<p>A <a name="INDEX-1297"></a><a name="INDEX-1298"></a>bean
instance's life ends when the container decides to remove it
from the pool and allow it to be garbage collected. This happens
under a few different circumstances. If the container decides to
reduce the number of instances in the pool--usually to conserve
resources--it releases one or more bean instances and allows
them to be garbage collected. The ability to adjust the size of the
instance pool allows the EJB server to manage its resources--the
number of threads, available memory, etc.--so that it can
achieve the highest possible performance. This behavior is typical of
a CTM.
</p>

<p>When an EJB server is shut down, most
<a name="INDEX-1299"></a>containers will release all the
bean instances so that they can be safely garbage collected. Finally,
some containers may decide to release an instance that is behaving
unfavorably or an instance that has suffered from some kind of
unrecoverable error that makes it unstable. A bean could be behaving
unfavorably if, for example, it has a bug that causes it to enter an
endless loop or create an unusually large number of objects.
</p>

<p>When a entity bean instance leaves the instance pool to be
<a name="INDEX-1300"></a>garbage collected, the
<tt class="literal">unsetEntityContext()</tt><a name="INDEX-1301"></a>
 method is invoked by the container to alert the bean instance that it
is about be destroyed. This callback method lets the bean release any
resources it maintains in the pool and dereference the
<tt class="literal">EntityContext</tt> (usually by setting it to
<tt class="literal">null</tt>). Once the bean's
<tt class="literal">unsetEntityContext()</tt> method has been called and it
is removed from the pool, it will be garbage collected.
</p>

<p>The bean instance's
<tt class="literal">finalize()</tt><a name="INDEX-1302"></a>
 method may or may not be invoked following the
<tt class="literal">unsetEntityContext()</tt> method. A bean should not
rely on its <tt class="literal">finalize()</tt> method, since each vendor
will handle dereferenced instances differently: some may garbage
collect an instance immediately, and others <a name="INDEX-1303"></a> may postpone
garbage collection<a name="INDEX-1304"></a><a name="INDEX-1305"></a> indefinitely.
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch06_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch07_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">6.2. Bean-Managed Persistence</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">7. Session Beans</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
