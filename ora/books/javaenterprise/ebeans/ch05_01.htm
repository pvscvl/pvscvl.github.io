<html>
<head>
<title>The Client View (Enterprise JavaBeans)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Richard Monson-Haefel">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-869-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The Client View">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm" alt="Enterprise JavaBeans"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch04_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm">Enterprise JavaBeans</a></td><td align="right" valign="top" width="172"><a href="ch05_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch05_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h1 class="chapter">Chapter 5.  The Client View</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch05_01.htm">Locating Beans with JNDI</a>
<br>
<a href="ch05_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch05_02.htm">The EJB Client-Side API</a>
<br>
</p>
</div>


<p>Developing the <a name="INDEX-725"></a><a name="INDEX-726"></a>
Cabin bean and the TravelAgent bean should have raised your
confidence, but it should also have raised a lot of questions. So
far, we have glossed over most of the details involved in developing,
deploying, and accessing these beans. In this chapter and the ones
that follow, we will slowly peel away the layers of the Enterprise
JavaBeans onion to expose the details of EJB application development.
</p>

<p>This chapter focuses specifically on the client's view of an
EJB system. The client, whether it is an application or another bean,
doesn't work directly with the beans in the EJB system.
Instead, clients interact with a set of interfaces that provide
access to beans and their business logic. These interfaces consist of
the JNDI API and an EJB client-side API. JNDI allows us to find and
access beans regardless of their location on the network; the EJB
client-side API is the set of interfaces and classes that a developer
uses on the client to interact with beans.
</p>

<p>The best approach to this chapter is to read about a feature of the
client view and then try to use that feature in the Cabin bean and
TravelAgent bean client applications you worked with in <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch04_01.htm">Chapter 4, "Developing Your First Enterprise Beans"</a>. This will provide you with hands-on
experience and a much clearer understanding of the concepts. Have
fun, experiment, and you'll be sure to understand the
fundamentals.
</p>



<h2 class="sect1">5.1. Locating Beans with JNDI</h2>

<p>
<a name="INDEX-727"></a><a name="INDEX-728"></a><a name="INDEX-729"></a>In <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch04_01.htm">Chapter 4, "Developing Your First Enterprise Beans"</a>, the
client application started by creating an
<tt class="literal">InitialContext</tt>, which it then used to get a remote
reference to the homes of the Cabin and TravelAgent beans. The
<tt class="literal">InitialContext</tt> is part of a larger API called the
Java Naming and Directory Interface ( JNDI). We use JNDI to look up
an EJB home in an EJB server just like you might use a phone book to
find the home number of a friend or business associate.
</p>

<p>
<a name="INDEX-730"></a><a name="INDEX-731"></a>JNDI is a standard Java extension that
provides a uniform API for accessing a wide range of services. In
this respect, it is somewhat similar to JDBC, which provides uniform
access to different relational databases. Just as JDBC lets you write
code that doesn't care whether it's talking to an Oracle
database or a Sybase database, JNDI lets you write code that can
access different directory and naming services, like LDAP, Novell
Netware NDS, CORBA Naming Service, and the naming services provided
by EJB servers. EJB servers are required to support JNDI by
organizing beans into a directory structure and providing a JNDI
driver, called a <a name="INDEX-732"></a><a name="INDEX-733"></a><a name="INDEX-734"></a><em class="emphasis">service provider</em>, for accessing that directory
structure. Using JNDI, an enterprise can organize its beans,
services, data, and other resources in a large virtual directory
structure, which can provide a very powerful mechanism for binding
together normally disparate systems.
</p>

<p>The great thing about JNDI is that it is virtual and dynamic. JNDI is
virtual because it allows one directory service to be linked to
another through simple
<a name="INDEX-735"></a>URLs. The URLs in JNDI are analogous to
HTML links. Clicking on a link in HTML allows a user to load the
contents of a web page. The new web page could be downloaded from the
same host as the starting page or from a completely different web
site--the location of the linked page is transparent to the
user. Likewise, using JNDI, you can drill down through directories to
files, printers, EJB home objects, and other resources using links
that are similar to HTML links. The directories and subdirectories
can be located in the same host or can be physically hosted at
completely different locations. The user doesn't know or care
where the directories are actually located. As a developer or
administrator, you can create virtual directories that span a variety
of different services over many different physical locations.
</p>

<p>JNDI is dynamic because it allows the JNDI drivers (a.k.a. service
providers) for specific types of directory services to be loaded at
runtime. A driver maps a specific kind of directory service into the
standard JNDI class interfaces. Drivers have been created for LDAP,
Novell NetWare NDS, Sun Solaris NIS+, CORBA Naming Service, and many
other types of <a name="INDEX-736"></a><a name="INDEX-737"></a><a name="INDEX-738"></a>naming and directory services. When
a link to a different directory service is chosen, the driver for
that type of directory service is automatically loaded from the
directory's host, if it is not already resident on the
user's machine. Automatically downloading JNDI drivers makes it
possible for a client to navigate across arbitrary directory services
without knowing in advance what kinds of services it is likely to
find.
</p>

<p>JNDI allows the application client to view the EJB server as a set of
directories, like directories in a common filesystem. After the
client application locates and obtains a remote reference to the EJB
home using JNDI, the client can use the EJB home to obtain a remote
reference to a bean. In the TravelAgent bean and the Cabin bean,
which you worked with in <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch04_01.htm">Chapter 4, "Developing Your First Enterprise Beans"</a>, you used the
method
<tt class="literal">getInitialContext()</tt><a name="INDEX-739"></a><a name="INDEX-740"></a> to get
a JNDI <tt class="literal">InitialContext</tt> object, which looked as
follows:
</p>

<blockquote>
<pre class="programlisting">public static Context getInitialContext() throws javax.naming.NamingException {
   Properties p = new Properties();
    // ... Specify the JNDI properties specific to the vendor.
    return new javax.naming.InitialContext(p);
}</pre>
</blockquote>

<p>An initial context is the starting point for any JNDI
lookup--it's similar in concept to the root of a
filesystem. The way you create an initial context is peculiar, but
not fundamentally difficult. You start with a properties table of
type <tt class="literal">Properties</tt>. This is essentially a hash table
to which you add various values that determine the kind of initial
context you get.
</p>

<p>Of course, as mentioned in <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch04_01.htm">Chapter 4, "Developing Your First Enterprise Beans"</a>, this code
will change depending on how your EJB vendor has implemented JNDI.
For Gemstone/J, <tt class="literal">getInitialContext()</tt> might look
something like this:
</p>

<blockquote>
<pre class="programlisting">public static Context getInitialContext() throws Exception {
    Properties p = new Properties();
    p.put(com.gemstone.naming.Defaults.NAME_SERVICE_HOST,"localhost");
    String port = System.getProperty("com.gemstone.naming.NameServicePort",
                                     "10200");
    p.put(com.gemstone.naming.Defaults.NAME_SERVICE_PORT, port);
    p.put(Context.INITIAL_CONTEXT_FACTORY,"com.gemstone.naming.GsCtxFactory");
    return new InitialContext(p);
}</pre>
</blockquote>

<p>For BEA's WebLogic Server, this method would be coded as:</p>

<blockquote>
<pre class="programlisting">public static Context getInitialContext() throws Exception {
    Properties p = new Properties();
    p.put(Context.INITIAL_CONTEXT_FACTORY,
        "weblogic.jndi.T3InitialContextFactory");
    p.put(Context.PROVIDER_URL, "t3://localhost:7001");
    return new InitialContext(p);
}</pre>
</blockquote>

<p>For a more detailed explanation of JNDI, see O'Reilly's
<em class="emphasis">Java&#153; Enterprise in a Nutshell</em>, by David
Flanagan, Jim Farley, William <a name="INDEX-741"></a><a name="INDEX-742"></a><a name="INDEX-743"></a> Crawford, and Kris Magnusson.
</p>






<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch04_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch05_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.3. Developing a Session Bean</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.2. The EJB Client-Side API</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
