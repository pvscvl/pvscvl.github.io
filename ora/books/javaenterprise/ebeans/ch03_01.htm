<html>
<head>
<title>Resource Management and the Primary Services (Enterprise JavaBeans)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Richard Monson-Haefel">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-869-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Resource Management and the Primary Services">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm" alt="Enterprise JavaBeans"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch02_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm">Enterprise JavaBeans</a></td><td align="right" valign="top" width="172"><a href="ch03_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch03_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h1 class="chapter">Chapter 3.  Resource Management and the Primary Services</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch03_01.htm">Resource Management</a>
<br>
<a href="ch03_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch03_02.htm">Primary Services</a>
<br>
<a href="ch03_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch03_03.htm">What's Next?</a>
<br>
</p>
</div>


<p>
<a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch02_01.htm">Chapter 2, "Architectural Overview"</a> discussed the basic architecture of
Enterprise JavaBeans (EJB), including the relationship between the
bean class, remote interfaces, the EJB object and EJB home, and the
EJB server. These architectural components define a common model for
distributed server-side components in component transaction monitors
(CTMs).
</p>

<p>One of the reasons <a name="INDEX-330"></a>CTMs are such great distributed
object platforms is that they do more than just distribute objects:
they manage the <a name="INDEX-331"></a><a name="INDEX-332"></a>resources used by distributed
objects. CTMs are designed to manage thousands, even millions, of
distributed objects simultaneously. To be this robust, CTMs must be
very smart resource managers, managing how distributed objects use
memory and processing power. EJB recognizes that some of the resource
management techniques employed by CTMs are very common, and it
defines interfaces that help developers create beans that can take
advantage of these common practices.
</p>

<p>EJB CTMs are also great distributed object brokers. Not only do they
help clients locate the distributed objects they need, they also
provide many services that make it much easier for a client to use
the objects correctly. CTMs commonly support six primary services:
concurrency, transaction management, persistence, object
distribution, naming, and security. These services provide the kind
of infrastructure that is necessary for a successful three-tier
system.
</p>

<p>This chapter discusses both the resource management facilities and
the primary services that are available to Enterprise JavaBeans.
</p>



<h2 class="sect1">3.1. Resource Management</h2>

<p>One of the fundamental benefits of using EJB servers is that they are
able to handle heavy workloads while maintaining a high level of
performance. A large business system with many users can easily
require thousands of objects--even millions of objects--to
be in use simultaneously. As the number of interactions among these
objects increase, concurrency and transactional concerns can degrade
the system's response time and frustrate users. EJB servers
increase performance by synchronizing object interactions and sharing
resources.
</p>

<p>There is a relationship between the number of clients connected and
the number of distributed objects that are required to service them.
As client populations increase, the number of distributed objects and
resources required increases. At some point, the increase in the
number of clients will impact performance and diminish throughput.
EJB explicitly supports two mechanisms that make it easier to manage
large numbers of beans at runtime: instance pooling and activation.
</p>

<a name="ch03-2-fm2xml"></a>
<h3 class="sect2">3.1.1. Instance Pooling</h3>
<p>
<a name="INDEX-333"></a><a name="INDEX-334"></a><a name="INDEX-335"></a><a name="INDEX-336"></a>The concept of pooling resources is
nothing new. A commonly used technique is to pool database
connections so that the business objects in the system can share
database access. This trick reduces the number of connections needed,
which reduces resource consumption and increases throughput. Pooling
and reusing database connections is less expensive than creating and
destroying connections as needed. Some CTMs also apply resource
pooling to <a name="INDEX-337"></a>server-side components; this technique is
called <em class="emphasis">instance pooling</em>. Instance pooling
reduces the number of component instances, and therefore resources,
needed to service client requests. In addition, it is less expensive
to reuse pooled instances than to frequently create and destroy
instances.
</p>

<p>As you already know, EJB clients interact with the remote interfaces
that are implemented by EJB objects. Client applications never have
direct access to the actual bean. Instead, they interact with EJB
objects, which wrap bean instances. Instance pooling leverages
indirect access to beans to provide better performance. In other
words, since clients never access beans directly, there's no
fundamental reason to keep a separate copy of each bean for each
client. The server can keep a much smaller number of beans around to
do the work, copying data into or out of them as needed. Although
this sounds like a resource drain, when done correctly, it greatly
reduces the resources actually required at any one time.
</p>

<a name="JBEANS-CH-3-SECT-1.1.1"></a>
<h3 class="sect3">3.1.1.1. The entity bean life cycle</h3>

<p>
<a name="INDEX-338"></a><a name="INDEX-339"></a><a name="INDEX-340"></a>To understand how instance pooling
works, let's examine the life cycle of an entity bean. EJB
defines the life cycle of an entity bean in terms of its relationship
to the instance pool.
<a name="INDEX-341"></a>An entity
bean exists in one of three states:
</p>

<dl>
<dt>
<b>
<a name="INDEX-342"></a>
No state</b>
</dt>
<dd>
<p>When a bean instance is in this state, it has not been instantiated
yet. We identify this state to provide a beginning and an end for the
life cycle of a bean instance.
</p>
</dd>

<dt>
<b>Pooled state</b>
</dt>
<dd>
<p>
<a name="INDEX-343"></a>When an
instance is in the pooled state, it has been instantiated by the
container but has not yet been associated with an EJB object.
</p>
</dd>

<dt>
<b>Ready State</b>
</dt>
<dd>
<p>A <a name="INDEX-344"></a>bean instance
in this state has been associated with an EJB object and is ready to
respond to business method invocations.
</p>
</dd>

</dl>



<a name="JBEANS-CH-3-SECT-1.1.2"></a>
<h3 class="sect3">3.1.1.2. Overview of state transitions</h3>

<p>Each <a name="INDEX-345"></a>EJB vendor implements instance
pooling for entity beans differently, but all instance pooling
strategies attempt to manage collections of bean instances so that
they are quickly accessible at runtime. To create an instance pool,
the EJB container creates several instances of a bean class and then
holds onto them until they are needed. As clients make business
method requests, bean instances from the pool are assigned to the EJB
objects associated with the clients. When the EJB object
doesn't need the instance any more, it's returned to the
instance pool. An EJB server maintains instance pools for every type
of bean deployed. Every instance in an instance pool is
<em class="emphasis">equivalent </em><a name="INDEX-346"></a>; they are all
treated equally. Instances are selected arbitrarily from the instance
pool and assigned to EJB objects as needed.
</p>

<p>Soon after the bean instance is instantiated and placed in the pool,
it's given a reference to a <a name="INDEX-347"></a><tt class="literal">javax.ejb.EJBContext</tt> provided by the container.
The <tt class="literal">EJBContext</tt> provides an interface that the bean
can use to communicate with the EJB environment. This
<tt class="literal">EJBContext</tt> becomes more useful when the bean
instance moves to the Ready State.
</p>

<a name="ch03-5-fm2xml"></a>
<blockquote class="note">
<h4 class="objtitle">NOTE</h4>
<p>EJB 1.1 has extended the bean's interface with its environment to include a JNDI context called the <a name="INDEX-348"></a>
environment context. The function of the environment context in EJB 1.1 is not critical to this discussion and will be addressed in more detail later in the chapter.</p>
</blockquote>

<p>When a client uses an EJB home to obtain a remote interface to a
bean, the container responds by creating an EJB object. Once created,
the EJB object is assigned a bean instance from the instance pool.
When a bean instance is assigned to an EJB object, it officially
enters the Ready State. From the Ready State, a bean instance can
receive requests from the client and callbacks from the container.
<a href="#ch03-16651">Figure 3-1</a> shows the sequence of events that result
in an EJB object wrapping a bean instance and servicing a client.
</p>

<a name="ch03-16651"></a>
<div class="figure">
<img alt="figure" src="figs/ejb2_0301.gif" webstripperlinkwas="figs/ejb2_0301.gif"></div>
<h4 class="objtitle">Figure 3-1. A bean moves from the instance pool to the Ready State</h4>

<p>
<a name="INDEX-349"></a>
When a bean instance moves into the Ready State, the
<a name="INDEX-350"></a><tt class="literal">EntityContext</tt>
takes on new meaning. The <tt class="literal">EntityContext</tt> provides
information about the client that is using the bean. It also provides
the instance with access to its own EJB home and EJB object, which is
useful when the bean needs to pass references to itself to other
instances, or when it needs to create, locate, or remove beans of its
own class. So the <tt class="literal">EntityContext</tt> is not a static
class; it is an interface to the container and its state changes as
the instance is assigned to different EJB objects.
</p>

<p>When the client is finished with a bean's remote reference,
either the remote reference passes out of scope or one of the
bean's <a name="INDEX-351"></a>
remove methods is called.<a href="#FOOTNOTE-1">[1]</a> Once a bean has been removed or is no longer in scope,
the bean instance is disassociated from the EJB object and returned
to the instance pool. Bean instances can also be returned to the
instance pool during lulls between client requests. If a client
request is received and no bean instance is associated with the EJB
object, an instance is retrieved from the pool and assigned to the
EJB object. This is called <a name="INDEX-352"></a><a name="INDEX-353"></a><a name="INDEX-354"></a><em class="emphasis">instance swapping.</em>
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1] Both the
<tt class="literal">EJBHome</tt> and the <tt class="literal">EJBObject</tt>
interfaces define methods that can be used to remove a bean.</p>
</blockquote>

<p>After the bean instance returns to the instance pool, it is again
available to service a new client request. <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch03_01.htm">Chapter 3, "Resource Management and the Primary Services"</a> illustrates the complete life cycle of a bean
instance.
</p>

<a name="ch03-63078"></a>
<div class="figure">
<img alt="figure" src="figs/ejb2_0302.gif" webstripperlinkwas="figs/ejb2_0302.gif"></div>
<h4 class="objtitle">Figure 3-2. Life cycle of a bean instance</h4>

<p>
<a name="INDEX-355"></a><a name="INDEX-356"></a><a name="INDEX-357"></a>
The number of instances in the pool fluctuates as instances are
assigned to EJB objects and returned to the pool. The container can
also manage the number of instances in the pool, increasing the count
when client activity increases and lowering the count during less
active <a name="INDEX-358"></a> periods.
</p>



<a name="JBEANS-CH-3-SECT-1.1.3"></a>
<h3 class="sect3">3.1.1.3. Instance swapping</h3>

<p>
<a name="INDEX-359"></a><a name="INDEX-360"></a>Stateless session beans offer a
particularly powerful opportunity to leverage instance pooling. A
stateless session bean does not maintain any state between method
invocations. Every method invocation on a stateless session bean
operates independently, performing its task without relying on
instance variables. This means that any stateless session instance
can service requests for any EJB object of the proper type, allowing
the container to swap bean instances in and out between method
invocations made by the client.
</p>

<p>
<a href="#JBEANS-CH-3-FIG-3">Figure 3-3</a> illustrates this type of instance
swapping between method invocations. In <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch03_01.htm">Chapter 3, "Resource Management and the Primary Services"</a>(a), instance A is servicing a business method
invocation delegated by EJB object 1. Once instance A has serviced
the request, it moves back to the instance pool (<a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch03_01.htm">Chapter 3, "Resource Management and the Primary Services"</a>(b)). When a business method invocation on EJB
object 2 is received, instance A is associated with that EJB object
for the duration of the operation (<a href="#JBEANS-CH-3-FIG-3">Figure 3-3</a>(c)).
While instance A is servicing EJB object 2, another method invocation
is received by EJB object 1 from the client, which is serviced by
instance B (<a href="#JBEANS-CH-3-FIG-3">Figure 3-3</a>(d)).
</p>

<a name="JBEANS-CH-3-FIG-3"></a>
<div class="figure">
<img alt="figure" src="figs/ejb2_0303.gif" webstripperlinkwas="figs/ejb2_0303.gif"></div>
<h4 class="objtitle">Figure 3-3. Stateless session beans in a swapping strategy</h4>

<p>Using this swapping strategy allows a few stateless session bean
instances to serve hundreds of clients. This is possible because the
amount of time it takes to perform most method invocations is
substantially shorter than the pauses between method invocations. The
periods in a bean instance's life when it is not actively
servicing the EJB object are unproductive; instance pooling minimizes
these inactive periods. When a bean instance is finished servicing a
request for an EJB object, it is immediately made available to any
other EJB object that needs it. This allows fewer stateless session
instances to service more requests, which decreases resource
consumption and improves performance.
</p>

<p>
<a name="INDEX-361"></a><a name="INDEX-362"></a>Stateless session beans are declared
stateless in the deployment descriptor. Nothing in the class
definition of a session bean is specific to being stateless. Once a
bean class is deployed as stateless, the container assumes that no
conversational state is maintained between method invocations. So a
stateless bean can have instance variables, but because bean
instances can be servicing several different EJB objects, they should
not be used to maintain conversational state.
</p>

<p>Implementations of instance pooling vary, depending on the vendor.
One way that instance pooling implementations often differ is in how
instances are selected from the pool. Two of the common strategies
are FIFO and LIFO. The <a name="INDEX-363"></a>FIFO (first in, first out) strategy
places instances in a queue, where they wait in line to service EJB
objects. The <a name="INDEX-364"></a>LIFO (last in, first out) uses more of
stack strategy, where the last bean that was added to the stack is
the first bean assigned to the next EJB object. <a href="#JBEANS-CH-3-FIG-3">Figure 3-3</a> uses a LIFO <a name="INDEX-365"></a><a name="INDEX-366"></a><a name="INDEX-367"></a> strategy.<a name="INDEX-368"></a><a name="INDEX-369"></a>
</p>



<a name="JBEANS-CH-3-SECT-1.2"></a>
<h3 class="sect2">3.1.2. The Activation Mechanism</h3>

<p>
<a name="INDEX-370"></a><a name="INDEX-371"></a>Unlike
stateless session beans, stateful session beans maintain state
between method invocations. This is called
<a name="INDEX-372"></a><em class="emphasis">conversational</em><em class="emphasis">state</em>
because it represents the continuing conversation with the stateful
session bean's client. The integrity of this conversational
state needs to be maintained for the life of the bean's service
to the client. Stateful session beans do not participate in instance
pooling like stateless session beans and entity beans. Instead,
activation is used with stateful session beans to conserve resources.
When an EJB server needs to conserve resources, it can evict stateful
session beans from memory. This reduces the number of instances
maintained by the system. To passivate the bean and preserve its
conversational state, the bean's state is serialized to a
secondary storage and maintained relative to its EJB object. When a
client invokes a method on the EJB object, a new stateful instance is
instantiated and populated from the passivated secondary storage.
</p>

<p>
<a name="INDEX-373"></a><a name="INDEX-374"></a><em class="emphasis">Passivation</em> is the
act of disassociating a stateful bean instance from its EJB object
and saving its state. Passivation requires that the bean
instance's state be held relative to its EJB object. After the
bean has been passivated, it is safe to remove the bean instance from
the EJB object and evict it from memory. Clients are completely
unaware of the deactivation process. Remember that the client uses
the bean's remote interface, which is implemented by an EJB
object, and therefore does not directly communicate with the bean
instance. As a result, the client's connection to the EJB
object can be maintained while the bean is passivated.
</p>

<p>Activating a bean is the act of restoring a stateful bean
instance's state relative to its EJB object. When a method on
the passivated EJB object is invoked, the container automatically
instantiates a new instance and sets its fields equal to the data
stored during passivation. The EJB object can then delegate the
method invocation to the bean as normal. <a href="#JBEANS-CH-3-FIG-4">Figure 3-4</a>
shows activation and passivation of a stateful bean. In <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch03_01.htm">Chapter 3, "Resource Management and the Primary Services"</a>(a), the bean is being passivated. The state of
instance B is read and held relative to the EJB object it was
serving. In <a href="#JBEANS-CH-3-FIG-4">Figure 3-4</a>(b), the bean has been
passivated and its state preserved. Here, the EJB object is not
associated with a bean instance. In <a href="#JBEANS-CH-3-FIG-4">Figure 3-4</a>(c),
the bean is being activated. A new instance, instance C, has been
instantiated and associated with the EJB object, and is in the
process of having its state populated. The instance C is populated
with the state held relative to the EJB object.
</p>

<a name="JBEANS-CH-3-FIG-4"></a>
<div class="figure">
<img alt="figure" src="figs/ejb2_0304.gif" webstripperlinkwas="figs/ejb2_0304.gif"></div>
<h4 class="objtitle">Figure 3-4. The activation process</h4>

<p>The exact mechanism for activating and passivating stateful beans is
up to the vendor, but all stateful beans are
<a name="INDEX-375"></a>serializable and
thus provide at least one way of temporarily preserving their state.
While some vendors take advantage of the Java serialization
mechanism, the exact mechanism for preserving the
<a name="INDEX-376"></a>conversational
state is not specified. As long as the mechanism employed follows the
same rules as Java serialization with regard to transitive closure of
serializable objects, any mechanism is legal. Because Enterprise
JavaBeans also supports other ways of saving a bean's state,
the <a name="INDEX-377"></a>transient property is not treated
the same when activating a passivated bean as it is in Java
serialization. In Java serialization, transient fields are always set
back to the initial value for that field type when the object is
deserialized. Integers are set to zero, Booleans to
<tt class="literal">false</tt>, object references to
<tt class="literal">null</tt>, etc. In EJB, transient fields are not
necessarily set back to their initial values but can maintain their
original values, or any arbitrary value, after being activated. Care
should be taken when using transient fields, since their state
following activation is implementation specific.
</p>

<p>The activation process is supported by the state-management
<a name="INDEX-378"></a>callback methods discussed in
<a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch02_01.htm">Chapter 2, "Architectural Overview"</a>. Specifically, the
<a name="INDEX-379"></a><a name="INDEX-380"></a><tt class="literal">ejbActivate()</tt> and
<a name="INDEX-381"></a><a name="INDEX-382"></a><tt class="literal">ejbPassivate()</tt> methods notify the stateful bean
instance that it is about to be activated or passivated,
respectively. The <tt class="literal">ejbActivate()</tt> method is called
immediately following the successful activation of a bean instance
and can be used to reset transient fields to an initial value if
necessary. The <tt class="literal">ejbPassivate()</tt> method is called
immediately prior to passivation of the bean instance. These two
methods are especially helpful if the bean instance maintains
connections to resources that need to be manipulated or freed prior
to passivation and reobtained following activation. Because the
stateful bean instance is evicted from memory, open connections to
resources are not maintained. The exceptions are remote references to
other beans and the <tt class="literal">SessionContext</tt>, which must be
maintained with the serialized state of the bean and reconstructed
when the bean is activated.
</p>

<a name="ch03-8-fm2xml"></a>
<blockquote class="note">
<h4 class="objtitle">NOTE</h4>
<p>EJB 1.1 also requires that the references to the JNDI environment context, home interfaces, and the UserTransaction be maintained through passivation.</p>
</blockquote>

<p>
<a name="INDEX-383"></a><a name="INDEX-384"></a><a name="INDEX-385"></a>Entity beans do not have conversational
state that needs to be serialized like stateful beans; instead, the
state of entity bean instances is persisted directly to the database.
Entity beans do, however, leverage the activation callback methods
(<tt class="literal">ejbActivate()</tt> and
<tt class="literal">ejbPassivate()</tt>) to notify the instance when
it's about to be swapped in or out of the instance pool. The
<tt class="literal">ejbActivate()</tt> method is invoked immediately after
the bean instance is swapped into the EJB object, and the
<tt class="literal">ejbPassivate()</tt><a name="INDEX-386"></a> method is invoked <a name="INDEX-387"></a> just before
<a name="INDEX-388"></a><a name="INDEX-389"></a> the
instance is swapped out.
</p>









<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch02_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch03_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.4. Summary</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.2. Primary Services</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
