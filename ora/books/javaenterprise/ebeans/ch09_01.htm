<html>
<head>
<title>Design Strategies (Enterprise JavaBeans)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Richard Monson-Haefel">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-869-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Design Strategies">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm" alt="Enterprise JavaBeans"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch08_08.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm">Enterprise JavaBeans</a></td><td align="right" valign="top" width="172"><a href="ch09_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h1 class="chapter">Chapter 9.  Design Strategies</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_01.htm">Hash Codes in Compound Primary Keys</a>
<br>
<a href="ch09_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_02.htm">Passing Objects by Value</a>
<br>
<a href="ch09_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_03.htm">Improved Performance with Session Beans</a>
<br>
<a href="ch09_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_04.htm">Bean Adapters</a>
<br>
<a href="ch09_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_05.htm">Implementing a Common Interface</a>
<br>
<a href="ch09_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_06.htm">Entity Beans Without Create Methods</a>
<br>
<a href="ch09_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_07.htm">Entity Bean Relationships</a>
<br>
<a href="ch09_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_08.htm">Object-to-Relational Mapping Tools</a>
<br>
<a href="ch09_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_09.htm">When Entity Beans Are Not an Option</a>
<br>
<a href="ch09_10.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_10.htm">Avoid Chaining Stateful Session Beans</a>
<br>
</p>
</div>


<p>
<a name="INDEX-1809"></a><a name="INDEX-1810"></a>The previous eight chapters have
presented the core EJB technology. What's left is a grab bag of
miscellaneous issues: how do you solve particular design problems,
how do you work with particular kinds of databases, and topics of
that nature.
</p>



<h2 class="sect1">9.1. Hash Codes in Compound Primary Keys</h2>

<p>
<a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch06_01.htm">Chapter 6, "Entity Beans"</a> discusses the <a name="INDEX-1811"></a><a name="INDEX-1812"></a><a name="INDEX-1813"></a><a name="INDEX-1814"></a>necessity of overriding the
<tt class="literal">Object.hashCode()</tt> and
<tt class="literal">Object.equals()</tt> methods in the primary key class.
As an example, we used the primary key for the Ship bean,
<tt class="literal">ShipPK</tt> . This is a simple primary key with a
single integer field, <tt class="literal">id </tt>. Therefore, our
<tt class="literal">hashCode()</tt> and <tt class="literal">equals()</tt> methods
were very simple; <tt class="literal">hashCode()</tt> just returned the
<tt class="literal">id</tt> field as the hash value. With complex primary
keys that have several fields, overriding the
<tt class="literal">Object.equals()</tt> method remains trivial. However,
the <tt class="literal">Object.hashCode()</tt> method is more complicated
because an integer value that can serve as a suitable hash code must
be created from several fields.
</p>

<p>One solution is to concatenate all the values into a
<tt class="literal">String</tt> and use the <tt class="literal">String</tt>
object's <tt class="literal">hashCode()</tt> method to create a hash
code value for the whole primary key. The <tt class="literal">String</tt>
class has a decent hash code algorithm that generates a fairly well
distributed and repeatable hash code value from any set of
characters. The following code shows how to create such a hash code
for a hypothetical primary key:
</p>

<blockquote>
<pre class="programlisting">public class HypotheticalPrimaryKey implements java.io.Serializable { 
    public int primary_id;
    public short secondary_id;
    public java.util.Date date; 
    public String desc; 

    public int hashCode() { 

        StringBuffer strBuff = new StringBuffer(); 
        strBuff.append(primary_id); 
        strBuff.append(secondary_id); 
        strBuff.append(date); 
        strBuff.append(desc); 
        String str = strBuff.toString(); 
        int hashCode = str.hashCode(); 
        return hashCode; 
    } 
    // the constructor, equals, and toString methods follow 
}</pre>
</blockquote>

<p>A <tt class="literal">StringBuffer</tt> cuts down on the number of objects
created, since <tt class="literal">String</tt> concatenation is expensive.
The code could be improved by saving the hash code in a private
variable and returning that value in subsequent method calls; this
way, the hash code is only calculated once in the life of the
instance.
</p>

<a name="JBEANS-CH-9-SECT-1.1"></a>
<h3 class="sect2">9.1.1. Well-Distributed Versus Unique Hash Codes</h3>

<p>A <tt class="literal">Hashtable</tt> is designed to provide fast lookups by
binding an object to a key. Given any object's key, looking the
object up in a hash table is a very quick operation. For the lookup,
the key is converted to an integer value using the key's
<tt class="literal">hashCode()</tt> method.
</p>

<p>Hash codes do not need to be unique, only well-distributed. By
"well-distributed," we mean that given any two keys, the
chances are very good that the hash codes for the keys will be
different. A well-distributed hash code algorithm reduces, but does
not eliminate, the possibility that different keys evaluate to the
same hash code. When keys evaluate to the same hash code, they are
stored together and uniquely identified by their
<tt class="literal">equals()</tt> method. If you look up an object using a
key that evaluates to a hash code that is shared by several other
keys, the <tt class="literal">Hashtable</tt> locates the group of objects
that have been stored with the same hash code; then it uses the
key's <tt class="literal">equals()</tt> method to determine which key
(and hence, which object) you want. (That's why you have to
override the <tt class="literal">equals()</tt> method in primary keys, as
well as the <tt class="literal">hashCode()</tt> method.) Therefore, the
emphasis in designing a good hash code algorithm is on producing
codes that are well-distributed rather than unique. This allows you
to design an index for associating keys with objects that is easy to
compute, and therefore <a name="INDEX-1815"></a><a name="INDEX-1816"></a><a name="INDEX-1817"></a><a name="INDEX-1818"></a> fast.
</p>























<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch08_08.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch09_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">8.8. Transactional Stateful Session Beans</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">9.2. Passing Objects by Value</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
