<html>
<head>
<title>Improved Performance with Session Beans (Enterprise JavaBeans)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Richard Monson-Haefel">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-869-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Improved Performance with Session Beans">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm" alt="Enterprise JavaBeans"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_01.htm">Chapter 9: Design Strategies</a></td><td align="right" valign="top" width="172"><a href="ch09_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">9.3. Improved Performance with Session Beans</h2>

<p>
<a name="INDEX-1845"></a><a name="INDEX-1846"></a><a name="INDEX-1847"></a>In addition to defining
the interactions among entity beans and other resources (workflow),
session beans have another substantial benefit: they improve
performance. The performance gains from using session beans are
related to the concept of <a name="INDEX-1848"></a><a name="INDEX-1849"></a><em class="emphasis">granularity</em>.
Granularity describes the scope of a business component, or how much
business territory the component covers. As you learned previously,
very fine-grained dependent business objects are usually modeled as
pass-by-value objects. At a small granularity, you are dealing with
entity beans like Ship or Cabin. These have a scope limited to a
single concept and can only impact the data associated with that
concept. Session beans represent large, coarse-grained components
with a scope that covers several business concepts--all the
business concepts or processes that the bean needs in order to
accomplish a task. In distributed business computing, you rely on
fine-grained components like entity beans to ensure simple, uniform,
reusable, and safe access to data. Coarse-grained business components
like session beans capture the interactions of entities or business
processes that span multiple entities so that they can be reused; in
doing so, they also improve performance on both the client and the
server. As a rule of thumb, client applications should do most of
their work with coarse-grained components like session beans, and
with limited direct interaction with entity beans.
</p>

<p>To understand how session beans improve performance, we have to
address the most <a name="INDEX-1850"></a>
common problems cited with distributed component systems: network
traffic, latency, and resource consumption.
</p>

<a name="JBEANS-CH-9-SECT-3.1"></a>
<h3 class="sect2">9.3.1. Network Traffic and Latency</h3>

<p>One of the biggest problems of distributed component systems is that
they generate a lot of network traffic. This is especially true of
component systems that rely solely on <a name="INDEX-1851"></a><a name="INDEX-1852"></a>
entity-type business components, such as EJB's
<tt class="literal">EntityBean</tt> component. Every method call on a
remote reference begins a remote method invocation loop, which sends
information from the stub to the server and back to the stub. The
loop requires data to be streamed to and from the client, consuming
bandwidth. If we built a reservation system for Titan Cruise Lines,
we would probably use several entity beans like Ship, Cabin, Cruise,
and Customer. As we navigate through these fine-grained beans,
requesting information, updating their states, and creating new
beans, we generate network traffic. One client probably doesn't
generate very much traffic, but multiply that by thousands of clients
and we start to develop problems. Eventually, thousands of clients
will produce so much network traffic that the system as a whole will
suffer.
</p>

<p>Another aspect of network communications is
<a name="INDEX-1853"></a><a name="INDEX-1854"></a><em class="emphasis">latency</em>. Latency is the delay between the time
we execute a command and the time it completes. With enterprise beans
there is always a bit of latency due to the time it takes to
communicate requests via the network. Each method invocation requires
a RMI loop that takes time to travel from the client to the server
and back to the client. A client that uses many beans will suffer
from a time delay with each method invocation. Collectively, the
latency delays can result in very slow clients that take several
seconds to respond to each user action.
</p>

<p>Accessing coarse-grained session beans from the client instead of
fine-grained entity beans can substantially reduce problems with
network bandwidth and latency. In <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch06_01.htm">Chapter 6, "Entity Beans"</a>, we
developed the <tt class="literal">bookPassage()</tt> method on the
TravelAgent bean. The <tt class="literal">bookPassage()</tt> method
encapsulates the interactions of entity beans that would otherwise
have resided on the client. For the network cost of one method
invocation on the client (<tt class="literal">bookPassage()</tt>), several
tasks are performed on the EJB server. Using session beans to
encapsulate several tasks reduces the number of remote method
invocations needed to accomplish a task, which reduces the amount of
network traffic and latency encountered while performing these tasks.
</p>


<a name="JBEANS-CH-9-SECT-3.2"></a>
<h3 class="sect2">9.3.2. Resource Consumption</h3>

<p>Make decisions about whether to access data directly or through
entity beans with care. <a name="INDEX-1855"></a><a name="INDEX-1856"></a><a name="INDEX-1857"></a>Listing behavior that is specific to a
workflow should be provided by direct data access from a session
bean. Methods like <tt class="literal">listAvailableCabins()</tt> in the
TravelAgent bean use direct data access because it is less expensive
than creating a find method in the Cabin bean that returns a list of
Cabin beans. Every bean that the system has to deal with requires
resources; by avoiding the use of components where their benefit is
questionable, we can improve the performance of the whole system. A
<a name="INDEX-1858"></a>CTM is like a powerful truck, and
each business component it manages is like a small weight. A truck is
much better at hauling around a bunch of weights than an lightweight
vehicle like a bicycle, but piling too many weights on the truck will
make it just as ineffective as the bicycle. If neither vehicle can
move, which one is better?
</p>


<a name="JBEANS-CH-9-SECT-3.3"></a>
<h3 class="sect2">9.3.3. Striking a Balance</h3>

<p>
<a name="INDEX-1859"></a><a name="INDEX-1860"></a>
We don't want to abandon the use of entity business components,
because they provide several advantages over traditional two-tier
computing. They allow us to encapsulate the business logic and data
of a business concept so that it can be used consistently and reused
safely across applications. In short, entity business components are
better for accessing business state because they simplify data
access.
</p>

<p>At the same time, we don't want to overuse entity beans on the
client. Instead, we want the client to interact with coarse-grained
session beans that encapsulate the interactions of small-grained
entity beans. There are situations where the client application
should interact with entity beans directly. If a client application
needs to edit a specific entity--change the address of a
customer, for example--exposing the client to the entity bean is
more practical than using a session bean. If, however, a task needs
to be performed that involves the interactions of more than one
entity bean--transferring money from account to another, for
example--then a session bean should be used.
</p>

<p>When a client application needs to perform a very specific operation
on an entity, like an update, it makes sense to make the entity
available to client directly. If the client is performing a task that
spans business concepts or otherwise involves more then one entity,
that task should be modeled in a session bean as a workflow. A good
design will emphasize the use of coarse-grained session beans as
workflow and limit the number of activities that require direct
client access to entity beans.
</p>


<a name="JBEANS-CH-9-SECT-3.4"></a>
<h3 class="sect2">9.3.4. Listing Behavior</h3>

<p>
<a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch07_01.htm">Chapter 7, "Session Beans"</a> spends some time discussing the
TravelAgent bean's <tt class="literal">listAvailableCabins()</tt>
method as an example of a method that returns a list of tabular data.
This section provides several different strategies for implementing
listing behavior in your beans.
</p>

<p>Tabular data is data that is arranged into rows and columns. Tabular
data is often used to let application users select or inspect data in
the system. Enterprise JavaBeans lets you use find methods to list
entity beans, but this mechanism is not a silver bullet. In many
circumstances, find methods that return remote references are a
heavyweight solution to a lightweight problem. For example, <a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_01.htm">Chapter 9, "Design Strategies"</a> shows the schedule for a cruise.
</p>

<p>
</p>

<a name="JBEANS-CH-9-TABLE-2"></a>
<h4 class="objtitle">Table 9-1. Hypothetical Cruise Schedule</h4>
<table border="1">





<tr>
<th>
<p>Cruise ID</p>
</th>
<th>
<p>Port-of-Call</p>
</th>
<th>
<p>Arrive</p>
</th>
<th>
<p>Depart</p>
</th>
</tr>

<tr>
<td>
<p>233</p>
</td>
<td>
<p>San Juan</p>
</td>
<td>
<p>June 4, 1999</p>
</td>
<td>
<p>June 5, 1999</p>
</td>
</tr>
<tr>
<td>
<p>233</p>
</td>
<td>
<p>Aruba</p>
</td>
<td>
<p>June 7, 1999</p>
</td>
<td>
<p>June 8, 1999</p>
</td>
</tr>
<tr>
<td>
<p>233</p>
</td>
<td>
<p>Cartagena</p>
</td>
<td>
<p>June 9, 1999</p>
</td>
<td>
<p>June 10, 1999</p>
</td>
</tr>
<tr>
<td>
<p>233</p>
</td>
<td>
<p>San Blas Islands</p>
</td>
<td>
<p>June 11, 1999</p>
</td>
<td>
<p>June 12, 1999</p>
</td>
</tr>

</table>

<p>It would be possible to create a Port-Of-Call entity object that
represents every destination, and then obtain a list of destinations
using a find method, but this would be overkill. Recognizing that the
data is not shared and only useful in this one circumstance, we would
rather present the data as a simple tabular listing.
</p>

<p>In this case, we will present the data to the bean client as an array
of <tt class="literal">String</tt> objects, with the values separated by a
character delimiter. Here is the method signature used to obtain the
data:.
</p>

<blockquote>
<pre class="programlisting">public interface Schedule implements javax.ejb.EJBObject {   
    public String [] getSchedule(int ID) throws RemoteException;   
}  </pre>
</blockquote>

<p>And here is the structure of the <tt class="literal">String</tt> values
returned by the <tt class="literal">getSchedule()</tt> method:
</p>

<blockquote>
<pre class="programlisting">233; San Juan; June 4, 1999; June 5, 1999  
233; Aruba; June 7, 1999; June 8, 1999  
233; Cartegena; June 9, 1999; June 10, 1999  
233; San Blas Islands; June 11, 1999; June 12, 1999</pre>
</blockquote>

<p>The data could also be returned as a multidimensional array of
strings, in which each column represents one field. This would
certainly make it easier to reference each data item, but would also
complicate navigation.
</p>

<p>One disadvantage to using the simple array strategy is that Java is
limited to single type arrays. In other words, all the elements in
the array must be of the same type. We use an array of
<tt class="literal">Strings</tt> here because it
has the most flexibility for representing other data types. We could
also have used an array of
<tt class="literal">Objects</tt> or even a
<tt class="literal">Vector</tt>. The problem with using an
<tt class="literal">Object</tt> array or a <tt class="literal">Vector</tt> is
that there is no typing information at runtime or development time.
</p>

<a name="JBEANS-CH-9-SECT-3.4.1"></a>
<h3 class="sect3">9.3.4.1. Implementing lists as arrays of structures</h3>

<p>Instead of returning a simple array, a method that implements some
sort of listing behavior can also return an array of structures. For
example, to return the cruise ship schedule data illustrated in , you could return an array of schedule
structures. The structures are simple Java objects with no behavior
(i.e., no methods) that are passed in an array. The definition of the
structure and the bean interface that would be used are:
</p>

<blockquote>
<pre class="programlisting">// Definition of the bean that uses the Structure
public interface Schedule implements javax.ejb.EJBObject {   
  public CruiseScheduleItem [] getSchedule(int ID) throws RemoteException;   
} 

// Definition of the Structure
public class CruiseScheduleItem {   
    public int cruiseID; 
    public String portName;   
    public java.util.Date arrival;   
    public java.util.Date departure;   
} </pre>
</blockquote>

<p>Using structures allows the data elements to be of different types.
In addition, the structures are self describing: it is easy to
determine the structure of the data in the tabular set based on its
class definition.
</p>



<a name="JBEANS-CH-9-SECT-3.4.2"></a>
<h3 class="sect3">9.3.4.2. Implementing lists as ResultSets</h3>

<p>A more sophisticated and flexible way to implement a list is to
provide a pass-by-value implementation of the
<tt class="literal">java.sql.ResultSet</tt> interface. Although it is
defined in the JDBC package (<tt class="literal">java.sql</tt>) the
<tt class="literal">ResultSet</tt> interface is semantically independent of
relational databases; it can be used to represent any set of tabular
data. Since the <tt class="literal">ResultSet</tt> interface is familiar to
most enterprise Java developers, it is an excellent construct for use
in listing behavior. Using the <tt class="literal">ResultSet</tt> strategy,
the signature of the <tt class="literal">getSchedule()</tt> method would
be:
</p>

<blockquote>
<pre class="programlisting">public interface Schedule implements javax.ejb.EJBObject {   
    public ResultSet getSchedule(int cruiseID) throws RemoteException;   
} </pre>
</blockquote>

<p>In some cases, the tabular data displayed at the client may be
generated using standard SQL through a JDBC driver. If the
circumstances permit, you may choose to perform the query in a
session bean and return the result set directly to the client through
a listing method. However, there are many cases in which you
don't want to return a <tt class="literal">ResultSet</tt> that comes
directly from JDBC drivers. A <tt class="literal">ResultSet</tt> from a
JDBC 1.x driver is normally connected directly to the database, which
increases network overhead and exposes your data source to the
client. In these cases, you can implement your own
<tt class="literal">ResultSet</tt> object that uses arrays or vectors to
cache the data. JDBC 2.0 provides a cached
<tt class="literal">javax.sql.RowSet</tt> that looks like a
<tt class="literal">ResultSet</tt>, but is passed by value and provides
features like reverse scrolling. You can use the
<tt class="literal">RowSet</tt>, but don't expose behavior that
allows the result set to be updated. Data updates should only be
performed by bean methods.
</p>

<p>In some cases, the tabular data comes from several data sources or
nonrelational databases. In these cases, you can query the data using
the appropriate mechanisms within the listing bean, and then reformat
the data into your <tt class="literal">ResultSet</tt> implementation.
Regardless of the source of data, you still want to present it as
tabular data using a custom implementation of the
<tt class="literal">ResultSet</tt> interface.
</p>

<p>Using a <tt class="literal">ResultSet</tt> has a number of advantages and
disadvantages. First, the advantages:
</p>

<dl>
<dt>
<b>Consistent interface for developers</b>
</dt>
<dd>
<p>The <tt class="literal">ResultSet</tt> interface provides a consistent
interface that developers are familiar with and that is consistent
across different listing behaviors. Developers don't need to
learn several different constructs for working with tabular data;
they use the same <tt class="literal">ResultSet</tt> interface for all
listing methods.
</p>
</dd>

<dt>
<b>Consistent interface for automation</b>
</dt>
<dd>
<p>The <tt class="literal">ResultSet</tt> interface provides a consistent
interface that allows software algorithms to operate on data
independent of its content. A builder can be created that constructs
an HTML or GUI table based on any set of results that implements the
<tt class="literal">ResultSet</tt>.
</p>
</dd>

<dt>
<b>Metadata operations</b>
</dt>
<dd>
<p>The <tt class="literal">ResultSet</tt> interface defines several metadata
methods that provide developers with runtime information describing
the result set they are working with.
</p>
</dd>

<dt>
<b>Flexibility</b>
</dt>
<dd>
<p>The <tt class="literal">ResultSet</tt> interface is independent of the data
content, which allows tabular sets to change their schema independent
of the interfaces. A change in schema does not require a change to
the method signatures of the listing operations.
</p>
</dd>

</dl>

<p>And now, the disadvantages of using a <tt class="literal">ResultSet</tt>:</p>

<dl>
<dt>
<b>Complexity</b>
</dt>
<dd>
<p>The <tt class="literal">ResultSet</tt> interface strategy is much more
complex than returning a simple array or an array of structures. It
normally requires you to develop a custom implementation of the
<tt class="literal">ResultSet</tt> interface. If properly designed, the
custom implementation can be reused across all your listing methods,
but it's still a significant development effort.
</p>
</dd>

<dt>
<b>Hidden structure at development time</b>
</dt>
<dd>
<p>Although the <tt class="literal">ResultSet</tt> can describe itself through
metadata at runtime, it cannot describe itself at development time.
Unlike a simple array or an array of structures, the
<tt class="literal">ResultSet</tt> interface provides no clues at
development time about the structure of the underlying data. At
runtime, metadata is available, but at development time, good
documentation is required to express the structure of the data
<a name="INDEX-1861"></a><a name="INDEX-1862"></a><a name="INDEX-1863"></a>
explicitly.
</p>
</dd>

</dl>





<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch09_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">9.2. Passing Objects by Value</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">9.4. Bean Adapters</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
