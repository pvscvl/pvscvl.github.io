<html>
<head>
<title>J2EE Fills in the Gaps (Enterprise JavaBeans)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Richard Monson-Haefel">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-869-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="J2EE Fills in the Gaps">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm" alt="Enterprise JavaBeans"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch11_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch11_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch11_01.htm">Chapter 11: Java 2, Enterprise Edition</a></td><td align="right" valign="top" width="172"><a href="ch11_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch11_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">11.4. J2EE Fills in the Gaps</h2>

<p>The J2EE specification attempts to fill the gaps between the web
components and Enterprise JavaBeans by defining how these
technologies come together to form a complete platform.
</p>

<p>One of the ways in which J2EE adds value is by creating a consistent
programming model across web components and enterprise beans through
the use of the JNDI ENC and XML deployment descriptors. A servlet in
J2EE can access JDBC <tt class="literal">DataSource</tt> objects,
environment entries, and references to enterprise beans through a
JNDI ENC in exactly the same way that enterprise beans use the JNDI
ENC. To support the JNDI ENC, web components have their own XML
deployment descriptor that declares elements for the JNDI ENC
(<tt class="literal">ejb-ref</tt>, <tt class="literal">resource-ref</tt>,
<tt class="literal">env-entry</tt>) as well security roles and other
elements specific to web components. In J2EE, web components
(Servlets and JSP pages) along with their XML deployment descriptors,
are packaged and deployed in <a name="INDEX-2194"></a><a name="INDEX-2195"></a>JAR files with the extension
<em class="filename">.war</em><a name="INDEX-2196"></a>, which
stands for <em class="emphasis">w</em>eb <em class="emphasis">ar </em>chive.
The use of the <a name="INDEX-2197"></a>JNDI ENC, deployment descriptors,
and JAR files in web components makes them consistent with the EJB
programming model and unifies the entire J2EE platform. Here is a
simple deployment descriptor for a <a name="INDEX-2198"></a>web component:
</p>

<blockquote>
<pre class="programlisting">&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN"
"http://java.sun.com/j2ee/dtds/web-app_1_2.dtd"&gt;
&lt;web-app&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt; HelloWorld &lt;/servlet-name&gt;
    &lt;servlet-class&gt; HelloWorld.class &lt;/servlet-class&gt;
  &lt;/servlet&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt; HelloWorld &lt;/servlet-name&gt;
    &lt;url-pattern&gt; /HelloWorld.jsp &lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
  &lt;session-config&gt;
    &lt;session-timeout&gt;1&lt;/session-timeout&gt;
  &lt;/session-config&gt;
  &lt;ejb-ref&gt;
      &lt;ejb-ref-name&gt;ejb/ShipBean&lt;/ejb-ref-name&gt;
      &lt;ejb-ref-type&gt;Entity&lt;/ejb-ref-type&gt;
      &lt;home&gt;com.titan.ship.ShipBean&lt;/home&gt;
      &lt;remote&gt;com.titan.ship.Ship&lt;/remote&gt;
  &lt;/ejb-ref&gt;
&lt;/web-app&gt;</pre>
</blockquote>

<p>Use of the JNDI ENC makes it much simpler for web components to
access Enterprise JavaBeans. The web component developer
doesn't need to be concerned with the network location of
beans; the server will map the <tt class="literal">ejb-ref</tt> elements
listed in the deployment descriptor to the beans at deployment time.
The JNDI ENC also supports access to a
<tt class="literal">javax.jta.UserTransaction</tt> object, as is the case
in EJB. The <tt class="literal">UserTransaction</tt> object allows the web
component to manage transactions explicitly. The transaction context
must be propagated to any enterprise beans accessed within the scope
of the transaction (according to the transaction attribute of the
bean method). A <em class="filename">.war</em> file can contain several
servlets and JSP documents, which share an XML deployment descriptor.
</p>

<p>J2EE also defines an
<em class="filename">.ear</em><a name="INDEX-2199"></a>(Enterprise archive) file, which is a JAR
file for packaging Enterprise JavaBean JAR files and web component
JAR files (<em class="filename">.war</em> files) together into one
complete deployment called a J2EE Application. A J2EE Application has
its own XML deployment descriptor that points to the EJB and web
component JAR files (called
<a name="INDEX-2200"></a><a name="INDEX-2201"></a>modules) as well as other
elements like icons, descriptions, and the like. When a J2EE
Application is created, interdependencies like
<tt class="literal">ejb-ref</tt> elements can be resolved and security
roles can be edited to provide a unified view of the entire web
application. Here is a simple application deployment descriptor:
</p>

<blockquote>
<pre class="programlisting">&lt;!DOCTYPE application PUBLIC "-//Sun Microsystems, Inc.//DTDJ2EE Application 1.2//EN" "http://java.sun.com/j2ee/dtds/application_1_2.dtd"&gt;

&lt;application&gt;
   &lt;display-name&gt;MyApplication&lt;/display-name&gt;
   &lt;module&gt;
     &lt;ejb&gt; 
        shipbean.jar
     &lt;/ejb&gt;
   &lt;/module&gt;
   &lt;module&gt;
     &lt;web&gt;
        &lt;web-uri&gt;
          helloworld.war
        &lt;/web-uri&gt;
     &lt;/web&gt;
   &lt;/module&gt;
   &lt;security-role&gt;
      &lt;role-name&gt;Admistrator&lt;/role-name&gt;
   &lt;/security-role&gt;
&lt;/application&gt;</pre>
</blockquote>

<p>The <a name="INDEX-2202"></a><a name="INDEX-2203"></a>
J2EE Enterprise Archive (<em class="filename">.ear</em>) file would
contain the EJB JAR files and the web component
<em class="filename">.war</em> files. <a href="#JBEANS-CH-11-FIG-3">Figure 11-3</a>
illustrates the file structure inside a J2EE archive file.
</p>

<a name="JBEANS-CH-11-FIG-3"></a>
<div class="figure">
<img alt="figure" src="figs/ejb2_1103.gif" webstripperlinkwas="figs/ejb2_1103.gif"></div>
<h4 class="objtitle">Figure 11-3. Contents of a J2EE EAR file</h4>

<a name="JBEANS-CH-11-SECT-4.1"></a>
<h3 class="sect2">11.4.1. J2EE Application Client Components</h3>

<p>In addition to integrating web and enterprise bean components, J2EE
introduces a completely new component model: the <a name="INDEX-2204"></a><a name="INDEX-2205"></a>application client component. An
application client component is a Java application that resides on a
client machine and accesses enterprise bean components on the J2EE
server. Client components also have access to a JNDI ENC that
operates the same way as the JNDI ENC for web and enterprise bean
components. The client component also includes an
<a name="INDEX-2206"></a>XML deployment descriptor that
declares the <tt class="literal">env-entry</tt>,
<tt class="literal">ejb-ref</tt>, and <tt class="literal">resource-ref</tt>
elements of the JNDI ENC in addition to a
<tt class="literal">description</tt>, <tt class="literal">display-name</tt>, and
<tt class="literal">icon</tt> that can be used to represent the client
component in a deployment tool.
</p>

<p>A client component is simply a Java program that uses the JNDI ENC to
access environment properties, enterprise beans, and resources (JDBC, JavaMail, etc.) made available by the J2EE server. Client
components reside on the client machine, not the J2EE server. Here is
an extremely simple component:
</p>

<blockquote>
<pre class="programlisting">public class MyJ2eeClient {
    
    public static void main(String [] args) {
        
        InitialContext jndiCntx = new InitialContext(  );
        
        Object ref = jndiCntx.lookup("java:comp/env/ejb/ShipBean");
        ShipHome home = (ShipHome)
            PortableRemoteObject.narrow(ref,ShipHome.class);
        
        Ship ship = home.findByPrimaryKey(new ShipPK(1));
        String name = ship.getName(  );
        System.out.println(name);
    }
} </pre>
</blockquote>

<p>
<tt class="literal">MyJ2eeClient</tt> illustrates how a client component is
written. Notice that the client component did not need to use a
network-specific JNDI
<tt class="literal">InitialContext</tt><a name="INDEX-2207"></a>. In other words, we did not have to
specify the service provider in order to connect to the J2EE server.
This is the real power of the J2EE Application client component:
<a name="INDEX-2208"></a>location
transparency. The client component does not need to know the exact
location of the Ship bean or choose a specific JNDI service provider;
the JNDI ENC takes this care of locating the bean.
</p>

<p>When application components are developed, an XML deployment
descriptor is created that specifies the JNDI ENC entries. At
deployment time, a vendor-specific J2EE tool generates the class
files needed to deploy the component on client machines. The
following code shows the deployment descriptor used by the
<tt class="literal">MyJ2eeClient</tt> client component:
</p>

<blockquote>
<pre class="programlisting">&lt;!DOCTYPE application-client PUBLIC "-//Sun Microsystems,
Inc.//DTD J2EE Application Client 1.2//EN" "http://
java.sun.com/j2ee/dtds/application-client_1_2.dtd"&gt;

&lt;application-client&gt;
  &lt;display-name&gt;MyClient&lt;/display-name&gt;
  &lt;ejb-ref&gt;
      &lt;ejb-ref-name&gt;ejb/ShipBean&lt;/ejb-ref-name&gt;
      &lt;ejb-ref-type&gt;Entity&lt;/ejb-ref-type&gt;
      &lt;home&gt;com.titan.ship.ShipHome&lt;/home&gt;
      &lt;remote&gt;com.titan.ship.Ship&lt;/remote&gt;
  &lt;/ejb-ref&gt;
&lt;/application-client&gt;</pre>
</blockquote>

<p>A client component is packaged into a JAR file with its XML
deployment descriptor and can be included in a J2EE Application. The
following <a name="INDEX-2209"></a><a name="INDEX-2210"></a>application deployment descriptor
shows how the client component is declared:
</p>

<blockquote>
<pre class="programlisting">&lt;!DOCTYPE application PUBLIC "-//Sun Microsystems, Inc.//DTDJ2EE
Application 1.2//EN" "http://java.sun.com/j2ee/dtds/application_1_2.dtd"&gt;

&lt;application&gt;
   &lt;display-name&gt;MyApplication&lt;/display-name&gt;
   &lt;module&gt;
     &lt;ejb&gt; 
        shipbean.jar
     &lt;/ejb&gt;
   &lt;/module&gt;
   &lt;module&gt;
     &lt;web&gt;
        &lt;web-uri&gt;
          helloworld.war
        &lt;/web-uri&gt;
     &lt;/web&gt;
   &lt;/module&gt;
   &lt;module&gt;
<b class="emphasis-bold">     &lt;java&gt;</b>
<b class="emphasis-bold">        myclient.jar</b>
<b class="emphasis-bold">     &lt;/java&gt;</b>
   &lt;/module&gt;
   &lt;security-role&gt;
      &lt;role-name&gt;Admistrator&lt;/role-name&gt;
   &lt;/security-role&gt;
&lt;/application&gt;</pre>
</blockquote>

<p>Once a client component is included in the J2EE Application
deployment descriptor, it can be packaged in the EAR file with the
other components, as <a href="#ch11-69911">Figure 11-4</a> illustrates.
</p>

<a name="ch11-69911"></a>
<div class="figure">
<img alt="figure" src="figs/ejb2_1104.gif" webstripperlinkwas="figs/ejb2_1104.gif"></div>
<h4 class="objtitle">Figure 11-4. Contents of a J2EE 
EAR file with Application component</h4>

<p>
<a name="INDEX-2211"></a>
J2EE's application client component specification doesn't
cover
<a name="INDEX-2212"></a>authentication, but it
does require that client components authenticate (log in) before
accessing any beans. This omission makes it difficult to develop
truly portable client components because different vendors will
require different authentication mechanisms. In a future version of
the J2EE specification, client components may be required to use the
<a name="INDEX-2213"></a>Java Authentication and Authorization
Service ( JAAS), which would provide a consistent authorization
<a name="INDEX-2214"></a><a name="INDEX-2215"></a>
mechanism across different implementations.
</p>


<a name="JBEANS-CH-11-SECT-4.2"></a>
<h3 class="sect2">11.4.2. Guaranteed Services</h3>

<p>The <a name="INDEX-2216"></a><a name="INDEX-2217"></a>J2EE specification requires
application servers to support a specific set of protocols and Java
enterprise extensions. This ensures a consistent platform for
deploying J2EE applications. J2EE application servers must provide
the following "standard" services:
</p>

<dl>
<dt>
<b>Enterprise JavaBeans 1.1</b>
</dt>
<dd>
<p>J2EE products must support the complete specification.</p>
</dd>

<dt>
<b>
<a name="INDEX-2218"></a>
Servlets 2.2</b>
</dt>
<dd>
<p>J2EE products must support the complete specification.</p>
</dd>

<dt>
<b>
<a name="INDEX-2219"></a>
Java Sever Pages 1.1</b>
</dt>
<dd>
<p>J2EE products must support the complete specification.</p>
</dd>

<dt>
<b>
<a name="INDEX-2220"></a>
<a name="INDEX-2221"></a>
HTTP and HTTPS</b>
</dt>
<dd>
<p>Web components in a J2EE server service both HTTP and HTTPS requests.
The Servlets specification itself only requires support for HTTP. The
J2EE product must be capable of advertising HTTP 1.0 and HTTPS (HTTP
1.0 over SSL 3.0) on ports 80 and 443 respectively.
</p>
</dd>

<dt>
<b>
<a name="INDEX-2222"></a>
Java RMI-IIOP 1.0</b>
</dt>
<dd>
<p>As was the case with EJB 1.1, only the semantics of Java RMI-IIOP are
required; the underlying protocol need not be IIOP. Therefore,
components must use return and parameter types that are compatible
with IIOP, and must use the <tt class="literal">PortableRemoteObject.narrow(
)</tt> method.
</p>
</dd>

<dt>
<b>
<a name="INDEX-2223"></a>
JavaIDL</b>
</dt>
<dd>
<p>Web components and enterprise beans must be able to access CORBA
services hosted outside the J2EE environment using JavaIDL, a
standard part of the Java 2 platform.
</p>
</dd>

<dt>
<b>JDBC 2.0</b>
</dt>
<dd>
<p>J2EE requires support for the <a name="INDEX-2224"></a>JDBC 2.0
Standard Extension, but not the JDBC 2.0 Optional Package.
</p>
</dd>

<dt>
<b>
<a name="INDEX-2225"></a>
JNDI 1.2</b>
</dt>
<dd>
<p>Web and enterprise bean components must have access to the JNDI ENC,
which make available <tt class="literal">EJBHome</tt> objects, JTA
<tt class="literal">UserTransaction</tt> objects, JDBC
<tt class="literal">DataSource</tt> objects, and optionally Java Messaging
Service connection factory objects.
</p>
</dd>

<dt>
<b>JavaMail 1.1 and JAF 1.0</b>
</dt>
<dd>
<p>A J2EE products must provide access to the
<a name="INDEX-2226"></a>JavaMail API for sending basic Internet mail
messages (the protocol is not specified) from web and enterprise bean
components. J2EE products are not required to support message store
protocols, which means you must be able to send mail but not
necessarily to read mail. JAF is the <a name="INDEX-2227"></a>Java Activation
Framework, which is need to support different MIME types and is
required for support of JavaMail functionality.
</p>
</dd>

<dt>
<b>
<a name="INDEX-2228"></a>
Java Transaction API 1.0</b>
</dt>
<dd>
<p>Web and enterprise bean components must have access to JTA
<tt class="literal">UserTransaction</tt> objects via the JNDI ENC under the
<tt class="literal">"java:comp/UserTransaction"</tt> context. The
<tt class="literal">UserTransaction</tt> interface is used for explicit
transaction control.
</p>
</dd>

<dt>
<b>
<a name="INDEX-2229"></a>
Java Messaging Service 1.0</b>
</dt>
<dd>
<p>J2EE products must support the JMS API definitions (base classes and
interfaces), but are not required to provide a JMS implementation.
This means that JMS is an optional service in J2EE. If a JMS
implementation is supported, the connection factories can be made
available through the JNDI ENC.
</p>
</dd>

</dl>


<a name="JBEANS-CH-11-SECT-4.3"></a>
<h3 class="sect2">11.4.3. Connectivity and Interoperability</h3>

<p>The <a name="INDEX-2230"></a><a name="INDEX-2231"></a><a name="INDEX-2232"></a>J2EE specification currently
specifies two mechanisms that can be used to connect non-J2EE systems
with a J2EE system: client access to web component services and
connectivity with external
<a name="INDEX-2233"></a><a name="INDEX-2234"></a>CORBA services via JavaIDL. Client
connectivity with web components is via HTTP/HTTPS. In other words,
any client that can make HTTP requests can access J2EE servlets and
JSP pages, regardless of how the client is implemented. The
requirement that web and enterprise bean components support JavaIDL
ensures access to external CORBA services, CORBA objects hosted on
ORBs outside the J2EE application server.
</p>

<p>While these mechanisms support connectivity (the ability to connect
things together), interoperability (the ability for services to
collaborate) between J2EE servers or other kinds of servers is not
yet supported. In fact, J2EE doesn't even require that J2EE
servers of the same brand be interoperable. Security and
transactional propagation between web components and enterprise beans
are loosely specified in the J2EE specification; this area of the
specification needs to be improved.
</p>

<p>To have real interoperability, web and enterprise bean components
must be able to exchange information about the context in which they
operate when they request services for other J2EE processes. Just as
EJB propagates security and transaction context from one bean to the
next, interoperable services must share the same kind of contextual
information. Although HTTP and JavaIDL provide for connectivity with
external clients and services, they do not provide interoperability.
HTTP, for example, doesn't support interoperability for
security and transactions. CORBA interoperability is really
nonexistent, since mechanisms for propagating security and
transactional context between a J2EE server and CORBA services are
not specified.
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch11_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch11_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch11_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch11_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">11.3. Web Components and EJB</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">11.5. Fitting the Pieces Together</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
