<html>
<head>
<title>Distributed Object Architectures (Enterprise JavaBeans)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Richard Monson-Haefel">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-869-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Distributed Object Architectures">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm" alt="Enterprise JavaBeans"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_01.htm">Chapter 1: Introduction</a></td><td align="right" valign="top" width="172"><a href="ch01_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">1.3. Distributed Object Architectures</h2>

<p>
<a name="INDEX-47"></a><a name="INDEX-48"></a>EJB is a component model for
component transaction monitors, which are based on distributed object
technologies. Therefore, to understand EJB you need to understand how
distributed objects work. Distributed object systems are the
foundation for modern <a name="INDEX-49"></a>three-tier architectures. In a
three-tier architecture, as shown in <a href="#JBEANS-CH-1-FIG-1">Figure 1-1</a>,
the presentation logic resides on the client (first tier), the
business logic on the middle tier (second tier), and other resources,
such as the database, reside on the backend (third tier).
</p>

<a name="JBEANS-CH-1-FIG-1"></a>
<div class="figure">
<img alt="figure" src="figs/ejb2_0101.gif" webstripperlinkwas="figs/ejb2_0101.gif"></div>
<h4 class="objtitle">Figure 1-1. Three-tier architecture</h4>

<p>All distributed object protocols are built on the same basic
architecture, which is designed to make an object on one computer
look like it's residing on a different computer. Distributed
object architectures are based on a <a name="INDEX-50"></a>network communication layer that is really
very simple. Essentially, there are three parts to this architecture:
the object server, the
<a name="INDEX-51"></a><a name="INDEX-52"></a>skeleton, and the
<a name="INDEX-53"></a>stub.
</p>

<p>The <a name="INDEX-54"></a><a name="INDEX-55"></a><em class="emphasis">object server</em> is the business object that
resides on the middle tier. The term "server" can be a
little confusing, but for our purposes the object on the middle tier
can be called the "object server" to distinguish it from
its counterparts, the stub and skeleton. The object server is an
instance of an object with its own unique state. Every object server
class has matching stub and skeleton classes built specifically for
that type of object server. So, for example, a distributed business
object called <tt class="literal">Person</tt> would have matching
<tt class="literal">Person_Stub</tt> and <tt class="literal">Person_Skeleton</tt>
classes. As shown in <a href="#JBEANS-CH-1-FIG-2">Figure 1-2</a>, the object server
and skeleton reside on the middle tier, and the stub resides on the
client.
</p>

<p>The <em class="emphasis">stub</em> and the <em class="emphasis">skeleton</em>
are responsible for making the object server, which lives on the
middle tier, look as if it is running locally on the client machine.
This is accomplished through some kind of <a name="INDEX-56"></a><a name="INDEX-57"></a><a name="INDEX-58"></a><em class="emphasis">remote method invocation</em> (RMI) protocol. An RMI
protocol is used to communicate method invocations over a network.
CORBA, Java RMI, and Microsoft DCOM all use their own RMI
protocol.<a href="#FOOTNOTE-3">[3]</a> Every instance of the object server on
the middle tier is wrapped by an instance of its matching skeleton
class. The
<a name="INDEX-59"></a>skeleton is set up on a
port and IP address and listens for requests from the stub. The stub
resides on the client machine and is connected via the network to the
skeleton. The <a name="INDEX-60"></a>stub acts as the object
server's surrogate on the client and is responsible for
communicating requests from the client to the object server through
the <a name="INDEX-61"></a>skeleton. <a href="#JBEANS-CH-1-FIG-2">Figure 1-2</a>
illustrates the process of communicating a method invocation from the
client to the server object and back. <a name="INDEX-62"></a><a name="INDEX-63"></a>The stub and the
skeleton hide the communication specifics of the RMI protocol from
the client and the implementation class, respectively.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-3"></a>
<p>[3] The acronym RMI isn't specific to
Java RMI; it was in use long before Java came along. This section
uses RMI to describe distributed object protocols in general. Java
RMI is the Java language version of a distributed object
protocol.</p> </blockquote>

<a name="JBEANS-CH-1-FIG-2"></a>
<div class="figure">
<img alt="figure" src="figs/ejb2_0102.gif" webstripperlinkwas="figs/ejb2_0102.gif"></div>
<h4 class="objtitle">Figure 1-2. RMI loop</h4>

<p>The stub implements an interface with the same
<a name="INDEX-64"></a>business methods as
the object itself, but the stub's methods do not contain
business logic. Instead, the business methods on the stub implement
whatever networking operations are required to forward the request to
the object server and receive the results. When a client invokes a
business method on the stub, the request is communicated over the
network by streaming the name of the method invoked, and the values
passed in as parameters, to the skeleton. When the skeleton receives
the incoming stream, it parses the stream to discover which method is
requested, and then invokes the corresponding business method on the
object server. Any value that is returned from the method invoked on
the object server is streamed back to the stub by the skeleton. The
stub then returns the value to the client application as if it had
processed the business logic locally.
</p>

<a name="JBEANS-CH-1-SECT-3.1"></a>
<h3 class="sect2">1.3.1. Rolling Your Own Distributed Object</h3>

<p>
<a name="INDEX-65"></a>The best way to illustrate how
distributed objects work is to show how you can implement a
distributed object yourself, with your own distributed object
protocol. This will give you some appreciation for what a true
distributed object protocol like CORBA does. Actual distributed
object systems such as DCOM, CORBA, and Java RMI are, however, much
more complex and robust than the simple example we will develop here.
The distributed object system we develop in this chapter is only
illustrative; it is not a real technology, nor is it part of
Enterprise JavaBeans. The purpose is to provide you with some
understanding of how a more sophisticated distributed object system
works.
</p>

<p>Here's a very simple distributed object called
<a name="INDEX-66"></a><a name="INDEX-67"></a><tt class="literal">PersonServer</tt>
that implements the <tt class="literal">Person</tt> interface. The
<tt class="literal">Person</tt> interface captures the concept of a person
business object. It has two business methods:
<tt class="literal">getAge()</tt> and <tt class="literal">getName()</tt>. In a
real application, we would probably define many more behaviors for
the <tt class="literal">Person</tt> business object, but two methods are
enough for this example:
</p>

<blockquote>
<pre class="programlisting">public interface Person {
    public int getAge() throws Throwable;
    public String getName() throws Throwable;
}   </pre>
</blockquote>

<p>The implementation of this interface,
<tt class="literal">PersonServer</tt>, doesn't contain anything at
all surprising. It defines the business logic and state for a
<tt class="literal">Person</tt>:
</p>

<blockquote>
<pre class="programlisting">public class PersonServer implements Person {
    int age;
    String name;

    public PersonServer(String name, int age){
        this.age = age;
        this.name = name;
    }
    public int getAge(){
        return age;
    }
    public String getName(){
        return name;
    }
}</pre>
</blockquote>

<p>Now we need some way to make the <tt class="literal">PersonServer</tt>
available to a remote client. That's the job of the
<tt class="literal">Person_Skeleton</tt> and
<tt class="literal">Person_Stub</tt>. The <tt class="literal">Person</tt>
interface describes the concept of a person independent of
implementation. Both the <tt class="literal">PersonServer</tt> and the
<tt class="literal">Person_Stub</tt> implement the
<tt class="literal">Person</tt> interface because they are both expected to
support the concept of a person. The <tt class="literal">PersonServer</tt>
implements the interface to provide the actual business logic and
state; the <tt class="literal">Person_Stub</tt> implements the interface so
that it can look like a <tt class="literal">Person</tt> business object on
the client and relay requests back to the skeleton, which in turn
sends them to the object itself. Here's what the
<a name="INDEX-68"></a>stub looks like:
</p>

<blockquote>
<pre class="programlisting">import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.net.Socket;

public class Person_Stub implements Person {
    Socket socket;
    
    public Person_Stub() throws Throwable {
       // Create a network connection to the skeleton. 
       // Replace "myhost" with your own IP Address of your computer.
       socket = new Socket("myhost",9000);
    }
    public int getAge() throws Throwable {
       // When this method is invoked, stream the method name to the
       // skeleton.
       ObjectOutputStream outStream = 
           new ObjectOutputStream(socket.getOutputStream());
       outStream.writeObject("age");
       outStream.flush();
       ObjectInputStream inStream = 
           new ObjectInputStream(socket.getInputStream());
       return inStream.readInt();
    }
    public String getName() throws Throwable {
        // When this method is invoked, stream the method name to the
        // skeleton.
        ObjectOutputStream outStream = 
            new ObjectOutputStream(socket.getOutputStream());
        outStream.writeObject("name");
        outStream.flush();
        ObjectInputStream inStream = 
            new ObjectInputStream(socket.getInputStream());
        return (String)inStream.readObject();
    }
}</pre>
</blockquote>

<p>When a method is invoked on the <tt class="literal">Person_Stub</tt>, a
<tt class="literal">String</tt> token is created and streamed to the
skeleton. The token identifies the method that was invoked on the
stub. The
<a name="INDEX-69"></a>skeleton parses the
method-identifying token, invokes the corresponding method on the
object server, and streams back the result. When the stub reads the
reply from the skeleton, it parses the value and returns it to the
client. From the client's perspective, the stub processed the
request locally. Now let's look at the skeleton:
</p>

<blockquote>
<pre class="programlisting">import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.net.ServerSocket;

public class Person_Skeleton extends Thread {
    PersonServer myServer;

    public Person_Skeleton(PersonServer server){
        // Get a reference to the object server that this skeleton wraps.
        this.myServer = server;
    }
    public void run(){
      try {
        // Create a server socket on port 9000.
        ServerSocket serverSocket = new ServerSocket(9000);
        // Wait for and obtain a socket connection from stub.
        Socket socket = serverSocket.accept();
        while (socket != null){      
            // Create an input stream to receive requests from stub.
            ObjectInputStream inStream = 
                new ObjectInputStream(socket.getInputStream());
            // Read next method request from stub. Block until request is
            // sent.
            String method = (String)inStream.readObject();
            // Evaluate the type of method requested.
            if (method.equals("age")){
                // Invoke business method on server object.
                int age = myServer.getAge();
                // Create an output stream to send return values back to
                // stub.
                ObjectOutputStream outStream = 
                    new ObjectOutputStream(socket.getOutputStream());
                // Send results back to stub.
                outStream.writeInt(age);
                outStream.flush();
            } else if(method.equals("name")){
                // Invoke business method on server object.
                String name = myServer.getName();
                // Create an output stream to send return values back to
                // the stub.
                ObjectOutputStream outStream = 
                    new ObjectOutputStream(socket.getOutputStream());
                // Send results back to stub.
                outStream.writeObject(name);
                outStream.flush();
            }
        }
      } catch(Throwable t) {t.printStackTrace();System.exit(0); }
    }
    public static void main(String args [] ){
        // Obtain a unique instance Person.
        PersonServer person = new PersonServer("Richard", 34);
        Person_Skeleton skel = new Person_Skeleton(person);
        skel.start();
    }
}</pre>
</blockquote>

<p>The <tt class="literal">Person_Skeleton</tt> routes requests received from
the stub to the object server, <tt class="literal">PersonServer</tt>.
Essentially, the <tt class="literal">Person_Skeleton</tt> spends all its
time waiting for the stub to stream it a request. Once a request is
received, it is parsed and delegated to the corresponding method on
the <tt class="literal">PersonServer</tt>. The return value from the object
server is then streamed back to the stub, which returns it as if it
was processed locally.
<a name="INDEX-70"></a><a name="INDEX-71"></a>
</p>

<p>
<a name="INDEX-72"></a>Now that we've created all
the machinery, let's look at a simple
<a name="INDEX-73"></a>client that makes use of the
<tt class="literal">Person</tt>:
</p>

<blockquote>
<pre class="programlisting">public class PersonClient {
    public static void main(String [] args){
        try {
            Person person = new Person_Stub();
            int age = person.getAge();
            String name = person.getName();
            System.out.println(name+" is "+age+" years old");
        } catch(Throwable t) {t.printStackTrace();}
    }
}</pre>
</blockquote>

<p>This client application shows how the stub is used on the client.
Except for the instantiation of the <tt class="literal">Person_Stub</tt> at
the beginning, the client is unaware that the
<tt class="literal">Person</tt> business object is actually a network proxy
to the real business object on the middle tier. In <a href="#JBEANS-CH-1-FIG-3">Figure 1-3</a>, the <a name="INDEX-74"></a>RMI loop diagram is changed to represent
the RMI process as applied to our code.
</p>

<a name="JBEANS-CH-1-FIG-3"></a>
<div class="figure">
<img alt="figure" src="figs/ejb2_0103.gif" webstripperlinkwas="figs/ejb2_0103.gif"></div>
<h4 class="objtitle">Figure 1-3. RMI Loop with Person business object</h4>

<p>As you examine <a href="#JBEANS-CH-1-FIG-3">Figure 1-3</a>, notice how the RMI loop
was implemented by our distributed <tt class="literal">Person</tt> object.
RMI is the basis of distributed object systems and is responsible for
making distributed objects <a name="INDEX-75"></a><a name="INDEX-76"></a><em class="emphasis">location
transparent</em>. Location transparency means that a server
object's actual location--usually on the middle
tier--is unknown and unimportant to the client using it. In this
example, the client could be located on the same machine or on a
different machine very far away, but the client's interaction
with the business object is the same. One of the biggest benefits of
distributed object systems is location transparency. Although
transparency is beneficial, you cannot treat distributed objects as
local objects in your design because of the performance differences.
This book will provide you with good distributed object design
strategies that take advantage of transparency while maximizing the
distributed system's performance.
</p>

<p>When this book talks about the stub on the client, we will often
refer to it as a <a name="INDEX-77"></a><a name="INDEX-78"></a><a name="INDEX-79"></a><em class="emphasis">remote reference</em>
to the object server. This allows us to talk more directly about the
object server and its representation on the client.
</p>

<p>Distributed
<a name="INDEX-80"></a>object protocols such as
CORBA, DCOM, and Java RMI provide a lot more infrastructure for
distributed objects than the <tt class="literal">Person</tt> example. Most
implementations of distributed object protocols provide utilities
that automatically generate the appropriate stubs and skeletons for
object servers. This eliminates custom development of these
constructs and allows a lot more functionality to be included in the
stub and skeleton.
</p>

<p>Even with automatic generation of stubs and skeletons, the
<tt class="literal">Person</tt> example hardly scratches the surface of a
sophisticated distributed object protocol. Real world protocols like
Java RMI and CORBA IIOP provide error and exception handling,
parameter passing, and other services like the passing of transaction
and security context. In addition, distributed object protocols
support much more sophisticated mechanisms for connecting the stub to
the skeleton; the direct stub-to-skeleton connection in the
<tt class="literal">Person</tt> example is fairly primitive.
</p>

<p>Real distributed object protocols, like CORBA, also provide an
<a name="INDEX-81"></a><a name="INDEX-82"></a>Object Request Broker
(ORB), which allows clients to locate and communicate with
distributed objects across the network. ORBs are the communication
backbone, the switchboard, for distributed objects. In addition to
handling communications, ORBs generally use a naming system for
locating objects and many other features such as reference passing,
distributed garbage collection, and resource management. However,
ORBs are limited to facilitating communication between clients and
distributed object servers. While they may support services like
transaction management and security, use of these services is not
automatic. With ORBs, most of the responsibility for creating
system-level functionality or incorporating services falls on the
shoulders of <a name="INDEX-83"></a> the application <a name="INDEX-84"></a><a name="INDEX-85"></a> developer.
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch01_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">1.2. Enterprise JavaBeans: Defined</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">1.4. Component Models</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
