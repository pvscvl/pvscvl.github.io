<html>
<head>
<title>The Life Cycle of a Stateless Session Bean (Enterprise JavaBeans)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Richard Monson-Haefel">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-869-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The Life Cycle of a Stateless Session Bean">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm" alt="Enterprise JavaBeans"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch07_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch07_01.htm">Chapter 7: Session Beans</a></td><td align="right" valign="top" width="172"><a href="ch07_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch07_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">7.2. The Life Cycle of a Stateless Session Bean</h2>

<p>
<a name="INDEX-1400"></a><a name="INDEX-1401"></a>Just as
the entity bean has a well-defined life cycle, so does the stateless
session bean. The stateless session bean's life cycle has two
states: the <em class="emphasis">Does Not Exist</em> state and the
<em class="emphasis">Method-Ready Pool</em>. The Method-Ready Pool is
similar to the instance pool used for entity beans. This is one of
the significant life-cycle differences between stateless and stateful
session beans; stateless beans define <a name="INDEX-1402"></a><a name="INDEX-1403"></a>
instance pooling in their life cycle and stateful beans do
not.<a href="#FOOTNOTE-5">[5]</a><a href="#JBEANS-CH-7-FIG-1">Figure 7-1</a> illustrates the states and transitions that a
stateless session bean instance goes through in its lifetime.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-5"></a>
<p>[5] Some vendors do <em class="emphasis">not </em> pool
stateless instances, but may instead create and destroy instances
with each method invocation. This is an implementation-specific
decision that shouldn't impact the specified life cycle of the
stateless bean instance.</p> </blockquote>

<a name="JBEANS-CH-7-FIG-1"></a>
<div class="figure">
<img alt="figure" src="figs/ejb2_0701.gif" webstripperlinkwas="figs/ejb2_0701.gif"></div>
<h4 class="objtitle">Figure 7-1. Stateless session bean life cycle</h4>

<a name="JBEANS-CH-7-SECT-2.1"></a>
<h3 class="sect2">7.2.1. Does Not Exist</h3>

<p>
<a name="INDEX-1404"></a><a name="INDEX-1405"></a>When a bean instance is in the Does Not
Exist state, it is not an instance in the memory of the system. In
other words, it has not been instantiated yet.
</p>


<a name="JBEANS-CH-7-SECT-2.2"></a>
<h3 class="sect2">7.2.2. The Method-Ready Pool</h3>

<p>
<a name="INDEX-1406"></a><a name="INDEX-1407"></a>Stateless
bean instances enter the Method-Ready Pool as the container needs
them. When the EJB server is first started, it will probably create a
number of stateless bean instances and enter them into the
Method-Ready Pool. (The actual behavior of the server depends on the
implementation.) When the number of stateless instances servicing
client requests is insufficient, more can be created and added to the
pool.
</p>

<a name="JBEANS-CH-7-SECT-2.2.1"></a>
<h3 class="sect3">7.2.2.1. Transitioning to the Method-Ready Pool</h3>

<p>When an instance transitions from the <a name="INDEX-1408"></a>Does <a name="INDEX-1409"></a>Not Exist state to the Method-Ready
Pool, three operations are performed on it. First, the bean instance
is instantiated by invoking the
<tt class="literal">Class.newInstance()</tt> method on the stateless bean
class.
</p>

<a name="ch07-18-fm2xml"></a>
<blockquote class="note">
<h4 class="objtitle">WARNING</h4>
<p>
<a name="INDEX-1410"></a><a name="INDEX-1411"></a>
Bean classes, entity and session alike, must never define constructors. Take care of initialization needs within <tt class="literal">ejbCreate()</tt> and other callback methods available through the bean class's <tt class="literal">EnterpriseBean</tt> interface (<tt class="literal">EntityBean</tt> or <tt class="literal">SessionBean</tt>). The container instantiates instances of the bean class using <tt class="literal">Class.newInstance()</tt>, which requires a no-argument constructor.</p>
</blockquote>

<p>
</p>

<a name="ch07-19-fm2xml"></a>
<blockquote class="note">
<h4 class="objtitle">NOTE</h4>
<p>Although the life cycle of a bean instance is
defined by the specification, the actual implementation by EJB
vendors need only support the specified life cycle as
<em class="emphasis">perceived</em> by the bean class and the client. For
this reason, a bean developer must only depend on behavior described
by the specification. The specification does not describe the
behavior of Java language constructors; it only describes the
behavior of the create and callback methods in the bean class.</p> </blockquote>

<p>Second, the
<tt class="literal">SessionBean.setSessionContext(SessionContext</tt><a name="INDEX-1412"></a><a name="INDEX-1413"></a><tt class="literal">context)</tt>
method is invoked on the bean instance. This is when the instance
receives its reference to the <tt class="literal">EJBContext</tt> for its
lifetime. The <tt class="literal">SessionContext</tt> reference may be
stored in a nontransient instance field of the stateless session
bean.<a href="#FOOTNOTE-6">[6]</a>
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-6"></a>
<p>[6] The EJB 1.0 specification is not clear on
whether an <tt class="literal">EJBContext</tt> should be stored in a
transient or nontransient field in the bean instance. The recommended
approach is to use nontransient, but some vendors will preserve an
<tt class="literal">EJBContext</tt> reference's binding to the
instance only if it is set as a transient field. Consult your vendor
for its implementation-specific requirements. EJB 1.1 explicitly
states that the <tt class="literal">EJBContext</tt> must
<em class="emphasis">not</em> be referenced in a transient field.</p>
</blockquote>

<p>
<a name="INDEX-1414"></a>Finally, the no-argument
<tt class="literal">ejbCreate()</tt> method is invoked on the bean
instance. Remember that a stateless session bean only has one
<tt class="literal">ejbCreate()</tt> method, which takes no arguments. The
<tt class="literal">ejbCreate()</tt> method is invoked only once in the
life cycle of the stateless session bean; when the client invokes the
<tt class="literal">create()</tt> method on the EJB home, it is not
delegated to the bean instance. This is significantly different from
both entity beans and stateful session beans.
</p>

<p>
<a name="INDEX-1415"></a><a name="INDEX-1416"></a><a name="INDEX-1417"></a>Stateless session beans are not
subject to activation, so they can maintain open connections to
resources for their entire life cycle.<a href="#FOOTNOTE-7">[7]</a> The
<tt class="literal">ejbRemove()</tt><a name="INDEX-1418"></a><a name="INDEX-1419"></a> method should close any open
resources before the stateless session bean is evicted from memory at
the end of its life cycle. More about <tt class="literal">ejbRemove()</tt>
later in this section.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-7"></a>
<p>[7] The duration
of a stateless bean instance's life is assumed to be very long.
However, some EJB servers may actually destroy and create instances
with every method invocation, making this strategy less attractive.
Consult your vendor's documentation for details on how your EJB
server handles stateless instances.</p> </blockquote>



<a name="JBEANS-CH-7-SECT-2.2.2"></a>
<h3 class="sect3">7.2.2.2. Life in the Method-Ready Pool</h3>

<p>
<a name="INDEX-1420"></a><a name="INDEX-1421"></a>Once an instance is in the
<a name="INDEX-1422"></a>
Method-Ready Pool, it is ready to service client requests. When a
client invokes a business method on an EJB object, the method call is
delegated to any available instance in the Method-Ready Pool. While
the instance is executing the request, it is unavailable for use by
other EJB objects. Once the instance has finished, it is immediately
available to any EJB object that needs it. This is slightly different
from the instance pool for entity beans, described in <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch06_01.htm">Chapter 6, "Entity Beans"</a>. In the entity instance pool, a bean instance
might be swapped in to service an EJB object for several method
invocations. Stateless session instances are only dedicated to an EJB
object for the duration of the method.
</p>

<p>Although vendors can choose different strategies to support stateless
session beans, it's likely that vendors will use an
<a name="INDEX-1423"></a>instance-swapping strategy
similar to that used for entity beans (the strategy utilized by
entity beans is described in <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch06_01.htm">Chapter 6, "Entity Beans"</a>). However,
the swap is very brief, lasting only as long as the business method
needs to execute. When an instance is swapped in, its
<tt class="literal">SessionContext</tt> changes to reflect the context of
its EJB object and the client invoking the method. The bean instance
may be included in the transactional scope of the client's
request, and it may access <tt class="literal">SessionContext</tt>
information specific to the client request, for example, the security
and transactional methods. Once the instance has finished servicing
the client, it is disassociated from the EJB object and returned to
the Method-Ready Pool.
</p>

<p>Stateless session beans are not subject to
<a name="INDEX-1424"></a>activation and never have their
<tt class="literal">ejbActivate()</tt> or <tt class="literal">ejbPassivate()</tt>
callback methods invoked. The reason is simple: stateless instances
have no conversational state that needs to preserved.
(<em class="emphasis">Stateful</em> session beans do depend on activation,
as we'll see later.)
</p>

<p>Clients that need a remote reference to a stateless session bean
begin by invoking the <tt class="literal">create()</tt><a name="INDEX-1425"></a> method on the
bean's EJB home:
</p>

<blockquote>
<pre class="programlisting">// EJB 1.0: Use native cast 
Object ref = jndiConnection.lookup("ProcessPaymentHome");
ProcessPaymentHome home = (ProcessPaymentHome)
    PortableRemoteObject.narrow(ref,ProcessPaymentHome.class);

ProcessPayment pp = home.create();</pre>
</blockquote>

<p>Unlike the entity bean and stateful session bean, invoking the
<tt class="literal">create()</tt> method does not result in a call to the
bean's <tt class="literal">ejbCreate()</tt> method. In stateless
session beans, calling the EJB home's
<tt class="literal">create()</tt> method results in the creation of an EJB
object for the client, but that is all. The
<tt class="literal">ejbCreate()</tt> method of a stateless session bean is
only invoked once in the life cycle of an instance--when it is
transitioning from the Does Not Exist state to the Method-Ready Pool.
It isn't reinvoked every time a client requests a remote
reference to the bean.
</p>



<a name="JBEANS-CH-7-SECT-2.2.3"></a>
<h3 class="sect3">7.2.2.3. Transitioning out of the Method-Ready Pool: The death of a stateless bean instance</h3>

<p>
<a name="INDEX-1426"></a><a name="INDEX-1427"></a>Bean instances leave the
Method-Ready Pool for the <a name="INDEX-1428"></a>Does Not Exist state when the server no
longer needs the instance. This occurs when the server decides to
reduce the total size of the Method-Ready Pool by evicting one or
more instances from memory. The process begins by invoking the
<tt class="literal">ejbRemove()</tt> method on the instance. At this time,
the bean instance should perform any cleanup operations, like closing
open resources. The <tt class="literal">ejbRemove()</tt> method is only
invoked once in the life cycle of a stateless session bean's
instance--when it is about to transition to the Does Not Exist
state. When a client invokes one of the <tt class="literal">remove()</tt>
methods on a stateless session bean's remote or home interface,
it is not delegated to the bean instance. The client's
invocations of this method simply invalidates the stub and releases
the EJB object; it notifies the container that the client no longer
needs the bean. The container itself invokes the
<tt class="literal">ejbRemove()</tt> method on the stateless instance, but
only at the end of the instance's life cycle. Again, this is
very different from both stateful session beans and entity beans,
which suffer more destructive consequences when the client invokes a
remove method. During the <tt class="literal">ejbRemove()</tt> method, the
<tt class="literal">SessionContext</tt> (and JNDI ENC for EJB 1.1) is still
available to the bean instance. Following the execution of the
<tt class="literal">ejbRemove()</tt> method, the bean is <a name="INDEX-1429"></a><a name="INDEX-1430"></a> dereferenced and
<a name="INDEX-1431"></a>
eventually garbage collected.
</p>





<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch07_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch07_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch07_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">7.1. The Stateless Session Bean</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">7.3. The Stateful Session Bean</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
