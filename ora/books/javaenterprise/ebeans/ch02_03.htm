<html>
<head>
<title> The Bean-Container Contract (Enterprise JavaBeans)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Richard Monson-Haefel">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-869-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content=" The Bean-Container Contract">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm" alt="Enterprise JavaBeans"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch02_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch02_01.htm">Chapter 2: Architectural Overview</a></td><td align="right" valign="top" width="172"><a href="ch02_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch02_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">2.3.  The Bean-Container Contract</h2>

<p>
<a name="INDEX-314"></a><a name="INDEX-315"></a><a name="INDEX-316"></a>The environment that surrounds the
beans on the EJB server is often referred to as the
<em class="emphasis">container</em>. The container is more a concept than
a physical construct. Conceptually, the container acts as an
intermediary between the bean class and the EJB server. The container
manages the EJB objects and EJB homes for a particular type of bean
and helps these constructs to manage bean resources and apply primary
services like transactions, security, concurrency, naming, and so
forth, to the bean instances at runtime. Conceptually, an EJB server
may have many containers, each of which may contain one or more types
of enterprise beans. As you will discover a little later, the
container and the server are not clearly different constructs, but
the EJB specification defines the component model in terms of the
container responsibilities, so we will follow that convention here.
</p>

<p>Enterprise bean components interface with the EJB server through a
well-defined component model. The <a name="INDEX-317"></a><a name="INDEX-318"></a><tt class="literal">EntityBean</tt> and
<tt class="literal">SessionBean</tt> interfaces are the bases of this
component model. As we learned earlier, these interfaces provide
callback methods that notify the bean class of state management
events in its life cycle. At runtime, the container invokes the
callback methods on the bean instance when appropriate state
management events occur. When the container is about to write an
entity bean instance's state to the database, for example, it
first calls the bean instance's <tt class="literal">ejbStore()</tt>
method. This provides the bean instance with an opportunity to do
some clean up on its state just before it's written to the
database. The <a name="INDEX-319"></a><a name="INDEX-320"></a><tt class="literal">ejbLoad()</tt> method is called just after the
bean's state is populated from the database, providing the bean
developer with an opportunity to manage the bean's state before
the first business method is called.<a href="#FOOTNOTE-2">[2]</a> Other callback methods can be used by the bean class in a
similar fashion. EJB defines when these various callback methods are
invoked and what can be done within their context. This provides the
bean developer with a predictable runtime component model.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-2"></a>
<p>[2] The
<tt class="literal">ejbLoad()</tt> and <tt class="literal">ejbStore()</tt>
behavior illustrated here is for container-managed persistence. With
bean-managed persistence the behavior is slightly different. This is
examined in detail in <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch06_01.htm">Chapter 6, "Entity Beans"</a>.</p>
</blockquote>

<p>While all the callback methods are declared in bean interfaces, a
meaningful implementation of the methods is not mandatory. In other
words, the method body of any or all of the callback methods can be
left empty in the bean class. Beans that implement one or more
callback methods are usually more sophisticated and access resources
that are not managed by the EJB system. Enterprise beans that wrap
legacy systems often fall into this category.
</p>

<p>
<tt class="literal">javax.ejb.EJBContext</tt><a name="INDEX-321"></a> is an interface that is implemented
by the container and is also a part of the bean-container contract.
Entity type beans use a subclass of
<tt class="literal">javax.ejb.EJBContext</tt> called
<a name="INDEX-322"></a><tt class="literal">javax.ejb.EntityContext</tt>. Session beans use a
subclass called the <a name="INDEX-323"></a><tt class="literal">javax.ejb.SessionContext</tt>. These
<tt class="literal">EJBContext</tt> types provide the bean class with
information about its container, the client using the bean, and the
bean itself. They also provide other functionality that is described
in more detail in <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch06_01.htm">Chapter 6, "Entity Beans"</a> and <a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch07_01.htm">Chapter 7, "Session Beans"</a>. The important thing about the
<tt class="literal">EJBContext</tt> types is that they provide the bean
with information about the world around it, which the bean can use
while processing requests from both clients and callback methods from
the container.
</p>

<a name="JBEANS-CH-2-ADMON-3"></a>
<blockquote class="note">
<h4 class="objtitle">NOTE</h4>
<p>
EJB 1.1 has expanded the bean's interface with the container to include a JNDI name space, called the environment context, which provides the bean with a more flexible and extensible bean-container interface. The JNDI environment context is discussed in detail later in this book.</p>
</blockquote>
<a name="JBEANS-CH-2-SECT-3.1"></a>
<h3 class="sect2">2.3.1. The Container-Server Contract</h3>

<p>
<a name="INDEX-324"></a><a name="INDEX-325"></a>The container-server contract is not
defined by the Enterprise JavaBeans specification. This was done to
facilitate maximum flexibility for vendors defining their EJB server
technologies. Other than isolating the beans from the server, the
container's responsibility in the EJB system is a little vague.
The EJB specification only defines a bean-container contract and does
not define the container-server contract. It is difficult to
determine, for example, exactly where the container ends and the
server begins when it comes to resource management and other
services.
</p>

<p>In the first generation of EJB servers this ambiguity was not a
problem because most EJB server vendors also provide EJB containers.
Since the vendor provides both the container and the server, the
interface between the two can remain proprietary. In future
generations of the EJB specification, however, some work may be done
to define the container-server interface and delimit the
responsibilities of the container.
</p>

<p>One advantage of defining a container-server interface is that it
allows third-party vendors to produce containers that can plug into
any EJB server. If the responsibilities of the container and server
are clearly defined, then vendors who specialize in the technologies
that support these different responsibilities can focus on developing
the container or server as best matches their core competency. The
disadvantage of a clearly defined container-server interface is that
the plug-and-play approach could impact performance. The high level
of abstraction that would be required to clearly separate the
container interface from the server, would naturally lead to looser
binding between these large components, which always results in lower
performance. The following rule of thumb best describes the
advantages and disadvantages associated with a container-server
interface: the tighter the integration, the better the performance;
the higher the abstraction, the greater the flexibility. The biggest
deterrent to defining a container-server interface is that it would
require the definition of low-level facilities, which was one of the
problems that established CTM vendors had with CORBA. Allowing
vendors to implement low-level facilities like transactions and
security as they see fit is one of EJB's biggest attractions
for vendors.
</p>

<p>Many EJB-compliant servers actually support several different kinds
of middleware technologies. It's quite common, for example, for
an EJB server to support the vendor's proprietary CTM model as
well as EJB, servlets, web server functionality, and other server
technologies. Defining an EJB container concept is useful for clearly
distinguishing what part of the server supports EJB from all the
other services it provides.
</p>

<p>This said, we could define the responsibilities of containers and
servers based on current implementations of the EJB specification. In
other words, we could examine how current vendors are defining the
container in their servers and use this as a guide. Unfortunately,
the responsibilities of the container in each EJB server largely
depend on the core competency of the vendor in question. Database
vendors, for example, implement containers differently from TP
monitor vendors. The strategies for assigning responsibilities to the
container and server are so varied that it would provide little value
in understanding the overall architecture to discuss the container
and server separately. Instead, this book addresses the architecture
of the EJB system as if the container and server were one component.
</p>

<p>The remainder of this book treats the EJB server and the container as
the same thing and refers to them collectively as the EJB server,
container, <a name="INDEX-326"></a><a name="INDEX-327"></a> system, or environment.
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch02_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch02_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.2. Using Enterprise Beans</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.4. Summary</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
