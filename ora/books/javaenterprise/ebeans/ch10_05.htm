<html>
<head>
<title>Describing Beans (Enterprise JavaBeans)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Richard Monson-Haefel">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-869-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Describing Beans">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm" alt="Enterprise JavaBeans"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch10_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch10_01.htm">Chapter 10: XML Deployment Descriptors</a></td><td align="right" valign="top" width="172"><a href="ch10_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch10_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">10.5. Describing Beans</h2>

<p>The beans contained in a JAR file are <a name="INDEX-1989"></a><a name="INDEX-1990"></a>described within the deployment
descriptor's <tt class="literal">enterprise-beans</tt> element. So
far, we've only talked about deployment descriptors for a
single bean, but there's no reason that you can't package
several beans in a <a name="INDEX-1991"></a>JAR file and describe them all
within a single deployment descriptor. We could, for example, have
deployed the TravelAgent, ProcessPayment, Cruise, Customer, and
Reservation beans in the same JAR file. The deployment descriptor
would look something like this:
</p>

<blockquote>
<pre class="programlisting">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE ejb-jar PUBLIC "-//Sun Microsystems, Inc.//DTD Enterprise
JavaBeans 1.1//EN" "http://java.sun.com/j2ee/dtds/ejb-jar_1_1.dtd"&gt;

&lt;ejb-jar&gt;
 &lt;description&gt;
    This Deployment includes all the beans needed to make a reservation:
    TravelAgent, ProcessPayment, Reservation, Customer, Cruise, and Cabin.
 &lt;/description&gt;
 &lt;enterprise-beans&gt;
   &lt;session&gt;
      &lt;ejb-name&gt;<tt class="userinput"><b>TravelAgentBean</b></tt>&lt;/ejb-name&gt;
      &lt;remote&gt;com.titan.travelagent.TravelAgent&lt;/remote&gt;
      ...
   &lt;/session&gt;
   &lt;entity&gt;
      &lt;ejb-name&gt;<tt class="userinput"><b>CustomerBean</b></tt>&lt;/ejb-name&gt;
      &lt;remote&gt;com.titan.customer.Customer&lt;/remote&gt;      
      ...
   &lt;/entity&gt;
   &lt;session&gt;
      &lt;ejb-name&gt;<tt class="userinput"><b>ProcessPaymentBean</b></tt>&lt;/ejb-name&gt;
      &lt;remote&gt;com.titan.processpayment.ProcessPayment&lt;/remote&gt;
      ...
   &lt;/session&gt;
   ...
 &lt;/enterprise-beans&gt;
 &lt;assembly-descriptor&gt;
 ...
 &lt;/assembly-descriptor&gt;
 ...
&lt;/ejb-jar&gt;</pre>
</blockquote>

<p>In this descriptor, the <tt class="literal">enterprise-beans</tt> element
contains two <tt class="literal">session</tt><a name="INDEX-1992"></a><a name="INDEX-1993"></a> elements and one
<tt class="literal">entity</tt><a name="INDEX-1994"></a> element describing the three beans.
Other elements within the <tt class="literal">entity</tt> and
<tt class="literal">session</tt> elements provide detailed information
about the beans; as you can see, the
<tt class="literal">ejb-name</tt><a name="INDEX-1995"></a><a name="INDEX-1996"></a> element defines the bean's
name. We'll discuss all of the things that can go into a
bean's description later.
</p>

<p>Multiple bean deployments have the advantage that they can share
assembly information, which is defined in the
<tt class="literal">assembly-descriptor</tt><a name="INDEX-1997"></a> element that follows the
<tt class="literal">enterprise-beans</tt> element. In other words, beans
can share
<a name="INDEX-1998"></a><a name="INDEX-1999"></a>security and transactional
declarations, making it simpler to deploy them consistently. For
example, deployment is easier if the same logical security roles
control access to all the beans, and it's easiest to guarantee
that the roles are defined consistently if they are defined in one
place. It's also easier to ensure that the transactional
attributes are applied consistently to all beans because you can
declare them all at the same time.
</p>

<a name="JBEANS-CH-10-SECT-5.1"></a>
<h3 class="sect2">10.5.1. Session and Entity Beans</h3>

<p>The <a name="INDEX-2000"></a><tt class="literal">session</tt> and <tt class="literal">entity</tt> elements,
which are used to describe session and entity beans, usually contain
many elements nested within them, but the lists of allowable
subelements are similar. Therefore, we'll discuss the
<tt class="literal">session</tt> and <tt class="literal">entity</tt> elements
together.
</p>

<p>Like the <tt class="literal">ebj-jar</tt> element itself, a
<tt class="literal">session</tt> or an <tt class="literal">entity</tt> element
can optionally have
<tt class="literal">description</tt><a name="INDEX-2001"></a><a name="INDEX-2002"></a><a name="INDEX-2003"></a><a name="INDEX-2004"></a>, <tt class="literal">display-name</tt>,
<tt class="literal">small-icon</tt>, and <tt class="literal">large-icon</tt>
elements. These are fairly self-explanatory and, in any case, mean
the same as they did for the <tt class="literal">ejb-jar</tt> element. The
<tt class="literal">description</tt> lets you provide a comment that
describes the bean; the <tt class="literal">display-name</tt> is used by
deployment tools to represent the bean; and the two icons are used to
represent the bean in visual environments. The icons must point to
JPEG or GIF images within the JAR file.
</p>

<p>The other elements are more interesting: </p>

<dl>
<dt>
<b><tt class="literal">&lt;ejb-name&gt;</tt>
<a name="INDEX-2005"></a>
 (one required)</b>
</dt>
<dd>
<p>This is the name of the bean component. It is used in the
<tt class="literal">methodx</tt> element to scope method declarations to
the correct bean. Throughout this book, we use
<tt class="literal">ejb-name</tt>s of the form
"<em class="emphasis">Name</em> Bean" as the
<tt class="literal">ejb-name</tt> for bean. Other common conventions use
the <tt class="literal">ejb-name</tt>s of the form "<em class="emphasis">Name
</em>EJB" or "The<em class="emphasis">Name</em>."
</p>
</dd>

<dt>
<b><tt class="literal">&lt;home&gt;</tt> (one required)</b>
</dt>
<dd>
<p>This is the fully qualified class name of the bean's home
interface.
</p>
</dd>

<dt>
<b><tt class="literal">&lt;remote&gt;</tt>
<a name="INDEX-2006"></a>
<a name="INDEX-2007"></a>
 (one required)</b>
</dt>
<dd>
<p>This is the fully qualified class name of the bean's remote
interface.
</p>
</dd>

<dt>
<b><tt class="literal">&lt;ejb-class&gt;</tt>
<a name="INDEX-2008"></a>
 (one required)</b>
</dt>
<dd>
<p>This is the fully qualified class name of the bean class.</p>
</dd>

<dt>
<b><tt class="literal">&lt;primkey-field&gt;</tt>
<a name="INDEX-2009"></a>
 (optional; entity beans only)</b>
</dt>
<dd>
<p>This element is used to specify the primary key field for entity
beans that use container-managed persistence. Its value is the name
of the field that is used as the primary key. It is not used if the
bean has a custom primary key or if the entity bean manages its own
persistence. This element is discussed in more detail in <a href="#JBEANS-CH-10-SECT-5.2">Section 10.5.2, "Specifying Primary Keys"</a>, later in this chapter.
</p>
</dd>

<dt>
<b><tt class="literal">&lt;prim-key-class&gt;</tt>
<a name="INDEX-2010"></a>
 (one required; entity beans only)</b>
</dt>
<dd>
<p>This element specifies the class of the primary key for entity beans.
Its value is the fully qualified name of the primary key class; it
makes no difference whether you're using a custom compound
primary key like the <tt class="literal">CabinPK</tt>, or a simple
<tt class="literal">primkey-field</tt> like an <tt class="literal">Integer</tt>,
<tt class="literal">String</tt>, <tt class="literal">Date</tt>, etc. If you defer
definition of the primary key class to the deployer, specify the type
as <tt class="literal">java.lang.Object</tt> in this element.
</p>
</dd>

<dt>
<b><tt class="literal">&lt;persistence-type&gt;</tt> (one required; entity beans only)</b>
</dt>
<dd>
<p>The
<tt class="literal">persistence-type</tt><a name="INDEX-2011"></a> element declares that the entity bean
uses either container-managed persistence or bean-managed
persistence. This element can have one of two values:
<tt class="literal">Container</tt> or <tt class="literal">Bean</tt>.
</p>
</dd>

<dt>
<b><tt class="literal">&lt;reentrant&gt;</tt> (one required; entity beans only)</b>
</dt>
<dd>
<p>The <tt class="literal">reentrant</tt><a name="INDEX-2012"></a> element declares that the bean either
allows <a name="INDEX-2013"></a>loopbacks (reentrant invocations)
or not. This element can have one of two values:
<tt class="literal">True</tt> or <tt class="literal">False</tt>.
<tt class="literal">True</tt> means that the bean allows loopbacks;
<tt class="literal">False</tt> means that the bean throws an exception if a
loopback occurs.
</p>
</dd>

<dt>
<b><tt class="literal">&lt;cmp-field&gt;</tt>
<a name="INDEX-2014"></a>
<a name="INDEX-2015"></a>
 (zero or more; entity beans only)</b>
</dt>
<dd>
<p>This element is used in entity beans with container-managed
persistence. A <tt class="literal">cmp-field</tt> element must exist for
each container-managed field in the bean class. Each
<tt class="literal">cmp-field</tt> element may include a
<tt class="literal">description</tt> element and must include a
<tt class="literal">field-name</tt> element. The description is an optional
comment describing the field. The <tt class="literal">field-name</tt> is
required and must be the name of one of the bean's fields. The
container will manage persistence for the given field. The following
portion of a descriptor shows several <tt class="literal">cmp-field</tt>
declarations for the Cabin bean:
</p>
</dd>

</dl>

<blockquote>
<pre class="programlisting">&lt;cmp-field&gt;
  &lt;description&gt;This is the primary key&lt;/description&gt;
  &lt;field-name&gt;id&lt;/field-name&gt;
&lt;/cmp-field&gt;
&lt;cmp-field&gt;
  &lt;field-name&gt;name&lt;/field-name&gt;
&lt;/cmp-field&gt;
&lt;cmp-field&gt;
  &lt;field-name&gt;deckLevel&lt;/field-name&gt;
&lt;/cmp-field&gt;
&lt;cmp-field&gt;
  &lt;field-name&gt;ship&lt;/field-name&gt;
&lt;/cmp-field&gt;
&lt;cmp-field&gt;
  &lt;field-name&gt;bedCount&lt;/field-name&gt;
&lt;/cmp-field&gt;</pre>
</blockquote>

<dl>
<dt>
<b><tt class="literal">&lt;env-entry&gt;</tt>
<a name="INDEX-2016"></a>
 (zero or more)</b>
</dt>
<dd>
<p>This element declares an environment entry that is available through
the JNDI ENC. The use of environment entries in a bean and a
deployment descriptor is discussed further in <a href="#JBEANS-CH-10-SECT-5.3">Section 10.5.3, "Environment Entries"</a>.
</p>
</dd>

<dt>
<b><tt class="literal">&lt;ejb-ref&gt;</tt>
<a name="INDEX-2017"></a>
 (zero or more)</b>
</dt>
<dd>
<p>This element declares a bean
<a name="INDEX-2018"></a><a name="INDEX-2019"></a>reference that is
available through the JNDI ENC. The mechanism for making bean
references available through the ENC is described in more detail
later, in <a href="#JBEANS-CH-10-SECT-5.4">Section 10.5.4, "References to Other Beans"</a>.
</p>
</dd>

<dt>
<b><tt class="literal">&lt;resource-ref&gt;</tt>
<a name="INDEX-2020"></a>
<a name="INDEX-2021"></a>
 (zero or more)</b>
</dt>
<dd>
<p>This element declares a reference to a connection factory that is
available through the JNDI ENC. An example of a resource factory is
the <tt class="literal">javax.sql.DataSource</tt>, which is used to obtain
a connection to a database. This element is discussed in detail in <a href="#JBEANS-CH-10-SECT-5.4">Section 10.5.4, "References to Other Beans"</a> later in
this chapter.
</p>
</dd>

<dt>
<b><tt class="literal">&lt;security-role-ref&gt;</tt> (zero or more)</b>
</dt>
<dd>
<p>The
<tt class="literal">security-role-ref</tt><a name="INDEX-2022"></a> element is used to declare security
roles in the deployment descriptor, and map them into the security
roles in effect for the bean's runtime environment. This
element is described in more detail in <a href="#JBEANS-CH-10-SECT-5.6">Section 10.5.6, "Security Roles"</a>.
</p>
</dd>

<dt>
<b><tt class="literal">&lt;session-type&gt;</tt> (one required; session beans only)</b>
</dt>
<dd>
<p>The <tt class="literal">session-type</tt><a name="INDEX-2023"></a><a name="INDEX-2024"></a><a name="INDEX-2025"></a> element declares that a session bean
is either stateful or stateless. This element can have one of two
values: <tt class="literal">Stateful</tt> or <tt class="literal">Stateless</tt>.
</p>
</dd>

<dt>
<b><tt class="literal">&lt;transaction-type&gt;</tt>
<a name="INDEX-2026"></a>
<a name="INDEX-2027"></a>
<a name="INDEX-2028"></a>
 (one required; session beans only)</b>
</dt>
<dd>
<p>The <tt class="literal">transaction-type</tt> element declares that a
session bean either manages its own transactions, or that its
transactions are managed by the container. This element can have one
of two values: <tt class="literal">Bean</tt> or
<tt class="literal">Container</tt>. A bean that manages its own
transactions will not have <tt class="literal">container-transaction</tt>
declarations in the <tt class="literal">assembly-descriptor</tt> section of
the <a name="INDEX-2029"></a><a name="INDEX-2030"></a>
deployment <tt class="literal"></tt><a name="INDEX-2031"></a><a name="INDEX-2032"></a> descriptor.
</p>
</dd>

</dl>


<a name="JBEANS-CH-10-SECT-5.2"></a>
<h3 class="sect2">10.5.2. Specifying Primary Keys</h3>

<p>An entity bean does not always have to use a custom key class as a
<a name="INDEX-2033"></a>primary key. If there's a
single field in the bean that can serve naturally as a unique
identifier, you can use that field as the primary key without having
to create a custom key. In the Cabin bean, for example, the primary
key type was the <tt class="literal">CabinPK</tt>, which mapped to the bean
class field <tt class="literal">id</tt> as shown here (the CabinBean is
using bean-managed persistence to better illustrate):
</p>

<blockquote>
<pre class="programlisting">public class CabinBean implements javax.ejb.EntityBean {

<b class="emphasis-bold">    public int id;</b>
    public String name;
    public int deckLevel;
    public int ship;
    public int bedCount;
 
    public <tt class="userinput"><b>CabinPK</b></tt> ejbCreate(int id) {
        this.id = id;
        return new CabinPk(id);
    }
    ...
}</pre>
</blockquote>

<p>Instead of using the custom <tt class="literal">CabinPK</tt> class, we
could have used the appropriate primitive wrapper,
<tt class="literal">java.lang.Integer</tt>, and defined the CabinBean as:
</p>

<blockquote>
<pre class="programlisting">public class CabinBean implements javax.ejb.EntityBean {

<b class="emphasis-bold">    public int id;</b>
    public String name;
    public int deckLevel;
    public int ship;
    public int bedCount;
 
    public <tt class="userinput"><b>Integer</b></tt> ejbCreate(int id){
        this.id = id;
        return new Integer(id);
    }
    ...
}</pre>
</blockquote>

<p>This simplifies things a lot. Instead of taking the time to define a
custom primary key like <tt class="literal">CabinPK</tt>, we simply use the
appropriate wrapper. To do this, we need to add a
<tt class="literal">primkey-field</tt> element to the Cabin bean's
deployment descriptor, so that it knows which field to use as the
primary key. We also need to change the
<tt class="literal">prim-key-class</tt> element to state that the
<tt class="literal">Integer</tt> class is being used to represent the
primary key. The following code shows how the Cabin bean's
deployment descriptor would need to change to use
<tt class="literal">Integer</tt> as the primary key field:
</p>

<blockquote>
<pre class="programlisting">  &lt;entity&gt;
      &lt;description&gt;
            This Cabin enterprise bean entity represents a cabin on 
            a cruise ship.
      &lt;/description&gt;
      &lt;ejb-name&gt;CabinBean&lt;/ejb-name&gt;
      &lt;home&gt;com.titan.cabin.CabinHome&lt;/home&gt;
      &lt;remote&gt;com.titan.cabin.Cabin&lt;/remote&gt;
      &lt;ejb-class&gt;com.titan.cabin.CabinBean&lt;/ejb-class&gt;
      &lt;persistence-type&gt;Bean&lt;/persistence-type&gt;
<b class="emphasis-bold">      &lt;prim-key-class&gt;java.lang.Integer&lt;/prim-key-class&gt;</b>
<b class="emphasis-bold">      &lt;primkey-field&gt;id&lt;/primkey-field&gt;</b>
      &lt;reentrant&gt;False&lt;/reentrant&gt;

      &lt;cmp-field&gt;&lt;field-name&gt;id&lt;/field-name&gt;&lt;/cmp-field&gt;
      &lt;cmp-field&gt;&lt;field-name&gt;name&lt;/field-name&gt;&lt;/cmp-field&gt;
      &lt;cmp-field&gt;&lt;field-name&gt;deckLevel&lt;/field-name&gt;&lt;/cmp-field&gt;
      &lt;cmp-field&gt;&lt;field-name&gt;ship&lt;/field-name&gt;&lt;/cmp-field&gt;
      &lt;cmp-field&gt;&lt;field-name&gt;bedCount&lt;/field-name&gt;&lt;/cmp-field&gt;
   &lt;/entity&gt;</pre>
</blockquote>

<p>Simple <a name="INDEX-2034"></a><a name="INDEX-2035"></a>
primary key fields are not limited to the primitive wrapper classes
(<tt class="literal">Byte</tt>, <tt class="literal">Boolean</tt>,
<tt class="literal">Integer</tt>, etc.); any container-managed field can be
used as a primary key as long as it's serializable.
<tt class="literal">String</tt> types are probably the most common, but
other types, such as <tt class="literal">java.lang.StringBuffer</tt>,
<tt class="literal">java.util.Date</tt>, or even
<tt class="literal">java.util.Hashtable</tt> are also valid. Custom types
can also be <tt class="literal">primkey-field</tt>s providing that they are
serializable. Of course, common sense should be used when choosing a
primary key: because it is used as an index to the data in the
database, it should be lightweight. Here's code for a bean that
uses a <tt class="literal">Date</tt><a name="INDEX-2036"></a> as its primary key:
</p>

<blockquote>
<pre class="programlisting">// bean class that uses Date as a primary key 
public class HypotheticalBean implements javax.ejb.EntityBean {
<b class="emphasis-bold">    public Date creationDate;</b>
    ...
    public <tt class="userinput"><b>Date</b></tt> ejbCreate() {
      creationDate = new Date();
      return creationDate;
   }
...
}</pre>
</blockquote>

<p>And here's the corresponding section of the deployment
descriptor:
</p>

<blockquote>
<pre class="programlisting">// primkey-field declaration for the Hypothetical bean
...
&lt;entity&gt;
      &lt;ejb-name&gt;HypotheticalBean&lt;/ejb-name&gt;
      ...
<b class="emphasis-bold">      &lt;prim-key-class&gt;java.util.Date&lt;/prim-key-class&gt;</b>
<b class="emphasis-bold">      &lt;primkey-field&gt;creationDate&lt;/primkey-field&gt;</b>
      &lt;reentrant&gt;False&lt;/reentrant&gt;

      &lt;cmp-field&gt;&lt;field-name&gt;creationDate&lt;/field-name&gt;&lt;/cmp-field&gt;
      ...
&lt;/entity&gt;</pre>
</blockquote>

<p>Throughout the book we use <a name="INDEX-2037"></a><a name="INDEX-2038"></a>custom compound primary keys, like
<tt class="literal">ShipPK</tt> and <tt class="literal">CabinPK</tt>, instead of
using simple primary keys. This may seem strange because these custom
primary keys only wrap a single field, usually an integer, which
could have been represented by an <tt class="literal">Integer</tt> and used
as the <tt class="literal">primkey-field</tt>.
</p>

<p>The reason we use custom primary keys is simple: encapsulation. If
the primary key fields of the beans change over time, using a custom
key hides the changes from client applications that use the key. If,
for example, the <tt class="literal">CabinBean</tt> changed to use both a
<tt class="literal">String</tt> and a <tt class="literal">long</tt> primitive as
the primary key fields instead of a single integer field
(<tt class="literal">id</tt>), the Cabin bean's custom primary key
class (<tt class="literal">CabinPK</tt>) would hide this change from the
client application. If, however, we had used a
<tt class="literal">primkey-field</tt> of
<tt class="literal">java.lang.Integer</tt>, any client applications that
use the <tt class="literal">findByPrimaryKey()</tt> method (and other
similar operations involving the key) would have to be modified.
</p>

<a name="JBEANS-CH-10-SECT-5.2.1"></a>
<h3 class="sect3">10.5.2.1. Deferring primary key definition</h3>

<p>With container-managed persistence, it's also possible for the
bean developer to defer defining the <a name="INDEX-2039"></a>primary key, leaving key definition
to the bean deployer. This feature might be needed if, for example,
the primary key is generated by the database and is not a
container-managed field in the bean class. Containers that have a
tight integration with database or legacy systems that automatically
generate primary keys might use this approach. It's also an
attractive approach for vendors that sell shrink-wrapped beans
because it makes the bean more portable. The following code shows how
an <a name="INDEX-2040"></a>
entity bean using container-managed persistence defers the definition
of the primary key to the deployer:
</p>

<blockquote>
<pre class="programlisting">// bean class for bean that uses a deferred primary key 
public class HypotheticalBean implements javax.ejb.EntityBean {
    ...
    public <tt class="userinput"><b>java.lang.Object</b></tt> ejbCreate(){
      ...
      return null;
   }
...
}

// home interface for bean with deferred primary key
public interface HypotheticalHome extends javax.ejb.EJBHome {
    
    public Hypothetical create() throws ...;
    
    public Hypothetical findByPrimaryKey(<tt class="userinput"><b>java.lang.Object key</b></tt>) throws ...;
}</pre>
</blockquote>

<p>Here's the relevant portion of the deployment descriptor:</p>

<blockquote>
<pre class="programlisting">// primkey-field declaration for the Hypothetical bean
...
&lt;entity&gt;
      &lt;ejb-name&gt;HypotheticalBean&lt;/ejb-name&gt;
      ...
<b class="emphasis-bold">      &lt;persistence-type&gt;Container&lt;/persistence-type&gt;</b>
<b class="emphasis-bold">      &lt;prim-key-class&gt;java.lang.Object&lt;/prim-key-class&gt;</b>
      &lt;reentrant&gt;False&lt;/reentrant&gt;

      &lt;cmp-field&gt;&lt;field-name&gt;creationDate&lt;/field-name&gt;&lt;/cmp-field&gt;
      ...
&lt;/entity&gt;</pre>
</blockquote>

<p>Because the primary key is of type
<tt class="literal">java.lang.Object</tt>, the client application's
interaction with the bean's key is limited to the
<tt class="literal">Object</tt> type and its methods.
</p>



<a name="JBEANS-CH-10-SECT-5.3"></a>
<h3 class="sect2">10.5.3. Environment Entries</h3>

<p>A deployment descriptor can define environment entries, which are
values similar to properties that the bean can read when it is
running. The bean can use environment entries to customize its
behavior, find out about how it is deployed, etc.
</p>

<p>The <tt class="literal">env-entry</tt><a name="INDEX-2041"></a> element is used to define environment
entries. This element contains a <tt class="literal">description</tt>
element (optional), <tt class="literal">env-entry-name</tt> (required),
<tt class="literal">env-entry-type</tt> (required), and
<tt class="literal">env-entry-value</tt> (optional). Here is a typical
<tt class="literal">env-entry</tt> declaration:
</p>

<blockquote>
<pre class="programlisting">&lt;env-entry&gt;
  &lt;env-entry-name&gt;minCheckNumber&lt;/env-entry-name&gt;
  &lt;env-entry-type&gt;java.lang.Integer&lt;/env-entry-type&gt;
  &lt;env-entry-value&gt;2000&lt;/env-entry-value&gt;
&lt;/env-entry&gt;</pre>
</blockquote>

<p>The
<tt class="literal">env-entry-name</tt><a name="INDEX-2042"></a> is relative to the
<tt class="literal">"java:comp/env"</tt> context. For example, the
<tt class="literal">minCheckNumber</tt><a name="INDEX-2043"></a> entry can be accessed using the path
<tt class="literal">"java:comp/env/minCheckNumber"</tt> in a JNDI ENC
lookup:
</p>

<blockquote>
<pre class="programlisting">InitialContext jndiContext = new InitialContext();
Integer miniumValue = (Integer)
    jndiContext.lookup("java:comp/env/minCheckNumber");</pre>
</blockquote>

<p>The
<tt class="literal">env-entry-type</tt><a name="INDEX-2044"></a><a name="INDEX-2045"></a> can be of type
<tt class="literal">String</tt>, or one of several primitive wrapper types
including <tt class="literal">Integer</tt>, <tt class="literal">Long</tt>,
<tt class="literal">Double</tt>, <tt class="literal">Float</tt>,
<tt class="literal">Byte</tt>, <tt class="literal">Boolean</tt>, and
<tt class="literal">Short</tt>.
</p>

<p>The <tt class="literal">env-entry-value</tt> is optional. The value can be
specified by the bean developer or deferred to the application
assembler or deployer.
</p>

<p>The subcontext <tt class="literal">"java:comp/env/ejb10-properties"</tt>
can be used to make an entry available via the
<tt class="literal">EJBContext.getEnvironment()</tt><a name="INDEX-2046"></a><a name="INDEX-2047"></a> method. This feature has been
deprecated, but it may help you deploy EJB 1.0 beans within a EJB 1.1
server. The <tt class="literal">ejb-entry-type</tt> must always be
<tt class="literal">java.lang.String</tt> for entries in this subcontext.
Here's an example:
</p>

<blockquote>
<pre class="programlisting">&lt;env-entry&gt;
  &lt;description&gt;This property is available through
     EJBContext.getEnvironment()&lt;/description&gt;
  &lt;env-entry-name&gt;ejb10-properties/minCheckNumber&lt;/env-entry-name&gt;
  &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-name&gt;
  &lt;env-entry-value&gt;20000&lt;/env-entry-value&gt;
&lt;/env-entry&gt;</pre>
</blockquote>


<a name="JBEANS-CH-10-SECT-5.4"></a>
<h3 class="sect2">10.5.4. References to Other Beans</h3>

<p>The <tt class="literal">env-ref</tt> element is used to define <a name="INDEX-2048"></a><a name="INDEX-2049"></a>references to other beans within the
JNDI ENC. This makes it much easier for beans to reference other
beans; they can use JNDI to look up a reference to the home interface
for any beans that they are interested in.
</p>

<p>The <tt class="literal">env-ref</tt> element contains
<tt class="literal">description</tt><a name="INDEX-2050"></a> (optional),
<tt class="literal">ejb-ref-name</tt><a name="INDEX-2051"></a> (required),
<tt class="literal">ejb-ref-type</tt><a name="INDEX-2052"></a> (required), <tt class="literal">remote</tt>
(required), <tt class="literal">home</tt> (required), and
<tt class="literal">ejb-link</tt> (optional) elements. Here is a typical
<tt class="literal">env-ref</tt> declaration:
</p>

<blockquote>
<pre class="programlisting">&lt;ejb-ref&gt;
    &lt;ejb-ref-name&gt;ejb/CabinHome&lt;/ejb-ref-name&gt;
    &lt;ejb-ref-type&gt;Entity&lt;/ejb-ref-type&gt;
    &lt;home&gt;com.titan.cabin.CabinHome&lt;/home&gt;
    &lt;remote&gt;com.titan.cabin.Cabin&lt;/remote&gt;
&lt;/ejb-ref&gt;</pre>
</blockquote>

<p>The <tt class="literal">ejb-ref-name</tt> is relative to the
<tt class="literal">"java:comp/env"</tt> context. It is recommended, but
not required, that the name be placed under a subcontext of
<tt class="literal">ejb/</tt>. Following this convention, the path used to
access the Cabin bean's home would be
<tt class="literal">"java:comp/env/ejb/CabinHome"</tt>. The following code
shows how a client bean would use this context to look up a
<a name="INDEX-2053"></a>
reference to the Cabin bean:
</p>

<blockquote>
<pre class="programlisting">InitialContext jndiContext = new InititalContext();
Object ref = jndiContext.lookup("java:comp/env/ejb/CabinHome");
CabinHome home = (CabinHome)
    PortableRemoteObject.narrow(ref, CabinHome.class);</pre>
</blockquote>

<p>The <tt class="literal">ejb-ref-type</tt> can have one of two values:
<tt class="literal">Entity</tt> or <tt class="literal">Session</tt>, according to
whether the bean is an entity or a session bean.
</p>

<p>The <tt class="literal">home</tt><a name="INDEX-2054"></a> element specifies the fully qualified
class name of the bean's home interface; the
<tt class="literal">remote</tt> element specifies the fully qualified class
name of the bean's remote interface.
</p>

<p>If the bean referenced by the <tt class="literal">ejb-ref</tt> element is
deployed in the same deployment descriptor (it is defined under the
same <tt class="literal">ejb-jar</tt> element), the
<tt class="literal">ejb-ref</tt> element can be linked to the bean's
declaration using the <tt class="literal">ejb-link</tt> element. If, for
example, the TravelAgent bean uses references to the ProcessPayment
and Customer beans and they are all declared in the same deployment
descriptor, then the <tt class="literal">ejb-ref</tt> elements for the
TravelAgent bean can use an <tt class="literal">ejb-link</tt> element to
map its <tt class="literal">ejb-ref</tt> elements to the ProcessPayment and
Customer beans. The <tt class="literal">ejb-link</tt> value must match one
of the <tt class="literal">ejb-name</tt> values declared in the same
deployment descriptor. Here's a portion of a deployment
descriptor that uses the
<tt class="literal">ejb-link</tt><a name="INDEX-2055"></a> element:
</p>

<blockquote>
<pre class="programlisting">&lt;ejb-jar&gt;
&lt;enterprise-beans&gt;
   &lt;session&gt;
      &lt;ejb-name&gt;<tt class="userinput"><b>TravelAgentBean</b></tt>&lt;/ejb-name&gt;
      &lt;remote&gt;com.titan.travelagent.TravelAgent&lt;/remote&gt;
      ...
      &lt;ejb-ref&gt;
           &lt;ejb-ref-name&gt;ejb/ProcessPaymentHome&lt;/ejb-ref-name&gt;
           &lt;ejb-ref-type&gt;Session&lt;/ejb-ref-type&gt;
           &lt;home&gt;com.titan.processpayment.ProcessPaymentHome&lt;/home&gt;
           &lt;remote&gt;com.titan.processpayment.ProcessPayment&lt;/remote&gt;
<b class="emphasis-bold">           &lt;ejb-link&gt;ProcessPaymentBean&lt;/ejb-link&gt;</b>
      &lt;/ejb-ref&gt;
      &lt;ejb-ref&gt;
           &lt;ejb-ref-name&gt;ejb/CustomerHome&lt;/ejb-ref-name&gt;
           &lt;ejb-ref-type&gt;Entity&lt;/ejb-ref-type&gt;
           &lt;home&gt;com.titan.customer.CustomerHome&lt;/home&gt;
           &lt;remote&gt;com.titan.customer.Customer&lt;/remote&gt;
<b class="emphasis-bold">           &lt;ejb-link&gt;CustomerBean&lt;/ejb-link&gt;</b>
      &lt;/ejb-ref&gt;
   &lt;/session&gt;
   &lt;entity&gt;
      &lt;ejb-name&gt;<tt class="userinput"><b>CustomerBean</b></tt>&lt;/ejb-name&gt;
      &lt;remote&gt;com.titan.customer.Customer&lt;/remote&gt;      
      ...
   &lt;/entity&gt;
   &lt;session&gt;
      &lt;ejb-name&gt;<tt class="userinput"><b>ProcessPaymentBean</b></tt>&lt;/ejb-name&gt;
      &lt;remote&gt;com.titan.processpayment.ProcessPayment&lt;/remote&gt;
      ...
   &lt;/session&gt;
   ...
 &lt;/enterprise-beans&gt;
 ...
&lt;/ejb-jar&gt;</pre>
</blockquote>


<a name="JBEANS-CH-10-SECT-5.5"></a>
<h3 class="sect2">10.5.5. References to External Resources</h3>

<p>Beans <a name="INDEX-2056"></a><a name="INDEX-2057"></a> also use the
<a name="INDEX-2058"></a><a name="INDEX-2059"></a>JNDI ENC to
look up external resources, like database connections, that they need
to access. The mechanism for doing this is similar to the mechanism
used for referencing other beans and environment entries: the
external resources are mapped into a name within the JNDI ENC name
space. For external resources, the mapping is performed by the
<tt class="literal">resource-ref</tt> element.
</p>

<p>The <tt class="literal">resource-ref</tt><a name="INDEX-2060"></a> element contains
<tt class="literal">description</tt><a name="INDEX-2061"></a> (optional),
<tt class="literal">res-ref-name</tt> (required),
<tt class="literal">res-type</tt> (required), and
<tt class="literal">res-auth</tt> (required) elements. Here is a
<tt class="literal">resource-ref</tt> declaration used for a
<tt class="literal">DataSource</tt> connection factory:
</p>

<blockquote>
<pre class="programlisting">&lt;resource-ref&gt;
   &lt;description&gt;DataSource for the Titan database&lt;/description&gt;
   &lt;res-ref-name&gt;<tt class="userinput"><b>jdbc/titanDB</b></tt>&lt;/res-ref-name&gt;
   &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;
   &lt;res-auth&gt;Container&lt;/res-auth&gt;
&lt;/resource-ref&gt;</pre>
</blockquote>

<p>The <tt class="literal">res-ref-name</tt><a name="INDEX-2062"></a><a name="INDEX-2063"></a> is relative to the
<tt class="literal">"java:comp/env"</tt> context. Although it is not a
requirement, it's a good idea to place connection factories
under a subcontext that describes the resource type. For example:
</p>

<ul>
<li>
<p>
<tt class="literal">jdbc/</tt> for a JDBC <tt class="literal">DataSource</tt>
factory
</p>
</li>
<li>
<p>
<tt class="literal">jms/</tt> for a JMS
<tt class="literal">QueueConnectionFactory</tt> or a
<tt class="literal">TopicConnectionFactory</tt> factory
</p>
</li>
<li>
<p>
<tt class="literal">mail/</tt> for a JavaMail <tt class="literal">Session</tt>
factory
</p>
</li>
<li>
<p>
<tt class="literal">url/</tt> for a <tt class="literal">javax.net.URL</tt> factory</p>
</li>
</ul>
<p>Here is how a bean would use JNDI to look up a resource--in this
case, a <tt class="literal">DataSource</tt>:
</p>

<blockquote>
<pre class="programlisting">InitialContext jndiContext = new InitialContext();
DataSource source = (DataSource)
    jndiContext.lookup("java:comp/env/jdbc/titanDB");</pre>
</blockquote>

<p>The <tt class="literal">res-type</tt><a name="INDEX-2064"></a> is used to declare the fully qualified
class name of the connection factory. In this example, the
<tt class="literal">res-type</tt> is
<tt class="literal">javax.sql.DataSource</tt>.
</p>

<p>The <tt class="literal">res-auth</tt><a name="INDEX-2065"></a> tells the server who is responsible for
<a name="INDEX-2066"></a>authentication. It can
have one of two values: <tt class="literal">Container</tt> or
<tt class="literal">Application</tt>. If <tt class="literal">Container</tt> is
specified, authentication (sign-on or login) to use the resource will
be performed automatically by the container as specified at
deployment time. If <tt class="literal">Application</tt> is specified, the
bean itself must perform the necessary authentication before using
the resource. The following code shows how a bean might sign on to a
<a name="INDEX-2067"></a><a name="INDEX-2068"></a>connection factory when
<tt class="literal">Application</tt> is specified for
<tt class="literal">res-auth</tt>:
</p>

<blockquote>
<pre class="programlisting">InitialContext jndiContext = new InitialContext();
DataSource source = (DataSource)
    jndiContext.lookup("java:comp/env/jdbc/titanDB");

String loginName = ejbContext.getCallerPrincipal().getName();
String password = ...; // get password from somewhere

// use login name and password to obtain a database connection
java.sql.Connection con = source.getConnection(<tt class="userinput"><b>loginName, password</b></tt>);</pre>
</blockquote>


<a name="JBEANS-CH-10-SECT-5.6"></a>
<h3 class="sect2">10.5.6. Security Roles</h3>

<p>The
<tt class="literal">security-role-ref</tt><a name="INDEX-2069"></a> element is used to define the security
roles that are used by a bean and to map them into the security roles
that are in effect for the runtime environment. It can contain three
subelements: an optional
<tt class="literal">description</tt><a name="INDEX-2070"></a>, a
<tt class="literal">role-name</tt><a name="INDEX-2071"></a> (required), and an optional
<tt class="literal">role-link</tt><a name="INDEX-2072"></a>.
</p>

<p>Here's how security roles are defined. When a role name is used
in the <tt class="literal">EJBContext.isCallerInRole(String roleName)</tt>
method, the role name must be statically defined (it cannot be
derived at runtime) and it must be declared in the deployment
descriptor using the <tt class="literal">security-role-ref</tt> element:
</p>

<blockquote>
<pre class="programlisting">&lt;-- security-role-ref declaration for Account bean --&gt;
&lt;entity&gt;
  &lt;ejb-name&gt;AccountBean&lt;/ejb-name&gt;
  ...
  &lt;security-role-ref&gt;
    &lt;description&gt;
        The caller must be a member of this role in 
        order to withdraw over $10,000
    &lt;/description&gt;
    &lt;role-name&gt;Manager&lt;/role-name&gt;
    &lt;role-link&gt;Administrator&lt;/role-link&gt;
  &lt;/security-role-ref&gt;
  ..
&lt;/entity&gt;</pre>
</blockquote>

<p>The <tt class="literal">role-name</tt> defined in the deployment descriptor
must match the role name used in the
<tt class="literal">EJBContext.isCallerInRole()</tt><a name="INDEX-2073"></a> method. Here is how the role name
is used in the bean's code:
</p>

<blockquote>
<pre class="programlisting">// Account bean uses the isCallerInRole() method
public class AccountBean implements EntityBean {
    int id;
    double balance;
    EntityContext context;

    public void withdraw(Double withdraw)
    throws AccessDeniedException {
        
        if (withdraw.doubleValue() &gt; 10000) {
           boolean isManager = <tt class="userinput"><b>context.isCallerInRole("Manager");</b></tt>
           if (!isManager) {
              // only Managers can withdraw more than 10k
              throw new AccessDeniedException();
           }
        }
        balance = balance - withdraw.doubleValue();

    }
    ...
}</pre>
</blockquote>

<p>The <tt class="literal">role-link</tt> element is optional; it can be used
to map the role name used in the bean to a logical role defined in a
<tt class="literal">security-role</tt> element in the
<tt class="literal">assembly-descriptor</tt> section of the deployment
descriptor. If no <tt class="literal">role-link</tt> is specified, the
deployer must map the <tt class="literal">security-role-ref</tt> to an
existing security role in the target <a name="INDEX-2074"></a><a name="INDEX-2075"></a> environment.
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch10_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch10_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch10_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">10.4. The Descriptor's Body</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">10.6. Describing Bean Assembly</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
