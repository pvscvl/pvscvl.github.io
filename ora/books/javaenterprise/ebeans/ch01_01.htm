<html>
<head>
<title>Introduction (Enterprise JavaBeans)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Richard Monson-Haefel">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-869-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Introduction">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm" alt="Enterprise JavaBeans"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch00_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch00_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm">Enterprise JavaBeans</a></td><td align="right" valign="top" width="172"><a href="ch01_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 1.  Introduction</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_01.htm">Setting the Stage</a>
<br>
<a href="ch01_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_02.htm">Enterprise JavaBeans: Defined</a>
<br>
<a href="ch01_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_03.htm">Distributed Object Architectures</a>
<br>
<a href="ch01_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_04.htm">Component Models</a>
<br>
<a href="ch01_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_05.htm">Component Transaction Monitors</a>
<br>
<a href="ch01_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_06.htm">CTMs and Server-Side Component Models</a>
<br>
<a href="ch01_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_07.htm">Titan Cruises: An Imaginary Business</a>
<br>
<a href="ch01_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_08.htm">What's Next?</a>
<br>
</p>
</div>


<p>This book is about Enterprise JavaBeans (Versions 1.1 and 1.0),
Java's new component model for enterprise applications. Just as
the Java platform has revolutionized the way we think about software
development, Enterprise JavaBeans promises to revolutionize the way
we think about developing mission-critical enterprise software. It
combines server-side components with distributed object technologies
such as CORBA and Java RMI to greatly simplify the task of
application development. It automatically takes into account many of
the requirements of business systems: security, resource pooling,
persistence, concurrency, and transactional integrity.
</p>

<p>This book shows you how to use Enterprise JavaBeans to develop
scalable, portable business systems. But before we can start talking
about EJB itself, we'll need a brief introduction to the
technologies addressed by EJB, such as component models, distributed
objects, and <a name="INDEX-1"></a>component transaction monitors
(CTMs). It's particularly important to have a basic
understanding of component transaction monitors, the technology that
lies beneath EJB. In <a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch02_01.htm">Chapter 2, "Architectural Overview"</a> and <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch03_01.htm">Chapter 3, "Resource Management and the Primary Services"</a>, we'll start looking at EJB itself and
see how enterprise beans are put together. The rest of this book is
devoted to developing enterprise beans for an imaginary business and
discussing advanced issues.
</p>

<p>It is assumed that you're already familiar with Java; if
you're not, <em class="emphasis">Exploring Java&#153;</em> by
Patrick Niemeyer and Josh Peck is an excellent introduction. This
book also assumes that you're conversant in the JDBC API, or at
least SQL. If you're not familiar with JDBC, see
<em class="emphasis">Database Programming with JDBC&#153; and
Java&#153;</em>, by George Reese.
</p>

<p>
<a name="INDEX-2"></a><a name="INDEX-3"></a>One of Java's
most important features is platform independence. Since it was first
released, Java has been marketed as "write once, run
anywhere." While the hype has gotten a little heavy-handed at
times, code written with Sun's Java programming language is
remarkably platform independent. Enterprise JavaBeans isn't
just platform independent--it's also
<a name="INDEX-4"></a><a name="INDEX-5"></a> implementation independent. If you've
worked with JDBC, you know a little about what this means. Not only
can the JDBC API run on a Windows machine or on a Unix machine, it
can also access any vendor's relational database that has a
JDBC driver. You don't have to code to a particular database
implementation; just change drivers and you change databases.
It's the same with Enterprise JavaBeans. Ideally, an Enterprise
JavaBeans component, an enterprise bean, can run in any application
server that implements the Enterprise JavaBeans (EJB)
specification.<a href="#FOOTNOTE-1">[1]</a> This
<a name="INDEX-6"></a><a name="INDEX-7"></a>means that you can
develop and deploy your EJB business system in one server, such as
IBM's WebSphere, and later move it to a different EJB server,
such as BEA's WebLogic or Gemstone/J. Implementation
independence means that your business components are not dependent on
the brand of server, which means there are more options before you
begin development, during development, and after deployment.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1] Provided that the bean components and
EJB servers comply with the specification and no proprietary
functionality is used in development.</p> </blockquote>



<h2 class="sect1">1.1. Setting the Stage</h2>

<p>Before defining Enterprise JavaBeans more precisely, let's set
the stage by discussing a number of important concepts: distributed
objects, business objects, and component transaction monitors.
</p>

<a name="JBEANS-CH-1-SECT-1.1"></a>
<h3 class="sect2">1.1.1. Distributed Objects</h3>

<p>
<a name="INDEX-8"></a>
Distributed computing allows a business system to be more accessible.
Distributed systems allow parts of the system to be located on
separate computers, possibly in many different locations, where they
make the most sense. In other words, distributed computing allows
business logic and data to be reached from remote locations.
Customers, business partners, and other remote parties can use a
business system at any time from almost anywhere. The most recent
development in distributed computing is <em class="emphasis">distributed
objects</em>. Distributed object technologies such as
<a name="INDEX-9"></a>Java RMI,
<a name="INDEX-10"></a>CORBA, and
<a name="INDEX-11"></a>
Microsoft's DCOM allow objects running on one machine to be
used by client applications on different computers.
</p>

<p>Distributed objects evolved from a legacy form of
<a name="INDEX-12"></a><a name="INDEX-13"></a><a name="INDEX-14"></a>three-tier architecture,
which is used in TP monitor systems such as IBM's CICS or
BEA's TUXEDO. These systems separate the presentation, business
logic, and database into three distinct tiers (or
<a name="INDEX-15"></a>layers). In the past, these legacy
systems were usually composed of a "green screen" or dumb
terminals for the <a name="INDEX-16"></a>presentation
tier (first tier), <a name="INDEX-17"></a>COBOL or PL/1
applications on the middle tier (second tier), and some sort of
<a name="INDEX-18"></a>database, such as DB2, as the
backend (third tier). The introduction of distributed objects in
recent years has given rise to a new form of three-tier architecture.
Distributed object technologies make it possible to replace the
procedural COBOL and PL/1 applications on the middle tier with
business objects. A three-tier distributed business object
architecture might have a sophisticated <a name="INDEX-19"></a>graphical user interface (GUI),
business objects on the middle tier, and a relational or some other
database on the backend. More complex architectures are often used in
which there are many tiers: different objects reside on different
servers and interact to get the job done. Creating these <em class="emphasis">n
</em>-tier architectures with Enterprise JavaBeans is
particularly easy.
</p>


<a name="JBEANS-CH-1-SECT-1.2"></a>
<h3 class="sect2">1.1.2. Server-Side Components</h3>

<p>
<a name="INDEX-20"></a>
Object-oriented <a name="INDEX-21"></a>
languages, such as Java, <a name="INDEX-22"></a>C++, and <a name="INDEX-23"></a>Smalltalk, are used to write software
that is flexible, extensible, and reusable--the three axioms of
object-oriented development. In business systems, object-oriented
languages are used to improve development of GUIs, to simplify access
to data, and to encapsulate the business logic. The
<a name="INDEX-24"></a><a name="INDEX-25"></a>encapsulation of
business logic into <a name="INDEX-26"></a><em class="emphasis">business objects</em>
has become the most recent focus in the information technology
industry. Business is fluid, which means that a business's
products, processes, and objectives evolve over time. If the software
that models the business can be encapsulated into business objects,
it can become flexible, extensible, and reusable, and therefore
evolve as the business evolves.
</p>

<p>A server-side component model defines an architecture for developing
<em class="emphasis">distributed business objects</em>. They combine the
accessibility of distributed object systems with the fluidity of
objectified business logic. Server-side component models are used on
the <a name="INDEX-27"></a>middle-tier application servers, which
manage the components at runtime and make them available to remote
clients. They provide a baseline of functionality that makes it easy
to develop distributed business objects and assemble them into
business solutions.
</p>

<p>Server-side components, like other components, can be bought and sold
as independent pieces of <a name="INDEX-28"></a>executable software.
They conform to a standard component model and can be executed
without direct modification in a server that supports that component
model. Server-side component models often support attribute-based
programming, which allows the <a name="INDEX-29"></a>runtime behavior of the component
to be modified when it is deployed, without having to change the
programming code in the component. Depending on the component model,
the server administrator can declare a server-side component's
transactional, security, and even persistence behavior by setting
these attributes to specific values.
</p>

<p>As new products are developed and operating procedures change,
server-side components can be reassembled, changed, and extended so
that the business system reflects those changes. Imagine a business
system as a collection of server-side components that model concepts
like customers, products, reservations, and warehouses. Each
component is like a Lego block that can be combined with other
components to build a business solution. Products can be stored in
the warehouse or delivered to a customer; a customer can make a
reservation or purchase a product. You can assemble components, take
them apart, use them in different combinations, and change their
definitions. A business system based on <em class="emphasis">server-side
components</em> is fluid because it is objectified, and it is
accessible because the components can be distributed.
</p>


<a name="JBEANS-CH-1-SECT-1.3"></a>
<h3 class="sect2">1.1.3. Component Transaction Monitors</h3>

<p>
<a name="INDEX-30"></a><a name="INDEX-31"></a>A new breed
of <a name="INDEX-32"></a>software called
<a name="INDEX-33"></a><em class="emphasis">application
servers</em><a name="INDEX-34"></a>has recently evolved to manage the
complexities associated with developing business systems in
today's Internet world. An application server is often made up
of some combination of several different technologies, including
<a name="INDEX-35"></a>web servers,
<a name="INDEX-36"></a>ORBs,
<a name="INDEX-37"></a>MOM (message-oriented middleware),
databases, and so forth. An application server can also focus on one
technology, such as distributed objects. The type of application
server this book is concerned with is based on a distributed object
technology such as CORBA, Java RMI, or
<a name="INDEX-38"></a><a name="INDEX-39"></a>DCOM. Application servers that are based
on distributed objects vary in sophistication. The simplest
facilitate connectivity between the client applications and the
distributed objects and are called <a name="INDEX-40"></a>object request brokers (ORBs).
ORBs allow client applications to locate and use distributed objects
easily. ORBs, however, have frequently proven to be inadequate in
high-volume transactional environments. ORBs provide a communication
backbone for distributed objects, but they fail to provide the kind
of robust infrastructure that is needed to handle larger user
populations and mission-critical work. In addition, ORBs provide a
fairly crude <a name="INDEX-41"></a>server-side component model that places
the burden of handling transactions, concurrency, persistence, and
other system-level considerations on the shoulders of the application
developer. These services are not automatically supported in an ORB.
Application developers must explicitly access these services (if they
are available) or, in some cases, develop them from scratch.
</p>

<p>Early in 1999, Anne Thomas of the Patricia Seybold Group coined the
term <em class="emphasis">component transaction monitor</em> (CTM) to
describe the most sophisticated distributed object application
servers. CTMs evolved as a hybrid of traditional
<a name="INDEX-42"></a>TP monitors and ORB technologies. They
implement robust server-side component models that make it easier for
developers to create, use, and deploy business systems. CTMs provide
an infrastructure that can automatically manage transactions, object
distribution, concurrency, security, persistence, and resource
management. They are capable of handling huge user populations and
mission-critical work, but also provide value to smaller systems
because they are easy to use. CTMs are the ultimate application
server. Other terms for this kind of technology include
<a name="INDEX-43"></a><a name="INDEX-44"></a><a name="INDEX-45"></a>object transaction
monitor (OTM), component transaction server, distributed component
server, COMware, and so forth. This book uses the term
"component transaction monitor" because it embraces the
three key characteristics of this technology: the use of a component
model, the focus on transactional management, and the resource and
service management typically associated with monitors.
</p>



















<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch00_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch00_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch01_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">0.7. Acknowledgments</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">1.2. Enterprise JavaBeans: Defined</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
