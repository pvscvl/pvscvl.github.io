<html>
<head>
<title>Component Transaction Monitors (Enterprise JavaBeans)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Richard Monson-Haefel">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-869-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Component Transaction Monitors">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm" alt="Enterprise JavaBeans"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_01.htm">Chapter 1: Introduction</a></td><td align="right" valign="top" width="172"><a href="ch01_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">1.5. Component Transaction Monitors</h2>

<p>
<a name="INDEX-94"></a>The CTM
industry grew out of both the ORB and the transaction processing
monitor (TP monitor) industries. The CTM is really a hybrid of these
two technologies that provides a powerful, robust distributed object
platform. To better understand what a CTM is, we will examine the
strengths and weakness of TP monitors and ORBs.
</p>

<a name="JBEANS-CH-1-SECT-5.1"></a>
<h3 class="sect2">1.5.1. TP Monitors</h3>

<p>
<a name="INDEX-95"></a><a name="INDEX-96"></a><a name="INDEX-97"></a>Transaction processing monitors have
been evolving for about 30 years (CICS was introduced in 1968) and
have become powerful, high-speed server platforms for
mission-critical applications. Some TP products like CICS and TUXEDO
may be familiar to you. TP monitors are operating systems for
business systems whose applications are written in languages like
COBOL. It may seem strange to call a TP monitor an "operating
system," but because they control an application's entire
environment, it's a fitting description. TP monitor systems
automatically manage the entire environment that a business system
runs in, including transactions, resource management, and fault
tolerance. The business logic in TP monitors is made up of procedural
applications that are often accessed through network
<a name="INDEX-98"></a><a name="INDEX-99"></a>messaging or
<a name="INDEX-100"></a><a name="INDEX-101"></a>remote procedure calls (RPC),
which are ancestors of RMI. Messaging allows a client to send a
message directly to a TP monitor requesting that some application be
run with certain parameters. It's similar in concept to the
<a name="INDEX-102"></a>Java event model. Messaging can be
<a name="INDEX-103"></a><a name="INDEX-104"></a>
synchronous or asynchronous, meaning that the sender may or may not
be required to wait for a response. RPC is a distributed mechanism
that allows clients to invoke procedures on applications in a TP
monitor as if the procedure was executed locally. The primary
difference between <a name="INDEX-105"></a>RPC
and RMI is that RPC is used for <em class="emphasis">procedure
</em><a name="INDEX-106"></a>-based
applications and RMI is used for <a name="INDEX-107"></a>distributed <em class="emphasis">object</em>
systems. With RMI, methods can be invoked on a specific object
identity, a specific business entity. In RPC, a client can call
procedures on a specific type of application, but there is no concept
of object identity. RMI is object oriented; RPC is procedural.
</p>

<p>TP monitors have been around for a long time, so the technology
behind them is as solid as a rock; that is why they are used in many
mission-critical systems today. But TP monitors are not object
oriented. Instead, they work with procedural code that can perform
complex tasks but has no sense of identity. Accessing a TP monitor
through RPC is like executing static methods; there's no such
thing as a unique object. In addition, because TP monitors are based
on procedural applications, and not objects, the business logic in a
TP monitor is not as flexible, extensible, or reusable as business
objects in a distributed object system.
</p>


<a name="JBEANS-CH-1-SECT-5.2"></a>
<h3 class="sect2">1.5.2. Object Request Brokers</h3>

<p>
<a name="INDEX-108"></a><a name="INDEX-109"></a>Distributed objects allow
<a name="INDEX-110"></a>unique objects that have state and
identity to be distributed across a network so that they can be
accessed by other systems. Distributed object technologies like CORBA
and Java RMI grew out of RPC with one significant difference: when
you invoke a distributed object method, it's on an object
instance, not an application procedure. Distributed objects are
usually deployed on some kind of ORB, which is responsible for
helping client applications find distributed objects easily.
</p>

<p>ORBs, however, do not define an "operating system" for
distributed objects. They are simply communications backbones that
are used to access and interact with unique remote objects. When you
develop a distributed object application using an ORB, all the
responsibility for concurrency, transactions, resource management,
and fault tolerance falls on your shoulders. These services may be
available and implemented in an ORB, but the application developer is
responsible for incorporating them into the business objects. In an
ORB, there is no concept of an "operating system," where
system-level functionality is handled automatically. The lack of
implicit <a name="INDEX-111"></a>system-level infrastructure places an
enormous burden on the application developer. Developing the
infrastructure required to handle concurrency, transactions,
security, persistence, and everything else needed to support large
user populations is a Herculean task that few corporate development
teams are equipped to accomplish.
</p>


<a name="JBEANS-CH-1-SECT-5.3"></a>
<h3 class="sect2">1.5.3. CTMs: The Hybrid of ORBs and TP Monitors</h3>

<p>As the <a name="INDEX-112"></a>
advantages of distributed objects became apparent, the number of
systems deployed using ORBs increased very quickly.
<a name="INDEX-113"></a>ORBs support distributed objects by
employing a somewhat crude <a name="INDEX-114"></a>server-side component model that allows
distributed objects to be connected to a communication backbone, but
don't implicitly support transactions, security, persistence,
and resource management. These services must be explicitly accessed
through APIs by the distributed object, resulting in more complexity
and, frequently, more development problems. In addition,
<a name="INDEX-115"></a>resource management
strategies such as instance swapping, resource pooling, and
activation may not be supported at all. These types of strategies
make it possible for a distributed object system to scale, improving
performance and throughput and reducing latency. Without automatic
support for resource management, application developers must
implement homegrown resource management solutions, which requires a
very sophisticated understanding of distributed object systems. ORBs
fail to address the complexities of managing a component in a
high-volume, mission-critical environment, an area where TP monitors
have always excelled.
</p>

<p>With three decades of TP monitor experience, it wasn't long
before <a name="INDEX-116"></a>companies like IBM and BEA
began developing a hybrid of ORBs and TP monitor systems, which we
refer to as component transaction monitors. These types of
application servers combine the fluidity and accessibility of
distributed object systems based on ORBs with the robust
"operating system" of a TP monitor. CTMs provide a
comprehensive environment for <a name="INDEX-117"></a>server-side components by managing
concurrency, transactions, object distribution, load balancing,
security, and resource management automatically. While application
developers still need to be aware of these facilities, they
don't have to explicitly implement them when using a CTM.
</p>

<p>The basic features of a CTM are <a name="INDEX-118"></a>distributed objects, an infrastructure
that includes transaction management and other services, and a
server-side component model. CTMs support these features in varying
degrees; choosing the most robust and feature-rich CTM is not always
as critical as choosing one that best meets your needs. Very large
and robust CTMs can be enormously expensive and may be overkill for
smaller projects. CTMs have come out of several different industries,
including the relational database industry, the application server
industry, the web server industry, the CORBA ORB industry, and the TP
monitor industry. Each vendor offers products that reflect their
particular area of expertise. However, when you're getting
started, choosing a CTM that supports the <a name="INDEX-119"></a>Enterprise JavaBeans component model may
be much more important than any particular feature set. Because
Enterprise JavaBeans is implementation independent, choosing an EJB
CTM provides the business system with the flexibility to scale to
larger CTMs as needed. We will discuss the importance of EJB as a
standard component model for CTMs later in this chapter.
</p>


<a name="JBEANS-CH-1-SECT-5.4"></a>
<h3 class="sect2">1.5.4. Analogies to Relational Databases</h3>

<p>
<a name="INDEX-120"></a><a name="INDEX-121"></a>This chapter spent a
lot of time talking about CTMs because they are essential to the
definition of EJB. The discussion of CTMs is not over, but to make
things as clear as possible before proceeding, we will use relational
databases as an analogy for CTMs.
</p>

<p>Relational databases provide a simple development environment for
application developers, in combination with a robust infrastructure
for data. As an application developer using a relational database,
you might design the table layouts, decide which columns are primary
keys, and define indexes and stored procedures, but you don't
develop the indexing algorithm, the SQL parser, or the cursor
management system. These types of system-level functionality are left
to the database vendor; you simply choose the product that best fits
your needs. Application developers are concerned with how business
data is organized, not how the database engine works. It would be
waste of resources for an application developer to write a relational
database from scratch when vendors like Microsoft, Oracle, and others
already provide them.
</p>

<p>Distributed business objects, if they are to be effective, require
the same system-level management from CTMs as business data requires
from relational databases. <a name="INDEX-122"></a><a name="INDEX-123"></a>System-level functionality
like concurrency, transaction management, and resource management is
necessary if the business system is going to be used for large user
populations or mission-critical work. It is unrealistic and wasteful
to expect application developers to reinvent this system-level
functionality when commercial solutions already exist.
</p>

<p>CTMs are to business objects what relational databases are to data.
CTMs handle all the system-level functionality, allowing the
application developer to focus on the business problems. With a CTM,
application developers can focus on the design and development of the
business objects without having to waste thousands of hours
developing the infrastructure that the business objects <a name="INDEX-124"></a> operate in.
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch01_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch01_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">1.4. Component Models</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">1.6. CTMs and Server-Side Component Models</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
