<html>
<head>
<title>Implementing a Common Interface (Enterprise JavaBeans)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Richard Monson-Haefel">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-869-5E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Implementing a Common Interface">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm" alt="Enterprise JavaBeans"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_01.htm">Chapter 9: Design Strategies</a></td><td align="right" valign="top" width="172"><a href="ch09_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">9.5. Implementing a Common Interface</h2>

<p>
<a name="INDEX-1876"></a>This book discourages
implementing the <a name="INDEX-1877"></a><a name="INDEX-1878"></a>remote interface in the bean
class. This makes it a little more difficult to enforce consistency
between the business methods defined in the remote interface and the
corresponding methods on the bean class. There are good reasons for
not implementing the remote interface in the bean class, but there is
also a need for a common interface to ensure that the bean class and
remote interface define the same business methods. This section
describes a design alternative that allows you to use a common
interface to ensure consistency between the bean class and the remote
interface.
</p>

<a name="JBEANS-CH-9-SECT-5.1"></a>
<h3 class="sect2">9.5.1. Why the Bean Class Shouldn't Implement the Remote Interface</h3>

<p>There should be no difference, other than the missing
<tt class="literal">java.rmi.RemoteException</tt>, between the business
methods defined in the <tt class="literal">ShipBean</tt> and their
corresponding business methods defined in the <tt class="literal">Ship</tt>
interface. EJB requires you to match the method signatures so that
the remote interface can accurately represent the bean class on the
client. Why not implement the remote interface
<tt class="literal">com.titan.Ship</tt> in the <tt class="literal">ShipBean</tt>
class to ensure that these methods are matched correctly?
</p>

<p>EJB allows a bean class to implement its remote interface, but this
practice is discouraged for a couple of very good reasons. First, the
remote interface is actually an extension of the
<tt class="literal">javax.ejb.EJBObject</tt> interface, which you learned
about in <a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch05_01.htm">Chapter 5, "The Client View"</a>. This interface defines several
methods that are implemented by the EJB container when the bean is
deployed. Here is the definition of the
<tt class="literal">javax.ejb.EJBObject</tt> interface:
</p>

<blockquote>
<pre class="programlisting">public interface javax.ejb.EJBObject extends java.rmi.Remote {
    public abstract EJBHome <tt class="userinput"><b>getEJBHome</b></tt>();
    public abstract Handle <tt class="userinput"><b>getHandle</b></tt>();
    public abstract Object <tt class="userinput"><b>getPrimaryKey</b></tt>();
    public abstract boolean <tt class="userinput"><b>isIdentical</b></tt>(EJBObject obj);
    public abstract void <tt class="userinput"><b>remove</b></tt>();
}</pre>
</blockquote>

<p>The methods defined here are implemented and supported by the EJB
object for use by client software and are not implemented by the
<tt class="literal">javax.ejb.EntityBean</tt> class. In other words, these
methods are intended for the remote interface's implementation,
not the bean instance's. The bean instance implements the
business methods defined in the remote interface, but it does so
indirectly. The EJB object receives all the method invocations made
on the remote interface; those that are business methods (like the
<tt class="literal">getName</tt> or <tt class="literal">setCapacity</tt> methods
in <tt class="literal">Ship</tt>) are delegated to the bean instance. The
other methods, defined by the <tt class="literal">EJBObject</tt>, are
handled by the container and are never delegated to the bean
instance.
</p>

<p>Just for kicks, change the <tt class="literal">ShipBean</tt> definition so
that it implements the <tt class="literal">Ship</tt> interface as show
here:
</p>

<blockquote>
<pre class="programlisting">public class ShipBean implements Ship {</pre>
</blockquote>

<p>When you recompile the <tt class="literal">ShipBean</tt>, you should have
five errors stating that the <tt class="literal">ShipBean</tt> must be
declared abstract because it doesn't implement the methods from
the <tt class="literal">javax.ejb.EJBObject</tt>. EJB allows you to
implement the remote interface, but in so doing you clutter the bean
class's definition with a bunch of methods that have nothing to
do with its functionality. You can hide these methods in an adapter
class; however, using an adapter for methods that have empty
implementations is one thing, but using an adapter for methods that
shouldn't be in the class at all is decidedly bad practice.
</p>

<p>Another reason that beans should not implement the remote interface
is that a client can be an application on a remote computer or it can
be another bean. Beans as clients are very common. When calling a
method on an object, the caller sometimes passes itself as one of the
parameters.<a href="#FOOTNOTE-1">[1]</a> In normal Java
programming, an object passes a reference to itself using the
<a name="INDEX-1879"></a><tt class="literal">this</tt> keyword. In
EJB, however, clients, even bean clients, are only allowed to
interact with the remote interfaces of beans. When one bean calls a
method on another bean, it is not allowed to pass the
<tt class="literal">this</tt> reference; it must obtain its own remote
reference from its context and pass that instead. The fact that a
bean class doesn't implement its remote interface prevents you
from passing the <tt class="literal">this</tt> reference and forces you to
get a reference to the interface from the context. The bean class
won't compile if you attempt to use <tt class="literal">this</tt> as
a remote reference. For example, assume that the
<tt class="literal">ShipBean</tt> needs to call
<tt class="literal">someMethod(Ship</tt><tt class="literal">ship)</tt>. It
can't simply call <tt class="literal">someMethod(this)</tt> because
<tt class="literal">ShipBean</tt> doesn't implement
<tt class="literal">Ship</tt>. If, however, the bean instance implements
the remote interface, you could mistakenly pass the bean instance
reference using the <tt class="literal">this</tt> keyword to another bean.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1] This is frequently done in loopbacks
where the invokee will need information about the invoker. Loopbacks
are discouraged in EJB because they require reentrant programming,
which should be avoided. </p> </blockquote>

<p>
<a name="INDEX-1880"></a>Beans should always
interact with the remote references of other beans so that method
invocations are intercepted by the EJB objects. Remember that the EJB
objects apply security, transaction, concurrency, and other
system-level constraints to method calls before they are delegated to
the bean instance; the EJB object works with the container to manage
the bean at runtime.
</p>

<p>The proper way to obtain a bean's remote reference, within the
bean class, is to use the <tt class="literal">EJBContext</tt>. Here is an
example of how this works:
</p>

<blockquote>
<pre class="programlisting">public class HypotheticalBean extends EntityBean {
    public EntityContext ejbContext;
    public void someMethod() throws RemoteException {
          
          Hypothetical mySelf = (Hypothetical) ejbContext.getEJBObject();
          
          // Do something interesting with the remote reference.
    }
    // More methods follow.
}</pre>
</blockquote>


<a name="JBEANS-CH-9-SECT-5.2"></a>
<h3 class="sect2">9.5.2. The Business Interface Alternative</h3>

<p>Although it is <a name="INDEX-1881"></a><a name="INDEX-1882"></a> undesirable for the bean class to
implement its remote interface, we can define an intermediate
interface that is used by both the bean class and the remote
interface to ensure consistent business method definitions. We will
call this intermediate interface the<a name="INDEX-1883"></a><em class="emphasis">business
interface</em>.
</p>

<p>The following code contains an example of a business interface
defined for the Ship bean, called <tt class="literal">ShipBusiness</tt>.
All the <a name="INDEX-1884"></a>business methods formerly defined
in the <tt class="literal">Ship</tt> interface are now defined in the
<tt class="literal">ShipBusiness</tt> interface. The business interface
defines all the business methods, including every exception that will
be thrown from the remote interface when used at runtime:
</p>

<blockquote>
<pre class="programlisting">package com.titan.ship;
import java.rmi.RemoteException;

public interface ShipBusiness {
    public String getName() throws RemoteException;
    public void setName(String name) throws RemoteException;
    public void setCapacity(int cap) throws RemoteException;
    public int getCapacity() throws RemoteException;
    public double getTonnage() throws RemoteException;
    public void setTonnage(double tons) throws RemoteException;
}</pre>
</blockquote>

<p>Once the business interface is defined, it can be extended by the
remote interface. The remote interface extends both the
<tt class="literal">ShipBusiness</tt> and the <tt class="literal">EJBObject</tt>
interfaces, giving it all the business methods and the
<tt class="literal">EJBObject</tt> methods that the container will
implement at deployment time:
</p>

<blockquote>
<pre class="programlisting">package com.titan.ship;
import javax.ejb.EJBObject;

public interface Ship extends ShipBusiness, javax.ejb.EJBObject {
}</pre>
</blockquote>

<p>Finally, we can implement the business interface in the bean class as
we would any other interface:
</p>

<blockquote>
<pre class="programlisting">public class ShipBean implements ShipBusiness, javax.ejb.EntityBean {
    public int id;
    public String name;
    public int capacity;
    public double tonnage;

    public String getName() {
        return name;
    }
    public void setName(String n) {
        name = n;
    }
    public void setCapacity(int cap) {
        capacity = cap;
    }
    public int getCapacity() {
        return capacity;
    }
    public double getTonnage() {
        return tonnage;
    }
    public void setTonnage(double tons) {
        tonnage = tons;
    }

    // More methods follow...
}</pre>
</blockquote>

<p>
<a name="INDEX-1885"></a><a name="INDEX-1886"></a>In the case of the
<tt class="literal">ShipBean</tt> class, we choose not to throw the
<tt class="literal">RemoteException</tt>. Classes that implement interfaces
can choose not to throw exceptions defined in the interface. They
cannot, however, add exceptions. This is why the business interface
must declare that its methods throw the
<tt class="literal">RemoteException</tt> and all application exceptions.
The remote interface should not modify the business interface
definition. The bean class can choose not to throw the
<tt class="literal">RemoteException</tt>, but it must throw all the
application-specific exceptions.
</p>

<p>The business interface is an easily implemented design strategy that
will make it easier to develop beans. This book recommends that you
use the business interface strategy in your own implementations.
Remember not to pass the business interface in method calls; always
use the bean's remote interface in method parameters and as
<a name="INDEX-1887"></a> return
types<a name="INDEX-1888"></a>.
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch09_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/ch09_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">9.4. Bean Adapters</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">9.6. Entity Beans Without Create Methods</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
