<html>
<head>
<title>Page Generation (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Page Generation">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_01.htm">Chapter 2: HTTP Servlet Basics</a></td><td align="right" valign="top" width="172"><a href="ch02_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">2.3. Page Generation</h2>

<p>The most basic type of HTTP servlet generates a full <a name="INDEX-298"></a><a name="INDEX-299"></a>HTML page. Such a servlet has access
to the same information usually sent to a CGI script, plus a bit
more. A servlet that generates an HTML page can be used for all the
tasks where CGI is used currently, such as for processing HTML forms,
producing reports from a database, taking orders, checking
identities, and so forth.
</p>

<a name="ch02-5-fm2xml"></a>
<h3 class="sect2">2.3.1. Writing Hello World</h3>

<p>
<a href="#ch02-20000">Example 2-1</a> shows an HTTP servlet that generates a
complete HTML page. To keep things as simple as possible, this
servlet just says "<a name="INDEX-300"></a><a name="INDEX-301"></a><a name="INDEX-302"></a>Hello
World" every time it is accessed via a web browser.<a href="#FOOTNOTE-1">[1]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-1"></a>
<p>[1]Fun trivia: the first instance of a documented "Hello
World" program appeared in <em class="citetitle">A Tutorial Introduction
to the Language B</em>, written by Brian Kernighan in 1973.
For those too young to remember, B was a pre-cursor to C. You can
find more information on the B programming language and a link to the
tutorial at <a href="../../../../../../../cm.bell-labs.com/who/dmr/bintro.html">http://cm.bell-labs.com/who/dmr/bintro.html</a>.</p>
</blockquote>

<a name="ch02-20000"></a>
<div class="example">
<h4 class="objtitle">Example 2-1. A servlet that prints "Hello World" </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class HelloWorld extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {

    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    out.println("&lt;HTML&gt;");
    out.println("&lt;HEAD&gt;&lt;TITLE&gt;Hello World&lt;/TITLE&gt;&lt;/HEAD&gt;");
    out.println("&lt;BODY&gt;");
    out.println("&lt;BIG&gt;Hello World&lt;/BIG&gt;");
    out.println("&lt;/BODY&gt;&lt;/HTML&gt;");
  }
}</pre>
</blockquote>
</div>

<p>This servlet extends the <tt class="literal">HttpServlet </tt>class and
overrides the <tt class="literal">doGet()</tt><a name="INDEX-303"></a><a name="INDEX-304"></a>
method inherited from it. Each time the web server receives a GET
request for this servlet, the server invokes this
<tt class="literal">doGet()</tt> method, passing it an
<tt class="literal">HttpServletRequest</tt> object and an
<tt class="literal">HttpServletResponse</tt> object.
</p>

<p>The <tt class="literal">HttpServletRequest</tt> represents the
client's request. This object gives a servlet access to
information about the client, the parameters for this request, the
HTTP headers passed along with the request, and so forth. <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_01.htm">Chapter 4, "Retrieving Information"</a> explains the full capabilities of the request
object. For this example, we can completely ignore it. After all,
this servlet is going to say "Hello World" no matter what
the request!
</p>

<p>The
<tt class="literal">HttpServletResponse</tt><a name="INDEX-305"></a><a name="INDEX-306"></a>
represents the servlet's response. A servlet can use this
object to return data to the client. This data can be of any content
type, though the type should be specified as part of the response. A
servlet can also use this object to set HTTP response headers. <a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_01.htm">Chapter 5, "Sending HTML Information"</a> and <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch06_01.htm">Chapter 6, "Sending Multimedia Content"</a>, explain
everything a servlet can do as part of its response.
</p>

<p>Our servlet first uses the <tt class="literal">setContentType()</tt> method
of the response object to set the content type of its response to
"<tt class="literal">text/html</tt>", the standard
<a name="INDEX-307"></a><a name="INDEX-308"></a>MIME
content type for HTML pages. Then, it uses the
<tt class="literal">getWriter()</tt> method to retrieve a
<tt class="literal">PrintWriter</tt><a name="INDEX-309"></a><a name="INDEX-310"></a>
, the international-friendly counterpart to a
<tt class="literal">PrintStream</tt><a name="INDEX-311"></a>. <tt class="literal">PrintWriter</tt> converts
Java's
<a name="INDEX-312"></a>Unicode characters to a
locale-specific encoding. For an English locale, it behaves same as a
<tt class="literal">PrintStream</tt>. Finally, the servlet uses this
<tt class="literal">PrintWriter</tt> to send its "Hello World"
HTML to the client.
</p>

<p>That's it! That's all the code needed to say hello to
everyone who "surfs" to our servlet.
</p>


<a name="ch02-6-fm2xml"></a>
<h3 class="sect2">2.3.2. Running Hello World</h3>

<p>When developing servlets you need two things: the Servlet API class
files, which are used for compiling, and a servlet engine such as a
web server, which is used for deployment. To obtain the Servlet API
class files, you have several options:
</p>

<ul>
<li>
<p>Install the <a name="INDEX-313"></a><a name="INDEX-314"></a><a name="INDEX-315"></a>Java
Servlet Development Kit (JSDK), available for free at 
<a href="../../../../../../../java.sun.com/products/servlet/">http://java.sun.com/products/servlet/</a>.
JSDK Version 2.0 contains the class files for the Servlet API 2.0,
along with their source code and a simple web server that acts as a
servlet engine for HTTP servlets. It works with JDK 1.1 and later.
(Note that the JSDK is the Servlet API reference implementation, and
as such its <a name="INDEX-316"></a>
version number determines the Servlet API version number.)
</p>
</li>
<li>
<p>Install one of the many full-featured servlet engines, each of which
typically bundles the Servlet API class files.
</p>
</li>
</ul>

<p>There are dozens of servlet engines available for servlet deployment,
several of which are listed in <a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch01_01.htm">Chapter 1, "Introduction"</a>. Why not
use the servlet engine included in JSDK 2.0? Because that servlet
engine is <a name="INDEX-317"></a><a name="INDEX-318"></a>bare-bones simple. It implements
the Servlet API 2.0 and nothing more. Features like robust session
tracking, server-side includes, servlet chaining, and JavaServer
Pages have been left out because they are technically not part of the
Servlet API. For these features, you need to use a full-fledged
servlet engine like the Java Web Server or one of its competitors.
</p>

<p>So, what do we do with our code to make it run in a web server? Well,
it depends on your web server. The examples in this book use
Sun's <a name="INDEX-319"></a><a name="INDEX-320"></a>Java Web Server 1.1.1, unofficially
considered the reference implementation for how a web server should
support servlets. It's free for educational use and has a
30-day trial period for all other use. You can download a copy from
<a href="../../../../../../../java.sun.com/products">http://java.sun.com/products</a>. The
Java Web Server includes plenty of documentation explaining the use
of the server, so while we discuss the general concepts involved with
managing the server, we're leaving the details to Sun's
documentation. If you choose to use another web server, these
examples <em class="emphasis">should</em> work for you, but we cannot make
any guarantees.
</p>

<p>If you are using the Java Web Server, you should put the source code
for the servlet in the
<em class="replaceable">server_root</em><em class="filename">/servlets</em>
directory (where <em class="replaceable">server_root</em> is the
directory where you installed your server). This is the standard
location for servlet class files. Once you have the "Hello
World" source code in the right location, you need to compile
it. The standard <tt class="command"></tt><a name="INDEX-321"></a><em class="emphasis">javac</em> compiler
(or your favorite graphical Java development environment) can do the
job. Just be sure you have the <tt class="literal">javax.servlet</tt> and
<tt class="literal">javax.servlet.http</tt> packages in your classpath.
With the Java Web Server, all you have to do is include
<em class="replaceable">server_root</em><a name="INDEX-322"></a><em class="filename">/lib/jws.jar</em>
(or a future equivalent) somewhere in your classpath.
</p>

<p>Now that you have your first servlet compiled, there is nothing more
to do but start your server and access the servlet! Starting the
<a name="INDEX-323"></a>
server is easy. Look for the
<tt class="command"></tt><a name="INDEX-324"></a><em class="filename">httpd</em> script (or
<tt class="command"></tt><a name="INDEX-325"></a><em class="filename">httpd.exe</em> program
under Windows) in the
<em class="replaceable">server_root</em><em class="filename">/bin</em>
directory. This should start your server if you're running
under Solaris or Windows. On other <a name="INDEX-326"></a>
operating systems, or if you want to use your own
<a name="INDEX-327"></a>Java Runtime Environment (JRE),
you'll need to use
<tt class="command"></tt><a name="INDEX-328"></a><em class="filename">httpd.nojre</em>. In the default configuration, the
server listens on port 8080.
</p>

<p>There are several ways to access a servlet. For this example,
we'll do it by explicitly accessing a
<a name="INDEX-329"></a><a name="INDEX-330"></a>URL with <a href="../../../../../../../ext.rlab.cs.nyu.edu/servlet/">/servlet/</a> prepended to the servlet's
class name.<a href="#FOOTNOTE-2">[2]</a> You can enter this URL in your favorite browser:
<em class="emphasis">http://<em class="replaceable">server</em>:8080/servlet/HelloWorld</em>. Replace
<em class="replaceable">server</em> with the name of your server machine or
with <em class="emphasis">localhost</em> if the server is
on your local machine. You should see a page similar to the one shown
in <a href="#ch02-15337">Figure 2-3</a>.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-2"></a>
<p>[2] Beware, servlets are placed in a
<em class="filename">servlets</em> (plural) directory but are invoked with
a <em class="filename">servlet</em><a name="INDEX-331"></a>(singular) tag. If you think about it,
this makes a certain amount of sense, as servlets go in the
<em class="filename">servlets</em> directory while a single servlet is
referenced with the <em class="filename">servlet</em> tag.</p>
</blockquote>

<a name="ch02-15337"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0203.gif" webstripperlinkwas="figs/jsp_0203.gif"></div>
<h4 class="objtitle">Figure 2-3. The Hello World servlet</h4>

<p>If the servlet were part of a package, it would need to be placed in
<em class="replaceable">server_root</em><em class="filename">/servlets/package/name</em>
and referred to with the URL <em class="emphasis">http://<em class="replaceable">server</em>:8080/servlet/package.name.HelloWorld</em>.
</p>

<p>An alternate way to refer to a servlet is by its <em class="emphasis">registered
name</em><a name="INDEX-332"></a><a name="INDEX-333"></a><a name="INDEX-334"></a><a name="INDEX-335"></a>. This does not have to be the same
as its class name, although it can be. With the Java Web Server, you
register servlets via the
<a name="INDEX-336"></a><a name="INDEX-337"></a>
JavaServer Administration Tool, an administration applet that manages
the server, usually available at <em class="emphasis">http://<em class="replaceable">server</em>:9090/</em>. Choose to manage the <b class="emphasis-bold">Web Service</b>, go to the <b class="emphasis-bold">Servlets</b> section, and then <b class="emphasis-bold">Add</b> a new servlet. Here you can specify the
name of the new servlet and the class associated with that name (on
some servers the class can be an HTTP URL from which the servlet
class file will be automatically loaded). If we choose the name
"<tt class="literal">hi</tt>" for our
<tt class="literal">HelloWorld</tt> servlet, we can then access it at the
URL <em class="emphasis">http://<em class="replaceable">server</em>:8080/servlet/hi</em>. You may wonder why anyone
would bother adding a servlet to her server. The short answer
appropriate for <a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_01.htm">Chapter 2, "HTTP Servlet Basics"</a> is that it
<a name="INDEX-338"></a>allows the server to remember things
about the servlet and give it special treatment.
</p>

<p>A third way to access a servlet is through a <em class="emphasis">servlet
alias</em><a name="INDEX-339"></a><a name="INDEX-340"></a>. The URL of a servlet alias looks like
any other URL. The only difference is that the server has been told
that the URL should be handled by a particular servlet. For example,
we can choose to have <em class="emphasis">http://<em class="replaceable">server</em>:8080/hello.html</em> invoke the
<tt class="literal">HelloWorld</tt> servlet. Using aliases in this way can
help hide a site's use of servlets; it lets a servlet
seamlessly replace an existing page at any given URL. To create a
servlet alias, choose to manage the <b class="emphasis-bold">Web
Service</b>, go to the <b class="emphasis-bold">Setup</b>
section, choose <b class="emphasis-bold">Servlet Aliases</b>, and
then <b class="emphasis-bold">Add</b> the alias.<a name="INDEX-341"></a><a name="INDEX-342"></a><a name="INDEX-343"></a>
</p>


<a name="ch02-7-fm2xml"></a>
<h3 class="sect2">2.3.3. Handling Form Data</h3>

<p>The "Hello World" servlet is not very exciting, so
let's try something slightly more ambitious. This time
we'll create a servlet that <a name="INDEX-344"></a><a name="INDEX-345"></a><a name="INDEX-346"></a>greets the user by name.
It's not hard. First, we need an HTML form that asks the user
for his or her name. The following page should suffice:
</p>

<blockquote>
<pre class="programlisting">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Introductions&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;FORM METHOD=GET ACTION="/servlet/Hello"&gt;
If you don't mind me asking, what is your name?
&lt;INPUT TYPE=TEXT NAME="name"&gt;&lt;P&gt;
&lt;INPUT TYPE=SUBMIT&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</pre>
</blockquote>

<p>
<a href="#ch02-16296">Figure 2-4</a> shows how this page appears to the user.</p>

<a name="ch02-16296"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0204.gif" webstripperlinkwas="figs/jsp_0204.gif"></div>
<h4 class="objtitle">Figure 2-4. An HTML form</h4>

<p>When the user submits this form, his name is sent to the
<tt class="literal">Hello</tt> servlet because we've set the
<tt class="literal">ACTION</tt> attribute to point to the servlet. The form
is using the GET method, so any data is appended to the request URL
as a query string. For example, if the user enters the name
"Inigo Montoya," the request URL is <em class="emphasis">http://<em class="replaceable">server</em>:8080/servlet/Hello?name=Inigo+Montoya</em>. The
space in the name is specially encoded as a plus sign by the browser
because URLs cannot contain spaces.
</p>

<p>A servlet's <tt class="literal">HttpServletRequest</tt> object gives
it access to the form data in its query string. <a href="#ch02-41122">Example 2-2</a> shows a modified version of our
<tt class="literal">Hello</tt> servlet that uses its request object to read
the "<tt class="literal">name</tt>" parameter.
</p>

<a name="ch02-41122"></a>
<div class="example">
<h4 class="objtitle">Example 2-2. A servlet that knows to whom it's saying hello </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class Hello extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {

    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    String name = req.getParameter("name");
    out.println("&lt;HTML&gt;");
    out.println("&lt;HEAD&gt;&lt;TITLE&gt;Hello, " + name + "&lt;/TITLE&gt;&lt;/HEAD&gt;");
    out.println("&lt;BODY&gt;");
    out.println("Hello, " + name);
    out.println("&lt;/BODY&gt;&lt;/HTML&gt;");
  }

  public String getServletInfo() {
    return "A servlet that knows the name of the person to whom it's" +
           "saying hello";
  }
}</pre>
</blockquote>
</div>

<p>This servlet is nearly identical to the <tt class="literal">HelloWorld</tt>
servlet. The most important change is that it now calls
<tt class="literal">req.getParameter("name")</tt> to find out the name of
the user and that it then prints this name instead of the harshly
impersonal (not to mention overly broad) "World". The
<tt class="literal">getParameter()</tt> method gives a servlet access to
the parameters in its query string. It returns the parameter's
decoded value or <tt class="literal">null</tt> if the parameter was not
specified. If the parameter was sent but without a value, as in the
case of an empty form field, <tt class="literal">getParameter()</tt>
returns the empty string.
</p>

<p>This servlet also adds a
<tt class="literal">getServletInfo()</tt><a name="INDEX-347"></a><a name="INDEX-348"></a>
method. A servlet can override this method to return descriptive
information about itself, such as its purpose, author, version,
and/or copyright. It's akin to an applet's
<tt class="literal">getAppletInfo()</tt><a name="INDEX-349"></a><a name="INDEX-350"></a>
. The method is used primarily for putting explanatory information
into a web server administration tool. You'll notice we
won't bother to include it in future examples because it is
clutter for learning.<a name="INDEX-351"></a><a name="INDEX-352"></a><a name="INDEX-353"></a>
</p>

<p>The servlet's output looks something like what is shown in
<a href="#ch02-30483">Figure 2-5</a>.
</p>

<a name="ch02-30483"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0205.gif" webstripperlinkwas="figs/jsp_0205.gif"></div>
<h4 class="objtitle">Figure 2-5. The Hello servlet using form data</h4>


<a name="ch02-8-fm2xml"></a>
<h3 class="sect2">2.3.4. Handling POST Requests</h3>

<p>You've now seen two servlets that implement the
<tt class="literal">doGet()</tt><a name="INDEX-354"></a><a name="INDEX-355"></a>
method. Now let's change our <tt class="literal">Hello</tt> servlet
so that it can handle <a name="INDEX-356"></a><a name="INDEX-357"></a><a name="INDEX-358"></a>POST requests as well. Because we want
the same behavior with POST as we had for GET, we can simply dispatch
all POST requests to the <tt class="literal">doGet()</tt> method with the
following code:
</p>

<blockquote>
<pre class="programlisting">public void doPost(HttpServletRequest req, HttpServletResponse res)
                              throws ServletException, IOException {
  doGet(req, res);
}</pre>
</blockquote>

<p>Now the <tt class="literal">Hello</tt> servlet can handle form submissions
that use the POST method:
</p>

<blockquote>
<pre class="programlisting">&lt;FORM METHOD=POST ACTION="/servlet/Hello"&gt;</pre>
</blockquote>

<p>In general, it is best if a servlet implements either
<tt class="literal">doGet()</tt> or <tt class="literal">doPost()</tt>. Deciding
which to implement depends on what sort of requests the servlet needs
to be able to handle, as discussed earlier. The code you write to
implement the methods is almost identical. The major difference is
that <tt class="literal">doPost()</tt> has the added ability to accept
large amounts of input.
</p>

<p>You may be wondering what would have happened had the
<tt class="literal">Hello</tt> servlet been accessed with a POST request
before we implemented <tt class="literal">doPost()</tt>. The default
behavior inherited from <tt class="literal">HttpServlet</tt> for both
<tt class="literal">doGet()</tt> and <tt class="literal">doPost()</tt> is to
return an error to the client saying the requested URL does not
support that method.
</p>


<a name="ch02-9-fm2xml"></a>
<h3 class="sect2">2.3.5. Handling HEAD Requests</h3>

<p>A bit of under-the-covers magic makes it trivial to handle <a name="INDEX-359"></a><a name="INDEX-360"></a>HEAD requests (sent by a client when it
wants to see only the headers of the response). There is no
<tt class="literal">doHead()</tt> method to write. Any servlet that
subclasses <tt class="literal">HttpServlet</tt> and implements the
<tt class="literal">doGet()</tt><a name="INDEX-361"></a><a name="INDEX-362"></a>
method automatically supports HEAD requests.
</p>

<p>Here's how it works. The <tt class="literal">service()</tt> method of
the <tt class="literal">HttpServlet</tt> identifies HEAD requests and
treats them specially. It constructs a modified
<tt class="literal">HttpServletResponse</tt> object and passes it, along
with an unchanged request, to the <tt class="literal">doGet()</tt> method.
The <tt class="literal">doGet()</tt> method proceeds as normal, but only
the headers it sets are returned to the client. The special response
object effectively suppresses all body output.<a href="#FOOTNOTE-3">[3]</a><a href="#ch02-25676">Figure 2-6</a> shows how an HTTP servlet handles HEAD
requests.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-3"></a>
<p>[3] Jason
is proud to report that Sun added this feature in response to
comments he made during beta testing.</p> </blockquote>

<a name="ch02-25676"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0206.gif" webstripperlinkwas="figs/jsp_0206.gif"></div>
<h4 class="objtitle">Figure 2-6. An HTTP servlet handling a HEAD request</h4>

<p>Although this strategy is convenient, you can sometimes improve
performance by detecting HEAD requests in the
<tt class="literal">doGet()</tt> method, so that it can return early,
before wasting cycles writing output that no one will see. <a href="#ch02-31792">Example 2-3</a> uses the request's
<tt class="literal">getMethod()</tt> method to implement this strategy
(more properly called a hack) in our <tt class="literal">Hello</tt>
servlet.
</p>

<a name="ch02-31792"></a>
<div class="example">
<h4 class="objtitle">Example 2-3. The Hello servlet modified to return quickly in response to HEAD requests </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class Hello extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {

    // Set the Content-Type header
    res.setContentType("text/html");

    // Return early if this is a HEAD
    if (req.getMethod().equals("HEAD")) return;

    // Proceed otherwise
    PrintWriter out = res.getWriter();
    String name = req.getParameter("name");
    out.println("&lt;HTML&gt;");
    out.println("&lt;HEAD&gt;&lt;TITLE&gt;Hello, " + name + "&lt;/TITLE&gt;&lt;/HEAD&gt;");
    out.println("&lt;BODY&gt;");
    out.println("Hello, " + name);
    out.println("&lt;/BODY&gt;&lt;/HTML&gt;");
  }
}</pre>
</blockquote>
</div>

<p>Notice that we set the <tt class="literal">Content-Type</tt> header, even
if we are dealing with a HEAD request. Headers such as these are
returned to the client. Some header values, such as
<tt class="literal">Content-Length</tt>, may not be available until the
response has already been calculated. If you want to be accurate in
returning these header values, the effectiveness of this shortcut is
limited.
</p>

<p>Make sure that you end the request handling with a
<tt class="literal">return</tt> statement. Do not call
<tt class="literal">System.exit()</tt><a name="INDEX-363"></a><a name="INDEX-364"></a><a name="INDEX-365"></a>. If you do,
you risk exiting the web <a name="INDEX-366"></a><a name="INDEX-367"></a> server. <a name="INDEX-368"></a><a name="INDEX-369"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.2. The Servlet API</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.4. Server-Side Includes</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
