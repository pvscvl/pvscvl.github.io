<html>
<head>
<title>Servlet Chaining and Filters (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Servlet Chaining and Filters">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_01.htm">Chapter 2: HTTP Servlet Basics</a></td><td align="right" valign="top" width="172"><a href="ch02_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">2.5. Servlet Chaining and Filters</h2>

<p>Now you've seen how an individual servlet can create content by
generating a full page or by being used in a server-side include.
Servlets can also cooperate to create content in a process called
<em class="emphasis">servlet chaining</em><a name="INDEX-409"></a><a name="INDEX-410"></a>
.
</p>

<p>In many servers that support servlets, a request can be handled by a
sequence of servlets. The request from the client browser is sent to
the first servlet in the chain. The response from the last servlet in
the chain is returned to the browser. In between, the output from
each servlet is passed (piped) as input to the next servlet, so each
servlet in the chain has the option to change or extend the content,
as shown in <a href="#ch02-23571">Figure 2-9</a>.<a href="#FOOTNOTE-6">[6]</a>
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-6"></a>
<p>[6] A web
server could implement servlet chaining differently than described
here. There is no reason the initial content must come from a
servlet. It could come from a static file fetched with built-in
server code or even from a CGI script. The Java Web Server does not
have to make this distinction because all its requests are handled by
servlets.</p> </blockquote>

<p>There are two common ways to trigger a chain of servlets for an
incoming request. First, you can tell the server that certain URLs
should be handled by an explicitly specified chain. Or, you can tell
the server to send all output of a particular content type through a
specified servlet before it is returned to the client, effectively
creating a chain on the fly. When a servlet converts one type of
content into another, the technique is called
<em class="emphasis">filtering</em><a name="INDEX-411"></a>
.
</p>

<a name="ch02-23571"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0209.gif" webstripperlinkwas="figs/jsp_0209.gif"></div>
<h4 class="objtitle">Figure 2-9. Servlet chaining</h4>

<p>Servlet chaining can change the way you think about web content
creation. Here are some of the things you can do with it:
</p>

<dl>
<dt>
<b><em class="emphasis">Quickly change the appearance of a page, a group of pages, or a type of content.</em> </b>
</dt>
<dd>
<p>For example, you can improve your site by suppressing all
<tt class="literal">&lt;BLINK&gt;</tt><a name="INDEX-412"></a><a name="INDEX-413"></a> tags from the pages of
your server, as shown in the next example. You can speak to those who
don't understand English by dynamically translating the text
from your pages to the language read by the client. You can suppress
certain words that you don't want everyone to read, be they the
seven dirty words or words not everyone knows already, like the
unreleased name of your secret project. You could also suppress
entire pages in which these words appear. You can enhance certain
words on your site, so that an online news magazine could have a
servlet detect the name of any Fortune 1000 companies and
automatically make each company name a link to its home page.
</p>
</dd>

<dt>
<b><em class="emphasis">Take a kernel of content and display it in special formats.</em> </b>
</dt>
<dd>
<p>
For example, you can embed custom tags in your page and have a servlet
replace them with HTML content. Imagine an
<tt class="literal">&lt;SQL&gt;</tt> tag whose query contents are executed
against a database and whose results are placed in an HTML table. This
is, in fact, similar to how the Java Web Server supports the <tt class="literal">
&lt;SERVLET&gt;</tt> tag.
<a name="INDEX-414"></a><a name="INDEX-415"></a><a name="INDEX-416"></a><a name="INDEX-417"></a>
</p>
</dd>

<dt>
<b><em class="emphasis">Support esoteric data types.</em></b>
</dt>
<dd>
<p>For example, you can serve unsupported image types with a filter that
converts nonstandard image types to GIF or JPEG.
</p>
</dd>

</dl>

<p>You may be asking yourself, why you would want to use a servlet chain
when you could instead write a script that edits the files in
place--especially when there is an additional amount of overhead
for each servlet involved in handling a request? The answer is that
servlet chains have a threefold advantage:
</p>

<ul>
<li>
<p>They can easily be undone, so when users riot against your tyranny of
removing their <tt class="literal">&lt;BLINK&gt;</tt> freedom, you can
quickly reverse the change and appease the masses.
</p>
</li>
<li>
<p>They handle dynamically created content, so you can trust that your
restrictions are maintained, your special tags are replaced, and your
dynamically converted PostScript images are properly displayed, even
in the output of a servlet (or a CGI script).
</p>
</li>
<li>
<p>They handle the content of the future, so you don't have to run
your script every time new content is added.
</p>
</li>
</ul>

<a name="ch02-11-fm2xml"></a>
<h3 class="sect2">2.5.1. Creating a Servlet Chain</h3>

<p>
<a name="INDEX-418"></a><a name="INDEX-419"></a><a name="INDEX-420"></a><a name="INDEX-421"></a><a name="INDEX-422"></a>
Our first servlet chain example removes
<tt class="literal">&lt;BLINK&gt;</tt> tags from HTML pages. If
you're not familiar with the <tt class="literal">&lt;BLINK&gt;</tt>
tag, be thankful. It is a tag recognized by many browsers in which
any text between the <tt class="literal">&lt;BLINK&gt;</tt> and
<tt class="literal">&lt;/BLINK&gt;</tt> tags becomes a flashing
distraction. Sure, it's a useful feature when used sparingly.
The problem is that many page authors use it far too often. It has
become the joke of HTML.
</p>

<p>
<a href="#ch02-33980">Example 2-5</a> shows a servlet that can be used in a
servlet chain to remove the <tt class="literal">&lt;BLINK&gt;</tt> tag from
all of our server's static HTML pages, all its dynamically
created HTML pages, and all the pages added to it in the future. This
servlet introduces the
<tt class="literal">getReader()</tt><a name="INDEX-423"></a><a name="INDEX-424"></a>
and
<tt class="literal">getContentType()</tt><a name="INDEX-425"></a><a name="INDEX-426"></a>
methods.
</p>

<a name="ch02-33980"></a>
<div class="example">
<h4 class="objtitle">Example 2-5. A servlet that removes the &lt;BLINK&gt; tag from HTML pages</h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class Deblink extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res) 
                               throws ServletException, IOException {

    String contentType = req.getContentType();  // get the incoming type
    if (contentType == null) return;  // nothing incoming, nothing to do
    res.setContentType(contentType);  // set outgoing type to be incoming type

    PrintWriter out = res.getWriter();

    BufferedReader in = req.getReader();

    String line = null;
    while ((line = in.readLine()) != null) {
      line = replace(line, "&lt;BLINK&gt;", "");
      line = replace(line, "&lt;/BLINK&gt;", "");
      out.println(line);
    }
  }

  public void doPost(HttpServletRequest req, HttpServletResponse res)
                                throws ServletException, IOException {
    doGet(req, res);
  }

  private String replace(String line, String oldString, String newString) {
    int index = 0;
    while ((index = line.indexOf(oldString, index)) &gt;= 0) {
      // Replace the old string with the new string (inefficiently)
      line = line.substring(0, index) +
             newString +
             line.substring(index + oldString.length());
      index += newString.length();
    }
    return line;
  }
}</pre>
</blockquote>
</div>

<p>This servlet overrides both the <tt class="literal">doGet()</tt> and
<tt class="literal">doPost()</tt> methods. This allows it to work in chains
that handle either type of request. The <tt class="literal">doGet()</tt>
method contains the core logic, while <tt class="literal">doPost()</tt>
simply dispatches to <tt class="literal">doGet()</tt>, using the same
technique as the <tt class="literal">Hello</tt> example.
</p>

<p>Inside <tt class="literal">doGet()</tt>, the servlet first fetches its
print writer. Next, the servlet calls
<tt class="literal">req.getContentType()</tt> to find out the content type
of the data it is receiving. It sets its output type to match, or if
<tt class="literal">getContentType()</tt> returned <tt class="literal">null</tt>,
it realizes there is no incoming data to deblink and simply returns.
To read the incoming data, the servlet fetches a
<tt class="literal">BufferedReader</tt> with a call to
<tt class="literal">req.getReader()</tt>. The reader contains the HTML
output from the previous servlet in the chain. As the servlet reads
each line, it removes any instance of
<tt class="literal">&lt;BLINK&gt;</tt> or <tt class="literal">&lt;/BLINK&gt;</tt>
with a call to <tt class="literal">replace()</tt> and then returns the line
to the client (or perhaps to another servlet in the chain). Note that
the replacement is case-sensitive and inefficient; a solution to this
problem that uses regular expressions is included in <a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_01.htm">Chapter 13, "Odds and Ends"</a>.
</p>

<p>A more robust version of this servlet would retrieve the incoming
HTTP headers and pass on the appropriate headers to the client (or to
the next servlet in the chain). <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_01.htm">Chapter 4, "Retrieving Information"</a> and
<a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_01.htm">Chapter 5, "Sending HTML Information"</a> explain the handling and use of HTTP
headers. There's no need to worry about it now, as the headers
aren't useful for simple tasks like the one we are doing here.
</p>


<a name="ch02-12-fm2xml"></a>
<h3 class="sect2">2.5.2. Running Deblink</h3>

<p>If you're using the Java Web Server, before running
<tt class="literal">Deblink</tt> you have to first tell the web server you
want servlet chains enabled. Go to managing the <b class="emphasis-bold">Web Service</b>, go to the <b class="emphasis-bold">Setup</b> section, select <b class="emphasis-bold">Site</b>, and then select <b class="emphasis-bold">Options</b>. Here you can turn servlet chaining
on. By default it's turned off to improve performance.
</p>

<p>As we said before, there are two ways to trigger a servlet chain. A
chain can be explicitly specified for certain requests, or it can be
created on the fly when one servlet returns a content type that
another servlet is registered to handle. We'll use both
techniques to run <tt class="literal">Deblink</tt>.
</p>

<p>First, we'll explicitly specify that all files with a name
matching the wildcard pattern <em class="filename">*.html </em>should be
handled by the <tt class="literal">file</tt> servlet followed by the
<tt class="literal">Deblink</tt> servlet. The <tt class="literal">file</tt>
servlet is a core Java Web Server servlet used to retrieve files.
Normally it is the only servlet invoked to return an HTML file. But
here, we're going to pass its output to
<tt class="literal">Deblink</tt> before returning the HTML to the client.
Go back to managing the <b class="emphasis-bold">Web Service</b>,
go to the <b class="emphasis-bold">Setup</b> section, and select
<b class="emphasis-bold">Servlet Aliases</b>. Here you will see
which servlets are invoked for different kinds of URLs, as shown in
<a href="#ch02-30881">Figure 2-10</a>.
</p>

<a name="ch02-30881"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0210.gif" webstripperlinkwas="figs/jsp_0210.gif"></div>
<h4 class="objtitle">Figure 2-10. Standard servlet aliases</h4>

<p>These mappings provide some insight into how the Java Web Server uses
its core servlets. You can see <em class="emphasis">/</em> invokes
<tt class="literal">file</tt>,
<em class="emphasis">*.shtml</em><a name="INDEX-427"></a><a name="INDEX-428"></a><a name="INDEX-429"></a> invokes
<tt class="literal">ssinclude</tt><a name="INDEX-430"></a><a name="INDEX-431"></a>
, and <em class="emphasis">/servlet</em> invokes
<tt class="literal">invoker</tt><a name="INDEX-432"></a>
. The most specific wildcard pattern is used, which is why
<em class="emphasis">/servlet </em>uses the <tt class="literal">invoker</tt>
servlet to launch a servlet instead of using the
<tt class="literal">file</tt> servlet to return a file. You can change the
default aliases or add new aliases. For example, changing the
<em class="emphasis">/servlet</em> prefix would change the URL used to
access servlets. Right now, we're interested in adding another
alias. You should add an alias that specifies that
<em class="emphasis">*.html</em> invokes <tt class="literal">file,Deblink</tt>.
After making this change, any file ending in
<em class="emphasis">.html</em> is retrieved by the
<tt class="literal">file</tt> servlet and passed to
<tt class="literal">Deblink</tt>.
</p>

<p>Try it yourself. Create a <em class="filename">blinky.html</em> file in
<em class="replaceable">server_root</em><em class="filename">/public_html</em>
that is sprinkled with a few blink tags and try surfing to
<em class="emphasis">http://<em class="replaceable">server</em>:8080/blinky.html</em>. If everything's set
up right, all evidence of the blink tags is removed.
</p>


<a name="ch02-13-fm2xml"></a>
<h3 class="sect2">2.5.3. The Loophole</h3>

<p>This technique has one large loophole: not all HTML comes from files
with the <em class="emphasis">.html</em><a name="INDEX-433"></a><a name="INDEX-434"></a><a name="INDEX-435"></a> extension. For example,
HTML can come from a file with the <em class="emphasis">.htm
</em><a name="INDEX-436"></a><a name="INDEX-437"></a><a name="INDEX-438"></a> extension or from some
dynamically created HTML. We can work around multiple file extensions
with more aliases. This, however, still doesn't catch dynamic
content. We need our second technique for creating a servlet chain to
plug that hole.
</p>

<p>We really want to specify that all <tt class="literal">text/html</tt>
content should pass through the <tt class="literal">Deblink</tt> servlet.
The <a name="INDEX-439"></a><a name="INDEX-440"></a>JavaServer Administration Tool does
not yet include a graphical way to do this. Instead, we can make the
change with a simple edit of a properties file. The properties file
can be found at
<em class="replaceable">server_root</em><em class="filename">/properties/server/javawebserver/webpageservice/mimeservlets.properties</em>.
It contains directives like this:
</p>

<blockquote>
<pre class="programlisting">java-internal/parsed-html=ssinclude</pre>
</blockquote>

<p>This directive indicates that all responses with a
<tt class="literal">Content-Type</tt> header of
<tt class="literal">java-internal/parsed-html</tt> should be passed to the
<tt class="literal">ssinclude</tt><a name="INDEX-441"></a><a name="INDEX-442"></a>
(server-side include) servlet. Why is this necessary? Without it, the
<tt class="literal">ssinclude</tt> servlet would handle only static files
with the <em class="emphasis">.shtml</em> extension. It would suffer from
the same loophole: dynamically created pages containing the
<tt class="literal">&lt;SERVLET&gt;</tt> tag would be ignored. With this
directive, any servlet can set its content type to
<tt class="literal">java-internal/parsed-html</tt>, which causes the
<tt class="literal">ssinclude</tt> servlet to handle its output.
</p>

<p>To specify that all <tt class="literal">text/html</tt> content is passed
through <tt class="literal">Deblink</tt>, we need to add our own directive:
</p>

<blockquote>
<pre class="programlisting">text/html=Deblink</pre>
</blockquote>

<p>You need to restart your server before this change can take effect.</p>

<p>After making this change, all HTML content served by the server has
its <tt class="literal">&lt;BLINK&gt;</tt> tags removed.<a href="#FOOTNOTE-7">[7]</a>
Try it yourself! Change your <tt class="literal">HelloWorld</tt> servlet to
<tt class="literal">&lt;BLINK&gt;</tt> its message and watch the
<tt class="literal">Deblink</tt> servlet silently remove all evidence of
the deed.
<a name="INDEX-445"></a><a name="INDEX-446"></a><a name="INDEX-447"></a><a name="INDEX-448"></a><a name="INDEX-449"></a><a name="INDEX-450"></a><a name="INDEX-451"></a>
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-7"></a>
<p>[7]
Unfortunately, some servers (including the
<a name="INDEX-443"></a><a name="INDEX-444"></a>Java Web Server 1.1.1) have a bug
where they are too smart for their own good. They literally feed all
<tt class="literal">text/html</tt> content to the <tt class="literal">Deblink
</tt>servlet--even the <tt class="literal">text/html</tt> content
being output by the <tt class="literal">Deblink</tt> servlet itself! In
other words, every HTML page is deblinked forever (or until the
client stops the request, whichever comes first).</p> </blockquote>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.4. Server-Side Includes</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.6. JavaServer Pages</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
