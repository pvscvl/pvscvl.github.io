<html>
<head>
<title>Interservlet Communication (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Interservlet Communication">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch10_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm">Java Servlet Programming</a></td><td align="right" valign="top" width="172"><a href="ch11_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch11_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 11.  Interservlet Communication</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch11_01.htm">Servlet Manipulation</a>
<br>
<a href="ch11_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch11_02.htm">Servlet Reuse</a>
<br>
<a href="ch11_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch11_03.htm">Servlet Collaboration</a>
<br>
<a href="ch11_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch11_04.htm">Recap</a>
<br>
</p>
</div>


<p>Servlets running together in the same server have several ways to
communicate with each other. There are three major reasons to use
<a name="INDEX-1973"></a><a name="INDEX-1974"></a><a name="INDEX-1975"></a>interservlet communication:
</p>

<dl>
<dt>
<b><em class="emphasis">Direct servlet manipulation</em></b>
</dt>
<dd>
<p>A servlet can gain access to the other currently loaded servlets and
perform some task on each. The servlet could, for example,
periodically ask every servlet to write its state to disk to protect
against server crashes.
</p>
</dd>

<dt>
<b><em class="emphasis">Servlet reuse</em></b>
</dt>
<dd>
<p>One servlet can use another's abilities to perform a task.
Think back to the <tt class="literal">ChatServlet</tt> from the previous
chapter. It was written as a server for chat applets, but it could be
reused (unchanged) by another servlet that needed to support an
HTML-based chat interface.
</p>
</dd>

<dt>
<b><em class="emphasis">Servlet collaboration</em></b>
</dt>
<dd>
<p>The most common, situation involves two or more servlets sharing
state information. For example, a set of servlets managing an online
store could share the store's product inventory count. Session
tracking (see <a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch07_01.htm">Chapter 7, "Session Tracking"</a> ) is a special case of
servlet collaboration.
</p>
</dd>

</dl>

<p>This chapter discusses why interservlet communication is useful and
how it can be accomplished.
</p>



<h2 class="sect1">11.1. Servlet Manipulation</h2>

<p>Direct <a name="INDEX-1976"></a>servlet manipulation involves
one servlet accessing the loaded servlets on its server and
optionally performing some task on one or more of them. A servlet
obtains information about other servlets through the
<tt class="literal">ServletContext</tt> object. Use
<tt class="literal">getServlet()</tt><a name="INDEX-1977"></a><a name="INDEX-1978"></a>
to get a particular servlet:
</p>

<blockquote>
<pre class="programlisting">public Servlet ServletContext.getServlet(String name) throws ServletException</pre>
</blockquote>

<p>This method returns the servlet of the given name, or
<tt class="literal">null</tt> if the servlet is not found. The specified
name can be the servlet's registered name (such as
<tt class="literal">"file"</tt>) or its class name (such as
<tt class="literal">"com.sun.server.webserver.FileServlet"</tt>). The
server maintains one servlet instance per name, so
<tt class="literal">getServlet("file")</tt> returns a different servlet
instance than <tt class="literal">getServlet("com.sun.server.webserver.FileServlet")</tt>.<a href="#FOOTNOTE-1">[1]</a> If the servlet implements
<tt class="literal">SingleThreadModel</tt>, the server may return any
instance of the servlet from the current pool. The server
may--but isn't required to--load the named servlet
and execute its <tt class="literal">init()</tt> method if it isn't
already loaded. The Java Web Server does not perform this load. A
<tt class="literal">ServletException</tt> is thrown if there is a problem
during the load.
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-1"></a>
<p>[1]<tt class="literal">getServlet("file")</tt> returns the instance that
handles <em class="filename">/servlet/file</em>, while
<tt class="literal">getServlet("com.sun.
server.webserver.FileServlet")</tt> returns the instance that
handles <em class="emphasis">/servlet/com.sun.server.webserver.
FileServlet</em>.</p> </blockquote>

<p>You can also get all of the servlets using
<tt class="literal">getServlets()</tt><a name="INDEX-1979"></a><a name="INDEX-1980"></a>
:
</p>

<blockquote>
<pre class="programlisting">public Enumeration ServletContext.getServlets()</pre>
</blockquote>

<p>This method returns an <tt class="literal">Enumeration</tt> of the
<tt class="literal">Servlet</tt> objects loaded in the current
<tt class="literal">ServletContext</tt>. Generally there's one
servlet context per server, but for security or convenience, a server
may decide to partition its servlets into separate contexts. The
enumeration always includes the calling servlet itself. This method
is deprecated in the Servlet API 2.0 in favor of
<tt class="literal">getServletNames()</tt><a name="INDEX-1981"></a><a name="INDEX-1982"></a>
:
</p>

<blockquote>
<pre class="programlisting">public Enumeration ServletContext.getServletNames()</pre>
</blockquote>

<p>This method returns an <tt class="literal">Enumeration</tt> of the names of
the servlet objects loaded in the current
<tt class="literal">ServletContext</tt>. The enumeration always includes
the calling servlet itself. When used with
<tt class="literal">getServlet()</tt>, this method can perform the same
function as the deprecated <tt class="literal">getServlets()</tt>. The name
returned can be a registered name (such as <tt class="literal">"file"</tt>)
or a class name (such as <tt class="literal">"com.sun.server.webserver.FileServlet"</tt>). This method was introduced in
Version 2.0 of the Servlet API.
</p>

<p>Casting the <tt class="literal">Servlet</tt> object returned by
<tt class="literal">getServlet()</tt> or <tt class="literal">getServlets()</tt>
to its specific subclass can, in some situations, throw a
<tt class="literal">ClassCastException</tt>. For example, the following
code sometimes works as expected and sometimes throws an exception:
</p>

<blockquote>
<pre class="programlisting">MyServlet servlet = (MyServlet)getServletContext().getServlet("MyServlet");</pre>
</blockquote>

<p>The reason has to do with how a
<a name="INDEX-1983"></a><a name="INDEX-1984"></a>servlet can be
automatically reloaded when its class file changes. As we explained
in <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_01.htm">Chapter 3, "The Servlet Life Cycle"</a>, a server uses a new
<tt class="literal">ClassLoader</tt> each time it reloads a servlet. This
has the interesting side effect that, when the
<tt class="literal">MyServlet</tt> class is reloaded, it is actually a
different version of <tt class="literal">MyServlet</tt> than the version
used by other classes. Thus, although the returned class type is
<tt class="literal">MyServlet</tt> and it's being cast to the type
<tt class="literal">MyServlet</tt>, the cast is between different types
(from two different class loaders) and the cast has to throw a
<tt class="literal">ClassCastException</tt>. The same type mismatch can
occur if the class performing the cast (that is, the servlet
containing the above code) is reloaded. Why? Because its new
<tt class="literal">ClassLoader</tt> won't find
<tt class="literal">MyServlet</tt> using the primordial class loader and
will load its own copy of <tt class="literal">MyServlet</tt>.
</p>

<p>There are three possible workarounds. First, avoid casting the
returned <tt class="literal">Servlet</tt> object and <a name="INDEX-1985"></a><a name="INDEX-1986"></a> invoke its methods using
reflection (a technique whereby a Java class can inspect and
manipulate itself at runtime). Second, make sure that the servlet
being cast is never reloaded. You can do this by moving the servlet
out of the default servlet directory (usually
<em class="replaceable">server_root</em><em class="filename">/servlets</em>)
and into the server's standard classpath (usually
<em class="replaceable">server_roo</em><em class="filename">t/classes</em>).
The servlet performing the cast can remain in the
<em class="filename">servlets</em> directory because its
<tt class="literal">ClassLoader</tt> can find <tt class="literal">MyServlet</tt>
using the primordial class loader. Third, cast the returned servlet
to an interface that declares the pertinent methods and place the
interface in the server's standard classpath where it
won't be reloaded. Every class but the interface can remain in
the <em class="filename">servlets</em> directory. Of course, in this case,
the servlet must be changed to declare that it implements the
interface.
</p>

<a name="ch11-2-fm2xml"></a>
<h3 class="sect2">11.1.1. Viewing the Currently Loaded Servlets</h3>

<p>
<a href="#ch11-24650">Example 11-1</a> uses these methods to display
information about the currently loaded
<a name="INDEX-1987"></a><a name="INDEX-1988"></a><a name="INDEX-1989"></a>servlets, as shown in <a href="#ch11-21022">Figure 11-1</a>.
</p>

<a name="ch11-24650"></a>
<div class="example">
<h4 class="objtitle">Example 11-1. Checking out the currently loaded servlets </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class Loaded extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();

    ServletContext context = getServletContext();
    Enumeration names = context.getServletNames();
    while (names.hasMoreElements()) {
      String name = (String)names.nextElement();
      Servlet servlet = context.getServlet(name);
      out.println("Servlet name: " + name);
      out.println("Servlet class: " + servlet.getClass().getName());
      out.println("Servlet info: " + servlet.getServletInfo());
      out.println();
    }
  }
}</pre>
</blockquote>
</div>

<a name="ch11-21022"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_1101.gif" webstripperlinkwas="figs/jsp_1101.gif"></div>
<h4 class="objtitle">Figure 11-1. Output from the loaded servlet</h4>

<p>There's nothing too surprising in this servlet. It retrieves
its <tt class="literal">ServletContext</tt> to access the other servlets
loaded in the server. Then it calls the context's
<tt class="literal">getServletNames()</tt> method. This returns an
<tt class="literal">Enumeration</tt> of <tt class="literal">String</tt> objects
that the servlet iterates over in a <tt class="literal">while</tt> loop.
For each name, it retrieves the corresponding
<tt class="literal">Servlet</tt> object with a call to the context's
<tt class="literal">getServlet()</tt> method. Then it prints three items of
information about the servlet: its name, its class name, and its
<tt class="literal">getServletInfo()</tt> text. Notice that if the
<tt class="literal">Loaded</tt> servlet used the deprecated
<tt class="literal">getServlets()</tt> method instead of
<tt class="literal">getServletNames()</tt>, it would not have had access to
the servlets' names.
</p>


<a name="ch11-3-fm2xml"></a>
<h3 class="sect2">11.1.2. Saving the State of the Currently Loaded Servlets</h3>

<p>The next example demonstrates another use for these methods. It works
like <tt class="literal">Loaded</tt>, except that it attempts to call each
<a name="INDEX-1990"></a><a name="INDEX-1991"></a> servlets'
<tt class="literal">saveState()</tt> method, if it exists. This servlet
could be run periodically (or be modified to spawn a thread that runs
periodically) to guard against data loss in the event of a server
crash. The code is in <a href="#ch11-10632">Example 11-2</a>; the output is in
<a href="#ch11-37693">Figure 11-2</a>.
</p>

<a name="ch11-10632"></a>
<div class="example">
<h4 class="objtitle">Example 11-2. Saving the state of all the currently loaded servlets </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.lang.reflect.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class SaveState extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();

    ServletContext context = getServletContext();
    Enumeration names = context.getServletNames();
    while (names.hasMoreElements()) {
      String name = (String)names.nextElement();
      Servlet servlet = context.getServlet(name);

      out.println("Trying to save the state of " + name + "...");
      out.flush();
      try {
        Method save = servlet.getClass().getMethod("saveState", null);
        save.invoke(servlet, null);
        out.println("Saved!");
      }
      catch (NoSuchMethodException e) {
        out.println("Not saved. This servlet has no saveState() method.");
      }
      catch (SecurityException e) {
        out.println("Not saved. SecurityException: " + e.getMessage());
      }
      catch (InvocationTargetException e) {
        out.print("Not saved. The saveState() method threw an exception: ");
        Throwable t = e.getTargetException();
        out.println(t.getClass().getName() + ": " + t.getMessage());
      }
      catch (Exception e) {
        out.println("Not saved. " + e.getClass().getName() + ": " +
                    e.getMessage());
      }

      out.println();
    }
  }

  public String getServletInfo() {
    return "Calls the saveState() method (if it exists) for all the " +
           "currently loaded servlets";
  }
}</pre>
</blockquote>
</div>

<a name="ch11-37693"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_1102.gif" webstripperlinkwas="figs/jsp_1102.gif"></div>
<h4 class="objtitle">Figure 11-2. Output from the SaveState servlet</h4>

<p>
<tt class="literal">SaveState</tt> uses reflection to determine if a
servlet has a public <tt class="literal">saveState()</tt> method and to
invoke the method when it exists. If the invocation goes without a
hitch, it prints "Saved!". If there's a problem, it
reports the problem. Why does <tt class="literal">SaveState</tt> use
reflection? Because otherwise it would have to cast each
<tt class="literal">Servlet</tt> object to some class or interface that
includes a <tt class="literal">saveState()</tt> method, and the code for
each servlet would have to be modified to extend or implement that
class or interface. Using reflection is an easier approach that
doesn't require code modification. <a name="INDEX-1992"></a><a name="INDEX-1993"></a> Reflection also
avoids the <tt class="literal">ClassCastException</tt> problem noted
earlier.
</p>











<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch10_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch11_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch11_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">10.3. Chat Server</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">11.2. Servlet Reuse</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
