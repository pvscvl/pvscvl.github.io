<html>
<head>
<title>JavaServer Pages (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="JavaServer Pages">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_01.htm">Chapter 2: HTTP Servlet Basics</a></td><td align="right" valign="top" width="172"><a href="ch02_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">2.6. JavaServer Pages</h2>

<p>Just as this book was going to press, Sun announced a new way to use
servlets, called <a name="INDEX-452"></a><a name="INDEX-453"></a>JavaServer Pages
(commonly, but not officially, referred to as
<a name="INDEX-454"></a>
JSP). JSP's functionality and syntax bear a remarkable
resemblance to Active Server Pages (ASP).
</p>

<p>JSP operates in many ways like server-side includes. The main
difference is that instead of embedding a
<tt class="literal">&lt;SERVLET&gt;</tt> tag in an HTML page, JSP embeds
actual snippets of servlet code. It's an attempt by Sun to
separate content from presentation, more convenient than server-side
includes for pages that have chunks of dynamic content intermingled
with static content in several different places.
</p>

<p>Just like server-side includes and servlet chaining, JSP
doesn't require any changes to the Servlet API. But it does
require special support in your web server. This support is not
included in the Java Web Server 1.1.1 (the unofficially considered
reference servlet engine against which this book is written), but
it's expected to be introduced in the next version of the Java
Web Server, probably 1.2, and in other servlet engines as they keep
pace.
</p>

<p>Note that the following tutorial is based on the JavaServer Pages
draft specification, version 0.91. You may notice small changes in
the final specification.
</p>

<a name="ch02-14-fm2xml"></a>
<h3 class="sect2">2.6.1. Using JavaServer Pages</h3>

<p>At its most basic, JSP allows for the direct insertion of servlet
code into an otherwise static HTML file. Each block of servlet code
(called a <em class="emphasis">scriptlet</em>) is surrounded by a leading
<tt class="literal">&lt;%</tt> tag and a closing <tt class="literal">%&gt;</tt>
tag.<a href="#FOOTNOTE-8">[8]</a> For convenience, a scriptlet can use four
predefined variables:
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-8"></a>
<p>[8]An earlier technology, called Page Compilation,
uses <tt class="literal">&lt;JAVA&gt;</tt> and
<tt class="literal">&lt;/JAVA&gt;</tt> tags and a different internal
syntax. Page Compilation has been deprecated in favor of JavaServer
Pages.</p> </blockquote>

<dl>
<dt>
<b><tt class="literal">request</tt></b>
</dt>
<dd>
<p>The servlet request, an <tt class="literal">HttpServletRequest</tt> object</p>
</dd>

<dt>
<b><tt class="literal">response</tt></b>
</dt>
<dd>
<p>The servlet response, an <tt class="literal">HttpServletResponse</tt> object</p>
</dd>

<dt>
<b><tt class="literal">out</tt></b>
</dt>
<dd>
<p>The output writer, a <tt class="literal">PrintWriter</tt> object</p>
</dd>

<dt>
<b><tt class="literal">in</tt></b>
</dt>
<dd>
<p>The input reader, a <tt class="literal">BufferedReader</tt> object</p>
</dd>

</dl>

<p>
<a href="#ch02-15799">Example 2-6</a> shows a simple JSP page that says
"Hello" in a manner similar to <a href="ch02_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_03.htm">Example 2-2</a>, though with a lot less code. It makes use of
the predefined <tt class="literal">request</tt> and <tt class="literal">out</tt>
variables.
</p>

<p>If you have a server that supports JavaServer Pages and want to test
this page, you should place the file under the server's
document root (probably
<em class="replaceable">server_root</em><em class="emphasis">/public_html</em>)
and save it with a special extension. By default, this
<a name="INDEX-455"></a><a name="INDEX-456"></a><a name="INDEX-457"></a> extension for JSP pages is
<em class="emphasis">.jsp</em>. Assuming you have saved the page as
<em class="emphasis">hello1.jsp</em>, you can then access it at the URL
<em class="emphasis">http://<em class="replaceable">server</em>:<em class="replaceable">port</em>/hello1.jsp</em>. A screen shot is shown in <a href="#ch02-36112">Figure 2-11</a>.
</p>

<a name="ch02-15799"></a>
<div class="example">
<h4 class="objtitle">Example 2-6. Saying Hello with JSP </h4>
<blockquote>
<pre class="programlisting">&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Hello&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt; 
&lt;%
if (request.getParameter("name") == null) {
   out.println("Hello World");
} 
else {
  out.println("Hello, " + request.getParameter("name"));
}
%&gt;
&lt;/H1&gt;
&lt;/BODY&gt;&lt;/HTML&gt;</pre>
</blockquote>
</div>

<a name="ch02-36112"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0211.gif" webstripperlinkwas="figs/jsp_0211.gif"></div>
<h4 class="objtitle">Figure 2-11. Saying Hello using JavaServer Pages</h4>


<a name="ch02-15-fm2xml"></a>
<h3 class="sect2">2.6.2. Behind the Scenes</h3>

<p>How does JSP work? Behind the scenes, the server automatically
creates, compiles, loads, and runs a special servlet to generate the
page's content, as shown in <a href="#ch02-39418">Figure 2-12</a>. You
can think of this special servlet as a background, workhorse servlet.
The static portions of the HTML page are generated by the workhorse
servlet using the equivalent of <tt class="literal">out.println()</tt>
calls, while the dynamic portions are included directly. For example,
the servlet shown in <a href="#ch02-33254">Example 2-7</a> might be the
background workhorse for <em class="filename">hello1.jsp</em>.<a href="#FOOTNOTE-9">[9]</a>
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-9"></a>
<p>[9] If you're interested in seeing the true servlet source
code for a JSP page, poke around the directories under your server
root. After all, the server needs to save the Java source code
somewhere before compiling it! If you find the true servlet source,
you're likely to see that it is far more complicated and
convoluted than what is shown here.</p> </blockquote>

<a name="ch02-39418"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0212.gif" webstripperlinkwas="figs/jsp_0212.gif"></div>
<h4 class="objtitle">Figure 2-12. Generating JavaServer Pages</h4>

<a name="ch02-33254"></a>
<div class="example">
<h4 class="objtitle">Example 2-7. The workhorse servlet for hello1.jsp </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class _hello1_xjsp extends HttpServlet { 

  public void service(HttpServletRequest request, HttpServletResponse response)
                                 throws ServletException, IOException {
    response.setContentType("text/html");
    PrintWriter out = response.getWriter();
    BufferedReader in = request.getReader();

    out.println("&lt;HTML&gt;");
    out.println("&lt;HEAD&gt;&lt;TITLE&gt;Hello&lt;/TITLE&gt;&lt;/HEAD&gt;");
    out.println("&lt;BODY&gt;");
    out.println("&lt;H1&gt;");
    if (request.getParameter("name") == null) { 
      out.println("Hello World");
    }
    else {
      out.println("Hello, " + request.getParameter("name"));
    }
    out.println("&lt;/H1&gt;");
    out.println("&lt;/BODY&gt;&lt;/HTML&gt;");
  }
}</pre>
</blockquote>
</div>

<p>The first time you access a JSP page, you may notice that it takes a
short time to respond. This is the time necessary for the server to
create and compile the background servlet. Subsequent requests should
be as fast as ever because the server can reuse the servlet. The one
exception is when the <em class="emphasis">.jsp</em> file changes, in
which case the server notices and recompiles a new background
servlet. If there's ever an error in compiling, you can expect
the server to somehow report the problem, usually in the page
returned to the client.
</p>


<a name="ch02-_955717217"></a>
<h3 class="sect2">2.6.3. Expressions and Directives</h3>

<p>In addition to scriptlets, JavaServer Pages allow the use of
<em class="emphasis">expressions</em> and
<em class="emphasis">directives</em><a name="INDEX-458"></a>
. A JSP expression begins with <tt class="literal">&lt;%=</tt> and ends
with <tt class="literal">%&gt;</tt>. Any Java expression between the two
tags is evaluated, the result is converted to a
<tt class="literal">String</tt>, and the text is included directly in the
page. This technique eliminates the clutter of an
<tt class="literal">out.println()</tt> call. For example, <tt class="literal">&lt;%=
foo %&gt;</tt> includes the value of the <tt class="literal">foo</tt>
variable.
</p>

<p>A JSP directive begins with <tt class="literal">&lt;%@</tt> and ends with
<tt class="literal">%&gt;</tt>. A directive allows a JSP page to control
certain aspects of its workhorse servlet. Directives can be used to
have the workhorse servlet set its content type, import a package,
extend a different superclass, implement an interface, and handle
either GET or POST requests. A directive can even specify the use of
a non-Java scripting language.
</p>

<p>In between the directive tags certain key variables can be assigned
values using the following syntax:
</p>

<blockquote>
<pre class="programlisting">&lt;%@ <em class="replaceable">varname</em> = "<em class="replaceable">value</em>" %&gt;</pre>
</blockquote>

<p>Here are the six variables you can set:</p>

<dl>
<dt>
<b><tt class="literal">content_type</tt></b>
</dt>
<dd>
<p>Specifies the content type of the generated page. For example:</p>

<blockquote>
<pre class="programlisting">&lt;%@ content_type = "text/plain" %&gt;</pre>
</blockquote>

<p>The default content type is
"<tt class="literal">text/html</tt>".
</p>
</dd>


<dt>
<b><tt class="literal">import</tt></b>
</dt>
<dd>
<p>Specifies a list of classes the servlet should import. Multiple
classes can be given in a comma-separated list or given through
multiple <tt class="literal">import</tt> directives. For example:
</p>

<blockquote>
<pre class="programlisting">&lt;%@ import = "java.io.*,java.util.Hashtable" %&gt;</pre>
</blockquote>
</dd>


<dt>
<b><tt class="literal">extends</tt></b>
</dt>
<dd>
<p>Specifies the superclass the servlet should extend. For example:</p>


<blockquote>
<pre class="programlisting">&lt;%@ extends = "CustomHttpServletSuperclass" %&gt;</pre>
</blockquote>

<p>The default superclass is <tt class="literal">HttpServlet</tt>.</p>
</dd>



<dt>
<b><tt class="literal">implements</tt></b>
</dt>
<dd>
<p>Specifies a list of interfaces the servlet should implement. Multiple
interfaces can be given in a comma-separated list or given through
multiple import directives. For example:
</p>

<blockquote>
<pre class="programlisting">&lt;%@ implements = "Serializable" %&gt;</pre>
</blockquote>

<p>The default behavior is to not implement anything.</p>
</dd>


<dt>
<b><tt class="literal">method</tt></b>
</dt>
<dd>
<p>Specifies the servlet method that should contain the generated code
and handle client requests. The default is
"<tt class="literal">service</tt>", which handles all requests.
For example:
</p>


<blockquote>
<pre class="programlisting">&lt;%@ method = "doPost" %&gt;</pre>
</blockquote>
</dd>


<dt>
<b><tt class="literal">language</tt></b>
</dt>
<dd>
<p>Specifies the scripting language used by the back-end. The default
language is "<tt class="literal">java</tt>". Some servers can
choose to allow other languages. For example:
</p>

<blockquote>
<pre class="programlisting">&lt;%@ language = "java" %&gt;</pre>
</blockquote>
</dd>

</dl>


<p>
<a href="#ch02-41922">Example 2-8</a> shows a revised version of the Hello
page that uses JSP expressions and directives. It uses a method
directive to indicate it should handle POST requests, and it uses an
expression to simplify its display of the <tt class="literal">name</tt>
parameter.
</p>

<a name="ch02-41922"></a>
<div class="example">
<h4 class="objtitle">Example 2-8. Saying Hello using JSP expressions and directives </h4>
<blockquote>
<pre class="programlisting">&lt;%@ method = "doPost" %&gt;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Hello&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt; 
&lt;% if (request.getParameter("name") == null) { %&gt;
Hello World
&lt;% } else { %&gt;
Hello, &lt;%= request.getParameter("name") %&gt;
&lt;% } %&gt;
&lt;/H1&gt;
&lt;/BODY&gt;&lt;/HTML&gt;</pre>
</blockquote>
</div>

<p>The background workhorse servlet for this JSP page should look nearly
identical to <a href="#ch02-33254">Example 2-7</a>, with the only difference
that this servlet implements <tt class="literal">doPost()</tt> instead of
<tt class="literal">service()</tt>.
</p>


<a name="ch02-16-fm2xml"></a>
<h3 class="sect2">2.6.4. Declarations</h3>

<p>Sometimes it's necessary for a JSP page to define methods and
nonlocal variables in its workhorse servlet. For this there is a
construct called a JSP <em class="emphasis">declaration</em>.
</p>

<p>A declaration begins with a <tt class="literal">&lt;SCRIPT
RUNAT="server"&gt;</tt> tag and ends with a
<tt class="literal">&lt;/SCRIPT&gt;</tt> tag. In between the tags, you can
include any servlet code that should be placed outside the
servlet's service method. <a href="#ch02-21354">Example 2-9</a>
demonstrates this with a JSP page that uses a declaration to define
the <tt class="literal">getName()</tt> method.
</p>

<a name="ch02-21354"></a>
<div class="example">
<h4 class="objtitle">Example 2-9. Saying Hello using a JSP declaration </h4>
<blockquote>
<pre class="programlisting">&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Hello&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;
Hello, &lt;%= getName(request) %&gt;
&lt;/H1&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;

&lt;SCRIPT RUNAT="server"&gt;
private static final String DEFAULT_NAME = "World";

private String getName(HttpServletRequest req) {
  String name = req.getParameter("name");
  if (name == null)
    return DEFAULT_NAME;
  else
    return name;
}
&lt;/SCRIPT&gt;</pre>
</blockquote>
</div>

<p>The background servlet created to generate this page might look like
the servlet shown in <a href="#ch02-14819">Example 2-10</a>.
</p>

<a name="ch02-14819"></a>
<div class="example">
<h4 class="objtitle">Example 2-10. The workhorse servlet for a JSP page with a declaration </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class _hello3_xjsp extends HttpServlet { 

  public void service(HttpServletRequest request, HttpServletResponse response)
                                 throws ServletException, IOException {
    response.setContentType("text/html");
    PrintWriter out = response.getWriter();
    BufferedReader in = request.getReader();

    out.println("&lt;HTML&gt;");
    out.println("&lt;HEAD&gt;&lt;TITLE&gt;Hello&lt;/TITLE&gt;&lt;/HEAD&gt;");
    out.println("&lt;BODY&gt;");
    out.println("&lt;H1&gt;");
    out.println("Hello, " + getName(request));
    out.println("&lt;/H1&gt;");
    out.println("&lt;/BODY&gt;&lt;/HTML&gt;");
  }

  private static final String DEFAULT_NAME = "World";

  private String getName(HttpServletRequest req) {
    String name = req.getParameter("name");
    if (name == null)
      return DEFAULT_NAME;
    else
      return name;
  }
}</pre>
</blockquote>
</div>


<a name="ch02-17-fm2xml"></a>
<h3 class="sect2">2.6.5. JavaServer Pages and JavaBeans</h3>

<p>One of the most interesting and powerful ways to use JavaServer Pages
is in cooperation with <a name="INDEX-459"></a><a name="INDEX-460"></a> JavaBeans components. JavaBeans are
reusable Java classes whose methods and variables follow specific
naming conventions to give them added abilities. They can be embedded
directly in a JSP page using <tt class="literal">&lt;BEAN&gt;</tt> tags.
<a name="INDEX-461"></a><a name="INDEX-462"></a> A JavaBean
component can perform a well-defined task (execute database queries,
connect to a mail server, maintain information about the client,
etc.) and make its resulting information available to the JSP page
through simple accessor methods.<a href="#FOOTNOTE-10">[10]</a>
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-10"></a>
<p>[10] For more
information on JavaBeans, <a name="INDEX-463"></a><a name="INDEX-464"></a>see <a href="../../../../../../../java.sun.com/bean/">http://java.sun.com/bean/</a>and the book
<em class="citetitle">Developing Java
Beans</em><a name="INDEX-465"></a><a name="INDEX-466"></a> by Robert Englander
(O'Reilly).</p> </blockquote>

<p>The difference between a JavaBeans component embedded in a JSP page
and a normal third-party class used by the generated servlet is that
the web server can give JavaBeans special treatment. For example, a
server can automatically set a bean's properties (instance
variables) using the parameter values in the client's request.
In other words, if the request includes a <tt class="literal">name</tt>
parameter and the server detects through introspection (a technique
in which the methods and variables of a Java class can be
programatically determined at runtime) that the bean has a
<tt class="literal">name</tt> property and a <tt class="literal">setName(String
name)</tt><a name="INDEX-467"></a><a name="INDEX-468"></a>
method, the server can automatically call
<tt class="literal">setName()</tt> with the value of the
<tt class="literal">name</tt> parameter. There's no need for
<tt class="literal">getParameter()</tt><a name="INDEX-469"></a><a name="INDEX-470"></a><a name="INDEX-471"></a>
.
</p>

<p>A bean can also have its scope managed automatically by the server. A
bean can be assigned to a specific request (where it is used once and
destroyed or recycled) or to a client session (where it's
automatically made available every time the same client reconnects).
Sessions and session tracking are covered in depth in <a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch07_01.htm">Chapter 7, "Session Tracking"</a>.
</p>

<p>A bean can even be implemented as a servlet! If the server detects
that a bean implements the <tt class="literal">javax.servlet.Servlet</tt>
interface (either directly or by extending
<tt class="literal">GenericServlet</tt> or <tt class="literal">HttpServlet</tt>),
it will call the bean's <tt class="literal">service()</tt> method
once for each request and the bean's <tt class="literal">init()</tt>
method when the bean is first created. The utility of this
functionality is debatable, but it can be used by beans that need to
prepare somehow before handling requests.
</p>

<p>Beans are embedded in a JSP page using the
<tt class="literal">&lt;BEAN&gt;</tt><a name="INDEX-472"></a><a name="INDEX-473"></a> tag. It has the following syntax:
</p>

<blockquote>
<pre class="programlisting">&lt;BEAN NAME="<em class="replaceable">lookup name</em>" VARNAME="<em class="replaceable">alternate variable name</em>" 
 TYPE="<em class="replaceable">class or interface name</em>" INTROSPECT="{yes|no}" BEANNAME="<em class="replaceable">file name</em>"
 CREATE="{yes|no}" SCOPE="{request|session}"&gt;
&lt;PARAM <em class="replaceable">property1</em>=<em class="replaceable">value1 property2</em>=<em class="replaceable">value2</em>&gt;
&lt;/BEAN&gt;</pre>
</blockquote>

<p>You can set the following attributes of the <tt class="literal">&lt;BEAN&gt;
</tt>tag:
</p>

<dl>
<dt>
<b><tt class="literal">NAME</tt>
<a name="INDEX-474"></a>
</b>
</dt>
<dd>
<p>Specifies the name of the bean. This is the key under which the bean
is saved if its scope extends across requests. If a bean instance
saved under this name already exists in the current scope, that
instance is used with this page. For example:
</p>

<blockquote>
<pre class="programlisting">NAME="userPreferences"</pre>
</blockquote>
</dd>


<dt>
<b><tt class="literal">VARNAME</tt>
<a name="INDEX-475"></a>
</b>
</dt>
<dd>
<p>Specifies the variable name of the bean. This is the name used by the
page to refer to the bean and invoke its methods. For example:
</p>

<blockquote>
<pre class="programlisting">VARNAME="prefs"</pre>
</blockquote>

<p>If not given, the variable name of the bean is set to the value of
its name attribute.
</p>
</dd>


<dt>
<b><tt class="literal">TYPE</tt>
<a name="INDEX-476"></a>
</b>
</dt>
<dd>
<p>Specifies the name of the bean's class or interface type. For
example:
</p>

<blockquote>
<pre class="programlisting">TYPE="UserPreferencesBean"</pre>
</blockquote>

<p>The type defaults to <tt class="literal">java.lang.Object</tt>.</p>
</dd>


<dt>
<b><tt class="literal">INTROSPECT</tt>
<a name="INDEX-477"></a>
</b>
</dt>
<dd>
<p>Specifies if the server should set the bean's properties using
the parameter values in the client's request. Its value must be
"<tt class="literal">yes</tt>" or
"<tt class="literal">no</tt>". The default is
"<tt class="literal">yes</tt>".
</p>
</dd>


<dt>
<b><tt class="literal">BEANNAME</tt>
<a name="INDEX-478"></a>
</b>
</dt>
<dd>
<p>Specifies the serialized file or class file that contains the bean,
used when first creating the bean. This is an optional attribute. For
example:
</p>

<blockquote>
<pre class="programlisting">BEANNAME="hellobean.ser"</pre>
</blockquote>
</dd>


<dt>
<b><tt class="literal">CREATE</tt>
<a name="INDEX-479"></a>
</b>
</dt>
<dd>
<p>Specifies if the bean should be created if it doesn't already
exist. Its value must be "<tt class="literal">yes</tt>" or
"<tt class="literal">no</tt>". The default is
"<tt class="literal">yes</tt>". If <tt class="literal">create</tt> is
set to "<tt class="literal">no</tt>" and a preexisting instance
isn't found, an error is returned to the client.
</p>
</dd>


<dt>
<b><tt class="literal">SCOPE</tt>
<a name="INDEX-480"></a>
</b>
</dt>
<dd>
<p>Specifies if the bean should be assigned to a specific request (where
it is used once and destroyed or recycled) or to a client session
(where it's automatically made available every time the same
client reconnects, within a certain time frame). Its value must be
"<tt class="literal">request</tt>" or
"<tt class="literal">session</tt>". The default is
"<tt class="literal">request</tt>".
</p>
</dd>

</dl>

<p>
<a name="INDEX-481"></a><a name="INDEX-482"></a><a name="INDEX-483"></a>
Parameters can be passed to a bean as a list using a
<tt class="literal">&lt;PARAM&gt;</tt> tags placed between the opening
<tt class="literal">&lt;BEAN&gt;</tt> tag and the closing
<tt class="literal">&lt;/BEAN&gt;</tt> tag. The parameter values are used to
set the bean's properties using introspection.
</p>

<p>
<a href="#ch02-39332">Example 2-11</a> demonstrates the use of a JavaBeans
component with a JSP page; it says Hello with the help of a
<tt class="literal">HelloBean</tt>.
</p>

<a name="ch02-39332"></a>
<div class="example">
<h4 class="objtitle">Example 2-11. Saying Hello using a JavaBean </h4>
<blockquote>
<pre class="programlisting">&lt;%@ import = "HelloBean" %&gt;

&lt;BEAN NAME="hello" TYPE="HelloBean"
 INTROSPECT="yes" CREATE="yes" SCOPE="request"&gt;
&lt;/BEAN&gt;

&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Hello&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt; 
Hello, &lt;%= hello.getName() %&gt;
&lt;/H1&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</pre>
</blockquote>
</div>

<p>As you can see, using a JavaBeans component with JavaServer Pages
greatly reduces the amount of code necessary in the page. This allows
a clean separation of content (the functionality the bean provides)
from presentation (the HTML structure of the page). By using a
well-defined API to interact with the bean, even nonprogrammers can
write JSP pages.
</p>

<p>The code for <tt class="literal">HelloBean</tt> is shown in <a href="#ch02-10405">Example 2-12</a>. Its class file should be placed in the
server's classpath (something like
<em class="replaceable">server_root</em><em class="filename">/classes</em>,
although for the Java Web Server you need to first create this
directory).
</p>

<a name="ch02-10405"></a>
<div class="example">
<h4 class="objtitle">Example 2-12. The HelloBean class </h4>
<blockquote>
<pre class="programlisting">public class HelloBean {

  private String name = "World";

  public void setName(String name) {
    this.name = name;
  }

  public String getName() {
    return name;
  }
}</pre>
</blockquote>
</div>

<p>This is about as simple a bean as you'll ever see. It has a
single <tt class="literal">name</tt> property that is set using
<tt class="literal">setName()</tt> and retrieved using
<tt class="literal">getName()</tt>. The default value of
<tt class="literal">name</tt> is "<tt class="literal">World</tt>",
but when a request comes in that includes a <tt class="literal">NAME</tt>
parameter, the property is set automatically by the server with a
call to <tt class="literal">setName()</tt>. To test the mechanism, try
browsing to <em class="emphasis">http://<em class="replaceable">server</em>:<em class="replaceable">port</em>/hellobean.jsp</em>. You should see something
similar to the screen shot <a name="INDEX-484"></a><a name="INDEX-485"></a> in <a href="#ch02-40271">Figure 2-13</a>.
</p>

<a name="ch02-40271"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0213.gif" webstripperlinkwas="figs/jsp_0213.gif"></div>
<h4 class="objtitle">Figure 2-13. Saying Hello using JavaServer pages in cooperation with a JavaBeans component</h4>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.5. Servlet Chaining and Filters</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.7. Moving On</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
