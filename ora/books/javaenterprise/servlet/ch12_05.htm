<html>
<head>
<title>Dynamic Language Negotiation (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Dynamic Language Negotiation">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch12_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch12_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch12_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch12_01.htm">Chapter 12: Internationalization</a></td><td align="right" valign="top" width="172"><a href="ch12_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch12_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">12.5. Dynamic Language Negotiation</h2>

<p>Now let's push the envelope yet a little farther (perhaps off
the edge of the table) with a servlet that tailors its output to
match the language preferences of the client. This allows the same
URL to serve its content to readers across the globe in their native
tongues.
</p>

<a name="ch12-9-fm2xml"></a>
<h3 class="sect2">12.5.1. Language Preferences</h3>

<p>There are two ways a servlet can know the language preferences of the
client. First, the browser can send the information as part of its
request. Newer browsers, such as
<a name="INDEX-2178"></a><a name="INDEX-2179"></a>Netscape Navigator 4 and
<a name="INDEX-2180"></a><a name="INDEX-2181"></a>
Microsoft Internet Explorer 4, allow users to specify their preferred
languages. With Netscape Navigator 4, this is done under <b class="emphasis-bold">Edit</b> | <b class="emphasis-bold">Preferences
</b>| <b class="emphasis-bold">Navigator</b> | <b class="emphasis-bold">Languages</b>. With Microsoft Internet Explorer 4,
it's done under <b class="emphasis-bold">View</b> |
<b class="emphasis-bold">Internet Options</b> | <b class="emphasis-bold">General</b> | <b class="emphasis-bold">Languages</b>.
</p>

<p>A browser sends the user's language preferences to the server
using the
<tt class="literal">Accept-Language</tt><a name="INDEX-2182"></a><a name="INDEX-2183"></a>
HTTP header. The value of this header specifies the language or
languages that the client prefers to receive. Note that the HTTP
specification allows this preference to be ignored. An
<tt class="literal">Accept-Language</tt> header value looks something like
the following:
</p>

<blockquote>
<pre class="programlisting">en, es, de, ja, zh-TW</pre>
</blockquote>

<p>This indicates the client user
<a name="INDEX-2184"></a><a name="INDEX-2185"></a>reads English, Spanish, German, Japanese,
and Chinese appropriate for Taiwan. By convention, languages are
listed in order of preference. Each language may also include a
<em class="emphasis">q-value</em> that indicates, on a scale from 0.0 to
1.0, an estimate of the user's preference for that language.
The default q-value is 1.0 (maximum preference). An
<tt class="literal">Accept-Language</tt> header value including q-values
looks like this:
</p>

<blockquote>
<pre class="programlisting">en, es;q=0.8, de;q=0.7, ja;q=0.3, zh-TW;q=0.1</pre>
</blockquote>

<p>This header value means essentially the same thing as the previous
example.
</p>

<p>The second way a servlet can know the language preferences of the
client is by asking. For example, a servlet might generate a form
that asks which language the client prefers. Thereafter, it can
remember and use the answer, perhaps using the session tracking
techniques discussed in <a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch07_01.htm">Chapter 7, "Session Tracking"</a>.
</p>


<a name="ch12-10-fm2xml"></a>
<h3 class="sect2">12.5.2. Charset Preferences</h3>

<p>In addition to an <tt class="literal">Accept-Language</tt> HTTP header, a
browser may send an
<tt class="literal">Accept-Charset</tt><a name="INDEX-2186"></a><a name="INDEX-2187"></a>
header that tells the server which
<a name="INDEX-2188"></a>
charsets it understands. An <tt class="literal">Accept-Charset</tt> header
value may look something like this:
</p>

<blockquote>
<pre class="programlisting">iso-8859-1, utf-8</pre>
</blockquote>

<p>This indicates the browser understands ISO-8859-1 and UTF-8. If the
<tt class="literal">Accept-Charset</tt> isn't sent or if its value
contains an asterisk (<tt class="literal">*</tt>), it can be assumed the
client accepts all charsets. Note that the current usefulness of this
header is limited: few browsers yet send the header, and those
browsers that do tend to send a value that contains an asterisk.
</p>


<a name="ch12-11-fm2xml"></a>
<h3 class="sect2">12.5.3. Resource Bundles</h3>

<p>Using <tt class="literal">Accept-Language</tt> (and, in some cases,
<tt class="literal">Accept-Charset</tt>), a servlet can determine the
language in which it will speak to each client. But how can a servlet
efficiently manage several localized versions of a page? One answer
is to use <a name="INDEX-2189"></a><a name="INDEX-2190"></a>Java's built-in support for
resource bundles.
</p>

<p>A resource bundle holds a set of localized resources appropriate for
a given locale. For example, a resource bundle for the French
<a name="INDEX-2191"></a><a name="INDEX-2192"></a>
locale might contain a French translation of all the phrases output
by a servlet. Then, when the servlet determines it wants to speak
French, it can load that resource bundle and use the stored phrases.
All resource bundles extend
<tt class="literal">java.util.ResourceBundle</tt>. A servlet can load a
resource bundle using the static method
<tt class="literal">ResourceBundle.getBundle()</tt><a name="INDEX-2193"></a><a name="INDEX-2194"></a>
:
</p>

<blockquote>
<pre class="programlisting">public static final 
  ResourceBundle ResourceBundle.getBundle(String bundleName, Locale locale)</pre>
</blockquote>

<p>A servlet can pull phrases from a resource bundle using the
<tt class="literal">getString()</tt> method of <tt class="literal">ResourceBundle
</tt>:
</p>

<blockquote>
<pre class="programlisting">public final String ResourceBundle.getString(String key)</pre>
</blockquote>

<p>A resource bundle can be created in several ways. For servlets, the
most useful technique is to put a special properties file in the
server's classpath that contains the translated phrases. The
file should be specially named according to the pattern
<em class="replaceable">bundlename</em><em class="filename">_</em><em class="replaceable">language</em><em class="filename">.properties</em>
or
<em class="replaceable">bundlename</em><em class="filename">_</em><em class="replaceable">language</em><em class="filename">_</em><em class="emphasis">country</em><em class="filename">.properties</em>.
For example, use <em class="filename">Messages_fr.properties</em> for a
French bundle or <em class="filename">Messages_zh_TW.properties</em> for a
Chinese/Taiwan bundle. The file should contain US-ASCII characters in
the following format:
</p>

<blockquote>
<pre class="programlisting">name1=value1
name2=value2
...</pre>
</blockquote>

<p>Each line may also contain whitespace and Unicode escapes. The
information in this file can be loaded automatically by the
<tt class="literal">getBundle()</tt> method.
</p>


<a name="ch12-12-fm2xml"></a>
<h3 class="sect2">12.5.4. Writing To Each His Own</h3>

<p>
<a href="#ch12-29079">Example 12-8</a> demonstrates the use of
<tt class="literal">Accept-Language</tt>,
<tt class="literal">Accept-Charset</tt>, and resource bundles with a
servlet <a name="INDEX-2195"></a><a name="INDEX-2196"></a>that <a name="INDEX-2197"></a>says "Hello World" to each
client in that client's own preferred language. Here's a
sample resource bundle properties file for English, which you would
store in <em class="filename">HelloBabel_en.properties </em>somewhere in
the server's classpath (such as
<em class="filename">server_root/classes</em>):
</p>

<blockquote>
<pre class="programlisting">greeting=Hello world</pre>
</blockquote>

<p>And here's a resource bundle for Japanese, to be stored in
<em class="filename">HelloBabel_ja.properties</em>:
</p>

<blockquote>
<pre class="programlisting">greeting=\u4eca\u65e5\u306f\u4e16\u754c</pre>
</blockquote>

<p>This <tt class="literal">HelloBabel</tt> servlet uses the
<tt class="literal">com.oreilly.servlet.LocaleNegotiator</tt> class that
contains the black box logic to determine which
<tt class="literal">Locale</tt>, charset, and
<tt class="literal">ResourceBundle</tt> should be used. Its code is shown
in the next section.
</p>

<a name="ch12-29079"></a>
<div class="example">
<h4 class="objtitle">Example 12-8. A servlet version of the Tower of Babel </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import java.text.*;
import javax.servlet.*;
import javax.servlet.http.*;

import com.oreilly.servlet.LocaleNegotiator;
import com.oreilly.servlet.ServletUtils;

public class HelloBabel extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    try {
      String bundleName = "HelloBabel";
      String acceptLanguage = req.getHeader("Accept-Language");
      String acceptCharset = req.getHeader("Accept-Charset");

      LocaleNegotiator negotiator =
        new LocaleNegotiator(bundleName, acceptLanguage, acceptCharset);

      Locale locale = negotiator.getLocale();
      String charset = negotiator.getCharset();
      ResourceBundle bundle = negotiator.getBundle();  // may be null

      res.setContentType("text/plain; charset=" + charset);
      res.setHeader("Content-Language", locale.getLanguage());
      res.setHeader("Vary", "Accept-Language");

      PrintWriter out = res.getWriter();

      DateFormat fmt = DateFormat.getDateTimeInstance(DateFormat.LONG,
                                                      DateFormat.LONG,
                                                      locale);
      if (bundle != null) {
        out.println("In " + locale.getDisplayLanguage() + ":");
        out.println(bundle.getString("greeting"));
        out.println(fmt.format(new Date()));
      }
      else {
        out.println("Bundle could not be found.");
      }
    }
    catch (Exception e) {
      log(ServletUtils.getStackTraceAsString(e));
    }
  }
}</pre>
</blockquote>
</div>

<p>This servlet begins by setting the name of the bundle it wants to
use, and then it retrieves its <tt class="literal">Accept-Language</tt> and
<tt class="literal">Accept-Charset</tt> headers. It creates a
<tt class="literal">LocaleNegotiator</tt>, passing in this information, and
quickly asks the negotiator which <tt class="literal">Locale</tt>, charset,
and <tt class="literal">ResourceBundle</tt> it is to use. Note that a
servlet may ignore the returned charset in favor of the UTF-8
encoding. Just remember, UTF-8 is not as widely supported as the
charsets normally returned by <tt class="literal">LocaleNegotiator</tt>.
Next, the servlet sets its headers: its
<tt class="literal">Content-Type</tt> header specifies the charset,
<tt class="literal">Content-Language</tt> specifies the locale's
language, and the <tt class="literal">Vary</tt> header indicates to the
client (if by some chance it should care) that this servlet can vary
its output based on the client's
<tt class="literal">Accept-Language</tt> header.
</p>

<p>Once the headers are set, the servlet generates its output. It first
gets a <tt class="literal">PrintWriter</tt> to match the charset. Then it
says--in the default language, usually English--which
language the greeting is to be in. Next, it retrieves and outputs the
appropriate greeting from the resource bundle. And lastly, it prints
the date and time appropriate to the client's locale. If the
resource bundle is <tt class="literal">null</tt>, as happens when there are
no resource bundles to match the client's preferences, the
servlet simply reports that no bundle could be <a name="INDEX-2198"></a> found.<a name="INDEX-2199"></a><a name="INDEX-2200"></a>
</p>


<a name="ch12-13-fm2xml"></a>
<h3 class="sect2">12.5.5. The LocaleNegotiator Class</h3>

<p>The code for <tt class="literal">LocaleNegotiator</tt><a name="INDEX-2201"></a><a name="INDEX-2202"></a>
is shown in <a href="#ch12-27789">Example 12-9</a>. Its helper class,
<tt class="literal">LocaleToCharsetMap</tt><a name="INDEX-2203"></a><a name="INDEX-2204"></a>
, is shown in <a href="#ch12-17799">Example 12-10</a>. If you are happy to treat
the locale negotiator as a black box, feel free to skip this section.
</p>

<p>
<tt class="literal">LocaleNegotiator</tt> works by scanning through the
client's language preferences looking for any language for
which there is a corresponding resource bundle. Once it finds a
correspondence, it uses <tt class="literal">LocaleToCharsetMap</tt> to
determine the charset. If there's any problem, it tries to fall
back to U.S. English. The logic ignores the client's charset
preferences.
</p>

<p>The most complicated aspect of the
<tt class="literal">LocaleNegotiator</tt> code is having to deal with the
unfortunate behavior of
<tt class="literal">ResourceBundle.getBundle()</tt><a name="INDEX-2205"></a><a name="INDEX-2206"></a>
. The <tt class="literal">getBundle()</tt> method attempts to act
intelligently. If it can't find a resource bundle that is an
exact match to the specified locale, it tries to find a close match.
The problem, for our purposes, is that <tt class="literal">getBundle()</tt>
considers the resource bundle for the default locale to be a close
match. Thus, as we loop through client languages, it's
difficult to determine when we have an exact resource bundle match
and when we don't. The workaround is to first fetch the
ultimate fallback resource bundle, then use that reference later to
determine when there is an exact match. This logic is encapsulated in
the <tt class="literal">getBundleNoFallback()</tt> method.
</p>

<a name="ch12-27789"></a>
<div class="example">
<h4 class="objtitle">Example 12-9. The LocaleNegotiator class </h4>
<blockquote>
<pre class="programlisting">package com.oreilly.servlet;

import java.io.*;
import java.util.*;

import com.oreilly.servlet.LocaleToCharsetMap;

public class LocaleNegotiator {

  private ResourceBundle chosenBundle; 
  private Locale chosenLocale; 
  private String chosenCharset; 

  public LocaleNegotiator(String bundleName,
                          String languages,
                          String charsets) {

    // Specify default values:
    //   English language, ISO-8859-1 (Latin-1) charset, English bundle
    Locale defaultLocale = new Locale("en", "US");
    String defaultCharset = "ISO-8859-1";
    ResourceBundle defaultBundle = null;
    try {
      defaultBundle = ResourceBundle.getBundle(bundleName, defaultLocale);
    }
    catch (MissingResourceException e) {
      // No default bundle was found. Flying without a net.
    }

    // If the client didn't specify acceptable languages, we can keep
    // the defaults.
    if (languages == null) {
      chosenLocale = defaultLocale;
      chosenCharset = defaultCharset;
      chosenBundle = defaultBundle;
      return;  // quick exit
    }

    // Use a tokenizer to separate acceptable languages
    StringTokenizer tokenizer = new StringTokenizer(languages, ",");

    while (tokenizer.hasMoreTokens()) {
      // Get the next acceptable language.
      // (The language can look something like "en; qvalue=0.91")
      String lang = tokenizer.nextToken();

      // Get the locale for that language
      Locale loc = getLocaleForLanguage(lang);

      // Get the bundle for this locale. Don't let the search fallback 
      // to match other languages!
      ResourceBundle bundle = getBundleNoFallback(bundleName, loc);

      // The returned bundle is null if there's no match. In that case
      // we can't use this language since the servlet can't speak it.
      if (bundle == null) continue;  // on to the next language

      // Find a charset we can use to display that locale's language.
      String charset = getCharsetForLocale(loc, charsets);

      // The returned charset is null if there's no match. In that case
      // we can't use this language since the servlet can't encode it.
      if (charset == null) continue;  // on to the next language

      // If we get here, there are no problems with this language.
      chosenLocale = loc;
      chosenBundle = bundle;
      chosenCharset = charset;
      return;  // we're done
    }

    // No matches, so we let the defaults stand
    chosenLocale = defaultLocale;
    chosenCharset = defaultCharset;
    chosenBundle = defaultBundle;
  }

  public ResourceBundle getBundle() {
    return chosenBundle;
  }

  public Locale getLocale() {
    return chosenLocale;
  }

  public String getCharset() {
    return chosenCharset;
  }

  private Locale getLocaleForLanguage(String lang) {
    Locale loc;
    int semi, dash;

    // Cut off any q-value that might come after a semi-colon
    if ((semi = lang.indexOf(';')) != -1) {
      lang = lang.substring(0, semi);
    }

    // Trim any whitespace
    lang = lang.trim();

    // Create a Locale from the language. A dash may separate the
    // language from the country.
    if ((dash = lang.indexOf('-')) == -1) {
      loc = new Locale(lang, "");  // No dash, no country
    }
    else {
      loc = new Locale(lang.substring(0, dash), lang.substring(dash+1));
    }

    return loc;
  }

  private ResourceBundle getBundleNoFallback(String bundleName, Locale loc) {

    // First get the fallback bundle -- the bundle that will be selected 
    // if getBundle() can't find a direct match. This bundle can be
    // compared to the bundles returned by later calls to getBundle() in
    // order to detect when getBundle() finds a direct match.
    ResourceBundle fallback = null;
    try {
      fallback =
        ResourceBundle.getBundle(bundleName, new Locale("bogus", ""));
    }
    catch (MissingResourceException e) {
      // No fallback bundle was found.
    }

    try {
      // Get the bundle for the specified locale
      ResourceBundle bundle = ResourceBundle.getBundle(bundleName, loc);

      // Is the bundle different than our fallback bundle?
      if (bundle != fallback) {
        // We have a real match!
        return bundle;
      }
      // So the bundle is the same as our fallback bundle.
      // We can still have a match, but only if our locale's language 
      // matches the default locale's language.
      else if (bundle == fallback &amp;&amp;
            loc.getLanguage().equals(Locale.getDefault().getLanguage())) {
        // Another way to match
        return bundle;
      }
      else {
        // No match, keep looking
      }
    }
    catch (MissingResourceException e) {
      // No bundle available for this locale
    }

    return null;  // no match
  }

  protected String getCharsetForLocale(Locale loc, String charsets) {
    // Note: This method ignores the client-specified charsets
    return LocaleToCharsetMap.getCharset(loc);
  }
}</pre>
</blockquote>
</div>

<a name="ch12-17799"></a>
<div class="example">
<h4 class="objtitle">Example 12-10. The LocaleToCharsetMap class </h4>
<blockquote>
<pre class="programlisting">package com.oreilly.servlet;

import java.util.*;

public class LocaleToCharsetMap {

  private static Hashtable map;

  static {
    map = new Hashtable();

    map.put("ar", "ISO-8859-6");
    map.put("be", "ISO-8859-5");
    map.put("bg", "ISO-8859-5");
    map.put("ca", "ISO-8859-1");
    map.put("cs", "ISO-8859-2");
    map.put("da", "ISO-8859-1");
    map.put("de", "ISO-8859-1");
    map.put("el", "ISO-8859-7");
    map.put("en", "ISO-8859-1");
    map.put("es", "ISO-8859-1");
    map.put("et", "ISO-8859-1");
    map.put("fi", "ISO-8859-1");
    map.put("fr", "ISO-8859-1");
    map.put("he", "ISO-8859-8");
    map.put("hr", "ISO-8859-2");
    map.put("hu", "ISO-8859-2");
    map.put("is", "ISO-8859-1");
    map.put("it", "ISO-8859-1");
    map.put("iw", "ISO-8859-8");
    map.put("ja", "Shift_JIS");
    map.put("ko", "EUC-KR");     // Requires JDK 1.1.6
    map.put("lt", "ISO-8859-2");
    map.put("lv", "ISO-8859-2");
    map.put("mk", "ISO-8859-5");
    map.put("nl", "ISO-8859-1");
    map.put("no", "ISO-8859-1");
    map.put("pl", "ISO-8859-2");
    map.put("pt", "ISO-8859-1");
    map.put("ro", "ISO-8859-2");
    map.put("ru", "ISO-8859-5");
    map.put("sh", "ISO-8859-5");
    map.put("sk", "ISO-8859-2");
    map.put("sl", "ISO-8859-2");
    map.put("sq", "ISO-8859-2");
    map.put("sr", "ISO-8859-5");
    map.put("sv", "ISO-8859-1");
    map.put("tr", "ISO-8859-9");
    map.put("uk", "ISO-8859-5");
    map.put("zh", "GB2312");
    map.put("zh_TW", "Big5");
  }

  public static String getCharset(Locale loc) {
    String charset;

    // Try for a full name match (may include country)
    charset = (String) map.get(loc.toString());
    if (charset != null) return charset;

    // If a full name didn't match, try just the language
    charset = (String) map.get(loc.getLanguage());
    return charset;  // may be null
  }
} </pre>
</blockquote>
</div>
<a name="INDEX-2207"></a>
<a name="INDEX-2208"></a>

<a name="ch12-14-fm2xml"></a>
<h3 class="sect2">12.5.6. Future Directions</h3>

<p>In the future, you can expect to see improved
<a name="INDEX-2209"></a><a name="INDEX-2210"></a>internationalization support in
the Servlet API and in Java itself. Some likely areas for improvement
are these:
</p>

<ul>
<li>
<p>Support for additional charsets, especially those charsets that are
commonly used on the Web.
</p>
</li>
<li>
<p>New classes that help an application support multiple languages at
the same time. These classes will make it easier for servlets to
present information to the user using one language, while using
another language for administrative tasks such as logging.
</p>
</li>
<li>
<p>New classes that support
<a name="INDEX-2211"></a>
language negotiation using a list of multiple locales. These classes
will act in a similar fashion to <tt class="literal">LocaleNegotiator</tt>.
</p>
</li>
</ul>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch12_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch12_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch12_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch12_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">12.4. Multiple Languages</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">12.6. HTML Forms</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
