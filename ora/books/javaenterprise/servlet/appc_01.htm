<html>
<head>
<title>HTTP Status Codes (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="HTTP Status Codes">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appb_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/appb_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm">Java Servlet Programming</a></td><td align="right" valign="top" width="172"><a href="appd_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/appd_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Appendix C.  HTTP Status Codes</h1>


<p>
<a name="INDEX-2442"></a><a name="INDEX-2443"></a><a name="INDEX-2444"></a>
HTTP status codes are grouped as shown in <a href="#SERV-AP-C-TABLE-4">Table C-1</a>.
</p>

<a name="SERV-AP-C-TABLE-4"></a>
<h4 class="objtitle">Table C-1. HTTP Status Code Groupings </h4>
<table border="1">



<tr>
<th>
<p>Code Range</p>
</th>
<th>
<p>Response Meaning</p>
</th>
</tr>


<tr>
<td>
<p>100-199</p>
</td>
<td>
<p>Informational</p>
</td>
</tr>
<tr>
<td>
<p>200-299</p>
</td>
<td>
<p>Client request successful</p>
</td>
</tr>
<tr>
<td>
<p>300-399</p>
</td>
<td>
<p>Client request redirected, further action necessary</p>
</td>
</tr>
<tr>
<td>
<p>400-499</p>
</td>
<td>
<p>Client request incomplete</p>
</td>
</tr>
<tr>
<td>
<p>500-599</p>
</td>
<td>
<p>Server error</p>
</td>
</tr>

</table>

<p>
<a href="#SERV-AP-C-TABLE-6">Table C-2</a> lists the HTTP status code constants
defined by the <tt class="literal">HttpServletResponse</tt> interface and
used as parameters to its <tt class="literal">setStatus()</tt> and
<tt class="literal">sendError()</tt> methods. The version number in the
last column refers to the HTTP protocol version that first defined
the status code. The Servlet API 2.0 added constants for HTTP Version
1.1 status codes. Note that HTTP 1.1 status codes require an HTTP
1.1-compliant browser.
</p>

<p>For more information on HTTP, see <em class="emphasis">Web Client
Programming</em> by Clinton Wong (O'Reilly). The proposed
HTTP/1.1 specification is available in RFC 2068 at <a href="../../../../../../../www.ietf.org/rfc/rfc2068.txt">http://www.ietf.org/rfc/rfc2068.txt</a>.
</p>

<a name="SERV-AP-C-TABLE-6"></a>
<h4 class="objtitle">Table C-2. HTTP Status Code Constants </h4>
<table border="1">






<tr>
<th>
<p>Constant</p>
</th>
<th>
<p>Code</p>
</th>
<th>
<p>Default Message</p>
</th>
<th>
<p>Meaning</p>
</th>
<th>
<p>HTTP Version</p>
</th>
</tr>


<tr>
<td>
<p>
<tt class="literal">SC_CONTINUE</tt>
</p>
</td>
<td>
<p>100</p>
</td>
<td>
<p>Continue</p>
</td>
<td>
<p>The server has received the initial part of the request, and the
client can continue with the remainder of its request.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_SWITCHING_PROTOCOLS</tt>
</p>
</td>
<td>
<p>101</p>
</td>
<td>
<p>Switching Protocols</p>
</td>
<td>
<p>The server is willing to comply with the client's request to
switch protocols to the one specified in the request's
<tt class="literal">Upgrade</tt> header. This might include switching to a
newer HTTP version.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_OK</tt>
</p>
</td>
<td>
<p>200</p>
</td>
<td>
<p>OK</p>
</td>
<td>
<p>The client's request was successful and the server's
response contains the requested data. This is the default status
code.
</p>
</td>
<td>
<p>1.0</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_CREATED</tt>
</p>
</td>
<td>
<p>201</p>
</td>
<td>
<p>Created</p>
</td>
<td>
<p>A resource has been created on the server, presumably in response to
a client request. The response body should include the URL(s) where
the new resource can be found, with the most specific URL set in the
<tt class="literal">Location</tt> header. If the resource cannot be created
immediately, an <tt class="literal">SC_ACCEPTED </tt>status code should be
returned instead.
</p>
</td>
<td>
<p>1.0</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_ACCEPTED</tt>
</p>
</td>
<td>
<p>202</p>
</td>
<td>
<p>Accepted</p>
</td>
<td>
<p>The request has been accepted for processing but has not yet
completed. The server should describe the current status of the
request in the response body. The server is under no obligation to
act on or complete the request.
</p>
</td>
<td>
<p>1.0</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_NON_AUTHORITATIVE_INFORMATION</tt>
</p>
</td>
<td>
<p>203</p>
</td>
<td>
<p>Non-Authoritative Information</p>
</td>
<td>
<p>The HTTP response headers came from a local or third-party source,
rather than the original server. Normal servlets have no reason to
use this status code.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_NO_CONTENT</tt>
</p>
</td>
<td>
<p>204</p>
</td>
<td>
<p>No Content</p>
</td>
<td>
<p>The request succeeded but there was no new response body to return.
Browsers receiving this code should retain their current document
view. This is a useful code for a servlet to use when it accepts data
from a form but wants the browser view to stay at the form, as it
avoids the "Document contains no data" error message.
</p>
</td>
<td>
<p>1.0</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_RESET_CONTENT</tt>
</p>
</td>
<td>
<p>205</p>
</td>
<td>
<p>Reset Content</p>
</td>
<td>
<p>The request succeeded and the browser should reset (reload) the
current document view. This is a useful code for a servlet to use
when it accepts data from a form and wants the form redisplayed in a
fresh state.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_PARTIAL_CONTENT</tt>
</p>
</td>
<td>
<p>206</p>
</td>
<td>
<p>Partial Content</p>
</td>
<td>
<p>The server has completed a partial GET request and returned the
portion of the document specified in the client's
<tt class="literal">Range</tt> header.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_MULTIPLE_CHOICES</tt>
</p>
</td>
<td>
<p>300</p>
</td>
<td>
<p>Multiple Choices</p>
</td>
<td>
<p>The requested URL refers to more than one resource. For example, the
URL may refer to a document translated into many languages. The
response body should explain the client's options in a format
appropriate for the response content type. The server can suggest a
choice with the <tt class="literal">Location</tt> header.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_MOVED_PERMANENTLY</tt>
</p>
</td>
<td>
<p>301</p>
</td>
<td>
<p>Moved Permanently</p>
</td>
<td>
<p>The requested resource has permanently moved to a new location and
future references should use the new URL in their requests. The new
location is given by the <tt class="literal">Location</tt> header. Most
browsers automatically access the new location.
</p>
</td>
<td>
<p>1.0</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_MOVED_TEMPORARILY</tt>
</p>
</td>
<td>
<p>302</p>
</td>
<td>
<p>Moved Temporarily</p>
</td>
<td>
<p>The requested resource has temporarily moved to another location, but
future references should still use the original URL to access the
resource. The new location is given by the
<tt class="literal">Location</tt> header. Most browsers automatically
access the new location.
</p>
</td>
<td>
<p>1.0</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_SEE_OTHER</tt>
</p>
</td>
<td>
<p>303</p>
</td>
<td>
<p>See Other</p>
</td>
<td>
<p>The requested resource processed the request but the client should
get its response by performing a GET on the URL specified in the
<tt class="literal">Location</tt> header. This code is useful for a servlet
that wants to receive POST data then redirect the client to another
resource for the response.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_NOT_MODIFIED</tt>
</p>
</td>
<td>
<p>304</p>
</td>
<td>
<p>Not Modified</p>
</td>
<td>
<p>The requested document has not changed since the date specified in
the request's <tt class="literal">If-Modified-Since </tt>header.
Normal servlets should not need to use this status code. They
implement <tt class="literal">getLastModified()</tt> instead.
</p>
</td>
<td>
<p>1.0</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_USE_PROXY</tt>
</p>
</td>
<td>
<p>305</p>
</td>
<td>
<p>Use Proxy</p>
</td>
<td>
<p>The requested resource must be accessed via the proxy given in the
<tt class="literal">Location</tt> header.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_BAD_REQUEST</tt>
</p>
</td>
<td>
<p>400</p>
</td>
<td>
<p>Bad Request</p>
</td>
<td>
<p>The server could not understand the request, probably due to a syntax
error.
</p>
</td>
<td>
<p>1.0</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_UNAUTHORIZED</tt>
</p>
</td>
<td>
<p>401</p>
</td>
<td>
<p>Unauthorized</p>
</td>
<td>
<p>The request lacked proper authorization. Used in conjunction with the
<tt class="literal">WWW-Authenticate </tt>and
<tt class="literal">Authorization</tt> headers.
</p>
</td>
<td>
<p>1.0</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_PAYMENT_REQUIRED</tt>
</p>
</td>
<td>
<p>402</p>
</td>
<td>
<p>Payment Required</p>
</td>
<td>
<p>Reserved for future use. Proposals exist to use this code in
conjunction with a <tt class="literal">Charge-To </tt>header, but this has
not been standardized as of press time.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_FORBIDDEN</tt>
</p>
</td>
<td>
<p>403</p>
</td>
<td>
<p>Forbidden</p>
</td>
<td>
<p>The request was understood, but the server is not willing to fulfill
it. The server can explain the reason for its unwillingness in the
response body.
</p>
</td>
<td>
<p>1.0</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_NOT_FOUND</tt>
</p>
</td>
<td>
<p>404</p>
</td>
<td>
<p>Not Found</p>
</td>
<td>
<p>The requested resource was not found or is not available.</p>
</td>
<td>
<p>1.0</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_METHOD_NOT_ALLOWED</tt>
</p>
</td>
<td>
<p>405</p>
</td>
<td>
<p>Method Not Allowed</p>
</td>
<td>
<p>The method used by the client is not supported by this URL. The
methods that are supported must be listed in the response's
<tt class="literal">Allow</tt> header.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_NOT_ACCEPTABLE</tt>
</p>
</td>
<td>
<p>406</p>
</td>
<td>
<p>Not Acceptable</p>
</td>
<td>
<p>The requested resource exists, but not in a format acceptable to the
client (as indicated by the <tt class="literal">Accept</tt> header(s) in
the request).
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_PROXY_AUTHENTICATION_REQUIRED</tt>
</p>
</td>
<td>
<p>407</p>
</td>
<td>
<p>Proxy Authentication Required</p>
</td>
<td>
<p>The proxy server needs authorization before it can proceed. Used with
the <tt class="literal">Proxy-Authenticate </tt>header. Normal servlets
should not need to use this status code.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_REQUEST_TIMEOUT</tt>
</p>
</td>
<td>
<p>408</p>
</td>
<td>
<p>Request Timeout</p>
</td>
<td>
<p>The client did not completely finish its request within the time that
the server was willing to listen.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_CONFLICT</tt>
</p>
</td>
<td>
<p>409</p>
</td>
<td>
<p>Conflict</p>
</td>
<td>
<p>The request could not be completed because it conflicted with another
request or the server's configuration. This code is most likely
to occur with HTTP PUT requests, where the file being put is under
revision control and the new version conflicts with some previous
changes. The server can send a description of the conflict in the
response body.
</p>
</td>
<td>
<p>1.0</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_GONE</tt>
</p>
</td>
<td>
<p>410</p>
</td>
<td>
<p>Gone</p>
</td>
<td>
<p>The resource is no longer available at this server, and no alternate
address is known. This code should be used only when the resource has
been permanently removed. Normal servlets have no reason to use this
status code.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_LENGTH_REQUIRED</tt>
</p>
</td>
<td>
<p>411</p>
</td>
<td>
<p>Length Required</p>
</td>
<td>
<p>The server will not accept the request without a
<tt class="literal">Content-Length </tt>header.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_PRECONDITION_FAILED</tt>
</p>
</td>
<td>
<p>412</p>
</td>
<td>
<p>Precondition Failed</p>
</td>
<td>
<p>A precondition specified by one or more <tt class="literal">If...</tt>
headers in the request evaluated to false.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_REQUEST_ENTITY_TOO_LARGE</tt>
</p>
</td>
<td>
<p>413</p>
</td>
<td>
<p>Request Entity Too Large</p>
</td>
<td>
<p>The server will not process the request because the request content
is too large. If this limitation is temporary, the server can include
a <tt class="literal">Retry-After </tt>header.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_REQUEST_URI_TOO_LONG</tt>
</p>
</td>
<td>
<p>414</p>
</td>
<td>
<p>Request-URI Too Long</p>
</td>
<td>
<p>The server will not process the request because the request URI is
longer than the server is willing to interpret. This can occur when a
client has accidentally converted a POST request into a GET request.
Normal servlets have no reason to use this status code.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_UNSUPPORTED_MEDIA_TYPE</tt>
</p>
</td>
<td>
<p>415</p>
</td>
<td>
<p>Unsupported Media Type</p>
</td>
<td>
<p>The server will not process the request because the request body is
in a format unsupported by the requested resource.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_INTERNAL_SERVER_ERROR</tt>
</p>
</td>
<td>
<p>500</p>
</td>
<td>
<p>Internal Server Error</p>
</td>
<td>
<p>An unexpected error occurred inside the server that prevented it from
fulfilling the request.
</p>
</td>
<td>
<p>1.0</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_NOT_IMPLEMENTED</tt>
</p>
</td>
<td>
<p>501</p>
</td>
<td>
<p>Not Implemented</p>
</td>
<td>
<p>The server does not support the functionality needed to fulfill the
request.
</p>
</td>
<td>
<p>1.0</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_BAD_GATEWAY</tt>
</p>
</td>
<td>
<p>502</p>
</td>
<td>
<p>Bad Gateway</p>
</td>
<td>
<p>A server acting as a gateway or proxy did not receive a valid
response from an upstream server.
</p>
</td>
<td>
<p>1.0</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_SERVICE_UNAVAILABLE</tt>
</p>
</td>
<td>
<p>503</p>
</td>
<td>
<p>Service Unavailable</p>
</td>
<td>
<p>The service (server) is temporarily unavailable but should be
restored in the future. If the server knows when it will be available
again, a <tt class="literal">Retry-After </tt>header may also be supplied.
</p>
</td>
<td>
<p>1.0</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_GATEWAY_TIMEOUT</tt>
</p>
</td>
<td>
<p>504</p>
</td>
<td>
<p>Gateway Timeout</p>
</td>
<td>
<p>A server acting as a gateway or proxy did not receive a valid
response from an upstream server during the time it was prepared to
wait.
</p>
</td>
<td>
<p>1.1</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SC_HTTP_VERSION_NOT_SUPPORTED</tt>
</p>
</td>
<td>
<p>505</p>
</td>
<td>
<p>HTTP Version Not Supported</p>
</td>
<td>
<p>The server does not support the version of the HTTP protocol used in
the request. The response body should specify the protocols supported
by the server. Normal servlets should not need to use this status
code.
</p>
</td>
<td>
<p>1.1<a name="INDEX-2445"></a><a name="INDEX-2446"></a><a name="INDEX-"></a>
</p>
</td>
</tr>

</table>





<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appb_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/appb_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="appd_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/appd_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">Appendix B. HTTP Servlet API Quick Reference</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">D. Character Entities</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
