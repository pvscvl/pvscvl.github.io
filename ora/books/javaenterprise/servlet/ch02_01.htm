<html>
<head>
<title>HTTP Servlet Basics (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="HTTP Servlet Basics">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch01_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm">Java Servlet Programming</a></td><td align="right" valign="top" width="172"><a href="ch02_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 2.  HTTP Servlet Basics</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_01.htm">HTTP Basics</a>
<br>
<a href="ch02_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_02.htm">The Servlet API</a>
<br>
<a href="ch02_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_03.htm">Page Generation</a>
<br>
<a href="ch02_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_04.htm">Server-Side Includes</a>
<br>
<a href="ch02_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_05.htm">Servlet Chaining and Filters</a>
<br>
<a href="ch02_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_06.htm">JavaServer Pages</a>
<br>
<a href="ch02_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_07.htm">Moving On</a>
<br>
</p>
</div>


<p>This chapter provides a quick introduction to some of the things an
HTTP servlet can do. For example, an HTTP servlet can generate an
HTML page, either when the servlet is accessed explicitly by name, by
following a hypertext link, or as the result of a form submission. An
HTTP servlet can also be embedded inside an HTML page, where it
functions as a server-side include. Servlets can be chained together
to produce complex effects--one common use of this technique is
for filtering content. Finally, snippets of servlet code can be
embedded directly in HTML pages using a new technique called
JavaServer Pages.
</p>

<p>Although the code for each of the examples in this chapter is
available for download (as described in the <a href="ch00_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch00_01.htm">the Preface</a>), we would
suggest that for these first examples you deny yourself the
convenience of the Internet and type in the examples. It should help
the concepts seep into your brain.
</p>

<p>Don't be alarmed if we seem to skim lightly over some topics in
this chapter. Servlets are powerful and, at times, complicated. The
point here is to give you a general overview of how things work,
before jumping in and overwhelming you with all of the details. By
the end of this book, we promise that you'll be able to write
servlets that do everything but make tea.
</p>



<h2 class="sect1">2.1. HTTP Basics</h2>

<p>Before we can even show you a simple
<a name="INDEX-210"></a>HTTP servlet, we need to make
sure that you have a basic understanding of how the protocol behind
the Web, HTTP, works. If you're an experienced CGI programmer
(or if you've done any serious server-side web programming),
you can safely skip this section. Better yet, you might skim it to
refresh your memory about the finer points of the GET and POST
methods. If you are new to the world of server-side web programming,
however, you should read this material carefully, as the rest of the
book is going to assume that you understand HTTP. For a more thorough
discussion of HTTP and its methods,
<a name="INDEX-211"></a><a name="INDEX-212"></a>see
<em class="citetitle">Web Client Programming</em><a name="INDEX-213"></a><a name="INDEX-214"></a>by Clinton Wong (O'Reilly).
</p>

<a name="ch02-2-fm2xml"></a>
<h3 class="sect2">2.1.1. Requests, Responses, and Headers</h3>

<p>HTTP is a simple, stateless protocol. A client, such as a web
browser, makes a request, the web server responds, and the
transaction is done. When the client sends a request, the first thing
it specifies is an
<a name="INDEX-215"></a>HTTP command, called a
<em class="emphasis">method</em><a name="INDEX-216"></a>
, that tells the server the type of action it wants performed. This
first line of the request also specifies the address of a document (a
URL) and the version of the HTTP protocol it is using. For example:
</p>

<blockquote>
<pre class="programlisting">GET /intro.html HTTP/1.0</pre>
</blockquote>

<p>This request uses the GET method to ask for the document named
<em class="filename">intro.html</em>, using HTTP Version 1.0. After
sending the request, the client can send optional header information
to tell the server extra information about the request, such as what
software the client is running and what content types it understands.
This information doesn't directly pertain to what was
requested, but it could be used by the server in generating its
response. Here are some sample request headers:
</p>

<blockquote>
<pre class="programlisting">User-Agent: Mozilla/4.0 (compatible; MSIE 4.0; Windows 95)
Accept: image/gif, image/jpeg, text/*, */*</pre>
</blockquote>

<p>The <tt class="literal">User-Agent</tt><a name="INDEX-217"></a><a name="INDEX-218"></a>
header provides information about the client software, while the
<tt class="literal">Accept</tt><a name="INDEX-219"></a><a name="INDEX-220"></a><a name="INDEX-221"></a> header specifies
the media (MIME) types that the client prefers to accept.
(We'll talk more about request headers in the context of
servlets in <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_01.htm">Chapter 4, "Retrieving Information"</a>.) After the headers, the
client sends a blank line, to indicate the end of the header section.
The client can also send additional data, if appropriate for the
method being used, as it is with the POST method that we'll
discuss shortly. If the request doesn't send any data, it ends
with an empty line.
</p>

<p>After the client sends the request, the server processes it and sends
back a response. The first line of the response is a status line that
specifies the <a name="INDEX-222"></a><a name="INDEX-223"></a>version of the HTTP protocol the
server is using, a status code, and a description of the status code.
For example:
</p>

<blockquote>
<pre class="programlisting">HTTP/1.0 200 OK</pre>
</blockquote>

<p>This status line includes a status code of 200, which indicates that
the request was successful, hence the description "OK".
Another common status code is 404, with the description "Not
Found"--as you can guess, this means that the requested
document was not found. <a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_01.htm">Chapter 5, "Sending HTML Information"</a>, discusses
common status codes and how you can use them in servlets, while <a href="appc_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/appc_01.htm">Appendix C, "HTTP Status Codes"</a>, provides a complete list of HTTP status
codes.
</p>

<p>After the status line, the server sends
<a name="INDEX-224"></a><a name="INDEX-225"></a><a name="INDEX-226"></a><a name="INDEX-227"></a>
response headers that tell the client things like what software the
server is running and the content type of the server's
response. For example:
</p>

<blockquote>
<pre class="programlisting">Date: Saturday, 23-May-98 03:25:12 GMT
Server: JavaWebServer/1.1.1
MIME-version: 1.0
Content-type: text/html
Content-length: 1029
Last-modified: Thursday, 7-May-98 12:15:35 GMT</pre>
</blockquote>

<p>The <tt class="literal">Server</tt><a name="INDEX-228"></a><a name="INDEX-229"></a>
header provides information about the server software, while the
<tt class="literal">Content-type </tt><a name="INDEX-230"></a><a name="INDEX-231"></a>
header specifies the <a name="INDEX-232"></a>MIME type of the data included with
the response. (We'll also talk more about response headers in
<a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_01.htm">Chapter 5, "Sending HTML Information"</a>.) The server sends a blank line after
the headers, to conclude the header section. If the request was
successful, the requested data is then sent as part of the response.
Otherwise, the response may contain human-readable data that explains
why the server couldn't fulfill the request.
</p>


<a name="ch02-3-fm2xml"></a>
<h3 class="sect2">2.1.2. GET and POST</h3>

<p>When a client connects to a server and makes an HTTP request, the
request can be of several different types, called methods. The most
frequently used methods are GET and POST. Put simply, the
<a name="INDEX-233"></a><a name="INDEX-234"></a><a name="INDEX-235"></a>GET method is designed for getting
information (a document, a chart, or the results from a database
query), while the <a name="INDEX-236"></a><a name="INDEX-237"></a><a name="INDEX-238"></a>POST method is designed for posting
information (a credit card number, some new chart data, or
information that is to be stored in a database). To use a bulletin
board analogy, GET is for reading and POST is for tacking up new
material.
</p>

<p>The GET method, although it's designed for reading information,
can include as part of the request some of its own information that
better describes what to get--such as an x, y scale for a
dynamically created chart. This information is passed as a sequence
of characters appended to the request URL in what's called a
<em class="emphasis">query
string</em><a name="INDEX-239"></a><a name="INDEX-240"></a>. Placing the extra information in the
URL in this way allows the page to be bookmarked or emailed like any
other. Because GET requests theoretically shouldn't need to
send large amounts of information, some servers limit the length of
<a name="INDEX-241"></a>URLs and query strings to about 240
characters.
</p>

<p>The <a name="INDEX-242"></a><a name="INDEX-243"></a><a name="INDEX-244"></a>POST method uses a different technique
to send information to the server because in some cases it may need
to send megabytes of information. A POST request passes all its data,
of unlimited length, directly over the socket connection as part of
its HTTP request body. The exchange is invisible to the client. The
URL doesn't change at all. Consequently, POST requests cannot
be bookmarked or emailed or, in some cases, even reloaded.
That's by design--information sent to the server, such as
your credit card number, should be sent only once.
</p>

<p>In practice, the use of GET and POST has strayed from the original
intent. It's common for long parameterized requests for
information to use POST instead of GET to work around problems with
overly-long URLs. It's also common for simple forms that upload
information to use GET because, well--why not, it works!
Generally, this isn't much of a problem. Just remember that GET
requests, because they can be bookmarked so easily, should not be
allowed to cause damage for which the client could be held
responsible. In other words, GET requests should not be used to place
an order, update a database, or take an explicit client action in any
way.
</p>


<a name="ch02-4-fm2xml"></a>
<h3 class="sect2">2.1.3. Other Methods</h3>

<p>In addition to GET and POST, there are several other lesser-used HTTP
methods. There's the <a name="INDEX-245"></a><a name="INDEX-246"></a>
HEAD method, which is sent by a client when it wants to see only the
headers of the response, to determine the document's size,
modification time, or general availability. There's also
<a name="INDEX-247"></a><a name="INDEX-248"></a>
PUT, to place documents directly on the server, and
<a name="INDEX-249"></a><a name="INDEX-250"></a>
DELETE, to do just the opposite. These last two aren't widely
supported due to complicated policy issues. The
<a name="INDEX-251"></a><a name="INDEX-252"></a>
TRACE method is used as a debugging aid--it returns to the
client the exact contents of its request. Finally, the
<a name="INDEX-253"></a><a name="INDEX-254"></a>
OPTIONS method can be used to ask the server which methods it
supports or what options are available for a particular resource on
the server.
</p>

















<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch01_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">1.3. The Power of Servlets</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.2. The Servlet API</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
