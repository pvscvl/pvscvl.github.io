<html>
<head>
<title>Debugging (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Debugging">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_01.htm">Chapter 13: Odds and Ends</a></td><td align="right" valign="top" width="172"><a href="ch13_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_08.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">13.7. Debugging</h2>

<p>The <a name="INDEX-2307"></a><a name="INDEX-2308"></a><a name="INDEX-2309"></a><a name="INDEX-2310"></a>
testing/debugging phase is one of the hardest aspects of developing
servlets. Servlets tend to involve a large amount of client/server
interaction, making errors likely--but hard to reproduce. It can
also be hard to track down the cause of nonobvious errors because
servlets don't work well with standard debuggers, since they
run inside a heavily multithreaded and generally complex web server.
Here are a few hints and suggestions that may aid you in your
debugging.
</p>

<a name="ch13-10-fm2xml"></a>
<h3 class="sect2">13.7.1. Check the Logs</h3>

<p>When you first think there might be a problem, check the logs. Most
servers output an <a name="INDEX-2311"></a><a name="INDEX-2312"></a>error log where you can find a list of
all the errors observed by the server and an
<a name="INDEX-2313"></a><a name="INDEX-2314"></a>event log where you can find a list of
interesting servlet events. The event log may also hold the messages
logged by servlets through the <tt class="literal">log()</tt> method, but
not always.
</p>

<p>Note that many servers buffer their output to these logs to improve
performance. When hunting down a problem, you may want to stop this
buffering (usually by reducing the server's buffer size to 0 bytes), so you can see problems as they occur. Be sure to reset the
buffer size to a reasonable value afterward.
</p>


<a name="ch13-11-fm2xml"></a>
<h3 class="sect2">13.7.2. Output Extra Information</h3>

<p>If you don't see an indication of the problem in the
server's logs, try having your servlet log extra information
with the <tt class="literal">log()</tt><a name="INDEX-2315"></a><a name="INDEX-2316"></a>method. As you've seen in
examples elsewhere in this book, we habitually log stack traces and
other error situations. During debugging, you can add a few temporary
<tt class="literal">log()</tt> commands as a poor man's debugger, to
get a general idea of the code execution path and the values of the
servlet's variables. Sometimes it's convenient to leave
the <tt class="literal">log()</tt> commands in a servlet surrounded by
<tt class="literal">if</tt> clauses so they trigger only when a specific
<tt class="literal">debug</tt> init parameter is set to
<tt class="literal">true</tt>.
</p>

<p>Extracting the extra information from the server's logs can at
times be unwieldy. To make the temporary debugging information easier
to find, you can have a servlet output its debug information to the
client (through the <tt class="literal">PrintWriter</tt>) or to a console
on the server (through <tt class="literal">System.out</tt>). Not all
servers have a console associated with a servlet's
<tt class="literal">System.out</tt>; some redirect the output to a file
instead.
</p>


<a name="ch13-12-fm2xml"></a>
<h3 class="sect2">13.7.3. Use a Standard Debugger</h3>

<p>It's also possible to use a standard debugger to track down
servlet problems, although exactly how might not be intuitively
obvious. After all, you can't debug a servlet directly because
servlets aren't standalone programs. Servlets are server
extensions, and, as such, they need to run inside a server.
</p>

<p>Fortunately, Sun provides a simple "servlet runner"
server perfect for debugging servlets. This servlet runner acts as a
small all-Java web server that is simpler and more lightweight than
the Java Web Server--it handles only HTTP requests for servlets,
and it doesn't even serve files. You'll find the
<a name="INDEX-2317"></a>servlet runner packaged as part of
the Java Servlet Development Kit (JSDK), available from <a href="../../../../../../../jserv.java.sun.com/">http://jserv.java.sun.com</a><a name="INDEX-2318"></a><a name="INDEX-2319"></a><a name="INDEX-2320"></a>.
</p>

<p>The servlet runner can be executed from the command line as the
<tt class="command"></tt><a name="INDEX-2321"></a><em class="emphasis">servletrunner</em> shell
script on a Unix system or the
<tt class="command"></tt><a name="INDEX-2322"></a><em class="emphasis">servletrunner.exe</em> program on Windows. What
<em class="emphasis">servletrunner</em> does is set the classpath to
include the appropriate classes and then execute <em class="emphasis">java
sun.servlet.http.HttpServer.</em> The
<tt class="literal">HttpServer</tt> class contains the
<tt class="literal">main()</tt> method that listens for incoming requests
for servlets. By default, it listens on port 8080.
</p>

<p>To debug a servlet, we can debug
<tt class="literal">sun.servlet.http.HttpServer</tt>, then watch as
<tt class="literal">HttpServer</tt> executes servlets in response to HTTP
requests we make from a browser. This is very similar to how applets
are debugged. The difference is that with applets, the actual program
being debugged is <tt class="literal">sun.applet.AppletViewer</tt>. Most
debuggers hide this detail by automatically knowing how to debug
applets. Until they do the same for servlets, you have to help your
debugger by doing the following:
</p>

<ol>
<li>
<p>Set your debugger's classpath so that it can find
<tt class="literal">sun.servlet.http.Http-Server</tt> and associated
classes.
</p>
</li>
<li>
<p>Set your debugger's classpath so that it can also find your
servlets and support classes, typically
<em class="replaceable">server_root</em><em class="filename">/servlets</em>
and
<em class="replaceable">server_root</em><em class="filename">/classes</em>.
You normally wouldn't want
<em class="replaceable">server_root</em><em class="filename">/servlets</em>
in your classpath because it disables servlet reloading. This
inclusion, however, is useful for debugging. It allows your debugger
to set breakpoints in a servlet before the custom servlet loader in
<tt class="literal">HttpServer</tt> loads the servlet.
</p>
</li>
</ol>

<p>Once you have set the proper classpath, start debugging
<tt class="literal">sun.servlet.http.HttpServer</tt>. You can set
breakpoints in whatever servlet you're interested in debugging,
then use a web browser to make a request to the
<tt class="literal">HttpServer</tt> for the given servlet (<a href="../../../../../../../localhost/servlet/ServletToDebug">http://localhost:8080/servlet/ServletToDebug</a>).
You should see execution stop at your breakpoints.
</p>


<a name="ch13-13-fm2xml"></a>
<h3 class="sect2">13.7.4. Use a Third-Party Tool</h3>

<p>Third-party tools promise to bring new capabilities and ease of use
to the task of servlet debugging. <a name="INDEX-2323"></a><a name="INDEX-2324"></a><a name="INDEX-2325"></a>LiveSoftware, maker of the popular
JRun servlet plug-in, was the first company to market a tool for
servlet debugging. The product, named ServletDebugger, is designed to
help programmatically test and debug a servlet. ServletDebugger
doesn't require using <tt class="literal">HttpServer</tt> or a
browser to make a request. Instead, you use a set of classes to write
a small stub class that prepares and executes a servlet request. The
stub specifies everything: the servlet's init parameters, the
request's HTTP headers, and the request's parameters.
ServletDebugger is fairly straightforward and is well suited to
automated testing. The largest drawback is that it takes extra effort
to properly prepare a realistic request. ServletDebugger is available
from <a href="../../../../../../../www.livesoftware.com/">http://www.livesoftware.com</a>.
</p>

<p>You can expect additional third-party debugging tools to become
available as servlets become more popular.
</p>


<a name="ch13-14-fm2xml"></a>
<h3 class="sect2">13.7.5. Examine the Client Request</h3>

<p>Sometimes when a servlet doesn't behave as expected, it's
useful to look at the raw HTTP request to which it's
responding. If you're familiar with the structure of HTTP, you
can read the request and see exactly where a servlet might get
confused.<a href="#FOOTNOTE-2">[2]</a> One way to see the raw request
is to replace the web server process with a custom server application
that prints out everything it receives. <a href="#ch13-18638">Example 13-9</a>
shows such a server.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-2"></a>
<p>[2] Of course, if you're not familiar
with the structure of HTTP, it may be you who are getting confused.
In that case, we recommend reading the HTTP primer in <a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_01.htm">Chapter 2, "HTTP Servlet Basics"</a> and the book <em class="citetitle">Web Client
Programming</em><a name="INDEX-2326"></a><a name="INDEX-2327"></a>by Clinton Wong
(O'Reilly).</p> </blockquote>

<a name="ch13-18638"></a>
<div class="example">
<h4 class="objtitle">Example 13-9. Catching a client request </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.net.*;
import java.util.*;

public class SocketWatch {

  private static void printUsage() {
    System.out.println("usage: java SocketWatch port");
  }

  public static void main(String[] args) {
    if (args.length &lt; 1) {
      printUsage();
      return;
    }

    // The first argument is the port to listen on
    int port;
    try {
      port = Integer.parseInt(args[0]);
    }
    catch (NumberFormatException e) {
      printUsage();
      return;
    }

    try {
      // Establish a server socket to accept client connections
      // As each connection comes in, pass it to a handler thread
      ServerSocket ss = new ServerSocket(port);
      while (true) {
        Socket request = ss.accept();
        new HandlerThread(request).start();
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
  }
}

class HandlerThread extends Thread {

  Socket s;

  public HandlerThread(Socket s) {
    this.s = s;
  }

  public void run() {
    try {
      // Print each byte as it comes in from the socket
      InputStream in = s.getInputStream();
      byte[] bytes = new byte[1];
      while ((in.read(bytes)) != -1) {
        System.out.print((char)bytes[0]);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
  }
}</pre>
</blockquote>
</div>

<p>You can start this server listening on port 8080 by typing
<em class="emphasis">java SocketWatch 8080</em> in a shell. Note that two
applications can't listen to the same socket at the same time,
so you should first make sure there's no other server listening
on your chosen port. Once you have the server running, you can make
HTTP requests to it as if it were a normal web server. For example,
you can use a web browser to surf to <em class="emphasis">http://localhost:8080</em>. When
<tt class="literal">SocketWatch</tt> receives the browser's HTTP
request, it sends the request to its standard out for your
examination. The browser, meanwhile, is likely to be busy waiting for
a response that will never come. You can end its wait by hitting the
<b class="emphasis-bold">Stop</b> button.
</p>

<p>Here is some sample output from <tt class="literal">SocketWatch</tt> that
shows the details of a GET request made to <a href="../../../../../../../localhost/">http://localhost:8080</a><em class="emphasis">:</em>
</p>

<blockquote>
<pre class="programlisting">GET / HTTP/1.0
Connection: Keep-Alive
User-Agent: Mozilla/3.03C-SGI (X11; I; IRIX 6.2 IP22)
Pragma: no-cache
Host: localhost:8080
Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
Cookie: jwssessionid=USN1RLIAAAAABQDGPM5QAAA</pre>
</blockquote>


<a name="ch13-15-fm2xml"></a>
<h3 class="sect2">13.7.6. Create a Custom Client Request</h3>

<p>In addition to catching and examining a client's HTTP request,
you may find it useful to create your own HTTP request. You can do
this by connecting to the server socket on which the web server is
listening, then manually entering a properly structured HTTP request.
To establish the connection, you can use the
<tt class="command"></tt><a name="INDEX-2328"></a><em class="emphasis">telnet</em> program,
available on all Unix machines and most Windows machines with
networking. The <em class="emphasis">telnet</em> program accepts as
arguments the host and port number to which it should connect. Once
you're connected, you can make a request that looks like what
you saw in the last section. Fortunately, your request can be far
simpler--all you need to specify is the first line, saying what
to get, and the last line, which must be an empty line that indicates
the end of the request. For example:
</p>

<blockquote>
<pre class="programlisting">% <tt class="userinput"><b>telnet localhost 8080</b></tt>
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
<tt class="userinput"><b>GET /servlet/ParameterSnoop?name=value HTTP/1.0</b></tt>

HTTP/1.1 200 OK
Server: JavaWebServer/1.1.1
Content-Type: text/plain
Connection: close
Date: Sun, 12 Apr 1998 20:29:06 GMT

Query String:
name=value

Request Parameters:
name (0): value
Connection closed by foreign host.</pre>
</blockquote>

<p>As is too often the case, <a name="INDEX-2329"></a><a name="INDEX-2330"></a><a name="INDEX-2331"></a>Windows behaves a little differently
than you'd like. The default Windows
<em class="emphasis">telnet.exe</em> program misformats many web server
responses because it doesn't understand that on the Web, a line
feed should be treated the same as a line feed and carriage return.
In lieu of <em class="emphasis">telnet.exe,</em> Windows programmers can
use the better-behaved Java program shown in <a href="#ch13-11288">Example 13-10</a>.
</p>

<a name="ch13-11288"></a>
<div class="example">
<h4 class="objtitle">Example 13-10. Another way to connect to a web server </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.net.*;
import java.util.*;

public class HttpClient {

  private static void printUsage() {
    System.out.println("usage: java HttpClient host port");
  }

  public static void main(String[] args) {
    if (args.length &lt; 2) {
      printUsage();
      return;
    }

    // Host is the first parameter, port is the second
    String host = args[0];
    int port;
    try {
      port = Integer.parseInt(args[1]);
    }
    catch (NumberFormatException e) {
      printUsage();
      return;
    }

    try {
      // Open a socket to the server
      Socket s = new Socket(host, port);

      // Start a thread to send keyboard input to the server
      new KeyboardInputManager(System.in, s).start();

      // Now print everything we receive from the socket 
      BufferedReader in = 
        new BufferedReader(new InputStreamReader(s.getInputStream()));
      String line;
      while ((line = in.readLine()) != null) {
        System.out.println(line);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
  }
}

class KeyboardInputManager extends Thread {

  InputStream in;
  Socket s;

  public KeyboardInputManager(InputStream in, Socket s) {
    this.in = in;
    this.s = s;
    setPriority(MIN_PRIORITY);  // socket reads should have a higher priority
                                // Wish I could use a select() !
    setDaemon(true);  // let the app die even when this thread is running
  }

  public void run() {
    try {
      BufferedReader keyb = new BufferedReader(new InputStreamReader(in));
      PrintWriter server = new PrintWriter(s.getOutputStream());

      String line;
      System.out.println("Connected... Type your manual HTTP request");
      System.out.println("------------------------------------------");
      while ((line = keyb.readLine()) != null) {
        server.print(line);
        server.print("\r\n");  // HTTP lines end with \r\n
        server.flush();
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
  }
}</pre>
</blockquote>
</div>

<p>This <tt class="literal">HttpClient</tt> program operates similarly to
<tt class="command">telnet</tt>:
</p>

<blockquote>
<pre class="programlisting">% <tt class="userinput"><b>java HttpClient localhost 8080</b></tt>
Connected... Type your manual HTTP request
------------------------------------------
<tt class="userinput"><b>GET / HTTP/1.0</b></tt>

HTTP/1.1 200 OK
Server: JavaWebServer/1.1.1
Content-Length: 1999
Content-Type: text/html
Last-Modified: Mon, 12 Jan 1998 08:26:20 GMT
Date: Wed, 08 Apr 1998 23:41:50 GMT

&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Java(TM) Web Server Default Page&lt;/title&gt;
  &lt;/head&gt;
  ...</pre>
</blockquote>


<a name="ch13-16-fm2xml"></a>
<h3 class="sect2">13.7.7. Some Final Tips</h3>

<p>If all the advice so far hasn't helped track down your bug,
here are some final tips on servlet debugging:
</p>

<ul>
<li>
<p>Use
<tt class="literal">System.getProperty("java.class.path")</tt><a name="INDEX-2332"></a><a name="INDEX-2333"></a>
from your servlet to help debug classpath problems. Because servlets
are often run from web servers with embedded JVMs, it can be hard at
times to identify exactly what classpath the JVM is searching. The
property <tt class="literal">"java.class.path"</tt> will tell you.
</p>
</li>
<li>
<p>Be aware that
<em class="emphasis">server_root</em><em class="filename">/classes</em>
doesn't reload and that
<em class="emphasis">server_root</em><em class="filename">/servlets</em>
probably does.
</p>
</li>
<li>
<p>Ask a browser to show the raw content of the page it is displaying.
This can help identify formatting problems. It's usually an
option under the <b class="emphasis-bold">View</b> menu.
</p>
</li>
<li>
<p>Make sure the browser isn't caching a previous request's
output by forcing a full reload of the page. With Netscape Navigator,
use <b class="emphasis-bold">Shift-Reload</b>; with Internet
Explorer use <b class="emphasis-bold">Shift-Refresh</b>.
</p>
</li>
<li>
<p>Verify that your servlet's <tt class="literal">init()</tt> method
takes a <tt class="literal">ServletConfig</tt> parameter and calls
<tt class="literal">super.init(config)</tt> right away.<a name="INDEX-2334"></a><a name="INDEX-2335"></a><a name="INDEX-2336"></a><a name="INDEX-2337"></a>
</p>
</li>
</ul>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch13_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_08.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">13.6. Acting as an RMI Client</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">13.8. Performance Tuning</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
