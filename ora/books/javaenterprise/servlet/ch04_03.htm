<html>
<head>
<title>The Client (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The Client">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_01.htm">Chapter 4: Retrieving Information</a></td><td align="right" valign="top" width="172"><a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">4.3. The Client</h2>

<p>For each request, a servlet has the ability to find out about the
client machine and, for pages requiring authentication, about the
actual user. This information can be used for logging access data,
associating information with individual users, or restricting access
to certain clients.
</p>

<a name="ch04-6-fm2xml"></a>
<h3 class="sect2">4.3.1. Getting Information About the Client Machine</h3>

<p>A <a name="INDEX-671"></a><a name="INDEX-672"></a>servlet can use
<tt class="literal">getRemoteAddr()</tt><a name="INDEX-673"></a><a name="INDEX-674"></a>
and
<tt class="literal">getRemoteHost()</tt><a name="INDEX-675"></a><a name="INDEX-676"></a>
to retrieve the IP address and hostname of the client machine,
respectively:
</p>

<blockquote>
<pre class="programlisting">public String ServletRequest.getRemoteAddr()
public String ServletRequest.getRemoteHost()</pre>
</blockquote>

<p>Both values are returned as <tt class="literal">String</tt> objects. The
information comes from the socket that connects the server to the
client, so the remote address and hostname may be that of a proxy
server. An example remote address might be
<tt class="literal">"192.26.80.118"</tt> while an example remote host might
be <tt class="literal">"dist.engr.sgi.com"</tt>.
</p>

<p>The IP address or remote hostname can be converted to a
<tt class="literal">java.net.InetAddress</tt> object using
<tt class="literal">InetAddress.getByName()</tt><a name="INDEX-677"></a><a name="INDEX-678"></a>
:
</p>

<blockquote>
<pre class="programlisting">InetAddress remoteInetAddress = InetAddress.getByName(req.getRemoteAddr()); </pre>
</blockquote>


<a name="ch04-7-fm2xml"></a>
<h3 class="sect2">4.3.2. Restricting Access to the United States and Canada</h3>

<p>Due to the United States government's policy restricting the
export of strong <a name="INDEX-679"></a><a name="INDEX-680"></a>encryption outside the United
States and Canada, some web sites must be careful about who they let
download certain software. Servlets, with their ability to find out
about the client machine, are well suited to enforce this
restriction. These servlets can check the client machine and provide
links for download only if the client appears to be coming from
inside the United States or Canada. <a href="#ch04-35902">Example 4-5</a>
gives an <a name="INDEX-681"></a>example.
</p>

<a name="ch04-35902"></a>
<div class="example">
<h4 class="objtitle">Example 4-5. Can they be trusted? </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.net.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class ExportRestriction extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    // ...Some introductory HTML...

    // Get the client's hostname
    String remoteHost = req.getRemoteHost();

    // See if the client is allowed
    if (! isHostAllowed(remoteHost)) {
      out.println("Access &lt;BLINK&gt;denied&lt;/BLINK&gt;");  // filter out the blink!
    }
    else {
      out.println("Access granted");
      // Display download links, etc...
    }
  }

  // We assume hosts ending with .com, .edu, .net, .org,
  // .gov, .mil, .us, and .ca are legal even though this is an 
  // over-simplification now that .com, .net, and .org have 
  // become global top-level domains. We also assume
  // clients without a domain name are local and that
  // local is allowed. (After all, if local isn't allowed
  // you would have to be outside the United States and Canada -- so
  // why would you be using this servlet?)
  private boolean isHostAllowed(String host) {
    return (host.endsWith(".com") ||
            host.endsWith(".edu") ||
            host.endsWith(".net") ||
            host.endsWith(".org") ||
            host.endsWith(".gov") ||
            host.endsWith(".mil") ||
            host.endsWith(".us") ||
            host.endsWith(".ca") ||
            (host.indexOf('.') == -1));  // no domain, assume OK
  }
}</pre>
</blockquote>
</div>

<p>This servlet gets the client hostname with a call to
<tt class="literal">req.getRemoteHost()</tt> and, based on its suffix,
decides if the client came from inside or outside the United States
and Canada. Of course, be sure to get high-priced
<a name="INDEX-682"></a>legal counsel
before making any cryptographic code available for download.
<a name="INDEX-683"></a><a name="INDEX-684"></a>
</p>


<a name="ch04-8-fm2xml"></a>
<h3 class="sect2">4.3.3. Getting Information About the User</h3>

<p>What do you do when you need to restrict access to some of your web
pages but want to have a bit more control over the restriction than
this "continent by continent" approach? Say, for example,
you publish an online magazine and want only <a name="INDEX-685"></a><a name="INDEX-686"></a>
paid subscribers to read the articles. Well (prepare yourself), you
don't need servlets to do this.
</p>

<p>Nearly every HTTP server has a built-in capability to restrict access
to some or all of its pages to a given set of registered users. How
you set up restricted access depends on the server, but here's
how it works mechanically. The first time a browser attempts to
access one of these pages, the HTTP server replies that it needs
special user authentication. When the browser receives this response,
it usually pops open a window asking the user for a name and password
appropriate for the page, as shown in <a href="#ch04-16669">Figure 4-1</a>.
</p>

<a name="ch04-16669"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0401.gif" webstripperlinkwas="figs/jsp_0401.gif"></div>
<h4 class="objtitle">Figure 4-1. Please log in</h4>

<p>Once the user enters his information, the browser again attempts to
access the page, this time attaching the user's name and
password along with the request. If the server accepts the
name/password pair, it happily handles the request. If, on the other
hand, the server doesn't accept the name/password pair, the
browser is again denied and the user swears under his breath about
forgetting yet another password.
</p>

<p>How does this involves servlets? When access to a servlet has been
restricted by the server, the servlet can get the name of the user
that was accepted by the server, using the <tt class="literal">getRemoteUser()
</tt><a name="INDEX-687"></a><a name="INDEX-688"></a><a name="INDEX-689"></a>
method:
</p>

<blockquote>
<pre class="programlisting">public String HttpServletRequest.getRemoteUser()</pre>
</blockquote>

<p>Note that this information is retrieved from the servlet's
<tt class="literal">HttpServletRequest</tt><a name="INDEX-690"></a><a name="INDEX-691"></a> object, the HTTP-specific subclass of
<tt class="literal">ServletRequest</tt>. This method returns the name of
the user making the request as a <tt class="literal">String</tt> or
<tt class="literal">null</tt> if access to the servlet was not restricted.
There is no comparable method to get the remote user's password
(although it can be manually determined, as shown in <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_01.htm">Chapter 8, "Security"</a>). An example remote user might be
<tt class="literal">"jhunter"</tt>.
</p>

<p>A servlet can also use the
<tt class="literal">getAuthType()</tt><a name="INDEX-692"></a><a name="INDEX-693"></a>
method to find out what type of
<a name="INDEX-694"></a><a name="INDEX-695"></a>
authorization was used:
</p>

<blockquote>
<pre class="programlisting">public String HttpServletRequest.getAuthType()</pre>
</blockquote>

<p>This method returns the type of authorization used or
<tt class="literal">null</tt> if access to the servlet was not restricted.
The most common authorization types are <tt class="literal">"BASIC"</tt>
and <tt class="literal">"DIGEST"</tt>.
</p>

<p>By the time the servlet calls
<tt class="literal">getRemoteUser()</tt><a name="INDEX-696"></a><a name="INDEX-697"></a>
, the server has already determined that the user is authorized to
invoke the servlet, but that doesn't mean the remote
user's name is worthless. The servlet could perform a second
authorization check, more restrictive and dynamic than the
server's. For example, it could return sensitive information
about someone only if that person made the request, or it could
enforce a rule that each user can make only 10 accesses per
day.<a href="#FOOTNOTE-2">[2]</a>
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-2"></a>
<p>[2]Want to know how to say "Access
Denied" for the eleventh access? It's in the next
chapter.</p> </blockquote>

<p>Then again, the client's name can simply tell the servlet who
is accessing it. After all, the remote host is not necessarily unique
to one user. Unix servers often host hundreds of users, and gateway
proxies can act on behalf of thousands. But bear in mind that access
to the client's name comes with a price. Every user must be
registered with your server and, before accessing your site, must
enter his name and password. Generally speaking, authentication
should not be used just so a servlet can know to whom it is talking.
<a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch07_01.htm">Chapter 7, "Session Tracking"</a>, describes some better,
lower-maintenance techniques for knowing about users. However, if a
servlet is already protected and has the name easily available, the
servlet might as well use it.
</p>

<p>With the remote user's name, a servlet can save information
about each client. Over the long term, it can remember each
individual's preferences. For the short term, it can remember
the series of pages viewed by the client and use them to add a sense
of state to a stateless HTTP protocol. The session tracking tricks
from <a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch07_01.htm">Chapter 7, "Session Tracking"</a> may be unnecessary if the servlet
already knows the name of the client user.
</p>


<a name="ch04-9-fm2xml"></a>
<h3 class="sect2">4.3.4. A Personalized Welcome</h3>

<p>A <a name="INDEX-698"></a><a name="INDEX-699"></a><a name="INDEX-700"></a>simple servlet that uses
<tt class="literal">getRemoteUser()</tt> can greet its clients by name and
remember when each last logged in, as shown in <a href="#ch04-15017">Example 4-6</a>.
</p>

<a name="ch04-15017"></a>
<div class="example">
<h4 class="objtitle">Example 4-6. Hey, I remember you! </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class PersonalizedWelcome extends HttpServlet {

  Hashtable accesses = new Hashtable();

  public void doGet(HttpServletRequest req, HttpServletResponse res) 
                               throws ServletException, IOException {
    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    // ...Some introductory HTML...

    String remoteUser = req.getRemoteUser();

    if (remoteUser == null) {
      out.println("Welcome!");
    }
    else {
      out.println("Welcome, " + remoteUser + "!");
      Date lastAccess = (Date) accesses.get(remoteUser);
      if (lastAccess == null) {
        out.println("This is your first visit!");
      }
      else {
        out.println("Your last visit was " + accesses.get(remoteUser));
      }

      if (remoteUser.equals("PROFESSOR FALKEN")) {
        out.println("Shall we play a game?");
      }

      accesses.put(remoteUser, new Date());
    }

    // ...Continue handling the request...
  }
}</pre>
</blockquote>
</div>

<p>This servlet uses a
<tt class="literal">Hashtable</tt><a name="INDEX-701"></a>to save the last access time for each
remote user. The first thing it does for each request is greet the
person by name and tell him the time of his last visit. Then it
records the time of this visit, for use next time. After that, it
continues handling the request. <a name="INDEX-702"></a><a name="INDEX-703"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.2. The Server</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.4. The Request</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
