<html>
<head>
<title>Sending Email (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Sending Email">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_01.htm">Chapter 13: Odds and Ends</a></td><td align="right" valign="top" width="172"><a href="ch13_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">13.2. Sending Email</h2>

<p>Sometimes it's necessary, or just convenient, for a <a name="INDEX-2233"></a><a name="INDEX-2234"></a><a name="INDEX-2235"></a>servlet to fire off an email message.
For example, imagine a servlet that receives data from a user
feedback form. The servlet might want to send the feedback data to a
mailing list of interested parties. Or imagine a servlet that
encounters an unexpected problem and knows to send an email page to
its administrator asking for help.
</p>

<p>A servlet has four choices for sending email:</p>

<ul>
<li>
<p>It can manage the details itself--establishing a raw socket
connection to a mail server and speaking a low-level mail transport
protocol, usually the so-called <a name="INDEX-2236"></a>Simple Mail Transfer
Protocol (SMTP).
</p>
</li>
<li>
<p>It can run on external command-line email program, if the server
system has such a program.
</p>
</li>
<li>
<p>It can use the new JavaMail API, designed to support complicated mail
handling, filing, and processing (see <a href="../../../../../../../java.sun.com/products/javamail">http://java.sun.com/products/javamail</a><a name="INDEX-2237"></a><a name="INDEX-2238"></a><a name="INDEX-2239"></a><a name="INDEX-2240"></a>).
</p>
</li>
<li>
<p>It can use one of the many freely available mail classes that
abstracts the details of sending email into simple, convenient method
calls.
</p>
</li>
</ul>

<p>For most servlets, we recommend the final approach for its simplicity.</p>

<a name="ch13-3-fm2xml"></a>
<h3 class="sect2">13.2.1. Using sun.net.smtp.SmtpClient</h3>

<p>For the purposes of this example, we'll demonstrate a servlet
that uses the
<tt class="literal">sun.net.smtp.SmtpClient</tt><a name="INDEX-2241"></a><a name="INDEX-2242"></a>
class. It's conveniently provided with Sun's JDK and most
JVMs descended from it, but we should warn you that it's
unsupported and subject to change (though it hasn't changed
since JDK 1.0). Using it is simple:
</p>

<ol>
<li>
<p>Call <tt class="literal">SmtpClient</tt><tt class="literal">smtp</tt><tt class="literal">=</tt><tt class="literal">new</tt><tt class="literal">SmtpClient()</tt>. Optionally, pass the constructor the
name of a host to use as the mail server, which replaces the default
of <em class="emphasis">localhost</em>. Most Unix machines can act as SMTP
mail servers.
</p>
</li>
<li>
<p>Call <tt class="literal">smtp.from(fromAddress)</tt>, specifying the
address of the sender. The address doesn't have to be valid.
</p>
</li>
<li>
<p>Call <tt class="literal">smtp.to(toAddress)</tt>, specifying the address of
the receiver.
</p>
</li>
<li>
<p>Call <tt class="literal">PrintStream</tt><tt class="literal">msg</tt><tt class="literal">=</tt><tt class="literal">smtp.startMessage()</tt> to get an
output stream for the message.
</p>
</li>
<li>
<p>Write any mail headers to the <tt class="literal">PrintStream</tt>. For
example, <tt class="literal">"Subject: Customer feedback"</tt>. The headers
should conform to the format given in RFC 822 at <a href="../../../../../../../www.ietf.org/rfc/rfc822.txt">http://www.ietf.org/rfc/rfc822.txt</a>. The basic
syntax is <tt class="literal">"</tt><em class="replaceable">name </em>:
<em class="replaceable">value</em><tt class="literal">"</tt>.
</p>
</li>
<li>
<p>Write the body of the mail message to the
<tt class="literal">PrintStream</tt>.
</p>
</li>
<li>
<p>Call <tt class="literal">smtp.closeServer()</tt> to close the connection to
the server and send the message.
</p>
</li>
</ol>


<a name="ch13-4-fm2xml"></a>
<h3 class="sect2">13.2.2. Emailing Form Data</h3>

<p>
<a href="#ch13-39219">Example 13-3</a> shows a servlet that emails the form
data it receives to a mailing list. Notice the extensive use of the
<tt class="literal">ParameterParser</tt><a name="INDEX-2243"></a><a name="INDEX-2244"></a>
class.
</p>

<a name="ch13-39219"></a>
<div class="example">
<h4 class="objtitle">Example 13-3. Sending mail from a servlet </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

import com.oreilly.servlet.ParameterParser;
import com.oreilly.servlet.ServletUtils;

import sun.net.smtp.SmtpClient;

public class MailServlet extends HttpServlet {

  static final String FROM = "MailServlet";
  static final String TO = "feedback-folks@attentive-company.com";

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();

    ParameterParser parser = new ParameterParser(req);
    String from = parser.getStringParameter("from", FROM);
    String to = parser.getStringParameter("to", TO);

    try {
      SmtpClient smtp = new SmtpClient();  // assume localhost
      smtp.from(from);
      smtp.to(to);
      PrintStream msg = smtp.startMessage();

      msg.println("To: " + to);  // so mailers will display the To: address
      msg.println("Subject: Customer feedback");
      msg.println();

      Enumeration enum = req.getParameterNames();
      while (enum.hasMoreElements()) {
        String name = (String)enum.nextElement();
        if (name.equals("to") || name.equals("from")) continue;  // Skip to/from
        String value = parser.getStringParameter(name, null);
        msg.println(name + " = " + value);
      }

      msg.println();
      msg.println("---");
      msg.println("Sent by " + HttpUtils.getRequestURL(req));

      smtp.closeServer();

      out.println("Thanks for the submission...");
    }
    catch (IOException e) {
      out.println("There was a problem handling the submission...");
      getServletContext().log(e, "There was a problem sending email");
    }
  }
}</pre>
</blockquote>
</div>

<p>This servlet first determines the "from" and
"to" addresses for the message. The default values are
set in the <tt class="literal">FROM</tt> and <tt class="literal">TO</tt>
variables, although a submitted form can include (probably hidden)
fields that specify alternate from and to addresses. The servlet then
begins an SMTP email message. It connects to the local host and
addresses the message. Next, it sets its headers and fills the body
with the form data, ignoring the <tt class="literal">to</tt> and
<tt class="literal">from</tt> variables. Finally, it sends the message and
thanks the user for the submission. If there's a problem, it
informs the user and logs the exception.<a name="INDEX-2245"></a><a name="INDEX-2246"></a><a name="INDEX-2247"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch13_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">13.1. Parsing Parameters</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">13.3. Using Regular Expressions</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
