<html>
<head>
<title>Init and Destroy (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Init and Destroy">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_01.htm">Chapter 3: The Servlet Life Cycle</a></td><td align="right" valign="top" width="172"><a href="ch03_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">3.3. Init and Destroy</h2>

<p>Just like applets, servlets can define
<tt class="literal">init()</tt><a name="INDEX-536"></a><a name="INDEX-537"></a>
and <tt class="literal">destroy()</tt><a name="INDEX-538"></a><a name="INDEX-539"></a>
methods. A servlet's <tt class="literal">init(ServletConfig)</tt>
method is called by the server immediately after the server
constructs the servlet's instance. Depending on the server and
its configuration, this can be at any of these times:
</p>

<ul>
<li>
<p>When the server starts</p>
</li>
<li>
<p>When the servlet is first requested, just before the
<tt class="literal">service()</tt> method is invoked
</p>
</li>
<li>
<p>At the request of the server administrator</p>
</li>
</ul>

<p>In any case, <tt class="literal">init()</tt> is guaranteed to be called
before the servlet handles its first request.
</p>

<p>The <tt class="literal">init()</tt> method is typically used to perform
<a name="INDEX-540"></a><a name="INDEX-541"></a>
servlet initialization--creating or loading objects that are
used by the servlet in the handling of its requests. Why not use a
<a name="INDEX-542"></a><a name="INDEX-543"></a>
constructor instead? Well, in JDK 1.0 (for which servlets were
originally written), constructors for dynamically loaded Java classes
(such as servlets) couldn't accept arguments. So, in order to
provide a new servlet any information about itself and its
environment, a server had to call a servlet's
<tt class="literal">init()</tt> method and pass along an object that
implements the <tt class="literal">ServletConfig</tt> interface. Also, Java
doesn't allow interfaces to declare constructors. This means
that the <tt class="literal">javax.servlet.Servlet</tt> interface cannot
declare a constructor that accepts a <tt class="literal">ServletConfig</tt>
parameter. It has to declare another method, like
<tt class="literal">init()</tt>. It's still possible, of course, for
you to define constructors for your servlets, but in the constructor
you don't have access to the <tt class="literal">ServletConfig</tt>
object or the ability to throw a <tt class="literal">ServletException</tt>.
</p>

<p>This
<tt class="literal">ServletConfig</tt><a name="INDEX-544"></a><a name="INDEX-545"></a><a name="INDEX-546"></a> object
supplies a servlet with information about its initialization (init)
parameters. These parameters are given to the servlet itself and are
not associated with any single request. They can specify initial
values, such as where a counter should begin counting, or default
values, perhaps a template to use when not specified by the request.
In the Java Web Server, <a name="INDEX-547"></a><a name="INDEX-548"></a>init
parameters for a servlet are usually set during the registration
process. See <a href="#ch03-24428">Figure 3-3</a>.
</p>

<a name="ch03-24428"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0303.gif" webstripperlinkwas="figs/jsp_0303.gif"></div>
<h4 class="objtitle">Figure 3-3. Setting init parameters in the Java Web Server</h4>

<p>Other servers set init parameters in different ways. Sometimes it
involves editing a <a name="INDEX-549"></a>configuration file. One creative technique
you can use with the Java Web Server, but currently by no other
servers, is to treat
<a name="INDEX-550"></a><a name="INDEX-551"></a>servlets as JavaBeans. Such servlets can
be loaded from serialized files or have their init properties set
automatically by the server at load time using introspection. See the
Java Web Server documentation for more information.
</p>

<p>The <tt class="literal">ServletConfig</tt> object also holds a reference to
a <tt class="literal">ServletContext</tt> object that a servlet may use to
investigate its environment. See <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_01.htm">Chapter 4, "Retrieving Information"</a>, for a
full discussion of this ability.
</p>

<p>The server calls a servlet's
<tt class="literal">destroy()</tt><a name="INDEX-552"></a><a name="INDEX-553"></a>
method when the servlet is about to be unloaded. In the
<tt class="literal">destroy()</tt> method, a servlet should free any
resources it has acquired that will not be garbage collected. The
<tt class="literal">destroy()</tt> method also gives a servlet a chance to
write out its unsaved cached information or any persistent
information that should be read during the next call to
<tt class="literal">init()</tt>.
</p>

<a name="ch03-7-fm2xml"></a>
<h3 class="sect2">3.3.1. A Counter with Init</h3>

<p>Init parameters can be used for anything. In general, they specify
initial values or default values for servlet variables, or they tell
a servlet how to customize its behavior in some way. <a href="#ch03-36093">Example 3-3</a> extends our <tt class="literal">SimpleCounter</tt>
example to read an init parameter (named <tt class="literal">initial</tt>)
that stores the initial value for our counter.
</p>

<a name="ch03-36093"></a>
<div class="example">
<h4 class="objtitle">Example 3-3. A counter that reads init parameters </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class InitCounter extends HttpServlet {

  int count;

  public void init(ServletConfig config) throws ServletException {
    super.init(config);
    String initial = config.getInitParameter("initial");
    try {
      count = Integer.parseInt(initial);
    }
    catch (NumberFormatException e) {
      count = 0;
    }
  }

  public void doGet(HttpServletRequest req, HttpServletResponse res) 
                           throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();
    count++;
    out.println("Since loading (and with a possible initialization");
    out.println("parameter figured in), this servlet has been accessed");
    out.println(count + " times.");
  }
}</pre>
</blockquote>
</div>

<p>The <tt class="literal">init()</tt> method accepts an object that
implements the <tt class="literal">ServletConfig</tt> interface. It uses
the config object's
<tt class="literal">getInitParameter()</tt><a name="INDEX-554"></a><a name="INDEX-555"></a><a name="INDEX-556"></a>
method to get the value for the init parameter named
<tt class="literal">initial</tt>. This method takes the name of the
parameter as a <tt class="literal">String</tt> and returns the value as a
<tt class="literal">String</tt>. There is no way to get the value as any
other type. This servlet therefore converts the
<tt class="literal">String</tt> value to an <tt class="literal">int</tt> or, if
there's a problem, defaults to a value of <tt class="literal">0</tt>.
</p>

<p>Take special note that the first thing the
<tt class="literal">init()</tt><a name="INDEX-557"></a><a name="INDEX-558"></a>
method does is call <tt class="literal">super.init(config)</tt>.
<em class="emphasis">Every servlet's init() method must do
this!</em>
</p>

<p>Why must the <tt class="literal">init()</tt> method call
<tt class="literal">super.init(config)</tt><a name="INDEX-559"></a>? The reason is that a servlet
is passed its
<tt class="literal">ServletConfig</tt><a name="INDEX-560"></a><a name="INDEX-561"></a><a name="INDEX-562"></a>
instance in its <tt class="literal">init()</tt> method, but not in any
other method. This could cause a problem for a servlet that needs to
access its config object outside of <tt class="literal">init()</tt>.
Calling <tt class="literal">super.init(config)</tt> solves this problem by
invoking the <tt class="literal">init()</tt> method of
<tt class="literal">GenericServlet</tt>, which saves a reference to the
config object for future use.
</p>

<p>So, how does a servlet make use of this saved reference? By invoking
methods on itself. The <tt class="literal">GenericServlet</tt> class itself
implements the
<tt class="literal">ServletConfig</tt><a name="INDEX-563"></a><a name="INDEX-564"></a><a name="INDEX-565"></a>
interface, using the saved config object in the implementation. In
other words, after the call to <tt class="literal">super.init(config)</tt>,
a servlet can invoke its own <tt class="literal">getInitParameter()</tt>
method. That means we could replace the following call:
</p>

<blockquote>
<pre class="programlisting">String initial = config.getInitParameter("initial");</pre>
</blockquote>

<p>with:</p>

<blockquote>
<pre class="programlisting">String initial = getInitParameter("initial");</pre>
</blockquote>

<p>This second style works even outside of the <tt class="literal">init()</tt>
method. Just remember, without the call to
<tt class="literal">super.init(config)</tt> in the
<tt class="literal">init()</tt> method, any call to the
<tt class="literal">GenericServlet</tt>'s implementation of
<tt class="literal">getInitParameter()</tt> or any other
<tt class="literal">ServletConfig</tt> methods will throw a
<tt class="literal">NullPointerException</tt>. So, let us say it again:
<em class="emphasis">every servlet's init() method should call
super.init(config) as its first action</em>. The only reason
not to is if the servlet directly implements the
<tt class="literal">javax.servlet.Servlet</tt><em class="emphasis"></em> interface, where there is no
<tt class="literal">super.init()</tt>.
</p>


<a name="ch03-8-fm2xml"></a>
<h3 class="sect2">3.3.2. A Counter with Init and Destroy</h3>

<p>Up until now, the counter examples have demonstrated how servlet
state persists between accesses. This solves only part of the
problem. Every time the server is shut down or the servlet is
reloaded, the count begins again. What we really want is persistence
across loads--a counter that doesn't have to start over.
</p>

<p>The <tt class="literal">init()</tt><a name="INDEX-566"></a><a name="INDEX-567"></a>
and <tt class="literal">destroy()</tt><a name="INDEX-568"></a><a name="INDEX-569"></a>
pair can accomplish this. <a href="#ch03-19620">Example 3-4</a> further extends the
<tt class="literal">InitCounter</tt> example, giving the servlet the
ability to <a name="INDEX-570"></a>save its state in
<tt class="literal">destroy()</tt> and load the state again in
<tt class="literal">init()</tt>. To keep things simple, assume this servlet
is not registered and is accessed only as <em class="emphasis">http://<em class="replaceable">server</em>:<em class="replaceable">port</em>/servlet/InitDestroyCounter</em>. If it were
registered under different names, it would have to save a separate
state for each name.
</p>

<a name="ch03-19620"></a>
<div class="example">
<h4 class="objtitle">Example 3-4. A fully persistent counter </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class InitDestroyCounter extends HttpServlet {

  int count;

  public void init(ServletConfig config) throws ServletException {
    // Always call super.init(config) first  (servlet mantra #1)
    super.init(config);

    // Try to load the initial count from our saved persistent state
    try {
      FileReader fileReader = new FileReader("InitDestroyCounter.initial");
      BufferedReader bufferedReader = new BufferedReader(fileReader);
      String initial = bufferedReader.readLine();
      count = Integer.parseInt(initial);
      return;
    }
    catch (FileNotFoundException ignored) { }  // no saved state
    catch (IOException ignored) { }            // problem during read
    catch (NumberFormatException ignored) { }  // corrupt saved state

    // No luck with the saved state, check for an init parameter
    String initial = getInitParameter("initial");
    try {
      count = Integer.parseInt(initial);
      return;
    }
    catch (NumberFormatException ignored) { }  // null or non-integer value

    // Default to an initial count of "0"
    count = 0;
  }

  public void doGet(HttpServletRequest req, HttpServletResponse res) 
                               throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();
    count++;
    out.println("Since the beginning, this servlet has been accessed " +
                count + " times.");
  }

  public void destroy() {
    saveState();
  }

  public void saveState() {
    // Try to save the accumulated count
    try {
      FileWriter fileWriter = new FileWriter("InitDestroyCounter.initial");
      String initial = Integer.toString(count);
      fileWriter.write(initial, 0, initial.length());
      fileWriter.close();
      return;
    }
    catch (IOException e) {  // problem during write
      // Log the exception. See <a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_01.htm">Chapter 5, "Sending HTML Information"</a>.
    }
  }
}</pre>
</blockquote>
</div>

<p>Each time this
<a name="INDEX-571"></a><a name="INDEX-572"></a>servlet
is about to be unloaded, it saves its state in a file named
<em class="emphasis">InitDestroyCounter.initial</em>. In the absence of a
supplied path, the file is saved in the server process' current
directory, usually the
<em class="replaceable">server_root</em>.<a href="#FOOTNOTE-4">[4]</a>
This file contains a single integer, saved as a string, that
represents the latest count.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-4"></a>
<p>[4] The exact
location of the current user directory can be found using
<tt class="literal">System.getProperty("user.dir")</tt>.</p> </blockquote>

<p>Each time the servlet is loaded, it tries to read the saved count
from the file. If, for some reason, the read fails (as it does the
first time the servlet runs because the file doesn't yet
exist), the servlet checks if an init parameter specifies the
starting count. If that too fails, it starts fresh with zero. You can
never be too careful in <tt class="literal">init()</tt> methods.<a name="INDEX-573"></a><a name="INDEX-574"></a>
</p>

<p>Servlets can save their state in many different ways. Some may use a
custom file format, as was done here. Others may save their state as
serialized Java objects or put it into a database. Some may even
perform journaling, a technique common to databases and tape backups,
where the servlet's full state is saved infrequently while a
journal file stores incremental updates as things change. Which
method a servlet should use depends on the situation. In any case,
you should always be watchful that the state being saved isn't
undergoing any change in the background.
</p>

<p>Right now you're probably asking yourself "What happens
if the
<a name="INDEX-575"></a><a name="INDEX-576"></a>server
crashes?" It's a good question. The answer is that the
<tt class="literal">destroy()</tt> method will not be called.<a href="#FOOTNOTE-5">[5]</a> This
doesn't cause a problem for <tt class="literal">destroy()</tt>
methods that only have to free resources; a rebooted server does that
job just as well (if not better). But it does cause a problem for a
servlet that needs to save its state in its
<tt class="literal">destroy()</tt> method. For these servlets, the only
guaranteed solution is to save state more often. A
<a name="INDEX-577"></a>servlet may choose to save its state after
handling each request, such as a "chess server" servlet
should do, so that even if the server is restarted, the game can
resume with the latest board position. Other servlets may need to
save state only after some important value has changed--a
"shopping cart" servlet needs to save its state only when
a customer adds or removes an item from her cart. Last, for some
servlets, it's fine to lose a bit of the recent state changes.
These servlets can save state after some set number of requests. For
example, in our <tt class="literal">InitDestroyCounter</tt> example, it
should be satisfactory to save state every 10 accesses. To implement
this, we can add the following line at the end of
<tt class="literal">doGet()</tt>:
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-5"></a>
<p>[5] Unless you're so unlucky that your server crashes while
in the <tt class="literal">destroy()</tt> method. In that case, you may be
left with a partially-written state file--garbage written on top
of your previous state. To be perfectly safe, a servlet should save
its state to a temporary file and then copy that file on top of the
official state file in one command.</p> </blockquote>

<blockquote>
<pre class="programlisting">if (count % 10 == 0) saveState();</pre>
</blockquote>

<p>Does this addition make you cringe? It should. Think about
synchronization issues. We've opened up the possibility for
data loss if <tt class="literal">saveState()</tt> is executed by two
threads at the same time and the possibility for
<tt class="literal">saveState()</tt> not to be called at all if
<tt class="literal">count</tt> is incremented by several threads in a row
before the check. Note that this possibility did not exist when
<tt class="literal">saveState()</tt> was called only from the
<tt class="literal">destroy()</tt> method: the <tt class="literal">destroy()</tt>
method is called just once per servlet instance. Now that
<tt class="literal">saveState()</tt> is called in the
<tt class="literal">doGet()</tt> method, however, we need to reconsider. If
by some chance this servlet is accessed so frequently that it has
more than 10 concurrently executing threads, it's likely that
two servlets (10 requests apart) will be in
<tt class="literal">saveState()</tt> at the same time. This may result in a
corrupted data file. It's also possible the two threads will
increment <tt class="literal">count</tt> before either thread notices it
was time to call <tt class="literal">saveState()</tt>. The fix is easy:
move the <tt class="literal">count</tt> check into the synchronized block
where <tt class="literal">count</tt> is incremented:
</p>

<blockquote>
<pre class="programlisting">  int local_count;
  synchronized(this) {
    local_count = ++count;
    if (count % 10 == 0) saveState();
  }
  out.println("Since loading, this servlet has been accessed " +
              local_count + " times.");</pre>
</blockquote>

<p>The moral of the story is harder: always be vigilant to protect
servlet code from multithreaded access problems.
</p>

<p>Even though this series of counter examples demonstrates the servlet
life cycle, the counters themselves aren't particularly useful
because they count only the number of times they themselves have been
accessed. You can find two truly useful counters--that count
accesses to other pages--in the next chapter. <a name="INDEX-578"></a><a name="INDEX-579"></a><a name="INDEX-580"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.2. Servlet Reloading</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.4. Single-Thread Model</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
