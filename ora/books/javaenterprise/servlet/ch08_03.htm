<html>
<head>
<title>Secure Sockets Layer (SSL) (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Secure Sockets Layer (SSL)">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_01.htm">Chapter 8: Security</a></td><td align="right" valign="top" width="172"><a href="ch08_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">8.3. Secure Sockets Layer (SSL)</h2>

<p>The Secure Sockets Layer protocol, or SSL, sits between the
application-level protocol (in this case HTTP) and the low-level
transport protocol (for the Internet, almost exclusively TCP/IP). It
handles the details of security management using public key
cryptography to encrypt all client/server communication.
<a name="INDEX-1499"></a><a name="INDEX-1500"></a>SSL was introduced by Netscape with
Netscape Navigator 1. It has since become the de facto standard for
secure online communications and forms the basis of the Transport
Layer Security (TLS) protocol currently under development by the
Internet Engineering Task Force. For more information on TLS, see <a name="INDEX-1501"></a><a name="INDEX-1502"></a><a href="../../../../../../../www.ietf.org/">http://www.ietf.org/</a>.
</p>

<p>SSL Version 2.0, the version first to gain widespread acceptance,
includes support for <a name="INDEX-1503"></a><a name="INDEX-1504"></a>
server certificates only. It provides authentication of the server,
confidentiality, and integrity. Here's how it works:
</p>

<ol>
<li>
<p>A user connects to a secure site using the <a name="INDEX-1505"></a><a name="INDEX-1506"></a>
HTTPS (HTTP plus SSL) protocol. (You can detect sites using the HTTPS
protocol because their URLs begin with https: instead of http:.)
</p>
</li>
<li>
<p>The server signs its public key with its private key and sends it
back to the browser.
</p>
</li>
<li>
<p>The browser uses the server's public key to verify that the
same person who signed the key actually owns it.
</p>
</li>
<li>
<p>The browser checks to see whether a trusted certificate authority
signed the key. If one didn't, the browser asks the user if the
key can be trusted and proceeds as directed.
</p>
</li>
<li>
<p>The client generates a symmetric (<a name="INDEX-1507"></a><a name="INDEX-1508"></a><a name="INDEX-1509"></a>
DES) key for the session, which is encrypted with the server's
public key and sent back to the server. This new key is used to
encrypt all subsequent transactions. The symmetric key is used
because of the high computational cost of public key cryptosystems.
</p>
</li>
</ol>

<p>All this is completely transparent to servlets and servlet
developers. You just need to obtain an appropriate server
certificate, install it, and configure your server appropriately.
Information transferred between servlets and clients is now
encrypted. Voila, security!
</p>

<a name="ch08-5-fm2xml"></a>
<h3 class="sect2">8.3.1. SSL Client Authentication</h3>

<p>Our security toolbox now includes strong encryption and strong server
authentication, but only weak
<a name="INDEX-1510"></a>
client authentication. Of course, using SSL 2.0 puts us in better
shape because SSL-equipped servers can use the basic authentication
methods discussed at the beginning of this chapter without concern
for eavesdropping. We still don't have proof of client
identity, however--after all, anybody could have guessed or
gotten a hold of a client username and password.
</p>

<p>SSL 3.0 fixes this problem by providing support for client
<a name="INDEX-1511"></a><a name="INDEX-1512"></a>
certificates. These are the same type of certificates that servers
use, but they are registered to clients instead. As of this writing,
<a name="INDEX-1513"></a><a name="INDEX-1514"></a><a name="INDEX-1515"></a>
VeriSign claims to have distributed more than 750,000 client
certificates. SSL 3.0 with client authentication works the same way
as SSL 2.0, except that after the client has authenticated the
server, the server requests the client's certificate. The
client then sends its signed certificate, and the server performs the
same authentication process as the client did, comparing the client
certificate to a library of existing certificates (or simply storing
the certificate to identify the user on a return visit). As a
security precaution, many browsers require the client user to enter a
password before they will send the certificate.
</p>

<p>Once a client has been authenticated, the server can allow access to
protected resources such as servlets or files just as with HTTP
authentication. The whole process occurs transparently, without
inconveniencing the user. It also provides an extra level of
authentication because the server knows the client with a John Smith
certificate really is John Smith (and it can know which John Smith it
is by reading his unique certificate). The disadvantages of client
certificates are that users must obtain and install signed
certificates, servers must maintain a database of all accepted public
keys, and servers must support SSL 3.0 in the first place. As of this
writing, most do, including the
<a name="INDEX-1516"></a><a name="INDEX-1517"></a><a name="INDEX-1518"></a>Java Web Server.
</p>


<a name="ch08-6-fm2xml"></a>
<h3 class="sect2">8.3.2. Retrieving SSL Authentication Information</h3>

<p>As with basic and digest authentication, all of this communication is
transparent to servlets. It is sometimes possible, though, for a
servlet to retrieve the relevant SSL authentication information. The
<a name="INDEX-1519"></a><a name="INDEX-1520"></a>
java.security package has some basic support for manipulating digital
certificates and signatures. To retrieve a client's digital
information, however, a servlet has to rely on a server-specific
implementation of the request's <tt class="literal">getAttribute()</tt> method. <a href="#ch08-39450">Example 8-6</a> (reprinted from <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_01.htm">Chapter 4, "Retrieving Information"</a>)
<a name="INDEX-1521"></a>shows how to use getAttribute() to
fetch the details of a client's certificates. Remember that
this works only for the Java Web Server. Other servlet
implementations, if they include this functionality at all, are
likely to do it in a slightly different way, although we hope that
they build on Java's standard signature support.
</p>

<p>
</p>

<a name="ch08-39450"></a>
<div class="example">
<h4 class="objtitle">Example 8-6. Examining client certificates </h4>
<blockquote>
<pre class="programlisting">import javax.security.cert.X509Certificate;

out.println("&lt;PRE&gt;");

// Display the cipher suite in use
String cipherSuite = 
  (String) req.getAttribute("javax.net.ssl.cipher_suite");
out.println("Cipher Suite: " + cipherSuite);

// Display the client's certificates, if there are any
if (cipherSuite != null) {
  X509Certificate certChain[] = 
    (X509Certificate[]) req.getAttribute("javax.net.ssl.peer_certificates");
  if (certChain != null) {
    for (int i = 0; i &lt; certChain.length; i++) {
      out.println ("Client Certificate [" + i + "] = "
                      + certChain[i].toString());
    }
  }
}
out.println("&lt;/PRE&gt;");</pre>
</blockquote>
</div>

<p>Here's the output we first saw in <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_01.htm">Chapter 4, "Retrieving Information"</a>:</p>

<blockquote>
<pre class="programlisting">Cipher Suite:  SSL_RSA_EXPORT_WITH_RC4_40_MD5
Client Certificate [0] = [
  X.509v3 certificate,
  Subject is OID.1.2.840.113549.1.9.1=#160F6A68756E746572407367692E636F6D,
CN=Jason Hunter, OU=Digital ID Class 1 - Netscape,
OU="www.verisign.com/repository/CPS Incorp. by Ref.,LIAB.LTD(c)96",
OU=VeriSign Class 1 CA - Individual Subscriber, O="VeriSign, Inc.", L=Internet
  Key:  algorithm = [RSA], exponent = 0x    010001, modulus = 
    b35ed5e7 45fc5328 e3f5ce70 838cc25d 0a0efd41 df4d3e1b 64f70617 528546c8
    fae46995 9922a093 7a54584d d466bee7 e7b5c259 c7827489 6478e1a9 3a16d45f
  Validity  until 
  Issuer is OU=VeriSign Class 1 CA - Individual Subscriber, O="VeriSign, Inc.", 
L=Internet
  Issuer signature used [MD5withRSA]
  Serial number =     20556dc0 9e31dfa4 ada6e10d 77954704 
]
Client Certificate [1] = [
  X.509v3 certificate,
  Subject is OU=VeriSign Class 1 CA - Individual Subscriber, O="VeriSign,
Inc.", L=Internet
  Key:  algorithm = [RSA], exponent = 0x    010001, modulus = 
    b614a6cf 4dd0050d d8ca23d0 6faab429 92638e2c f86f96d7 2e9d764b 11b1368d
    57c9c3fd 1cc6bafe 1e08ba33 ca95eabe e35bcd06 a8b7791d 442aed73 f2b15283
    68107064 91d73e6b f9f75d9d 14439b6e 97459881 47d12dcb ddbb72d7 4c3f71aa
    e240f254 39bc16ee cf7cecba db3f6c2a b316b186 129dae93 34d5b8d5 d0f73ea9
  Validity  until 
  Issuer is OU=Class 1 Public Primary Certification Authority, O="VeriSign,
Inc.", C=US
  Issuer signature used [MD2withRSA]
  Serial number =     521f351d f2707e00 2bbeca59 8704d539 
]</pre>
</blockquote>

<p>The first certificate is the user's public key. The second is
VeriSign's signature that vouches for the authenticity of the
first signature. Of course, the information from these certificate
chains isn't particularly useful to the application programmer.
In some applications, it is safe to simply assume that a user is
authorized if she got past the SSL authentication phase. For others,
the certificates can be picked apart using the
<tt class="literal">javax.security.cert.X509Certificate</tt> class. More commonly, a web
server allows you to assign a username to each certificate you tell
it to accept. Servlets can then call
<a name="INDEX-1522"></a><a name="INDEX-1523"></a>
getRemoteUser() to get a unique username. The latter solution works
with almost all web servers.
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch08_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">8.2. Digital Certificates</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">8.4. Running Servlets Securely</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
