<html>
<head>
<title>Database Connectivity (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Database Connectivity">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm">Java Servlet Programming</a></td><td align="right" valign="top" width="172"><a href="ch09_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 9.  Database Connectivity</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_01.htm">Relational Databases</a>
<br>
<a href="ch09_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_02.htm">The JDBC API</a>
<br>
<a href="ch09_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_03.htm">Reusing Database Objects</a>
<br>
<a href="ch09_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_04.htm">Transactions</a>
<br>
<a href="ch09_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_05.htm">Advanced JDBC Techniques</a>
<br>
</p>
</div>


<p>
<a name="INDEX-1554"></a>It's
<a name="INDEX-1555"></a>hard to find a professional web
site today that doesn't have some sort of database
connectivity. Webmasters have hooked online front ends to all manner
of legacy systems, including package tracking and directory
databases, as well as many newer systems like online messaging,
storefronts, and search engines. But web-database interaction comes
with a price: database-backed web sites can be difficult to develop
and can often exact heavy performance penalties. Still, for many web
sites, especially intranet applications, database connectivity is
just too useful to let go. More and more, databases are driving the
Web.
</p>

<p>This chapter introduces relational databases, the Structured Query
Language (SQL) used to manipulate those databases, and the Java
database connectivity (<a name="INDEX-1556"></a>JDBC) API itself.
Servlets, with their enduring life cycle, and JDBC, a well-defined
database-independent database connectivity API, are an elegant and
efficient solution for webmasters who need to hook their web sites to
back-end databases. In fact, both of your authors started working
with servlets specifically because of this efficiency and elegance.
Although elsewhere in the book we have assumed that you are familiar
with Java, this chapter breaks that assumption and begins with a
quick course in JDBC.
</p>

<p>The biggest advantage for servlets with regard to database
<a name="INDEX-1557"></a><a name="INDEX-1558"></a><a name="INDEX-1559"></a>connectivity is that the servlet
life cycle (explained in depth in <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_01.htm">Chapter 3, "The Servlet Life Cycle"</a>)
allows servlets to maintain open database connections. An existing
connection can trim several seconds from a response time, compared to
a CGI script that has to reestablish its connection for every
invocation. Exactly how to maintain the database connection depends
on the task at hand, and this chapter demonstrates several techniques
appropriate for different tasks.
</p>

<p>Another advantage of servlets over CGI and many other technologies is
that JDBC is database-independent. A servlet written to access a
Sybase database can, with a two-line modification or a change in a
properties file, begin accessing an Oracle database (assuming none of
the database calls it makes are vendor-specific). In fact, you should
notice that the examples in this chapter are written to access a
variety of different databases, including ODBC data sources (such as
Microsoft Access), Oracle, and Sybase.
</p>

<a name="ch09-2-fm2xml"></a>
<div class="sidebar">
<h4 class="objtitle">Servlets in the Middle Tier</h4>

<p>One common place for servlets, especially servlets that access a
database, is in what's called the middle tier. A middle
<a name="INDEX-1560"></a>tier is something
that helps connect one endpoint to another (an applet to a database,
for example) and along the way adds a little something of its own.
</p>

<p>The most compelling reason for putting a middle tier between a client
and our ultimate date source is that software in the middle tier
(commonly referred to as middleware) can include business logic.
Business logic abstracts complicated low-level tasks (such as
updating database tables) into high-level tasks (placing and order),
making the whole operation simpler and safer.
</p>

<p>Imagine a client application that places an order. Without
middleware, the application has to connect directly to the database
server that stores the order records and then change the database
fields to reflect the order. If the database server changes in any
way (by moving to a different machine, altering its internal table
structure, or changing database vendors), the client may break. Even
worse, if someone makes a minor change to the client (either
intentionally or accidentally), it's possible for the database
to record orders without first receiving payment or to reject
perfectly valid entries.
</p>

<p>Middleware uses business logic to abstract the ordering process.
Middleware accepts information about the order (for example, name,
address, item, quantity, credit card number), sanity-checks the
information, verifies that the credit card is valid, and enters the
information into the database. Should the database change, the
middleware can be updated without any changes in the client. Even if
the orders database is temporarily replaced with a simple flat file
order log, the middleware can present the same appearance to the
client.
</p>

<p>Middleware can improve efficiency by spreading the processing load
across several back-end servers (CPU servers, database servers, file
servers, directory servers, etc.). Middleware can also make more
efficient use of bandwidth: instead of having a client perform the
back-and-forth communication with the server over what might be a
slow network connection, the client can tell the middleware what it
needs and the middleware can do the work using a fast network
connection and probably pooled database connections.
</p>

<p>On the Web, middle tiers are often implemented using servlets.
Servlets provide a convenient way to connect clients built using HTML
forms or applets to back-end servers. A client communicates its
requirements to the servlet using HTTP, and the business logic in the
servlet handles the request by connecting to the back-end server.
(More information on applet-servlet communication is coming up in
<a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch10_01.htm">Chapter 10, "Applet-Servlet Communication"</a>.)
</p>

<p>Servlets sometimes use another middle tier to connect to a database.  If a web browser sends an HTML form with order information to a servlet, that servlet may parse the information and make an RMI call to middleware on another machine that has the responsibility for handling all orders--from servlets as well as standalone programs. In these cases, what was once three tiers is now four tiers.</p>
</div>



<h2 class="sect1">9.1. Relational Databases</h2>

<p>
<a name="INDEX-1561"></a>In some earlier examples,
we've seen servlets that used file storage on the local disk to
store their persistent data. The use of a flat file is fine for a
small amount of data, but it can quickly get out of control. As the
amount of data grows, access times slow to a crawl. And just finding
data can become quite a challenge: imagine storing the names, cities,
and email addresses of all your customers in a text file. It works
great for a company that is just starting out, but what happens when
you have hundreds of thousands of customers and want to display a
list of all your customers in Boston with email addresses ending in
"aol.com"?
</p>

<p>One of the best solutions to this problem is a
<a name="INDEX-1562"></a><a name="INDEX-1563"></a>Relational Database
Management System (RDBMS). At the most basic level, an
<a name="INDEX-1564"></a>
RDBMS organizes data into tables. These tables are organized into
rows and columns, much like a spreadsheet. Particular rows and
columns in a table can be related (hence the term
"relational") to one or more rows and columns in another
table.
</p>

<p>One table in a relational database might contain information about
customers, another might contain orders, and a third might contain
information about individual items within an order. By including
unique identifiers (say, customer numbers and order numbers), orders
from the orders table can be linked to customer records and
individual order components. <a href="#ch09-13211">Figure 9-1</a> shows how
this might look if we drew it out on paper.
</p>

<a name="ch09-13211"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0901.gif" webstripperlinkwas="figs/jsp_0901.gif"></div>
<h4 class="objtitle">Figure 9-1. Related tables</h4>

<p>Data in the tables can be read, updated, appended, and deleted using
the Structured Query Language, or
<a name="INDEX-1565"></a>
SQL, sometimes also referred to as the <a name="INDEX-1566"></a>Standard Query
Language. Java's JDBC API introduced in JDK 1.1 uses a specific
subset of SQL known as ANSI SQL-2 Entry Level. Unlike most
programming languages, SQL is declarative: you say what you want, and
the SQL interpreter gives it to you. Other languages, like C, C++,
and Java, by contrast, are essentially procedural, in that you
specify the steps required to perform a certain task. SQL, while not
prohibitively complex, is also rather too broad a subject to cover in
great (or, indeed, merely adequate) detail here. In order to make the
rest of the examples in this chapter comprehensible, though,
here's a brief tutorial.
</p>

<p>The simplest and most common SQL expression is the
<tt class="literal">SELECT</tt><a name="INDEX-1567"></a><a name="INDEX-1568"></a>statement, which queries the
database and returns a set of rows that matches a set of search
criteria. For example, the following <tt class="literal">SELECT
</tt>statement selects everything from the <tt class="literal">CUSTOMERS
</tt>table:
</p>

<blockquote>
<pre class="programlisting">SELECT * FROM CUSTOMERS</pre>
</blockquote>

<p>SQL keywords like <tt class="literal">SELECT</tt> and
<tt class="literal">FROM</tt> and objects like <tt class="literal">CUSTOMERS</tt>
are case insensitive but frequently written in uppercase. When run in
Oracle's SQL*PLUS SQL interpreter, this query would produce
something like the following output:
</p>

<blockquote>
<pre class="programlisting">CUSTOMER_ID   NAME                          PHONE
------------- ----------------------------- ---------------
1             Bob Copier                    617 555-1212
2             Janet Stapler                 617 555-1213
3             Joel Laptop                   508 555-7171
4             Larry Coffee                  212 555-6525</pre>
</blockquote>

<p>More advanced statements might restrict the query to particular
columns or include some specific limiting criteria:
</p>

<blockquote>
<pre class="programlisting">SELECT ORDER_ID, CUSTOMER_ID, TOTAL FROM ORDERS
WHERE ORDER_ID = 4</pre>
</blockquote>

<p>This statement selects the <tt class="literal">ORDER_ID</tt>,
<tt class="literal">CUSTOMER_ID</tt>, and <tt class="literal">TOTAL</tt> columns
from all records where the <tt class="literal">ORDER_ID</tt> field is equal
to 4. Here's a possible result:
</p>

<blockquote>
<pre class="programlisting"> ORDER_ID CUSTOMER_ID     TOTAL
--------- ----------- ---------
        4           1     72.19</pre>
</blockquote>

<p>A <tt class="literal">SELECT</tt> statement can also link two or more
tables based on the values of particular fields. This can be either a
one-to-one relationship or, more typically, a one-to-many relation,
such as one customer to several orders:
</p>

<blockquote>
<pre class="programlisting">
<tt class="command">SELECT CUSTOMERS.NAME, ORDERS.TOTAL FROM CUSTOMERS, ORDERS </tt>
<tt class="command">WHERE ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID AND ORDERS.ORDER_ID = 4</tt>
</pre>
</blockquote>

<p>This statement connects (or, in database parlance, joins) the
<tt class="literal">CUSTOMERS</tt> table with the <tt class="literal">ORDERS</tt>
table via the <tt class="literal">CUSTOMER_ID</tt> field. Note that both
tables have this field. The query returns information from both
tables: the name of the customer who made order 4 and the total cost
of that order. Here's some possible output: <a name="INDEX-1569"></a><a name="INDEX-1570"></a>
</p>

<blockquote>
<pre class="programlisting">NAME                             TOTAL
-------------------------------- ---------
Bob Copier                       72.19</pre>
</blockquote>

<p>SQL is also used to update the database. For example:</p>

<blockquote>
<pre class="programlisting">INSERT INTO CUSTOMERS (CUSTOMER_ID, NAME, PHONE) 
  VALUES (5, "Bob Smith", "555 123-3456")
UPDATE CUSTOMERS SET NAME = "Robert Copier" WHERE CUSTOMER_ID = 1
DELETE FROM CUSTOMERS WHERE CUSTOMER_ID = 2</pre>
</blockquote>

<p>The first statement creates a new record in the
<tt class="literal">CUSTOMERS</tt> table, filling in the
<tt class="literal">CUSTOMER_ID</tt>, <tt class="literal">NAME</tt>, and
<tt class="literal">PHONE</tt> fields with certain values. The second
updates an existing record, changing the value of the
<tt class="literal">NAME</tt> field for a specific customer. The last
deletes any records with a <tt class="literal">CUSTOMER_ID</tt> of 2. Be
very careful with all of these statements, especially
<tt class="literal">DELETE. </tt>A <tt class="literal">DELETE
</tt><a name="INDEX-1571"></a><a name="INDEX-1572"></a>statement without a <tt class="literal">WHERE
</tt>clause will remove all the records in the table!
</p>

<p>For a good primer on relational databases and SQL, we
<a name="INDEX-1573"></a><a name="INDEX-1574"></a>recommend
<em class="emphasis">SQL for Dummies</em><a name="INDEX-1575"></a><a name="INDEX-1576"></a>, by Allen G. Taylor (IDG Books
Worldwide).
</p>












<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch09_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">8.4. Running Servlets Securely</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">9.2. The JDBC API</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
