<html>
<head>
<title>The Session Tracking API (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The Session Tracking API">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch07_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch07_01.htm">Chapter 7: Session Tracking</a></td><td align="right" valign="top" width="172"><a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">7.5. The Session Tracking API</h2>

<p>Fortunately for us servlet developers, it's not always
necessary for a servlet to manage its own sessions using the
techniques we have just discussed. The Servlet <a name="INDEX-1329"></a>
API provides several methods and classes specifically designed to
handle session tracking on behalf of servlets. In other words,
servlets have built in
<a name="INDEX-1330"></a><a name="INDEX-1331"></a>session tracking.<a href="#FOOTNOTE-2">[2]</a>
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-2"></a>
<p>[2]
Yes, we do feel a little like the third grade teacher who taught you
all the steps of long division, only to reveal later how you could
use a calculator to do the same thing. But we believe, as your
teacher probably did, that you better understand the concepts after
first learning the traditional approach.</p> </blockquote>

<p>The Session Tracking API, as we call the portion of the Servlet API
devoted to session tracking, should be supported in any web server
that supports servlets. The level of support, however, depends on the
server. The minimal implementation provided by the servlet classes in
<a name="INDEX-1332"></a><a name="INDEX-1333"></a>JSDK 2.0 manages sessions
through the use of persistent cookies. A server can build on this
base to provide additional features and capabilities. For example,
the <a name="INDEX-1334"></a><a name="INDEX-1335"></a>
Java Web Server has the ability to revert to using URL rewriting when
cookies fail, and it allows session objects to be written to the
server's disk as memory fills up or when the server shuts down.
(The items you place in the session need to implement the
<tt class="literal">Serializable</tt> interface to take advantage of this
option.) See your server's documentation for details pertaining
to your server. The rest of this section describe the
lowest-common-denominator functionality provided by Version 2.0 of
the Servlet API.
</p>

<a name="ch07-4-fm2xml"></a>
<h3 class="sect2">7.5.1. Session-Tracking Basics</h3>

<p>Session tracking is wonderfully elegant. Every user of a site is
associated with a
<tt class="literal">javax.servlet.http.HttpSession</tt><a name="INDEX-1336"></a><a name="INDEX-1337"></a>
object that servlets can use to store or retrieve information about
that user. You can save any set of arbitrary Java objects in a
<a name="INDEX-1338"></a>session
object. For example, a user's session object provides a
convenient location for a servlet to store the user's shopping
cart contents or, as you'll see in <a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_01.htm">Chapter 9, "Database Connectivity"</a>, the user's database connection.
</p>

<p>A servlet uses its request object's
<tt class="literal">getSession()</tt><a name="INDEX-1339"></a><a name="INDEX-1340"></a><a name="INDEX-1341"></a><a name="INDEX-1342"></a> method
to retrieve the current <tt class="literal">HttpSession</tt> object:
</p>

<blockquote>
<pre class="programlisting">public HttpSession HttpServletRequest.getSession(boolean create)</pre>
</blockquote>

<p>This method returns the current session associated with the user
making the request. If the user has no current valid session, this
method creates one if <tt class="literal">create</tt> is
<tt class="literal">true</tt> or returns <tt class="literal">null</tt> if
<tt class="literal">create</tt> is <tt class="literal">false</tt>. To ensure the
session is properly maintained, this method must be called at least
once before any output is written to the response.
</p>

<p>You can add data to an <tt class="literal">HttpSession</tt> object with the
<tt class="literal">putValue()</tt><a name="INDEX-1343"></a><a name="INDEX-1344"></a><a name="INDEX-1345"></a><a name="INDEX-1346"></a>
method:
</p>

<blockquote>
<pre class="programlisting">public void HttpSession.putValue(String name, Object value)</pre>
</blockquote>

<p>This method binds the specified object value under the specified
name. Any existing binding with the same name is replaced. To
retrieve an object from a session, use
<tt class="literal">getValue()</tt><a name="INDEX-1347"></a><a name="INDEX-1348"></a><a name="INDEX-1349"></a><a name="INDEX-1350"></a>:
</p>

<blockquote>
<pre class="programlisting">public Object HttpSession.getValue(String name) </pre>
</blockquote>

<p>This methods returns the object bound under the specified name or
<tt class="literal">null</tt> if there is no binding. You can also get the
names of all of the objects bound to a session with
<tt class="literal">getValueNames()</tt><a name="INDEX-1351"></a><a name="INDEX-1352"></a><a name="INDEX-1353"></a><a name="INDEX-1354"></a>:
</p>

<blockquote>
<pre class="programlisting">public String[] HttpSession.getValueNames() </pre>
</blockquote>

<p>This method returns an array that contains the names of all objects
bound to this session or an empty (zero length) array if there are no
bindings. Finally, you can remove an object from a session with
<tt class="literal">removeValue()</tt><a name="INDEX-1355"></a><a name="INDEX-1356"></a><a name="INDEX-1357"></a><a name="INDEX-1358"></a>:
</p>

<blockquote>
<pre class="programlisting">public void HttpSession.removeValue(String name) </pre>
</blockquote>

<p>This method removes the object bound to the specified name or does
nothing if there is no binding. Each of these methods can throw a
<tt class="literal">java.lang.IllegalStateException</tt> if the session
being accessed is invalid (we'll discuss invalid sessions in an
upcoming section).
</p>


<a name="ch07-5-fm2xml"></a>
<h3 class="sect2">7.5.2. A Hit Count Using Session Tracking</h3>

<p>
<a href="#ch07-39645">Example 7-4</a> shows a simple servlet that uses
<a name="INDEX-1359"></a>session tracking to count the number
of times a client has accessed it, as shown in <a href="#ch07-10752">Figure 7-2</a>. The servlet also displays all the bindings
for the current session, just because it can.
</p>

<a name="ch07-39645"></a>
<div class="example">
<h4 class="objtitle">Example 7-4. Session tracking a hit count </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class SessionTracker extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    // Get the current session object, create one if necessary
    HttpSession session = req.getSession(true);

    // Increment the hit count for this page. The value is saved
    // in this client's session under the name "tracker.count".
    Integer count = (Integer)session.getValue("tracker.count");
    if (count == null)
      count = new Integer(1);
    else
      count = new Integer(count.intValue() + 1);
    session.putValue("tracker.count", count);

    out.println("&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;SessionTracker&lt;/TITLE&gt;&lt;/HEAD&gt;");
    out.println("&lt;BODY&gt;&lt;H1&gt;Session Tracking Demo&lt;/H1&gt;");

    // Display the hit count for this page
    out.println("You've visited this page " + count + 
      ((count.intValue() == 1) ? " time." : " times."));

    out.println("&lt;P&gt;");

    out.println("&lt;H2&gt;Here is your session data:&lt;/H2&gt;");
    String[] names = session.getValueNames();
    for (int i = 0; i &lt; names.length; i++) {
      out.println(names[i] + ": " + session.getValue(names[i]) + "&lt;BR&gt;");
    }
    out.println("&lt;/BODY&gt;&lt;/HTML&gt;");
  }
}</pre>
</blockquote>
</div>

<a name="ch07-10752"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0702.gif" webstripperlinkwas="figs/jsp_0702.gif"></div>
<h4 class="objtitle">Figure 7-2. Counting client visits</h4>

<p>This servlet first gets the <tt class="literal">HttpSession</tt> object
associated with the current client. By passing
<tt class="literal">true</tt> to <tt class="literal">getSession()</tt>, it asks
for a session to be created if necessary. The servlet then gets the
<tt class="literal">Integer</tt> object bound to the name
<tt class="literal">"tracker.count"</tt>. If there is no such object, the
servlet starts a new count. Otherwise, it replaces the
<tt class="literal">Integer</tt> with a new <tt class="literal">Integer</tt>
whose value has been incremented by one. Finally, the servlet
displays the current count and all the current name/value pairs in
the session.
</p>


<a name="ch07-6-fm2xml"></a>
<h3 class="sect2">7.5.3. The Session Life Cycle</h3>

<p>
<a name="INDEX-1360"></a><a name="INDEX-1361"></a>Sessions do
not last forever. A session either expires automatically, after a set
time of inactivity (for the Java Web Server the default is 30
minutes), or manually, when it is explicitly invalidated by a
servlet. When a session expires (or is invalidated), the
<tt class="literal">HttpSession</tt> object and the data values it contains
are removed from the system.
</p>

<p>Beware that any information saved in a user's session object is
lost when the session is invalidated. If you need to retain
information beyond that time, you should keep it in an external
location (such as a database) and store a handle to the external data
in the session object (or your own persistant cookie).
</p>

<p>There are several methods involved in managing the session life cycle:</p>

<dl>
<dt>
<b><tt class="literal">public boolean HttpSession.isNew()</tt>
<a name="INDEX-1362"></a>
<a name="INDEX-1363"></a>
<a name="INDEX-1364"></a>
</b>
</dt>
<dd>
<p>This method returns whether the
<a name="INDEX-1365"></a>
session is new. A session is considered new if it has been created by
the server but the client has not yet acknowledged joining the
session. For example, if a server supports only cookie-based sessions
and a client has completely disabled the use of cookies, calls to the
<tt class="literal">getSession()</tt> method of
<tt class="literal">HttpServletRequest</tt> always return new sessions.
</p>
</dd>

<dt>
<b><tt class="literal">public void HttpSession.invalidate()</tt>
<a name="INDEX-1366"></a>
<a name="INDEX-1367"></a>
<a name="INDEX-1368"></a>
</b>
</dt>
<dd>
<p>This method causes the
<a name="INDEX-1369"></a>
session to be immediately invalidated. All objects stored in the
session are unbound.
</p>
</dd>

<dt>
<b><tt class="literal">public long HttpSession.getCreationTime()</tt>
<a name="INDEX-1370"></a>
<a name="INDEX-1371"></a>
<a name="INDEX-1372"></a>
</b>
</dt>
<dd>
<p>This method returns the
<a name="INDEX-1373"></a>time at which the
<a name="INDEX-1374"></a>session was created, as a
<tt class="literal">long</tt> value that represents the number of
milliseconds since the epoch (midnight, January 1, 1970, GMT).
</p>
</dd>

<dt>
<b><tt class="literal">public long HttpSession.getLastAccessedTime()</tt>
<a name="INDEX-1375"></a>
<a name="INDEX-1376"></a>
<a name="INDEX-1377"></a>
</b>
</dt>
<dd>
<p>This method returns the
<a name="INDEX-1378"></a>time at which the client last sent a
request associated with this
<a name="INDEX-1379"></a>session, as a <tt class="literal">long</tt>
value that represents the number of milliseconds since the epoch.
</p>
</dd>

</dl>

<p>Each of these methods can throw a
<tt class="literal">java.lang.IllegalStateException</tt> if the session
being accessed is invalid.<a name="INDEX-1380"></a><a name="INDEX-1381"></a>
</p>


<a name="ch07-7-fm2xml"></a>
<h3 class="sect2">7.5.4. Manually Invalidating a Stale Session</h3>

<p>To demonstrate these methods, <a href="#ch07-26536">Example 7-5</a> shows a
<a name="INDEX-1382"></a>servlet that manually invalidates a
session if it is more than a day old or has been inactive for more
than an hour.
</p>

<a name="ch07-26536"></a>
<div class="example">
<h4 class="objtitle">Example 7-5. Invalidating a stale session </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class ManualInvalidate extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    // Get the current session object, create one if necessary
    HttpSession session = req.getSession(true);

    // Invalidate the session if it's more than a day old or has been
    // inactive for more than an hour.
    if (!session.isNew()) {  // skip new sessions
      Date dayAgo = new Date(System.currentTimeMillis() - 24*60*60*1000);
      Date hourAgo = new Date(System.currentTimeMillis() - 60*60*1000);
      Date created = new Date(session.getCreationTime());
      Date accessed = new Date(session.getLastAccessedTime());

      if (created.before(dayAgo) || accessed.before(hourAgo)) {
        session.invalidate();
        session = req.getSession(true);  // get a new session
      }
    }

    // Continue processing...
  }
}</pre>
</blockquote>
</div>


<a name="ch07-8-fm2xml"></a>
<h3 class="sect2">7.5.5. Putting Sessions in Context</h3>

<p>So, how does a web server implement
<a name="INDEX-1383"></a>session tracking? When a user first
accesses the site, that user is assigned a new
<tt class="literal">HttpSession</tt> object and a unique session ID. The
session ID identifies the user and is used to match the user with the
<tt class="literal">HttpSession</tt> object in subsequent requests. Behind
the scenes, the session ID is usually saved on the client in a cookie
or sent as part of a rewritten URL. Other implementations, such as
using SSL (Secure Sockets Layer) sessions, are also possible.
</p>

<p>A servlet can discover a session's ID with the
<tt class="literal">getId()</tt> method:
</p>

<blockquote>
<pre class="programlisting">public String HttpSession.getId()</pre>
</blockquote>

<p>This method returns the unique <tt class="literal">String</tt> identifier
assigned to this session. For example, a Java Web Server ID might be
something like HT04D1QAAAAABQDGPM5QAAA. The method throws an
<tt class="literal">IllegalState-Exception</tt> if the session is invalid.
</p>

<p>All valid sessions are grouped together in a
<tt class="literal">HttpSessionContext</tt><a name="INDEX-1384"></a><a name="INDEX-1385"></a>
object. Theoretically, a server may have multiple session contexts,
although in practice most have just one. A reference to the
server's <tt class="literal">HttpSessionContext</tt> is available via
any session object's
<tt class="literal">getSessionContext()</tt><a name="INDEX-1386"></a><a name="INDEX-1387"></a>
method:
</p>

<blockquote>
<pre class="programlisting">public HttpSessionContext HttpSession.getSessionContext()</pre>
</blockquote>

<p>This method returns the context in which the session is bound. It
throws an <tt class="literal">IllegalStateException</tt> if the session is
invalid.
</p>

<p>Once you have an <tt class="literal">HttpSessionContext</tt>, it's
possible to use it to examine all the currently valid sessions with
the following two methods:
</p>

<blockquote>
<pre class="programlisting">public Enumeration HttpSessionContext.getIds()
public HttpSession HttpSessionContext.getSession(String sessionId)</pre>
</blockquote>

<p>The <tt class="literal">getIds()</tt><a name="INDEX-1388"></a><a name="INDEX-1389"></a>
method returns an <tt class="literal">Enumeration</tt> that contains the
<a name="INDEX-1390"></a>session IDs for all the currently valid
sessions in this context or an empty <tt class="literal">Enumeration</tt>
if there are no valid sessions.
<tt class="literal">getSession()</tt><a name="INDEX-1391"></a><a name="INDEX-1392"></a>
returns the session associated with the given session ID. The session
IDs returned by <tt class="literal">getIds()</tt> should be held as a
server secret because any client with knowledge of another
client's session ID can, with a forged cookie or URL, join the
second client's session.
</p>


<a name="ch07-9-fm2xml"></a>
<h3 class="sect2">7.5.6. Manually Invalidating All Stale Sessions</h3>

<p>
<a href="#ch07-15153">Example 7-6</a> demonstrates the use of these methods
with a <a name="INDEX-1393"></a>servlet that manually invalidates
all the sessions on the server that are more than a day old or have
been inactive more than an hour.
</p>

<a name="ch07-15153"></a>
<div class="example">
<h4 class="objtitle">Example 7-6. Invalidating all stale sessions </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class ManualInvalidateScan extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();

    // Get the current session object, create one if necessary
    HttpSession dummySession = req.getSession(true);

    // Use the session to get the session context
    HttpSessionContext context = dummySession.getSessionContext();

    // Use the session context to get a list of session IDs
    Enumeration ids = context.getIds();

    // Iterate over the session IDs checking for stale sessions
    while (ids.hasMoreElements()) {
      String id = (String)ids.nextElement();
      out.println("Checking " + id + "...");
      HttpSession session = context.getSession(id);

      // Invalidate the session if it's more than a day old or has been
      // inactive for more than an hour.
      Date dayAgo = new Date(System.currentTimeMillis() - 24*60*60*1000);
      Date hourAgo = new Date(System.currentTimeMillis() - 60*60*1000);
      Date created = new Date(session.getCreationTime());
      Date accessed = new Date(session.getLastAccessedTime());

      if (created.before(dayAgo)) {
        out.println("More than a day old, invalidated!");
        session.invalidate();
      }
      else if (accessed.before(hourAgo)) {
        out.println("More than an hour inactive, invalidated!");
        session.invalidate();
      }
      else {
        out.println("Still valid.");
      }
      out.println();
    }
  }
}</pre>
</blockquote>
</div>

<p>A servlet that manually invalidates sessions according to arbitrary
rules is useful on servers with limited session expiration
capabilities.
</p>


<a name="ch07-10-fm2xml"></a>
<h3 class="sect2">7.5.7. Storing Session IDs</h3>

<p>Every server that supports servlets should implement at least
cookie-based session tracking, where the session ID is saved on the
client in a persistent cookie. Many web servers also support session
tracking based on URL rewriting, as a fallback for browsers that
don't accept cookies. This requires additional help from
servlets.
</p>

<p>For a servlet to support session tracking via URL rewriting, it has
to rewrite every local URL before sending it to the client. The
Servlet API provides two methods to perform this encoding:
</p>

<dl>
<dt>
<b><tt class="literal">public String  HttpServletResponse.encodeUrl(String url)</tt>
<a name="INDEX-1394"></a>
<a name="INDEX-1395"></a>
<a name="INDEX-1396"></a>
</b>
</dt>
<dd>
<p>This method encodes (rewrites) the specified URL to include the
session ID and returns the new URL, or, if encoding is not needed or
not supported, it leaves the URL unchanged. The rules used to decide
when and how to encode a URL are server-specific. All URLs emitted by
a servlet should be run through this method.
</p>
</dd>

<dt>
<b><tt class="literal">public String HttpServletResponse.encodeRedirectUrl(String url)</tt>
<a name="INDEX-1397"></a>
<a name="INDEX-1398"></a>
<a name="INDEX-1399"></a>
</b>
</dt>
<dd>
<p>This method encodes (rewrites) the specified URL to include the
session ID and returns the new URL, or, if encoding is not needed or
not supported, it leaves the URL unchanged. The rules used to decide
when and how to encode a URL are server-specific. This method may use
different rules than <tt class="literal">encodeUrl()</tt>. All URLs passed
to the <tt class="literal">sendRedirect()</tt> method of
<tt class="literal">HttpServletResponse</tt> should be run through this
method.
</p>
</dd>

</dl>

<p>Note that <tt class="literal">encodeUrl()</tt> and
<tt class="literal">encodeRedirectedUrl()</tt> employ a different
capitalization scheme than <tt class="literal">getRequestURL()</tt> and
<tt class="literal">getRequestURI()</tt>. The following code snippet shows
a servlet writing a link to itself that is encoded to contain the
current session ID:
</p>

<blockquote>
<pre class="programlisting">out.println("Click &lt;A HREF=\"" +
            res.encodeUrl(req.getRequestURI()) + "\"&gt;here&lt;/A&gt;");
out.println("to reload this page.");</pre>
</blockquote>

<p>On servers that don't support URL rewriting or have URL
rewriting turned off, the resulting URL remains unchanged. Now
here's a code snippet that shows a servlet redirecting the user
to a URL encoded to contain the session ID:
</p>

<blockquote>
<pre class="programlisting">res.sendRedirect(res.encodeRedirectUrl("/servlet/NewServlet"));</pre>
</blockquote>

<p>On servers that don't support URL rewriting or have URL
rewriting turned off, the resulting URL remains unchanged.
</p>

<p>A servlet can detect whether the session ID used to identify the
current <tt class="literal">HttpSession</tt> object came from a cookie or
from an encoded URL using the
<tt class="literal">isRequestedSessionIdFromCookie()</tt><a name="INDEX-1400"></a><a name="INDEX-1401"></a> and
<tt class="literal">isRequestedSessionIdFromUrl()</tt><a name="INDEX-1402"></a><a name="INDEX-1403"></a>
methods:
</p>

<blockquote>
<pre class="programlisting">public boolean HttpServletRequest.isRequestedSessionIdFromCookie()
public boolean HttpServletRequest.isRequestedSessionIdFromUrl()</pre>
</blockquote>

<p>Determining if the session ID came from another source, such as an
SSL session, is not currently possible.
</p>

<p>A requested session ID may not match the ID of the session returned
by the <tt class="literal">getSession()</tt> method, such as when the
session ID is invalid. A servlet can determine whether a requested
session ID is valid using <tt class="literal">isRequestedSession-
IdValid()</tt><a name="INDEX-1404"></a><a name="INDEX-1405"></a>
: <a name="INDEX-1406"></a>
</p>

<blockquote>
<pre class="programlisting">public boolean HttpServletRequest.isRequestedSessionIdValid()</pre>
</blockquote>


<a name="ch07-11-fm2xml"></a>
<h3 class="sect2">7.5.8. Session Snoop</h3>

<p>The <tt class="literal">SessionSnoop</tt> servlet shown in <a href="#ch07-12744">Example 7-7</a> uses most of the methods discussed thus far in
the chapter to snoop information about the current
<a name="INDEX-1407"></a>session and other sessions on the server.
<a href="#ch07-36601">Figure 7-3</a> shows a sample of its output.
</p>

<a name="ch07-12744"></a>
<div class="example">
<h4 class="objtitle">Example 7-7. Snooping session information </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class SessionSnoop extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    // Get the current session object, create one if necessary
    HttpSession session = req.getSession(true);

    // Increment the hit count for this page. The value is saved
    // in this client's session under the name "snoop.count".
    Integer count = (Integer)session.getValue("snoop.count");
    if (count == null)
      count = new Integer(1);
    else
      count = new Integer(count.intValue() + 1);
    session.putValue("snoop.count", count);

    out.println("&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;SessionSnoop&lt;/TITLE&gt;&lt;/HEAD&gt;");
    out.println("&lt;BODY&gt;&lt;H1&gt;Session Snoop&lt;/H1&gt;");

    // Display the hit count for this page
    out.println("You've visited this page " + count +
      ((count.intValue() == 1) ? " time." : " times."));

    out.println("&lt;P&gt;");

    out.println("&lt;H3&gt;Here is your saved session data:&lt;/H3&gt;");
    String[] names = session.getValueNames();
    for (int i = 0; i &lt; names.length; i++) {
      out.println(names[i] + ": " + session.getValue(names[i]) + "&lt;BR&gt;");
    }

    out.println("&lt;H3&gt;Here are some vital stats on your session:&lt;/H3&gt;");
    out.println("Session id: " + session.getId() + "&lt;BR&gt;");
    out.println("New session: " + session.isNew() + "&lt;BR&gt;");
    out.println("Creation time: " + session.getCreationTime());
    out.println("&lt;I&gt;(" + new Date(session.getCreationTime()) + ")&lt;/I&gt;&lt;BR&gt;");
    out.println("Last access time: " + session.getLastAccessedTime());
    out.println("&lt;I&gt;(" + new Date(session.getLastAccessedTime()) +
                ")&lt;/I&gt;&lt;BR&gt;");

    out.println("Requested session ID from cookie: " +
                req.isRequestedSessionIdFromCookie() + "&lt;BR&gt;");
    out.println("Requested session ID from URL: " +
                req.isRequestedSessionIdFromUrl() + "&lt;BR&gt;");
    out.println("Requested session ID valid: " +
                 req.isRequestedSessionIdValid() + "&lt;BR&gt;");

    out.println("&lt;H3&gt;Here are all the current session IDs");
    out.println("and the times they've hit this page:&lt;/H3&gt;");
    HttpSessionContext context = session.getSessionContext();
    Enumeration ids = context.getIds();
    while (ids.hasMoreElements()) {
      String id = (String)ids.nextElement();
      out.println(id + ": ");
      HttpSession foreignSession = context.getSession(id);
      Integer foreignCount =
        (Integer)foreignSession.getValue("snoop.count");
      if (foreignCount == null)
        out.println(0);
      else
        out.println(foreignCount.toString());
      out.println("&lt;BR&gt;");
    }

    out.println("&lt;H3&gt;Test URL Rewriting&lt;/H3&gt;");
    out.println("Click &lt;A HREF=\"" +
                res.encodeUrl(req.getRequestURI()) + "\"&gt;here&lt;/A&gt;");
    out.println("to test that session tracking works via URL");
    out.println("rewriting even when cookies aren't supported.");

    out.println("&lt;/BODY&gt;&lt;/HTML&gt;");
  }
}</pre>
</blockquote>
</div>

<a name="ch07-36601"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0703.gif" webstripperlinkwas="figs/jsp_0703.gif"></div>
<h4 class="objtitle">Figure 7-3. Example output from SessionSnoop</h4>

<p>This servlet begins with the same code as the
<tt class="literal">SessionTracker</tt> servlet shown in <a href="#ch07-39645">Example 7-4</a>. Then it continues on to display the current
session's ID, whether it is a new session, the session's
creation time, and the session's last access time. Next the
servlet displays whether the requested session ID (if there is one)
came from a cookie or a URL and whether the requested ID is valid.
Then the servlet iterates over all the currently valid session IDs,
displaying the number of times they have visited this page. Finally,
the servlet prints an encoded URL that can be used to reload this
page to test that URL rewriting works even when cookies aren't
supported.
</p>

<p>Note that installing this servlet is a security risk, as it exposes
the server's session IDs--these may be used by
unscrupulous clients to join other clients' sessions. The
<tt class="literal">SessionServlet</tt> that is installed by default with
the Java Web Server 1.1.x has similar behavior.
</p>


<a name="ch07-12-fm2xml"></a>
<h3 class="sect2">7.5.9. Session Binding Events</h3>

<p>Some objects may wish to perform an action when they are bound or
unbound from a session. For example, a database connection may begin
a transaction when bound to a session and end the transaction when
unbound. Any object that implements the
<tt class="literal">javax.servlet.http.HttpSessionBindingListener</tt>
interface is notified when it is bound or unbound from a session. The
interface declares two methods, <tt class="literal">valueBound()</tt> and
<tt class="literal">valueUnbound()</tt>, that must be implemented:
</p>

<blockquote>
<pre class="programlisting">
public void HttpSessionBindingListener.valueBound(
            HttpSessionBindingEvent event)
public void HttpSessionBindingListener.valueUnbound(
            HttpSessionBindingEvent event)</pre>
</blockquote>

<p>The <tt class="literal">valueBound()</tt><a name="INDEX-1408"></a><a name="INDEX-1409"></a>
method is called when the listener is bound into a session, and
<tt class="literal">valueUnbound()</tt><a name="INDEX-1410"></a><a name="INDEX-1411"></a>
is called when the listener is unbound from a session.
</p>

<p>The <tt class="literal">javax.servlet.http.HttpSessionBindingEvent</tt>
argument provides access to the name under which the object is being
bound (or unbound) with the
<tt class="literal">getName()</tt><a name="INDEX-1412"></a><a name="INDEX-1413"></a>
method:
</p>

<blockquote>
<pre class="programlisting">public String HttpSessionBindingEvent.getName()</pre>
</blockquote>

<p>The <tt class="literal">HttpSessionBindingEvent</tt> object also provides
access to the <tt class="literal">HttpSession</tt> object to which the
listener is being bound (or unbound) with
<tt class="literal">getSession()</tt><a name="INDEX-1414"></a><a name="INDEX-1415"></a>
:
</p>

<blockquote>
<pre class="programlisting">public HttpSession HttpSessionBindingEvent.getSession()</pre>
</blockquote>

<p>
<a href="#ch07-32146">Example 7-8</a> demonstrates the use of
<tt class="literal">HttpSessionBindingListener</tt> and
<tt class="literal">HttpSessionBindingEvent</tt> with a listener that logs
when it is bound and unbound from a session.
</p>

<a name="ch07-32146"></a>
<div class="example">
<h4 class="objtitle">Example 7-8. Tracking session binding events </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class SessionBindings extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();

    // Get the current session object, create one if necessary
    HttpSession session = req.getSession(true);

    // Add a CustomBindingListener
    session.putValue("bindings.listener",
                     new CustomBindingListener(getServletContext()));

    out.println("This page intentionally left blank");
  }
}

class CustomBindingListener implements HttpSessionBindingListener {

  // Save a ServletContext to be used for its log() method
  ServletContext context;

  public CustomBindingListener(ServletContext context) {
    this.context = context;
  }

  public void valueBound(HttpSessionBindingEvent event) {
    context.log("BOUND as " + event.getName() + 
                " to " + event.getSession().getId());
  }

  public void valueUnbound(HttpSessionBindingEvent event) {
    context.log("UNBOUND as " + event.getName() + 
                " from " + event.getSession().getId());
  }
}</pre>
</blockquote>
</div>

<p>Each time a <tt class="literal">CustomBindingListener</tt> object is bound
to a session, its <tt class="literal">valueBound()</tt> method is called
and the event is logged. Each time it is unbound from a session, its
<tt class="literal">valueUnbound()</tt> method is called so that event too
is logged. We can observe the sequence of events by looking at the
server's event log.
</p>

<p>Let's assume that this servlet is called once, reloaded 30
seconds later, and not called again for at least a half hour. The
<a name="INDEX-1416"></a>event log would
look something like this:
</p>

<blockquote>
<pre class="programlisting">[Tue Jan 27 01:46:48 PST 1998]
  BOUND as bindings.listener to INWBUJIAAAAAHQDGPM5QAAA
[Tue Jan 27 01:47:18 PST 1998]
  UNBOUND as bindings.listener from INWBUJIAAAAAHQDGPM5QAAA
[Tue Jan 27 01:47:18 PST 1998]
  BOUND as bindings.listener to INWBUJIAAAAAHQDGPM5QAAA
[Tue Jan 27 02:17:18 PST 1998]
  UNBOUND as bindings.listener from INWBUJIAAAAAHQDGPM5QAAA</pre>
</blockquote>

<p>The first entry occurs during the first page request, when the
listener is bound to the new session. The second and third entries
occur during the reload, as the listener is unbound and rebound
during the same <tt class="literal">putValue()</tt> call. The fourth entry
occurs a half hour later, when the session expires and is
invalidated.
</p>


<a name="ch07-13-fm2xml"></a>
<h3 class="sect2">7.5.10. Shopping Using Session Tracking</h3>

<p>Let's end this chapter with a look at how remarkably simple our
shopping cart viewer servlet becomes when we use
<a name="INDEX-1417"></a>session tracking. <a href="#ch07-24047">Example 7-9</a> shows the viewer saving each of the
cart's items in the user's session under the name
<tt class="literal">"cart.items"</tt>.
</p>

<a name="ch07-24047"></a>
<div class="example">
<h4 class="objtitle">Example 7-9. Using the session tracking API </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class ShoppingCartViewerSession extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    // Get the current session object, create one if necessary.
    HttpSession session = req.getSession(true);

    // Cart items are maintained in the session object.
    String[] items = (String[])session.getValue("cart.items");

    out.println("&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;SessionTracker&lt;/TITLE&gt;&lt;/HEAD&gt;");
    out.println("&lt;BODY&gt;&lt;H1&gt;Session Tracking Demo&lt;/H1&gt;");

    // Print the current cart items.
    out.println("You currently have the following items in your cart:&lt;BR&gt;");
    if (items == null) {
      out.println("&lt;B&gt;None&lt;/B&gt;");
    }
    else {
      out.println("&lt;UL&gt;");
      for (int i = 0; i &lt; items.length; i++) {
        out.println("&lt;LI&gt;" + items[i]);
      }
      out.println("&lt;/UL&gt;");
    }

    // Ask if they want to add more items or check out.
    out.println("&lt;FORM ACTION=\"/servlet/ShoppingCart\" METHOD=POST&gt;");
    out.println("Would you like to&lt;BR&gt;");
    out.println("&lt;INPUT TYPE=submit VALUE=\" Add More Items \"&gt;");
    out.println("&lt;INPUT TYPE=submit VALUE=\" Check Out \"&gt;");
    out.println("&lt;/FORM&gt;");

    // Offer a help page. Encode it as necessary.
    out.println("For help, click &lt;A HREF=\"" +
                res.encodeUrl("/servlet/Help?topic=ShoppingCartViewer") +
                "\"&gt;here&lt;/A&gt;");

    out.println("&lt;/BODY&gt;&lt;/HTML&gt;");
  }
}</pre>
</blockquote>
</div>

<a name="INDEX-1418"></a>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch07_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">7.4. Persistent Cookies</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">8. Security</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
