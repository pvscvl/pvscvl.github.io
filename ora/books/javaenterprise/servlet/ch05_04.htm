<html>
<head>
<title>HTML Generation (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="HTML Generation">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_01.htm">Chapter 5: Sending HTML Information</a></td><td align="right" valign="top" width="172"><a href="ch05_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">5.4. HTML Generation</h2>

<p>No, "HTML Generation" is not another name for the
children born in the 1980s, many of whom grew up browsing the
web--although Jason and Will, saddled with the Generation X
moniker, feel that would be only fair. <a name="INDEX-938"></a>HTML generation is an alternate way for
servlets to send HTML content to clients.
</p>

<p>So far, every example in this book has generated its HTML by hand, as
one long <tt class="literal">String</tt> that is sent to the client. This
strategy works fine for small web pages (like book examples), but it
quickly becomes unwieldy for larger, more complicated pages. For that
type of page, it's sometimes helpful to use an HTML generation
package.
</p>

<p>An HTML generation package provides a servlet with a set of classes
that abstract away the details of HTML, in particular, the HTML tags.
The level of abstraction depends on the package: some put only the
thinnest veneer above the HTML tags, leaving the nitty-gritty details
(such as opening and closing each HTML tag) to the programmer. Using
packages such as these is similar to writing HTML by hand and is not
discussed here. Other packages elegantly abstract away the HTML
specification and treat HTML as just another set of Java objects. A
web page is seen as an object that can contain other HTML objects
(such as lists and tables) that can contain yet more HTML objects
(such as list items and table cells). This <a name="INDEX-939"></a><a name="INDEX-940"></a>
object-oriented approach can greatly simplify the task of generating
HTML and make a servlet easier to write, easier to maintain, and
sometimes even more efficient.
</p>

<a name="ch05-2-fm2xml"></a>
<h3 class="sect2">5.4.1. Generating Hello World</h3>

<p>Let's look at an <a name="INDEX-941"></a><a name="INDEX-942"></a><a name="INDEX-943"></a>example to
see how object-oriented HTML generation works. <a href="#ch05-31871">Example 5-3</a> shows the ubiquitous
<tt class="literal">HelloWorld</tt> servlet, rewritten to take advantage of
WebLogic's htmlKona package (available for free evaluation and
purchase at <a href="../../../../../../../www.weblogic.com/">http://www.weblogic.com</a><a name="INDEX-944"></a><a name="INDEX-945"></a><a name="INDEX-946"></a>--you may need to poke around a bit
to find it).
</p>

<a name="ch05-31871"></a>
<div class="example">
<h4 class="objtitle">Example 5-3. Hello, htmlKona </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

import weblogic.html.*;

public class HtmlKonaHello extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {

    res.setContentType("text/html");

    ServletPage page = new ServletPage();
    page.getHead().addElement(new TitleElement("Hello World"));
    page.getBody().addElement(new BigElement("Hello World!"));

    page.output(res.getOutputStream());
  }
}</pre>
</blockquote>
</div>

<p>Note how all the HTML tags have been replaced with objects. This
servlet first creates a new <tt class="literal">ServletPage</tt> object
that represents the web page it will return. Then, it adds a
"Hello World" title to the page's head section and
a "Hello World!" big string to its body section. Finally,
the servlet outputs the page to its output stream.<a href="#FOOTNOTE-2">[2]</a> That's how
<a name="INDEX-947"></a><a name="INDEX-"></a> object-oriented HTML
generation works: get a page object, add component objects to it, and
send it to the output stream.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-2"></a>
<p>[2]
We must use the <tt class="literal">ServletOutputStream</tt> here since
htmlKona was not written to output its page to a
<tt class="literal">PrintWriter</tt>.</p> </blockquote>

<p>
One advantage of HTML generation should already be apparent: it
ensures valid HTML. HTML generation eliminates the possibility for a
misspelled <tt class="literal">&lt;TITLE&gt;</tt> open tag or a forgotten
<tt class="literal">&lt;/TITLE&gt;</tt> close tag. We'll admit
it's not an advantage worth writing home about, but it is
appealing to not have to remember to open and close every tag or to
clutter your code with HTML. Unfortunately, object-oriented HTML has
the fairly serious drawback that it can litter memory with a multitude
of small objects, requiring more frequent garbage collection.
<a name="INDEX-948"></a><a name="INDEX-949"></a><a name="INDEX-950"></a><a name="INDEX-951"></a><a name="INDEX-952"></a><a name="INDEX-953"></a><a name="INDEX-"></a>
</p>


<a name="ch05-3-fm2xml"></a>
<h3 class="sect2">5.4.2. Generating a Weather Forecast</h3>

<p>That's how HTML generation works for a simple web page. Now
let's create a more complicated web page, so we can test how
HTML generation scales to handle the harder challenges. <a href="#ch05-29996">Figure 5-1</a> shows a hypothetical web page that displays
the <a name="INDEX-954"></a><a name="INDEX-955"></a>current weather and an extended
forecast, the kind you might find on Yahoo! or CNN. We've kept
it simple for the sake of space, but it still includes enough
components to make an interesting example.
</p>

<a name="ch05-29996"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0501.gif" webstripperlinkwas="figs/jsp_0501.gif"></div>
<h4 class="objtitle">Figure 5-1. Oh, the weather outside is delightful</h4>

<p>Imagine a servlet creating this web page. Assuming the servlet
already has access to the current conditions and forecast
information, how would the servlet do it? We will examine and discuss
three strategies:
</p>

<ul>
<li>
<p>	Constructing the HTML by hand</p>
</li>
<li>
<p>	Using an HTML generator</p>
</li>
<li>
<p>	Using an HTML generator creatively</p>
</li>
</ul>

<p>The first strategy, constructing the HTML by hand (<a href="#ch05-19121">Example 5-4</a>), is the standard approach demonstrated
elsewhere in this book. A servlet implemented using this strategy
acts as a baseline against which we can compare the other two
servlets. The second approach, using an HTML generator (<a href="#ch05-15806">Example 5-5</a>), constructs the web page as a set of objects.
This is like the <tt class="literal">HelloWorld</tt> example, just on a
much larger scale. The third strategy, using an HTML generator and
some creativity (<a href="#ch05-29034">Example 5-6</a>), takes the second
servlet and simplifies it by reusing objects and subclassing.
</p>

<a name="ch05-4-fm2xml"></a>
<h3 class="sect3">5.4.2.1. Weather forecast constructed by hand</h3>

<p>
<a href="#ch05-19121">Example 5-4</a> shows a servlet that creates the weather
forecast page without using
<a name="INDEX-956"></a>HTML generation, manually sending its
content wrapped with almost a hundred HTML tags.
</p>

<a name="ch05-19121"></a>
<div class="example">
<h4 class="objtitle">Example 5-4. Weather forecast constructed by hand</h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.text.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class WeatherHtml extends HttpServlet {

  // Some static final variables to populate the page...
  // These would normally come from a database or 
  // maybe another servlet that retrieved it as POST data.

  static final int currentTemp = 70;
  static final String currentImage = "/images/rainy.gif";
  static final String[] forecastDay = { "Thursday",
                                        "Friday",
                                        "Saturday" };
  static final String[] forecastImage = { "/images/sunny.gif", 
                                          "/images/sunny.gif",
                                          "/images/rainy.gif" };
  static final int[] forecastHi = { 82, 82, 73 };
  static final int[] forecastLo = { 58, 65, 48 };

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    // Set its title
    String title = "Sebastopol Weather Forecast";
    out.println("&lt;HTML&gt;");
    out.println("&lt;HEAD&gt;");
    out.println("&lt;TITLE&gt;" + title + "&lt;/TITLE&gt;");
    out.println("&lt;/HEAD&gt;");

    // Start on the body
    out.println("&lt;BODY&gt;");

    // Make a centered table
    out.println("&lt;CENTER&gt;");
    out.println("&lt;TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 WIDTH=70%&gt;");

    // First row
    out.println("&lt;TR&gt;");
    out.println("&lt;TD&gt;&lt;CENTER&gt;&lt;B&gt;");
    out.println("&lt;FONT SIZE=+2&gt;Current Conditions&lt;/FONT&gt;");
    out.println("&lt;/B&gt;&lt;/CENTER&gt;&lt;/TD&gt;");

    out.println("&lt;TD&gt;&lt;CENTEr&gt;");
    out.println("&lt;IMG WIDTH=48 HEIGHT=35 SRC=\"" + currentImage + "\"&gt;");
    out.println("&lt;/CENTER&gt;&lt;/TD&gt;");

    out.println("&lt;TD COLSPAN=2&gt;&lt;CENTER&gt;&lt;B&gt;&lt;FONT SIZE=+2&gt;");
    out.println(currentTemp + "&amp;#176;");
    out.println("&lt;/FONT&gt;&lt;/B&gt;&lt;/CENTER&gt;&lt;/TD&gt;");
    out.println("&lt;/TR&gt;");

    // Second row
    out.println("&lt;TR&gt;");
    out.println("&lt;TD COLSPAN=2&gt;&lt;CENTER&gt;&lt;B&gt;&lt;FONT SIZE=+1&gt;");
    out.println("Extended Forecast");
    out.println("&lt;/FONT&gt;&lt;/B&gt;&lt;/CENTER&gt;&lt;/TD&gt;");

    out.println("&lt;TD&gt;&lt;CENTER&gt;&lt;B&gt;&lt;FONT SIZE=+1&gt;");
    out.println("Hi");
    out.println("&lt;/FONT&gt;&lt;/B&gt;&lt;/CENTER&gt;&lt;/TD&gt;");

    out.println("&lt;TD&gt;&lt;CENTER&gt;&lt;B&gt;&lt;FONT SIZE=+1&gt;");
    out.println("Lo");
    out.println("&lt;/FONT&gt;&lt;/B&gt;&lt;/CENTER&gt;&lt;/TD&gt;");
    out.println("&lt;/TR&gt;");

    // Daily forecast rows
    for (int i = 0; i &lt; forecastDay.length; i++) {
      out.println("&lt;TR&gt;");
      out.println("&lt;TD&gt;&amp;nbsp;&lt;FONT SIZE=+1&gt;");
      out.println(forecastDay[i]);
      out.println("&lt;/FONT&gt;&lt;/TD&gt;");
      out.println("&lt;TD&gt;&lt;CENTER&gt;");
      out.println("&lt;IMG WIDTH=48 HEIGHT=35 SRC=\"" + forecastImage[i] + "\"&gt;");
      out.println("&lt;/CENTER&gt;&lt;/TD&gt;");
      out.println("&lt;TD&gt;&lt;CENTER&gt;&lt;FONT SIZE=+1&gt;");
      out.println(forecastHi[i]);
      out.println("&lt;/FONT&gt;&lt;/CENTER&gt;&lt;/TD&gt;");
      out.println("&lt;TD&gt;&lt;CENTER&gt;&lt;FONT SIZE=+1&gt;");
      out.println(forecastLo[i]);
      out.println("&lt;/FONT&gt;&lt;/CENTER&gt;&lt;/TD&gt;");
      out.println("&lt;/TR&gt;");
    }

    // Close the still-open tags
    out.println("&lt;/TABLE&gt;");
    out.println("&lt;/CENTER&gt;");
    out.println("&lt;/BODY&gt;&lt;/HTML&gt;");
  }
}</pre>
</blockquote>
</div>

<p>This code exactly generates the weather forecast page as shown in
<a href="#ch05-29996">Figure 5-1</a>. It begins by defining <tt class="literal">static
final</tt> variables to use as its content and proceeds to nest
that content among HTML tags. This approach presents a pretty page to
the end user, but it can leave the programmer counting tags and
looking for the right place to put the forgotten
<tt class="literal">&lt;/TD&gt;</tt>. The approach also has limited
maintainability. Pulling out one HTML tag can result in the same
cascading disaster you get when you pull on a knit sweater's
loose tail. And for the same reason--everything's
connected. Even a change as simple as decentering the table requires
a modification in the beginning of <tt class="literal">doGet()</tt> and at
the end. And a whimsical change, like making the extended forecast
font bold, requires more than a little concentration.
</p>



<a name="ch05-5-fm2xml"></a>
<h3 class="sect3">5.4.2.2. Weather forecast using HTML generation</h3>

<p>The same servlet written using
<a name="INDEX-957"></a><a name="INDEX-958"></a>HTML generation is shown in <a href="#ch05-15806">Example 5-5</a>.
</p>

<a name="ch05-15806"></a>
<div class="example">
<h4 class="objtitle">Example 5-5. Weather forecast using HTML generation</h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.text.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

import weblogic.html.*;

public class WeatherHtmlKona extends HttpServlet {

  // Some static final variables to populate the page...
  // These would normally come from a database or 
  // maybe another servlet that retrieved it as POST data.

  static final int currentTemp = 70;
  static final String currentImage = "/images/rainy.gif";
  static final String[] forecastDay = { "Thursday",
                                        "Friday",
                                        "Saturday" };
  static final String[] forecastImage = { "/images/sunny.gif", 
                                          "/images/sunny.gif",
                                          "/images/rainy.gif" };
  static final int[] forecastHi = { 82, 82, 73 };
  static final int[] forecastLo = { 58, 65, 48 };

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/html");

    // Get a new page
    ServletPage page = new ServletPage();
    
    // Set its title
    String title = "Sebastopol Weather Forecast";
    page.getHead().addElement(new TitleElement(title));

    // Get the body
    HtmlContainer body = page.getBody();

    // Make a table, and add it to the body (even before it's filled)
    TableElement tab = new TableElement()
                       .setCellPadding(0)
                       .setCellSpacing(0)
                       .setBorder(1)
                       .setWidth("60%");
    body.addElement(new CenteredElement(tab));

    // Create the first row
    HtmlElement conditions = new StringElement("Current Conditions")
                             .asFontElement("+2")
                             .asBoldElement()
                             .asCenteredElement();
    HtmlElement image = new ImageElement(currentImage)
                        .setWidth(48)
                        .setHeight(35)
                        .asCenteredElement();
    HtmlElement temp = new StringElement(currentTemp + "&amp;#176;")
                       .asFontElement("+2")
                       .asBoldElement()
                       .asCenteredElement();
    tab.addElement(new TableRowElement()
                   .addElement(new TableDataElement(conditions))
                   .addElement(new TableDataElement(image))
                   .addElement(new TableDataElement(temp)
                               .setColSpan(2)));

    // Create the second row
    HtmlElement extended = new StringElement("Extended Forecast")
                           .asFontElement("+1")
                           .asBoldElement()
                           .asCenteredElement();
    HtmlElement hi = new StringElement("Hi")
                     .asFontElement("+1")
                     .asBoldElement()
                     .asCenteredElement();
    HtmlElement lo = new StringElement("Lo")
                     .asFontElement("+1")
                     .asBoldElement()
                     .asCenteredElement();
    tab.addElement(new TableRowElement()
                   .addElement(new TableDataElement(extended)
                               .setColSpan(2))
                   .addElement(new TableDataElement(hi))
                   .addElement(new TableDataElement(lo)));

    // Create the forecast rows
    for (int i = 0; i &lt; forecastDay.length; i++) {
      HtmlElement day = new StringElement("&amp;nbsp;" + forecastDay[i])
                        .asFontElement("+1");
      HtmlElement daypic = new ImageElement(forecastImage[i])
                           .setWidth(48)
                           .setHeight(35)
                           .asCenteredElement();
      HtmlElement dayhi = new StringElement("" + forecastHi[i])
                          .asFontElement("+1")
                          .asCenteredElement();
      HtmlElement daylo = new StringElement("" + forecastLo[i])
                          .asFontElement("+1")
                          .asCenteredElement();
      tab.addElement(new TableRowElement()
                     .addElement(new TableDataElement(day))
                     .addElement(new TableDataElement(daypic))
                     .addElement(new TableDataElement(dayhi))
                     .addElement(new TableDataElement(daylo)));
    }

    // Send the page to the response's output stream
    page.output(res.getOutputStream());
  }
}</pre>
</blockquote>
</div>

<p>The basic structure of this servlet is similar to that of the
previous example. The major difference is that this servlet uses an
HTML generation package to create an
<a name="INDEX-959"></a><a name="INDEX-960"></a>
object-oriented representation of the web page.
</p>

<p>A few things may look strange about this code. The most striking is
its use of method
<a name="INDEX-961"></a><a name="INDEX-962"></a>
chaining, where several methods are invoked on the same object with
code like the following:
</p>

<blockquote>
<pre class="programlisting">TableElement tab = new TableElement()
                   .setCellPadding(0)
                   .setCellSpacing(0);</pre>
</blockquote>

<p>The whitespace here is irrelevant. The previous code is equivalent to:</p>

<blockquote>
<pre class="programlisting">TableElement tab = new TableElement().setCellPadding(0).setCellSpacing(0);</pre>
</blockquote>

<p>This chaining is possible because each "set" method
returns a reference to the object on which it was invoked--that
reference is used to invoke the next "set" method. This
trick comes in handy when using htmlKona.
</p>

<p>You may also be wondering why so many objects are declared as
<tt class="literal">HtmlElement</tt> objects but created as
<tt class="literal">StringElement</tt> objects or
<tt class="literal">ImageElement</tt> objects, as with the following code:
</p>

<blockquote>
<pre class="programlisting">HtmlElement image = new ImageElement(currentImage)
                    .setWidth(48)
                    .setHeight(35)
                    .asCenteredElement();</pre>
</blockquote>

<p>The answer is that each "as" method returns an object of
a different type than the object on which it was invoked. In the
example above, the <tt class="literal">asCenteredElement()</tt> method
returns a <tt class="literal">CenteredElement</tt> wrapped around the
original <tt class="literal">ImageElement</tt>. For simplicity, each HTML
component can be declared to be of type
<tt class="literal">HtmlElement</tt>, which is the superclass of all HTML
objects--its actual subclass type can be changed later with
ease.
</p>

<p>Now let's look at how this servlet compares to the previous
servlet. This servlet no longer has code that writes the individual
HTML tags, but it replaces that code with almost as many method
invocations. We don't appear to be saving any keystrokes. What
using HTML generation does do is give you confidence that the page
you constructed is valid. Tags cannot be forgotten or misplaced. The
larger benefit comes from easier maintainability. What if your
pointy-haired boss wants the table left-justified instead of
centered? The change is simple. The following line:
</p>

<blockquote>
<pre class="programlisting">body.addElement(new CenteredElement(tab));</pre>
</blockquote>

<p>changes to:</p>

<blockquote>
<pre class="programlisting">body.addElement(tab);</pre>
</blockquote>

<p>And what if you decide you want the forecast font to be bold? Well,
it's still a lot of work. For an elegant solution to this
problem, we need to look at the next servlet.
</p>



<a name="ch05-6-fm2xml"></a>
<h3 class="sect3">5.4.2.3. Weather forecast using HTML generation creatively</h3>

<p>
<a href="#ch05-29034">Example 5-6</a> (the last full weather forecast example)
shows another servlet that generates the weather forecast web page.
This servlet demonstrates some of HTML generation's potential
by reusing objects and subclassing. This technique produces results
similar to what you can achieve with <a name="INDEX-963"></a>Cascading Style Sheets
(CSS), a recent enhancement to HTML for controlling document
appearance.<a href="#FOOTNOTE-3">[3]</a> The major advantage of HTML generation is that, because
it operates entirely on the server side, it can work with all
browsers. CSS only started being supported in
<a name="INDEX-964"></a>Microsoft Internet Explorer 3 and later
and
<a name="INDEX-965"></a>Netscape Navigator 4 and later.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-3"></a>
<p>[3] For more information on Cascading Style
Sheets, see <a href="../../../../../../../www.w3.org/Style/css">http://www.w3.org/Style/css</a>.</p>
</blockquote>

<a name="ch05-29034"></a>
<div class="example">
<h4 class="objtitle">Example 5-6. Weather forecast using HTML generation creatively </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.text.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

import weblogic.html.*;

class CurrentStyle extends StringElement {
  CurrentStyle(String val) {
    super(new StringElement(val)
          .asFontElement("+2")
          .asBoldElement()
          .asCenteredElement());
  }
}

class ExtendedTitleStyle extends StringElement {
  ExtendedTitleStyle(String val) {
    super(new StringElement(val)
          .asFontElement("+1")
          .asBoldElement()
          .asCenteredElement());
  }
}

class ExtendedDayStyle extends StringElement {
  ExtendedDayStyle(String val) {
    super(new StringElement(val)
          .asFontElement("+1"));
  }
}

class ExtendedTempStyle extends StringElement {
  ExtendedTempStyle(String val) {
    super(new StringElement(val)
          .asFontElement("+1")
          .asCenteredElement());
  }
}

class ImageStyle extends CenteredElement {
  ImageStyle(String src) {
    super(new ImageElement(src).setWidth(48).setHeight(35));
  }
}

public class WeatherHtmlKonaRevised extends HttpServlet {

  static final ImageStyle sunny = new ImageStyle("/images/sunny.gif");
  static final ImageStyle rainy = new ImageStyle("/images/rainy.gif");

  // Some static final variables to populate the page...
  // These would normally come from a database or 
  // maybe another servlet that retrieved it as POST data.

  static final int currentTemp = 70;
  static final ImageStyle currentImage = sunny;
  static final String[] forecastDay = { "Thursday", "Friday", "Saturday" };
  static final ImageStyle[] forecastImage = { sunny, sunny, rainy };
  static final int[] forecastHi = { 82, 82, 73 };
  static final int[] forecastLo = { 58, 65, 48 };

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/html");

    // Get a new page
    ServletPage page = new ServletPage();
    
    // Set its title
    String title = "Sebastopol Weather Forecast";
    page.getHead().addElement(new TitleElement(title));

    // Get the body
    HtmlContainer body = page.getBody();

    // Make a table, and add it to the body (even before it's filled)
    TableElement tab = new TableElement()
                       .setCellPadding(0)
                       .setCellSpacing(0)
                       .setBorder(1)
                       .setWidth("60%");
    body.addElement(new CenteredElement(tab));

    // Create the first row
    HtmlElement conditions = new CurrentStyle("Current Conditions");
    HtmlElement image = currentImage;
    HtmlElement temp = new CurrentStyle(currentTemp + "&amp;#176;"); // degree symbol
    tab.addElement(new TableRowElement()
                   .addElement(new TableDataElement(conditions))
                   .addElement(new TableDataElement(image))
                   .addElement(new TableDataElement(temp)
                               .setColSpan(2)));

    // Create the second row
    HtmlElement extended = new ExtendedTitleStyle("Extended Forecast");
    HtmlElement hi = new ExtendedTitleStyle("Hi");
    HtmlElement lo = new ExtendedTitleStyle("Lo");
    tab.addElement(new TableRowElement()
                   .addElement(new TableDataElement(extended)
                               .setColSpan(2))
                   .addElement(new TableDataElement(hi))
                   .addElement(new TableDataElement(lo)));

    // Create the forecast rows
    for (int i = 0; i &lt; forecastDay.length; i++) {
      HtmlElement day = new ExtendedDayStyle("&amp;nbsp;" + forecastDay[i]);
      HtmlElement daypic = forecastImage[i];
      HtmlElement dayhi = new ExtendedTempStyle("" + forecastHi[i]);
      HtmlElement daylo = new ExtendedTempStyle("" + forecastLo[i]);
      tab.addElement(new TableRowElement()
                   .addElement(new TableDataElement(day))
                   .addElement(new TableDataElement(daypic))
                   .addElement(new TableDataElement(dayhi))
                   .addElement(new TableDataElement(daylo)));
    }

    // Send the page to the response's output stream
    page.output(res.getOutputStream());
  }
}</pre>
</blockquote>
</div>

<p>This servlet uses five support classes to define custom styles for
portions of the generated web page. For example,
<tt class="literal">CurrentStyle</tt> defines the font and positioning for
the elements that display the current conditions, while
<tt class="literal">ImageStyle</tt> defines the size and positioning of the
forecast icons. Each support class is a subclass of
<tt class="literal">HtmlElement</tt> (though not always directly) and can
thus be treated like a first-class component on the web page.
</p>

<p>Custom styles further abstract the HTML components on the page. What
was once a <tt class="literal">String</tt> surrounded by HTML tags is now a
high-level page component. A servlet can fill these components with
content and not worry about exactly how they will be displayed. Their
display is left to the style class. Should it happen that the
appearance needs to be changed, such as when you decide you want the
extended forecast font to be bold, the change can be done with a
single modification to the appropriate style.
</p>

<p>
<a name="INDEX-966"></a><a name="INDEX-967"></a>
Subclassing also proves useful for more mundane tasks. It can be used
to define basic HTML components that, for whatever reason, are not
included in the HTML generation package. For example, htmlKona has no
<tt class="literal">ServletElement</tt> class to represent an embedded
<tt class="literal">&lt;SERVLET&gt;</tt> tag. This class could be written
similarly to its <tt class="literal">AppletElement</tt> class by
subclassing htmlKona's <tt class="literal">ElementWithAttributes</tt>
class.
</p>

<p>Notice how this servlet has changed its representation of the
<tt class="literal">sunny</tt> and <tt class="literal">rainy</tt> images. The
previous servlets stored these images as <tt class="literal">String</tt>
objects representing image locations. This servlet, however, creates
each one as an <tt class="literal">ImageStyle</tt> object with an inherent
size and width. This means they can be added directly to the page,
simplifying the code in which they are used. It also shows how a
servlet can reuse an HTML component.
</p>

<p>For a better demonstration of reuse, imagine the
<tt class="literal">TableElement</tt> created by this servlet being cached
and resent in response to every request. This is simple to accomplish
using the techniques demonstrated in <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_01.htm">Chapter 3, "The Servlet Life Cycle"</a>.
The table could be on a page surrounded by rotating ad banners, but
it can persist as an object between requests.
</p>

<p>But what happens when the current temperature changes? Does the table
have to be entirely regenerated? Not at all. Remember, the table is
an object filled with other objects. All we need to do is replace the
object that represents the current temperature. For our example this
can be done with one line of code (note
<tt class="literal">"&amp;#176;"</tt> is the HTML representation of the
<a name="INDEX-968"></a><a name="INDEX-969"></a> degree symbol):
</p>

<blockquote>
<pre class="programlisting">tab.setCellAt(0, 2, new CurrentStyle(newTemp + "&amp;#176;"));</pre>
</blockquote>

<p>The possible creative uses for <a name="INDEX-970"></a><a name="INDEX-971"></a>
object-oriented HTML generation go far beyond the techniques shown in
this example. One could imagine a custom-created
<tt class="literal">BannerElement</tt> displayed at the top of all the
servlets on a site. It could be just a predefined
<tt class="literal">ImageElement</tt> or a conglomeration of elements. Let
your imagination run wild!<a name="INDEX-972"></a><a name="INDEX-973"></a>
</p>



<a name="ch05-7-fm2xml"></a>
<h3 class="sect3">5.4.2.4. HTML generation and databases</h3>

<p>Before we conclude our discussion of HTML generation, there is one
more feature to discuss: its potential close
<a name="INDEX-974"></a><a name="INDEX-975"></a>integration with a database. It's
not by coincidence that WebLogic packages htmlKona with its
database-centric dbKona and jdbcKona--the packages work well
together. We'll leave the details to WebLogic's web site,
but the general idea is that when you execute a query against a
database, the returned result set can be thought of as a formatted
table without a graphical representation. This result set table can
be passed to the <tt class="literal">TableElement</tt> constructor to
automatically display the query results in an HTML table on a web
page.
</p>

<p>The <tt class="literal">TableElement</tt> constructor also accepts
<tt class="literal">java.util.Dictionary</tt> objects (the superclass of
<tt class="literal">java.util.Hashtable</tt> and
<tt class="literal">java.util.Properties</tt>). By sub-classing
<tt class="literal">TableElement</tt>, it is possible to have it accept
even more types, thus making it easy to create tables from all
different kinds of data. A subclass can also give special treatment
to certain types of data, perhaps converting them into hyperlinks to
other queries.<a name="INDEX-976"></a>
</p>





<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.3. Using Persistent Connections</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.5. Status Codes</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
