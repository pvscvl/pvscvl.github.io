<html>
<head>
<title>HTTP Servlet API Quick Reference (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="HTTP Servlet API Quick Reference">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appa_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/appa_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm">Java Servlet Programming</a></td><td align="right" valign="top" width="172"><a href="appc_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/appc_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Appendix B.  HTTP Servlet API Quick Reference</h1>



<a name="INDEX-2397"></a><a name="INDEX-2398"></a><a name="INDEX-2399"></a><a name="INDEX-2400"></a>
The <tt class="literal">javax.servlet.http</tt>
package allows development of servlets that support the HTTP
protocol. While the core functionality in the
<tt class="literal">javax.servlet</tt> package provides everything
necessary for web development, the specialized classes in this
package automate many otherwise tedious tasks. For example, the
abstract <tt class="literal">HttpServlet</tt> class includes support for
different HTTP request methods and headers. The
<tt class="literal">HttpServletRequest</tt> and
<tt class="literal">HttpServletResponse</tt> interfaces allow additional
direct interaction with the web server, while
<tt class="literal">HttpSession</tt> provides built-in session tracking
functionality. The <tt class="literal">Cookie</tt> class allows you to
quickly set up and process HTTP cookies, and the
<tt class="literal">HttpUtils</tt> class does the same for query strings.
<a href="#appb-28229">Figure B-1</a> shows the class hierarchy of the
<tt class="literal">javax.servlet.http</tt> package.
<p>

<a name="appb-28229"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_AB01.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/figs/jsp_AB01.gif"></div>
<h4 class="objtitle">Figure B-1. The javax.servlet.http package</h4>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>Cookie</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>









<span class="refsect1"><h3>Synopsis</h3> </span>
<b>Class Name:</b>	<tt class="literal">javax.servlet.http.Cookie</tt>



<br><b>Superclass:</b>	<tt class="literal">java.lang.Object</tt>



<br><b>Immediate Subclasses:</b>	None


<br><b>Interfaces Implemented:</b>	<tt class="literal">java.lang.Cloneable</tt>


<br><b>Availability:</b> New as of Servlet API 2.0; found in JSDK 2.0, JWS 1.1;
an earlier version previously in <tt class="literal">sun.*</tt> hierarchy








<span class="refsect1"><h3>Description</h3> </span>The <tt class="literal">Cookie</tt> class provides an easy way for servlets
to read, create, and manipulate HTTP-style cookies, which allow
servlets to store small amounts of data on the client. Cookies are
generally used for session tracking or storing small amounts of
user-specific configuration information. For more information,
consult <a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch07_01.htm">Chapter 7, "Session Tracking"</a>.



<p>A servlet uses the <tt class="literal">getCookies()</tt> method of
<tt class="literal">HttpServletRequest</tt> to retrieve cookies submitted
as part of a client request. The <tt class="literal">addCookie()</tt>
method of <tt class="literal">HttpServletResponse</tt> sends a new cookie
to the browser. Because cookies are set using HTTP headers,
<tt class="literal">addCookie()</tt> must be called before any output is
sent to the client.


<p>The original Servlet API 1.0 lacked this <tt class="literal">Cookie</tt>
class, although the Java Web Server included a Sun-specific
<tt class="literal">sun.servlet.util.Cookie</tt> class that worked in
roughly the same manner. The only significant difference is that the
retrieval and creation methods were static components of the
<tt class="literal">Cookie</tt> class itself, rather than being part of the
<tt class="literal">HttpServletRequest </tt>and
<tt class="literal">HttpServletResponse </tt>interfaces.





<h3>Class Summaries</h3>
<blockquote>
<pre class="programlisting">public class Cookie implements java.lang.Cloneable {
  // Constructors
  public Cookie(String name, String value);

 // Instance Methods
  public Object clone();
  public String getComment();
  public String getDomain();
  public int getMaxAge();
  public String getName();
  public String getPath();
  public boolean getSecure();
  public String getValue();
  public int getVersion();
  public void setComment(String purpose);
  public void setDomain(String pattern);
  public void setMaxAge(int expiry);
  public void setPath(String uri);
  public void setSecure(boolean flag);
  public void setValue(String newValue);
  public void setVersion(int v);
}</pre>
</blockquote>



<h3>Constructors</h3>

<h4 class="objtitle">Cookie()</h4>

<blockquote>
<pre class="programlisting">public Cookie(String name, String value)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Constructs a new cookie with an initial name and value. The rules for
valid names and values are given in Netscape's Cookie
Specification and RFC 2109.

</dd>

</dl></blockquote>






<h3>Instance Methods</h3>
<h4 class="objtitle">clone()</h4>

<blockquote>
<pre class="programlisting">public Object clone()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Overrides the standard <tt class="literal">clone()</tt> method to return a
copy of this object (a duplicate cookie).

</dd>

</dl></blockquote>



<h4 class="objtitle">getComment()</h4>

<blockquote>
<pre class="programlisting">public String getComment()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the comment associated with the cookie.
</dd>

</dl></blockquote>



<h4 class="objtitle">getDomain()</h4>

<blockquote>
<pre class="programlisting">public String getDomain()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the domain limitation associated with this cookie.
</dd>

</dl></blockquote>



<h4 class="objtitle">getMaxAge()</h4>

<blockquote>
<pre class="programlisting">public int getMaxAge()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the maximum age allowed for this cookie.
</dd>

</dl></blockquote>



<h4 class="objtitle">getPath()</h4>

<blockquote>
<pre class="programlisting">public String getPath()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the path limitation for this servlet.
</dd>

</dl></blockquote>



<h4 class="objtitle">getSecure()</h4>

<blockquote>
<pre class="programlisting">public boolean getSecure()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns <tt class="literal">true</tt> if this cookie requires a secure
connection, <tt class="literal">false</tt> otherwise.

</dd>

</dl></blockquote>



<h4 class="objtitle">getName()</h4>

<blockquote>
<pre class="programlisting">public String getName()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the name of this cookie.
</dd>

</dl></blockquote>



<h4 class="objtitle">getValue()</h4>

<blockquote>
<pre class="programlisting">public String getValue()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the value of this cookie, in string format.
</dd>

</dl></blockquote>



<h4 class="objtitle">getVersion()</h4>

<blockquote>
<pre class="programlisting">public int getVersion()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the version of this cookie.
</dd>

</dl></blockquote>



<h4 class="objtitle">setComment()</h4>

<blockquote>
<pre class="programlisting">public void setComment(String purpose)</pre>

<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Sets the comment field of the cookie. A comment describes the
intended purpose of a cookie. A web browser may choose to display
this text to the user. Comments are not supported by Version 0
cookies.

</dd>

</dl></blockquote>



<h4 class="objtitle">setDomain()</h4>

<blockquote>
<pre class="programlisting">public void setDomain(String pattern)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Specifies a domain restriction pattern. A domain pattern specifies
the servers that should see a cookie. By default, cookies are
returned only to the host that saved them. Specifying a domain name
pattern overrides this. The pattern must begin with a dot and must
contain at least two dots. A pattern matches only one entry beyond
the initial dot. For example, <tt class="literal">".foo.com"</tt> is valid
and matches <em class="emphasis">www.foo.com</em> and
<em class="emphasis">upload.foo.com</em> but not
<em class="emphasis">www.upload.foo.com</em>. For details
on domain patterns, see Netscape's Cookie Specification and RFC
2109.

</dd>

</dl></blockquote>



<h4 class="objtitle">setMaxAge()</h4>

<blockquote>
<pre class="programlisting">public void setMaxAge(int expiry)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Specifies the maximum age of the cookie in seconds before it expires.
A negative value indicates the default, that the cookie should expire
when the browser exits. A zero value tells the browser to delete the
cookie immediately.

</dd>

</dl></blockquote>



<h4 class="objtitle">setPath()</h4>

<blockquote>
<pre class="programlisting">public void setPath(String uri)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Specifies a path for the cookie, which is the subset of URIs to which
a cookie should be sent. By default, cookies are sent to the page
that set the cookie and to all the pages in that directory or under
that directory. For example, if <em class="filename">/servlet/CookieMonster
</em> sets a cookie, the default path is
<tt class="literal">"/servlet"</tt>. That path indicates the cookie should
be sent to <em class="filename">/servlet/Elmo </em>and to
<em class="filename">/servlet/subdir/BigBird--</em>but not to the
<em class="filename">/Oscar.html </em>servlet alias or to any CGI programs
under <em class="filename">/cgi-bin</em>. A path set to
<tt class="literal">"/"</tt> causes a cookie to be sent to all the pages on
a server. A cookie's path must be such that it includes the
servlet that set the cookie.

</dd>

</dl></blockquote>



<h4 class="objtitle">setSecure()</h4>

<blockquote>
<pre class="programlisting">public void setSecure(boolean flag)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
The secure flag indicates whether the cookie should be sent only over
a secure channel, such as SSL. This value defaults to
<tt class="literal">false</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">setValue()</h4>

<blockquote>
<pre class="programlisting">public void setValue(String newValue)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Assigns a new value to a cookie. With Version 0
cookies, values should not contain the following: whitespace,
brackets and parentheses, equals signs, commas, double quotes,
slashes, question marks, at signs, colons, and semicolons. Empty
values may not behave the same way on all browsers.

</dd>

</dl></blockquote>



<h4 class="objtitle">setVersion()</h4>

<blockquote>
<pre class="programlisting">public void setVersion(int v)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Servlets can send and receive cookies formatted to match either
Netscape persistent cookies (Version 0) or the newer, somewhat
experimental, RFC 2109 cookies (Version 1). Newly constructed cookies
default to Version
to maximize interoperability.<a name="INDEX-2404"></a><a name="INDEX-2405"></a><a name="INDEX-2406"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2401"></a><a name="INDEX-2402"></a><a name="INDEX-2403"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>HttpServlet</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>









<span class="refsect1"><h3>Synopsis</h3> </span>
<b>Class Name:</b>	<tt class="literal">javax.servlet.http.HttpServlet</tt>



<br><b>Superclass:</b>	<tt class="literal">javax.servlet.GenericServlet</tt>


<br><b>Immediate Subclasses:</b>	None

<br><b>Interfaces Implemented:</b> <tt class="literal">javax.servlet.Servlet</tt>, <tt class="literal">java.io.Serializable</tt>


<br><b>Availability:</b>	Servlet API 1.0 and later







<span class="refsect1"><h3>Description</h3> </span>
<tt class="literal">HttpServlet</tt> is an abstract class that serves as a
framework for developing HTTP (World Wide Web) servlets. The public
<tt class="literal">service()</tt> method dispatches requests to an
HTTP-specific, protected <tt class="literal">service()</tt> method. You may
either extend the HTTP-specific <tt class="literal">service()</tt> method
(which is then used to handle all types of HTTP requests) or leave
the default service method alone and allow it to dispatch requests to
particular handler functions for each HTTP submission type:
<tt class="literal">doGet()</tt>, <tt class="literal">doPost()</tt>, and so on.
Because the default HTTP servlet implementation handles dispatching
to these methods, if you override the protected
<tt class="literal">service()</tt> method, you must either handle the
dispatching manually or not use the handler functions for HTTP
request methods.





<h3>Class Summary</h3>
<blockquote>
<pre class="programlisting">public abstract class HttpServlet extends javax.servlet.GenericServlet 
  implements javax.servlet.Servlet, java.io.Serializable {
  // Constructors
  public HttpServlet();

  // Public Instance Methods
  public void service(ServletRequest req, ServletResponse res) 
    throws ServletException, IOException;

  // Protected Instance Methods
  protected void doDelete(HttpServletRequest req, HttpServletResponse res) 
    throws ServletException, IOException;                   // New in 2.0
  protected void doGet(HttpServletRequest req, HttpServletResponse res) 
    throws ServletException, IOException; 
  protected void doOptions(HttpServletRequest req, HttpServletResponse res)
    throws ServletException, IOException;                   // New in 2.0
  protected void doPost(HttpServletRequest req,  HttpServletResponse res) 
    throws ServletException, IOException;
  protected void doPut(HttpServletRequest req, HttpServletResponse res) 
    throws ServletException, IOException;                   // New in 2.0
  protected void doTrace(HttpServletRequest req, HttpServletResponse res) 
    throws ServletException, IOException;                   // New in 2.0
  protected long getLastModified(HttpServletRequest req);
  protected void service(HttpServletRequest req, HttpServletResponse res) 
    throws ServletException, IOException;
}</pre>
</blockquote>





<h3>Constructors</h3>
<h4 class="objtitle">HttpServlet()</h4>

<blockquote>
<pre class="programlisting">public HttpServlet()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
The default constructor does nothing. Because you cannot be sure of
how and when classes will be loaded, it is not advisable to override
this constructor to perform startup tasks. Use
<tt class="literal">init()</tt> instead.

</dd>

</dl></blockquote>





<h3>Public Instance Methods</h3>
<h4 class="objtitle">service()</h4>

<blockquote>
<pre class="programlisting">public void service(ServletRequest req, ServletResponse res) 
  throws ServletException, IOException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
This <tt class="literal">service()</tt> method handles dispatching requests
to the protected, HTTP-specific <tt class="literal">service()</tt> method
and cannot be overridden without disabling dispatching to the
<tt class="literal">do</tt><em class="emphasis">XXX</em><tt class="literal">()
</tt>methods.

</dd>

</dl></blockquote>







<h3>Protected Instance Methods</h3>
<h4 class="objtitle">doDelete()</h4>

<blockquote>
<pre class="programlisting">protected void doDelete(HttpServletRequest req, HttpServletResponse res) 
  throws ServletException, IOException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
The default <tt class="literal">service()</tt> implementation in
<tt class="literal">HttpServlet</tt> dispatches all HTTP DELETE requests to
this method. Servlets implement this method to handle DELETE
requests. The default implementation returns an HTTP
<tt class="literal">BAD_REQUEST</tt> error. This method was introduced in
the Servlet API 2.0.

</dd>

</dl></blockquote>



<h4 class="objtitle">doGet()</h4>

<blockquote>
<pre class="programlisting">protected void doGet(HttpServletRequest req, HttpServletResponse res) 
  throws ServletException, IOException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
The default <tt class="literal">service()</tt> implementation in
<tt class="literal">HttpServlet</tt> dispatches all HTTP GET requests to
this method. Servlets implement this method to handle GET requests.
The default implementation returns an HTTP
<tt class="literal">BAD_REQUEST</tt> error.

</dd>

</dl></blockquote>



<h4 class="objtitle">doPost()</h4>

<blockquote>
<pre class="programlisting">protected void doPost(HttpServletRequest req, HttpServletResponse res) 
  throws ServletException, IOException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
The default <tt class="literal">service()</tt> implementation in
<tt class="literal">HttpServlet</tt> dispatches all HTTP POST requests to
this method. Servlets implement this method to handle POST requests.
The default implementation returns an HTTP
<tt class="literal">BAD_REQUEST</tt> error.

</dd>

</dl></blockquote>



<h4 class="objtitle">doPut()</h4>

<blockquote>
<pre class="programlisting">protected void doPut(HttpServletRequest req, HttpServletResponse res) 
  throws ServletException, IOException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
The default <tt class="literal">service()</tt> implementation in
<tt class="literal">HttpServlet</tt> dispatches all HTTP PUT requests to
this method. Servlets implement this method to handle PUT requests.
The default implementation returns an HTTP
<tt class="literal">BAD_REQUEST</tt> error. See RFC 2068 at <a href="../../../../../../../www.ietf.org/rfc/rfc2068.txt">http://www.ietf.org/rfc/rfc2068.txt</a> for more
on HTTP PUT requests. This method was introduced in the Servlet API
2.0.

</dd>

</dl></blockquote>



<h4 class="objtitle">doOptions()</h4>

<blockquote>
<pre class="programlisting">protected void doOptions(HttpServletRequest req, HttpServletResponse res) 
  throws ServletException, IOException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
The default <tt class="literal">service()</tt> implementation in
<tt class="literal">HttpServlet</tt> dispatches all HTTP OPTIONS requests
to this method. The default implementation determines which options
are supported and returns an appropriate header. For example, if a
servlet overrides <tt class="literal">doGet()</tt> and
<tt class="literal">doPost()</tt>, the browser is informed that GET, POST,
HEAD, TRACE, and OPTIONS are supported. There is almost never any
reason to override this method. This method was introduced in the
Servlet API 2.0.

</dd>

</dl></blockquote>



<h4 class="objtitle">doTrace()</h4>

<blockquote>
<pre class="programlisting">protected void doTrace(HttpServletRequest req, HttpServletResponse res) 
  throws ServletException, IOException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
The default <tt class="literal">service()</tt> implementation in
<tt class="literal">HttpServlet</tt> dispatches all HTTP TRACE requests to
this method. The default implementation returns a message listing all
of the headers sent in the TRACE request. There is almost never any
reason to override this method. This method was introduced in the
Servlet API 2.0.

</dd>

</dl></blockquote>



<h4 class="objtitle">getLastModified()</h4>

<blockquote>
<pre class="programlisting">protected long getLastModified(HttpServletRequest req)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the date and time (expressed as milliseconds since midnight,
January 1, 1970 GMT) that the content produced by the servlet was
last modified. Negative values indicate that the time is not known.
The default implementation returns <tt class="literal">-1</tt>. Called by
servers in support of conditional HTTP GET requests. See <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_01.htm">Chapter 4, "Retrieving Information"</a>, for more information.

</dd>

</dl></blockquote>



<h4 class="objtitle">service()</h4>

<blockquote>
<pre class="programlisting">protected void service(HttpServletRequest req, HttpServletResponse res) 
  throws ServletException, IOException</pre>

<dl>
<dt>
<b>Description</b>
</dt>
<dd>
The public <tt class="literal">service()</tt> method dispatches requests to
this <tt class="literal">service()</tt> method. This method handles
dispatching requests to <tt class="literal">doGet()</tt>,
<tt class="literal">doPost()</tt>, and the other handler functions based on
the type of request. If this method is overridden, no handlers are
called.<a name="INDEX-2409"></a><a name="INDEX-2410"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2407"></a><a name="INDEX-2408"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>HttpServletRequest</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>









<span class="refsect1"><h3>Synopsis</h3> </span>
<b>Interface Name:</b> <tt class="literal">javax.servlet.http.HttpServletRequest</tt>



<br><b>Superinterface:</b>	<tt class="literal">javax.servlet.ServletRequest</tt>



<br><b>Immediate Subinterfaces:</b>	None


<br><b>Implemented By:</b>	None


<br><b>Availability:</b>	Servlet API 1.0 and later







<span class="refsect1"><h3>Description</h3> </span><tt class="literal">HttpServletRequest</tt> extends the basic
<tt class="literal">ServletRequest</tt> class, providing additional
functionality for HTTP (World Wide Web) servlets. It includes support
for cookies and session tracking and access to HTTP header
information. <tt class="literal">HttpServletRequest</tt> also parses
incoming HTTP form data and stores it as servlet parameters.


<p>The server passes an <tt class="literal">HttpServletRequest</tt> object to
the service method of an <tt class="literal">HttpServlet</tt>.



<p>Certain methods in this interface have suffered from documentation
and implementation inconsistencies. Discrepancies have been noted
where possible.





<h3>Interface Declaration</h3>
<blockquote>
<pre class="programlisting">public interface HttpServletRequest extends javax.servlet.ServletRequest {
  // Methods
  public abstract String getAuthType();
  public abstract Cookie[] getCookies();                    // New in 2.0
  public abstract long getDateHeader(String name);
  public abstract String getHeader(String name);
  public abstract Enumeration getHeaderNames();
  public abstract int getIntHeader(String name);
  public abstract String getMethod();
  public abstract String getPathInfo();
  public abstract String getPathTranslated();
  public abstract String getQueryString();
  public abstract String getRemoteUser();
  public abstract String getRequestedSessionId();           // New in 2.0
  public abstract String getRequestURI();
  public abstract String getServletPath();
  public abstract HttpSession getSession(boolean create);   // New in 2.0
  public abstract boolean isRequestedSessionIdFromCookie(); // New in 2.0
  public abstract boolean isRequestedSessionIdFromUrl();    // New in 2.0
  public abstract boolean isRequestedSessionIdValid();      // New in 2.0
}</pre>
</blockquote>





<h3>Methods</h3>
<h4 class="objtitle">getAuthType()</h4>

<blockquote>
<pre class="programlisting">public abstract String getAuthType()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the servlet's authentication scheme or
<tt class="literal">null</tt> if the servlet was not protected by an access
control mechanism. Possible schemes are <tt class="literal">"BASIC"</tt>,
<tt class="literal">"DIGEST"</tt>, and <tt class="literal">"SSL"</tt>. Same as
the CGI variable <tt class="literal">AUTH_TYPE</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">getCookies()</h4>

<blockquote>
<pre class="programlisting">public abstract Cookie[] getCookies()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns an array of <tt class="literal">Cookie</tt> objects that contains
all the cookies sent by the browser as part of the request or
<tt class="literal">null</tt> if no cookies were sent. This method was
introduced in the Servlet API 2.0.

</dd>

</dl></blockquote>



<h4 class="objtitle">getDateHeader()</h4>

<blockquote>
<pre class="programlisting">public abstract long getDateHeader(String name)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the value of the named header as a <tt class="literal">long</tt>
value that represents a <tt class="literal">Date</tt> (the number of
milliseconds since midnight, January 1, 1970, GMT) or
<tt class="literal">-1</tt> if the header was not sent as part of the
request. The name is case insensitive. Throws an
<tt class="literal">IllegalArgumentException</tt> when called on a header
whose value cannot be converted to a <tt class="literal">Date</tt>. This
method is useful for handling headers like
<tt class="literal">Last-Modified</tt> and
<tt class="literal">If-Modified-Since</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">getHeader()</h4>

<blockquote>
<pre class="programlisting">public abstract String getHeader(String name)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the value of the named header as a <tt class="literal">String</tt>
or <tt class="literal">null</tt> if the header was not sent as part of the
request. The name is case insensitive. This method can retrieve all
header types.

</dd>

</dl></blockquote>



<h4 class="objtitle">getHeaderNames()</h4>

<blockquote>
<pre class="programlisting">public abstract Enumeration getHeaderNames()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the names of all the headers a servlet can access as an
<tt class="literal">Enumeration</tt> of <tt class="literal">String</tt>s or an
empty <tt class="literal">Enumeration</tt> if there were no headers. Some
servlet implementations may not allow headers to be accessed in this
way, in which case this method returns <tt class="literal">null</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">getIntHeader()</h4>

<blockquote>
<pre class="programlisting">public abstract int getIntHeader(String name)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the value of the named header as an <tt class="literal">int</tt> or
<tt class="literal">-1</tt> if the header was not sent as part of the
request. The name is case insensitive. Throws a
<tt class="literal">NumberFormatException</tt> when called on a header with
a value that cannot be converted to an <tt class="literal">int</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">getMethod()</h4>

<blockquote>
<pre class="programlisting">public abstract String getMethod()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the HTTP method used to make the request. Example methods
include <tt class="literal">"GET"</tt>, <tt class="literal">"POST"</tt>, and
<tt class="literal">"HEAD"</tt>. The same as the CGI variable
<tt class="literal">REQUEST_METHOD</tt>. The <tt class="literal">HttpServlet</tt>
implementation of <tt class="literal">service()</tt> uses this method when
dispatching requests.

</dd>

</dl></blockquote>



<h4 class="objtitle">getPathInfo()</h4>

<blockquote>
<pre class="programlisting">public abstract String getPathInfo()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the extra path information associated with the request or
<tt class="literal">null</tt> if none was provided. The same as the CGI
variable <tt class="literal">PATH_INFO</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">getPathTranslated()</h4>

<blockquote>
<pre class="programlisting">public abstract String getPathTranslated()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the extra path information translated to a file system path
or <tt class="literal">null</tt> if there was no extra path information.
The path returned does not necessarily point to an existing file or
directory. The same as the CGI variable
<tt class="literal">PATH_TRANSLATED</tt>. This method has been known to not
function properly in some servlet runners.

</dd>

</dl></blockquote>



<h4 class="objtitle">getQueryString()</h4>

<blockquote>
<pre class="programlisting">public abstract String getQueryString()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the query string from the request's URL. This value is
the same as the CGI variable <tt class="literal">QUERY_STRING</tt>. Because
<tt class="literal">HttpServletRequest</tt> parses this string into a set
of servlet parameters available through
<tt class="literal">getParameter()</tt>, most servlets can ignore this
method.

</dd>

</dl></blockquote>



<h4 class="objtitle">getRemoteUser()</h4>

<blockquote>
<pre class="programlisting">public abstract String getRemoteUser()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the name of the user making the request as a
<tt class="literal">String</tt> or <tt class="literal">null</tt> if access to the
servlet was not restricted. The same as the CGI variable
<tt class="literal">REMOTE_USER</tt>. This generally requires that the user
has logged in using HTTP authentication. There is no comparable
method to directly retrieve the remote user's password.

</dd>

</dl></blockquote>



<h4 class="objtitle">getRequestedSessionId()</h4>

<blockquote>
<pre class="programlisting">public abstract String getRequestedSessionId()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
This method returns the session ID specified by the client. This may
not be the actual session identifier currently in use--for
example, if the session expired before the request occurred, the
server creates a new session ID and uses that one instead. This
method was introduced in the Servlet API 2.0.

</dd>

</dl></blockquote>



<h4 class="objtitle">getRequestURI()</h4>

<blockquote>
<pre class="programlisting">public abstract String getRequestURI()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the Universal Resource Identifier (URI) of the request. This
is the resource requested by the client in the first line of its HTTP
request, with the query string removed. For normal HTTP servlets, the
request URI is the request URL minus the scheme, host, port, and
query string but including extra path information. Early versions of
the Servlet API defined and implemented this method in different
ways. When writing code that depends on this method, make sure you
know what you're actually getting.

</dd>

</dl></blockquote>



<h4 class="objtitle">getServletPath()</h4>

<blockquote>
<pre class="programlisting">public abstract String getServletPath()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the part of the URI that refers to the servlet. It does not
include any extra path information or the query string. This is the
same as the CGI variable <tt class="literal">SCRIPT_NAME</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">getSession()</h4>

<blockquote>
<pre class="programlisting">public abstract HttpSession getSession(boolean create)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the current session associated with the user making the
request. If the user has no current valid session, this method
creates one if <tt class="literal">create</tt> is <tt class="literal">true</tt>
or returns <tt class="literal">null</tt> if <tt class="literal">create</tt> is
<tt class="literal">false</tt>. To ensure the session is properly
maintained, this method should be called at least once before any
output is written to the response. Servlets not using session
tracking may ignore this method. This method was introduced in the
Servlet API 2.0.

</dd>

</dl></blockquote>



<h4 class="objtitle">isRequestedSessionIdFromCookie()</h4>

<blockquote>
<pre class="programlisting">public abstract boolean isRequestedSessionIdFromCookie()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns <tt class="literal">true</tt> if the client submitted a session
identifier via a cookie, <tt class="literal">false</tt> otherwise. This
method was introduced in the Servlet API 2.0.

</dd>

</dl></blockquote>



<h4 class="objtitle">isRequestedSessionIdFromUrl()</h4>

<blockquote>
<pre class="programlisting">public abstract boolean isRequestedSessionIdFromUrl()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns <tt class="literal">true</tt> if the requested session ID was
submitted via a rewritten URL, <tt class="literal">false</tt> otherwise.
This method was introduced in the Servlet API 2.0.

</dd>

</dl></blockquote>



<h4 class="objtitle">isRequestedSessionIdValid()</h4>

<blockquote>
<pre class="programlisting">public abstract boolean isRequestedSessionIdValid()</pre>

<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns <tt class="literal">true</tt> if the session requested by the
client is a valid session and is therefore the session currently in
use. For new sessions and expired sessions, it returns
<tt class="literal">false</tt>. This method was introduced in the Servlet
API 2.0.<a name="INDEX-2413"></a><a name="INDEX-2414"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2411"></a><a name="INDEX-2412"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>HttpServletResponse</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<span class="refsect1"><h3>Synopsis</h3> </span>
<b>Interface Name:</b> <tt class="literal">javax.servlet.http.HttpServletResponse</tt>



<br><b>Superinterface:</b>	<tt class="literal">javax.servlet.ServletResponse</tt>



<br><b>Immediate Subinterfaces:</b>	None

<br><b>Implemented By:</b>	None

<br><b>Availability:</b>	Servlet API 1.0 and later







<span class="refsect1"><h3>Description</h3> </span><tt class="literal">HttpServletResponse</tt> extends the
<tt class="literal">ServletResponse</tt> class to allow manipulation of
HTTP protocol-specific data, including response headers and status
codes. It also defines a series of constants that represent various
HTTP status codes and includes helper functions for session tracking
operations.




<h3>Interface Declaration</h3>

<blockquote>
<pre class="programlisting">public interface HttpServletResponse extends javax.servlet.ServletResponse {
  // Constants
  public static final int SC_ACCEPTED;
  public static final int SC_BAD_GATEWAY;
  public static final int SC_BAD_REQUEST;
  public static final int SC_CONFLICT;
  public static final int SC_CREATED;
  public static final int SC_CONTINUE;                      // New in 2.0
  public static final int SC_FORBIDDEN;
  public static final int SC_GATEWAY_TIMEOUT;               // New in 2.0
  public static final int SC_GONE;                          // New in 2.0
  public static final int SC_HTTP_VERSION_NOT_SUPPORTED;    // New in 2.0
  public static final int SC_INTERNAL_SERVER_ERROR;
  public static final int SC_LENGTH_REQUIRED;               // New in 2.0
  public static final int SC_METHOD_NOT_ALLOWED;            // New in 2.0
  public static final int SC_MOVED_PERMANENTLY;
  public static final int SC_MOVED_TEMPORARILY;
  public static final int SC_MULTIPLE_CHOICES;              // New in 2.0
  public static final int SC_NO_CONTENT;
  public static final int SC_NON_AUTHORITATIVE_INFORMATION; // New in 2.0
  public static final int SC_NOT_ACCEPTABLE;                // New in 2.0
  public static final int SC_NOT_FOUND;
  public static final int SC_NOT_IMPLEMENTED;
  public static final int SC_NOT_MODIFIED;
  public static final int SC_OK;
  public static final int SC_PARTIAL_CONTENT;               // New in 2.0
  public static final int SC_PAYMENT_REQUIRED;              // New in 2.0
  public static final int SC_PRECONDITION_FAILED;           // New in 2.0
  public static final int SC_PROXY_AUTHENTICATION_REQUIRED; // New in 2.0
  public static final int SC_REQUEST_ENTITY_TOO_LARGE;      // New in 2.0
  public static final int SC_REQUEST_TIMEOUT;               // New in 2.0
  public static final int SC_REQUEST_URI_TOO_LONG;          // New in 2.0
  public static final int SC_RESET_CONTENT;                 // New in 2.0
  public static final int SC_SEE_OTHER;                     // New in 2.0
  public static final int SC_SERVICE_UNAVAILABLE;
  public static final int SC_SWITCHING_PROTOCOLS;           // New in 2.0
  public static final int SC_UNAUTHORIZED;
  public static final int SC_UNSUPPORTED_MEDIA_TYPE;        // New in 2.0
  public static final int SC_USE_PROXY;                     // New in 2.0

  // Methods
  public abstract void addCookie(Cookie cookie);            // New in 2.0
  public abstract boolean containsHeader(String name);
  public abstract String encodeRedirectUrl(String url);     // New in 2.0
  public abstract String encodeUrl(String url);             // New in 2.0
  public abstract void sendError(int sc) throws IOException;
  public abstract void sendError(int sc, String msg) throws IOException;
  public abstract void sendRedirect(String location) throws IOException;
  public abstract void setDateHeader(String name, long date);  
  public abstract void setHeader(String name, String value);
  public abstract void setIntHeader(String name, int value);
  public abstract void setStatus(int sc);
  public abstract void setStatus(int sc, String sm);
}</pre>
</blockquote>






<span class="refsect1"><h3>Constants:</h3> </span><a href="appc_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/appc_01.htm">Appendix C, "HTTP Status Codes"</a>, contains complete descriptions of all
the <tt class="literal">SC_</tt><em class="replaceable">XXX</em> status
codes.




<h3>Methods</h3>

<h4 class="objtitle">addCookie()</h4>

<blockquote>
<pre class="programlisting">public abstract void addCookie(Cookie cookie)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Adds the specified cookie to the response. Additional cookies can be
added with repeated calls to <tt class="literal">addCookie()</tt>. Because
cookies are sent using HTTP headers, they should be added to the
response before sending any content. Browsers are required to accept
only 20 cookies per site, 300 total per user, and they can limit each
cookie's size to 4096 bytes.

</dd>

</dl></blockquote>



<h4 class="objtitle">containsHeader()</h4>

<blockquote>
<pre class="programlisting">public abstract boolean containsHeader(String name)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns <tt class="literal">true</tt> if the named header has already been
set, <tt class="literal">false</tt> if not.

</dd>

</dl></blockquote>



<h4 class="objtitle">encodeRedirectUrl()</h4>

<blockquote>
<pre class="programlisting">public abstract String encodeRedirectUrl(String url)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the specified URL encoded (rewritten) to include the session
ID. If encoding is not needed or not supported, the method leaves the
URL unchanged. The rules used to decide when and how to encode a URL
are server-specific. This method may use different rules than
<tt class="literal">encodeUrl()</tt>. To enable session tracking, all URLs
passed to the <tt class="literal">sendRedirect()</tt> method should be run
through this method. Note that this method employs a different
capitalization scheme than <tt class="literal">getRequestURL()</tt> and
<tt class="literal">getRequestURI()</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">encodeUrl()</h4>

<blockquote>
<pre class="programlisting">public abstract String encodeUrl(String url)</pre>

<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the specified URL encoded (rewritten) to include the session
ID. If encoding is not needed or not supported, the method leaves the
URL unchanged. The rules used to decide when and how to encode a URL
are server-specific. To enable session tracking, all URLs emitted by
a servlet should be run through this method. Note that this method
employs a different capitalization scheme than
<tt class="literal">getRequestURL()</tt> and
<tt class="literal">getRequestURI()</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">sendError()</h4>

<blockquote>
<pre class="programlisting">public abstract void sendError(int sc) throws IOException 
public abstract void sendError(int sc, String msg) throws IOException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
These methods are similar to <tt class="literal">setStatus()</tt>, except
that they are used when the status code indicates an error during the
handling of the request. A server may give these methods different
treatment than <tt class="literal">setStatus()</tt>. This method should be
called before sending any content.

</dd>

</dl></blockquote>



<h4 class="objtitle">sendRedirect()</h4>

<blockquote>
<pre class="programlisting">public abstract void sendRedirect(String location) throws IOException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Redirects the response to the specified location, automatically
setting the status code and <tt class="literal">Location</tt> header. The
location must be an absolute URL, (including
<tt class="literal">"http://"</tt>). The default implementaion also writes
a short response body that contains a hyperlink to the location, to
support browers without redirect capabilities. Consequently, do not
write your own response body when using this method.

</dd>

</dl></blockquote>



<h4 class="objtitle">setDateHeader()</h4>

<blockquote>
<pre class="programlisting">public abstract void setDateHeader(String name, long date)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Sets the value of the named header as a <tt class="literal">String</tt>
specifying a particular date and time. The method accepts the date
value as a <tt class="literal">long</tt> that represents the number of
milliseconds since midnight, January 1, 1970, GMT. If the header has
already been set, the new value overwrites the previous one.

</dd>

</dl></blockquote>



<h4 class="objtitle">setHeader()</h4>

<blockquote>
<pre class="programlisting">public abstract void setHeader(String name, String value)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Sets the value of the named header as a <tt class="literal">String</tt>.
The name is case insensitive (as with all header-related methods). If
the header has already been set, the new value overwrites the
previous one. This method can set any header type. Headers should
always be set before sending any content.

</dd>

</dl></blockquote>



<h4 class="objtitle">setIntHeader()</h4>

<blockquote>
<pre class="programlisting">public abstract void setIntHeader(String name, int value)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Sets the value of the named header as an <tt class="literal">int</tt>. If
the header has already been set, the new value overwrites the
previous one.

</dd>

</dl></blockquote>



<h4 class="objtitle">setStatus()</h4>

<blockquote>
<pre class="programlisting">public abstract void setStatus(int sc)
public abstract void setStatus(int sc, String sm)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Sets the HTTP status code. The code can be specified using a numeric
value or by using the
<tt class="literal">SC_</tt><em class="replaceable">XXX</em> codes defined
within <tt class="literal">HttpServletResponse</tt>. You can optionally
specify a custom error message; otherwise, the server uses the
default message for that code, if any. The status should be set
before sending any content.<a name="INDEX-2417"></a><a name="INDEX-2418"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2415"></a><a name="INDEX-2416"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>HttpSession</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>









<span class="refsect1"><h3>Synopsis</h3> </span>
<b>Interface Name:</b>	<tt class="literal">javax.servlet.http.HttpSession</tt>


<br><b>Superinterface:</b>	None

<br><b>Immediate Subinterfaces:</b>	None


<br><b>Implemented By:</b>	None

<br><b>Availability:</b> New as of the Servlet API 2.0; found in JSDK 2.0, JWS
1.1








<span class="refsect1"><h3>Description</h3> </span>The <tt class="literal">HttpSession</tt> interface provides a mechanism for
identifying return visitors to a web site. For a detailed
introduction to session tracking, see <a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch07_01.htm">Chapter 7, "Session Tracking"</a>.
The <tt class="literal">HttpSession</tt> interface itself allows servlets
to view and manipulate session-specific information, such as creation
time and the unique session identifier. It also includes methods to
bind objects to the session for later retrieval, allowing
"shopping cart" and other applications to hold onto data
<p>A servlet obtains an <tt class="literal">HttpSession</tt> object from the
<tt class="literal">getSession()</tt> method of
<tt class="literal">HttpServletRequest</tt>. Specific session behavior,
such as the amount of idle time before a session is destroyed,
depends on the server.



<p>While any object can be bound to a session, lots of high-traffic
servlets binding large objects to their sessions will impose a heavy
resource burden on the server. With most implementations, this can be
alleviated by binding only objects that implement the
<tt class="literal">java.io.Serializable</tt> interface (this includes all
of the data type objects in the core Java API). Some servers have the
ability to write <tt class="literal">Serializable</tt> objects to disk to
save memory. Unserializable objects, such as
<tt class="literal">java.sql.Connection</tt>, must be retained in memory.





<h3>Interface Declaration</h3>
<blockquote>
<pre class="programlisting">public interface HttpSession {
  // Methods
  public abstract long getCreationTime();
  public abstract String getId();
  public abstract long getLastAccessedTime();
  public abstract HttpSessionContext getSessionContext();
  public abstract Object getValue(String name);
  public abstract String[] getValueNames();
  public abstract void invalidate();
  public abstract boolean isNew();
  public abstract void putValue(String name, Object value);
  public abstract void removeValue(String name);
}</pre>
</blockquote>





<h3>Methods</h3>
<h4 class="objtitle">getCreationTime()</h4>

<blockquote>
<pre class="programlisting">public abstract long getCreationTime()</pre>

<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the time at which the session was created, as a
<tt class="literal">long</tt> representing the number of milliseconds since
midnight, January 1, 1970, GMT. Throws an
<tt class="literal">IllegalStateException</tt> if the session is invalid.

</dd>

</dl></blockquote>



<h4 class="objtitle">getId()</h4>

<blockquote>
<pre class="programlisting">public abstract String getId()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the unique <tt class="literal">String</tt> identifier assigned to
this session. The structure of the ID is implementation dependent.
For example, a Java Web Server ID might be something like
HT04D1QAAAAABQDGPM5QAAA. Throws an
<tt class="literal">IllegalStateException</tt> if the session is invalid.

</dd>

</dl></blockquote>



<h4 class="objtitle">getLastAccessTime()</h4>

<blockquote>
<pre class="programlisting">public abstract long getLastAccessedTime()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the time at which the client last sent a request associated
with this session, as a <tt class="literal">long</tt> representing the
number of milliseconds since midnight, January 1, 1970, GMT. Throws
an <tt class="literal">IllegalStateException</tt> if the session is
invalid.

</dd>

</dl></blockquote>



<h4 class="objtitle">getSessionContext()</h4>

<blockquote>
<pre class="programlisting">public abstract HttpSessionContext getSessionContext()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the context in which the session is bound. See
<tt class="literal">HttpSessionContext</tt> for more information. Throws an
<tt class="literal">IllegalStateException</tt> if the session is invalid.

</dd>

</dl></blockquote>



<h4 class="objtitle">getValue()</h4>

<blockquote>
<pre class="programlisting">public abstract Object getValue(String name)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the object bound in the session under the specified name or
<tt class="literal">null</tt> if there is no matching binding. Throws an
<tt class="literal">IllegalStateException</tt> if the session is invalid.

</dd>

</dl></blockquote>



<h4 class="objtitle">getValueNames()</h4>

<blockquote>
<pre class="programlisting">public abstract String[] getValueNames()</pre>

<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns an array containing the names of all objects bound to this
session or an empty (zero length) array if there are no bindings.
Throws an <tt class="literal">IllegalStateException</tt> if the session is
invalid. Note that unlike most similar methods
(<tt class="literal">getParameterNames()</tt>,
<tt class="literal">getInitParameterNames()</tt>,
<tt class="literal">getServletNames()</tt>, etc.), this method does not
return an <tt class="literal">Enumeration</tt>. (No, we don't know
why either.)

</dd>

</dl></blockquote>



<h4 class="objtitle">invalidate()</h4>

<blockquote>
<pre class="programlisting">public abstract void invalidate()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Causes the session to be immediately invalidated. All objects stored
in the session are unbound. Throws an
<tt class="literal">IllegalStateException</tt> if the session is already
invalid.

</dd>

</dl></blockquote>



<h4 class="objtitle">isNew()</h4>

<blockquote>
<pre class="programlisting">public abstract boolean isNew()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns whether the session is new. A session is considered new if it
has been created by the server but the client has not yet
acknowledged joining the session. For example, if a server supports
only cookie-based sessions and a client has completely disabled the
use of cookies, calls to <tt class="literal">getSession()</tt> always
return new sessions. Throws an
<tt class="literal">IllegalStateException</tt> if the session is invalid.

</dd>

</dl></blockquote>



<h4 class="objtitle">putValue()</h4>

<blockquote>
<pre class="programlisting">public abstract void putValue(String name, Object value)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Binds the specified object value under the specified name in the
session. Any existing binding with the same name is replaced. Throws
an <tt class="literal">IllegalStateException</tt> if the session is
invalid.

</dd>

</dl></blockquote>



<h4 class="objtitle">removeValue()</h4>

<blockquote>
<pre class="programlisting">public abstract void removeValue(String name)</pre>

<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Removes the object bound to the specified name or does nothing if
there is no binding. Throws an
<tt class="literal">IllegalStateException</tt> if the session is
invalid.<a name="INDEX-2421"></a><a name="INDEX-2422"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2419"></a><a name="INDEX-2420"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>HttpSessionBindingEvent</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>









<span class="refsect1"><h3>Synopsis</h3> </span>
<b>Class Name:</b>	<tt class="literal">javax.servlet.http.HttpSessionBindingEvent</tt>



<br><b>Superclass:</b>	<tt class="literal">java.util.EventObject</tt>



<br><b>Immediate Subclasses:</b>	None


<br><b>Interfaces Implemented:</b>	None


<br><b>Availability:</b> New as of the Servlet API 2.0; found in JSDK 2.0, JWS
1.1








<span class="refsect1"><h3>Description</h3> </span>An <tt class="literal">HttpSessionBindingEvent</tt> is passed to an
<tt class="literal">HttpSessionBindingListener</tt> when the listener
object is bound to or unbound from a session.




<h3>Class Summary</h3>

<blockquote>
<pre class="programlisting">public class HttpSessionBindingEvent extends java.util.EventObject {
  // Constructors
  public HttpSessionBindingEvent(HttpSession session, String name);

  // Instance Methods
  public String getName();
  public HttpSession getSession();
}</pre>
</blockquote>




<h3>Constructors</h3>
<h4 class="objtitle">HttpSessionBindingEvent()</h4>

<blockquote>
<pre class="programlisting">public HttpSessionBindingEvent(HttpSession session, String name)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Constructs a new <tt class="literal">HttpSessionBindingEvent</tt> using the
session being bound and the name that this object is being assigned
(this is the same name passed to the <tt class="literal">putValue()</tt>
method of <tt class="literal">HttpSession</tt>). Servlet programmers should
never need to use this constructor.

</dd>

</dl></blockquote>






<h3>Instance Methods</h3>
<h4 class="objtitle">getName()</h4>

<blockquote>
<pre>public String getName()</pre>

<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the name this object has been assigned within the session.
</dd>

</dl></blockquote>



<h4 class="objtitle">getSession()</h4>

<blockquote>
<pre class="programlisting">public HttpSession getSession()</pre>

<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the session this object is being bound to or unbound
from.<a name="INDEX-2425"></a><a name="INDEX-2426"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2423"></a><a name="INDEX-2424"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>HttpSessionBindingListener</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>









<span class="refsect1"><h3>Synopsis</h3> </span>
<b>Interface Name:</b>	<tt class="literal">javax.servlet.http.HttpSessionBindingListener</tt>


<br><b>Superinterface:</b>	<tt class="literal">java.util.EventListener</tt>



<br><b>Immediate Subinterfaces:</b>	None


<br><b>Implemented By:</b>	None


<br><b>Availability:</b> New as of the Servlet API 2.0; found in JSDK 2.0, JWS
1.1








<span class="refsect1"><h3>Description</h3> </span>An object that implements
<tt class="literal">HttpSessionBindingListener</tt> is notified via calls
to <tt class="literal">valueBound()</tt> and
<tt class="literal">valueUnbound()</tt> when it is bound to or unbound from
an <tt class="literal">HttpSession</tt>. Among other things, this interface
allows orderly cleanup session-specific resources, such as database
connections.





<h3>Interface Declaration</h3>
<blockquote>
<pre class="programlisting">public interface HttpSessionBindingListener extends java.util.EventListener {
  // Methods
  public abstract void valueBound(HttpSessionBindingEvent event);
  public abstract void valueUnbound(HttpSessionBindingEvent event);
}</pre>
</blockquote>





<h3>Methods</h3>
<h4 class="objtitle">valueBound()</h4>

<blockquote>
<pre class="programlisting">public abstract void valueBound(HttpSessionBindingEvent event)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Called when the listener is bound to a session.
</dd>

</dl></blockquote>



<h4 class="objtitle">valueUnbound()</h4>

<blockquote>
<pre class="programlisting">public abstract void valueUnbound(HttpSessionBindingEvent event)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Called when the listener is unbound from a session (including at
session destruction).<a name="INDEX-2429"></a><a name="INDEX-2430"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2427"></a><a name="INDEX-2428"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>HttpSessionContext</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>









<span class="refsect1"><h3>Synopsis</h3> </span>
<b>Interface Name:</b><tt class="literal">javax.servlet.http.HttpSessionContext</tt>



<br><b>Superinterface:</b>	None


<br><b>Immediate Subinterfaces:</b>	None


<br><b>Implemented By:</b>	None


<br><b>Availability:</b> New as of the Servlet API 2.0; found in JSDK 2.0, JWS
1.1








<span class="refsect1"><h3>Description</h3> </span><tt class="literal">HttpSessionContext</tt> provides access to all of the
currently active sessions on the server. This can be useful for
servlets that weed out inactive sessions, display statistics, or
otherwise share information. A servlet obtains an
<tt class="literal">HttpSessionContext</tt> object from the
<tt class="literal">getSessionContext()</tt> method of
<tt class="literal">HttpSession</tt>.





<h3>Interface Declaration</h3>
<blockquote>
<pre class="programlisting">public interface HttpSessionContext { 
  // Methods
  public abstract Enumeration getIds();
  public abstract HttpSession getSession(String sessionId);
}</pre>
</blockquote>





<h3>Methods</h3>
<h4 class="objtitle">getIds()</h4>

<blockquote>
<pre class="programlisting">public abstract Enumeration getIds()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns an <tt class="literal">Enumeration</tt> that contains the session
IDs for all the currently valid sessions in this context. It returns
an empty <tt class="literal">Enumeration</tt> if there are no valid
sessions. The session IDs returned by <tt class="literal">getIds()</tt>
should be held as a server secret because any client with knowledge
of another client's session ID can, with a forged cookie or
URL, join the second client's session.

</dd>

</dl></blockquote>



<h4 class="objtitle">getSession()</h4>

<blockquote>
<pre class="programlisting">public abstract HttpSession getSession(String sessionId)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the session associated with the given session identifier. A
list of valid session IDs can be obtained from the
<tt class="literal">getIds()</tt> method.<a name="INDEX-2433"></a><a name="INDEX-2434"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2431"></a><a name="INDEX-2432"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>HttpUtils</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>









<span class="refsect1"><h3>Synopsis</h3> </span>
<b>Class Name:</b>	<tt class="literal">javax.servlet.http.HttpUtils</tt>



<br><b>Superclass:</b>	<tt class="literal">java.lang.Object</tt>



<br><b>Immediate Subclasses:</b>	None


<br><b>Interfaces Implemented:</b>	None

<br><b>Availability:</b>	Servlet API 1.0 and later







<span class="refsect1"><h3>Description</h3> </span>A container object for a handful of potentially useful HTTP-oriented
methods.




<h3>Class Summary</h3>

<blockquote>
<pre class="programlisting">public class HttpUtils {
  // Constructors
  public HttpUtils();

  // Class Methods
  public static StringBuffer getRequestURL(HttpServletRequest req);
  public static Hashtable parsePostData(int len, ServletInputStream in);
  public static Hashtable parseQueryString(String s);
}</pre>
</blockquote>




<h3>Constructors</h3>
<h4 class="objtitle">HttpUtils()</h4>

<blockquote>
<pre class="programlisting">public HttpUtils()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
The default constructor does nothing.
</dd>

</dl></blockquote>







<h4 class="objtitle">getRequestURL()</h4>

<blockquote>
<pre class="programlisting">public static StringBuffer getRequestURL(HttpServletRequest req)</pre>

<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Reconstitutes the request URL based on information available in the
<tt class="literal">HttpServletRequest</tt> object. Returns a
<tt class="literal">StringBuffer</tt> that includes the scheme, server
name, server port, and extra path information. The reconstituted URL
should look almost identical to the URL used by the client. This
method can be used for error reporting, redirecting, and URL
creation. For applications that need to uniquely identify particular
servlets, the <tt class="literal">getRequestURI()</tt> method of
<tt class="literal">HttpServletRequest</tt> is generally a better choice.

</dd>

</dl></blockquote>



<h4 class="objtitle">parsePostData()</h4>

<blockquote>
<pre class="programlisting">public static Hashtable parsePostData(int len, ServletInputStream in)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Parses <tt class="literal">len</tt> characters of parameter data from a
<tt class="literal">ServletInputStream</tt> (usually sent as part of a POST
operation). Throws an <tt class="literal">IllegalArgumentException</tt> if
the parameter data is invalid. Most servlets use
<tt class="literal">getParameterNames()</tt>,
<tt class="literal">getParameter()</tt>, and
<tt class="literal">getParameterValues()</tt> instead of this method.

</dd>

</dl></blockquote>



<h4 class="objtitle">parseQueryString()</h4>

<blockquote>
<pre class="programlisting">public static Hashtable parseQueryString(String s)</pre>

<dl>
<dt>
<b>Description</b>
</dt>

<dd>
Returns a <tt class="literal">Hashtable</tt> where the hashtable keys are
the parameter names taken from the query string and each hashtable
value is a <tt class="literal">String</tt> array that contains the
parameter's decoded value(s). Throws an
<tt class="literal">IllegalArgumentException</tt> if the query string is
invalid. Most servlets use <tt class="literal">getParameterNames()</tt>,
<tt class="literal">get-Parameter()</tt>, and
<tt class="literal">getParameterValues()</tt> instead. It is not safe to
use <a name="INDEX-2437"></a><a name="INDEX-2438"></a>
both.<a name="INDEX-2439"></a><a name="INDEX-2440"></a><a name="INDEX-"></a><a name="INDEX-2441"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2435"></a><a name="INDEX-2436"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appa_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/appa_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="appc_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/appc_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">Appendix A. Servlet API Quick Reference</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">C. HTTP Status Codes</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links">
<p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>

<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
