<html>
<head>
<title>Retrieving Information (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Retrieving Information">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm">Java Servlet Programming</a></td><td align="right" valign="top" width="172"><a href="ch04_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 4.  Retrieving Information</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_01.htm">Initialization Parameters</a>
<br>
<a href="ch04_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_02.htm">The Server</a>
<br>
<a href="ch04_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_03.htm">The Client</a>
<br>
<a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_04.htm">The Request</a>
<br>
</p>
</div>


<p>To build a successful web application, you often need to know a lot
about the environment in which it is running. You may need to find
out about the server that is executing your servlets or the specifics
of the client that is sending requests. And no matter what kind of
environment the application is running in, you most certainly need
information about the requests that the application is handling.
</p>

<p>Servlets have a number of methods available to gain access to this
information. For the most part, each method returns one specific
result. If you compare this to the way environment variables are used
to pass a CGI program its information, the servlet approach has
several advantages:
</p>

<ul>
<li>
<p>Stronger type checking. In other words, more help from the compiler
in catching errors. A <a name="INDEX-613"></a><a name="INDEX-614"></a><a name="INDEX-615"></a>
CGI program uses one function to retrieve its environment variables.
Many errors cannot be found until they cause runtime problems.
Let's look at how both a CGI program and a servlet find the
port on which its server is running.
</p>


<p>A CGI script written in Perl calls:</p>

<blockquote>
<pre class="programlisting">$port = $ENV{'SERVER_PORT'};</pre>
</blockquote>

<p>where <tt class="literal">$port</tt> is an untyped variable. A CGI program
written in C calls:
</p>

<blockquote>
<pre class="programlisting">char *port = getenv("SERVER_PORT");</pre>
</blockquote>

<p>where <tt class="literal">port</tt> is a pointer to a character string. The
chance for accidental errors is high. The environment variable name
could be misspelled (it happens often enough) or the data type might
not match what the environment variable returns.
</p>

<p>A servlet, on the other hand, calls:</p>

<blockquote>
<pre class="programlisting">int port = req.getServerPort()</pre>
</blockquote>

<p>This eliminates a lot of accidental errors because the compiler can
guarantee there are no misspellings and each return type is as it
should be.
</p>
</li>

<li>
<p>Delayed calculation. When a server launches a CGI program, the value
for each and every environment variable must be precalculated and
passed, whether the CGI program uses it or not. A server launching a
servlet has the option to improve performance by delaying these
calculations and performing them on demand as needed.
</p>
</li>
<li>
<p>More interaction with the server. Once a CGI program begins
execution, it is untethered from its server. The only communication
path available to the program is its standard output. A servlet,
however, can work with the server. As discussed in the last chapter,
a servlet operates either within the server (when possible) or as a
connected process outside the server (when necessary). Using this
connectivity, a servlet can make ad hoc requests for calculated
information that only the server can provide. For example, a servlet
can have its server do arbitrary path translations, taking into
consideration the server's aliases and virtual paths.
</p>
</li>
</ul>

<p>If you're coming to servlets from CGI, <a href="#ch04-39174">Table 4-1</a> is a "cheat sheet" you can use for
your migration. It lists each CGI environment variable and the
corresponding HTTP
<a name="INDEX-616"></a><a name="INDEX-617"></a>servlet method.
</p>

<a name="ch04-39174"></a>
<h4 class="objtitle">Table 4-1. CGI Environment Variables and the Corresponding Servlet Methods </h4>
<table border="1">



<tr>
<th>
<p>CGI Environment Variable</p>
</th>
<th>
<p>HTTP Servlet Method</p>
</th>
</tr>


<tr>
<td>
<p>
<tt class="literal">SERVER_NAME</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getServerName()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SERVER_SOFTWARE</tt>
</p>
</td>
<td>
<p>
<tt class="literal">getServletContext().getServerInfo()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SERVER_PROTOCOL</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getProtocol()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SERVER_PORT</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getServerPort()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">REQUEST_METHOD</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getMethod()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">PATH_INFO</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getPathInfo()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">PATH_TRANSLATED</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getPathTranslated()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">SCRIPT_NAME</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getServletPath()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">DOCUMENT_ROOT</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getRealPath("/")</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">QUERY_STRING</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getQueryString()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">REMOTE_HOST</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getRemoteHost()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">REMOTE_ADDR</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getRemoteAddr()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">AUTH_TYPE</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getAuthType()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">REMOTE_USER</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getRemoteUser()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">CONTENT_TYPE</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getContentType()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">CONTENT_LENGTH</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getContentLength()</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">HTTP_ACCEPT</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getHeader("Accept")</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">HTTP_USER_AGENT</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getHeader("User-Agent")</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">HTTP_REFERER</tt>
</p>
</td>
<td>
<p>
<tt class="literal">req.getHeader("Referer")</tt>
</p>
</td>
</tr>

</table>

<p>In the rest of this chapter, we'll see how and when to use
these methods--and several other methods that have no CGI
counterparts. Along the way, we'll put the methods to use in
some real servlets.<a name="INDEX-618"></a><a name="INDEX-619"></a><a name="INDEX-620"></a>
</p>



<h2 class="sect1">4.1. Initialization Parameters</h2>

<p>Each registered servlet name can have specific <a name="INDEX-621"></a><a name="INDEX-622"></a>initialization (init) parameters
associated with it. Init parameters are available to the servlet at
any time; they are often used in <tt class="literal">init()</tt> to set
initial or default values for a servlet or to customize the
servlet's behavior in some way. Init parameters are more fully
explained in <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_01.htm">Chapter 3, "The Servlet Life Cycle"</a>.
</p>

<a name="ch04-2-fm2xml"></a>
<h3 class="sect2">4.1.1. Getting an Init Parameter</h3>

<p>A servlet uses the <tt class="literal">getInitParameter()</tt> method to
get access to its init parameters:
</p>

<blockquote>
<pre class="programlisting">public String ServletConfig.getInitParameter(String name)</pre>
</blockquote>

<p>This method returns the value of the named init parameter or
<tt class="literal">null</tt> if it does not exist. The return value is
always a single <tt class="literal">String</tt>. It is up to the servlet to
interpret the value.
</p>

<p>The <tt class="literal">GenericServlet</tt> class implements the
<tt class="literal">ServletConfig</tt> interface and thus provides direct
access to the <tt class="literal">getInitParameter()</tt> method.<a href="#FOOTNOTE-1">[1]</a> The method is
usually called like this:
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-1"></a>
<p>[1] The servlet must call
<tt class="literal">super.init(config)</tt><a name="INDEX-623"></a> in its <tt class="literal">init()</tt>
method to get this functionality.</p> </blockquote>

<blockquote>
<pre class="programlisting">public void init(ServletConfig config) throws ServletException {
  super.init(config);
  String greeting = getInitParameter("greeting");
}</pre>
</blockquote>

<p>A servlet that needs to establish a
<a name="INDEX-624"></a><a name="INDEX-625"></a><a name="INDEX-626"></a>
connection to a database can use its init parameters to define the
details of the connection. We can assume a custom
<tt class="literal">establishConnection()</tt> method to abstract away the
details of <a name="INDEX-627"></a>JDBC, as shown in <a href="#ch04-33108">Example 4-1</a>.
</p>

<a name="ch04-33108"></a>
<div class="example">
<h4 class="objtitle">Example 4-1. Using init parameters to establish a database connection </h4>
<blockquote>
<pre class="programlisting">java.sql.Connection con = null;

public void init(ServletConfig config) throws ServletException {
  super.init(config);

  String host = getInitParameter("host");
  int port = Integer.parseInt(getInitParameter("port"));
  String db = getInitParameter("db");
  String user = getInitParameter("user");
  String password = getInitParameter("password");
  String proxy = getInitParameter("proxy");

  con = establishConnection(host, port, db, user, password, proxy);
}</pre>
</blockquote>
</div>


<a name="ch04-3-fm2xml"></a>
<h3 class="sect2">4.1.2. Getting Init Parameter Names</h3>

<p>A servlet can examine all its init parameters using
<tt class="literal">getInitParameterNames()</tt><a name="INDEX-628"></a><a name="INDEX-629"></a>
:
</p>

<blockquote>
<pre class="programlisting">public Enumeration ServletConfig.getInitParameterNames()</pre>
</blockquote>

<p>This method returns the names of all the servlet's init
parameters as an <tt class="literal">Enumeration</tt> of
<tt class="literal">String</tt> objects or an empty
<tt class="literal">Enumeration</tt> if no parameters exist. It's
most often used for debugging.
</p>

<p>The <tt class="literal">GenericServlet</tt> class also makes this method
directly available to servlets. <a href="#ch04-18332">Example 4-2</a> shows a
<a name="INDEX-630"></a><a name="INDEX-631"></a>
servlet that prints the name and value for all of its init
parameters.
</p>

<a name="ch04-18332"></a>
<div class="example">
<h4 class="objtitle">Example 4-2. Getting init parameter names </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;

public class InitSnoop extends GenericServlet {

  // No init() method needed

  public void service(ServletRequest req, ServletResponse res) 
                             throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();

    out.println("Init Parameters:");
    Enumeration enum = getInitParameterNames();
    while (enum.hasMoreElements()) {
      String name = (String) enum.nextElement();
      out.println(name + ": " + getInitParameter(name));
    }
  }
}</pre>
</blockquote>
</div>

<p>Notice that this servlet directly subclasses
<tt class="literal">GenericServlet</tt>, showing that init parameters are
available to servlets that aren't HTTP servlets. A generic
servlet can be used in a web server even though it lacks any support
for HTTP-specific functionality.
</p>

<p>Unfortunately, there's no server-independent way for a servlet
to ask for its <a name="INDEX-632"></a><a name="INDEX-633"></a><a name="INDEX-634"></a>registered name or its class file
location. This information may be added in a future version of the
Servlet API. Until then, although it's not pretty, this
information can be passed using init parameters where necessary.
Also, some servers--including the Java Web Server--provide
a <a name="INDEX-635"></a><a name="INDEX-636"></a>back door whereby a servlet can get its
registered name. If a servlet defines a method with the following
signature, the server calls it and passes it the servlet's
registered name at initialization:
</p>

<blockquote>
<pre class="programlisting">public void setServletName(String name);</pre>
</blockquote>

<p>The servlet can save the passed-in name and use it later.
You'll notice this back door was built without changing the
Servlet API, a necessary requirement because, by the time it was
added, the Servlet API 2.0 had already been frozen.<a name="INDEX-637"></a><a name="INDEX-638"></a>
</p>











<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.6. Last Modified Times</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.2. The Server</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
