<html>
<head>
<title>Executing Programs (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Executing Programs">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_01.htm">Chapter 13: Odds and Ends</a></td><td align="right" valign="top" width="172"><a href="ch13_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">13.4. Executing Programs</h2>

<p>Sometimes a servlet needs to execute an <a name="INDEX-2274"></a><a name="INDEX-2275"></a>external program. This is
generally important in situations where an external program offers
functionality that isn't easily available from within Java. For
example, a servlet could call an external program to perform an image
manipulation or to check the status of the server. Launching an
external program raises a number of security concerns. For this
reason, it's an action that can be taken only by servlets
running with a fairly lenient security manager--specifically, a
security manager that grants permission for the servlet to call the
<tt class="literal">exec()</tt><a name="INDEX-2276"></a><a name="INDEX-2277"></a>
method of <tt class="literal">java.lang.Runtime</tt>.
</p>

<a name="ch13-6-fm2xml"></a>
<h3 class="sect2">13.4.1. Finger</h3>

<p>The <tt class="command"></tt><a name="INDEX-2278"></a><a name="INDEX-2279"></a><a name="INDEX-2280"></a><a name="INDEX-2281"></a><em class="emphasis">finger</em> program queries a (possibly remote)
computer for a list of currently logged in users. It's
available on virtually all Unix systems and some Windows NT machines
with networking capabilities. The <em class="emphasis">finger</em> program
works by connecting to a finger daemon (usually named
<em class="filename">fingerd</em>) that listens on port 79.
<em class="emphasis">finger</em> makes its request of
<em class="emphasis">fingerd</em> using a custom "finger"
protocol, and <em class="emphasis">fingerd</em> replies with the
appropriate information. Most Unix systems run
<em class="emphasis">fingerd</em>, though many security-conscious
administrators turn it off to limit information that could be used
for break-in attempts. It's still fairly rare to find
<em class="emphasis">fingerd</em> on Windows systems. Run without any
arguments, <em class="emphasis">finger</em> reports all users of the local
machine. The local machine must be running
<em class="emphasis">fingerd</em>. Here's an example:
</p>

<blockquote>
<pre class="programlisting">% <tt class="userinput"><b>finger</b></tt>
Login    Name                  TTY Idle When       Office
jhunter  Jason Hunter          q0  3:13 Thu 12:13 
ktaylor  Kristi Taylor         q1       Thu 12:18 </pre>
</blockquote>

<p>Run with a username as an argument, <em class="emphasis">finger</em>
reports on just that user:
</p>

<blockquote>
<pre class="programlisting">% <tt class="userinput"><b>finger jhunter</b></tt>
Login name: jhunter                     In real life: Jason Hunter
Directory: /usr/people/jhunter          Shell: /bin/tcsh
On since Jan  1 12:13:28 on ttyq0 from :0.0
3 hours 13 minutes Idle Time
On since Jan  1 12:13:30 on ttyq2 from :0.0</pre>
</blockquote>

<p>Run with a hostname as an argument, <em class="emphasis">finger</em>
reports all the users of the specified host. The remote host must be
running <em class="emphasis">fingerd</em>:
</p>

<blockquote>
<pre class="programlisting">% <tt class="userinput"><b>finger @deimos</b></tt>
Login    Name                  TTY Idle When       Office
bday     Bill Day              q0   17d Mon 10:45 </pre>
</blockquote>

<p>And, of course, run with a username and hostname,
<em class="emphasis">finger</em> reports on the specified user on the
specified host:
</p>

<blockquote>
<pre class="programlisting">% <tt class="userinput"><b>finger bday@deimos</b></tt>
[deimos.engr.sgi.com]
Login name: bday                        In real life: Bill Day
Directory: /usr/people/bday             Shell: /bin/tcsh
On since Dec 15 10:45:22 on ttyq0 from :0.0
17 days Idle Time</pre>
</blockquote>


<a name="ch13-7-fm2xml"></a>
<h3 class="sect2">13.4.2. Executing the Finger Command</h3>

<p>Let's assume that a servlet wants access to the information
retrieved by <em class="emphasis">finger</em>. It has two options: it can
establish a socket connection to <em class="emphasis">fingerd</em> and
make a request for information just like any other finger client, or
it can execute the command-line <em class="emphasis">finger</em> program
to make the connection on its behalf and read the information from
<em class="emphasis">finger</em>'s output. We'll show the
second technique here.<a href="#FOOTNOTE-1">[1]</a>
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1]If you're interested in
the code necessary to connect to <em class="emphasis">fingerd</em>, see
the <tt class="literal">FingerServlet</tt> example provided with the Java
Web Server.</p> </blockquote>

<p>
<a href="#ch13-14408">Example 13-6</a> shows how a servlet can execute the
<em class="emphasis">finger</em> command to see who's logged into
the local machine. It reads the command's output and prints it
to its output stream.
</p>

<a name="ch13-14408"></a>
<div class="example">
<h4 class="objtitle">Example 13-6. Executing the finger command from a servlet </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

import com.oreilly.servlet.ServletUtils;

public class Finger extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();

    String command = "finger";

    Runtime runtime = Runtime.getRuntime();
    Process process = null;
    try {
      process = runtime.exec(command);
      DataInputStream in = new DataInputStream(process.getInputStream());

      // Read and print the output
      String line = null;
      while ((line = in.readLine()) != null) {
        out.println(line);
      }
    }
    catch (Exception e) {
      out.println("Problem with finger: " +
                  ServletUtils.getStackTraceAsString(e));
    }
  }
}</pre>
</blockquote>
</div>

<p>This servlet uses the
<tt class="literal">exec()</tt><a name="INDEX-2282"></a><a name="INDEX-2283"></a>
command just like any other Java class would. It executes the
<em class="emphasis">finger</em> command, then reads and prints the
output. If there's a problem, the servlet catches an exception
and prints the stack trace to the user. This servlet assumes the
<tt class="command">finger</tt> command exists in the default search path.
If that isn't the case, change the <tt class="literal">command</tt>
string to specify the path where <em class="emphasis">finger</em> can be
found.
</p>

<p>We should point out that, although Java is executing native code when
it executes the <em class="emphasis">finger</em> program, it doesn't
open itself up to the risks that normally exist when executing native
code. The reason is that the <em class="emphasis">finger</em> program
executes as a separate process. It can crash or be killed without
impacting the server executing the servlet.
</p>


<a name="ch13-8-fm2xml"></a>
<h3 class="sect2">13.4.3. Executing Finger with Arguments</h3>

<p>Now let's assume we want to pass an argument to the
<em class="emphasis">finger</em> command. The usage is slightly different.
<tt class="literal">exec()</tt> takes either a single string that specifies
a command or an array of strings that specifies a command and the
arguments to pass to that command. To run <em class="emphasis">finger
jhunter</em><tt class="command"> </tt>the code looks like <a href="#ch13-19348">Example 13-7</a>.
</p>

<a name="ch13-19348"></a>
<div class="example">
<h4 class="objtitle">Example 13-7. Adding a parameter to the executed command </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

import com.oreilly.servlet.ServletUtils;

public class Finger extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();

    String[] command = { "finger", "jhunter" };  // Only change!

    Runtime runtime = Runtime.getRuntime();
    Process process = null;
    try {
      process = runtime.exec(command);
      BufferedReader in = 
      new BufferedReader(new InputStreamReader(process.getInputStream()));

      // Read and print the output
      String line = null;
      while ((line = in.readLine()) != null) {
        out.println(line);
      }
    }
    catch (Exception e) {
      out.println("Problem with finger: " +
                  ServletUtils.getStackTraceAsString(e));
    }
  }
}</pre>
</blockquote>
</div>

<p>The <tt class="literal">command</tt> variable is now the string array
<tt class="literal">{"finger",</tt><tt class="literal">"jhunter"}</tt>. The
command would not work as the single string <tt class="literal">"finger
jhunter"</tt>.
</p>


<a name="ch13-9-fm2xml"></a>
<h3 class="sect2">13.4.4. Executing Finger with Redirected Output</h3>

<p>Finally, let's assume we want to <a name="INDEX-2284"></a><a name="INDEX-2285"></a>redirect the output from
our<em class="emphasis"> finger</em> command. We may want to redirect the
output to a file for later use, as in <em class="emphasis">finger jhunter &gt;
/tmp/jhunter</em>. Or we may want to redirect the output to the
<em class="emphasis">grep</em> program to remove any references to some
user, as in <em class="emphasis">finger | grep -v jhunter</em>.
</p>

<p>This task is harder than it may appear. If the
<tt class="literal">command</tt> variable is set to the string
<tt class="literal">"finger | grep -v jhunter"</tt>, Java treats this
string as the name of as a single program--one that it most
assuredly won't find. If the <tt class="literal">command</tt>
variable is set to the string array <tt class="literal">"{"finger",</tt><tt class="literal">"|",</tt><tt class="literal">"grep",</tt><tt class="literal">"-v",</tt><tt class="literal">"jhunter"}"</tt>, Java
executes the <em class="emphasis">finger</em> command and pass it the next
four strings as parameters, no doubt thoroughly confusing
<em class="emphasis">finger</em>.
</p>

<p>The solution requires an understanding that redirection is a feature
of the shell. The shell is the program into which you normally type
commands. On Unix the most common shells are <em class="emphasis">csh, tcsh,
bash,</em> and <em class="emphasis">sh</em>. On Windows 95, the
shell is usually <em class="emphasis">command.com</em>. On Windows NT, the
shell is either <em class="emphasis">command.com</em> or
<em class="emphasis">cmd.exe.</em>
</p>

<p>Instead of executing <em class="emphasis">finger</em> directly, we can
execute a shell and tell it the command string we want run. That
string can contain the <em class="emphasis">finger</em> command and any
sort of redirection. The shell can parse the command and correctly
recognize and perform the redirection. The exact command needed to
execute a shell and program depends on the shell and thus on the
operating system. This technique therefore necessarily limits the
platform independence of the servlets that use it. On a Unix system,
the following <tt class="literal">command</tt> variable asks
<em class="emphasis">csh</em> to execute the command <em class="emphasis">finger |
grep -v jhunter</em>:
</p>

<blockquote>
<pre class="programlisting">String[] command = { "/bin/csh", "-c", "finger | grep -v jhunter" };</pre>
</blockquote>

<p>The program Java executes is <em class="emphasis">/bin/csh. csh</em> is
passed two arguments: <em class="emphasis">-c</em>, which asks the shell
to execute the next parameter, and <em class="emphasis">finger | grep -v
jhunter</em>, which is executed by the shell.<a name="INDEX-2286"></a><a name="INDEX-2287"></a><a name="INDEX-2288"></a><a name="INDEX-2289"></a>
</p>

<p>On a Windows system, the <tt class="literal">command </tt>variable looks
like this:
</p>

<blockquote>
<pre class="programlisting">String[] command = { "command.com", "/c", "finger | grep -v jhunter" };</pre>
</blockquote>

<p>The <em class="emphasis">/c</em> argument for
<em class="emphasis">command.com</em> works the same way
<em class="emphasis">-c</em> did for <em class="emphasis">csh</em> and, yes,
the <em class="emphasis">.com</em> suffix is necessary.
<a name="INDEX-2290"></a><a name="INDEX-2291"></a><a name="INDEX-2292"></a>Windows NT users should
note that using <em class="emphasis">cmd.exe</em> is problematic
because<tt class="command"> </tt>it redirects its output to a new window
instead of to the Java runtime that spawned it. In fact, even
launching the Java Web Server from a <em class="emphasis">cmd.exe</em>
shell can cause the <em class="emphasis">command.com</em> command to
fail.<a name="INDEX-2293"></a><a name="INDEX-2294"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch13_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">13.3. Using Regular Expressions</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">13.5. Using Native Methods</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
