<html>
<head>
<title>The Servlet Life Cycle (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The Servlet Life Cycle">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm">Java Servlet Programming</a></td><td align="right" valign="top" width="172"><a href="ch03_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 3.  The Servlet Life Cycle</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_01.htm">The Servlet Alternative</a>
<br>
<a href="ch03_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_02.htm">Servlet Reloading</a>
<br>
<a href="ch03_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_03.htm">Init and Destroy</a>
<br>
<a href="ch03_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_04.htm">Single-Thread Model</a>
<br>
<a href="ch03_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_05.htm">Background Processing</a>
<br>
<a href="ch03_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_06.htm">Last Modified Times</a>
<br>
</p>
</div>


<p>The servlet life cycle is one of the most exciting features of
servlets. This life cycle is a powerful hybrid of the life cycles
used in CGI programming and lower-level NSAPI and ISAPI programming,
as discussed in <a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch01_01.htm">Chapter 1, "Introduction"</a>.
</p>



<h2 class="sect1">3.1. The Servlet Alternative</h2>

<p>The <a name="INDEX-486"></a><a name="INDEX-487"></a>servlet
life cycle allows servlet engines to address both the performance and
resource problems of CGI and the security concerns of low-level
server API programming. A <a name="INDEX-488"></a>servlet engine may execute all its
servlets in a single Java virtual machine (JVM). Because they are in
the same JVM,
<a name="INDEX-489"></a>servlets can efficiently share
data with each other, yet they are prevented by the Java language
from accessing one another's private data.
<a name="INDEX-490"></a><a name="INDEX-491"></a>
Servlets may also be allowed to persist between requests as object
instances, taking up far less memory than full-fledged processes.
</p>

<p>Before we proceed too far, you should know that the servlet life
cycle is highly flexible. Servers have significant leeway in how they
choose to support servlets. The only hard and fast rule is that a
<a name="INDEX-492"></a>servlet engine must
conform to the following life cycle contract:
</p>

<ol>
<li>
<p>Create and initialize the servlet.</p>
</li>
<li>
<p>Handle zero or more service calls from clients.</p>
</li>
<li>
<p>Destroy the servlet and then garbage collect it.</p>
</li>
</ol>

<p>It's perfectly legal for a servlet to be loaded, created, and
instantiated in its own JVM, only to be destroyed and garbage
collected without handling any client requests or after handling just
one request. Any servlet engine that makes this a habit, however,
probably won't last long on the open market. In this chapter we
describe the most common and most sensible life cycle implementations
for HTTP servlets.
</p>

<a name="ch03-2-fm2xml"></a>
<h3 class="sect2">3.1.1. A Single Java Virtual Machine</h3>

<p>Most <a name="INDEX-493"></a>servlet engines
want to execute all servlets in a single JVM. Where that JVM itself
executes can differ depending on the server, though. With a server
written in Java, such as the Java Web Server, the server itself can
execute inside a JVM right alongside its servlets.
</p>

<p>With a single-process, multithreaded web server written in another
language, the JVM can often be embedded inside the server process.
Having the JVM be part of the server process maximizes
<a name="INDEX-494"></a><a name="INDEX-495"></a>performance because
a servlet becomes, in a sense, just another low-level server API
extension. Such a server can invoke a servlet with a lightweight
context switch and can provide information about requests through
direct method invocations.
</p>

<p>A multiprocess web server (which runs several processes to handle
requests) doesn't really have the choice to embed a JVM
directly in its process because there is no one process. This kind of
server usually runs an external JVM that its processes can share.
With this approach, each servlet access involves a heavyweight
context switch reminiscent of FastCGI. All the servlets, however,
still share the same external process.
</p>

<p>Fortunately, from the perspective of the servlet (and thus from your
perspective, as a servlet author), the server's implementation
doesn't really matter because the server always behaves the
same way.
</p>


<a name="ch03-3-fm2xml"></a>
<h3 class="sect2">3.1.2. Instance Persistence</h3>

<p>We said above that servlets
<a name="INDEX-496"></a><a name="INDEX-497"></a>
persist between requests as object instances. In other words, at the
time the code for a servlet is loaded, the server creates a single
class instance. That single instance handles every request made of
the servlet. This improves <a name="INDEX-498"></a>performance in three ways:
</p>

<ul>
<li>
<p>It keeps the <a name="INDEX-499"></a>memory footprint small.
</p>
</li>
<li>
<p>It eliminates the object <a name="INDEX-500"></a><a name="INDEX-501"></a>creation overhead that would otherwise
be necessary to create a new servlet object. A servlet can be already
loaded in a virtual machine when a request comes in, letting it begin
executing right away.
</p>
</li>
<li>
<p>It enables persistence. A servlet can have already loaded anything
it's likely to need during the handling of a request. For
example, a database connection can be opened once and used repeatedly
thereafter. It can even be used by a group of servlets. Another
example is a shopping cart servlet that loads in memory the price
list along with information about its recently connected clients. Yet
another servlet may choose to cache entire pages of output to save
time if it receives the same request again.
</p>
</li>
</ul>
<p>Not only do servlets persist between requests, but so do any
<a name="INDEX-502"></a><a name="INDEX-503"></a>
threads created by servlets. This perhaps isn't useful for the
run-of-the-mill servlet, but it opens up some interesting
possibilities. Consider the situation where one background thread
performs some calculation while other threads display the latest
results. It's quite similar to an animation applet where one
thread changes the picture and another one paints the display.
</p>


<a name="ch03-4-fm2xml"></a>
<h3 class="sect2">3.1.3. A Simple Counter</h3>

<p>To demonstrate the servlet life cycle, we'll begin with a
simple <a name="INDEX-504"></a><a name="INDEX-505"></a><a name="INDEX-506"></a>example. <a href="#ch03-12604">Example 3-1</a> shows a servlet that counts and displays the
number of times it has been accessed. For simplicity's sake, it
outputs plain text.
</p>

<a name="ch03-12604"></a>
<div class="example">
<h4 class="objtitle">Example 3-1. A simple counter </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class SimpleCounter extends HttpServlet {

  int count = 0;

  public void doGet(HttpServletRequest req, HttpServletResponse res) 
                               throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();
    count++;
    out.println("Since loading, this servlet has been accessed " +
                count + " times.");
  }
}</pre>
</blockquote>
</div>

<p>The code is simple--it just prints and increments the instance
variable named <tt class="literal">count</tt>--but it shows the power
of persistence. When the server loads this servlet, the server
creates a single instance to handle every request made of the
servlet. That's why this code can be so simple. The same
instance variables exist between invocations and for all invocations.
</p>


<a name="ch03-5-fm2xml"></a>
<h3 class="sect2">3.1.4. A Simple Synchronized Counter</h3>

<p>From the servlet-developer's perspective, each client is
another <a name="INDEX-507"></a>thread that calls the servlet via the
<tt class="literal">service()</tt>, <tt class="literal">doGet()</tt>, or
<tt class="literal">doPost()</tt> methods, as shown in <a href="#ch03-23265">Figure 3-1</a>.<a href="#FOOTNOTE-1">[1]</a>
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1] Does it seem confusing how
one servlet instance can handle multiple requests at the same time?
If so, it's probably because when we picture an executing
program we often see object instances performing the work, invoking
each other's methods and so on. But, although this model works
for simple cases, it's not how things actually work. In
reality, all real work is done by threads. The object instances are
nothing more than data structures manipulated by the threads.
Therefore, if there are two
<a name="INDEX-508"></a>
threads running, it's entirely possible that both are using the
same object at the same time.</p> </blockquote>

<a name="ch03-23265"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0301.gif" webstripperlinkwas="figs/jsp_0301.gif"></div>
<h4 class="objtitle">Figure 3-1. Many threads, one servlet instance</h4>

<p>If your servlets only read from the request, write to the response,
and save information in local variables (that is, variables declared
within a method), you needn't worry about the interaction among
these threads. Once any information is saved in nonlocal variables
(that is, variables declared within a class but outside any specific
method), however, you must be aware that
<a name="INDEX-509"></a><a name="INDEX-510"></a>each of these client
threads has the ability to manipulate a servlet's nonlocal
variables. Without precautions, this may result in data corruption
and inconsistencies. For example, the
<tt class="literal">SimpleCounter</tt> servlet makes a false assumption
that the counter incrementation and output occur atomically
(immediately after one another, uninterrupted). It's possible
that if two requests are made to <tt class="literal">SimpleCounter</tt>
around the same time, each will print the same value for
<tt class="literal">count</tt>. How? Imagine that one thread increments the
count and just afterward, before the first thread prints the count,
the second thread also increments the count. Each thread will print
the same count value, after effectively increasing its value by
2.<a href="#FOOTNOTE-2">[2]</a> The order of execution goes something like this
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-2"></a>
<p>[2]Odd factoid: if <tt class="literal">count</tt> were a
64-bit <tt class="literal">long</tt> instead of a 32-bit
<tt class="literal">int</tt>, it would be theoretically possible for the
increment to be only half performed at the time it is interrupted by
another thread. This is because Java uses a 32-bit wide stack.</p>
</blockquote>

<blockquote>
<pre class="programlisting">count++            // Thread 1
count++            // Thread 2
out.println        // Thread 1
out.println        // Thread 2</pre>
</blockquote>

<p>Now, in this case, the inconsistency is obviously not a problem, but
many other servlets have more serious opportunities for errors. To
prevent these types of problems and the inconsistencies that come
with them, we can add one or more
<a name="INDEX-511"></a><a name="INDEX-512"></a>synchronized blocks to the code.
Anything inside a synchronized block or a
<a name="INDEX-513"></a><a name="INDEX-514"></a>
synchronized method is guaranteed not to be executed concurrently by
another thread. Before any thread begins to execute synchronized
code, it must obtain a
<em class="emphasis">monitor</em><a name="INDEX-515"></a><a name="INDEX-516"></a>(lock) on a specified class. If another
thread already has that monitor--because it is already executing
the same synchronized block or some other block with the same
monitor--the first thread must wait. All this is handled by the
language itself, so it's very easy to use. Synchronization,
however, should be used only when necessary. On some platforms, it
requires a fair amount of overhead to obtain the monitor each time a
synchronized block is entered. More importantly, during the time one
thread is executing synchronized code, the other threads may be
blocked waiting for the monitor to be released.
</p>

<p>For <tt class="literal">SimpleCounter</tt>, we have four options to deal
with this potential problem. First, we could add the keyword
<tt class="literal">synchronized</tt> to the <tt class="literal">doGet()</tt>
signature:
</p>

<blockquote>
<pre class="programlisting">public synchronized void doGet(HttpServletRequest req, 
                               HttpServletResponse res)</pre>
</blockquote>

<p>This guarantees consistency by synchronizing the entire method, using
the servlet class as the monitor. In general, though, this is not the
right approach because it means the servlet can handle only one GET
request at a time.
</p>

<p>Our second option is to synchronize just the two lines we want to
execute atomically:
</p>

<blockquote>
<pre class="programlisting">PrintWriter out = res.getWriter();
synchronized(this) {
  count++;
  out.println("Since loading, this servlet has been accessed " +
              count + " times.");
}</pre>
</blockquote>

<p>This approach works better because it limits the amount of time this
servlet spends in its synchronized block, while accomplishing the
same goal of a consistent count. Of course, for this simple example,
it isn't much different than the first option.
</p>

<p>Our third option is to create a synchronized block that performs all
the work that needs to be done serially, then use the results outside
the synchronized block. For our counter servlet, we can increment the
count in a synchronized block, save the incremented value to a local
variable (a variable declared inside a method), then print the value
of the local variable outside the synchronized block:
</p>

<blockquote>
<pre class="programlisting">PrintWriter out = res.getWriter();
int local_count;
synchronized(this) {
  local_count = ++count;
}
out.println("Since loading, this servlet has been accessed " +
            local_count + " times.");</pre>
</blockquote>

<p>This change shrinks the synchronized block to be as small as
possible, while still maintaining a consistent count.
</p>

<p>Our last option is to decide that we are willing to suffer the
consequences of ignoring
<a name="INDEX-517"></a>
synchronization issues. Sometimes the consequences are quite
acceptable. For this example, ignoring synchronization means that
some clients may receive a count that's a bit off. Not a big
deal, really. If this servlet were supposed to return unique numbers,
however, it would be a different story.
</p>

<p>Although it's not possible with this example, an option that
exists for other servlets is to change instance variables into
<em class="emphasis"></em><a name="INDEX-518"></a>
local variables. Local variables are not available to other threads
and thus don't need to be carefully protected from corruption.
At the same time, however, local variables are not persistent between
requests, so we can't use them to store the persistent state of
our counter.
</p>


<a name="ch03-6-fm2xml"></a>
<h3 class="sect2">3.1.5. A Holistic Counter</h3>

<p>Now, the "one instance per servlet" model is a bit of a
gloss-over. The truth is that each <a name="INDEX-519"></a><a name="INDEX-520"></a><a name="INDEX-521"></a>registered name for a servlet (but
not each alias) is associated with one instance of the servlet. The
name used to access the servlet determines which instance handles the
request. This makes sense because the impression to the client should
be that differently named servlets operate independently. The
separate instances are also a requirement for servlets that accept
initialization parameters, as discussed later in this chapter.
</p>

<p>Our <tt class="literal">SimpleCounter</tt> example uses the
<tt class="literal">count</tt> instance variable to track the number of
times it has been accessed. If, instead, it needed to track the count
for all instances (and thus all registered aliases), it can in some
cases use a <a name="INDEX-522"></a><a name="INDEX-523"></a><a name="INDEX-524"></a>class, or static, variable. These
variables are shared across all instances of a class. <a href="#ch03-27963">Example 3-2</a> demonstrates with a servlet that counts three
things: the times it has been accessed, the number of instances
created by the server (one per name), and the total times all of them
have been accessed.
</p>

<a name="ch03-27963"></a>
<div class="example">
<h4 class="objtitle">Example 3-2. A more holistic counter </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class HolisticCounter extends HttpServlet {

  static int classCount = 0;  // shared by all instances
  int count = 0;              // separate for each servlet
  static Hashtable instances = new Hashtable();  // also shared

  public void doGet(HttpServletRequest req, HttpServletResponse res) 
                               throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();

    count++;
    out.println("Since loading, this servlet instance has been accessed " +
                count + " times.");

    // Keep track of the instance count by putting a reference to this
    // instance in a Hashtable. Duplicate entries are ignored. 
    // The size() method returns the number of unique instances stored.
    instances.put(this, this);
    out.println("There are currently " + 
                instances.size() + " instances.");

    classCount++;
    out.println("Across all instances, this servlet class has been " +
                "accessed " + classCount + " times.");
  }
}</pre>
</blockquote>
</div>

<p>This <tt class="literal">HolisticCounter</tt> tracks its own access count
with the <tt class="literal">count</tt> instance variable, the shared count
with the <tt class="literal">classCount</tt> class variable, and the number
of instances with the <tt class="literal">instances</tt> hashtable (another
shared resource that must be a class variable). Sample output is
shown in <a href="#ch03-20140">Figure 3-2</a>.
</p>

<a name="ch03-20140"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0302.gif" webstripperlinkwas="figs/jsp_0302.gif"></div>
<h4 class="objtitle">Figure 3-2. Output from HolisticCounter</h4>















<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.7. Moving On</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.2. Servlet Reloading</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
