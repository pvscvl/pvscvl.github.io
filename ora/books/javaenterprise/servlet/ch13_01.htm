<html>
<head>
<title>Odds and Ends (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Odds and Ends">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch12_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch12_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm">Java Servlet Programming</a></td><td align="right" valign="top" width="172"><a href="ch13_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 13.  Odds and Ends</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_01.htm">Parsing Parameters</a>
<br>
<a href="ch13_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_02.htm">Sending Email</a>
<br>
<a href="ch13_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_03.htm">Using Regular Expressions</a>
<br>
<a href="ch13_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_04.htm">Executing Programs</a>
<br>
<a href="ch13_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_05.htm">Using Native Methods</a>
<br>
<a href="ch13_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_06.htm">Acting as an RMI Client</a>
<br>
<a href="ch13_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_07.htm">Debugging</a>
<br>
<a href="ch13_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_08.htm">Performance Tuning</a>
<br>
</p>
</div>


<p>Every house has a junk drawer--a drawer loaded to the brim with
odds and ends that don't exactly fit into any organized drawer and
yet can't be thrown away because when they're needed
they're really needed. This chapter is like that drawer. It
holds a whole slew of useful servlet examples and tips that
don't really fit anywhere else. Included are servlets that
parse parameters, send email, execute programs, use regular
expression engines, use native methods, and act as RMI clients.
There's also a demonstration of basic debugging techniques,
along with some suggestions for servlet performance tuning.
</p>



<h2 class="sect1">13.1. Parsing Parameters</h2>

<p>If you've tried your hand at writing your own servlets as
you've read through this book, you've probably noticed
how awkward it can be to get and <a name="INDEX-2223"></a><a name="INDEX-2224"></a><a name="INDEX-2225"></a>
parse request parameters, especially when the parameters have to be
converted to some non-<tt class="literal">String</tt> format. For example,
let's assume you want to fetch the <tt class="literal">count</tt>
parameter and get its value as an <tt class="literal">int</tt>.
Furthermore, let's assume you want to handle error conditions
by calling
<tt class="literal">handleNoCount()</tt><a name="INDEX-2226"></a><a name="INDEX-2227"></a>
if <tt class="literal">count</tt> isn't given and
<tt class="literal">handleMalformedCount()</tt><a name="INDEX-2228"></a><a name="INDEX-2229"></a>
if <tt class="literal">count</tt> cannot be parsed as an integer. To do
this using the standard Servlet API requires the following code:
</p>

<blockquote>
<pre class="programlisting">int count;

String param = req.getParameter("count");
if (param == null || param.length() == 0) {
  handleNoCount();
}
else {
  try {
    count = Integer.parseInt(param);
  }
  catch (NumberFormatException e) {
    handleMalformedCount();
  }
}</pre>
</blockquote>

<p>Does this look like any code you've written? It's not
very pretty, is it? A better solution is to hand off the
responsibility for getting and parsing parameters to a utility class.
The <tt class="literal">com.oreilly.servlet.ParameterParser</tt> class is
just such a class. By using <tt class="literal">ParameterParser</tt>, we
can rewrite the previous code to be more elegant:
</p>

<blockquote>
<pre class="programlisting">int count;

ParameterParser parser = new ParameterParser(req);
try {
  count = parser.getIntParameter("count");
}
catch (NumberFormatException e) {
  handleMalformedCount();
}
catch (ParameterNotFoundException e) {
  handleNoCount();
}</pre>
</blockquote>

<p>The parameter parser's <tt class="literal">getIntParameter()</tt>
method returns the specified parameter's value as an
<tt class="literal">int</tt>. It throws a
<tt class="literal">NumberFormatException</tt> if the parameter cannot be
converted to an <tt class="literal">int</tt> and a
<tt class="literal">ParameterNotFoundException</tt> if the parameter
isn't part of the request. It also throws
<tt class="literal">ParameterNotFoundException</tt> if the parameter had a
value of the empty string. This often happens with form submissions
for text fields when nothing is entered, something that for all
intents and purposes should be treated the same as a missing
parameter.
</p>

<p>If it's enough that a servlet use a default value if
there's a problem with a parameter, as is often the case, the
code can be simplified even further:
</p>

<blockquote>
<pre class="programlisting">ParameterParser parser = new ParameterParser(req);
int count = parser.getIntParameter("count", 0);</pre>
</blockquote>

<p>This second version of <tt class="literal">getIntParameter()</tt> takes a
default value of <tt class="literal">0</tt> that is returned in lieu of
throwing an exception.
</p>

<a name="ch13-2-fm2xml"></a>
<h3 class="sect2">13.1.1. ParameterParser Code</h3>

<p>The <tt class="literal">ParameterParser</tt> class contains more than a
dozen methods that return request parameters--two for each of
Java's native types. It also has two
<tt class="literal">getStringParameter()</tt> methods in case you want to
get the parameter in its raw <tt class="literal">String</tt> format. The
code for <tt class="literal">ParameterParser</tt> is provided in <a href="#ch13-21189">Example 13-1</a>; <tt class="literal">ParameterNotFoundException</tt>
is in <a href="#ch13-13624">Example 13-2</a>.
</p>

<a name="ch13-21189"></a>
<div class="example">
<h4 class="objtitle">Example 13-1. The ParameterParser class </h4>
<blockquote>
<pre class="programlisting">package com.oreilly.servlet;

import java.io.*;
import javax.servlet.*;

public class ParameterParser {

  private ServletRequest req;

  public ParameterParser(ServletRequest req) {
    this.req = req;
  }

  public String getStringParameter(String name)
      throws ParameterNotFoundException {
    // Use getParameterValues() to avoid the once-deprecated getParameter()
    String[] values = req.getParameterValues(name);
    if (values == null)
      throw new ParameterNotFoundException(name + " not found");
    else if (values[0].length() == 0)
      throw new ParameterNotFoundException(name + " was empty");
    else
      return values[0];  // ignore multiple field values
  }

  public String getStringParameter(String name, String def) {
    try { return getStringParameter(name); }
    catch (Exception e) { return def; }
  }

  public boolean getBooleanParameter(String name)
      throws ParameterNotFoundException {
    return new Boolean(getStringParameter(name)).booleanValue();
  }

  public boolean getBooleanParameter(String name, boolean def) {
    try { return getBooleanParameter(name); }
    catch (Exception e) { return def; }
  }

  public byte getByteParameter(String name)
      throws ParameterNotFoundException, NumberFormatException {
    return Byte.parseByte(getStringParameter(name));
  }

  public byte getByteParameter(String name, byte def) {
    try { return getByteParameter(name); }
    catch (Exception e) { return def; }
  }

  public char getCharParameter(String name)
      throws ParameterNotFoundException {
    String param = getStringParameter(name);
    if (param.length() == 0)  // shouldn't be possible
      throw new ParameterNotFoundException(name + " is empty string");
    else
      return (param.charAt(0));
  }

  public char getCharParameter(String name, char def) {
    try { return getCharParameter(name); }
    catch (Exception e) { return def; }
  }

  public double getDoubleParameter(String name)
      throws ParameterNotFoundException, NumberFormatException {
    return new Double(getStringParameter(name)).doubleValue();
  }

  public double getDoubleParameter(String name, double def) {
    try { return getDoubleParameter(name); }
    catch (Exception e) { return def; }
  }

  public float getFloatParameter(String name)
      throws ParameterNotFoundException, NumberFormatException {
    return new Float(getStringParameter(name)).floatValue();
  }

  public float getFloatParameter(String name, float def) {
    try { return getFloatParameter(name); }
    catch (Exception e) { return def; }
  }

  public int getIntParameter(String name)
      throws ParameterNotFoundException, NumberFormatException {
    return Integer.parseInt(getStringParameter(name));
  }

  public int getIntParameter(String name, int def) {
    try { return getIntParameter(name); }
    catch (Exception e) { return def; }
  }

  public long getLongParameter(String name)
      throws ParameterNotFoundException, NumberFormatException {
    return Long.parseLong(getStringParameter(name));
  }

  public long getLongParameter(String name, long def) {
    try { return getLongParameter(name); }
    catch (Exception e) { return def; }
  }

  public short getShortParameter(String name)
      throws ParameterNotFoundException, NumberFormatException {
    return Short.parseShort(getStringParameter(name));
  }

  public short getShortParameter(String name, short def) {
    try { return getShortParameter(name); }
    catch (Exception e) { return def; }
  }
}</pre>
</blockquote>
</div>

<a name="ch13-13624"></a>
<div class="example">
<h4 class="objtitle">Example 13-2. The ParameterNotFoundException class </h4>
<blockquote>
<pre class="programlisting">package com.oreilly.servlet;

public class ParameterNotFoundException extends Exception {

  public ParameterNotFoundException() {
    super();
  }

  public ParameterNotFoundException(String s) {
    super(s);
  }
}</pre>
</blockquote>
</div>

<a name="INDEX-2230"></a>
<a name="INDEX-2231"></a>
<a name="INDEX-2232"></a>

















<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch12_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch12_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch13_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">12.7. Receiving Multilingual Input</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">13.2. Sending Email</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
