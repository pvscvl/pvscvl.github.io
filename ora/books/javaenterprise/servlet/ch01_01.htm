<html>
<head>
<title>Introduction (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Introduction">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch00_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch00_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm">Java Servlet Programming</a></td><td align="right" valign="top" width="172"><a href="ch01_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch01_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 1.  Introduction</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch01_01.htm">History of Web Applications</a>
<br>
<a href="ch01_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch01_02.htm">Support for Servlets</a>
<br>
<a href="ch01_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch01_03.htm">The Power of Servlets</a>
<br>
</p>
</div>


<p>The rise of server-side Java applications is one of the latest and
most exciting trends in Java programming. The Java language was
originally intended for use in small, embedded devices. It was first
hyped as a language for developing elaborate client-side web content
in the form of applets. Until recently, Java's potential as a
server-side development platform had been sadly overlooked. Now, Java
is coming into its own as a language ideally suited for server-side
development.
</p>

<p>Businesses in particular have been quick to recognize Java's
potential on the server--Java is inherently suited for large
client/server applications. The cross-platform nature of Java is
extremely useful for organizations that have a heterogeneous
collection of servers running various flavors of the Unix and Windows
operating systems. Java's modern, object-oriented,
memory-protected design allows developers to cut development cycles
and increase reliability. In addition, Java's built-in support
for networking and enterprise APIs provides access to legacy data,
easing the transition from older client/server systems.
</p>

<p>Java servlets are a key component of server-side Java development. A
<a name="INDEX-42"></a>
servlet is a small, pluggable extension to a server that enhances the
server's functionality. Servlets allow developers to extend and
customize any Java-enabled server--a web server, a mail server,
an application server, or any custom server--with a hitherto
unknown degree of portability, flexibility, and ease. But before we
go into any more detail, let's put things into perspective.
</p>



<h2 class="sect1">1.1. History of Web Applications</h2>

<p>While servlets can be used to extend the functionality of any
Java-enabled server, today they are most often used to extend web
servers, providing a powerful, efficient replacement for CGI scripts.
When you use a servlet to create dynamic content for a web page or
otherwise extend the functionality of a web server, you are in effect
creating a <em class="emphasis">web
application</em><a name="INDEX-43"></a>. While a web page merely displays
static content and lets the user navigate through that content, a web
application provides a more interactive experience. A web application
can be as simple as a keyword search on a document archive or as
complex as an electronic storefront. Web applications are being
deployed on the Internet and on corporate intranets and extranets,
where they have the potential to increase productivity and change the
way that companies, large and small, do business.
</p>

<p>To understand the power of servlets, we need to step back and look at
some of the other approaches that can be used to create web
applications.
</p>

<a name="ch01-2-fm2xml"></a>
<h3 class="sect2">1.1.1. Common Gateway Interface</h3>

<p>
<a name="INDEX-44"></a>
The Common Gateway Interface, normally referred to as CGI, was one of
the first practical techniques for creating dynamic content. With
<a name="INDEX-45"></a>
CGI, a web server passes certain requests to an external program. The
output of this program is then sent to the client in place of a
static file. The advent of CGI made it possible to implement all
sorts of new functionality in web pages, and CGI quickly became a de
facto standard, implemented on dozens of web servers.
</p>

<p>It's interesting to note that the ability of CGI programs to
create dynamic web pages is a side effect of its intended purpose: to
define a standard method for an information server to talk with
external applications. This origin explains why
<a name="INDEX-46"></a><a name="INDEX-47"></a>CGI has perhaps
the worst life cycle imaginable. When a server receives a request
that accesses a CGI program, it must create a new process to run the
CGI program and then pass to it, via environment variables and
standard input, every bit of information that might be necessary to
generate a response. Creating a process for every such request
requires time and significant server resources, which limits the
number of requests a server can handle concurrently. <a href="#ch01-38753">Figure 1-1</a> shows the CGI life cycle.
</p>

<a name="ch01-38753"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0101.gif" webstripperlinkwas="figs/jsp_0101.gif"></div>
<h4 class="objtitle">Figure 1-1. The CGI life cycle</h4>

<p>Even though a CGI program can be written in almost any language, the
<a name="INDEX-48"></a>
Perl programming language has become the predominant choice. Its
advanced text-processing capabilities are a big help in managing the
details of the CGI interface. Writing a CGI script in Perl gives it a
semblance of platform independence, but it also requires that each
request start a separate Perl interpreter, which takes even more time
and requires extra resources.
</p>

<p>Another often-overlooked problem with CGI is that a CGI program
cannot interact with the web server or take advantage of the
server's abilities once it begins execution because it is
running in a separate process. For example, a CGI script cannot write
to the server's log file.
</p>

<p>For more information on
<a name="INDEX-49"></a><a name="INDEX-50"></a>CGI
programming, <a name="INDEX-51"></a>see <em class="emphasis">CGI
Programming on the World Wide Web </em><a name="INDEX-52"></a><a name="INDEX-53"></a>by Shishir Gundavaram
(O'Reilly).
</p>

<a name="ch01-3-fm2xml"></a>
<h3 class="sect3">1.1.1.1. FastCGI</h3>

<p>A company named Open Market developed an alternative to standard CGI
named FastCGI. In many ways, FastCGI works just like CGI--the
important difference is that FastCGI creates a single persistent
process for each FastCGI program, as shown in <a href="#ch01-16396">Figure 1-2</a>. This eliminates the need to create a new
process for each request.
</p>

<a name="ch01-16396"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0102.gif" webstripperlinkwas="figs/jsp_0102.gif"></div>
<h4 class="objtitle">Figure 1-2. The FastCGI life cycle</h4>

<p>Although FastCGI is a step in the right direction, it still has a
problem with process proliferation: there is at least one process for
each FastCGI program. If a FastCGI program is to handle concurrent
requests, it needs a pool of processes, one per request. Considering
that each process may be executing a Perl interpreter, this approach
does not scale as well as you might hope. (Although, to its credit,
FastCGI can distribute its processes across multiple servers.)
Another problem with FastCGI is that it does nothing to help the
FastCGI program more closely interact with the server. As of this
writing, the FastCGI approach has not been implemented by some of the
more popular servers, including
<a name="INDEX-54"></a><a name="INDEX-55"></a>
Microsoft's Internet Information Server. Finally, FastCGI
programs are only as portable as the language in which they're
written.
</p>

<p>For more information on FastCGI,
<a name="INDEX-56"></a>see <a href="../../../../../../../www.fastcgi.com/">http://www.fastcgi.com/</a><a name="INDEX-57"></a><a name="INDEX-58"></a><a name="INDEX-59"></a>.
</p>



<a name="ch01-4-fm2xml"></a>
<h3 class="sect3">1.1.1.2. mod_perl</h3>

<p>If you are using the <a name="INDEX-60"></a>Apache web server, another
option for improving CGI performance is using
<em class="emphasis">mod_perl</em>. <em class="emphasis">mod_perl</em> is a
module for the Apache server that embeds a copy of the Perl
interpreter into the Apache <em class="emphasis">httpd</em> executable,
providing complete access to Perl functionality within Apache. The
effect is that your CGI scripts are precompiled by the server and
executed without forking, thus running much more quickly and
efficiently. For more information on <em class="emphasis">mod_perl</em>,
see <a href="../../../../../../../perl.apache.org/">http://perl.apache.org/</a><a name="INDEX-61"></a><a name="INDEX-62"></a>.
</p>



<a name="ch01-5-fm2xml"></a>
<h3 class="sect3">1.1.1.3. PerlEx</h3>

<p>PerlEx, developed by ActiveState, improves the performance of CGI
scripts written in Perl that run on Windows NT web servers
(Microsoft's Internet Information Server,
O'Reilly's WebSite Professional, and Netscape's
FastTrack Server and Enterprise Server). PerlEx uses the web
server's native API to achieve its performance gains. For more
information, see <a href="../../../../../../../www.activestate.com/plex/">http://www.activestate.com/plex/</a><a name="INDEX-63"></a><a name="INDEX-64"></a>.
</p>



<a name="ch01-6-fm2xml"></a>
<h3 class="sect2">1.1.2. Other Solutions</h3>

<p>CGI/<a name="INDEX-65"></a>Perl has the advantage of being a
more-or-less platform-independent way to produce dynamic web content.
Other well-known technologies for creating web applications, such as
ASP and server-side JavaScript, are proprietary solutions that work
only with certain web servers.
</p>

<a name="ch01-7-fm2xml"></a>
<h3 class="sect3">1.1.2.1. Server Extension APIs</h3>

<p>Several companies have created proprietary <a name="INDEX-66"></a><a name="INDEX-67"></a>server extension APIs for their web
servers. For example, Netscape provides an internal API called
<a name="INDEX-68"></a><a name="INDEX-69"></a>
NSAPI (now becoming WAI) and Microsoft provides
<a name="INDEX-70"></a><a name="INDEX-71"></a>
ISAPI. Using one of these APIs, you can write server extensions that
enhance or change the base functionality of the server, allowing the
server to handle tasks that were once relegated to external CGI
programs. As you can see in <a href="#ch01-41794">Figure 1-3</a>, server
extensions exist within the main process of a web server.
</p>

<a name="ch01-41794"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0103.gif" webstripperlinkwas="figs/jsp_0103.gif"></div>
<h4 class="objtitle">Figure 1-3. The server extension life cycle</h4>

<p>Because server-specific APIs use linked C or C++ code, server
extensions can run extremely fast and make full use of the
server's resources. Server extensions, however, are not a
perfect solution by any means. Besides being difficult to develop and
maintain, they pose significant security and reliability hazards: a
crashed server extension can bring down the entire server. And, of
course, proprietary server extensions are inextricably tied to the
server API for which they were written--and often tied to a
particular operating system as well.
</p>



<a name="ch01-8-fm2xml"></a>
<h3 class="sect3">1.1.2.2. Active Server Pages</h3>

<p>Microsoft has developed a technique for generating dynamic web
content called <a name="INDEX-72"></a>Active Server Pages, or sometimes just ASP.
With ASP, an HTML page on the web server can contain snippets of
embedded code (usually
<a name="INDEX-73"></a>VBScript or
<a name="INDEX-74"></a>
JScript--although it's possible to use nearly any
language). This code is read and executed by the web server before it
sends the page to the client. ASP is optimized for generating small
portions of dynamic content.
</p>

<p>Support for <a name="INDEX-75"></a>ASP is built into
<a name="INDEX-76"></a>Microsoft Internet Information Server
Version 3.0 and above, available for free from <a href="../../../../../../../www.microsoft.com/iis">http://www.microsoft.com/iis</a><a name="INDEX-77"></a><a name="INDEX-78"></a>. Support for other web servers is
available as a commercial product from Chili!Soft at <a href="../../../../../../../www.chilisoft.com/">http://www.chilisoft.com</a><a name="INDEX-79"></a><a name="INDEX-80"></a><a name="INDEX-81"></a>.
</p>

<p>For more information on programming Active Server Pages, see
<a href="../../../../../../../www.microsoft.com/workshop/server/default.asp">http://www.microsoft.com/workshop/server/default.asp</a><a name="INDEX-82"></a><a name="INDEX-83"></a> and <a href="../../../../../../../www.activeserverpages.com/">http://www.activeserverpages.com/</a>.
</p>



<a name="ch01-9-fm2xml"></a>
<h3 class="sect3">1.1.2.3. Server-side JavaScript</h3>

<p>
<a name="INDEX-84"></a>Netscape too has a technique for
server-side scripting, which it calls <a name="INDEX-85"></a><a name="INDEX-86"></a><a name="INDEX-87"></a><a name="INDEX-88"></a>
server-side JavaScript, or SSJS for short. Like ASP, SSJS allows
snippets of code to be embedded in HTML pages to generate dynamic web
content. The difference is that SSJS uses JavaScript as the scripting
language. With SSJS, web pages are precompiled to improve
performance.
</p>

<p>Support for server-side JavaScript is available only with
<a name="INDEX-89"></a><a name="INDEX-90"></a><a name="INDEX-91"></a><a name="INDEX-92"></a>Netscape FastTrack Server and Enterprise
Server Version 2.0 and above.
</p>

<p>For more information on programming with server-side JavaScript, see
<a href="../../../../../../../developer.netscape.com/tech/javascript/ssjs/ssjs.html">http://developer.netscape.com/tech/javascript/ssjs/ssjs.html</a><a name="INDEX-93"></a><a name="INDEX-94"></a><a name="INDEX-95"></a>.
</p>



<a name="ch01-10-fm2xml"></a>
<h3 class="sect2">1.1.3. Java Servlets</h3>

<p>Enter Java servlets. As was said earlier, a servlet is a generic
server extension--a Java class that can be loaded dynamically to
expand the functionality of a server. Servlets are commonly used with
web servers, where they can take the place of CGI scripts. A servlet
is similar to a proprietary server extension, except that it runs
inside a Java Virtual Machine (JVM) on the server (see <a href="#ch01-16995">Figure 1-4</a>), so it is safe and portable. Servlets operate
solely within the domain of the server: unlike applets, they do not
require support for Java in the web browser.
</p>

<a name="ch01-16995"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0104.gif" webstripperlinkwas="figs/jsp_0104.gif"></div>
<h4 class="objtitle">Figure 1-4. The servlet life cycle</h4>

<p>Unlike CGI and FastCGI, which use multiple processes to handle
separate programs and/or separate requests, servlets are all handled
by separate threads within the web server process. This means that
servlets are also efficient and scalable. Because servlets run within
the web server, they can interact very closely with the server to do
things that are not possible with CGI scripts.
</p>

<p>Another advantage of servlets is that they are portable: both across
operating systems as we are used to with Java and also across web
servers. As you'll see shortly, all of the major web servers
support servlets. We believe that Java servlets offer the best
possible platform for web application development, and we'll
have much more to say about this later in the chapter.
</p>

<p>Although servlets are most commonly used as a replacement for CGI
scripts on a web server, they can extend any sort of server. Imagine,
for example, a Java-based FTP server that handles each command with a
separate servlet. New commands can be added by simply plugging in new
servlets. Or, imagine a mail server that allows servlets to extend
its functionality, perhaps by performing a virus scan on all attached
documents or handling mail filtering tasks.
</p>

<p>This book emphasizes the use of servlets as a replacement for CGI
programs. We believe that, at least in the near term, most servlet
developers will design and deploy servlets for use with HTTP servers.
In the long term, however, other uses are likely to catch on, so this
book takes pains to point out what functionality is applicable to
generic servlets and what applies only to HTTP servlets. Whatever you
hope to do with servlets, this book can help you with your task.
</p>









<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch00_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch00_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch01_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch01_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">0.6. Acknowledgments</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">1.2. Support for Servlets</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
