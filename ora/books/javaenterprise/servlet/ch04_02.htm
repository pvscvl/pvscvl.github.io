<html>
<head>
<title>The Server (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The Server">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_01.htm">Chapter 4: Retrieving Information</a></td><td align="right" valign="top" width="172"><a href="ch04_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">4.2. The Server</h2>

<p>A servlet can find out much about the server in which it is
executing. It can learn the hostname, listening port, and server
software, among other things. A servlet can display this information
to a client, use it to customize its behavior based on a particular
server package, or even use it to explicitly restrict the machines on
which the servlet will run.
</p>

<a name="ch04-4-fm2xml"></a>
<h3 class="sect2">4.2.1. Getting Information About the Server</h3>

<p>There are four methods that a servlet can use to learn about its
<a name="INDEX-639"></a><a name="INDEX-640"></a>server: two that are called using the
<tt class="literal">ServletRequest</tt> object passed to the servlet and
two that are called from the <tt class="literal">ServletContext</tt> object
in which the servlet is executing. A servlet can get the name of the
server and the <a name="INDEX-641"></a><a name="INDEX-642"></a>port number for a particular request
with <tt class="literal">getServerName()</tt> and
<tt class="literal">getServerPort()</tt>, respectively:
</p>

<blockquote>
<pre class="programlisting">public String ServletRequest.getServerName()
public int ServletRequest.getServerPort()</pre>
</blockquote>

<p>These methods are attributes of <tt class="literal">ServletRequest</tt>
because the values can change for different requests if the server
has more than one name (a technique called
<a name="INDEX-643"></a>virtual
hosting). The returned name might be something like
<tt class="literal">"www.servlets.com"</tt> while the returned port might
be something like <tt class="literal">"8080"</tt>.
</p>

<p>The
<tt class="literal">getServerInfo()</tt><a name="INDEX-644"></a><a name="INDEX-645"></a>
and
<tt class="literal">getAttribute()</tt><a name="INDEX-646"></a><a name="INDEX-647"></a>
methods of <tt class="literal">ServletContext </tt>provide information
about the server software and its attributes:
</p>

<blockquote>
<pre class="programlisting">public String ServletContext.getServerInfo()
public Object ServletContext.getAttribute(String name)</pre>
</blockquote>

<p>
<tt class="literal">getServerInfo()</tt> returns the name and version of
the server software, separated by a slash. The string returned might
be something like <tt class="literal">"JavaWebServer/1.1.1"</tt>.
<tt class="literal">getAttribute()</tt> returns the value of the named
server attribute as an <tt class="literal">Object</tt> or
<tt class="literal">null</tt> if the attribute does not exist. The
attributes are server-dependent. You can think of this method as a
back door through which a servlet can get extra information about its
server. <a name="INDEX-648"></a>Attribute names should follow the same
convention as package names. The
<a name="INDEX-649"></a>package names
<tt class="literal">java.*</tt><a name="INDEX-650"></a><a name="INDEX-651"></a>
and <tt class="literal">javax.*</tt><a name="INDEX-652"></a><a name="INDEX-653"></a>
are reserved for use by the Java Software division of Sun
Microsystems (formerly known as JavaSoft), and
<tt class="literal">com.sun.*</tt><a name="INDEX-654"></a><a name="INDEX-655"></a>
is reserved for use by Sun Microsystems. See your server's
documentation for a list of its attributes. Because these methods are
attributes of <tt class="literal">ServletContext</tt> in which the servlet
is executing, you have to call them through that object:
</p>

<blockquote>
<pre class="programlisting">String serverInfo = getServletContext().getServerInfo();</pre>
</blockquote>

<p>The most straightforward use of information about the server is an
"About This Server"
<a name="INDEX-656"></a>servlet, as shown in <a href="#ch04-33858">Example 4-3</a>.
</p>

<a name="ch04-33858"></a>
<div class="example">
<h4 class="objtitle">Example 4-3. Snooping the server </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;

public class ServerSnoop extends GenericServlet {

  public void service(ServletRequest req, ServletResponse res) 
                             throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();

    out.println("req.getServerName(): " + req.getServerName());
    out.println("req.getServerPort(): " + req.getServerPort());
    out.println("getServletContext().getServerInfo(): " +
                 getServletContext().getServerInfo());
    out.println("getServerInfo() name: " +
                 getServerInfoName(getServletContext().getServerInfo()));
    out.println("getServerInfo() version: " +
                 getServerInfoVersion(getServletContext().getServerInfo()));
    out.println("getServletContext().getAttribute(\"attribute\"): " + 
                 getServletContext().getAttribute("attribute"));
  }

  private String getServerInfoName(String serverInfo) {
    int slash = serverInfo.indexOf('/');
    if (slash == -1) return serverInfo;
    else return serverInfo.substring(0, slash);
  }

  private String getServerInfoVersion(String serverInfo) {
    int slash = serverInfo.indexOf('/');
    if (slash == -1) return null;
    else return serverInfo.substring(slash + 1);
  }
}</pre>
</blockquote>
</div>

<p>This servlet also directly subclasses
<tt class="literal">GenericServlet</tt>, demonstrating that all the
information about a server is available to servlets of any type. The
servlet outputs simple raw text. When accessed, this servlet prints
something like:
</p>

<blockquote>
<pre class="programlisting">req.getServerName(): localhost
req.getServerPort(): 8080
getServletContext().getServerInfo(): JavaWebServer/1.1.1
getServerInfo() name: JavaWebServer
getServerInfo() version: 1.1.1
getServletContext().getAttribute("attribute"): null</pre>
</blockquote>

<p>Unfortunately, there is no server-independent way to determine the
<a name="INDEX-657"></a><a name="INDEX-658"></a>server's root directory,
referred to in this book as <em class="replaceable">server_root</em>.
However, some servers--including the Java Web Server--save
the server's root directory name in the
<tt class="literal">server.root</tt> system property, where it can be
retrieved using <tt class="literal">System.
getProperty("server.root")</tt><a name="INDEX-659"></a><a name="INDEX-660"></a><a name="INDEX-661"></a>.
</p>


<a name="ch04-5-fm2xml"></a>
<h3 class="sect2">4.2.2. Locking a Servlet to a Server</h3>

<p>This server information can be put to more productive uses.
Let's assume you've written a servlet and you don't
want it running just anywhere. Perhaps you want to sell it and, to
limit the chance of <a name="INDEX-662"></a><a name="INDEX-663"></a>unauthorized copying, you want to
lock the servlet to your customer's machine with a
<a name="INDEX-664"></a><a name="INDEX-665"></a>software
license. Or, alternatively, you've written a license generator
as a servlet and want to make sure it works only behind your
firewall. This can be done relatively easily because a servlet has
instant access to the information about its server.
</p>

<p>
<a href="#ch04-37328">Example 4-4</a> shows a
<a name="INDEX-666"></a><a name="INDEX-667"></a>servlet that locks itself to a particular
server IP address and port number. It requires an
<a name="INDEX-668"></a><a name="INDEX-669"></a>init parameter key that is
appropriate for its server IP address and port before it unlocks
itself and handles a request. If it does not receive the appropriate
key, it refuses to continue. The algorithm used to map the key to the
IP address and port (and vice-versa) must be secure.
</p>

<a name="ch04-37328"></a>
<div class="example">
<h4 class="objtitle">Example 4-4. A servlet locked to a server </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.net.*;
import java.util.*;
import javax.servlet.*;

public class KeyedServerLock extends GenericServlet {

  // This servlet has no class or instance variables
  // associated with the locking, so as to simplify
  // synchronization issues.

  public void service(ServletRequest req, ServletResponse res) 
                             throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();

    // The piracy check shouldn't be done in init 
    // because name/port are part of request.
    String key = getInitParameter("key");
    String host = req.getServerName();
    int port = req.getServerPort();

    // Check if the init parameter "key" unlocks this server.
    if (! keyFitsServer(key, host, port)) {
      // Explain, condemn, threaten, etc.
      out.println("Pirated!");
    }
    else {
      // Give 'em the goods
      out.println("valid");
      // etc...
    }
  }

  // This method contains the algorithm used to match a key with
  // a server host and port. This example implementation is extremely
  // weak and should not be used by commercial sites.
  //
  private boolean keyFitsServer(String key, String host, int port) {

    if (key == null) return false;

    long numericKey = 0;
    try {
      numericKey = Long.parseLong(key);
    }
    catch (NumberFormatException e) {
      return false;
    }

    // The key must be a 64-bit number equal to the logical not (~) 
    // of the 32-bit IP address concatenated with the 32-bit port number.

    byte hostIP[];
    try {
      hostIP = InetAddress.getByName(host).getAddress();
    } 
    catch (UnknownHostException e) {
      return false;
    }

    // Get the 32-bit IP address
    long servercode = 0;
    for (int i = 0; i &lt; 4; i++) {
      servercode &lt;&lt;= 8;
      servercode |= (hostIP[i] &amp; 255);
    }

    // Concatentate the 32-bit port number
    servercode &lt;&lt;= 32;
    servercode |= port;

    // Logical not
    long accesscode = ~numericKey;

    // The moment of truth: Does the key match?
    return (servercode == accesscode);
  }
}</pre>
</blockquote>
</div>

<p>This servlet refuses to perform unless given the correct key. To
really make it secure, however, the simple
<tt class="literal">keyFitsServer()</tt> logic should be replaced with a
strong algorithm and the whole servlet should be run through an
<a name="INDEX-670"></a> obfuscator to
prevent decompiling. <a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_04.htm">Example 4-8</a> later in this
chapter provides the code used to generate keys. If you try this
servlet yourself, it's best if you access the server with its
actual name, rather than <em class="emphasis">localhost</em>, so the
servlet can determine the web server's true name and IP
address.
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.1. Initialization Parameters</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.3. The Client</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
