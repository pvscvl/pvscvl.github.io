<html>
<head>
<title>Running Servlets Securely (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Running Servlets Securely">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_01.htm">Chapter 8: Security</a></td><td align="right" valign="top" width="172"><a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">8.4. Running Servlets Securely</h2>

<p>CGI programs and C++-based plug-ins operate with relatively
unfettered access to the server machine on which they execute
(limited on Unix machines by the user account permissions of the web
server process). This isn't so bad for an isolated programmer
developing for a single web server, but it's a security
nightmare for internet service providers (ISPs), corporations,
schools, and everyone else running shared web servers.
</p>

<p>For these sites, the problem isn't just protecting the server
from malicious CGI programmers. The more troublesome problem is
protecting from <em class="emphasis">careless</em> CGI programmers. There are dozens of
well-known CGI programming mistakes that could let a malicious client
gain unauthorized access to the server machine. One innocuous-looking
but poorly written Perl eval function is all it takes. For an
extensive list of CGI security gotchas, see Chapter 6 of The WWW
Security FAQ at <a name="INDEX-1524"></a><a name="INDEX-1525"></a><a name="INDEX-1526"></a><a name="INDEX-1527"></a><a name="INDEX-1528"></a><a href="../../../../../../../www.w3.org/Security/Faq/www-security-faq.html">http://www.w3.org/Security/Faq/www-security-faq.html</a>.
</p>

<p>To better understand the situation, imagine you're an ISP and
want to give your customers the ability to generate dynamic content
using CGI programs. What can you do to protect yourself?
Historically, ISPs have chosen one of three options:
</p>

<dl>
<dt>
<b>Have blind faith in the customer. </b>
</dt>
<dd>
<p>He's a good guy and a smart programmer, and besides, we have
his credit card number.
</p>
</dd>

<dt>
<b>Educate the customer. </b>
</dt>
<dd>
<p>If he reads the WWW Security FAQ and passes a written test,
we'll let him write CGI programs for our server.
</p>
</dd>

<dt>
<b>Review all code. </b>
</dt>
<dd>
<p>Before we install any CGI program on the server, we'll have our
expert review it and scan for security problems.
</p>
</dd>

</dl>

<p>None of these approaches work very well. Having blind faith is just
asking for trouble. Programmer education helps, but programmers are
human and bound to make mistakes. As for code review, there's
still no guarantees, plus it takes time and costs money to do the
extra work.
</p>

<p>Fortunately, with servlets there's another, better solution.
Because servlets are written in Java, they can be forced to follow
the rules of a security manager (or access controller with JDK 1.2)
to greatly limit the server's exposure to risk, all with a
minimal amount of human effort.
</p>

<a name="ch08-7-fm2xml"></a>
<h3 class="sect2">8.4.1. The Servlet Sandbox</h3>

<p>Servlets built using JDK 1.1 generally operate with a security model
called the
"<a name="INDEX-1529"></a><a name="INDEX-1530"></a>servlet sandbox." Under this
model, servlets are either trusted and given open access to the
server machine, or they're untrusted and have their access
limited by a restrictive security manager. The model is very similar
to the "applet sandbox," where untrusted applet code has
limited access to the client machine.
</p>

<p>What's a <a name="INDEX-1531"></a><a name="INDEX-1532"></a>security manager? It's a class
subclassed from <a name="INDEX-1533"></a><a name="INDEX-1534"></a>
java.lang.SecurityManager that is loaded by the Java environment to
monitor all security-related operations: opening network connections,
reading and writing files, exiting the program, and so on. Whenever
an application, applet, or servlet performs an action that could
cause a potential security breach, the environment queries the
security manager to check its permissions. For a normal Java
application, there is no security manager. When a web browser loads
an untrusted applet over the network, however, it loads a very
restrictive security manager before allowing the applet to execute.
</p>

<p>Servlets can use the same technology, if the web server implements
it. Local servlets can be trusted to run without a security manager,
or with a fairly lenient one. For the
<a name="INDEX-1535"></a><a name="INDEX-1536"></a>Java Web Server 1.1, this is what
happens when servlets are placed in the default servlet directory or
another local source. Servlets loaded from a remote source, on the
other hand, are by nature suspect and untrusted, so the Java Web
Server forces them to run in a very restrictive environment where
they can't access the local file system, establish network
connections, and so on.<a href="#FOOTNOTE-3">[3]</a> All this logic is contained within the server and is
invisible to the servlet, except that the servlet may see a
SecurityException thrown when it tries to access a restricted
resource. The servlet sandbox is a simple model, but it is already
more potent than any other server extension technology to date.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-3"></a>
<p>[3]If you want a local servlet
run in the restrictive environment, a workaround is to place them in
your server's document root (such as server_root/public_html) and
configure the server load them remotely from the same server.</p>
</blockquote>

<p>Using <a name="INDEX-1537"></a>
digital signatures, it is possible for remotely loaded servlets to be
trusted just like local servlets. Third-party servlets are often
packaged using the <a name="INDEX-1538"></a>Java Archive (JAR) file format. A JAR
file collects a group of class files and other resources into a
single archive for easy maintenance and fast download. Another nice
feature of JAR files that is useful to servlets is that they can be
digitally signed. This means that anyone with the public key for
"Crazy Al's Servlet Shack" can verify that her copy
of Al's Guestbook Servlet actually came from Al. On some
servers, including the Java Web Server, these authenticated servlets
can then be trusted and given extended access to the
system.<a href="#FOOTNOTE-4">[4]</a>
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-4"></a>
<p>[4]You can create your owned signed servlets
using a certificate generated by the JDK's key management tools
(javakey in JDK 1.1 or keytool and jarsigner in JDK 1.2).
Alternately, you can obtain signed certificates from VeriSign or
another certificate authority.</p> </blockquote>


<a name="ch08-8-fm2xml"></a>
<h3 class="sect2">8.4.2. Fine-grained Control</h3>

<p>This all-or-nothing approach to servlet permissions is useful, but it
can be overly limiting. Consequently, some servlet engines have begun
to explore a more <a name="INDEX-1539"></a><a name="INDEX-1540"></a>fine-grained protection of server
resources--for example, allowing a specific servlet to establish
a network connection but not write to the server's file system.
This fine-grained control is fairly awkward using the JDK 1.1 notion
of a <tt class="literal">SecurityManager</tt> class and, therefore, isn't widely
implemented, although it can be done, as the Java Web Server 1.1
proves.
</p>

<p>The <a name="INDEX-1541"></a><a name="INDEX-1542"></a><a name="INDEX-1543"></a><a name="INDEX-1544"></a>Java Web Server 1.1 includes eight
permissions that can be granted to servlets:
</p>

<dl>
<dt>
<b>Load servlet</b>
</dt>
<dd>
<p>Let the servlet load a named servlet.</p>
</dd>

<dt>
<b>Write files</b>
</dt>
<dd>
<p>Let the servlet write any file on the local file system.</p>
</dd>

<dt>
<b>Listen to socket</b>
</dt>
<dd>
<p>Allow the servlet to accept incoming socket (network) connections.</p>
</dd>

<dt>
<b>Link libraries</b>
</dt>
<dd>
<p>Allow the loading of native libraries, such as the JDBC-ODBC bridge.</p>
</dd>

<dt>
<b>Read files</b>
</dt>
<dd>
<p>Let the servlet read any file on the local file system.</p>
</dd>

<dt>
<b>Open remote socket</b>
</dt>
<dd>
<p>Allow the servlet to connect to an external host.</p>
</dd>

<dt>
<b>Execute programs</b>
</dt>
<dd>
<p>Permit the servlet to execute external programs on the server. This
is useful for servlets that absolutely require access to some system
utilities, but it is very dangerous: <em class="emphasis">rm</em> and <em class="emphasis">del</em> qualify as an
external programs!
</p>
</dd>

<dt>
<b>Access system properties</b>
</dt>
<dd>
<p>Grant access to <tt class="literal">java.lang.System</tt> properties.</p>
</dd>

</dl>

<p>A screen shot of the
<a name="INDEX-1545"></a><a name="INDEX-1546"></a>
Administration Tool configuration page that assigns these permissions
is shown in <a href="#ch08-30087">Figure 8-3</a>.
</p>

<a name="ch08-30087"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0803.gif" webstripperlinkwas="figs/jsp_0803.gif"></div>
<h4 class="objtitle">Figure 8-3. Eight permissions</h4>

<p>Theoretically, any criterion can be used to determine what a servlet
can or cannot do. It's possible for the security manager to
base its permission-granting decision on any factor, including these:
</p>

<dl>
<dt>
<b>The servlet itself</b>
</dt>
<dd>
<p>For example, this servlet can read files and load native libraries
but cannot write files.
</p>
</dd>

<dt>
<b>The client user</b>
</dt>
<dd>
<p>For instance, any servlet responding to a request from this client
user can write files.
</p>
</dd>

<dt>
<b>The client host</b>
</dt>
<dd>
<p>For example, any servlet responding to a request from this machine
can establish network connections.
</p>
</dd>

<dt>
<b>Digital signatures</b>
</dt>
<dd>
<p>For instance, any servlet in a JAR file signed by this entity has
full reign on the server system.
</p>
</dd>

</dl>


<a name="ch08-9-fm2xml"></a>
<h3 class="sect2">8.4.3. Access Controllers</h3>

<p>JDK 1.2 introduces a new extension to the security manager system:
the access controller. The new architecture is quite similar to the
"give particular servlets particular privileges" approach
implemented by the Java Web Server 1.1, except that it applies to all
JDK 1.2 programs and therefore makes fine-grained permission
implementations much easier.
</p>

<p>An <a name="INDEX-1547"></a><a name="INDEX-1548"></a>access controller allows what
might be called super-fine-grained permission control. Instead of
granting a servlet the general ability to write files, with an access
controller a servlet can be given the right to write to a single
file--perfect for a counter servlet, for example. Or it can be
given the right to read and write files only in the client
user's home directory on the server--appropriate for a
client/server application. With access controllers, servlets can be
given the rights to do exactly what they need to do and nothing more.
</p>

<p>Access controllers work by placing individual pieces of code, often
identified by digital signatures, into particular virtual domains.
Classes in these domains can be granted fine-grained permissions,
such as the ability to read from the server's document root,
write to a temporary directory, and accept socket connections. All
permission policy decisions are managed by a single instance of the
<tt class="literal">java.security.AccessController</tt> class. This class bases its policy
decisions on a simple configuration file, easily managed using a
graphical user interface.
</p>

<p>Now, instead of relying on complicated custom security managers as
the Java Web Server team had to do, a servlet engine need only add a
few lines of code to use an access controller. So, while the Java Web
Server is the only servlet implementation supporting fine-grained
security as of early 1998, once JDK 1.2 becomes popular, it should be
easy for other servlet engine implementers to add the same level of
<a name="INDEX-1549"></a><a name="INDEX-"></a> fine-grained access
control. These <a name="INDEX-1550"></a><a name="INDEX-1551"></a> implementations may already be available
by the time you read this.<a name="INDEX-1552"></a><a name="INDEX-1553"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">8.3. Secure Sockets Layer (SSL)</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">9. Database Connectivity</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
