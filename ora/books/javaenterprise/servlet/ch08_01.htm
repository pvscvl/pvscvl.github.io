<html>
<head>
<title>Security (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Security">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch07_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm">Java Servlet Programming</a></td><td align="right" valign="top" width="172"><a href="ch08_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 8.  Security</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_01.htm">HTTP Authentication</a>
<br>
<a href="ch08_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_02.htm">Digital Certificates</a>
<br>
<a href="ch08_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_03.htm">Secure Sockets Layer (SSL)</a>
<br>
<a href="ch08_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_04.htm">Running Servlets Securely</a>
<br>
</p>
</div>


<p>
<a name="INDEX-1419"></a>So far
we have imagined that our servlets exist in a perfect world, where
everyone is trustworthy and nobody locks their doors at night. Sadly,
that's a 1950s fantasy world: the truth is that the Internet
has its share of <a name="INDEX-1420"></a><a name="INDEX-1421"></a>fiendish rogues. As companies place
more and more emphasis on online commerce and begin to load their
Intranets with sensitive information, security has become one of the
most important topics in web programming.
</p>

<p>
<a name="INDEX-1422"></a>
Security is the science of keeping sensitive information in the hands
of authorized users. On the web, this boils down to three important
issues:
</p>

<dl>
<dt>
<b>Authentication</b>
</dt>
<dd>
<p>Being able to verify the identities of the parties involved</p>
</dd>

<dt>
<b>Confidentiality</b>
</dt>
<dd>
<p>Ensuring that only the parties involved can understand the
communication
</p>
</dd>

<dt>
<b>Integrity</b>
</dt>
<dd>
<p>Being able to verify that the content of the communication is not
changed during transmission
</p>
</dd>

</dl>

<p>A client wants to be sure that it is talking to a legitimate server
(authentication), and it also want to be sure that any information it
transmits, such as credit card numbers, is not subject to
eavesdropping (confidentiality). The server is also concerned with
authentication and confidentiality. If a company is selling a service
or providing sensitive information to its own employees, it has a
vested interest in making sure that nobody but an authorized user can
access it. And both sides need integrity to make sure that whatever
information they send gets to the other party unaltered.
</p>

<p>Authentication, confidentiality, and integrity are all linked by
digital certificate technology. Digital certificates allow web
servers and clients to use advanced cryptographic techniques to
handle identification and encryption in a secure manner. Thanks to
Java's built-in support for digital certificates, servlets are
an excellent platform for deploying secure web applications that use
digital certificate technology. We'll be taking a closer look
at them later.
</p>

<p>Security is also about making sure that crackers can't gain
access to the sensitive data on your web server. Because Java was
designed from the ground up as a secure, network-oriented language,
it is possible to leverage the built-in security features and make
sure that server add-ons from third parties are almost as safe as the
ones you write yourself.
</p>

<p>This chapter introduces the basics of web security and digital
certificate technology in the context of using servlets. It also
discusses how to maintain the security of your web server when
running servlets from untrusted third-parties. You'll notice
that this chapter takes a higher-level approach and shows fewer
examples than previous chapters. The reason is that many of the
topics in this chapter require web server-specific administration to
implement. The servlets just tag along for the ride.
</p>

<p>Finally, a note of caution. We are just a couple of servlet
programmers, and we disclaim all responsibility for any
security-related incidents that might result from following our
advice. For a much more complete overview of web security technology
and procedures, see <a name="INDEX-1423"></a><a name="INDEX-1424"></a>Web Security &amp; Commerce by
Simson Garfinkel with Gene Spafford (O'Reilly). Of course, they
probably won't accept responsibility either.
</p>



<h2 class="sect1">8.1. HTTP Authentication</h2>

<p>As we discussed briefly in <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_01.htm">Chapter 4, "Retrieving Information"</a>, the HTTP
protocol provides built-in authentication support--called
<a name="INDEX-1425"></a><a name="INDEX-1426"></a><a name="INDEX-1427"></a>basic
authentication--based on a simple challenge/response,
username/password model. With this technique, the web server
maintains a database of usernames and passwords and identifies
certain resources (files, directories, servlets, etc.) as protected.
When a user requests access to a protected resource, the server
responds with a request for the client's username and password.
At this point, the browser usually pops up a dialog box where the
user enters the information, and that input is sent back to the
server as part of a second authorized request. If the submitted
username and password match the information in the server's
database, access is granted. The whole authentication process is
handled by the server itself.
</p>

<p>Basic authentication is very weak. It provides no confidentiality, no
integrity, and only the most basic authentication. The problem is
that <a name="INDEX-1428"></a><a name="INDEX-1429"></a><a name="INDEX-1430"></a>
passwords are transmitted over the network, thinly disguised by a
well-known and easily reversed
<a name="INDEX-1431"></a><a name="INDEX-1432"></a>
Base64 encoding. Anyone monitoring the TCP/IP data stream has full
and immediate access to all the information being exchanged,
including the username and password. Plus, passwords are often stored
on the server in clear text, making them vulnerable to anyone
cracking into the server's file system. While it's
certainly better than nothing, sites that rely exclusively on basic
authentication cannot be considered really secure.
</p>

<p>Digest
<a name="INDEX-1433"></a><a name="INDEX-1434"></a><a name="INDEX-1435"></a>authentication is a variation
on the basic authentication scheme. Instead of transmitting a
password over the network directly, a digest of the password is used
instead. The digest is produced by taking a hash (using the very
secure MD5 encryption algorithm) of the username, password, URI, HTTP
request method, and a randomly generated "nonce" value
provided by the server. Both sides of the transaction know the
password and use it to compute digests. If the digests match, access
is granted. Transactions are thus somewhat more secure than they
would be otherwise because digests are valid for only a single URI
request and nonce value. The server, however, must still maintain a
database of the original passwords. And, as of this writing, digest
authentication is not supported by very many browsers.
</p>

<p>The moral of the story is that HTTP authentication can be useful in
low-security environments. For example, a site that charges for
access to content--say, an online newspaper--is more
concerned with ease of use and administration than lock-tight
security, so HTTP authentication is often sufficient.
</p>

<a name="ch08-2-fm2xml"></a>
<h3 class="sect2">8.1.1. Retrieving Authentication Information</h3>

<p>A servlet can retrieve information about the server's
<a name="INDEX-1436"></a> authentication using two methods
introduced in <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_01.htm">Chapter 4, "Retrieving Information"</a>:
<a name="INDEX-1437"></a><a name="INDEX-1438"></a><a name="INDEX-1439"></a>
getRemoteUser() and <a name="INDEX-1440"></a><a name="INDEX-1441"></a><a name="INDEX-1442"></a>
getAuthType(). <a href="#ch08-87579">Example 8-1</a> shows a simple servlet
that tells the client its name and what kind of authentication has
been performed (basic, digest, or some alternative). To see this
servlet in action, you should install it in your web server and
protect it with a basic or digest security scheme. Because web server
implementations vary, you'll need to check your server
documentation for the specifics on how to set this up.
</p>

<a name="ch08-87579"></a>
<div class="example">
<h4 class="objtitle">Example 8-1. Snooping the authorization information </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class AuthorizationSnoop extends HttpServlet { 

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    out.println("&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Authorization Snoop&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;");

    out.println("&lt;H1&gt;This is a password protected resource&lt;/H1&gt;");
    out.println("&lt;PRE&gt;");
    out.println("User Name: " + req.getRemoteUser());
    out.println("Authorization Type: " + req.getAuthType());
    out.println("&lt;/PRE&gt;");
    out.println("&lt;/BODY&gt;&lt;/HTML&gt;");  
  }
}</pre>
</blockquote>
</div>


<a name="ch08-3-fm2xml"></a>
<h3 class="sect2">8.1.2. Custom Authorization</h3>

<p>Normally, <a name="INDEX-1443"></a>client authentication is handled
by the web server. The server administrator tells the server which
resources are to be restricted to which users, and information about
those users (such as their passwords) is somehow made available to
the server.
</p>

<p>This is often good enough, but sometimes the desired security policy
cannot be implemented by the server. Maybe the user list needs to be
stored in a format that is not readable by the server. Or maybe you
want any username to be allowed, as long as it is given with the
appropriate "skeleton key" password. To handle these
situations, we can use
<a name="INDEX-1444"></a><a name="INDEX-1445"></a>
servlets. A servlet can be implemented so that it learns about users
from a specially formatted file or a relational database; it can also
be written to enforce any security policy you like. Such a servlet
can even add, remove, or manipulate user entries--something that
isn't supported directly in the Servlet API, except through
proprietary server extensions.<a href="#FOOTNOTE-1">[1]</a>
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1]Sadly,
<a name="INDEX-1446"></a><a name="INDEX-1447"></a>
getAuthType() and <a name="INDEX-1448"></a><a name="INDEX-1449"></a>
getRemoteUser() are the only security-related methods supported in
the core Servlet API. This is because different web servers implement
different types of security, making a server-independent API
difficult to develop. Individual servers and servlet implementations
are free to provide their own customized user management routines.
The <a name="INDEX-1450"></a><a name="INDEX-1451"></a>Java Web Server, for example,
provides servlets with programmatic access to its security and
authentication systems using classes in the com.sun.server.*
packages. Servlets written to these APIs are, of course,
non-portable.</p> </blockquote>

<p>A servlet uses status codes and HTTP headers to manage its own
security policy. The servlet receives encoded authorization
credentials in the <a name="INDEX-1452"></a><a name="INDEX-1453"></a>
Authorization header. If it chooses to deny those credentials, it
does so by sending the SC_UNAUTHORIZED status code and a
<a name="INDEX-1454"></a><a name="INDEX-1455"></a>
WWW-Authenticate header that describes the desired credentials. A web
server normally handles these details without involving its servlets,
but for a servlet to do its own authorization, it must handle these
details itself, while the server is told not to restrict access to
the servlet.
</p>

<p>The <tt class="literal">Authorization header</tt>, if sent by the client, contains the
client's username and password. With the basic authorization
scheme, the Authorization header contains the string of
"username:password" encoded in
<a name="INDEX-1456"></a><a name="INDEX-1457"></a>Base64. For
example, the username of "webmaster" with the password "try2gueSS" is
sent in an Authorization header with the value:
</p>

<blockquote>
<pre class="programlisting">BASIC d2VibWFzdGVyOnRyeTJndWVTUw</pre>
</blockquote>

<p>If a servlet needs to, it can send an <tt class="literal">WWW-Authenticate</tt> header to tell
the client the authorization scheme and the realm against which users
will be verified. A realm is simply a collection of user accounts and
protected resources. For example, to tell the client to use basic
authorization for the realm "<tt class="literal">Admin</tt>", <tt class="literal">the WWW-Authenticate</tt> header is:
</p>

<blockquote>
<pre class="programlisting">BASIC realm="Admin"</pre>
</blockquote>

<p>
<a href="#ch08-81672">Example 8-2</a> shows a servlet that performs custom
authorization, receiving an <tt class="literal">Authorization</tt> header and sending the
<tt class="literal">SC_UNAUTHORIZED</tt> status code and <tt class="literal">WWW-Authenticate</tt> header when
necessary. The servlet restricts access to its "top-secret
stuff" to those users (and passwords) it recognizes in its user
list. For this example, the list is kept in a simple <tt class="literal">Hashtable</tt> and
its contents are hard-coded; this would, of course, be replaced with
some other mechanism, such as an external relational database, for a
production servlet.
</p>

<p>To retrieve the
<a name="INDEX-1458"></a>Base64-encoded username and
password, the servlet needs to use a
<a name="INDEX-1459"></a><a name="INDEX-1460"></a>
Base64 decoder. Fortunately, there are several freely available
decoders. For this servlet, we have chosen to use the
sun.misc.BASE64Decoder class that accompanies the JDK. Being in the
sun.* hierarchy means it's unsupported and subject to change,
but it also means it's probably already on your system. You can
find the details of Base64 encoding in RFC 1521 at <a name="INDEX-1461"></a><a name="INDEX-1462"></a><a name="INDEX-1463"></a><a name="INDEX-1464"></a><a href="../../../../../../../www.ietf.org/rfc/rfc1521.txt">http://www.ietf.org/rfc/rfc1521.txt</a>.
</p>

<a name="ch08-81672"></a>
<div class="example">
<h4 class="objtitle">Example 8-2. Security in a servlet </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class CustomAuth extends HttpServlet { 

  Hashtable users = new Hashtable();

  public void init(ServletConfig config) throws ServletException {
    super.init(config);
    users.put("Wallace:cheese",     "allowed");
    users.put("Gromit:sheepnapper", "allowed");
    users.put("Penguin:evil",       "allowed");
  }

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
        PrintWriter out = res.getWriter();

    // Get Authorization header
    String auth = req.getHeader("Authorization");

    // Do we allow that user?
    if (!allowUser(auth)) {
      // Not allowed, so report he's unauthorized
      res.setHeader("WWW-Authenticate", "BASIC realm=\"users\"");
      res.sendError(res.SC_UNAUTHORIZED);
      // Could offer to add him to the allowed user list
    }
    else {
      // Allowed, so show him the secret stuff
      out.println("Top-secret stuff");
    }
  }

  // This method checks the user information sent in the Authorization
  // header against the database of users maintained in the users Hashtable.
  protected boolean allowUser(String auth) throws IOException {
    if (auth == null) return false;  // no auth

    if (!auth.toUpperCase().startsWith("BASIC ")) 
      return false;  // we only do BASIC

    // Get encoded user and password, comes after "BASIC "
    String userpassEncoded = auth.substring(6);

    // Decode it, using any base 64 decoder
    sun.misc.BASE64Decoder dec = new sun.misc.BASE64Decoder();
    String userpassDecoded = new String(dec.decodeBuffer(userpassEncoded));
    
    // Check our user list to see if that user and password are "allowed"
    if ("allowed".equals(users.get(userpassDecoded)))
      return true;
    else
      return false;
  }
}</pre>
</blockquote>
</div>

<p>Although the web server is told to grant any client access to this
servlet, the servlet sends its top-secret output only to those users
it recognizes. With a few modifications, it could allow any user with
a trusted skeleton password. Or, like anonymous FTP, it could allow
the "<tt class="literal">anonymous</tt>" username with any email address given as the
password.
</p>

<p>Custom authorization can be used for more than restricting access to
a single servlet. Were we to add this logic to our <tt class="literal">ViewFile servlet</tt>,
we could implement a custom access policy for an entire set of files.
Were we to create a special subclass of <tt class="literal">HttpServlet</tt> and add this
logic to that, we could easily restrict access to every servlet
derived from that subclass. Our point is this: with custom
authorization, the security policy limitations of the server do not
limit the possible security policy implementations of its servlets.
</p>


<a name="ch08-4-fm2xml"></a>
<h3 class="sect2">8.1.3. Form-based Custom Authorization</h3>

<p>Servlets can also perform <a name="INDEX-1465"></a><a name="INDEX-1466"></a>
custom authorization without relying on HTTP authorization, by using
HTML forms and session tracking instead. It's a bit more effort
to give users a well-designed, descriptive, and friendly login page.
For example, imagine you're developing an online banking site.
Would you rather let the browser present a generic prompt for
username and password or provide your customers with a custom login
form that politely asks for specific banking credentials, as shown in
<a href="#ch08-52325">Figure 8-1</a>?
</p>

<a name="ch08-52325"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0801.gif" webstripperlinkwas="figs/jsp_0801.gif"></div>
<h4 class="objtitle">Figure 8-1. An online banking login screen</h4>

<p>Many banks and other online services have chosen to use form-based
custom authorization. Implementing such a system is relatively
straightforward with servlets. First, we need the <a name="INDEX-1467"></a>login page. It can be written like any
other HTML form. <a href="#ch08-35426">Example 8-3</a> shows a sample
login.html file that generates the form shown in <a href="#ch08-83512">Figure 8-2</a>.
</p>

<a name="ch08-35426"></a>
<div class="example">
<h4 class="objtitle">Example 8-3. The login.html file </h4>
<blockquote>
<pre class="programlisting">&lt;HTML&gt;
&lt;TITLE&gt;Login&lt;/TITLE&gt;
&lt;BODY&gt;
&lt;FORM ACTION=/servlet/LoginHandler METHOD=POST&gt;
&lt;CENTER&gt;
&lt;TABLE BORDER=0&gt;
&lt;TR&gt;&lt;TD COLSPAN=2&gt;
&lt;P ALIGN=center&gt;
Welcome!  Please enter your Name&lt;br&gt;
 and Password to log in.
&lt;/TD&gt;&lt;/TR&gt;

&lt;TR&gt;&lt;TD&gt;
&lt;P ALIGN=right&gt;&lt;B&gt;Name:&lt;/B&gt;
&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;&lt;INPUT TYPE=text NAME="name" VALUE="" SIZE=15&gt;
&lt;/TD&gt;&lt;/TR&gt;

&lt;TR&gt;&lt;TD&gt;
&lt;P ALIGN=right&gt;&lt;B&gt;Password:&lt;/B&gt;
&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;&lt;INPUT TYPE=password NAME="passwd" VALUE="" SIZE=15&gt;
&lt;/TD&gt;&lt;/TR&gt;

&lt;TR&gt;&lt;TD COLSPAN=2&gt;
&lt;CENTER&gt;
&lt;INPUT TYPE=submit VALUE="  OK   "&gt;
&lt;/CENTER&gt;
&lt;/TD&gt;&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;/BODY&gt;&lt;/HTML&gt;</pre>
</blockquote>
</div>

<a name="ch08-83512"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0802.gif" webstripperlinkwas="figs/jsp_0802.gif"></div>
<h4 class="objtitle">Figure 8-2. A friendly login form</h4>

<p>This form asks the client for her name and password, then submits the
information to the <tt class="literal">LoginHandler</tt> servlet that validates the login.
We'll see the code for <tt class="literal">LoginHandler</tt> soon, but first we should
ask ourselves, "When is the client going to see this login
page?" It's clear she can browse to this login page
directly, perhaps following a link on the site's front page.
But what if she tries to access a protected resource directly without
first logging in? In that case, she should be redirected to this
login page and, after a successful login, be redirected back to the
original target. The process should work as seamlessly as having the
browser pop open a window--except in this case the site pops
open an intermediary page.
</p>

<p>
<a href="#ch08-10775">Example 8-4</a> shows a servlet that implements this
redirection behavior. It outputs its secret data only if the
client's session object indicates she has already logged in. If
she hasn't logged in, the servlet saves the request URL in her
session for later use, and then redirects her to the login page for
validation.
</p>

<a name="ch08-10775"></a>
<div class="example">
<h4 class="objtitle">Example 8-4. A protected resource </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class ProtectedResource extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();

    // Get the session
    HttpSession session = req.getSession(true);

    // Does the session indicate this user already logged in?
    Object done = session.getValue("logon.isDone");  // marker object
    if (done == null) {
      // No logon.isDone means he hasn't logged in.
      // Save the request URL as the true target and redirect to the login page.
      session.putValue("login.target",
                       HttpUtils.getRequestURL(req).toString());
      res.sendRedirect(req.getScheme() + "://" +
                       req.getServerName() + ":" + req.getServerPort() +
                       "/login.html");
      return;
    }

    // If we get here, the user has logged in and can see the goods
    out.println("Unpublished O'Reilly book manuscripts await you!");
  }
}</pre>
</blockquote>
</div>

<p>This servlet sees if the client has already logged in by checking her
session for an object with the name "<tt class="literal">logon.isDone</tt>". If such an object
exists, the servlet knows that the client has already logged in and
therefore allows her to see the secret goods. If it doesn't
exist, the client must not have logged in, so the servlet saves the
request URL under the name "<tt class="literal">login.target</tt>", and then redirects the
client to the login page. Under form-based custom authorization, all
protected resources (or the servlets that serve them) have to
implement this behavior. Subclassing, or the use of a utility class,
can simplify this task.
</p>

<p>Now for the login handler. After the client enters her information on
the login form, the data is posted to the <tt class="literal">LoginHandler</tt> servlet shown
in <a href="#ch08-51915">Example 8-5</a>. This servlet checks the username and
password for validity. If the client fails the check, she is told
that access is denied. If the client passes, that fact is recorded in
her session object and she is immediately redirected to the original
target.
</p>

<a name="ch08-51915"></a>
<div class="example">
<h4 class="objtitle">Example 8-5. Handling a login </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class LoginHandler extends HttpServlet {

  public void doPost(HttpServletRequest req, HttpServletResponse res)
                                throws ServletException, IOException {
    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    // Get the user's name and password
    String name = req.getParameter("name");
    String passwd = req.getParameter("passwd");

    // Check the name and password for validity
    if (!allowUser(name, passwd)) {
      out.println("&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Access Denied&lt;/TITLE&gt;&lt;/HEAD&gt;");
      out.println("&lt;BODY&gt;Your login and password are invalid.&lt;BR&gt;");
      out.println("You may want to &lt;A HREF=\"/login.html\"&gt;try again&lt;/A&gt;");
      out.println("&lt;/BODY&gt;&lt;/HTML&gt;");
    }
    else {
      // Valid login. Make a note in the session object.
      HttpSession session = req.getSession(true);
      session.putValue("logon.isDone", name);  // just a marker object

      // Try redirecting the client to the page he first tried to access
      try {
        String target = (String) session.getValue("login.target");
        if (target != null)
          res.sendRedirect(target);
        return;
      }
      catch (Exception ignored) { }

      // Couldn't redirect to the target. Redirect to the site's home page.
      res.sendRedirect(req.getScheme() + "://" + 
                       req.getServerName() + ":" + req.getServerPort());
    }
  }

  protected boolean allowUser(String user, String passwd) {
    return true;  // trust everyone
  }
}</pre>
</blockquote>
</div>

<p>The actual validity check in this servlet is quite simple: it assumes
any username and password are valid. That keeps things simple, so we
can concentrate on how the servlet behaves when the login is
successful. The servlet saves the user's name (any old object
will do) in the client's session under the name "<tt class="literal">logon.isDone</tt>",
as a marker that tells all protected resources this client is okay.
It then redirects the client to the original target saved as
"<tt class="literal">login.target</tt>", seamlessly sending her where she wanted to go in the
first place. If that fails for some reason, the servlet redirects the
user to the site's home page.<a name="INDEX-1468"></a>
</p>











<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch07_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch08_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">7.5. The Session Tracking API</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">8.2. Digital Certificates</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
