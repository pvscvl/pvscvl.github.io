<html>
<head>
<title>Using Regular Expressions (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Using Regular Expressions">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_01.htm">Chapter 13: Odds and Ends</a></td><td align="right" valign="top" width="172"><a href="ch13_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">13.3. Using Regular Expressions</h2>

<p>If you're a servlet programmer with a background in Perl-based
CGI scripting and you're still smitten with <a name="INDEX-2248"></a><a name="INDEX-2249"></a><a name="INDEX-2250"></a>
Perl's regular expression capabilities, this section is for
you. Here we show how to use Perl 5 regular expressions from within
Java. For those of you who are unfamiliar with regular expressions,
they are a mechanism for allowing extremely advanced string
manipulation with minimal code. Regular expressions are wonderfully
explained in all their glory in the book <em class="citetitle">Mastering Regular
Expressions</em><a name="INDEX-2251"></a><a name="INDEX-2252"></a><em class="emphasis"></em>by Jeffrey
E. F. Friedl (O'Reilly)<em class="emphasis">.</em>
</p>

<p>With all the classes and capabilities Sun has added in JDK 1.1 and
JDK 1.2, one feature still absent is a regular expression engine. Ah,
well, not to worry. As with most Java features, if you can't
get it from Sun, a third-party vendor is probably offering what you
need at a reasonable price.
</p>

<p>Several companies offer full-featured regular expression engines. One
of the first was Thought, Inc., which developed VanillaSearch.
It's available for trial download and purchase at <a href="../../../../../../../www.thoughtinc.com/">http://www.thoughtinc.com</a><a name="INDEX-2253"></a><a name="INDEX-2254"></a><a name="INDEX-2255"></a>. More
recently, Original Reusable Objects, Inc. has come out with a product
called OROMatcher (along with a utility package built using
OROMatcher called <a name="INDEX-2256"></a><a name="INDEX-2257"></a>PerlTools). These products are
available for download at <a href="../../../../../../../www.oroinc.com/">http://www.oroinc.com</a><a name="INDEX-2258"></a><a name="INDEX-2259"></a>. A binary license to use
OROMatcher and PerlTools is being offered absolutely free. Support,
source, and "mere" redistribution (that is, as added
value to an IDE) cost extra.
</p>

<a name="ch13-5-fm2xml"></a>
<h3 class="sect2">13.3.1. Improving Deblink with Regular Expressions</h3>

<p>
<a name="INDEX-2260"></a><a name="INDEX-2261"></a><a name="INDEX-2262"></a><a name="INDEX-2263"></a><a name="INDEX-2264"></a>
To demonstrate the use of regular expressions, let's use
OROMatcher and PerlTools to rewrite the <tt class="literal">Deblink</tt>
servlet originally shown in <a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_01.htm">Chapter 2, "HTTP Servlet Basics"</a>. As you may
recall, <tt class="literal">Deblink</tt> acted as a filter to remove the
<tt class="literal">&lt;BLINK&gt;</tt> and <tt class="literal">&lt;/BLINK&gt;</tt>
tags from HTML pages. The original <tt class="literal">Deblink</tt> code is
shown in <a href="#ch13-37209">Example 13-4</a> to help refresh your memory.
</p>

<a name="ch13-37209"></a>
<div class="example">
<h4 class="objtitle">Example 13-4. The original Deblink </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class Deblink extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res) 
                               throws ServletException, IOException {

    String contentType = req.getContentType();  // get the incoming type
    if (contentType == null) return;  // nothing incoming, nothing to do
    res.setContentType(contentType);  // set outgoing type to be incoming type

    PrintWriter out = res.getWriter();

    BufferedReader in = req.getReader();

    String line = null;
    while ((line = in.readLine()) != null) {
      line = replace(line, "&lt;BLINK&gt;", "");
      line = replace(line, "&lt;/BLINK&gt;", "");
      out.println(line);
    }
  }

  public void doPost(HttpServletRequest req, HttpServletResponse res)
                                throws ServletException, IOException {
    doGet(req, res);
  }

  private String replace(String line, String oldString, String newString) {
    int index = 0;
    while ((index = line.indexOf(oldString, index)) &gt;= 0) {
      // Replace the old string with the new string (inefficiently)
      line = line.substring(0, index) +
             newString +
             line.substring(index + oldString.length());
      index += newString.length();
    }
    return line;
  }
}</pre>
</blockquote>
</div>

<p>As we pointed out in <a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_01.htm">Chapter 2, "HTTP Servlet Basics"</a>, this version of
<tt class="literal">Deblink</tt> has one serious limitation: it's
case sensitive. It won't remove
<tt class="literal">&lt;blink&gt;</tt>, <tt class="literal">&lt;/blink&gt;</tt>,
<tt class="literal">&lt;Blink&gt;</tt>, or
<tt class="literal">&lt;/Blink&gt;</tt>. Sure, we could enumerate inside
<tt class="literal">Deblink</tt> all the case combinations that should be
removed, but regular expressions provide a much simpler alternative.
</p>

<p>With a single regular expression, we can rewrite
<tt class="literal">Deblink</tt> to remove the opening and closing blink
tags, no matter how they are capitalized. The regular expression
we'll use is <tt class="literal">"&lt;/?blink&gt;"</tt>. This matches
both <tt class="literal">&lt;blink&gt;</tt> and
<tt class="literal">&lt;/blink&gt;</tt>. (The <tt class="literal">?</tt>
character means the previous character is optional.) With a
case-insensitive mask set, this expression also matches
<tt class="literal">&lt;BLINK&gt;</tt>, <tt class="literal">&lt;/Blink&gt;</tt>,
and even <tt class="literal">&lt;bLINK&gt;</tt>. Any occurrence of this
regular expression can be replaced with the empty string, to
completely deblink an HTML page. The rewritten
<tt class="literal">Deblink</tt> code appears in <a href="#ch13-13344">Example 13-5</a>.
</p>

<a name="ch13-13344"></a>
<div class="example">
<h4 class="objtitle">Example 13-5. Deblink rewritten using regular expressions </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

import com.oroinc.text.perl.*;  // PerlTools package

public class Deblink extends HttpServlet {

  Perl5Util perl = new Perl5Util();

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {

    String contentType = req.getContentType();  // get the incoming type
    if (contentType == null) return;  // nothing incoming, nothing to do
    res.setContentType(contentType);  // set outgoing type to be incoming type

    PrintWriter out = res.getWriter();

    BufferedReader in = req.getReader();

    try {
      String line = null;
      while ((line = in.readLine()) != null) {
        if (perl.match("#&lt;/?blink&gt;#i", line))
          line = perl.substitute("s#&lt;/?blink&gt;##ig", line);
        out.println(line);
      }
    }
    catch(MalformedPerl5PatternException e) { // only thrown during development
      log("Problem compiling a regular expression: " + e.getMessage());
    }
  }

  public void doPost(HttpServletRequest req, HttpServletResponse res)
                                throws ServletException, IOException {
    doGet(req, res);
  }
}</pre>
</blockquote>
</div>

<p>The most important lines of this servlet are the lines that replace
our <tt class="literal">"&lt;/?blink&gt;"</tt> expression with the empty
string:
</p>

<blockquote>
<pre class="programlisting">if (perl.match("#&lt;/?blink&gt;#i", line))
  line = perl.substitute("s#&lt;/?blink&gt;##ig", line);</pre>
</blockquote>

<p>The first line does a <a name="INDEX-2265"></a><a name="INDEX-2266"></a>case-insensitive search for
the regular expression <tt class="literal">&lt;/?blink&gt;</tt>. The syntax
is exactly like Perl. It may look slightly unfamiliar, though,
because we chose to use hash marks instead of slashes to avoid having
to escape the slash that's part of the expression (which would
result in <tt class="literal">"/&lt;\\/?blink&gt;/i"</tt>). The trailing
<tt class="literal">"i"</tt> indicates the regular expression is case
insensitive.
</p>

<p>The second line substitutes all occurrences of the regular expression
with the empty string. This line alone would accomplish the same as
both lines together, but it's more efficient to do the check
first. The syntax is also identical to Perl. The text between the
first pair of hashes is the regular expression to search for. The
text between the second pair is the replacement text. The trailing
<tt class="literal">"g"</tt> indicates that all occurrences should be
replaced (the default is one replacement per line).
<a name="INDEX-2267"></a><a name="INDEX-2268"></a><a name="INDEX-2269"></a><a name="INDEX-2270"></a><a name="INDEX-2271"></a>
</p>

<p>For more information on what can be done with regular expressions in
Java, see the documentation that comes with each of the third-party
products.<a name="INDEX-2272"></a><a name="INDEX-2273"></a><a name="INDEX-"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch13_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">13.2. Sending Email</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">13.4. Executing Programs</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
