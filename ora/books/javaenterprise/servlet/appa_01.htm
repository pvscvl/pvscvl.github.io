<html>
<head>
<title>Servlet API Quick Reference (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Servlet API Quick Reference">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_08.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm">Java Servlet Programming</a></td><td align="right" valign="top" width="172"><a href="appb_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/appb_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Appendix A.  Servlet API Quick Reference</h1>



<a name="INDEX-2345"></a><a name="INDEX-2346"></a>
The
<tt class="literal">javax.servlet</tt><a name="INDEX-2347"></a><a name="INDEX-2348"></a>
package is the core of the Servlet API. It includes the basic
<tt class="literal">Servlet</tt> interface, which all servlets must
implement in one form or another, and an abstract
<tt class="literal">GenericServlet</tt> class for developing basic
servlets. This package also includes classes for communication with
the host server and client (<tt class="literal">ServletRequest</tt> and
<tt class="literal">ServletResponse</tt>) and communicating with the client
(<tt class="literal">ServletInputStream</tt> and
<tt class="literal">ServletOutputStream</tt>). The class hierarchy of the
<tt class="literal">javax.servlet</tt> package is shown in <a href="#appa-38995">Figure A-1</a>. Servlets should confine themselves to the
classes in this package in situations where the underlying protocol
is unknown.
<p>

<a name="appa-38995"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_AA01.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/figs/jsp_AA01.gif"></div>
<h4 class="objtitle">Figure A-1. The javax.servlet package</h4>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>GenericServlet</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>



<span class="refsect1"><h3>Synopsis</h3></span>
<b>Class Name:</b>	<tt class="literal">javax.servlet.GenericServlet</tt>



<br><b>Superclass:</b>     <tt class="literal">java.lang.Object</tt>



<br><b>Immediate Subclasses</b><tt class="literal">javax.servlet.http.HttpServlet</tt>



<br><b>Interfaces Implemented:</b><tt class="literal">javax.servlet.Servlet</tt><tt class="literal">javax.servlet.ServletConfig</tt><tt class="literal">java.io.Serializable</tt>



<br><b>Availability:</b>	Servlet API 1.0 and later







<span class="refsect1"><h3>Description</h3></span>

<p><tt class="literal">GenericServlet</tt> provides a basic implementation of
the <tt class="literal">Servlet</tt> interface for protocol-independent
servlets. As a convenience, it also implements the
<tt class="literal">ServletConfig</tt> interface. Most servlet developers
subclass this class or <tt class="literal">HttpServlet</tt>, rather than
implement the <tt class="literal">Servlet</tt> interface directly.
</p>


<p><tt class="literal">GenericServlet</tt> includes basic versions of the
<tt class="literal">init()</tt> and <tt class="literal">destroy()</tt> methods,
which perform basic setup and cleanup tasks, such as managing the
server's <tt class="literal">ServletConfig</tt> object. It's
good form for a servlet that overrides one of these methods to call
the superclass version of the method.
<tt class="literal">GenericServlet</tt> also includes a
<tt class="literal">log()</tt> method that provides easy access to the
logging functions from <tt class="literal">ServletContext</tt>.
</p>


<p>The <tt class="literal">service()</tt> method is declared as abstract and
must be overridden. Well written servlets also override
<tt class="literal">getServletInfo()</tt>.
</p>



<h3>Class Summary</h3>
<blockquote>
<pre class="programlisting">public abstract class GenericServlet
 implements Servlet, ServletConfig, java.io.Serializable {
  // Constructors
  public GenericServlet();

  // Instance Methods
  public void destroy();
  public String getInitParameter(String name);
  public Enumeration getInitParameterNames();
  public ServletConfig getServletConfig();
  public ServletContext getServletContext();
  public String getServletInfo();
  public void init(ServletConfig config) throws ServletException;
  public void log(String msg);
  public abstract void service(ServletRequest req, ServletResponse res)
    throws ServletException, IOException;
}</pre>
</blockquote>





<h3>Constructors</h3>
<h4 class="objtitle">GenericServlet()</h4>

<blockquote>
<pre class="programlisting">public GenericServlet()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
The default <tt class="literal">GenericServlet</tt> constructor does no
work. Any servlet initialization tasks should be performed in
<tt class="literal">init()</tt>, rather than in the constructor.

</dd>

</dl></blockquote>






<h3>Instance Methods</h3>
<h4 class="objtitle">destroy()</h4>

<blockquote>
<pre class="programlisting">public void destroy()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Called by the server before unloading the servlet. The default
implementation logs the servlet's destruction in the server log
file using the <tt class="literal">log()</tt> method. A servlet can
override this method to save its state, free its resources, etc.

</dd>

</dl></blockquote>



<h4 class="objtitle">getInitParameter()</h4>

<blockquote>
<pre class="programlisting">public String getInitParameter(String name)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the value of the named servlet initialization parameter or
<tt class="literal">null</tt> if no matching parameter is found. From the
<tt class="literal">ServletConfig</tt> interface.

</dd>

</dl></blockquote>



<h4 class="objtitle">getInitParameterNames()</h4>

<blockquote>
<pre class="programlisting">public Enumeration getInitParameterNames()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns all the servlet's init parameter names as an
<tt class="literal">Enumeration</tt> of <tt class="literal">String</tt> objects
or an empty <tt class="literal">Enumeration</tt> if no parameters exist.
From the <tt class="literal">ServletConfig</tt> interface.

</dd>

</dl></blockquote>



<h4 class="objtitle">getServletConfig()</h4>

<blockquote>
<pre class="programlisting">public ServletConfig getServletConfig()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the servlet's <tt class="literal">ServletConfig</tt> object.
In practice, this method is rarely called by a
<tt class="literal">GenericServlet</tt> because all of the
<tt class="literal">ServletConfig</tt> methods are duplicated internally.

</dd>

</dl></blockquote>



<h4 class="objtitle">getServletContext()</h4>

<blockquote>
<pre class="programlisting">public ServletContext getServletContext()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the servlet's <tt class="literal">ServletContext</tt> object.
From the <tt class="literal">ServletConfig</tt> interface.

</dd>

</dl></blockquote>



<h4 class="objtitle">getServletInfo()</h4>

<blockquote>
<pre class="programlisting">public String getServletInfo()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns a programmer-defined <tt class="literal">String</tt> that describes
the servlet. A servlet should override this method and provide a
customized identity string (e.g., "Al's Message Board
Servlet v1.21"), but it is not required.

</dd>

</dl></blockquote>



<h4 class="objtitle">init()</h4>

<blockquote>
<pre class="programlisting">public void init(ServletConfig config) throws ServletException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Called by the server after the servlet is first loaded and before the
servlet's <tt class="literal">service()</tt> method is called. The
default implementation of <tt class="literal">init()</tt> logs the
servlet's initialization and stores the
<tt class="literal">ServletConfig</tt> object for use by the methods in the
<tt class="literal">ServletConfig</tt> interface. A servlet can override
this method to perform additional one-time setup, creation of
resources, etc. A servlet should always call the superclass
implementation of <tt class="literal">init()</tt> using
<tt class="literal">super.init(config)</tt> before executing any custom
initialization code.

</dd>

</dl></blockquote>



<h4 class="objtitle">log()</h4>

<blockquote>
<pre class="programlisting">public void log(String msg)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Writes the given message to a servlet log, usually an event log file.
Both the output format and location are server-specific.

</dd>

</dl></blockquote>



<h4 class="objtitle">service()</h4>

<blockquote>
<pre class="programlisting">public abstract void service(ServletRequest req, ServletResponse res)
  throws ServletException, IOException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Called to handle a single client request. A servlet receives request
information via a <tt class="literal">ServletRequest</tt> object and sends
data back to the client via a <tt class="literal">ServletResponse</tt>
object. This is the only method that must be overridden when
extending <tt class="literal">GenericServlet</tt>. Because multiple service
requests may execute concurrently, the <tt class="literal">service()</tt>
method must be thread safe, unless the servlet also implements the
<tt class="literal">SingleThreadModel</tt> interface.
<a name="INDEX-2351"></a><a name="INDEX-2352"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2349"></a><a name="INDEX-2350"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>Servlet</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>









<span class="refsect1"><h3>Synopsis</h3></span>
<b>Interface Name:</b>	<tt class="literal">javax.servlet.Servlet</tt>



<br><b>Super-interface:</b>	None


<br><b>Immediate Subinterfaces:</b>	None


<br><b>Implemented By:</b>	<tt class="literal">javax.servlet.GenericServlet</tt>



<br><b>Availability:</b>	Servlet API 1.0 and later







<span class="refsect1"><h3>Description</h3> </span>
<p>All servlets implement the <tt class="literal">Servlet</tt> interface,
either directly or by subclassing the
<tt class="literal">GenericServlet</tt> or <tt class="literal">HttpServlet</tt>
class. Most servlet developers find it easier to subclass one of the
two existing servlet classes than to implement this interface
directly. The interface declares the basic servlet
functionality--initializing a servlet, handling a client
request, and destroying a servlet.

</p>



<h3>Interface Declaration</h3>
<blockquote>
<pre class="programlisting">public interface Servlet {
  // Methods
  public abstract void destroy();
  public abstract ServletConfig getServletConfig();
  public abstract String getServletInfo();
  public abstract void init(ServletConfig config) throws ServletException;
  public abstract void service(ServletRequest req, ServletResponse res)
    throws ServletException, IOException;
}</pre>
</blockquote>




<h3>Methods</h3>

<h4 class="objtitle">destroy()</h4>

<blockquote>
<pre class="programlisting">public abstract void destroy()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Called when the server is preparing to unload a servlet. Used to
clean up any outstanding resources (database connections, threads,
file handles and so forth). The servlet programmer is responsible for
making sure that any requests currently executing are allowed to
finish.

</dd>

</dl></blockquote>



<h4 class="objtitle">getServletConfig()</h4>

<blockquote>
<pre class="programlisting">public abstract ServletConfig getServletConfig()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the <tt class="literal">ServletConfig</tt> object passed to the
<tt class="literal">init()</tt> method.

</dd>

</dl></blockquote>



<h4 class="objtitle">getServletInfo()</h4>

<blockquote>
<pre class="programlisting">public abstract String getServletInfo()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns a programmer-defined <tt class="literal">String</tt> that describes
the servlet.

</dd>

</dl></blockquote>



<h4 class="objtitle">init()</h4>

<blockquote>
<pre class="programlisting">public abstract void init(ServletConfig config) throws ServletException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Called by the server when the servlet is first loaded. The
<tt class="literal">init()</tt> method should store the
<tt class="literal">ServletConfig</tt> object for retrieval by
<tt class="literal">getServletConfig()</tt>. When using either
<tt class="literal">GenericServlet</tt> or <tt class="literal">HttpServlet</tt>,
the default <tt class="literal">init()</tt> implementation handles this
task. This method can also be used to perform any one-time actions
required by the servlet, such as creating database connections. It is
guaranteed to finish before any client requests are accepted.

</dd>

</dl></blockquote>



<h4 class="objtitle">service()</h4>

<blockquote>
<pre class="programlisting">public abstract void service(ServletRequest req, ServletResponse res)
  throws ServletException, IOException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Called to handle a single client request. A servlet receives request
information via the <tt class="literal">ServletRequest</tt> object and
sends data back to the client via the
<tt class="literal">ServletResponse</tt> object.
<a name="INDEX-2355"></a><a name="INDEX-2356"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2353"></a><a name="INDEX-2354"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>ServletConfig</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>









<span class="refsect1"><h3>Synopsis</h3></span><b>Interface Name:</b>	<tt class="literal">javax.servlet.ServletConfig</tt>



<br><b>Superinterface:</b>	None

<br><b>Immediate Subinterfaces:</b>	None


<br><b>Implemented By:</b>	<tt class="literal">javax.servlet.GenericServlet</tt>



<br><b>Availability:</b>	Servlet API 1.0 and later


<span class="refsect1"><h3>Description</h3> </span>
<p>
Servers use <tt class="literal">ServletConfig</tt> objects to pass
initialization and context information to servlets. The
initialization information generally consists of a series of
initialization parameters (<em class="emphasis">init parameters</em>) and
a <tt class="literal">ServletContext</tt> object, which provides
information about the server environment. A servlet can implement
<tt class="literal">Servlet-Config</tt> to allow easy access to init
parameters and context information, as
<tt class="literal">GenericServlet</tt> does.
</p>




<h3>Interface Declaration</h3>
<blockquote>
<pre class="programlisting">public interface ServletConfig {  
  // Methods
  public abstract String getInitParameter(String name);
  public abstract Enumeration getInitParameterNames();
  public abstract ServletContext getServletContext();
}</pre>
</blockquote>




<h3>Methods</h3>

<h4 class="objtitle">getInitParameter()</h4>

<blockquote>
<pre class="programlisting">public abstract String getInitParameter(String name)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the value of the named servlet initialization parameter or
<tt class="literal">null</tt> if no matching parameter is found.

</dd>

</dl></blockquote>



<h4 class="objtitle">getInitParameterNames()</h4>

<blockquote>
<pre class="programlisting">public abstract Enumeration getInitParameterNames()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the names of all the servlet's initialization
parameters as an <tt class="literal">Enumeration</tt> of
<tt class="literal">String</tt> objects or an empty
<tt class="literal">Enumeration</tt> if no parameters exist.

</dd>

</dl></blockquote>



<h4 class="objtitle">getServletContext()</h4>

<blockquote>
<pre class="programlisting">public abstract ServletContext getServletContext()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the <tt class="literal">ServletContext</tt> object for this
servlet, allowing interaction with the server.
<a name="INDEX-2359"></a><a name="INDEX-2360"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2357"></a><a name="INDEX-2358"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>ServletContext</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>









<span class="refsect1"><h3>Synopsis</h3></span><b>Interface Name:</b>	<tt class="literal">javax.servlet.ServletContext</tt>



<br><b>Superinterface:</b>	None


<br><b>Immediate Subinterfaces:</b>	None


<br><b>Implemented By:</b>	None


<br><b>Availability:</b>	Servlet API 1.0 and later







<span class="refsect1"><h3>Description</h3> </span>
<p>The <tt class="literal">ServletContext</tt> interface defines a set of
methods that can be used to communicate with the server in a
non-request-specific manner. This includes finding path information,
accessing other servlets running on the server, and writing to the
server log file. Different virtual servers may return different
servlet contexts.
</p>



<h3>Interface Declaration</h3>
<blockquote>
<pre class="programlisting">public interface ServletContext {  
  // Methods
  public abstract Object getAttribute(String name);
  public abstract String getMimeType(String file);
  public abstract String getRealPath(String path);
  public abstract String getServerInfo();
  public abstract Servlet getServlet(String name) throws ServletException;
  public abstract Enumeration getServletNames();             // New in 2.0
  public abstract Enumeration getServlets();                 // Deprecated
  public abstract void log(Exception exception, String msg); // New in 2.0
  public abstract void log(String msg);
}</pre>
</blockquote>




<h3>Methods</h3>
<h4 class="objtitle">getAttribute()</h4>

<blockquote>
<pre class="programlisting">public abstract Object getAttribute(String name)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the value of the named server attribute as an
<tt class="literal">Object</tt> or <tt class="literal">null</tt> if the attribute
does not exist. The attributes are server-dependent and allow web
servers to provide servlets with information above and beyond that
provided for by the base Servlet API. Attribute names should follow
the same convention as package names. The package names
<tt class="literal">java.*</tt> and <tt class="literal">javax.*</tt> are reserved
for use by the Java Software division of Sun Microsystems (formerly
known as JavaSoft), and <tt class="literal">com.sun.*</tt> is reserved for
use by Sun Microsystems. See your server's documentation for a
list of its attributes. Remember that servlets relying on
server-specific attributes are not portable.

</dd>

</dl></blockquote>



<h4 class="objtitle">getMimeType()</h4>

<blockquote>
<pre class="programlisting">public abstract String getMimeType(String file)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the MIME type of the given file or <tt class="literal">null</tt> if
it is not known. Some implementations return
<tt class="literal">"text/plain"</tt> if the specified file does not exist.
Common MIME types are <tt class="literal">"text/html"</tt>,
<tt class="literal">"text/plain"</tt>, <tt class="literal">"image/gif"</tt>, and
<tt class="literal">"image/jpeg"</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">getRealPath()</h4>

<blockquote>
<pre class="programlisting">public abstract String getRealPath(String path)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the real file system path of any given "virtual
path" or <tt class="literal">null</tt> if the translation cannot be
performed. If the given path is <tt class="literal">"/"</tt>, the method
returns the document root for the servlet. If the given path is the
same as the one returned by <tt class="literal">getPathInfo()</tt>, the
method returns the same real path as would be returned by
<tt class="literal">getPathTranslated()</tt>. There is no CGI counterpart.

</dd>

</dl></blockquote>



<h4 class="objtitle">getServerInfo()</h4>

<blockquote>
<pre class="programlisting">public abstract String getServerInfo()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the name and version of the server software, separated by a
forward slash (<tt class="literal">/</tt>). The value is the same as the
CGI variable <tt class="literal">SERVER_SOFTWARE</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">getServlet()</h4>

<blockquote>
<pre class="programlisting">public abstract Servlet getServlet(String name) throws ServletException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the loaded servlet matching the given name or
<tt class="literal">null</tt> if the servlet is not found. The specified
name can be the servlet's registered name (e.g.,
<tt class="literal">"file"</tt>) or class name (e.g.,
<tt class="literal">"com.sun.server.webserver .FileServlet"</tt>). The
server maintains one servlet instance per name, so
<tt class="literal">getServlet("file")</tt> returns a different servlet
instance than <tt class="literal">get-Servlet("com.sun.server.webserver.FileServlet")</tt>. If the
servlet implements <tt class="literal">SingleThreadModel</tt>, the server
may return any instance of the servlet from the current pool. The
server may--but is not required to--load the named servlet
and execute its <tt class="literal">init()</tt> method if it was not
already loaded. A <tt class="literal">ServletException</tt> is thrown if
there is a problem during the load.

</dd>

</dl></blockquote>



<h4 class="objtitle">getServletNames()</h4>

<blockquote>
<pre class="programlisting">public abstract Enumeration getServletNames()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns an <tt class="literal">Enumeration</tt> of the names of the servlet
objects loaded in this context. When used with
<tt class="literal">getServlet(String name)</tt>, it can replace the
deprecated <tt class="literal">getServlets()</tt>. This method was
introduced in the Servlet API 2.0.

</dd>

</dl></blockquote>



<h4 class="objtitle">getServlets()</h4>

<blockquote>
<pre class="programlisting">public abstract Enumeration getServlets() throws ServletException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns an <tt class="literal">Enumeration</tt> of the
<tt class="literal">Servlet</tt> objects loaded in this context. This
method was deprecated in the Servlet API 2.0 in favor of
<tt class="literal">getServletNames()</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">log()</h4>

<blockquote>
<pre class="programlisting">public abstract void log(Exception exception, String msg)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Writes an exception's stack trace and a given message to a
servlet log, usually an event log file. Both output format and
location are server-specific. Notice the non-standard placement of
the optional <tt class="literal">Exception</tt> parameter as the first
parameter instead of the last. This method was introduced in the
Servlet API 2.0.

</dd>

</dl></blockquote>

<blockquote>
<pre class="programlisting">public abstract void log(String msg)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Writes the given message to a servlet log, usually an event log file.
Both the output format and location are server-specific.
<a name="INDEX-2363"></a><a name="INDEX-2364"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2361"></a><a name="INDEX-2362"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>ServletException</b></font></td><td align="right">
<font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
</table>


<span class="refsect1"><h3>Synopsis</h3></span><b>Class Name:</b>	<tt class="literal">javax.servlet.ServletException</tt>



<br><b>Superclass:</b>	<tt class="literal">java.lang.Exception</tt>



<br><b>Immediate Subclasses:</b><tt class="literal">javax.servlet.UnavailableException</tt>



<br><b>Interfaces Implemented:</b>	None


<br><b>Availability:</b>	Servlet API 1.0 and later







<span class="refsect1"><h3>Description</h3> </span>
<p>A generic exception thrown by servlets encountering difficulties. 
</p>



<h3>Class Summary</h3>
<blockquote>
<pre class="programlisting">public class ServletException extends java.lang.Exception {
  // Constructors
  public ServletException();                           // New in 2.0
  public ServletException(String msg);
}</pre>
</blockquote>





<h3>Constructors</h3>
<h4 class="objtitle">ServletException()</h4>

<blockquote>
<pre class="programlisting">public ServletException()
public ServletException(String msg)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Constructs a new <tt class="literal">ServletException </tt>, with an
optional descriptive message. If a message is specified, it can be
retrieved by calling <tt class="literal">getMessage()</tt> and is usually
included in server logs and user error messages.
<a name="INDEX-2367"></a><a name="INDEX-2368"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2365"></a><a name="INDEX-2366"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>ServletInputStream</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>









<span class="refsect1"><h3>Synopsis</h3></span><b>Class Name:</b>	<tt class="literal">javax.servlet.ServletInputStream</tt>



<br><b>Superclass:</b>	<tt class="literal">java.io.InputStream</tt>



<br><b>Immediate Subclasses:</b>	None


<br><b>Interfaces Implemented:</b>	None


<br><b>Availability:</b>	Servlet API 1.0 and later







<span class="refsect1"><h3>Description</h3> </span>
<p>Provides an input stream for reading binary data from a client
request, including an efficient <tt class="literal">readLine()</tt> method
for reading data one line at a time. A
<tt class="literal">ServletInputStream</tt> is returned by the
<tt class="literal">getInputStream()</tt> method of
<tt class="literal">ServletRequest</tt>. A servlet that filters binary
output from other sources generally gets its input via this stream.
</p>




<h3>Class Summary</h3>
<blockquote>
<pre class="programlisting">public abstract class ServletInputStream extends java.io.InputStream {
  // Constructors
  protected ServletInputStream();

  // Instance Methods
  public int readLine(byte b[], int off, int len) throws IOException;
}</pre>
</blockquote>





<h3>Constructors</h3>
<h4 class="objtitle">ServletInputStream()</h4>

<blockquote>
<pre class="programlisting">protected ServletInputStream()</pre>
</blockquote>

<dl>
<dt>
<b>Description</b>
</dt>
<dd>
The default constructor does nothing. Because servlets rarely, if
ever, create their own input streams, it can be safely ignored.

</dd>

</dl></blockquote>





<h3>Instance Methods</h3>

<h4 class="objtitle">readLine()</h4>

<blockquote>
<pre class="programlisting">public int readLine(byte b[], int off, int len) throws IOException</pre>
</blockquote>

<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Reads bytes from the input stream into the byte array
<tt class="literal">b</tt>, starting at an offset in the array given by
<tt class="literal">off</tt>. It stops reading when it encounters an
<tt class="literal">'\n'</tt> or it has read <tt class="literal">len</tt> number
of bytes. The ending <tt class="literal">'\n'</tt> character is read into
the buffer as well. Returns the number of bytes read, or
<tt class="literal">-1</tt> if the end of the stream is reached.
<a name="INDEX-2371"></a><a name="INDEX-2372"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2369"></a><a name="INDEX-2370"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>ServletOutputStream</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>









<span class="refsect1"><h3>Synopsis</h3></span>
<b>Class Name:</b>	<tt class="literal">javax.servlet.ServletOutputStream</tt>



<br><b>Superclass:</b>	<tt class="literal">java.io.OutputStream</tt>



<br><b>Immediate Subclasses:</b>	None


<br><b>Interfaces Implemented:</b>	None


<br><b>Availability:</b>	Servlet API 1.0 and later







<span class="refsect1"><h3>Description</h3> </span>
<p>Provides an output stream for sending binary data back to a client. A
servlet obtains a <tt class="literal">ServletOutputStream</tt> object from
the <tt class="literal">getOutputStream()</tt> method of
<tt class="literal">ServletResponse</tt>. Although it includes a range of
<tt class="literal">print()</tt> and <tt class="literal">println()</tt> methods
for sending text or HTML, the <tt class="literal">ServletOutputStream</tt>
has been superseded by <tt class="literal">PrintWriter</tt>. It should be
used only for sending binary data or with early servlet
implementations built on the Servlet API 1.0.
</p>

<p>
If you subclass <tt class="literal">ServletOutputStream</tt>, you must
provide an implementation of the <tt class="literal">write(int)</tt>
method.
</p>




<h3>Class Summary</h3>
<blockquote>
<pre class="programlisting">public abstract class ServletOutputStream extends java.io.OutputStream {
  // Constructors
  protected ServletOutputStream();

  // Instance Methods
  public void print(boolean b) throws IOException;
  public void print(char c) throws IOException;
  public void print(double d) throws IOException;
  public void print(float f) throws IOException;
  public void print(int i) throws IOException;
  public void print(long l) throws IOException;
  public void print(String s) throws IOException;
  public void println() throws IOException;
  public void println(boolean b) throws IOException;
  public void println(char c) throws IOException;
  public void println(double d) throws IOException;
  public void println(float f) throws IOException;
  public void println(int i) throws IOException;
  public void println(long l) throws IOException;
  public void println(String s) throws IOException;
}</pre>
</blockquote>




<h3>Constructors</h3>
<h4 class="objtitle">ServletOutputStream()</h4>

<blockquote>
<pre class="programlisting">protected ServletOutputStream()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
The default constructor does nothing.
</dd>

</dl></blockquote>





<h3>Instance Methods</h3>
<h4 class="objtitle">print()</h4>

<blockquote>
<pre class="programlisting">public void print(boolean b) throws IOException
public void print(char c) throws IOException
public void print(double d) throws IOException
public void print(float f) throws IOException
public void print(int i) throws IOException
public void print(long l) throws IOException
public void print(String s) throws IOException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Writes the given data to the client, without a trailing carriage
return/line feed (CRLF).

</dd>

</dl></blockquote>



<h4 class="objtitle">println()</h4>

<blockquote>
<pre class="programlisting">public void println() throws IOException
public void println(boolean b) throws IOException
public void println(char c) throws IOException
public void println(double d) throws IOException
public void println(float f) throws IOException
public void println(int i) throws IOException
public void println(long l) throws IOException
public void println(String s) throws IOException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Writes the given data to the client, with a trailing CRLF. The method
with no parameters simply writes a CRLF.
<a name="INDEX-2375"></a><a name="INDEX-2376"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2373"></a><a name="INDEX-2374"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>ServletRequest</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>









<span class="refsect1"><h3>Synopsis</h3></span>
<b>Interface Name:</b>	<tt class="literal">javax.servlet.ServletRequest</tt>



<br><b>Superinterface:</b>	None


<br><b>Immediate Subinterfaces:</b>  <tt class="literal">javax.servlet.http.HttpServletRequest</tt>



<br><b>Implemented By:</b>	None

<br><b>Availability:</b>	Servlet API 1.0 and later



<span class="refsect1"><h3>Description</h3> </span>
<p>A <tt class="literal">ServletRequest</tt> object encapsulates information
about a single client request, including request parameters,
implementation-specific attributes, and an input stream for reading
binary data from the request body. <tt class="literal">ServletRequest</tt>
can be subclassed to provide additional protocol-specific
information. <tt class="literal">HttpServletRequest</tt>, for instance,
includes methods to manipulate HTTP headers.
</p>




<h3>Interface Declaration</h3>
<blockquote>
<pre class="programlisting">public interface ServletRequest {
  // Methods
  public abstract Object getAttribute(String name);
  public abstract String getCharacterEncoding();                // New in 2.0
  public abstract int getContentLength();
  public abstract String getContentType();
  public abstract ServletInputStream getInputStream() throws IOException;
  public abstract String getParameter(String name);
  public abstract Enumeration getParameterNames();
  public abstract String[] getParameterValues(String name);
  public abstract String getProtocol();
  public abstract BufferedReader getReader() throws IOException;// New in 2.0
  public abstract String getRealPath(String path);
  public abstract String getRemoteAddr();
  public abstract String getRemoteHost();
  public abstract String getScheme();
  public abstract String getServerName();
  public abstract int getServerPort();
}</pre>
</blockquote>





<h3>Methods</h3
<h4 class="objtitle">getAttribute()</h4>

<blockquote>
<pre class="programlisting">public abstract Object getAttribute(String name)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the value of the named server-specific attribute as an
<tt class="literal">Object</tt>, or <tt class="literal">null</tt> if the server
does not support the named request attribute. Servers may use this
method to provide servlets with custom information about a request.
Attributes should follow the same conventions as package names, with
the package names <tt class="literal">java.*</tt> and
<tt class="literal">javax.*</tt> reserved for use by the Java Software
division of Sun Microsystems (formerly known as JavaSoft), and
<tt class="literal">com.sun.*</tt> reserved for use by Sun Microsystems.
Remember that servlets that rely on server-specific request
attributes are non-portable.

</dd>

</dl></blockquote>



<h4 class="objtitle">getCharacterEncoding()</h4>

<blockquote>
<pre class="programlisting">public abstract String getCharacterEncoding()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the charset encoding for the servlet's input stream, or
<tt class="literal">null</tt> if not known. This method was introduced in
the Servlet API 2.0. It does not exist in the Java Web Server 1.1.x.

</dd>

</dl></blockquote>



<h4 class="objtitle">getContentLength()</h4>

<blockquote>
<pre class="programlisting">public abstract int getContentLength()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the length, in bytes, of the content being sent via the input
stream, or <tt class="literal">-1</tt> if the length is not known (such as
when there is no data). Equivalent to the CGI variable
<tt class="literal">CONTENT_LENGTH</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">getContentType()</h4>

<blockquote>
<pre class="programlisting">public abstract String getContentType()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the media type of the content being sent via the input stream
or <tt class="literal">null</tt> if the type is not known or there is no
data. The same as the CGI variable <tt class="literal">CONTENT_TYPE</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">getInputStream()</h4>

<blockquote>
<pre class="programlisting">public abstract ServletInputStream getInputStream() throws IOException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Retrieves the input stream as a <tt class="literal">ServletInputStream</tt>
object. <tt class="literal">Servlet-InputStream</tt> is a direct subclass
of <tt class="literal">InputStream</tt> and can be treated identically to a
normal <tt class="literal">InputStream</tt>, with the added ability to
efficiently read input a line at a time into an array of bytes. This
method should be used for reading binary input. It throws an
<tt class="literal">IllegalStateException</tt> if
<tt class="literal">getReader()</tt> has been called before on the request.
The <tt class="literal">IllegalState-Exception</tt> does not need to be
explicitly caught.

</dd>

</dl></blockquote>



<h4 class="objtitle">getParameter()</h4>

<blockquote>
<pre class="programlisting">public abstract String getParameter(String name)</pre>

<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the value of the named parameter as a
<tt class="literal">String</tt>. Returns <tt class="literal">null</tt> if the
parameter does not exist, or an empty string if the parameter exists
but without a value. The value is guaranteed to be in its normal,
decoded form. If the parameter has multiple values, the value
returned is server dependent. If there is any chance that a parameter
has more than one value, you should use the
<tt class="literal">getParameterValues()</tt> method instead. If the
parameter information came in as encoded POST data, it may not be
available if the POST data has already been manually read using the
<tt class="literal">getReader()</tt> or <tt class="literal">getInputStream()</tt>
methods. This method was deprecated momentarily in favor of
<tt class="literal">getParameterValues()</tt>, but thanks to an
overwhelming flood of support from the developer community, it has
been restored in the Servlet API 2.0.

</dd>

</dl></blockquote>



<h4 class="objtitle">getParameterNames()</h4>

<blockquote>
<pre class="programlisting">public abstract Enumeration getParameterNames()</pre>

<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns all the parameter names as an <tt class="literal">Enumeration</tt>
of <tt class="literal">String</tt> objects. It returns an empty
<tt class="literal">Enumeration</tt> if the servlet has no parameters.

</dd>

</dl></blockquote>



<h4 class="objtitle">getParameterValues()</h4>

<blockquote>
<pre class="programlisting">public abstract String[] getParameterValues(String name)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns all the values of the named parameter as an array of
<tt class="literal">String</tt> objects, or <tt class="literal">null</tt> if the
parameter does not exist. A single value is returned in an array of
length 1.

</dd>

</dl></blockquote>



<h4 class="objtitle">getProtocol()</h4>

<blockquote>
<pre class="programlisting">public abstract String getProtocol()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the name and version of the protocol used by the request as a
string of the form
<em class="replaceable">protocol</em><tt class="literal">/</tt><em class="replaceable">major-version</em><tt class="literal">.</tt><em class="replaceable">minor-version</em>.
Equivalent to the CGI variable <tt class="literal">SERVER_PROTOCOL</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">getReader()</h4>

<blockquote>
<pre class="programlisting">public abstract BufferedReader getReader() throws IOException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
This method retrieves the input stream as a
<tt class="literal">BufferedReader</tt> object, which should be used for
reading character-based input, since the reader translates charsets
as appropriate. This method throws an
<tt class="literal">IllegalStateException</tt> if
<tt class="literal">getInputStream()</tt> has been called before on this
same request. It throws an
<tt class="literal">UnsupportedEncodingException</tt> if the character
encoding of the input is unsupported or unknown. This method was
introduced in the Servlet API 2.0.

</dd>

</dl></blockquote>



<h4 class="objtitle">getRealPath()</h4>

<blockquote>
<pre class="programlisting">public abstract String getRealPath(String path)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the real file system path of any given "virtual
path" or <tt class="literal">null</tt> if the translation cannot be
performed. If the given path is <tt class="literal">"/"</tt> it returns the
document root for the server. If the given path is the same as the
one returned by <tt class="literal">getPathInfo()</tt>, it returns the same
real path as would be returned by
<tt class="literal">getPathTranslated()</tt>. There is no CGI counterpart.

</dd>

</dl></blockquote>



<h4 class="objtitle">getRemoteAddr()</h4>

<blockquote>
<pre class="programlisting">public abstract String getRemoteAddr()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the IP address of the client machine as a
<tt class="literal">String</tt>. This information comes from the socket
connecting the server to the client, so the remote address may be
that of a proxy server. It is the same as the CGI variable
<tt class="literal">REMOTE_ADDR</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">getRemoteHost()</h4>

<blockquote>
<pre class="programlisting">public abstract String getRemoteHost()</pre>

<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the name of the client host. This comes from the socket
connecting the server to the client and may be the name of a proxy
server. It is the same as the CGI variable
<tt class="literal">REMOTE_HOST</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">getScheme()</h4>

<blockquote>
<pre class="programlisting">public abstract String getScheme()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
This method returns the scheme used to make this request. Examples
include <tt class="literal">"http"</tt>, <tt class="literal">"https"</tt>, and
<tt class="literal">"ftp"</tt>, as well as the newer Java-specific schemes
<tt class="literal">"jdbc"</tt> and <tt class="literal">"rmi"</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">getServerName()</h4>

<blockquote>
<pre class="programlisting">public abstract String getServerName()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the name of the server that received the request. It is an
attribute of the <tt class="literal">ServletRequest</tt> because it can
change for different requests if the server has more than one name (a
situation that might arise if one server is hosting more than one web
site). Equivalent to the CGI variable <tt class="literal">SERVER_NAME</tt>.

</dd>

</dl></blockquote>



<h4 class="objtitle">getServerPort()</h4>

<blockquote>
<pre class="programlisting">public abstract int getServerPort()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the port number on which this request was received. The same
as the CGI variable <tt class="literal">SERVER_PORT</tt>.
<a name="INDEX-2379"></a><a name="INDEX-2380"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2377"></a><a name="INDEX-2378"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>ServletResponse</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>


<span class="refsect1"><h3>Synopsis</h3></span><b>Interface Name:</b>	<tt class="literal">javax.servlet.ServletResponse</tt>



<br><b>Superinterface:</b>	None


<br><b>Immediate Subinterfaces:</b> <tt class="literal">javax.servlet.http.HttpServletResponse</tt>



<br><b>Interfaces Implemented:</b>	None


<br><b>Availability:</b>	Servlet API 1.0 and later







<span class="refsect1"><h3>Description</h3> </span>
<p>Servlets use <tt class="literal">ServletResponse</tt> objects to send MIME
encoded data back to the client. The servlet engine creates this
object and passes it to the servlet's
<tt class="literal">service()</tt> method. To send binary data, use the
<tt class="literal">ServletOutputStream</tt> returned by
<tt class="literal">getOutputStream()</tt>. To send character data, use the
<tt class="literal">PrintWriter</tt> returned by
<tt class="literal">getWriter()</tt>. You can explicitly set the
output's MIME type using the
<tt class="literal">setContentType()</tt> method. If you elect to set this
manually, do so before calling <tt class="literal">getWriter()</tt>, as
<tt class="literal">getWriter()</tt> consults the content type to determine
which charset to use. Consult RFC 2045 at <a href="http:/www.ietf.org/rfc/rfc2045.txt">http:/www.ietf.org/rfc/rfc2045.txt</a> for more
information on MIME.
</p>



<h3>Interface Declaration</h3>
<blockquote>
<pre class="programlisting">public interface ServletResponse {
  // Methods
  public abstract String getCharacterEncoding();               // New in 2.0
  public abstract ServletOutputStream getOutputStream() throws IOException;
  public abstract PrintWriter getWriter() throws IOException;  // New in 2.0
  public abstract void setContentLength(int len);
  public abstract void setContentType(String type);
}</pre>
</blockquote>





<h3>Methods</h3>
<h4 class="objtitle">getCharacterEncoding()</h4>

<blockquote>
<pre class="programlisting">public abstract String getCharacterEncoding()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the charset encoding used for this MIME body. This is the
charset specified by the assigned content type or
<tt class="literal">"ISO-8859-1"</tt> if no charset has been specified.
This method was introduced in the Servlet API 2.0.

</dd>

</dl></blockquote>



<h4 class="objtitle">getOutputStream()</h4>

<blockquote>
<pre class="programlisting">public abstract ServletOutputStream getOutputStream() throws IOException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns a <tt class="literal">ServletOutputStream</tt> for writing binary
(byte-at-a-time) response data. No encoding is performed. Throws an
<tt class="literal">IllegalStateException</tt> if
<tt class="literal">getWriter()</tt> has already been called on this
response.

</dd>

</dl></blockquote>



<h4 class="objtitle">getWriter()</h4>

<blockquote>
<pre class="programlisting">public abstract PrintWriter getWriter() throws IOException</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns a <tt class="literal">PrintWriter</tt> for writing character-based
response data. The writer encodes the characters according to
whatever charset is given in the content type. If no charset is
specified in the content type, as is generally the case, the writer
uses the ISO-8859-1 (Latin-1) encoding appropriate for Western
European languages. Throws an
<tt class="literal">IllegalStateException</tt> if
<tt class="literal">getOutputStream()</tt> has already been called on this
response, and an <tt class="literal">UnsupportedEncodingException</tt> if
the encoding of the output stream is unsupported or unknown. This
method was introduced in the Servlet API 2.0.

</dd>

</dl></blockquote>



<h4 class="objtitle">setContentLength()</h4>

<blockquote>
<pre class="programlisting">public abstract void setContentLength(int len)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Sets the length of the content being returned by the server. In HTTP
servlets, it sets the HTTP <tt class="literal">Content-Length</tt> header.
HTTP servlets use this method to enable persistent connections and
help client progress monitors, so its use is optional.

</dd>

</dl></blockquote>



<h4 class="objtitle">setContentType()</h4>

<blockquote>
<pre class="programlisting">public abstract void setContentType(String type)</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
This method sets the content type of the response to be the specified
type. In HTTP servlets, it sets the <tt class="literal">Content-Type
</tt>HTTP header.
<a name="INDEX-2383"></a><a name="INDEX-2384"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2381"></a><a name="INDEX-2382"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>SingleThreadModel</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>









<span class="refsect1"><h3>Synopsis</h3></span><b>Interface Name:</b>	<tt class="literal">javax.servlet.SingleThreadModel</tt>



<br><b>Superinterface:</b>	None


<br><b>Immediate Subinterfaces:</b> 	None


<br><b>Implemented By:</b> 	None


<br><b>Availability:</b>	New as of Servlet API 2.0; found in JSDK 2.0, JWS 1.1







<span class="refsect1"><h3>Description</h3> </span>
<p><tt class="literal">SingleThreadModel</tt> is a tag interface with no
methods. If a servlet implements this interface, the server ensures
that each instance of the servlet handles only one service request at
a time. Servers implement this functionality by maintaining a pool of
servlet instances and dispatching incoming requests to free servlets
within the pool. <tt class="literal">SingleThreadModel</tt> provides easy
thread safety, but at the cost of increased resource requirements as
more servlet instances are loaded at any given time.

</p>



<a name="INDEX-2387"></a>
<a name="INDEX-2388"></a>

<blockquote>
<pre class="programlisting">public interface SingleThreadModel { 
}</pre>
</blockquote>


</div>
<a name="INDEX-2385"></a><a name="INDEX-2386"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<tr>
<td align="left"><font size="+2"><b>UnavailableException</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>









<span class="refsect1"><h3>Synopsis</h3></span><b>Class Name:</b></b>	<tt class="literal">javax.servlet.UnavailableException</tt>



<br><b>Superclass:</b>	<tt class="literal">javax.servlet.ServletException</tt>



<br><b>Immediate Subclasses:</b>	None


<br><b>Interfaces Implemented:</b>	None


<br><b>Availability:</b>	Servlet API 1.0 and later







<span class="refsect1"><h3>Description</h3> </span>
<p>A servlet can throw an <tt class="literal">UnavailableException</tt> at any
time to indicate that it is not available to service client requests.
There are two types of unavailability: permanent (where some
corrective action must be taken on the server) and temporary. A
servlet is temporarily unavailable if some system-wide problem
momentarily prevents it from servicing requests. This may include
network troubles or a crashed or overloaded database server. To mark
a servlet as temporarily unavailable, specify a duration (in seconds)
when constructing the exception. Well-written servers check back
after this time. Servlet implementations are not required to treat
temporary and permanent unavailability differently.
</p>


<p>Servers generally provide clients with polite error messages when
handling requests for unavailable servlets. For example, the Java Web
Server returns a 404 (Unavailable) message.</p>




<h3>Class Summary</h3>
<blockquote>
<pre class="programlisting">public class UnavailableException extends ServletException {
  // Constructors
  public UnavailableException(int seconds, Servlet servlet, String msg);
  public UnavailableException(Servlet servlet, String msg);

  // Instance Methods
  public Servlet getServlet();
  public int getUnavailableSeconds();
  public boolean isPermanent();
}</pre>
</blockquote>





<h3>Constructors</h3>
<h4 class="objtitle">UnavailableException()</h4>

<blockquote>
<pre class="programlisting">public UnavailableException(int seconds, Servlet servlet, String msg)
public UnavailableException(Servlet servlet, String msg)</pre>

<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Constructs an <tt class="literal">UnavailableException</tt> with a given
explanatory message. You can optionally specify a period of
unavailability, given in seconds. If no time estimate can be made, a
nonpositive value can be passed to the constructor, indicating
permanent unavailability. Notice the nonstandard placement of the
optional <tt class="literal">seconds</tt> parameter as the first parameter
instead of the last. This may be changed in an upcoming release.

</dd>

</dl></blockquote>







<h4 class="objtitle">getServlet()</h4>

<blockquote>
<pre class="programlisting">public Servlet getServlet()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the servlet that threw this exception.
</dd>

</dl></blockquote>



<h4 class="objtitle">getUnavailableSeconds()</h4>

<blockquote>
<pre class="programlisting">public int getUnavailableSeconds()</pre>


<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns the number of seconds for which this servlet will be
unavailable. A negative number indicates permanent unavailability. No
attempt is made to compensate for the time elapsed since the
exception was thrown.

</dd>

</dl></blockquote>



<h4 class="objtitle">isPermanent()</h4>

<blockquote>
<pre class="programlisting">public boolean isPermanent()</pre>

<dl>
<dt>
<b>Description</b>
</dt>
<dd>
Returns <tt class="literal">true</tt> if the servlet is unavailable
indefinitely, <tt class="literal">false</tt> otherwise.
<a name="INDEX-2391"></a><a name="INDEX-2392"></a><a name="INDEX-2393"></a><a name="INDEX-2394"></a><a name="INDEX-2395"></a><a name="INDEX-2396"></a>

</dd>

</dl></blockquote>



</div>
<a name="INDEX-2389"></a><a name="INDEX-2390"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch13_08.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="appb_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/appb_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">13.8. Performance Tuning</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">B. HTTP Servlet API Quick Reference</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links">
<p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>

<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
