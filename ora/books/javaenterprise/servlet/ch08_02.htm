<html>
<head>
<title>Digital Certificates (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Digital Certificates">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_01.htm">Chapter 8: Security</a></td><td align="right" valign="top" width="172"><a href="ch08_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">8.2. Digital Certificates</h2>

<p>Real applications require a higher level of security than basic and
digest authentication provide. They also need guaranteed
confidentiality and integrity, as well as more reliable
authentication. <a name="INDEX-1469"></a><a name="INDEX-1470"></a><a name="INDEX-1471"></a>Digital certificate technology
provides this.
</p>

<p>The key concept is <a name="INDEX-1472"></a><a name="INDEX-1473"></a><a name="INDEX-1474"></a>public key cryptography. In a
public key cryptographic system, each participant has two keys that
are used to encrypt or decrypt information. One is the public key,
which is distributed freely. The other is a private key, which is
kept secret. The keys are related, but one can not be derived from
the other. To demonstrate, assume Jason wants to send a secret
message to Will. He finds Will's public key and uses it to
encrypt the message. When Will gets the message, he uses his private
key to decrypt it. Anyone intercepting the message in transit is
confronted with indecipherable gibberish.
</p>

<p>Public key encryption schemes have been around for several years and
are quite well developed. Most are based on the patented RSA
algorithm developed by Ron Rivest, Adi Shamir, and Leonard Adelman.
RSA uses very large prime numbers to generate a pair of asymmetric
keys (i.e., each key can decode messages encoded with the other).
Individual keys come in varying lengths, usually expressed in terms
of the number of bits that make up the key. 1024- or 2048-bit keys
are adequate for secure RSA communications.
</p>

<p>Because keys are so large, it is not practical for a user to type one
into her web brower for each request. Instead, keys are stored on
disk in the form of digital certificates. Digital certificates can be
generated by software like Phil Zimmerman's PGP package, or
they can be issued by a third party. The certificate files themselves
can be loaded by most security-aware applications, such as servers,
browsers, and email software.
</p>

<p>Public key cryptography solves the confidentiality problem because
the communication is encrypted. It also solves the integrity problem:
Will knows that the message he received was not tampered with since
it decodes properly. So far, though, it does not provide any
authentication. Will has no idea whether Jason actually sent the
message. This is where digital signatures come into play. Because
public and private keys are asymmetric, Jason can first use his
private key to encode a message and then use Will's public key
to encode it again. When Will gets the message, he decodes it first
with his private key, and then with Jason's public key. Because
only Jason can encode messages with his private key--messages
that can be decoded only with his public key--Will knows that
the message was truly sent by Jason.
</p>

<p>This is different from simpler symmetric key systems, where a single
key is used for encoding and decoding. While asymmetric keys have the
significant advantage of allowing secure communication without ever
requiring a secure channel, they have the disadvantage of requiring
much more computational muscle. As a compromise, many encryption
systems use asymmetric public and private keys to identify each other
and then confidentially exchange a separate symmetric key for
encrypting the actual exchange. The symmetric key is usually based on
DES (Data Encryption Standard).
</p>

<p>U.S. government restrictions currently limit symmetric key size to 56
bits (about 72 quadrillion possible keys). Messages encrypted with a
56-bit key are difficult to decode, but by no means
impossible--large networks have been used to decode such
messages within a matter of days. With the United States, however,
many systems use 128-bit DES keys (about 3.40282 x 10^38 possible
keys). Because there is no know way to decode a DES-encrypted message
short of brute-force trial and error, messages sent using large keys
are very, very secure.
</p>

<p>This leaves one final problem--how does one user know that
another user is who she says she is? Jason and Will know each other,
so Will trusts that the public key Jason gave him in person is the
real one.<a href="#FOOTNOTE-2">[2]</a> On
the other hand, if Lisa wants to give Jason her public key, but Jason
and Lisa have never met, there is no reason for Jason to believe that
Lisa is not actually Mark. But, if we assume that Will knows Lisa, we
can have Will use his private key to sign Lisa's public key.
Then, when Jason gets the key, he can detect that Will, whom he
trusts, is willing to vouch for Lisa's identity. These
introductions are sometimes called a "web of trust."
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-2"></a>
<p>[2]To be truthful, people almost never meet in
dark alleys to exchange their full public keys. Instead, they
exchange keys digitally (via email, perhaps) and in person simply
compare a small fingerprint hash of the key.</p> </blockquote>

<p>In the real world, this third-party vouching is usually handled by a
specially established certificate authority, such as
<a name="INDEX-1475"></a><a name="INDEX-1476"></a><a name="INDEX-1477"></a><a name="INDEX-1478"></a>
VeriSign Corporation. Because VeriSign is a well-known organization
with a well-known public key, keys verified and signed by VeriSign
can be assumed to be trusted, at least to the extent that VeriSign
received proper proof of the receiver's identity. VeriSign
offers a number of classes of digital IDs, each with an increasing
level of trust. You can get a Class 1 ID by simply filling out a form
on the VeriSign web site and receiving an email. Higher classes are
individually verified by VeriSign employees, using background checks
and investigative services to verify identities.
</p>

<p>When selecting a certificate authority, it is important to choose a
firm with strong market presence. VeriSign certificates, for
instance, are included in Netscape Navigator and Microsoft Internet
Explorer, so virtually every user on the Internet will trust and
accept them. The following firms provide certificate authority
services:
</p>

<ul>
<li>
<p>	VeriSign (<a href="../../../../../../../www.verisign.com/">http://www.verisign.com/</a>)</p>
</li>
<li>
<p>
<a name="INDEX-1479"></a><a name="INDEX-1480"></a><a name="INDEX-1481"></a>Thawte Consulting
(<a href="../../../../../../../www.thawte.com/">http://www.thawte.com/</a>)
</p>
</li>
<li>
<p>
<a name="INDEX-1482"></a><a name="INDEX-1483"></a><a name="INDEX-1484"></a>Entrust Technologies
(<a href="../../../../../../../www.entrust.com/">http://www.entrust.com/</a>)
</p>
</li>
<li>
<p>
<a name="INDEX-1485"></a><a name="INDEX-1486"></a><a name="INDEX-1487"></a>
Keywitness (<a href="../../../../../../../www.keywitness.ca/">http://www.keywitness.ca/</a>)
</p>
</li>
</ul>

<p>For more abstract information about digital certificates, we
<a name="INDEX-1488"></a>recommend
<a name="INDEX-1489"></a><a name="INDEX-1490"></a>Understanding Digital Signatures
by Gail L. Grant (Mc-Graw Hill), which provides an excellent
introduction to the subject suitable for programmers and
nonprogrammers alike. For more on cryptography as it is related to
Java, we recommend <a name="INDEX-1491"></a><a name="INDEX-1492"></a>Java Cryptography by Jonathan
Knudsen (O'Reilly).<a name="INDEX-1493"></a><a name="INDEX-1494"></a><a name="INDEX-1495"></a><a name="INDEX-1496"></a><a name="INDEX-1497"></a><a name="INDEX-1498"></a>
</p>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch08_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">8.1. HTTP Authentication</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">8.3. Secure Sockets Layer (SSL)</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
