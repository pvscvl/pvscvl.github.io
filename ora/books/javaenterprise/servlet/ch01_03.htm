<html>
<head>
<title>The Power of Servlets (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The Power of Servlets">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch01_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch01_01.htm">Chapter 1: Introduction</a></td><td align="right" valign="top" width="172"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">1.3. The Power of Servlets</h2>

<p>So far, we have portrayed servlets as an alternative to other dynamic
web content technologies, but we haven't really explained why
we think you should use them. What makes servlets a viable choice for
web development? We believe that servlets offer a number of
advantages over other approaches, including: portability, power,
efficiency, endurance, safety, elegance, integration, extensibility,
and flexibility. Let's examine each in turn.
</p>

<a name="ch01-15-fm2xml"></a>
<h3 class="sect2">1.3.1. Portability</h3>

<p>Because servlets are written in Java and conform to a well-defined
and widely accepted API, they are highly
<a name="INDEX-165"></a><a name="INDEX-166"></a>
portable across operating systems and across server implementations.
You can develop a servlet on a Windows NT machine running the Java
Web Server and later deploy it effortlessly on a high-end Unix server
running Apache. With servlets, you can truly "write once, serve
everywhere."
</p>

<p>Servlet portability is not the stumbling block it so often is with
applets, for two reasons. First, servlet portability is not
mandatory. Unlike applets, which have to be tested on all possible
client platforms, servlets have to work only on the server machines
that you are using for development and deployment. Unless you are in
the business of selling your servlets, you don't have to worry
about complete portability. Second, servlets avoid the most
error-prone and inconsistently implemented portion of the Java
language: the <a name="INDEX-167"></a>Abstract Windowing Toolkit (AWT) that
forms the basis of Java graphical user interfaces.
</p>


<a name="ch01-16-fm2xml"></a>
<h3 class="sect2">1.3.2. Power</h3>

<p>Servlets can harness the full
<a name="INDEX-168"></a><a name="INDEX-169"></a>power of
the core Java APIs: networking and
<a name="INDEX-170"></a>URL access,
<a name="INDEX-171"></a>
multithreading, <a name="INDEX-172"></a><a name="INDEX-173"></a>
image manipulation, <a name="INDEX-174"></a>data compression,
<a name="INDEX-175"></a><a name="INDEX-176"></a><a name="INDEX-177"></a>database connectivity,
<a name="INDEX-178"></a><a name="INDEX-179"></a>internationalization,
<a name="INDEX-180"></a>remote method invocation (RMI),
<a name="INDEX-181"></a>CORBA connectivity, and
<a name="INDEX-182"></a><a name="INDEX-183"></a><a name="INDEX-184"></a>
object serialization, among others. If you want to write a web
application that allows employees to query a corporate legacy
database, you can take advantage of all of the Java Enterprise APIs
in doing so. Or, if you need to create a web-based directory lookup
application, you can make use of the JNDI API.
</p>

<p>As a servlet author, you can also pick and choose from a plethora of
third-party Java classes and JavaBeans components. In the future,
you'll even be able to use newly introduced
<a name="INDEX-185"></a>Enterprise JavaBeans components.
Today, servlets can use third-party code to handle tasks such as
<a name="INDEX-186"></a>regular
<a name="INDEX-187"></a>expression searching,
<a name="INDEX-188"></a>data
charting, advanced database access, and advanced networking.
</p>

<p>Servlets are also well suited for enabling client/server
communication. With a Java-based applet and a Java-based servlet, you
can use RMI and object serialization to handle client/server
communication, which means that you can leverage the same custom code
on the client as on the server. Using CGI for the same purpose is
much more complicated, as you have to develop your own custom
protocol to handle the communication.
</p>


<a name="ch01-17-fm2xml"></a>
<h3 class="sect2">1.3.3. Efficiency and Endurance</h3>

<p>Servlet invocation is highly
<a name="INDEX-189"></a><a name="INDEX-190"></a><a name="INDEX-191"></a><a name="INDEX-192"></a>
efficient. Once a servlet is loaded, it generally remains in the
server's memory as a single object instance. Thereafter, the
server invokes the servlet to handle a request using a simple,
lightweight method invocation. Unlike with CGI, there's no
process to spawn or interpreter to invoke, so the servlet can begin
handling the request almost immediately. Multiple, concurrent
requests are handled by separate threads, so servlets are highly
scalable.
</p>

<p>Servlets, in general, are naturally enduring objects. Because a
servlet stays in the server's memory as a single object
instance, it automatically maintains its state and can hold on to
external resources, such as database connections, that may otherwise
take several seconds to establish.
</p>


<a name="ch01-18-fm2xml"></a>
<h3 class="sect2">1.3.4. Safety</h3>

<p>Servlets support safe programming practices on a number of levels.
Because they are written in Java, servlets inherit the strong
<a name="INDEX-193"></a><a name="INDEX-194"></a><a name="INDEX-195"></a>type safety of the Java language. In
addition, the Servlet API is implemented to be type-safe. While most
values in a CGI program, including a numeric item like a server port
number, are treated as strings, values are manipulated by the Servlet
API using their native types, so a server port number is represented
as an integer. Java's automatic garbage collection and lack of
pointers mean that servlets are generally safe from memory management
problems like <a name="INDEX-196"></a><a name="INDEX-197"></a>dangling pointers,
<a name="INDEX-198"></a><a name="INDEX-199"></a><a name="INDEX-200"></a>invalid
pointer references, and <a name="INDEX-201"></a>memory leaks.
</p>

<p>Servlets can handle errors safely, due to Java's
exception-handling mechanism. If a servlet divides by zero or
performs some other illegal operation, it throws an exception that
can be safely caught and handled by the server, which can politely
log the error and apologize to the user. If a C++-based server
extension were to make the same mistake, it could potentially crash
the server.
</p>

<p>A server can further protect itself from servlets through the use of
a Java security manager. A server can execute its servlets under the
watch of a strict security manager that, for example, enforces a
security policy designed to prevent a malicious or poorly written
servlet from damaging the server file system.
</p>


<a name="ch01-19-fm2xml"></a>
<h3 class="sect2">1.3.5. Elegance</h3>

<p>The
<a name="INDEX-202"></a><a name="INDEX-203"></a>
elegance of servlet code is striking. Servlet code is clean, object
oriented, modular, and amazingly simple. One reason for this
simplicity is the Servlet API itself, which includes methods and
classes to handle many of the routine chores of servlet development.
Even advanced operations, like cookie handling and session tracking,
are abstracted into convenient classes. A few more advanced but still
common tasks were left out of the API, and, in those places, we have
tried to step in and provide a set of helpful classes in the
<tt class="literal">com.oreilly.servlet</tt> package.
</p>


<a name="ch01-20-fm2xml"></a>
<h3 class="sect2">1.3.6. Integration</h3>

<p>Servlets are tightly integrated with the server. This
<a name="INDEX-204"></a><a name="INDEX-205"></a>
integration allows a servlet to cooperate with the server in ways
that a CGI program cannot. For example, a servlet can use the server
to translate file paths, perform logging, check authorization,
perform MIME type mapping, and, in some cases, even add users to the
server's user database. Server-specific extensions can do much
of this, but the process is usually much more complex and
error-prone.
</p>


<a name="ch01-21-fm2xml"></a>
<h3 class="sect2">1.3.7. Extensibility and Flexibility</h3>

<p>The Servlet API is designed to be easily
<a name="INDEX-206"></a><a name="INDEX-207"></a>
extensible. As it stands today, the API includes classes that are
optimized for HTTP servlets. But at a later date, it could be
extended and optimized for another type of servlets, either by Sun or
by a third party. It is also possible that its support for HTTP
servlets could be further enhanced.
</p>

<p>Servlets are also quite flexible. As you'll see in the next
chapter, an HTTP servlet can be used to generate a complete web page;
it can be added to a static page using a
<tt class="literal">&lt;SERVLET&gt;</tt> tag in what's known as a
server-side include; and it can be used in cooperation with any
number of other servlets to filter content in something called a
servlet chain. In addition, just before this book went to press, Sun
introduced <a name="INDEX-208"></a><a name="INDEX-209"></a>JavaServer Pages, which offer a way to
write snippets of servlet code directly within a static HTML page,
using a syntax that is curiously similar to Microsoft's Active
Server Pages (ASP). Who knows what they (or you) will come up with
next.
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch01_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch02_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">1.2. Support for Servlets</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2. HTTP Servlet Basics</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
