<html>
<head>
<title>Applet-Servlet Communication (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Applet-Servlet Communication">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm">Java Servlet Programming</a></td><td align="right" valign="top" width="172"><a href="ch10_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch10_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 10.  Applet-Servlet Communication</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch10_01.htm">Communication Options</a>
<br>
<a href="ch10_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch10_02.htm">Daytime Server</a>
<br>
<a href="ch10_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch10_03.htm">Chat Server</a>
<br>
</p>
</div>


<p>This chapter demonstrates several techniques by which applets can
communicate with servlets. We're going to come at the topic
from a slightly different angle than you might expect. Instead of
assuming you have an applet and a servlet that need to communicate,
we're going assume you have an applet that needs to talk to
some entity on the server and explore why sometimes that entity
should be a servlet.
</p>

<p>To get the ball rolling, let's think about applets that need to
communicate with the server. There are a number of good examples.
Take a look at the administration applet that manages the Java Web
Server. Think about how it works--it executes on the client, but
it configures the server. To do this, the applet and the server need
to be in near constant communication. As another example, take a look
at one of the popular chat applets. One client says something, and
all the rest see it. How does that work? They certainly don't
communicate applet to applet. Instead, each applet posts its messages
to a central server, and the server takes care of updating the other
clients. Finally, imagine an applet that tracks the price of a set of
stocks and offers continuous updates. How does the applet know the
current stock prices, and, more importantly, how does it know when
they change? The answer is that it talks with its server.
</p>



<h2 class="sect1">10.1. Communication Options</h2>

<p>Our interest in stock trading has risen along with the Dow, so
let's continue with this hypothetical stock tracking applet. We
should warn you right now that this example will remain hypothetical.
We'll use it solely as a reference point for discussing the
issues involved in
<a name="INDEX-1754"></a><a name="INDEX-1755"></a><a name="INDEX-1756"></a>applet-server communication. But
don't worry, there's plenty of code later in the chapter
that demonstrates the techniques discussed here, just in somewhat
simpler examples.
</p>

<p>This stock tracking applet of ours needs to get a stock feed from
some server machine. Assuming it's a normal, untrusted applet,
there's just one choice: the machine from which it was
downloaded. Any attempt to connect to another machine results in a
<tt class="literal">SecurityException</tt>, so let's assume the
applet gets a stock feed from the server machine from which it was
downloaded.<a href="#FOOTNOTE-1">[1]</a> The question remains: how can
the applet and the server communicate?
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1] You may be wondering how the server
machine itself got the stock feed. For the purposes of this example,
it's magic.</p> </blockquote>

<div class="sidebar">
<h4 class="objtitle">Trusted and Untrusted Applets</h4>

<p>
<a name="INDEX-1757"></a><a name="INDEX-1758"></a><a name="INDEX-1759"></a>
When a Java applet is embedded in a web page, a browser can download
it and execute it automatically. If you think about it, that's
a very dangerous thing to do. So, to protect the client, JDK 1.0
assumed all applets were untrusted and ran them under the watch of a
<tt class="literal">SecurityManager</tt> that severely limited what they
could do. For example, the security manager made sure applets
couldn't write to the user's file system, read certain
system properties, accept incoming socket connections, or establish
outgoing socket connections to any host but the origin server. This
protected the client, but it limited the usefulness of applets.
</p>

<p>Consequently, JDK 1.1 introduced the concept of trusted
applets--applets that can operate like normal applications with
full access to the client machine. For an applet to be trusted, it
has to be <a name="INDEX-1760"></a>digitally signed by a person or
company the client trusts (as marked in the client's browser).
The signature authenticates the applet's origin and guarantees
integrity during the transfer, so the client knows the applet code
hasn't been surreptitiously changed. This allowed for more
productive applets, but it was an all-or-nothing approach.
</p>

<p>To give the client more control, JDK 1.2 is introducing a
<a name="INDEX-1761"></a><a name="INDEX-1762"></a>fine-grained access control
system. Under this new system, a digitally signed applet can be
partially trusted, given certain abilities without being given free
reign on the system. This promises to allow applets from unknown
sources to be granted small privileges (such as writing to a single
directory), without granting them the ability to wipe the
client's hard drive. See <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch08_01.htm">Chapter 8, "Security"</a>, for more
information.
</p>
</div>

<a name="ch10-3-fm2xml"></a>
<h3 class="sect2">10.1.1. HTTP and Raw Socket Connections</h3>

<p>
<a name="INDEX-1763"></a><a name="INDEX-1764"></a><a name="INDEX-1765"></a><a name="INDEX-1766"></a>Before JDK 1.1 and servlets,
there were two options for applet-server communication:
</p>

<ul>
<li>
<p>Have the applet establish an
<a name="INDEX-1767"></a><a name="INDEX-1768"></a><a name="INDEX-1769"></a>
HTTP connection to a CGI program on the server machine. The applet
acts like a browser and requests a page, parsing the response for its
own use. The applet can provide information using a
<a name="INDEX-1770"></a><a name="INDEX-1771"></a>query string or
<a name="INDEX-1772"></a><a name="INDEX-1773"></a><a name="INDEX-1774"></a>POST data and can receive information
from the returned page.
</p>
</li>
<li>
<p>Have the applet establish a raw socket connection to a non-HTTP
server running on the server machine. The non-HTTP server can listen
to a particular port and communicate with the applet using whatever
custom protocol they agree upon.
</p>
</li>
</ul>

<p>Each of these approaches has advantages and disadvantages. Having an
applet make an HTTP connection to a CGI program works well for these
reasons:
</p>

<ul>
<li>
<p>It's easy to write. The applet can take advantage of the
<tt class="literal">java.net.URL</tt> and
<tt class="literal">java.net.URLConnection</tt> classes to manage the
communication channel, and the CGI program can be written like any
other.
</p>
</li>
<li>
<p>It works even for applets running behind a firewall. Most firewalls
allow HTTP connections but disallow raw socket connections.
</p>
</li>
<li>
<p>It allows a Java applet to communicate with a program written in any
language. The CGI program doesn't have to be written in Java.
It can be in Perl, C, C++, or any other language.
</p>
</li>
<li>
<p>It works with applets written using JDK 1.0, so it works with all
Java-enabled browsers.
</p>
</li>
<li>
<p>It allows secure communication. An applet can communicate with a
secure server using the encrypted HTTPS (HTTP + SSL) protocol.
</p>
</li>
<li>
<p>The CGI program can be used by browsers as well as applets. In the
case of our stock tracker example, the CGI program can do double
duty, also acting as the back-end for an HTML form-based stock quote
service. This makes it especially convenient for an applet to
leverage existing CGI programs.
</p>
</li>
</ul>

<p>But the HTTP connection to a CGI program also has some problems:</p>

<ul>
<li>
<p>It's slow. Because of the HTTP request/response paradigm, the
applet and the CGI program cannot communicate interactively. They
have to reestablish a new communication channel for each request and
response. Plus, there is the standard delay while the CGI program
launches and initializes itself to handle a request.
</p>
</li>
<li>
<p>It usually requires requests to be formed as an awkward array of
name/value pairs. For example, when our stock tracker applet asks for
the daily high for Sun Microsystems' stock, it has to ask with
an awkward query string like
<tt class="literal">"stock=sunw&amp;query=dailyhi"</tt>.
</p>
</li>
<li>
<p>It forces all responses to be formatted using some arbitrary,
previously agreed-upon standard. For example, when our stock tracker
applet receives the response that contains a stock's daily high
price, it needs to know exactly how to parse the data. Does the
returned price begin with a dollar sign? Does the response include
the time when the high occurred? And if so, where is the time
specified and in what format?
</p>
</li>
<li>
<p>Only the applet can initiate communication. The CGI program has to
wait passively for the applet to request something before it can
respond. If a stock price changes, the applet can find out only when
it asks the right question.
</p>
</li>
</ul>

<p>An applet and server can also communicate by having the applet
establish a socket connection to a non-HTTP server process. This
provides the following advantages over the HTTP-based approach:
</p>

<ul>
<li>
<p>It allows bidirectional, sustained communication. The applet and
servlet can use the same socket (or even several sockets) to
communicate interactively, sending messages back and forth. For
security reasons, the applet must always initiate the connection by
connecting to a server socket on the server machine, but after a
socket connection has been established, either party can write to the
socket at any time. This allows our stock tracker to receive stock
price updates as soon as they are available.
</p>
</li>
<li>
<p>It allows a more efficient program to run on the server side. The
non-HTTP server can be written to handle a request immediately
without launching an external CGI program to do the work.
</p>
</li>
</ul>

<p>But a socket connection also has disadvantages versus the HTTP-based
approach:
</p>

<ul>
<li>
<p>It fails for applets running behind firewalls. Most firewalls
don't allow raw socket connections, and thus they disallow this
sort of applet-server communication. Therefore, this mechanism should
be used only when an applet is guaranteed to never run on the far
side of a firewall, such as for an intranet application.
</p>
</li>
<li>
<p>It can be fairly complicated to write the code that runs on the
server. There must always be some process (such as a stock quote
server) listening on a well-known port on the server machine.
Developing such an application in Java is easier than in C++, but it
is still nontrivial.
</p>
</li>
<li>
<p>It may require the development of a custom protocol. The applet and
server need to define the protocol they use for the communication.
While this protocol may be simpler and more efficient than HTTP, it
often has to be specially developed.
</p>
</li>
<li>
<p>The non-HTTP server cannot be conveniently connected to by a web
browser. Browsers speak HTTP; they cannot communicate with a non-HTTP
server.
</p>
</li>
</ul>

<p>The standard historical approach has been for applets to use HTTP to
connect to CGI programs on the server. It's easy, and it works
for all types of browsers, even browsers running behind firewalls.
The use of raw socket connections has generally been reserved for
those situations where it's absolutely necessary, such as when
the applet and server require bidirectional communication. And, even
in those cases, it's often possible to use HTTP connections to
simulate bidirectional communication in order to pass through
firewalls, as we'll see in a later example.<a name="INDEX-1775"></a><a name="INDEX-1776"></a><a name="INDEX-1777"></a><a name="INDEX-1778"></a>
</p>


<a name="ch10-4-fm2xml"></a>
<h3 class="sect2">10.1.2. Servlets and Object Serialization</h3>

<p>The recent introduction of Java
<a name="INDEX-1779"></a><a name="INDEX-1780"></a><a name="INDEX-1781"></a>
servlets and object serialization has given new life to these
traditional applet-server communication techniques. Servlets are
starting to replace slow-starting CGI programs, improving the
performance of HTTP-based applet-server communication and making
frequent applet-server communication feasible. While it's true
in the general case that the applet and the servlet still have to
take time to reestablish their connection for each request and
response, the applet no longer has to wait as the server launches a
CGI program to handle each of its repeated requests.
</p>

<p>Java object serialization has simplified the issues involved with
formatting responses. With both applets and servlets written in Java,
it's only natural that they should communicate by exchanging
Java objects. For example, when our hypothetical stock tracking
applet asks our stock feed servlet the daily high value for Sun
stock, it can receive the response as a serialized
<tt class="literal">StockPrice</tt> object. From this, it can get the daily
high value as a <tt class="literal">float</tt> and the time of the high
value as a <tt class="literal">Date</tt>. It's convenient, and it
provides easy type safety. But beware, object serialization works
only with applets running inside browsers that support JDK 1.1 or
later.
</p>


<a name="ch10-5-fm2xml"></a>
<h3 class="sect2">10.1.3. JDBC, RMI, and a Little CORBA</h3>

<p>JDK 1.1 includes two additional features that have an impact on
applet-server communication: JDBC and <a name="INDEX-1782"></a>RMI. The
<a name="INDEX-1783"></a><a name="INDEX-1784"></a><a name="INDEX-1785"></a>
JDBC (Java database connectivity) API, discussed in <a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_01.htm">Chapter 9, "Database Connectivity"</a>, allows a Java program to connect to a
relational database on the same machine or on another machine. Java
applets written to JDK 1.1 can use JDBC to communicate with a database
on the server. This special-purpose communication doesn't
generally require
<a name="INDEX-1786"></a><a name="INDEX-1787"></a><a name="INDEX-1788"></a>applet-servlet communication.  However,
it is often helpful for an applet (especially one written to JDK 1.0)
to forgo connecting straight to the database (or to a pass-through
proxy on the web server) and instead connect to a servlet that handles
the database communication on the applet's behalf (as explained
in <a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_01.htm">the sidebar "Servlets in the Middle Tier"</a> in <a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_01.htm">Chapter 9, "Database Connectivity"</a>). For example, an applet that wants to look up
a person's address can connect to a servlet using HTTP, pass the
name of the person using HTTP parameters, and then receive the address
as either a specially formatted string or a serialized object. This
use of applet-servlet communication tends to piggy-back on existing
protocols like HTTP, so we aren't going to cover it in any more
detail here.  </p>

<p>The <a name="INDEX-1789"></a>RMI
(Remote Method Invocation) API allows an
<a name="INDEX-1790"></a>applet to invoke the methods of
a Java object executing on the server machine, and, in some cases, it
also allows the object on the server machine to invoke the methods of
the applet. The <a name="INDEX-1791"></a>
advantages of RMI for applet-server communication are compelling:
</p>

<ul>
<li>
<p>It allows applets and server objects to communicate using an elegant
high-level, object-oriented paradigm. Requests can be made as method
invocations, passing serialized object parameters if necessary.
Responses can be received as serialized objects or even references to
other remote objects. But to even use the words request and response
shows we've been using HTTP too much! With RMI, there are
<a name="INDEX-1792"></a>no requests or responses, just
method invocations. To go back to our stock tracker example, the
applet can get the daily high for Sun stock by calling
<tt class="literal">sunw.getDailyHigh()</tt>, where <tt class="literal">sunw</tt>
is a Java object that exists on the server.
</p>
</li>
<li>
<p>It allows server objects to make <a name="INDEX-1793"></a><a name="INDEX-1794"></a><a name="INDEX-1795"></a>callbacks to the methods of the
applet. For example, with our stock tracking example, the server can
notify interested applets that a stock price has changed by calling
<tt class="literal">applet.update(stock)</tt>.
</p>
</li>
<li>
<p>It can be made to work through firewalls (though it doesn't
like it, and current browsers don't support it very well). The
RMI <a name="INDEX-1796"></a>transport layer normally relies on
direct socket connections to perform its work. When an applet
executes behind a firewall, however, its socket connections fail. In
this case, the RMI transport layer can automatically begin operating
entirely within the HTTP protocol.<a href="#FOOTNOTE-2">[2]</a> This is not without cost, though. The HTTP overhead
affects performance, and the HTTP request/response paradigm cannot
support callbacks.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-2"></a>
<p>[2] For a description
of the system properties necessary for an RMI client application to
poke through a <a name="INDEX-1797"></a>firewall see John D.
Mitchell's JavaWorld Java Tip 42 at <a href="../../../../../../../www.javaworld.com/javaworld/javatips/jw-javatip42.html">http://www.javaworld.com/javaworld/javatips/jw-javatip42.html</a>.
(Unmentioned in the article but also important are the
<tt class="literal">socksProxySet</tt>, <tt class="literal">socksProxyHost</tt>,
and <tt class="literal">socksProxyPort</tt> properties necessary for
<a name="INDEX-1798"></a><a name="INDEX-1799"></a>
SOCKS-based proxies.) All these system properties should be set
automatically by web browsers, but unfortunately few web browsers
currently do this, leaving their applets with no way to determine the
proper settings and no way to use RMI through a firewall.</p>
</blockquote>
</li>
</ul>
<p>The <a name="INDEX-1800"></a>
disadvantages of RMI are equally concerning:
</p>

<ul>
<li>
<p>It's complicated. RMI communication uses special stub and
skeleton classes for each remote object, and it requires a naming
<a name="INDEX-1801"></a><a name="INDEX-1802"></a><a name="INDEX-1803"></a>
registry from which clients can obtain references to these remote
objects.
</p>
</li>
<li>
<p>It's supported in few browsers. Of all the popular browsers
available as of this writing, only Netscape Navigator 4 includes
<a name="INDEX-1804"></a><a name="INDEX-1805"></a>RMI support. Previous Netscape browser
versions and all versions of Microsoft's Internet Explorer do
not support RMI without installing a special plug-in.
</p>
</li>
<li>
<p>It can be used only by Java clients. The server object can't be
shared by a web browser or even a C++ client.
</p>
</li>
</ul>

<p>For a more information on RMI programming, see <em class="citetitle">Java
Network Programming</em><a name="INDEX-1806"></a><a name="INDEX-1807"></a>, by Elliotte Rusty Harold
(O'Reilly) and <em class="citetitle">Java Distributed
Computing</em><a name="INDEX-1808"></a><a name="INDEX-1809"></a>, by Jim Farley (O'Reilly).
</p>

<p>
<a name="INDEX-1810"></a>CORBA (Common Object Request
Broker Architecture) is a technology similar to RMI that enables
communication between distributed objects written in various
languages. With CORBA and its IIOP (Internet Inter-ORB Protocol)
communication protocol, a C++ client can communicate with a Java
servlet. Demonstrating this ability extends beyond the scope of this
book. For more information, see <a href="../../../../../../../www.acl.lanl.gov/">http://www.acl.lanl.gov/</a><a name="INDEX-1811"></a><a name="INDEX-1812"></a>
and <a href="../../../../../../../java.sun.com/products/jdk/idl">http://java.sun.com/products/jdk/idl</a>.
</p>


<a name="ch10-6-fm2xml"></a>
<h3 class="sect2">10.1.4. The Hybrid Approach</h3>

<p>Now that we've examined all the options, the question remains:
how should our stock tracking applet
<a name="INDEX-1813"></a>communicate with its stock feed
server? The answer is: it depends.
</p>

<p>If we can guarantee that all our potential clients support it,
RMI's elegance and power make it an ideal choice. But currently
that's like assuming all your friends enjoy your Star Trek
jokes. It can be true if you carefully choose your friends (or your
clients), but it's generally not the case in the real world.
</p>

<p>When RMI isn't available, the bidirectional capabilities of the
non-HTTP socket connection make it look fairly attractive.
Unfortunately, that bidirectional communication becomes nonexistent
communication when the applet ends up on the far side of a firewall.
</p>

<p>There's always the old workhorse, HTTP communication.
It's straightforward to implement and works on every
Java-enabled client. And if you can guarantee that the client
supports JDK 1.1 (and this is easier to guarantee than that the
client support RMI), you can use object serialization.
</p>

<p>Perhaps the best solution is to use every solution, with servlets.
<a name="INDEX-1814"></a>Servlets make it possible
to combine the HTTP, non-HTTP, and RMI applet-server communication
techniques, supporting them all with a single servlet. That's
right: one servlet, multiple access protocols. Why would anyone want
to do this? Well, it's a handy technique when an applet wants
to communicate using RMI or a non-HTTP protocol but needs to fallback
to HTTP when necessary (such as when it finds itself behind a
firewall). By using the same servlet to handle every client, the core
server logic and the server state can be collected in one place. When
you control your environment, of course, you can drop one or more of
these protocols. But isn't it nice to know you don't have
to?
</p>









<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch10_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch10_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">9.5. Advanced JDBC Techniques</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">10.2. Daytime Server</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
