<html>
<head>
<title>Transactions (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Transactions">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_01.htm">Chapter 9: Database Connectivity</a></td><td align="right" valign="top" width="172"><a href="ch09_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">9.4. Transactions</h2>

<p>So far, we have failed to mention one important feature of modern
relational database systems:
<a name="INDEX-1680"></a><a name="INDEX-1681"></a>
transactions. Most service-oriented web sites need to do more than
run <tt class="literal">SELECT</tt> statements and insert single pieces of
data. Let's look at an online banking application. To perform a
transfer of $50,000 between accounts, your program needs to perform
an operation that consists of two separate but related actions:
credit one account and debit another. Now, imagine that for some
reason or another, the SQL statement for the credit succeeds but the
one for the debit fails. One account holder is $50,000 richer, but
the other account has not been debited to match.
</p>

<p>SQL failure is not the only potential problem. If another user checks
the account balance in between the credit and the debit, he will see
the original balance. The database is shown in an invalid state (more
money is represented than actually exists). Granted, this kind of
thing is unlikely to occur often, but in a universe of infinite
possibilities, it will almost certainly happen sometime. This kind of
problem is similar to the synchronization issues we discussed back in
<a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch03_01.htm">Chapter 3, "The Servlet Life Cycle"</a>. This time, instead of concerning
ourselves with the validity of data stored in a servlet, we are
concerned with the validity of an underlying database. Simple
synchronization is not enough to solve this problem: multiple
servlets may be accessing the same database. For systems like banking
software, chances are good that the database is being used by a
number of entirely non-Java applications as well.
</p>

<p>Sounds like a fairly tricky problem, right? Fortunately, it was a
problem long before Java came along, so it has already been solved.
Most major RDMBS systems support the concept of transactions. A
<em class="emphasis">transaction</em> allows you to group multiple SQL
statements together. Using a transaction-aware RDBMS, you can begin a
transaction, perform any number of actions, and either
<em class="emphasis">commit</em> the results to the database or
<em class="emphasis">roll back</em> all of your SQL statements. If we
build our online banking application with a transaction-based system,
the credit will automatically be canceled if the debit fails.
</p>

<p>A transaction is isolated from the rest of the database until
finished. As far as the rest of the database is concerned, everything
takes place at once (in other words, transactions are
<em class="emphasis">atomic</em>). This means that other users accessing
the database will always see a valid view of the data, although not
necessarily an up-to-date view. If a user requests a report on
widgets sold before your widget sales transaction is completed, the
report will not include the most recent sale.
</p>

<a name="ch09-13-fm2xml"></a>
<h3 class="sect2">9.4.1. Using Transactions with JDBC</h3>

<p>Transaction management with
<a name="INDEX-1682"></a><a name="INDEX-1683"></a>
JDBC takes place via the <tt class="literal">Connection</tt><a name="INDEX-1684"></a><a name="INDEX-1685"></a>object. By default, new connections
start out in auto-commit mode. This means that every SQL statement is
executed as an individual transaction that is immediately committed
to the database. To control commitment yourself, thereby allowing you
to group SQL statements into transactions, you call
<tt class="literal">setAutoCommit(false)</tt><a name="INDEX-1686"></a><a name="INDEX-1687"></a><a name="INDEX-1688"></a>
on the <tt class="literal">Connection</tt> object. You can check the status
of <a name="INDEX-1689"></a><a name="INDEX-1690"></a>auto-commit with the
<tt class="literal">getAutoCommit()</tt><a name="INDEX-1691"></a><a name="INDEX-1692"></a><a name="INDEX-1693"></a>
method. Once you have completed all of your SQL statements, you call
<tt class="literal">commit()</tt> to permanently record the transaction in
the database. Or, if you encountered an error, you call
<tt class="literal">rollback()</tt><a name="INDEX-1694"></a><a name="INDEX-1695"></a><a name="INDEX-1696"></a>
to undo it.
</p>

<p>
<a href="#ch09-29641">Example 9-5</a> shows a servlet that uses transactions
to do basic order processing. It assumes two tables in an ODBC
database--<tt class="literal">INVENTORY</tt> (containing the product
ID and amount in stock) and <tt class="literal">SHIPPING </tt>(containing a
product ID, an order number, and the amount shipped). The servlet
uses an unshown <tt class="literal">chargeCard()</tt> method that handles
billing and throws an exception if the customer's
<a name="INDEX-1697"></a><a name="INDEX-1698"></a>credit card is invalid.
</p>

<a name="ch09-29641"></a>
<div class="example">
<h4 class="objtitle">Example 9-5. Transaction-based order management </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.sql.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class OrderHandler extends HttpServlet {

  public void doPost(HttpServletRequest req, HttpServletResponse res)
                                throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter(); 

    Connection con = null;
    try {
      Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
      con = DriverManager.getConnection("jdbc:odbc:ordersdb", "user", "passwd");

      // Turn on transactions
      con.setAutoCommit(false);

      Statement stmt = con.createStatement();
      stmt.executeUpdate(
        "UPDATE INVENTORY SET STOCK = (STOCK - 10) WHERE PRODUCTID = 7");
      stmt.executeUpdate(
        "UPDATE SHIPPING SET SHIPPED = (SHIPPED + 10) WHERE PRODUCTID = 7");

      chargeCard();  // method doesn't actually exist...

      con.commit();
      out.println("Order successful!  Thanks for your business!");
    }
    catch (Exception e) {
      // Any error is grounds for rollback
      try { 
        con.rollback();
      }
      catch (SQLException ignored) { } 
      out.println("Order failed. Please contact technical support.");
    }
    finally {
      // Clean up.
      try {
        if (con != null) con.close();
      }
      catch (SQLException ignored) { }
    }
  }
}</pre>
</blockquote>
</div>

<p>Here are a few notes on this example. First, the order transaction
logic is in <tt class="literal">doPost()</tt> since the client's
action is definitely not safely repeatable. Second, because the
example demonstrates transaction logic more than servlet logic, the
servlet simply assumes the user is buying 10 units of item 7, rather
than bothering to actually parse a form for credit card and order
information. Finally, as the servlet runs, any exception thrown
during driver initialization, connecting to the database, executing
SQL, or charging the credit card causes execution to jump to the
<tt class="literal">catch()</tt> block, where the
<tt class="literal">rollback()</tt> method is called, undoing all our work.
</p>


<a name="ch09-14-fm2xml"></a>
<h3 class="sect2">9.4.2. Optimized Transaction Processing</h3>

<p>Note that in the previous example the <tt class="literal">Connection</tt>
object was created inside the <tt class="literal">doPost()</tt> method,
giving up the performance improvements we gained earlier in the
chapter by moving the creation up to <tt class="literal">init()</tt>. This
is done because transactions are linked to connections and,
therefore, connections using transactions cannot be shared. Imagine
what would happen if another invocation of this servlet invoked the
<tt class="literal">commit()</tt> method when our order had reached only
the second SQL statement. Our <tt class="literal">INVENTORY</tt> table
would be short 10 units!
</p>

<p>So, how do we use transactions without having to connect to the
database every time a page is requested? There are several
possibilities:
</p>

<ul>
<li>
<p>Synchronize the <tt class="literal">doPost()</tt> method. This means that
each instance of the servlet deals with only one request at a time.
This works well for very low traffic sites, but it does slow things
down for your users because every transaction has to finish before
the next can start. If you need to perform database-intensive updates
and inserts, the delay will probably be unacceptable.
</p>
</li>
<li>
<p>Leave things as they are, but create a new
<tt class="literal">Connection</tt> object for each transaction. If you
need to update data only once in every few thousand page requests,
this might be the simplest route.
</p>
</li>
<li>
<p>Create a pool of <tt class="literal">Connection</tt> objects in the
<tt class="literal">init()</tt> method and hand them out as needed, as
shown in <a href="#ch09-14341">Figure 9-3</a>. This is probably the most
efficient way to handle the problem, if done right. It can, however,
become very complicated very quickly without third-party support
classes.
</p>
</li>
<li>
<p>Create a single <tt class="literal">Connection</tt> object in the
<tt class="literal">init()</tt> method and have the servlet implement
<tt class="literal">SingleThreadModel</tt>, so the web server creates a
pool of servlet instances with a <tt class="literal">Connection</tt> for
each, as shown in <a href="#ch09-13127">Figure 9-4</a>. This has the same
effect as synchronizing <tt class="literal">doPost()</tt>, but because the
web server has a number of servlet instances to choose from, the
performance hit for the user is not as great. This approach is easy
to implement, but is less robust than using a separate connection
pool because the servlet has no control over how many servlet
instances are created and how many connections are used. When
creating single-threaded database servlets, be especially sure to
have the <tt class="literal">destroy() </tt>method close any open database
connections.
</p>
</li>
<li>
<p>Implement session tracking in the servlet and use the
<tt class="literal">HttpSession</tt> object to hold onto a
<tt class="literal">Connection</tt> for each user. This allows you to go
one step beyond the other solutions and extend a transaction across
multiple page requests or even multiple servlets.
</p>
</li>
</ul>
<a name="ch09-14341"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0903.gif" webstripperlinkwas="figs/jsp_0903.gif"></div>
<h4 class="objtitle">Figure 9-3. Servlets using a database connection pool</h4>

<a name="ch09-13127"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0904.gif" webstripperlinkwas="figs/jsp_0904.gif"></div>
<h4 class="objtitle">Figure 9-4. Servlets using SingleThreadModel for a server-managed connection pool</h4>



<a name="ch09-15-fm2xml"></a>
<h3 class="sect2">9.4.3. Connection Pooling</h3>

<p>For a complicated servlet, creating a <a name="INDEX-1699"></a><a name="INDEX-1700"></a><a name="INDEX-1701"></a>connection pool is the ideal approach.
With a connection pool, we can duplicate only the resources we need
to duplicate (that is, <tt class="literal">Connection </tt>objects), rather
than the entire servlet. A connection pool can also intelligently
manage the size of the pool and make sure each connection remains
valid. A number of connection pool packages are currently available.
Some, such as the DbConnectionBroker that is freely available from
Java Exchange at <a href="../../../../../../../javaexchange.com/">http://javaexchange.com</a><a name="INDEX-1702"></a><a name="INDEX-1703"></a><a name="INDEX-1704"></a>, work by creating an object that dispenses
connections and connection IDs on request. Others, such as the pool
drivers package available from WebLogic at <a href="../../../../../../../www.weblogic.com/">http://www.weblogic.com</a><a name="INDEX-1705"></a><a name="INDEX-1706"></a><a name="INDEX-1707"></a>, implement a new
<a name="INDEX-1708"></a>
JDBC driver that handles a pool of connections to another JDBC
driver. Using a pooling driver like this is the easiest way to
implement connection pooling in your servlets. Pooling drivers,
however, have a little more operational overhead than standard
drivers because every JDBC class needs to be wrapped by another
class. This is transparent to the programmer and won't make
much of a difference with most Java applications--but with a
high-performance, high-volume servlet application, every little
performance gain helps.
</p>

<p>
<a href="#ch09-16443">Example 9-6</a> demonstrates a simple connection pooling
system. A number of connections are created at startup and are handed
out to methods as needed. If all the connections are in use, the
servlet creates a new one. While our
<tt class="literal">ConnectionPool</tt> class is fully functional,
mission-critical deployments might benefit from one of the more
complete third party packages.
</p>

<a name="ch09-16443"></a>
<div class="example">
<h4 class="objtitle">Example 9-6. The ConnectionPool class </h4>
<blockquote>
<pre class="programlisting">import java.sql.*;
import java.util.*;

public class ConnectionPool {
  private Hashtable connections;
  private int increment;
  private String dbURL, user, password;
  
  public ConnectionPool(String dbURL,
                        String user,
                        String password,
                        String driverClassName,
                        int initialConnections,
                        int increment) 
          throws SQLException, ClassNotFoundException {
 
    // Load the specified driver class
    Class.forName(driverClassName);

    this.dbURL = dbURL;
    this.user = user;
    this.password = password;
    this.increment = increment;

    connections = new Hashtable();
 
    // Put our pool of Connections in the Hashtable
    // The FALSE value indicates they're unused
    for(int i = 0; i &lt; initialConnections; i++) {
      connections.put(DriverManager.getConnection(dbURL, user, password),
                      Boolean.FALSE);
    }
  }

  public Connection getConnection() throws SQLException {
    Connection con = null;

    Enumeration cons = connections.keys();

    synchronized (connnections) {
      while(cons.hasMoreElements()) {
        con = (Connection)cons.nextElement();

        Boolean b = (Boolean)connections.get(con);
        if (b == Boolean.FALSE) {
          // So we found an unused connection.
          // Test its integrity with a quick setAutoCommit(true) call.
          // For production use, more testing should be performed,
          // such as executing a simple query.
          try {
            con.setAutoCommit(true);
          }
          catch(SQLException e) {
            // Problem with the connection, replace it.
            con = DriverManager.getConnection(dbURL, user, password);
          }
          // Update the Hashtable to show this one's taken
          connections.put(con, Boolean.TRUE);
          // Return the connection
          return con;
        }
      }
    }
  
    // If we get here, there were no free connections.
    // We've got to make more.
    for(int i = 0; i &lt; increment; i++) {
      connections.put(DriverManager.getConnection(dbURL, user, password),
                      Boolean.FALSE); 
    }		
 
    // Recurse to get one of the new connections.
    return getConnection();
  }

  public void returnConnection(Connection returned) {
    Connection con;
    Enumeration cons = connections.keys();
    while (cons.hasMoreElements()) {
      con = (Connection)cons.nextElement();
      if (con == returned) {
        connections.put(con, Boolean.FALSE);
        break;
      }
    }
  }
}</pre>
</blockquote>
</div>

<p>The <tt class="literal">ConnectionPool</tt> class maintains a
<tt class="literal">Hashtable</tt>, using <tt class="literal">Connection</tt>
objects as keys and <tt class="literal">Boolean</tt> objects as stored
values. The <tt class="literal">Boolean</tt> value indicates whether a
connection is in use. A program calls the
<tt class="literal">getConnection()</tt><a name="INDEX-1709"></a><a name="INDEX-1710"></a><a name="INDEX-1711"></a>
method of <tt class="literal">ConnectionPool</tt> to be assigned a
<tt class="literal">Connection</tt><a name="INDEX-1712"></a><a name="INDEX-1713"></a> object it can use; it calls
<tt class="literal">returnConnection()</tt><a name="INDEX-1714"></a><a name="INDEX-1715"></a><a name="INDEX-1716"></a>
to give the connection back to the pool. This is a fairly simple
model of a
<a name="INDEX-1717"></a>connection pool. For deployment, you
probably want something that does a better job of maintaining the
quality of the pool and does more verification of integrity than a
simple call to
<tt class="literal">setAutoCommit()</tt><a name="INDEX-1718"></a><a name="INDEX-1719"></a>
.
</p>

<p>
<a href="#ch09-37564">Example 9-7</a> shows a revised version of the order
processing servlet that uses the pooling class.
</p>

<a name="ch09-37564"></a>
<div class="example">
<h4 class="objtitle">Example 9-7. Connection pooling transaction servlet </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.sql.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class OrderHandlerPool extends HttpServlet {
  private ConnectionPool pool;

  public void init(ServletConfig config) throws ServletException {
    super.init(config);
    try {
      pool = new ConnectionPool("jdbc:oracle:oci7:orders", "user", "passwd", 
                                "oracle.jdbc.driver.OracleDriver", 10, 5);
    }
    catch (Exception e) {
      throw new UnavailableException(this, "Couldn't create connection pool");
    }    
  }

  public void doPost(HttpServletRequest req, HttpServletResponse res)
                                throws ServletException, IOException {
    Connection con = null;

    res.setContentType("text/plain");
    PrintWriter out = res.getWriter(); 

    try {
      con = pool.getConnection();

      // Turn on transactions
      con.setAutoCommit(false);

      Statement stmt = con.createStatement();
      stmt.executeUpdate(
        "UPDATE INVENTORY SET STOCK = (STOCK - 10) WHERE PRODUCTID = 7");
      stmt.executeUpdate(
        "UPDATE SHIPPING SET SHIPPED = (SHIPPED + 10) WHERE PRODUCTID = 7");

      chargeCard();  // method doesn't actually exist...

      con.commit();
      out.println("Order successful!  Thanks for your business!");
    }
    catch (Exception e) {
      // Any error is grounds for rollback
      try { 
        con.rollback();
      }
      catch (Exception ignored) { } 
      out.println("Order failed. Please contact technical support.");
    }
    finally {
      if (con != null) pool.returnConnection(con);
    }
  }
}</pre>
</blockquote>
</div>

<a name="INDEX-1720"></a>
<a name="INDEX-1721"></a>
<a name="INDEX-1722"></a>


<a name="ch09-16-fm2xml"></a>
<h3 class="sect2">9.4.4. Connections as Part of a Session</h3>

<p>Session tracking, which we examined in detail back in <a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch07_01.htm">Chapter 7, "Session Tracking"</a>, gives us another way of handling
transactions. Using sessions, we can create or allocate a dedicated
database connection for individual users of a web site or intranet
application. <a href="#ch09-14394">Example 9-8</a> demonstrates by showing a
<tt class="literal">ConnectionPer-Client</tt> servlet that associates a
<a name="INDEX-1723"></a>unique
<tt class="literal">Connection</tt> with each client
<tt class="literal">HttpSession</tt>. It wraps the
<tt class="literal">Connection</tt> with a
<tt class="literal">ConnectionHolder</tt> that is responsible for managing
the connection's life cycle.
</p>

<a name="ch09-14394"></a>
<div class="example">
<h4 class="objtitle">Example 9-8. Associating a connection with a session </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.sql.*;
import javax.servlet.*;
import javax.servlet.http.*;

class ConnectionHolder implements HttpSessionBindingListener {
  private Connection con = null;

  public ConnectionHolder(Connection con) {
    // Save the Connection
    this.con = con;
    try {
      con.setAutoCommit(false);  // transactions can extend between web pages!
    }
    catch(SQLException e) {
      // Perform error handling
    }
  } 
 
  public Connection getConnection() {
    return con;  // return the cargo
  }

  public void valueBound(HttpSessionBindingEvent event) {
    // Do nothing when added to a Session
  }
 
  public void valueUnbound(HttpSessionBindingEvent event) {
    // Roll back changes when removed from a Session 
    // (or when the Session expires)
    try {
      if (con != null) {
        con.rollback();  // abandon any uncomitted data
        con.close();
      }
    }
    catch (SQLException e) {
      // Report it
    }
  }
}

/* Actual Servlet */

public class ConnectionPerClient extends HttpServlet { 

  public void init(ServletConfig config) throws ServletException {
    super.init(config);
    try {
      Class.forName("oracle.jdbc.driver.OracleDriver");
    }
    catch (ClassNotFoundException e) { 
      throw new UnavailableException(this, "Couldn't load OracleDriver");
    }    
  }

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();
          
    HttpSession session = req.getSession(true);

    // Try getting the connection holder for this client
    ConnectionHolder holder = 
      (ConnectionHolder) session.getValue("servletapp.connection");

    // Create (and store) a new connection and holder if necessary
    if (holder == null) {
      try {       
        holder = new ConnectionHolder(DriverManager.getConnection(
          "jdbc:oracle:oci7:ordersdb", "user", "passwd"));
        session.putValue("servletapp.connection", holder);
      }
      catch (SQLException e) { 
        getServletContext().log(e, "Couldn't get db connection");
      }          
    } 
    
    // Get the actual connection from the holder
    Connection con = holder.getConnection();
  
    // Now use the connection
    try {
      Statement stmt = con.createStatement();
      stmt.executeUpdate(
        "UPDATE INVENTORY SET STOCK = (STOCK - 10) WHERE PRODUCTID = 7");
      stmt.executeUpdate(
        "UPDATE SHIPPING SET SHIPPED = (SHIPPED + 10) WHERE PRODUCTID = 7");

      // Charge the credit card and commit the transaction in another servlet
      res.sendRedirect(res.encodeRedirectUrl("/servlet/CreditCardHandler"));
    }
    catch (Exception e) {
      // Any error is grounds for rollback
      try { 
        con.rollback();
        session.removeValue("servletapp.connection");
      }
      catch (Exception ignored) { } 
      out.println("Order failed. Please contact technical support.");
    }
  }
}</pre>
</blockquote>
</div>

<p>Rather than directly binding a connection to the session, we've
created a simple holder class that implements the
<tt class="literal">HttpSessionBindingListner</tt> interface. We do this
because <a name="INDEX-1724"></a><a name="INDEX-1725"></a>database connections are the most
limited resource in a JDBC application and we want to make sure that
they will be released properly when no longer needed. The wrapper
class also allows us to rollback any uncommitted changes. If a user
leaves our hypothetical online shopping system before checking out,
her transaction is rolled back when the session expires.
</p>

<p>Storing connections in sessions requires careful analysis of your
application's needs. Most low-end and mid-range database
servers can
<a name="INDEX-1726"></a>max out at about 100 connections; desktop
databases like Microsoft Access saturate even more quickly.
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch09_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch09_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">9.3. Reusing Database Objects</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">9.5. Advanced JDBC Techniques</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
