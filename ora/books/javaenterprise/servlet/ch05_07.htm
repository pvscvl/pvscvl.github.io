<html>
<head>
<title>When Things Go Wrong (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="When Things Go Wrong">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_01.htm">Chapter 5: Sending HTML Information</a></td><td align="right" valign="top" width="172"><a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch06_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">5.7. When Things Go Wrong</h2>

<p>All right, let's face it. <a name="INDEX-1035"></a><a name="INDEX-1036"></a><a name="INDEX-1037"></a>Sometimes things go wrong. Sometimes the
dog bites, and sometimes the bee stings. There are any number of
possible causes: bad parameters, missing resources, and (gasp!)
actual bugs. The point here is that a servlet has to be prepared for
problems, both expected and unexpected. There are two points of
concern when things go wrong:
</p>

<ul>
<li>
<p>	Limiting damage to the server</p>
</li>
<li>
<p>	Properly informing the client</p>
</li>
</ul>

<p>Because servlets are written in Java, the potential damage they can
cause to their server is greatly minimized. A server can safely embed
servlets (even within its process), just as a web browser can safely
embed downloaded applets. This safety is built on
<a name="INDEX-1038"></a><a name="INDEX-1039"></a>Java's security features,
including the use of protected memory, exception handling, and
security managers.
<a name="INDEX-1040"></a><a name="INDEX-1041"></a>Java's memory protection
guarantees that servlets cannot accidentally (or intentionally)
access the server's internals.
<a name="INDEX-1042"></a><a name="INDEX-1043"></a>Java's exception handling lets a
server catch every exception raised by a servlet. Even if a servlet
accidentally <a name="INDEX-1044"></a><a name="INDEX-1045"></a>divides by zero or calls a method on a null
object, the server can continue to function. Java's security
manager mechanism provides a way for servers to place untrusted
servlets in a <a name="INDEX-1046"></a>
sandbox, limiting their abilities and keeping them from intentionally
causing problems.
</p>

<p>You should be aware that trusted servlets executing outside a
security manager's sandbox are given abilities that could
potentially cause damage to the server. For example, a servlet can
overwrite the server's file space or even call
<tt class="literal">System.exit()</tt>. It is also true that a trusted
servlet should never cause damage except by accident, and it's
hard to accidentally call <tt class="literal">System.exit()</tt>. Still, if
it's a concern, even trusted servlets can be (and often are)
run inside a fairly lenient but sanity-checking security manager.
</p>

<p>Properly describing a problem to the client cannot be handled by Java
language technology alone. There are many things to consider:
</p>

<dl>
<dt>
<b><em class="emphasis">How much to tell the client?</em></b>
</dt>
<dd>
<p>Should the servlet send a generic status code error page, a prose
explanation of the problem, or (in the case of a thrown exception) a
detailed stack trace? What if the servlet is supposed to return
nontextual content, such as an image?
</p>
</dd>

<dt>
<b><em class="emphasis">How to record the problem?</em>  </b>
</dt>
<dd>
<p>Should it be saved to a file, written to the server log, sent to the
client, or ignored?
</p>
</dd>

<dt>
<b><em class="emphasis">How to recover?</em>  </b>
</dt>
<dd>
<p>Can the same servlet instance handle subsequent requests? Or is the
servlet corrupted, meaning that it needs to be reloaded?
</p>
</dd>

</dl>

<p>The answers to these questions depend on the servlet and its intended
use, and they should be addressed for each servlet you write on a
case-by-case basis. How you handle errors is up to you and should be
based on the level of reliability and robustness required for your
servlet. What we'll look at next is an overview of the servlet
error-handling mechanisms that you can use to implement whatever
policy you select.
</p>

<a name="ch05-13-fm2xml"></a>
<h3 class="sect2">5.7.1. Status Codes</h3>

<p>
<a name="INDEX-1047"></a><a name="INDEX-1048"></a>The
<a name="INDEX-1049"></a><a name="INDEX-1050"></a>simplest (<a name="INDEX-1051"></a><a name="INDEX-1052"></a><a name="INDEX-1053"></a>and
arguably best) way for a servlet to report an error is to use the
<tt class="literal">sendError()</tt><a name="INDEX-1054"></a><a name="INDEX-1055"></a>
method to set the appropriate 400 series or 500 series status code.
For example, when the servlet is asked to return a file that does not
exist, it can return <tt class="literal">SC_NOT_FOUND</tt>. When it is
asked to do something beyond its capabilities, it can return
<tt class="literal">SC_NOT_IMPLEMENTED</tt>. And when the entirely
unexpected happens, it can return
<tt class="literal">SC_INTERNAL_SERVER_ERROR</tt>.
</p>

<p>By using <tt class="literal">sendError()</tt> to set the status code, a
servlet provides the server an opportunity to give the response
special treatment. For example, some servers, such as the Java Web
Server, replace the servlet's response body with a
<a name="INDEX-1056"></a><a name="INDEX-1057"></a><a name="INDEX-1058"></a>
server-specific page that explains the error. If the error is such
that a servlet ought to provide its own explanation to the client in
the response body, it can set the status code with
<tt class="literal">setStatus()</tt><a name="INDEX-1059"></a><a name="INDEX-1060"></a>
and send the appropriate body--which could be text based, a
generated image, or whatever is appropriate.
</p>

<p>A servlet must be careful to catch and handle any errors before it
sends any part of its response body. As you probably recall (because
we've mentioned it several times), HTTP specifies that the
status code and HTTP headers must be sent before the response body.
Once you've sent even one character of a response body, it may
be too late to change your status code or your HTTP headers. The easy
way to guarantee you don't find yourself in this "too
late" situation is to send your content all at once when the
servlet is done processing, using an
<tt class="literal">ByteArrayOutputStream</tt><a name="INDEX-1061"></a><a name="INDEX-1062"></a>
buffer or HTML generation package, as shown earlier in this chapter.
</p>


<a name="ch05-14-fm2xml"></a>
<h3 class="sect2">5.7.2. Logging</h3>

<p>
<a name="INDEX-1063"></a><a name="INDEX-1064"></a><a name="INDEX-1065"></a>Servlets have the ability to write
their actions and their errors to a log file using the
<tt class="literal">log()</tt><a name="INDEX-1066"></a><a name="INDEX-1067"></a> method:
</p>

<blockquote>
<pre class="programlisting">public void ServletContext.log(String msg)
public void ServletContext.log(Exception e, String msg)</pre>
</blockquote>

<p>The single-argument method writes the given message to a servlet log,
which is usually an event log file. The two-argument version writes
the given message and exception's stack trace to a servlet log.
Notice the nonstandard placement of the optional
<tt class="literal">Exception</tt> parameter as the first parameter instead
of the last for this method. For both methods, the output format and
location of the log are server-specific.
</p>

<p>The <tt class="literal">GenericServlet </tt>class also provides a
<tt class="literal">log()</tt> method:
</p>

<blockquote>
<pre class="programlisting">public void GenericServlet.log(String msg)</pre>
</blockquote>

<p>This is another version of the <tt class="literal">ServletContext</tt>
method, moved to <tt class="literal">GenericServlet</tt> for convenience.
This method allows a servlet to call simply:
</p>

<blockquote>
<pre class="programlisting">log(msg); </pre>
</blockquote>

<p>to write to the servlet log. Note, however, that
<tt class="literal">GenericServlet</tt> does not provide the two-argument
version of <tt class="literal">log()</tt>. The absence of this method is
probably an oversight, to be rectified in a future release. For now,
a servlet can perform the equivalent by calling:
</p>

<blockquote>
<pre class="programlisting">getServletContext().log(e, msg);</pre>
</blockquote>

<p>The <tt class="literal">log()</tt> method aids debugging by providing a way
to track a servlet's actions. It also offers a way to save a
complete description of any errors encountered by the servlet. The
description can be the same as the one given to the client, or it can
be more exhaustive and detailed.
</p>

<p>Now we can go back and improve <tt class="literal">ViewFile</tt> further,
so that it uses <tt class="literal">log()</tt> to record on the server when
requested files do not exist, while returning a simple "404 Not
Found" page to the client:
</p>

<blockquote>
<pre class="programlisting">// Return the file
try {
  ServletUtils.returnFile(file, out);
}
catch (FileNotFoundException e) {
  log("Could not find file: " + e.getMessage());
  res.sendError(res.SC_NOT_FOUND);
}</pre>
</blockquote>

<p>For more complicated errors, a servlet can log the complete
<a name="INDEX-1068"></a><a name="INDEX-1069"></a>stack trace, as shown here:
</p>

<blockquote>
<pre class="programlisting">// Return the file
try {
  ServletUtils.returnFile(file, out);
}
catch (FileNotFoundException e) {
  log("Could not find file: " + e.getMessage());
  res.sendError(res.SC_NOT_FOUND);
}
catch (IOException e) {
  getServletContext().log(e, "Problem sending file");
  res.sendError(res.SC._INTERNAL_SERVER_ERROR);
}</pre>
</blockquote>


<a name="ch05-15-fm2xml"></a>
<h3 class="sect2">5.7.3. Reporting</h3>

<p>In addition to logging errors and exceptions for the server
administrator, during development it's often convenient to
print a full description of the <a name="INDEX-1070"></a><a name="INDEX-1071"></a><a name="INDEX-1072"></a>problem along with a stack trace.
Unfortunately, an exception cannot return its
<a name="INDEX-1073"></a><a name="INDEX-1074"></a>stack trace as a
<tt class="literal">String--</tt>it can only print its stack trace to a
<tt class="literal">PrintStream</tt> or <tt class="literal">PrintWriter</tt>. To
retrieve a stack trace as a <tt class="literal">String</tt>, we have to
jump through a few hoops. We need to let the
<tt class="literal">Exception</tt> print to a special
<tt class="literal">PrintWriter</tt> built around a
<tt class="literal">ByteArrayOutputStream</tt>. That
<tt class="literal">ByteArrayOutputStream</tt> can catch the output and
convert it to a <tt class="literal">String</tt>. The
<tt class="literal">com.oreilly.servlet.ServletUtils</tt><a name="INDEX-1075"></a><a name="INDEX-1076"></a><a name="INDEX-1077"></a><a name="INDEX-1078"></a>
class has a
<tt class="literal">getStackTraceAsString()</tt><a name="INDEX-1079"></a><a name="INDEX-1080"></a>
method that does just this:
</p>

<blockquote>
<pre class="programlisting">public static String getStackTraceAsString(Exception e) {
  ByteArrayOutputStream bytes = new ByteArrayOutputStream();
  PrintWriter writer = new PrintWriter(bytes, true);
  e.printStackTrace(writer);
  return bytes.toString();
}</pre>
</blockquote>

<p>Here's how <tt class="literal">ViewFile</tt> can provide information
that includes an <tt class="literal">IOException</tt><a name="INDEX-1081"></a><a name="INDEX-1082"></a> stack trace:
</p>

<blockquote>
<pre class="programlisting">// Return the file
try {
  ServletUtils.returnFile(file, out);
}
catch (FileNotFoundException e) {
  log("Could not find file: " + e.getMessage());
  res.sendError(res.SC_NOT_FOUND);
}
catch (IOException e) {
  getServletContext().log(e, "Problem sending file");
  res.sendError(res.SC_INTERNAL_SERVER_ERROR, 
                ServletUtils.getStackTraceAsString(e));
}</pre>
</blockquote>

<p>The output for a sample exception is shown in <a href="#ch05-31881">Figure 5-3</a>.
</p>

<a name="ch05-31881"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_0503.gif" webstripperlinkwas="figs/jsp_0503.gif"></div>
<h4 class="objtitle">Figure 5-3. Keeping the client well informed</h4>


<a name="ch05-16-fm2xml"></a>
<h3 class="sect2">5.7.4. Exceptions</h3>

<p>As we said before, any exception that is thrown but not caught by a
servlet is caught by its server. How the server handles the exception
is server-dependent: it may pass the client the message and the
<a name="INDEX-1083"></a><a name="INDEX-1084"></a>stack trace, or it may not. It may
automatically log the exception, or it may not. It may even call
<tt class="literal">destroy()</tt> on the servlet and reload it, or it may
not.
</p>

<p>Servlets designed and developed to run with a particular server can
optimize for that server's behavior. A servlet designed to
interoperate across several servers cannot expect any particular
exception handling on the part of the server. If such a servlet
requires special exception handling, it must catch its own exceptions
and handle them accordingly.
</p>

<p>There are some types of exceptions a servlet has no choice but to
catch itself. A servlet can propagate to its server only those
exceptions that subclass <tt class="literal">IOException</tt>,
<tt class="literal">ServletException</tt>, or
<tt class="literal">RuntimeException</tt>. The reason has to do with method
signatures. The
<tt class="literal">service()</tt><a name="INDEX-1085"></a><a name="INDEX-1086"></a>
method of <tt class="literal">Servlet</tt> declares in its
<tt class="literal">throws</tt> clause that it throws
<tt class="literal">IOException</tt> and
<tt class="literal">ServletException</tt> exceptions. For it (or the
<tt class="literal">doGet()</tt> and <tt class="literal">doPost()</tt> methods it
calls) to throw and not catch anything else causes a compile time
error. The <tt class="literal">RuntimeException</tt> is a special case
exception that never needs to be declared in a
<tt class="literal">throws</tt><a name="INDEX-1087"></a> clause. A common example is a
<tt class="literal">NullPointerException</tt>.
</p>

<p>The <tt class="literal">init()</tt> and <tt class="literal">destroy()</tt>
methods have their own signatures as well. The
<tt class="literal">init()</tt> method declares that it throws only
<tt class="literal">ServletException</tt> exceptions, and
<tt class="literal">destroy()</tt> declares that it throws no exceptions.
</p>

<p>
<tt class="literal">ServletException</tt><a name="INDEX-1088"></a><a name="INDEX-1089"></a>
is a subclass of <tt class="literal">java.lang.Exception</tt> that is
specific to servlets--the class is defined in the
<tt class="literal">javax.servlet</tt> package. This exception is thrown to
indicate a general servlet problem. It has the same constructors as
<tt class="literal">java.lang.Exception</tt>: one that takes no arguments
and one that takes a single message string. Servers catching this
exception may handle it any way they see fit.
</p>

<p>The <tt class="literal">javax.servlet</tt> package defines one subclass of
<tt class="literal">ServletException</tt>,
<tt class="literal">UnavailableException</tt>, although you can, of course,
add your own. This exception indicates a servlet is unavailable,
either temporarily or permanently. Servers (services) that catch an
<tt class="literal">UnavailableException</tt> are expected to behave as
described in the Servlet API documentation:
</p>

<p>Servlets may report this exception at any time, and
the network service running the servlet should behave
appropriately. There are two types of unavailability, and
sophisticated services will deal with these differently:</p>

<p>
<em class="emphasis">Permanent unavailability.</em> The servlet will
not be able to handle client requests until some administrative action
is taken to correct a servlet problem. For example, the servlet might
be misconfigured, or the state of the servlet may be corrupted. Well
written servlets will log both the error and the corrective action
which an administrator must perform to let the servlet become
available.</p>

<p>
<em class="emphasis">Temporary unavailability.</em> The servlet cannot handle requests at this moment due to a system-wide problem. For example, a third-tier server might not be accessible, or there may be insufficient memory or disk storage to handle requests. The problem may be self-correcting, such as those due to excessive load, or corrective action may need to be taken by an administrator.</p>

<p>Network services may safely treat both types of exceptions as "permanent," but good treatment of temporary unavailability leads to more robust network services. Specifically, requests to the servlet might be blocked (or otherwise deferred) for a servlet-suggested amount of time, rather than being rejected until the service itself restarts.</p>

<p>
<tt class="literal">UnavailableException</tt> has two constructors:</p>

<blockquote>
<pre class="programlisting">javax.servlet.UnavailableException(Servlet servlet, String msg)
javax.servlet.UnavailableException(int seconds, Servlet servlet, String msg)</pre>
</blockquote>

<p>The two-argument constructor creates a new exception that indicates
the given servlet is permanently unavailable, with an explanation
given by <tt class="literal">msg</tt>. The three-argument version creates a
new exception that indicates the given servlet is temporarily
unavailable, with an explanation given by <tt class="literal">msg</tt>. The
duration of its unavailability is given by
<tt class="literal">seconds</tt>. This time is only an estimate. If no
estimate can be made, a nonpositive value may be used. Notice the
nonstandard placement of the optional <tt class="literal">seconds</tt>
parameter as the first parameter instead of the last. This may be
changed in an upcoming release.
<tt class="literal">UnavailableException</tt> provides the
<tt class="literal">isPermanent()</tt>, <tt class="literal">getServlet()</tt>,
and <tt class="literal">getUnavailableSeconds()</tt> methods to retrieve
information about an exception.
</p>


<a name="ch05-17-fm2xml"></a>
<h3 class="sect2">5.7.5. Knowing When No One's Listening</h3>

<p>Sometimes clients
<a name="INDEX-1090"></a>hang up on servlets. Sure, it's
rude, but it happens. Sometimes the client makes a mistake and goes
to the wrong page. Sometimes the servlet takes too long to respond.
Remember, all the while a servlet is preparing its response, the user
is being tempted by the browser's big, glowing <b class="emphasis-bold">Stop</b><a name="INDEX-1091"></a> button that is just begging to be
pushed. You may be wondering, just what happens to the servlet once
that button is pushed?
</p>

<p>Unfortunately, a servlet is not given any immediate indication that
the user has pressed the <b class="emphasis-bold">Stop</b>
button--there is no interrupt that tells it to stop processing.
The servlet discovers the client has stopped the request only when it
tries to send output to the nonexistent client, at which point an
error condition occurs.
</p>

<p>A servlet that sends information using a
<tt class="command">ServletOutputStream</tt> sees an
<tt class="command">IOException</tt> when it tries to write output. For
servers that buffer their output, the <tt class="command">IOException</tt>
is thrown when the buffer fills up and its contents are flushed.
</p>

<p>Because an <tt class="literal">IOException</tt> may be thrown any time a
servlet tries to output, a well-written servlet frees its resources
in a <tt class="literal">finally</tt> block. (The
<tt class="literal">finally</tt><a name="INDEX-1092"></a> block is an optional part of a
<tt class="literal">try</tt>/<tt class="literal">catch</tt>/<tt class="literal">finally</tt>
construct. It comes after zero or more <tt class="literal">catch</tt>
blocks, and its code is executed once regardless of how the code in
the <tt class="literal">try</tt><a name="INDEX-1093"></a> block executes.) Here's a version
of the <tt class="literal">returnFile()</tt> method from the
<tt class="literal">View-File</tt> servlet that uses a
<tt class="literal">finally</tt> block to guarantee the closure of its
<tt class="literal">FileInputStream</tt>:
</p>

<blockquote>
<pre class="programlisting">void returnFile(String filename, OutputStream out)
                         throws FileNotFoundException, IOException {
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(filename);
    byte[] buf = new byte[4 * 1024];  // 4K buffer
    int bytesRead;
    while ((bytesRead = fis.read(buf)) != -1) {
      out.write(buf, 0, bytesRead);
    }
  }
  finally {
    if (fis != null) fis.close();
  }
}</pre>
</blockquote>

<p>The addition of a <tt class="literal">finally</tt> block does not change
the fact that this method propagates all exceptions to its caller,
but it does guarantee that, before that propagation, the method gets
a chance to close the open <tt class="literal">FileInputStream</tt>.
</p>

<p>A servlet sending character data using a
<tt class="literal">PrintWriter</tt> doesn't get an
<tt class="literal">IOException</tt> when it tries to write output, because
the methods of <tt class="literal">PrintWriter</tt> never throw exceptions.
Instead, a servlet that sends character data has to call the
<tt class="literal">checkError()</tt> method of
<tt class="literal">PrintWriter</tt>. This method flushes the output and
returns a <tt class="literal">boolean</tt> that indicates if there was a
problem writing to the underlying <tt class="literal">OutputStream</tt>. It
returns <tt class="command">true</tt> if the client has stopped the
request.
</p>

<p>A long-running servlet should call <tt class="literal">checkError()</tt>
regularly to determine if it can halt processing early. If there
hasn't been any output since the last check, a servlet can send
filler content. For example:
</p>

<blockquote>
<pre class="programlisting">out.println("&lt;H2&gt;Here's the solution for your differential equation:&lt;/H2&gt;"); if (out.checkError()) return;

// Preliminary calculation here
out.print(" "); // filler content, extra whitespace is ignored in HTML  
if (out.checkError()) return;
 
// Additional calculation here</pre>
</blockquote>

<p>It's important to note that a server is not required to throw
an <tt class="literal">IOException</tt> or set the error flag of the
<tt class="literal">PrinWriter</tt> after the client disconnects. A server
may elect to let the response run to completion with its output
ignored. Generally this does not cause a problem, but it does mean
that a servlet running inside such a server should always have a set
end point and should not be written to continuously loop until the
user hits <b class="emphasis-bold">Stop</b>. <a name="INDEX-1094"></a><a name="INDEX-1095"></a><a name="INDEX-1096"></a><a name="INDEX-1097"></a><a name="INDEX-1098"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch06_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.6. HTTP Headers</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">6. Sending Multimedia Content</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
