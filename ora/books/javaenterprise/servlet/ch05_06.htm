<html>
<head>
<title>HTTP Headers (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="HTTP Headers">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_01.htm">Chapter 5: Sending HTML Information</a></td><td align="right" valign="top" width="172"><a href="ch05_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">5.6. HTTP Headers</h2>

<p>A servlet can set HTTP headers to provide extra information about its
response. As we said in <a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch04_01.htm">Chapter 4, "Retrieving Information"</a>, a full
discussion of all the possible HTTP 1.0 and HTTP 1.1 headers is
beyond the scope of this book. <a href="#ch05-10232">Table 5-2</a> lists the
HTTP headers that are most often set by servlets as a part of a
response.
</p>

<a name="ch05-10232"></a>
<h4 class="objtitle">Table 5-2. HTTP Response Headers</h4>
<table border="1">



<tr>
<th>
<p>Header</p>
</th>
<th>
<p>Usage</p>
</th>
</tr>


<tr>
<td>
<p>
<tt class="literal">Cache-Control</tt><a name="INDEX-985"></a><a name="INDEX-986"></a>
</p>
</td>
<td>
<p>
<a name="INDEX-987"></a><a name="INDEX-988"></a><a name="INDEX-989"></a>Specifies any special treatment a caching
system should give to this document. The most common values are
<tt class="literal">no-cache</tt> (to indicate this document should not be
cached), <tt class="literal">no-store</tt> (to indicate this document
should not be cached or even stored by a proxy server, usually due to
its sensitive contents), and
<tt class="literal">max-age=</tt><em class="emphasis">seconds</em> (to indicate
how long before the document should be considered stale). This header
was introduced in HTTP 1.1.
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">Pragma</tt><a name="INDEX-990"></a><a name="INDEX-991"></a>
</p>
</td>
<td>
<p>The HTTP 1.0 equivalent of <tt class="literal">Cache-control</tt>, with
<tt class="literal">no-cache</tt> as its only possible value.
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">Connection</tt><a name="INDEX-992"></a><a name="INDEX-993"></a>
</p>
</td>
<td>
<p>Used to indicate whether the server is willing to maintain an open
(persistent) connection to the client. If so, its value is set to
<tt class="literal">keep-alive</tt>. If not, its value is set to
<tt class="literal">close</tt>. Most web servers handle this header on
behalf of their servlets, automatically setting its value to
<tt class="literal">keep-alive</tt> when a servlet sets its
<tt class="literal">Content-Length</tt> header.
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">Retry-After</tt><a name="INDEX-994"></a><a name="INDEX-995"></a>
</p>
</td>
<td>
<p>Specifies a time when the server can again handle requests, used with
the <tt class="literal">SC_SERVICE_UNAVAILABLE</tt> status code. Its value
is either an <tt class="literal">int</tt> that represents the number of
seconds or a date string that represents an actual time.
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">Expires</tt><a name="INDEX-996"></a><a name="INDEX-997"></a>
</p>
</td>
<td>
<p>Specifies a time when the document may change or when its information
will become invalid. It implies that it is unlikely the document will
change before that time.
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">Location</tt><a name="INDEX-998"></a><a name="INDEX-999"></a>
</p>
</td>
<td>
<p>Specifies a new location of a <a name="INDEX-1000"></a>document, usually used with the status
codes <tt class="literal">SC_CREATED</tt>,
<tt class="literal">SC_MOVED_PERMANENTLY</tt>, and
<tt class="literal">SC_MOVED_TEMPORARILY</tt>. Its value must be a fully
qualified URL (including "<tt class="literal">http://</tt>").
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">WWW-Authenticate</tt><a name="INDEX-1001"></a><a name="INDEX-1002"></a>
</p>
</td>
<td>
<p>Specifies the authorization scheme and the realm of authorization
required by the client to access the requested URL. Used with the
status code <tt class="literal">SC_UNAUTHORIZED</tt>.
</p>
</td>
</tr>
<tr>
<td>
<p>
<tt class="literal">Content-Encoding</tt><a name="INDEX-1003"></a><a name="INDEX-1004"></a>
</p>
</td>
<td>
<p>Specifies the scheme used to encode the response body. Possible
values are <tt class="literal">gzip</tt> (or <tt class="literal">x-gzip</tt>) and
<tt class="literal">compress</tt> (or <tt class="literal">x-compress</tt>).
Multiple encodings should be represented as a comma-separated list in
the order in which the encodings were applied to the data.
</p>
</td>
</tr>

</table>

<a name="ch05-10-fm2xml"></a>
<h3 class="sect2">5.6.1. Setting an HTTP Header</h3>

<p>The
<tt class="literal">HttpServletResponse</tt><a name="INDEX-1005"></a><a name="INDEX-1006"></a> class provides a number
of methods to assist servlets in setting HTTP response headers. Use
<tt class="literal">setHeader()</tt><a name="INDEX-1007"></a><a name="INDEX-1008"></a>
to set the value of a header:
</p>

<blockquote>
<pre class="programlisting">public void HttpServletResponse.setHeader(String name, String value)</pre>
</blockquote>

<p>This method sets the value of the named header as a
<tt class="literal">String</tt>. The name is case insensitive, as it is for
all these methods. If the header had already been set, the new value
overwrites the previous one. Headers of all types can be set with
this method.
</p>

<p>If you need to specify a time stamp for a header, you can use
<tt class="literal">setDateHeader()</tt><a name="INDEX-1009"></a><a name="INDEX-1010"></a>
:
</p>

<blockquote>
<pre class="programlisting">public void HttpServletResponse.setDateHeader(String name, long date)</pre>
</blockquote>

<p>This method sets the value of the named header to a particular date
and <a name="INDEX-1011"></a>time. The method accepts the date value as
a <tt class="literal">long</tt> that represents the number of milliseconds
since the epoch (midnight, January 1, 1970 GMT). If the header has
already been set, the new value overwrites the previous one.
</p>

<p>Finally, you can use
<tt class="literal">setIntHeader()</tt><a name="INDEX-1012"></a><a name="INDEX-1013"></a>
to specify an integer value for a header:
</p>

<blockquote>
<pre class="programlisting">public void HttpServletResponse.setIntHeader(String name, int value)</pre>
</blockquote>

<p>This method sets the value of the named header as an
<tt class="literal">int</tt>. If the header had already been set, the new
value overwrites the previous one.
</p>

<p>The
<tt class="literal">containsHeader()</tt><a name="INDEX-1014"></a><a name="INDEX-1015"></a>
method provides a way to check if a header already exists:
</p>

<blockquote>
<pre class="programlisting">public boolean HttpServletResponse.containsHeader(String name)</pre>
</blockquote>

<p>This method returns <tt class="literal">true</tt> if the named header has
already been set, <tt class="literal">false</tt> if not.
</p>

<p>In addition, the HTML 3.2 specification defines an alternate way
to set header values using the <tt class="literal">&lt;META
HTTP-EQUIV&gt;</tt> tag inside the HTML page itself:
<a name="INDEX-1016"></a><a name="INDEX-1017"></a>
</p>

<blockquote>
<pre class="programlisting">&lt;META HTTP-EQUIV="name" CONTENT="value"&gt;</pre>
</blockquote>

<p>This tag must be sent as part of the
<tt class="literal">&lt;HEAD&gt;</tt><a name="INDEX-1018"></a><a name="INDEX-1019"></a> section of the HTML page.
This technique does not provide any special benefit to servlets; it
was developed for use with static documents, which do not have access
to their own headers.
</p>


<a name="ch05-11-fm2xml"></a>
<h3 class="sect2">5.6.2. Redirecting a Request</h3>

<p>One of the useful things a servlet can do using status codes and
headers is <a name="INDEX-1020"></a><a name="INDEX-1021"></a>
redirect a request. This is done by sending instructions for the
client to use another URL in the response. Redirection is generally
used when a document moves (to send the client to the new location),
for load balancing (so one URL can distribute the load to several
different machines), or for simple randomization (choosing a
destination at random).
</p>

<p>
<a href="#ch05-19780">Example 5-7</a> shows a servlet that performs a
<a name="INDEX-1022"></a>random redirect, sending a client
to a random site selected from its site list. Depending on the site
list, a servlet like this could have many uses. As it stands now,
it's just a jump-off point to a selection of cool servlet
sites. With a site list containing advertising images, it can be used
to select the next ad banner.
</p>

<a name="ch05-19780"></a>
<div class="example">
<h4 class="objtitle">Example 5-7. Random redirector </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class SiteSelector extends HttpServlet {

  Vector sites = new Vector();
  Random random = new Random();

  public void init(ServletConfig config) throws ServletException {
    super.init(config);
    sites.addElement("http://www.oreilly.com/catalog/jservlet");
    sites.addElement("http://www.servlets.com");
    sites.addElement("http://jserv.java.sun.com");
    sites.addElement("http://www.servletcentral.com");
  }

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    int siteIndex = Math.abs(random.nextInt()) % sites.size();
    String site = (String)sites.elementAt(siteIndex);

    res.setStatus(res.SC_MOVED_TEMPORARILY);
    res.setHeader("Location", site);
  }
}</pre>
</blockquote>
</div>

<p>The actual redirection happens in two lines:</p>

<blockquote>
<pre class="programlisting">res.setStatus(res.SC_MOVED_TEMPORARILY);
res.setHeader("Location", site);</pre>
</blockquote>

<p>The first line sets the status code to indicate a redirection is to
take place, while the second line gives the new location. To
guarantee they will work, you must call these methods before you send
any output. Remember, the HTTP protocol sends status codes and
headers before the content body. Also, the new site must be given as
an absolute URL (for example, <em class="emphasis">http://<em class="replaceable">server</em>:port/path/file.html</em>). Anything less than that may
confuse the client.
</p>

<p>These two lines can be simplified to one using the
<tt class="literal">sendRedirect()</tt><a name="INDEX-1023"></a><a name="INDEX-1024"></a>
convenience method:
</p>

<blockquote>
<pre class="programlisting">public void HttpServletResponse.sendRedirect(String location) throws IOException</pre>
</blockquote>

<p>This method redirects the response to the specified location,
automatically setting the status code and <tt class="literal">Location</tt>
header. For our example, the two lines become simply: <a name="INDEX-1025"></a><a name="INDEX-1026"></a>
</p>

<blockquote>
<pre class="programlisting">res.sendRedirect(site);</pre>
</blockquote>


<a name="ch05-12-fm2xml"></a>
<h3 class="sect2">5.6.3. Client Pull</h3>

<p>
<a name="INDEX-1027"></a><a name="INDEX-1028"></a>
Client pull is similar to redirection, with one major difference: the
browser actually displays the content from the first page and waits
some specified amount of time before retrieving and displaying the
content from the next page. It's called client pull because the
client is responsible for pulling the content from the next page.
</p>

<p>Why is this useful? For two reasons. First, the content from the
first page can explain to the client that the requested page has
moved before the next page is automatically loaded. Second, pages can
be retrieved in sequence, making it possible to present a slow-motion
page animation.
</p>

<p>Client pull information is sent to the client using the
<tt class="literal">Refresh</tt> HTTP header. This header's value
specifies the number of seconds to display the page before pulling
the next one, and it optionally includes a URL string that specifies
the URL from which to pull. If no URL is given, the same URL is used.
Here's a call to
<tt class="literal">setHeader()</tt><a name="INDEX-1029"></a><a name="INDEX-1030"></a>
that tells the client to reload this same servlet after showing its
current content for three seconds:
</p>

<blockquote>
<pre class="programlisting">setHeader("Refresh", "3");</pre>
</blockquote>

<p>And here's a call that tells the client to display
Netscape's home page after the three seconds:
</p>

<blockquote>
<pre class="programlisting">setHeader("Refresh", "3; URL=http://home.netscape.com");</pre>
</blockquote>

<p>
<a href="#ch05-24079">Example 5-8</a> shows a servlet that uses client pull to
display the current time, updated every 10 seconds.
</p>

<a name="ch05-24079"></a>
<div class="example">
<h4 class="objtitle">Example 5-8. The current time, kept current </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class ClientPull extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();

    res.setHeader("Refresh", "10");
    out.println(new Date().toString());
  }
}</pre>
</blockquote>
</div>

<p>This is an example of a <a name="INDEX-1031"></a><a name="INDEX-1032"></a>text-based
animation--we'll look at graphical animations in the next
chapter. Note that the <tt class="literal">Refresh</tt> header is
nonrepeating. It is not a directive to load the document repeatedly.
For this example, however, the <tt class="literal">Refresh</tt> header is
specified on each retrieval, creating a continuous display.
</p>

<p>The use of client pull to retrieve a second document is shown in
<a href="#ch05-23123">Example 5-9</a>. This servlet redirects requests for one
host to another host, giving an explanation to the client before the
redirection.
</p>

<a name="ch05-23123"></a>
<div class="example">
<h4 class="objtitle">Example 5-9. An explained host change </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class ClientPullMove extends HttpServlet {

  static final String NEW_HOST = "http://www.oreilly.com";

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    String newLocation = NEW_HOST + req.getRequestURI();

    res.setHeader("Refresh", "10; URL=" + newLocation);

    out.println("The requested URI has been moved to a different host.&lt;BR&gt;");
    out.println("Its new location is " + newLocation + "&lt;BR&gt;");
    out.println("Your browser will take you there in 10 seconds.");
  }
}</pre>
</blockquote>
</div>

<p>This servlet generates the new location from the requested URI, which
allows it to redirect any requests made to the old server. With the
Java Web Server, this servlet could be configured to handle every
request, to gradually transition clients to the new
location.<a name="INDEX-1033"></a><a name="INDEX-1034"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch05_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.5. Status Codes</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.7. When Things Go Wrong</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
