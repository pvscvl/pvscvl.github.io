<html>
<head>
<title>Servlet Collaboration (Java Servlet Programming)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Jason Hunter and William Crawford">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-391-XE" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Servlet Collaboration">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm" alt="Java Servlet Programming"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch11_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch11_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch11_01.htm">Chapter 11: Interservlet Communication</a></td><td align="right" valign="top" width="172"><a href="ch11_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch11_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">11.3. Servlet Collaboration</h2>

<p>Sometimes servlets have to cooperate, usually by sharing some
information. We call communication of this sort <a name="INDEX-2003"></a><a name="INDEX-2004"></a>
servlet collaboration. Collaborating servlets can pass the shared
information directly from one servlet to another through method
invocations, as shown earlier. This approach requires each servlet to
know the other servlets with which it is collaborating--an
unnecessary burden. There are several better techniques.
</p>

<a name="ch11-6-fm2xml"></a>
<h3 class="sect2">11.3.1. Collaboration Through the System Properties List</h3>

<p>One simple way for servlets to share information is by using
<a name="INDEX-2005"></a><a name="INDEX-2006"></a>Java's system-wide
<tt class="literal">Properties</tt> list, found in the
<tt class="literal">java.lang.System</tt> class. This
<tt class="literal">Properties</tt> list holds the standard system
properties, such as <tt class="literal">java.version</tt> and
<tt class="literal">path.separator</tt>, but it can also hold
application-specific properties. Servlets can use the properties list
to hold the information they need to share. A servlet can add (or
change) a <a name="INDEX-2007"></a><a name="INDEX-2008"></a><a name="INDEX-2009"></a> property by calling:
</p>

<blockquote>
<pre class="programlisting">System.getProperties().put("<em class="replaceable">key</em>", "<em class="replaceable">value</em>");</pre>
</blockquote>

<p>That servlet, or another servlet running in the same JVM, can later
get the value of the property by calling:
</p>

<blockquote>
<pre class="programlisting">String value = System.getProperty("<em class="replaceable">key</em>");</pre>
</blockquote>

<p>The property can be <a name="INDEX-2010"></a><a name="INDEX-2011"></a><a name="INDEX-2012"></a>removed by calling:
</p>

<blockquote>
<pre class="programlisting">System.getProperties().remove("<em class="replaceable">key</em>");</pre>
</blockquote>

<p>It's best if the key for a property includes a prefix that
contains the name of the servlet's package and the name of the
collaboration group. For example,
<tt class="literal">"com.oreilly.servlet.ShoppingCart"</tt>.
</p>

<p>The <tt class="literal">Properties</tt> class is intended to be
<tt class="literal">String</tt> based, meaning that each key and value is
supposed to be a <tt class="literal">String</tt>. This limitation, though,
isn't commonly enforced and can (although it's quite a
hack) be ignored by servlets that want to store and retrieve
non-<tt class="literal">String</tt> objects. Such servlets can take
advantage of the fact that the <tt class="literal">Properties</tt> class
extends the <tt class="literal">Hashtable</tt> class, so the
<tt class="literal">Properties</tt> list can (quite rudely) be treated as a
<tt class="literal">Hashtable</tt> when storing keys and values. For
example, a servlet can add or change a <a name="INDEX-2013"></a><a name="INDEX-2014"></a><a name="INDEX-2015"></a>property object by calling:
</p>

<blockquote>
<pre class="programlisting">System.getProperties().put(<em class="replaceable">keyObject</em>, <em class="replaceable">valueObject</em>);  // hack</pre>
</blockquote>

<p>It can <a name="INDEX-2016"></a><a name="INDEX-2017"></a><a name="INDEX-2018"></a>retrieve the property object by calling:
</p>

<blockquote>
<pre class="programlisting">SomeObject valueObject = (SomeObject)System.getProperties().get(<em class="replaceable">keyObject</em>);</pre>
</blockquote>

<p>It can <a name="INDEX-2019"></a><a name="INDEX-2020"></a><a name="INDEX-2021"></a>remove the property object by calling:
</p>

<blockquote>
<pre class="programlisting">System.getProperties().remove(<em class="replaceable">keyObject</em>);</pre>
</blockquote>

<p>This misuse of the <tt class="literal">Properties</tt> list causes the
<tt class="literal">getProperty()</tt>, <tt class="literal">list()</tt> and
<tt class="literal">save()</tt> methods of the
<tt class="literal">Properties</tt> class to throw
<tt class="literal">ClassCastException</tt> objects when they
naturally--but erroneously--assume each key and value to be
a <tt class="literal">String</tt>. For this reason, if there's
<em class="emphasis">any</em> chance these methods might be called, you
should instead use one of the techniques for servlet collaboration we
describe later in the chapter. Also, remember the class files for
<tt class="literal">keyObject</tt> and <tt class="literal">valueObject</tt>
should be found in the server's classpath, not in the default
servlet directory where they would be loaded, and perhaps reloaded,
by the special servlet class loaders.
</p>

<p>There are three more caveats to using the system
<tt class="literal">Properties</tt> list for servlet collaboration: the
information isn't naturally persistent between server restarts,
the information can be viewed (and modified or deleted) by other
classes executing in the servlet's JVM, and some servlet
security managers may not grant servlets access to the system
property list.
</p>

<a name="ch11-7-fm2xml"></a>
<h3 class="sect3">11.3.1.1. Using properties to sell burritos</h3>

<p>Despite the stern warnings, servlet collaboration through the
system-wide <tt class="literal">Properties</tt> list works well for
servlets that are sharing insensitive, noncritical, easily
replaceable information. As a fun
<a name="INDEX-2022"></a><a name="INDEX-2023"></a>example, imagine a set of servlets that
sell burritos and share a "special of the day." An
administrative servlet could set the special of the day using the
following code:
</p>

<blockquote>
<pre class="programlisting">System.getProperties().put("com.LaCostena.special.burrito", "Pollo Adobado");
System.getProperties().put("com.LaCostena.special.day", new Date());</pre>
</blockquote>

<p>Thereafter, every other servlet on the server can access the special
and display it with code like this:
</p>

<blockquote>
<pre class="programlisting">String burrito = System.getProperty("com.LaCostena.special.burrito");
Date day = (Date)System.getProperties().get("com.LaCostena.special.day");

DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
String today = df.format(day);

out.println("Our burrito special today (" + today + ") is: " + burrito);</pre>
</blockquote>



<a name="ch11-8-fm2xml"></a>
<h3 class="sect3">11.3.1.2. Faster image chaining</h3>

<p>
<a name="INDEX-2024"></a><a name="INDEX-2025"></a><a name="INDEX-2026"></a>
Servlets performing image effects in a servlet chain can boost their
speed dramatically by using the system <tt class="literal">Properties</tt>
list to pass their images. In <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch06_01.htm">Chapter 6, "Sending Multimedia Content"</a>, we saw
the standard method by which the servlets in a chain pass images from
link to link. The first servlet takes an <tt class="literal">Image</tt>
object, encodes it to a stream of bytes, and passes the bytes to the
next servlet. The receiving servlet decodes the bytes back into the
original <tt class="literal">Image</tt> object. The technique works fine,
but it can be prohibitively slow for large images. An alternative
solution is for the first servlet to save the
<tt class="literal">Image</tt> object itself in the system-wide
<tt class="literal">Properties</tt> list, then pass on a small unique key
by which the next servlet in the chain can locate the
<tt class="literal">Image</tt>. In a sense, the old approach works by
shoving an entire elephant through the small portal between servlets.
The new approach works by passing just the elephant's leash.
</p>

<p>
<a href="#ch11-35937">Example 11-5</a> demonstrates exactly how a servlet
passes on a key to an <tt class="literal">Image</tt> object saved in the
system <tt class="literal">Properties</tt> list.
</p>

<a name="ch11-35937"></a>
<div class="example">
<h4 class="objtitle">Example 11-5. Passing an Image through the Properties list </h4>
<blockquote>
<pre class="programlisting">import java.awt.*;
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class ChainImageSource extends HttpServlet {

  int keynum = 0;  // used to create a unique key

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    // Get an Image
    String imageFile = req.getRealPath("/system/images/serverduke.gif");
    Image image = Toolkit.getDefaultToolkit().getImage(imageFile);

    // Create a unique key under which to store the image
    String key = "com.oreilly.servlet.ChainImageSource." + keynum++;

    // Store the image in the system Properties list using that key
    System.getProperties().put(key, image);

    // Tell the next servlet to expect an image key
    res.setContentType("java-internal/image-key");

    PrintWriter out = res.getWriter();

    // Send the key
    out.println(key);
  }
}</pre>
</blockquote>
</div>

<p>Notice how the servlet generates its unique key. It prefixes the key
with the string
<tt class="literal">"com.oreilly.servlet.ChainImageSource"</tt>, something
no other servlet is likely to use. Then it appends a different
integer value for each image. Also notice how this servlet uses the
custom content type "<tt class="literal">java-internal/image-key</tt>" to
indicate that it's passing on an image key.
</p>

<p>
<a href="#ch11-30315">Example 11-6</a> shows the other half of this servlet
chain--a servlet that uses the key to fetch the original
<tt class="literal">Image</tt> object.
</p>

<a name="ch11-30315"></a>
<div class="example">
<h4 class="objtitle">Example 11-6. Fetching an image passed through the Properties list </h4>
<blockquote>
<pre class="programlisting">import java.awt.*;
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class ChainImageSink extends HttpServlet {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {

    // See what content type we're receiving
    String contentType = req.getContentType();

    Image image = null;

    // An "image/*" content type means to expect the image as an encoded
    // byte stream
    if (contentType != null &amp;&amp; contentType.startsWith("image")) {
      // Receive the image bytes as shown in <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch06_01.htm">Chapter 6, "Sending Multimedia Content"</a>
    }

    // A "java-internal/image-key" content type means to expect a key
    else if ("java-internal/image-key".equals(contentType)) {
      // Read the first line of content to get the key
      String key = req.getReader().readLine();

      // Retrieve the Image stored under that key
      image = (Image)System.getProperties().get(key);

      // Always remove the Image, to avoid a memory leak
      System.getProperties().remove(key);
    }

    // Other content types cannot be handled
    else {
      throw new ServletException("Incoming content type must be " +
                       "\"image/*\" or \"java-internal/image-key\"");
    }

    // Proceed to use the image as appropriate...
    res.setContentType("text/plain");
    PrintWriter out = res.getWriter();
    out.println("Received the image: " + image);
  }
}</pre>
</blockquote>
</div>

<p>The most important thing to notice with this example is that the
receiving servlet bears the responsibility of removing the
<tt class="literal">Image</tt> from the system
<tt class="literal">Properties</tt> list to avoid a potentially large
memory leak.
</p>

<p>This leash-passing technique works only when the source servlet can
be absolutely sure its key is being sent to another servlet, not to a
dumbfounded user who expected an image. This can be ensured if every
chain has as its final servlet a special servlet whose sole purpose
is to accept an image key and emit that
<tt class="literal">Image</tt>'s encoded byte stream.<a name="INDEX-2027"></a><a name="INDEX-2028"></a>
</p>



<a name="ch11-9-fm2xml"></a>
<h3 class="sect2">11.3.2. Collaboration Through a Shared Object</h3>

<p>Another way for
<a name="INDEX-2029"></a><a name="INDEX-2030"></a>servlets to share information is
through a <a name="INDEX-2031"></a>
shared object. A shared object can hold the pool of shared
information and make it available to each servlet as needed. In a
sense, the system <tt class="literal">Properties</tt> list is a special
case example of a shared object. By generalizing the technique into
sharing any sort of object, however, a servlet is able to use
whatever shared object best solves its particular problem.
</p>

<p>Often the shared object incorporates a fair amount of business logic
or rules for manipulating the object's data. This business
logic protects the shared object's actual data by making it
available only through well-defined methods. It can enforce data
integrity, trigger events to handle certain conditions, and basically
abstract lots of little data manipulations into a single method
invocation. This capability isn't available with the
<tt class="literal">Properties</tt> list.
</p>

<p>There's one thing to watch out for when collaborating through a
shared object: the garbage collector. It can reclaim the shared
object if at any time the object isn't referenced by a loaded
servlet. To keep the garbage collector at bay, it's wise for
every servlet using a shared object to save a reference to the
object.
</p>

<a name="ch11-10-fm2xml"></a>
<h3 class="sect3">11.3.2.1. Using a shared class to sell burritos</h3>

<p>For an example of servlet collaboration through a shared object,
let's look at how several servlets selling
<a name="INDEX-2032"></a><a name="INDEX-2033"></a>burritos can maintain a shared
inventory of burrito ingredients. First, we need a shared burrito
inventory class. This class is responsible for maintaining the
ingredient count and making the count available through its public
methods. An example burrito inventory class is shown in <a href="#ch11-40437">Example 11-7</a>. You'll notice that this class is a
<a name="INDEX-2034"></a><a name="INDEX-2035"></a>
singleton (a class that has just one instance). This makes it easy
for every servlet sharing the class to maintain a reference to the
same instance.
</p>

<a name="ch11-40437"></a>
<div class="example">
<h4 class="objtitle">Example 11-7. A shared burrito inventory class </h4>
<blockquote>
<pre class="programlisting">public class BurritoInventory {

  // Protect the constructor, so no other class can call it
  private BurritoInventory() { }

  // Create the only instance, save it to a private static variable
  private static BurritoInventory instance = new BurritoInventory();

  // Make the static instance publicly available
  public static BurritoInventory getInstance() { return instance; }

  // How many "servings" of each item do we have?
  private int cheese = 0;
  private int rice = 0;
  private int beans = 0;
  private int chicken = 0;

  // Add to the inventory
  public void addCheese(int added) { cheese += added; }
  public void addRice(int added) { rice += added; }
  public void addBeans(int added) { beans += added; }
  public void addChicken(int added) { chicken += added; }

  // Called when it's time to make a burrito.
  // Returns true if there are enough ingredients to make the burrito,
  // false if not. Decrements the ingredient count when there are enough.
  synchronized public boolean makeBurrito() {
    // Burritos require one serving of each item
    if (cheese &gt; 0 &amp;&amp; rice &gt; 0 &amp;&amp; beans &gt; 0 &amp;&amp; chicken &gt; 0) {
      cheese--; rice--; beans--; chicken--;
      return true;  // can make the burrito
    }
    else {
      // Could order more ingredients
      return false;  // cannot make the burrito
    }
  }
}</pre>
</blockquote>
</div>

<p>
<tt class="literal">BurritoInventory</tt> maintains an inventory count for
four burrito ingredients: cheese, rice, beans, and chicken. It holds
the counts with private instance variables. For serious production
use, information like these counts should probably be kept in an
external database. Each ingredient's inventory count can be
increased through the <tt class="literal">addCheese()</tt>,
<tt class="literal">addRice()</tt>, <tt class="literal">addBeans()</tt>, and
<tt class="literal">addChicken()</tt> methods. These methods might be
called from a servlet accessed by the ingredient preparers throughout
the day. All the counts are decreased together in the
<tt class="literal">makeBurrito()</tt> method. This method checks that
there are enough ingredients to make a full burrito. If there are, it
decrements the ingredient count and returns <tt class="literal">true</tt>.
If there aren't, it returns <tt class="literal">false</tt> (and, in
an improved version, may choose to order more ingredients). The
<tt class="literal">makeBurrito()</tt> method might be called by a servlet
selling burritos over the Web, and perhaps also by a servlet
communicating with the check-out cash register. Remember, the class
file for <tt class="literal">BurritoInventory</tt> should be placed
somewhere in the server's classpath (such as in
<em class="replaceable">server_root</em><em class="filename">/classes</em>),
just like all the other non-servlet class files.
</p>

<p>
<a href="#ch11-35096">Example 11-8</a> shows how a servlet adds ingredients to
the inventory.
</p>

<a name="ch11-35096"></a>
<div class="example">
<h4 class="objtitle">Example 11-8. Adding ingredients to the shared inventory </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class BurritoInventoryProducer extends HttpServlet {

  // Get (and keep!) a reference to the shared BurritoInventory instance
  BurritoInventory inventory = BurritoInventory.getInstance();

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    out.println("&lt;HTML&gt;");
    out.println("&lt;HEAD&gt;&lt;TITLE&gt;Burrito Inventory Producer&lt;/TITLE&gt;&lt;/HEAD&gt;");

    // Produce random amounts of each item
    Random random = new Random();

    int cheese = Math.abs(random.nextInt() % 10);
    int rice = Math.abs(random.nextInt() % 10);
    int beans = Math.abs(random.nextInt() % 10);
    int chicken = Math.abs(random.nextInt() % 10);

    // Add the items to the inventory
    inventory.addCheese(cheese);
    inventory.addRice(rice);
    inventory.addBeans(beans);
    inventory.addChicken(chicken);

    // Print the production results
    out.println("&lt;BODY&gt;");
    out.println("&lt;H1&gt;Added ingredients:&lt;/H1&gt;");
    out.println("&lt;PRE&gt;");
    out.println("cheese: " + cheese);
    out.println("rice: " + rice);
    out.println("beans: " + beans);
    out.println("chicken: " + chicken);
    out.println("&lt;/PRE&gt;");
    out.println("&lt;/BODY&gt;&lt;/HTML&gt;");
  }
}</pre>
</blockquote>
</div>

<p>Every time this servlet is accessed, it produces a random amount of
each ingredient (somewhere from zero to nine servings) and adds it to
the inventory. Then this servlet prints the results of its work, as
you can see in <a href="#ch11-18100">Figure 11-4</a>.
</p>

<a name="ch11-18100"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_1104.gif" webstripperlinkwas="figs/jsp_1104.gif"></div>
<h4 class="objtitle">Figure 11-4. The output from BurritoInventoryProducer</h4>

<p>The most important thing to note about this servlet is that it always
keeps its reference to the shared <tt class="literal">BurritoInventory</tt>
instance, preventing the garbage collector from reclaiming the
instance as long as this servlet is loaded.
</p>

<p>
<a href="#ch11-30666">Example 11-9</a> shows how a servlet can consume the
ingredients from the inventory.
</p>

<a name="ch11-30666"></a>
<div class="example">
<h4 class="objtitle">Example 11-9. Consuming ingredients from the shared inventory </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class BurritoInventoryConsumer extends HttpServlet {

  // Get (and keep!) a reference to the shared BurritoInventory instance
  private BurritoInventory inventory = BurritoInventory.getInstance();

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    out.println("&lt;HTML&gt;");
    out.println("&lt;HEAD&gt;&lt;TITLE&gt;Burrito Inventory Consumer&lt;/TITLE&gt;&lt;/HEAD&gt;");

    out.println("&lt;BODY&gt;&lt;BIG&gt;");

    if (inventory.makeBurrito()) {
      out.println("Your burrito will be ready in a few minutes.");
    }
    else {
      out.println("We're low on ingredients.&lt;BR&gt;");
      out.println("Looks like you're gonna starve.");
    }

    out.println("&lt;/BIG&gt;&lt;/BODY&gt;&lt;/HTML&gt;");
  }
}</pre>
</blockquote>
</div>

<p>This servlet calls the <tt class="literal">makeBurrito()</tt> method,
telling the inventory it wants to make a burrito. This servlet
doesn't have to (and, in fact, isn't allowed to)
decrement the counts itself. This servlet saves its own reference to
the <tt class="literal">BurritoInventory</tt> instance, making sure that
even if <tt class="literal">BurritoInventoryProducer</tt> is unloaded, the
<tt class="literal">BurritoInventory</tt> instance is still referenced and
therefore protected from the garbage collector.
</p>



<a name="ch11-11-fm2xml"></a>
<h3 class="sect3">11.3.2.2. Using a servlet as the shared object</h3>

<p>We should mention that it's possible for a servlet to act as
the shared object. Using a shared servlet has the added advantage
that the servlet can maintain its state using its
<tt class="literal">init()</tt> and <tt class="literal">destroy()</tt> methods to
load and save its state. Plus, a shared servlet can print its current
state each time it's accessed. <a href="#ch11-27936">Example 11-10</a>
shows the <tt class="literal">BurritoInventory</tt> class rewritten to be a
servlet.
</p>

<a name="ch11-27936"></a>
<div class="example">
<h4 class="objtitle">Example 11-10. The shared burrito inventory class, rewriten as a servlet </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class BurritoInventoryServlet extends HttpServlet {

  // How many "servings" of each item do we have?
  private int cheese = 0;
  private int rice = 0;
  private int beans = 0;
  private int chicken = 0;

  // Add to the inventory as more servings are prepared.
  public void addCheese(int added) { cheese += added; }
  public void addRice(int added) { rice += added; }
  public void addBeans(int added) { beans += added; }
  public void addChicken(int added) { chicken += added; }

  // Called when it's time to make a burrito.
  // Returns true if there are enough ingredients to make the burrito,
  // false if not. Decrements the ingredient count when there are enough.
  synchronized public boolean makeBurrito() {
    // Burritos require one serving of each item
    if (cheese &gt; 0 &amp;&amp; rice &gt; 0 &amp;&amp; beans &gt; 0 &amp;&amp; chicken &gt; 0) {
      cheese--; rice--; beans--; chicken--;
      return true;  // can make the burrito
    }
    else {
      // Could order more ingredients
      return false;  // cannot make the burrito
    }
  }

  // Display the current inventory count.
  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    out.println("&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Current Ingredients&lt;/TITLE&gt;&lt;/HEAD&gt;");
    out.println("&lt;BODY&gt;");
    out.println("&lt;TABLE BORDER=1&gt;");
    out.println("&lt;TR&gt;&lt;TH COLSPAN=2&gt;Current ingredients:&lt;/TH&gt;&lt;/TR&gt;");
    out.println("&lt;TR&gt;&lt;TD&gt;Cheese:&lt;/TD&gt;&lt;TD&gt;" + cheese + "&lt;/TD&gt;&lt;/TR&gt;");
    out.println("&lt;TR&gt;&lt;TD&gt;Rice:&lt;/TD&gt;&lt;TD&gt;" + rice + "&lt;/TD&gt;&lt;/TR&gt;");
    out.println("&lt;TR&gt;&lt;TD&gt;Beans:&lt;/TD&gt;&lt;TD&gt;" + beans + "&lt;/TD&gt;&lt;/TR&gt;");
    out.println("&lt;TR&gt;&lt;TD&gt;Chicken:&lt;/TD&gt;&lt;TD&gt;" + chicken + "&lt;/TD&gt;&lt;/TR&gt;");
    out.println("&lt;/TABLE&gt;");
    out.println("&lt;/BODY&gt;&lt;/HTML&gt;");
  }

  // Load the stored inventory count
  public void init(ServletConfig config) throws ServletException {
    super.init(config);
    loadState();
  }

  public void loadState() {
    // Try to load the counts
    FileInputStream file = null;
    try {
      file = new FileInputStream("BurritoInventoryServlet.state");
      DataInputStream in = new DataInputStream(file);
      cheese = in.readInt();
      rice = in.readInt();
      beans = in.readInt();
      chicken = in.readInt();
      file.close();
      return;
    }
    catch (IOException ignored) {
      // Problem during read
    }
    finally {
      try { if (file != null) file.close(); } 
      catch (IOException ignored) { }
    }
  }

  public void destroy() {
    saveState();
  }

  public void saveState() {
    // Try to save the counts
    FileOutputStream file = null;
    try {
      file = new FileOutputStream("BurritoInventoryServlet.state");
      DataOutputStream out = new DataOutputStream(file);
      out.writeInt(cheese);
      out.writeInt(rice);
      out.writeInt(beans);
      out.writeInt(chicken);
      return;
    }
    catch (IOException ignored) {
      // Problem during write
    }
    finally {
      try { if (file != null) file.close(); } 
      catch (IOException ignored) { }
    }
  }
}</pre>
</blockquote>
</div>

<p>
<tt class="literal">BurritoInventoryServlet</tt> is no longer a
<a name="INDEX-2036"></a><a name="INDEX-2037"></a>
singleton: it's now a normal HTTP servlet. It defines an
<tt class="literal">init()</tt> method that loads its state and a
<tt class="literal">destroy()</tt> method that saves its state. It also
defines a <tt class="literal">doGet()</tt> method that displays its state,
as shown in <a href="#ch11-37432">Figure 11-5</a>.
</p>

<a name="ch11-37432"></a>
<div class="figure">
<img alt="figure" src="figs/jsp_1105.gif" webstripperlinkwas="figs/jsp_1105.gif"></div>
<h4 class="objtitle">Figure 11-5. The output from BurritoInventoryServlet, showing its state</h4>

<p>Remember that, even as a servlet, the
<em class="filename">BurritoInventoryServlet.class </em>file should remain
in the server's standard classpath to keep it from being
reloaded.
</p>

<p>The <tt class="literal">BurritoInventoryProducer</tt> and
<tt class="literal">BurritoInventoryConsumer</tt> classes can get a
reference to the <tt class="literal">BurritoInventoryServlet</tt> using the
technique discussed earlier in this chapter for servlet reuse:
</p>

<blockquote>
<pre class="programlisting">// Get the inventory servlet instance if we haven't before
if (inventory == null) {
  inventory = (BurritoInventoryServlet)ServletUtils.getServlet(
                   "BurritoInventoryServlet", req, getServletContext());

  // If the load was unsuccessful, throw an exception
  if (inventory == null) {
    throw new ServletException(
                "Could not locate BurritoInventoryServlet");
  }
}</pre>
</blockquote>

<p>Instead of calling <tt class="literal">BurritoInventory.getInstance()</tt>,
the producer and consumer classes can ask the server for the
<tt class="literal">BurritoInventoryServlet</tt> instance.
</p>



<a name="ch11-12-fm2xml"></a>
<h3 class="sect2">11.3.3. Collaboration Through Inheritance</h3>

<p>Perhaps the easiest technique for servlet collaboration is through
<a name="INDEX-2038"></a>inheritance.
Each servlet interested in collaborating can extend the same class
and inherit the same shared information. This simplifies the code for
the collaborating servlets and limits access to the shared
information to the proper subclasses. The common superclass can hold
a reference to the shared information, or it can hold the shared
information itself.
</p>

<a name="ch11-13-fm2xml"></a>
<h3 class="sect3">11.3.3.1. Inheriting a shared reference</h3>

<p>A common superclass can hold any number of <a name="INDEX-2039"></a>references to shared business
objects that are easily made available to its subclasses. <a href="#ch11-39060">Example 11-11</a> shows such a superclass, usable for our
burrito inventory example.
</p>

<a name="ch11-39060"></a>
<div class="example">
<h4 class="objtitle">Example 11-11. A superclass holding a reference to shared information </h4>
<blockquote>
<pre class="programlisting">import javax.servlet.*;
import javax.servlet.http.*;

public class BurritoInventorySuperclass extends HttpServlet {
  protected static BurritoInventory inventory = new BurritoInventory();
}</pre>
</blockquote>
</div>

<p>This <tt class="literal">BurritoInventorySuperclass</tt> creates a new
<tt class="literal">BurritoInventory</tt> instance.
<tt class="literal">BurritoInventoryProducer</tt> and
<tt class="literal">BurritoInventoryConsumer</tt> can then subclass
<tt class="literal">BurritoInventorySuperclass</tt> and inherit a reference
to this instance. The code for the revised
<tt class="literal">BurritoInventoryConsumer</tt> is shown in <a href="#ch11-23577">Example 11-12</a> to clarify.
</p>

<a name="ch11-23577"></a>
<div class="example">
<h4 class="objtitle">Example 11-12. Using an inherited business object </h4>
<blockquote>
<pre class="programlisting">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class BurritoInventoryConsumer extends BurritoInventorySuperclass {

  public void doGet(HttpServletRequest req, HttpServletResponse res)
                               throws ServletException, IOException {
    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    out.println("&lt;HTML&gt;");
    out.println("&lt;HEAD&gt;&lt;TITLE&gt;Burrito Inventory Consumer&lt;/TITLE&gt;&lt;/HEAD&gt;");

    out.println("&lt;BODY&gt;&lt;BIG&gt;");

    if (inventory.makeBurrito()) {
      out.println("Your burrito will be ready in 3 minutes.");
    }
    else {
      out.println("We're low on ingredients.&lt;BR&gt;");
      out.println("Looks like you're gonna starve.");
    }

    out.println("&lt;/BIG&gt;&lt;/BODY&gt;&lt;/HTML&gt;");
  }
}</pre>
</blockquote>
</div>

<p>The <tt class="literal">BurritoInventory</tt> class doesn't have to
be a <a name="INDEX-2040"></a><a name="INDEX-2041"></a>
singleton anymore. The subclasses naturally inherit the same
instance. Again, the class file for
<tt class="literal">BurritoInventorySuperclass</tt> should be put in the
server's classpath to keep it from being reloaded.
</p>



<a name="ch11-14-fm2xml"></a>
<h3 class="sect3">11.3.3.2. Inheriting the shared information</h3>

<p>In addition to holding shared references, a common superclass can
hold shared information itself and optionally make it available
through <a name="INDEX-2042"></a>
inherited business logic methods. <a href="#ch11-28849">Example 11-13</a> shows
<tt class="literal">BurritoInventorySuperclass</tt> rewritten using this
technique. It's essentially an alternate form of
<tt class="literal">BurritoInventoryServlet</tt>.
</p>

<a name="ch11-28849"></a>
<div class="example">
<h4 class="objtitle">Example 11-13. A superclass holding its own shared information </h4>
<blockquote>
<pre class="programlisting">public class BurritoInventorySuperclass extends HttpServlet {

  // How many "servings" of each item do we have?
  private static int cheese = 0;
  private static int rice = 0;
  private static int beans = 0;
  private static int chicken = 0;

  // Add to the inventory as more servings are prepared.
  protected static void addCheese(int added) { cheese += added; }
  protected static void addRice(int added) { rice += added; }
  protected static void addBeans(int added) { beans += added; }
  protected static void addChicken(int added) { chicken += added; }

  // Called when it's time to make a burrito.
  // Returns true if there are enough ingredients to make the burrito,
  // false if not. Decrements the ingredient count when there are enough.
  synchronized static protected boolean makeBurrito() {
    // ...etc...
  }

  // ...The rest matches BurritoInventoryServlet...</pre>
</blockquote>
</div>

<p>There are only two differences between this servlet superclass and
<tt class="literal">BurritoInventoryServlet</tt>. First, all the
<a name="INDEX-2043"></a><a name="INDEX-2044"></a><a name="INDEX-2045"></a> variables and methods are now static.
This guarantees that there's just one inventory kept for all
the subclasses. Second, all the
<a name="INDEX-2046"></a><a name="INDEX-2047"></a>methods
are now protected. This makes them available only to subclasses. By
inheriting from a superclass that contains the shared information,
<tt class="literal">BurritoInventoryProducer</tt> and
<tt class="literal">BurritoInventoryConsumer</tt> can call the inventory
methods directly. For example,
<tt class="literal">BurritoInventoryProducer</tt> can add items to the
inventory with this code:
</p>

<blockquote>
<pre class="programlisting">// Add the items to the inventory
addCheese(cheese);
addRice(rice);
addBeans(beans);
addChicken(chicken);</pre>
</blockquote>

<p>
<tt class="literal">BurritoInventoryConsumer</tt> can consume the
ingredients with this code:
</p>

<blockquote>
<pre class="programlisting">if (makeBurrito())</pre>
</blockquote>





<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch11_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch11_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch11_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/ch11_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">11.2. Servlet Reuse</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">11.4. Recap</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
