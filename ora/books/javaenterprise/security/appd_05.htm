<html>
<head>
<title>Package javax.crypto (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Package javax.crypto">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appd_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appd_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="appd_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appd_01.htm">Appendix D: Quick Reference</a></td><td align="right" valign="top" width="172"><a href="appd_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appd_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">D.5. Package javax.crypto</h2>

<a name="INDEX-2216"></a>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2217"></a><a name="INDEX-2218"></a><a name="INDEX-2219"></a><tr>
<td align="left"><font size="+2"><b>Class javax.crypto.Cipher</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This engine class represents a cryptographic cipher, either symmetric
or asymmetric. To get a cipher for a particular algorithm, call one
of the <tt class="literal">getInstance()</tt> methods, specifying an
algorithm name, a cipher mode, and a padding scheme. The cipher
should be initialized for encryption or decryption using an
<tt class="literal">init()</tt> method and an appropriate key (and,
optionally, a set of algorithm-specific parameters, though these are
typically unused). Then you can perform the encryption or decryption,
using the <tt class="literal">update()</tt> and
<tt class="literal">doFinal()</tt> methods.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class javax.crypto.Cipher
	extends java.lang.Object {

	// Constants
	public static final int DECRYPT_MODE;
	public static final int ENCRYPT_MODE;

	// Constructors
	protected Cipher(CipherSpi, Provider, String);

	// Class Methods
	public static final Cipher getInstance(String);
	public static final Cipher getInstance(String, String);

	// Instance Methods
	public final byte[] doFinal();
	public final byte[] doFinal(byte[]);
	public final int doFinal(byte[], int);
	public final byte[] doFinal(byte[], int, int);
	public final int doFinal(byte[], int, int, byte[]);
	public final int doFinal(byte[], int, int, byte[], int);
	public final int getBlockSize();
	public final byte[] getIV();
	public final int getOutputSize(int);
	public final AlgorithmParameters getParameters();
	public final Provider getProvider();
	public final void init(int, Key);
	public final void init(int, Key, SecureRandom);
	public final void init(int, Key, AlgorithmParameterSpec);
	public final void init(int, Key, AlgorithmParameterSpec,
							SecureRandom);
	public final void init(int, Key, AlgorithmParameters);
	public final void init(int, Key, AlgorithmParameters, 
                           SecureRandom);
	public final byte[] update(byte[]);
	public final byte[] update(byte[], int, int);
	public final int update(byte[], int, int, byte[]);
	public final int update(byte[], int, int, byte[], int);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">AlgorithmParameterSpec</tt>, <tt class="command">CipherSpi</tt>, <tt class="command">Key</tt>, <tt class="command">Provider</tt>, <tt class="command">SecureRandom</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2220"></a><a name="INDEX-2221"></a><a name="INDEX-2222"></a>
<a name="INDEX-2223"></a><a name="INDEX-2224"></a>
<tr>
<td align="left"><font size="+2"><b>Class javax.crypto.CipherInputStream</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A cipher input stream is a filter stream that passes its data through
a cipher. You can construct a cipher input stream by specifying an
underlying stream and supplying an initialized cipher. For best
results, use a byte-oriented cipher mode with this stream.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class javax.crypto.CipherInputStream
	extends java.io.FilterInputStream {

	// Constructors
	protected CipherInputStream(InputStream);
	public CipherInputStream(InputStream, Cipher);

	// Instance Methods
	public int available();
	public void close();
	public boolean markSupported();
	public int read();
	public int read(byte[]);
	public int read(byte[], int, int);
	public long skip(long);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Cipher</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2225"></a><a name="INDEX-2226"></a><a name="INDEX-2227"></a><tr>
<td align="left"><font size="+2"><b>Class javax.crypto.CipherOutputStream</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This class is a filter output stream that passes all its data through
a cipher. You can construct a cipher output stream by specifying an
underlying output stream and an initialized cipher. For best results,
use a byte-oriented mode for the cipher.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class javax.crypto.CipherOutputStream
	extends java.io.FilterOutputStream {

	// Constructors
	protected CipherOutputStream(OutputStream);
	public CipherOutputStream(OutputStream, Cipher);

	// Instance Methods
	public void close();
	public void flush();
	public void write(int);
	public void write(byte[]);
	public void write(byte[], int, int);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command"> Cipher</tt><a name="INDEX-2228"></a><a name="INDEX-2229"></a>
</p>


</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2230"></a><a name="INDEX-2231"></a><a name="INDEX-2232"></a>
<tr>
<td align="left"><font size="+2"><b>Class javax.crypto.CipherSpi</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This class is the Security Provider Interface of the
<tt class="literal">Cipher</tt> class. To implement a particular cipher
algorithm, create a subclass of this class and register the class
with an appropriate security provider. Like all SPI classes, the
methods that begin with engine are called by their corresponding
method (without engine) from the <tt class="literal">Cipher</tt> class.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class javax.crypto.CipherSpi
	extends java.lang.Object {

	// Constructors
	public CipherSpi();

	// Protected Instance Methods
	protected abstract byte[] engineDoFinal(byte[], int, int);
	protected abstract int engineDoFinal(byte[], int, int,
									byte[], int);
	protected abstract int engineGetBlockSize();
	protected abstract byte[] engineGetIV();
	protected abstract int engineGetOutputSize(int);
	protected abstract void engineInit(int, Key, SecureRandom);
	protected abstract void engineInit(int, Key, 
					AlgorithmParameterSpec, SecureRandom);
	protected abstract void engineInit(int, Key, AlgorithmParameters,
								 SecureRandom);
	protected abstract void engineSetMode(String);
	protected abstract void engineSetPadding(String);
	protected abstract byte[] engineUpdate(byte[], int, int);
	protected abstract int engineUpdate(byte[], int, int, byte[], int);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">AlgorithmParameterSpec</tt>, <tt class="command">Cipher</tt>, <tt class="command">Key</tt>, <tt class="command">SecureRandom</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2233"></a><a name="INDEX-2234"></a><tr>
<td align="left"><font size="+2"><b>Class javax.crypto.KeyAgreement</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This engine class represents a key agreement protocol, which is an
arrangement by which two parties can agree on a secret value. You can
obtain an instance of this class by calling the
<tt class="literal">getInstance()</tt> method. After initializing the
object (see <tt class="literal">init()</tt>), you can step through the
phases of the key agreement protocol using the
<tt class="literal">doPhase()</tt> method. Once the phases are complete,
the secret value (that is, the key) is returned from the
<tt class="literal">generateSecret()</tt> method.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class javax.crypto.KeyAgreement
	extends java.lang.Object {

	// Constructors
	protected KeyAgreement(KeyAgreementSpi, Provider, String);

	// Class Methods
	public static final KeyAgreement getInstance(String);
	public static final KeyAgreement getInstance(String, String);

	// Instance Methods
	public final Key doPhase(Key, boolean);
	public final byte[] generateSecret();
	public final int generateSecret(byte[], int);
	public final String getAlgorithm();
	public final Provider getProvider();
	public final void init(Key);
	public final void init(Key, SecureRandom);
	public final void init(Key, AlgorithmParameterSpec);
	public final void init(Key, AlgorithmParameterSpec, SecureRandom);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">AlgorithmParameterSpec</tt>, <tt class="command">Key</tt>, <tt class="command">KeyAgreementSpi</tt>, <tt class="command">Provider</tt>, <tt class="command">SecureRandom</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2235"></a><a name="INDEX-2236"></a>
<tr>
<td align="left"><font size="+2"><b>Class javax.crypto.KeyAgreementSpi</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This is the Security Provider Interface class for the
<tt class="literal">KeyAgreement</tt> class. If you want to implement a
key agreement algorithm, create a subclass of this class and register
it with an appropriate security provider.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class javax.crypto.KeyAgreementSpi
	extends java.lang.Object {

	// Constructors
	public KeyAgreementSpi();

	// Protected Instance Methods
	protected abstract Key engineDoPhase(Key, boolean);
	protected abstract byte[] engineGenerateSecret();
	protected abstract int engineGenerateSecret(byte[], int);
	protected abstract void engineInit(Key, SecureRandom);
	protected abstract void engineInit(Key, AlgorithmParameterSpec,
									SecureRandom);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">AlgorithmParameterSpec</tt>, <tt class="command">Key</tt>, <tt class="command">KeyAgreement</tt>, <tt class="command">SecureRandom</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2237"></a><a name="INDEX-2238"></a><a name="INDEX-2239"></a><tr>
<td align="left"><font size="+2"><b>Class javax.crypto.KeyGenerator</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A key generator creates secret keys for use with symmetric ciphers.
Key generators are obtained by calling the
<tt class="literal">getInstance()</tt> method; they must then be
initialized with an <tt class="literal">init()</tt> method. The key
itself is then returned from the
<tt class="literal">generateSecret()</tt> method.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class javax.crypto.KeyGenerator
	extends java.lang.Object {

	// Constructors
	protected KeyGenerator(KeyGeneratorSpi, Provider, String);

	// Class Methods
	public static final KeyGenerator getInstance(String);
	public static final KeyGenerator getInstance(String, String);

	// Instance Methods
	public final SecretKey generateKey();
	public final String getAlgorithm();
	public final Provider getProvider();
	public final void init(int);
	public final void init(int, SecureRandom);
	public final void init(SecureRandom);
	public final void init(AlgorithmParameterSpec);
	public final void init(AlgorithmParameterSpec, SecureRandom);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">AlgorithmParameterSpec</tt>, <tt class="command">KeyGeneratorSpi</tt>, <tt class="command">Provider</tt>, <tt class="command">SecretKey</tt>, <tt class="command">SecureRandom</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2240"></a><a name="INDEX-2241"></a><a name="INDEX-2242"></a><tr>
<td align="left"><font size="+2"><b>Class javax.crypto.KeyGeneratorSpi</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This is the Security Provider Interface for the
<tt class="literal">KeyGenerator</tt> class. To create an implementation
of a key generation algorithm, make a subclass of this class and
register the implementation with an appropriate security provider.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class javax.crypto.KeyGeneratorSpi
	extends java.lang.Object {

	// Constructors
	public KeyGeneratorSpi();

	// Protected Instance Methods
	protected abstract SecretKey engineGenerateKey();
	protected abstract void engineInit(int, SecureRandom);
	protected abstract void engineInit(SecureRandom);
	protected abstract void engineInit(AlgorithmParameterSpec,
								SecureRandom);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">AlgorithmParameterSpec</tt>, <tt class="command">KeyGenerator</tt>, <tt class="command">SecretKey</tt>, <tt class="command">SecureRandom</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2243"></a><a name="INDEX-2244"></a><a name="INDEX-2245"></a>
<a name="INDEX-2246"></a>
<tr>
<td align="left"><font size="+2"><b>Class javax.crypto.NullCipher</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>As its name implies, null cipher is a cipher that does nothing. You
can use it to test cryptographic programs. Since a null cipher
performs no transformations, its ciphertext will be exactly the same
as its plaintext.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class javax.crypto.NullCipher
	extends javax.crypto.Cipher {

	// Constructors
	public NullCipher();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Cipher</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2247"></a><a name="INDEX-2248"></a><a name="INDEX-2249"></a>
<a name="INDEX-2250"></a><a name="INDEX-2251"></a><a name="INDEX-2252"></a>
<tr>
<td align="left"><font size="+2"><b>Class javax.crypto.SealedObject</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A sealed object is a container for another object. The contained
object is serialized and then encrypted using a cipher. You can
construct a sealed object using any serializable object and a cipher
that is initialized for encryption. To decrypt the contained object,
call the <tt class="literal">getObject()</tt> method with a cipher that
is initialized for decryption.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class javax.crypto.SealedObject
	extends java.lang.Object
	implements java.io.Serializable {

	// Constructors
	public SealedObject(Serializable, Cipher);

	// Instance Methods
	public final Object getObject(Cipher);
	public final Object getObject(Key);
	public final Object getObject(Key, String);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">PublicKey</tt>, <tt class="command">PrivateKey</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2253"></a><a name="INDEX-2254"></a><a name="INDEX-2255"></a><tr>
<td align="left"><font size="+2"><b>Interface javax.crypto.SecretKey</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A secret key represents a key that is used with a symmetric cipher.
This interface is used strictly for type identification.
</p>
</table>
</div>


<h3>Interface Definition</h3><blockquote>
<pre class="programlisting">public abstract interface javax.crypto.SecretKey
	implements java.security.Key {
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Key</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2256"></a><a name="INDEX-2257"></a><a name="INDEX-2258"></a>
<a name="INDEX-2259"></a><tr>
<td align="left"><font size="+2"><b>Class javax.crypto.SecretKeyFactory</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A secret key factory is used to convert between secret key data
formats; like a key factory, this is typically used to import a key
based on its external format or to export a key to its encoded format
or algorithm parameters. Instances of this class are obtained by
calling the <tt class="literal">getInstance()</tt> method. Keys may be
exported by using the <tt class="literal">translateKey()</tt> method;
they are imported by using the <tt class="literal">generate Secret()</tt>
method.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class javax.crypto.SecretKeyFactory
	extends java.lang.Object {

	// Constructors
	protected SecretKeyFactory(SecretKeyFactorySpi, Provider);

	// Class Methods
	public static final SecretKeyFactory getInstance(String);
	public static final SecretKeyFactory getInstance(String, String);

	// Instance Methods
	public final SecretKey generateSecret(KeySpec);
	public final KeySpec getKeySpec(SecretKey, Class);
	public final Provider getProvider();
	public final SecretKey translateKey(SecretKey);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">KeySpec</tt>, <tt class="command">Provider</tt>, <tt class="command">SecretKey</tt>, <tt class="command">SecretKeyFactorySpi</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2260"></a><a name="INDEX-2261"></a>
<tr>
<td align="left"><font size="+2"><b>Class javax.crypto.SecretKeyFactorySpi</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This class is the Security Provider Interface for the
<tt class="literal">SecretKeyFactory</tt> class. To create a secret key
factory, make a subclass of this class and register your
implementation with an appropriate provider.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class javax.crypto.SecretKeyFactorySpi
	extends java.lang.Object {

	// Constructors
	public SecretKeyFactorySpi();

	// Protected Instance Methods
	protected abstract SecretKey engineGenerateSecret(KeySpec);
	protected abstract KeySpec engineGetKeySpec(SecretKey, Class);
	protected abstract SecretKey engineTranslateKey(SecretKey);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command"> KeySpec</tt>,<tt class="command"> Provider</tt>,<tt class="command"> SecretKey</tt>,<tt class="command"> SecretKeyFactory</tt><a name="INDEX-2262"></a>
</p>


</div>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appd_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appd_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="appd_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appd_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">D.4. Package java.security.spec</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">D.6. Package javax.crypto.interfaces</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
