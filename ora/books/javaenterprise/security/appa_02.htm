<html>
<head>
<title>The jarsigner Tool (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The jarsigner Tool">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appa_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appa_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="appa_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appa_01.htm">Appendix A: Security Tools</a></td><td align="right" valign="top" width="172"><a href="appa_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appa_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">A.2. The jarsigner Tool</h2>

<p>
<a name="INDEX-1871"></a><a name="INDEX-1872"></a><a name="INDEX-1873"></a>The next tool we'll look at
is the <tt class="literal">jarsigner</tt> tool; this tool creates signed
JAR files. The <tt class="literal">jarsigner</tt> tool uses the
information in a keystore to look up information about a particular
entity and uses that information either to sign or to verify a JAR
file. As we discussed in the section on <tt class="literal">keytool</tt>,
the keystore that <tt class="literal">jarsigner</tt> uses is subject to
the <tt class="literal">KeyStore</tt> class that has been installed into
the virtual machine; if you have your own keystore implementation,
<tt class="literal">jarsigner</tt><em class="emphasis"></em> will be able to
use it. Similarly, if you use the standard keystore implementation,
but hold the keys in a file other than the default
<em class="filename">.keystore</em> file,
<tt class="literal">jarsigner</tt> will allow you to
use that other file as well.
</p>

<p>A signed JAR file is identical to a standard JAR file except that a
signed JAR file contains two additional entries:
</p>

<ul>
<li>
<p>
<em class="emphasis">SIGNER.SF</em><a name="INDEX-1874"></a>--A file containing an SHA message
digest for each class file in the archive. The digest is calculated
from the three lines in the manifest for the class file. The base of
this name (SIGNER) varies; it is typically based upon the alias of
the keystore entry used to sign the archive.
</p>
</li>
<li>
<p>
<em class="emphasis">SIGNER.DSA</em><a name="INDEX-1875"></a><a name="INDEX-1876"></a>--A file containing the digital
signature of the .SF file. The base of this name matches the first
part of the .SF file; the extension is the algorithm used to generate
the signature. This file also contains the certificate of the entity
that signed the archive.
</p>

<p>The algorithm used to generate the signature depends upon the type of
the key found in the keystore: if the key is a X509 (DSA) key, a DSA
signature will be generated. If the key is an RSA key, an RSA
signature will be generated (assuming you have installed a security
provider capable of producing such signatures). If you have a
keystore that contains other types of keys,
<tt class="literal">jarsigner</tt> will be unable
to use them to sign the JAR file.
</p>
</li>
</ul>
<p>These entries are held in the META-INF directory of the JAR file.</p>

<a name="SEC-AP-A-SECT-2.1"></a>
<h3 class="sect2">A.2.1. Creating a Signed JAR File</h3>

<p>
<a name="INDEX-1877"></a><a name="INDEX-1878"></a>
The simplest command to sign a JAR file is:</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">jarsigner xyz.jar sdo</b>
</pre>
</blockquote>

<p>This command takes the existing JAR file <em class="filename">xyz.jar</em>
and signs it using the private key of the given alias
(<tt class="literal">sdo</tt>). The private key is obtained by searching
for the given alias from the default keystore (which will be the
<em class="filename">.keystore</em> file in the
<tt class="literal">user.home</tt> directory unless a command-line
argument is given). The signature files in this example will be named
SDO.SF and SDO.DSA and will be added to the existing JAR file.
</p>

<p>A JAR file can be signed by any number of entities simply by
executing this command multiple times with different aliases. Each
act of signing the JAR file creates a new set of .SF and .DSA files
in the archive.
</p>

<p>There are a number of options that can be used in conjunction with
this command:
</p>

<dl>
<dt>
<b>-keystore keystore</b>
</dt>
<dd>
<p>
<a name="INDEX-1879"></a>Specify the filename that
the <tt class="literal">KeyStore</tt> class should use as the keystore.
</p>
</dd>


<dt>
<b>-storepass storepass</b>
</dt>
<dd>
<p>
<a name="INDEX-1880"></a>Specify the global password
that should be used to open the keystore. If this value is not
provided, you will be prompted for it (which, as always, is the more
secure way to enter a password).
</p>
</dd>


<dt>
<b>-keypass password</b>
</dt>
<dd>
<p>
<a name="INDEX-1881"></a>Specify the password for the key
entry of the given alias. If this value is not provided, you will be
prompted for it.
</p>
</dd>


<dt>
<b>-sigfile file</b>
</dt>
<dd>
<p>
<a name="INDEX-1882"></a>Specify the base name to be used
for the .SF and .DSA files. The default for this value is the alias
specified on the command line translated to all uppercase letters
(e.g., SDO in the example above). If the alias name has more than
eight letters, only the first eight letters are used. The file
argument in this option can only contain uppercase letters, the
digits 0-9, and an underscore; it must contain eight or fewer
letters.
</p>
</dd>


<dt>
<b>-signedjar file</b>
</dt>
<dd>
<p>
<a name="INDEX-1883"></a>Write the signed JAR file to
the named file instead of adding the signature entries to the
existing JAR file.
</p>
</dd>


<dt>
<b>-verbose</b>
</dt>
<dd>
<p>
<a name="INDEX-1884"></a>Print out information as
<tt class="literal">jarsigner</tt> progresses.<a name="INDEX-1885"></a><a name="INDEX-1886"></a>
</p>
</dd>

</dl>


<a name="SEC-AP-A-SECT-2.2"></a>
<h3 class="sect2">A.2.2. Verifying a JAR File</h3>

<p>
<a name="INDEX-1887"></a><a name="INDEX-1888"></a>In the process of verifying a JAR file,
<tt class="literal">jarsigner</tt> will use the public key of the
certificate embedded in the JAR file to verify that the signature is
valid. The simplest command to verify a JAR file is:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">jarsigner -verify xyz.jar</b>
jar verified.</pre>
</blockquote>

<p>If the signature in the JAR file is not valid,
<tt class="literal">jarsigner</tt> will produce
this output:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">jar is unsigned. (signatures missing or not parsable)</pre>
</blockquote>

<p>Verification accepts the following options:</p>

<dl>
<dt>
<b>-sigfile file</b>
</dt>
<dd>
<p>Use the given base name to look up the .SF and .DSA files. This
option is useful when the JAR file has been signed by multiple
entities.
</p>
</dd>


<dt>
<b>-verbose</b>
</dt>
<dd>
<p>Provide verbose output for the verification, indicating for each file
if it was signed and whether or not the signer of the file has been
found in the keystore. Sample output from this command might appear
like this:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">jarsigner -verify -verbose xyz.jar</b>

        402 Mon Jan 26 19:25:52 EST 1998 META-INF/SDO.SF
       1395 Mon Jan 26 19:25:52 EST 1998 META-INF/SDO.DSA
smk     596 Sat Jan 24 22:18:22 EST 1998 XYZKey.class
smk     814 Sat Jan 24 22:17:46 EST 1998 XYZKeyPairGenerator.class
smk    1155 Sat Jan 24 21:56:40 EST 1998 XYZProvider.class
smk     900 Sat Jan 24 22:11:22 EST 1998 XYZSignature.class

  s = signature was verified
  m = entry is listed in manifest
  k = at least one certificate was found in keystore

jar verified.
</pre>
</blockquote>

<p>Note the legend for each file that is printed by this command. We
know if the file was signed, whether or not it was listed in the JAR
file's manifest, and whether or not the signer of the file was
found in the keystore.
</p>

<p>In the vast majority of cases, the information for each file will be
the same: JAR files are usually signed all at once by the same
person. However, there's nothing to prevent someone from adding
a new class to a signed JAR file (in which case the class would
appear as unsigned), or for a JAR file to contain multiple signers
(some of whom may have signed some of the classes, while others may
have signed only a few of the classes).
</p>

<p>In order to determine whether the certificate was found in the
keystore, <tt class="literal">jarsigner</tt> opens the default instance
of the <tt class="literal">KeyStore</tt> class and loads it. Note that no
password is required for this operation. As we mentioned in <a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_01.htm">Chapter 11, "Key Management"</a>, reading the public information out of the
keystore does not require a password (at least in the Sun
implementation of the <tt class="literal">KeyStore</tt> class).
</p>
</dd>


<dt>
<b>-ids</b>
</dt>
<dd>
<p>
<a name="INDEX-1889"></a>In conjunction with the
<tt class="literal">-verbose</tt> option, print out the distinguished
name and alias of the certificate (if any) that is found with each
class. With this option, the output for a particular class looks like
this:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">smk     900 Sat Jan 24 22:11:22 EST 1998 XYZSignature.class
	CN=Scott Oaks, OU=SMCC, O=Sun Microsystems, L=NY, S=NY, C=US (sdo)</pre>
</blockquote>

<p>In this case, the class was signed by the given distinguished name;
the name of the alias associated with the certificate is shown in
parentheses (<tt class="literal">sdo</tt>).
</p>

<p>This option has no effect unless the <tt class="literal">-verbose</tt>
option is specified.
</p>
</dd>


<dt>
<b>-keystore keystore</b>
</dt>
<dd>
<p>Use the given file as the name of the keystore to load. The default
for this option is to use the <em class="filename">.keystore</em> file in
the directory specified by the <tt class="literal">user.home</tt>
property. This name is only used for the
<tt class="literal">-verbose</tt> option to look up the certificates of
the <a name="INDEX-1890"></a><a name="INDEX-1891"></a>
signer.<a name="INDEX-1892"></a><a name="INDEX-1893"></a><a name="INDEX-1894"></a>
</p>
</dd>

</dl>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appa_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appa_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="appa_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appa_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">A.1. The keytool</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">A.3. The policytool</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
