<html>
<head>
<title>Implementing a Signature Class (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Implementing a Signature Class">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch12_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch12_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch12_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch12_01.htm">Chapter 12: Digital Signatures</a></td><td align="right" valign="top" width="172"><a href="ch12_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch12_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">12.3. Implementing a Signature Class</h2>

<p>
<a name="INDEX-1493"></a><a name="INDEX-1494"></a><a name="INDEX-1495"></a>Now
that we've seen how to use the <tt class="literal">Signature
</tt>class, we'll look at how to implement our own class.
The techniques we'll see here should be very familiar from our
other examples of implementing an engine in the security provider
architecture. In particular, since in 1.2 the
<tt class="literal">Signature</tt> class extends its own SPI, we can
implement a single class that extends the
<tt class="literal">Signature</tt> class.
</p>

<p>To construct our subclass, we must use the following constructor:</p>

<dl>
<dt>
<b>protected Signature(String algorithm)</b>
</dt>
<dd>
<p>This is the only constructor of the <tt class="literal">Signature</tt>
class, so all subclasses of this class must use this constructor. The
string passed to the constructor is the name that will be registered
with the security provider.
</p>
</dd>

</dl>

<p>Once we've constructed our engine object, we must implement the
following methods in it:
</p>

<dl>
<dt>
<b>protected abstract void engineInitVerify(PublicKey pk)<a name="INDEX-1496"></a>
</b>
</dt>
<dd>
<p>Initialize the object to prepare it to verify a digital signature. If
the public key does not support the correct algorithm or is otherwise
corrupted, an <tt class="literal">InvalidKeyException</tt> is thrown.
</p>
</dd>

<dt>
<b>protected abstract void engineInitSign(PrivateKey pk)<a name="INDEX-1497"></a>
</b>
</dt>
<dd>
<p>Initialize the object to prepare it to create a digital signature. If
the private key does not support the correct algorithm or is
otherwise corrupted, an <tt class="literal">InvalidKeyException</tt> is
thrown.
</p>
</dd>

<dt>
<b>protected abstract void engineUpdate(byte b)<a name="INDEX-1498"></a>
</b>
</dt>
<dt>
<b>protected abstract void engineUpdate(byte b[], int off, int len)</b>
</dt>
<dd>
<p>Add the given bytes to the data that is being accumulated for the
signature. These methods are called by the
<tt class="literal">update()</tt> methods; they typically call the
<tt class="literal">update()</tt> method of a message digest held in the
engine. If the engine has not been correctly initialized, a
<tt class="literal">SignatureException</tt> is thrown.
</p>
</dd>

<dt>
<b>protected abstract byte[] engineSign()</b>
</dt>
<dt>
<b>protected int engineSign(byte[] outbuf, int offset, int len) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Create the signature based on the accumulated data. If there is an
error in generating the signature, a
<tt class="literal">SignatureException</tt> is thrown.
</p>
</dd>

<dt>
<b>protected abstract boolean engineVerify(byte b[])<a name="INDEX-1499"></a>
</b>
</dt>
<dd>
<p>Return an indication of whether or not the given signature matches
the expected signature of the accumulated data. If there is an error
in validating the signature, a
<tt class="literal">SignatureException</tt> is thrown.
</p>
</dd>

<dt>
<b>protected abstract void engineSetParameter(String p, Object o) <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"><a name="INDEX-1500"></a>
</b>
</dt>
<dt>
<b>protected abstract void engineSetParameter(AlgorithmParameterSpec p) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Set the given parameters, which may be algorithm-specific. If this
parameter does not apply to this algorithm, this method should throw
an <tt class="literal">InvalidParameterException</tt>.
</p>
</dd>

<dt>
<b>protected abstract Object engineGetParameter(String p) <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"><a name="INDEX-1501"></a>
</b>
</dt>
<dd>
<p>Return the desired parameter, which is algorithm-specific. If the
given parameter does not apply to this algorithm, this method should
throw an <tt class="literal">InvalidParameterException</tt>.
</p>
</dd>

</dl>

<p>In addition to those methods, there are a few protected instance
variables that keep track of the state of the signature
object--whether it has been initialized, whether it can be used
to sign or to verify, and so on:
</p>

<dl>
<dt>
<b>protected final static int UNINITIALIZED</b>
</dt>
<dt>
<b>protected final static int SIGN</b>
</dt>
<dt>
<b>protected final static int VERIFY</b>
</dt>
<dt>
<b>protected int state</b>
</dt>
<dd>
<p>These variables control the internal state of signature object. The
state is initially UNITIALIZED; it is set to SIGN by the
<tt class="literal">initSign()</tt> method and to VERIFY by the
<tt class="literal">initVerify()</tt> method.
</p>
</dd>

</dl>

<p>These variables are not normally used by the subclasses of
<tt class="literal">Signature</tt>, since the logic to maintain them is
already implemented in the <tt class="literal">Signature</tt> class
itself.
</p>

<p>Here is an implementation of a signature class. Note that the
<tt class="literal">XYZSign</tt> class depends on other aspects of the
security architecture--in this example, the message digest
engine to create an SHA message digest, and the DSA key interfaces to
handle the public and private keys. This is very typical of signature
algorithms--even to the point where the default name of the
algorithm reflects the underlying components. The actual encryption
of the message digest will use a simple XOR-based algorithm (so that
we can, as usual, avoid the mathematics involved with a secure
example).
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class XYZSign extends Signature implements Cloneable {
	private DSAPublicKey pub;
	private DSAPrivateKey priv;
	private MessageDigest md;

	public XYZSign() throws NoSuchAlgorithmException {
		super("XYZSign");
		md = MessageDigest.getInstance("SHA");
	}

	public void engineInitVerify(PublicKey publicKey)
									throws InvalidKeyException {
		try {
			pub = (DSAPublicKey) publicKey;
		} catch (ClassCastException cce) {
			throw new InvalidKeyException("Wrong public key type");
		}
	}

	public void engineInitSign(PrivateKey privateKey)
									throws InvalidKeyException {
		try {
			priv = (DSAPrivateKey) privateKey;
		} catch (ClassCastException cce) {
			throw new InvalidKeyException("Wrong private key type");
		}
	}

	public void engineUpdate(byte b) throws SignatureException {
		try {
			md.update(b);
		} catch (NullPointerException npe) {
			throw new SignatureException("No SHA digest found");
		}
	}

	public void engineUpdate(byte b[], int offset, int length)
									throws SignatureException {
		try {
			md.update(b, offset, length);
		} catch (NullPointerException npe) {
			throw new SignatureException("No SHA digest found");
		}
	}

	public byte[] engineSign() throws SignatureException {
		byte b[] = null;
		try {
			b = md.digest();
		} catch (NullPointerException npe) {
			throw new SignatureException("No SHA digest found");
		}
		return crypt(b, priv);
	}

	public boolean engineVerify(byte[] sigBytes)
									throws SignatureException {
		byte b[] = null;
		try {
			b = md.digest();
		} catch (NullPointerException npe) {
			throw new SignatureException("No SHA digest found");
		}
		byte sig[] = crypt(sigBytes, pub);
		return MessageDigest.isEqual(sig, b);
	}

	public void engineSetParameter(String param, Object value) {
		throw new InvalidParameterException("No parameters");
	}

	public void engineSetParameter(AlgorithmParameterSpec aps) {
		throw new InvalidParameterException("No parameters");
	}

	public Object engineGetParameter(String param) {
		throw new InvalidParameterException("No parameters");
	}

	public void engineReset() {
	}

	private byte[] crypt(byte s[], DSAKey key) {
		DSAParams p = key.getParams();
		int rotValue = p.getP().intValue();
		byte d[] = rot(s, (byte) rotValue);
		return d;
	}

	private byte[] rot(byte in[], byte rotValue) {
		byte out[] = new byte[in.length];
		for (int i = 0; i &lt; in.length; i++) {
			out[i] = (byte) (in[i] ^ rotValue);
		}
		return out;
	}
}</pre>
</blockquote>

<p>Like all implementations of engines in the security architecture,
this class must have a constructor that takes no arguments, but it
must call its superclass with its name. The constructor also is
responsible for creating the instance of the underlying message
digest using whatever algorithm this class feels is important. It is
interesting to note that this requires the constructor to specify
that it can throw a <tt class="literal">NoSuchAlgorithmException</tt> (in
case the SHA algorithm can't be found).
</p>

<p>The keys for this test algorithm are required to be DSA public and
private keys. In general, the correspondence between an algorithm and
the type of key it requires is very strong, so this is a typical
usage. Hence, the two engine initialization methods cast the key to
make sure that the key has the correct format. The engine
initialization methods are not required to keep track of the state of
the signature object--that is, whether the object has been
initialized for signing or for verifying. That logic, since it is
common to all signature objects, is present in the generic
initialization methods of the <tt class="literal">Signature</tt> class
itself.
</p>

<p>The methods that update the engine can simply pass their data to the
message digest, since the message digest is responsible for providing
the fingerprint of the data that this object is going to sign or
verify. Hence, the only interesting logic in this class is that
employed by the signing and verification methods. Each method uses
the message digest to create the digital fingerprint of the data.
Then, to sign the data, the digest must be encrypted or otherwise
operated upon with the previously defined private key--this
produces a unique digest that could only have been produced by the
given data and the given private key. Conversely, to verify the data,
the digest must be decrypted or otherwise operated upon with the
previously defined public key; the resulting digest can then be
compared to the expected digest to test for verification.
</p>

<p>Clearly, the security of this algorithm depends on a strong
implementation of the signing operations. Our example here does not
meet that definition--we're simply XORing every byte of
the digest with a byte obtained from the parameters used to generate
the keys. This XOR-encryption provides a good example, since
it's both simple and symmetric; a real digital signature
implementation is much more complex.
</p>

<p>These engine signing and verification methods are also responsible
for setting the internal state of the engine back to an
initialization state, so that the same object can be used to sign or
verify multiple signatures. In this case, no other work needs to be
done for that; the message digest object itself is already reset once
it creates its digest, and there is no other internal state inside
the algorithm that needs to be reset. But if there were another
state, it would need to be reset in those methods.<a name="INDEX-1502"></a><a name="INDEX-1503"></a><a name="INDEX-1504"></a>
</p>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch12_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch12_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch12_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch12_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">12.2. Signed Classes</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">12.4. Summary</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
