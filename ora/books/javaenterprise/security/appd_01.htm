<html>
<head>
<title>Quick Reference (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Quick Reference">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appc_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appc_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm">Java Security</a></td><td align="right" valign="top" width="172"><a href="appd_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appd_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Appendix D.  Quick Reference</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="appd_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appd_01.htm">Package java.security</a>
<br>
<a href="appd_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appd_02.htm">Package java.security.cert</a>
<br>
<a href="appd_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appd_03.htm">Package java.security.interfaces</a>
<br>
<a href="appd_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appd_04.htm">Package java.security.spec</a>
<br>
<a href="appd_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appd_05.htm">Package javax.crypto</a>
<br>
<a href="appd_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appd_06.htm">Package javax.crypto.interfaces</a>
<br>
<a href="appd_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appd_07.htm">Package javax.crypto.spec</a>
<br>
<a href="appd_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appd_08.htm">Miscellaneous Packages</a>
<br>
</p>
</div>


<p>This appendix contains a quick-reference guide to the classes that we
have discussed in this book. The primary focus is on classes that are
in the <tt class="literal">java.security</tt> package and its
sub-packages, as well as the <tt class="literal">javax.crypto</tt>
extension package. Accordingly, the classes listed in this appendix
are organized by their primary package. Of course, there are a number
of security-related classes--such as the various permission
classes--that do not belong to one of these packages; these are
listed in <a href="appd_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appd_08.htm">Section D.8, "Miscellaneous Packages"</a> at the end
of this appendix. Information in this appendix is based only on Java
1.2.<a href="#FOOTNOTE-1">[1]</a>
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1]1.2 is now Java 2.</p> </blockquote>



<h2 class="sect1">D.1. Package java.security</h2>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2044"></a><a name="INDEX-2045"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.AccessControlContext</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>An access control context allows the access controller to substitute
<a name="INDEX-2046"></a>
a different context (that is, a different set of protection domains)
than the context provided by the stack of the current thread. This
class might be used by a server thread to determine if a particular
calling thread should be allowed to perform particular operations.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public final class java.security.AccessControlContext
	extends java.lang.Object {

	// Constructors
	public AccessControlContext(ProtectionDomain[]);

	// Instance Methods
	public void checkPermission(Permission);
	public boolean equals(Object);
	public int hashCode();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">AccessController</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2047"></a><a name="INDEX-2048"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.AccessController</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>The access controller is responsible for determining whether or not
the current thread can execute a given operation. This decision
occurs in the <tt class="literal">checkPermission()</tt> method and is
based upon all the protection domains that are on the stack of the
calling thread and the set of permissions that have been granted to
those protection domains. The access controller is heavily used by
the security manager to enforce a specific security policy, and it
may be used by arbitrary code to enforce an application-specific
security policy as well.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public final class java.security.AccessController
	extends java.lang.Object {

	// Class Methods
	public static native Object doPrivileged(PrivilegedAction);
	public static native Object doPrivileged(PrivilegedAction, 
                               AccessControlContext);
	public static native Object
                               doPrivileged(PrivilegedExceptionAction);
	public static native Object doPrivileged(PrivilegedExceptionAction, 
                               AccessControlContext);
	public static void checkPermission(Permission);
	public static AccessControlContext getContext();
}</pre>
</blockquote>

<p>
<span class="refsect1"><b>See Also:</b></span><tt class="command">Permission</tt>, <tt class="command">ProtectionDomain</tt>, <tt class="command">Policy</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2049"></a><a name="INDEX-2050"></a><tr>
<td align="left"><font size="+2"><b>Class java.security.AlgorithmParameterGenerator</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This engine class is used to generate algorithm-specific parameters,
which may then be turned into algorithm parameters specifications to
be used to initialize other engine classes. In normal usage, those
engines can be initialized directly via the same
<tt class="literal">init()</tt> methods that exist in this class; hence,
this class is little used.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class java.security.AlgorithmParameterGenerator {

	// Constructors
	protected AlgorithmParameterGenerator(
					AlgorithmParameterGeneratorSpi, Provider, String);

	// Class Methods
	public static final AlgorithmParameterGenerator
										getInstance(String);
	public static final AlgorithmParameterGenerator
									getInstance(String, String);

	// Instance Methods
	public final String getAlgorithm();
	public final Provider getProvider();
	public final void init(int);
	public final void init(int, SecureRandom);
	public final void init(AlgorithmParameterSpec);
	public final void init(AlgorithmParameterSpec, SecureRandom);
	public final AlgorithmParameters generateParameters();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">AlgorithmParameters</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2051"></a><a name="INDEX-2052"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.AlgorithmParameterGeneratorSpi</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This class is the Security Provider Interface for the algorithm
parameter generator. If you want to implement your own algorithm
parameter generator, you subclass this class and register your
implementation with an appropriate security provider.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.AlgorithmParameterGeneratorSpi {

	// Instance Methods
	protected abstract void engineInit(int, SecureRandom);
	protected abstract void engineInit(
								AlgorithmParameterSpec, SecureRandom);
	protected abstract AlgorithmParameters engineGenerateParameters();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">AlgorithmParameterGenerator</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2053"></a><a name="INDEX-2054"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.AlgorithmParameters</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This engine class is used to generate algorithm-specific parameter
specifications, which may then be used to initialize other engine
classes. In normal usage, those engines can be initialized directly
via the same <tt class="literal">init()</tt> methods that exist in this
class; hence, this class is little used.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class java.security.AlgorithmParameters {

	// Class Methods
	public static final AlgorithmParameters getInstance(String);
	public static final AlgorithmParameters getInstance(
									String, String);

	// Constructors
	protected AlgorithmParameters(AlgorithmParametersSpi,
								Provider, String);
	// Instance Methods
	public final String getAlgorithm();
	public final Provider getProvider();
	public final void init(AlgorithmParameterSpec);
	public final void init(byte[]);
	public final void init(byte[], String);
	public final AlgorithmParameterSpec getParameterSpec(Class);
	public final byte[] getEncoded();
	public final byte[] getEncoded(String);
	public final String toString();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">KeyPairGenerator</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2055"></a><a name="INDEX-2056"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.AlgorithmParametersSpi</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This is the Security Provider Interface for algorithm parameters. If
you want to implement your own algorithm parameters, you do so by
subclassing this class and registering your implementation with an
appropriate security provider.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.AlgorithmParametersSpi
		extends java.lang.Object {

	// Constructors
	public AlgorithmParametersSpi();

	// Protected Instance Methods
	protected abstract byte[] engineGetEncoded();
	protected abstract byte[] engineGetEncoded(String);
	protected abstract AlgorithmParameterSpec
							engineGetParameterSpec(Class);
	protected abstract void engineInit(AlgorithmParameterSpec);
	protected abstract void engineInit(byte[]);
	protected abstract void engineInit(byte[], String);
	protected abstract String engineToString();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">AlgorithmParameters</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2057"></a><a name="INDEX-2058"></a><tr>
<td align="left"><font size="+2"><b>Class java.security.AllPermission</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This class represents permissions to perform any operation. This
permission is typically granted to extension classes, which (like the
core API) need to be able to perform any operation. Although it is a
permission class, instances of this class have no name and no
actions. The <tt class="literal">implies()</tt> method of this class
always returns <tt class="literal">true</tt>.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public final class java.security.AllPermission
	extends java.security.Permission {

	// Constructors
	public AllPermission();
	public AllPermission(String, String);

	// Instance Methods
	public boolean equals(Object);
	public String getActions();
	public int hashCode();
	public boolean implies(Permission);
	public PermissionCollection newPermissionCollection();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Permission</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2059"></a><a name="INDEX-2060"></a><a name="INDEX-2061"></a>
<td align="left"><font size="+2"><b>Class java.security.BasicPermission</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A basic permission represents a binary permission--that is, a
permission that you either have or do not have. Hence, the action
string in a basic permission is unused. A basic permission follows
the same naming convention as java properties: a series of
period-separated words, like "exitVM" or
"xyz.payrollPermission". The
<tt class="literal">BasicPermission</tt> class is capable of wildcard
matching if the last word in the permission is an asterisk. This
class serves as the superclass for a number of default permission
classes.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.BasicPermission
	extends java.security.Permission
	implements java.io.Serializable {

	// Constructors
	public BasicPermission(String);
	public BasicPermission(String, String);

	// Instance Methods
	public boolean equals(Object);
	public String getActions();
	public int hashCode();
	public boolean implies(Permission);
	public PermissionCollection newPermissionCollection();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Permission</tt>, <tt class="command">PermissionCollection</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2062"></a><a name="INDEX-2063"></a><tr>
<td align="left"><font size="+2"><b>Class java.security.CodeSource</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A code source encapsulates the location from which a particular class
was loaded and the public keys (if any) that were used to sign the
class. This information is used by a secure class loader to define a
protection domain associated with the class; typically, the class
loader is the only object that uses a code source.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class java.security.CodeSource
	extends java.lang.Object
	implements java.io.Serializable {

	// Constructors
	public CodeSource(URL, Certificate[]);

	// Instance Methods
	public boolean equals(Object);
	public final Certificate[] getCertificates();
	public boolean implies();
	public final URL getLocation();
	public int hashCode();
	public String toString();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">SecureClassLoader</tt>, <tt class="command">ProtectionDomain</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2064"></a><a name="INDEX-2065"></a>
<a name="INDEX-2066"></a><a name="INDEX-2067"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.DigestInputStream</b></font></td>
<td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A digest input stream is an input filter stream that is associated
with a message digest object. As data is read from the input stream,
it is automatically passed to its associated message digest object;
once all the data has been read, the message digest object will
return the hash of the input data. You must have an existing input
stream and an initialized message digest object to construct this
class; once the data has passed through the stream, call the methods
of the message digest object explicitly to obtain the hash.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class java.security.DigestInputStream
	extends java.io.FilterInputStream {

	// Variables
	protected MessageDigest digest;

	// Constructors
	public DigestInputStream(InputStream, MessageDigest);

	// Instance Methods
	public MessageDigest getMessageDigest();
	public void on(boolean);
	public int read();
	public int read(byte[], int, int);
	public void setMessageDigest(MessageDigest);
	public String toString();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">DigestOutputStream</tt>, <tt class="command">MessageDigest</tt>
</p>

</div>
a><a name="INDEX-2068"></a>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2069"></a><a name="INDEX-2070"></a><a name="INDEX-2071"></a><tr>
<td align="left"><font size="+2"><b>Class java.security.DigestOutputStream</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A digest output stream is a filter output stream that is associated
with a message digest object. When data is written to the output
stream, it is also passed to the message digest object so that when
the data has all been written to the output stream, the hash of that
data may be obtained from the digest object. You must have an
existing output stream and an initialized message digest object to
use this class.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public classs java.security.DigestOutputStream
	extends java.io.FilterOutputStream {

	// Variables
	protected MessageDigest digest;

	// Constructors
	public DigestOutputStream(OutputStream, MessageDigest);

	// Instance Methods
	public MessageDigest getMessageDigest();
	public void on(boolean);
	public void setMessageDigest(MessageDigest);
	public String toString();
	public void write(int);
	public void write(byte[], int, int);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">DigestInputStream</tt>, <tt class="command">MessageDigest</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2072"></a><a name="INDEX-2073"></a><tr>
<td align="left"><font size="+2"><b>Interface java.security.Guard</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>An object of a class that implements the <tt class="literal">Guard</tt>
interface may be used to protect access to a resource. In typical
usage, a guard is an object of the <tt class="literal">Permission</tt>
class, so that access to the guarded resource is granted if and only
if the current thread has been granted the given permission. This
interface is used by the <tt class="literal">GuardedObject</tt> class to
guard access to another object.
</p>
</table>
</div>


<h3>Interface Definition</h3><blockquote>
<pre class="programlisting">public abstract interface java.security.Guard {

	// Instance Methods
	public abstract void checkGuard(Object);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">GuardedObject</tt>, <tt class="command">Permission</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2074"></a><a name="INDEX-2075"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.GuardedObject</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A guarded object is a container for another object. The contained
object is guarded using an object that implements the
<tt class="literal">Guard</tt> interface; in typical usage, that would be
an instance of a <tt class="literal">Permission</tt> object. The guarded
object stores a serialized version of the object it contains; the
contained object will be deserialized and returned by the
<tt class="literal">getObject()</tt> method only if the guard object
allows access.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class java.security.GuardedObject
	extends java.lang.Object
	implements java.io.Serializable {

	// Constructors
	public GuardedObject(Serializable, Guard);

	// Instance Methods
	public Object getObject();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Guard</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2076"></a><a name="INDEX-2077"></a><tr>
<td align="left"><font size="+2"><b>Class java.security.Identity</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>An identity encapsulates public knowledge about an entity (that is, a
person or a corporation--or anything that could hold a public
key). Identities have names and may hold a public key, along with a
certificate chain to validate the public key. An identity may belong
to an identity scope, but this feature is optional and is not
typically used. This class is deprecated in 1.2.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.Identity
	extends java.lang.Object
	implements java.security.Principal, java.io.Serializable {

	// Constructors
	protected Identity();
	public Identity(String);
	public Identity(String, IdentityScope);

	// Instance Methods
	public void addCertificate(Certificate);
	public final boolean equals(Object);
	public Certificate[] certificates();
	public String getInfo();
	public final String getName();
	public PublicKey getPublicKey();
	public final IdentityScope getScope();
	public int hashCode();
	public void removeCertificate(Certificate);
	public void setInfo(String);
	public void setPublicKey(PublicKey);
	public String toString();
	public String toString(boolean);

	// Protected Instance Methods
	protected boolean identityEquals(Identity);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Certificate</tt>, <tt class="command">IdentityScope</tt>, <tt class="command">Principal</tt>, <tt class="command">PublicKey</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2078"></a><a name="INDEX-2079"></a><a name="INDEX-2080"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.IdentityScope</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>An identity scope is a collection of identities; an identity may
belong to a single identity scope. The notion is that scope is
recursive: an identity scope may itself belong to another identity
scope (or it may be unscoped). This class is deprecated in Java 1.2.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.IdentityScope
	extends java.security.Identity {

	// Constructors
	protected IdentityScope();
	public IdentityScope(String);
	public IdentityScope(String, IdentityScope);

	// Class Methods
	public static IdentityScope getSystemScope();
	protected static void setSystemScope(IdentityScope);

	// Instance Methods
	public abstract void addIdentity(Identity);
	public abstract Identity getIdentity(String);
	public Identity getIdentity(Principal);
	public abstract Identity getIdentity(PublicKey);
	public abstract Enumeration identities();
	public abstract void removeIdentity(Identity);
	public abstract int size();
	public String toString();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Identity</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2081"></a><a name="INDEX-2082"></a><tr>
<td align="left"><font size="+2"><b>Interface java.security.Key</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A key is essentially a series of bytes that are used by a
cryptographic algorithm. Depending on the type of the key, the key
may be used only for particular operations and only for particular
algorithms, and it may have certain mathematical properties
(including a mathematical relationship to other keys). The series of
bytes that comprise a key is the encoded format of the key.
</p>
</table>
</div>


<h3>Interface Definition</h3><blockquote>
<pre class="programlisting">public abstract interface java.security.Key
	implements java.io.Serializable {

	// Instance Methods
	public abstract String getAlgorithm();
	public abstract byte[] getEncoded();
	public abstract String getFormat();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">PrivateKey</tt>, <tt class="command">PublicKey</tt>, <tt class="command">SecretKey</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2083"></a><a name="INDEX-2084"></a><a name="INDEX-2085"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.KeyFactory</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A key factory is an engine class that is capable of translating
between public or private key objects and their external format (and
vice versa). Hence, key factories may be used to import or export
keys, as well as to translate keys of one class (e.g.,
<tt class="literal">com.acme.DSAPublicKey</tt>) to another class (e.g.,
<tt class="literal">com.xyz.DSAPublicKeyImpl</tt>) as long as those
classes share the same base class. Key factories operate in terms of
key specifications; these specifications are the various external
formats in which a key may be transmitted. Keys are imported via the
<tt class="literal">generatePublic()</tt> and
<tt class="literal">generatePrivate()</tt> methods, they are exported via
the <tt class="literal">getKeySpec()</tt> method, and they are translated
via the <tt class="literal">translateKey()</tt> method.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class java.security.KeyFactory
	extends java.lang.Object {

	// Constructors
	protected KeyFactory(KeyFactorySpi, Provider, String);

	// Class Methods
	public static final KeyFactory getInstance(String);
	public static final KeyFactory getInstance(String, String);

	// Instance Methods
	public final PrivateKey generatePrivate(KeySpec);
	public final PublicKey generatePublic(KeySpec);
	public final String getAlgorithm();
	public final KeySpec getKeySpec(Key, Class);
	public final Provider getProvider();
	public final Key translateKey(Key);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">KeyFactorySpi</tt>, <tt class="command">KeySpec</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2086"></a><a name="INDEX-2087"></a><tr>
<td align="left"><font size="+2"><b>Class java.security.KeyFactorySpi</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This is the Service Provider Interface for a key factory; if you want
to implement your own key factory, you do so by extending this class
and registering your implementation with an appropriate security
provider. Instances of this class are expected to know how to create
key objects from external key specifications and vice versa.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.KeyFactorySpi
	extends java.lang.Object {

	// Constructors
	public KeyFactorySpi();

	// Protected Instance Methods
	protected abstract PrivateKey engineGeneratePrivate(KeySpec);
	protected abstract PublicKey engineGeneratePublic(KeySpec);
	protected abstract KeySpec engineGetKeySpec(Key, Class);
	protected abstract Key engineTranslateKey(Key);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">KeyFactory</tt>, <tt class="command">KeySpec</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2088"></a><a name="INDEX-2089"></a><a name="INDEX-2090"></a><tr>
<td align="left"><font size="+2"><b>Class java.security.KeyPair</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>Public and private keys are mathematically related to each other and
hence are generated together; this class provides an encapsulation of
both the keys as a convenience to key generation.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public final class java.security.KeyPair
	extends java.lang.Object {

	// Constructors
	public KeyPair(PublicKey, PrivateKey);

	// Instance Methods
	public PrivateKey getPrivate();
	public PublicKey getPublic();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">KeyPairGenerator</tt>, <tt class="command">PrivateKey</tt>, <tt class="command">PublicKey</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2091"></a><a name="INDEX-2092"></a>

<tr>
<td align="left"><font size="+2"><b>Class KeyPairGenerator</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This is an engine class that is capable of generating a public key
and its related private key. Instances of this class will generate
key pairs that are appropriate for a particular algorithm (DSA, RSA,
etc.). A key pair generator may be initialized to return keys of a
particular strength (which is usually the number of bits in the key),
or it may be initialized in an algorithmic-specific way; the former
case is the one implemented by most key generators. An instance of
this class may be used to generate any number of key pairs.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.KeyPairGenerator
	extends java.security.KeyPairGeneratorSpi {

	// Constructors
	protected KeyPairGenerator(String);

	// Class Methods
	public static KeyPairGenerator getInstance(String);
	public static KeyPairGenerator getInstance(String, String);

	// Instance Methods
	public final KeyPair genKeyPair();
	public String getAlgorithm();
	public final Provider getProvider();
	public void initialize(int);
	public void initialize(int, SecureRandom)
	public void initialize(AlgorithmParameterSpec, SecureRandom);
	public void initialize(AlgorithmParameterSpec);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">AlgorithmParameterSpec</tt>, <tt class="command">KeyPair</tt>
</p>

</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2093"></a><a name="INDEX-2094"></a>

<tr>
<td align="left"><font size="+2"><b>Class KeyPairGeneratorSpi
</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This is the Service Provider Interface class for the key pair
generation engine; if you want to implement your own key pair
generator, you must extend this class and register your
implementation with an appropriate security provider. Instances of
this class must be prepared to generate key pairs of a particular
strength (or length); they may optionally accept an
algorithmic-specific set of initialization values.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.KeyPairGeneratorSpi
	extends java.lang.Object {

	// Constructors
	public KeyPairGeneratorSpi();

	// Instance Methods
	public abstract KeyPair generateKeyPair();
	public abstract void initialize(int, SecureRandom);
	public void initialize(AlgorithmParameterSpec, SecureRandom);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">AlgorithmParameterSpec</tt>, <tt class="command">KeyPairGenerator</tt>, <tt class="command">SecureRandom</tt>
</p>

</div>
<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2095"></a><a name="INDEX-2096"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.KeyStore</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This class is responsible for maintaining a set of keys and their
related owners. In the default implementation, this class maintains
the <em class="filename">.keystore</em> file held in the user's home
directory, but you may provide an alternate implementation of this
class that holds keys anywhere: in a database, on a remote
filesystem, on a Java smart card, or any and all of the above. The
class that is used to provide the default keystore implementation is
specified by the <tt class="literal">keystore</tt> property in the
<em class="filename">$JDKHOME/lib/java.security</em> file. The keystore
may optionally require a passphrase for access to the entire keystore
(via the <tt class="literal">load()</tt> method); this passphrase is
often used only for sanity checking and is often not specified at
all. On the other hand, private keys in the keystore should be
protected (e.g., encrypted) by using a different passphrase for each
private key.
</p>

<p>Note that although the keystore associates entities with keys, it
does not rely upon the <tt class="literal">Identity</tt> class itself.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.KeyStore
	extends java.lang.Object {

	// Constructors
	protected KeyStore(KeyStoreSpi, Provider, String);

	// Class Methods
	public static final String getDefaultType();
	public static KeyStore getInstance(String);
	public static KeyStore getInstance(String, String);

	// Instance Methods
	public final Enumeration aliases();
	public final boolean containsAlias(String);
	public final void deleteEntry(String);
	public final Certificate getCertificate(String);
	public final String getCertificateAlias(Certificate);
	public final Certificate[] getCertificateChain(String);
	public final Date getCreationDate(String);
	public final Key getKey(String, char[]);
	public final Provider getProvider();
	public final String getType();
	public final boolean isCertificateEntry(String);
	public final boolean isKeyEntry(String);
	public final void load(InputStream, char[]);
	public final void setCertificateEntry(String, Certificate);
	public final void setKeyEntry(String, Key, char[], Certificate[]);
	public final void setKeyEntry(String, byte[], Certificate[]);
	public final int size();
	public final void store(OutputStream, char[]);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Certificate</tt>, <tt class="command">PublicKey</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2097"></a><a name="INDEX-2098"></a><tr>
<td align="left"><font size="+2"><b>Class java.security.MessageDigest</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>The message digest class is an engine class that can produce a
one-way hash value for any arbitrary input. Message digests have two
properties: they produce a unique hash for each set of input data
(subject to the number of bits that are output), and the original
input data is indiscernible from the hash output. The hash value is
variously called a digital fingerprint or a digest. Message digests
are components of digital signatures, but they are useful in their
own right to verify that a set of data has not been corrupted. Once a
digest object is created, data may be fed to it via the
<tt class="literal">update()</tt> methods; the hash itself is returned
via the <tt class="literal">digest()</tt> method.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.MessageDigest
	extends java.security.MessageDigestSpi {

	// Constructors
	protected MessageDigest(String);

	// Class Methods
	public static MessageDigest getInstance(String);
	public static MessageDigest getInstance(String, String);
	public static boolean isEqual(byte[], byte[]);

	// Instance Methods
	public Object clone();
	public byte[] digest();
	public byte[] digest(byte[]);
	public int digest(byte[], int, int);
	public final String getAlgorithm();
	public final int getDigestLength();
	public final Provider getProvider();
	public void reset();
	public String toString();
	public void update(byte);
	public void update(byte[]);
	public void update(byte[], int, int);
}</pre>
</blockquote>


</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2099"></a><a name="INDEX-2100"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.MessageDigestSpi</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This is the Service Provider Interface for the message digest engine;
if you want to implement your own message digest class, you do so by
extending this class and registering your implementation with an
appropriate security provider. Since the
<tt class="literal">MessageDigest</tt> class itself extends this class,
you may also extend the <tt class="literal">MessageDigest</tt> class
directly. Implementations of this class are expected to accumulate a
hash value over data that is fed to it as a series of arbitrary
bytes.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.MessageDigestSpi
	extends java.lang.Object {

	// Constructors
	public MessageDigestSpi();

	// Instance Methods
	public Object clone();

	// Protected Instance Methods
	protected abstract byte[] engineDigest();
	protected int engineDigest(byte[], int, int);
	protected int engineGetDigestLength();
	protected abstract void engineReset();
	protected abstract void engineUpdate(byte);
	protected abstract void engineUpdate(byte[], int, int);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">MessageDigest</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2101"></a><a name="INDEX-2102"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.Permission</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This class forms the base class for all types of permissions that are
used by the access controller. A permission object encapsulates a
particular operation (e.g., reading the file
<em class="filename">/tmp/foo</em>). It does not, however, grant
permission for that operation; rather, the permission object is
constructed and passed to the access controller to see if that
operation is one which the current security policy has defined as a
permissible operation.
</p>

<p>Permissions have names (e.g., the name of the file, or the name of
the operation) and may optionally have actions (the semantics of
which are dependent upon the type of permission). It is up to the
<tt class="literal">implies()</tt> method to determine if one permission
grants another; this allows you to specify wildcard-type permissions
that imply specific permissions (e.g., the permission named
"*" may imply the permission named "myfile").
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.Permission
	extends java.lang.Object
	implements java.security.Guard, java.io.Serializable {

	// Constructors
	public Permission(String);

	// Instance Methods
	public void checkGuard(Object);
	public abstract boolean equals(Object);
	public abstract String getActions();
	public final String getName();
	public abstract int hashCode();
	public abstract boolean isReadOnly();
	public void setReadOnly();
	public PermissionCollection newPermissionCollection();
	public String toString();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">AccessController</tt>, <tt class="command">BasicPermission</tt>, <tt class="command">PermissionCollection</tt>, <tt class="command">Policy</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2103"></a><a name="INDEX-2104"></a><tr>
<td align="left"><font size="+2"><b>Class java.security.PermissionCollection
</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>As you might infer, a permission collection is a collection of
permission objects. In theory, a permission collection can be a set
of arbitrary, unrelated permission objects; however, that usage is
best avoided and left to the <tt class="literal">Permissions</tt> class.
Hence, a permission collection should be thought of as a collection
of one type of permission: a set of file permissions, a set of socket
permissions, etc. A permission collection is responsible for
determining if an individual permission (passed as a parameter to the
<tt class="literal">implies()</tt> method) is contained in the set of
permissions in the object; presumably, it will do that more
efficiently than by calling the <tt class="literal">implies()</tt> method
on each permission in the collection. If you implement a new
permission class that has wildcard semantics for its names, then you
must implement a corresponding permission collection to aggregate
instances of that class (if you don't need wildcard matching,
the default implementation of the <tt class="literal">Permission</tt>
class will provide an appropriate collection).
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.PermissionCollection
	extends java.lang.Object
	implements java.io.Serializable {

	// Constructors
	public PermissionCollection();

	// Instance Methods
	public abstract void add(Permission);
	public abstract Enumeration elements();
	public abstract boolean implies(Permission);
	public boolean isReadOnly();
	public void setReadOnly();
	public String toString();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Permission</tt>, <tt class="command">Permissions</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2105"></a><a name="INDEX-2106"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.Permissions
</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This class is an aggregate of permission collections. Hence, it is an
appropriate collection object for a group of unrelated permission,
which is its typical use: the <tt class="literal">Policy</tt> class uses
instances of this class to represent all the permissions associated
with a particular protection domain.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public final class java.security.Permissions
	extends java.security.PermissionCollection
	implements java.io.Serializable {

	// Constructors
	public Permissions();

	// Instance Methods
	public void add(Permission);
	public Enumeration elements();
	public boolean implies(Permission);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Permission</tt>, <tt class="command">PermissionCollection</tt>, <tt class="command">Policy</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2107"></a><a name="INDEX-2108"></a><a name="INDEX-2109"></a><tr>
<td align="left"><font size="+2"><b>Class java.security.Policy
</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>The <tt class="literal">Policy</tt> class encapsulates all the specific
permissions that the virtual machine knows about. This set of
permissions is by default read from a series of URLs specified by
<tt class="literal">policy.url</tt> properties in the
<em class="filename">$JDKHOME/lib/security/java.security</em> file,
although applications may specify their own policy objects by using
the <tt class="literal">setPolicy()</tt> method of this class.
Alternately, a different default implementation of the policy class
may be specified by changing the <tt class="literal">policy.provider</tt>
property in the <em class="filename">java.security</em> file.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.Policy
	extends java.lang.Object {

	// Constructors
	public Policy();

	// Class Methods
	public static Policy getPolicy();
	public static void setPolicy(Policy);

	// Instance Methods
	public abstract PermissionCollection getPermissions(CodeSource);
	public abstract void refresh();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Permission</tt>, <tt class="command">Permissions</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2110"></a><a name="INDEX-2111"></a><tr>
<td align="left"><font size="+2"><b>Interface java.security.Principal</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A principal is anything that has a name, such as an identity. The
name in this case is often an X.500 distinguished name, but that is
not a requirement.
</p>
</table>
</div>


<h3>Interface Definition</h3><blockquote>
<pre class="programlisting">public abstract interface java.security.Principal {

	// Instance Methods
	public abstract boolean equals(Object);
	public abstract String getName();
	public abstract int hashCode();
	public abstract String toString();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Identity</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2112"></a><a name="INDEX-2113"></a>
<tr>
<td align="left"><font size="+2"><b>Interface java.security.PrivateKey</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A private key is a key with certain mathematical properties that
allows it to perform inverse cryptographic operations with its
matching public key. Classes implement this interface only for type
identification.
</p>
</table>
</div>


<h3>Interface Definition</h3><blockquote>
<pre class="programlisting">public abstract interface java.security.PrivateKey
	implements java.security.Key {
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Key</tt>, <tt class="command">PublicKey</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2114"></a><a name="INDEX-2115"></a><tr>
<td align="left"><font size="+2"><b>Class java.security.ProtectionDomain</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A protection domain encapsulates the location from which a class was
loaded and the keys used to sign the class (that is, a
<tt class="literal">CodeSource</tt> object) and the set of permissions
that should be granted to that class. These protection domains are
consulted by the access controller to determine if a particular
operation should succeed; if the operation is in the set of
permissions in each protection domain on the stack, then the
operation will succeed. This class is typically only used within a
class loader.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class java.security.ProtectionDomain
	extends java.lang.Object {

	// Constructors
	public ProtectionDomain(CodeSource, PermissionCollection);

	// Instance Methods
	public final CodeSource getCodeSource();
	public final PermissionCollection getPermissions();
	public boolean implies(Permission);
	public String toString();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command"> AccessController</tt>, <tt class="command">CodeSource</tt>, <tt class="command">Permissions</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2116"></a><a name="INDEX-2117"></a><a name="INDEX-2118"></a><tr>
<td align="left"><font size="+2"><b>Class java.security.Provider</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>An instance of the <tt class="literal">Provider</tt> class is responsible
for mapping particular implementations to desired algorithm/engine
pairs; instances of this class are consulted (indirectly) by the
<tt class="literal">getInstance()</tt> methods of the engine classes to
find a class that implements the desired operation. Instances of this
class must be registered either with the
<tt class="literal">Security</tt> class or by listing them in the
<em class="filename">$JDKHOME/lib/security/java.security</em> file as a
<tt class="literal">security.provider</tt> property.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.Provider
	extends java.util.Properties {

	// Constructors
	protected Provider(String, double, String);

	// Instance Methods
	public synchronized void clear();
	public Set entrySet();
	public String getInfo();
	public String getName();
	public double getVersion();
	public Set keySet();
	public synchronized void load(InputStream);
	public synchronized Object put(Object, Object);
	public synchronized void putAll(Map);
	public synchronized Object remove(Object);
	public String toString();
	public Collection values();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Security</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2119"></a><a name="INDEX-2120"></a><a name="INDEX-2121"></a>
<tr>
<td align="left"><font size="+2"><b>Interface java.security.PublicKey</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A public key is a key with certain mathematical properties that
allows it to perform inverse cryptographic operations with its
matching private key. Classes implement this interface only for type
identification.
</p>
</table>
</div>


<h3>Interface Definition</h3><blockquote>
<pre class="programlisting">public abstract interface java.security.PublicKey
	implements java.security.Key {
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Key</tt>, <tt class="command">PrivateKey</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2122"></a><a name="INDEX-2123"></a><a name="INDEX-2124"></a><tr>
<td align="left"><font size="+2"><b>Class java.security.SecureClassLoader</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A secure class loader is a class loader that is able to associate
code sources (and hence protection domains) with the classes that it
loads (classes loaded by a traditional class loader have a default,
null protection domain). All new class loaders are expected to extend
this class.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class java.security.SecureClassLoader
	extends java.lang.ClassLoader {

	// Constructors
	protected SecureClassLoader();
	protected SecureClassLoader(ClassLoader);

	// Protected Instance Methods
	protected final Class defineClass(String, byte[], int, int,
							CodeSource);
	protected PermissionCollection getPermissions(CodeSource);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">ClassLoader</tt>, <tt class="command">CodeSource</tt>, <tt class="command">ProtectionDomain</tt>
</p>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2125"></a><a name="INDEX-2126"></a><a name="INDEX-2127"></a><tr>
<td align="left"><font size="+2"><b>Class java.security.SecureRandom</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This class generates random numbers. Unlike the standard
random-number generator, numbers generated by this class are
cryptographically secure--that is, they are less subject to
pattern guessing and other attacks that can be made upon a
traditional random-number generator.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class java.security.SecureRandom
	extends java.util.Random {

	// Constructors
	public SecureRandom();
	public SecureRandom(byte[]);

	// Class Methods
	public static byte[] getSeed(int);

	// Instance Methods
	public synchronized void nextBytes(byte[]);
	public void setSeed(long);
	public synchronized void setSeed(byte[]);

	// Protected Instance Methods
	protected final int next(int);
}</pre>
</blockquote>

</div>


<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2128"></a><a name="INDEX-2129"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.Security</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This class manages the list of providers that have been installed
into the virtual machine; this list of providers is consulted to find
an appropriate class to provide the implementation of a particular
operation when the <tt class="literal">getInstance()</tt> method of an
engine class is called. The list of providers initially comes from
the <em class="filename">$JDKHOME/lib/security/java.security</em> file,
and applications may use methods of this class to add and remove
providers from that list.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public final class java.security.Security
	extends java.lang.Object {

	// Class Methods
	public static int addProvider(Provider);
	public static String getAlgorithmProperty(String, String);
	public static String getProperty(String);
	public static Provider getProvider(String);
	public static Provider[] getProviders();
	public static int insertProviderAt(Provider, int);
	public static void removeProvider(String);
	public static void setProperty(String, String);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Provider</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2130"></a><a name="INDEX-2131"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.SecurityPermission</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This class represents permissions to interact with the methods of
the<tt class="literal"> java.security</tt> package. This permission is a
basic permission; it does not support actions. Security permissions
are checked by the <tt class="literal">Identity</tt>,
<tt class="literal">Signer</tt>, and <tt class="literal">Provider</tt>
classes.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public final class java.security.SecurityPermission
	extends java.security.BasicPermission {

	// Constructors
	public SecurityPermission(String);
	public SecurityPermission(String, String);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">BasicPermission</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2132"></a><a name="INDEX-2133"></a><a name="INDEX-2134"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.Signature</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This engine class provides the ability to create or verify digital
signatures by employing different algorithms that have been
registered with the <tt class="literal">Security</tt> class. As with all
engine classes, instances of this class are obtained via the
<tt class="literal">getInstance()</tt> method. The signature object must
be initialized with the appropriate private key (to sign) or public
key (to verify), then data must be fed to the object via the
<tt class="literal">update()</tt> methods, and then the signature can be
obtained (via the <tt class="literal">sign()</tt> method) or verified
(via the <tt class="literal">verify()</tt> method). Signature objects may
support algorithm-specific parameters, though this is not a common
implementation.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.Signature
	extends java.security.SignatureSpi {

	// Constants
	protected static final int SIGN;
	protected static final int UNINITIALIZED;
	protected static final int VERIFY;

	// Variables
	protected int state;

	// Constructors
	protected Signature(String);

	// Class Methods
	public static Signature getInstance(String);
	public static Signature getInstance(String, String);

	// Instance Methods
	public Object clone();
	public final String getAlgorithm();
	public final Object getParameter(String);
	public final Provider getProvider();
	public final void initSign(PrivateKey);
	public final void initSign(PrivateKey, SecureRandom);
	public final void initVerify(PublicKey);
	public final void setParameter(String, Object);
	public final void setParameter(AlgorithmParameterSpec);
	public final byte[] sign();
	public final int sign(byte[], int, int);
	public String toString();
	public final void update(byte);
	public final void update(byte[]);
	public final void update(byte[], int, int);
	public final boolean verify(byte[]);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Provider</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2135"></a><a name="INDEX-2136"></a><a name="INDEX-2137"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.SignatureSpi</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>This is the Security Provider Interface for the signature engine. If
you want to implement your own signature engine, you must extend this
class and register your implementation with an appropriate security
provider. Since the <tt class="literal">Signature</tt> class already
extends this class, your implementation may extend the
<tt class="literal">Signature</tt> class directly. Implementations of
this class must be prepared both to sign and to verify data that is
passed to the <tt class="literal">engineUpdate()</tt> method.
Initialization of the engine may optionally support a set of
algorithm-specific parameters.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.SignatureSpi
	extends java.lang.Object {

	// Variables
	protected SecureRandom appRandom;

	// Constructors
	public SignatureSpi();

	// Instance Methods
	public Object clone();

	// Protected Instance Methods
	protected abstract Object engineGetParameter(String);
	protected abstract void engineInitSign(PrivateKey);
	protected void engineInitSign(PrivateKey, SecureRandom);
	protected abstract void engineInitVerify(PublicKey);
	protected abstract void engineSetParameter(String, Object);
	protected void engineSetParameter(AlgorithmParameterSpec);
	protected abstract byte[] engineSign();
	protected final int engineSign(byte[], int, int);
	protected abstract void engineUpdate(byte);
	protected abstract void engineUpdate(byte[], int, int);
	protected abstract boolean engineVerify(byte[]);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Provider</tt>, <tt class="command">Signature</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2138"></a><a name="INDEX-2139"></a><a name="INDEX-2140"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.SignedObject</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A signed object is a container class for another (target) object; the
signed object contains a serialized version of the target along with
a digital signature of the data contained in the target object. You
must provide a serializable object and a private key to create a
signed object, after which you can remove the embedded object and
verify the signature of the signed object by providing the
appropriate public key.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public final class java.security.SignedObject
	extends java.lang.Object
	implements java.io.Serializable {

	// Constructors
	public SignedObject(Serializable, PrivateKey, Signature);

	// Instance Methods
	public String getAlgorithm();
	public Object getObject();
	public byte[] getSignature();
	public boolean verify(PublicKey, Signature);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Signature</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2141"></a><a name="INDEX-2142"></a><a name="INDEX-2143"></a>
<a name="INDEX-2144"></a><a name="INDEX-2145"></a>
<tr>
<td align="left"><font size="+2"><b>Class java.security.Signer</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>A signer abstracts the notion of a principal (that is, an individual
or a corporation) that has a private key and a corresponding public
key. Signers may optionally belong to an identity scope. This class
is deprecated in1.2.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public abstract class java.security.Signer
	extends java.security.Identity {

	// Constructors
	protected Signer();
	public Signer(String);
	public Signer(String, IdentityScope);

	// Instance Methods
	public PrivateKey getPrivateKey();
	public final void setKeyPair(KeyPair);
	public String toString();
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Identity</tt>, <tt class="command">Principal</tt>
</p>

</div>

<div class="refentry">
<table width="515" border="0" cellpadding="5">
<a name="INDEX-2146"></a><a name="INDEX-2147"></a>
`<tr>
<td align="left"><font size="+2"><b>Class java.security.UnresolvedPermission</b></font></td><td align="right"><font size="+2"><b></b></font></td>
</tr>
<tr>
<td colspan="2">
<table width="100%">
<tr>
<td bgcolor="#000000"><img src="gifs/spacer.gif" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/gifs/spacer.gif" width="1" height="1"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td align="left"><font size="+2"><b></b></font></td><td align="right"><font size="+2"><b><i></i></b></font></td>
</tr>
</table>




<div class="refsynopsisdiv">
<table border="0">
<p>An unresolved permission is one for which the implementing class has
not been loaded. If you define a custom permission, the
<tt class="literal">Policy</tt> class will represent that custom
permission as an unresolved permission until it is time for the
<tt class="literal">Policy</tt> class to actually load the class; if the
class cannot be found, then it will remain an unresolved permission.
By default, the <tt class="literal">implies()</tt> method of this class
always returns <tt class="literal">false</tt>.
</p>
</table>
</div>


<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public final class UnresolvedPermission extends Permission
	implements java.io.Serializable {

	// Constructors
	public UnresolvedPermission(String, String, String, Certificate[]);

	// Instance methods
	public boolean equals(Object);
	public int hashCode();
	public boolean implies(Permission);
}</pre>
</blockquote>


<p>
<span class="refsect1"><b>See also:</b> </span><tt class="command">Permission</tt>
</p>

</div>


















<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appc_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appc_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="appd_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appd_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">C.3. Security References</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">D.2. Package java.security.cert</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
