<html>
<head>
<title>Security Tools (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Security Tools">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch13_09.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm">Java Security</a></td><td align="right" valign="top" width="172"><a href="appa_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appa_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Appendix A.  Security Tools</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="appa_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appa_01.htm">The keytool</a>
<br>
<a href="appa_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appa_02.htm">The jarsigner Tool</a>
<br>
<a href="appa_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appa_03.htm">The policytool</a>
<br>
<a href="appa_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appa_04.htm">Files to Administer by Hand</a>
<br>
</p>
</div>


<p>In this appendix, we'll discuss the tools that come with the
JDK that allow developers, end users, and system administrators to
deal with the security aspects of the Java platform. These tools are
only available in Java 1.2,<a href="#FOOTNOTE-1">[1]</a> since they primarily deal with operations that require
the support of 1.2.<a href="#FOOTNOTE-2">[2]</a> As Java's security model advances, these
tools have become primary interfaces to establishing a secure sandbox
for Java applications.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1]1.2 is now Java 2.</p>
</blockquote>
<blockquote class="footnote"> <a name="FOOTNOTE-2"></a>
<p>[2]The <tt class="literal">javakey</tt>
utility in 1.1 can be used to sign JAR files and to operate like the
<tt class="literal">keytool</tt>; that utility is obsolete in 1.2.
</p> </blockquote>

<p>To a lesser extent, these tools have become an interface for
establishing a secure sandbox for Java applets as well. However, as
we've seen, not all the security features of the Java platform
have yet been uniformly adopted by all browsers. In part, it is a
problem with logistics. As this book went to press, Java 1.2 was
still a new release. Clearly it will take some time before these new
features can be propagated to browsers. Part of the problem, though,
lies in the fact that Java applications (and Java browsers)
ultimately decide upon their own security features.
</p>

<p>This last fact is true of your own applications as well: you can
certainly use the <tt class="literal">keytool</tt> utility that comes
with the JDK to manage your public key/private key databases. But if
it is appropriate, you may want to replace (or at least supplement)
the <tt class="literal">keytool</tt> with your own key management tool
that handles some of the situations we discussed in <a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_01.htm">Chapter 11, "Key Management"</a>.
</p>



<h2 class="sect1">A.1. The keytool</h2>

<p>
<a name="INDEX-1786"></a><a name="INDEX-1787"></a><a name="INDEX-1788"></a>In <a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_01.htm">Chapter 11, "Key Management"</a> we discussed the <tt class="literal">KeyStore</tt>
class, which provides an interface to a key management system. The
Java platform comes with a
tool--<tt class="literal">keytool</tt>--that provides an
administrative interface to that class. <tt class="literal">Keytool
</tt>allows end users and system administrators to add, delete,
and modify entries in the keystore (provided that they have
sufficient permissions, of course).
</p>

<p>When we discussed the <tt class="literal">KeyStore</tt> class, we
mentioned that it had some limitations that may lead you to write
your own implementation of that class. The good news is that if you
write such a class, you may still use <tt class="literal">keytool</tt> to
administer your set of keys. Since <tt class="literal">keytool</tt> uses
the standard interface provided by the <tt class="literal">KeyStore</tt>
class, it will be (mostly) compatible with any new class that you
install into that interface (we'll remind you how to do that at
the end of this appendix). However, there are some exceptions to
this: <tt class="literal">keytool</tt> itself places some restrictions
upon the algorithms that may be used to support particular keys.
</p>

<p>Before we examine the workings of <tt class="literal">keytool</tt>,
let's review a few objects that we talked about in <a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_01.htm">Chapter 11, "Key Management"</a>. When we discussed the
<tt class="literal">KeyStore</tt> class, we defined the following terms:
</p>

<dl>
<dt>
<b>keystore</b>
</dt>
<dd>
<p>The <a name="INDEX-1789"></a>keystore is
the file that actually holds the set of keys;
<tt class="literal">keytool</tt> operates on this file. In other
implementations of the <tt class="literal">KeyStore</tt> class, the
keystore may not be a file--the keys in that implementation may
be held in a database or some other structure. Regardless, we refer
to the set of keys on disk (or wherever they are located) as the
keystore.
</p>

<p>In <tt class="literal">keytool</tt>, this file is called
<em class="filename">.keystore</em> and is held in the directory specified
by the property <tt class="literal">user.home</tt>. On Unix systems, this
directory defaults to the user's home directory (e.g.,
<em class="filename">$HOME</em>); on Windows systems, this directory
defaults to the concatenation of the HOMEDRIVE and HOMEPATH
environment variables (e.g., <em class="filename">C:\</em>).
</p>
</dd>

<dt>
<b>alias</b>
</dt>
<dd>
<p>An <a name="INDEX-1790"></a><a name="INDEX-1791"></a>alias is a shortened, keystore-specific
name for an entity that has a key in the keystore. I choose to store
my public and private key in my local keystore under the alias
"sdo"; if you have a copy of my public key, you may use
that alias, or you may use another alias (like
"ScottOaks"). The alias used for a particular entity is
completely up to the discretion of the individual who first enters
that entity into the keystore.
</p>
</dd>

<dt>
<b>DN (distinguished name)</b>
</dt>
<dd>
<p>The <a name="INDEX-1792"></a><a name="INDEX-1793"></a><a name="INDEX-1794"></a><a name="INDEX-1795"></a>
distinguished name for an entity in the keystore is a subset of its
full X.500 name. This is a long string; for example, my DN is:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">CN=Scott Oaks, OU=SMCC, O=Sun Microsystems, L=New York, S=NY, C=US</pre>
</blockquote>

<p>DNs are used by certificate authorities to refer to the entities to
whom they supply a certificate. Hence, unlike an alias, the DN for a
particular key is the same no matter what keystore it is located in:
if I send you my public key, it will have the DN encoded in the
public key's certificate.
</p>

<p>However, nothing prevents me from having two public keys with
different DNs (I might have one for personal use that omits
references to my place of employment). And there is no guarantee that
two unrelated individuals will not share the same DN (in fact, you
can count on this type of namespace collision to occur).
</p>
</dd>


<dt>
<b>key entries and certificate entries</b>
</dt>
<dd>
<p>There are two types of entries in the keystore:
<a name="INDEX-1796"></a><a name="INDEX-1797"></a><a name="INDEX-1798"></a>key entries and certificate entries. A
key entry is an entry that has a private key as well as a
corresponding public key. The public key in this case is embedded in
a certificate, and there is a chain of certificates that vouch for
the public key.
</p>

<p>A certificate entry, on the other hand, does not contain a private
key; it contains only a public key held in a certificate. In
addition, there is only a single certificate associated with this
entry.
</p>
</dd>

</dl>

<p>With that in mind, we'll look at the various commands that
<tt class="literal">keytool</tt> provides. At present,
<tt class="literal">keytool</tt> only has a command-line interface;
we'll look at the typical commands that add, modify, list, and
delete entries in the keystore.
</p>

<a name="SEC-AP-A-SECT-1.1"></a>
<h3 class="sect2">A.1.1. Global Options to keytool</h3>

<p>
<tt class="literal">Keytool</tt>implements a number of global
options--options that are available to most of its commands.
We'll list these as appropriate for each command, but
here's an explanation of what they do:
</p>

<dl>
<dt>
<b>-alias alias</b>
</dt>
<dd>
<p>
<a name="INDEX-1799"></a>Specify the alias the operation
should apply to (e.g., <tt class="literal">-alias sdo</tt>). The default
for this value is "mykey."
</p>
</dd>

<dt>
<b>-dname distinguishedName</b>
</dt>
<dd>
<p>
<a name="INDEX-1800"></a>Specify the distinguished name. There
is no default for this value, and if you do not specify it on the
command line, you will be prompted to enter it when it is needed.
Letting <tt class="literal">keytool</tt>prompt you is generally easier,
since the tool will prompt for the name one field at a time.
Otherwise, you must enter the entire name in one quoted string, e.g.:
</p>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">-dname \
"CN=Scott Oaks, OU=SMCC, O=Sun Microsystems, L=New York, S=NY, C=US"
</pre>
</blockquote>
</dd>


<dt>
<b>-keypass password</b>
</dt>
<dd>
<p>
<a name="INDEX-1801"></a><a name="INDEX-1802"></a><a name="INDEX-1803"></a>Specify the password used to protect the
entire keystore. Access to any element in the keystore requires this
global password (programmatically, this is the password that is
passed to the <tt class="literal">load()</tt> method of the
<tt class="literal">KeyStore</tt> class). If this password is not
provided on the command line, you will be prompted for it. This is
generally more secure than typing it on a command line or in a script
where others might see it. Passwords must be at least six characters
long.
</p>

<p>Note that even though the <tt class="literal">KeyStore</tt> class allows
you to read entries from the keystore without this password,
<tt class="literal">keytool</tt> does not.
</p>
</dd>

<dt>
<b>-keystore filename</b>
</dt>
<dd>
<p>
<a name="INDEX-1804"></a>Specify the name of the file that
holds the keystore (programmatically, this file will be opened and
passed as the input stream argument to the
<tt class="literal">load()</tt> method of the
<tt class="literal">KeyStore</tt> class). The default value of this is
the <em class="filename">.keystore</em> file described above.
</p>
</dd>

<dt>
<b>-storepass password</b>
</dt>
<dd>
<p>
<a name="INDEX-1805"></a><a name="INDEX-1806"></a><a name="INDEX-1807"></a><a name="INDEX-1808"></a><a name="INDEX-1809"></a>
Specify the password used to protect a particular entry's
private key. This is usually not (and should not be) the same as the
global password. There should be a different password for each
private key that is specific to that entry. This allows the keystore
to be shared among many users. If this password is not provided on
the command line, you will be prompted for it, which is generally the
more secure way to enter this password.
</p>
</dd>

<dt>
<b>-storetype storetype</b>
</dt>
<dd>
<p>Specify the type of keystroke that the keytool should operate on. This defaults to the keystroke type in the <em class="filename">java.security</em> file, which defaults to JKS, the keystore type provided by the Sun security provider. </p>
</dd>

<dt>
<b>-v</b>
</dt>
<dd>
<p>Verbose--print some information about the operations
<tt class="literal">keytool</tt> is performing.
</p>
</dd>

</dl>


<a name="SEC-AP-A-SECT-1.2"></a>
<h3 class="sect2">A.1.2. Adding a Certificate Entry</h3>

<p>
<a name="INDEX-1810"></a><a name="INDEX-1811"></a><a name="INDEX-1812"></a>In order to add a certificate
entry to the database, you use this command:
</p>

<dl>
<dt>
<b>-import</b>
</dt>
<dd>
<p>
<a name="INDEX-1813"></a>Import a certificate into the
database. This command either creates a new certificate entry or
imports a certificate for an existing key entry. This command
supports the following options:
</p>

<dl>
<dt>
<b>-alias alias</b>
</dt>
<dt>
<b>-keypass keypass</b>
</dt>
<dt>
<b>-keystore keystore</b>
</dt>
<dt>
<b>-storepass storepass</b>
</dt>
<dt>
<b>-storetype storetype</b>
</dt>
<dt>
<b>-v</b>
</dt>
<dt>
<b>-file inputFile</b>
</dt>
<dd>
<p>
<a name="INDEX-1814"></a>The file containing the certificate
that is being imported. The certificate must be in RFC 1421 format.
The default is to read the data from <tt class="literal">System.in</tt>.
</p>
</dd>


<dt>
<b>-noprompt</b>
</dt>
<dd>
<p>
<a name="INDEX-1815"></a>Do not prompt the user about whether
or not the certificate should be accepted.<a name="INDEX-1816"></a>
</p>
</dd>


<dt>
<b>-trustcacerts</b>
</dt>
<dd>
<p>Use the <em class="filename">cacerts</em> file to obtain trusted certificates from certificate autorities that have signed the certificate that is being imported.</p>
</dd>


</dl>

</dd>

</dl>

<p>When you import a certificate, the information contained in that
certificate is printed out; this information includes the
distinguished names of the issuer and the principal, and the
fingerprint of the certificate. Well-known certificate authorities
will publish their fingerprints (on the Web, in trade papers, and
elsewhere). It is very important for you to verify the displayed
fingerprint with the published fingerprint in order to verify that
the certificate does indeed belong to the principal named in the
certificate.
</p>

<p>Let's say that I have a certificate for the ACME certificate
authority in the file <em class="filename">amce.cer</em>. I can import it
with this command:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">keytool -import -alias acme -file acme.cer</b>
Enter keystore password:  <b class="emphasis-bold">******</b>
Owner: CN=ACME, OU=ACME CA Services, O=ACME Inc., L=New York, S=NY, C=US
Issuer: CN=ACME, OU=ACME CA Services, O=ACME Inc., L=New York, S=NY, C=US
Serial Number: 34cbd057
Valid from: Sun Jan 25 18:52:55 EST 1998 until: Sat Apr 25 19:52:55 EDT 1998
Certificate Fingerprints:
	MD5:  51:4E:52:2C:1B:14:38:52:DB:30:5D:46:A9:46:FF:BB
	SHA1: 9F:B2:18:4A:63:8B:F8:EB:A6:A0:56:DB:C7:1B:B3:CC:F5:4B:BA:72
Trust this certificate? [no]:  <b class="emphasis-bold">yes</b>
</pre>
</blockquote>


<p>After typing in the command,<tt class="literal"> keytool </tt>prints the
given names, serial number, and fingerprints, and asks for
verification before it actually enters the certificate into the
keystore. After receiving a yes answer, the entry is made.<a name="INDEX-1817"></a>
</p>


<a name="SEC-AP-A-SECT-1.3"></a>
<h3 class="sect2">A.1.3. Adding a Key Entry</h3>

<p>
<a name="INDEX-1818"></a>To add a key entry to the database
(that is, an entry containing a private key), use this command:
</p>

<dl>
<dt>
<b>-genkey</b>
</dt>
<dd>
<p>
<a name="INDEX-1819"></a><a name="INDEX-1820"></a><a name="INDEX-1821"></a>Generate a key pair and add that entry
to the keystore. This command supports these options:
</p>
</dd>

<dt>
<b>-alias alias</b>
</dt>
<dt>
<b>-dname DN</b>
</dt>
<dt>
<b>-keypass keypass</b>
</dt>
<dt>
<b>-keystore keystore</b>
</dt>
<dt>
<b>-storepass storepass</b>
</dt>
<dd>
<p>-storetype storetype</p>
</dd>

<dt>
<b>-keyalg AlgorithmName</b>
</dt>
<dd>
<p>
<a name="INDEX-1822"></a>Use the given algorithm to generate
the key pair. For the default Sun security provider, the name must be
DSA, which is also the default value for this option. Despite the
presence of this option, you cannot really specify another algorithm
name, nor, for that matter, can you use a non-Sun DSA provider.
Internally, <tt class="literal">keytool</tt> expects the key generator to
produce keys that belong to a specific class in the
<tt class="literal">sun</tt> package.
</p>
</dd>

<dt>
<b>-keysize keysize</b>
</dt>
<dd>
<p>
<a name="INDEX-1823"></a>Use the given keysize to initialize
the key pair generator. The default value for this option is 1024.
Since the key is a DSA key, the value must be between 512 and 1024
and be a multiple of 64.
</p>
</dd>

<dt>
<b>-sigalg signatureAlgorithm</b>
</dt>
<dd>
<p>
<a name="INDEX-1824"></a>Specify the signature algorithm that
will be used to create the self-signed certificate; this defaults to
SHA-1/DSA, which is supported by the Sun security provider. Like the
key algorithm, this option is not particularly useful at present,
since you cannot use your own security provider classes to implement
the signature.
</p>
</dd>

<dt>
<b>-validity nDays</b>
</dt>
<dd>
<p>
<a name="INDEX-1825"></a>Specify the number of days for which
the self-signed certificate should be valid. The default value for
this option is 90 days.
</p>
</dd>

</dl>

<p>The key entry that is created in this manner has the generated
private key. In addition, the public key is placed into a self-signed
certificate; that is, a certificate that identitifies the holder of
the public key (using the distinguished name argument) and is signed
by the holder of the key itself. This is a valid certificate in all
senses, although other sites will probably not accept the certificate
since it is not signed by a known <a name="INDEX-1826"></a><a name="INDEX-1827"></a>certificate authority (CA). But
the self-signed certificate can be used to obtain a certificate from
a CA.
</p>

<p>In order to use this self-signed certificate to obtain a certificate
from a CA, you must first generate a <a name="INDEX-1828"></a><a name="INDEX-1829"></a>certificate
signing request (CSR). The CSR contains the distinguished name and
public key for a particular alias and is signed using the private key
of the alias; the CA can then verify that signature and issue a
certificate verifying the public key. CSRs are generated with this
option:
</p>

<dl>
<dt>
<b>-certreq</b>
</dt>
<dd>
<p>
<a name="INDEX-1830"></a>Generate a certificate signing
request. This command supports the following options:
</p>
</dd>

<dt>
<b>-alias alias</b>
</dt>
<dt>
<b>-keypass keypass</b>
</dt>
<dt>
<b>-keystore keystore</b>
</dt>
<dt>
<b>-storepass storepass</b>
</dt>
<dd>
<p>-storetype storetype</p>
</dd>

<dt>
<b>-v</b>
</dt>
<dt>
<b>-sigalg signatureAlgorithm</b>
</dt>
<dd>
<p>
<a name="INDEX-1831"></a>Use the given algorithm to sign the
CSR. This option is not presently useful, as the internal design of
<tt class="literal">keytool</tt> only supports SHA-1/DSA signatures
created by the Sun security provider.
</p>
</dd>

<dt>
<b>-file outputFile</b>
</dt>
<dd>
<p>
<a name="INDEX-1832"></a>Store the CSR in the given file. The
format of the CSR is defined in PKCS#10. The default is to write the
CSR to <tt class="literal">System.out</tt>.<a name="INDEX-1833"></a><a name="INDEX-1834"></a>
</p>
</dd>

</dl>

<p>Once you have the CSR in a file, you must send it to the CA of your
choice. Different CAs have different procedures for doing this, but
all of them will send you back a certificate they have signed that
verifies the public key you have sent to them. There are a few
different formats in which the CA will send back a certificate; the
only format that is presently supported by<tt class="literal">
keytool</tt> is RFC 1421 (so you should use a CA that supports
this format, of course). You must also use a CA for whom you have a
certificate entry (but the CA will often send you its self-signed
certificate anyway).
</p>

<p>Once you've received the file containing the new certificate,
you can import it into the keystore using the
<tt class="literal">-import</tt> command we discussed previously.
</p>

<p>Here's an example of how all these commands can be used to
create an entry with a private key and a certified public key. First,
we must create the entry:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">keytool -genkey -alias sdo</b>
Enter keystore password:  <b class="emphasis-bold">******</b>
What is your first and last name?
  [Unknown]:  <b class="emphasis-bold">Scott Oaks</b>
What is the name of your organizational unit?
  [Unknown]:  <b class="emphasis-bold">SMCC</b>
What is the name of your organization?
  [Unknown]:  <b class="emphasis-bold">Sun Microsystems</b>
What is the name of your City or Locality?
  [Unknown]:  <b class="emphasis-bold">New York</b>
What is the name of your State or Province?
  [Unknown]:  <b class="emphasis-bold">NY</b>
What is the two-letter country code for this unit?
  [Unknown]:  <b class="emphasis-bold">US</b>
Is &lt;CN=Scott Oaks, OU=SMCC, O=Sun Microsystems, L=New York, S=NY, C=US&gt; correct?
  [no]:  <b class="emphasis-bold">yes</b>

Enter key password for &lt;sdo&gt;
        (RETURN if same as keystore password):  <b class="emphasis-bold">******</b>
</pre>
</blockquote>

<p>At this point, we now have an entry for <tt class="literal">sdo</tt> in
the keystore. That entry has a self-signed certificate; note that we
had the tool prompt us for all the entries that comprise the DN
rather than attempting to type it all in on the command line. The
next step is to generate the CSR:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">keytool -certreq -alias sdo -file sdoCSR.cer</b>
Enter keystore password:  <b class="emphasis-bold">******</b>
</pre>
</blockquote>

<p>The file <em class="filename">sdoCSR.cer</em> contains the CSR which must
now be sent to a CA. Note that we must send the CSR to an authority
for whom we already have a certificate entry--that is, for whom
we already have a public key. Otherwise, when the response to the CSR
comes, we will be unable to verify the signature of the CA that
issued the new certificate.
</p>

<p>When the response does come, we must save it to a file. If we save it
to the file <em class="filename">sdo.cer</em>, we can import it with this
command:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">keytool -import -file sdo.cer -alias sdo</b>
Enter keystore password:  <b class="emphasis-bold">******</b>
</pre>
</blockquote>

<p>Assuming that the certificate is valid, this imports the new
certificate into the keystore. The certificate is invalid if the
public key for <tt class="literal">sdo</tt> does not match the previously
defined public key in the database, or if the certificate was issued
by an authority for whom we do not possess a public key, or if the
certificate signature is invalid (which would be the case if data in
the certificate had been modified in transit).
</p>

<p>The state of the <tt class="literal">sdo</tt> entry in the keystore has
changed during this example:
</p>

<ul>
<li>
<p>After the first command, the <tt class="literal">sdo</tt> entry has a
single certificate; that certificate is issued by
<tt class="literal">sdo</tt>.
</p>
</li>
<li>
<p>After the import command, the <tt class="literal">sdo</tt> entry has two
certificates in its certificate chain: the first certificate is
issued by Acme and has a principal of <tt class="literal">sdo</tt>; the
second certificate is Acme's self-signed certificate (a copy of
the one that was imported when the Acme certificate entry was
created).
</p>
</li>
</ul>

<p>In programmatic terms, the <tt class="literal">getCertificateChain()</tt>
method of the <tt class="literal">KeyStore</tt> class will return an
array of one and two elements, respectively, for these cases.
</p>

<p>We've mentioned in this section that in order to import a
certificate like this, the self-signed certificate of the certificate
authority must already be in the keystore. However, there's a
bootstrapping issue involved in this: how do you get the initial
certificates for the certificate authorities into a keystore?
</p>

<p>The JDK comes with a set of five pre-installed certificates: four
from VeriSign, which issues certificates at different levels, and one
from RSA Data, Inc. These certificates are in the
<em class="filename">cacerts</em> file in the
<em class="filename">${JAVAHOME}/lib/security</em> directory. While those
certificates are not present in your <em class="filename">.keystore</em>
file, you can still import certificates into your
<em class="filename">.keystore</em> file by using the
<em class="emphasis">-trustcacerts</em> option: in that case, as long as
the certificate you're importing has been signed by one of the
authorities in the <em class="filename">cacerts</em> file, the import
operation will succeed.
</p>

<p>Hence, if we'd sent our CSR request in the above example to
VeriSign and the returned certificate from VeriSign was stored in the
<em class="filename">sdo.cer</em> file, we could import it with this
comand:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">keytool -import -file sdo.cer -alias sdo -trustcacerts</b>
</pre>
</blockquote>

<p>If you want to use the certificates of the certificate authorities
programatically, you may do so by creating a keystore of type
<tt class="literal">JKS</tt>, and loading that keystore from the
<em class="filename">cacerts</em> file.<a name="INDEX-1835"></a><a name="INDEX-1836"></a><a name="INDEX-1837"></a>
</p>


<a name="SEC-AP-A-SECT-1.4"></a>
<h3 class="sect2">A.1.4. Modifying Keystore Entries</h3>

<p>
<a name="INDEX-1838"></a><a name="INDEX-1839"></a><a name="INDEX-1840"></a>
There is no practical way to modify a certificate entry in the
keystore. You may delete an existing entry and add a new one if
required.
</p>

<p>There is one command that can modify the data within a key entry:</p>

<dl>
<dt>
<b>-selfcert</b>
</dt>
<dd>
<p>
<a name="INDEX-1841"></a>Change the certificate chain
associated with the target key entry. Any previous certificates
(including ones that may have been imported from a valid certificate
authority) are deleted and replaced with a new self-signed
certificate; this certificate can be used to generate a new CSR. The
public and private keys associated with the alias are unchanged, but
you may specify a new value for the DN on the command line. Hence,
one use for this command is to change the DN for a particular entry.
</p>

<p>This command supports the following options:</p>
</dd>

<dt>
<b>-alias alias</b>
</dt>
<dt>
<b>-dname DN</b>
</dt>
<dt>
<b>-keypass keypass</b>
</dt>
<dt>
<b>-keystore keystore</b>
</dt>
<dt>
<b>-storepass storepass</b>
</dt>
<dt>
<b>-storetype storetype</b>
</dt>
<dt>
<b>-sigalg algorithmName</b>
</dt>
<dd>
<p>Use the given algorithm to generate the signature in the self-signed
certificate; as in other cases, this option only supports the DSA
algorithm no matter what algorithms may be supported by your security
provider.
</p>
</dd>

<dt>
<b>-validity nDays</b>
</dt>
<dd>
<p>The number of days for which the self-signed certificate is valid.
The default is 90 days.
</p>
</dd>

</dl>

<p>The -keyclone command is often used with this command, which can
create a copy of the original entry before the DN is changed:
</p>

<dl>
<dt>
<b>-keyclone</b>
</dt>
<dd>
<p>
<a name="INDEX-1842"></a>Clone the target entry. The
cloned entry will have the same private key and certificate chain as
the original entry. This command supports the following options:
</p>
</dd>

<dt>
<b>-alias alias</b>
</dt>
<dt>
<b>-keypass keypass</b>
</dt>
<dt>
<b>-keystore keystore</b>
</dt>
<dt>
<b>-storepass storepass</b>
</dt>
<dt>
<b>-storetype storetype</b>
</dt>
<dt>
<b>-v</b>
</dt>
<dt>
<b>-dest newAlias</b>
</dt>
<dd>
<p>The new alias name of the cloned entry. If this is not specified, you
will be prompted for it.
</p>
</dd>

<dt>
<b>-new newPassword</b>
</dt>
<dd>
<p>The new password for the cloned entry. If this is not specified, you
will be prompted for it.
</p>
</dd>

</dl>

<p>To change the password associated with a particular key entry, use
this command:
</p>

<dl>
<dt>
<b>-keypasswd</b>
</dt>
<dd>
<p>
<a name="INDEX-1843"></a><a name="INDEX-1844"></a><a name="INDEX-1845"></a><a name="INDEX-1846"></a>
Change the password for the given key entry. This command supports
the following options:
</p>
</dd>

<dt>
<b>-alias alias</b>
</dt>
<dt>
<b>-keystore keystore</b>
</dt>
<dt>
<b>-storepass storePassword</b>
</dt>
<dt>
<b>-storetype storetype</b>
</dt>
<dt>
<b>-keypass originalPassword</b>
</dt>
<dt>
<b>-new newPassword</b>
</dt>
<dd>
<p>Specify the new password for the entry. If this option is not
supplied, you will be prompted for the new password.
</p>
</dd>

</dl>


<a name="SEC-AP-A-SECT-1.5"></a>
<h3 class="sect2">A.1.5. Deleting Keystore Entries</h3>

<p>
<a name="INDEX-1847"></a><a name="INDEX-1848"></a><a name="INDEX-1849"></a>
There is a single command to delete either a key entry or a
certificate entry:
</p>

<dl>
<dt>
<b>-delete</b>
</dt>
<dd>
<p>
<a name="INDEX-1850"></a>Delete the entry of the specified
alias. If a certificate entry for a certificate authority is deleted,
there is no effect upon key entries that have been validated by the
authority. This command supports the following options:
</p>

<blockquote class="simplelist">
<p>
<em class="emphasis">-alias alias</em>
</p>
<p>
<em class="emphasis">-keystore keystore</em>
</p>
<p>
<em class="emphasis">-storepass storepass</em>
</p>
<p>
<em class="emphasis">-storetype storetype</em>
</p>
<p>
<em class="emphasis">-v</em>
</p>
</blockquote>

</dd>

</dl>



<a name="SEC-AP-A-SECT-1.6"></a>
<h3 class="sect2">A.1.6. Examining Keystore Data</h3>

<p>
<a name="INDEX-1851"></a><a name="INDEX-1852"></a><a name="INDEX-1853"></a>If
you want to examine one or more entries in the keystore, you may use
the following commands:
</p>
<dl>
<dt>
<b>-list</b>
</dt>
<dd>
<p>
<a name="INDEX-1854"></a>List (to
<tt class="literal">System.out</tt>) one or more entries in the keystore.
If an alias option is given to this command, only that alias will be
listed; otherwise, all entries in the keystore are listed. This
command supports the following options:
</p>

<dl>

<dt>
<b>-alias alias</b>
</dt>
<dt>
<b>-keystore keystore</b>
</dt>
<dt>
<b>-storepass storepass</b>
</dt>
<dt>
<b>-storetype storetype</b>
</dt>
<dt>
<b>-v</b>
</dt>
<dt>
<b>-rfc</b>
</dt>
<dd>
<p>When displaying certificates, display them in RFC 1421 standard. This
option is incompatible with the <em class="emphasis">-v</em> option.
</p>
</dd>

</dl>

</dd>


<dt>
<b>-export</b>
</dt>
<dd>
<p>
<a name="INDEX-1855"></a><a name="INDEX-1856"></a><a name="INDEX-1857"></a>
Export the certificate for the given alias to a given file. The
certificate is exported in RFC 1421 format. If the target alias is a
certificate entry, that certificate is exported. Otherwise, the first
certificate in the target key entry's certificate chain will be
exported. This command supports the following options:
</p>

<dl>
<dt>
<b>-alias alias</b>
</dt>
<dt>
<b>-keystore keystore</b>
</dt>
<dt>
<b>-storepass storepass</b>
</dt>
<dt>
<b>-storetype storetype</b>
</dt>
<dt>
<b>-v</b>
</dt>
<dt>
<b>-file outputFile</b>
</dt>
<dd>
<p>The file in which to store the certificate. The default is to write
the certificate to <tt class="literal">System.out</tt>.
</p>
</dd>

</dl>

</dd>


<dt>
<b>-printcert</b>
</dt>
<dd>
<p>
<a name="INDEX-1858"></a><a name="INDEX-1859"></a><a name="INDEX-1860"></a>
Print out a certificate. The input to this command must be a
certificate in RFC 1421 format; this command will display that
certificate in readable form so that you may verify its fingerprint.
Unlike all other commands, this command does not use the keystore
itself, and it requires no keystore passwords to operate. It supports
the following options:
</p>


<dl>
<dt>
<b>-v</b>
</dt>
<dt>
<b>-file certificateFile</b>
</dt>
<dd>
<p>The file containing the RFC 1421 format certificate. The default is
to read the certificate from
<tt class="literal">System.in</tt>.<a name="INDEX-1861"></a><a name="INDEX-1862"></a><a name="INDEX-1863"></a>
</p>
</dd>

</dl>

</dd>

</dl>


<a name="SEC-AP-A-SECT-1.7"></a>
<h3 class="sect2">A.1.7. Importing a 1.1-Based Identity Database</h3>

<p>The keystore in 1.2 is incompatible with the identity database in
1.1, but the <tt class="literal">keytool</tt> is capable of converting
between the two. To convert a 1.1 identity database to a 1.2
keystore, use this command:
</p>

<dl>
<dt>
<b>-identitydb</b>
</dt>
<dd>
<p>Convert a 1.1 identity database. This command has the following
options
</p>
</dd>

<dt>
<b>-v</b>
</dt>
<dt>
<b>-keystore keystore</b>
</dt>
<dt>
<b>-keypass keypass</b>
</dt>
<dt>
<b>-storepass storepass</b>
</dt>
<dt>
<b>-stereotype stereotype</b>
</dt>
<dt>
<b>-file db_file</b>
</dt>
<dd>
<p>The file name of the 1.1 identity database. The default for this is
<em class="filename">identitydb.obj</em> in the user's home
directory.
</p>
</dd>

</dl>

<p>With this command, each trusted entry in the identity database will
be created as a key entry in the keystore. All other entries in the
identity database will be ignored.
</p>


<a name="SEC-AP-A-SECT-1.8"></a>
<h3 class="sect2">A.1.8. Miscellaneous Commands</h3>

<p>There are two remaining commands. The first allows you to change the
global password of the keystore:
</p>

<dl>
<dt>
<b>-storepasswd</b>
</dt>
<dd>
<p>
<a name="INDEX-1864"></a><a name="INDEX-1865"></a><a name="INDEX-1866"></a>Change the
global password of the keystore. This command supports the following
options:
</p>
<dl>
<dt>
<b>-keystore keystore</b>
</dt>
<dt>
<b>-storepass storepass</b>
</dt>
<dt>
<b>-storetype storetype</b>
</dt>
<dt>
<b>-v</b>
</dt>
<dt>
<b>-new newPassword</b>
</dt>
<dd>
<p>The new global password for the keystore. If you do not specify this
value, you will be prompted for it.
</p>
</dd>

</dl>

</dd>

</dl>

<p>Finally, you can get a summary of all commands with this command:</p>

<dl>
<dt>
<b>-help</b>
</dt>
<dd>
<p>
<a name="INDEX-1867"></a>Print out a summary of the usage of
<tt class="literal">keytool</tt>.<a name="INDEX-1868"></a><a name="INDEX-1869"></a><a name="INDEX-1870"></a>
</p>
</dd>

</dl>











<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch13_09.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="appa_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appa_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">13.9. Summary</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">A.2. The jarsigner Tool</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
