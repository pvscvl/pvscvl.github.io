<html>
<head>
<title>Applications, Applets, and Programs (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Applications, Applets, and Programs">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch01_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch01_01.htm">Chapter 1: Java Application Security</a></td><td align="right" valign="top" width="172"><a href="ch01_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch01_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">1.3. Applications, Applets, and Programs</h2>

<p>
<a name="INDEX-16"></a><a name="INDEX-17"></a>It's no accident that this chapter
has the word "application" in its title, because the Java
security model is solely at the discretion of a Java application.
When an applet runs inside the HotJava browser,
HotJava<sup class="superscript">TM</sup> is the Java application that has
determined the security policy for that applet. And although other
popular browsers are not written in Java, they play the role of a
Java application: it is still the case that the choice of security
model is up to the browser and cannot be changed by the applet.
</p>

<p>This makes the distinction between applications and applets a crucial
one: applications can establish and modify their security policies
while applets (generally) cannot. However, this distinction has
diminished over time. Beginning with Java 1.2, users of Java
applications have the opportunity to run an application within a
sandbox that the user or system administrator has constructed. In the
next section, we'll see how the same functionality can be
achieved with Java 1.1 as well. Under these scenarios, the Java
security model for applications is solely at the discretion of the
user or system administrator.
</p>

<p>This is a major change of perception for many users and developers of
Java, who are used to considering the security differences between
applets and applications as a significant differentiator between the
two types of programs. There will, of course, always be particular
programming differences between applets and applications: an applet
extends the <tt class="literal">java.applet.Applet</tt> class and is
written as a series of callbacks, while an application can be any
class that has a static method called <tt class="literal">main()</tt>.
When this programming distinction is important, we'll use the
terms "applet" and "application" as
appropriate. But we'll typically use the term
<a name="INDEX-18"></a>
"program" to refer to the Java code that we're
running.
</p>

<a name="SEC-CH-1-SECT-3.1"></a>
<h3 class="sect2">1.3.1. Anatomy of a Java Application</h3>

<p>
<a name="INDEX-19"></a>The anatomy of a typical Java application
is shown in <a href="#SEC-CH-1-FIG-3">Figure 1-2</a>. Each of the features of the
Java platform that appears in a rectangle plays a role in the
development of the Java sandbox. In particular, the elements of the
Java sandbox are comprised of:
</p>

<a name="SEC-CH-1-FIG-3"></a>
<div class="figure">
<img alt="figure" src="figs/JSEC_0102.gif" webstripperlinkwas="figs/JSEC_0102.gif"></div>
<h4 class="objtitle">Figure 1-2. Anatomy of a Java application</h4>

<dl>
<dt>
<b>The bytecode verifier</b>
</dt>
<dd>
<p>The <a name="INDEX-20"></a><a name="INDEX-21"></a>bytecode verifier ensures that
Java class files follow the rules of the Java language. In terms of
resources, the bytecode verifier helps enforce memory protections for
all Java programs. As the figure implies, not all files are subject
to bytecode verification.
</p>
</dd>

<dt>
<b>The class loader<a name="INDEX-22"></a>
</b>
</dt>
<dd>
<p>One or more class loaders load classes that are not found on the
<tt class="literal">CLASSPATH</tt>. In 1.2, class loaders are responsible
for loading classes that are found on the
<tt class="literal">CLASSPATH</tt> as well.
</p>
</dd>

<dt>
<b>The access controller</b>
</dt>
<dd>
<p>In Java 1.2, the <a name="INDEX-23"></a>access controller allows (or
prevents) most access from the core API to the operating system.
</p>
</dd>

<dt>
<b>The security manager</b>
</dt>
<dd>
<p>The <a name="INDEX-24"></a>
security manager is the primary interface between the core API and
the operating system; it has the ultimate responsibility for allowing
or preventing access to all system resources. In 1.2, the security
manager uses the access controller for most (but not all) of those
decisions; in 1.0 and 1.1, the security manager is solely responsible
for those decisions.
</p>
</dd>

<dt>
<b>The security package</b>
</dt>
<dd>
<p>The <a name="INDEX-25"></a><a name="INDEX-26"></a>security
package (that is, classes in the <tt class="literal">java.security</tt>
package) forms the basis for authenticating signed Java classes.
Although it is only a small box in this diagram, the security package
is a complex API, and discussion of it is broken into several
chapters of this book. This includes discussions of:
</p>

<ul>
<li>
<p>The security provider interface--the means by which different
security implementations may be plugged into the security package
</p>
</li>
<li>
<p>Message digests</p>
</li>
<li>
<p>Keys and certificates</p>
</li>
<li>
<p>Digital signatures</p>
</li>
<li>
<p>Encryption (an optional extension to the security package)</p>
</li>
</ul>

<p>The security package was initially available in Java 1.1.</p>

</dd>


<dt>
<b>The key database</b>
</dt>
<dd>
<p>The <a name="INDEX-27"></a>key
database is a set of keys used by the security manager and access
controller to verify the <a name="INDEX-28"></a>digital signature that accompanies a
signed class file. In the Java architecture, it is part of the
security package, though it may be manifested as an external file or
database.
</p>
</dd>

</dl>

<p>The last two items in this list have broad applicability beyond
expanding the Java sandbox. With respect to the sandbox, digital
signatures play an important role, because they provide
<a name="INDEX-29"></a>
authentication of who actually provided the Java class. As
we'll see, this provides the ability for end users and system
administrators to grant very specific privileges to individual
classes or signers. But a digital signature might be used for other
applications. Let's say that you're deploying a payroll
application throughout a large corporation. When an employee sends a
request to view his payroll information, you really want to make sure
that the request came from that employee rather than from someone
else in the corporation. Often, this type of application is secured
by a simple password, but a more secure system could require a
digitially signed request before it sent out the payroll information.
</p>

<p>We'll discuss security concerns in both these contexts in this
book. In particular, two different examples will form the theme of
the examples that are developed through this book:
</p>

<ul>
<li>
<p>A browser-type program (called <tt class="literal">JavaRunner</tt>) that
we'll use to explore the sandbox aspects of Java's
security model
</p>
</li>
<li>
<p>The payroll application of a large company (XYZ Corporation) that
we'll use to explore how the features of Java's security
model can be used for purposes other than the sandbox (e.g., to sign
a payroll request)
</p>
</li>
</ul>

<p>We'll develop a full implementation of the first of these
examples; while we won't provide a complete payroll
application, we will provide a number of examples of the security
features required for such an application.<a name="INDEX-30"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch01_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch01_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch01_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">1.2. The Java Sandbox</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">1.4. Running a Java Application</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
