<html>
<head>
<title>Secret Key Engines (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Secret Key Engines">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch13_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch13_01.htm">Chapter 13: Encryption</a></td><td align="right" valign="top" width="172"><a href="ch13_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch13_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">13.4. Secret Key Engines</h2>

<p>
<a name="INDEX-1567"></a><a name="INDEX-1568"></a><a name="INDEX-1569"></a>In
the JCE, there are new ways to generate keys. Since the existing key
engines only operate on public and private keys, the JCE introduces
two new engines that can operate on secret keys. Note also in <a href="ch13_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch13_02.htm">Table 13-1</a> that the <tt class="literal">SunJCE</tt> security
provider implements a new algorithm to generate key pairs for
Diffie-Hellman key agreement; that algorithm uses the standard
<tt class="literal">KeyPairGenerator</tt> class we explored in <a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_01.htm">Chapter 10, "Keys and Certificates"</a>.
</p>

<a name="SEC-CH-13-SECT-4.1"></a>
<h3 class="sect2">13.4.1. The KeyGenerator Class</h3>

<p>
<a name="INDEX-1570"></a><a name="INDEX-1571"></a><a name="INDEX-1572"></a>
The first engine we'll look at is the
<tt class="literal">KeyGenerator</tt> class
(<tt class="literal">javax.crypto.Key-Generator)</tt>; this class is used
to generate secret keys. This class is very similar to the
<tt class="literal">KeyPairGenerator</tt> class except that it generates
instances of secret keys instead of pairs of public and private keys:
</p>

<dl>
<dt>
<b>public class KeyGenerator</b>
</dt>
<dd>
<p>Generate instances of secret keys for use by a symmetric encryption
algorithm.
</p>
</dd>

</dl>

<p>The <tt class="literal">KeyGenerator</tt> class is an engine within the
JCE. As such, it has all the hallmarks of a cryptographic engine. It
has a complementary SPI and a set of public methods that are used to
operate upon it, and its implementation must be registered with the
security provider.
</p>

<a name="SEC-CH-13-SECT-4.1.1"></a>
<h3 class="sect3">13.4.1.1. Using the KeyGenerator class</h3>

<p>Like other engine classes, the <tt class="literal">KeyGenerator</tt>
class does not have any public constructors. An instance of a
<tt class="literal">KeyGenerator</tt> is obtained by calling one of these
methods:
</p>

<dl>
<dt>
<b>public static final KeyGenerator getInstance(String algorithm) </b>
</dt>
<dt>
<b>public static final KeyGenerator getInstance(String algorithm, String provider)</b>
</dt>
<dd>
<p>Return an object capable of generating secret keys that correspond to
the given algorithm. These methods use the standard rules of
searching the list of security providers in order to find an object
that implements the desired algorithm. If the generator for the
appropriate algorithm cannot be found, a
<tt class="literal">NoSuchAlgorithmException</tt> is thrown; if the named
provider cannot be found, a
<tt class="literal">NoSuchProviderException</tt> is thrown.
</p>
</dd>

</dl>

<p>Once an object has been obtained with these methods, the generator
must be initialized by calling one of these methods:
</p>

<dl>
<dt>
<b>public final void init(SecureRandom sr)</b>
</dt>
<dt>
<b>public final void init(AlgorithmParameterSpec aps)</b>
</dt>
<dt>
<b>public final void init(AlgorithmParameterSpec aps, SecureRandom sr)</b>
</dt>
<dt>
<b>public final void init(int strength)</b>
</dt>
<dt>
<b>public final void init(int strength, SecureRandom sr)</b>
</dt>
<dd>
<p>Initialize the key generator. Like a key pair generator, the key
generator needs a source of random numbers to generate its keys (in
the second method, a default instance of the
<tt class="literal">SecureRandom</tt> class will be used). In addition,
some key generators can accept an algorithm parameter specification
to initialize their keys (just as the key pair generator); however,
for the DES-style keys generated by the <tt class="literal">SunJCE</tt>
security provider, no algorithm parameter specification may be used.
</p>

<p>A key generator does not have to be initialized explicitly, in which
case it is initialized internally with a default instance of the
<tt class="literal">SecureRandom</tt> class. However, it is up to the
implementor of the engine class to make sure that this happens
correctly; it is better to be sure your code will work by always
initializing your key generator.
</p>
</dd>

</dl>

<p>A secret key can be generated by calling this method:</p>

<dl>
<dt>
<b>public final SecretKey generateKey()</b>
</dt>
<dd>
<p>Generate a secret key. A generator can produce multiple keys by
repeatedly calling this method.
</p>
</dd>

</dl>

<p>There are two additional methods in this class, both of which are
informational:
</p>

<dl>
<dt>
<b>public final String getAlgorithm()</b>
</dt>
<dd>
<p>Return the string representing the name of the algorithm this
generator supports.
</p>
</dd>

<dt>
<b>public final Provider getProvider()</b>
</dt>
<dd>
<p>Return the provider that was used to obtain this key generator.</p>
</dd>

</dl>

<p>In the next section, we'll show the very simple code needed to
use this class to generate a secret key.
</p>



<a name="SEC-CH-13-SECT-4.1.2"></a>
<h3 class="sect3">13.4.1.2. Implementing a KeyGenerator class</h3>

<p>Implementing a key generator requires implementing its corresponding
SPI. Like all engines that are not available in Java 1.1, the SPI for
the <tt class="literal">KeyGenerator</tt> class is unrelated in the class
hierarchy to the <tt class="literal">KeyGenerator</tt> class itself, and
the class that we register with the security provider must extend the
<tt class="literal">KeyGeneratorSpi</tt> class
(<tt class="literal">javax.crypto.KeyGeneratorSpi</tt>):
</p>

<dl>
<dt>
<b>public abstract class KeyGeneratorSpi</b>
</dt>
<dd>
<p>This class forms the service provider interface class for the
<tt class="literal">KeyGenerator</tt> class.
</p>
</dd>

</dl>

<p>There are three protected methods of this class that we must
implement if we want to provide an SPI for a key generator:
</p>

<dl>
<dt>
<b>protected abstract SecretKey engineGenerateKey()</b>
</dt>
<dd>
<p>Generate the secret key. This method should use the installed random
number generator and (if applicable) the installed algorithm
parameter specification to generate the secret key. If the engine has
not been initialized, it is expected that this method will initialize
the engine with a default instance of the
<tt class="literal">SecureRandom</tt> class.
</p>
</dd>

<dt>
<b>protected abstract void engineInit(SecureRandom sr)</b>
</dt>
<dt>
<b>protected abstract void engineInit(AlgorithmParameterSpec aps, SecureRandom sr)</b>
</dt>
<dt>
<b>public final void engineInit(int strength, SecureRandom sr)</b>
</dt>
<dd>
<p>Initialize the key generation engine with the given random number
generator and, if applicable, algorithm parameter specification. If
the class does not support initialization via an algorithm parameter
specification, or if the specification is invalid, an
<tt class="literal">InvalidAlgorithmParameterException</tt> should be
thrown.
</p>
</dd>

</dl>

<p>Hence, a complete implementation might look like this:</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class XORKeyGenerator extends KeyGeneratorSpi {
	SecureRandom sr;

	public void engineInit(SecureRandom sr) {
		this.sr = sr;
	}

	public void engineInit(AlgorithmParameterSpec ap, SecureRandom sr)
						 throws InvalidAlgorithmParameterException {
		throw new InvalidAlgorithmParameterException(
			"No parameters supported in this class");
	}

	public SecretKey engineGenerateKey() {
		if (sr == null)
			sr = new SecureRandom();

		byte b[] = new byte[1];
		sr.nextBytes(b);
		return new XORKey(b[0]);
	}
}</pre>
</blockquote>

<p>Keys, of course, are usually longer than a single byte. However,
unlike a public key/private key pair, there is not necessarily a
mathematical requirement for generating a symmetric key. Such a
requirement depends on the encryption algorithm the key will be used
for, and some symmetric encryption algorithms require a key that is
just an arbitrary sequence of bytes.<a name="INDEX-1573"></a><a name="INDEX-1574"></a><a name="INDEX-1575"></a>
</p>



<a name="SEC-CH-13-SECT-4.2"></a>
<h3 class="sect2">13.4.2. The SecretKeyFactory Class</h3>

<p>
<a name="INDEX-1576"></a><a name="INDEX-1577"></a><a name="INDEX-1578"></a><a name="INDEX-1579"></a>The second engine that we'll look
at is the <tt class="literal">SecretKeyFactory</tt> class
(<tt class="literal">javax.crypto.SecretKeyFactory</tt>). Like the
<tt class="literal">KeyFactory</tt> class, this class can convert from
algorithmic or encoded key specifications to actual key objects and
can translate key objects from one implementation to another. Unlike
the <tt class="literal">KeyFactory</tt> class, which can only operate on
public and private keys, the <tt class="literal">SecretKeyFactory</tt>
class can operate only on secret keys:
</p>

<dl>
<dt>
<b>public class SecretKeyFactory</b>
</dt>
<dd>
<p>Provide an engine that can translate between secret key
specifications and secret key objects (and vice versa). This allows
for secret keys to be imported and exported in a neutral format.
</p>
</dd>

</dl>

<p>The interface to the <tt class="literal">SecretKeyFactory</tt> class is
exactly the same at a conceptual level as the interface to the
<tt class="literal">KeyFactory</tt>. At a programming level, this means
that while most of the methods between the two classes have the same
name and perform the same operation, they may require slightly
different parameters: a secret key, rather than a public or private
key. In addition, instead of methods to generate public or private
keys, the <tt class="literal">SecretKeyFactory</tt> class contains this
method:
</p>

<dl>
<dt>
<b>public final SecretKey generateSecret(KeySpec ks)<a name="INDEX-1580"></a>
</b>
</dt>
<dd>
<p>Generate the secret key according to the given specification. If the
specification is invalid, an
<tt class="literal">InvalidKeySpecException</tt> is thrown.
</p>
</dd>

</dl>

<p>Because of its similarity to the <tt class="literal">KeyFactory</tt>
class, we won't show an example of how to use it; you may use
examples from <a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_01.htm">Chapter 10, "Keys and Certificates"</a> and simply substitute this
new method.
</p>

<a name="SEC-CH-13-SECT-4.2.1"></a>
<h3 class="sect3">13.4.2.1. Secret key specifications</h3>

<p>The specifications used to import and export secret keys depend on
the underlying algorithm that generated the secret key. As a result,
the JCE provides twelve new key specifications that deal with the new
keys the JCE provides:
</p>

<dl>
<dt>
<b>public class DESKeySpec implements KeySpec<a name="INDEX-1581"></a>
<a name="INDEX-1582"></a>
<a name="INDEX-1583"></a>
<a name="INDEX-1584"></a>
</b>
</dt>
<dd>
<p>This class provides the encoded and algorithmic parameter
specifications for DES keys.
</p>
</dd>

<dt>
<b>public class DESedeKeySpec implements KeySpec<a name="INDEX-1585"></a>
<a name="INDEX-1586"></a>
</b>
</dt>
<dd>
<p>This class provides the encoded specification for DESede keys. </p>
</dd>

<dt>
<b>public class DHGenParameterSpec implements AlgorithmParameterSpec</b>
</dt>
<dt>
<b>public class DHParameterSpec implements AlgorithmParameterSpec<a name="INDEX-1587"></a>
<a name="INDEX-1588"></a>
</b>
</dt>
<dd>
<p>These classes implement algorithm specifications
for<a name="INDEX-1589"></a><a name="INDEX-1590"></a>Diffie-Hellman keys.
</p>
</dd>

<dt>
<b>public class DHPrivateKeySpec implements KeySpec</b>
</dt>
<dt>
<b>public class DHPublicKeySpec implements KeySpe<a name="INDEX-1591"></a>
<a name="INDEX-1592"></a>
<a name="INDEX-1593"></a>
c<a name="INDEX-1594"></a>
<a name="INDEX-1595"></a>
<a name="INDEX-1596"></a>
</b>
</dt>
<dd>
<p>These classes implement the encoded key specifications for
Diffie-Hellman keys.
</p>
</dd>

<dt>
<b>public class PBEKeySpec implements KeySpec<a name="INDEX-1597"></a>
<a name="INDEX-1598"></a>
<a name="INDEX-1599"></a>
<a name="INDEX-1600"></a>
</b>
</dt>
<dt>
<b>public class PBEParameterSpec implements AlgorithmParameterSpec</b>
</dt>
<dd>
<p>These classes implement the encoded and algorithm key specifications
for the password-based cipher algorithm (the PKCS#5 standard).
</p>
</dd>

<dt>
<b>
<a name="INDEX-1601"></a>
<a name="INDEX-1602"></a>
public class IvParameterSpec implements AlgorithmParameterSpec</b>
</dt>
<dd>
<p>This class implements an initialization vector. Initialization
vectors are used in many algorithms; notably in DES.
</p>
</dd>

<dt>
<b>
<a name="INDEX-1603"></a>
<a name="INDEX-1604"></a>
public class RC2ParameterSpec implements AlgorithmParameterSpec</b>
</dt>
<dt>
<b>public class RC5ParameterSpec implements AlgorithmParameterSpec</b>
</dt>
<dd>
<p>These classes implement the algorithm parameter specifications for
RC2 and RC5 encryption.<a name="INDEX-1605"></a><a name="INDEX-1606"></a><a name="INDEX-1607"></a>
</p>
</dd>

<dt>
<b>public class SecretKeySpec implements KeySpec<a name="INDEX-1608"></a>
<a name="INDEX-1609"></a>
<a name="INDEX-1610"></a>
</b>
</dt>
<dd>
<p>This class implements a key specification for the new class of secret
keys.
</p>
</dd>

</dl>

<p>We typically treat the values contained in these specifications as
opaque values. <a href="#SEC-CH-13-TABLE-8">Table 13-2</a> lists the methods for
each class needed to import and export each of these key
specifications. As usual for key specifications, exporting a
specification involves transmitting the individual data elements of
the class, while importing a specification involves constructing the
specification with the correct values.
<a name="INDEX-1611"></a><a name="INDEX-1612"></a><a name="INDEX-1613"></a>
</p>

<a name="SEC-CH-13-TABLE-8"></a>
<h4 class="objtitle">Table 13-2. Importing and Exporting Values from the Key Specification Classes</h4>
<table border="1">




<tr>
<th>
<p>Key Specifications</p>
</th>
<th>
<p>Methods to Export Data</p>
</th>
<th>
<p>Methods to Import Data</p>
</th>
</tr>

<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">DESKeySpec</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">byte[] getKey()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">DESKeySpec(byte[] buf)
DESKeySpec(
        byte[] buf, int offset)</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">IvParameterSpec</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">byte[] getIV()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">IvParameterSpec(
       byte[] buf)
IvParameterSpec(
       byte[] buf, int offset)</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">DESedeKeySpec</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">byte[] getKey()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">DESedeKeySpec(byte[] buf)
DESedeKeySpec(
       byte[] buf, int offset)</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">DHGenParameterSpec</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">int getPrimeSize()
int getExponentSize()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">DHGenParameterSpec(
      int primeSize,
      int exponentSize)</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">DHParameterSpec</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">BigInteger getP()
BigInteger getG()
int getL()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">DHParameterSpec(
    BigInteger g)
DHParameterKeySpec(
    BigInteger g,
    int l)</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">DHPrivateKeySpec</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">BigInteger getX()
BigInteger getP()
BigInteger getG()
int getL()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">DHPrivateKeySpec(
    BigInteger p, 
    BigInteger g)
DHPrivateKeySpec(
    BigInteger p,
    BigInteger g, int l)</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">DHPublicKeySpec</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">BigInteger getY()
BigInteger getP()
BigInteger getG()
int getL()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">DHPublicKeySpec(
    BigInteger p,
    BigInteger g)
DHPublicKeySpec(
    BigInteger p,
    BigInteger g, int l)</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">PBEKeySpec</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">String getPassword()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">PBEKeySpec(String pw)</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">PBEParameterSpec</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">int getIterationCount()
byte[] getSalt()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">PBEParameterSpec(
    byte[] salt, int count)</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">RC2ParameterSpec</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">byte[] getIV()
int getEffectiveKeyBits()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">RC2ParameterSpec(int effective)
RC2ParameterSpec(int effective, byte[] iv)
RC2ParameterSpec(int effective, byte[] iv, int offset)</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">RC5ParameterSpec</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">byte[] getIV()
int getRounds()
int getVersion()
int getWordSize()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">RC5ParameterSpec(int version, int rounds, int wordSize)
RC5ParameterSpec(int version, int rounds, int wordSize, byte[] iv)
RC5ParameterSpec(int version, int rounds, int wordSize, byte[] iv, int offset)</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">SecretKeySpec</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">byte[] getEncoded()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">SecretKeySpec(byte[] key, String Algorithm)
SecretKeySpec(byte[] key, int offset, String Algorithm)</pre>
</blockquote>
</td>
</tr>

</table>



<a name="SEC-CH-13-SECT-4.2.2"></a>
<h3 class="sect3">13.4.2.2. The secret key factory SPI</h3>

<p>Like all engines, the secret key engine is implemented via an SPI; if
you want to implement your own secret key factory you must extend the
<tt class="literal">SecretKeyFactorySpi</tt> class
(<tt class="literal">javax.crypto.SecretKeyFactorySpi</tt>):
</p>

<dl>
<dt>
<b>public abstract class <a name="INDEX-1614"></a>
<a name="INDEX-1615"></a>
SecretKeyFactorySpi</b>
</dt>
<dd>
<p>This class is the SPI for the <tt class="literal">SecretKeyFactory</tt>
class. As this class is only available as an extension to 1.2, the
SPI is unrelated to the engine class; providers must extend this
class directly to provide a secret key factory.
</p>
</dd>

</dl>

<p>Implementation of this class follows the implementation of a key
factory SPI, except that the methods of this class must operate upon
secret keys rather than public or private keys. If you want to
implement a secret key factory SPI, you can use the sample key
factory SPI as a <a name="INDEX-1616"></a><a name="INDEX-1617"></a><a name="INDEX-1618"></a><a name="INDEX-1619"></a> model.<a name="INDEX-1620"></a><a name="INDEX-1621"></a><a name="INDEX-1622"></a>
</p>





<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch13_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch13_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch13_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">13.3. Key Types in the JCE</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">13.5. Encrypting Data</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
