<html>
<head>
<title>Trusted and Untrusted Classes (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Trusted and Untrusted Classes">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch04_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch04_01.htm">Chapter 4: The Security Manager Class</a></td><td align="right" valign="top" width="172"><a href="ch04_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch04_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">4.2. Trusted and Untrusted Classes</h2>

<p>
<a name="INDEX-365"></a><a name="INDEX-366"></a><a name="INDEX-367"></a><a name="INDEX-368"></a>In the discussion that follows, we
make the distinction between trusted and untrusted classes.
Generally, an implementation of a security manager allows more
operations for trusted classes than for untrusted classes. Whether or
not a class is trusted is a complex decision based upon many
factors--not the least of which is the release of Java under
which the program is running. The default notion of what constitutes
a trusted class has changed significantly between releases of Java:
</p>

<ul>
<li>
<p>In Java 1.0, a class that is loaded from the <a name="INDEX-369"></a><a name="INDEX-370"></a><a name="INDEX-371"></a><tt class="literal">CLASSPATH</tt> is
considered trusted, and a class that is loaded from a class loader is
considered untrusted.
</p>
</li>
<li>
<p>In Java 1.1, that same rule applies, but a class that is loaded from
a JAR file may carry with it a digital signature that allows it to be
given extra privileges.
</p>
</li>
<li>
<p>In Java 1.2, a class that is loaded from the core API is considered
trusted and may perform any operation it wants to. Otherwise, classes
are (by default) given privileges based upon where they were loaded
from, including if they were loaded from the
<tt class="literal">CLASSPATH</tt>. However, this applies only when
certain command-line arguments are present; in the default method of
loading applications, items from the <tt class="literal">CLASSPATH</tt>
are generally considered trusted.
</p>
</li>
</ul>

<p>Nothing inherent in the design of the security manager requires
security to be enforced as an all-or-nothing proposition for each
class. It's possible to write a security manager that gives
access to certain parts of the filesystem only to certain classes
(even classes that came from the network), or to write a security
manager that prohibits classes loaded from the
<tt class="literal">CLASSPATH</tt> from performing operations that are
normally permitted to classes loaded from the filesystem. A security
manager can be as simple or as sophisticated as its author desires,
with the result that the security manager can enforce a simple binary
yes-or-no policy for operations, or it can enforce a very
specialized, very detailed policy. This is true of all security
managers in all versions of Java, though as we'll see in <a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_01.htm">Chapter 5, "The Access Controller"</a>, one of the prime benefits of Java 1.2 is that
it makes it much easier to achieve fine-grained security policies.
</p>

<p>However, even though a sophisticated security manager can enforce a
very detailed security policy, most implementations of the security
manager (especially implementations that occur within popular
Java-enabled browsers) assume that a trusted class is one that has
been loaded from the <tt class="literal">CLASSPATH</tt>, while an
untrusted class is one that has been loaded from a class loader.
Furthermore, trusted classes are normally permitted to perform any
operation, while an untrusted class is normally subjected to the full
extent of the provisions of the security manager.
</p>

<p>This dichotomy is essentially the same as the one we normally make
between applications and applets: since an application is loaded
entirely through the <tt class="literal">CLASSPATH</tt>, all of its
classes are considered trusted, and the application can perform any
operation that it wants to. On the other hand, the classes that
comprise an applet are generally loaded from the network; hence they
are considered untrusted and denied any operation that has the
potential to violate the browser's security policy.
</p>

<p>Beginning with Java 1.1, this distinction became less clear (and Java
1.2 made it even fuzzier): classes now have the ability to be signed,
and classes that are signed can be treated as trusted or untrusted.
We discuss the rationale behind that idea in <a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch07_01.htm">Chapter 7, "Introduction to Cryptography"</a> and we fully explore signed classes in the
last part of this book; for now, we'll just keep in mind that
some classes are trusted and some are <a name="INDEX-372"></a><a name="INDEX-373"></a><a name="INDEX-374"></a> not.<a name="INDEX-375"></a><a name="INDEX-376"></a><a name="INDEX-377"></a><a name="INDEX-378"></a>
</p>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch04_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch04_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.1. Overview of the Security Manager</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.3. Using the Security Manager</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
