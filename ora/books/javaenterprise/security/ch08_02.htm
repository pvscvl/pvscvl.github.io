<html>
<head>
<title>The Provider Class (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The Provider Class">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_01.htm">Chapter 8: Security Providers</a></td><td align="right" valign="top" width="172"><a href="ch08_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">8.2. The Provider Class</h2>

<p>
<a name="INDEX-1021"></a><a name="INDEX-1022"></a><a name="INDEX-1023"></a>The first class we'll examine in
depth is the <tt class="literal">Provider</tt> class
(<tt class="literal">java.security.Provider</tt>).
</p>

<dl>
<dt>
<b>public abstract class Provider extends Properties</b>
</dt>
<dd>
<p>This class forms the basis of the security provider architecture.
There is normally a standard subclass that implements a default
security feature set; other classes can be installed to implement
other security algorithms.
</p>
</dd>

</dl>

<p>In the core Java API, the <tt class="literal">Provider</tt> class is
abstract, and there are no classes in the core Java API that extend
the <tt class="literal">Provider</tt> class. The default provider class
that comes with the reference JDK is the class
<tt class="literal">Sun</tt> in the
<tt class="literal">sun.security.provider</tt> package. However, since
this class is in the <tt class="literal">sun</tt> package, there's
no guarantee that it will be available with every implementation of
the Java virtual machine.
</p>

<p>In theory, this should not matter. The concepts of the security
package will work according to the specification as long as the Java
implementation provides an appropriate provider class and appropriate
classes to perform the operations a Java program will expect. The
exact set of classes a particular program may expect will depend, of
course, on the program. In the next section, we'll discuss how
different implementations of the <tt class="literal">Provider</tt> class
may be loaded and used during the execution of the virtual machine.
</p>

<a name="SEC-CH-8-SECT-2.1"></a>
<h3 class="sect2">8.2.1. Using the Provider Class</h3>

<p>The <tt class="literal">Provider</tt> class is seldom used directly by a
programmer. This class does contain a number of useful miscellaneous
methods we'll review here; these methods are generally
informational and would be used accordingly.
</p>

<dl>
<dt>
<b>public String getName()<a name="INDEX-1024"></a>
</b>
</dt>
<dd>
<p>Return the name of the provider. </p>
</dd>

<dt>
<b>public double getVersion()<a name="INDEX-1025"></a>
</b>
</dt>
<dd>
<p>Return the version number of the provider.</p>
</dd>

<dt>
<b>public String getInfo()<a name="INDEX-1026"></a>
</b>
</dt>
<dd>
<p>Return the info string of the provider.</p>
</dd>

<dt>
<b>public String toString()<a name="INDEX-1027"></a>
</b>
</dt>
<dd>
<p>Return the string specifying the provider; this is typically the
provider's name concatenated with the provider's version
number.
</p>
</dd>

</dl>

<p>As an extension of the <tt class="literal">Properties</tt> class, the
<tt class="literal">Provider</tt> class also shares its public interface.
Beginning in Java 1.2, the <tt class="literal">Provider</tt> class
overrides three of those methods:
</p>

<dl>
<dt>
<b>public synchronized void clear() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>If permission is granted, clear out all entries from the provider.</p>
</dd>

<dt>
<b>public synchronized Object put(Object key, Object value) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>If permission is granted, add the given property, keyed off the given
key.
</p>
</dd>

<dt>
<b>public synchronized Object remove(Object key) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>If permission is granted, remove the object associated with the given
key.
</p>
</dd>

</dl>

<p>Permission to perform these last three options is granted if the
<tt class="literal">checkSecurityAccess()</tt><a name="INDEX-1028"></a>
method grants permission based on the argument string (which is
<tt class="literal">clearProviderProperties</tt>,
<tt class="literal">putProviderProperty</tt>, and<tt class="literal">
removeProviderProperty</tt>, respectively) as follows:
<tt class="literal">argument + getName()</tt>.
</p>

<p>Since the interface to this class is simple, we won't actually
show how it is used, although we will use some of these methods later
in this chapter. Note also that there is no public constructor for
the <tt class="literal">Provider</tt> class--a provider can only be
constructed under special circumstances we'll discuss later.
</p>


<a name="SEC-CH-8-SECT-2.2"></a>
<h3 class="sect2">8.2.2. Implementing the Provider Class</h3>

<p>If you're going to provide your own set of classes to perform
security operations, you must extend the
<tt class="literal">Provider</tt> class and register that class with the
virtual machine. In this section, we'll explore how to do that.
Most of the time, of course, you will not implement your own
<tt class="literal">Provider</tt> class--you'll just use the
default one, or perhaps install a third-party provider using the
techniques that we explore in the next section.
</p>

<p>Although the <tt class="literal">Provider</tt> class is abstract, none of
its methods are abstract. This means that implementing a provider is,
at first blush, simple: all you need do is subclass the
<tt class="literal">Provider</tt> class and provide an appropriate
constructor. The subclass must provide a constructor, since there is
no default constructor within the <tt class="literal">Provider</tt>
class. The only constructor available to us is:
</p>

<dl>
<dt>
<b>protected Provider(String name, double version, String info)</b>
</dt>
<dd>
<p>Construct a provider with the given name, version number, and
information string.
</p>
</dd>

</dl>

<p>Hence, the basic implementation of a security provider is:</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class XYZProvider extends Provider {
	public XYZProvider() {
		super("XYZ", 1.0, "XYZ Security Provider v1.0");
	}
}</pre>
</blockquote>

<p>Here we're defining the skeleton of a provider that is going to
provide certain facilities based on various algorithms of the XYZ
Corporation. Throughout the remainder of this book, we'll be
developing the classes that apply to the XYZ's cryptographic
methods, but they will be examples only--they lack the rigorous
mathematical properties that these algorithms must have. In practice,
you might choose to implement algorithms that correspond to the RSA
algorithms for the cryptographic engines.
</p>

<p>Note that we used a default constructor in this class rather than
providing a constructor similar to the one found in the
<tt class="literal">Provider</tt> class itself. The reason for this has
to do with the way providers are constructed, which we'll
discuss at the end of this section. When you write a provider, it
must provide a constructor with no arguments.
</p>

<p>
<a name="INDEX-1029"></a><a name="INDEX-1030"></a><a name="INDEX-1031"></a>This is a complete, albeit useless,
implementation of a provider. In order to add some functionality to
our provider, we must put some associations into the provider. The
associations will perform the mapping that we mentioned earlier; it
is necessary for the provider to map the name of an engine and
algorithm with the name of a class that implements that operation.
This is why the <tt class="literal">Provider</tt> class itself is a
subclass of the <tt class="literal">Properties</tt> class--so that
we can make each of those associations into a property.
</p>

<p>The operations that our provider will be consulted about are listed
in <a href="#SEC-CH-8-TABLE-6">Table 8-2</a>. In this example, we're going to be providing an
SHA-1 algorithm for performing message digests, since that would be
needed as part of the signature generation algorithm we want to
implement. There's no absolute requirement for this; we could
have depended on the default Sun security provider to supply this
algorithm for us. On the other hand, there's no guarantee that
the default security provider will be in place when our security
provider is installed, so it's a good idea for a provider to
include all the algorithms it will need.
</p>

<a name="SEC-CH-8-TABLE-6"></a>
<h4 class="objtitle">Table 8-2. Properties Included by Our Sample Provider</h4>
<table border="1">



<tr>
<th>
<p>Property</p>
</th>
<th>
<p>Corresponding Class</p>
</th>
</tr>

<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">Signature.SHA-1/XYZ</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">XYZSignature</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">KeyPairGenerator.XYZ</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">XYZKeyPairGenerator</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">MessageDigest.XYZ</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">XYZMessageDigest</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">MessageDigest.SHA-1</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">SHA1MessageDigest</pre>
</blockquote>
</td>
</tr>

</table>

<p>In order to make these associations from this table, then, our
<tt class="literal">XYZProvider</tt> class needs to look like this:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class XYZProvider extends Provider {
	public XYZProvider() {
		super("XYZ", 1.0, "XYZ Security Provider v1.0");
		put("Signature.SHA-1/XYZ", "com.xyz.XYZSignature");
		put("KeyPairGenerator.XYZ", "com.xyz.XYZKeyPairGenerator");
		put("MessageDigest.XYZ", "com.xyz.XYZMessageDigest");
		put("MessageDigest.SHA-1", "com.xyz.SHA1MessageDigest");
		put("Alg.Alias.MessageDigest.SHA", "SHA-1");
	}
}</pre>
</blockquote>

<p>The only properties a provider is required to put into its property
list are the properties that match the engine name and algorithm pair
with the class that implements that operation. In this example,
that's handled with the first four calls to the
<tt class="literal">put()</tt> method (but remember too that the provider
can implement as few or as many operations as it wants to; it
needn't implement more than a single engine with one algorithm,
or it can implement dozens of engine/algorithm pairs). Note that the
class name is the fully qualified package name of the class.
</p>

<p>The provider also has the opportunity to set any other properties
that it wants to use. If the provider wants to set aliases (as
we've done with the final call to the
<tt class="literal">put()</tt> method, using the syntax we showed
earlier), it's free to do so. Our example allows the program
using this provider to request an SHA message digest in addition to
requesting an SHA-1 digest. Doing this for SHA is highly advisable,
since that algorithm is typically referred to as SHA rather than
SHA-1, but that's the only common case where that aliasing is
needed.
</p>

<p>A provider can set any other arbitrary properties that it wants as
well. For instance, a provider class could set this property:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">put("NativeImplementation", "false");</pre>
</blockquote>

<p>if it wanted the classes that use the provider to be able to
determine if this particular XYZ implementation uses native
methods.<a href="#FOOTNOTE-3">[3]</a> It can also use the convention that certain properties
are preceded with the word <tt class="literal">Alg</tt> and contain the
algorithm name, like this:
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-3"></a>
<p>[3]RSA algorithms often use native methods,
because there are existing implementations of them that are written
in C and have gone through an extensive quality acceptance test that
many commercial sites have a level of confidence in. However, many
third-party RSA implementations do not use native methods.</p>
</blockquote>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">put("Alg.NativeImplementation.XYZ", "false");</pre>
</blockquote>

<p>There's no advantage to setting any additional
properties--nothing in the core JDK will use them. They can be
set to make the classes that accompany your provider class easier to
write--for example, your <tt class="literal">XYZSignature</tt> class
might want to inquire which particular providers have a native method
implementation of the XYZ algorithm. Whatever information you put
into your provider and how your accompanying classes use that
information is a design detail that is completely up to you. The
<tt class="literal">Security</tt> class will help you manage the
information in these properties; this relationship to the
<tt class="literal">Security</tt> class is the reason why we used a
string value for the <tt class="literal">NativeImplementation</tt>
property rather than a Boolean value.<a name="INDEX-1032"></a><a name="INDEX-1033"></a><a name="INDEX-1034"></a>
</p>

<p>There's one more nonpublic method of the
<tt class="literal">Provider</tt> class that is used by the security API:
</p>

<dl>
<dt>
<b>static Provider loadProvider(String className)</b>
</dt>
<dd>
<p>Instantiate a provider that has as its type the given class. This
method is provided mostly for convenience--it simply loads the
given class and instantiates it. However, this method also ensures
that the loaded class is an instance of the
<tt class="literal">Provider</tt> class.
</p>
</dd>

</dl>

<p>This method creates an instance of a provider. The importance of this
method stems from how it performs its task: it creates the instance
of the provider object by calling the
<tt class="literal">newInstance()</tt> method of the
<tt class="literal">Class</tt> class. In order for that operation to
succeed, the provider class must therefore have a default
constructor--that is, a constructor that requires no arguments.
This is why in our example we provided such a constructor and had the
constructor hardwire the name, version number, and information
string. We could have provided an additional constructor that accepts
those values as parameters, but it would never be called, since the
only way in which the virtual machine uses providers is to load them
via this method.
</p>

<p>In the next section, we'll look into the details of how the
virtual machine loads those provider classes we want to
use.<a name="INDEX-1035"></a><a name="INDEX-1036"></a><a name="INDEX-1037"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch08_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">8.1. The Architecture of Security Providers</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">8.3. The Security Class</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
