<html>
<head>
<title>Cipher Streams (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Cipher Streams">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch13_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch13_01.htm">Chapter 13: Encryption</a></td><td align="right" valign="top" width="172"><a href="ch13_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch13_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">13.6. Cipher Streams</h2>

<p>
<a name="INDEX-1710"></a><a name="INDEX-1711"></a><a name="INDEX-1712"></a><a name="INDEX-1713"></a>
In the <tt class="literal">Cipher</tt> class we just examined, we had to
provide the data to be encrypted or decrypted as multiple blocks of
data. This is not necessarily the best interface for programmers:
what if we want to send and receive arbitrary streams of data over
the network? It would often be inconvenient to get all the data into
buffers before it can be encrypted or decrypted.
</p>

<p>The solution to this problem is the ability to associate a cipher
object with an input or output stream. When data is written to such
an output stream, it is automatically encrypted, and when data is
read from such an input stream, it is automatically decrypted. This
allows a developer to use Java's normal semantics of nested
filter streams to send and receive encrypted data.
</p>

<a name="SEC-CH-13-SECT-6.1"></a>
<h3 class="sect2">13.6.1. The CipherOutputStream Class</h3>

<p>The class that encrypts data on output to a stream is the
<tt class="literal">CipherOutputStream</tt> class
(<tt class="literal">javax.crypto.CipherOutputStream</tt><a name="INDEX-1714"></a><a name="INDEX-1715"></a><a name="INDEX-1716"></a>):
</p>

<dl>
<dt>
<b>public class CipherOutputStream extends FilterOutputStream</b>
</dt>
<dd>
<p>Provide a class that will encrypt data as it is written to the
underlying stream.
</p>
</dd>

</dl>

<p>Like all classes that extend the
<tt class="literal">FilterOutputStream</tt> class, constructing a cipher
output stream requires that an existing output stream has already
been created. This allows us to use the existing output stream from a
socket or a file as the destination stream for the encrypted data:
</p>

<dl>
<dt>
<b>public CipherOutputStream(OutputStream outputStream, Cipher cipher)</b>
</dt>
<dd>
<p>Create a cipher output stream, associating the given cipher object
with the existing output stream. The given cipher must already have
been initialized, or an <tt class="literal">IllegalStateException</tt>
will be thrown.
</p>
</dd>

</dl>

<p>The output stream may be operated on with any of the methods from the
<tt class="literal">FilterOutputStream</tt> class--the
<tt class="literal">write()</tt> methods, the
<tt class="literal">flush()</tt><a name="INDEX-1717"></a> method, and the
<tt class="literal">close()</tt> method, which all provide the semantics
you would expect. Often, of course, these methods are never used
directly--for example, if you're sending text data over a
socket, you'll wrap a cipher output stream around the
socket's output stream, but then you'll wrap a print
writer around that; the programming interface then becomes a series
of calls to the <tt class="literal">print()</tt> and
<tt class="literal">println()</tt> methods. You can use any similar
output stream to get a different interface.
</p>

<p>It does not matter if the cipher object that was passed to the
constructor does automatic padding or not--the
<tt class="literal">CipherOutputStream</tt> class itself does not make
that restriction. As a practical matter, however, you'll want
to use a padding cipher object, since otherwise you'll be
responsible for keeping track of the amount of data passed to the
output stream and tacking on your own padding.
</p>

<p>Usually, the better alternative is to use a byte-oriented mode such
as CFB8. This is particularly true in streams that are going to be
used conversationally: a message is sent, a response received, and
then another message is sent, etc. In this case, you want to make
sure that the entire message is sent; you cannot allow the cipher to
buffer any data internally while it waits for a full block to arrive.
And, for reasons we're just about to describe, you cannot call
the <tt class="literal">flush()</tt> method in this case either. Hence,
you need to use a streaming cipher (or, technically, a block cipher
in streaming mode) in this case.
</p>

<p>When the <tt class="literal">flush()</tt> method is called on a
<tt class="literal">CipherOutputStream</tt> (either directly, or because
the stream is being closed), the padding of the stream comes into
play. If the cipher is automatically padding, the padding bytes are
generated in the <tt class="literal">flush()</tt> method. If the cipher
is not automatically padding and the number of bytes that have been
sent through the stream is not a multiple of the cipher's block
size, then the <tt class="literal">flush()</tt> method (or indirectly the
<tt class="literal">close()</tt> method) throws an
<tt class="literal">IllegalBlockSizeException</tt> (note that this
requires that the <tt class="literal">IllegalBlockSizeException</tt> be a
runtime exception).
</p>

<p>If the cipher is performing <a name="INDEX-1718"></a>padding, it is very important not to
call the <tt class="literal">flush()</tt> method unless it is immediately
followed by a call to the <tt class="literal">close()</tt> method. If the
<tt class="literal">flush()</tt> method is called in the middle of
processing data, padding is added in the middle of the data. This
means the data does not decrypt correctly. Remember that certain
output streams (especially some types of
<tt class="literal">PrintWriter</tt> streams) flush automatically; if
you're using a padding cipher, don't use one of those
output streams.
</p>

<p>We can use this class to write some encrypted data to a file like
this:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class Send {
	public static void main(String args[]) {
		try {
			KeyGenerator kg = KeyGenerator.getInstance("DES");
			kg.init(new SecureRandom());
			SecretKey key = kg.generateKey();
			SecretKeyFactory skf = SecretKeyFactory.getInstance("DES");
			Class spec = Class.forName("javax.crypto.spec.DESKeySpec");
			DESKeySpec ks = (DESKeySpec) skf.getKeySpec(key, spec);
			ObjectOutputStream oos = new ObjectOutputStream(
						new FileOutputStream("keyfile"));
			oos.writeObject(ks.getKey());

			Cipher c = Cipher.getInstance("DES/CFB8/NoPadding");
			c.init(Cipher.ENCRYPT_MODE, key);
			CipherOutputStream cos = new CipherOutputStream(
						new FileOutputStream("ciphertext"), c);
			PrintWriter pw = new PrintWriter(
						new OutputStreamWriter(cos));
			pw.println("Stand and unfold yourself");
			pw.close();
			oos.writeObject(c.getIV());
			oos.close();
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}</pre>
</blockquote>

<p>There are two steps involved here. First, we must create the cipher
object, which means that we must have a secret key available. The
problem of secret key management is a hard one to solve; we'll
discuss it a little farther along. For now, we're just going to
save the key object to a file that can later be read by whomever
needs the key. Note that we've gone through the usual steps of
writing the data produced by the secret key factory so that the
recipient of the key need not use the same provider we use.
</p>

<p>After we generate the key, we must create the cipher object,
initialize it with that key, and then use that cipher object to
construct our output stream. Once the data is sent to the stream, we
close the stream, which flushes the cipher object, performs any
necessary padding, and completes the encryption.
</p>

<p>In this case, we've chosen to use CFB8 mode, so there is no
need for padding. But in general, this last step is important: if we
don't explicitly close the <tt class="literal">PrintWriter</tt>
stream, when the program exits, data that is buffered in the cipher
object itself will not get flushed to the file. The resulting
encrypted file will be unreadable, as it won't have the correct
amount of data in its last block.<a href="#FOOTNOTE-2">[2]</a><a name="INDEX-1719"></a><a name="INDEX-1720"></a><a name="INDEX-1721"></a>
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-2"></a>
<p>[2]Closing the output
stream is necessary whenever the stream performs buffering, but it is
particularly important to remember in this context.</p>
</blockquote>


<a name="SEC-CH-13-SECT-6.2"></a>
<h3 class="sect2">13.6.2. The CipherInputStream Class</h3>

<p>The output stream is only half the battle; in order to read that
data, we must use the
<tt class="literal">CipherInputStream</tt><a name="INDEX-1722"></a><a name="INDEX-1723"></a><a name="INDEX-1724"></a> class
(<tt class="literal">javax.crypto.CipherInputStream</tt>):
</p>

<dl>
<dt>
<b>public class CipherInputStream extends FilterInputStream</b>
</dt>
<dd>
<p>Create a filter stream capable of decrypting data as it is read from
the underlying input stream.
</p>
</dd>

</dl>

<p>A cipher input stream is constructed with this method:</p>

<dl>
<dt>
<b>public CipherInputStream(InputStream is, Cipher c)</b>
</dt>
<dd>
<p>Create a cipher input stream that associates the existing input
stream with the given cipher. The cipher must previously have been
initialized.
</p>
</dd>

</dl>

<p>All the points we made about the
<tt class="literal">CipherOutputStream</tt> class are equally valid for
the <tt class="literal">CipherInputStream</tt> class. You can operate on
it with any of the methods in its superclass, although you'll
typically want to wrap it in something like a buffered reader, and
the cipher object that is associated with the input stream needs to
perform automatic padding or use a mode that does not require padding
(in fact, it must use the same padding scheme and mode that the
output stream that is sending it data used).
</p>

<p>The <tt class="literal">CipherInputStream</tt> class does not directly
support the notion of a mark. The
<tt class="literal">markSupported()</tt><a name="INDEX-1725"></a> method returns
<tt class="literal">false</tt> unless you've wrapped the cipher
input stream around another class that supports a mark.
</p>

<p>Here's how we could read the data file that we created above:</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class Receive {
	public static void main(String args[]) {
		try {
			ObjectInputStream ois = new ObjectInputStream(
						new FileInputStream("keyfile"));
			DESKeySpec ks = new DESKeySpec((byte[]) ois.readObject());
			SecretKeyFactory skf = SecretKeyFactory.getInstance("DES");
			SecretKey key = skf.generateSecret(ks);

			Cipher c = Cipher.getInstance("DES/CFB8/NoPadding");
			c.init(Cipher.DECRYPT_MODE, key, 
			newIvParameterSpec((byte[]) ois.readObject());
			CipherInputStream cis = new CipherInputStream(
						new FileInputStream("ciphertext"), c);
			cis.read(new byte[8]);
			BufferedReader br = new BufferedReader(
						new InputStreamReader(cis));
			System.out.println("Got message");
			System.out.println(br.readLine());
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}</pre>
</blockquote>

<p>In this case, we must first read the secret key from the file where
it was saved, and then create the cipher object initialized with that
key. Then we can create our input stream and read the data from the
stream, automatically decrypting it as it
goes.<a name="INDEX-1726"></a><a name="INDEX-1727"></a><a name="INDEX-1728"></a>
</p>


<a name="SEC-CH-13-SECT-6.3"></a>
<h3 class="sect2">13.6.3. SSL Encryption</h3>

<p>
<a name="INDEX-1729"></a><a name="INDEX-1730"></a><a name="INDEX-1731"></a>In the world of the Internet, data
encryption is often achieved with SSL--the Secure Socket Layer
protocol. These sockets use encryption to encrypt data as it is
written to the socket and to decrypt that data as it is read from the
socket.
</p>

<p>SSL encryption is built into many popular web browsers and web
servers; these programs depend on SSL to provide the necessary
encryption to implement the <tt class="literal">https</tt> protocol. For
Java applet developers who want to use SSL, there are three options:
</p>

<ol>
<li>
<p>Use the <tt class="literal">URL</tt> class.</p>

<p>The <tt class="literal">URL</tt><a name="INDEX-1732"></a> class can be used to open a URL that the
applet can read data from. If the URL is a POST URL, the applet can
send some initial data before it reads the data. On browsers that
will support it, you can specify an <tt class="literal">https</tt>
protocol when the URL is constructed, in which case the data
exchanged by the applet and the remote web server will be encrypted.
Note that this is not supported by the JDK itself.
</p>

<p>There are a few limitations with this method. First, the data
exchange is limited to the web server and the applet using the single
request-response protocol of HTTP. Data cannot be streamed in this
way, and you must write an appropriate back-end cgi-bin script,
servlet, or other program to process the data. Second, not all
browsers support the <tt class="literal">https</tt> protocol, and those
that do support <tt class="literal">https</tt> may not support a Java
applet opening an <tt class="literal">https</tt> URL. On the other hand,
this will tunnel data through a firewall, which is one of the main
reasons why it is used.
</p>
</li>
<li>
<p>Use an <tt class="literal">SSLSocket</tt><a name="INDEX-1733"></a> class.
</p>

<p>There are a number of vendors who supply
<tt class="literal">SSLSocket</tt> and
<tt class="literal">SSLServerSocket</tt> classes that extend the
<tt class="literal">Socket</tt> and <tt class="literal">ServerSocket</tt>
classes; these classes provide all the semantics of their
<tt class="literal">java.net</tt> counterparts with the additional
feature that the data they exchange is encrypted with the SSL
algorithm.
</p>

<p>These classes are generally subject to import and export
restrictions; in particular, Sun's
<tt class="literal">SSLSocket</tt> and
<tt class="literal">SSLServerSocket</tt> classes (which come with the
Java Server product) cannot be exported, and certain countries will
not allow these implementations to be imported. There are SSL
implementations that have been written outside the United States, so
they have fewer restrictions (but they may contain implementations of
RSA that may not be used within the United States).
</p>
</li>
<li>
<p>Use an RSA-based security provider.</p>

<p>The <tt class="literal">Cipher</tt> class that we examined above has the
ability to support <a name="INDEX-1734"></a>RSA encryption. Many third-party
security providers will have RSA implementations; some of these are
listed in <a href="appc_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appc_01.htm">Appendix C, "Security Resources"</a>.
</p>
</li>
</ol>
<p>For now, none of these solutions is completely attractive. The
technique of using URLs is well known and demonstrated in any book on
Java network programming, but suffers from the limitations we
discussed above. The SSL-based <tt class="literal">Socket</tt> classes
have a known interface and are simple to use, but suffer from
availability questions (although no more than the JCE <a name="INDEX-1735"></a><a name="INDEX-1736"></a><a name="INDEX-1737"></a> itself).<a name="INDEX-1738"></a><a name="INDEX-1739"></a><a name="INDEX-1740"></a><a name="INDEX-1741"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch13_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch13_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch13_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch13_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">13.5. Encrypting Data</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">13.7. Symmetric Key Agreement</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
