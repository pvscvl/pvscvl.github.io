<html>
<head>
<title>Message Digests (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Message Digests">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm">Java Security</a></td><td align="right" valign="top" width="172"><a href="ch09_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 9.  Message Digests</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_01.htm">Using the Message Digest Class</a>
<br>
<a href="ch09_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_02.htm">Message Digest Streams</a>
<br>
<a href="ch09_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_03.htm">Implementing a MessageDigest Class</a>
<br>
<a href="ch09_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_04.htm">Summary</a>
<br>
</p>
</div>


<p>In this chapter, we're going to look at the API that implements
the ability to create and verify message digests. The ability to
create a <a name="INDEX-1066"></a>
message digest is one of the standard engines provided by the Sun
default security provider. You can therefore reasonably expect every
Java implementation to create message digests.
</p>

<p>Message digests are the simplest of the standard engines that compose
the security provider architecture, so they provide a good starting
point in our examination of those engines. In addition, message
digests provide the first link in creating and verifying a digital
signature--the most important goal of the provider architecture.
However, message digests are useful entities in their own right,
since a message digest can verify that data has not been tampered
with--up to a point. As we'll see, there are certain
limitations on the security of a message digest that is transmitted
along with the data it represents.
</p>

<p>Message digests are implemented through a single class:<a name="INDEX-1067"></a><a name="INDEX-1068"></a>
</p>

<dl>
<dt>
<b>public abstract class MessageDigest extends MessageDigestSpi</b>
</dt>
<dd>
<p>Implement operations to create and verify a message digest.</p>
</dd>

</dl>

<p>In Java 1.1, there is no <tt class="literal">MessageDigestSpi</tt> class,
and the <tt class="literal">MessageDigest</tt> class simply extends
<tt class="literal">Object</tt>. That difference is important only if you
want to implement your own message digest class, which we'll do
later in the chapter.
</p>

<p>Like all engines in the Java security package, the
<tt class="literal">MessageDigest</tt> class
(<tt class="literal">java.security.MessageDigest</tt>) is an abstract
class; it defines an interface that all message digests must have,
but the implementation details of a particular message digest class
are hidden in the private classes that accompany a security provider.
This allows a developer to use the message digest class without
knowing the details of a message digest implementation by operating
on the public methods of the message digest class, and it allows
providers of a security package to implement their own message
digests by implementing the abstract methods of the class.
We'll examine the message class from the perspectives of both
developer and implementor in this chapter.
</p>



<h2 class="sect1">9.1. Using the Message Digest Class</h2>

<p>For a developer who wants to operate on a message digest, the first
step is to obtain an instance of the message digest class. Since the
message digest class is abstract, this cannot be done directly;
instead, the developer must use one of these methods:
</p>

<dl>
<dt>
<b>public static MessageDigest getInstance(String algorithm)</b>
</dt>
<dt>
<b>public static MessageDigest getInstance(String algorithm, String provider)</b>
</dt>
<dd>
<p>Return an instance of the message digest class that implements the
given algorithm. In the first case, the security providers are
searched in order following the process we outlined in <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_01.htm">Chapter 8, "Security Providers"</a>; otherwise, only the given provider is
searched. Valid names for the default Sun security provider are SHA,
SHA-1, and MD5. If no provider can be found that implements the given
algorithm, a <tt class="literal">NoSuchAlgorithmException</tt> is thrown.
If the named provider cannot be found, a
<tt class="literal">NoSuchProviderException</tt> is thrown.
</p>
</dd>

</dl>

<p>Once a message digest object has been obtained, the developer can
operate on that object with these methods:
</p>

<dl>
<dt>
<b>public void update(byte input)</b>
</dt>
<dt>
<b>public void update(byte[] input)</b>
</dt>
<dt>
<b>public void update(byte[] input, int offset, int length)</b>
</dt>
<dd>
<p>Add the specified data to the digest. The first of these methods adds
a single byte to the data, the second adds the entire array of bytes,
and the third adds only the specified subset of the array of data.
</p>

<p>These methods may be called in any order and any number of times to
add the desired data to the digest. Consecutive calls to these
methods append data to the internal accumulation of data over which
the digest will be calculated.
</p>
</dd>

<dt>
<b>public byte[] digest()<a name="INDEX-1069"></a>
</b>
</dt>
<dt>
<b>public byte[] digest(byte[] input)</b>
</dt>
<dd>
<p>Compute the message digest on the accumulated data (optionally adding
the specified data before performing the computation). The resulting
digest is returned as a byte array. Once a digest has been
calculated, the internal state of the algorithm is reset, so that the
object may be reused at this point to create a new message digest.
</p>
</dd>

<dt>
<b>public int digest(byte[] output, int offset, int len) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Compute the message digest on the accumulated data and place the
answer into the provided array, starting at the given offset and
copying at most <tt class="literal">len</tt> bytes. Most implementations
do not return a partial digest, so if the amount of space in the
buffer (taking into account its offset) is not sufficient to store
the digest, a <tt class="literal">DigestException</tt> is thrown. This
method returns the size of the digest.
</p>
</dd>

<dt>
<b>public static boolean isEqual(byte digestA[], byte digestB[])</b>
</dt>
<dd>
<p>Compare two digests for equality. Two digests are considered equal
only if each byte in the first digest is exactly equal to each byte
in the second digest and the digests are the same length.
</p>
</dd>

<dt>
<b>public void reset()<a name="INDEX-1070"></a>
<a name="INDEX-1071"></a>
</b>
</dt>
<dd>
<p>Reset the digest object by discarding all accumulated data and
resetting the algorithm that is used to implement the digest. This is
equivalent to creating a new instance of the object. In addition,
this method throws away any information that the
<tt class="literal">toString()</tt> method would have printed (see
below).
</p>
</dd>

<dt>
<b>public final String getAlgorithm()</b>
</dt>
<dd>
<p>Return the string representing the algorithm name (e.g., SHA).</p>
</dd>

<dt>
<b>public String toString()<a name="INDEX-1072"></a>
</b>
</dt>
<dd>
<p>A string representation of a digest by default contains the name of
the class implementing the digest, the words "Message
Digest," and the bytes that were returned by a previous call to
the <tt class="literal">digest()</tt> method. If the
<tt class="literal">digest()</tt> method has not been called, or if the
<tt class="literal">reset()</tt> method has been called, then
"&lt;incomplete&gt;" is printed instead of the digest. An
example string looks like:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">sun.security.provider.SHA Message Digest \
		&lt;0a808982fee54fd74a86aae72eff7991328ff32b&gt;
</pre>
</blockquote>
</dd>


<dt>
<b>public Object clone() throws CloneNotSupportedException</b>
</dt>
<dd>
<p>Return a clone of the object. Message digest implementations need to
implement the <tt class="literal">clone()</tt> method because some
internal operations on the digest object require a call to the
<tt class="literal">digest()</tt> method, which resets the digest. These
operations are typically done on a clone of the object so that the
state of the original object is not changed.
</p>
</dd>

<dt>
<b>public final int getDigestLength() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>
<a name="INDEX-1073"></a>
Return the length of array of bytes that are returned from the
<tt class="literal">digest()</tt> method. This value is usually constant
(i.e., it does not depend on the amount of data that has been sent
through the <tt class="literal">update()</tt> method).
</p>
</dd>

</dl>

<p>Let's see an example of how all of this works. As a simple
case, let's say that we want to save a simple string to a file,
but we're worried that the file might be corrupted when we read
the string back in. Hence, in addition to saving the string, we must
save a message digest. We do this by saving the serialized string
object followed by the serialized array of bytes that constitute the
message digest.
</p>

<p>In order to save the pieces of data, we use this code:</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class Send {
	public static void main(String args[]) {
		try {
			FileOutputStream fos = new FileOutputStream("test");
			MessageDigest md = MessageDigest.getInstance("SHA");
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			String data = "This have I thought good to deliver thee, "+
				"that thou mightst not lose the dues of rejoicing " +
				"by being ignorant of what greatness is promised thee.";
			byte buf[] = data.getBytes();
			md.update(buf);
			oos.writeObject(data);
			oos.writeObject(md.digest());
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}</pre>
</blockquote>

<p>That's all there is to creating a digest of some data. The call
to the <tt class="literal">getInstance()</tt> method finds a message
digest object that implements the SHA message digest algorithm. After
creating our data--which in this case is a simple
string--we pass that data to the <tt class="literal">update()</tt>
method of the message digest. In practice, this code could be
slightly more complicated, since all the data might not be available
at once. As far as the message digest object is concerned, though,
that situation would just require multiple calls to the
<tt class="literal">update()</tt> method instead of a single call (it can
also be handled with digest streams, which we'll examine next).
Once we've loaded all the data into the object, it is a simple
matter to create the digest itself (with the
<tt class="literal">digest()</tt> method) and then save our data objects
to the file.
</p>

<p>Similarly, to retrieve this data we need only read the object back in
and verify the message digest. In order to <a name="INDEX-1074"></a><a name="INDEX-1075"></a>verify
the message digest, we must recompute the digest over the data we
received and test to make sure the digest is equivalent to the
original digest:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class Receive {
	public static void main(String args[]) {
		try {
			FileInputStream fis = new FileInputStream("test");
			ObjectInputStream ois = new ObjectInputStream(fis);
			Object o = ois.readObject();
			if (!(o instanceof String)) {
				System.out.println("Unexpected data in file");
				System.exit(-1);
			}
			String data = (String) o;
			System.out.println("Got message " + data);
			o = ois.readObject();
			if (!(o instanceof byte[])) {
				System.out.println("Unexpected data in file");
				System.exit(-1);
			}
			byte origDigest[] = (byte []) o;
			MessageDigest md = MessageDigest.getInstance("SHA");
			md.update(data.getBytes());
			if (MessageDigest.isEqual(md.digest(), origDigest))
				System.out.println("Message is valid");
			else System.out.println("Message was corrupted");
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}</pre>
</blockquote>

<p>Once again, if the data was not available all at once, we would need
to make multiple calls to the
<tt class="literal">update()</tt><a name="INDEX-1076"></a> method as the data arrived. We do not,
however, need to make sure that calls to the
<tt class="literal">update()</tt> methods between the
<tt class="literal">Send</tt> and <tt class="literal">Receive</tt> classes
match in any sense; that is, if we called the
<tt class="literal">update()</tt> method four times in the
<tt class="literal">Send</tt> class, we do not need to call the
<tt class="literal">update()</tt> method four times (with the same data)
in the <tt class="literal">Receive</tt> class--we can call it once,
five times, or whatever. The calculation of the digest is unaffected
by how the data was placed into the message digest object--as
long as the order of the bytes presented to the various calls to the
<tt class="literal">update()</tt> methods is the same.
</p>

<a name="SEC-CH-9-SECT-1.1"></a>
<h3 class="sect2">9.1.1. Secure Message Digests</h3>

<p>
<a name="INDEX-1077"></a><a name="INDEX-1078"></a><a name="INDEX-1079"></a>As we stated in <a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch07_01.htm">Chapter 7, "Introduction to Cryptography"</a>, the message digest by itself does not give us
a very high level of security. We can tell whether somehow the output
file in this example has been corrupted, because the text that we
read in won't produce the same message digest that was saved
with the file. But there's nothing to prevent someone from
changing both the text and the digest stored in the file in such a
way that the new digest reflects the altered text.
</p>

<p>
<a name="INDEX-1080"></a><a name="INDEX-1081"></a>There are various
ways in which a message digest can be made into a Message
Authentication Code (MAC), but the Java security API does not provide
any standard techniques for doing so. One popular way is to encrypt
the message digest using the encryption engine (if one is available
to you)--which, in fact, is really a variation of a digital
signature.
</p>

<p>
<a name="INDEX-1082"></a>If we are not
able to encrypt the digest, all is not lost; we can also use a
passphrase along with the message digest in order to calculate a
secure message digest (or MAC). This requires that both the sender
and receiver of the data have a shared passphrase that they have kept
secret.
</p>

<p>Using this passphrase, calculating a MAC requires that we:</p>

<ol>
<li>
<p>Calculate the message digest of the secret passphrase concatenated
with the data:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">MessageDigest md = MessageDigest.getInstance("SHA");
String data = "This have I thought good to deliver thee, " +
				"that thou mightst not lose the dues of rejoicing " +
				"by being ignorant of what greatness is promised thee.";
String passphrase = "Sleep no more";
byte dataBytes[] = data.getBytes();
byte passBytes[] = passphrase.getBytes();
md.update(passBytes);
md.update(dataBytes);
byte digest1[] = md.digest();</pre>
</blockquote>
</li>
<li>
<p>Calculate the message digest of the secret passphrase concatenated
with the just-calculated digest:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">md.update(passBytes);
md.update(digest1);
byte mac[] = md.digest();</pre>
</blockquote>
</li>
</ol>

<p>We can substitute this code into our original
<tt class="literal">Send</tt> example, writing out the data string and
the MAC to the file. Note that we can use the same message digest
object to calculate both digests, since the object is reset after a
call to the <tt class="literal">digest()</tt> method. Also note that the
first digest we calculate is not saved to the file: we save only the
data and the MAC. Of course, we must make similar changes to the
<tt class="literal">Receive</tt> example; if the MACs are equal, the data
was not modified in transit.
</p>

<p>As long as we use exactly the same data for the passphrase in both
the transmitting and receiving class, the message digests (that is,
the MACs) still compare as equal. That gives a certain level of
security to the message digest, but it requires that the sender and
the receiver agree on what data to use for the passphrase; the
passphrase cannot be transmitted along with the text. In this case,
the security of the message digest depends upon the security of the
passphrase. Normally, of course, you would prompt for that passphrase
rather than hardcoding into the source as we've done <a name="INDEX-1083"></a><a name="INDEX-1084"></a><a name="INDEX-1085"></a> above.<a name="INDEX-1086"></a><a name="INDEX-1087"></a>
</p>











<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch09_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">8.5. Summary</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">9.2. Message Digest Streams</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
