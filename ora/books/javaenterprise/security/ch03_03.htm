<html>
<head>
<title>Loading Classes (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Loading Classes">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch03_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch03_01.htm">Chapter 3: Java Class Loaders</a></td><td align="right" valign="top" width="172"><a href="ch03_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch03_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">3.3. Loading Classes</h2>

<p>
<a name="INDEX-255"></a><a name="INDEX-256"></a><a name="INDEX-257"></a><a name="INDEX-258"></a><a name="INDEX-259"></a>We'll now
explore the details of how a class loader actually loads classes.
There is a single method of the <tt class="literal">ClassLoader</tt>
class (and all its subclasses) that accomplishes this:
</p>

<dl>
<dt>
<b>public Class <a name="INDEX-260"></a>
loadClass(String name)</b>
</dt>
<dd>
<p>Load and resolve the named class. A
<tt class="literal">ClassNotFoundException</tt> is thrown if the class
cannot be found.
</p>
</dd>

</dl>

<p>This is the simplest way to use a class loader directly: it simply
requires that the class loader be instantiated and then be used via
the <tt class="literal">loadClass()</tt> method. Once the
<tt class="literal">Class</tt> object has been constructed, there are
three ways in which a method in the class can be executed:
</p>

<ul>
<li>
<p>A static method of the class can be executed using the native method
interface of the Java virtual machine. This is the technique the Java
virtual machine uses to execute the <tt class="literal">main()</tt>
method of a Java application once the initial class has been loaded,
but this is not generally a technique used by Java applications.
</p>
</li>
<li>
<p>An object of the class can be constructed using the
<tt class="literal">newInstance()</tt><a name="INDEX-261"></a> method of the
<tt class="literal">Class</tt> class, but only if the class has an
accessible constructor that requires no arguments. Once the object
has been constructed, methods with well-known signatures can be
executed on the object. This is the technique that a program like
<tt class="literal">appletviewer</tt> uses: it loads the initial class of
the applet, constructs an instance of the applet (which calls the
applet's no-argument constructor), and then calls the
applet's <tt class="literal">init()</tt> method (among other
methods).
</p>
</li>
<li>
<p>Starting with JDK 1.1, the <a name="INDEX-262"></a>reflection API can be used to call a
static method on the class, or to construct instances of the object
and execute methods on that object. The reflection API allows more
flexibility than the second choice, since it allows arguments to be
passed to the constructor of the object. This is the technique that
is used by our <tt class="literal">JavaRunner</tt> program.
</p>
</li>
</ul>

<p>The second case is more commonly implemented, if only because
it's simpler (and it is applicable in all versions of Java).
But consider the following modifications to our
<tt class="literal">JavaRunner</tt><a name="INDEX-263"></a>
program:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class JavaRunner implements Runnable {
<b class="emphasis-bold">	final static int numArgs = 2;</b>
	ClassLoader cl;
	String className;
	Object args[];

<b class="emphasis-bold">	JavaRunner(ClassLoader cl, String className, Object args[]) {</b>
<b class="emphasis-bold">		this.cl = cl;</b>
	    this.className = className;
	    this.args = args;
	}

	void invokeMain(Class clazz) {
		.. unchanged ..
	}

	public void run() {
		Class target = null;
		try {
<b class="emphasis-bold">			target = cl.loadClass(className);</b>
			invokeMain(target);
		} catch (ClassNotFoundException cnfe) {
			System.out.println("Can't load " + className);
		}
	}

	static Object[] getArgs(String args[]) {
		.. unchanged ..
	}

	public static void main(String args[])
									throws ClassNotFoundException {
		<b class="emphasis-bold">Class self = Class.forName("JavaRunner");</b>
<b class="emphasis-bold">		JavaRunnerLoader jrl =</b> 
<b class="emphasis-bold">				new JavaRunnerLoader(args[0], self.getClassLoader());</b>
		ThreadGroup tg = new ThreadGroup("JavaRunner Threadgroup");
<b class="emphasis-bold">		Thread t = new Thread(tg,</b>
<b class="emphasis-bold">				new JavaRunner(jrl, args[1], getArgs(args)));</b>
		t.start();
		try {
			t.join();
		} catch (InterruptedException ie) {
			System.out.println("Thread was interrupted");
		}
	}
}</pre>
</blockquote>

<p>We've replaced the <tt class="literal">forName()</tt> method that
we used in our example in <a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch01_01.htm">Chapter 1, "Java Application Security"</a> with the
highlighted code here: now we construct a class loader (an instance
of the
<tt class="literal">JavaRunnerLoader</tt><a name="INDEX-264"></a> class, the definition of which
we'll see in just a bit) and are now using the
<tt class="literal">loadClass()</tt> method to find our target class.
</p>

<p>In Java 1.2, constructing the class loader requires that we find the
class loader that loaded our class and pass that to the constructor
of the <tt class="literal">JavaRunnerLoader</tt> class. In 1.1, we would
not use the <tt class="literal">self</tt> instance variable.
</p>

<p>We've also changed the arguments required to run this program,
which is why we've changed the definition of
<tt class="literal">numArgs</tt>. Previously, we required the name of the
class and any arguments the class requires. Now we require an
additional argument: the name of the URL from which to load all the
classes. Hence, if our <tt class="literal">Cat</tt> class was on the web
server named <em class="filename">piccolo</em>, we could run our
<tt class="literal">JavaRunner</tt> example like this:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">java JavaRunner http://piccolo/ Cat /etc/passwd</b>
root:x:0:1:0000-Admin(0000):/:/usr/bin/csh
daemon:x:1:1:0000-Admin(0000):/:
bin:x:2:2:0000-Admin(0000):/usr/bin:
...</pre>
</blockquote>

<p>Note the difference between this implementation and the one we showed
in <a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch01_01.htm">Chapter 1, "Java Application Security"</a>. In this case, the
<tt class="literal">Cat</tt> class is loaded from the
<tt class="literal">JavaRunner</tt> class loader, and any classes the
<tt class="literal">Cat</tt> class needs are dynamically loaded from that
class loader. In <a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch01_01.htm">Chapter 1, "Java Application Security"</a>, what happened was a
product of the release of Java. In 1.1, the <tt class="literal">Cat</tt>
class was loaded from the primordial class loader; any classes it
required were loaded from the primordial class loader as well. In
1.2, the <tt class="literal">Cat</tt> class was loaded from an instance
of the <tt class="literal">URLClassLoader</tt> class, and any classes it
required were loaded from that class loader as well.
</p>

<p>The practical result is that the security manager and access
controller will give different permissions to the
<tt class="literal">Cat</tt> class depending on which class loader loaded
it: the permissions that are assigned to a class may be different
depending upon whether the class was loaded from the URL class
loader, the <tt class="literal">JavaRunner</tt> class loader, or the
primordial class loader. Exactly how those permissions differ depends
upon the internal implementation of the class loader as well as the
security manager and access controller that are in effect. In a
nutshell, these differences will be based upon where the class loader
found the class, and whether or not that class was
<a name="INDEX-265"></a> signed. <a name="INDEX-266"></a><a name="INDEX-267"></a><a name="INDEX-268"></a>
</p>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch03_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch03_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.2. Anatomy of a Class Loader</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.4. Implementing a Class Loader</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
