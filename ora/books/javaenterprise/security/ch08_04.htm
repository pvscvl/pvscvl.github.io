<html>
<head>
<title>The Architecture of Engine Classes (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The Architecture of Engine Classes">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_01.htm">Chapter 8: Security Providers</a></td><td align="right" valign="top" width="172"><a href="ch08_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">8.4. The Architecture of Engine Classes</h2>

<p>
<a name="INDEX-1055"></a><a name="INDEX-1056"></a>
In the next few chapters, we'll discuss the engine classes that
are part of the core Java API. All engine classes share a similar
architecture that we'll discuss here.
</p>

<p>Most programmers are only interested in using the engine classes to
perform their desired operation; each engine class has a public
interface that defines the operations the engine can perform. None of
this is unusual: it is the basis of programming in Java.
</p>

<p>However, the engine classes are designed so that users can employ
third-party security providers (using the architecture we've
just examined). For programmers who are interested in writing such
providers, the engine classes have an additional interface called the
<a name="INDEX-1057"></a><a name="INDEX-1058"></a>security provider interface (SPI).
The SPI is a set of abstract methods that a particular engine must
implement in order to fulfill its contract of providing a particular
operation.
</p>

<p>
<a name="INDEX-1059"></a>The role of
the SPI has changed between Java 1.1 and Java 1.2. In 1.1, the SPI
was simply a convention. There were a set of protected, usually
abstract, methods in each engine that made up the SPI. By convention,
these methods begin with the word "engine"; implementing
a 1.1 engine is a matter of implementing each of these protected
methods.
</p>

<p>In 1.2, the interface of an engine was split between two distinct
classes: the engine class itself and the SPI class. For example, in
1.2 there is an engine class called
<tt class="literal">MessageDigest</tt>, and its SPI class is called
<tt class="literal">MessageDigestSpi</tt>. For historic reasons, there
are differences in various engine classes between the engine class
itself and the SPI.
</p>

<p>
<a name="INDEX-1060"></a>There were three engine classes in
1.1. In 1.2, the SPI class for these classes is a superclass of the
engine class; e.g., the <tt class="literal">MessageDigest</tt> class
extends the <tt class="literal">MessageDigestSpi</tt> class. This allows
the <tt class="literal">MessageDigest</tt> class in 1.2 to have the same
interface as it does in 1.1, even though the class hierarchy to which
it belongs has changed.
</p>

<p>There are six new engine classes in 1.2, and for these classes, the
SPI is unrelated to the class itself; e.g., there is a
<tt class="literal">KeyFactory</tt> class and a
<tt class="literal">KeyFactorySpi</tt> class, both of which simply
subclass the <tt class="literal">Object</tt> class. In these cases, the
engine class contains an instance of the SPI that it uses to carry
out its operations. <a href="#SEC-CH-8-TABLE-12">Table 8-5</a> summarizes the nine core Java engine
classes and their corresponding SPI.
</p>

<a name="SEC-CH-8-TABLE-12"></a>
<h4 class="objtitle">Table 8-5.  Engine Classes in the Core Java API</h4>
<table border="1">




<tr>
<th>
<p>Engine</p>
</th>
<th>
<p>SPI Class</p>
</th>
<th>
<p>Engine Superclass</p>
</th>
</tr>

<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">AlgorithmParameters <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">AlgorithmParametersSpi</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">Object</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">AlgorithmParameterGenerator <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">AlgorithmParameterGeneratorSpi</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">Object</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">CertificateFactory <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">CertificateFactorySpi</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">Object</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">KeyFactory <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">KeyFactorySpi</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">Object</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">KeyPairGenerator</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">KeyPairGeneratorSpi</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">KeyPairGeneratorSpi</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">KeyStore <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">KeyStoreSpi</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">Object</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">MessageDigest</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">MessageDigestSpi</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">MessageDigestSpi</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">SecureRandom <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">SecureRandomSpi</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">Object</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">Signature</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">SignatureSpi</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">SignatureSpi</pre>
</blockquote>
</td>
</tr>

</table>

<p>What this all means is that if you want to implement a security
provider under Java 1.2, you would typically extend the SPI. This
allows a developer to request a particular engine and receive the
correct class according to the following algorithm:
</p>

<ol>
<li>
<p>The programmer requests an instance of a particular engine that
implements a particular algorithm. Engine classes never have public
constructors; instead, every engine has a
<tt class="literal">getInstance()</tt> method that takes the name of the
desired algorithm as an argument and returns an instance of the
appropriate class.
</p>
</li>
<li>
<p>The <tt class="literal">Security</tt> class is asked to consult its list
of providers and provide the appropriate instance. For example, when
the <tt class="literal">getInstance()</tt> method of the
<tt class="literal">MessageDigest</tt> class is called, the
<tt class="literal">Security</tt> class may determine that the
appropriate provider class is called
<tt class="literal">com.xyz.XYZMessageDigest</tt>.
</p>
</li>
<li>
<p>If the retrieved class does not extend the appropriate SPI (e.g.,
<tt class="literal">java.security.MessageDigestSpi</tt> in this case), a
<tt class="literal">NoSuchAlgorithmException</tt> is generated.
</p>
</li>
<li>
<p>An instance of the retrieved class is created and returned to the
<tt class="literal">getInstance()</tt> method (which in turn returns it
to the developer).
</p>
</li>
</ol>

<p>For consistency, when you implement any engine class in 1.2, it is
always possible to extend the appropriate SPI. However, when you
implement one of the three engines that are part of 1.1, it may make
more sense to extend the engine class (e.g., the
<tt class="literal">MessageDigest</tt> class) rather than the SPI (e.g.,
the <tt class="literal">MessageDigestSpi</tt> class). This allows the
implementation to be used under both 1.1 and 1.2. An engine class
that directly subclasses its SPI in 1.2 cannot be used in 1.1, while
an engine class that directly subclasses a Java engine class can be
used in both 1.1 and 1.2. That is the convention we'll follow
in our <a name="INDEX-1061"></a><a name="INDEX-1062"></a><a name="INDEX-1063"></a>
examples.<a name="INDEX-1064"></a><a name="INDEX-1065"></a>
</p>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch08_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">8.3. The Security Class</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">8.5. Summary</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
