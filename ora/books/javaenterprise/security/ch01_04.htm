<html>
<head>
<title>Running a Java Application (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Running a Java Application">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch01_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch01_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch01_01.htm">Chapter 1: Java Application Security</a></td><td align="right" valign="top" width="172"><a href="ch01_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch01_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">1.4. Running a Java Application</h2>

<p>
<a name="INDEX-31"></a><a name="INDEX-32"></a><a name="INDEX-33"></a>
The parameters of the Java sandbox that we've outlined are
possible elements of a Java application, but they are not required
elements of an application. The remainder of this book will show us
how and when those elements can be introduced into a Java
application. First, however, we're going to discuss the
techniques by which Java applications can be run.
</p>

<p>There are two techniques that we'll introduce in this section:
the <tt class="literal">JavaRunner</tt> technique and the
<tt class="literal">Launcher</tt> technique. While both allow you to run
an application securely, the examples in this chapter do not provide
any security. We'll fill in the security pieces bit by bit,
while we flesh out the security story. At that point, we'll
show how to run Java applications securely.<a href="#FOOTNOTE-2">[2]</a>
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-2"></a>
<p>[2]See, for
example, the end of <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch06_01.htm">Chapter 6, "Implementing Security Policies"</a>.</p> </blockquote>

<p>Typically, we're used to running Java applications simply by
specifying on the command line the name of a class that contains a
<tt class="literal">main()</tt> method. Consider this application that
reads the file specified by a command-line argument:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class Cat {
	public static void main(String args[]) {
		try {
			String s;
			FileReader fr = new FileReader(args[0]);
			BufferedReader br = new BufferedReader(fr);
			while ((s = br.readLine()) != null)
				System.out.println(s);
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}</pre>
</blockquote>

<p>This is a regular Java application; if we wanted to run it and print
out the contents of the password file on a Unix system, we could run
the command:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">java Cat /etc/passwd</b>
root:x:0:1:0000-Admin(0000):/:/usr/bin/csh
daemon:x:1:1:0000-Admin(0000):/:
bin:x:2:2:0000-Admin(0000):/usr/bin:
...</pre>
</blockquote>

<p>From a security point of view, this is a very rudimentary program. It
contains none of the elements of the sandbox that we just listed; it
has the default (wide-open) sandbox given by default to every Java
application. This application can perform any operation it wants.
</p>

<a name="SEC-SIDEBAR-1"></a>
<div class="sidebar">
<h4 class="objtitle">Security and the Operating System</h4>

<p>
<a name="INDEX-34"></a><a name="INDEX-35"></a><a name="INDEX-36"></a>The security policy imposed by Java is
augmented by the security features of the operating system on which
Java is running. A Java application with a wide-open security policy
may attempt to read the password file, but if the user running the
application does not normally have permission to read the password
file, the Java application will not succeed.
</p>

<p>The actual security policy that is in effect for a Java application
will be the intersection of the security policy built into the
application and the security policy of the operating system when the
application is run. For the purposes of this book, we ignore the
security features that the operating system may provide.
</p>
</div>

<p>There are two ways in which we can add security features to this
application. One way is to add to the application a class loader, a
security manager, use of the access controller, and so on. This
additional programming would set the bounds of the sandbox for this
particular application.<a name="INDEX-37"></a><a name="INDEX-38"></a>
</p>

<p>
<a name="INDEX-39"></a><a name="INDEX-40"></a>The other route we can take is
to run this application under the auspices of another application
that we'll call <tt class="literal">JavaRunner</tt>. This is
completely analogous to the way in which we typically run applets:
<tt class="literal">appletviewer</tt> is a Java application that runs
applets, and <tt class="literal">JavaRunner</tt> is a Java application
that runs other applications. <tt class="literal">Java-Runner</tt> is
responsible for establishing the parameters of the Java sandbox (that
is, it ensures that appropriate class loaders, a security manager,
and the like are all in place) before it invokes the target
application, just as <tt class="literal">appletviewer</tt> establishes
the parameters of the Java sandbox before it invokes the target
applet.
</p>

<p>This technique removes the difference (in terms of security) between
an applet and an application: both types of programs are now subject
to the Java sandbox. There are a number of circumstances in which
this is useful:
</p>

<ul>
<li>
<p>If you download (or purchase) Java applications and want them to run
in a sandbox.
</p>
</li>
<li>
<p>If you want to ensure that your internally developed applications all
run in the desired sandbox (without having to include that code in
every application).
</p>
</li>
<li>
<p>If you have a corporate or campus network and need to distribute Java
applications under a new security model. Perhaps the new model will:
</p>
<ul>
<li>
<p>Give different security permissions to programs downloaded from
within the corporate firewall than those from outside the corporate
firewall (without requiring internal classes to be signed)
</p>
</li>
<li>
<p>Authenticate users on the corporate network before allowing sensitive
payroll data to be sent (even over the corporate network)
</p>
</li>
<li>
<p>Encrypt that payroll data, so internal spies can't decipher it</p>
</li>
<li>
<p>Allow the user greater discretion over the resources granted to a
particular program
</p>
</li>
</ul>
</li>
</ul>

<p>Although the <tt class="literal">JavaRunner</tt> program is designed to
run other applications, there is no reason why it cannot be modified
to run applets as well. Such a modification would require some extra
code to parse the HTML containing the applet tag and set up an
instance of the <tt class="literal">AppletStub</tt> and
<tt class="literal">AppletContext</tt> classes for the applet itself.
We're not showing the code to do that only because it's
not really relevant to the discussion of Java security--but the
<tt class="literal">JavaRunner</tt> could easily be extended to become an
<tt class="literal">appletviewer</tt> (or, with an appropriate Java bean
that interprets HTML, a full-fledged browser). The advantage, of
course, is that as author of the browser you would have full control
over the security model the browser
employs.<a name="INDEX-41"></a><a name="INDEX-42"></a>
</p>

<a name="SEC-CH-1-SECT-4.1"></a>
<h3 class="sect2">1.4.1. Outline of the JavaRunner Application</h3>

<p>
<a name="INDEX-43"></a>
Here's the basic implementation of the
<tt class="literal">JavaRunner</tt> application:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class JavaRunner implements Runnable {
	final static int numArgs = 1;
	private Object args[];
	private String className;

	JavaRunner(String className, Object args[]) {
		this.className = className;
		this.args = args;
	}

	void invokeMain(Class clazz) {
		Class argList[] = new Class[] { String[].class };
		Method mainMethod = null;
		try {
			mainMethod = clazz.getMethod("main", argList);
		} catch (NoSuchMethodException nsme) {
			System.out.println("No main method in " + clazz.getName());
			System.exit(-1);
		}
	
		try {
			mainMethod.invoke(null, args);
		} catch (Exception e) {
			Throwable t;
			if (e instanceof InvocationTargetException)
				t = ((InvocationTargetException) e)
                                                   .getTargetException();
			else t = e;
			System.out.println("Procedure exited with exception " + t);
			t.printStackTrace();
		}
	}

	public void run() {
		Class target = null;
		try {
			target = Class.forName(className);
			invokeMain(target);
		} catch (ClassNotFoundException cnfe) {
			System.out.println("Can't load " + className);
		}
	}

	static Object[] getArgs(String args[]) {
		String passArgs[] = new String[args.length - numArgs];
		for (int i = numArgs; i &lt; args.length; i++)
			passArgs[i - numArgs] = args[i];

		Object wrapArgs[] = new Object[1];
		wrapArgs[0] = passArgs;
		return wrapArgs;
	}

	public static void main(String args[]) {	
		if (args.length &lt; 1) {
			System.err.println("usage:  JavaRunner classfile");
			System.exit(-1);
		}
		ThreadGroup tg = new ThreadGroup("JavaRunner Threadgroup");
		Thread t = new Thread(tg,
				new JavaRunner(args[0], getArgs(args)));
		t.start();
		try {
			t.join();
		} catch (InterruptedException ie) {
			System.out.println("Thread was interrupted");
		}
	}
}</pre>
</blockquote>

<p>This is a fully functional (if not full-featured) version of the
<tt class="literal">JavaRunner</tt> program; we can use it to run our
<tt class="literal">Cat</tt> application like this:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">java JavaRunner Cat /etc/passwd</b>
root:x:0:1:0000-Admin(0000):/:/usr/bin/csh
daemon:x:1:1:0000-Admin(0000):/:
bin:x:2:2:0000-Admin(0000):/usr/bin:
...</pre>
</blockquote>

<p>This will give us exactly the same results as when we ran the program
by hand. The<tt class="literal">
invokeMain()</tt><a name="INDEX-44"></a> method will use the Java
<a name="INDEX-45"></a><a name="INDEX-46"></a>
reflection API to find the static <tt class="literal">main()</tt> method
of the <tt class="literal">Cat</tt> class and then construct an
appropriate argument list to pass to that method. Note that the use
of the reflection API introduces a dependency on Java 1.1 for this
program. You can write a similar program under Java 1.0, but not
without using the native (C) interface to Java.
</p>

<p>Note also that we construct a new thread group and thread, and run
the <tt class="literal">main()</tt> method under control of that thread.
The primary reason we do that will become clear in <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch06_01.htm">Chapter 6, "Implementing Security Policies"</a> when we discuss thread security policies. But
there's no reason why you couldn't expand this example to
run multiple targets simultaneously, in which case each target should
have its own thread and thread group anyway.
</p>

<p>We've cheated a little bit here by using the
<tt class="literal">forName()</tt><a name="INDEX-47"></a> method of the <tt class="literal">Class</tt>
class to find our target application class--we'll hear
more about that in <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch03_01.htm">Chapter 3, "Java Class Loaders"</a> when we discuss class
loaders. For now, it will suffice to know that this will load our
target class (assuming that the target class is found on the
<tt class="literal">CLASSPATH</tt>). In addition, we still haven't
done anything to set up a security manager or to enable the access
controller. As a result, the sandbox for an application run under
this program is non-existent: the bytecodes will not be verified, and
there will be no restriction on any actions that the application may
perform. But this is the example that we'll expand upon during
the rest of this book as we add security features to it.
</p>

<p>Don't think that the only function of a program like this is to
run Java applications (or even Java applets). Consider the Java web
server--it must dynamically invoke servlets for different web
requests as those requests come in. An RMI server might operate
similarly, perhaps even loading the code to perform its operations
from a client machine. Although we stick with this example throughout
the book, the need for security in server applications parallels the
need for security in end-user applications<a name="INDEX-48"></a><a name="INDEX-49"></a> .<a name="INDEX-50"></a>
</p>


<a name="SEC-CH-1-SECT-4.2"></a>
<h3 class="sect2">1.4.2. Built-in Java Application Security</h3>

<p>
<a name="INDEX-51"></a><a name="INDEX-52"></a><a name="INDEX-53"></a><a name="INDEX-54"></a>Beginning in Java
1.2, the Java platform itself comes with a security model built into
applications it runs. This model is based upon information in the
user's <a name="INDEX-55"></a><tt class="literal">CLASSPATH</tt>.
Setting the <tt class="literal">CLASSPATH</tt> is the same operation in
Java 1.1 and Java 1.2, but in Java 1.2, classes that are found on the
<tt class="literal">CLASSPATH</tt> may optionally be subject to a
security model. This allows you to run the application code in a
user- or administrator-defined sandbox: in particular, it uses the
<a name="INDEX-56"></a>access controller of Java 1.2 to
provide the same security environment for the target application as a
Java-enabled browser provides for an applet.
</p>

<p>The successful use of this facility depends upon the
<a name="INDEX-57"></a>class loader that the built-in
application runner will use, as well as depending upon the
environment set up by the access controller and security manager.
We'll examine how these facilities interact with this method of
running applications in the next few chapters. For now, we'll
just outline how this method operates.
</p>

<p>As always, Java applications are run on the command line as follows:</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">java Cat /etc/passwd</b>
root:x:0:1:0000-Admin(0000):/:/usr/bin/csh
daemon:x:1:1:0000-Admin(0000):/:
bin:x:2:2:0000-Admin(0000):/usr/bin:
...</pre>
</blockquote>

<p>This example loads the <em class="emphasis">Cat.class</em> file from the
user's <tt class="literal">CLASSPATH</tt> and runs the application
with the single argument <em class="filename">/etc/passwd</em>. As always,
when an application is run in this manner, the sandbox in which the
application runs is unlimited: the application can perform any
activity it wants to.
</p>

<p>There is a very important difference between running these examples
in Java 1.1 and running them in 1.2: in 1.2, classes that are loaded
from the <tt class="literal">CLASSPATH</tt> will be loaded by a class
loader. The addition of the class loader to the
<tt class="literal">CLASSPATH</tt> allows us to build a sandbox for the
application. However, none of these examples actually builds a
sandbox yet. In order to build a sandbox for these examples, we must
specify the <a name="INDEX-58"></a><tt class="literal">-Djava.security.manager</tt> flag on the command line.
This flag enables a security manager and access controller to be
installed; we'll discuss the details of this option in <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch06_01.htm">Chapter 6, "Implementing Security Policies"</a>.
</p>

<p>The <a name="INDEX-59"></a><tt class="literal">-Djava.security.manager</tt> flag is only available in
Java 1.2. Without it, Java applications in 1.2 behave exactly as they
do in 1.1: they have a wide-open sandbox.
</p>

<p>For historical reasons (and because it makes describing this facility
easier), we'll refer to the ability to run applications with an
optional argument to specify a sandbox as the
<tt class="literal">Launcher</tt><a name="INDEX-60"></a><a name="INDEX-61"></a><a name="INDEX-62"></a>. Given that the
<tt class="literal">Launcher</tt> is a standard part of Java, you might
ask why we're going to the trouble of implementing our own
<tt class="literal">JavaRunner</tt>. One reason is simply to make our
discussion clearer: it is easiest to understand the architecture of
Java's security policy in the context of
<tt class="literal">JavaRunner</tt>. Other reasons have to do with
certain limitations that we'll discover about the
<tt class="literal">Launcher</tt>:
</p>

<a name="SEC-SIDEBAR-2"></a>
<div class="sidebar">
<h4 class="objtitle">Secure Applications in 1.2 and 1.2 beta 2</h4>

<p>In releases of 1.2 up through beta 2, running a secure application
requires use of a special class: the <tt class="literal">Launcher</tt>
class
(<tt class="literal">sun.misc.Launcher</tt><a name="INDEX-63"></a><a name="INDEX-64"></a><a name="INDEX-65"></a><a name="INDEX-66"></a>). To run an application under control of
the <tt class="literal">Launcher</tt>, you would execute this command:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">java sun.misc.Launcher Cat /etc/passwd</b>
</pre>
</blockquote>

<p>In 1.2 beta, classes that are loaded from the
<tt class="literal">CLASSPATH</tt> are not subject to the sandbox. In
order to load those classes through a class loader and subject them
to the sandbox, you must specify an alternate classpath for the
classes that make up the application:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">java -Djava.app.class.path=/classes sun.misc.Launcher \</b>
<b class="emphasis-bold">Cat /etc/passwd</b>
</pre>
</blockquote>

<p>If the <tt class="literal">Cat</tt> class is found in
<em class="filename">/classes</em>, it will be subject to the sandbox. If
it is found in the <tt class="literal">CLASSPATH</tt>, it will not.
</p>

<p>Beginning in 1.2 beta 3, the <tt class="literal">Launcher</tt> class was
incorporated into the virtual machine itself, but the syntax to use
it changed in the last few beta releases. In FCS, the correct syntax
is:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">java -Djava.security.manager Cat /etc/passwd</b>
</pre>
</blockquote>
</div>

<ul>
<li>
<p>The <tt class="literal">Launcher</tt> comes only with Java 1.2 and later
releases; if you're still using 1.1, you'll have to use
the <tt class="literal">JavaRunner</tt> program.
</p>
</li>
<li>
<p>The <tt class="literal">Launcher</tt> can only run classes from the
<tt class="literal">CLASSPATH</tt>--it cannot load classes from the
network or from another location. However, simply because the program
in question is an application does not mean we won't want to
load its classes from a server--but we'll need
<tt class="literal">JavaRunner</tt> to do that.
</p>
</li>
<li>
<p>The security manager used by the <tt class="literal">Launcher</tt> does
not have all the features we might desire. While most of its features
are configurable through the access controller (also a feature of
Java 1.2), there are certain advanced policies that we cannot
configure in that way. These features can only be achieved with some
programming on our part.
</p>
</li>
</ul>

<p>Hence, both the <tt class="literal">Launcher</tt> and
<tt class="literal">JavaRunner</tt> are useful mechanisms for running
Java applications; which one you use depends on your particular
<a name="INDEX-67"></a><a name="INDEX-68"></a><a name="INDEX-69"></a><a name="INDEX-70"></a>
requirements.<a name="INDEX-71"></a><a name="INDEX-72"></a><a name="INDEX-73"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch01_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch01_03.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch01_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch01_05.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">1.3. Applications, Applets, and Programs</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">1.5. Summary</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
