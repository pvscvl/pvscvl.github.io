<html>
<head>
<title>Miscellaneous Class Loading Topics (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Miscellaneous Class Loading Topics">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch03_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch03_01.htm">Chapter 3: Java Class Loaders</a></td><td align="right" valign="top" width="172"><a href="ch03_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch03_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">3.6. Miscellaneous Class Loading Topics</h2>

<p>There are a few details that we haven't yet covered. These
details are not directly related to the security aspects of the class
loader, which is why we've saved them until now. If
you're interested in the complete details of the class loader,
we'll fill in the last few topics here.
</p>

<a name="SEC-CH-3-SECT-6.1"></a>
<h3 class="sect2">3.6.1. Delegation</h3>

<p>
<a name="INDEX-331"></a><a name="INDEX-332"></a><a name="INDEX-333"></a><a name="INDEX-334"></a><a name="INDEX-335"></a>Beginning with Java 1.2, class loading
follows a delegation model. This new model permits a class loader to
be instantiated with this constructor:
</p>

<dl>
<dt>
<b>protected ClassLoader(ClassLoader delegate) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Create a class loader that is associated with the given class loader.
This class loader delegates all operations to the delegate first: if
the delegate is able to fulfill the operation, this class loader
takes no action. For example, when the class loader is asked to load
a class via the <tt class="literal">loadClass()</tt> method, it first
calls the <tt class="literal">loadClass()</tt> method of the delegate. If
that succeeds, the class returned by the delegate will ultimately be
returned by this class. If that fails, the class loader then uses its
original logic to complete its task:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public Class loadClass(String name) {
	Class cl;
	cl = delegate.loadClass(name);
	if (cl != null)
		return cl;
	// else continue with the loadClass() logic 
}</pre>
</blockquote>

<p>You may retrieve the delegate associated with a class loader with the
following method.
</p>
</dd>
<dt>
<b>public final ClassLoader getParent() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Return the class loader to which operations are being delegated. If
there is no such class loader, return <tt class="literal">null</tt>.
</p>
</dd>

</dl>

<p>You'll notice that we used delegation in all of our examples.
This is pretty much a requirement: when the virtual machine starts,
it creates a URL class loader that is based on the directories and
JAR files present in your <tt class="literal">CLASSPATH</tt>. That class
loader is the class loader that will be used to load the first class
in your application (i.e., the <tt class="literal">JavaRunner</tt> class
in our example).
</p>

<p>That <a name="INDEX-336"></a>URL
class loader is the only class loader that knows about the
<tt class="literal">CLASSPATH</tt>. If the application will reference any
other classes that are part of the <tt class="literal">CLASSPATH</tt>,
you will be unable to find them unless you use the delegation model
of class loading: the <tt class="literal">JavaRunner</tt> loader will
first ask the URL class loader to load the class. If the class is on
the <tt class="literal">CLASSPATH</tt>, the URL class loader will
succeed; otherwise, the <tt class="literal">Java-Runner</tt> loader will
end up loading the class itself. This logic is built into the
<tt class="literal">loadClass()</tt> method; you do not need to concern
yourself with it at a programming level, but it is the reason why you
must use delegation.
</p>

<p>This URL class loader is known as the system class loader, and it may
be retrieved via the following method:
</p>

<dl>
<dt>
<b>public static classLoader getSystemClassLoader() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Return the system class loader (the class loader that was used to
load the base application classes). If a security manager is in
place, you must have the <tt class="literal">getClassLoader</tt> runtime
permission to use this method (see <a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_01.htm">Chapter 5, "The Access Controller"</a>).
</p>
</dd>

</dl>

<p>Hence, to set up a delegation class loader, you can use this call:</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">jrl = new JavaRunnerLoader(ClassLoader.getSystemClassLoader())</pre>
</blockquote>

<p>instead of the methods we showed earlier.</p>


<a name="SEC-CH-3-SECT-6.2"></a>
<h3 class="sect2">3.6.2. Loading Resources</h3>

<p>
<a name="INDEX-337"></a><a name="INDEX-338"></a>A class loader can load not
only classes, but any arbitrary resource: an audio file, an image
file, or anything else. Instead of calling the
<tt class="literal">loadClass()</tt> method, a resource is obtained by
invoking one of these methods:
</p>

<dl>
<dt>
<b>public URL <a name="INDEX-339"></a>
getResource(String name)</b>
</dt>
<dt>
<b>public InputStream <a name="INDEX-340"></a>
getResourceAsStream(String name)</b>
</dt>
<dt>
<b>public URL <a name="INDEX-341"></a>
findResource(String name) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Find the named resource and return either a URL reference to it or an
input stream from which it can be read. Implementations of class
loaders should look for resources according to their internal rules,
which are typically (but need not be) the same rules as are used to
find classes. In our first <tt class="literal">JavaRunnerLoader</tt>
class, that would mean simply constructing a URL based on the
<tt class="literal">urlBase</tt> concatenated with the
<tt class="literal">name</tt> parameter.
</p>

<p>In 1.1, the default behavior for these methods is to return
<tt class="literal">null</tt>.
</p>

<p>In 1.2, the <tt class="literal">getResource()</tt> method calls the
<tt class="literal">getSystemResource()</tt> method; if it does not find
a system resource, it returns the object retrieved by a call to the
<tt class="literal">findResource()</tt> method (which by default will
still be <tt class="literal">null</tt>). The
<tt class="literal">getResourceAsStream()</tt> method simply calls the
<tt class="literal">getResource()</tt> method and, if a resource is
found, open the stream associated with the URL.
</p>
</dd>

<dt>
<b>public static URL <a name="INDEX-342"></a>
getSystemResource(String name)</b>
</dt>
<dt>
<b>public static InputStream <a name="INDEX-343"></a>
getSystemResourceAsStream(String name)</b>
</dt>
<dd>
<p>Find the named resource and return either a URL reference to it or an
input stream from which it can be read. By default, these methods
look for the resource on the <tt class="literal">CLASSPATH</tt> and
return that resource (if found).
</p>
</dd>

<dt>
<b>public final Enumeration <a name="INDEX-344"></a>
getResources(String name) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dt>
<b>public Enumeration <a name="INDEX-345"></a>
findResources(String name) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Return an enumeration of resources with the given name. In the first
method, an enumeration of the local resources of all delegated class
loaders (including the present class loader) is returned; in the
second method, only the local resources of the present class loader
are returned.
</p>
</dd>

</dl>


<a name="SEC-CH-3-SECT-6.3"></a>
<h3 class="sect2">3.6.3. Loading Libraries</h3>

<p>In 1.2, a new method exists in the <tt class="literal">ClassLoader</tt>
class:
</p>

<dl>
<dt>
<b>protected String findLibrary(String libname) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Return the directory from which native libraries should be loaded.</p>
</dd>

</dl>

<p>This method is used by the <tt class="literal">System.loadLibrary()</tt>
method to determine the directory in which the native library in
question should be found. If this method returns null (the default),
the native library must be in one of the directories specified by
either the <tt class="literal">java.library.path</tt> or
<tt class="literal">java.sys.library.path</tt> property; typically, these
properties are set in a platform-specific way (e.g., from the
<tt class="literal">LD_LIBRARY_PATH</tt> on Solaris or the
<tt class="literal">PATH</tt> on Windows). That mimics the behavior that
applies in 1.1 and earlier releases.
</p>

<p>However, a 1.2 custom class loader can override that policy and
require that libraries be found in some application-defined location.
This prevents a user from overriding the runtime environment to
specify an alternate location for that library, which offers a slight
security advantage. Note that if the user can write to the hardwired
directory where the library lives, this advantage no longer exists:
the user can simply overwrite the existing library instead of
changing an environment variable to point to another library; the end
result is the same.
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch03_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch03_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch03_07.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">3.5. Extensions to the Class Loader</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3.7. Summary</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
