<html>
<head>
<title>A Key Management Example (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="A Key Management Example">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch11_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_01.htm">Chapter 11: Key Management</a></td><td align="right" valign="top" width="172"><a href="ch11_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">11.3. A Key Management Example</h2>

<p>
<a name="INDEX-1397"></a>The Sun implementation of the
<tt class="literal">keytool</tt> utility is useful in many circumstances
where users have disjoint databases. In <a href="ch11_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_02.htm">Figure 11-1</a>
we showed just such an example, and we mentioned that this example
was set up in such a way that the code signer and the end user could
have different key databases.
</p>

<p>This is not to say, however, that those two databases could not have
been the same database--that is, one that is shared by the
signer and the end user. Since access to the private key of the
signer is protected by a password, the signer and the end user are
able to share a single database without concern that the end user may
obtain access to the signer's private key (assuming that she
keeps her password secret, of course). In the case of a corporate
network, this flexibility is important, since an enterprise may want
to maintain a single database that contains the private keys of all
of its employees as well as the certificates of all known external
entities.
</p>

<p>
<a name="INDEX-1398"></a><a name="INDEX-1399"></a><a name="INDEX-1400"></a>We could have these users share the
keystore by using the appropriate filename in the application and the
<em class="filename">java.policy</em> files. But sharing the keytool
database by a file is somewhat inefficient. If the global file is on
a machine in New York and is referenced by a user in Tokyo,
you'll want to use a better network protocol to access it than
a file-based protocol. In addition, the <tt class="literal">load()</tt>
method reads in the entire file. If there are 10,000 users in your
corporate keystore database, you shouldn't need to read each
entry into memory to find the one entry you are interested in
using.<a name="INDEX-1401"></a><a name="INDEX-1402"></a><a name="INDEX-1403"></a>
</p>

<p>Hence, for many applications, you'll want to provide your own
implementation of the <tt class="literal">KeyStore</tt> class.
We'll show a very simple example here as a starting point for
your own implementations. For the payroll application being deployed
by XYZ Corporation, a database containing each employee in the
corporation is necessary. The HR department could set up its own
keystore for this purpose, but a similar keystore will be needed by
the finance department to implement its 401K application; a better
solution is to have a single keystore that is shared between all
departments of XYZ Corporation.
</p>

<p>In this case, the question becomes how best to share this keystore. A
single global file would be too large for programs to read into
memory and too unwieldy for administrators to distribute to all
locations of XYZ Corporation. A better architecture is shown in <a href="#SEC-CH-11-FIG-4">Figure 11-2</a>. Here, the application uses the <a name="INDEX-1404"></a>security provider architecture to
instantiate a new keystore object (of a class that we'll sketch
out below). Unknown to the users of this object, the keystore class
uses RMI (or CORBA, or any other distributed computing protocol) to
talk to a remote server, which accesses the 10,000 employee records
from a database set up for that purpose.
</p>

<a name="SEC-CH-11-FIG-4"></a>
<div class="figure">
<img alt="figure" src="figs/JSEC_1102.gif" webstripperlinkwas="figs/JSEC_1102.gif"></div>
<h4 class="objtitle">Figure 11-2. A distributed keystore example</h4>

<p>Without getting bogged down in the details of the network and
database programming required for this architecture, let's look
at how the <tt class="literal">KeyStore</tt> class itself would be
designed.
</p>

<p>Implementing a keystore requires that we write a
<tt class="literal">KeyStoreSpi</tt> class, just as any other engine class.
For most methods in the <tt class="literal">KeyStore</tt> class, there is a
corresponding abstract engine method in the
<tt class="literal">KeyStoreSpi</tt> class that you must provide an
implementation for. A complete list of these methods is given in
<a href="#SEC-CH-11-TABLE-2">Table 11-1</a>.
</p>

<p>
</p>

<a name="SEC-CH-11-TABLE-2"></a>
<h4 class="objtitle">Table 11-1. Engine methods in the KeyStoreSpi class</h4>
<table border="1">



<tr>
<th>
<p>KeyStore Class</p>
</th>
<th>
<p>KeyStoreSpi class</p>
</th>
</tr>

<tr>
<td>
<p>aliases</p>
</td>
<td>
<p>engineAliases</p>
</td>
</tr>
<tr>
<td>
<p>containsAlias</p>
</td>
<td>
<p>engineContainsAlias</p>
</td>
</tr>
<tr>
<td>
<p>deleteEntry</p>
</td>
<td>
<p>engineDeleteEntry</p>
</td>
</tr>
<tr>
<td>
<p>getCertificate</p>
</td>
<td>
<p>engineGetCertificate</p>
</td>
</tr>
<tr>
<td>
<p>getCertificateAlias</p>
</td>
<td>
<p>engineGetCertificateAlias</p>
</td>
</tr>
<tr>
<td>
<p>getCertificateChain</p>
</td>
<td>
<p>engineGetCertificateChain</p>
</td>
</tr>
<tr>
<td>
<p>getCreationDate</p>
</td>
<td>
<p>engineGetCreationDate</p>
</td>
</tr>
<tr>
<td>
<p>getKey</p>
</td>
<td>
<p>engineGetKey</p>
</td>
</tr>
<tr>
<td>
<p>isCertificateEntry</p>
</td>
<td>
<p>engineIsCertificateEntry</p>
</td>
</tr>
<tr>
<td>
<p>isKeyEntry</p>
</td>
<td>
<p>engineIsKeyEntry</p>
</td>
</tr>
<tr>
<td>
<p>load</p>
</td>
<td>
<p>engineLoad</p>
</td>
</tr>
<tr>
<td>
<p>setCertificateEntry</p>
</td>
<td>
<p>engineSetCertificateEntry</p>
</td>
</tr>
<tr>
<td>
<p>setKeyEntry</p>
</td>
<td>
<p>engineSetKeyEntry</p>
</td>
</tr>
<tr>
<td>
<p>size</p>
</td>
<td>
<p>engineSize</p>
</td>
</tr>
<tr>
<td>
<p>store</p>
</td>
<td>
<p>engineStore</p>
</td>
</tr>

</table>

<p>Many of the methods of our new class are simple passthroughs to the
remote server. If the handle to the remote server is held in the
instance variable <tt class="literal">rks</tt>, a typical method looks
like this:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public Date engineGetCreationDate(String alias) {
	return rks.getCreationDate(alias);
}</pre>
</blockquote>

<p>The methods that could be implemented in this manner are:</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">engineGetKey()
engineGetCertificateChain()
engineGetCertificate()
engineGetCreationDate()
engineAliases()
engineContainsAlias()
engineSize()
engineIsKeyEntry()
engineIsCertificateEntry()
engineGetCertificateAlias()</pre>
</blockquote>

<p>On the other hand, many methods should probably throw an
exception--especially those methods that are designed to alter
the keystore. In an architecture such as this one, changes to the
keystore should probably be done through the database itself--or
at least through a different server than the server used by all
employees in the corporation. So many functions may look simply like
this:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public void engineSetKeyEntry(String alias, Key key,
						char[] passphrase, Certificate chain[])
							throws KeyStoreException {
	throw new KeyStoreException("Can't change the keystore");
}</pre>
</blockquote>

<p>Methods that could be implemented in this manner are:</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">engineSetKeyEntry()
engineSetCertificateEntry()
engineDeleteEntry()
engineStore()</pre>
</blockquote>

<p>Note that we did not include the
<tt class="literal">engineLoad()</tt><a name="INDEX-1405"></a> method in the above list. The
<tt class="literal">engineLoad()</tt> method is useful to us, because it
allows the application to require a password from the user before a
connection to the remote server can be made. This differs slightly
from normal programming for this class. Typically, the
<tt class="literal">engineLoad()</tt> method is called with the input
stream from which to read the keystore. In this case, the
<tt class="literal">engineLoad()</tt> method is expected to be called
with a <tt class="literal">null</tt> input stream, and sets up the
connection to the remote server itself:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public void engineLoad(InputStream is, char[] password)
		throws IOException, NoSuchAlgorithmException, 
				CertificateException {
	rks = Naming.lookup("rmi://KSServer/DistributedKeyServer");
	if (!rks.authenticate(password)) {
		rks = null;
		throw new IOException("Incorrect password");
	}
}</pre>
</blockquote>

<p>Since the keystore database in this architecture cannot be written
through the server, there is some question as to whether a
<a name="INDEX-1406"></a>password
should be required to access the keystore at all (since there are
individual passwords on the private keys). Every employee will
potentially have access to the password (unless it is embedded into
the application itself); you can decide if a password really adds
security in that case. If no password is desired, the
<tt class="literal">engineLoad()</tt> method could be empty and the
connection to the remote server could be made in the constructor.
</p>

<p>On the server side, implementation of the required methods is simply
a matter of making appropriate database calls:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public int engineSize() {
	int sz = -1;
	try {
		Connection conn = connectToDatabase();
		Statement st = conn.createStatement();
		boolean restype = st.execute("select count(*) from entries");
		if (restype) {
			ResultSet rs = st.getResultSet();
			sz = Integer.parseInt(rs.getString(1));
		}
		st.cancel();
	} catch (Exception e) {
		...
	}
	finally {
		return sz;	
	} 
}</pre>
</blockquote>

<p>This architecture works well because it allows the passwords for each
of the private keys to be held in the database itself, so retrievals
of private keys can easily test the password via a simple string
comparison. Implementations of file-based keystores are more
problematic: if the file is readable by the user, obviously the
password cannot be stored in the file as a simple string. File-based
keystores must store their passwords and their private keys in
encrypted form, perhaps using the encryption APIs we'll examine
in <a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch13_01.htm">Chapter 13, "Encryption"</a>. Assuming that the database machine
is secured, such encryption is not required in this architecture.
</p>

<div class="sidebar">
<h4 class="objtitle">Encrypting Private Keys</h4>

<p>
<a name="INDEX-1407"></a><a name="INDEX-1408"></a>In this section,
we've discussed the need for private keys to be stored
encrypted whenever those keys are stored in a location that is
generally accessible to other users. The Sun implementation of the
<tt class="literal">KeyStore</tt> class does this using an internal
algorithm to perform the encryption.
</p>

<p>The <a name="INDEX-1409"></a><a name="INDEX-1410"></a><a name="INDEX-1411"></a>strength of this encryption is
limited; because it is part of the standard Sun distribution, the
encryption must be weak enough to be exportable from the United
States. "Weak" is a relative term in this context; it
still requires some effort for the encryption to be broken, but it
can be done.
</p>

<p>In your own <tt class="literal">KeyStore</tt> class, if you need to
encrypt the private keys you'll want to use the strongest form
of encryption that is suitable for your situation. If you're a
multinational organization, this encryption will not be very strong,
and you're better off storing your private keys on a private
database as we've described here.
</p>
</div>

<p>There are unlimited possibilities in the implementation of a
keystore. One technique might be to create a floppy for each employee
that contains only that employee's entry and to write a
keystore class that looks for key entries from the file on the floppy
and for certificate entries from a global file somewhere.<a href="#FOOTNOTE-3">[3]</a> This type of implementation is
very simple. The new keystore can contain two instances of the Sun
<tt class="literal">KeyStore</tt> class that have read in both files, and
it can use object delegation to implement all of its methods.
</p>
<blockquote class="footnote">
<a name="FOOTNOTE-3"></a>
<p>[3]Of course, we don't want to use a floppy for
this--we want to use a Java-enabled smart card, though of course
we don't all have smart card readers on our computers. At
least, not yet...</p> </blockquote>

<p>Note that this type of two-tiered system is really the ideal. If the
private keys are transmitted over the network, as in our previous
case, then internal spies on the network might snoop the password
used to retrieve the key or the private key that is sent back. If the
private key is held locally, however, and only the public keys are
retrieved from the remote key store, you have a much better
implementation.<a name="INDEX-1412"></a>
</p>

<a name="SEC-CH-11-SECT-3.1"></a>
<h3 class="sect2">11.3.1. Installing a KeyStore Class</h3>

<p>
<a name="INDEX-1413"></a>In
order to use an alternate keystore implementation, you must install
your new class into a security provider. If necessary, you'll
need to establish a convention by which the input stream that is
opened for the <tt class="literal">load()</tt> method is
created--unless your keystore does not require one at all (as,
for example, our RMI-based keystore would not).
</p>

<p>The <tt class="literal">Policy</tt> class uses the keystore in a
predictable manner. Given this entry in the
<em class="filename">java.policy</em> file:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">grant signedBy, "sdo", codeBase "http://piccolo/" {
		...
}</pre>
</blockquote>

<p>the <tt class="literal">Policy</tt> class uses the keystore to look up
the alias for <tt class="literal">sdo</tt>, retrieve
<tt class="literal">sdo</tt>'s public key, and use that public key
to verify any signature that comes from the site
<em class="filename">piccolo</em>. Remember, however, that the Sun
implementation of the <tt class="literal">Policy</tt> class requires an
entry in the <em class="filename">java.policy</em> file that specifies the
URL from which to load the keystore.
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch11_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch11_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">11.2. The KeyStore Class</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">11.4. Summary</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
