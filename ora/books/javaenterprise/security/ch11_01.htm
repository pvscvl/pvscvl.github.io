<html>
<head>
<title>Key Management (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Key Management">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm">Java Security</a></td><td align="right" valign="top" width="172"><a href="ch11_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 11.  Key Management</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_01.htm">Overview of Key Management</a>
<br>
<a href="ch11_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_02.htm">The KeyStore Class</a>
<br>
<a href="ch11_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_03.htm">A Key Management Example</a>
<br>
<a href="ch11_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_04.htm">Summary</a>
<br>
</p>
</div>


<p>In this chapter, we're going to discuss key management, and the
facilities in Java that enable key management. The problem of key
management turns out to be a hard one to solve: there is no
universally accepted approach to key management, and although many
features in Java (and on the Internet) are available to assist with
key management, all key management techniques remain very much works
in progress.
</p>

<p>
<a name="INDEX-1329"></a><a name="INDEX-1330"></a>The fluidity of key management is
evident in the progress of Java itself. Key management with the 1.1
API is very different from key management in 1.2.<a href="#FOOTNOTE-1">[1]</a> Further complicating this picture
is the fact that no Java-enabled browser (including HotJava, but not
including the Java Plug-In) uses the technique for key management
that comes with the JDK. Each requires keys to be kept in a different
key database, and each uses a different technique to store and
retrieve keys from that application-specific database. Key management
remains application-specific.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1]1.2
is now Java 2.</p> </blockquote>

<p>In this chapter, we'll discuss the basic features of Java that
are available for key management, including the default key
management features of the JDK. We'll conclude with an example
of implementing your own key management system. The key management
features we're going to discuss apply primarily to Java 1.2. If
you must implement a key management system under Java 1.1,
you'll need to use the <tt class="literal">IdentityScope</tt> class
as discussed in <a href="appb_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appb_01.htm">Appendix B, "Identity-Based Key Management"</a>. The
<tt class="literal">IdentityScope</tt> class has been deprecated in 1.2.
</p>



<h2 class="sect1">11.1. Overview of Key Management</h2>

<p>
<a name="INDEX-1331"></a>Keys are important to Java's
security model because they allow us to create or verify a digital
signature. In the sandbox model, we usually think of the use of
digital signatures in the context of a signed JAR file. When a JAR
file is signed, we are assured that the classes contained in that
file were actually provided by the entity (the person or corporation)
that signed the JAR file. This allows us to grant privileges to the
signed classes because we know that the classes have not been forged
by a third party. Of course, digital signatures have many other uses
in a particular application.
</p>

<p>We'll discuss the details of digital signatures in <a href="ch12_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch12_01.htm">Chapter 12, "Digital Signatures"</a>. For now, it's enough to know that a
digital signature is created with a private key, then transferred
electronically (along with the data it signed). When the digital
signature is received, it must be verified, which requires a public
key that corresponds to the private key that generated the signature.
</p>

<p>The purpose of a key management system is two-fold. When you need to
digitally sign something, the key management system must provide your
private key for the code that creates the digital signature. When you
need to verify a digital signature, the key management system must
provide the public key that will be used for verification. A key
management system may encompass other operations (it may, for
example, provide information about the degree to which a particular
individual should be trusted), but it exists primarily to serve up
keys.
</p>

<p>Hence, there are three elements of a key management system:</p>

<dl>
<dt>
<b>Keys</b>
</dt>
<dd>
<p>The keys in a key management system can be used for several
cryptographic operations, but in general we will use them to sign
data, such as a JAR file. An entity in the key management database
can have no keys, a public key, or both a public key and a private
key.
</p>
</dd>

<dt>
<b>Certificates</b>
</dt>
<dd>
<p>Certificates are used to verify that the association between a public
key and an entity is valid. Verification of a digital signature
requires the public key that belongs to the entity that created the
digital signature; a certificate verifies that the public key itself
has not been forged and does indeed belong to the desired identity.
</p>
</dd>

<dt>
<b>Identities</b>
</dt>
<dd>
<p>Identities are an abstraction of individuals, companies, or any other
entity that might have a key. The purpose of a key management system
is to associate identities with their keys. This association must be
stored somewhere; we refer to the database in which these
associations are stored as the key database or the keystore.
</p>
</dd>

</dl>

<p>Java 1.1 comes with a key management system that is based upon the
<tt class="literal">javakey</tt><a name="INDEX-1332"></a> utility. <tt class="literal">Javakey</tt>
has several limitations; in particular, it stores public and private
keys in the same, unprotected location (often called an identity
database). This allows anyone with access to the
<tt class="literal">javakey</tt> database to determine all the keys that
were stored in the file. Since access is required to obtain your own
private key to generate your own digital signature, this essentially
gives all users access to each other's keys. This problem was a
limitation of the <tt class="literal">javakey</tt> utility itself.
It's possible to use the 1.1 classes to write a key database in
such a way that your private key is held separately from a group of
public keys (see <a href="appb_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appb_01.htm">Appendix B, "Identity-Based Key Management"</a>).
</p>

<p>The <tt class="literal">javakey</tt> utility was an interim solution to
the key management problem; it is no longer available. In 1.2,
<tt class="literal">javakey</tt> has been replaced by a new utility
called <tt class="literal">keytool</tt><a name="INDEX-1333"></a>. <tt class="literal">Keytool</tt> is a
much better tool, in that individual private and public keys can be
stored in the same database, and retrieval of each key can be made
subject to a password. The <tt class="literal">keytool</tt> database is
often referred to as the
<a name="INDEX-1334"></a>keystore.
</p>

<p>Unfortunately, the default implementation of the
<tt class="literal">keytool</tt> database still has certain limitations;
in particular, it is difficult to share the keys in a
<tt class="literal">keytool</tt> database among a widely dispersed group
of people (like all the employees of XYZ Corporation). We can,
however, use the framework that the <tt class="literal">keytool</tt>
database uses to create a key management system that has whatever
features we require.
</p>

<p>That framework is the ultimate goal of this chapter. First, however,
let's take a brief look at the notion of the identity to whom a
key belongs. In Java's key management model, the association
between a key and its owner is application-specific. There is an
<tt class="literal">Identity</tt> class in Java that was used for this
purpose in 1.1, but it has been deprecated (because, among other
things, it used the wrong <tt class="literal">Certificate</tt> class).
However, there is still one interface that can be useful in your own
applications that use keys: the <tt class="literal">Principal</tt>
interface.
</p>

<a name="SEC-CH-11-SECT-1.1"></a>
<h3 class="sect2">11.1.1. Principals</h3>

<p>
<a name="INDEX-1335"></a><a name="INDEX-1336"></a><a name="INDEX-1337"></a><a name="INDEX-1338"></a><a name="INDEX-1339"></a>
Classes that are concerned with identities and key management in the
Java security package generally implement the
<tt class="literal">Principal</tt> interface
(<tt class="literal">java.security.Principal</tt>):
</p>

<dl>
<dt>
<b>public interface Principal</b>
</dt>
<dd>
<p>Provide an interface that supports the notion of an entity. In
particular, principals have a name, but little else.
</p>
</dd>

</dl>

<p>There is a single method that implementors of the
<tt class="literal">Principal</tt> interface must implement:
</p>

<dl>
<dt>
<b>public String getName()<a name="INDEX-1340"></a>
</b>
</dt>
<dd>
<p>Return the name of the principal. This is typically an X.500
distinguished name, but it may be any arbitrary name.
</p>
</dd>

</dl>

<p>The only idea that the <tt class="literal">Principal</tt> interface
abstracts is that principals have a name. The Java documentation
claims that a principal is anything that can have an identity, but
don't be confused by that statement; the word
"identity" is being overloaded in this context. The
deprecated <tt class="literal">Identity</tt> class is a principal, but
there are classes implementing the <tt class="literal">Principal</tt>
interface that are unrelated to the <tt class="literal">Identity</tt>
class.
</p>

<a name="CH-11-SIDEBAR-1"></a>
<div class="sidebar">
<h4 class="objtitle">What's in a Name?</h4>

<p>
<a name="INDEX-1341"></a><a name="INDEX-1342"></a><a name="INDEX-1343"></a><a name="INDEX-1344"></a><a name="INDEX-1345"></a>X509 certificates (and many other ANSI
standards) make use of the idea of a distinguished name (usually
referred to as a DN). The distinguished name of an individual
includes these fields:
</p>

<dl>
<dt>
<b>Common Name (CN)<a name="INDEX-1346"></a>
<a name="INDEX-1347"></a>
</b>
</dt>
<dd>
<p>The (full) common name of the individual</p>
</dd>

<dt>
<b>Organizational Unit (OU)<a name="INDEX-1348"></a>
</b>
</dt>
<dd>
<p>The unit the individual is associated with</p>
</dd>

<dt>
<b>Organization (O)</b>
</dt>
<dd>
<p>The organization the individual is associated with</p>
</dd>

<dt>
<b>Location (L)</b>
</dt>
<dd>
<p>The city where the individual is located</p>
</dd>

<dt>
<b>State (S)</b>
</dt>
<dd>
<p>The state/province where the individual is located</p>
</dd>

<dt>
<b>Country (C)</b>
</dt>
<dd>
<p>The country where the individual is located</p>
</dd>

</dl>

<p>The DN specification allows other fields as well, although these are
the fields used internally in Java. The organization that is
associated with an individual is typically the company the individual
works for, but it can be any other organization (and of course, you
may not be associated with an organization under a variety of
circumstances).
</p>

<p>The idea behind a DN is that it limits to some extent name
duplication. There are other Scott Oakses in the world, but only one
who has a DN of:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">CN=Scott Oaks, OU=SMCC, O=Sun Microsystems, L=NY, S=NY, C=US</pre>
</blockquote>

<p>On the other hand, this is not absolute; there are many non-unique
DNs.
</p>
</div>

<p>Further confusion about this interface can arise because there are
two principal objects in Java 1.2: the
<tt class="literal">java.security.Principal</tt> interface (introduced in
1.1), and the <tt class="literal">org.omg.CORBA.Principal</tt> class
(introduced in 1.2). These classes are unrelated, and we'll
discuss only the <tt class="literal">java.security.Principal</tt>
interface throughout this book.
</p>

<p>The name that is stored in a principal is often an X.500
distinguished name (DN). That is particularly true when a principal
is used in certain certificates (like X509 certificates); it is not
an absolute requirement by any means.
</p>

<p>There are other methods listed in the <tt class="literal">Principal</tt>
interface--namely, the <tt class="literal">equals()</tt>,
<tt class="literal">toString()</tt>, and <tt class="literal">hashCode()</tt>
methods. There's no reason for those methods to be listed in
the <tt class="literal">Principal</tt> interface, since every class
already inherits those methods from the <tt class="literal">Object</tt>
class. If you implement the <tt class="literal">Principal</tt> interface,
the only method you must implement is the
<tt class="literal">getName()</tt> method. You should make sure that the
other methods of the <tt class="literal">Principal</tt> interface are
implemented correctly--but you should ensure that these methods
of the <tt class="literal">Object</tt> class are implemented correctly
for all your classes, not just those that implement the
<tt class="literal">Principal</tt> interface.<a name="INDEX-1349"></a><a name="INDEX-1350"></a><a name="INDEX-1351"></a><a name="INDEX-1352"></a><a name="INDEX-1353"></a>
</p>











<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch11_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">10.6. Summary</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">11.2. The KeyStore Class</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
