<html>
<head>
<title>Keys and Certificates (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Keys and Certificates">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm">Java Security</a></td><td align="right" valign="top" width="172"><a href="ch10_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 10.  Keys and Certificates</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_01.htm">Keys</a>
<br>
<a href="ch10_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_02.htm">The KeyPairGenerator Class</a>
<br>
<a href="ch10_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_03.htm">The KeyFactory Class</a>
<br>
<a href="ch10_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_04.htm">Certificates</a>
<br>
<a href="ch10_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_05.htm">Keys, Certificates, and Object Serialization</a>
<br>
<a href="ch10_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_06.htm">Summary</a>
<br>
</p>
</div>


<p>In this chapter, we discuss the classes in the Java security package
that handle keys and certificates. Keys are a necessary component of
many cryptographic algorithms--in particular, keys are required
to create and verify digital signatures. The keys we're going
to discuss in this chapter are public keys and private keys, since
those are the keys most often used in a digital signature. Secret
keys--used for encryption algorithms--are discussed in
<a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch13_01.htm">Chapter 13, "Encryption"</a>. We defer that discussion because secret
keys do not come with standard Java implementations; they come only
with the Java Cryptography Extension.
</p>

<p>We also cover the implementation of certificates in this chapter.
Certificates are used to authenticate keys; when keys are transmitted
electronically, they are often embedded within certificates.
</p>

<p>
<a name="INDEX-1121"></a>Keys and
<a name="INDEX-1122"></a>certificates
are normally associated with some person or organization, and the way
in which keys are stored, transmitted, and shared is an important
topic in the security package. Management of keys is left for the
next chapter, however; right now, we're just concerned about
the APIs that implement keys and certificates. As usual, we'll
show how a programmer interacts with keys and certificates, as well
as how you might implement your own versions of each.
</p>

<p>
<a name="INDEX-1123"></a><a name="INDEX-1124"></a>The classes and engines we discuss in
this chapter are outlined in <a href="#SEC-CH-10-FIG-2">Figure 10-1</a>. There are
two engines that operate on keys:
</p>

<ul>
<li>
<p>The <tt class="literal">KeyPairGenerator</tt> class generates keys from
scratch. With no input (or, possibly, input to initialize it to a
certain state), the generator can produce one or more pairs of keys.
</p>
</li>
<li>
<p>The <tt class="literal">KeyFactory</tt> class translates between key
objects and their external representations, which may be either a
byte array or a key specification; this translation goes both ways.
</p>
</li>
</ul>


<a name="SEC-CH-10-FIG-2"></a>
<div class="figure">
<img alt="figure" src="figs/JSEC_1001.gif" webstripperlinkwas="figs/JSEC_1001.gif"></div>
<h4 class="objtitle">Figure 10-1. The interaction of key classes</h4>


<p>There are a number of classes and interfaces we'll discuss to
facilitate support for <a href="#SEC-CH-10-FIG-2">Figure 10-1</a>; in addition to
the engine classes themselves, there are several classes and
interfaces that represent the key objects and the key specifications
(the encoded key data is always an array of bytes). In an effort to
provide the complete story, we'll delve into the details of all
of these classes; for the most part, however, the important
operations that most developers will need are:
</p>

<ul>
<li>
<p>The ability to create a new pair of keys from scratch using the key
pair generator
</p>
</li>
<li>
<p>The ability to export a key, either as a parameter specification or
as a set of bytes, and the corresponding ability to import that data
in order to create a key
</p>
</li>
</ul>

<p>This means that, for the most part, the data objects we explore in
this chapter--the <tt class="literal">Key</tt> classes and
interfaces as well as the various <tt class="literal">KeySpec</tt>
classes (key specification classes)--can be treated by most
programmers as opaque objects. We'll show their complete
interface (which you might be curious about, and which is absolutely
needed if you're writing your own security provider), but
we'll try not to lose sight of the two goals of this chapter.
</p>

<p>Also note that the idea of the key factory and key specifications is
available only with Java 1.2.<a href="#FOOTNOTE-1">[1]</a> In Java 1.1, you can get the encoded key data
directly from a key, but that's a one-way operation.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1]1.2 is now Java
2.</p> </blockquote>



<h2 class="sect1">10.1. Keys</h2>

<p>Let's start with the various classes that support the notion of
keys within Java.
</p>

<a name="SEC-CH-10-SECT-1.1"></a>
<h3 class="sect2">10.1.1. The Key Interface</h3>

<p>
<a name="INDEX-1125"></a><a name="INDEX-1126"></a>The
concept of a key is modeled by the <tt class="literal">Key</tt> interface
(<tt class="literal">java.security.Key</tt>):
</p>

<dl>
<dt>
<b>public interface Key extends Serializable</b>
</dt>
<dd>
<p>Model the concept of a single key. Because keys must be transferred
to and from various entities, all keys must be serializable.
</p>
</dd>

</dl>

<p>As we discussed in <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_01.htm">Chapter 8, "Security Providers"</a>, there might be
several algorithms available for generating (and understanding) keys,
depending on the particular security providers that are installed in
the virtual machine. Hence, the first thing a key needs to be able to
tell us is what algorithm generated it:
</p>

<dl>
<dt>
<b>public String getAlgorithm()<a name="INDEX-1127"></a>
</b>
</dt>
<dd>
<p>Return a string describing the algorithm used to generated this key;
this string should be the name of a standard key generation
algorithm.
</p>
</dd>

</dl>

<p>We listed the standard algorithm names for key generation in <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_01.htm">Chapter 8, "Security Providers"</a>, but with the default provider with the JDK,
this string is always DSA.
</p>

<p>
<a name="INDEX-1128"></a><a name="INDEX-1129"></a>
When a key is transferred between two parties, it is usually encoded
as a series of bytes; this encoding must follow a format defined for
the type of key. Keys are not required to support encoding--in
which case the format of the data transferred between the two parties
in a key exchange is either obvious (e.g., simply the serialized data
of the key) or specific to a particular implementation. Keys tell us
the format they use for encoding their output with this method:
</p>

<dl>
<dt>
<b>public String getFormat()<a name="INDEX-1130"></a>
</b>
</dt>
<dd>
<p>Return a string describing the format of the encoding the key
supports.
</p>
</dd>

</dl>

<p>For DSA keys produced by the Sun security provider, this format is
always PKCS#8 for private keys and X.509 for public keys. The encoded
data of the key itself is produced by this method:
</p>

<dl>
<dt>
<b>public byte[] getEncoded()<a name="INDEX-1131"></a>
</b>
</dt>
<dd>
<p>Return the bytes that make up the particular key in the encoding
format the key supports. The encoded bytes are the external
representation of the key in binary format.
</p>
</dd>

</dl>

<p>Those are the only methods that a key is guaranteed to implement
(other than methods of the <tt class="literal">Object</tt> class, of
course; most implementations of keys override many of those methods).
In particular, you'll note that there is nothing in the key
interface that says anything about decoding a key. We'll say
more about that later.
</p>

<p>There are two additional key interfaces in the Java security API:</p>

<blockquote class="simplelist">
<p>
<em class="emphasis">public interface PublicKey extends Key</em>
</p>
<p>
<em class="emphasis">public interface PrivateKey extends Key</em>
</p>
</blockquote>

<p>
<a name="INDEX-1132"></a><a name="INDEX-1133"></a><a name="INDEX-1134"></a>These interfaces contain no
additional methods. They are used simply for type convenience. A
class that implements the <tt class="literal">PublicKey</tt> interface
identifies itself as a public key, but it contains no methods that
are different from any other key.
</p>

<a name="SEC-CH-10-SECT-1.1.1"></a>
<h3 class="sect3">10.1.1.1. DSA keys</h3>

<p>
<a name="INDEX-1135"></a><a name="INDEX-1136"></a>
The keys supported by the Sun security provider are built around the
DSA algorithm. DSA-generated keys are important enough to have
several interfaces built around them; these interfaces enhance your
ability to work with these specific types of keys. These interfaces
are necessary because DSA keys have certain pieces of information
that are not reflected in the default key interfaces: the DSA
algorithm-specific parameters <em class="emphasis">p</em>,
<em class="emphasis">q</em>, and <em class="emphasis">g</em> that are used to
generate the keys. Knowledge of these variables is abstracted into
the <tt class="literal">DSAParams</tt><a name="INDEX-1137"></a><a name="INDEX-1138"></a> interface
(<tt class="literal">java.security.interfaces.DSAParams</tt>):
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public interface DSAParams {
	public BigInteger getP();
	public BigInteger getQ();
	public BigInteger getG();
}</pre>
</blockquote>

<p>Keys that are generated by DSA will typically implement the
<tt class="literal">DSAKey</tt> interface
(<tt class="literal">java.security.interfaces.DSAKey</tt>):<a name="INDEX-1139"></a><a name="INDEX-1140"></a>
</p>

<dl>
<dt>
<b>public interface DSAKey</b>
</dt>
<dd>
<p>Provide DSA-specific information about a key.</p>
</dd>

</dl>

<p>Implementing this interface serves two purposes. First, it allows the
programmer to determine if the key is a DSA key by checking its type.
The second purpose is to allow the programmer to access the DSA
parameters using this method in the <tt class="literal">DSAKey</tt>
interface:
</p>

<dl>
<dt>
<b>public DSAParams getParams()<a name="INDEX-1141"></a>
</b>
</dt>
<dd>
<p>Return the DSA parameters associated with this key.</p>
</dd>

</dl>

<p>These methods and interfaces allow us to do specific key manipulation
like this:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public void printKey(Key k) {
	if (k instanceof DSAKey) {
		System.out.println("key is DSA");
		System.out.println("P value is " +
						((DSAKey) k).getParams().getP());
	}
	else System.out.println("key is not DSA");
}</pre>
</blockquote>

<p>The idea of a DSA key is extended even further by these two
interfaces (both of which are in the
<tt class="literal">java.security.interfaces</tt> package):
</p>

<dl>
<dt>
<b>public interface DSAPrivateKey extends DSAKey</b>
</dt>
<dt>
<b>public interface DSAPublicKey extends DSAKey</b>
</dt>
<dd>
<p>
<a name="INDEX-1142"></a><a name="INDEX-1143"></a><a name="INDEX-1144"></a><a name="INDEX-1145"></a><a name="INDEX-1146"></a>These interfaces allow the
programmer to retrieve the additional key-specific values (known as
<em class="emphasis">y</em> for public keys and <em class="emphasis">x</em> for
private keys in the DSA algorithm):
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public void printKey(DSAKey k) {
	if (k instanceof DSAPublicKey)
		System.out.println("Public key value is " +
					((DSAPublicKey) k).getY());
	else if (k instanceof DSAPrivateKey)
		System.out.println("Private key value is " +
					((DSAPrivateKey) k).getX());
	else System.out.println("Bad key implementation");
}</pre>
</blockquote>
</dd>

</dl>

<p>DSA keys are often used in the Java world (and elsewhere in
cryptography), and if you know you're dealing with DSA keys,
these interfaces can be very useful. In particular, if you're
writing a security provider that provides an implementation of DSA
keys, you should ensure that you implement all of these interfaces
correctly. For most programmers, however, keys are opaque objects,
and the algorithm-specific features of DSA keys are
<a name="INDEX-1147"></a><a name="INDEX-1148"></a> not needed.<a name="INDEX-1149"></a><a name="INDEX-1150"></a><a name="INDEX-1151"></a><a name="INDEX-1152"></a>
</p>




<a name="SEC-CH-10-SECT-1.2"></a>
<h3 class="sect2">10.1.2. The KeyPair Class</h3>

<p>
<a name="INDEX-1153"></a><a name="INDEX-1154"></a><a name="INDEX-1155"></a>There are no classes in the core JDK
that implement any of the <tt class="literal">Key</tt> interfaces.
However, there is one concrete class, the
<tt class="literal">KeyPair</tt> class
(<tt class="literal">java.security.KeyPair</tt>), that extends the
abstraction of keys:
</p>

<dl>
<dt>
<b>public final class KeyPair</b>
</dt>
<dd>
<p>Model a data object that contains a public key and a private key.</p>
</dd>

</dl>

<p>The <tt class="literal">KeyPair</tt> class is a very simple data
structure class, containing two pieces of information: a public key
and a private key. When we need to generate our own keys (which
we'll do next), we'll need to generate both the public
and private key at once. This object will contain both of the
necessary keys. If you're not interested in generating your own
keys, this class may be ignored.
</p>

<p>The <tt class="literal">KeyPair</tt> class contains only two methods:</p>

<dl>
<dt>
<b>public PublicKey getPublic()<a name="INDEX-1156"></a>
<a name="INDEX-1157"></a>
</b>
</dt>
<dt>
<b>public PrivateKey getPrivate()</b>
</dt>
<dd>
<p>Return the desired key from the key pair.</p>
</dd>

</dl>

<p>A key pair object is instantiated through a single constructor:</p>

<dl>
<dt>
<b>public KeyPair(PublicKey pub, PrivateKey priv)</b>
</dt>
<dd>
<p>Create a key pair object, initializing each member of the pair.</p>
</dd>

</dl>

<p>In theory, a key pair should not be initialized without both members
of the pair being present; there is nothing, however, that prevents
us from passing <tt class="literal">null</tt> as one of the keys.
Similarly, there are no security provisions within the
<tt class="literal">KeyPair</tt> class that prevent the private key from
being accessed--no calls to the security manager are made when
the <tt class="literal">getPrivate()</tt> method is invoked. Hence the
<tt class="literal">KeyPair</tt> class should be used with
caution.<a name="INDEX-1158"></a><a name="INDEX-1159"></a><a name="INDEX-1160"></a>
</p>















<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch10_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">9.4. Summary</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">10.2. The KeyPairGenerator Class</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
