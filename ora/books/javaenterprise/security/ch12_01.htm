<html>
<head>
<title>Digital Signatures (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Digital Signatures">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch11_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm">Java Security</a></td><td align="right" valign="top" width="172"><a href="ch12_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch12_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 12.  Digital Signatures</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch12_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch12_01.htm">The Signature Class</a>
<br>
<a href="ch12_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch12_02.htm">Signed Classes</a>
<br>
<a href="ch12_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch12_03.htm">Implementing a Signature Class</a>
<br>
<a href="ch12_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch12_04.htm">Summary</a>
<br>
</p>
</div>


<p>In the previous few chapters, we've examined various aspects of
Java's security package with an eye toward the topics of this
chapter: the ability to generate and to verify digital signatures.
We've now reached the fruits of that examination. In this
chapter, we'll explore the mechanisms of the digital signature.
</p>

<p>
<a name="INDEX-1416"></a>The use and verification of digital
signatures is another standard engine that is included in the
security provider architecture. Like the other engines we've
examined, the classes that implement this engine have both a public
interface and an SPI for implementors of the engine.
</p>

<p>In the JDK, the most common use of digital signatures is to create
signed classes; users have the option of granting additional
privileges to these signed classes using the mechanics of the access
controller. In addition, a security manager and a class loader can
use this information to change the policy of the security manager;
this technique is quite useful in 1.1. Hence, we'll also show
an example that reads a signed JAR file.
</p>



<h2 class="sect1">12.1. The Signature Class</h2>

<p>
<a name="INDEX-1417"></a><a name="INDEX-1418"></a><a name="INDEX-1419"></a>Operations
on digital signatures are abstracted by the
<tt class="literal">Signature</tt> class
(<tt class="literal">java.security.Signature</tt>):
</p>

<dl>
<dt>
<b>public abstract class Signature extends SignatureSpi</b>
</dt>
<dd>
<p>Provide an engine to create and verify digital signatures. In Java
1.1, there is no <tt class="literal">SignatureSpi</tt> class, and this
class simply extends the <tt class="literal">Object</tt> class.
</p>
</dd>

</dl>

<p>The Sun security provider includes a single implementation of this
class that generates signatures based on the DSA algorithm.
</p>

<a name="SEC-CH-12-SECT-1.1"></a>
<h3 class="sect2">12.1.1. Using the Signature Class</h3>

<p>As with all engine classes, instances of the
<tt class="literal">Signature</tt> class are obtained by calling one of
these methods:
</p>

<dl>
<dt>
<b>public static Signature getInstance(String algorithm)<a name="INDEX-1420"></a>
</b>
</dt>
<dt>
<b>public static Signature getInstance(String algorithm, String provider)</b>
</dt>
<dd>
<p>Generate a signature object that implements the given algorithm. If
no provider is specified, all providers are searched in order for the
given algorithm as discussed in <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_01.htm">Chapter 8, "Security Providers"</a>;
otherwise, the system searches for the given algorithm only in the
given provider. If an implementation of the given algorithm is not
found, a <tt class="literal">NoSuchAlgorithmException</tt> is thrown. If
the named security provider cannot be found, a
<tt class="literal">NoSuchProviderException</tt> is thrown.
</p>

<p>Beginning in 1.2,<a href="#FOOTNOTE-1">[1]</a> if the algorithm string is "DSA", the string
"SHA/DSA" is substituted for it. Hence, implementors of
this class that provide support for DSA signing must register
themselves appropriately (that is, with the message digest algorithm
name) in the security provider.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1]1.2 is now Java 2.</p>
</blockquote>
</dd>

</dl>

<p>Once a signature object is obtained, the following methods can be
invoked on it:
</p>

<dl>
<dt>
<b>public void final initVerify(PublicKey publicKey)<a name="INDEX-1421"></a>
</b>
</dt>
<dd>
<p>Initialize the signature object, preparing it to verify a signature.
A signature object must be initialized before it can be used. If the
key is not of the correct type for the algorithm or is otherwise
invalid, an <tt class="literal">InvalidKeyException</tt> is thrown.
</p>
</dd>

<dt>
<b>public final void initSign(PrivateKey privateKey)<a name="INDEX-1422"></a>
</b>
</dt>
<dd>
<p>Initialize the signature object, preparing it to create a signature.
A signature object must be initialized before it can be used. If the
key is not of the correct type for the algorithm or is otherwise
invalid, an <tt class="literal">InvalidKeyException</tt> is thrown.
</p>
</dd>

<dt>
<b>public final void update(byte b)</b>
</dt>
<dt>
<b>public final void update(byte[] b)<a name="INDEX-1423"></a>
</b>
</dt>
<dt>
<b>public final void update(byte b[], int offset, int length)</b>
</dt>
<dd>
<p>Add the given data to the accumulated data the object will eventually
sign or verify. If the object has not been initialized, a
<tt class="literal">SignatureException</tt> is thrown.
</p>
</dd>

<dt>
<b>public final byte[] sign()</b>
</dt>
<dt>
<b>public final int sign(byte[] outbuf, int offset, int len) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>
<a name="INDEX-1424"></a>
Create the digital signature, assuming that the object has been
initialized for signing. If the object has not been properly
initialized, a <tt class="literal">SignatureException</tt> is thrown.
Once the signature has been generated, the object is reset so that it
may generate another signature based on some new data (however, it is
still initialized for signing; a new call to the
<tt class="literal">initSign()</tt> method is not required).
</p>

<p>In the first of these methods, the signature is returned from the
method. Otherwise, the signature is stored into the
<tt class="literal">outbuf</tt> array at the given offset, and the length
of the signature is returned. If the output buffer is too small to
hold the data, an <tt class="literal">IllegalArgumentException</tt> will be
thrown.
</p>
</dd>

<dt>
<b>public final boolean verify(byte[] signature)<a name="INDEX-1425"></a>
</b>
</dt>
<dd>
<p>Test the validity of the given signature, assuming that the object
has been initialized for verification. If the object has not been
properly initialized, then a <tt class="literal">SignatureException</tt>
is thrown. Once the signature has been verified (whether or not the
verification succeeds), the object is reset so that it may verify
another signature based on some new data (no new call to the
<tt class="literal">initVerify()</tt> method is required).
</p>
</dd>

<dt>
<b>public final String getAlgorithm()<a name="INDEX-1426"></a>
</b>
</dt>
<dd>
<p>Get the name of the algorithm this object implements.</p>
</dd>

<dt>
<b>public String toString()<a name="INDEX-1427"></a>
</b>
</dt>
<dd>
<p>A printable version of a signature object is composed of the string
"<tt class="literal">Signature object:</tt>" followed by the
name of the algorithm implemented by the object, followed by the
initialized state of the object. The state is either
<tt class="literal">&lt;not initialized&gt;</tt>,
<tt class="literal">&lt;initialized for verifying&gt;</tt>, or
<tt class="literal">&lt;initialized for signing&gt;</tt>. However, the
Sun DSA implementation of this class overrides this method to show
the parameters of the DSA algorithm instead.
</p>
</dd>

<dt>
<b>public final void setParameter(String param, Object value) <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dt>
<b>public final void setParameter(AlgorithmParameterSpec param) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1428"></a>
</b>
</dt>
<dd>
<p>Set the parameter of the signature engine. In the first format, the
named parameter is set to the given value; in the second format,
parameters are set based on the information in the
<tt class="literal">param</tt> specification.
</p>

<p>In the Sun implementation of the DSA signing algorithm, the only
valid <tt class="literal">param</tt> string is
<tt class="literal">KSEED</tt>, which requires an array of bytes that
will be used to seed the random number generator used to generate the
<tt class="literal">k</tt> value. There is no way to set this value
through the parameter specification, which in the Sun implementation
always returns an <tt class="literal">UnsupportedOperationException</tt>.
</p>
</dd>

<dt>
<b>public final Object getParameter(String param) <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"><a name="INDEX-1429"></a>
</b>
</dt>
<dd>
<p>Return the named parameter from the object. The only valid string for
the Sun implementation is <tt class="literal">KSEED</tt>.
</p>
</dd>

<dt>
<b>public final Provider getProvider() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1430"></a>
</b>
</dt>
<dd>
<p>Return the provider that supplied the implementation of this
signature object.
</p>
</dd>

</dl>

<p>It is no accident that this class has many similarities to the
<tt class="literal">MessageDigest</tt><a name="INDEX-1431"></a><a name="INDEX-1432"></a> class; a digital signature
algorithm is typically implemented by performing a cryptographic
operation on a private key and the message digest that represents the
data to be signed. For the developer, this means that generating a
digital signature is virtually the same as generating a message
digest; the only difference is that a key must be presented in order
to operate on a signature object. This difference is important,
however, since it fills in the hole we noticed previously: a message
digest can be altered along with the data it represents so that the
tampering is unnoticeable. A signed message digest, on the other
hand, can't be altered without knowledge of the key that was
used to create it. The use of a public key in the digital signature
algorithm makes the digital signature more attractive than a message
authentication code, in which there must be a shared key between the
parties involved in the message exchange.
</p>

<p>Let's take our example from <a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_01.htm">Chapter 9, "Message Digests"</a> where
we saved a message and its digest to a file; we'll modify it
now to save the message and the digital signature. We can create the
digital signature like this:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class Send {
	public static void main(String args[]) {
		String data;
		data = "This have I thought good to deliver thee, " +
				"that thou mightst not lose the dues of rejoicing " +
				"by being ignorant of what greatness is promised thee.";

		try {
			FileOutputStream fos = new FileOutputStream("test");
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			KeyStore ks = 
                      KeyStore.getInstance(KeyStore.getDefaultType());
			ks.load(new FileInputStream(
								System.getProperty("user.home") +
								File.separator + ".keystore"), null);
			char c[] = new char[args[1].length()];
			args[1].getChars(0, c.length, c, 0);
			PrivateKey pk = (PrivateKey) ks.getKey(args[0], c);

			Signature s = Signature.getInstance("DSA");
			s.initSign(pk);

			byte buf[] = data.getBytes();
			s.update(buf);
			oos.writeObject(data);
			oos.writeObject(s.sign());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}</pre>
</blockquote>

<p>This example puts together many of the examples from the past few
chapters. In order to create the digital signature we must accomplish
the following:
</p>

<ol>
<li>
<p>Obtain the private key that is used to sign the data. Here
we're using the conventional keystore database
(<em class="filename">$HOME/.keystore</em>) and the command-line arguments
to obtain the alias and password of the private key we want to use.
</p>
</li>
<li>
<p>Obtain a signing object via the <tt class="literal">getInstance()</tt>
method and initialize it. Since we're creating a signature in
this example, we use the <tt class="literal">initSign()</tt> method for
initialization.
</p>
</li>
<li>
<p>Pass the data to be signed as a series of bytes to the
<tt class="literal">update()</tt><a name="INDEX-1433"></a> method of the signing object. Multiple
calls could be made to the <tt class="literal">update()</tt> method even
though in this example we only need one.
</p>
</li>
<li>
<p>Obtain the signature by calling the
<tt class="literal">sign()</tt><a name="INDEX-1434"></a> method. We save the signature bytes and
write them to a file with the data so that the data and the signature
can be retrieved at a later date.
</p>
</li>
</ol>

<p>Reading the data and verifying the signature are similar:</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class Receive {
	public static void main(String args[]) {
		try {
			String data = null;
			byte signature[] = null;
			FileInputStream fis = new FileInputStream("test");
			ObjectInputStream ois = new ObjectInputStream(fis);
			Object o = ois.readObject();
			try {
			    data = (String) o;
			} catch (ClassCastException cce) {
			    System.out.println("Unexpected data in file");
			    System.exit(-1);
			}
			o = ois.readObject();
			try {
			    signature = (byte []) o;
			} catch (ClassCastException cce) {
			    System.out.println("Unexpected data in file");
			    System.exit(-1);
			}
			System.out.println("Received message");
			System.out.println(data);

			KeyStore ks = 
                      KeyStore.getInstance(KeyStore.getDefaultType());
			ks.load(new FileInputStream(
						System.getProperty("user.home") +
						File.separator + ".keystore"), args[1]);

			Certificate c = ks.getCertificate(args[0]);
			PublicKey pk = c.getPublicKey();
			Signature s = Signature.getInstance("DSA");
			s.initVerify(pk);
			s.update(data.getBytes());
			if (s.verify(signature)) {
				System.out.println("Message is valid");
			}
			else System.out.println("Message was corrupted");
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}</pre>
</blockquote>

<p>The process of verifying the signature still requires four steps. The
major differences are that in step two, we initialize the signing
object for verification by using the
<tt class="literal">initVerify()</tt> method, and in step four, we verify
(rather than create) the existing signature by using the
<tt class="literal">verify()</tt> method. Note that we still have to know
who signed the message in order to look up the correct key--but
more about that a little later.
</p>


<a name="SEC-CH-12-SECT-1.2"></a>
<h3 class="sect2">12.1.2. The SignedObject Class</h3>

<p>
<a name="INDEX-1435"></a><a name="INDEX-1436"></a><a name="INDEX-1437"></a>In our
last example, we had to create an object that held both the data in
which we are interested and the signature for that data. This is a
common enough requirement that Java provides the
<tt class="literal">SignedObject</tt> class
(<tt class="literal">java.security.SignedObject</tt>) to encapsulate an
object and its signature:
</p>

<dl>
<dt>
<b>public final class SignedObject implements Serializable <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Encapsulate an object and its digital signature. The encapsulated
object must be serializable so that a serialization of a signed
object can do a deep copy of the embedded object.
</p>
</dd>

</dl>

<p>Signed objects are created with this constructor:</p>

<dl>
<dt>
<b>public SignedObject(Serializable o, PrivateKey pk, Signature engine) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Create a signed object based on the given object, signing the
serialized data in that object with the given private key and
signature object. The signed object contains a copy of the given
object; this copy is obtained by serializing the object parameter. If
this serialization fails, an <tt class="literal">IOException</tt> is
thrown.
</p>
</dd>

</dl>

<p>It's very important to realize that this constructor makes, in
effect, a copy of its parameter; if you create a signed object based
on a string buffer and later change the contents of the string
buffer, the data in the signed object remains unchanged. This
preserves the integrity of the object encapsulated with its
signature.
</p>

<p>Here are the methods we can use to operate on a signed object:</p>

<dl>
<dt>
<b>public Object getContent() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1438"></a>
</b>
</dt>
<dd>
<p>Return the object embedded in the signed object. The object is
reconstituted using object serialization; an error in serialization
may cause either an <tt class="literal">IOException</tt> or a
<tt class="literal">ClassNotFoundException</tt> to be thrown.
</p>
</dd>

<dt>
<b>public byte[] getSignature() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1439"></a>
</b>
</dt>
<dd>
<p>Return the signature embedded in the signed object.</p>
</dd>

<dt>
<b>public String getAlgorithm() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1440"></a>
</b>
</dt>
<dd>
<p>Return the name of the algorithm that was used to sign the object.</p>
</dd>

<dt>
<b>public boolean verify(PublicKey pk, Signature s) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1441"></a>
</b>
</dt>
<dd>
<p>Verify the signature within the embedded object with the given key
and signature engine. The signature engine parameter may be obtained
by calling the <tt class="literal">getInstance()</tt> method of the
<tt class="literal">Signature</tt> class. The underlying signature engine
may throw an <tt class="literal">InvalidKeyException</tt> or
<tt class="literal">SignatureException</tt>.
</p>
</dd>

</dl>

<p>We'll use this class in examples later in this
chapter.<a name="INDEX-1442"></a><a name="INDEX-1443"></a><a name="INDEX-1444"></a>
</p>


<a name="SEC-CH-12-SECT-1.3"></a>
<h3 class="sect2">12.1.3. Signing and Certificates</h3>

<p>
<a name="INDEX-1445"></a>In the previous examples, we
specified on the command line the name of the entity that we assumed
generated the signature in the file. This was necessary because the
file contained only the actual signature of the entity and the data
that was signed; it did not contain any information about who the
signer actually is. That's fine for an example, but it is not
always appropriate in a real application. We could have asked the
user for the name of the entity that was supposed to have signed the
data, but that course is fraught with potential errors:
</p>

<ul>
<li>
<p>The user could have no idea what names are in the keystore of the
application. Especially in a corporate environment, users may not
know what data the keystore database might contain.
</p>
</li>
<li>
<p>The user could get the name of the keystore alias wrong. Say that the
application asks the user to enter the name of the signer; the user,
knowing that the data came from me, may enter "sdo" as
the alias of the identity.
</p>

<p>What the user may not remember is that when the keystore was first
created, she received a public key from the San Diego Oil company;
that public key was entered into the keystore with the alias
"sdo." When my identity was added to the keystore, a
different alias had to be chosen, so my public key was added with the
alias "ScottOaks." But that was a long time ago, now
forgotten, and because I use the <tt class="literal">sdo</tt> moniker all
over my writings, the user assumes that I am the
<tt class="literal">sdo</tt> in the keystore. And so the wrong alias will
be chosen, and the signature verification will fail when it should
have succeeded.
</p>
</li>
</ul>
<p>
<a name="INDEX-1446"></a><a name="INDEX-1447"></a><a name="INDEX-1448"></a>For these reasons, it makes more
sense to include the public key with the signature and the signed
data. This allows the application to find the identity based on the
unique public key in order to determine who the signer of the data
is.
</p>

<p>We could do that by simply sending the encoded public key with the
signature and data. A better solution, however, would be to send the
certificate that verifies the public key. That way, if the public key
is not found in the database, the credentials of the certificate can
be presented to the user, and the user can have the opportunity to
decide on the fly if the particular entity should be trusted.
</p>

<p>Although an embedding of signature, data, and certificate is very
common, the <tt class="literal">SignedObject</tt> class does not include
the capability to contain a certificate. So we'll use the
<tt class="literal">SignedObject</tt> class in this example, but
we'll still need an object that contains the signed object and
the certificate. We'd like to do this by extending the
<tt class="literal">SignedObject</tt> class, but since that class is
<tt class="literal">final</tt> we're forced to adopt this approach:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class Message implements Serializable {
	SignedObject object;
	transient Certificate certificate;

	private void writeObject(ObjectOutputStream out)
									throws IOException {
		out.defaultWriteObject();
		try {
			out.writeObject(certificate.getEncoded());
		} catch (CertificateEncodingException cee) {
			throw new IOException("Can't serialize object " + cee);
		}
	}

	private void readObject(ObjectInputStream in)
							throws IOException, ClassNotFoundException {
		in.defaultReadObject();
		try {
			byte b[] = (byte []) in.readObject();
			CertificateFactory cf = 
                        CertificateFactory.getInstance("X509");
		certificate = cf.generateCertificate(new 
                             ByteArrayInputStream(b));
		} catch (CertificateException ce) {
			throw new IOException("Can't de-serialize object " + ce);
		}
	}
}</pre>
</blockquote>


<p>We've made the <tt class="literal">certificate</tt> variable in
this class transient and have explicitly serialized and deserialized
it using its external encoding. As we discussed in <a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_01.htm">Chapter 10, "Keys and Certificates"</a>, whenever we have an embedded certificate or
key, we must follow a procedure like this to ensure that the
receiving party is able to deserialize the class.
</p>

<p>As it turns out, the <a name="INDEX-1449"></a><a name="INDEX-1450"></a><a name="INDEX-1451"></a><a name="INDEX-1452"></a>X509 certificate
implementation that comes with the JDK (that is, the
<tt class="literal">sun.security.x509.X509CertImpl</tt> class) also
overrides the <tt class="literal">writeObject()</tt> and
<tt class="literal">readObject()</tt> methods, so if we serialize a
certificate explicitly, the encoded data is written to or read from
the file. It is not sufficient to rely upon that, however--if we
use the default serialization methods for the
<tt class="literal">Message</tt> class, a reference to the
<tt class="literal">sun.security.x509.X509CertImpl</tt> class is embedded
into the serialized stream. A user with another security provider
(and hence a different implementation of the
<tt class="literal">X509Certificate</tt> class) would not be able to
deserialize the stream because there is no access to the Sun
implementation of the <tt class="literal">X509Certificate</tt> class.
Explicitly serializing and deserializing the certificate as
we've done here avoids embedding any reference to the provider
class and makes the data file more portable.
</p>

<p>When we save the message to the file, we now have to make sure that
we save a certificate with it. Other than that, changes to the class
are minor:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class SendObject {
	public static void main(String args[]) {
		try {
			FileOutputStream fos = new FileOutputStream("test.obj");
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			KeyStore ks = 
                     KeyStore.getInstance(KeyStore.getDefaultType());
			char c[] = new char[args[1].length()];
			args[1].getChars(0, c.length, c, 0);
			ks.load(new FileInputStream(
					System.getProperty("user.home") +
					File.separator + ".keystore"), c);

<b class="emphasis-bold">			Certificate certs[] = ks.getCertificateChain(args[0]);</b>
			PrivateKey pk = (PrivateKey) ks.getKey(args[0], c);
			Message m = new Message();
			<b class="emphasis-bold">m.object = new SignedObject(</b>
<b class="emphasis-bold">			  "This have I thought good to deliver thee, " +</b>
<b class="emphasis-bold">			  "that thou mightst not lose the dues of rejoicing " +</b>
<b class="emphasis-bold">			  "by being ignorant of what greatness is promised thee.",</b>
<b class="emphasis-bold">							pk, Signature.getInstance("DSA"));</b>
<b class="emphasis-bold">			m.certificate = certs[0];</b>
			oos.writeObject(m);
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}</pre>
</blockquote>

<p>Retrieving the data is now more complicated, since we must verify
both the signature in the signed object and the identity of the
authority that signed the embedded certificate:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class ReceiveObject {
	private static void verifySigner(Certificate c, String name)
									throws CertificateException {
		Certificate issuerCert = null;
		X509Certificate sCert = null;
		KeyStore ks = null;

		try {
			ks = KeyStore.getInstance(KeyStore.getDefaultType());
			ks.load(new FileInputStream(
						System.getProperty("user.home") +
						File.separator + ".keystore"), null);
		} catch (Exception e) {
			throw new CertificateException("Invalid keystore");
		}

		try {
			String signer = ks.getCertificateAlias(c);
			if (signer !=null){
				System.out.println("We know the signer as " + signer);
				return;
			}
			for (Enumeration alias = ks.aliases(); 
                              alias.hasMoreElements();){
				String s = (String) alias.nextElement();
				try {
					sCert = (X509Certificate) ks.getCertificate(s);
				} catch (Exception e) {
					continue;
				}
				if (name.equals(sCert.getSubjectDN().getName())){
					issuerCert = sCert;
					break;
				}
			}
		} catch(KeyStoreException kse) {
			throw new CertificateException("Invalid keystore");
		}
		if (issuerCert == null) {
			throw new CertificateException("No such certificate");
		}
		try {
			c.verify(issuerCert.getPublicKey());
		} catch (Exception e) {
			throw new CertificateException(e.toString());
		}
	}

	private static void processCertificate(X509Certificate x509)
									throws CertificateParsingException {
		Principal p;
		p = x509.getSubjectDN();
		System.out.println("This message was signed by " +
							p.getName());
		p = x509.getIssuerDN();
		System.out.println("This certificate was provided by " +
							p.getName());
		try {
			verifySigner(x509, p.getName());
		} catch (CertificateException ce) {
			System.out.println("We don't know the certificate signer");
		}
		try {
			x509.checkValidity();
		} catch (CertificateExpiredException cee) {
			System.out.println("That certificate is no longer valid");
		} catch (CertificateNotYetValidException cnyve) {
			System.out.println("That certificate is not yet valid");
		}
	}

	public static void main(String args[]) {
		try {
			FileInputStream fis = new FileInputStream("test.obj");
			ObjectInputStream ois = new ObjectInputStream(fis);
			Object o = ois.readObject();
			if (o instanceof Message) {
				Message m = (Message) o;
				System.out.println("Received message");
				processCertificate((X509Certificate) m.certificate);
				PublicKey pk = m.certificate.getPublicKey();
				if (m.object.verify(pk, Signature.getInstance("DSA"))) {
					System.out.println("Message is valid");
					System.out.println(m.object.getObject());
				}
				else System.out.println("Message signature is invalid");
			}
			else System.out.println("Message is corrupted");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}</pre>
</blockquote>

<p>We've seen most of this code in previous chapters; in
particular, the <tt class="literal">processCertificate()</tt> method uses
the standard certificate methods to extract and print information
about the certificate. The new code for us is primarily in the
<tt class="literal">verifySigner()</tt> method, where we search the
entire keystore for a name that matches the issuer of the certificate
that was sent to us. If we find a match, we use the corresponding
public key to verify the certificate we received.<a name="INDEX-1453"></a><a name="INDEX-1454"></a><a name="INDEX-1455"></a>
</p>

<p>This method shows yet another need for an alternate implementation of
the <tt class="literal">KeyStore</tt> class--if you have to search
the entire list of keys for a matching certificate like this, you
clearly don't want to perform a linear search each time. An
alternate keystore could provide a more efficient means of <a name="INDEX-1456"></a> searching for
certificates.<a name="INDEX-1457"></a><a name="INDEX-1458"></a><a name="INDEX-1459"></a>
</p>











<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch11_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch12_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch12_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">11.4. Summary</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">12.2. Signed Classes</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
