<html>
<head>
<title>Security Resources (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Security Resources">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appb_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appb_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm">Java Security</a></td><td align="right" valign="top" width="172"><a href="appc_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appc_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Appendix C.  Security Resources</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="appc_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appc_01.htm">Security Bugs</a>
<br>
<a href="appc_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appc_02.htm">Third-Party Security Providers</a>
<br>
<a href="appc_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appc_03.htm">Security References</a>
<br>
</p>
</div>


<p>
<a name="INDEX-2017"></a><a name="INDEX-2018"></a><a name="INDEX-2019"></a>Books are very useful for learning
some things, and hopefully you've gotten some benefit from the
one you're holding in your hand. However, for some types of
information, the Internet remains the better choice. In this
appendix, we'll list and discuss various network resources that
relate to Java and security.
</p>

<p>One reason why this information is better found on the Internet is
because it is subject to rapid change. The APIs we've discussed
may remain fairly stable (despite the big changes in many of them
between 1.1 and 1.2<a href="#FOOTNOTE-1">[1]</a>), but the information to be found in these resources is
more dynamic.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1]1.2 is now Java 2.</p>
</blockquote>



<h2 class="sect1">C.1. Security Bugs</h2>

<p>
<a name="INDEX-2020"></a><a name="INDEX-2021"></a><a name="INDEX-2022"></a>Early in my computer science career, I
handed in an exam that ended up receiving a lower grade than I had
expected.<a href="#FOOTNOTE-2">[2]</a> As part of the exam, I was asked to write an
algorithm, prove that it was correct, and then provide an
implementation of the algorithm.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-2"></a>
<p>[2]Okay, that was not an unusual event for
me...</p> </blockquote>

<p>While my algorithm and its accompanying proof were completely
correct, my implementation received a failing grade. This was a
rather dispiriting result: I had come up with a solution and proved
that the solution was correct. But the "real"
solution--the implementation--was still flawed.
</p>

<p>Such is the potential problem with implementing a security model. A
lot of design and analysis has gone into Java's default
security model, and hopefully you'll put your own effort into
making your own applications secure. But no matter how sound the
design of a security model, in the end it is the implementation that
matters.
</p>

<p>In this section, we'll discuss some past bugs in Java's
security implementation and list some common resources for finding
out about and fixing present bugs.
</p>

<p>Few issues in the Java world receive more attention than security
bugs; report of a new bug is guaranteed to produce a flurry of
activity. As a result, readers of the trade press often have the idea
that Java is riddled with security bugs, or that it isn't
secure to begin with. This is not the case. While some important bugs
in Java's security implementation have been reported, the
impact of these bugs has (at least until now) been minimal.
</p>

<p>Bugs that are reported against Java's security model fall into
one of five categories:
</p>

<ol>
<li>
<p>Reports that are not bugs, but that arise from a lack of
understanding of Java's security model
</p>

<p>There are two types of very common bugs in this category: applets
that perform annoying tasks, and applets that seem to break out of
the sandbox. The former category includes applets that take lots of
CPU time or otherwise consume many resources. As we mentioned at the
outset of this book, such attacks are annoying but are not security
attacks.
</p>

<p>The latter category often involves bugs that hinge upon someone
having installed a local class file (or worse, a local native
library); as we know by now, these local class files are treated as
trusted classes. When one of these local classes is able to read (or
remove) files on your disk, contact a machine on your local network,
or engage in some other potentially malicious behavior, word goes out
that Java is not secure, or at best has bugs in its security model.
</p>

<p>The lesson to learn from these reports is this: no computer security
model is a substitute for vigilant practices by the end user. If your
policy is never to run shareware programs downloaded from the
Internet, then your policy should be never to install local classes
on your system. And while newer versions of browsers, along with the
ability in 1.2 to run applications in a secure environment, help to
mitigate the potential danger of installing a local class file, such
features will never obviate the need for users and system
administrators to understand and work with the security model. There
may be real bugs in the Java implementation--but don't
assume that all reports you hear about the sandbox being broken fall
into that category.
</p>
</li>
<li>
<p>Bugs that are misclassified; that is, actual bugs that are reported
as being security bugs when they are not
</p>

<p>As we've seen, security is pervasive in the Java
platform--the bytecode verifier, the class loader, the security
manager, and the compiler all have aspects of security to them.
Hence, bugs in these areas are often considered security bugs even
when they are not. For example, a bug in the bytecode verifier is
usually assumed to be a security bug, even if it is not; if the
verifier doesn't accept a particular construct that it should
accept, for example, no security concerns arise.
</p>
</li>
<li>
<p>Web-related bugs that are not Java-specific</p>

<p>Often, security problems on the Internet are associated with Java
without any direct cause. In particular, bugs related to
JavaScript<sup class="superscript">TM </sup>and to ActiveX often fall
into this category.
</p>

<p>When the first reports of ActiveX security bugs were circulated,
there was a lot of discussion about "active content"; the
assertion in many quarters was that the security problems that
plagued ActiveX were inherent in any active content system. This
assertion attempted to place Java in the same light as ActiveX since
both were active content systems. The reality is that Java and
ActiveX have very different security models.
</p>

<p>Similarly, bugs about JavaScript are often confused with bugs about
Java, in part because of the name. It is probably well known by this
point, but it doesn't hurt to reiterate: JavaScript and Java
are completely different technologies produced by separate companies
(Netscape and Sun, respectively). The two technologies are
complementary in many ways, but they are fundamentally different from
a security perspective.
</p>

<p>Finally, Java is not immune to security problems that plague the Web
in general. Data that is sent between sites among Java applets and
servers can be snooped just like data that is sent via HTTP can be
snooped (unless the Java traffic is using SSL or another encryption
technique). A hacker that sets up a site to impersonate
<em class="filename">XYZ.com</em> will be able to serve Java applets just
as it is able to serve HTML.
</p>
</li>
<li>
<p>Bugs in third-party trusted classes</p>

<p>When you install third-party classes, it is possible that one of them
may breach the security model that you think is in place: it may
provide a mechanism for an untrusted class to open a file, for
example, based upon the permissions normally given to the third-party
class.
</p>

<p>Complicating this factor is the manner in which these classes are
often installed: they are often put into a directory and the
user's <tt class="literal">CLASSPATH</tt> is globally set to
include those classes. Now untrusted classes will be able to access
the third-party classes.
</p>
</li>
<li>
<p>Bugs in the Java implementation</p>

<p>There have been several well-publicized bugs that do involve
Java's security implementation; as with any large computer
system, there are bound to be others.
</p>
</li>
</ol>
<p>This last point should not minimized--there have been and will
be bugs in the Java security implementation. But the potential for
bugs and their potential impact must be weighed against the potential
benefits of using Java. I know of one corporation where Java is not
allowed to be used for any internal project. This site is not worried
about employees doing malicious things to other employees, and they
filter out Java class files at their corporate firewall, but
developers at this company are still not permitted to use Java for
any internal project due to security concerns.
</p>

<p>When I asked about this policy, I was told that this corporation had
"zero-tolerance" for security problems, and the mere risk
of a Java security bug was enough for them to forbid the use of Java.
Of course, this site that had zero-tolerance for security problems
had a floppy disk drive on every one of their desktop computers, and
users routinely took files to and from the office via floppy disks.
The potential for a virus being spread by floppy disk drive (which is
very real) was outweighed for them by the benefit of their users
doing work at home. Meanwhile, the thought that Java would somehow
spontaneously corrupt their isolated network was, for them, enough to
outweigh any of the potential benefits they saw to using Java within
their extremely distributed, heterogeneous network. Assessing the
security of a platform always involves assessing the potential risks
and the potential rewards, though apparently that is sometimes hard
to do.
</p>

<a name="SEC-AP-C-SECT-1.1"></a>
<h3 class="sect2">C.1.1. Java Security Bugs</h3>

<p>
<a name="INDEX-2023"></a>One of the ways to assess the potential
impact of Java security bugs is to understand the bugs that have
occurred to date and their relative impact. The fact that all these
bugs have been fairly minor and quickly fixed is of some comfort.
That is not to say that a future bug won't be more devastating
or harder to fix; the point here is really to shed light on the bugs
that have been found.
</p>

<p>The bugs we'll discuss in this section all have another
property: attacks based on these bugs were very hard to construct. In
fact, attacks based on these bugs never made it out onto the Internet
or other networks; the bugs were all reported by various researchers,
and often even the researchers had difficulty in constructing an
attack against them.
</p>

<p>Here's a chronology of security bugs that have been found in
Java through November 1998. There was an additional bug reported in
July 1998 regarding the class loader, but this applied only to
Netscape's implementation, not to the standard JDK.
</p>

<dl>
<dt>
<b>DNS spoofing</b>
</dt>
<dd>
<p>
<a name="INDEX-2024"></a><a name="INDEX-2025"></a><a name="INDEX-2026"></a><a name="INDEX-2027"></a>In February 1996,
the first Java security bug was posted. It involved a DNS spoofing
scenario in which an applet could make a connection to a third-party
host other than the one from which it was loaded. Such an attack
required access by the attacker to a DNS server that was used by the
user and knowledge of the IP address of the third-party machine. DNS
spoofing is a general problem (i.e., this bug falls into category 3
in our above list), but Java was fixed in 1.0.1 to circumvent this
scenario.
</p>
</dd>

<dt>
<b>Class loader implementation bug</b>
</dt>
<dd>
<p>In March 1996, a bug was found that allowed an applet to load a class
referenced by an absolute pathname. This bug was fixed in 1.0.1.
</p>
</dd>

<dt>
<b>Verifier implementation bug</b>
</dt>
<dd>
<p>In March 1996, a bug was discovered that took advantage of an
implementation error in the bytecode verifier. An attack via this bug
needed to be very sophisticated, but it did allow the applet to
perform any operation (delete a file, write a file, etc.) on the
user's machine. This bug was fixed in 1.0.2.
</p>
</dd>

<dt>
<b>URL name resolution attack</b>
</dt>
<dd>
<p>In April 1996, a bug related to an obscure network configuration was
reported. This bug required that the user's machine be running
in a DNS domain that it was not registered to and that the
attacker's machine be running in that same DNS domain. This bug
was fixed in 1.0.2.
</p>
</dd>

<dt>
<b>Class loader bug</b>
</dt>
<dd>
<p>In May 1996, a bug in the class loader was discovered that allowed
two applets loaded in different class loaders to exploit a way of
casting between different classes with the same distinct name. This
bug was fixed in 1.1.
</p>
</dd>

<dt>
<b>Verifier implementation bug</b>
</dt>
<dd>
<p>In March 1997, Sun discovered a bug in the implementation of the
verifier. Exploiting this bug would have required knowledge of the
bug itself as well as writing Java bytecodes by hand. This bug was
fixed in 1.1.1.
</p>
</dd>

<dt>
<b>Class signing bug</b>
</dt>
<dd>
<p>A bug in the <tt class="literal">getSigners()</tt> method of the
<tt class="literal">Class</tt> class was discovered in April 1997. This
bug allowed code signed by one entity to be treated as if were signed
by a different entity (possibly with more access to the user's
machine). This bug was fixed in 1.1.2.
</p>
</dd>

<dt>
<b>Verifier implementation bug</b>
</dt>
<dd>
<p>A bug that could allow the VM to crash in the bytecode verifier was
discovered in May 1997; this bug was fixed in 1.1.2.
</p>
</dd>

<dt>
<b>Illegal type casting</b>
</dt>
<dd>
<p>A bug related to illegal type casting was reported in June 1996. This
bug allowed an applet to undermine the typing system of Java. This
bug was fixed in 1.1.3.<a name="INDEX-2028"></a>
</p>
</dd>

</dl>


<a name="SEC-AP-C-SECT-1.2"></a>
<h3 class="sect2">C.1.2. Tracking Security Bugs</h3>

<p>
<a name="INDEX-2029"></a>The
nature of tracking security bugs makes it impossible to track them
through a book such as this; we're sure that the above list is
already out of date. Hence, the better way to track security issues
with Java's implementation is to check periodically the
following resources on the Web.
</p>

<p>An important point to realize about these sites and the bugs
we've just listed is that much of the research on security
implementation bugs occurs outside of Sun. Sun's approach to
Java security is to achieve security by openness--that is, the
more people who can examine the platform for implementation bugs, the
better that implementation will become. This is one reason why the
JDK source code is freely available for noncommercial purposes.
</p>

<dl>
<dt>
<b><a href="../../../../../../../java.sun.com/sfaq/chronology.html">http://java.sun.com/sfaq/chronology.html</a></b>
</dt>
<dd>
<p>This page lists the known bugs in the security implementation (the
above list was culled from this page). New bugs and their fixes are
reported here first.
</p>
</dd>

<dt>
<b><a href="../../../../../../../www.cert.org/">http://www.cert.org/</a></b>
</dt>
<dd>
<p>The CERT organization tracks security-related bugs for all types of
computer systems, including Java implementations. Java-related
security bugs are often published as CERT advisories.
</p>
</dd>

<dt>
<b><a href="../../../../../../../www.cs.princeton.edu/sip/">http://www.cs.princeton.edu/sip/</a></b>
</dt>
<dd>
<p>Many of the bugs in Java's security implementation have been
discovered as a result of work done at Princeton's Security
Internet Programming (SIP) group. This page summarizes their work,
including several of the bugs that were listed above.
</p>

<p>Work at SIP is funded by many companies, including Sun itself.</p>
</dd>

<dt>
<b><a href="../../../../../../../ext.rlab.cs.nyu.edu/~jsr/oreilly/WebStripper/protected.html">news://comp.security.announce</a></b>
</dt>
<dd>
<p>This newsgroup tracks security-related announcements about all
systems, including Java.
</p>
</dd>

<dt>
<b><a href="../../../../../../../kimera.cs.washington.edu/">http://kimera.cs.washington.edu/</a></b>
</dt>
<dd>
<p>This research group is also responsible for finding some of the bugs
that were listed above.
</p>
</dd>

<dt>
<b><a href="../../../../../../../www.alw.nih.gov/Security/security-advisories.html">http://www.alw.nih.gov/Security/security-advisories.html</a></b>
</dt>
<dd>
<p>This site has links to several services that publish advisories when
Java (and other) security-related bugs are discovered.<a name="INDEX-2030"></a><a name="INDEX-2031"></a><a name="INDEX-2032"></a>
</p>
</dd>

</dl>









<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appb_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appb_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="appc_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appc_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">B.4. Summary</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">C.2. Third-Party Security Providers</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
