<html>
<head>
<title>Introduction to Cryptography (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Introduction to Cryptography">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch06_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm">Java Security</a></td><td align="right" valign="top" width="172"><a href="ch07_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch07_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 7.  Introduction to Cryptography</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch07_01.htm">The Need for Authentication</a>
<br>
<a href="ch07_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch07_02.htm">The Role of Authentication</a>
<br>
<a href="ch07_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch07_03.htm">Cryptographic Engines</a>
<br>
<a href="ch07_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch07_04.htm">Summary</a>
<br>
</p>
</div>


<p>So far, we've examined the basic level of Java's security
paradigm--essentially, those features that make up the Java
sandbox. We're now going to shift gears somewhat and begin our
examination of the cryptographic features in the Java security
package itself. The Java security package is a set of classes that
were added to Java 1.1 (and expanded in 1.2<a href="#FOOTNOTE-1">[1]</a>); these classes provide additional
layers of security beyond the layers we've examined so far.
Although these classes do play a role in the Java sandbox--they
are the basis by which Java classes may be signed, and expanding the
sandbox based on signed classes is a key goal of Java
security--they may play other roles in secure applications.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1]1.2 is
now Java 2.</p> </blockquote>

<p>A <a name="INDEX-924"></a>
digital signature, for example, can authenticate a Java class so that
the security policy can allow that class greater latitude in the
operations it can perform, but a digital signature is a useful thing
in its own right. An HR department may want to use a digital
signature to verify requests to change payroll data, an online
subscription service might require a digital signature to process a
change order, and so on. Thus, while we'll examine the classes
of the Java security package from the perspective of what we'll
be able to do with a signed class, the techniques we'll show
will have broader applicability.
</p>

<p>In order to use the classes of the security package, you don't
need a deep understanding of cryptographic theory. This chapter will
explain the basic concepts of the operations involved, which should
be sufficient to understand how to use the APIs involved. On the
other hand, one feature of the security package is that different
implementations of different algorithms may be provided by
third-party vendors. We'll explain how to go about providing
such implementations, but it is assumed that readers who are
interested in writing such an implementation already understand the
mechanics of cryptography. Hence, we won't give any
cryptographically valid examples in those sections.
</p>

<p>If you already have an understanding of the basics of digital
signatures, encryption, and the need for authentication, you can skip
this chapter, which provides mainly background information.
</p>



<h2 class="sect1">7.1. The Need for Authentication</h2>

<p>
<a name="INDEX-925"></a><a name="INDEX-926"></a><a name="INDEX-927"></a><a name="INDEX-928"></a>
We are primarily concerned with one goal of the security package: the
ability to authenticate classes that have been loaded from the
network. The components of the Java API that provide authentication
may have other uses in other contexts (including within your own Java
applications), but their primary goal is to allow a Java application
(and a Java-enabled browser) to load a class from the network and be
assured of two things:
</p>

<ul>
<li>
<p>The identity of the site from which the class was loaded can be
verified (author authentication).
</p>
</li>
<li>
<p>The class was not modified in transit over the network (data
authentication).
</p>
</li>
</ul>

<p>As we've seen, Java applications typically assume that all
classes loaded over the network are untrusted classes, and these
untrusted classes are generally given permissions consistent with
that assumption. Classes that meet the above two criteria, however,
need not necessarily be so constrained. If you walk into your local
software store and buy a shrink-wrapped piece of
<a name="INDEX-929"></a><a name="INDEX-930"></a><a name="INDEX-931"></a>software,
you're generally confident that the software will not contain
viruses or anything else that's harmful. This is part of the
implied contract between a commercial software producer and a
commercial software buyer. If you download code from that same
software producer's web site, you're probably just as
confident that the code you're downloading is not harmful;
perhaps it should be given the same access rights as the software you
obtained from that company through a more traditional channel.
</p>

<p>There's a small irony here, because many computer viruses are
spread through commercial software. That's one reason why the
fact that a class has been authenticated does not necessarily mean it
should be able to access anything on your machine that it wants to.
It's also a reason why the fine-grained nature of the access
controller is important: if you buy classes from
<em class="filename">acme.com</em>, but only give them access to certain
things on your machine, you are still somewhat protected if by
mistake <em class="filename">acme.com</em> includes a virus in their
software.
</p>

<p>Even if all commercial software were virus free, however, there is a
problem with assuming that code downloaded from a commercial site is
safe to run on your machine. The problem with that
assumption--and the reason that Java by default does not allow
that assumption to be made--has to do with the way in which the
code you execute makes its way through the Internet. If you load some
code from <em class="filename">www.xyz.com</em> onto your machine, that
code will pass through many machines that are responsible for routing
the code between your site and XYZ's site. Typically, we like
to think that the data that passes between our desktop and
<em class="filename">www.xyz.com</em> enters some large network cloud;
it's called a cloud because it contains a lot of details, and
the details aren't usually important to us. In this case,
however, the details are important. We're very interested to
know that the data between our desktop and
<em class="filename">xyz.com</em> passes through, for example, our
Internet service provider, two other sites on the Internet backbone,
and XYZ's Internet service provider. Such a transmission is
shown in <a href="#SEC-CH-7-FIG-2">Figure 7-1</a>. The two types of
authentication that we mentioned above provide the necessary
assurance that the data passing through all these sites is not
compromised.
</p>

<a name="SEC-CH-7-FIG-2"></a>
<div class="figure">
<img alt="figure" src="figs/JSEC_0701.gif" webstripperlinkwas="figs/JSEC_0701.gif"></div>
<h4 class="objtitle">Figure 7-1. How data travels through a network</h4>

<a name="SEC-CH-7-SECT-1.1"></a>
<h3 class="sect2">7.1.1. Author Authentication</h3>

<p>
<a name="INDEX-932"></a>First we must prove that the
author of the data is who we expect it to be. When you send data that
is destined for <em class="filename">www.xyz.com</em>, that data is
forwarded to <em class="filename">site2</em>, who is supposed to forward
it to <em class="filename">site1</em>, who should simply forward it to
XYZ's Internet service provider. You trust
<em class="filename">site1</em> to forward the data to XYZ's
Internet service provider unchanged; however, there's nothing
that causes <em class="filename">site1</em> to fulfill its part of this
contract. A hacker at <em class="filename">site1</em> could arrange for
all the data destined for <em class="filename">www.xyz.com</em> to be sent
to the hacker's own machine, and the hacker could send back
data through <em class="filename">site2</em> that looked as if it
originated from <em class="filename">www.xyz.com</em>. The hacker is now
successfully impersonating the <em class="filename">www.xyz.com</em> site.
Hence, although the URL in your browser says
<em class="filename">www.xyz.com</em>, you've been fooled:
you're actually receiving whatever data the impersonator of XYZ
Corporation wants to send to you.
</p>

<p>
<a name="INDEX-933"></a><a name="INDEX-934"></a><a name="INDEX-935"></a><a name="INDEX-936"></a>There are a number
of ways to achieve this masquerade, the most well-known of which is
DNS (or IP) spoofing. When you want to surf to
<em class="filename">www.xyz.com</em>, your desktop asks your DNS server
(which is typically your Internet service provider) for the IP
address of <em class="filename">www.xyz.com</em> and you then send off the
request to whatever address you receive. If your Internet service
provider knows the IP address of <em class="filename">www.xyz.com</em>, it
tells your desktop what the correct address is; otherwise, it has to
ask another DNS server (e.g., <em class="filename">site1</em>) for the
correct IP address. If a hacker has control of a machine anywhere
along the chain of DNS servers, it is relatively simple for that
hacker to send out his own address in response to a DNS request for
<em class="filename">www.xyz.com</em>.
</p>

<p>Now say that you surf to <em class="filename">www.xyz.com</em> and request
a Java class (or set of classes) to run a spellchecker for your
Java-based word processor. The request you send to
<em class="filename">www.xyz.com</em> will be misaddressed by your
machine--your machine will erroneously send the request to the
hacker's machine, since that's the IP address your
machine has associated with <em class="filename">www.xyz.com</em>. Now the
hacker is able to send you back a Java class. If that Java class is
suddenly trusted (because, after all, it allegedly came from a
commercial site), it has access that you wouldn't necessarily
approve: perhaps while it's spellchecking your document, it is
also searching your hard disk to find the data file of your financial
planning software so that it can read that file and send its contents
back over the network to the hacker's machine.
</p>

<p>Yes, we've made this sound easier than it is--the hacker
would have to have intimate knowledge of the
<em class="filename">xyz.com</em> site to send you back the classes you
requested, and those classes would have to have the expected
interface in order for any of their code to be executed. But such
situations are not difficult to set up either; if the hackers stole
the original class files from
<em class="filename">www.xyz.com</em>--which is usually extremely
easy--all they need to do is set themselves up at the right
place in the DNS chain.
</p>

<p>In the strict Java security model we explored earlier, this sort of
situation is possible, but it isn't dangerous. Because the
classes loaded from the network are never trusted at all, the class
that was substituted by the hackers is not able to damage anything on
your machine. At worst, the substituted class does not behave as you
expect and may in fact do something quite annoying--like play
loud music on your machine instead of spellchecking your document.
But the class is not able to do anything dangerous, simply because
all classes from the network are untrusted.
</p>

<p>In order to trust a class that is loaded from the network, then, we
must have some way to verify that the class actually came from the
site it said it came from. This authentication comes from a digital
signature that comes with the class data--an electronic
verification that the class did indeed come from
<em class="filename">www.xyz.com</em>.<a name="INDEX-937"></a>
</p>


<a name="SEC-CH-7-SECT-1.2"></a>
<h3 class="sect2">7.1.2. Data Authentication</h3>

<p>
<a name="INDEX-938"></a>The second problem introduced by
the fact that our transmissions to <em class="filename">www.xyz.com</em>
must pass through several hosts is the possibility of <a name="INDEX-939"></a><a name="INDEX-940"></a><a name="INDEX-941"></a><a name="INDEX-942"></a>snooping. In this scenario, assume
that <em class="filename">site2</em> on the network is under control of a
hacker. When you send data to <em class="filename">www.xyz.com</em>, the
data passes through the machine on <em class="filename">site2</em>, where
the hacker can modify it; when data is sent back to you, it travels
the same path, which means that the hacker on
<em class="filename">site2</em> can again modify the data.
</p>

<p>This lack of privacy in data transmission is one reason you might
want data over the network to be encrypted--certainly if the
spellchecking software you're using from
<em class="filename">www.xyz.com</em> is something you must pay for, you
don't want to send your unencrypted credit card through the
network so that <em class="filename">site2</em> can read it. However, for
authentication purposes, encrypting the data is not strictly
necessary. All that is necessary is some sort of assurance that the
data that has passed through the network has not been modified in
transit. This can be achieved by various cryptographic algorithms
even though the data itself is not encrypted. The simpler path is to
use such a cryptographic algorithm (known as a message digest
algorithm or a digital fingerprint) instead of encrypting the data.
</p>

<div class="sidebar">
<h4 class="objtitle">Encryption Versus Data Authentication</h4>

<p>
<a name="INDEX-943"></a><a name="INDEX-944"></a>When you send data through a
public network, you can use a <a name="INDEX-945"></a>
digital fingerprint of that data to ensure that the data was not
modified while it was in transit over the network. This fingerprint
is sufficient to prevent a snooper from substituting new data (e.g.,
a new Java class file) for the original data in your transmission.
</p>

<p>However, this authentication does not prevent a snooper from reading
the data in your transmission; authenticated data is not encrypted
data. If you are worried about someone stealing your data, the
security provided by data authentication is insufficient. Data
authentication prevents writing of data, but not reading of data.
</p>

<p>
<a name="INDEX-946"></a><a name="INDEX-947"></a>Java only
provides authentication and not encryption because of export laws
various countries apply to encryption technology. When we discuss the
Java Cryptography Extension in <a href="ch13_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch13_01.htm">Chapter 13, "Encryption"</a>,
we'll expand upon these restrictions.
</p>
</div>

<p>Without some cryptographic mechanism in place, the hacker at
<em class="filename">site2</em> has the option of modifying the classes
that are sent from <em class="filename">www.xyz.com</em>. When the classes
are read by the machine at <em class="filename">site2</em>, the hacker
could modify them in memory before they are sent back onto the
network to be read by <em class="filename">site1</em> (and ultimately to
be read by your machine). Hence, the classes that are sent need to
have a digital fingerprint associated with them. As it turns out, the
digital fingerprint is required to sign the class as <a name="INDEX-948"></a><a name="INDEX-949"></a><a name="INDEX-950"></a><a name="INDEX-951"></a> well.<a name="INDEX-952"></a>
</p>


<a name="SEC-CH-7-SECT-1.3"></a>
<h3 class="sect2">7.1.3. Java's Role in Authentication</h3>

<p>
<a name="INDEX-953"></a>When Java was first released and touted
as being "secure," it surprised many people to discover
that the types of attacks we've just discussed were still
possible. As we've said, security means many things to many
people, but a reasonable argument could be made that the scenarios
we've just outlined should not be possible in a secure
environment.
</p>

<p>The reasons Java did not solve these problems in its first release
are varied, but they essentially boil down to one practical reason
and one philosophical reason.
</p>

<p>The practical reason is that all the solutions we're about to
explore depend to a high degree on technologies that are just
beginning to become viable. As a practical matter, authentication
relies on everyone having public keys available--and as
we'll discuss in <a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_01.htm">Chapter 11, "Key Management"</a>, that's not
necessarily the case. Without a robust mechanism to share public
keys, Java had two options:
</p>

<ul>
<li>
<p>Provide no security at all, and allow applets full use of the
resources of the user's computer. By now, we know all the
possible problems with that route.
</p>
</li>
<li>
<p>Provide the very strict security that was implemented in 1.0-based
versions of Java, with a view toward ways of enhancing that model as
technologies evolved. While not the best of all possible worlds, this
compromise allowed Java to be adopted much sooner than it would
otherwise have been.
</p>
</li>
</ul>

<p>On a philosophical level, however, there's another argument:
Java shouldn't solve these problems because they are not
confined to Java itself. Even if Java classes were always
authenticated, that would not prevent the types of attacks
we've outlined here from affecting non-Java-related
transmissions. If you surf to <em class="filename">www.xyz.com</em> and
that site is subject to DNS spoofing, you'll be served whatever
pages the spoofer wants to substitute. If you engage in a standard
non-Java, forms-based transmission with
<em class="filename">www.xyz.com</em>, a snooper along the way can steal
and modify the data you're sending over the standard HTTP
transmission mechanism.
</p>

<p>In other words, the attacks we've just outlined are inherent in
the design of a public network, and they affect all traffic
equally--email traffic, web traffic, ftp traffic, Java traffic,
and so on. In a perfect world, solving these problems at the Java
level is inefficient, as it means that the same problem must still be
solved for all the other traffic on the public network. Solving the
problem at the network level, on the other hand, solves the problem
once and for all, so that every protocol and every type of traffic
are protected.
</p>

<p>There are a number of popular technologies that solve this problem in
a more general case. If all the traffic between your site and
<em class="filename">www.xyz.com</em> occurs over <a name="INDEX-954"></a><a name="INDEX-955"></a><a name="INDEX-956"></a>SSL using an https-based URL, then
your browser and the <em class="filename">www.xyz.com</em> web server will
take care of the details of authentication of all web-based traffic,
including the Java-related traffic. That solves the problem at the
level of the web browser, but that still is not a complete solution.
If the applet needs to open a connection back to
<em class="filename">www.xyz.com</em>, it must use SSL for this
communication as well. And we still have other, non-web-related
traffic that is not authenticated.
</p>

<p>
<a name="INDEX-957"></a>It would be better still to solve
this problem at the network level itself. There are many products
from various vendors that allow you to authenticate (and encrypt)
<em class="emphasis">all</em> data between your site and a remote site on
the network. Using such a product is really the ideal from a design
point of view; in that way, all data is protected, no matter what the
source of the traffic is. Either of these solutions makes
authentication and fingerprinting of Java classes redundant (and they
may offer the benefit that the data is actually encrypted when it
passes through the network).
</p>

<p>Unfortunately, these solutions lead us back to practical
considerations: if it's hard for Java environments to share
digital keys and to manage cryptographic technology, it's
harder still to depend on the network software to manage this
process. So while it might be ideal for this problem to be solved for
the network as a whole, it's impractical to expect such a
solution. Hence, the Java security package offers a reasonable
compromise: it allows you to deploy and use trusted (i.e.,
authenticated) classes, but their use is not mandated, in case you
prefer to employ a broader solution to this problem.<a name="INDEX-958"></a><a name="INDEX-959"></a>
</p>











<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch06_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch06_05.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch07_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch07_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">6.5. Summary</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">7.2. The Role of Authentication</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
