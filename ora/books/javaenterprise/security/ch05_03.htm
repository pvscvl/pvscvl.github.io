<html>
<head>
<title>The Policy Class (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The Policy Class">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_01.htm">Chapter 5: The Access Controller</a></td><td align="right" valign="top" width="172"><a href="ch05_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">5.3. The Policy Class</h2>

<p>
<a name="INDEX-630"></a><a name="INDEX-631"></a><a name="INDEX-632"></a><a name="INDEX-633"></a>
The third building block for the access controller is the facility to
specify which permissions should apply to which
<a name="INDEX-634"></a><a name="INDEX-635"></a>code
sources. We call this global set of permissions the security policy;
it is encapsulated by the <tt class="literal">Policy</tt> class
(<tt class="literal">java.security.Policy</tt>).
</p>

<dl>
<dt>
<b>public abstract class Policy <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Establish the security policy for a Java program. The policy
encapsulates a mapping between code sources and permission objects in
such a way that classes loaded from particular locations or signed by
specific individuals have the set of specified permissions.
</p>
</dd>

</dl>

<p>A policy class is constructed as follows:</p>

<dl>
<dt>
<b>public Policy() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Create a policy class. The constructor should initialize the policy
object according to its internal rules (e.g., by reading the
<em class="filename">java.policy</em> file, as we'll describe
later).
</p>
</dd>

</dl>

<p>Like the security manager, only a single instance of the policy class
can be installed in the virtual machine at any time. However, unlike
the security manager, the actual instance of the policy class can be
replaced. These two methods install and retrieve the policy:
</p>

<dl>
<dt>
<b>public static Policy <a name="INDEX-636"></a>
getPolicy() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Return the currently installed policy object.</p>
</dd>

<dt>
<b>public static void <a name="INDEX-637"></a>
setPolicy(Policy p) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Install the given policy object, replacing whatever policy object was
previously installed.
</p>
</dd>

</dl>

<p>Getting and setting the policy object requires going through the
<tt class="literal">checkProperty()</tt><a name="INDEX-638"></a>
method of the security manager. By default, this succeeds only if you
already have been granted a security permission with the name of
<tt class="literal">getPolicy</tt> or <tt class="literal">setPolicy</tt> (as
appropriate). There's a bootstrapping issue involved when
setting the policy, since granting permissions requires the policy to
have been set. Hence, the initial policy is typically set by a class
in the core API, as those classes always have permission to perform
any operation.
</p>

<p>There are two other methods in the <tt class="literal">Policy</tt> class:</p>

<dl>
<dt>
<b>public abstract Permissions <a name="INDEX-639"></a>
getPermissions(CodeSource cs) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Create a permissions object that contains the set of permissions that
should be granted to classes that came from the given code source
(i.e., loaded from the code source's URL and signed by the keys
in the code source).
</p>
</dd>

<dt>
<b>public abstract void <a name="INDEX-640"></a>
refresh() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Refresh the policy object. For example, if the initial policy came
from a file, re-read the file and install a new policy object based
on the (presumably changed) information from the file.
</p>
</dd>

</dl>

<p>In programmatic terms, writing a policy class involves implementing
these methods. The default policy class is provided by the
<tt class="literal">PolicyFile</tt><a name="INDEX-641"></a><a name="INDEX-642"></a><a name="INDEX-643"></a>
class (<tt class="literal">sun.security.provider.PolicyFile</tt>), which
constructs permissions based on information found in a file on the
user's local disk (a process we're just about to
examine).
</p>

<p>Unfortunately, the <tt class="literal">PolicyFile</tt> class that parses
that file and builds up the set of permissions is a file in the
<tt class="literal">sun</tt> package class; it is not accessible to us as
programmers. Hence, while it's possible to write your own
<tt class="literal">Policy</tt> class, it is a fairly involved process. You
might want to write your own <tt class="literal">Policy</tt> class if you
want to define a set of permissions through some other mechanism than
a URL (e.g., loading the permissions via a policy server database).
That implementation is fairly straightforward: you need only provide
a mechanism to map code sources to a set of permissions. Then, for
each code source, construct each of the individual permission objects
and aggregate them into a permissions object to be returned by the
<tt class="literal">getPermissions()</tt> method.
</p>

<div class="sidebar">
<h4 class="objtitle">Property Expansion and the Policy Class</h4>

<p>
<a name="INDEX-644"></a><a name="INDEX-645"></a><a name="INDEX-646"></a>You'll notice an unusual
syntax in the list of policy properties in the
<em class="filename">java.security</em> file:
<tt class="literal">${foo.bar}</tt>. This syntax uses property
substitution to fill in the given target; for example, the string
<tt class="literal">${user.home}</tt> might expand to
<em class="firstterm">/home/sdo</em> on my Unix desktop machine and to
<em class="filename">C:\</em> on my Windows desktop machine. As you might
have guessed, the string <tt class="literal">${/}</tt> expands to the
file separator character on the platform that is reading the file.
</p>

<p>This property substitution allows us to use one set of configuration
files no matter what the underlying platform, since we can use
standard Java properties to hide those platform-specific details.
This is particularly important when specifying filenames for file
permissions in a policy file.
</p>

<p>If the <tt class="literal">policy.expandProperties</tt> property in the
<em class="filename">java.security</em> file is set to
<tt class="literal">false</tt>, however, substitution will not occur and
these strings should not be used. If they are used, they will be
treated as literal strings and fail.
</p>
</div>

<a name="SEC-CH-5-SECT-3.1"></a>
<h3 class="sect2">5.3.1. The Default Policy</h3>

<p>
<a name="INDEX-647"></a><a name="INDEX-648"></a>The
<tt class="literal">Policy</tt> and <tt class="literal">PolicyFile</tt>
classes give system administrators or end users the ability to define
in a file a security policy for any Java program; this allows changes
to the security model for the program without modifying the
program's code. The policy that you can specify in this file is
extremely flexible, since it's based on the permission model we
examined earlier. If you want a Java program to be able to read a
single directory, you can specify the appropriate file permission in
the policy file. If you want a Java program to be able to connect to
particular hosts on the network, you can specify the appropriate
socket permissions in the policy file. And if you want a Java program
to be able to administer payroll records, you can specify the
appropriate payroll permissions in the policy file.
</p>

<p>By default, the policy for a Java program is read from two locations,
but this is controlled by the system security file. This file is a
set of properties that apply to the security package in general; it
is named <em class="filename">$JAVAHOME/lib/security/java.security</em>.
</p>

<p>In terms of the <tt class="literal">Policy</tt> class, here are the
relevant entries in the
<em class="filename">java.security</em><a name="INDEX-649"></a><a name="INDEX-650"></a> file:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">policy.provider=sun.security.provider.PolicyFile
policy.expandProperties=true
policy.allowSystemProperty=true
policy.url.1=file:${java.home}/lib/security/java.policy
policy.url.2=file:${user.home}/.java.policy</pre>
</blockquote>

<p>The first of these properties defines the class that should be
instantiated to provide the initial instance of the
<tt class="literal">Policy</tt> class: in this case, the
<tt class="literal">PolicyFile</tt> class (which implements the behavior
we're now describing). Here's the algorithm that the
<tt class="literal">PolicyFile</tt> class uses to read in policy files.
The entire set of entries in the resulting policy is composed of all
the specific entries read from all of the following files:
</p>

<ol>
<li>
<p>If the
<tt class="literal">policy.allowSystemProperty</tt><a name="INDEX-651"></a> property in the
<em class="filename">java.security</em> file is set to
<tt class="literal">true</tt> (which it is by default), then the first
file to be read is a file specified on the command line with the
<tt class="literal">-Djava.security.policy</tt> argument, which must be
used with the <tt class="literal">-Djava.security.manager</tt> option.
For example, the following command would first load the policy file
from <em class="filename">/globalfiles/java.policy</em>:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">java -Djava.security.manager \</b>
<b class="emphasis-bold">          -Djava.security.policy=/globalfiles/java.policy Cat /etc/passwd</b>
</pre>
</blockquote>

<p>If the <tt class="literal">policy.allowSystemProperty</tt> property is
set to <tt class="literal">false</tt>, then the
<tt class="literal">-Djava.security.manager</tt> file will be ignored. On
the other hand, if this property is set to <tt class="literal">true</tt>
and the filename given as the
<tt class="literal">-Djava.security.manager</tt> argument begins with an
equals sign:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">java -Djava.security.manager \</b>
<b class="emphasis-bold">          -Djava.security.policy==/globalfiles/java.policy Cat /etc/passwd</b>
</pre>
</blockquote>

<p>then the given file is the <em class="emphasis">only</em> policy file that
will be read (and hence the only file that will define permissions).
</p>

<p>Note that you may also specify the
<tt class="literal">-Djava.security.manager</tt><a name="INDEX-652"></a> flag
with no additional arguments, in which case the policy files from the
<em class="filename">java.security</em> file (see the next step) are used
and no additional files are consulted:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">piccolo% <b class="emphasis-bold">java -Djava.security.manager Cat /etc/passwd</b>
</pre>
</blockquote>

<p>This last example is the typical usage. Any of these examples set up
the default sandbox for us in Java 1.2--the parameters of this
sandbox are defined by the entries in the policy file.
</p>
</li>
<li>
<p>
<a name="INDEX-653"></a><a name="INDEX-654"></a>Next, the
<tt class="literal">PolicyFile</tt> class looks for properties of the
form
<tt class="literal">policy.url.n</tt><a name="INDEX-655"></a> where <tt class="literal">n</tt> is an
integer starting with 1. As it finds each property, it reads in the
policy from the given URL; in the default set of properties we listed
above, this means that the first URL to be read is the
<em class="filename">java.policy</em> file in the
<em class="filename">$JAVAHOME/lib/security</em> directory and the second
URL to be read is the <em class="filename">.java.policy</em> file in the
user's home directory. You may specify as many or as few of
these URLs as desired, but they must be numbered consecutively
starting with 1.
</p>
</li>
<li>
<p>If no files have been loaded (because there was no
<tt class="literal">-Djava.security.policy</tt> argument and there were
no <tt class="literal">policy.url</tt> properties), then an internal
static set of permissions is loaded (which is the same set of
permissions defined by the default <em class="filename">java.policy</em>
file we list below).
</p>
</li>
</ol>

<p>The policy files are designed to map code sources to sets of
permissions. For example, this entry:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">grant codeBase http://www.xyz.com/ {
	permission java.io.FilePermssion "${user.home}${/}docs${/}-",
											             "read, write, delete";
};</pre>
</blockquote>

<p>means that any code loaded from the top-level directory of
<em class="emphasis">www.xyz.com</em> is granted permission to use any
files under the user's <em class="emphasis">docs</em> directory. The
code base in this case is used to construct a code source with no
public keys.
</p>

<p>The above example is one case of a <a name="INDEX-656"></a><a name="INDEX-657"></a>
policy entry, also called a grant entry, and a policy file is a
collection of policy entries. Each entry is specific to one code
source and should list all the permissions for that code
source--but a single policy file can have several entries and
thus work effectively for code that originated from multiple sources.
The syntax of a policy entry is as follows:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">grant [signedBy &lt;signer&gt;] [, codeBase &lt;code source&gt;] {
		permission &lt;class&gt; [&lt;name&gt; [, &lt;action list&gt;]];
		...
		permission &lt;class&gt; [&lt;name&gt; [, &lt;action list&gt;]];
};</pre>
</blockquote>

<p>As indicated by the bracket syntax, the
<tt class="literal">signedBy</tt><a name="INDEX-658"></a><a name="INDEX-659"></a> and <tt class="literal">codeBase</tt> entries
are optional. If both are missing, the list of permissions applies to
a class with any code source. The
<tt class="literal">signer</tt><a name="INDEX-660"></a>  entry should be a name that matches an
entry in the system's key management system--a concept
we'll explore in <a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_01.htm">Chapter 11, "Key Management"</a>. The
<tt class="literal">codeBase</tt> should be the URL that applies to the
location from which the classes were loaded--including a
file-based or HTTP-based URL.
</p>

<p>Note that omitting the <tt class="literal">signedBy</tt> and
<tt class="literal">codeBase</tt> fields in the policy file means that
the given permissions should apply to all code sources. It does not
mean that the listed permissions should apply only to classes that
had a code source with no URL and no public key. This point about the
code source is important: permissions given within the policy file
apply only to classes that have a code source. Classes that are
loaded by the primordial class loader do not have a code
source--these classes are given permission to perform any
operation. Hence, the Java API itself has no restrictions placed upon
what operations it may perform.<a name="INDEX-661"></a><a name="INDEX-662"></a>
</p>

<p>The permissions themselves should have the fully package-qualified
class name for the permission--including any permission classes
(like the <tt class="literal">XYZPayrollPermission</tt> class) that you
may have defined for your own application. The name will be used to
construct the permission, along with the action list (if present). An
internal (private) method of the <tt class="literal">PolicyFile</tt>
class is used to construct the permission object; this method expects
to find a constructor that takes both a name and an action. If the
action is not present, then <tt class="literal">null</tt> will be passed
to the constructor. This requirement forces you to include a
constructor with both arguments in all your permission classes,
including those that are extensions of the
<tt class="literal">BasicPermission</tt> class.
</p>

<p>
<a name="INDEX-663"></a><a name="INDEX-664"></a>
Here's the default policy file that comes with the Java 1.2.
This is the system security file (i.e., the one loaded from
<em class="filename">$JAVAHOME/lib/security/java.policy</em>); there is no
default file for each user. This is also the set that will be loaded
when no policy files are found:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">// Standard extensions get all permissions by default
grant codeBase "file:${java.home}/lib/ext/" {
	permission java.security.AllPermission;
};

// default permissions granted to all domains
grant { 
	// allows anyone to listen on un-privileged ports
	permission java.net.SocketPermission "localhost:1024-", "listen";

	// "standard" properies that can be read by anyone
	permission java.util.PropertyPermission "java.version", "read";
	permission java.util.PropertyPermission "java.vendor", "read";
	permission java.util.PropertyPermission "java.vendor.url", "read";
	permission java.util.PropertyPermission
								"java.class.version", "read";
	permission java.util.PropertyPermission "os.name", "read";
	permission java.util.PropertyPermission "os.version", "read";
	permission java.util.PropertyPermission "os.arch", "read";
	permission java.util.PropertyPermission "file.separator", "read";
	permission java.util.PropertyPermission "path.separator", "read";
	permission java.util.PropertyPermission "line.separator", "read";

	permission java.util.PropertyPermission
								"java.specification.version", "read";
	permission java.util.PropertyPermission
								"java.specification.vendor", "read";
	permission java.util.PropertyPermission
								"java.specification.name", "read";

	permission java.util.PropertyPermission
							"java.vm.specification.version", "read";
	permission java.util.PropertyPermission
							"java.vm.specification.vendor", "read";
	permission java.util.PropertyPermission
							"java.vm.specification.name", "read";
	permission java.util.PropertyPermission "java.vm.version", "read";
	permission java.util.PropertyPermission "java.vm.vendor", "read";
	permission java.util.PropertyPermission "java.vm.name", "read";
	permission java.lang.RuntimePermission "stopThread";
};</pre>
</blockquote>

<p>When you use this policy file, then, all classes that are loaded from
the Java extensions directory will be granted all permissions. All
other non-system classes will have read access to the system
properties listed as well as being able to listen on a socket with a
port number of 1024 or greater (which means that the class will be
able to create a server socket on an unprivileged port). All other
classes will also be able to call the <tt class="literal">stop()</tt>
method on a thread.
</p>

<p>A policy file may contain an additional entry:<a name="INDEX-665"></a><a name="INDEX-666"></a>
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">keystore ".keystore";</pre>
</blockquote>

<p>This entry specifies the name of the URL that will be used to process
the keystore in which public keys for the signers listed in the
policy file should be found. This entry is missing from the default
policy file, as it does not contain any entries that are signed. The
name of this file is relative to the URL that was used to load the
file; if the <tt class="literal">policy.url</tt> property was
<em class="filename">file:/${user.home}/.java.policy,</em> the URL to load
the keystore will be
<em class="filename">file:/${user.home}/.keystore</em>. The keystore entry
may be an absolute URL if desired.
</p>

<p>Policy files may be constructed by hand, or you may use the
<tt class="literal">policytool</tt> application that comes with the JDK
to administer those files<a name="INDEX-667"></a><a name="INDEX-668"></a><a name="INDEX-669"></a><a name="INDEX-670"></a><a name="INDEX-671"></a> (see <a href="appa_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appa_01.htm">Appendix A, "Security Tools"</a>).<a name="INDEX-672"></a><a name="INDEX-673"></a><a name="INDEX-674"></a><a name="INDEX-675"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.2. Permissions</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.4. Protection Domains</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
