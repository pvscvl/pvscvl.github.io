<html>
<head>
<title>The AccessController Class (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The AccessController Class">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_01.htm">Chapter 5: The Access Controller</a></td><td align="right" valign="top" width="172"><a href="ch05_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">5.5. The AccessController Class</h2>

<p>
<a name="INDEX-699"></a><a name="INDEX-700"></a>Now we have all the pieces in place to
discuss the mechanics of the access controller. The access controller
is represented by a single class called, conveniently,
<tt class="literal">AccessController</tt>. There are no instances of the
<tt class="literal">AccessController</tt> class
(<tt class="literal">java.security.AccessController</tt>)--its
constructor is private, so that it cannot be instantiated. Instead,
this class has a number of static methods that can be called in order
to determine if a particular operation should succeed. The key method
of this class takes a particular permission and determines, based on
the installed <tt class="literal">Policy</tt> object, whether or not the
permission should be granted:
</p>

<dl>
<dt>
<b>public static void <a name="INDEX-701"></a>
checkPermission(Permission p) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Check the given permission against the policy in place for the
program. If the permission is granted, this method returns normally;
otherwise, it throws an <tt class="literal">AccessControlException</tt>.
</p>
</dd>

</dl>

<p>We can use this method to determine whether or not a specified
operation should be permitted:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class AccessTest extends Applet {
	public void init() {
		SocketPermission sp = new SocketPermission(
							getParameter("host") + ":6000", "connect");
		try {
			AccessController.checkPermission(sp);
			System.out.println("Ok to open socket");
		} catch (AccessControlException ace) {
			System.out.println(ace);
		}
	}
}</pre>
</blockquote>

<p>Whether the access controller allows or rejects a given permission
depends upon the set of protection domains that are on the stack when
the access controller is called. <a href="#SEC-CH-5-FIG-4">Figure 5-2</a> shows
the stack that might be in place when the <tt class="literal">init()</tt>
method of the <tt class="literal">AccessTest</tt> applet is called. In
the <em class="emphasis">appletviewer</em>, an applet is run in a separate thread--so the
bottom method on the stack is the <tt class="literal">run()</tt> method
of the <tt class="literal">Thread</tt> class.<a href="#FOOTNOTE-2">[2]</a>
That <tt class="literal">run()</tt> method has called the
<tt class="literal">run()</tt> method of the
<tt class="literal">AppletPanel</tt> class. This second
<tt class="literal">run()</tt> method has done several things prior to
calling the <tt class="literal">init()</tt> method: it first created an
HTTP-based class loader (from an internal class that is a subclass of
the <tt class="literal">URLClassLoader</tt> class) and has used that
class loader to load the <tt class="literal">AccessTest</tt> class. It
then instantiated an instance of the <tt class="literal">AccessTest</tt>
class and called the <tt class="literal">init()</tt> method on that
object. This left us with the stack shown in the figure--the
<tt class="literal">run()</tt> method of the <tt class="literal">Thread</tt>
class has called the <tt class="literal">run()</tt> method of the
<tt class="literal">AppletPanel</tt> class, which has called the
<tt class="literal">init()</tt> method of the
<tt class="literal">AccessTest</tt> class, which has called the
<tt class="literal">checkPermission()</tt> method of the
<tt class="literal">AccessController</tt> class.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-2"></a>
<p>[2]In fact,
the <tt class="literal">run()</tt> method is always the bottom method on
a stack, since stacks apply on a per-thread basis.</p> </blockquote>

<a name="SEC-CH-5-FIG-4"></a>
<div class="figure">
<img alt="figure" src="figs/JSEC_0502.gif" webstripperlinkwas="figs/JSEC_0502.gif"></div>
<h4 class="objtitle">Figure 5-2. The stack and protection domains of a method</h4>

<p>The reason we need to know the <a name="INDEX-702"></a><a name="INDEX-703"></a>stack trace of the current thread is to
examine the protection domains that are on the stack. In this
example, only the <tt class="literal">AccessTest</tt> class has been
loaded by a class loader: the <tt class="literal">AppletPanel</tt> class
and the <tt class="literal">Thread</tt> class were loaded from the core
API with the primordial class loader. Hence, only the
<tt class="literal">AccessTest</tt> class has a nonsystem protection
domain (associated with the URL from which we loaded it,
<em class="filename">http://piccolo/</em> in this case).
</p>

<p>The permissions for any particular operation can be considered to be
the intersection of all permissions of each protection domain on the
stack when the <tt class="literal">checkPermission()</tt> method is
called. When the <tt class="literal">checkPermission()</tt> method is
called, it checks the permissions associated with the protection
domain for each method on the stack. It does this starting at the top
of the stack, and proceeding through each class on the stack.
</p>

<p>If this entry appeared in the policy file:</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">grant codeBase http://piccolo/ {
	permission java.net.SocketPermission "*:1024-", "connect";
}</pre>
</blockquote>

<p>the protection domain that applies to the
<tt class="literal">AccessTest</tt> class will have permission to open
the socket. Remember that the system domain implicitly has permission
to perform any operation; as there are no other nonsystem protection
domains associated with any class on the stack, the
<tt class="literal">checkPermission()</tt> method will permit this
operation--which is to say that it will silently return.
</p>

<p>For most implementations of Java browsers, and many Java
applications, there will only be a single nonsystem protection domain
on the stack: all the classes for the applet will have come from a
single <tt class="literal">CODEBASE</tt> (and hence a single protection
domain). But the <tt class="literal">checkPermission()</tt> method is
more general than that, and if you use a class loader that performs
delegation, there will be multiple protection domains on the stack.
This is a common occurrence if you're using a Java extension.
</p>

<p>Let's say that you've written a payroll application that
uses a class loader that loads classes from two sources: the server
in the XYZ HR department and the server in the XYZ network services
department.<a href="#FOOTNOTE-3">[3]</a>
This might lead to a call to the
<tt class="literal">checkPermission()</tt> method with the stack shown in
<a href="#SEC-CH-5-FIG-5">Figure 5-3</a>. Note that this stack trace is a little
more complicated than the one we've just shown--in this
case, we're relying on the fact that the constructor of the
<tt class="literal">Socket</tt> class will (indirectly) call the access
controller. That is what actually happens, and we'll explore
that process in our next chapter. For now, we'll just accept
the fact that this is the correct stack trace.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-3"></a>
<p>[3]We showed this example and class loaders
to implement it in <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch03_01.htm">Chapter 3, "Java Class Loaders"</a>.</p> </blockquote>

<a name="SEC-CH-5-FIG-5"></a>
<div class="figure">
<img alt="figure" src="figs/JSEC_0503.gif" webstripperlinkwas="figs/JSEC_0503.gif"></div>
<h4 class="objtitle">Figure 5-3. A stack with multiple nonsystem protection domains</h4>

<p>In this example, the access controller first checks the protection
domain for the <tt class="literal">Network</tt> class to see if a class
loaded from <em class="filename">http://network.xyz.com/</em> is allowed
to connect to the socket. If that succeeds, it then checks the
protection domain of the <tt class="literal">PayrollApp</tt> class to see
if a class loaded from <em class="filename">http://hr.xyz.com/</em> is
allowed to connect to a the socket. Only if both code sources are
granted permission in the policy file (either individually or via an
entry that does not specify a code base at all) does the
<tt class="literal">checkPermission()</tt> method succeed.
</p>

<p>Whether or not this is the appropriate behavior depends upon your
intent. Let's say that the policy file for the payroll
application specifies that classes with a code base of
<em class="filename">http://network.xyz.com/</em> are allowed to create
sockets, but that no other protection domains (other than the system
protection domain, of course) are granted that permission. That leads
to the situation where a class from the network services department
might not be able to open a socket (even though it has that
permission in the file): if there is any class in the HR protection
domain on the stack, the operation will fail. All classes on the
stack must have permission for an operation to succeed.
</p>

<p>Often, however, you want a class to be temporarily given the ability
to perform an action on behalf of a class that might not normally
have that ability. In this case, we might want to establish a policy
where the classes from the HR department cannot create a socket
directly, but where they can call classes from the network services
department that can create a socket.<a href="#FOOTNOTE-4">[4]</a> In this case, you want to tell the access controller to
grant (temporarily) the permissions of the network services
department to any methods that it might call within the current
thread.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-4"></a>
<p>[4]Consider this in
terms of writing a file: an applet might not be able to write a file,
but it can call a method of the JDK to play audio data--which
means that the JDK class must write to the audio device file.</p>
</blockquote>

<p>That facility is possible with these two methods of the access
controller class:
</p>

<dl>
<dt>
<b>public static Object doPrivileged(PrivilegedAction pa) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dt>
<b>public static Object doPrivileged(PrivilegedExceptionAction pae) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Execute the <tt class="literal">run()</tt> method on any given object,
temporarily granting its permission to any protection domains below
it on the stack. In the second case, if the embedded
<tt class="literal">run()</tt> method throws an exception, the
<tt class="literal">doPrivileged()</tt> method will throw a
<tt class="literal">PrivilegedActionException</tt>.
</p>
</dd>

</dl>

<p>The <tt class="literal">PrivilegedAction</tt> and
<tt class="literal">PrivilegedExceptionAction</tt> interfaces contain a
single method:
</p>

<dl>
<dt>
<b>public Object run() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Run the target code, which will have the permissions of the calling
class.
</p>
</dd>

</dl>

<p>The difference between the two interfaces is that the
<tt class="literal">run()</tt> method in the
<tt class="literal">PrivilegedExceptionAction</tt> interface may throw an
arbitrary exception. Note the unfortunate overloading between this
method and the <tt class="literal">run()</tt> method of the
<tt class="literal">Thread</tt> class and <tt class="literal">Runnable</tt>
interface, which return void; a class cannot implement both the
<tt class="literal">Runnable</tt> and <tt class="literal">PrivilegedAction</tt>
interfaces.
</p>

<p>The <tt class="literal">PrivilegedActionException</tt> class is a standard
exception, so you must always be prepared to catch it when using the
<tt class="literal">doPrivileged()</tt> method. If the embedded
<tt class="literal">run()</tt> method does throw an exception, that
exception will be wrapped into the
<tt class="literal">PrivilegedActionException</tt>, where it may be
retrieved with this call:
</p>

<dl>
<dt>
<b>public Exception getException()</b>
</dt>
<dd>
<p>Return the exception that was originally thrown to cause the
<tt class="literal">PrivilegedActionException</tt> to be thrown.
</p>
</dd>

</dl>

<p>Let's see how all of this might work with our network monitor
example:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class NetworkMonitor {
	public NetworkMonitor() {
		try {
			class doSocket implements PrivilegedExceptionAction {
				public Object run() throws UnknownHostException,
									 IOException {
					return new Socket("net.xyz.com", 4000);
				}
			};
			doSocket ds = new doSocket();
			Socket s = (Socket) AccessContoller.doPrivileged(ds);
		} catch (PrivilegedActionException pae) {
			Exception e = pae.getException();
			if (e instanceof UnknownHostException) {
				// process host exception
			}
			else if (e instanceof IOException {
				// process IOException
			}
			else {
				// e must be a runtime exception
				throw (RuntimeException) e;
			}
		}
	}
}</pre>
</blockquote>

<p>Two points are noteworthy here. First, the code that needs to be
executed with the privileges of the <tt class="literal">NetworkMonitor</tt>
class has been encapsulated into a new class -- the inner
<tt class="literal">doSocket()</tt> class.
</p>

<p>Second, the exception handling is somewhat new: we must list the
exceptions that the socket constructor can throw in the
<tt class="literal">run()</tt> method of our embedded class. If either of
those exceptions is thrown, it will be encapsulated into a
<tt class="literal">PrivilegedActionException</tt> and thrown back to the
network monitor, where we can retrieve the actual exception with the
<tt class="literal">getException()</tt> method.
</p>

<p>Let's examine the effect this call has on the access
controller. The access controller begins the same way, by examining
the protection domains associated with each method on the stack. But
this time, rather than searching every class on the stack, the access
controller stops searching the stack when it reaches the class that
has called the <tt class="literal">doPrivileged()</tt> method. In the
case of <a href="#SEC-CH-5-FIG-5">Figure 5-3</a>, this means that the access
controller does not continue searching the stack after the
<tt class="literal">NetworkMonitor</tt> class, so as long as the policy
file has a valid entry for the
<em class="filename">http://network.xyz.com/</em> code base, the monitor
will be able to create its socket.
</p>

<p>There's an important (but subtle) distinction to be made here:
the <tt class="literal">doPrivileged()</tt> method does not suddenly
establish a global permission based on the protection domain of the
class that called it. Rather, it specifies a stopping point as the
access controller searches the list of protection domains on the
stack. In the previous example, we assumed that
<em class="filename">http://network.xyz.com/</em> had permission to open
the socket. When the access controller searched the protection
domains on the stack, it first reached the protection domain
associated with <em class="filename">http://network.xyz.com/</em>. Since
that domain had been marked as the privileged domain, the access
controller returned at that point: it never got to the point on the
stack where it would have checked (and rejected) the protection
domain associated with <em class="filename">http://hr.xyz.com/</em>.
</p>

<p>Now consider what would happen if the permissions given to these
protection domains were reversed; that is, if the
<em class="filename">http://network.xyz.com/</em> protection domain is not
given permission to open the socket, but the
<em class="filename">http://hr.xyz.com/</em> protection domain is. We
might be tempted to write the <tt class="literal">PayrollApp</tt> class
(knowing that it will have permission to open the socket) like this:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class PayrollApp {
	NetworkMonitor nm;
	public void init() {
		class doInit implements PrivilegedAction {
			public void run() {
				nm = new NetworkMonitor();
			}
		}
		doInit di = new doInit();
		AccessController.doPrivileged(di);
	}
}</pre>
</blockquote>

<p>When the code within the <tt class="literal">Socket</tt> constructor
calls the <tt class="literal">checkPermission()</tt> method, the access
controller searches the same stack shown in <a href="#SEC-CH-5-FIG-5">Figure 5-3</a>. When the access controller reaches the
protection domain associated with
<em class="filename">http://network.xyz.com</em>, it immediately throws an
<tt class="literal">AccessControlException</tt>, because that protection
domain does not have permission to open sockets. Even though a
protection domain lower in the stack does have such a permission, and
even though that protection domain has called the
<tt class="literal">doPrivileged()</tt> method of the access controller,
the operation is rejected when the access controller finds a
protection domain that does not have the correct permission assigned
to it.
</p>

<p>This means that a protection domain can grant privileges to code that
has called it, but it cannot grant privileges to code that it calls.
This rule permits key operations of the Java virtual machine; if, for
example, your nonprivileged class calls the Java API to play an audio
clip, the Java API will grant permission to the calling code to write
data to the audio device on the machine. When you write your own
applications, however, it's important to realize that the
permission granting goes only one way.<a name="INDEX-704"></a><a name="INDEX-705"></a>
</p>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch05_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_06.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">5.4. Protection Domains</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.6. Guarded Objects</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
