<html>
<head>
<title>The KeyPairGenerator Class (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The KeyPairGenerator Class">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_01.htm">Chapter 10: Keys and Certificates</a></td><td align="right" valign="top" width="172"><a href="ch10_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">10.2. The KeyPairGenerator Class</h2>

<p>
<a name="INDEX-1161"></a><a name="INDEX-1162"></a><a name="INDEX-1163"></a><a name="INDEX-1164"></a><a name="INDEX-1165"></a>
Generation <a name="INDEX-1166"></a> of public and private keys is one of
the standard engines that can be provided by a Java security
provider. This operation is provided by the
<tt class="literal">KeyPairGenerator</tt> class
(<tt class="literal">java.security.KeyPairGenerator</tt>):
</p>

<dl>
<dt>
<b>public abstract class KeyPairGenerator</b>
</dt>
<dd>
<p>Generate and provide information about public/private key pairs.</p>

<p>In Java 1.1, this class extends only the <tt class="literal">Object</tt>
class; in Java 1.2, this class extends the
<tt class="literal">KeyPairGeneratorSpi</tt> class
(<tt class="literal">java.security.KeyPairGeneratorSpi</tt>). As is usual
with this architecture, some of the methods we're going to use
are methods of the <tt class="literal">KeyPairGenerator</tt> class in
Java 1.1 and methods of the <tt class="literal">KeyPairGeneratorSpi</tt>
class in 1.2; for the developer, the end result is the same.
</p>
</dd>

</dl>

<p>Generating a key pair is a very time-consuming operation.
Fortunately, it does not need to be performed often; much of the
time, we obtain keys from a key management system rather than
generating them. However, when we establish our own key management
system in the next chapter, we'll need to use this class; it is
often easier to generate your own keys from scratch rather than use a
key management system as well.
</p>

<a name="SEC-CH-10-SECT-2.1"></a>
<h3 class="sect2">10.2.1. Using the KeyPairGenerator Class</h3>

<p>Like all engine classes, the <tt class="literal">KeyPairGenerator</tt> is
an abstract class for which there is no implementation in the core
API. However, it is possible to retrieve instances of the
<tt class="literal">KeyPairGenerator </tt>class via these methods:
</p>

<dl>
<dt>
<b>public static KeyPairGenerator getInstance(String algorithm)</b>
</dt>
<dt>
<b>public static KeyPairGenerator getInstance(String algorithm, String provider)</b>
</dt>
<dd>
<p>Find the implementation of the engine that generates key pairs with
the named algorithm. The algorithm should be one of the standard API
algorithm names; if an appropriate implementation cannot be found,
this method throws a <tt class="literal">NoSuchAlgorithmException</tt>.
</p>

<p>The first format of this method searches all available providers
according to the rules we outlined in <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_01.htm">Chapter 8, "Security Providers"</a>.
The second method searches only the named provider, throwing a
<tt class="literal">NoSuchProviderException</tt> if that provider has not
been loaded.
</p>
</dd>

</dl>

<p>These methods search the providers that have been registered with the
security provider interface for a key pair generator that supports
the named algorithm. In the Sun security provider, this method allows
us to retrieve the key pair generator that generates keys using the
DSA algorithm.
</p>

<p>Once we have the key pair generator, we can invoke any of the
following methods on it:
</p>

<dl>
<dt>
<b>public String getAlgorithm()<a name="INDEX-1167"></a>
</b>
</dt>
<dd>
<p>Return the name of the algorithm that this key pair generator
implements (e.g., DSA).
</p>
</dd>

<dt>
<b>public void initialize(int strength)</b>
</dt>
<dt>
<b>public abstract void initialize(int strength, SecureRandom random)</b>
</dt>
<dd>
<p>
<a name="INDEX-1168"></a><a name="INDEX-1169"></a><a name="INDEX-1170"></a>Initialize the key pair generator to
generate keys of the given strength. The idea of strength is common
among key pair generator algorithms; typically it means the number of
bits that are used as input to the engine to calculate the key pair,
but the actual meaning may vary between algorithms.
</p>

<p>Most key algorithms restrict on the values that are valid for
<tt class="literal">strength</tt>. In the case of DSA, the strength must
be between 512 and 1024 and it must be a multiple of 64. If an
invalid number is passed for <tt class="literal">strength</tt>, an
<tt class="literal">InvalidParameterException</tt> will be thrown.
</p>

<p>Key pairs typically require a random number generator to assist them.
You may specify a particular random number generator if desired;
otherwise, a default random number generator (an instance of the
<tt class="literal">SecureRandom</tt> class) is used.
</p>

<p>In Java 1.2, the second of these methods is inherited from the
<tt class="literal">KeyPairGeneratorSpi</tt> class.
</p>
</dd>

<dt>
<b>public void initialize(AlgorithmParameterSpec params) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dt>
<b>public void initialize(AlgorithmParameterSpec params, SecureRandom random) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>
<a name="INDEX-1171"></a>Initialize the key pair generator
using the specified parameter set (which we'll discuss a little
later). By default, the first method simply calls the second method
with a default instance of the <tt class="literal">SecureRandom</tt>
class; the second method, by default, will throw an
<tt class="literal">UnsupportedOperationException</tt>. The second of
these methods is inherited from the
<tt class="literal">KeyPairGeneratorSpi</tt> class.
</p>
</dd>

<dt>
<b>public abstract KeyPair generateKeyPair()</b>
</dt>
<dt>
<b>public final KeyPair genKeyPair() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1172"></a>
<a name="INDEX-1173"></a>
<a name="INDEX-1174"></a>
</b>
</dt>
<dd>
<p>Generate a key pair, using the initialization parameters previously
specified. A <tt class="literal">KeyPairGenerator</tt> object can
repeatedly generate key pairs by calling one of these methods; each
new call generates a new key pair. The
<tt class="literal">genKeyPair()</tt> method simply calls the
<tt class="literal">generateKeyPair()</tt> method.
</p>

<p>In Java 1.2, the <tt class="literal">generateKeyPair()</tt> method is
inherited from the SPI.
</p>
</dd>

</dl>

<p>Using these methods, generating a pair of keys is very
straightforward:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">KeyPairGenerator kpg = KeyPairGenerator.getInstance("DSA");
kpg.initialize(512);
KeyPair kp = kpg.generateKeyPair();</pre>
</blockquote>

<p>According to the Java documentation, you are allowed to generate a
key pair without initializing the generator; in this situation, a
default strength and random number generator are to be used. However,
this feature does not work with the Sun security provider in 1.1: a
<tt class="literal">NullPointerException</tt> is thrown from within the
<tt class="literal">generateKeyPair()</tt> method. Since it is possible
that third-party providers may behave similarly, it is always best to
initialize the key pair generator.
</p>

<p>We'll show what to do with these keys in the next chapter, when
we discuss the topic of key management.
</p>


<a name="SEC-CH-10-SECT-2.2"></a>
<h3 class="sect2">10.2.2. Generating DSA Keys</h3>

<p>
<a name="INDEX-1175"></a><a name="INDEX-1176"></a>
The abstraction provided by the key pair generator is usually all we
need to generate keys. However, sometimes the particular algorithm
needs additional information to generate a key pair. When a DSA key
pair is generated, default values for <em class="emphasis">p</em>,
<em class="emphasis">q</em>, and <em class="emphasis">g</em> are used; in the
Sun security provider, these values are pre-computed to support
strength values of 512 and 1024. Precomputing these values greatly
reduces the time required to calculate a DSA key. Third-party DSA
providers may provide precomputed values for additional strength
values.
</p>

<p>It is possible to ask the key generator to use different values for
<em class="emphasis">p</em>, <em class="emphasis">q</em>, and
<em class="emphasis">g</em> if the key pair generator supports the
<tt class="literal">DSAKeyPairGenerator</tt><a name="INDEX-1177"></a><a name="INDEX-1178"></a> interface (<tt class="literal">java.
security.interfaces.DSAKeyPairGenerator</tt>):
</p>

<dl>
<dt>
<b>public interface DSAKeyPairGenerator</b>
</dt>
<dd>
<p>Provide a mechanism by which the DSA-specific parameters of the key
pair engine can be manipulated.
</p>
</dd>

</dl>

<p>There are two methods in this interface:</p>

<dl>
<dt>
<b>public void initialize(int modlen, boolean genParams, SecureRandom random)</b>
</dt>
<dd>
<p>Initialize the DSA key pair generator. The modulus length is the
number of bits used to calculate the parameters; this must be any
multiple of 8 between 512 and 1024. If <tt class="literal">genParams</tt>
is <tt class="literal">true</tt>, then the <em class="emphasis">p</em>,
<em class="emphasis">q</em>, and <em class="emphasis">g</em> parameters will be
generated for this new modulus length; otherwise, a precomputed value
will be used (but precomputed values in the Sun security provider are
available only for <tt class="literal">modlen</tt> values of 512 and
1024). If the modulus length is invalid, this method throws an
<tt class="literal">InvalidParameterException</tt>.
</p>
</dd>

<dt>
<b>public void initialize(DSAParams params, SecureRandom random)</b>
</dt>
<dd>
<p>Initialize the DSA key pair generator. The <em class="emphasis">p</em>,
<em class="emphasis">q</em>, and <em class="emphasis">g</em> parameters are set
from the values passed in <tt class="literal">params</tt>. If the
parameters are not correct, an
<tt class="literal">InvalidParameterException</tt> is generated.
</p>
</dd>

</dl>

<p>As with the <tt class="literal">DSAKey</tt> interface, a DSA key pair
generator implements the <tt class="literal">DSAKeyPairGenerator</tt>
interface for two purposes: for type identification, and to allow the
programmer to initialize the key pair generator with the desired
algorithm-specific parameters:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">KeyPairGenerator kpg = KeyPairGenerator.getInstance("DSA");
if (kpg instanceof DSAKeyPairGenerator) {
	DSAKeyPairGenerator dkpg = (DSAKeyPairGenerator) kpg;
	dkpg.initialize(512, true, new SecureRandom());
}
else kpg.initialize(512);</pre>
</blockquote>

<p>In sum, this interface allows us to use the generic key pair
generator interface while providing an escape clause that allows us
to perform DSA-specific <a name="INDEX-1179"></a><a name="INDEX-1180"></a>
operations.<a name="INDEX-1181"></a><a name="INDEX-1182"></a>
</p>


<a name="SEC-CH-10-SECT-2.3"></a>
<h3 class="sect2">10.2.3. Implementing a Key Pair Generator</h3>

<p>
<a name="INDEX-1183"></a><a name="INDEX-1184"></a><a name="INDEX-1185"></a>If you
want to implement your own key pair generator--either using a
new algorithm or, more typically, a new implementation of a standard
algorithm--you need to create a concrete subclass of the
<tt class="literal">KeyPairGenerator</tt> class. In Java 1.2, you may
create a subclass of the <tt class="literal">KeyPairGeneratorSpi</tt>
class instead; in this case, the SPI is the superclass of the engine
class.
</p>

<p>To construct a key pair generator, there is a single protected method
at your disposal:
</p>

<dl>
<dt>
<b>protected KeyPairGenerator(String name)</b>
</dt>
<dd>
<p>Construct a key pair generator that implements the given algorithm.</p>
</dd>

</dl>

<p>As with the other engines in the security API, there is no default
constructor available within the engine class. When the key pair
generator is constructed, it must pass the name of the algorithm that
it implements to its superclass so that the algorithm name may be
correctly registered with the <tt class="literal">Security</tt> class.
</p>

<p>There are two abstract public methods of the key pair generator (or
its SPI) that we must implement in our key pair generator: the
<tt class="literal">initialize()</tt><a name="INDEX-1186"></a> method and the
<tt class="literal">generateKeyPair()</tt><a name="INDEX-1187"></a><a name="INDEX-1188"></a>
method. For this example, we'll generate a simple key pair that
could be used for a simple rotation-based encryption scheme. In this
scheme, the key serves as an offset that we add to each ASCII
character--hence, if the key is 1, an encryption based on this
key converts the letter a to the letter b, and so on (the addition is
performed with a modulus such that z will map to a). To support this
encryption, then, we need to generate a public key that is simply a
number between 1 and 25; the private key is simply the negative value
of the public key.
</p>

<p>We must also define a class to represent keys we're
implementing.<a href="#FOOTNOTE-2">[2]</a> We can do that with this class:
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-2"></a>
<p>[2]This is true even if you're
implementing the DSA algorithm--the classes the Sun security
provider uses to represent keys are not in the
<tt class="literal">java</tt> package, so they are unavailable to us. So
even if you're implementing DSA, you must still define classes
that implement all the DSA interfaces we looked at earlier.</p>
</blockquote>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class XYZKey implements Key, PublicKey, PrivateKey {
	int rotValue;

	public String getAlgorithm() {
		return "XYZ";
	}

	public String getFormat() {
		return "XYZ Special Format";
	}

	public byte[] getEncoded() {
		byte b[] = new byte[4];
		b[3] = (byte) ((rotValue &lt;&lt; 24) &amp; 0xff);
		b[2] = (byte) ((rotValue &lt;&lt; 16) &amp; 0xff);
		b[1] = (byte) ((rotValue &lt;&lt;  8) &amp; 0xff);
		b[0] = (byte) ((rotValue &lt;&lt;  0) &amp; 0xff);
		return b;
	}
}</pre>
</blockquote>

<p>The only data value our key class cares about is the value to be used
as the index; for simplicity, we've made it a simple instance
variable accessible only by classes in our package. Because this
example is simple, we can use the same class as the interface for the
public and the private key; normally, of course, public and private
keys are not symmetric like this.
</p>

<p>With these pieces in place, we're ready to define our key pair
generation class:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class XYZKeyPairGenerator extends KeyPairGenerator {
	SecureRandom random;

	public XYZKeyPairGenerator() {
		super("XYZ");
	}

	public void initialize(int strength, SecureRandom sr) {
		random = sr;
	}

	public KeyPair generateKeyPair() {
		int rotValue = random.nextInt() % 25;
		XYZKey pub = new XYZKey();
		XYZKey priv = new XYZKey();
		pub.rotValue = rotValue;
		priv.rotValue = -rotValue;
		KeyPair kp = new KeyPair(pub, priv);
		return kp;
	}
}</pre>
</blockquote>

<p>As a last step, we must install this class using the security
provider architecture that we examined in <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_01.htm">Chapter 8, "Security Providers"</a>. Now obtaining a new key pair for the XYZ
algorithm is as simple as substituting the string XYZ for the
algorithm name in the example we gave earlier for DSA key<a name="INDEX-1189"></a><a name="INDEX-1190"></a><a name="INDEX-1191"></a> pair <a name="INDEX-1192"></a>
generation.<a name="INDEX-1193"></a><a name="INDEX-1194"></a><a name="INDEX-1195"></a><a name="INDEX-1196"></a><a name="INDEX-1197"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch10_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">10.1. Keys</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">10.3. The KeyFactory Class</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
