<html>
<head>
<title>The KeyStore Class (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The KeyStore Class">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_01.htm">Chapter 11: Key Management</a></td><td align="right" valign="top" width="172"><a href="ch11_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">11.2. The KeyStore Class</h2>

<p>
<a name="INDEX-1354"></a><a name="INDEX-1355"></a><a name="INDEX-1356"></a>Now
<a name="INDEX-1357"></a>that we understand the pieces that
make up a key management system, we can look at the topic of key
management itself. From an administrative perspective, the primary
tool that provides key management for Java 1.2 is the
<tt class="literal">keytool</tt><a name="INDEX-1358"></a>
utility. <tt class="literal">Keytool</tt> operates upon a file (or other
storage system) containing a set of private keys and certificates for
those keys. <a name="INDEX-1359"></a><a name="INDEX-1360"></a>The keytool file contains a set of
entries; each entry may have the following attributes:
</p>

<ul>
<li>
<p>An alias. This is a name you can use to reference the entity in the
database. For example, an alias for my entry might be
<tt class="literal">sdo</tt>, or <tt class="literal">ScottOaks</tt>.
</p>
</li>
<li>
<p>One or more certificates that vouch for the identity of the entry.
These certificates also provide the public key for the entry.
</p>
</li>
<li>
<p>Optionally, a private key. If present, the private key can be
protected by a password.
</p>
</li>
</ul>

<p>We'd be tempted to call the entries in this database
identities, but that's potentially confusing: the entries
stored in the keytool database are not instances of the
<tt class="literal">Identity</tt> class (although we could create an
identity object based on the information retrieved from the
database).
</p>

<p>
<a href="#SEC-CH-11-FIG-3">Figure 11-1</a> shows the role of the keytool database
in the creation and execution of a signed JAR file. The<em class="emphasis"></em><tt class="literal">jarsigner</tt><a name="INDEX-1361"></a><a name="INDEX-1362"></a><a name="INDEX-1363"></a> utility consults the
keytool database for the private key of the entity that is signing
the JAR file. Once the signed JAR file is produced, it is placed on a
web server, where it can be downloaded into an appletviewer or other
Java-enabled browser.<a href="#FOOTNOTE-2">[2]</a> When the
JAR file is read on the remote system, the keytool database is
consulted in order to retrieve the public key of the entity that
signed the JAR file so that the JAR file's signature can be
verified.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-2"></a>
<p>[2]As we mentioned, however,
Netscape Navigator, Internet Explorer, and HotJava at present all use
a different key management system than the keytool database, so the
appletviewer is the best example here.</p> </blockquote>

<a name="SEC-CH-11-FIG-3"></a>
<div class="figure">
<img alt="figure" src="figs/JSEC_1101.gif" webstripperlinkwas="figs/JSEC_1101.gif"></div>
<h4 class="objtitle">Figure 11-1. The keytool database in a signed JAR file</h4>

<p>Note that the two keytool databases in this example are (probably)
separate databases, on separate machines. They probably have
completely different entries as well--even for the entry that
represents the signer. The signer's entry in her own database
must have the private key of the signer, while the signer's
entry in the user's database needs only a certificate (public
key) for the signer. However, the <em class="emphasis">keytool</em>
database could (in this and all examples) be a shared
database--but more about that later. The default keytool
database is the file <em class="filename">.keystore</em> that is held in
the user's home directory.
</p>

<p>The class that implements the keytool database is the
<tt class="literal">KeyStore</tt> class
(<tt class="literal">java.security.KeyStore</tt><a name="INDEX-1364"></a>):
</p>

<dl>
<dt>
<b>public class KeyStore <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Represent a set of private keys, aliases (entities), and their
corresponding certificates. A keystore object is typically one that
has been read in from disk; that is, the keystore object is an
in-memory representation of the keytool database.
</p>
</dd>

</dl>

<p>The <tt class="literal">KeyStore</tt> class is an engine class; there is a
corresponding <tt class="literal">KeyStoreSpi</tt> class that you can use
to write your own keystore (more about that a little later). By
default, the Sun security provider implements a keystore called JKS
(for Java KeyStore). Hence, instances of the
<tt class="literal">KeyStore</tt> class are predictably obtained via this
method:
</p>

<dl>
<dt>
<b>public static final KeyStore getInstance(String type) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dt>
<b>public static final KeyStore getInstance(String type, String provider) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Return an instance of the KeyStore class that implements the given
algorithm, supplied by the given provider, if applicable. In the Sun
security provider, the default algorithm name is "JKS".
</p>
</dd>

</dl>

<p>If you do not want to hardwire the name of the keystore algorithm
into your application, you may use this method to return the string
that should be passed to the <tt class="literal">getInstance()</tt> method:
</p>

<dl>
<dt>
<b>public static final String getDefaultType() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Return the default keystore algorithm for the environment. This value
is obtained by looking for a property called
<tt class="literal">keystore.type</tt> in the
<em class="filename">java.security</em> file.
</p>
</dd>

</dl>

<p>When the keystore object is created, it is initially empty. Although
the <tt class="literal">getInstance() </tt>method has constructed the
object, it is not expected that the object's constructor will
read in a keystore from any particular location. The interaction
between the keystore object and the keytool database comes via these
two methods:
</p>

<dl>
<dt>
<b>public final void load(InputStream is, char[] password) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1365"></a>
<a name="INDEX-1366"></a>
</b>
</dt>
<dd>
<p>Initialize the keystore from the data provided over the given input
stream. The integrity of the keystore is typically protected by using
a message digest: when the keystore is stored, a message digest that
represents the data in the keystore is also stored. Before the digest
is created, the <a name="INDEX-1367"></a>password is
added to the digest data; this means that the digest cannot be
re-created from a tampered keystore without knowledge of the
password. The password for this method can be
<tt class="literal">null</tt>, in which case the keystore is loaded and
not verified.
</p>

<p>This use of the password is a property of the Sun implementation of
the <tt class="literal">KeyStore</tt> class; the password could be used
for anything else (including encrypting the entire keystore) if you
were to write your own implementation. To call this parameter a
password is somewhat misleading (although that's what the
<tt class="literal">javadoc</tt> documentation calls it), since
Sun's implementation lets you read the entire keystore without
it. The Sun implementation of the <tt class="literal">KeyStore</tt> class
requires another password to access each private key in the keystore,
so this isn't a potential security hole; all you're
reading is public certificates.
</p>

<p>You cannot require a password for <tt class="literal">load()</tt> to
succeed, since the Sun implementation of the
<tt class="literal">Policy</tt> class calls this method without a
password when it constructs the information needed for the access
controller. You may, of course, provide your own implementation of
the <tt class="literal">Policy</tt> class that provides a password if
desired.
</p>

<p>In the Sun implementation, if the class required to support the
underlying message digest is not available, a
<tt class="literal">NoSuchAlgorithmException</tt> is thrown. An error in
reading the data results in an <tt class="literal">IOException</tt>, and
generic format errors in the data result in a
<tt class="literal">CertificateException</tt>.
</p>
</dd>

<dt>
<b>public final void store(OutputStream os, char[] password) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1368"></a>
</b>
</dt>
<dd>
<p>Store the keystore to the given output stream. The password is
typically included in a digest calculation of the keystore; this
digest is then written to the output stream as well (but again, your
own implementation of this class could use the password differently).
</p>

<p>The Sun implementation of this method may throw an
<tt class="literal">IOException</tt> if the output stream cannot be read,
a <tt class="literal">NoSuchAlgorithmException</tt> if the class used to
create the digest cannot be found, or a
<tt class="literal">CertificateException</tt> if the keystore object
contains a certificate that cannot be parsed.
</p>
</dd>

</dl>

<p>There is no default file that holds the keystore. Within the core
Java API, the only class that opens the keystore is
<tt class="literal">PolicyFile</tt>, and that opens the keystore that is
listed in the <em class="filename">java.policy</em> file. The tools that
use the keystore (the <tt class="literal">jarsigner</tt> and
<tt class="literal">keytool</tt> tools) allow you to use a command-line
argument to specify the file that contains the keystore; by default,
that file is <em class="filename">.keystore</em> in the user's home
directory. This is the convention your own programs will need to use.
If your application needs to open the keystore (for example, to
obtain a private key to sign an object), it should provide either a
command-line argument or a property to specify the name of the file
to open. By convention, we'll use the
<em class="filename">.keystore</em> file in the user's home
directory in our examples.<a name="INDEX-1369"></a>
</p>

<p>
<a name="INDEX-1370"></a><a name="INDEX-1371"></a>
While we mentioned that the keystore may not be encrypted, the
private keys themselves typically are encrypted so that if someone
gains access to the keystore file, they do not have access to the
private keys in that file without the password used to encrypt those
keys. If you provide a keystore implementation that supplies keys
from a protected location, you do not necessarily need to store the
private keys in encrypted format. When private keys are delivered
over the network, you probably want to make sure that the
transmission of those keys is encrypted so that no one can snoop the
network and discover the private key.
</p>

<p>
<a name="INDEX-1372"></a><a name="INDEX-1373"></a><a name="INDEX-1374"></a><a name="INDEX-1375"></a>A keystore is arranged in terms of alias
names. Aliases are arbitrarily assigned to an entry; while the name
embedded in the certificate for a particular entry may be a long,
complicated, distinguished name, the alias for that entry can provide
a shorter, easier-to-remember name. There are a number of simple
methods in the <tt class="literal">KeyStore</tt> class that deal with
these alias names:
</p>

<dl>
<dt>
<b>public final String getType() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Return the name of the algorithm that this keystore implements.</p>
</dd>

<dt>
<b>public final String getProvider() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Return the name of the provider that supplied this keystore
implementation.
</p>
</dd>

<dt>
<b>public final Date getCreationDate(String alias) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1376"></a>
</b>
</dt>
<dd>
<p>Return the date on which the entry referenced by the given alias was
created.
</p>
</dd>

<dt>
<b>public final void deleteEntry(String alias) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1377"></a>
</b>
</dt>
<dd>
<p>Delete the entry referenced by the given alias from the keystore.</p>
</dd>

<dt>
<b>public final Enumeration aliases() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1378"></a>
</b>
</dt>
<dd>
<p>Return an enumeration of all the aliases in the keystore.</p>
</dd>

<dt>
<b>public final boolean containsAlias(String alias) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1379"></a>
</b>
</dt>
<dd>
<p>Indicate whether the keystore contains an entry referenced by the
given alias.
</p>
</dd>

<dt>
<b>public final int size() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1380"></a>
</b>
</dt>
<dd>
<p>Return the number of entries/aliases in the keystore.</p>
</dd>

</dl>

<p>Note that this list has a method to delete an entry but not one to
create an entry--creating an entry in the keystore depends upon
the type of entry you want to create.
</p>

<p>The keystore holds two types of entries: <a name="INDEX-1381"></a><a name="INDEX-1382"></a>certificate entries and key
entries. A certificate entry is an entry that contains only a public
key (encapsulated in a certificate) and can be used only to verify a
digital signature, while a key entry is an entry that contains both a
private and a public key and can be used to create and to verify a
digital signature. Hence, you may think of a key entry as a signer
and a certificate entry as an identity, although those classes are
not used in the keystore interface (they may be used in the keystore
implementation).
</p>

<p>There are two basic differences between key entries and certificate
entries:
</p>

<ul>
<li>
<p>A key entry contains a private key, while a certificate entry does
not.
</p>
</li>
<li>
<p>A key entry may contain a chain of certificates that verifies it,
while a certificate entry contains a single certificate.
</p>
</li>
</ul>

<p>For a given alias, you can determine what type of entry it represents
via these two methods:
</p>

<dl>
<dt>
<b>public final boolean isKeyEntry(String alias) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dt>
<b>public final boolean isCertificateEntry(String alias) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1383"></a>
<a name="INDEX-1384"></a>
</b>
</dt>
<dd>
<p>Indicate whether the given alias represents a key entry or a
certificate entry.
</p>
</dd>

</dl>

<p>For a given alias, you cannot retrieve an object that represents the
entire entry. You may use these methods to retrieve information about
the entry represented by an alias:
</p>

<dl>
<dt>
<b>public final Key getKey(String alias, char[] password) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1385"></a>
</b>
</dt>
<dd>
<p>Return the private key for the entry associated with the given alias.
For a certificate entry, this method returns
<tt class="literal">null</tt>. An
<tt class="literal">UnrecoverableKeyException</tt> is thrown if the key
cannot be retrieved (e.g., if the key has been damaged).
</p>

<p>Retrieving a private key typically requires a password; this may or
may not be the same password that was used to read the entire
keystore. This allows private keys to be stored encrypted so they
cannot be read without the appropriate password. If the class that
provides encryption cannot be found, this method throws a
<tt class="literal">NoSuchAlgorithmException</tt>.
</p>
</dd>

<dt>
<b>public final Certificate[] getCertificateChain(String alias) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1386"></a>
</b>
</dt>
<dd>
<p>Return the certificate chain that verifies the entry associated with
the given alias, which must represent a key entry. For an alias that
represents a certificate entry, this method returns
<tt class="literal">null</tt>.
</p>
</dd>

<dt>
<b>public final Certificate getCertificate(String alias) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1387"></a>
</b>
</dt>
<dd>
<p>Return the certificate associated with the given alias. If the alias
represents a key entry, the certificate returned is the user's
certificate (that is, the first certificate in the entry's
certificate chain); certificate entries have only a single
certificate.
</p>
</dd>

<dt>
<b>public final String getCertificateAlias(Certificate cert) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1388"></a>
</b>
</dt>
<dd>
<p>Return the alias that corresponds to the entry that matches the given
certificate (using the <tt class="literal">equals()</tt> method of
certificate comparison). If no matches occur,
<tt class="literal">null</tt> is returned.
</p>
</dd>

</dl>

<p>Finally, in order to create or modify an entry, you may use one of
these methods. All of these methods create a new entry if the given
alias does not exist:
</p>

<dl>
<dt>
<b>public final void setKeyEntry(String alias, byte key[], Certificate chain[]) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dt>
<b>public final void setKeyEntry(String alias, Key k, char[] password, Certificate chain[]) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Assign the given private key and certificate chain to the key entry
represented by the given alias, creating a new key entry if
necessary. Any previous private key and certificate chain for this
entry are lost; if the previous entry was a certificate entry, it now
becomes a key entry.
</p>

<p>A <tt class="literal">KeyStoreException</tt> is thrown if the key entry
cannot be encrypted by the internal encrypting algorithm of the
keystore. In the Sun implementation, when the key is passed in as a
series of bytes, it is not encrypted--in this case, you are
expected to have performed the encryption yourself.
</p>
</dd>

<dt>
<b>public final void setCertificateEntry(String alias, Certificate c) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1389"></a>
</b>
</dt>
<dd>
<p>Assign the given certificate to the certificate entry represented by
the given alias. If an entry for this alias already exists and is a
key entry, a <tt class="literal">KeyStoreException</tt> is thrown.
Otherwise, if an entry for this alias already exists, it is
overwritten.
</p>
</dd>

</dl>

<p>These are the basic methods by which we can manage a keystore.
We'll see examples of many of these methods throughout the rest
of this book; for now, let's look at a simple example that
looks up a given entry in the keystore:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class KeyStoreLookup {
	public static void main(String args[]) {
		try {
			KeyStore ks = 
                      KeyStore.getInstance(KeyStore.getDefaultType());
			String fname = System.getProperty("user.home") +
								File.separator + ".keystore";
			FileInputStream fis = new FileInputStream(fname);
			ks.load(fis, null);
			if (ks.isKeyEntry(args[0])) {
				System.out.println(args[0] +
								" is a key entry in the keystore");
				char c[] = new char[args[1].length()];
				args[1].getChars(0, c.length, c, 0);
				System.out.println("The private key for" + args[0] + 
                            " is " + ks.getKey(args[0], c));
				Certificate certs[] = ks.getCertificateChain(args[0]);
				if (certs[0] instanceof X509Certificate) {
					X509Certificate x509 = (X509Certificate) certs[0];
					System.out.println(args[0] + " is really " +
						x509.getSubjectDN());
				}
				if (certs[certs.length - 1] instanceof
									 X509Certificate) {
					X509Certificate x509 = (X509Certificate) 
										certs[certs.length - 1];
					System.out.println(args[0] + " was verified by " +
						x509.getIssuerDN());
				}
			}
			else if (ks.isCertificateEntry(args[0])) {
				System.out.println(args[0] +
							" is a certificate entry in the keystore");
				Certificate c = ks.getCertificate(args[0]);
				if (c instanceof X509Certificate) {
					X509Certificate x509 = (X509Certificate) c;
					System.out.println(args[0] + " is really " +
						x509.getSubjectDN());
					System.out.println(args[0] + " was verified by " +
						x509.getIssuerDN());
				}
			}
			else {
				System.out.println(args[0] +
						" is unknown to this keystore");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}</pre>
</blockquote>

<p>This program expects two arguments: the name of the entity in the
keystore for which information is desired, and the password that was
used to encrypt the private key.
</p>

<p>There are a number of points to pick out from this example. First,
note that we constructed the keystore using the convention we
mentioned earlier--the <em class="filename">.keystore</em> file in
the user's home directory.<a name="INDEX-1390"></a><a name="INDEX-1391"></a><a name="INDEX-1392"></a><a name="INDEX-1393"></a>
</p>

<p>After we've read in the data, the first thing we do is
determine if the entry that we're interested in is a key entry
or a certificate entry--mostly so that we can handle the
certificates for these entries differently. In the case of a key
entry, we obtain the entire certificate chain, and use the first
entry in that chain to print out the Distinguished Name (DN) for the
entry, while the last entry in the chain is used to print out the DN
for the last certificate authority in the chain. For a certificate
entry, our task is simpler: there is a single certificate, and we
simply print out its information.<a name="INDEX-1394"></a><a name="INDEX-1395"></a><a name="INDEX-1396"></a>
</p>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch11_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch11_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch11_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">11.1. Overview of Key Management</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">11.3. A Key Management Example</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
