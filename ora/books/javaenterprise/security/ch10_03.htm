<html>
<head>
<title>The KeyFactory Class (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The KeyFactory Class">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_01.htm">Chapter 10: Keys and Certificates</a></td><td align="right" valign="top" width="172"><a href="ch10_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">10.3. The KeyFactory Class</h2>

<p>
<a name="INDEX-1198"></a><a name="INDEX-1199"></a><a name="INDEX-1200"></a>Although <a name="INDEX-1201"></a><a name="INDEX-1202"></a><a name="INDEX-1203"></a>
there are times when you'll generate your own keys, they are
more often obtained electronically. The next engine and related set
of classes we'll examine show us how to import and export keys.
The source or destination of these keys is not specified by any of
these classes--you may have read the data from a file, or from a
socket, or you may have typed it in manually. The classes in this
section merely enable you to convert a key object to a known external
representation and to perform the reverse conversion.
</p>

<p>Key factories are available only in Java 1.2. Exporting keys in 1.1
is simple: the encoded bytes of the key can be obtained and
transmitted in any manner that is convenient. But importing keys in
1.1 is very difficult, because there is no way to take the encoded
bytes and produce a key from them. As a fallback measure, you can
serialize a key object to export it and then deserialize that data to
import the key, although that's not something we generally
recommend (see <a href="ch10_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_05.htm">Section 10.5, "Keys, Certificates, and Object Serialization"</a> later in this
chapter).
</p>

<p>There are two external representations by which a key may be
transmitted--by its encoded format, or by the parameters that
were used to generate the key. Either of these representations may be
encapsulated in a key specification, which is used to interact with
the <tt class="literal">KeyFactory</tt> class
(<tt class="literal">java.security.KeyFactory</tt>) that actually imports
and exports keys:
</p>

<dl>
<dt>
<b>public class KeyFactory <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Provide an infrastructure for importing and exporting keys according
to the specific encoding format or parameters of the key.
</p>
</dd>

</dl>

<a name="SEC-CH-10-SECT-3.1"></a>
<h3 class="sect2">10.3.1. Using the KeyFactory class</h3>

<p>The <tt class="literal">KeyFactory</tt> class is an engine class, which
provides the typical method of instantiating itself:
</p>

<dl>
<dt>
<b>public static final KeyFactory getInstance(String alg) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dt>
<b>public static final KeyFactory getInstance(String alg, String provider) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Create a key factory capable of importing and exporting keys that
were generated with the given algorithm. The class that implements
the key factory comes from the named provider or is located according
to the standard rules for provider engines. If a key factory that
implements the given algorithm is not found, a
<tt class="literal">NoSuchAlgorithmException</tt> is generated. If the
named provider is not found, a
<tt class="literal">NoSuchProviderException</tt> is generated.
</p>
</dd>

</dl>

<p>A key factory presents the following public methods:</p>

<dl>
<dt>
<b>public final Provider getProvider() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Return the provider that implemented this particular key factory.</p>
</dd>

<dt>
<b>public final PublicKey generatePublic(KeySpec ks) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1204"></a>
<a name="INDEX-1205"></a>
<a name="INDEX-1206"></a>
<a name="INDEX-1207"></a>
<a name="INDEX-1208"></a>
</b>
</dt>
<dt>
<b>public final PrivateKey generatePrivate(KeySpec ks) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>These methods are used to import a key: they create the key based on
the imported data that is held in the key specification object. If
the key cannot be created, an
<tt class="literal">InvalidKeySpecException</tt> is thrown.
</p>
</dd>

<dt>
<b>public final KeySpec getKeySpec(Key key, Class keySpec) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>This method is used to export a key: it creates a key specification
based on the actual key. If the key specification cannot be created,
an <tt class="literal">InvalidKeySpecException</tt> is thrown.
</p>
</dd>

<dt>
<b>public final Key translateKey(Key key) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1209"></a>
<a name="INDEX-1210"></a>
</b>
</dt>
<dd>
<p>Translate a key from an unknown source into a key that was generated
from this object. This method can be used to convert the type of a
key that was loaded from a different security provider (e.g., a DSA
key generated from the XYZ provider--type
<tt class="literal">com.XYZ.DSAPrivateKey</tt>--could be converted
to a DSA key generated from the Sun provider--type
<tt class="literal">sun.security.pro-vider.DSAPrivateKey)</tt>. If the
key cannot be translated, an <tt class="literal">InvalidKeyException</tt>
is generated.
</p>
</dd>

<dt>
<b>public final String getAlgorithm() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Return the algorithm this key factory supports.</p>
</dd>

</dl>

<p>We'll defer examples of these methods until we discuss the
<tt class="literal">KeySpec</tt> class later.
</p>


<a name="SEC-CH-10-SECT-3.2"></a>
<h3 class="sect2">10.3.2. Implementing a Key Factory</h3>

<p>Like all engines, the key factory depends on a service provider
interface class: the <tt class="literal">KeyFactorySpi</tt><a name="INDEX-1211"></a><a name="INDEX-1212"></a> class
(<tt class="literal">java.security.KeyFactorySpi</tt>):
</p>

<dl>
<dt>
<b>public abstract class KeyFactorySpi <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Provide the set of methods necessary to implement a key factory that
is capable of importing and exporting keys in a particular format.
</p>
</dd>

</dl>

<p>However, since the <tt class="literal">KeyFactory</tt> class did not
exist in 1.1, its SPI is unrelated in the class hierarchy.
Implementing a key factory therefore requires that we subclass the
SPI rather than subclassing the <tt class="literal">KeyFactory</tt> class
directly. The <tt class="literal">KeyFactorySpi</tt> class is required to
implement a key factory because the <tt class="literal">KeyFactory</tt>
class contains only this constructor:
</p>

<dl>
<dt>
<b>protected KeyFactory(KeyFactorySpi keyFacSpi, Provider provider, String algorithm)</b>
</dt>
<dd>
<p>Construct a key factory based on the given factory service provider
class that is implemented by the given provider and that provides
keys of the given algorithm.
</p>
</dd>

</dl>

<p>This constructor is called by the <tt class="literal">Security</tt> class
itself; all we need to do is ensure that the class we register with
the security provider interface is a subclass of the
<tt class="literal">KeyFactorySpi</tt> class.
</p>

<p>The <tt class="literal">KeyFactorySpi</tt> class contains the following
methods; since each of these methods is abstract, our class must
provide an implementation of all of them:
</p>

<dl>
<dt>
<b>protected abstract PublicKey engineGeneratePublic(KeySpec ks) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1213"></a>
<a name="INDEX-1214"></a>
<a name="INDEX-1215"></a>
<a name="INDEX-1216"></a>
</b>
</dt>
<dt>
<b>protected abstract PrivateKey engineGeneratePrivate(KeySpec ks) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Generate of the public or private key. Depending on the key
specification, this means either decoding the data of the key or
regenerating the key based on specific parameters to the key
algorithm. If the key cannot be generated, an
<tt class="literal">InvalidKeyException</tt> should be thrown.
</p>
</dd>

<dt>
<b>protected abstract KeySpec engineGetKeySpec(Key key, Class keySpec) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Export the key. Depending on the key class specification, this means
either encoding the data (e.g., by calling the
<tt class="literal">getEncoded()</tt> method) or saving the parameters
that were used to generate the key. If the specification cannot be
created, an <tt class="literal">InvalidKeySpecException</tt> should be
thrown.
</p>
</dd>

<dt>
<b>protected Key engineTranslateKey(Key key)<img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Perform the actual translation of the key. This is typically
performed by translating the key to its specification and back. If
the key cannot be translated, an
<tt class="literal">InvalidKeyException</tt> should be thrown.
</p>
</dd>

</dl>

<p>Although we show how to use a key factory later, we won't show
how to implement one; the amount of code involved is large and
relatively uninteresting. However, the online examples do contain a
sample key factory implementation if you're interested in
seeing one.<a name="INDEX-1217"></a><a name="INDEX-1218"></a>
</p>


<a name="SEC-CH-10-SECT-3.3"></a>
<h3 class="sect2">10.3.3. Key Specifications</h3>

<p>Importing and exporting a key are based on classes that implement the
<tt class="literal">KeySpec</tt> interface
(<tt class="literal">java.security.spec.KeySpec</tt><a name="INDEX-1219"></a><a name="INDEX-1220"></a>):
</p>

<dl>
<dt>
<b>public interface KeySpec <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Identify a class as one that is able to hold data that can be used to
generate a key.
</p>
</dd>

</dl>

<p>The <tt class="literal">KeySpec</tt> interface is an empty interface; it
is used for type identification only. This interface in turn forms
the basis of two interfaces, each of which handles one method of
importing a key.
</p>

<a name="SEC-CH-10-SECT-3.3.1"></a>
<h3 class="sect3">10.3.3.1. The EncodedKeySpec class</h3>

<p>
<a name="INDEX-1221"></a><a name="INDEX-1222"></a>Earlier, <a name="INDEX-1223"></a><a name="INDEX-1224"></a>we
mentioned that the <tt class="literal">Key</tt> class must provide a
<tt class="literal">getEncoded()</tt> method for the key that outputs a
series of bytes in a format specific to the type of key; this format
is generally part of the specification for the key algorithm. For DSA
keys, for example, the encoding format might be PKCS#8 or X.509. An
encoded key specification holds the encoded data for a key and is
defined by the <tt class="literal">EncodedKeySpec</tt> class
(<tt class="literal">java.security.spec.EncodedKeySpec</tt>):
</p>

<dl>
<dt>
<b>public abstract class EncodedKeySpec implements KeySpec <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Provide an object to hold the encoded data of a key.</p>
</dd>

</dl>

<p>An encoded key specification can be operated on via these methods:</p>

<dl>
<dt>
<b>public abstract byte[] getEncoded() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Return the actual encoded data held by the object.</p>
</dd>

<dt>
<b>public abstract String getFormat() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Return the string that represents the format of the encoded data
(e.g., PKCS#8).
</p>
</dd>

</dl>

<p>There are two core classes that provide a concrete implementation of
this class (both of which are in the
<tt class="literal">java.security.spec</tt> package):
</p>

<dl>
<dt>
<b>public class <a name="INDEX-1225"></a>
<a name="INDEX-1226"></a>
PKCS8EncodedKeySpec extends EncodedKeySpec <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dt>
<b>public class <a name="INDEX-1227"></a>
<a name="INDEX-1228"></a>
<a name="INDEX-1229"></a>
X509EncodedKeySpec extends EncodedKeySpec <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Provide an implementation of the encoded key specification. The PCKS8
encoded key specification is used for DSA private keys, and the X509
encoded key specification is used for DSA public keys.
</p>
</dd>

</dl>

<p>Both of these classes are constructed by passing in the encoded data:</p>

<dl>
<dt>
<b>public PKCS8EncodedKeySpec(byte data[]) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dt>
<b>public X509EncodedKeySpec(byte data[]) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Construct an encoded key specification object that holds the given
encoded data. The format of the data is not checked for validity. The
input data is saved within the object to be returned via the
<tt class="literal">getEncoded()</tt> method.
</p>
</dd>

</dl>

<p>Taken together, the methods of these classes allow us to import and
export keys. Keys are exported via the
<tt class="literal">getEncoded()</tt> method, and they are imported by
constructing an object based on the encoded <a name="INDEX-1230"></a><a name="INDEX-1231"></a>
bytes.<a name="INDEX-1232"></a><a name="INDEX-1233"></a>
</p>



<a name="SEC-CH-10-SECT-3.3.2"></a>
<h3 class="sect3">10.3.3.2. The AlgorithmParameterSpec interface</h3>

<p>
<a name="INDEX-1234"></a><a name="INDEX-1235"></a>In addition to their encoded format,
keys are typically able to be specified by providing the parameters
to the algorithm that produced the key. Specifying keys in this
manner is a function of the
<tt class="literal">AlgorithmParameterSpec</tt> interface
(<tt class="literal">java.security.spec.AlgorithmParameterSpec</tt>):
</p>

<dl>
<dt>
<b>public interface AlgorithmParameterSpec <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Provide an infrastructure for specifying keys based on the parameters
used to generate them.
</p>
</dd>

</dl>

<p>Like the <tt class="literal">KeySpec</tt> interface, this interface
provides no methods and is used only for type identification. The
<tt class="literal">DSAParameterSpec</tt><a name="INDEX-1236"></a><a name="INDEX-1237"></a> class
(<tt class="literal">java.security.spec.DSAParameterSpec</tt><a name="INDEX-1238"></a>) is the single core class that
implements this interface:
</p>

<dl>
<dt>
<b>public class DSAParameterSpec implements AlgorithmParameterSpec, DSAParams <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Provide a class that holds the parameters used to generate a DSA key.</p>
</dd>

</dl>

<p>As we mentioned earlier, there are three parameters that are common
to all DSA keys: <em class="emphasis">p</em>, <em class="emphasis">q</em>, and
<em class="emphasis">g</em>. Hence, an instance of this class can be
constructed as follows:
</p>

<dl>
<dt>
<b>public DSAParameterSpec(BigInteger p, BigInteger q, BigInteger g) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Create an object that holds the common parameters used to generate a
DSA key.
</p>
</dd>

</dl>

<p>The only methods of this class are used to retrieve those parameters:</p>

<dl>
<dt>
<b>public BigInteger getP() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1239"></a>
<a name="INDEX-1240"></a>
</b>
</dt>
<dt>
<b>public BigInteger getQ() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dt>
<b>public BigInteger getG() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Return the parameter held by the specification object.</p>
</dd>

</dl>

<p>While those three parameters are common to every DSA key, a DSA
public key has an additional parameter (<em class="emphasis">y</em>) and a
DSA private key has a different additional parameter
(<em class="emphasis">x</em>). Hence, to represent a DSA key fully
requires one of these classes (both of which are in the
<tt class="literal">java.security.spec</tt> package):
</p>

<dl>
<dt>
<b>public class <a name="INDEX-1241"></a>
<a name="INDEX-1242"></a>
<a name="INDEX-1243"></a>
<a name="INDEX-1244"></a>
<a name="INDEX-1245"></a>
DSAPublicKeySpec implements KeySpec <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dt>
<b>public class DSAPrivateKeySpec implements KeySpec <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Provide an object to hold all parameters of a DSA public or private
key.
</p>
</dd>

</dl>

<p>Instances of these classes are constructed by providing all
parameters:
</p>

<dl>
<dt>
<b>public DSAPublicKeySpec(BigInteger y, BigInteger p, BigInteger q, BigInteger g) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dt>
<b>public DSAPrivateKeySpec(BigInteger x, BigInteger p, BigInteger q, BigInteger g) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Create an object that holds all the parameters used to generate a DSA
key.
</p>
</dd>

</dl>

<p>This final parameter can be retrieved via a class-specific method
(<tt class="literal">getX()</tt> or <tt class="literal">getY()</tt> as
appropriate).
</p>

<p>Once again, these classes in total allow us to export keys (via the
various <tt class="literal">get*()</tt> methods) and to import keys via
the <a name="INDEX-1246"></a><a name="INDEX-1247"></a>
constructors.<a name="INDEX-1248"></a><a name="INDEX-1249"></a>
</p>



<a name="SEC-CH-10-SECT-3.4"></a>
<h3 class="sect2">10.3.4. A Key Factory Example</h3>

<p>
<a name="INDEX-1250"></a>As
we mentioned at the beginning of this section, the prime reason for
key factories is that they give us the ability to import and export
keys. Exporting a key specification is typically done by transmitting
the individual data elements of the key specification (those
individual elements vary by the type of key). Importing a key
specification typically involves constructing the specification with
the transmitted elements as parameters to the constructor.
</p>

<p>Here's an example using a DSA algorithmic parameter
specification. We'll look first at exporting a key:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class Export {
	public static void main(String args[]) {
		try {
			KeyPairGenerator kpg = KeyPairGenerator.getInstance("DSA");
			kpg.initialize(512, new SecureRandom());
			KeyPair kp = kpg.generateKeyPair();
			Class spec = Class.forName(
							"java.security.spec.DSAPrivateKeySpec");
			KeyFactory kf = KeyFactory.getInstance("DSA");
			DSAPrivateKeySpec ks = (DSAPrivateKeySpec)
									kf.getKeySpec(kp.getPrivate(), spec);
			FileOutputStream fos = new FileOutputStream("exportedKey");
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			oos.writeObject(ks.getX());
			oos.writeObject(ks.getP());
			oos.writeObject(ks.getQ());
			oos.writeObject(ks.getG());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}</pre>
</blockquote>

<p>Two items are interesting in this code. First, one argument to the
<tt class="literal">getKeySpec()</tt> method is a class object, requiring
us to construct the class object using the
<tt class="literal">forName()</tt> method (a somewhat unusual usage).
Then, once we have the key specification itself, we have to figure
out how to transmit the specification. Since in this case, the
specification is an algorithmic specification, we chose to write out
the individual parameters from the specification.<a href="#FOOTNOTE-3">[3]</a> If we had used an encoded key
specification, we simply would have written out the byte array
returned from the <tt class="literal">getEncoded()</tt> method.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-3"></a>
<p>[3]The
<tt class="literal">DSAPrivateKeySpec</tt> class--like all key
specification classes--is not serializable itself. But for
reasons that we'll discuss later, it's better not to
serialize key classes that are to be imported into another Java VM
anyway.</p> </blockquote>

<p>We can import this key as follows:</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class Import {
	public static void main(String args[]) {
		try {
			FileInputStream fis = new FileInputStream("exportedKey");
			ObjectInputStream ois = new ObjectInputStream(fis);
			DSAPrivateKeySpec ks = new DSAPrivateKeySpec(
						(BigInteger) ois.readObject(),
						(BigInteger) ois.readObject(),
						(BigInteger) ois.readObject(),
						(BigInteger) ois.readObject());
			KeyFactory kf = KeyFactory.getInstance("DSA");
			PrivateKey pk = kf.generatePrivate(ks);
			System.out.println("Got private key");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}</pre>
</blockquote>

<p>This example is predictably symmetric to <a name="INDEX-1251"></a><a name="INDEX-1252"></a><a name="INDEX-1253"></a><a name="INDEX-1254"></a> exporting
<a name="INDEX-1255"></a><a name="INDEX-1256"></a> a
key.<a name="INDEX-1257"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch10_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch10_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">10.2. The KeyPairGenerator Class</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">10.4. Certificates</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
