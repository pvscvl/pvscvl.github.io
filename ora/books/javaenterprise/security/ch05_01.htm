<html>
<head>
<title>The Access Controller (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The Access Controller">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch04_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm">Java Security</a></td><td align="right" valign="top" width="172"><a href="ch05_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Chapter 5.  The Access Controller</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch05_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_01.htm">The CodeSource Class</a>
<br>
<a href="ch05_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_02.htm">Permissions</a>
<br>
<a href="ch05_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_03.htm">The Policy Class</a>
<br>
<a href="ch05_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_04.htm">Protection Domains</a>
<br>
<a href="ch05_05.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_05.htm">The AccessController Class</a>
<br>
<a href="ch05_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_06.htm">Guarded Objects</a>
<br>
<a href="ch05_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_07.htm">Summary</a>
<br>
</p>
</div>


<p>In this chapter, we're going to examine Java's <a name="INDEX-503"></a>access controller. While the
security manager is the key to the security model of the Java
sandbox, the access controller is the mechanism that the security
manager actually uses to enforce its protections. The security
manager may be king, but the access controller is really the power
behind the throne.
</p>

<p>The <a name="INDEX-504"></a><a name="INDEX-505"></a>access controller is actually somewhat
redundant. The purpose of the security manager is to determine
whether or not particular operations should be permitted or denied.
The purpose of the access controller is really the same: it decides
whether access to a critical system resource should be permitted or
denied. Hence, the access controller can do everything the security
manager can do.
</p>

<p>The reason there is both an access controller and a security manager
is mainly historical: the access controller is only available in Java
1.2<a href="#FOOTNOTE-1">[1]</a> and
subsequent releases. Before the access controller existed, the
security manager had to rely on its internal logic to determine the
security policy that should be in effect, and changing the security
policy required changing the security manager itself. Starting with
1.2, the security manager is able to defer these decisions to the
access controller. Since the security policy enforced by the access
controller can be specified in a file, this allows a much more
flexible mechanism for determining policies. The access controller
also gives us a much simpler method of granting fine-grained,
specific permissions to specific classes. That process was
theoretically possibly with the security manager alone, but it was
simply too hard to implement.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1]1.2 is now Java 2.</p> </blockquote>

<p>But the large body of pre-1.2 Java programs dictates that the primary
interface to system security--that is, the security
manager--cannot change; otherwise, existing code that implements
or depends on the security manager would become obsolete. Hence, the
introduction of the access controller did not replace the security
manager--it supplemented the security manager. This relationship
is illustrated in <a href="#SEC-CH-5-FIG-2">Figure 5-1</a>. Typically, an
operation proceeds through the program code into the Java API,
through the security manager to the access controller, and finally
into the operating system. In certain cases, however, the security
manager may bypass the access controller. And native libraries are
still outside the domain of either the security manager or the access
controller (although the ability to load those libraries may be
restricted, as we've seen).
</p>

<a name="SEC-CH-5-FIG-2"></a>
<div class="figure">
<img alt="figure" src="figs/JSEC_0501.gif" webstripperlinkwas="figs/JSEC_0501.gif"></div>
<h4 class="objtitle">Figure 5-1. Coordination of the security manager and the access controller</h4>

<p>The access controller plays another role in this picture as well: it
allows a program to determine that access to any arbitrary resource
must require explicit permission. A program that accesses employee
payroll information from a corporate database may want to assign
permission to each employee to access only his or her own data in the
database. While global access to the database may be controlled by
the security manager (e.g., because it's necessary to open a
file or socket to get to the database), access to the particular
record can be controlled by the access controller alone. Because the
access controller (unlike the security manager) is easily extensible,
it is simple for a program to use the same security framework to
access both the general resources of the operating system and any
specific resources of the program.
</p>

<p>Keep in mind, however, that the core Java API never calls the access
controller unless a security manager is in place, and that the access
controller will not be initialized until it is called. If you call it
directly for a program-specific resource, it will initialize itself
automatically. But by default, Java applications run without a
security manager will not use the access controller. We'll
discuss later in this chapter and in <a href="ch06_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch06_01.htm">Chapter 6, "Implementing Security Policies"</a> the
use of the <tt class="literal">-Djava.security.manager</tt> flag to
install a security manager into the application, which will
initialize the access controller for us.
</p>

<p>In this chapter, then, we'll look into the access controller,
including its implementation and its use. This will give us the
necessary knowledge of how the access controller works, how it can be
used to change the security of a Java program without requiring code
changes, and how it is used to implement the security manager. This
last point will also give us the necessary information to write our
own security manager. In Java 1.2, there are only rare cases where
such a task is necessary.
</p>

<p>The access controller is built upon four concepts:</p>

<ul>
<li>
<p>
<em class="emphasis">Code sources</em>: An encapsulation of the location
from which certain Java classes were obtained
</p>
</li>
<li>
<p>
<em class="emphasis">Permissions</em>: An encapsulation of a request to
perform a particular operation
</p>
</li>
<li>
<p>
<em class="emphasis">Policies</em>: An encapsulation of all the specific
permissions that should be granted to specific code sources
</p>
</li>
<li>
<p>
<em class="emphasis">Protection</em><em class="emphasis">domains</em>: An
encapsulation of a particular code source and the permissions granted
to that code source
</p>
</li>
</ul>

<p>Before we examine the access controller itself, we'll look each
of these building blocks.<a name="INDEX-506"></a>
</p>



<h2 class="sect1">5.1. The CodeSource Class</h2>

<p>
<a name="INDEX-507"></a><a name="INDEX-508"></a><a name="INDEX-509"></a>
When we examined class loaders, we introduced the notion of a code
source. A code source is a simple object that merely reflects the URL
from which a class was loaded and the keys (if any) that were used to
sign that class. The
<tt class="literal">SecureClassLoader</tt><a name="INDEX-510"></a> class (and its subclasses) are
responsible for creating and manipulating these code source objects.
</p>

<p>The <tt class="literal">CodeSource</tt> class
(<tt class="literal">java.security.CodeSource</tt><a name="INDEX-511"></a>) has a few interesting methods:
</p>

<dl>
<dt>
<b>public <a name="INDEX-512"></a>
CodeSource(URL url, Certificate cers[]) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Create a code source object for code that has been loaded from the
specified URL. The optional array of certificates is the array of
public keys that have signed the code that was loaded from this URL.
These certificates are typically obtained from reading a signed JAR
file, which we'll show in <a href="ch12_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch12_01.htm">Chapter 12, "Digital Signatures"</a>; if the
code was not signed, this argument should be
<tt class="literal">null</tt>.
</p>
</dd>

<dt>
<b>public boolean <a name="INDEX-513"></a>
equals(Object o) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Two code source objects are considered equal if they were loaded from
the same URL (that is, the <tt class="literal">equals()</tt> method for
the URL of the objects returns <tt class="literal">true</tt>) and the
array of certificates is equal (that is, a comparison of each
certificate in the array of certificates will return
<tt class="literal">true</tt>).
</p>
</dd>

<dt>
<b>public final URL getLocation() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Return the URL that was passed to the constructor of this object.</p>
</dd>

<dt>
<b>public final Certificate[] getCertificates<a name="INDEX-514"></a>
() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Return a copy of the array of certificates that were used to
construct this code source object. The original certificates are not
returned so that they cannot be modified accidentally (or
maliciously).
</p>
</dd>

<dt>
<b>public boolean implies(CodeSource cs) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Determine if the code source implies the parameter according to the
rules of the <tt class="literal">Permission</tt> class (see later in this
chapter). One code source implies another if it contains all the
certificates of the parameter and if the URL of the parameter is
implied by the URL of the target.
</p>
</dd>

</dl>

<p>That's the extent of the <tt class="literal">CodeSource</tt> class.
When we discussed the <tt class="literal">SecureClassLoader</tt> class in
<a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch03_01.htm">Chapter 3, "Java Class Loaders"</a>, we showed that the
<tt class="literal">defineClass()</tt> method expected a
<tt class="literal">CodeSource</tt> object as a parameter. It's up
to the implementor of the <tt class="literal">SecureClassLoader</tt> to
provide this object. In the <tt class="literal">URLClassLoader</tt>
class, this happens automatically, based on the URL where the class
was actually located. By default, each URL in the
<tt class="literal">URLClassLoader</tt> class will have its own distinct
code source object, so all classes that are loaded from that URL are
considered to have the same code source. This does not have to be the
case (though it's much simpler); you could have a different
code source for each class, or even different code sources for sets
of classes from the same URL (although we question the wisdom of
doing that).
</p>

<p>In <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch03_01.htm">Chapter 3, "Java Class Loaders"</a>, we didn't bother to create code sources, which
meant that our classes were assigned to a default code source. For
the time being, we'll create code sources in an URL-based class
loader simply based on the URL we used to construct the class loader;
these classes will all be unsigned classes as a result. In Chapter
12, we'll show how you can get the correct certificates with
which to construct a code source object for a signed class.<a name="INDEX-515"></a><a name="INDEX-516"></a><a name="INDEX-517"></a>
</p>
















<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch04_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch05_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.4. Summary</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.2. Permissions</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
