<html>
<head>
<title>Implementing a MessageDigest Class (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Implementing a MessageDigest Class">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_01.htm">Chapter 9: Message Digests</a></td><td align="right" valign="top" width="172"><a href="ch09_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">9.3. Implementing a MessageDigest Class</h2>

<p>
<a name="INDEX-1106"></a><a name="INDEX-1107"></a><a name="INDEX-1108"></a><a name="INDEX-1109"></a>If you want to
write your own security provider, you have the option of creating
your own message digest engine. Typically, you'd do this
because you want to ensure that a particular algorithm like SHA is
available regardless of who the default security provider is; if you
have a mathematics background, it's conceivable that you might
want to implement your own algorithm.
</p>

<p>In order to implement a message digest algorithm, you must provide a
concrete subclass of the <tt class="literal">MessageDigest</tt> class.
This essentially entails providing an implementation of most of the
public methods we've just looked at. Although the public
methods are not declared abstract, they typically do nothing more
than call an internal (protected) method to accomplish their task.
</p>

<p>The <tt class="literal">MessageDigest</tt> class exists in both Java 1.1
and 1.2,<a href="#FOOTNOTE-1">[1]</a> which
is why it extends its SPI (see <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_01.htm">Chapter 8, "Security Providers"</a>). For our
example, we'll directly subclass the
<tt class="literal">MessageDigest</tt> class so that the resulting
example will work under both releases, but remember that in 1.2 you
have the option of extending the
<tt class="literal">MessageDigestSpi</tt> class directly.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1]1.2 is now Java 2.</p> </blockquote>

<p>There is a single constructor in the
<tt class="literal">MessageDigest</tt> class that is available to
implementors:
</p>

<dl>
<dt>
<b>protected MessageDigest(String name)</b>
</dt>
<dd>
<p>Construct a message digest object. Classes that extend the
<tt class="literal">MessageDigest</tt> class must call this constructor,
as this is the only constructor in the class. As we'll see,
however, the constructor of the subclass must take no arguments.
</p>
</dd>

</dl>

<p>In order to write a message digest class, you must implement each of
the following methods:
</p>

<dl>
<dt>
<b>protected abstract void engineUpdate(byte input)</b>
</dt>
<dt>
<b>protected abstract void engineUpdate(byte[] input, int offset, int len)</b>
</dt>
<dd>
<p>Add the given bytes to the data over which the digest will be
calculated. Note that there is no method in this list that accepts
simply an array of bytes; the <tt class="literal">update(byte[] b)</tt>
method in the base class simply uses an offset of
and a length equal to the entire array.
</p>
</dd>

<dt>
<b>protected abstract byte[] engineDigest()</b>
</dt>
<dd>
<p>Calculate the digest over the accumulated data, resetting the
internal state of the object afterwards. Note that there is no
corresponding method that accepts an array of bytes as an argument;
the <tt class="literal">digest()</tt> method in the base class simply
calls the <tt class="literal">engineUpdate()</tt> method if needed before
calling the <tt class="literal">engineDigest()</tt> method.
</p>
</dd>

<dt>
<b>protected int engineDigest(byte buf[], int offset, int len) <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"></b>
</dt>
<dd>
<p>Calculate the digest, placing the output into the
<tt class="literal">buf</tt> array (starting at the given
<tt class="literal">offset</tt> and proceeding for
<tt class="literal">len</tt> bytes) and returning the length of the
calculated digest. The default implementation of this method simply
calls the <tt class="literal">engineDigest()</tt> method and then copies
the result into <tt class="literal">buf</tt>. The buffer passed to this
method always has sufficient length to hold the digest, since if the
buffer had been too short the <tt class="literal">digest()</tt> method
itself would have thrown an exception.
</p>
</dd>

<dt>
<b>protected abstract void engineReset()<a name="INDEX-1110"></a>
<a name="INDEX-1111"></a>
</b>
</dt>
<dd>
<p>Reset the internal state of the engine, discarding all accumulated
data and resetting the algorithm to an initial condition.
</p>
</dd>

<dt>
<b>protected int engineGetDigestLength() <img alt="figure" src="gifs/bstar.gif" webstripperlinkwas="gifs/bstar.gif"><a name="INDEX-1112"></a>
<a name="INDEX-1113"></a>
</b>
</dt>
<dd>
<p>Return the digest length that is supported by this implementation.
Unlike most of the protected methods in this class, this method is
not abstract; it does not need to be overridden. However, the default
implementation simply returns 0. If
is returned by this method, the
<tt class="literal">getDigestLength()</tt> method attempts to create a
clone of the digest object, calculate its digest, and return the
length of the calculated digest. If a digest implementation does not
override this method and does not implement the
<tt class="literal">Cloneable</tt> interface, the
<tt class="literal">getDigestLength()</tt> method will not operate
correctly.
</p>
</dd>

</dl>

<p>Each of these methods corresponds to a public method we just looked
at, with the name of the public method preceded by the word
"engine". The public methods that do not have a
corresponding method in this list are fully implemented in the base
class and do not need to be implemented in the message digest
subclass.
</p>

<p>We'll show a simple implementation of a message digest class
here. This implementation is based on a hash algorithm that produces
a 4-byte output. As bytes are accumulated by this algorithm, they are
stored into a 4-byte value (that is, an int); when this value has all
four bytes filled, it is XOR-ed to another integer that accumulates
the hash.
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">package com.xyz;

public class XYZMessageDigest extends MessageDigest
                              implements Cloneable {
	private int hash;
	private int store;
	private int nBytes;

	public XYZMessageDigest() {
		super("XYZ");
		engineReset();
	}

	public void engineUpdate(byte b) {
		switch(nBytes) {
			case 0:
				store =  (b &lt;&lt; 24) &amp; 0xff000000;
				break;
			case 1:
				store |= (b &lt;&lt; 16) &amp; 0x00ff0000;
				break;
			case 2:
				store |= (b &lt;&lt;  8) &amp; 0x0000ff00;
				break;
			case 3:
				store |= (b &lt;&lt;  0) &amp; 0x000000ff;
				break;
		}
		nBytes++;
		if (nBytes == 4) {
			hash = hash ^ store;
			nBytes = 0;
			store = 0;
		}
	}

	public void engineUpdate(byte b[], int offset, int length) {
		for (int i = 0; i &lt; length; i++)
			engineUpdate(b[i + offset]);
	}

	public void engineReset() {
		hash = 0;
		store = 0;
		nBytes = 0;
	}

	public byte[] engineDigest() {
		while (nBytes != 0)
			engineUpdate((byte) 0);
		byte b[] = new byte[4];
		b[0] = (byte) (hash &gt;&gt;&gt; 24);
		b[1] = (byte) (hash &gt;&gt;&gt; 16);
		b[2] = (byte) (hash &gt;&gt;&gt;  8);
		b[3] = (byte) (hash &gt;&gt;&gt;  0);
		engineReset();
		return b;
	}
}</pre>
</blockquote>

<p>The implementation of this class is simple, which isn't
surprising given the fact that the algorithm itself is too simple to
be considered an effective digest algorithm. The major points to
observe are:
</p>

<ul>
<li>
<p>The name of the class (<tt class="literal">XYZMessageDigest</tt>) and the
name of the algorithm that it implements (XYZ) must match one of the
strings in the provider package for this class to be found. Hence, in
our provider class in <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_01.htm">Chapter 8, "Security Providers"</a>, we included this
property:
</p>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">put("MessageDigest.XYZ", "com.xyz.XYZMessageDigest");</pre>
</blockquote>
</li>
<li>
<p>Our constructor calls the only constructor available to us, and the
string "XYZ" that we pass to that constructor takes on
significance--it's the name of the algorithm we've
implemented in this class. This in turn becomes the name that is
registered in the security provider architecture; it must match the
name of the algorithm we registered in our provider.
</p>
</li>
<li>
<p>In order for the <tt class="literal">getDigestLength()</tt> method to
function, we chose to implement the <tt class="literal">Cloneable</tt>
interface instead of overriding the
<tt class="literal">engineGetDigestLength()</tt> method. Since there are
no embedded objects in this class, we do not need to override the
<tt class="literal">clone()</tt> method. The default implementation of
that method (a shallow copy) is sufficient for this class.
</p>
</li>
<li>
<p>The
<tt class="literal">engineUpdate()</tt><a name="INDEX-1114"></a> methods accumulate bytes of data until
an integer has been accumulated, at which point that integer can be
XOR-ed into the saved state held in the <tt class="literal">hash</tt>
instance variable.
</p>
</li>
<li>
<p>The
<tt class="literal">engineDigest()</tt><a name="INDEX-1115"></a> method converts the
<tt class="literal">hash</tt> instance variable into a byte array and
returns that to the programmer. Note that the
<tt class="literal">engineDigest()</tt> method is responsible for
resetting the internal state of the algorithm. In addition, the
<tt class="literal">engineDigest()</tt> method is responsible for padding
the data so that it is a multiple of four bytes (the size of a Java
integer). This type of data padding is a common feature of message
digest calculation.
</p>
</li>
<li>
<p>The <tt class="literal">engineReset()</tt> method initializes the
algorithm to its initial state.
</p>
</li>
</ul>

<p>Once we have an implementation of a message digest, we must install
it into the security provider architecture. If we use the
<tt class="literal">XYZProvider</tt> class from <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_01.htm">Chapter 8, "Security Providers"</a>, we can change our <tt class="literal">Send</tt>
class above to use our new digest algorithm:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class SendXYZ {
	public static void main(String args[]) {
		try {
<b class="emphasis-bold">			Security.addProvider(new XYZProvider());</b>
			FileOutputStream fos = new FileOutputStream("test.xyz");
<b class="emphasis-bold">			MessageDigest md = MessageDigest.getInstance("XYZ");</b>
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			String data = "This have I thought good to deliver thee, "+
				"that thou mightst not lose the dues of rejoicing " +
				"by being ignorant of what greatness is promised thee.";
			byte buf[] = data.getBytes();
			md.update(buf);
			oos.writeObject(data);
			oos.writeObject(md.digest());
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}</pre>
</blockquote>

<p>Similar changes to the <tt class="literal">Receive</tt> class will allow
us to accept the message that we've saved to the file
<em class="filename">test.xyz</em>.<a name="INDEX-1116"></a><a name="INDEX-1117"></a><a name="INDEX-1118"></a><a name="INDEX-1119"></a>
</p>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch09_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">9.2. Message Digest Streams</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">9.4. Summary</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
