<html>
<head>
<title>Identity Scopes (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Identity Scopes">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appb_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appb_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="appb_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appb_01.htm">Appendix B: Identity-Based Key Management</a></td><td align="right" valign="top" width="172"><a href="appb_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appb_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">B.2. Identity Scopes</h2>

<p>
<a name="INDEX-1961"></a><a name="INDEX-1962"></a><a name="INDEX-1963"></a><a name="INDEX-1964"></a><a name="INDEX-1965"></a>The
database that an identity is held in is an identity scope. There can
be multiple identity scopes in a Java program, though typically there
is only a system identity scope. By default, the system identity
scope for all Java programs is read from a file; this file is the
database that <tt class="literal">javakey</tt> operates on. But the
architecture of an identity scope can be more complex than a single
scope.
</p>

<p>As <a href="#SEC-AP-B-FIG-1">Figure B-1</a> shows, multiple identity scopes can
be nested, or they can be disjoint. This is because an identity scope
may itself be scoped--that is, just like an identity can belong
to a particular scope, an identity scope can belong to another scope.
</p>

<a name="SEC-AP-B-FIG-1"></a>
<div class="figure">
<img alt="figure" src="figs/JSEC_AB01.gif" webstripperlinkwas="figs/JSEC_AB01.gif"></div>
<h4 class="objtitle">Figure B-1. Identity scopes</h4>

<p>This architecture is not as useful as it might seem, since the
identity scope class does not give any particular semantics to the
notion of a nested identity scope. If you search the system scope in
the figure for <tt class="literal">sdo</tt>'s identity, you may or
may not find it, depending on how the system identity scope is
implemented. That's because there's no requirement that
an identity scope recursively search its enclosed scopes for any
information. And the default identity scope does not do such a
recursive search.
</p>

<p>This is not to prevent you from writing identity scope classes that
use such semantics--indeed, writing such a scope is the goal of
this appendix.
</p>

<p>The idea of an identity scope, of course, is to hold one or more
unique identities. However, possible implementations of an
<tt class="literal">IdentityScope</tt> class
(<tt class="literal">java.security.IdentityScope</tt>) are conceivably
more complicated than that because of the definition of this class:
</p>

<dl>
<dt>
<b>public abstract class IdentityScope extends Identity <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Implementations of this class are responsible for storing a set of
identities and for performing certain operations on those identities.
</p>
</dd>

</dl>

<p>Hence, an identity scope is also an identity. That means that an
identity scope might have a name and a public key, which gives you
the ability to model an identity database in very different ways.
Conceivably, you might want an identity scope for an organization
that contains all the identities of individuals within that
organization. Rather than having a separate identity for the
organization itself, the organization's identity can be
subsumed by the identity scope. Since the organization itself also
needs a name and a public key, this type of model might offer some
flexibility over the alternative: a model that just has a list of
identities, some of which are individuals and one of which is the
organization.
</p>

<p>However, we'll ignore that possibility for now, and just
explore the identity scope class with a view to its simplest use: as
a holder of one or more identities.
</p>

<a name="SEC-AP-B-SECT-2.1"></a>
<h3 class="sect2">B.2.1. Using the IdentityScope Class</h3>

<p>The <tt class="literal">IdentityScope</tt> class is an abstract class,
and there are no classes in the core JDK that extend the
<tt class="literal">IdentityScope</tt> class. Like other classes in the
security package, instances of it may be retrieved by a static method
(albeit with a different name than we've been led to expect):
</p>

<dl>
<dt>
<b>public static IdentityScope getSystemScope() <a name="INDEX-1966"></a>
<img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Return the default identity scope provided by the virtual machine.
For <tt class="literal">javakey</tt>, this is the identity scope held in
the <em class="filename">identitydb.obj</em> file in the user's home
directory (or an alternate file specified in the
<em class="filename">java.security</em> property file).
</p>
</dd>

</dl>

<p>Once you have retrieved the system's default scope (or any
other identity scope), you can operate on it with the following
methods:
</p>

<dl>
<dt>
<b>public abstract int size() <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"> <a name="INDEX-1967"></a>
</b>
</dt>
<dd>
<p>Return the number of identities that are held in this scope. By
default, this does not include the number of nested identities in
other scopes that are held in this scope.
</p>
</dd>

<dt>
<b>public abstract Identity getIdentity(String name) <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"><a name="INDEX-1968"></a>
</b>
</dt>
<dd>
<p>Return the identity object associated with the corresponding name.</p>
</dd>

<dt>
<b>public abstract Identity getIdentity(Principal principal) <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Using the principal's name, return the identity object
associated with the corresponding principal.
</p>
</dd>

<dt>
<b>public abstract Identity getIdentity(PublicKey key) <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Return the identity object associated with the corresponding public
key.
</p>
</dd>

<dt>
<b>public abstract void addIdentity(Identity identity) <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"><a name="INDEX-1969"></a>
</b>
</dt>
<dd>
<p>Add the given identity to this identity scope. A
<tt class="literal">KeyManagementException</tt> is thrown if the identity
has the same name or public key as another identity in this scope.
</p>
</dd>

<dt>
<b>public abstract void removeIdentity(Identity identity) <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"><a name="INDEX-1970"></a>
</b>
</dt>
<dd>
<p>Remove the given identity from this identity scope. A
<tt class="literal">KeyManagementException</tt> is thrown if the identity
is not present in this scope.
</p>
</dd>

<dt>
<b>public abstract Enumeration identities() <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Return an enumeration of all the identities in this scope.</p>
</dd>

</dl>

<p>For the most part, using these methods is straightforward. For
example, to list all the identities in the default identity database,
we need only find the system identity scope and enumerate it:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class Test {
	public static void main(String args[]) {
		try {
			IdentityScope is = IdentityScope.getSystemScope();
			System.out.println(is);
			Enumeration e = is.identities();
			while (e.hasMoreElements()) {
				Identity id = (Identity) e.nextElement();
				System.out.println(id);
			}
		} catch (Exception ex) {}
	}
}</pre>
</blockquote>

<p>There is one exception to this idea of simplicity, however. An
identity scope is typically persistent--the javakey database is
in a local persistent file, and you could write your own scope that
was saved in a file, a database, or some other storage. However,
you'll notice that there are no methods in the
<tt class="literal">IdentityScope</tt> class that allow you to save the
database for a particular scope. Hence, we could add a new identity
to the system identity scope like this:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">IdentityScope is = IdentityScope.getSystemScope();
Identity me = somehowCreateIdentity("sdo");
try {
	is.addIdentity(me);
} catch (KeyManagementException kme) {}</pre>
</blockquote>

<p>That adds an <tt class="literal">sdo</tt> identity to the system identity
scope for the current execution of the virtual machine, but unless we
can somehow save that scope to the
<em class="filename">identitydb.obj</em><a name="INDEX-1971"></a>
file, the <tt class="literal">sdo</tt> identity will be lost when we exit
the virtual machine. Unfortunately, there are no public methods to
save the identity scope.
</p>

<p>As an aside, we'll note that the
<em class="filename">identitydb.obj</em> file just happens to be the
serialized version of an <tt class="literal">IdentityScope</tt>
object--to save the database, we need only open an
<tt class="literal">ObjectOutputStream</tt> and write the
<tt class="literal">is</tt> instance variable to that output stream.
</p>

<p>There's another point here that we must mention: the
JDK's notion of the system identity scope expects to hold
identity objects that are instances of a particular class that exists
only in the <tt class="literal">sun</tt> package. This means that we
can't actually write a fully correct
<tt class="literal">somehowCreateIdentity()</tt> method--we can
create identities, but they will not be of the exact class that the
system identity scope expects. This can affect some of the operations
of the javakey database, since some of those operations are dependent
on properties of the Sun implementation of an identity that are not
in the generic idea of an identity. When we write our own
identity-based database at the end of this appendix, that will no
longer be a problem (but we won't be able to use the
<tt class="literal">javakey</tt> utility on that database, either).
</p>


<a name="SEC-AP-B-SECT-2.2"></a>
<h3 class="sect2">B.2.2. Writing an Identity Scope</h3>

<p>
<a name="INDEX-1972"></a><a name="INDEX-1973"></a>
We'll now implement our own identity scope, which will be one
of the classes that we'll use at the end of this appendix to
put together an identity-based key management database. We'll
write a generic identity scope that implements the notion that its
identities are held in a file:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class XYZFileScope extends IdentityScope {
	private Hashtable ids;
	private static String fname;

	public XYZFileScope(String fname) throws KeyManagementException {
		super("XYZFileScope");
		this.fname = fname;
		try {
			FileInputStream fis = new FileInputStream(fname);
			ObjectInputStream ois = new ObjectInputStream(fis);
			ids = (Hashtable) ois.readObject();
		} catch (FileNotFoundException fnfe) {
			ids = new Hashtable();
		} catch (Exception e) {
			throw new KeyManagementException(
						"Can't load identity database " + fname);
		}
	}
	
	public int size() {
		return ids.size();
	}

	public Identity getIdentity(String name) {
		Identity id;
		id = (Identity) ids.get(name);
		return id;
	}

	public Identity getIdentity(PublicKey key) {
		if (key == null)
			return null;
		Identity id;
		for (Enumeration e = ids.elements(); e.hasMoreElements(); ) {
			id = (Identity) e.nextElement();
			PublicKey k = id.getPublicKey();
			if (k != null &amp;&amp; k.equals(key))
				return id;
		}
		return null;
	}

	public void addIdentity(Identity identity)
								throws KeyManagementException {
		String name = identity.getName();
		if (getIdentity(name) != null)
			throw new KeyManagementException(
							name + " already in identity scope");

		PublicKey k = identity.getPublicKey();
		if (getIdentity(k) != null)
			throw new KeyManagementException(
							name + " already in identity scope");
		ids.put(name, identity);
	}

	public void removeIdentity(Identity identity)
									throws KeyManagementException {
		String name = identity.getName();
		if (ids.get(name) == null)
			throw new KeyManagementException(
							name + " isn't in the identity scope");
		ids.remove(name);
	}

	public Enumeration identities() {
		return ids.elements();
	}

	public void save() {
		try {
			FileOutputStream fos = new FileOutputStream(fname);
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			oos.writeObject(ids);
		} catch (Exception e) {
			System.out.println(e);
			throw new RuntimeException("Can't save id database");
		}
	}
}</pre>
</blockquote>

<p>Let's delve into the implementation of this class. First, there
are two instance variables. The <tt class="literal">ids</tt> variable
will hold the identities themselves; we've decided to hold the
identities in a hashtable so that we can easily search them based on
a key. That key will be their name, which makes locating identities
in this scope by name very easy (but notice that locating them by
public key is harder). The second variable,
<tt class="literal">fname</tt>, is the name of the file that will hold
the persistent copy of this identity scope.
</p>

<p>There are three constructors in the
<tt class="literal">IdentityScope</tt> class that are available to us:
</p>

<dl>
<dt>
<b>protected IdentityScope() <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Construct an unnamed identity scope. This constructor is not designed
to be used by programmers; it is provided only so that an identity
scope may be subject to object serialization.
</p>
</dd>

<dt>
<b>public IdentityScope(String name) <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dt>
<b>public IdentityScope(String name, IdentityScope scope) <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Construct an identity scope with the given name. If an identity scope
is specified, the new identity scope will be scoped within the
specified scope; otherwise, the new identity scope will have no scope
associated with it (like Private Scope #2 in figure <a href="#SEC-AP-B-FIG-1">Figure B-1</a>). A
<tt class="literal">KeyManagementException</tt> will be thrown if an
identity or identity scope with the desired name already exists in
the given scope.
</p>
</dd>

</dl>

<p>In our case, we've chosen only to provide our identity scope
with a name. After calling the appropriate superclass constructor,
our class opens up the stored version of the identity database and
reads it in. Like the default <tt class="literal">javakey</tt>
implementation, we've chosen the simple expedient of object
serialization to a persistent file to provide our storage. If the
file isn't found, we create an empty identity scope.
</p>

<p>We've provided a simple <tt class="literal">save()</tt> method that
serializes the private database out to the same file that we read it
in from; this method has a package protection so that it will only be
accessible by the code we develop. The remaining methods in our class
are all methods we are required to implement, because they are
methods that are abstract in our superclass. Because we're
storing identities in a hashtable, their implementations are usually
simple:
</p>

<ul>
<li>
<p>The <tt class="literal">size()</tt> method can simply return the size of
the hashtable.
</p>
</li>
<li>
<p>The <tt class="literal">getIdentity(name)</tt> method can simply use the
name as the lookup key into the hashtable.
</p>
</li>
<li>
<p>The <tt class="literal">getIdentity(key)</tt> method is the most complex
method, although only slightly: it merely needs to enumerate the
identities and test each one individually to see if the keys match.
</p>
</li>
<li>
<p>The <tt class="literal">addIdentity()</tt> method can search to make sure
that the name and public key of the new identity are unique and then
simply store the identity into the hashtable with the name as its
key.
</p>
</li>
<li>
<p>The <tt class="literal">removeIdentity()</tt> method can just tell the
hashtable to remove the identity with the appropriate key.
</p>
</li>
<li>
<p>The <tt class="literal">identities()</tt> method can just return the
hashtable enumeration.
</p>
</li>
</ul>

<p>There is one remaining protected method of the
<tt class="literal">IdentityScope</tt> class:
</p>

<dl>
<dt>
<b>protected static void setSystemScope(IdentityScope scope)</b>
</dt>
<dd>
<p>Set the system identity scope to be the given scope.</p>
</dd>

</dl>

<p>We haven't used this method in this example, but it is one that
we'll rely on later when we extend this example. This method
replaces the system identity database. Replacing the system database
makes things easier for developers. When developers need to operate
on identities, they expect to access those identities through the
system database. Now that our class is the system database, we can
return identities whether they exist in the user's private key
database or in the shared public key database.<a name="INDEX-1974"></a><a name="INDEX-1975"></a>
</p>


<a name="SEC-AP-B-SECT-2.3"></a>
<h3 class="sect2">B.2.3. IdentityScope and the Security Manager</h3>

<p>
<a name="INDEX-1976"></a><a name="INDEX-1977"></a><a name="INDEX-1978"></a>Like the <tt class="literal">Identity</tt>
class, the <tt class="literal">IdentityScope</tt> class uses the
<tt class="literal">checkSecurityAccess()</tt><a name="INDEX-1979"></a> method of the security manager to
protect many of its operations from being performed by untrusted
classes. This method is called by the
<tt class="literal">setSystemScope()</tt><a name="INDEX-1980"></a> method (with an argument of
"<tt class="literal">set.system.scope</tt>"); no other
methods of the <tt class="literal">IdentityScope</tt> class call this
method by default.
</p>

<p>However, in the default identity scope implemented in the
<tt class="literal">sun</tt> package, in the following situations, these
methods call the <tt class="literal">checkSecurityAccess()</tt> method
with the given string:
</p>

<ul>
<li>
<p>When the
<tt class="literal">getIdentity()</tt><a name="INDEX-1981"></a> method would return a
signer--that is, an identity that has a private key
("<tt class="literal">get.signer</tt>")
</p>
</li>
<li>
<p>When the
<tt class="literal">addIdentity()</tt><a name="INDEX-1982"></a><a name="INDEX-1983"></a> and <tt class="literal">removeIdentity()</tt>
methods are called ("<tt class="literal">add.identity</tt>"
and "<tt class="literal">remove.identity</tt>", respectively)
</p>
</li>
<li>
<p>When the database is written to a file via object serialization
("<tt class="literal">serialize.identity.database</tt>")
</p>
</li>
</ul>

<p>When we implemented the abstract methods of our
<tt class="literal">IdentityScope</tt> class, we probably should have
made the decision to let the security manager override the ability of
an untrusted (or other) class to perform these operations. Hence, a
better implementation of the <tt class="literal">getIdentity()</tt>
method would be:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public Identity getIdentity(String name) {
	Identity id;
	id = (Identity) ids.get(name);
	if (id instanceof Signer) {
		SecurityManager sec = System.getSecurityManager();
		if (sec != null)
			sec.checkSecurityAccess("get.signer");
	}
	return id;
}</pre>
</blockquote>

<a name="INDEX-1984"></a>
<a name="INDEX-1985"></a>
<a name="INDEX-1986"></a>
<a name="INDEX-1987"></a>
<a name="INDEX-1988"></a>
<a name="INDEX-1989"></a>
<a name="INDEX-1990"></a>
<a name="INDEX-1991"></a>



<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appb_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appb_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="appb_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appb_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">B.1. Identities</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">B.3. Key Management in an Identity Scope</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
