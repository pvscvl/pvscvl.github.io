<html>
<head>
<title>Message Digest Streams (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Message Digest Streams">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_01.htm">Chapter 9: Message Digests</a></td><td align="right" valign="top" width="172"><a href="ch09_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">9.2. Message Digest Streams</h2>

<p>
<a name="INDEX-1088"></a><a name="INDEX-1089"></a>The interface to the message digest
class requires that you supply the data for the digest as a series of
single bytes or byte arrays. As we mentioned earlier, this is not
always the most convenient way to process data, which may be coming
from a file or other input stream. This brings us to the message
digest stream classes. These classes implement the standard input and
output filter stream semantics of Java streams so that data can be
written to a digest stream that will calculate the digest as the data
itself is written (or the reverse operation for reading data).
</p>

<a name="SEC-CH-9-SECT-2.1"></a>
<h3 class="sect2">9.2.1. The DigestOutputStream Class</h3>

<p>
<a name="INDEX-1090"></a><a name="INDEX-1091"></a><a name="INDEX-1092"></a>
The first of these classes we'll examine is the
<tt class="literal">DigestOutputStream</tt> class
(<tt class="literal">java.security.DigestOutputStream)</tt>. This class
allows us to write data to a particular output stream and calculate
the message digest of that data transparently as the data passes
through the stream:
</p>

<dl>
<dt>
<b>public class DigestOutputStream extends FilterOutputStream</b>
</dt>
<dd>
<p>Provide a stream that can calculate the message digest of data that
is passed through the stream. A digest output stream holds two
components internally: the output stream that is the ultimate
destination of the data, and a message digest object that computes
the data of the stream written to the destination.
</p>
</dd>

</dl>

<p>The digest output stream is constructed as follows:</p>

<dl>
<dt>
<b>public DigestOutputStream(OutputStream os, MessageDigest md)</b>
</dt>
<dd>
<p>Construct a digest output stream that associates the given output
stream with the given message digest. Data that is written to the
stream is automatically passed to the <tt class="literal">update()</tt>
method of the message digest.
</p>
</dd>

</dl>

<p>In addition to the standard methods available to all output streams,
a message digest output stream provides the following interface:
</p>

<dl>
<dt>
<b>public MessageDigest getMessageDigest()</b>
</dt>
<dd>
<p>Return the message digest associated with this output stream.</p>
</dd>

<dt>
<b>public void setMessageDigest(MessageDigest md)</b>
</dt>
<dd>
<p>Associate the given message digest with this output stream. The
internal reference to the original message digest is lost, but the
original message digest is otherwise unaffected (i.e., if you still
hold a reference to the original message digest object, you can still
calculate the digest of the data that was written to the stream while
that digest was in place).
</p>
</dd>

<dt>
<b>public void write(int b)</b>
</dt>
<dt>
<b>public void write(byte b[], int off, int len)</b>
</dt>
<dd>
<p>Write the given byte or array of bytes to the underlying output
stream, and also update the internal message digest with the given
data (if the digest stream is marked as on). These methods may throw
an <tt class="literal">IOException</tt> from the underlying stream.
</p>
</dd>

<dt>
<b>public void on(boolean on)<a name="INDEX-1093"></a>
</b>
</dt>
<dd>
<p>Turn the message digest stream on or off. When data is written to a
stream that is off, the data will be passed to the underlying output
stream, but the message digest will not be updated.
</p>
</dd>

</dl>

<p>Note that this last method does not affect the underlying output
stream at all; data is still sent to the underlying stream even if
the digest output stream is marked as off. The on/off state only
affects whether the <tt class="literal">update()</tt> method of the
message digest will be called as the data is written.
</p>

<p>We can use this class to simplify the example we used earlier:</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class SendStream {
	public static void main(String args[]) {
		try {
			FileOutputStream fos = new FileOutputStream("test");
			MessageDigest md = MessageDigest.getInstance("SHA");
<b class="emphasis-bold">			DigestOutputStream dos = new DigestOutputStream(fos, md);</b>
<b class="emphasis-bold">			ObjectOutputStream oos = new ObjectOutputStream(dos);</b>
			String data = "This have I thought good to deliver thee, "+
				"that thou mightst not lose the dues of rejoicing " +
				"by being ignorant of what greatness is promised thee.";
			oos.writeObject(data);
<b class="emphasis-bold">			dos.on(false);</b>
			oos.writeObject(md.digest());
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}</pre>
</blockquote>

<p>The big change is in constructing the object output stream--we
now want to wrap it around the digest output stream so that as each
object is written to the file, the message digest will include those
bytes. We also want to make sure that we turn off the message digest
calculation before we send the digest itself to the file. Turning off
the digest isn't strictly necessary in this case, since we
don't use the digest object once we've calculated a
single digest in this example, but it's good practice to keep
the digest on only when strictly required.
</p>

<p>Note that there is a subtle difference between the digest produced in
this example and the previous example. In the first example, the
digest was calculated over just the bytes of the string that we saved
to the file. In the second example, the digest was calculated over
the serialized string object itself--which includes some
information regarding the class definition in addition to the bytes
of the string.<a name="INDEX-1094"></a><a name="INDEX-1095"></a><a name="INDEX-1096"></a>
</p>


<a name="SEC-CH-9-SECT-2.2"></a>
<h3 class="sect2">9.2.2. The DigestInputStream Class</h3>

<p>
<a name="INDEX-1097"></a><a name="INDEX-1098"></a><a name="INDEX-1099"></a>The symmetric operation to the digest
output stream is the <tt class="literal">DigestInputStream</tt> class
(<tt class="literal">java.security.DigestInputStream</tt>):
</p>

<dl>
<dt>
<b>public class DigestInputStream extends FilterInputStream</b>
</dt>
<dd>
<p>Create an input stream that is associated with a message digest. When
data is read from the input stream, it is also sent to the
<tt class="literal">update()</tt> method of the stream's associated
message digest.
</p>
</dd>

</dl>

<p>The digest input stream has essentially the same interface as the
digest output stream (with writing replaced by reading). There is a
single constructor for the class:
</p>

<dl>
<dt>
<b>public DigestInputStream(InputStream is, MessageDigest md)</b>
</dt>
<dd>
<p>Construct a digest input stream that associates the given input
stream with the given message digest. Data that is read from the
stream will also automatically be passed to the
<tt class="literal">update()</tt> method of the message digest.
</p>
</dd>

</dl>

<p>The interface provided by the digest input stream is symmetric to the
digest output stream:
</p>

<dl>
<dt>
<b>public MessageDigest getMessageDigest()</b>
</dt>
<dd>
<p>Return the message digest that is associated with this output stream.</p>
</dd>

<dt>
<b>public void setMessageDigest(MessageDigest md)</b>
</dt>
<dd>
<p>Associate the given message digest with this output stream. The
internal reference to the original message digest is lost, but the
original message digest is otherwise unaffected (e.g., you can still
calculate the digest of the data that had been written to the stream
while that digest was in place).
</p>
</dd>

<dt>
<b>public void read(int b)</b>
</dt>
<dt>
<b>public void read(byte b[], int off, int len)</b>
</dt>
<dd>
<p>Read one or more bytes from the underlying output stream, and also
update the internal message digest with the given data (if the digest
stream is marked as on). These methods may throw an
<tt class="literal">IOException</tt> from the underlying stream.
</p>
</dd>

<dt>
<b>public void on(boolean on)<a name="INDEX-1100"></a>
</b>
</dt>
<dd>
<p>Turn the message digest stream on or off. When data is read from a
stream that is off, the message digest will not be updated.
</p>
</dd>

</dl>

<p>Here's how we can use this class to read the file we created
with the digest output stream:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class ReceiveStream {
	public static void main(String args[]) {
		try {
			FileInputStream fis = new FileInputStream("test");
			MessageDigest md = MessageDigest.getInstance("SHA");
			<b class="emphasis-bold">DigestInputStream dis = new DigestInputStream(fis, md);</b>
<b class="emphasis-bold">			ObjectInputStream ois = new ObjectInputStream(dis);</b>
			Object o = ois.readObject();
			if (!(o instanceof String)) {
				System.out.println("Unexpected data in file");
				System.exit(-1);
			}
			String data = (String) o;
			System.out.println("Got message " + data);
<b class="emphasis-bold">			dis.on(false);</b>
			o = ois.readObject();
			if (!(o instanceof byte[])) {
				System.out.println("Unexpected data in file");
				System.exit(-1);
			}
			byte origDigest[] = (byte []) o;
			if (MessageDigest.isEqual(md.digest(), origDigest))
				System.out.println("Message is valid");
			else System.out.println("Message was corrupted");
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}</pre>
</blockquote>

<p>Once again, constructing the input stream is a matter of providing a
message digest. In this example, we've again turned off the
digest input stream after reading the string object in the file.
Turning off the stream is strictly required in this case. We want to
make sure that the digest we calculate is computed only over the
string object and not the stored byte array (that is, the stored
message <a name="INDEX-1101"></a><a name="INDEX-1102"></a><a name="INDEX-1103"></a>
digest).<a name="INDEX-1104"></a><a name="INDEX-1105"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch09_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_01.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch09_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch09_03.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">9.1. Using the Message Digest Class</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">9.3. Implementing a MessageDigest Class</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
