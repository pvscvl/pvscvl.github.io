<html>
<head>
<title>The Security Class (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="The Security Class">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_01.htm">Chapter 8: Security Providers</a></td><td align="right" valign="top" width="172"><a href="ch08_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2 class="sect1">8.3. The Security Class</h2>

<p>The <tt class="literal">Security</tt><a name="INDEX-1038"></a><a name="INDEX-1039"></a> class
(<tt class="literal">java.security.Security</tt>) is responsible for
managing the set of provider classes that a Java program can use, and
forms the last link in the architecture of the security provider.
This class is <tt class="literal">fina</tt>l, and all its methods are
<tt class="literal">static</tt> (except for its constructor, which is
<tt class="literal">private</tt>). Like the <tt class="literal">System</tt>
and <tt class="literal">Math</tt> classes, then, the
<tt class="literal">Security</tt> class can never be created or
subclassed; it exists simply to provide a placeholder for methods
that deal with the <tt class="literal">java.security</tt> package.
</p>

<p>Earlier, we explained how to add entries to the
<em class="filename">java.security</em> file to add new providers to the
security architecture. The same feat can be accomplished
programmatically via these methods of the
<tt class="literal">Security</tt> class:
</p>

<dl>
<dt>
<b>public static int addProvider(Provider provider)<a name="INDEX-1040"></a>
<a name="INDEX-1041"></a>
<a name="INDEX-1042"></a>
</b>
</dt>
<dd>
<p>Add a new provider into the list of providers. The provider is added
to the end of the internal array of providers.
</p>
</dd>

<dt>
<b>public static int insertProviderAt(Provider provider, int position)</b>
</dt>
<dd>
<p>Add a new provider into the internal array of providers. The provider
is added at the specified position; other providers have their index
changed if necessary to make room for this provider. Position
counting begins at 1.
</p>
</dd>

</dl>

<p>The notion that these classes are kept in an indexed array is
important; when the <tt class="literal">Security</tt> class is asked to
provide a particular algorithm for an operation, the array is
searched sequentially for a provider that can provide the requested
algorithm for the requested operation.
</p>

<p>As an example, let's use a modification of the
<tt class="literal">XYZProvider</tt> class that we outlined earlier. This
class comes with a set of classes to perform generation of key pairs,
and it can generate key pairs according to two algorithms: DSA and
XYZ. The <tt class="literal">XYZProvider</tt> class, according to an
entry added to the <em class="filename">java.security</em> file, has been
added at position 2. Additionally, let's say that our Java
program has installed an additional provider class at position 3
called the <tt class="literal">FooProvider</tt> that can generate key
pairs and digital signatures according to a single algorithm known as
<tt class="literal">Foo</tt>. This leaves us with the set of provider
classes listed in <a href="#SEC-CH-8-TABLE-8">Table 8-3</a>.
</p>

<a name="SEC-CH-8-TABLE-8"></a>
<h4 class="objtitle">Table 8-3. Sample Security Providers</h4>
<table border="1">




<tr>
<th>
<p>Sun Provider</p>
</th>
<th>
<p>XYZ Provider</p>
</th>
<th>
<p>Foo Provider</p>
</th>
</tr>

<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">Signature Engines
    DSA</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">Signature Engines
    XYZ
    DSA</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">Signature Engines
    Foo</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">Message Digest Engines
    MD5</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">Message Digest Engines
    XYZ
    SHA</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">Message Digest Engines
    None</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">Key Pair Engines
    DSA</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">Key Pair Engines
    XYZ
    DSA</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">Key Pair Engines
    Foo</pre>
</blockquote>
</td>
</tr>

</table>

<p>Now when our Java program needs to generate a key pair, the security
provider is consulted as to which classes will implement the key pair
generation we want. If we need to generate a DSA key, the security
provider returns to us a class associated with the Sun provider
class, since the Sun provider, at position 1, is the first class that
says that it can perform DSA key generation. If we had reversed the
order of indices in the <em class="filename">java.security</em> file so
that the Sun provider was at position 2 and the XYZ provider was at
position 1, a class associated with the XYZ provider would have been
returned instead. Similarly, when we request a
<tt class="literal">Foo</tt> key pair, a class associated with the
<tt class="literal">Foo</tt> provider is returned to us, regardless of
what index it occurs at, since that is the only provider class that
knows how to perform <tt class="literal">Foo</tt> key generation.
</p>

<p>Remember that this is a two-step process. The security class receives
a string (like <tt class="literal">KeyPairGenerator.DSA</tt>) and locates
a class that provides that service (such as
<tt class="literal">sun.security.provider.Sun</tt>). The
<tt class="literal">Sun</tt> class, as a provider class, does not
actually know how to generate keys (or do anything else)--it
only knows what classes in the Sun security package know how to
generate keys. Then the security class must ask the provider itself
for the name of the class that actually implements the desired
operation. That process is handled by an internal method of the
<tt class="literal">Security</tt> class--we'll use that method
implicitly over the next few chapters when we retrieve objects that
implement a particular engine and algorithm. Before we do that,
though, we'll finish looking at the interface of the
<tt class="literal">Security</tt> class.
</p>

<p>There are a number of other methods in the
<tt class="literal">Security</tt> class that provide basic information
about the configuration of the security provider.
</p>

<dl>
<dt>
<b>public static void removeProvider(String name)</b>
</dt>
<dd>
<p>Remove the named provider from the list of provider classes. The
remaining providers move up in the array of providers if necessary.
If the named provider is not in the list, this method silently
returns (i.e., no exception is thrown).
</p>
</dd>

<dt>
<b>public static Provider[] getProviders()<a name="INDEX-1043"></a>
<a name="INDEX-1044"></a>
</b>
</dt>
<dd>
<p>Return a copy of the array of providers on which the
<tt class="literal">Security</tt> class operates. Note that this is a
copy of the array; reordering its elements has no effect on the
<tt class="literal">Security</tt> class.
</p>
</dd>

<dt>
<b>public static Provider getProvider(String name)</b>
</dt>
<dd>
<p>Return the provider with the given name. If the named provider is not
in the list held by the <tt class="literal">Security</tt> class, this
method returns <tt class="literal">null</tt>.
</p>
</dd>

<dt>
<b>public static String getProperty(String key)</b>
</dt>
<dd>
<p>Get the property of the <tt class="literal">Security</tt> class with the
associated key. The properties held in the
<tt class="literal">Security</tt> class are the properties that were read
from the <em class="filename">java.security</em> file. In typical usage,
one of the properties is <tt class="literal">security.provider.1</tt> (as
well as any other providers listed in the
<em class="filename">java.security</em> file). Note, however, that
properties of this sort may not reflect the actual order of the
provider classes: when the <tt class="literal">addProvider()</tt>,
<tt class="literal">insertProviderAt()</tt>, and
<tt class="literal">removeProvider()</tt> methods are called, the order
of the providers changes. These changes are not reflected in the
internal property list.
</p>

<p>The <em class="filename">java.security</em> file has a number of other
properties within it; these other properties may also be retrieved
via this method.
</p>
</dd>

<dt>
<b>public static String setProperty(String key)</b>
</dt>
<dd>
<p>Set the property of the security class with the associated key.</p>
</dd>

<dt>
<b>public static String getAlgorithmProperty(String algName, String propName)<img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Search all the providers for a property in the form
<tt class="literal">Alg.propName.algName</tt> and return the first match
it finds. For example, if a provider had set the
<tt class="literal">Alg.NativeImplementation.XYZ</tt> property to the
string "false," a call to
<tt class="literal">getAlgorithmName("XYZ",</tt><tt class="literal">"NativeImplementation")</tt> returns the string
"false" (which is why earlier we used a string value in
the provider class).
</p>
</dd>

</dl>

<p>Here's a simple example, then, of how to see a list of all the
<a name="INDEX-1045"></a><a name="INDEX-1046"></a>security providers in a
particular virtual machine:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class ExamineSecurity {
	public static void main(String args[]) {
		try {
			Provider p[] = Security.getProviders();
			for (int i = 0; i &lt; p.length; i++) {
				System.out.println(p[i]);
				for (Enumeration e = p[i].keys(); e.hasMoreElements();)
					System.out.println("\t" + e.nextElement());
			}
		}
		catch (Exception e) {
			System.out.println(e);
		}
	}
}</pre>
</blockquote>

<p>If we run this program with the 1.2 Sun security provider, we get
this output:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">SUN version 1.2
        Alg.Alias.MessageDigest.SHA
        Alg.Alias.Signature.SHAwithDSA
        Alg.Alias.Signature.1.3.14.3.2.13
        Alg.Alias.Signature.OID.1.2.840.10040.4.3
        Alg.Alias.Signature.SHA-1/DSA
        Alg.Alias.Signature.DSS
        Alg.Alias.Signature.SHA1withDSA
        Alg.Alias.Signature.OID.1.3.14.3.2.13
        AlgorithmParameters.DSA
        KeyFactory.DSA
        Alg.Alias.Signature.1.2.840.10040.4.3
        Alg.Alias.MessageDigest.SHA1
        AlgorithmParameterGenerator.DSA
        Alg.Alias.AlgorithmParameters.1.2.840.10040.4.1
        MessageDigest.MD5
        Alg.Alias.KeyPairGenerator.OID.1.2.840.10040.4.1
        MessageDigest.SHA-1
        Alg.Alias.KeyPairGenerator.OID.1.3.14.3.2.12
        Signature.DSA
        Alg.Alias.KeyPairGenerator.1.3.14.3.2.12
        Alg.Alias.KeyPairGenerator.1.2.840.10040.4.1
        Alg.Alias.Signature.1.3.14.3.2.27
        Alg.Alias.Signature.SHA/DSA
        KeyPairGenerator.DSA
        Alg.Alias.Signature.SHA1/DSA
        Alg.Alias.Signature.OID.1.3.14.3.2.27
        Alg.Alias.AlgorithmParameters.1.3.14.3.2.12
		KeyStore.JKS
		CertificateFactory.X509
		Alg.Alias.CertificateFactory.X.509
		SecureRandom.SHA1PRNG</pre>
</blockquote>

<p>Two things are readily apparent from this example. First, the strings
that contain only an engine name and an algorithm implement the
expected operations that we listed in <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_01.htm">Table 8-1</a>. Second, as we
mentioned in the section on the <tt class="literal">Provider</tt> class,
security providers often leverage the fact that the
<tt class="literal">Provider</tt> class is a subclass of the
<tt class="literal">Properties</tt> class to provide properties that may
make sense only to other classes that are part of the provider
package. Hence, the signature algorithm
<tt class="literal">1.3.14.3.2.13</tt> may make sense to one of the
classes in the Sun security provider, but it is not a string that
will necessarily make sense to other developers. In fact, those
aliases--including the ones that are prefaced by OID--do
have meanings within the cryptography standards world, but for our
purposes we'll stick with the standard algorithm names that we
listed earlier.
</p>

<a name="SEC-CH-8-SECT-3.1"></a>
<h3 class="sect2">8.3.1. The Security Class and the Security Manager</h3>

<p>All the public methods of the <tt class="literal">Security</tt> class
call the <tt class="literal">checkSecurityAccess()</tt><a name="INDEX-1047"></a><a name="INDEX-1048"></a><a name="INDEX-1049"></a> method of the security manager. This
gives the security manager the opportunity to intervene before an
untrusted class affects the security policy of the virtual machine.
</p>

<p>Recall that the <tt class="literal">checkSecurityAccess()</tt> method
accepts a single string parameter. In the case of the methods in the
<tt class="literal">Security</tt> class, the call that is made looks like
this:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public static Provider getProvider(String name) {
	SecurityManager sec = System.getSecurityManager();
	if (sec != null)
		sec.checkSecurityAccess("java");
	... continue to find the provider ...
}</pre>
</blockquote>

<p>The string parameter that is sent to the
<tt class="literal">checkSecurityAccess()</tt> method has changed between
releases of Java; the various methods and the strings they pass to
the security manager are listed in <a href="#SEC-CH-8-TABLE-10">Table 8-4</a>.
</p>

<a name="SEC-CH-8-TABLE-10"></a>
<h4 class="objtitle">Table 8-4. Security Checks of the Security Class</h4>
<table border="1">




<tr>
<th>
<p>Method</p>
</th>
<th>
<p>1.2 Parameter</p>
</th>
<th>
<p>1.1 Parameter</p>
</th>
</tr>

<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">insertProviderAt()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">insertProvider. + provider.getName()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">java</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">removeProvider()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">removeProvider. + provider.getName()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">java</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">getProviders()</pre>
</blockquote>
</td>
<td>
<p>-- not called --</p>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">java</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">getProvider()</pre>
</blockquote>
</td>
<td>
<p>-- not called --</p>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">java</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">getProperty()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">getProperty. + key</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">java</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">setProperty()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">setProperty. + key</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">java</pre>
</blockquote>
</td>
</tr>

</table>

<p>In typical usage in 1.1, the security manager ignores this string
altogether and simply allows all trusted classes to call these
methods and prevents all untrusted classes from calling these
methods. In 1.2, the security manager constructs a security
permission for the given name and calls the access controller to see
if the given permission has been <a name="INDEX-1050"></a><a name="INDEX-1051"></a><a name="INDEX-1052"></a>
granted.<a name="INDEX-1053"></a><a name="INDEX-1054"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch08_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch08_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch08_04.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">8.2. The Provider Class</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">8.4. The Architecture of Engine Classes</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
