<html>
<head>
<title>Identity-Based Key Management (Java Security)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="Scott Oaks">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-403-7E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Identity-Based Key Management">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm" alt="Java Security"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appa_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appa_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm">Java Security</a></td><td align="right" valign="top" width="172"><a href="appb_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appb_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->

<h1 class="chapter">Appendix B.  Identity-Based Key Management</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="appb_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appb_01.htm">Identities</a>
<br>
<a href="appb_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appb_02.htm">Identity Scopes</a>
<br>
<a href="appb_03.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appb_03.htm">Key Management in an Identity Scope</a>
<br>
<a href="appb_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appb_04.htm">Summary</a>
<br>
</p>
</div>


<p>In Java 1.1, the primary tool that was used for key management was
<tt class="literal">javakey</tt>, which is based heavily on the
<tt class="literal">Identity</tt> and <tt class="literal">IdentityScope</tt>
classes. The keytool utility that comes with 1.2<a href="#FOOTNOTE-1">[1]</a> is a better way to implement key
management, and the <tt class="literal">KeyStore</tt> class on
which<tt class="literal"> keytool</tt> is based is definitely more
flexible than the classes on which <tt class="literal">javakey</tt> is
based. In addition, the javakey database uses some classes and
interfaces that have been deprecated in 1.2--primarily the
<tt class="literal">java.security.Certificate</tt> interface.
</p>
<blockquote class="footnote"> <a name="FOOTNOTE-1"></a>
<p>[1]1.2
is now Java 2.</p> </blockquote>

<p>
<a name="INDEX-1912"></a>
Nonetheless, for developers who are still using 1.1, a key management
system based upon the <tt class="literal">Identity</tt> and
<tt class="literal">IdentityScope</tt> classes is the only possible
solution. In this appendix, we'll show how these classes can be
used for key management. All of the techniques we'll discuss in
this appendix have a complementary technique in key management with
the <tt class="literal">KeyStore</tt> class. In addition, the
<tt class="literal">Identity</tt> and <tt class="literal">IdentityScope</tt>
classes have been deprecated in 1.2, so you should really move to the
keystore implementation as soon as possible.
</p>



<h2 class="sect1">B.1. Identities</h2>

<p>
<a name="INDEX-1913"></a><a name="INDEX-1914"></a>
You probably noticed in <a href="ch10_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/ch10_01.htm">Chapter 10, "Keys and Certificates"</a> that none of the
key classes had any notion of whom the key belonged to. Keys are
really just an arbitrary-appearing series of bytes. The set of
classes we'll examine now deal with the notion of identity: the
entity to which a key belongs. An identity can represent an
individual or a corporation (or anything else that can possess a
public or a private key).
</p>

<a name="SEC-AP-B-SECT-1.1"></a>
<h3 class="sect2">B.1.1. The Identity Class</h3>

<p>
<a name="INDEX-1915"></a><a name="INDEX-1916"></a><a name="INDEX-1917"></a><a name="INDEX-1918"></a>
First we'll look at the primary class used to encapsulate an
entity that has a public key, the <tt class="literal">Identity</tt> class
(<tt class="literal">java.security.Identity</tt>):
</p>

<dl>
<dt>
<b>public abstract class Identity implements Principal, Serializable <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Implement an identity--an entity that has a public key. In 1.1,
this class is abstract.
</p>
</dd>

</dl>

<p>An identity object holds only a public key; private keys are held in
a different type of object (the signer object, which we'll look
at a little later). Hence, identity objects represent the entities in
the world who have sent you their public keys in order for you to
verify their identity.
</p>

<p>An identity contains five pieces of information:</p>

<ul>
<li>
<p>A name--the name of the identity; this satisfies the
<tt class="literal">Principal</tt> interface that the identity
implements.
</p>
</li>
<li>
<p>A public key.</p>
</li>
<li>
<p>An optional information string describing the identity.</p>
</li>
<li>
<p>An optional identity scope. Identities can be aggregated into a
collection, which is called an identity scope.
</p>
</li>
<li>
<p>A list of certificates that vouch for the identity.</p>
</li>
</ul>

<p>Note that the default implementation of an identity object carries
with it no notion of trustworthiness. You're free to add that
feature to your own identity class.
</p>

<a name="SEC-AP-B-SECT-1.1.1"></a>
<h3 class="sect3">B.1.1.1. Using the identity class</h3>

<p>If you want to use an identity object, you have the following methods
at your disposal:
</p>

<dl>
<dt>
<b>public final String getName() <a name="INDEX-1919"></a>
<img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Return the name of the identity.</p>
</dd>

<dt>
<b>public final IdentityScope getScope() <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"><a name="INDEX-1920"></a>
</b>
</dt>
<dd>
<p>Return the identity scope to which the identity belongs.</p>
</dd>

<dt>
<b>public PublicKey getPublicKey() <a name="INDEX-1921"></a>
<img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Return the public key associated with the identity.</p>
</dd>

<dt>
<b>public void setPublicKey(PublicKey key) throws KeyManagementException <a name="INDEX-1922"></a>
<img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Set the public key associated with the identity to the given public
key. This replaces any previous public key as well as any previous
certificates associated with this identity. If the public key is
already associated with another identity in the identity scope to
which this identity belongs, a
<tt class="literal">KeyManagementException</tt> is thrown. The
implementation of this method in the base class does not actually
check the identity scope to see if the key already exists in another
identity; it's up to the concrete subclass to provide this
functionality.
</p>
</dd>

<dt>
<b>public String getInfo() <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Return the information string associated with the identity.</p>
</dd>

<dt>
<b>public void setInfo(String info) <a name="INDEX-1923"></a>
<img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Set the information string in the identity, replacing any existing
information string.
</p>
</dd>

<dt>
<b>public void addCertificate(java.security.Certificate certificate) <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"><a name="INDEX-1924"></a>
</b>
</dt>
<dd>
<p>Add the given certificate to the list of certificates in the
identity. If the identity has a public key and that public key does
not match the public key in the certificate, a
<tt class="literal">KeyManagementException</tt> is thrown. If the
identity does not have a public key, the public key in the
certificate becomes the public key for the identity. Like the
<tt class="literal">setPublicKey()</tt> method, this should generate a
<tt class="literal">KeyManagementException</tt> if this conflicts with
another key in the identity scope, but the implementation in the base
class doesn't automatically provide that.
</p>
</dd>

<dt>
<b>public void removeCertificate(java.security.Certificate certificate) <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"><a name="INDEX-1925"></a>
</b>
</dt>
<dd>
<p>Remove the given certificate from the list of certificates in the
identity. If the given certificate isn't in the
identity's list of certificates, no exception is thrown.
</p>
</dd>

<dt>
<b>public java.security.Certificate[] certificates() <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"><a name="INDEX-1926"></a>
<a name="INDEX-1927"></a>
</b>
</dt>
<dd>
<p>Return a copy of the array of certificates held in the identity. The
array itself is a copy of what is held by the object, but the
certificate objects themselves are not.
</p>
</dd>

<dt>
<b>public final boolean equals(Object id) <a name="INDEX-1928"></a>
<img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Test if the given identity is equal to the current object. Identities
are considered equal if they are in the same scope and have the same
name. Otherwise, they are considered equal if the
<tt class="literal">identityEquals()</tt> method returns
<tt class="literal">true</tt>. By default, identities in different scopes
are considered equal by the <tt class="literal">identityEquals()</tt>
method if they have the same name and the same public key.
</p>
</dd>

</dl>

<p>There are two ways to obtain an identity object--via the
<tt class="literal">getIdentity()</tt> method of the
<tt class="literal">IdentityScope</tt> class or by implementing and
constructing an instance of your own subclass of the
<tt class="literal">Identity</tt> class.
</p>



<a name="SEC-AP-B-SECT-1.1.2"></a>
<h3 class="sect3">B.1.1.2. Implementing an Identity class</h3>

<p>An application that wants to work with identities will typically
provide its own identity class. A typical implementation of the
<tt class="literal">Identity</tt> class is trivial:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class XYZIdentity extends Identity {
	public XYZIdentity(String name)	throws KeyManagementException {
		super(name);
	}
}</pre>
</blockquote>

<p>Because all of the methods in the <tt class="literal">Identity</tt> class
are fully implemented, our class need only construct itself. Here are
the constructors in the <tt class="literal">Identity</tt> class that we
have the option of calling:
</p>

<dl>
<dt>
<b>protected Identity() <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Construct an unnamed identity. This constructor is not designed to be
used directly; it is provided for use by object serialization only.
</p>
</dd>

<dt>
<b>public Identity(String name) <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Construct an identity object that does not belong to an identity
scope.
</p>
</dd>

<dt>
<b>public Identity(String name, IdentityScope scope) throws KeyManagementException <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Construct an identity object that belongs to the given scope. A
<tt class="literal">KeyManagementException</tt> is thrown if the given
name already exists in the identity scope.
</p>
</dd>

</dl>

<p>We've chosen in this example only to implement the second of
these constructors.
</p>

<p>Other than the constructor, we are not required to implement any
methods in our class. If you are implementing an identity within an
identity scope, there are methods that you'll need to override
in order to get the expected semantics.
</p>

<p>Our identity class has one other option available to it, and that is
the ability to determine when two identities will compare as equal
(via the <tt class="literal">equals()</tt> method). The
<tt class="literal">equals()</tt><a name="INDEX-1929"></a> method itself is
<tt class="literal">final</tt>, and it will claim that two identities are
equal if they exist in the same scope and have the same name. If
either of those tests fails, however, the
<tt class="literal">equals()</tt> method relies on the following method
to check for equality:
</p>

<dl>
<dt>
<b>protected boolean identityEquals(Identity id)<a name="INDEX-1930"></a>
</b>
</dt>
<dd>
<p>Test for equality between the given identity and this identity. The
default behavior for this method is to return
<tt class="literal">true</tt> if the identities have the same name and
the same key.
</p>
</dd>

</dl>

<p>If your identity class has other information, you may want to
override this method to take that other information into account.
</p>



<a name="SEC-AP-B-SECT-1.1.3"></a>
<h3 class="sect3">B.1.1.3. The Identity class and the security manager</h3>

<p>
<a name="INDEX-1931"></a><a name="INDEX-1932"></a>The identity class uses the
<tt class="literal">checkSecurityAccess()</tt><a name="INDEX-1933"></a>
method of the security manager to prevent many of its operations from
being performed by untrusted classes. <a href="#SEC-AP-B-TABLE-4">Table B-1</a>
lists the methods of the <tt class="literal">Identity</tt> class that
make this check and the argument they pass to the
<tt class="literal">checkSecurityAccess()</tt> method.
</p>

<a name="SEC-AP-B-TABLE-4"></a>
<h4 class="objtitle">Table B-1. Methods in the Identity Class that Call the Security Manager</h4>
<table border="1">



<tr>
<th>
<p>Method</p>
</th>
<th>
<p>Argument </p>
</th>
</tr>

<tr>
<td>
<a name="INDEX-1934"></a>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">setPublicKey()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">set.public.key</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<a name="INDEX-1935"></a>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">setInfo()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">set.info</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<a name="INDEX-1936"></a>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">addCertificate()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">add.certificate</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<a name="INDEX-1937"></a>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">removeCertificate()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">remove.certificate</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<a name="INDEX-1938"></a>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">toString()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">print</pre>
</blockquote>
</td>
</tr>

</table>


<p>The argument to the <tt class="literal">checkSecurityAccess()</tt> method
is constructed from four pieces of information: the name of the class
that is providing the implementation of the identity class, the
string listed in the table above, the name of the particular identity
in question (that is, the string returned by the
<tt class="literal">getName()</tt> method), and the name of the class
that implements the identity scope to which the identity belongs (if
any).
</p>

<p>In common implementations of the security manager, this string is
ignored and trusted classes are typically able to work with
identities, while untrusted classes are not.<a name="INDEX-1939"></a><a name="INDEX-1940"></a><a name="INDEX-1941"></a><a name="INDEX-1942"></a>
</p>



<a name="SEC-AP-B-SECT-1.2"></a>
<h3 class="sect2">B.1.2. Signers</h3>

<p>
<a name="INDEX-1943"></a><a name="INDEX-1944"></a><a name="INDEX-1945"></a><a name="INDEX-1946"></a><a name="INDEX-1947"></a>An identity
has a public key, which can be used to verify the digital signature
of something signed by the identity. In order to create a digital
signature, we need a private key. An identity that carries with it a
private key is modeled by the <tt class="literal">Signer</tt> class
(<tt class="literal">java.security.Signer</tt>):
</p>

<dl>
<dt>
<b>public abstract class Signer extends Identity <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>A class to model an entity that has both a public key and a private
key. Since this is a subclass of the <tt class="literal">Identity</tt>
class, the public key comes from the implementation of that class,
and a signer class needs only to be concerned with the private key.
</p>
</dd>

</dl>

<p>The <tt class="literal">Signer</tt> class is fully implemented even
though it is declared as abstract; an implementation of the
<tt class="literal">Signer</tt> class need not implement any methods.
</p>

<a name="SEC-AP-B-SECT-1.2.1"></a>
<h3 class="sect3">B.1.2.1. Using the Signer class</h3>

<p>A signer is used just like an identity, with these additional methods:</p>

<dl>
<dt>
<b>public PrivateKey getPrivateKey()<a name="INDEX-1948"></a>
 <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Return the private key of the signer.</p>
</dd>

<dt>
<b>public final void setKeyPair(KeyPair pair)<a name="INDEX-1949"></a>
 <img alt="figure" src="gifs/wstar.gif" webstripperlinkwas="gifs/wstar.gif"></b>
</dt>
<dd>
<p>Set both the public and private key of the signer. Since public and
private keys must match in order to be used, this class requires that
in order to set the private key, the public key must be set at the
same time. If only one key is present in the key pair, an
<tt class="literal">InvalidParameterException</tt> is thrown. The act of
setting the public key might generate a
<tt class="literal">KeyManagementException</tt> (a subclass of
<tt class="literal">KeyException</tt>, which this method throws).
</p>
</dd>

</dl>

<p>Except for these two operations, a signer is identical to an identity.</p>



<a name="SEC-AP-B-SECT-1.2.2"></a>
<h3 class="sect3">B.1.2.2. Implementing a signer</h3>

<p>Signers are trivial to implement, given that none of their methods
are abstract. Hence, it is simply a matter of calling the appropriate
constructor:
</p>

<h3>Class Definition</h3><blockquote>
<pre class="programlisting">public class XYZSigner extends Signer {
	public XYZSigner(String name) throws KeyManagementException {
		super(name);
	}
}</pre>
</blockquote>

<p>Note an unfortunate problem here: if you've added additional
logic to your identity subclass, your signer subclass cannot use that
logic. Your own signer subclass must extend Java's
<tt class="literal">Signer</tt> class, not your own identity subclass.
</p>



<a name="SEC-AP-B-SECT-1.2.3"></a>
<h3 class="sect3">B.1.2.3. Signers and the security manager</h3>

<p>In addition to the <a name="INDEX-1950"></a>
security checks that will be made as part of the methods of the
<tt class="literal">Identity</tt> class, the signer class calls the
<tt class="literal">checkSecurityAccess()</tt><a name="INDEX-1951"></a>
method of the security manager in the following cases with the
strings in <a href="#SEC-AP-B-TABLE-6">Table B-2</a>.
</p>

<a name="SEC-AP-B-TABLE-6"></a>
<h4 class="objtitle">Table B-2. Methods of the Signer Class That Call the Security Manager</h4>
<table border="1">



<tr>
<th>
<p>Method</p>
</th>
<th>
<p>Parameter </p>
</th>
</tr>

<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">getPrivateKey()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">get.private.key</pre>
</blockquote>
</td>
</tr>
<tr>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">setKeyPair()</pre>
</blockquote>
</td>
<td>
<h3>Class Definition</h3><blockquote>
<pre class="programlisting">set.private.keypair</pre>
</blockquote>
</td>
</tr>

</table>
<a name="INDEX-1952"></a>
<a name="INDEX-1953"></a>

<p>As with the <tt class="literal">Identity</tt> class, the actual string
passed to the security manager is preceded with the name of the
class, and the name of the identity is appended to the class along
with the name of the identity's <a name="INDEX-1954"></a><a name="INDEX-1955"></a><a name="INDEX-1956"></a><a name="INDEX-1957"></a><a name="INDEX-1958"></a> scope.<a name="INDEX-1959"></a><a name="INDEX-1960"></a>
</p>












<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="appa_04.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appa_04.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="appb_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/appb_02.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">A.4. Files to Administer by Hand</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">B.2. Identity Scopes</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="../jnut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
