<html>
<head>
<title>Methods (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Methods">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_01.htm">Chapter 2: Java Syntax

from the Ground Up</a></td><td align="right" valign="top" width="172"><a href="ch02_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_08.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">2.7. Methods</h2>
<p>
<a name="INDEX-356"></a>

      A <em class="emphasis">method</em> is 
      a named collection of Java statements that can be
      invoked by other Java code. When a method
      is invoked, it is passed zero or more values known as arguments. The method performs some computations and, optionally, 
      returns a value. A
      method invocation is an expression that is evaluated by the Java
      interpreter. Because method invocations can have side effects,
      however, they can also be used as expression statements. </p>

<p>
<a name="INDEX-357"></a>

      You already know how to define the body of a method; it is simply
      an arbitrary sequence of statements enclosed within curly braces. What is more interesting about a method is its
      <em class="emphasis">signature</em>. The signature specifies:
      </p>
<ul>
<li>
<p>	    The name of the method
	  </p>
</li>
<li>
<p>	    The type and name of each of the parameters used by
	    the method
	  </p>
</li>
<li>
<p>	    The type of the value returned by the method
	  </p>
</li>
<li>
<p>	    The exception types the method can throw
	  </p>
</li>
<li>
<p>	    Various method modifiers that provide additional
	    information about the method
	  </p>
</li>
</ul>
<p>      A method signature defines everything you need to know about a
      method before calling it. It is the method
      <em class="emphasis">specification</em> and defines the API
      for the method. The reference
      section of this book is essentially a list of method signatures
      for all publicly accessible methods of all publicly
      accessible classes of the Java platform. In order to use the
      reference section of this book, you need to know how to read a method
      signature. And, in order to write Java programs, you need to know how
      to define your own methods, each of which begins with a method
      signature. </p>
<p>      A method signature looks like this:
</p>
<blockquote>
<pre class="programlisting">
<em class="replaceable">modifiers</em> <em class="replaceable">type</em> <em class="replaceable">name</em> ( <em class="replaceable">paramlist</em> ) [ throws <em class="replaceable">exceptions</em> ]</pre>
</blockquote>
<p>
      The signature (the method specification) is followed by the method
      body (the method implementation), which is simply a sequence of
      Java statements enclosed in curly braces. In certain cases
      (described in <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3, "Object-Oriented Programming in Java"</a>), the implementation
      is omitted, and the method body is replaced with a single
      semicolon. </p>
<p>      Here are some example method definitions. The
      method bodies have been omitted, so we can focus on the signatures:
</p>
<blockquote>
<pre class="programlisting">public static void main(String[] args) { ... }
public final synchronized int indexOf(Object element, int startIndex) { ... }
double distanceFromOrigin() { ... }
static double squareRoot(double x) throws IllegalArgumentException { ... }
protected abstract String readText(File f, String encoding)
          throws FileNotFoundException, UnsupportedEncodingException;</pre>
</blockquote>
<p>
<em class="replaceable">modifiers</em> is zero or more special
      modifier keywords, separated from each other by spaces. A method
      might be declared with the <tt class="literal">public</tt> and
      <tt class="literal">static</tt> modifiers, for example. Other valid
      method modifiers are <tt class="literal">abstract</tt>,
      <tt class="literal">final</tt>, <tt class="literal">native</tt>,
      <tt class="literal">private</tt>, <tt class="literal">protected</tt>, and
      <tt class="literal">synchronized</tt>. The meanings of these modifiers
      are not important here; they are discussed in <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3, "Object-Oriented Programming in Java"</a>. </p>
<p>
<a name="INDEX-358"></a>

      The <em class="replaceable">type</em> in a method signature
      specifies the return type of the method. If the method returns a
      value, this is the name of a primitive type, an array type,
      or a class. If the method does not return a value, 
      <em class="replaceable">type</em> must be <tt class="literal">void</tt>. A <em class="emphasis">constructor</em> is a special type of method
      used to initialize newly created objects. As we'll see in <a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm">Chapter 3, "Object-Oriented Programming in Java"</a>, constructors are defined just like
      methods, except that their signatures do not include this
      <em class="replaceable">type</em> specification. </p>
<p>      The <em class="replaceable">name</em> of a method follows the
      specification of its modifiers and type. Method names, like
      variable names, are Java identifiers and, like all Java identifiers,
      can use any characters of the Unicode character set. It is legal
      (and sometimes useful) to define more than one method with the
      same name, as long as each version of the method has a
      different parameter list. Defining multiple methods with the same
      name is called <em class="emphasis">method overloading</em>. The
      <tt class="literal">System.out.println()</tt> method we've seen so much
      of is an overloaded method. There is one method by this name that
      prints a string and other methods by the same name that
      print the values of the various primitive types. The Java compiler
      decides which method to call based on the type of the argument
      passed to the method. </p>
<p>      When you are defining a method, the name of the method is always followed
      by the method's parameter list, which must be enclosed in
      parentheses. The parameter list defines zero or more arguments
      that are passed to the method. The parameter specifications,
      if there are any, each consist of a type and a name and are
      separated from each other by commas (if there are multiple parameters). When a method is invoked, the argument values it is passed must
      match the number, type, and order of the parameters specified in
      this method signature line. The values passed need not have
      exactly the same type as specified in the signature, but they must
      be convertible to those types without casting. C and C++
      programmers should note that when a Java method expects no
      arguments, its parameter list is simply <tt class="literal">()</tt>, not
      <tt class="literal">(void)</tt>. </p>
<p>      The final part of a method signature is the
      <tt class="literal">throws</tt> clause, which I first described when
      we discussed the <tt class="literal">throw</tt> statement. If a method
      uses the <tt class="literal">throw</tt> statement to throw a checked
      exception, or if it calls some other method that throws a checked
      exception and does not catch or handle that exception, 
      the method must declare that it can throw that exception. If a
      method can throw one or more checked exceptions, it specifies this
      by placing the <tt class="literal">throws</tt> keyword after the
      argument list and following it by the name of the exception class
      or classes it can throw. If a method does not throw any
      exceptions, it does not use the <tt class="literal">throws</tt> keyword. If a method throws more than one type of exception, separate the
      names of the exception classes from each other with commas.
<a name="INDEX-359"></a>
</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_06.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_06.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch02_08.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_08.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.6. Statements</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">2.8. Classes and Objects</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
