<html>
<head>
<title>Threads (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Threads">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch04_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch04_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch04_01.htm">Chapter 4: The Java Platform</a></td><td align="right" valign="top" width="172"><a href="ch04_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch04_09.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">4.8. Threads</h2>
<p>
<a name="INDEX-707"></a><a name="INDEX-708"></a><a name="INDEX-709"></a><a name="INDEX-710"></a><a name="INDEX-711"></a>

      Java makes it easy to 
      define and work with multiple threads of execution within a 
      program. <tt class="literal">java.lang.Thread</tt> is the
      fundamental thread class in the Java API. There are two ways to define a
      thread. One is to subclass <tt class="literal">Thread</tt>, override
      the <tt class="literal">run()</tt> method, and then instantiate your
      <tt class="literal">Thread</tt> subclass. The other is to define a
      class that implements the <tt class="literal">Runnable</tt> method
      (i.e., define a <tt class="literal">run()</tt> method) and then pass
      an instance of this <tt class="literal">Runnable</tt> object to the
      <tt class="literal">Thread()</tt> constructor. In either case, the
      result is a <tt class="literal">Thread</tt> object, where the
      <tt class="literal">run()</tt> method is the body of the thread. When you call the <tt class="literal">start()</tt> method of the
      <tt class="literal">Thread</tt> object, the interpreter creates a 
      new thread to execute the <tt class="literal">run()</tt> method. This new thread continues to run until the
      <tt class="literal">run()</tt> method exits, at which point it
      ceases to exist. Meanwhile, the original
      thread continues running itself, starting with the
      statement following the <tt class="literal">start()</tt> method. The
      following code demonstrates:
</p>
<blockquote>
<pre class="programlisting">final List list;  // Some long unsorted list of objects; initialized elsewhere

/** A Thread class for sorting a List in the background */
class BackgroundSorter extends Thread {
  List l;
  public BackgroundSorter(List l) { this.l = l; }    // Constructor
  public void run() { Collections.sort(l); }         // Thread body
}

// Create a BackgroundSorter thread 
Thread sorter = new BackgroundSorter(list);
// Start it running; the new thread runs the run() method above, while 
// the original thread continues with whatever statement comes next. 
sorter.start();  

// Here's another way to define a similar thread
Thread t = new Thread(new Runnable() {          // Create a new thread
  public void run() { Collections.sort(list); } // to sort the list of objects.
});
t.start();                                      // Start it running</pre>
</blockquote>
<p>
</p>
<p>
<a name="INDEX-712"></a>

      Threads can run at different priority levels. A thread at a given
      priority level does not run unless there are no higher-priority
      threads waiting to run. Here is some code you can use
      when working with thread priorities:
</p>
<blockquote>
<pre class="programlisting">// Set a thread t to lower-than-normal priority
t.setPriority(Thread.NORM_PRIORITY-1);

// Set a thread to lower priority than the current thread
t.setPriority(Thread.currentThread().getPriority() - 1);

// Threads that don't pause for I/O should explicitly yield the CPU 
// to give other threads with the same priority a chance to run. 
Thread t = new Thread(new Runnable() {
  public void run() {
    for(int i = 0; i &lt; data.length; i++) {  // Loop through a bunch of data
      process(data[i]);                     // Process it
      if ((i % 10) == 0)                    // But after every 10 iterations,
        Thread.yield();                     // pause to let other threads run. 
    }
  }
});</pre>
</blockquote>
<p>
</p>
<p>
<a name="INDEX-713"></a><a name="INDEX-714"></a><a name="INDEX-715"></a><a name="INDEX-716"></a>

      Often, threads are used to perform some kind of repetitive
      task at a fixed interval. This is particularly true when doing
      graphical programming that involves animation or similar
      effects:
</p>
<blockquote>
<pre class="programlisting">public class Clock extends Thread {
  java.text.DateFormat f =      // How to format the time for this locale
    java.text.DateFormat.getTimeInstance(java.text.DateFormat.MEDIUM);
  boolean keepRunning = true;

  public Clock() {         // The constructor
    setDaemon(true);       // Daemon thread: interpreter can exit while it runs
    start();               // This thread starts itself
  }

  public void run() {      // The body of the thread
    while(keepRunning) {   // This thread runs until asked to stop
      String time = f.format(new java.util.Date()); // Current time
      System.out.println(time);                     // Print the time
      try { Thread.sleep(1000); }                   // Wait 1000 milliseconds
      catch (InterruptedException e) {}             // Ignore this exception 
    }
  }

  // Ask the thread to stop running
  public void pleaseStop() { keepRunning = false; }
}</pre>
</blockquote>
<p>
</p>
<p>
<a name="INDEX-717"></a><a name="INDEX-718"></a><a name="INDEX-719"></a>

      Notice the <tt class="literal">pleaseStop()</tt> method in the previous
      example. You can forcefully terminate a thread by calling its
      <tt class="literal">stop()</tt> method, but this method has been
      deprecated because a thread that is forcefully stopped can leave
      objects it is manipulating in an inconsistent state. If you need
      a thread that can be stopped, you should define a method such as
      <tt class="literal">pleaseStop()</tt> that stops the thread 
      in a controlled way. </p>
<p>
<a name="INDEX-720"></a><a name="INDEX-721"></a>

      In Java 1.3, the <tt class="literal">java.util.Timer</tt> and
      <tt class="literal">java.util.TimerTask</tt> classes make it even easier
      to run repetitive tasks. Here is some code that behaves much like
      the previous <tt class="literal">Clock</tt> class:
</p>
<blockquote>
<pre class="programlisting">import java.util.*;

// How to format the time for this locale
final java.text.DateFormat timeFmt =         
  java.text.DateFormat.getTimeInstance(java.text.DateFormat.MEDIUM);
// Define the time-display task
TimerTask displayTime = new TimerTask() {
  public void run() { System.out.println(timeFmt.format(new Date())); }
};
// Create a timer object to run the task (and possibly others)
Timer timer = new Timer();
// Now schedule that task to be run every 1000 milliseconds, starting now
Timer.schedule(displayTime, 0, 1000);
// To stop the time-display task
displayTime.cancel();</pre>
</blockquote>
<p>
</p>

<p>
<a name="INDEX-722"></a>

      Sometimes one thread needs to stop and wait for
      another thread to complete. You can accomplish this with the
      <tt class="literal">join()</tt> method:

</p>
<blockquote>
<pre class="programlisting">List list;  // A long list of objects to be sorted; initialized elsewhere

// Define a thread to sort the list: lower its priority, so it only runs 
// when the current thread is waiting for I/O, and then start it running. 
Thread sorter = new BackgroundSorter(list);               // Defined earlier
sorter.setPriority(Thread.currentThread.getPriority()-1); // Lower priority
sorter.start();                                           // Start sorting

// Meanwhile, in this original thread, read data from a file
byte[] data = readData();  // Method defined elsewhere

// Before we can proceed, we need the list to be fully sorted, so
// we've got to wait for the sorter thread to exit, if it hasn't already. 
sorter.join();</pre>
</blockquote>
<p>
</p>
<p>
<a name="INDEX-723"></a><a name="INDEX-724"></a><a name="INDEX-725"></a><a name="INDEX-726"></a><a name="INDEX-727"></a>

      When using multiple threads, you must be very careful
      if you allow more than one thread to access the same data
      structure. Consider what would happen if one thread was trying
      to loop through the elements of a <tt class="literal">List</tt> while
      another thread was sorting those elements. Preventing this
      problem is called <em class="emphasis">thread</em><em class="emphasis">synchronization</em> and is one of the
      central problems of multithreaded computing. The basic technique
      for preventing two threads from accessing the same object at the
      same time is to require a thread to obtain a lock on the
      object before the thread can modify it. While any one thread holds the
      lock, another thread that requests the lock has to wait until the
      first thread is done and releases the lock. Every Java object has the fundamental ability to provide such
      a locking capability. </p>
<p>
<a name="INDEX-728"></a>

      The easiest way to keep objects thread-safe is to declare any
      sensitive methods <tt class="literal">synchronized</tt>. A thread must
      obtain a lock on an object before it can execute any of its
      <tt class="literal">synchronized</tt> methods, which means that no other
      thread can execute any other <tt class="literal">synchronized</tt> 
      method at the same time. (If a <tt class="literal">static</tt> method is declared
      <tt class="literal">synchronized</tt>, the thread must obtain a
      lock on the class, and this works in the same manner.)  
      To do finer-grained locking, you can specify
      <tt class="literal">synchronized</tt> blocks of code that hold a lock
      on a specified object for a short time:
</p>
<blockquote>
<pre class="programlisting">// This method swaps two array elements in a synchronized block
public static void swap(Object[] array, int index1, int index2) {
  synchronized(array) {
    Object tmp = array[index1];
    array[index1] = array[index2];
    array[index2] = tmp;
  }
}

// The Collection, Set, List, and Map implementations in java.util do
// not have synchronized methods (except for the legacy implementations
// Vector and Hashtable). When working with multiple threads, you can
// obtain synchronized wrapper objects. 
List synclist = Collections.synchronizedList(list);
Map syncmap = Collections.synchronizedMap(map);</pre>
</blockquote>
<p>
</p>
<p>
<a name="INDEX-729"></a>


      When you are synchronizing threads, you must be careful to avoid
      <em class="emphasis">deadlock</em>, which occurs when two threads end
      up waiting for each other to release a lock they need. Since neither can proceed, neither one can release the lock it
      holds, and they both stop running:
</p>
<blockquote>
<pre class="programlisting">// When two threads try to lock two objects, deadlock can occur unless
// they always request the locks in the same order.
final Object resource1 = new Object();   // Here are two objects to lock
final Object resource2 = new Object();
Thread t1 = new Thread(new Runnable() {  // Locks resource1 then resource2
  public void run() {
    synchronized(resource1) { 
      synchronized(resource2) { compute(); }
    }
  }
});

Thread t2 = new Thread(new Runnable() {  // Locks resource2 then resource1
  public void run() {
    synchronized(resource2) { 
      synchronized(resource1) { compute(); }
    }
  }
});

t1.start();  // Locks resource1
t2.start();  // Locks resource2 and now neither thread can progress!</pre>
</blockquote>
<p>
</p>
<p>
<a name="INDEX-730"></a><a name="INDEX-731"></a><a name="INDEX-732"></a>

      Sometimes a thread needs to stop running and wait until some kind
      of event occurs, at which point it is told to continue running. This is done
      with the <tt class="literal">wait()</tt> and <tt class="literal">notify()</tt>
      methods. These aren't methods of the <tt class="literal">Thread</tt>
      class, however; they are methods of <tt class="literal">Object</tt>. Just as every Java object has a lock associated with it, every
      object can maintain a list of waiting threads. When a thread
      calls the <tt class="literal">wait()</tt> method of an object, it is
      added to the list of waiting threads for that object and stops
      running. When another thread calls the
      <tt class="literal">notify()</tt> method of the same object, the object
      wakes up one of the waiting threads and allows it to continue
      running:
</p>
<blockquote>
<pre class="programlisting">/** 
 * A queue. One thread calls push() to put an object on the queue. 
 * Another calls pop() to get an object off the queue. If there is no
 * data, pop() waits until there is some, using wait()/notify(). 
 * wait() and notify() must be used within a synchronized method or
 * block. 
 */
import java.util.*;

public class Queue {
  LinkedList q = new LinkedList();  // Where objects are stored
  public synchronized void push(Object o) {
    q.add(o);      // Append the object to the end of the list
    this.notify(); // Tell waiting threads that data is ready
  }
  public synchronized Object pop() {
    while(q.size() == 0) {
      try { this.wait(); }
      catch (InterruptedException e) { /* Ignore this exception */ }
    }
    return q.remove(0);
  }
}</pre>
</blockquote>
<p>
<a name="INDEX-733"></a>
</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_07.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch04_07.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch04_09.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch04_09.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.7. Types, Reflection, and Dynamic Loading</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">4.9. Files and Directories</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
