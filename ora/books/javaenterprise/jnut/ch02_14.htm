<html>
<head>
<title>Differences Between C and Java (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Differences Between C and Java">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_13.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_13.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch02_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_01.htm">Chapter 2: Java Syntax

from the Ground Up</a></td><td align="right" valign="top" width="172"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">2.14. Differences Between C and Java</h2>
<p>
<a name="INDEX-411"></a><a name="INDEX-412"></a><a name="INDEX-413"></a><a name="INDEX-414"></a>

      If you are a C or C++ programmer, you should 
      have found much of the syntax of
      Java--particularly at the level of operators and 
      statements--to be
      familiar. Because Java and C are so similar in some ways, it is
      important for C and C++ programmers to understand where the
      similarities end. There are a number of important differences
      between C and Java, which are summarized in the following list:
    </p>
<dl>
<dt>
<b>No preprocessor</b>
</dt>
<dd>
<p>	    Java does not include a preprocessor and does not define
	    any analogs of the <tt class="literal">#define</tt>,
	    <tt class="literal">#include</tt>, and <tt class="literal">#ifdef</tt>
	    directives. Constant definitions are replaced with
	    <tt class="literal">static</tt><tt class="literal">final</tt> fields in
	    Java. (See the <tt class="literal">java.lang.Math.PI</tt> field
	    for an example.) Macro definitions are not available in
	    Java, but advanced compiler technology and inlining has made
	    them less useful. Java does not require an
	    <tt class="literal">#include</tt> directive because Java has no
	    header files. Java class files contain both the class API
	    and the class implementation, and the compiler reads API
	    information from class files as necessary. Java lacks
	    any form of conditional compilation, but its cross-platform
	    portability means that this feature is very rarely needed. </p>
</dd>
<dt>
<b>No global variables</b>
</dt>
<dd>
<p>	    Java defines a very clean namespace. Packages contain
	    classes, classes contain fields and methods, and methods
	    contain local variables. But there are no global
	    variables in Java, and, thus, there is
	    no possibility of namespace collisions
	    among those variables. </p>
</dd>
<dt>
<b>Well-defined primitive type sizes</b>
</dt>
<dd>
<p>	    All the primitive types in Java have well-defined sizes. In
	    C, the size of <tt class="literal">short</tt>,
	    <tt class="literal">int</tt>, and <tt class="literal">long</tt> types is
	    platform-dependent, which hampers portability. </p>
</dd>
<dt>
<b>No pointers</b>
</dt>
<dd>
<p>	    Java classes and arrays are reference types, and references
	    to objects and arrays are akin to pointers in C. Unlike C
	    pointers, however, references in Java are entirely opaque. There is no way to convert a reference to a primitive type,
	    and a reference cannot be incremented or decremented. There
	    is no address-of operator like <tt class="literal">&amp;</tt>,
	    dereference operator like <tt class="literal">*</tt> or
	    <tt class="literal">&minus;&gt;</tt>, or 
	    <tt class="literal">sizeof</tt> operator. Pointers are a
	    notorious source of bugs. Eliminating them simplifies the
	    language and makes Java programs more robust and secure. </p>
</dd>
<dt>
<b>Garbage collection</b>
</dt>
<dd>
<p>	    The Java Virtual Machine performs garbage collection so that
	    Java programmers do not have to explicitly manage the memory
	    used by all objects and arrays. This feature eliminates
	    another entire category of common bugs and all but
	    eliminates memory leaks from Java programs. </p>
</dd>
<dt>
<b>No goto statement</b>
</dt>
<dd>
<p>
	    Java doesn't support a <tt class="literal">goto</tt>
	    statement. Use of <tt class="literal">goto</tt> except in
	    certain well-defined circumstances is regarded as
	    poor programming practice. Java adds exception handling
	    and labeled <tt class="literal">break</tt> and
	    <tt class="literal">continue</tt> statements to the flow-control
	    statements offered by C. These are a good
	    substitute for <tt class="literal">goto</tt>.
 </p>
</dd>
<dt>
<b>Variable declarations anywhere</b>
</dt>
<dd>
<p>	    C requires local variable declarations to be made at the
	    beginning of a method or block, while Java allows them anywhere
	    in a method or block. Many programmers prefer to keep all their
	    variable declarations grouped together at the top of a
	    method, however. </p>
</dd>
<dt>
<b>Forward references</b>
</dt>
<dd>
<p>	    The Java compiler is smarter than the C compiler, in that it
	    allows methods to be invoked before they are defined. This
	    eliminates the need to declare functions in a header file
	    before defining them in a program file, as is done in C. </p>
</dd>
<dt>
<b>Method overloading</b>
</dt>
<dd>
<p>	    Java programs can define multiple methods with the same
	    name, as long as the methods have different parameter lists. </p>
</dd>
<dt>
<b>No struct and union types</b>
</dt>
<dd>
<p>	    Java doesn't support C <tt class="literal">struct</tt> and
	    <tt class="literal">union</tt> types. A Java
	    <tt class="literal">class</tt> can be thought of as an enhanced
	    <tt class="literal">struct</tt>, however. </p>
</dd>
<dt>
<b>No enumerated types</b>
</dt>
<dd>
<p>	    Java doesn't support the <tt class="literal">enum</tt> keyword
	    used in C to define types that consist of fixed sets of named
	    values. This is surprising for a strongly typed language
	    like Java, but there are ways to simulate this feature with
	    object constants. </p>
</dd>
<dt>
<b>No bitfields</b>
</dt>
<dd>
<p>	    Java doesn't support the (infrequently used) ability of C
	    to specify the number of individual bits occupied by fields
	    of a <tt class="literal">struct</tt>. </p>
</dd>
<dt>
<b>No typedef</b>
</dt>
<dd>
<p>	    Java doesn't support the <tt class="literal">typedef</tt> keyword
	    used in C to define aliases for type names. Java's lack of
	    pointers makes its type-naming scheme simpler and more
	    consistent than C's, however, so many of the common uses of
	    <tt class="literal">typedef</tt> are not really necessary in Java. </p>
</dd>
<dt>
<b>No method pointers</b>
</dt>
<dd>
<p>	    C allows you to store the address of a function in a
	    variable and pass this function pointer to other
	    functions. You cannot do this with Java methods, but you
	    can often achieve similar results by passing an object
	    that implements a particular interface. Also, a Java method
	    can be represented and invoked through a
	    <tt class="literal">java.lang.reflect.Method</tt> object. </p>
</dd>
<dt>
<b>No variable-length argument lists</b>
</dt>
<dd>
<p>	    Java doesn't allow you to define methods such as C's
	    <tt class="literal">printf()</tt> that take a variable number of
	    arguments. Method overloading allows you to simulate C
	    varargs functions for simple cases, but there's no
	    general replacement for this feature.
<a name="INDEX-415"></a>
</p>
</dd>
</dl>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch02_13.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch02_13.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch03_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch03_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">2.13. Defining and Running Java Programs</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">3. Object-Oriented Programming in Java</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
