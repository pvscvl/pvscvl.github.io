<html>
<head>
<title>Java Documentation Comments (Java in a Nutshell)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css" webstripperlinkwas="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="David Flanagan">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="1-56592-487-8E" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Java Documentation Comments">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home"></a>
<map name="banner-map"><map name="banner-map"> <area shape="rect" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm" alt="Java Enterprise in a Nutshell"> <area shape="rect" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/jobjects/fsearch.htm" alt="Search this book"> </map>
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch07_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="ch07_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch07_01.htm">Chapter 7: Java Programming and

Documentation Conventions</a></td><td align="right" valign="top" width="172"><a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch08_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY --><h2 class="sect1">7.3. Java Documentation Comments</h2>
<p>
<a name="INDEX-1041"></a><a name="INDEX-1042"></a>



      Most ordinary comments within Java code explain the implementation
      details of that code. In contrast, 
      the Java language specification defines a special
      type of comment known as a doc comment that serves to document the
      API of your code. A doc comment is an ordinary multiline
      comment that begins with <tt class="literal">/**</tt> (instead of the
      usual <tt class="literal">/*</tt>) and ends with <tt class="literal">*/</tt>. A doc comment appears immediately before a class, interface, method,
      or field definition and contains documentation for that class,
      interface, method, or field. The documentation can include simple
      HTML formatting tags and other special keywords
      that provide additional information. Doc comments are ignored by
      the compiler, but they can be extracted and automatically turned
      into online HTML documentation by the <em class="emphasis">javadoc</em>
      program. (See <a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch08_01.htm">Chapter 8, "Java Development Tools"</a>, for more
      information about <em class="emphasis">javadoc</em>.)  Here is
      an example class that contains appropriate doc comments:
</p>
<blockquote>
<pre class="programlisting">/**
 * This immutable class represents &lt;i&gt;complex
 * numbers&lt;/i&gt;. 
 *
 * @author David Flanagan
 * @version 1.0
 */
public class Complex {
  /**
   * Holds the real part of this complex number. 
   * @see #y
   */
  protected double x;

  /**
   * Holds the imaginary part of this complex number. 
   * @see #x
   */
  protected double y;

  /**
   * Creates a new Complex object that represents the complex number
   * x+yi. 
   * @param x The real part of the complex number. 
   * @param y The imaginary part of the complex number. 
   */
  public Complex(double x, double y) {
    this.x = x;
    this.y = y;
  }

  /**
   * Adds two Complex objects and produces a third object that represents
   * their sum. * @param c1 A Complex object
   * @param c2 Another Complex object
   * @return  A new Complex object that represents the sum of 
   *          &lt;code&gt;c1&lt;/code&gt; and
   * &lt;code&gt;c2&lt;/code&gt;. 
   * @exception java.lang.NullPointerException 
   *            If either argument is &lt;code&gt;null&lt;/code&gt;. 
   */
  public Complex add(Complex c1, Complex c2) {
    return new Complex(c1.x + c2.x, c1.y + c2.y);
  }
}</pre>
</blockquote>
<h3 class="sect2">7.3.1. Structure of a Doc Comment</h3>
<p>
<a name="INDEX-1043"></a><a name="INDEX-1044"></a><a name="INDEX-1045"></a>

	The body of a doc comment should begin with a one-sentence
	summary of the class, interface, 
	method, or field being documented. This sentence may be displayed by itself, as summary
	documentation, so it should be written to stand on its own. The initial sentence can be followed by any number of other
	sentences and paragraphs that describe the class, interface,
	method, or
	field. </p>
<p>	After the descriptive paragraphs, a doc comment can
	contain any number of other paragraphs, each of which begins
	with a special doc-comment tag, such as
	<tt class="literal">@author</tt>, <tt class="literal">@param</tt>, or
	<tt class="literal">@returns</tt>. These tagged paragraphs provide
	specific information about the class, interface, method, or
	field that the <em class="emphasis">javadoc</em> program 
	displays in a standard way. The full set of doc-comment tags is
	listed in the next section. </p>
<p>
<a name="INDEX-1046"></a><a name="INDEX-1047"></a><a name="INDEX-1048"></a><a name="INDEX-1049"></a><a name="INDEX-1050"></a>

	The descriptive material in a doc comment can 
	contain simple HTML markup
	tags, such as such as <tt class="literal">&lt;I&gt;</tt> 
	for emphasis, <tt class="literal">&lt;CODE&gt;</tt> for
	class, method, and field names, and <tt class="literal">&lt;PRE&gt;</tt> 
	for multiline
	code examples. It can also contain <tt class="literal">&lt;P&gt;</tt>
	tags to break the
	description into separate paragraphs and 
	<tt class="literal">&lt;UL&gt;</tt>, <tt class="literal">&lt;LI&gt;</tt>,
	and related tags to display bulleted lists and similar
	structures. Remember, however, that the material you write
	is embedded within a larger, more complex HTML document. For this reason, doc comments should not contain major
	structural HTML tags, such as 
	<tt class="literal">&lt;H2&gt;</tt> or <tt class="literal">&lt;HR&gt;</tt>,
	 that might
	interfere with the structure of the larger document. </p>
<p>
<a name="INDEX-1051"></a><a name="INDEX-1052"></a>

	Avoid the use of the <tt class="literal">&lt;A&gt;</tt> 
	tag to include hyperlinks or
	cross references in your doc comments. Instead, use the special
	<tt class="literal">{@link}</tt> doc-comment tag, which, unlike the other
	doc-comment tags, can appear anywhere within a doc comment. As
	described in the next section, the 
	<tt class="literal">{@link}</tt> tag allows you to
	specify hyperlinks to other classes, interfaces,
	methods, and fields without
	knowing the HTML-structuring conventions and filenames used by
	<em class="emphasis">javadoc</em>. </p>
<p>	If you want to include an image in a doc comment, place the
	image file in a <em class="emphasis">doc-files</em> subdirectory of
	the source code directory. Give the image the same name as the
	class, with an integer suffix. For example, the second image
	that appears in the doc comment for a class named
	<tt class="literal">Circle</tt> can be included with this HTML tag:
</p>
<blockquote>
<pre class="programlisting">&lt;IMG src="doc-files/Circle-2.gif"&gt;</pre>
</blockquote>
<p>
<a name="INDEX-1053"></a><a name="INDEX-1054"></a><a name="INDEX-1055"></a><a name="INDEX-1056"></a>

	Because the lines of a doc comment are embedded within a Java
	comment, any leading spaces and asterisks (<tt class="literal">*</tt>)
	are stripped from each line of the comment before processing. Thus, you don't need to worry about the asterisks appearing in the
	generated documentation or about the indentation of the comment
	affecting the indentation of code examples included within the
	comment with a <tt class="literal">&lt;PRE&gt;</tt> tag. </p>
<h3 class="sect2">7.3.2. Doc-Comment Tags</h3>
<p>
<a name="INDEX-1057"></a>


	As I mentioned earlier, <em class="emphasis">javadoc</em> recognizes a
	number of special tags, each of which begins with an
	<tt class="literal">@</tt> character. These doc-comment tags allow
	you to encode specific information into your comments in a
	standardized way, and they allow <em class="emphasis">javadoc</em>
	to choose the appropriate output format for that
	information. For example, the <tt class="literal">@param</tt> tag
	lets you specify the name and meaning of a single parameter
	for a method. <em class="emphasis">javadoc</em> can extract this
	information and display it using an HTML 
	<tt class="literal">&lt;DL&gt;</tt> list, 
	an HTML <tt class="literal">&lt;TABLE&gt;</tt>, or however it sees fit. </p>
<p>	The doc-comment tags recognized by <em class="emphasis">javadoc</em>
	are the following; a doc comment should typically use these
	tags in the order listed here:
      </p>
<dl>
<dt>
<b><tt class="literal">@author</tt> <em class="replaceable">name</em></b>
</dt>
<dd>
<p>
<a name="INDEX-1058"></a><a name="INDEX-1059"></a>

	      Adds an "Author:" entry that contains the specified
	      name. This tag should be used for
	      every class or interface definition, but must not be used
	      for individual methods and fields. 


If a class has
	      multiple authors, use multiple <tt class="literal">@author</tt>
	      tags on adjacent lines. For example:
</p>
<blockquote>
<pre class="programlisting">@author David Flanagan
@author Paula Ferguson</pre>
</blockquote>
<p>
              List the authors in chronological
	      order, with the original author first. If the author is
	      unknown, you can use "unascribed". <em class="emphasis">javadoc</em> does not output authorship
	      information unless the <tt class="literal">-author</tt>
	      command-line argument is specified. </p>
</dd>
<dt>
<b><tt class="literal">@version</tt> <em class="replaceable">text</em></b>
</dt>
<dd>
<p>
<a name="INDEX-1060"></a><a name="INDEX-1061"></a>

	      Inserts a "Version:" entry that contains the specified
	      text. For example:
</p>
<blockquote>
<pre class="programlisting">@version 1.32, 08/26/99</pre>
</blockquote>
<p>
              This tag should be included in
	      every class and interface doc comment, but cannot be used
	      for individual methods and fields. This tag is often used
	      in conjunction with the automated version-numbering
	      capabilities of a version-control system, such as SCCS,
	      RCS, or CVS. <em class="emphasis">javadoc</em> does not
	      output version information in its generated documentation
	      unless the <tt class="literal">-version</tt> command-line
	      argument is specified. </p>
</dd>
<dt>
<b><tt class="literal">@param</tt> <em class="replaceable">parameter-name</em> <em class="replaceable">description</em></b>
</dt>
<dd>
<p>
<a name="INDEX-1062"></a><a name="INDEX-1063"></a>

	      Adds the specified parameter and its description
	      to the "Parameters:" section of the current method. The
	      doc comment for a method or constructor must contain one
	      <tt class="literal">@param</tt> tag for each parameter the
	      method expects. These tags should appear in the same
	      order as the parameters specified by the method. The
	      tag cannot be used in class, interface, or field doc
	      comments. You are encouraged to use phrases and sentence
	      fragments where possible, to keep the descriptions brief. However, if a parameter requires detailed documentation,
	      the description can wrap onto multiple lines and
	      include as much text as necessary. You can also use spaces to
	      align the descriptions with each other. For example:
</p>
<blockquote>
<pre class="programlisting">@param o      the object to insert
@param index  the position to insert it at </pre>
</blockquote>
<p>
</p>
</dd>
<dt>
<b><tt class="literal">@return</tt> <em class="replaceable">description</em></b>
</dt>
<dd>
<p>
<a name="INDEX-1064"></a><a name="INDEX-1065"></a>

	      Inserts a "Returns:" section that contains the specified
	      description. This tag should appear
	      in every doc comment for a method, unless the method
	      returns <tt class="literal">void</tt> or is a constructor. The tag must
	      not appear in class, interface, or field doc comments. The description can be as long as necessary, but consider 
	      using a sentence fragment to keep it short. For example:
</p>
<blockquote>
<pre class="programlisting">@return &lt;code&gt;true&lt;/code&gt; if the insertion is successful, or
        &lt;code&gt;false&lt;/code&gt; if the list already contains the
        specified object. </pre>
</blockquote>
<p>
</p>
</dd>
<dt>
<b><tt class="literal">@exception</tt> <em class="replaceable">full-classname</em> <em class="replaceable">description</em></b>
</dt>
<dd>
<p>
<a name="INDEX-1066"></a><a name="INDEX-1067"></a>

	      Adds a "Throws:" entry that contains the specified exception
	      name and description. A
	      doc comment for a method or constructor should contain an
	      <tt class="literal">@exception</tt> tag for every checked
	      exception that appears in its <tt class="literal">throws</tt>
	      clause. For example:
</p>
<blockquote>
<pre class="programlisting">@exception java.io.FileNotFoundException 
           If the specified file could not be found</pre>
</blockquote>
<p>
              The <tt class="literal">@exception</tt> tag can
	      optionally be used to document unchecked exceptions
	      (i.e., subclasses of <tt class="literal">RuntimeException</tt>)
	      the method may throw, when these are exceptions that
	      a user of the method may reasonably want to catch. If
	      a method can throw more than one exception, use 
	      multiple <tt class="literal">@exception</tt>
	      tags on adjacent lines and list the exceptions in
	      alphabetical order. The description can be as short or as
	      long as necessary to describe the significance of the
	      exception. This doc-comment tag cannot be used in class,
	      interface, or field comments. The
	      <tt class="literal">@throws</tt> tag is a synonym for
	      <tt class="literal">@exception</tt>. </p>
</dd>
<dt>
<b><tt class="literal">@throws</tt> <em class="replaceable">full-classname</em> <em class="replaceable">description</em></b>
</dt>
<dd>
<p>
<a name="INDEX-1068"></a><a name="INDEX-1069"></a>

	      This tag is a synonym for
	      <tt class="literal">@exception</tt>. It was introduced in Java 1.2. </p>
</dd>
<dt>
<b><tt class="literal">@see</tt> <em class="replaceable">reference</em></b>
</dt>
<dd>
<p>
<a name="INDEX-1070"></a><a name="INDEX-1071"></a>

	      Adds a "See Also:" entry 
	      that contains the specified reference. This tag can
	      appear in any kind of doc comment. <em class="replaceable">reference</em> can take three different
	      forms. If it begins with a quote character, it is
	      taken to be the name of a book or some other printed
	      resource and is displayed as is. If 
	      <em class="replaceable">reference</em> begins with a &lt;
	      character, it is taken to be an arbitrary HTML
	      hyperlink that uses the <tt class="literal">&lt;A&gt;</tt> 
	      tag and the hyperlink is
	      inserted into the output documentation as is. This form
	      of the <tt class="literal">@see</tt> tag can insert
	      links to other online documents, such as a programmer's
	      guide or user's manual. </p>
<p>	      If <em class="replaceable">reference</em> is not a quoted
	      string or a hyperlink, the <tt class="literal">@see</tt>
	      tag is expected to have the following form:
</p>
<blockquote>
<pre class="programlisting">@see <em class="replaceable">feature</em> <em class="replaceable">label</em>
</pre>
</blockquote>
<p>
	      In this case, <em class="emphasis">javadoc</em>
	      outputs the text specified by
	      <em class="replaceable">label</em> and encodes it as a
	      hyperlink to the specified
	      <em class="replaceable">feature</em>. If
	      <em class="replaceable">label</em> is omitted (as it usually
	      is), <em class="emphasis">javadoc</em> uses the name of
	      the specified <em class="replaceable">feature</em> instead. </p>
<p>
<em class="replaceable">feature</em> can refer to a package,
	      class, interface, method, constructor, or field,
	      using one of the following forms:</p>

	      <dl>
<dt>
<b><em class="replaceable">pkgname</em></b>
</dt>
<dd>
<p>		      A reference to the named package. For example:
</p>
<blockquote>
<pre class="programlisting">@see java.lang.reflect</pre>
</blockquote>
<p>
</p>
</dd>
<dt>
<b><em class="replaceable">pkgname</em><tt class="literal">.</tt><em class="replaceable">classname</em></b>
</dt>
<dd>
<p>		      A reference to a class or interface specified with
		      its full package name. For example:
</p>
<blockquote>
<pre class="programlisting">@see java.util.List</pre>
</blockquote>
<p>
</p>
</dd>
<dt>
<b><em class="replaceable">classname</em></b>
</dt>
<dd>
<p>		      A reference to a class or interface specified
		      without its package name. For example:
</p>
<blockquote>
<pre class="programlisting">@see List</pre>
</blockquote>
<p>
<em class="emphasis">javadoc</em> resolves this
		      reference by searching the current package and
		      the list of imported classes for a class with this
		      name. </p>
</dd>
<dt>
<b><em class="replaceable">classname</em><tt class="literal">#</tt><em class="replaceable">methodname</em></b>
</dt>
<dd>
<p>		      A reference to a named method or constructor
		      within the specified class. For example:
</p>
<blockquote>
<pre class="programlisting">@see java.io.InputStream#reset
@see InputStream#close</pre>
</blockquote>
<p>
                      If the class is
		      specified without its package name, it is
		      resolved as described for 
		      <em class="replaceable">classname</em>. This syntax is
		      ambiguous if the method is overloaded or the
		      class defines a field by the same name. </p>
</dd>
<dt>
<b><em class="replaceable">classname</em><tt class="literal">#</tt><em class="replaceable">methodname</em><tt class="literal">(</tt><em class="replaceable">paramtypes</em><tt class="literal">)</tt></b>
</dt>
<dd>
<p>		      A reference to a method or constructor with the
		      type of its parameters explicitly specified. This
		      form of the <tt class="literal">@see</tt> tag is useful
		      when cross-referencing an overloaded method. For example:
</p>
<blockquote>
<pre class="programlisting">@see InputStream#read(byte[], int, int)</pre>
</blockquote>
<p>
</p>
</dd>
<dt>
<b><tt class="literal">#</tt><em class="replaceable">methodname</em></b>
</dt>
<dd>
<p>		      A reference to a non-overloaded method or
		      constructor in the current class or interface or
		      one of the containing classes, superclasses,
		      or superinterfaces of the current class or
		      interface. Use this concise form to refer to
		      other methods in the same class. For example:
</p>
<blockquote>
<pre class="programlisting">@see #setBackgroundColor</pre>
</blockquote>
<p>
</p>
</dd>
<dt>
<b><tt class="literal">#</tt><em class="replaceable">methodname</em><tt class="literal">(</tt><em class="replaceable">paramtypes</em><tt class="literal">)</tt></b>
</dt>
<dd>
<p>		      A reference to a method or constructor in the
		      current class or interface or one of its
		      superclasses or containing classes. This form
		      works with overloaded methods because it lists the types of the method
		      parameters explicitly. For example:
</p>
<blockquote>
<pre class="programlisting">@see #setPosition(int, int)</pre>
</blockquote>
<p>
</p>
</dd>
<dt>
<b><em class="replaceable">classname</em><tt class="literal">#</tt><em class="replaceable">fieldname</em></b>
</dt>
<dd>
<p>		      A reference to a named field within the specified
		      class. For example:
</p>
<blockquote>
<pre class="programlisting">@see java.io.BufferedInputStream#buf</pre>
</blockquote>
<p>
		      If the class is specified without its
		      package name, it is resolved as described for
		      <em class="replaceable">classname</em>. </p>
</dd>
<dt>
<b><tt class="literal">#</tt><em class="replaceable">fieldname</em></b>
</dt>
<dd>
<p>		      A reference to a field in the current class or
		      interface or one of the containing classes,
		      superclasses, or superinterfaces of the current
		      class or interface. For example:
</p>
<blockquote>
<pre class="programlisting">@see #x</pre>
</blockquote>
<p>
</p>
</dd>
</dl>
	    </dd>
<dt>
<b><tt class="literal">{@link</tt> <em class="replaceable">reference</em><tt class="literal">}</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-1072"></a><a name="INDEX-1073"></a>

	      The <tt class="literal">@link</tt> tag is like the
	      <tt class="literal">@see</tt> tag except that, instead of placing
	      a link to the specified
	      <em class="replaceable">reference</em> in a special "See
	      Also:" section, it inserts the link inline. A
	      <tt class="literal">@link</tt> tag can appear anywhere that HTML
	      text appears in a doc comment. In other words, it can 
	      appear in the initial
	      description of the class, interface, method, or field and 
	      in the descriptions associated with the
	      <tt class="literal">@param</tt>, <tt class="literal">@returns</tt>,
	      <tt class="literal">@exception</tt>, and
	      <tt class="literal">@deprecated</tt> tags. Because the
	      <tt class="literal">@link</tt> tag can appear within arbitrary
	      HTML text, the curly braces are required to delimit it. The <em class="replaceable">reference</em> for the
	      <tt class="literal">@link</tt> tag uses the same syntax as the
	      <tt class="literal">@see</tt> tag documented previously. For example:
</p>
<blockquote>
<pre class="programlisting">@param regexp The regular expression to search for. This string
              argument must follow the syntax rules described for
              {@link RegExpParser}. </pre>
</blockquote>
<p>
</p>
</dd>
<dt>
<b><tt class="literal">@deprecated</tt> <em class="replaceable">explanation</em></b>
</dt>
<dd>
<p>
<a name="INDEX-1074"></a><a name="INDEX-1075"></a>

	      As of Java 1.1, this tag specifies that the following
	      class, interface, method, or field has been deprecated and
	      that its use should be avoided. <em class="emphasis">javadoc</em> adds a prominent "Deprecated"
	      entry to the documentation and includes the specified
	      <em class="replaceable">explanation</em> text. This text
	      should specify when the class or member was deprecated,
	      and, if possible, suggest a replacement class or member
	      and include a link to it. For example:
</p>
<blockquote>
<pre class="programlisting">@deprecated As of Version 3.0, this method is replaced
            by {@link #setColor}. </pre>
</blockquote>
<p>
</p>
<p>	      Although the Java compiler ignores all comments,
	      it does take note of the <tt class="literal">@deprecated</tt>
	      tag in doc comments. When this tag appears, the compiler
	      notes the deprecation in the class file it produces. This
	      allows it to issue warnings for other classes that rely on
	      the deprecated feature. </p>
</dd>
<dt>
<b><tt class="literal">@since</tt> <em class="replaceable">version</em></b>
</dt>
<dd>
<p>
<a name="INDEX-1076"></a><a name="INDEX-1077"></a>

	      Used to specify when the class, interface, method, or
	      field was added to the API. It should be followed by a
	      version number or other version specification. For example:
</p>
<blockquote>
<pre class="programlisting">@since JNUT 3.0</pre>
</blockquote>
<p>
              Every
	      class and interface doc comment should include a
	      <tt class="literal">@since</tt> tag, and any methods or fields
	      added after the initial release of the class or interface
	      should have <tt class="literal">@since</tt> tags in their doc
	      comments. </p>
</dd>
<dt>
<b><tt class="literal">@serial</tt> <em class="replaceable">description</em></b>
</dt>
<dd>
<p>
<a name="INDEX-1078"></a><a name="INDEX-1079"></a>
	      This tag should appear in the doc comment for any field
	      that is part of the serialized state of a
	      <tt class="literal">Serializable</tt> class. For classes that
	      use the default serialization mechanism, this means all
	      fields that are not declared <tt class="literal">transient</tt>,
	      even fields declared <tt class="literal">private</tt>. The
	      <em class="replaceable">description</em> should be a brief
	      description of the field and of its purpose within a
	      serialized object. </p>
</dd>
<dt>
<b><tt class="literal">@serialField</tt> <em class="replaceable">name</em> <em class="replaceable">type</em> <em class="replaceable">description</em></b>
</dt>
<dd>
<p>
<a name="INDEX-1080"></a><a name="INDEX-1081"></a>

	      A <tt class="literal">Serializable</tt> class can define its
	      serialized format by declaring an array of
	      <tt class="literal">ObjectStreamField</tt> objects in a field
	      named <tt class="literal">serialPersistentFields</tt>. For
	      such a class, the doc comment for
	      <tt class="literal">serialPersistentFields</tt> should include
	      a <tt class="literal">@serialField</tt> tag for each element
	      of the array. Each tag specifies the name, type, and
	      description for a particular 
	      field in the serialized state of the
	      class. </p>
</dd>
<dt>
<b><tt class="literal">@serialData</tt> <em class="replaceable">description</em></b>
</dt>
<dd>
<p>
<a name="INDEX-1082"></a><a name="INDEX-1083"></a>

	      A <tt class="literal">Serializable</tt> class can define a
	      <tt class="literal">writeObject()</tt> method to write
	      additional data besides that written by the default
	      serialization mechanism. An
	      <tt class="literal">Externalizable</tt> class defines a
	      <tt class="literal">writeExternal()</tt> method that is
	      responsible for writing the complete state of an object to
	      the serialization stream. The
	      <tt class="literal">@serialData</tt> tag should be used in the
	      doc comments for these <tt class="literal">writeObject()</tt>
	      and <tt class="literal">writeExternal()</tt> methods, and the
	      <em class="replaceable">description</em> should document the
	      serialization format used by the method. </p>
</dd>
<dt>
<b><tt class="literal">@beaninfo</tt> <em class="replaceable">info</em></b>
</dt>
<dd>
<p>
<a name="INDEX-1084"></a><a name="INDEX-1085"></a>

	      This nonstandard tag provides information about
	      JavaBeans components and their methods. This tag is not
	      used by <em class="emphasis">javadoc</em>, but it is
	      apparently used by a tool internal to Sun that extracts
	      information from <tt class="literal">@beaninfo</tt> tags
	      for a class and outputs an appropriate
	      <tt class="literal">java.beans.BeanInfo</tt> class. This tag
	      appears in the source code of the Swing component classes
	      in Java 1.2. A typical usage looks like this:
</p>
<blockquote>
<pre class="programlisting">@beaninfo        bound: true
           description: the background color of this JavaBeans component</pre>
</blockquote>
<p>
</p>
</dd>
</dl>
<h3 class="sect2">7.3.3. Doc Comments for Packages</h3>
<p>
<a name="INDEX-1086"></a><a name="INDEX-1087"></a>


	Documentation comments for classes, interfaces, methods,
	constructors, and fields appear in Java source code immediately
	before the definitions of the features they document. <em class="emphasis">javadoc</em> can also read and display
	summary documentation for packages. Since a package is defined
	in a directory, not in a single file of source code,
	<em class="emphasis">javadoc</em> looks for the package documentation
	in a file named <em class="emphasis">package.html</em> in the
	directory that contains the source code for the classes of the
	package. </p>
<p>
<a name="INDEX-1088"></a><a name="INDEX-1089"></a>

	The <em class="emphasis">package.html</em> file should contain simple
	HTML documentation for the package. It can also contain
	<tt class="literal">@see</tt>, <tt class="literal">@link</tt>,
	<tt class="literal">@deprecated</tt>, and <tt class="literal">@since</tt>
	tags. Since <em class="emphasis">package.html</em>
	is not a file of Java source code, the documentation it contains
	should <em class="emphasis">not</em> be a Java comment (i.e., it 
	should not
	be enclosed within <tt class="literal">/**</tt> and
	<tt class="literal">*/</tt> characters). Finally, any
	<tt class="literal">@see</tt> and <tt class="literal">@link</tt> tags that
	appear in <em class="emphasis">package.html</em> must use
	fully qualified class names. </p>
<p>	In addition to defining a
	<em class="emphasis">package.html</em> file for each package,
	you can also provide high-level documentation for a group of
	packages by defining an <em class="emphasis">overview.html</em> file
	in the source tree for those packages. When
	<em class="emphasis">javadoc</em> is run over that source tree, it
	uses <em class="emphasis">overview.html</em> as the highest
	level overview it displays.
<a name="INDEX-1090"></a><a name="INDEX-1091"></a><a name="INDEX-1092"></a><a name="INDEX-1093"></a><a name="INDEX-1094"></a><a name="INDEX-1095"></a>
</p>

<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch07_02.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch07_02.htm"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch08_01.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/ch08_01.htm"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">7.2. Portability Conventions and Pure Java Rules</td><td align="center" valign="top" width="171"><a href="index/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index/index.htm"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">8. Java Development Tools</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <map name="library-map"> <area shape="rect" coords="-8,-5,72,97" href="../index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/index.htm"> <area shape="rect" coords="75,2,150,109" href="../jenut/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jenut/index.htm"> <area shape="rect" coords="154,0,225,99" href="index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jnut/index.htm"> <area shape="rect" coords="228,3,298,112" href="../jfc/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/jfc/index.htm"> <area shape="rect" coords="306,1,373,124" href="../ebeans/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/ebeans/index.htm"> <area shape="rect" coords="380,2,446,115" href="../servlet/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/servlet/index.htm"> <area shape="rect" coords="452,1,524,101" href="../security/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/security/index.htm"> <area shape="rect" coords="528,2,610,102" href="../dist/index.htm" webstripperlinkwas="http://ext.rlab.cs.nyu.edu/~jsr/oreilly/dist/index.htm"> </map>
</map>

<!-- END OF BODY -->

</body>
</html>
